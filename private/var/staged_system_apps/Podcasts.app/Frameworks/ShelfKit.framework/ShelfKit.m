void sub_6880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

__CFString *ASKMetricsGetCookieString()
{
  void *v0;
  void *v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  __CFString *v7;
  void *i;
  void *v9;
  void *v10;
  unsigned __int8 v11;
  void *v13;
  void *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](NSURL, "URLWithString:", CFSTR("http://www.apple.com/")));
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[ACAccountStore ams_sharedAccountStore](ACAccountStore, "ams_sharedAccountStore"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "ams_activeiTunesAccount"));
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "ams_cookiesForURL:", v0));
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v4)
  {
    v5 = v4;
    v13 = v1;
    v14 = v0;
    v6 = *(_QWORD *)v16;
    v7 = &stru_390F78;
    while (2)
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v16 != v6)
          objc_enumerationMutation(v3);
        v9 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * (_QWORD)i);
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "name", v13, v14, (_QWORD)v15));
        v11 = objc_msgSend(v10, "isEqualToString:", CFSTR("Cookie"));

        if ((v11 & 1) != 0)
        {
          v7 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "value"));
          goto LABEL_11;
        }
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
      if (v5)
        continue;
      break;
    }
LABEL_11:
    v1 = v13;
    v0 = v14;
  }
  else
  {
    v7 = &stru_390F78;
  }

  return v7;
}

id ASKMetricsGetDeviceUserAgent()
{
  void *v0;
  void *v1;

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[AMSProcessInfo currentProcess](AMSProcessInfo, "currentProcess"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[AMSUserAgent userAgentForProcessInfo:](AMSUserAgent, "userAgentForProcessInfo:", v0));

  return v1;
}

__CFString *ASKMetricsGetNetworkConnectionTypeString()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  __CFString *v4;

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[IMNetworkObserver sharedInstance](IMNetworkObserver, "sharedInstance"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v0, "connectionTypeHeader"));

  v3 = objc_opt_class(NSString, v2);
  if ((objc_opt_isKindOfClass(v1, v3) & 1) != 0)
    v4 = v1;
  else
    v4 = CFSTR("unknown");

  return v4;
}

id ASKBuildTypeGetCurrent()
{
  if (ASKBuildTypeGetCurrent_onceToken != -1)
    dispatch_once(&ASKBuildTypeGetCurrent_onceToken, &__block_literal_global_0);
  return (id)ASKBuildTypeGetCurrent_buildType;
}

uint64_t ASKBuildTypeIsUnitTesting()
{
  return 0;
}

id ASKBuildTypeIsAnyOf(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "containsObject:", a1);
}

void sub_9134(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_9260(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_9824(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_994C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_9A7C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void ASKLog(void *a1, os_log_type_t a2)
{
  id v3;
  void *v4;
  NSObject *v5;
  int v6;
  id v7;

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig ask_generalLogConfig](AMSLogConfig, "ask_generalLogConfig"));
  if (!v4)
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](AMSLogConfig, "sharedConfig"));
  v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "OSLogObject"));
  if (os_log_type_enabled(v5, a2))
  {
    v6 = 138412290;
    v7 = v3;
    _os_log_impl(&dword_0, v5, a2, "%@", (uint8_t *)&v6, 0xCu);
  }

}

void sub_A298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_A67C(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 24));
  _Unwind_Resume(a1);
}

void sub_A79C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_A8C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_A9BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_AAD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

NSURL *ASKFinanceTypeGetUrl(unint64_t a1)
{
  __CFString *v1;

  if (a1 > 2)
    v1 = 0;
  else
    v1 = off_372880[a1];
  return +[NSURL URLWithString:](NSURL, "URLWithString:", v1);
}

void ASKNQMLParserStartDocument(void *a1)
{
  id v1;
  id v2;

  v1 = a1;
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "delegate"));
  objc_msgSend(v2, "parserDidStartDocument:", v1);

}

void ASKNQMLParserEndDocument(void *a1)
{
  id v1;
  id v2;

  v1 = a1;
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "delegate"));
  objc_msgSend(v2, "parserDidEndDocument:", v1);

}

void ASKNQMLParserError(void *a1)
{
  xmlErrorPtr LastError;
  xmlErrorPtr v2;
  id v3;

  v3 = a1;
  LastError = xmlCtxtGetLastError(objc_msgSend(v3, "_parserContext"));
  if (LastError)
  {
    v2 = LastError;
    objc_msgSend(v3, "reportParseError:", LastError);
    if (v2->level == XML_ERR_FATAL)
      xmlStopParser((xmlParserCtxtPtr)objc_msgSend(v3, "_parserContext"));
  }

}

void ASKNQMLParserStartElement(void *a1, const xmlChar *a2, xmlChar **a3)
{
  void *v5;
  int v6;
  void *v7;
  uint64_t v8;
  id v9;
  xmlChar *v10;
  xmlChar **v11;
  xmlChar *v12;
  int v13;
  __CFString *v14;
  void *v15;
  int v16;
  __CFString *v17;
  void *v18;
  xmlChar *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;

  v20 = a1;
  if (xmlStrEqual(a2, (const xmlChar *)"li"))
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "delegate"));
    objc_msgSend(v5, "parserDidStartListElement:", v20);
LABEL_13:

    v7 = v20;
    goto LABEL_14;
  }
  v22 = 0;
  if (TryListTypeFromName(a2, &v22))
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "delegate"));
    objc_msgSend(v5, "parser:didStartListOfStyle:", v20, v22);
    goto LABEL_13;
  }
  v21 = 0;
  v6 = TryTextElementFromName(a2, &v21);
  v7 = v20;
  if (v6)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "delegate"));
    v8 = v21;
    if (a3)
    {
      v9 = objc_alloc_init((Class)NSMutableDictionary);
      v10 = *a3;
      if (*a3)
      {
        v11 = a3 + 2;
        do
        {
          v12 = *(v11 - 1);
          v13 = xmlStrlen(v10);
          v14 = NSStringFromXmlChar((__CFString *)v10, v13);
          v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
          v16 = xmlStrlen(v12);
          v17 = NSStringFromXmlChar((__CFString *)v12, v16);
          v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
          objc_msgSend(v9, "setObject:forKeyedSubscript:", v18, v15);

          v19 = *v11;
          v11 += 2;
          v10 = v19;
        }
        while (v19);
      }
    }
    else
    {
      v9 = &__NSDictionary0__struct;
    }
    objc_msgSend(v5, "parser:didStartElement:attributes:", v20, v8, v9);

    goto LABEL_13;
  }
LABEL_14:

}

void ASKNQMLParserEndElement(void *a1, const xmlChar *a2)
{
  void *v3;
  int v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;

  v6 = a1;
  if (xmlStrEqual(a2, (const xmlChar *)"br"))
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "delegate"));
    objc_msgSend(v3, "parserDidFindNewline:", v6);
LABEL_9:

    v5 = v6;
    goto LABEL_10;
  }
  if (xmlStrEqual(a2, (const xmlChar *)"li"))
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "delegate"));
    objc_msgSend(v3, "parserDidEndListElement:", v6);
    goto LABEL_9;
  }
  v8 = 0;
  if (TryListTypeFromName(a2, &v8))
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "delegate"));
    objc_msgSend(v3, "parser:didEndListOfStyle:", v6, v8);
    goto LABEL_9;
  }
  v7 = 0;
  v4 = TryTextElementFromName(a2, &v7);
  v5 = v6;
  if (v4)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "delegate"));
    objc_msgSend(v3, "parser:didEndElement:", v6, v7);
    goto LABEL_9;
  }
LABEL_10:

}

void ASKNQMLParserCharacters(void *a1, __CFString *a2, int a3)
{
  __CFString *v5;
  void *v6;
  void *v7;
  id v8;

  v8 = a1;
  v5 = NSStringFromXmlChar(a2, a3);
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  if (v6)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "delegate"));
    objc_msgSend(v7, "parser:didFindCharacters:", v8, v6);

  }
}

uint64_t TryListTypeFromName(const xmlChar *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t result;

  if (xmlStrEqual(a1, (const xmlChar *)"ol"))
  {
    v4 = 0;
  }
  else
  {
    result = xmlStrEqual(a1, (const xmlChar *)"ul");
    if (!(_DWORD)result)
      return result;
    v4 = 1;
  }
  *a2 = v4;
  return 1;
}

uint64_t TryTextElementFromName(const xmlChar *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t result;

  if (xmlStrEqual(a1, (const xmlChar *)"b") || xmlStrEqual(a1, (const xmlChar *)"em"))
  {
    v4 = 0;
LABEL_4:
    *a2 = v4;
    return 1;
  }
  if (xmlStrEqual(a1, (const xmlChar *)"i"))
  {
    v4 = 1;
    goto LABEL_4;
  }
  if (xmlStrEqual(a1, (const xmlChar *)"u"))
  {
    v4 = 2;
    goto LABEL_4;
  }
  if (xmlStrEqual(a1, (const xmlChar *)"strike") || xmlStrEqual(a1, (const xmlChar *)"del"))
  {
    v4 = 3;
    goto LABEL_4;
  }
  if (xmlStrEqual(a1, (const xmlChar *)"p") || xmlStrEqual(a1, (const xmlChar *)"div"))
  {
    v4 = 4;
    goto LABEL_4;
  }
  result = xmlStrEqual(a1, (const xmlChar *)"mark");
  if ((_DWORD)result)
  {
    v4 = 5;
    goto LABEL_4;
  }
  return result;
}

__CFString *NSStringFromXmlChar(__CFString *a1, uint64_t a2)
{
  if (a1)
  {
    if (a2)
      return (__CFString *)objc_msgSend(objc_alloc((Class)NSString), "initWithBytes:length:encoding:", a1, a2, 4);
    a1 = &stru_390F78;
  }
  return a1;
}

void sub_C5B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_C890(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t BasePresenter.__allocating_init()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = swift_allocObject(v0, 96, 7);
  BasePresenter.init()();
  return v1;
}

uint64_t BasePresenter.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[24];

  v1 = *(_QWORD *)v0;
  swift_unknownObjectWeakInit(v0 + 16, 0);
  *(_BYTE *)(v0 + 24) = 0;
  v2 = type metadata accessor for LegacyMetricsPageEnterGate();
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  v4 = type metadata accessor for BasePresenter(0, *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 88), v3);
  v5 = sub_F5EB0(v0, v2, v4, (uint64_t)&protocol witness table for BasePresenter<A>);
  swift_beginAccess(v0 + 72, v8, 1, 0);
  v6 = *(_QWORD *)(v0 + 72);
  *(_QWORD *)(v0 + 72) = v5;
  swift_release(v6);
  return v0;
}

uint64_t sub_CFD8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = FlowTransitionSource.view.getter();
  *a1 = result;
  return result;
}

uint64_t sub_D000(uint64_t *a1)
{
  return sub_EBD0(*a1);
}

uint64_t FlowTransitionSource.view.getter()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 16, v2, 0, 0);
  return swift_unknownObjectWeakLoadStrong(v0 + 16);
}

uint64_t sub_D064(uint64_t a1)
{
  sub_EBD0(a1);
  return swift_unknownObjectRelease(a1);
}

void (*sub_D088(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  swift_beginAccess(v1 + 16, v3, 33, 0);
  v3[3] = swift_unknownObjectWeakLoadStrong(v1 + 16);
  return sub_D0F0;
}

void sub_D0F0(uint64_t a1, char a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = *(_QWORD **)a1;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  swift_unknownObjectWeakAssign(*(_QWORD *)(*(_QWORD *)a1 + 32) + 16, v4);
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRelease(v3[3]);
    swift_endAccess(v3);
  }
  else
  {
    swift_endAccess(v3);
    swift_unknownObjectRelease(v4);
  }
  free(v3);
}

uint64_t sub_D15C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = HomePageProvider.episodeOrderingFrozen.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_D188(char *a1)
{
  return sub_D28C(*a1);
}

uint64_t sub_D1AC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  _BYTE v6[24];

  v1 = *v0;
  swift_beginAccess(v0 + 3, &v5, 0, 0);
  v2 = v0 + 2;
  if (*((_BYTE *)v0 + 24) == 1)
  {
    swift_beginAccess(v2, v6, 0, 0);
    result = swift_unknownObjectWeakLoadStrong(v0 + 2);
    if (!result)
      return result;
    v4 = result;
    (*(void (**)(_QWORD))(*(_QWORD *)(v1 + 88) + 8))(*(_QWORD *)(v1 + 80));
  }
  else
  {
    swift_beginAccess(v2, v6, 0, 0);
    result = swift_unknownObjectWeakLoadStrong(v0 + 2);
    if (!result)
      return result;
    v4 = result;
    (*(void (**)(_QWORD))(*(_QWORD *)(v1 + 88) + 16))(*(_QWORD *)(v1 + 80));
  }
  return swift_unknownObjectRelease(v4);
}

uint64_t HomePageProvider.episodeOrderingFrozen.getter()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 24, v2, 0, 0);
  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t sub_D28C(char a1)
{
  uint64_t v1;
  _BYTE v4[24];

  swift_beginAccess(v1 + 24, v4, 1, 0);
  *(_BYTE *)(v1 + 24) = a1;
  return sub_D1AC();
}

uint64_t sub_D2CC()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)v0 + 200))(0);
}

uint64_t sub_D2E0@<X0>(uint64_t a1@<X8>)
{
  return sub_D71C(a1);
}

uint64_t sub_D300(uint64_t a1)
{
  _BYTE v2[40];

  sub_EC18(a1, (uint64_t)v2);
  return sub_D764((uint64_t)v2);
}

uint64_t sub_D338()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  unint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20[24];
  __int128 v21;
  uint64_t v22;
  char v23[24];
  _QWORD v24[3];
  uint64_t v25;
  uint64_t v26;

  v1 = v0;
  v2 = v0 + 32;
  swift_beginAccess(v2, v23, 0, 0);
  sub_EC18(v2, (uint64_t)&v21);
  if (v22)
  {
    sub_F4D8(&v21, (uint64_t)v24);
    v3 = v25;
    v4 = v26;
    __swift_project_boxed_opaque_existential_1(v24, v25);
    v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v3, v4);
    *(_QWORD *)&v21 = _swiftEmptyArrayStorage;
    if ((unint64_t)v5 >> 62)
      goto LABEL_19;
    for (i = *(_QWORD *)((char *)&dword_10 + (v5 & 0xFFFFFFFFFFFFF8)); i; i = _CocoaArrayWrapper.endIndex.getter(v14))
    {
      v7 = 0;
      v19 = v1;
      while ((v5 & 0xC000000000000001) != 0)
      {
        v8 = specialized _ArrayBuffer._getElementSlowPath(_:)(v7, v5);
        v9 = __OFADD__(v7++, 1);
        if (v9)
          goto LABEL_17;
LABEL_12:
        swift_beginAccess(v8 + 24, v20, 0, 0);
        v10 = *(_QWORD *)(v8 + 24);
        v1 = *(_QWORD *)(v10 + 16);
        if (v1)
        {
          swift_bridgeObjectRetain_n(*(_QWORD *)(v8 + 24), 2);
          __asm { BR              X9 }
        }
        swift_release(v8);
        if (v7 == i)
        {
          swift_bridgeObjectRelease(v5);
          v11 = v21;
          v1 = v19;
          goto LABEL_24;
        }
      }
      if (v7 >= *(_QWORD *)((char *)&dword_10 + (v5 & 0xFFFFFFFFFFFFFF8)))
        goto LABEL_18;
      v8 = *(_QWORD *)(v5 + 32 + 8 * v7);
      swift_retain(v8);
      v9 = __OFADD__(v7++, 1);
      if (!v9)
        goto LABEL_12;
LABEL_17:
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      if (v5 < 0)
        v14 = v5;
      else
        v14 = v5 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRelease(v5);
    v11 = (unint64_t)_swiftEmptyArrayStorage;
LABEL_24:
    swift_beginAccess(v1 + 72, &v21, 0, 0);
    v15 = *(_QWORD *)(v1 + 72);
    if (v15)
    {
      if ((v11 & 0x8000000000000000) != 0 || (v11 & 0x4000000000000000) != 0)
      {
        swift_retain(v15);
        v18 = swift_retain(v11);
        v16 = _CocoaArrayWrapper.endIndex.getter(v18);
        swift_release(v11);
      }
      else
      {
        v16 = *(_QWORD *)(v11 + 16);
        swift_retain(v15);
      }
      swift_release(v11);
      LegacyMetricsPageEnterGate.hasMetricsPage.setter(v16 > 0);
      v17 = v15;
    }
    else
    {
      v17 = v11;
    }
    swift_release(v17);
    return __swift_destroy_boxed_opaque_existential_1(v24);
  }
  else
  {
    sub_ECE8((uint64_t)&v21);
    result = swift_beginAccess(v1 + 72, v24, 0, 0);
    v13 = *(_QWORD *)(v1 + 72);
    if (v13)
    {
      result = swift_beginAccess(v13 + 34, &v21, 1, 0);
      *(_BYTE *)(v13 + 34) = 0;
    }
  }
  return result;
}

uint64_t sub_D71C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  v3 = v1 + 32;
  swift_beginAccess(v3, v5, 0, 0);
  return sub_EC18(v3, a1);
}

uint64_t sub_D764(uint64_t a1)
{
  uint64_t v1;
  _BYTE v4[24];

  swift_beginAccess(v1 + 32, v4, 33, 0);
  sub_ECA0(a1, v1 + 32);
  swift_endAccess(v4);
  sub_D338();
  return sub_ECE8(a1);
}

uint64_t (*sub_D7C8(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess(v1 + 32, a1, 33, 0);
  return sub_D808;
}

uint64_t sub_D808(uint64_t a1, char a2)
{
  uint64_t result;

  result = swift_endAccess(a1);
  if ((a2 & 1) == 0)
    return sub_D338();
  return result;
}

uint64_t sub_D838@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;

  v2 = sub_ED28();
  *a1 = v2;
  return swift_retain(v2);
}

uint64_t sub_D860(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return ModernStationDetailPresenter.pageContent.setter(v1);
}

uint64_t sub_D888()
{
  uint64_t v0;

  v0 = sub_ED28();
  return swift_retain(v0);
}

uint64_t ModernStationDetailPresenter.pageContent.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + 72, v5, 1, 0);
  v3 = *(_QWORD *)(v1 + 72);
  *(_QWORD *)(v1 + 72) = a1;
  return swift_release(v3);
}

uint64_t (*HomePagePresenter.hasLoadedContent.modify(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + 72, a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t sub_D920@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;

  *a1 = sub_ED58();
  a1[1] = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_D94C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  swift_bridgeObjectRetain(v2);
  return sub_D9BC(v1, v2);
}

uint64_t sub_D988()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_ED58();
  swift_bridgeObjectRetain(v1);
  return v0;
}

uint64_t sub_D9BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  _BYTE v7[24];

  swift_beginAccess(v2 + 80, v7, 1, 0);
  v5 = *(_QWORD *)(v2 + 88);
  *(_QWORD *)(v2 + 80) = a1;
  *(_QWORD *)(v2 + 88) = a2;
  return swift_bridgeObjectRelease(v5);
}

uint64_t (*ModernStationDetailPresenter.headerButtonItems.modify(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + 80, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t BasePresenter.deinit()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  sub_ECE8(v0 + 32);
  swift_release(*(_QWORD *)(v0 + 72));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 88));
  return v0;
}

uint64_t BasePresenter.__deallocating_deinit()
{
  uint64_t v0;

  BasePresenter.deinit();
  return swift_deallocClassInstance(v0, 96, 7);
}

void (*sub_DAA0(_QWORD *a1))(_QWORD *)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = sub_D088(v2);
  return sub_DAE4;
}

uint64_t dispatch thunk of FollowButtonPresenter.currentState.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of DownloadButtonPresenter.delegate.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

void (*sub_DB0C(_QWORD *a1))(_QWORD *)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = ModernStationDetailPresenter.headerButtonItems.modify((uint64_t)v2);
  return sub_DAE4;
}

void (*sub_DB54(_QWORD *a1))(_QWORD *)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = HomePagePresenter.hasLoadedContent.modify((uint64_t)v2);
  return sub_DAE4;
}

void sub_DB98(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

uint64_t sub_DBC8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = 0;
    v5 = (uint64_t *)(a1 + 32);
    do
    {
      v7 = *v5++;
      v6 = v7;
      if ((v7 & ~v4) == 0)
        v6 = 0;
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    v4 = 0;
  }
  result = swift_bridgeObjectRelease(a1);
  *a2 = v4;
  return result;
}

uint64_t sub_DC1C(uint64_t a1, uint64_t a2)
{
  return sub_EA3C(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

NSNumber sub_DC3C()
{
  return CGFloat._bridgeToObjectiveC()();
}

uint64_t sub_DC44(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v6 = 0;
  v7 = 1;
  result = static CGFloat._forceBridgeFromObjectiveC(_:result:)(a1, &v6);
  v4 = v7;
  v5 = v6;
  if (v7)
    v5 = 0;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v4;
  return result;
}

uint64_t sub_DC94(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v7;
  char v8;

  v7 = 0;
  v8 = 1;
  v3 = static CGFloat._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v7);
  v4 = v8;
  v5 = v7;
  if (v8)
    v5 = 0;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v4;
  return v3 & 1;
}

void sub_DCE8(double *a1@<X8>)
{
  *a1 = static CGFloat._unconditionallyBridgeFromObjectiveC(_:)();
}

id sub_DD0C()
{
  id *v0;

  return *v0;
}

ShelfKit::FindOrCreateEpisodeOfferContentIDsIntent __swiftcall FindOrCreateEpisodeOfferContentIDsIntent.init(episodeOffers:)(ShelfKit::FindOrCreateEpisodeOfferContentIDsIntent episodeOffers)
{
  ShelfKit::FindOrCreateEpisodeOfferContentIDsIntent *v1;

  v1->episodeOffers._rawValue = episodeOffers.episodeOffers._rawValue;
  return episodeOffers;
}

void static StationListOptions.detail.getter(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

_QWORD *sub_DD24@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_QWORD *sub_DD38@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

_QWORD *sub_DD4C@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;

  v3 = *v2 & *result;
  if (v3)
    *v2 &= ~*result;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_DD78@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *result;
  v4 = *v2;
  *v2 |= *result;
  v5 = v4 & v3;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v5 == 0;
  return result;
}

_QWORD *sub_DD9C(_QWORD *result)
{
  _QWORD *v1;

  *v1 ^= *result;
  return result;
}

_QWORD *sub_DDB0@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_DDC4(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL sub_DDD8(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & *a1) == 0;
}

BOOL sub_DDEC(_QWORD *a1)
{
  _QWORD *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL sub_DE00()
{
  _QWORD *v0;

  return *v0 == 0;
}

uint64_t sub_DE10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return SetAlgebra.init<A>(_:)(a1, a4, a2, a5, a3);
}

_QWORD *sub_DE28(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= ~*result;
  return result;
}

_DWORD *sub_DE3C@<X0>(_DWORD *result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

BOOL static FetchSmartPlayEpisodeAdamIDIntent.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

_QWORD *sub_DE5C(_QWORD *result)
{
  _QWORD *v1;

  *v1 |= *result;
  return result;
}

_QWORD *sub_DE70@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

BOOL sub_DE84(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

_QWORD *sub_DEB4(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= *result;
  return result;
}

void sub_DEC8(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

_DWORD *sub_DED0@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  _DWORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_DWORD *sub_DEE4@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  _DWORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_DEF8(_DWORD *a1, int *a2)
{
  _DWORD *v2;
  int v3;
  int v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

_DWORD *sub_DF28@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  _DWORD *v2;
  int v3;

  v3 = *v2 & *result;
  if (v3)
    *v2 &= ~*result;
  *(_DWORD *)a2 = v3;
  *(_BYTE *)(a2 + 4) = v3 == 0;
  return result;
}

int *sub_DF54@<X0>(int *result@<X0>, uint64_t a2@<X8>)
{
  int *v2;
  int v3;
  int v4;
  int v5;

  v3 = *result;
  v4 = *v2;
  *v2 |= *result;
  v5 = v4 & v3;
  *(_DWORD *)a2 = v5;
  *(_BYTE *)(a2 + 4) = v5 == 0;
  return result;
}

_DWORD *sub_DF78(_DWORD *result)
{
  _DWORD *v1;

  *v1 |= *result;
  return result;
}

_DWORD *sub_DF8C(_DWORD *result)
{
  _DWORD *v1;

  *v1 ^= *result;
  return result;
}

_DWORD *sub_DFA0@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  _DWORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_DFB4(_DWORD *a1)
{
  _DWORD *v1;

  return (*v1 & *a1) == 0;
}

BOOL sub_DFC8()
{
  _DWORD *v0;

  return *v0 == 0;
}

_DWORD *sub_DFD8(_DWORD *result)
{
  _DWORD *v1;

  *v1 &= ~*result;
  return result;
}

uint64_t sub_DFEC(uint64_t a1, id *a2)
{
  uint64_t result;
  uint64_t v5;
  NSString v6;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  result = static String._forceBridgeFromObjectiveC(_:result:)(a1, &v7);
  v5 = v8;
  if (v8)
  {
    v6 = String._bridgeToObjectiveC()();
    result = swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return result;
}

uint64_t sub_E060(uint64_t a1, id *a2)
{
  char v4;
  uint64_t v5;
  NSString v6;
  uint64_t v8;
  uint64_t v9;

  v8 = 0;
  v9 = 0;
  v4 = static String._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v8);
  v5 = v9;
  if (v9)
  {
    v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return v4 & 1;
}

uint64_t sub_E0DC@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  NSString v4;
  uint64_t result;

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  v3 = v2;
  v4 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v3);
  *a1 = v4;
  return result;
}

uint64_t sub_E120()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(ASWebAuthenticationSessionErrorDomain);
}

uint64_t sub_E130(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_F1C0(&qword_3B0790, type metadata accessor for ASWebAuthenticationSessionError, (uint64_t)&unk_2E9DAC);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_E170(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_F1C0(&qword_3B0790, type metadata accessor for ASWebAuthenticationSessionError, (uint64_t)&unk_2E9DAC);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_E1B0(void *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_F1C0(&qword_3B0790, type metadata accessor for ASWebAuthenticationSessionError, (uint64_t)&unk_2E9DAC);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_E214()
{
  id *v0;
  id v1;
  uint64_t v2;

  v1 = *v0;
  v2 = NSObject.hashValue.getter();

  return v2;
}

uint64_t sub_E248(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_F1C0(&qword_3B0790, type metadata accessor for ASWebAuthenticationSessionError, (uint64_t)&unk_2E9DAC);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

Swift::Int sub_E298(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD v7[10];

  v7[9] = *v3;
  Hasher.init(_seed:)(v7);
  dispatch thunk of Hashable.hash(into:)(v7, a2, a3);
  return Hasher._finalize()();
}

uint64_t sub_E2F4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = sub_F4A0(a1);
  result = swift_bridgeObjectRelease(a1);
  *a2 = v4;
  return result;
}

void sub_E330(_DWORD *a1@<X8>)
{
  _DWORD *v1;

  *a1 = *v1;
}

_DWORD *sub_E33C@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  _DWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

_DWORD *sub_E350(_DWORD *result)
{
  _DWORD *v1;

  *v1 &= *result;
  return result;
}

BOOL sub_E364(_DWORD *a1)
{
  _DWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL sub_E378(_DWORD *a1)
{
  _DWORD *v1;

  return (*a1 & ~*v1) == 0;
}

void sub_E38C(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

_QWORD *sub_E398@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_E3A4@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  int v4;
  uint64_t result;

  v4 = sub_FB58(a1);
  result = swift_bridgeObjectRelease(a1);
  *a2 = v4;
  return result;
}

_DWORD *sub_E3E0@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(_BYTE *)(a2 + 4) = 0;
  return result;
}

uint64_t sub_E3F4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_F1C0((unint64_t *)&qword_3C7F00, type metadata accessor for Key, (uint64_t)&unk_2E9460);
  v3 = sub_F1C0(&qword_3B06A0, type metadata accessor for Key, (uint64_t)&unk_2E9020);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

_QWORD *sub_E478@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

double sub_E488@<D0>(_QWORD *a1@<X8>)
{
  double *v1;
  double result;

  result = *v1;
  *a1 = *(_QWORD *)v1;
  return result;
}

uint64_t sub_E494(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v2 = sub_F1C0(&qword_3B07F8, type metadata accessor for Weight, (uint64_t)&unk_2E9B48);
  v3 = sub_F1C0(&qword_3B0800, type metadata accessor for Weight, (uint64_t)&unk_2E9AE8);
  v4 = sub_FB14();
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, v4);
}

uint64_t sub_E534(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_F1C0(&qword_3B0798, type metadata accessor for ASWebAuthenticationSessionError, (uint64_t)&unk_2E9F00);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_E574(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_F1C0(&qword_3B0798, type metadata accessor for ASWebAuthenticationSessionError, (uint64_t)&unk_2E9F00);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_E5B8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_F1C0(&qword_3B0790, type metadata accessor for ASWebAuthenticationSessionError, (uint64_t)&unk_2E9DAC);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_E5F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_F1C0(&qword_3B0790, type metadata accessor for ASWebAuthenticationSessionError, (uint64_t)&unk_2E9DAC);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

BOOL sub_E650(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_E664@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t result;
  uint64_t v4;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_E68C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_F1C0(&qword_3B06B8, type metadata accessor for BuildType, (uint64_t)&unk_2E8DE0);
  v3 = sub_F1C0(&qword_3B06C0, type metadata accessor for BuildType, (uint64_t)&unk_2E8D80);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_E710(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_F1C0(&qword_3B07E8, type metadata accessor for OpenExternalURLOptionsKey, (uint64_t)&unk_2E9F44);
  v3 = sub_F1C0(&qword_3B07F0, type metadata accessor for OpenExternalURLOptionsKey, (uint64_t)&unk_2E9C40);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_E794(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_F1C0((unint64_t *)&qword_3B06A8, type metadata accessor for OptionKey, (uint64_t)&unk_2E94A4);
  v3 = sub_F1C0(&qword_3B06B0, type metadata accessor for OptionKey, (uint64_t)&unk_2E8ED0);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_E818(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_F1C0(&qword_3B0688, type metadata accessor for AttributeName, (uint64_t)&unk_2E93D0);
  v3 = sub_F1C0((unint64_t *)&unk_3B0690, type metadata accessor for AttributeName, (uint64_t)&unk_2E9370);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_E89C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_F1C0(&qword_3B0820, type metadata accessor for NqmlAttributeName, (uint64_t)&unk_2E9F88);
  v3 = sub_F1C0(&qword_3B0828, type metadata accessor for NqmlAttributeName, (uint64_t)&unk_2E987C);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_E920@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  NSString v4;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v3);
  *a2 = v4;
  return result;
}

uint64_t sub_E964(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_F1C0(&qword_3B0810, type metadata accessor for TraitKey, (uint64_t)&unk_2E99F0);
  v3 = sub_F1C0(&qword_3B0818, type metadata accessor for TraitKey, (uint64_t)&unk_2E9990);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_E9E8()
{
  double *v0;

  return Double.hashValue.getter(*v0);
}

void sub_E9F0()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;

  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v1 = *v0;
  else
    v1 = 0;
  Hasher._combine(_:)(v1);
}

uint64_t sub_EA20(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;

  if ((*v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v2 = *v1;
  else
    v2 = 0;
  return static Hasher._hash(seed:_:)(a1, v2);
}

uint64_t sub_EA30(uint64_t a1, uint64_t a2)
{
  return sub_EA3C(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_EA3C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v3);
  v7 = v6;
  v8 = a3(v5);
  swift_bridgeObjectRelease(v7);
  return v8;
}

uint64_t sub_EA78(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_EAB8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Swift::Int v4;
  _QWORD v6[9];

  v1 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v0);
  v3 = v2;
  Hasher.init(_seed:)(v6);
  String.hash(into:)(v6, v1, v3);
  v4 = Hasher._finalize()();
  swift_bridgeObjectRelease(v3);
  return v4;
}

BOOL sub_EB28(double *a1, double *a2)
{
  return *a1 == *a2;
}

uint64_t sub_EB3C(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v2 = *a2;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*a1);
  v5 = v4;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  if (v3 == v6 && v5 == v7)
  {
    v10 = 1;
    v9 = v5;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

uint64_t type metadata accessor for BasePresenter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BasePresenter);
}

uint64_t sub_EBD0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  v3 = v1 + 16;
  swift_beginAccess(v3, v5, 1, 0);
  return swift_unknownObjectWeakAssign(v3, a1);
}

uint64_t sub_EC18(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0340);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_ECA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0340);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_ECE8(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0340);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_ED28()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 72, v2, 0, 0);
  return *(_QWORD *)(v0 + 72);
}

uint64_t sub_ED58()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 80, v2, 0, 0);
  return *(_QWORD *)(v0 + 80);
}

uint64_t sub_ED88(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 88);
}

uint64_t sub_ED90(uint64_t a1)
{
  uint64_t result;

  result = swift_getWitnessTable(&protocol conformance descriptor for BasePresenter<A>);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_EDBC()
{
  return 16;
}

__n128 sub_EDC8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_EDD4()
{
  return 16;
}

__n128 sub_EDE0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_EDEC()
{
  return 16;
}

__n128 sub_EDF8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_EE04()
{
  return 16;
}

__n128 sub_EE10(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_EE1C()
{
  return 16;
}

__n128 sub_EE28(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_EE38(uint64_t a1)
{
  _QWORD v2[5];

  v2[0] = "\b";
  v2[1] = &unk_2E8AB0;
  v2[2] = &unk_2E8AC8;
  v2[3] = &unk_2E8AE0;
  v2[4] = &unk_2E8AF8;
  return swift_initClassMetadata2(a1, 0, 5, v2, a1 + 96);
}

uint64_t method lookup function for BasePresenter(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for BasePresenter);
}

uint64_t dispatch thunk of BasePresenter.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t dispatch thunk of BookmarkButtonPresenter.view.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of NetworkObserver.delegateScheduler.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of BookmarkButtonPresenter.view.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of BookmarkButtonPresenter.delegate.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of BasePresenter.metricsPage.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of StationDetail.episodes.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of DownloadButtonPresenter.currentState.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of ProgressivelyLoadShelvesController.reset()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of StationDetail.shows.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of BasePresenter.pageEnterGate.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t dispatch thunk of BasePresenter.referrer.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t dispatch thunk of BasePresenter.referrer.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

uint64_t dispatch thunk of BasePresenter.referrer.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 272))();
}

uint64_t dispatch thunk of BasePresenter.observe(lifecycleEvent:impressionsTracker:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 280))();
}

void type metadata accessor for AttributeName(uint64_t a1)
{
  sub_F8FC(a1, &qword_3B0590, (uint64_t)&unk_3767B0);
}

void type metadata accessor for MTPodcastShowType(uint64_t a1)
{
  sub_F8FC(a1, &qword_3B0598, (uint64_t)&unk_3767D8);
}

void type metadata accessor for MTPodcastEpisodeLimit(uint64_t a1)
{
  sub_F8FC(a1, &qword_3B05A0, (uint64_t)&unk_3767F8);
}

void type metadata accessor for MTPodcastHidesPlayedEpisodes(uint64_t a1)
{
  sub_F8FC(a1, &qword_3B05A8, (uint64_t)&unk_376818);
}

void type metadata accessor for MTEpisodePriceType(uint64_t a1)
{
  sub_F8FC(a1, &qword_3B05B0, (uint64_t)&unk_376838);
}

void type metadata accessor for MTEpisodeEntitlementState(uint64_t a1)
{
  sub_F8FC(a1, &qword_3B05B8, (uint64_t)&unk_376858);
}

void type metadata accessor for PagePresentationOptions(uint64_t a1)
{
  sub_F8FC(a1, &qword_3B05C0, (uint64_t)&unk_376878);
}

uint64_t initializeBufferWithCopyOfBuffer for LocationFields(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t sub_F028(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_F048(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

void type metadata accessor for UIEdgeInsets(uint64_t a1)
{
  sub_F8FC(a1, &qword_3B05C8, (uint64_t)&unk_3768F8);
}

void type metadata accessor for Key(uint64_t a1)
{
  sub_F8FC(a1, &qword_3B05D0, (uint64_t)&unk_376928);
}

void type metadata accessor for ResourceLoadReason(uint64_t a1)
{
  sub_F8FC(a1, &qword_3B05D8, (uint64_t)&unk_376950);
}

void type metadata accessor for OptionKey(uint64_t a1)
{
  sub_F8FC(a1, &qword_3B05E0, (uint64_t)&unk_376970);
}

void type metadata accessor for BuildType(uint64_t a1)
{
  sub_F8FC(a1, &qword_3B05E8, (uint64_t)&unk_376998);
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for RecommendationsMetadata.Categories.Metadata(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for RecommendationsMetadata.Categories.Metadata(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
  sub_F8FC(a1, &qword_3B05F0, (uint64_t)&unk_376A18);
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
  sub_F8FC(a1, &qword_3B05F8, (uint64_t)&unk_376A40);
}

void type metadata accessor for CGRect(uint64_t a1)
{
  sub_F8FC(a1, &qword_3B0600, (uint64_t)&unk_376AC0);
}

uint64_t sub_F168()
{
  return sub_F1C0(&qword_3B0608, type metadata accessor for BuildType, (uint64_t)&unk_2E8D44);
}

uint64_t sub_F194()
{
  return sub_F1C0(&qword_3B0610, type metadata accessor for BuildType, (uint64_t)&unk_2E8D18);
}

uint64_t sub_F1C0(unint64_t *a1, void (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;

  result = *a1;
  if (!result)
  {
    a2(255);
    result = swift_getWitnessTable(a3);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_F200()
{
  return sub_F1C0(&qword_3B0618, type metadata accessor for BuildType, (uint64_t)&unk_2E8DB4);
}

uint64_t sub_F22C()
{
  return sub_F1C0(&qword_3B0620, type metadata accessor for OptionKey, (uint64_t)&unk_2E8E98);
}

uint64_t sub_F258()
{
  return sub_F1C0(&qword_3B0628, type metadata accessor for OptionKey, (uint64_t)&unk_2E8E70);
}

uint64_t sub_F284()
{
  return sub_F1C0(&qword_3B0630, type metadata accessor for Key, (uint64_t)&unk_2E8FE4);
}

uint64_t sub_F2B0()
{
  return sub_F1C0(&qword_3B0638, type metadata accessor for Key, (uint64_t)&unk_2E8FB8);
}

uint64_t sub_F2DC()
{
  return sub_F1C0(&qword_3B0640, type metadata accessor for PagePresentationOptions, (uint64_t)&unk_2E9100);
}

uint64_t sub_F308()
{
  return sub_F1C0(&qword_3B0648, type metadata accessor for PagePresentationOptions, (uint64_t)&unk_2E90CC);
}

uint64_t sub_F334()
{
  return sub_F1C0(&qword_3B0650, type metadata accessor for PagePresentationOptions, (uint64_t)&unk_2E912C);
}

uint64_t sub_F360()
{
  return sub_F1C0(&qword_3B0658, type metadata accessor for PagePresentationOptions, (uint64_t)&unk_2E9168);
}

uint64_t sub_F38C()
{
  return sub_F1C0(&qword_3B0660, type metadata accessor for AttributeName, (uint64_t)&unk_2E9334);
}

uint64_t sub_F3B8()
{
  return sub_F1C0(&qword_3B0668, type metadata accessor for AttributeName, (uint64_t)&unk_2E9308);
}

uint64_t sub_F3E4()
{
  return sub_F1C0(&qword_3B0670, type metadata accessor for AttributeName, (uint64_t)&unk_2E93A4);
}

uint64_t sub_F410()
{
  return sub_F1C0(&qword_3B0678, type metadata accessor for Key, (uint64_t)&unk_2E9054);
}

uint64_t sub_F43C()
{
  return sub_F1C0(&qword_3B0680, type metadata accessor for OptionKey, (uint64_t)&unk_2E8F00);
}

uint64_t sub_F468(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 *v3;
  int v4;
  int v5;

  v1 = *(_QWORD *)(result + 16);
  if (!v1)
    return 0;
  v2 = result;
  LODWORD(result) = 0;
  v3 = (unsigned __int8 *)(v2 + 32);
  do
  {
    v5 = *v3++;
    v4 = v5;
    if ((v5 & ~(_DWORD)result) == 0)
      v4 = 0;
    result = v4 | result;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t sub_F4A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  result = 0;
  v4 = (uint64_t *)(a1 + 32);
  do
  {
    v6 = *v4++;
    v5 = v6;
    if ((v6 & ~result) == 0)
      v5 = 0;
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t sub_F4D8(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_1(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1[3] - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release(*a1);
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return swift_getGenericMetadata(a1, v6, a5);
}

void type metadata accessor for Code(uint64_t a1)
{
  sub_F8FC(a1, &qword_3B06C8, (uint64_t)&unk_376AE8);
}

void type metadata accessor for OpenExternalURLOptionsKey(uint64_t a1)
{
  sub_F8FC(a1, &qword_3B06D0, (uint64_t)&unk_376B08);
}

void type metadata accessor for Weight(uint64_t a1)
{
  sub_F8FC(a1, &qword_3B06D8, (uint64_t)&unk_376B30);
}

void type metadata accessor for TraitKey(uint64_t a1)
{
  sub_F8FC(a1, &qword_3B06E0, (uint64_t)&unk_376B58);
}

void type metadata accessor for NqmlAttributeName(uint64_t a1)
{
  sub_F8FC(a1, &qword_3B06E8, (uint64_t)&unk_376B80);
}

void type metadata accessor for SymbolicTraits(uint64_t a1)
{
  sub_F8FC(a1, &qword_3B06F0, (uint64_t)&unk_376BA8);
}

void type metadata accessor for CGPoint(uint64_t a1)
{
  sub_F8FC(a1, &qword_3B06F8, (uint64_t)&unk_376C28);
}

void type metadata accessor for MTStopReason(uint64_t a1)
{
  sub_F8FC(a1, &qword_3B0700, (uint64_t)&unk_376C50);
}

void type metadata accessor for MTPlayReason(uint64_t a1)
{
  sub_F8FC(a1, &qword_3B0708, (uint64_t)&unk_376C70);
}

void type metadata accessor for MTPlaybackAdjustmentInitiator(uint64_t a1)
{
  sub_F8FC(a1, &qword_3B0710, (uint64_t)&unk_376C90);
}

uint64_t sub_F628()
{
  return sub_F1C0(&qword_3B0718, type metadata accessor for SymbolicTraits, (uint64_t)&unk_2E96A4);
}

uint64_t sub_F654()
{
  return sub_F1C0(&qword_3B0720, type metadata accessor for SymbolicTraits, (uint64_t)&unk_2E9670);
}

uint64_t sub_F680()
{
  return sub_F1C0(&qword_3B0728, type metadata accessor for SymbolicTraits, (uint64_t)&unk_2E96D0);
}

uint64_t sub_F6AC()
{
  return sub_F1C0(&qword_3B0730, type metadata accessor for SymbolicTraits, (uint64_t)&unk_2E970C);
}

uint64_t sub_F6D8()
{
  return sub_F1C0(&qword_3B0738, type metadata accessor for NqmlAttributeName, (uint64_t)&unk_2E9840);
}

uint64_t sub_F704()
{
  return sub_F1C0(&qword_3B0740, type metadata accessor for NqmlAttributeName, (uint64_t)&unk_2E9814);
}

uint64_t sub_F730()
{
  return sub_F1C0(&qword_3B0748, type metadata accessor for TraitKey, (uint64_t)&unk_2E9954);
}

uint64_t sub_F75C()
{
  return sub_F1C0(&qword_3B0750, type metadata accessor for TraitKey, (uint64_t)&unk_2E9928);
}

uint64_t sub_F788()
{
  return sub_F1C0(&qword_3B0758, type metadata accessor for TraitKey, (uint64_t)&unk_2E99C4);
}

uint64_t sub_F7B4()
{
  return sub_F1C0(&qword_3B0760, type metadata accessor for Weight, (uint64_t)&unk_2E9AAC);
}

uint64_t sub_F7E0()
{
  return sub_F1C0(&qword_3B0768, type metadata accessor for Weight, (uint64_t)&unk_2E9A80);
}

uint64_t sub_F80C()
{
  return sub_F1C0(&qword_3B0770, type metadata accessor for Weight, (uint64_t)&unk_2E9B1C);
}

uint64_t sub_F838()
{
  return sub_F1C0(&qword_3B0778, type metadata accessor for OpenExternalURLOptionsKey, (uint64_t)&unk_2E9C04);
}

uint64_t sub_F864()
{
  return sub_F1C0(&qword_3B0780, type metadata accessor for OpenExternalURLOptionsKey, (uint64_t)&unk_2E9BD8);
}

uint64_t sub_F890()
{
  return sub_F1C0(&qword_3B0788, type metadata accessor for Code, (uint64_t)&unk_2E9D08);
}

uint64_t sub_F8BC()
{
  return sub_F1C0(&qword_3B0790, type metadata accessor for ASWebAuthenticationSessionError, (uint64_t)&unk_2E9DAC);
}

void type metadata accessor for ASWebAuthenticationSessionError(uint64_t a1)
{
  sub_F8FC(a1, &qword_3B0830, (uint64_t)&unk_376CB0);
}

void sub_F8FC(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v5;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(0, a3);
    if (!v5)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t sub_F940()
{
  return sub_F1C0(&qword_3B0798, type metadata accessor for ASWebAuthenticationSessionError, (uint64_t)&unk_2E9F00);
}

uint64_t sub_F96C()
{
  return sub_F1C0(&qword_3B07A0, type metadata accessor for ASWebAuthenticationSessionError, (uint64_t)&unk_2E9E88);
}

uint64_t sub_F998()
{
  return sub_F1C0(&qword_3B07A8, type metadata accessor for ASWebAuthenticationSessionError, (uint64_t)&unk_2E9E18);
}

uint64_t sub_F9C4()
{
  return sub_F1C0(&qword_3B07B0, type metadata accessor for Code, (uint64_t)&unk_2E9D70);
}

uint64_t sub_F9F0()
{
  return sub_F1C0(&qword_3B07B8, type metadata accessor for Code, (uint64_t)&unk_2E9D34);
}

unint64_t sub_FA20()
{
  unint64_t result;

  result = qword_3B07C0;
  if (!qword_3B07C0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Int);
    atomic_store(result, (unint64_t *)&qword_3B07C0);
  }
  return result;
}

uint64_t sub_FA64()
{
  return sub_F1C0(&qword_3B07C8, type metadata accessor for ASWebAuthenticationSessionError, (uint64_t)&unk_2E9E5C);
}

uint64_t sub_FA90()
{
  return sub_F1C0(&qword_3B07D0, type metadata accessor for ASWebAuthenticationSessionError, (uint64_t)&unk_2E9EBC);
}

uint64_t sub_FABC()
{
  return sub_F1C0(&qword_3B07D8, type metadata accessor for OpenExternalURLOptionsKey, (uint64_t)&unk_2E9C74);
}

uint64_t sub_FAE8()
{
  return sub_F1C0(&qword_3B07E0, type metadata accessor for NqmlAttributeName, (uint64_t)&unk_2E98B0);
}

unint64_t sub_FB14()
{
  unint64_t result;

  result = qword_3B0808;
  if (!qword_3B0808)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CGFloat);
    atomic_store(result, (unint64_t *)&qword_3B0808);
  }
  return result;
}

uint64_t sub_FB58(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int *v3;
  int v4;
  int v5;

  v1 = *(_QWORD *)(result + 16);
  if (!v1)
    return 0;
  v2 = result;
  LODWORD(result) = 0;
  v3 = (int *)(v2 + 32);
  do
  {
    v5 = *v3++;
    v4 = v5;
    if ((v5 & ~(_DWORD)result) == 0)
      v4 = 0;
    result = v4 | result;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t FlowTransitionSource.__allocating_init(view:)(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = swift_allocObject(v1, 24, 7);
  v4 = swift_unknownObjectWeakInit(v3 + 16, 0);
  swift_beginAccess(v4, v6, 1, 0);
  swift_unknownObjectWeakAssign(v3 + 16, a1);

  return v3;
}

uint64_t FlowTransitionSource.init(view:)(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  v3 = swift_unknownObjectWeakInit(v1 + 16, 0);
  swift_beginAccess(v3, v5, 1, 0);
  swift_unknownObjectWeakAssign(v1 + 16, a1);

  return v1;
}

uint64_t FlowTransitionSource.deinit()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return v0;
}

uint64_t FlowTransitionSource.__deallocating_deinit()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t sub_FD04@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  _BYTE v5[24];

  v3 = *a1 + 16;
  swift_beginAccess(v3, v5, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v3);
  *a2 = result;
  return result;
}

uint64_t sub_FD50(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE v5[24];

  v2 = *a1;
  v3 = *a2 + 16;
  swift_beginAccess(v3, v5, 1, 0);
  return swift_unknownObjectWeakAssign(v3, v2);
}

uint64_t type metadata accessor for FlowTransitionSource()
{
  return objc_opt_self(_TtC8ShelfKit20FlowTransitionSource);
}

uint64_t method lookup function for FlowTransitionSource(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for FlowTransitionSource);
}

uint64_t dispatch thunk of LibraryRemovalController.__allocating_init(asPartOf:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t ChildAndParentLocation.childFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_BYTE *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 40);
  v4 = *(_QWORD *)(v1 + 48);
  v6 = *(_QWORD *)(v1 + 56);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 24);
  *(_QWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 48) = v4;
  *(_QWORD *)(a1 + 56) = v6;
  ((void (*)(void))swift_bridgeObjectRetain)();
  swift_bridgeObjectRetain(v2);
  return swift_bridgeObjectRetain(v5);
}

uint64_t ChildAndParentLocation.parentFields.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = v1[8];
  v3 = v1[9];
  v4 = v1[10];
  v5 = v1[11];
  v6 = v1[12];
  v7 = v1[13];
  v8 = v1[14];
  v9 = v1[15];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = v8;
  a1[7] = v9;
  return sub_FE4C(v2, v3, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_FE4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain(a8);
    swift_bridgeObjectRetain(a2);
    return swift_bridgeObjectRetain(a6);
  }
  return result;
}

__n128 ChildAndParentLocation.init(childFields:parentFields:)@<Q0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  uint64_t v7;
  char v8;
  uint64_t v9;

  *(_OWORD *)(a3 + 24) = *(_OWORD *)(a1 + 24);
  v3 = *a2;
  v4 = a2[1];
  *(_OWORD *)(a3 + 48) = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a3 + 64) = v3;
  result = (__n128)a2[2];
  v6 = a2[3];
  *(_OWORD *)(a3 + 80) = v4;
  *(__n128 *)(a3 + 96) = result;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_BYTE *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)a3 = *(_QWORD *)a1;
  *(_QWORD *)(a3 + 8) = v7;
  *(_BYTE *)(a3 + 16) = v8;
  *(_QWORD *)(a3 + 40) = v9;
  *(_OWORD *)(a3 + 112) = v6;
  return result;
}

_QWORD *ChildAndParentLocation.fields.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t inited;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE v29[168];

  v27 = *v0;
  v28 = v0[1];
  v26 = *((unsigned __int8 *)v0 + 16);
  v1 = v0[5];
  v24 = v0[4];
  v25 = v0[3];
  v2 = v0[6];
  v23 = v0[7];
  v3 = v0[8];
  v4 = v0[9];
  v5 = v0[10];
  v6 = v0[11];
  v7 = v0[12];
  v8 = v0[13];
  v10 = v0[14];
  v9 = v0[15];
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B08D8);
  inited = swift_initStackObject(v11, v29);
  v13 = v2;
  v14 = inited;
  *(_OWORD *)(inited + 16) = xmmword_2EA080;
  *(_QWORD *)(inited + 32) = v27;
  *(_QWORD *)(inited + 40) = v28;
  *(_QWORD *)(inited + 48) = v26;
  *(_QWORD *)(inited + 56) = v25;
  *(_QWORD *)(inited + 64) = v24;
  *(_QWORD *)(inited + 72) = v1;
  *(_QWORD *)(inited + 80) = v13;
  *(_QWORD *)(inited + 88) = v23;
  *(_QWORD *)(inited + 96) = v3;
  *(_QWORD *)(inited + 104) = v4;
  *(_QWORD *)(inited + 112) = v5;
  *(_QWORD *)(inited + 120) = v6;
  *(_QWORD *)(inited + 128) = v7;
  *(_QWORD *)(inited + 136) = v8;
  *(_QWORD *)(inited + 144) = v10;
  *(_QWORD *)(inited + 152) = v9;
  if (!v28)
  {
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRetain(v1);
    sub_FE4C(v3, v4, v5, v6, v7, v8, v10, v9);
    v16 = _swiftEmptyArrayStorage;
    if (!*(_QWORD *)(v14 + 104))
      goto LABEL_12;
    goto LABEL_7;
  }
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRetain(v1);
  sub_FE4C(v3, v4, v5, v6, v7, v8, v10, v9);
  v15 = LocationFields.metricsFields.getter();
  v16 = sub_10D10(0, 1, 1, _swiftEmptyArrayStorage, &qword_3B0A70, &qword_3B0A78);
  v18 = v16[2];
  v17 = v16[3];
  if (v18 >= v17 >> 1)
    v16 = sub_10D10((_QWORD *)(v17 > 1), v18 + 1, 1, v16, &qword_3B0A70, &qword_3B0A78);
  v16[2] = v18 + 1;
  v16[v18 + 4] = v15;
  if (*(_QWORD *)(v14 + 104))
  {
LABEL_7:
    v19 = LocationFields.metricsFields.getter();
    if ((swift_isUniquelyReferenced_nonNull_native(v16) & 1) == 0)
      v16 = sub_10D10(0, v16[2] + 1, 1, v16, &qword_3B0A70, &qword_3B0A78);
    v21 = v16[2];
    v20 = v16[3];
    if (v21 >= v20 >> 1)
      v16 = sub_10D10((_QWORD *)(v20 > 1), v21 + 1, 1, v16, &qword_3B0A70, &qword_3B0A78);
    v16[2] = v21 + 1;
    v16[v21 + 4] = v19;
  }
LABEL_12:
  swift_bridgeObjectRelease(v14);
  return v16;
}

uint64_t destroy for ChildAndParentLocation(_QWORD *a1)
{
  uint64_t result;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[7]);
  result = a1[9];
  if (result)
  {
    swift_bridgeObjectRelease(result);
    swift_bridgeObjectRelease(a1[13]);
    return swift_bridgeObjectRelease(a1[15]);
  }
  return result;
}

uint64_t initializeWithCopy for ChildAndParentLocation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 48) = v5;
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v7;
  v8 = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  if (v8)
  {
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 72) = v8;
    *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    v10 = *(_QWORD *)(a2 + 104);
    v9 = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 104) = v10;
    *(_QWORD *)(a1 + 112) = v9;
    v11 = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 120) = v11;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v11);
  }
  else
  {
    v12 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v12;
    v13 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v13;
  }
  return a1;
}

uint64_t assignWithCopy for ChildAndParentLocation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v8 = *(_QWORD *)(a2 + 56);
  v9 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = (_OWORD *)(a1 + 64);
  v11 = (__int128 *)(a2 + 64);
  v12 = *(_QWORD *)(a1 + 72);
  v13 = *(_QWORD *)(a2 + 72);
  if (v12)
  {
    if (v13)
    {
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      v14 = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 72) = v14;
      swift_bridgeObjectRetain(v14);
      swift_bridgeObjectRelease(v12);
      *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      v15 = *(_QWORD *)(a2 + 104);
      v16 = *(_QWORD *)(a1 + 104);
      *(_QWORD *)(a1 + 104) = v15;
      swift_bridgeObjectRetain(v15);
      swift_bridgeObjectRelease(v16);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      v17 = *(_QWORD *)(a2 + 120);
      v18 = *(_QWORD *)(a1 + 120);
      *(_QWORD *)(a1 + 120) = v17;
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRelease(v18);
    }
    else
    {
      sub_10458((_QWORD *)(a1 + 64));
      v22 = *(_OWORD *)(a2 + 112);
      v24 = *v11;
      v23 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = v22;
      *v10 = v24;
      *(_OWORD *)(a1 + 80) = v23;
    }
  }
  else if (v13)
  {
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    v19 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 72) = v19;
    *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    v20 = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 104) = v20;
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    v21 = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 120) = v21;
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(v21);
  }
  else
  {
    v25 = *v11;
    v26 = *(_OWORD *)(a2 + 80);
    v27 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v27;
    *v10 = v25;
    *(_OWORD *)(a1 + 80) = v26;
  }
  return a1;
}

_QWORD *sub_10458(_QWORD *a1)
{
  destroy for LocationFields(a1);
  return a1;
}

__n128 __swift_memcpy128_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 64) = result;
  *(_OWORD *)(a1 + 80) = v6;
  return result;
}

uint64_t assignWithTake for ChildAndParentLocation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease(v6);
  v7 = *(_QWORD *)(a2 + 56);
  v8 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v7;
  swift_bridgeObjectRelease(v8);
  v9 = *(_QWORD *)(a1 + 72);
  if (!v9)
    goto LABEL_5;
  v10 = *(_QWORD *)(a2 + 72);
  if (!v10)
  {
    sub_10458((_QWORD *)(a1 + 64));
LABEL_5:
    v14 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v14;
    v15 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v15;
    return a1;
  }
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v10;
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  v11 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(a2 + 120);
  v13 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v12;
  swift_bridgeObjectRelease(v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for ChildAndParentLocation(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 128))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ChildAndParentLocation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 128) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 128) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ChildAndParentLocation()
{
  return &type metadata for ChildAndParentLocation;
}

_QWORD *sub_10644(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8730);
      v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = _swift_stdlib_malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4])
          memmove(v14, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_11DA0(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_10750(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10888(a1, a2, a3, a4, &qword_3B0A60, type metadata accessor for ShareItem);
}

_QWORD *sub_10764(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0950);
      v11 = (_QWORD *)swift_allocObject(v10, 32 * v9 + 32, 7);
      v12 = _swift_stdlib_malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 1;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 5);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[4 * v8 + 4])
          memmove(v14, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_11E90(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_10874(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10888(a1, a2, a3, a4, &qword_3B0930, (uint64_t (*)(_QWORD))&type metadata accessor for MetricsData);
}

uint64_t sub_10888(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
LABEL_29:
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 14377, 0);
LABEL_31:
        __break(1u);
        return result;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v18 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = __swift_instantiateConcreteTypeFromMangledName(a5);
  v14 = *(_QWORD *)(a6(0) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_QWORD *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  v19 = _swift_stdlib_malloc_size(v18);
  if (!v15)
    goto LABEL_29;
  if (v19 - v17 == 0x8000000000000000 && v15 == -1)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 14384, 0);
    goto LABEL_31;
  }
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  v21 = a6(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  v24 = (unint64_t)v18 + v23;
  if ((a1 & 1) != 0)
  {
    v25 = a4 + v23;
    if ((unint64_t)v18 < a4 || v24 >= v25 + *(_QWORD *)(v22 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v18 + v23, v25, v11, v21);
    }
    else if (v18 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v18 + v23);
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_12734(0, v11, v24, a4, a6);
  }
  swift_bridgeObjectRelease(a4);
  return (uint64_t)v18;
}

_QWORD *sub_10A94(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0A68);
      v11 = (_QWORD *)swift_allocObject(v10, 8 * v9 + 32, 7);
      v12 = _swift_stdlib_malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 25;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 3);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v8 + 4])
          memmove(v14, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_11F80(0, v8, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_10BA0(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0A58);
      v11 = (_QWORD *)swift_allocObject(v10, 32 * v9 + 32, 7);
      v12 = _swift_stdlib_malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 1;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 5);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[4 * v8 + 4])
          memmove(v14, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_12068(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_10CAC(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10888(a1, a2, a3, a4, &qword_3B0928, type metadata accessor for ActionMenu.Child);
}

_QWORD *sub_10CC0(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_11228(a1, a2, a3, a4, (uint64_t *)&unk_3B8750, &qword_3B0A50);
}

uint64_t sub_10CD4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10888(a1, a2, a3, a4, &qword_3B0A48, type metadata accessor for ModernShelf);
}

uint64_t sub_10CE8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10888(a1, a2, a3, a4, &qword_3B0A40, (uint64_t (*)(_QWORD))&type metadata accessor for UUID);
}

_QWORD *sub_10CFC(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_10D10(a1, a2, a3, a4, &qword_3B08F0, (uint64_t *)&unk_3BF7B0);
}

_QWORD *sub_10D10(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    v10 = a2;
    goto LABEL_8;
  }
  v9 = a4[3];
  v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2)
    goto LABEL_8;
  if (v10 + 0x4000000000000000 >= 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v10 = a2;
LABEL_8:
    v11 = a4[2];
    if (v10 <= v11)
      v12 = a4[2];
    else
      v12 = v10;
    if (v12)
    {
      v13 = __swift_instantiateConcreteTypeFromMangledName(a5);
      v14 = (_QWORD *)swift_allocObject(v13, 8 * v12 + 32, 7);
      v15 = _swift_stdlib_malloc_size(v14);
      v16 = v15 - 32;
      if (v15 < 32)
        v16 = v15 - 25;
      v14[2] = v11;
      v14[3] = 2 * (v16 >> 3);
      v17 = v14 + 4;
      if ((v8 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v14 = _swiftEmptyArrayStorage;
      v17 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v14 != a4 || v17 >= &a4[v11 + 4])
          memmove(v17, a4 + 4, 8 * v11);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_12348(0, v11, (unint64_t)v17, (uint64_t)a4, a6);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v14;
  }
  __break(1u);
  return result;
}

_QWORD *sub_10E28(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0A30);
      v11 = (_QWORD *)swift_allocObject(v10, 8 * v9 + 32, 7);
      v12 = _swift_stdlib_malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 25;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 3);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v8 + 4])
          memmove(v14, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1215C(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_10F34(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_10F4C(a1, a2, a3, a4, &qword_3B09D8);
}

_QWORD *sub_10F40(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_10F4C(a1, a2, a3, a4, &qword_3B09D0);
}

_QWORD *sub_10F4C(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  _QWORD *v12;
  size_t v13;
  _QWORD *v14;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = a4[3];
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = a4[2];
    if (v8 <= v9)
      v10 = a4[2];
    else
      v10 = v8;
    if (v10)
    {
      v11 = __swift_instantiateConcreteTypeFromMangledName(a5);
      v12 = (_QWORD *)swift_allocObject(v11, v10 + 32, 7);
      v13 = _swift_stdlib_malloc_size(v12);
      v12[2] = v9;
      v12[3] = 2 * v13 - 64;
      v14 = v12 + 4;
      if ((v6 & 1) != 0)
      {
LABEL_13:
        if (v12 != a4 || v14 >= (_QWORD *)((char *)a4 + v9 + 32))
          memmove(v14, a4 + 4, v9);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v12 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_12264(0, v9, (char *)v14, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v12;
  }
  __break(1u);
  return result;
}

_QWORD *sub_11040(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_10D10(a1, a2, a3, a4, &qword_3B09F0, &qword_3B09F8);
}

_QWORD *sub_11054(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_10D10(a1, a2, a3, a4, &qword_3B0A00, &qword_3B0A08);
}

_QWORD *sub_11068(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_10D10(a1, a2, a3, a4, &qword_3B0A10, &qword_3B0A18);
}

_QWORD *sub_1107C(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_10D10(a1, a2, a3, a4, &qword_3B09E0, &qword_3B09E8);
}

_QWORD *sub_11090(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_10D10(a1, a2, a3, a4, &qword_3B0A20, &qword_3B0A28);
}

_QWORD *sub_110A4(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_117E0(a1, a2, a3, a4, &qword_3B09C0);
}

uint64_t sub_110B8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10888(a1, a2, a3, a4, &qword_3B09C8, type metadata accessor for Information);
}

_QWORD *sub_110CC(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B09B8);
      v11 = (_QWORD *)swift_allocObject(v10, 32 * v9 + 32, 7);
      v12 = _swift_stdlib_malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 1;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 5);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[4 * v8 + 4])
          memmove(v14, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1253C(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_111D8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10888(a1, a2, a3, a4, &qword_3B8800, type metadata accessor for HeaderButtonItem);
}

uint64_t sub_111EC(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10888(a1, a2, a3, a4, &qword_3B0938, type metadata accessor for TabMenu.Item);
}

uint64_t sub_11200(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10888(a1, a2, a3, a4, &qword_3B09B0, type metadata accessor for Link);
}

_QWORD *sub_11214(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_11228(a1, a2, a3, a4, &qword_3B09A0, &qword_3B09A8);
}

_QWORD *sub_11228(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  _QWORD *v16;

  v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    v10 = a2;
    goto LABEL_8;
  }
  v9 = a4[3];
  v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2)
    goto LABEL_8;
  if (v10 + 0x4000000000000000 >= 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v10 = a2;
LABEL_8:
    v11 = a4[2];
    if (v10 <= v11)
      v12 = a4[2];
    else
      v12 = v10;
    if (v12)
    {
      v13 = __swift_instantiateConcreteTypeFromMangledName(a5);
      v14 = (_QWORD *)swift_allocObject(v13, 40 * v12 + 32, 7);
      v15 = _swift_stdlib_malloc_size(v14);
      v14[2] = v11;
      v14[3] = 2 * ((uint64_t)(v15 - 32) / 40);
      v16 = v14 + 4;
      if ((v8 & 1) != 0)
      {
LABEL_13:
        if (v14 != a4 || v16 >= &a4[5 * v11 + 4])
          memmove(v16, a4 + 4, 40 * v11);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v14 = _swiftEmptyArrayStorage;
      v16 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1284C(0, v11, (unint64_t)v16, (uint64_t)a4, a6);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v14;
  }
  __break(1u);
  return result;
}

_QWORD *sub_11354(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0990);
      v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = _swift_stdlib_malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4])
          memmove(v14, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1262C(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_11460(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10888(a1, a2, a3, a4, &qword_3B0988, (uint64_t (*)(_QWORD))&type metadata accessor for UICellAccessory);
}

uint64_t sub_11474(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10888(a1, a2, a3, a4, &qword_3B0980, type metadata accessor for ActionButton);
}

_QWORD *sub_11488(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_11228(a1, a2, a3, a4, &qword_3B0940, &qword_3B0948);
}

uint64_t sub_1149C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10888(a1, a2, a3, a4, &qword_3B0978, (uint64_t (*)(_QWORD))&type metadata accessor for URLQueryItem);
}

_QWORD *sub_114B0(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_11228(a1, a2, a3, a4, &qword_3B0968, &qword_3B0970);
}

uint64_t sub_114C4(char a1, int64_t a2, char a3, unint64_t a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  size_t v16;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
LABEL_29:
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 14377, 0);
LABEL_31:
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (!v9)
  {
    v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0958);
  v11 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B0960) - 8);
  v12 = *(_QWORD *)(v11 + 72);
  v13 = *(unsigned __int8 *)(v11 + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = (_QWORD *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  v16 = _swift_stdlib_malloc_size(v15);
  if (!v12)
    goto LABEL_29;
  if (v16 - v14 == 0x8000000000000000 && v12 == -1)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 14384, 0);
    goto LABEL_31;
  }
  v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(v16 - v14) / v12);
LABEL_19:
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0960);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (unint64_t)v15 + v20;
  if ((a1 & 1) != 0)
  {
    v22 = a4 + v20;
    if ((unint64_t)v15 < a4 || v21 >= v22 + *(_QWORD *)(v19 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v15 + v20, v22, v8, v18);
    }
    else if (v15 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v15 + v20);
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_11C84(0, v8, v21, a4);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v15;
}

_QWORD *sub_116D4(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0920);
      v11 = (_QWORD *)swift_allocObject(v10, v9 + 32, 7);
      v12 = _swift_stdlib_malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * v12 - 64;
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= (_QWORD *)((char *)a4 + v8 + 32))
          memmove(v13, a4 + 4, v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_12264(0, v8, (char *)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_117CC(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_117E0(a1, a2, a3, a4, &qword_3B0918);
}

_QWORD *sub_117E0(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  size_t v13;
  _QWORD *v14;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = a4[3];
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = a4[2];
    if (v8 <= v9)
      v10 = a4[2];
    else
      v10 = v8;
    if (v10)
    {
      v11 = __swift_instantiateConcreteTypeFromMangledName(a5);
      v12 = (_QWORD *)swift_allocObject(v11, 24 * v10 + 32, 7);
      v13 = _swift_stdlib_malloc_size(v12);
      v12[2] = v9;
      v12[3] = 2 * ((uint64_t)(v13 - 32) / 24);
      v14 = v12 + 4;
      if ((v6 & 1) != 0)
      {
LABEL_13:
        if (v12 != a4 || v14 >= &a4[3 * v9 + 4])
          memmove(v14, a4 + 4, 24 * v9);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v12 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1244C(0, v9, (unint64_t)v14, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v12;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1190C(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_10D10(a1, a2, a3, a4, &qword_3B08E0, &qword_3B08E8);
}

_QWORD *sub_11920(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0910);
      v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = _swift_stdlib_malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4])
          memmove(v14, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_12954(0, v8, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_11A2C(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_11A38(a1, a2, a3, a4, &qword_3B0908);
}

_QWORD *sub_11A38(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  size_t v13;
  _QWORD *v14;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = a4[3];
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = a4[2];
    if (v8 <= v9)
      v10 = a4[2];
    else
      v10 = v8;
    if (v10)
    {
      v11 = __swift_instantiateConcreteTypeFromMangledName(a5);
      v12 = (_QWORD *)swift_allocObject(v11, 24 * v10 + 32, 7);
      v13 = _swift_stdlib_malloc_size(v12);
      v12[2] = v9;
      v12[3] = 2 * ((uint64_t)(v13 - 32) / 24);
      v14 = v12 + 4;
      if ((v6 & 1) != 0)
      {
LABEL_13:
        if (v12 != a4 || v14 >= &a4[3 * v9 + 4])
          memmove(v14, a4 + 4, 24 * v9);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v12 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_12B28(0, v9, (char *)v14, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v12;
  }
  __break(1u);
  return result;
}

_QWORD *sub_11B54(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0900);
      v11 = (_QWORD *)swift_allocObject(v10, 56 * v9 + 32, 7);
      v12 = _swift_stdlib_malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 56);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[7 * v8 + 4])
          memmove(v13, a4 + 4, 56 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_12A3C(0, v8, (char *)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_11C78(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_11A38(a1, a2, a3, a4, &qword_3B08F8);
}

uint64_t sub_11C84(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v8 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B0960) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = *(_QWORD *)(v8 + 72);
  v11 = a4 + ((v9 + 32) & ~v9) + v10 * a1;
  v12 = v10 * v4;
  v13 = a3 + v12;
  v14 = v11 + v12;
  if (v11 >= v13 || v14 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v13;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_11DA0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_11E90(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

char *sub_11F80(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = (char *)(a4 + 8 * a1 + 32);
    v6 = 8 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_12068(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1215C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v6 = a4 + 8 * a1 + 32;
    v7 = a3 + 8 * v4;
    if (v6 >= v7 || v6 + 8 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_3B0A38);
      swift_arrayInitWithCopy(a3);
      return v7;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

char *sub_12264(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4;
  char *v5;
  char *v6;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if ((v4 & 0x8000000000000000) != 0)
    {
      result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = (char *)(a4 + a1 + 32);
    v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_12348(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v5 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v7 = a4 + 8 * a1 + 32;
    v8 = a3 + 8 * v5;
    if (v7 >= v8 || v7 + 8 * v5 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      swift_arrayInitWithCopy(a3);
      return v8;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1244C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 24 * a1 + 32;
  v6 = a3 + 24 * v4;
  if (v5 >= v6 || v5 + 24 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1253C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1262C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v6 = a4 + 16 * a1 + 32;
    v7 = a3 + 16 * v4;
    if (v6 >= v7 || v6 + 16 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_3B0998);
      swift_arrayInitWithCopy(a3);
      return v7;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_12734(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v9 = *(_QWORD *)(a5(0) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(v9 + 72);
  v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
  v13 = v11 * v5;
  v14 = a3 + v13;
  v15 = v12 + v13;
  if (v12 >= v14 || v15 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v14;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1284C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v7 = a4 + 40 * a1 + 32;
  v8 = a3 + 40 * v5;
  if (v7 >= v8 || v7 + 40 * v5 <= a3)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    swift_arrayInitWithCopy(a3);
    return v8;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

char *sub_12954(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = (char *)(a4 + 16 * a1 + 32);
    v6 = 16 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

char *sub_12A3C(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = (char *)(a4 + 56 * a1 + 32);
  v6 = 56 * v4;
  v7 = &__dst[v6];
  if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
  {
    memcpy(__dst, v5, v6);
    return v7;
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

char *sub_12B28(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = (char *)(a4 + 24 * a1 + 32);
  v6 = 24 * v4;
  v7 = &__dst[v6];
  if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
  {
    memcpy(__dst, v5, v6);
    return v7;
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t static FromChannelShelvesIntent.kind.getter()
{
  return 0xD000000000000018;
}

uint64_t FindOrCreateEpisodeOfferContentIDsIntent.episodeOffers.getter()
{
  _QWORD *v0;

  return swift_bridgeObjectRetain(*v0);
}

BOOL static FetchSearchEpisodeLockupsIntent.== infix(_:_:)(_QWORD **a1, _QWORD **a2)
{
  return sub_12D80(*a1, *a2);
}

uint64_t sub_12C44(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  BOOL v17;
  uint64_t v19;

  v4 = type metadata accessor for TabMenu.Item(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v10 = (char *)&v19 - v9;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 == *(_QWORD *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      v15 = 1;
    }
    else
    {
      v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      v13 = *(_QWORD *)(v8 + 72);
      v14 = v11 - 1;
      do
      {
        sub_14510(a1 + v12, (uint64_t)v10, type metadata accessor for TabMenu.Item);
        sub_14510(a2 + v12, (uint64_t)v6, type metadata accessor for TabMenu.Item);
        v15 = _s8ShelfKit7TabMenuV4ItemV2eeoiySbAE_AEtFZ_0((uint64_t)v10, (uint64_t)v6);
        sub_145D8((uint64_t)v6, type metadata accessor for TabMenu.Item);
        sub_145D8((uint64_t)v10, type metadata accessor for TabMenu.Item);
        v17 = v14-- != 0;
        if ((v15 & 1) == 0)
          break;
        v12 += v13;
      }
      while (v17);
    }
  }
  else
  {
    v15 = 0;
  }
  return v15 & 1;
}

BOOL sub_12D80(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  _BOOL8 result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (a1[4] != a2[4])
    return 0;
  v3 = a1 + 5;
  v4 = a2 + 5;
  v5 = v2 - 1;
  do
  {
    result = v5 == 0;
    if (!v5)
      break;
    v8 = *v3++;
    v7 = v8;
    v9 = *v4++;
    --v5;
  }
  while (v7 == v9);
  return result;
}

BOOL sub_12DEC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  double *v4;
  double *v5;
  _BOOL8 result;
  BOOL v9;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v3 = v2 - 1;
  v4 = (double *)(a2 + 40);
  v5 = (double *)(a1 + 40);
  do
  {
    result = *v5 == *v4 && *((_QWORD *)v5 - 1) == *((_QWORD *)v4 - 1);
    v9 = v3-- != 0;
    if (!result)
      break;
    v4 += 2;
    v5 += 2;
  }
  while (v9);
  return result;
}

uint64_t sub_12E64(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t i;
  char v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  double v8;
  char v9;
  double v10;
  char v11;
  int v12;
  char v13;
  uint64_t v14;
  _BOOL4 v15;
  char v16;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    for (i = 0; ; i += 56)
    {
      v5 = a1 + i;
      v6 = a2 + i;
      if (*(_QWORD *)(a1 + i + 32) != *(_QWORD *)(a2 + i + 32))
        break;
      v7 = *(unsigned __int8 *)(v5 + 49);
      v8 = *(double *)(v5 + 56);
      v9 = *(_BYTE *)(v5 + 64);
      v10 = *(double *)(v5 + 72);
      v11 = *(_BYTE *)(v5 + 80);
      v12 = *(unsigned __int8 *)(v6 + 49);
      if ((*(_BYTE *)(v5 + 48) & 1) != 0)
      {
        if (!*(_BYTE *)(v6 + 48))
          return 0;
      }
      else
      {
        if (*(double *)(v5 + 40) == *(double *)(v6 + 40))
          v13 = *(_BYTE *)(v6 + 48);
        else
          v13 = 1;
        if ((v13 & 1) != 0)
          return 0;
      }
      if (v7 == 2)
      {
        if (v12 != 2)
          return 0;
      }
      else
      {
        v14 = 0;
        v15 = (v7 & 1) == 0;
        if (v12 == 2 || ((v15 ^ v12) & 1) == 0)
          return v14;
      }
      if ((v9 & 1) != 0)
      {
        if (!*(_BYTE *)(v6 + 64))
          return 0;
      }
      else
      {
        if (v8 == *(double *)(v6 + 56))
          v16 = *(_BYTE *)(v6 + 64);
        else
          v16 = 1;
        if ((v16 & 1) != 0)
          return 0;
      }
      if ((v11 & 1) != 0)
      {
        if (!*(_BYTE *)(v6 + 80))
          return 0;
      }
      else
      {
        if (v10 == *(double *)(v6 + 72))
          v4 = *(_BYTE *)(v6 + 80);
        else
          v4 = 1;
        if ((v4 & 1) != 0)
          return 0;
      }
      if (!--v2)
        return 1;
    }
    return 0;
  }
  return 1;
}

uint64_t sub_12F6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char *v3;
  double *i;
  char v5;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    v3 = (char *)(a2 + 48);
    for (i = (double *)(a1 + 48); *((_QWORD *)i - 2) == *((_QWORD *)v3 - 2); i += 3)
    {
      v5 = *v3;
      if ((*(_BYTE *)i & 1) != 0)
      {
        if (!*v3)
          return 0;
      }
      else
      {
        if (*(i - 1) != *((double *)v3 - 1))
          v5 = 1;
        if ((v5 & 1) != 0)
          return 0;
      }
      v3 += 24;
      if (!--v2)
        return 1;
    }
    return 0;
  }
  return 1;
}

uint64_t sub_12FE8(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  char v10;
  uint64_t result;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *i;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v5 = a1[4];
  v6 = a1[5];
  v7 = a2[4];
  v8 = a2[5];
  v9 = v5 == v7 && v6 == v8;
  if (v9 || (v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v7, v8, 0), result = 0, (v10 & 1) != 0))
  {
    v12 = v2 - 1;
    if (!v12)
      return 1;
    v13 = a2 + 7;
    for (i = a1 + 7; ; i += 2)
    {
      v15 = *(i - 1);
      v16 = *i;
      v17 = *(v13 - 1);
      v18 = *v13;
      v19 = v15 == v17 && v16 == v18;
      if (!v19 && (_stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, v17, v18, 0) & 1) == 0)
        break;
      v13 += 2;
      if (!--v12)
        return 1;
    }
    return 0;
  }
  return result;
}

uint64_t sub_130AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  void (*v19)(char *, uint64_t);
  BOOL v21;
  uint64_t v23;
  uint64_t v24;

  v4 = type metadata accessor for URL(0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v10 = (char *)&v23 - v9;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 == *(_QWORD *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      v18 = 1;
    }
    else
    {
      v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      v23 = *(_QWORD *)(v8 + 72);
      v24 = v8;
      v13 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
      v14 = v11 - 1;
      do
      {
        v15 = a1;
        v13(v10, a1 + v12, v4);
        v16 = a2;
        v13(v7, a2 + v12, v4);
        v17 = sub_F1C0((unint64_t *)&qword_3B0B08, (void (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
        v18 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v7, v4, v17);
        v19 = *(void (**)(char *, uint64_t))(v24 + 8);
        v19(v7, v4);
        v19(v10, v4);
        v21 = v14-- != 0;
        if ((v18 & 1) == 0)
          break;
        v12 += v23;
        a2 = v16;
        a1 = v15;
      }
      while (v21);
    }
  }
  else
  {
    v18 = 0;
  }
  return v18 & 1;
}

uint64_t sub_13230(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t (*v23)(uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int (*v36)(uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;

  v50 = type metadata accessor for ArtworkModel(0);
  v4 = *(_QWORD *)(v50 - 8);
  __chkstk_darwin(v50);
  v6 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
  __chkstk_darwin(v7);
  v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0B18);
  __chkstk_darwin(v10);
  v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Category(0);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v14);
  v20 = (char *)&v42 - v19;
  v21 = *(_QWORD *)(a1 + 16);
  if (v21 == *(_QWORD *)(a2 + 16))
  {
    v44 = v10;
    if (!v21 || a1 == a2)
      return 1;
    v51 = v12;
    v48 = v17;
    v49 = v4;
    v42 = v6;
    v43 = v9;
    v22 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
    v45 = *(_QWORD *)(v18 + 72);
    v23 = type metadata accessor for Category;
    v24 = v50;
    v25 = v44;
    v46 = a2;
    v47 = a1;
    while (1)
    {
      sub_14510(a1 + v22, (uint64_t)v20, v23);
      v26 = v23;
      sub_14510(a2 + v22, (uint64_t)v16, v23);
      if (*(_QWORD *)v20 != *(_QWORD *)v16)
        break;
      v27 = *((_QWORD *)v20 + 1);
      v28 = *((_QWORD *)v20 + 2);
      v29 = *((_QWORD *)v16 + 1);
      v30 = *((_QWORD *)v16 + 2);
      v31 = v27 == v29 && v28 == v30;
      if (!v31 && (_stringCompareWithSmolCheck(_:_:expecting:)(v27, v28, v29, v30, 0) & 1) == 0
        || bswap32(*((_DWORD *)v20 + 6)) != bswap32(*((_DWORD *)v16 + 6)))
      {
        break;
      }
      v32 = *(int *)(v48 + 28);
      v33 = (uint64_t)&v16[v32];
      v34 = (uint64_t)v51;
      v35 = (uint64_t)&v51[*(int *)(v25 + 48)];
      sub_14554((uint64_t)&v20[v32], (uint64_t)v51);
      sub_14554(v33, v35);
      v36 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v49 + 48);
      if (v36(v34, 1, v24) == 1)
      {
        if (v36(v35, 1, v24) != 1)
          goto LABEL_21;
        sub_1459C((uint64_t)v51, &qword_3BEB70);
        a2 = v46;
        a1 = v47;
      }
      else
      {
        v37 = v24;
        v38 = (uint64_t)v43;
        sub_14554(v34, (uint64_t)v43);
        if (v36(v35, 1, v37) == 1)
        {
          sub_145D8(v38, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
LABEL_21:
          sub_1459C((uint64_t)v51, &qword_3B0B18);
          break;
        }
        v39 = (uint64_t)v42;
        sub_14614(v35, (uint64_t)v42);
        v40 = static ArtworkModel.== infix(_:_:)(v38, v39);
        sub_145D8(v39, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
        sub_145D8(v38, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
        sub_1459C(v34, &qword_3BEB70);
        a2 = v46;
        a1 = v47;
        v24 = v50;
        v25 = v44;
        if ((v40 & 1) == 0)
          break;
      }
      v23 = v26;
      sub_145D8((uint64_t)v16, v26);
      sub_145D8((uint64_t)v20, v26);
      v22 += v45;
      if (!--v21)
        return 1;
    }
    sub_145D8((uint64_t)v16, type metadata accessor for Category);
    sub_145D8((uint64_t)v20, type metadata accessor for Category);
  }
  return 0;
}

uint64_t sub_135C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    v3 = (unint64_t *)(a2 + 56);
    v4 = (unint64_t *)(a1 + 56);
    do
    {
      v6 = *(v4 - 2);
      v7 = *(v4 - 1);
      v8 = *v4;
      v9 = *(v3 - 2);
      v10 = *(v3 - 1);
      v11 = *v3;
      swift_bridgeObjectRetain(*v3);
      swift_bridgeObjectRetain_n(v8, 2);
      if ((AdamID.isEmpty.getter(v6) & 1) != 0)
      {
        if (v8)
        {
          v12 = v8;
        }
        else
        {
          if (qword_3B0040 != -1)
            swift_once(&qword_3B0040, sub_2C034);
          v15 = type metadata accessor for OSLogger(0);
          __swift_project_value_buffer(v15, (uint64_t)qword_3B1DC8);
          v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0B10);
          v17 = type metadata accessor for LogMessage(0);
          v18 = swift_allocObject(v16, ((*(unsigned __int8 *)(*(_QWORD *)(v17 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v17 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v17 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v17 - 8) + 80) | 7);
          *(_OWORD *)(v18 + 16) = xmmword_2EA0D0;
          LogMessage.init(stringLiteral:)(0xD00000000000002ELL, 0x800000000030A380);
          Logger.warning(_:)(v18, v15, &protocol witness table for OSLogger);
          swift_bridgeObjectRelease(0);
          swift_bridgeObjectRelease(v18);
          v7 = 0x656E696665646E75;
          v12 = 0xE900000000000064;
        }
      }
      else
      {
        v13 = sub_144B4();
        v7 = BinaryInteger.description.getter(&type metadata for UInt64, v13);
        v12 = v14;
        swift_bridgeObjectRelease(v8);
      }
      swift_bridgeObjectRetain(v11);
      if ((AdamID.isEmpty.getter(v9) & 1) != 0)
      {
        if (v11)
        {
          v19 = v11;
          if (v7 != v10)
            goto LABEL_5;
        }
        else
        {
          if (qword_3B0040 != -1)
            swift_once(&qword_3B0040, sub_2C034);
          v22 = type metadata accessor for OSLogger(0);
          __swift_project_value_buffer(v22, (uint64_t)qword_3B1DC8);
          v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0B10);
          v24 = type metadata accessor for LogMessage(0);
          v25 = swift_allocObject(v23, ((*(unsigned __int8 *)(*(_QWORD *)(v24 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v24 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v24 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v24 - 8) + 80) | 7);
          *(_OWORD *)(v25 + 16) = xmmword_2EA0D0;
          LogMessage.init(stringLiteral:)(0xD00000000000002ELL, 0x800000000030A380);
          Logger.warning(_:)(v25, v22, &protocol witness table for OSLogger);
          swift_bridgeObjectRelease(0);
          swift_bridgeObjectRelease(v25);
          v10 = 0x656E696665646E75;
          v19 = 0xE900000000000064;
          if (v7 != 0x656E696665646E75)
          {
LABEL_5:
            v5 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v12, v10, v19, 0);
            swift_bridgeObjectRelease(v8);
            swift_bridgeObjectRelease(v11);
            swift_bridgeObjectRelease(v12);
            swift_bridgeObjectRelease(v19);
            if ((v5 & 1) == 0)
              return 0;
            goto LABEL_6;
          }
        }
      }
      else
      {
        v20 = sub_144B4();
        v10 = BinaryInteger.description.getter(&type metadata for UInt64, v20);
        v19 = v21;
        swift_bridgeObjectRelease(v11);
        if (v7 != v10)
          goto LABEL_5;
      }
      if (v12 != v19)
        goto LABEL_5;
      swift_bridgeObjectRelease(v8);
      swift_bridgeObjectRelease(v11);
      swift_bridgeObjectRelease_n(v12, 2);
LABEL_6:
      v3 += 4;
      v4 += 4;
      --v2;
    }
    while (v2);
  }
  return 1;
}

uint64_t sub_13968(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  char v13;
  uint64_t result;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  char v26;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v5 = *(unsigned __int8 *)(a2 + 32);
  v6 = EpisodeSortType.rawValue.getter(*(unsigned __int8 *)(a1 + 32));
  v8 = v7;
  v9 = EpisodeSortType.rawValue.getter(v5);
  if (v6 != v9 || v8 != v10)
  {
    v12 = v10;
    v13 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v8, v9, v10, 0);
    swift_bridgeObjectRelease(v8);
    swift_bridgeObjectRelease(v12);
    result = 0;
    if ((v13 & 1) == 0)
      return result;
    v15 = v2 - 1;
    if (v2 != 1)
      goto LABEL_13;
    return 1;
  }
  result = swift_bridgeObjectRelease_n(v8, 2);
  v15 = v2 - 1;
  if (v2 == 1)
    return 1;
LABEL_13:
  v16 = (unsigned __int8 *)(a1 + 33);
  v17 = (unsigned __int8 *)(a2 + 33);
  while (v15)
  {
    v18 = *v17;
    v19 = EpisodeSortType.rawValue.getter(*v16);
    v21 = v20;
    v22 = EpisodeSortType.rawValue.getter(v18);
    if (v19 == v22 && v21 == v23)
    {
      result = swift_bridgeObjectRelease_n(v21, 2);
    }
    else
    {
      v25 = v23;
      v26 = _stringCompareWithSmolCheck(_:_:expecting:)(v19, v21, v22, v23, 0);
      swift_bridgeObjectRelease(v21);
      result = swift_bridgeObjectRelease(v25);
      if ((v26 & 1) == 0)
        return 0;
    }
    ++v16;
    ++v17;
    if (!--v15)
      return 1;
  }
  __break(1u);
  return result;
}

void sub_13ACC(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000018;
  a1[1] = 0x80000000002EA0D0;
}

uint64_t Paragraph.reloadOnClick.getter()
{
  return 1;
}

Swift::Int sub_13B00()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  String.hash(into:)(v1, 0x7364496D616461, 0xE700000000000000);
  return Hasher._finalize()();
}

uint64_t sub_13B50(uint64_t a1)
{
  return String.hash(into:)(a1, 0x7364496D616461, 0xE700000000000000);
}

Swift::Int sub_13B68()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  String.hash(into:)(v1, 0x7364496D616461, 0xE700000000000000);
  return Hasher._finalize()();
}

uint64_t sub_13BB4@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_3729F0, v3);
  result = swift_bridgeObjectRelease(v4);
  *a2 = v5 != 0;
  return result;
}

void sub_13C04(_QWORD *a1@<X8>)
{
  *a1 = 0x7364496D616461;
  a1[1] = 0xE700000000000000;
}

uint64_t static RemotePersonalizationNotificationDetails.adamIdsKey.getter()
{
  return 0x7364496D616461;
}

uint64_t sub_13C38@<X0>(Swift::String string@<0:X0, 8:X1>, BOOL *a2@<X8>)
{
  void *object;
  Swift::String v3;
  Swift::Int v5;
  uint64_t result;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_372A28, v3);
  result = swift_bridgeObjectRelease(object);
  *a2 = v5 != 0;
  return result;
}

uint64_t Episode.timeRemainingOpt.getter()
{
  return 0;
}

void static ShelfCell.artworkPosition.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_13CA4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_13E14();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_13CCC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_13E14();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t FromChannelShelvesIntent.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0A80);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = a1[3];
  v9 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v8);
  v10 = sub_13E14();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for FromChannelShelvesIntent.CodingKeys, &type metadata for FromChannelShelvesIntent.CodingKeys, v10, v8, v9);
  v13 = v7;
  __swift_instantiateConcreteTypeFromMangledName(&qword_3B0A90);
  sub_14020(&qword_3B0A98, (void (*)(void))sub_13E9C, (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v13);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_13E14()
{
  unint64_t result;

  result = qword_3B0A88;
  if (!qword_3B0A88)
  {
    result = swift_getWitnessTable(&unk_2EA37C);
    atomic_store(result, (unint64_t *)&qword_3B0A88);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContextInMetadataState2(255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

unint64_t sub_13E9C()
{
  unint64_t result;

  result = qword_3B0AA0;
  if (!qword_3B0AA0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AdamID);
    atomic_store(result, (unint64_t *)&qword_3B0AA0);
  }
  return result;
}

uint64_t FromChannelShelvesIntent.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0AA8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  v11 = sub_13E14();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for FromChannelShelvesIntent.CodingKeys, &type metadata for FromChannelShelvesIntent.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0A90);
    sub_14020(&qword_3B0AB0, (void (*)(void))sub_14088, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v15, v12);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v15;
  }
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t sub_14020(unint64_t *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t result;

  result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_3B0A90);
    a2();
    result = swift_getWitnessTable(a3);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_14088()
{
  unint64_t result;

  result = qword_3B0AB8;
  if (!qword_3B0AB8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AdamID);
    atomic_store(result, (unint64_t *)&qword_3B0AB8);
  }
  return result;
}

unint64_t sub_140D0()
{
  unint64_t result;

  result = qword_3B0AC0;
  if (!qword_3B0AC0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for FromChannelShelvesIntent);
    atomic_store(result, (unint64_t *)&qword_3B0AC0);
  }
  return result;
}

unint64_t sub_14118()
{
  unint64_t result;

  result = qword_3B0AC8;
  if (!qword_3B0AC8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for FromChannelShelvesIntent);
    atomic_store(result, (unint64_t *)&qword_3B0AC8);
  }
  return result;
}

unint64_t sub_14160()
{
  unint64_t result;

  result = qword_3B0AD0;
  if (!qword_3B0AD0)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_3B0AD8);
    sub_F1C0((unint64_t *)&qword_3B0AE0, (void (*)(uint64_t))type metadata accessor for Shelf, (uint64_t)&protocol conformance descriptor for Shelf);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A]);
    atomic_store(result, (unint64_t *)&qword_3B0AD0);
  }
  return result;
}

uint64_t sub_141DC@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return FromChannelShelvesIntent.init(from:)(a1, a2);
}

uint64_t sub_141F0(_QWORD *a1)
{
  return FromChannelShelvesIntent.encode(to:)(a1);
}

uint64_t sub_14204(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_14470();
  return CustomJSValueConvertible<>.jsRepresentation(in:)(a1, a2, a3, v6);
}

JSValue sub_14260(JSContext a1)
{
  return CustomJSValueConvertible._jsValue(in:)(a1);
}

uint64_t sub_14278@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return sub_44638(a1, a2, a3);
}

ValueMetadata *type metadata accessor for FromChannelShelvesIntent()
{
  return &type metadata for FromChannelShelvesIntent;
}

uint64_t getEnumTagSinglePayload for FromChannelShelvesIntent.CodingKeys(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for FromChannelShelvesIntent.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_14334 + 4 * byte_2EA0E0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_14354 + 4 * byte_2EA0E5[v4]))();
}

_BYTE *sub_14334(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_14354(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1435C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_14364(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1436C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_14374(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t ModernPagePresenter.hideAllHeaderSeparators.getter()
{
  return 0;
}

ValueMetadata *type metadata accessor for FromChannelShelvesIntent.CodingKeys()
{
  return &type metadata for FromChannelShelvesIntent.CodingKeys;
}

unint64_t sub_1439C()
{
  unint64_t result;

  result = qword_3B0AE8;
  if (!qword_3B0AE8)
  {
    result = swift_getWitnessTable(&unk_2EA354);
    atomic_store(result, (unint64_t *)&qword_3B0AE8);
  }
  return result;
}

unint64_t sub_143E4()
{
  unint64_t result;

  result = qword_3B0AF0;
  if (!qword_3B0AF0)
  {
    result = swift_getWitnessTable(&unk_2EA28C);
    atomic_store(result, (unint64_t *)&qword_3B0AF0);
  }
  return result;
}

unint64_t sub_1442C()
{
  unint64_t result;

  result = qword_3B0AF8;
  if (!qword_3B0AF8)
  {
    result = swift_getWitnessTable(&unk_2EA2B4);
    atomic_store(result, (unint64_t *)&qword_3B0AF8);
  }
  return result;
}

unint64_t sub_14470()
{
  unint64_t result;

  result = qword_3B0B00;
  if (!qword_3B0B00)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for FromChannelShelvesIntent);
    atomic_store(result, (unint64_t *)&qword_3B0B00);
  }
  return result;
}

unint64_t sub_144B4()
{
  unint64_t result;

  result = qword_3BE9D0;
  if (!qword_3BE9D0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UInt64);
    atomic_store(result, (unint64_t *)&qword_3BE9D0);
  }
  return result;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t sub_14510(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_14554(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1459C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_145D8(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_14614(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ArtworkModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

ShelfKit::ComponentKinds_optional __swiftcall ComponentKinds.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  ShelfKit::ComponentKinds_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_372A60, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 8;
  if (v5 < 8)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t ComponentKinds.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_146E8 + 4 * byte_2EA3CC[*v0]))(0x6F4C79636167654CLL, 0xEC00000070756B63);
}

unint64_t sub_146E8()
{
  return 0xD000000000000013;
}

uint64_t sub_14720()
{
  return 1802398028;
}

uint64_t sub_14730()
{
  return 0x6948686372616553;
}

uint64_t sub_1474C()
{
  return 0x6F726548776F6853;
}

unint64_t sub_14764()
{
  return 0xD000000000000011;
}

void sub_1478C(char *a1)
{
  sub_1E2298(*a1);
}

void sub_14798()
{
  char *v0;

  sub_2D9284(0, *v0);
}

void sub_147A4(uint64_t a1)
{
  char *v1;

  sub_2D8BE0(a1, *v1);
}

void sub_147AC(uint64_t a1)
{
  char *v1;

  sub_2D9284(a1, *v1);
}

ShelfKit::ComponentKinds_optional sub_147B4(Swift::String *a1)
{
  return ComponentKinds.init(rawValue:)(*a1);
}

uint64_t sub_147C0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = ComponentKinds.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

unint64_t sub_147E4()
{
  uint64_t v0;
  uint64_t inited;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t result;
  uint64_t v19;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0B58);
  inited = swift_initStackObject(v0, &v19);
  *(_OWORD *)(inited + 16) = xmmword_2EA540;
  strcpy((char *)(inited + 32), "LegacyLockup");
  *(_BYTE *)(inited + 45) = 0;
  *(_WORD *)(inited + 46) = -5120;
  v2 = type metadata accessor for LegacyLockup(0);
  v3 = sub_F1C0(&qword_3B0B60, (void (*)(uint64_t))type metadata accessor for LegacyLockup, (uint64_t)&protocol conformance descriptor for LegacyLockup);
  *(_QWORD *)(inited + 48) = v2;
  *(_QWORD *)(inited + 56) = v3;
  *(_QWORD *)(inited + 64) = 0xD000000000000013;
  *(_QWORD *)(inited + 72) = 0x8000000000308CD0;
  v4 = type metadata accessor for LegacyChannelLockup(0);
  v5 = sub_F1C0(&qword_3B0B68, (void (*)(uint64_t))type metadata accessor for LegacyChannelLockup, (uint64_t)&protocol conformance descriptor for LegacyLockup);
  *(_QWORD *)(inited + 80) = v4;
  *(_QWORD *)(inited + 88) = v5;
  *(_QWORD *)(inited + 96) = 0xD000000000000013;
  *(_QWORD *)(inited + 104) = 0x8000000000308CF0;
  v6 = type metadata accessor for LegacyEpisodeLockup(0);
  v7 = sub_F1C0(&qword_3B0B70, (void (*)(uint64_t))type metadata accessor for LegacyEpisodeLockup, (uint64_t)&protocol conformance descriptor for LegacyLockup);
  *(_QWORD *)(inited + 112) = v6;
  *(_QWORD *)(inited + 120) = v7;
  *(_QWORD *)(inited + 128) = 1802398028;
  *(_QWORD *)(inited + 136) = 0xE400000000000000;
  v8 = type metadata accessor for Link(0);
  v9 = sub_F1C0(&qword_3B0B78, (void (*)(uint64_t))type metadata accessor for Link, (uint64_t)&protocol conformance descriptor for Link);
  *(_QWORD *)(inited + 144) = v8;
  *(_QWORD *)(inited + 152) = v9;
  *(_QWORD *)(inited + 160) = 0x6948686372616553;
  *(_QWORD *)(inited + 168) = 0xEA0000000000746ELL;
  v10 = type metadata accessor for SearchHint(0);
  v11 = sub_F1C0(&qword_3B0B80, (void (*)(uint64_t))type metadata accessor for SearchHint, (uint64_t)&protocol conformance descriptor for SearchHint);
  *(_QWORD *)(inited + 176) = v10;
  *(_QWORD *)(inited + 184) = v11;
  *(_QWORD *)(inited + 192) = 0x6F726548776F6853;
  *(_QWORD *)(inited + 200) = 0xE800000000000000;
  v12 = type metadata accessor for ShowHero(0);
  v13 = sub_F1C0(&qword_3B0B88, (void (*)(uint64_t))type metadata accessor for ShowHero, (uint64_t)&protocol conformance descriptor for ShowHero);
  *(_QWORD *)(inited + 208) = v12;
  *(_QWORD *)(inited + 216) = v13;
  *(_QWORD *)(inited + 224) = 0xD000000000000011;
  *(_QWORD *)(inited + 232) = 0x8000000000308D20;
  v14 = type metadata accessor for TranscriptSnippet(0);
  v15 = sub_F1C0(&qword_3B0B90, (void (*)(uint64_t))type metadata accessor for TranscriptSnippet, (uint64_t)&protocol conformance descriptor for TranscriptSnippet);
  *(_QWORD *)(inited + 240) = v14;
  *(_QWORD *)(inited + 248) = v15;
  *(_QWORD *)(inited + 256) = 0xD000000000000011;
  *(_QWORD *)(inited + 264) = 0x8000000000308D40;
  v16 = type metadata accessor for CategorySelection(0);
  v17 = sub_F1C0(&qword_3B0B98, (void (*)(uint64_t))type metadata accessor for CategorySelection, (uint64_t)&protocol conformance descriptor for CategorySelection);
  *(_QWORD *)(inited + 272) = v16;
  *(_QWORD *)(inited + 280) = v17;
  result = sub_28806C(inited);
  qword_3B0B20 = result;
  return result;
}

uint64_t static ComponentKinds.table.getter()
{
  if (qword_3B0020 != -1)
    swift_once(&qword_3B0020, sub_147E4);
  return swift_bridgeObjectRetain(qword_3B0B20);
}

unint64_t sub_14AA8()
{
  unint64_t result;

  result = qword_3B0B28;
  if (!qword_3B0B28)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ComponentKinds);
    atomic_store(result, (unint64_t *)&qword_3B0B28);
  }
  return result;
}

unint64_t sub_14AF0()
{
  unint64_t result;

  result = qword_3B0B30;
  if (!qword_3B0B30)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ComponentKinds);
    atomic_store(result, (unint64_t *)&qword_3B0B30);
  }
  return result;
}

unint64_t sub_14B34()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  if (qword_3B0020 != -1)
    swift_once(&qword_3B0020, sub_147E4);
  v0 = qword_3B0B20;
  v1 = swift_bridgeObjectRetain(qword_3B0B20);
  v2 = sub_1517C(v1);
  swift_bridgeObjectRelease(v0);
  return v2;
}

uint64_t static UInt.observerErrorValue.getter()
{
  return 0;
}

_QWORD *sub_14BA0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_14D2C(a1, a2, a3);
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for ComponentKinds(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF9)
    goto LABEL_17;
  if (a2 + 7 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 7) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 7;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 7;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 7;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 8;
  v8 = v6 - 8;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ComponentKinds(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_14C9C + 4 * byte_2EA3D9[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_14CD0 + 4 * byte_2EA3D4[v4]))();
}

uint64_t sub_14CD0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_14CD8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x14CE0);
  return result;
}

uint64_t sub_14CEC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x14CF4);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_14CF8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_14D00(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_14D0C(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_14D14(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for ComponentKinds()
{
  return &type metadata for ComponentKinds;
}

_QWORD *sub_14D2C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *boxed_opaque_existential_2Tm;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  Swift::String v37;
  void *object;
  Swift::String v39;
  uint64_t v40;
  __int128 v41;
  _BYTE v42[40];
  uint64_t v43;
  unint64_t v44;
  __int128 v45;
  uint64_t v46;

  v7 = type metadata accessor for JSONContext(0);
  __chkstk_darwin(v7);
  v9 = &v42[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v10 = type metadata accessor for JSONObject(0);
  __chkstk_darwin(v10);
  v12 = &v42[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = dynamic_cast_existential_2_conditional(a1, a1, (uint64_t)&protocol descriptor for ComponentModel, (uint64_t)&protocol descriptor for Decodable);
  if (v13)
  {
    v16 = v13;
    v17 = v14;
    v18 = v15;
    sub_150C8((uint64_t)a2, (uint64_t)v42);
    *(_QWORD *)&v45 = v16;
    *((_QWORD *)&v45 + 1) = v17;
    v46 = v18;
    __swift_allocate_boxed_opaque_existential_2Tm(&v43);
    dispatch thunk of Decodable.init(from:)(v42, v16, v18);
    if (v3)
      return __swift_deallocate_boxed_opaque_existential_2(&v43);
LABEL_7:
    v41 = v45;
    v28 = v45;
    v29 = __swift_project_boxed_opaque_existential_1(&v43, v45);
    *(_OWORD *)(a3 + 24) = v41;
    boxed_opaque_existential_2Tm = __swift_allocate_boxed_opaque_existential_2Tm((_QWORD *)a3);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(boxed_opaque_existential_2Tm, v29, v28);
    return (_QWORD *)__swift_destroy_boxed_opaque_existential_1(&v43);
  }
  v20 = dynamic_cast_existential_2_conditional(a1, a1, (uint64_t)&protocol descriptor for ComponentModel, (uint64_t)&protocol descriptor for ExpressibleByJSON);
  if (v20)
  {
    v23 = v20;
    v24 = v21;
    v25 = v22;
    sub_150C8((uint64_t)a2, (uint64_t)v42);
    result = (_QWORD *)JSONObject.init(from:)(v42);
    if (v3)
      return result;
    v26 = a2[3];
    *(_QWORD *)&v41 = a2[4];
    __swift_project_boxed_opaque_existential_1(a2, v26);
    v27 = dispatch thunk of Decoder.userInfo.getter(v26, v41);
    JSONContext.init(userInfo:)(v27);
    *(_QWORD *)&v45 = v23;
    *((_QWORD *)&v45 + 1) = v24;
    v46 = v25;
    __swift_allocate_boxed_opaque_existential_2Tm(&v43);
    dispatch thunk of ExpressibleByJSON.init(deserializing:using:)(v12, v9, v23, v25);
    goto LABEL_7;
  }
  v31 = type metadata accessor for DecodingError(0);
  swift_allocError(v31, &protocol witness table for DecodingError, 0, 0);
  v33 = v32;
  __swift_instantiateConcreteTypeFromMangledName(&qword_3B0B38);
  *v33 = a1;
  v34 = a2[3];
  v35 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v34);
  v36 = dispatch thunk of Decoder.codingPath.getter(v34, v35);
  v43 = 0;
  v44 = 0xE000000000000000;
  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease(v44);
  v43 = 60;
  v44 = 0xE100000000000000;
  v37._countAndFlagsBits = _typeName(_:qualified:)(a1, 0);
  object = v37._object;
  String.append(_:)(v37);
  swift_bridgeObjectRelease(object);
  v39._object = (void *)0x800000000030A3B0;
  v39._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v39);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v36, v43, v44, 0);
  v40 = (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v31 - 8) + 104))(v33, enum case for DecodingError.typeMismatch(_:), v31);
  return (_QWORD *)swift_willThrow(v40);
}

uint64_t dynamic_cast_existential_2_conditional(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  result = swift_conformsToProtocol2(a2, a3);
  if (result)
  {
    if (swift_conformsToProtocol2(a2, a4))
      return a1;
    else
      return 0;
  }
  return result;
}

uint64_t sub_150C8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

_QWORD *__swift_deallocate_boxed_opaque_existential_2(_QWORD *result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result[3] - 8);
  if ((*(_DWORD *)(v1 + 80) & 0x20000) != 0)
    return (_QWORD *)swift_slowDealloc(*result, *(_QWORD *)(v1 + 64)+ ((*(_DWORD *)(v1 + 80) + 16) & ~(unint64_t)*(_DWORD *)(v1 + 80)), *(_DWORD *)(v1 + 80) | 7);
  return result;
}

_QWORD *__swift_allocate_boxed_opaque_existential_2Tm(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (_QWORD *)v2;
  }
  return v1;
}

unint64_t sub_1517C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t result;
  int64_t i;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  int64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t *v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  unint64_t v37;
  __int128 v38;
  uint64_t v39;

  v1 = a1;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_3B0B40);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v36 = v1 + 64;
  v4 = -1 << *(_BYTE *)(v1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(v1 + 64);
  v35 = (unint64_t)(63 - v4) >> 6;
  result = swift_bridgeObjectRetain(v1);
  i = 0;
  v9 = (uint64_t *)&unk_3B0B48;
  v10 = (uint64_t *)&unk_3B0B50;
  if (v6)
    goto LABEL_10;
LABEL_11:
  v18 = i + 1;
  if (__OFADD__(i, 1))
    goto LABEL_36;
  if (v18 >= v35)
    goto LABEL_33;
  v19 = *(_QWORD *)(v36 + 8 * v18);
  v20 = i + 1;
  if (!v19)
  {
    v20 = i + 2;
    if (i + 2 >= v35)
      goto LABEL_33;
    v19 = *(_QWORD *)(v36 + 8 * v20);
    if (!v19)
    {
      v20 = i + 3;
      if (i + 3 >= v35)
        goto LABEL_33;
      v19 = *(_QWORD *)(v36 + 8 * v20);
      if (!v19)
      {
        v20 = i + 4;
        if (i + 4 >= v35)
          goto LABEL_33;
        v19 = *(_QWORD *)(v36 + 8 * v20);
        if (!v19)
        {
          v20 = i + 5;
          if (i + 5 >= v35)
            goto LABEL_33;
          v19 = *(_QWORD *)(v36 + 8 * v20);
          if (!v19)
          {
            v20 = i + 6;
            if (i + 6 >= v35)
              goto LABEL_33;
            v19 = *(_QWORD *)(v36 + 8 * v20);
            v21 = i + 6;
            if (!v19)
            {
              while (1)
              {
                v20 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_37;
                if (v20 >= v35)
                  break;
                v19 = *(_QWORD *)(v36 + 8 * v20);
                ++v21;
                if (v19)
                  goto LABEL_27;
              }
LABEL_33:
              sub_15498(v1);
              return (unint64_t)v3;
            }
          }
        }
      }
    }
  }
LABEL_27:
  v6 = (v19 - 1) & v19;
  v17 = __clz(__rbit64(v19)) + (v20 << 6);
  for (i = v20; ; v17 = v16 | (i << 6))
  {
    v22 = 16 * v17;
    v23 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v17);
    v25 = *v23;
    v24 = v23[1];
    v38 = *(_OWORD *)(*(_QWORD *)(v1 + 56) + v22);
    swift_bridgeObjectRetain(v24);
    v26 = __swift_instantiateConcreteTypeFromMangledName(v9);
    v27 = __swift_instantiateConcreteTypeFromMangledName(v10);
    swift_dynamicCast(&v39, &v38, v26, v27, 7);
    v28 = v39;
    result = sub_211DC0(v25, v24);
    v29 = result;
    if ((v30 & 1) != 0)
    {
      v37 = v6;
      v11 = v1;
      v12 = i;
      v13 = v10;
      v14 = v9;
      v15 = (uint64_t *)(v3[6] + 16 * result);
      result = swift_bridgeObjectRelease(v15[1]);
      *v15 = v25;
      v15[1] = v24;
      v9 = v14;
      v10 = v13;
      i = v12;
      v1 = v11;
      v6 = v37;
      *(_QWORD *)(v3[7] + 8 * v29) = v28;
      if (!v37)
        goto LABEL_11;
      goto LABEL_10;
    }
    if (v3[2] >= v3[3])
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v31 = (uint64_t *)(v3[6] + 16 * result);
    *v31 = v25;
    v31[1] = v24;
    *(_QWORD *)(v3[7] + 8 * result) = v28;
    v32 = v3[2];
    v33 = __OFADD__(v32, 1);
    v34 = v32 + 1;
    if (v33)
      goto LABEL_35;
    v3[2] = v34;
    if (!v6)
      goto LABEL_11;
LABEL_10:
    v16 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_15498(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

uint64_t sub_154A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int *v45;
  _QWORD *boxed_opaque_existential_2Tm;
  char *v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t, uint64_t, uint64_t);
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  char *v76;
  _BYTE v77[17];
  __int128 v78;
  uint64_t v79;
  Swift::String v80;

  v73 = a1;
  v3 = (int *)type metadata accessor for ModernShelf(0);
  v4 = *((_QWORD *)v3 - 1);
  __chkstk_darwin(v3);
  v6 = (_QWORD *)((char *)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v7);
  v76 = (char *)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
  __chkstk_darwin(v9);
  v75 = (char *)&v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ActionMetrics(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = type metadata accessor for FlowDestination(0);
  __chkstk_darwin(v72);
  v15 = (char *)&v65 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
  __chkstk_darwin(v16);
  v74 = (char *)&v65 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for UUID(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v65 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0C38);
  v23 = __chkstk_darwin(v22);
  v25 = (char *)&v65 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((static Podcasts.isRecentlyUnfollowedEnabled()(v23) & 1) == 0)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v4 + 56))(a2, 1, 1, v3);
  v70 = v4;
  v71 = a2;
  v26 = type metadata accessor for Header(0);
  v27 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56);
  v69 = v25;
  v27(v25, 1, 1, v26);
  v28 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8750);
  v29 = swift_allocObject(v28, 72, 7);
  v65 = xmmword_2EA0D0;
  *(_OWORD *)(v29 + 16) = xmmword_2EA0D0;
  v66 = (_QWORD *)(v29 + 32);
  UUID.init()(v29);
  v30 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
  v67 = v31;
  v68 = v30;
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  v32 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v33._countAndFlagsBits = 0xD000000000000023;
  v80._object = (void *)0xE000000000000000;
  v33._object = (void *)0x800000000030A420;
  v34._countAndFlagsBits = 0;
  v34._object = (void *)0xE000000000000000;
  v80._countAndFlagsBits = 0;
  v35 = NSLocalizedString(_:tableName:bundle:value:comment:)(v33, (Swift::String_optional)0, (NSBundle)v32, v34, v80);

  v36 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8E10);
  v37 = swift_allocObject(v36, 72, 7);
  *(_OWORD *)(v37 + 16) = v65;
  *(_QWORD *)(v37 + 56) = &type metadata for Int;
  *(_QWORD *)(v37 + 64) = &protocol witness table for Int;
  *(_QWORD *)(v37 + 32) = v73;
  v38 = static String.localizedStringWithFormat(_:_:)(v35._countAndFlagsBits, v35._object, v37);
  v73 = v39;
  swift_bridgeObjectRelease(v35._object);
  swift_bridgeObjectRelease(v37);
  v40 = type metadata accessor for ArtworkModel(0);
  v41 = (uint64_t)v74;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v74, 1, 1, v40);
  v42 = swift_storeEnumTagMultiPayload(v15, v72, 45);
  *(_WORD *)v77 = 0;
  static ActionMetrics.notInstrumented.getter(v42);
  v43 = type metadata accessor for FlowAction(0);
  swift_allocObject(v43, *(unsigned int *)(v43 + 48), *(unsigned __int16 *)(v43 + 52));
  v44 = FlowAction.init(_:id:title:presentationContext:animationBehavior:presentationStyle:destinationPageHeader:actionMetrics:)((uint64_t)v15, 0, 0, 0, 0, &v77[1], 0, 48, v77, (uint64_t)v13);
  *((_QWORD *)&v78 + 1) = v43;
  v79 = sub_F1C0((unint64_t *)&qword_3B0C40, (void (*)(uint64_t))type metadata accessor for FlowAction, (uint64_t)&protocol conformance descriptor for Action);
  *(_QWORD *)&v77[1] = v44;
  v45 = (int *)type metadata accessor for Link(0);
  *(_QWORD *)(v29 + 56) = v45;
  *(_QWORD *)(v29 + 64) = sub_F1C0(&qword_3B0C48, (void (*)(uint64_t))type metadata accessor for Link, (uint64_t)&protocol conformance descriptor for Link);
  boxed_opaque_existential_2Tm = __swift_allocate_boxed_opaque_existential_2Tm(v66);
  v47 = (char *)boxed_opaque_existential_2Tm + v45[10];
  v48 = type metadata accessor for ImpressionMetrics(0);
  v49 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 56);
  v49(v47, 1, 1, v48);
  v50 = (char *)boxed_opaque_existential_2Tm + v45[11];
  *((_QWORD *)v50 + 4) = 0;
  *(_OWORD *)v50 = 0u;
  *((_OWORD *)v50 + 1) = 0u;
  v51 = v67;
  *boxed_opaque_existential_2Tm = v68;
  boxed_opaque_existential_2Tm[1] = v51;
  v52 = v73;
  boxed_opaque_existential_2Tm[2] = v38;
  boxed_opaque_existential_2Tm[3] = v52;
  boxed_opaque_existential_2Tm[4] = 0;
  boxed_opaque_existential_2Tm[5] = 0;
  sub_15BD4(v41, (uint64_t)boxed_opaque_existential_2Tm + v45[7], &qword_3BEB70);
  *((_BYTE *)boxed_opaque_existential_2Tm + v45[8]) = 32;
  sub_15BD4((uint64_t)&v77[1], (uint64_t)boxed_opaque_existential_2Tm + v45[9], &qword_3B0C50);
  v53 = type metadata accessor for URL(0);
  v54 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 56);
  v55 = (uint64_t)v75;
  v54(v75, 1, 1, v53);
  v79 = 0;
  *(_OWORD *)&v77[1] = 0u;
  v78 = 0u;
  v56 = (uint64_t)v76;
  v49(v76, 1, 1, v48);
  v57 = v3[8];
  *((_BYTE *)v6 + v57) = 3;
  v58 = (uint64_t)v6 + v3[9];
  v54((char *)v58, 1, 1, v53);
  *v6 = 0xD00000000000001BLL;
  v6[1] = 0x800000000030A400;
  sub_15BD4((uint64_t)v69, (uint64_t)v6 + v3[5], &qword_3B0C38);
  v59 = (char *)v6 + v3[6];
  *(_WORD *)v59 = 17;
  *((_WORD *)v59 + 3) = 256;
  *(_DWORD *)(v59 + 2) = 0;
  *((_QWORD *)v59 + 1) = 1;
  *(_QWORD *)((char *)v6 + v3[7]) = v29;
  sub_15B8C(v55, v58);
  *((_BYTE *)v6 + v3[10]) = 1;
  *((_BYTE *)v6 + v3[11]) = 0;
  v60 = (uint64_t)v6 + v3[12];
  if (*((_QWORD *)&v78 + 1))
  {
    sub_F4D8((__int128 *)&v77[1], v60);
  }
  else
  {
    v62 = (unint64_t)v78;
    *(_OWORD *)v60 = *(_OWORD *)&v77[1];
    *(_OWORD *)(v60 + 16) = v62;
    *(_QWORD *)(v60 + 32) = v79;
  }
  v64 = v70;
  v63 = v71;
  sub_15BD4(v56, (uint64_t)v6 + v3[13], (uint64_t *)&unk_3B8790);
  *((_BYTE *)v6 + v57) = 3;
  sub_15C18((uint64_t)v6, v63);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, int *))(v64 + 56))(v63, 0, 1, v3);
}

uint64_t RecentlyUnfollowedLinkProvider.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t RecentlyUnfollowedLinkProvider.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 16, 7);
}

uint64_t type metadata accessor for RecentlyUnfollowedLinkProvider()
{
  return objc_opt_self(_TtC8ShelfKit30RecentlyUnfollowedLinkProvider);
}

uint64_t method lookup function for RecentlyUnfollowedLinkProvider(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for RecentlyUnfollowedLinkProvider);
}

uint64_t sub_15B8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_15BD4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_15C18(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ModernShelf(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t static FetchEpisodeOffersIntent.kind.getter()
{
  return 0xD000000000000018;
}

void sub_15C78(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000018;
  a1[1] = 0x80000000002EA590;
}

ShelfKit::FetchSearchEpisodeLockupsIntent __swiftcall FetchSearchEpisodeLockupsIntent.init(ids:)(Swift::OpaquePointer ids)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  ShelfKit::FetchSearchEpisodeLockupsIntent result;

  v3 = v1;
  v4 = *((_QWORD *)ids._rawValue + 2);
  if (v4)
  {
    swift_bridgeObjectRetain(ids._rawValue);
    v5 = (char *)ids._rawValue + 40;
    v6 = &_swiftEmptyArrayStorage;
    do
    {
      v7 = *(v5 - 1);
      v8 = *v5;
      swift_bridgeObjectRetain(*v5);
      v9 = AdamID.init(_:)(v7, v8);
      if ((v10 & 1) == 0)
      {
        v11 = v9;
        if ((swift_isUniquelyReferenced_nonNull_native(v6) & 1) == 0)
          v6 = (_QWORD *)sub_10870(0, v6[2] + 1, 1, v6);
        v13 = v6[2];
        v12 = v6[3];
        if (v13 >= v12 >> 1)
          v6 = (_QWORD *)sub_10870(v12 > 1, v13 + 1, 1, v6);
        v6[2] = v13 + 1;
        v6[v13 + 4] = v11;
      }
      v5 += 2;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease(ids._rawValue);
  }
  else
  {
    v6 = &_swiftEmptyArrayStorage;
  }
  result.ids._rawValue = (void *)swift_bridgeObjectRelease(ids._rawValue);
  *v3 = v6;
  return result;
}

uint64_t sub_15DA4@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_372FE8, v3);
  result = swift_bridgeObjectRelease(v4);
  *a2 = v5 != 0;
  return result;
}

uint64_t sub_15DF4@<X0>(Swift::String string@<0:X0, 8:X1>, BOOL *a2@<X8>)
{
  void *object;
  Swift::String v3;
  Swift::Int v5;
  uint64_t result;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_373020, v3);
  result = swift_bridgeObjectRelease(object);
  *a2 = v5 != 0;
  return result;
}

uint64_t sub_15E48(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_16030();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_15E70(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_16030();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t FetchEpisodeOffersIntent.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0C58);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = a1[3];
  v9 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v8);
  v10 = sub_16030();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for FetchEpisodeOffersIntent.CodingKeys, &type metadata for FetchEpisodeOffersIntent.CodingKeys, v10, v8, v9);
  v13 = v7;
  __swift_instantiateConcreteTypeFromMangledName(&qword_3B0A90);
  sub_16138(&qword_3B0A98, &qword_3B0A90, (void (*)(void))sub_13E9C, (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v13);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_15FC0(_QWORD *a1)
{
  return FetchEpisodeOffersIntent.encode(to:)(a1);
}

uint64_t sub_15FD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_16368();
  return CustomJSValueConvertible<>.jsRepresentation(in:)(a1, a2, a3, v6);
}

unint64_t sub_16030()
{
  unint64_t result;

  result = qword_3B0C60;
  if (!qword_3B0C60)
  {
    result = swift_getWitnessTable(&unk_2EA7E4);
    atomic_store(result, (unint64_t *)&qword_3B0C60);
  }
  return result;
}

unint64_t sub_16078()
{
  unint64_t result;

  result = qword_3B0C68;
  if (!qword_3B0C68)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for FetchEpisodeOffersIntent);
    atomic_store(result, (unint64_t *)&qword_3B0C68);
  }
  return result;
}

unint64_t sub_160C0()
{
  unint64_t result;

  result = qword_3B0C70;
  if (!qword_3B0C70)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for FetchEpisodeOffersIntent);
    atomic_store(result, (unint64_t *)&qword_3B0C70);
  }
  return result;
}

uint64_t sub_16104()
{
  return sub_16138(&qword_3B0C78, &qword_3B0C80, (void (*)(void))sub_1619C, (uint64_t)&protocol conformance descriptor for <A> [A]);
}

uint64_t sub_16138(unint64_t *a1, uint64_t *a2, void (*a3)(void), uint64_t a4)
{
  uint64_t result;

  result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    a3();
    result = swift_getWitnessTable(a4);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1619C()
{
  unint64_t result;

  result = qword_3B0C88;
  if (!qword_3B0C88)
  {
    type metadata accessor for EpisodeOffer(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for EpisodeOffer);
    atomic_store(result, (unint64_t *)&qword_3B0C88);
  }
  return result;
}

ValueMetadata *type metadata accessor for FetchEpisodeOffersIntent()
{
  return &type metadata for FetchEpisodeOffersIntent;
}

uint64_t storeEnumTagSinglePayload for FetchEpisodeOffersIntent.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_16234 + 4 * byte_2EA5A0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_16254 + 4 * byte_2EA5A5[v4]))();
}

_BYTE *sub_16234(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_16254(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1625C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_16264(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1626C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_16274(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for FetchEpisodeOffersIntent.CodingKeys()
{
  return &type metadata for FetchEpisodeOffersIntent.CodingKeys;
}

unint64_t sub_16294()
{
  unint64_t result;

  result = qword_3B0C90;
  if (!qword_3B0C90)
  {
    result = swift_getWitnessTable(&unk_2EA7BC);
    atomic_store(result, (unint64_t *)&qword_3B0C90);
  }
  return result;
}

unint64_t sub_162DC()
{
  unint64_t result;

  result = qword_3B0C98;
  if (!qword_3B0C98)
  {
    result = swift_getWitnessTable(&unk_2EA6F4);
    atomic_store(result, (unint64_t *)&qword_3B0C98);
  }
  return result;
}

unint64_t sub_16324()
{
  unint64_t result;

  result = qword_3B0CA0;
  if (!qword_3B0CA0)
  {
    result = swift_getWitnessTable(&unk_2EA71C);
    atomic_store(result, (unint64_t *)&qword_3B0CA0);
  }
  return result;
}

unint64_t sub_16368()
{
  unint64_t result;

  result = qword_3B0CA8;
  if (!qword_3B0CA8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for FetchEpisodeOffersIntent);
    atomic_store(result, (unint64_t *)&qword_3B0CA8);
  }
  return result;
}

uint64_t sub_163B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  void (*v10)(_BYTE *, _QWORD);
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  void (*v14)(_BYTE *, _QWORD);
  _BYTE v15[32];
  _BYTE v16[32];
  _BYTE v17[24];
  char v18[24];
  void *v19;
  _BYTE v20[24];

  v1 = type metadata accessor for ActionMetrics(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = &v15[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = v0 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics;
  swift_beginAccess(v0 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v20, 0, 0);
  v6 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v2 + 16))(v4, v5, v1);
  v7 = ActionMetrics.data.getter(v6);
  (*(void (**)(_BYTE *, uint64_t))(v2 + 8))(v4, v1);
  v8 = *(_QWORD *)(v7 + 16);
  result = swift_bridgeObjectRelease(v7);
  if (v8)
  {
    v19 = &type metadata for Bool;
    v18[0] = 1;
    swift_beginAccess(v5, v17, 33, 0);
    v10 = (void (*)(_BYTE *, _QWORD))ActionMetrics.data.modify(v16);
    v12 = v11;
    v13 = *v11;
    result = swift_isUniquelyReferenced_nonNull_native(*v11);
    *v12 = v13;
    if ((result & 1) != 0)
    {
      if (*(_QWORD *)(v13 + 16))
      {
LABEL_4:
        type metadata accessor for MetricsData(0);
        v14 = (void (*)(_BYTE *, _QWORD))MetricsData.fields.modify(v15);
        sub_166FC((uint64_t)v18, 0x6F43646572616873, 0xED0000746E65746ELL);
        v14(v15, 0);
        v10(v16, 0);
        return swift_endAccess(v17);
      }
    }
    else
    {
      result = sub_1E3D4(v13);
      *v12 = result;
      if (*(_QWORD *)(result + 16))
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

Swift::Void __swiftcall ShareablePlayAction.markAsSharedContent()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(_BYTE *, _QWORD);
  void (*v11)(_BYTE *, _QWORD);
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  void (*v16)(_BYTE *, _QWORD);
  uint64_t v17;
  _BYTE v18[32];
  _BYTE v19[32];
  _BYTE v20[32];
  char v21[24];
  void *v22;

  v1 = v0;
  v2 = type metadata accessor for ActionMetrics(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = &v18[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 120))(v4);
  v8 = ActionMetrics.data.getter(v7);
  (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v6, v2);
  v9 = *(_QWORD *)(v8 + 16);
  swift_bridgeObjectRelease(v8);
  if (v9)
  {
    v22 = &type metadata for Bool;
    v21[0] = 1;
    v10 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v1 + 136))(v20);
    v11 = (void (*)(_BYTE *, _QWORD))ActionMetrics.data.modify(v19);
    v13 = v12;
    v14 = *v12;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v12);
    *v13 = v14;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      if (*(_QWORD *)(v14 + 16))
      {
LABEL_4:
        type metadata accessor for MetricsData(0);
        v16 = (void (*)(_BYTE *, _QWORD))MetricsData.fields.modify(v18);
        sub_166FC((uint64_t)v21, 0x6F43646572616873, 0xED0000746E65746ELL);
        v16(v18, 0);
        v11(v19, 0);
        v10(v20, 0);
        return;
      }
    }
    else
    {
      v17 = sub_1E3D4(v14);
      *v13 = v17;
      if (*(_QWORD *)(v17 + 16))
        goto LABEL_4;
    }
    __break(1u);
  }
}

uint64_t sub_166FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v10;
  _OWORD v11[2];

  v4 = v3;
  if (*(_QWORD *)(a1 + 24))
  {
    sub_1F460((_OWORD *)a1, v11);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v10 = *v3;
    *v3 = 0x8000000000000000;
    sub_1D728(v11, a2, a3, isUniquelyReferenced_nonNull_native);
    v8 = *v3;
    *v4 = v10;
    swift_bridgeObjectRelease(a3);
    return swift_bridgeObjectRelease(v8);
  }
  else
  {
    sub_1459C(a1, (uint64_t *)&unk_3BC540);
    sub_1D560(a2, a3, v11);
    swift_bridgeObjectRelease(a3);
    return sub_1459C((uint64_t)v11, (uint64_t *)&unk_3BC540);
  }
}

uint64_t sub_167D0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t result;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v4 = v3;
  v5 = a1;
  if ((*(_BYTE *)(v3 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_episodeAdamId + 8) & 1) != 0)
  {
    v7 = 0;
    v8 = 0xE000000000000000;
  }
  else
  {
    v9 = sub_144B4();
    a1 = BinaryInteger.description.getter(&type metadata for UInt64, v9);
    v7 = a1;
    v8 = a2;
  }
  result = static MetricsTargetType.button.getter(a1, a2);
  if ((*(_BYTE *)(v4 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_isWidgetPlayButton) & 1) != 0)
  {
    v12 = 0xE600000000000000;
    v13 = 0x746567646957;
  }
  else
  {
    v13 = 2036427856;
    if (*(_BYTE *)(v4 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_isSmartPlayButton))
      v13 = 0x616C507472616D53;
    v12 = 0xE400000000000000;
    if (*(_BYTE *)(v4 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_isSmartPlayButton))
      v12 = 0xEF6E6F7474754279;
  }
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v8;
  *(_BYTE *)(a3 + 16) = 1;
  *(_QWORD *)(a3 + 24) = v5;
  *(_QWORD *)(a3 + 32) = result;
  *(_QWORD *)(a3 + 40) = v11;
  *(_QWORD *)(a3 + 48) = v13;
  *(_QWORD *)(a3 + 56) = v12;
  return result;
}

uint64_t PlayAction.contentId.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit10PlayAction_contentId);
}

uint64_t PlayAction.episodeOffer.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1E3E8(v1 + OBJC_IVAR____TtC8ShelfKit10PlayAction_episodeOffer, a1);
}

uint64_t PlayAction.timestamp.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit10PlayAction_timestamp);
}

uint64_t PlayAction.__allocating_init(adamId:episodeOffer:timestamp:actionMetrics:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v6 = v5;
  v30 = a3;
  v31 = a2;
  v29 = a1;
  v32 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v13);
  v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for ActionMetrics(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v29 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  *(_QWORD *)(v20 + OBJC_IVAR____TtC8ShelfKit10PlayAction_contentId) = v29;
  sub_1E3E8(a2, v20 + OBJC_IVAR____TtC8ShelfKit10PlayAction_episodeOffer);
  v21 = v20 + OBJC_IVAR____TtC8ShelfKit10PlayAction_timestamp;
  *(_QWORD *)v21 = v30;
  *(_BYTE *)(v21 + 8) = a4 & 1;
  v22 = a5;
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, a5, v16);
  v23 = type metadata accessor for ImpressionMetrics(0);
  v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v15, 1, 1, v23);
  UUID.init()(v24);
  v25 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
  v27 = v26;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v32);
  *(_QWORD *)(v20 + 16) = v25;
  *(_QWORD *)(v20 + 24) = v27;
  *(_QWORD *)(v20 + 32) = 0;
  *(_QWORD *)(v20 + 40) = 0;
  *(_BYTE *)(v20 + 48) = 32;
  (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(v20 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v19, v16);
  sub_15BD4((uint64_t)v15, v20 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics, (uint64_t *)&unk_3B8790);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v22, v16);
  sub_1E42C(v31);
  return v20;
}

uint64_t PlayAction.init(adamId:episodeOffer:timestamp:actionMetrics:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;

  v6 = v5;
  v28 = a4;
  v27 = a3;
  v29 = a2;
  v30 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v13);
  v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for ActionMetrics(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v6 + OBJC_IVAR____TtC8ShelfKit10PlayAction_contentId) = a1;
  sub_1E3E8(a2, v6 + OBJC_IVAR____TtC8ShelfKit10PlayAction_episodeOffer);
  v20 = v6 + OBJC_IVAR____TtC8ShelfKit10PlayAction_timestamp;
  *(_QWORD *)v20 = v27;
  *(_BYTE *)(v20 + 8) = v28 & 1;
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, a5, v16);
  v21 = type metadata accessor for ImpressionMetrics(0);
  v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v15, 1, 1, v21);
  UUID.init()(v22);
  v23 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
  v25 = v24;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v30);
  *(_QWORD *)(v6 + 16) = v23;
  *(_QWORD *)(v6 + 24) = v25;
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 40) = 0;
  *(_BYTE *)(v6 + 48) = 32;
  (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(v6 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v19, v16);
  sub_15BD4((uint64_t)v15, v6 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics, (uint64_t *)&unk_3B8790);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(a5, v16);
  sub_1E42C(v29);
  return v6;
}

uint64_t PlayAction.__allocating_init(deserializing:using:)(uint64_t a1, uint64_t a2)
{
  return sub_178BC(a1, a2, (uint64_t (*)(uint64_t, uint64_t))PlayAction.init(deserializing:using:));
}

uint64_t PlayAction.init(deserializing:using:)(char *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(_QWORD, _QWORD);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  void (*v38)(char *, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  void (*v50)(_QWORD, _QWORD);
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;

  v3 = v2;
  v57 = a2;
  v52 = *v3;
  v56 = type metadata accessor for JSONContext(0);
  v5 = *(_QWORD *)(v56 - 8);
  v6 = __chkstk_darwin(v56);
  v49 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v9 = (char *)&v47 - v8;
  v10 = type metadata accessor for EpisodeOffer(0);
  __chkstk_darwin(v10);
  v51 = (uint64_t *)((char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = type metadata accessor for JSONObject(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v48 = (char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v47 - v17;
  __chkstk_darwin(v16);
  v20 = (char *)&v47 - v19;
  swift_retain(v3);
  v55 = a1;
  v21 = JSONObject.subscript.getter(0x49746E65746E6F63, 0xE900000000000064);
  v22 = JSONObject.string.getter(v21);
  v54 = v5;
  if (v23)
  {
    v24 = v23;
    v53 = v12;
    v25 = v50;
    v26 = static AdamID.parse(_:)(v22, v23);
    if (v25)
    {
      v27 = swift_bridgeObjectRelease(v24);
      v28 = static AdamID.empty.getter(v27);
      swift_errorRelease(v25);
    }
    else
    {
      v28 = v26;
      swift_bridgeObjectRelease(v24);
    }
    v47 = v13;
    v50 = *(void (**)(_QWORD, _QWORD))(v13 + 8);
    v50(v20, v53);
    *(uint64_t *)((char *)v3 + OBJC_IVAR____TtC8ShelfKit10PlayAction_contentId) = v28;
    v37 = v55;
    JSONObject.subscript.getter(0x4F65646F73697065, 0xEC00000072656666);
    v38 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v39 = v57;
    v40 = v56;
    v38(v9, v57, v56);
    v41 = v51;
    EpisodeOffer.init(deserializing:using:)((uint64_t)v18, (uint64_t)v9, v51);
    sub_1E4B0((uint64_t)v41, (uint64_t)v3 + OBJC_IVAR____TtC8ShelfKit10PlayAction_episodeOffer);
    v43 = (uint64_t)v3 + OBJC_IVAR____TtC8ShelfKit10PlayAction_timestamp;
    *(_QWORD *)v43 = 0;
    *(_BYTE *)(v43 + 8) = 1;
    swift_release(v3);
    v44 = v48;
    v45 = v53;
    (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v48, v37, v53);
    v46 = (uint64_t)v49;
    v38(v49, v39, v40);
    v30 = Action.init(deserializing:using:)(v44, v46);
    (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v39, v40);
    v50(v37, v45);
  }
  else
  {
    v29 = *(void (**)(char *, uint64_t))(v13 + 8);
    v29(v20, v12);
    v30 = type metadata accessor for JSONError(0);
    v31 = sub_1E468();
    swift_allocError(v30, v31, 0, 0);
    v33 = v32;
    v34 = *v3;
    swift_release(v3);
    *v33 = 0x49746E65746E6F63;
    v33[1] = 0xE900000000000064;
    v33[2] = v34;
    v35 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v30 - 8) + 104))(v33, enum case for JSONError.missingProperty(_:), v30);
    swift_willThrow(v35);
    v36 = v55;
    (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v57, v56);
    v29(v36, v12);
    swift_deallocPartialClassInstance(v3, v52, *(unsigned int *)(*v3 + 48), *(unsigned __int16 *)(*v3 + 52));
  }
  return v30;
}

void PlayAction.init(uniqueId:title:presentationStyle:actionMetrics:impressionMetrics:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  sub_1D2B8(a1, a2, a3, a4, a5, a6, a7, (uint64_t)"ShelfKit.PlayAction", 0x13u);
}

uint64_t sub_171A0()
{
  uint64_t v0;

  return sub_1E42C(v0 + OBJC_IVAR____TtC8ShelfKit10PlayAction_episodeOffer);
}

uint64_t PlayAction.deinit()
{
  return sub_1ABAC(&OBJC_IVAR____TtC8ShelfKit10PlayAction_episodeOffer);
}

uint64_t PlayAction.__deallocating_deinit()
{
  return sub_1AC44(&OBJC_IVAR____TtC8ShelfKit10PlayAction_episodeOffer);
}

uint64_t sub_171C8()
{
  return sub_163B0();
}

uint64_t PlayAction.playPauseAction.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t);
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char v41[24];

  v1 = v0;
  v2 = type metadata accessor for UUID(0);
  v39 = *(_QWORD *)(v2 - 8);
  v40 = v2;
  __chkstk_darwin(v2);
  v38 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v4);
  v37 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ActionMetrics(0);
  v35 = *(_QWORD *)(v6 - 8);
  v7 = v35;
  v8 = __chkstk_darwin(v6);
  v36 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)&v34 - v10;
  v12 = type metadata accessor for EpisodeOffer(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit10PlayAction_contentId);
  sub_1E3E8(v1 + OBJC_IVAR____TtC8ShelfKit10PlayAction_episodeOffer, (uint64_t)v14);
  v16 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit10PlayAction_timestamp);
  v17 = *(_BYTE *)(v1 + OBJC_IVAR____TtC8ShelfKit10PlayAction_timestamp + 8);
  v18 = v1 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics;
  swift_beginAccess(v1 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v41, 0, 0);
  v19 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v20 = v11;
  v34 = v11;
  v19(v11, v18, v6);
  v21 = type metadata accessor for PlayPauseAction(0);
  v22 = swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
  *(_QWORD *)(v22 + OBJC_IVAR____TtC8ShelfKit15PlayPauseAction_contentId) = v15;
  sub_1E3E8((uint64_t)v14, v22 + OBJC_IVAR____TtC8ShelfKit15PlayPauseAction_episodeOffer);
  v23 = v22 + OBJC_IVAR____TtC8ShelfKit15PlayPauseAction_timestamp;
  *(_QWORD *)v23 = v16;
  *(_BYTE *)(v23 + 8) = v17;
  *(_QWORD *)(v22 + OBJC_IVAR____TtC8ShelfKit15PlayPauseAction_state) = 1;
  v24 = v36;
  v19(v36, (uint64_t)v20, v6);
  v25 = type metadata accessor for ImpressionMetrics(0);
  v26 = (uint64_t)v37;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v37, 1, 1, v25);
  v27 = swift_retain(v1);
  v28 = v38;
  UUID.init()(v27);
  v29 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
  v31 = v30;
  (*(void (**)(char *, uint64_t))(v39 + 8))(v28, v40);
  *(_QWORD *)(v22 + 16) = v29;
  *(_QWORD *)(v22 + 24) = v31;
  *(_QWORD *)(v22 + 32) = 0;
  *(_QWORD *)(v22 + 40) = 0;
  *(_BYTE *)(v22 + 48) = 32;
  v32 = v35;
  (*(void (**)(uint64_t, char *, uint64_t))(v35 + 32))(v22 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v24, v6);
  sub_15BD4(v26, v22 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics, (uint64_t *)&unk_3B8790);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v34, v6);
  sub_1E42C((uint64_t)v14);
  swift_release(v1);
  return v22;
}

uint64_t PlayPauseAction.__allocating_init(playAction:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char v41[24];

  v2 = v1;
  v4 = type metadata accessor for UUID(0);
  v39 = *(_QWORD *)(v4 - 8);
  v40 = v4;
  __chkstk_darwin(v4);
  v38 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v6);
  v37 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ActionMetrics(0);
  v34 = *(_QWORD *)(v8 - 8);
  v9 = v34;
  v10 = __chkstk_darwin(v8);
  v35 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v13 = (char *)&v34 - v12;
  v14 = type metadata accessor for EpisodeOffer(0);
  __chkstk_darwin(v14);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8ShelfKit10PlayAction_contentId);
  sub_1E3E8(a1 + OBJC_IVAR____TtC8ShelfKit10PlayAction_episodeOffer, (uint64_t)v16);
  v18 = a1;
  v36 = a1;
  v19 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8ShelfKit10PlayAction_timestamp);
  LOBYTE(a1) = *(_BYTE *)(a1 + OBJC_IVAR____TtC8ShelfKit10PlayAction_timestamp + 8);
  v20 = v18 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics;
  swift_beginAccess(v18 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v41, 0, 0);
  v21 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v21(v13, v20, v8);
  v22 = swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  *(_QWORD *)(v22 + OBJC_IVAR____TtC8ShelfKit15PlayPauseAction_contentId) = v17;
  sub_1E3E8((uint64_t)v16, v22 + OBJC_IVAR____TtC8ShelfKit15PlayPauseAction_episodeOffer);
  v23 = v22 + OBJC_IVAR____TtC8ShelfKit15PlayPauseAction_timestamp;
  *(_QWORD *)v23 = v19;
  *(_BYTE *)(v23 + 8) = a1;
  *(_QWORD *)(v22 + OBJC_IVAR____TtC8ShelfKit15PlayPauseAction_state) = 1;
  v24 = v35;
  v21(v35, (uint64_t)v13, v8);
  v25 = type metadata accessor for ImpressionMetrics(0);
  v26 = (uint64_t)v37;
  v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v37, 1, 1, v25);
  v28 = v38;
  UUID.init()(v27);
  v29 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
  v31 = v30;
  (*(void (**)(char *, uint64_t))(v39 + 8))(v28, v40);
  *(_QWORD *)(v22 + 16) = v29;
  *(_QWORD *)(v22 + 24) = v31;
  *(_QWORD *)(v22 + 32) = 0;
  *(_QWORD *)(v22 + 40) = 0;
  *(_BYTE *)(v22 + 48) = 32;
  v32 = v34;
  (*(void (**)(uint64_t, char *, uint64_t))(v34 + 32))(v22 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v24, v8);
  sub_15BD4(v26, v22 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics, (uint64_t *)&unk_3B8790);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v13, v8);
  sub_1E42C((uint64_t)v16);
  swift_release(v36);
  return v22;
}

uint64_t PlayAction.episodeAdamID.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit10PlayAction_contentId);
}

uint64_t PlayAction.episodeIdentifier.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit10PlayAction_contentId);
}

uint64_t sub_1780C@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return sub_1E3E8(*v1 + OBJC_IVAR____TtC8ShelfKit10PlayAction_episodeOffer, a1);
}

uint64_t sub_17824()
{
  return PlayAction.playPauseAction.getter();
}

uint64_t sub_17844()
{
  _QWORD *v0;

  return *(_QWORD *)(*v0 + OBJC_IVAR____TtC8ShelfKit10PlayAction_contentId);
}

uint64_t sub_1785C()
{
  _QWORD *v0;

  return *(_QWORD *)(*v0 + OBJC_IVAR____TtC8ShelfKit10PlayAction_contentId);
}

uint64_t PodcastPlayAction.showId.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit17PodcastPlayAction_showId);
}

uint64_t PodcastPlayAction.__allocating_init(showId:actionMetrics:)(uint64_t a1, uint64_t a2)
{
  return sub_17C44(a1, a2, &OBJC_IVAR____TtC8ShelfKit17PodcastPlayAction_showId);
}

uint64_t PodcastPlayAction.init(showId:actionMetrics:)(uint64_t a1, uint64_t a2)
{
  return sub_17E28(a1, a2, &OBJC_IVAR____TtC8ShelfKit17PodcastPlayAction_showId);
}

uint64_t PodcastPlayAction.__allocating_init(deserializing:using:)(uint64_t a1, uint64_t a2)
{
  return sub_178BC(a1, a2, (uint64_t (*)(uint64_t, uint64_t))PodcastPlayAction.init(deserializing:using:));
}

uint64_t sub_178BC(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v3;

  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  return a3(a1, a2);
}

_QWORD *PodcastPlayAction.init(deserializing:using:)(char *a1, uint64_t a2)
{
  void (**v2)(char *, uint64_t);
  uint64_t v3;
  void (**v4)(char *, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v36)(char *, uint64_t);
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;

  v4 = v2;
  v40 = a2;
  v36 = *v4;
  v39 = type metadata accessor for JSONContext(0);
  v6 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39);
  v37 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for JSONObject(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v36 - v13;
  swift_retain(v4);
  v38 = a1;
  v15 = JSONObject.subscript.getter(0x6449776F6873, 0xE600000000000000);
  v16 = JSONObject.string.getter(v15);
  if (v17)
  {
    v18 = v17;
    v19 = static AdamID.parse(_:)(v16, v17);
    if (v3)
    {
      v20 = swift_bridgeObjectRelease(v18);
      v21 = static AdamID.empty.getter(v20);
      swift_errorRelease(v3);
    }
    else
    {
      v21 = v19;
      swift_bridgeObjectRelease(v18);
    }
    v29 = v8;
    v36 = *(void (**)(char *, uint64_t))(v9 + 8);
    v36(v14, v8);
    *(void (**)(char *, uint64_t))((char *)v4 + OBJC_IVAR____TtC8ShelfKit17PodcastPlayAction_showId) = (void (*)(char *, uint64_t))v21;
    swift_release(v4);
    v30 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
    v31 = v38;
    v30(v12, v38, v8);
    v32 = (uint64_t)v37;
    v33 = v40;
    v34 = v39;
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v37, v40, v39);
    v26 = (_QWORD *)Action.init(deserializing:using:)(v12, v32);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v33, v34);
    v36(v31, v29);
  }
  else
  {
    v22 = *(void (**)(char *, uint64_t))(v9 + 8);
    v22(v14, v8);
    v23 = type metadata accessor for JSONError(0);
    v24 = sub_1E468();
    swift_allocError(v23, v24, 0, 0);
    v26 = v25;
    v27 = *v4;
    swift_release(v4);
    *v26 = 0x6449776F6873;
    v26[1] = 0xE600000000000000;
    v26[2] = v27;
    v28 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v23 - 8) + 104))(v26, enum case for JSONError.missingProperty(_:), v23);
    swift_willThrow(v28);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v40, v39);
    v22(v38, v8);
    swift_deallocPartialClassInstance(v4, v36, *((unsigned int *)*v4 + 12), *((unsigned __int16 *)*v4 + 26));
  }
  return v26;
}

void PodcastPlayAction.init(uniqueId:title:presentationStyle:actionMetrics:impressionMetrics:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  sub_1D2B8(a1, a2, a3, a4, a5, a6, a7, (uint64_t)"ShelfKit.PodcastPlayAction", 0x1Au);
}

uint64_t StoreEpisodePlayAction.episodeId.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit22StoreEpisodePlayAction_episodeId);
}

uint64_t StoreEpisodePlayAction.__allocating_init(episodeId:actionMetrics:)(uint64_t a1, uint64_t a2)
{
  return sub_17C44(a1, a2, &OBJC_IVAR____TtC8ShelfKit22StoreEpisodePlayAction_episodeId);
}

uint64_t sub_17C44(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  _QWORD *v26;

  v25 = a2;
  v26 = a3;
  v4 = v3;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v11);
  v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for ActionMetrics(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  *(_QWORD *)(v18 + *v26) = a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a2, v14);
  v19 = type metadata accessor for ImpressionMetrics(0);
  v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v13, 1, 1, v19);
  UUID.init()(v20);
  v21 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
  v23 = v22;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  *(_QWORD *)(v18 + 16) = v21;
  *(_QWORD *)(v18 + 24) = v23;
  *(_QWORD *)(v18 + 32) = 0;
  *(_QWORD *)(v18 + 40) = 0;
  *(_BYTE *)(v18 + 48) = 32;
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(v18 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v17, v14);
  sub_15BD4((uint64_t)v13, v18 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics, (uint64_t *)&unk_3B8790);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v25, v14);
  return v18;
}

uint64_t StoreEpisodePlayAction.init(episodeId:actionMetrics:)(uint64_t a1, uint64_t a2)
{
  return sub_17E28(a1, a2, &OBJC_IVAR____TtC8ShelfKit22StoreEpisodePlayAction_episodeId);
}

uint64_t sub_17E28(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v24;
  uint64_t v25;

  v24 = a3;
  v25 = a2;
  v4 = v3;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v11);
  v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for ActionMetrics(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v4 + *v24) = a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a2, v14);
  v18 = type metadata accessor for ImpressionMetrics(0);
  v19 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v13, 1, 1, v18);
  UUID.init()(v19);
  v20 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
  v22 = v21;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  *(_QWORD *)(v4 + 16) = v20;
  *(_QWORD *)(v4 + 24) = v22;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = 0;
  *(_BYTE *)(v4 + 48) = 32;
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(v4 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v17, v14);
  sub_15BD4((uint64_t)v13, v4 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics, (uint64_t *)&unk_3B8790);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v25, v14);
  return v4;
}

void StoreEpisodePlayAction.init(deserializing:using:)(uint64_t a1, uint64_t a2)
{
  sub_1D220(a1, a2, 167);
}

void StoreEpisodePlayAction.init(uniqueId:title:presentationStyle:actionMetrics:impressionMetrics:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  sub_1D2B8(a1, a2, a3, a4, a5, a6, a7, (uint64_t)"ShelfKit.StoreEpisodePlayAction", 0x1Fu);
}

uint64_t _s8ShelfKit28SeekToTimestampAndPlayActionCfd_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  v1 = v0 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics;
  v2 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_1459C(v0 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics, (uint64_t *)&unk_3B8790);
  return v0;
}

uint64_t _s8ShelfKit28SeekToTimestampAndPlayActionCfD_0()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  v1 = (char *)v0 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics;
  v2 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_1459C((uint64_t)v0 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics, (uint64_t *)&unk_3B8790);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

double SeekToTimestampAndPlayAction.timestamp.getter()
{
  uint64_t v0;

  return *(double *)(v0 + OBJC_IVAR____TtC8ShelfKit28SeekToTimestampAndPlayAction_timestamp);
}

uint64_t SeekToTimestampAndPlayAction.episodeId.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit28SeekToTimestampAndPlayAction_episodeId);
}

uint64_t SeekToTimestampAndPlayAction.__allocating_init(episodeId:timestamp:actionMetrics:)(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;

  v4 = v3;
  v27 = a2;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v12);
  v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for ActionMetrics(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  *(double *)(v19 + OBJC_IVAR____TtC8ShelfKit28SeekToTimestampAndPlayAction_timestamp) = a3;
  *(_QWORD *)(v19 + OBJC_IVAR____TtC8ShelfKit28SeekToTimestampAndPlayAction_episodeId) = a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a2, v15);
  v20 = type metadata accessor for ImpressionMetrics(0);
  v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v14, 1, 1, v20);
  UUID.init()(v21);
  v22 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
  v24 = v23;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  *(_QWORD *)(v19 + 16) = v22;
  *(_QWORD *)(v19 + 24) = v24;
  *(_QWORD *)(v19 + 32) = 0;
  *(_QWORD *)(v19 + 40) = 0;
  *(_BYTE *)(v19 + 48) = 32;
  (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(v19 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v18, v15);
  sub_15BD4((uint64_t)v14, v19 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics, (uint64_t *)&unk_3B8790);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v27, v15);
  return v19;
}

uint64_t SeekToTimestampAndPlayAction.init(episodeId:timestamp:actionMetrics:)(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;

  v4 = v3;
  v26 = a2;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v12);
  v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for ActionMetrics(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(double *)(v4 + OBJC_IVAR____TtC8ShelfKit28SeekToTimestampAndPlayAction_timestamp) = a3;
  *(_QWORD *)(v4 + OBJC_IVAR____TtC8ShelfKit28SeekToTimestampAndPlayAction_episodeId) = a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a2, v15);
  v19 = type metadata accessor for ImpressionMetrics(0);
  v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v14, 1, 1, v19);
  UUID.init()(v20);
  v21 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
  v23 = v22;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  *(_QWORD *)(v4 + 16) = v21;
  *(_QWORD *)(v4 + 24) = v23;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = 0;
  *(_BYTE *)(v4 + 48) = 32;
  (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(v4 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v18, v15);
  sub_15BD4((uint64_t)v14, v4 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics, (uint64_t *)&unk_3B8790);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v26, v15);
  return v4;
}

void SeekToTimestampAndPlayAction.init(deserializing:using:)(uint64_t a1, uint64_t a2)
{
  sub_1D220(a1, a2, 188);
}

uint64_t SeekToTimestampAndPlayAction.__allocating_init(episodeShareURL:actionMetrics:)(uint64_t a1, char *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  void (*v38)(char *, uint64_t);
  void (*v39)(char *, uint64_t, uint64_t);
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  void (*v55)(char *, uint64_t);
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;

  v65 = a2;
  v64 = type metadata accessor for UUID(0);
  v62 = *(_QWORD *)(v64 - 8);
  __chkstk_darwin(v64);
  v61 = (char *)&v54 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v4);
  v63 = (char *)&v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ActionMetrics(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v54 - v11;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0CB8);
  __chkstk_darwin(v13);
  v15 = (char *)&v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for URLComponents(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v54 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v22 = (char *)&v54 - v21;
  URLComponents.init(url:resolvingAgainstBaseURL:)(a1, 0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v65, v6);
    v23 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(a1, v23);
    sub_1459C((uint64_t)v15, &qword_3B0CB8);
    return 0;
  }
  v56 = v10;
  v57 = v12;
  v58 = v6;
  v59 = a1;
  v24 = v65;
  (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v22, v15, v16);
  v25 = sub_1899C();
  v26 = v22;
  if ((v27 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v24, v58);
    v35 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 8))(v59, v35);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v22, v16);
    return 0;
  }
  v28 = v25;
  v29 = URLComponents.playerTime.getter();
  v31 = v30;
  (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v20, v26, v16);
  if ((v31 & 1) != 0)
  {
    v29 = URLComponents.referenceTime.getter();
    v37 = v36;
    v38 = *(void (**)(char *, uint64_t))(v17 + 8);
    v38(v20, v16);
    v32 = v24;
    v33 = v7;
    v34 = v58;
    if ((v37 & 1) != 0)
    {
      (*(void (**)(char *, uint64_t))(v33 + 8))(v24, v58);
      v52 = type metadata accessor for URL(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 8))(v59, v52);
      v38(v26, v16);
      return 0;
    }
    v54 = v16;
    v55 = v38;
  }
  else
  {
    v55 = *(void (**)(char *, uint64_t))(v17 + 8);
    v55(v20, v16);
    v32 = v24;
    v33 = v7;
    v34 = v58;
    v54 = v16;
  }
  v39 = *(void (**)(char *, uint64_t, uint64_t))(v33 + 16);
  v40 = v57;
  v39(v57, (uint64_t)v32, v34);
  v41 = swift_allocObject(v60, *(unsigned int *)(v60 + 48), *(unsigned __int16 *)(v60 + 52));
  *(_QWORD *)(v41 + OBJC_IVAR____TtC8ShelfKit28SeekToTimestampAndPlayAction_timestamp) = v29;
  *(_QWORD *)(v41 + OBJC_IVAR____TtC8ShelfKit28SeekToTimestampAndPlayAction_episodeId) = v28;
  v42 = v56;
  v39(v56, (uint64_t)v40, v34);
  v43 = type metadata accessor for ImpressionMetrics(0);
  v44 = (uint64_t)v63;
  v45 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56))(v63, 1, 1, v43);
  v46 = v61;
  UUID.init()(v45);
  v47 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
  v49 = v48;
  (*(void (**)(char *, uint64_t))(v62 + 8))(v46, v64);
  *(_QWORD *)(v41 + 16) = v47;
  *(_QWORD *)(v41 + 24) = v49;
  *(_QWORD *)(v41 + 32) = 0;
  *(_QWORD *)(v41 + 40) = 0;
  *(_BYTE *)(v41 + 48) = 32;
  (*(void (**)(uint64_t, char *, uint64_t))(v33 + 32))(v41 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v42, v34);
  sub_15BD4(v44, v41 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics, (uint64_t *)&unk_3B8790);
  v50 = *(void (**)(char *, uint64_t))(v33 + 8);
  v50(v40, v34);
  v50(v65, v34);
  v51 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 8))(v59, v51);
  v55(v26, v54);
  return v41;
}

uint64_t sub_1899C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(char *, unint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v26[2];

  v0 = type metadata accessor for URLQueryItem(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)v26 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0CC0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = URLComponents.queryItems.getter(v5);
  if (!v8)
    return 0;
  v9 = v8;
  v10 = *(_QWORD *)(v8 + 16);
  if (v10)
  {
    v26[0] = v7;
    v11 = v8 + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
    v12 = *(_QWORD *)(v1 + 72);
    v13 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v1 + 16);
    swift_bridgeObjectRetain(v8);
    while (1)
    {
      v14 = v13(v3, v11, v0);
      v15 = URLQueryItem.name.getter(v14);
      v17 = v16;
      if (v15 == 105 && v16 == 0xE100000000000000)
      {
        swift_bridgeObjectRelease(v9);
        v20 = 0xE100000000000000;
        goto LABEL_12;
      }
      v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, 105, 0xE100000000000000, 0);
      swift_bridgeObjectRelease(v17);
      if ((v18 & 1) != 0)
        break;
      (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
      v11 += v12;
      if (!--v10)
      {
        swift_bridgeObjectRelease(v9);
        v19 = 1;
        v7 = (char *)v26[0];
        goto LABEL_13;
      }
    }
    v20 = v9;
LABEL_12:
    swift_bridgeObjectRelease(v20);
    v7 = (char *)v26[0];
    (*(void (**)(_QWORD, char *, uint64_t))(v1 + 32))(v26[0], v3, v0);
    v19 = 0;
  }
  else
  {
    v19 = 1;
  }
LABEL_13:
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v1 + 56))(v7, v19, 1, v0);
  swift_bridgeObjectRelease(v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v1 + 48))(v7, 1, v0) == 1)
  {
    sub_1459C((uint64_t)v7, &qword_3B0CC0);
    return 0;
  }
  v21 = URLQueryItem.value.getter();
  v23 = v22;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v7, v0);
  if (!v23)
    return 0;
  v24 = static AdamID.parse(_:)(v21, v23);
  swift_bridgeObjectRelease(v23);
  return v24;
}

uint64_t URLComponents.playerTime.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t result;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(char *, unint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  int v26;
  _BYTE *v27;
  uint64_t v28;
  char *v29;
  _QWORD v30[3];
  uint64_t v31;

  v0 = type metadata accessor for URLQueryItem(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v28 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0CC0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = URLComponents.queryItems.getter(v5);
  if (result)
  {
    v9 = result;
    v10 = *(_QWORD *)(result + 16);
    if (v10)
    {
      v29 = v7;
      v11 = result + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
      v12 = *(_QWORD *)(v1 + 72);
      v13 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v1 + 16);
      swift_bridgeObjectRetain(result);
      while (1)
      {
        v14 = v13(v3, v11, v0);
        v15 = URLQueryItem.name.getter(v14);
        v17 = v16;
        if (v15 == 116 && v16 == 0xE100000000000000)
        {
          swift_bridgeObjectRelease(v9);
          v20 = 0xE100000000000000;
          goto LABEL_13;
        }
        v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, 116, 0xE100000000000000, 0);
        swift_bridgeObjectRelease(v17);
        if ((v18 & 1) != 0)
          break;
        (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
        v11 += v12;
        if (!--v10)
        {
          swift_bridgeObjectRelease(v9);
          v19 = 1;
          v7 = v29;
          goto LABEL_14;
        }
      }
      v20 = v9;
LABEL_13:
      swift_bridgeObjectRelease(v20);
      v7 = v29;
      (*(void (**)(char *, char *, uint64_t))(v1 + 32))(v29, v3, v0);
      v19 = 0;
    }
    else
    {
      v19 = 1;
    }
LABEL_14:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v1 + 56))(v7, v19, 1, v0);
    swift_bridgeObjectRelease(v9);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v1 + 48))(v7, 1, v0) == 1)
    {
      sub_1459C((uint64_t)v7, &qword_3B0CC0);
      return 0;
    }
    v21 = URLQueryItem.value.getter();
    v23 = v22;
    v24 = (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v7, v0);
    if (!v23)
      return 0;
    v31 = 0;
    __chkstk_darwin(v24);
    *(&v28 - 2) = (uint64_t)&v31;
    if ((v23 & 0x1000000000000000) != 0 || !(v23 & 0x2000000000000000 | v21 & 0x1000000000000000))
    {
      _StringGuts._slowWithCString<A>(_:)(v30, sub_1EB90, &v28 - 4, v21, v23, &type metadata for Bool);
      swift_bridgeObjectRelease(v23);
      v26 = LOBYTE(v30[0]);
    }
    else if ((v23 & 0x2000000000000000) != 0)
    {
      v30[0] = v21;
      v30[1] = v23 & 0xFFFFFFFFFFFFFFLL;
      v26 = (v21 > 0x20u || ((0x100003E01uLL >> v21) & 1) == 0)
         && (v27 = (_BYTE *)_swift_stdlib_strtod_clocale(v30, &v31)) != 0
         && *v27 == 0;
      swift_bridgeObjectRelease(v23);
    }
    else
    {
      if ((v21 & 0x1000000000000000) != 0)
        v25 = (_BYTE *)((v23 & 0xFFFFFFFFFFFFFFFLL) + 32);
      else
        v25 = (_BYTE *)_StringObject.sharedUTF8.getter(v21, v23);
      sub_1EB90(v25, (BOOL *)v30);
      v26 = LOBYTE(v30[0]);
      swift_bridgeObjectRelease(v23);
    }
    if (v26)
      return v31;
    else
      return 0;
  }
  return result;
}

uint64_t URLComponents.referenceTime.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t result;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(char *, unint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  int v26;
  _BYTE *v27;
  uint64_t v28;
  char *v29;
  _QWORD v30[3];
  uint64_t v31;

  v0 = type metadata accessor for URLQueryItem(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v28 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0CC0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = URLComponents.queryItems.getter(v5);
  if (result)
  {
    v9 = result;
    v10 = *(_QWORD *)(result + 16);
    if (v10)
    {
      v29 = v7;
      v11 = result + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
      v12 = *(_QWORD *)(v1 + 72);
      v13 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v1 + 16);
      swift_bridgeObjectRetain(result);
      while (1)
      {
        v14 = v13(v3, v11, v0);
        v15 = URLQueryItem.name.getter(v14);
        v17 = v16;
        if (v15 == 114 && v16 == 0xE100000000000000)
        {
          swift_bridgeObjectRelease(v9);
          v20 = 0xE100000000000000;
          goto LABEL_13;
        }
        v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, 114, 0xE100000000000000, 0);
        swift_bridgeObjectRelease(v17);
        if ((v18 & 1) != 0)
          break;
        (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
        v11 += v12;
        if (!--v10)
        {
          swift_bridgeObjectRelease(v9);
          v19 = 1;
          v7 = v29;
          goto LABEL_14;
        }
      }
      v20 = v9;
LABEL_13:
      swift_bridgeObjectRelease(v20);
      v7 = v29;
      (*(void (**)(char *, char *, uint64_t))(v1 + 32))(v29, v3, v0);
      v19 = 0;
    }
    else
    {
      v19 = 1;
    }
LABEL_14:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v1 + 56))(v7, v19, 1, v0);
    swift_bridgeObjectRelease(v9);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v1 + 48))(v7, 1, v0) == 1)
    {
      sub_1459C((uint64_t)v7, &qword_3B0CC0);
      return 0;
    }
    v21 = URLQueryItem.value.getter();
    v23 = v22;
    v24 = (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v7, v0);
    if (!v23)
      return 0;
    v31 = 0;
    __chkstk_darwin(v24);
    *(&v28 - 2) = (uint64_t)&v31;
    if ((v23 & 0x1000000000000000) != 0 || !(v23 & 0x2000000000000000 | v21 & 0x1000000000000000))
    {
      _StringGuts._slowWithCString<A>(_:)(v30, sub_1EB90, &v28 - 4, v21, v23, &type metadata for Bool);
      swift_bridgeObjectRelease(v23);
      v26 = LOBYTE(v30[0]);
    }
    else if ((v23 & 0x2000000000000000) != 0)
    {
      v30[0] = v21;
      v30[1] = v23 & 0xFFFFFFFFFFFFFFLL;
      v26 = (v21 > 0x20u || ((0x100003E01uLL >> v21) & 1) == 0)
         && (v27 = (_BYTE *)_swift_stdlib_strtod_clocale(v30, &v31)) != 0
         && *v27 == 0;
      swift_bridgeObjectRelease(v23);
    }
    else
    {
      if ((v21 & 0x1000000000000000) != 0)
        v25 = (_BYTE *)((v23 & 0xFFFFFFFFFFFFFFFLL) + 32);
      else
        v25 = (_BYTE *)_StringObject.sharedUTF8.getter(v21, v23);
      sub_1EB90(v25, (BOOL *)v30);
      v26 = LOBYTE(v30[0]);
      swift_bridgeObjectRelease(v23);
    }
    if (v26)
      return v31;
    else
      return 0;
  }
  return result;
}

void SeekToTimestampAndPlayAction.init(uniqueId:title:presentationStyle:actionMetrics:impressionMetrics:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  sub_1D2B8(a1, a2, a3, a4, a5, a6, a7, (uint64_t)"ShelfKit.SeekToTimestampAndPlayAction", 0x25u);
}

uint64_t LibraryPlayAction.episodeUuid.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit17LibraryPlayAction_episodeUuid);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit17LibraryPlayAction_episodeUuid + 8));
  return v1;
}

uint64_t LibraryPlayAction.settings.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1EC10(v1 + OBJC_IVAR____TtC8ShelfKit17LibraryPlayAction_settings, a1);
}

uint64_t LibraryPlayAction.showPlayerIfPlaying.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8ShelfKit17LibraryPlayAction_showPlayerIfPlaying);
}

uint64_t LibraryPlayAction.forcePlay.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8ShelfKit17LibraryPlayAction_forcePlay);
}

uint64_t LibraryPlayAction.timestamp.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit17LibraryPlayAction_timestamp);
}

uint64_t LibraryPlayAction.__allocating_init(episodeUuid:episodeAdamId:channelAdamId:settings:showPlayerIfPlaying:forcePlay:title:timestamp:actionMetrics:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6, uint64_t a7, int a8, unsigned __int8 a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13, uint64_t a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v15 = v14;
  v45 = a7;
  v46 = a5;
  v44 = a4;
  v43 = a3;
  v54 = a10;
  v55 = a11;
  v52 = a14;
  v50 = a13;
  v51 = a8;
  v49 = a12;
  v47 = a6;
  v48 = a9;
  v53 = type metadata accessor for UUID(0);
  v19 = *(_QWORD *)(v53 - 8);
  __chkstk_darwin(v53);
  v21 = (char *)&v42 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v22);
  v24 = (char *)&v42 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for ActionMetrics(0);
  v26 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v28 = (char *)&v42 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
  *(_BYTE *)(v29 + OBJC_IVAR____TtC8ShelfKit17LibraryPlayAction_sharedContent) = 0;
  v30 = (_QWORD *)(v29 + OBJC_IVAR____TtC8ShelfKit17LibraryPlayAction_episodeUuid);
  *v30 = a1;
  v30[1] = a2;
  v31 = v29 + OBJC_IVAR____TtC8ShelfKit17LibraryPlayAction_episodeAdamId;
  *(_QWORD *)v31 = v43;
  *(_BYTE *)(v31 + 8) = v44 & 1;
  v32 = v29 + OBJC_IVAR____TtC8ShelfKit17LibraryPlayAction_channelAdamId;
  *(_QWORD *)v32 = v46;
  *(_BYTE *)(v32 + 8) = v47 & 1;
  sub_1EC10(a7, v29 + OBJC_IVAR____TtC8ShelfKit17LibraryPlayAction_settings);
  *(_BYTE *)(v29 + OBJC_IVAR____TtC8ShelfKit17LibraryPlayAction_showPlayerIfPlaying) = v51;
  *(_BYTE *)(v29 + OBJC_IVAR____TtC8ShelfKit17LibraryPlayAction_forcePlay) = v48;
  v33 = v29 + OBJC_IVAR____TtC8ShelfKit17LibraryPlayAction_timestamp;
  *(_QWORD *)v33 = v49;
  *(_BYTE *)(v33 + 8) = v50 & 1;
  v34 = v52;
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v28, v52, v25);
  v35 = type metadata accessor for ImpressionMetrics(0);
  v36 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v24, 1, 1, v35);
  UUID.init()(v36);
  v37 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
  v39 = v38;
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v53);
  *(_QWORD *)(v29 + 16) = v37;
  *(_QWORD *)(v29 + 24) = v39;
  v40 = v55;
  *(_QWORD *)(v29 + 32) = v54;
  *(_QWORD *)(v29 + 40) = v40;
  *(_BYTE *)(v29 + 48) = 32;
  (*(void (**)(uint64_t, char *, uint64_t))(v26 + 32))(v29 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v28, v25);
  sub_15BD4((uint64_t)v24, v29 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics, (uint64_t *)&unk_3B8790);
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v34, v25);
  sub_1459C(v45, &qword_3B0CC8);
  return v29;
}

uint64_t LibraryPlayAction.init(episodeUuid:episodeAdamId:channelAdamId:settings:showPlayerIfPlaying:forcePlay:title:timestamp:actionMetrics:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6, uint64_t a7, int a8, unsigned __int8 a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13, uint64_t a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v15 = v14;
  v44 = a5;
  v43 = a4;
  v42 = a3;
  v53 = a10;
  v54 = a11;
  v51 = a14;
  v49 = a13;
  v50 = a8;
  v47 = a7;
  v48 = a12;
  v45 = a6;
  v46 = a9;
  v52 = type metadata accessor for UUID(0);
  v19 = *(_QWORD *)(v52 - 8);
  __chkstk_darwin(v52);
  v21 = (char *)&v41 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v22);
  v24 = (char *)&v41 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for ActionMetrics(0);
  v26 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v28 = (char *)&v41 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_BYTE *)(v15 + OBJC_IVAR____TtC8ShelfKit17LibraryPlayAction_sharedContent) = 0;
  v29 = (_QWORD *)(v15 + OBJC_IVAR____TtC8ShelfKit17LibraryPlayAction_episodeUuid);
  *v29 = a1;
  v29[1] = a2;
  v30 = v15 + OBJC_IVAR____TtC8ShelfKit17LibraryPlayAction_episodeAdamId;
  *(_QWORD *)v30 = v42;
  *(_BYTE *)(v30 + 8) = v43 & 1;
  v31 = v15 + OBJC_IVAR____TtC8ShelfKit17LibraryPlayAction_channelAdamId;
  *(_QWORD *)v31 = v44;
  *(_BYTE *)(v31 + 8) = v45 & 1;
  sub_1EC10(a7, v15 + OBJC_IVAR____TtC8ShelfKit17LibraryPlayAction_settings);
  *(_BYTE *)(v15 + OBJC_IVAR____TtC8ShelfKit17LibraryPlayAction_showPlayerIfPlaying) = v50;
  *(_BYTE *)(v15 + OBJC_IVAR____TtC8ShelfKit17LibraryPlayAction_forcePlay) = v46;
  v32 = v15 + OBJC_IVAR____TtC8ShelfKit17LibraryPlayAction_timestamp;
  *(_QWORD *)v32 = v48;
  *(_BYTE *)(v32 + 8) = v49 & 1;
  v33 = v51;
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v28, v51, v25);
  v34 = type metadata accessor for ImpressionMetrics(0);
  v35 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v24, 1, 1, v34);
  UUID.init()(v35);
  v36 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
  v38 = v37;
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v52);
  *(_QWORD *)(v15 + 16) = v36;
  *(_QWORD *)(v15 + 24) = v38;
  v39 = v54;
  *(_QWORD *)(v15 + 32) = v53;
  *(_QWORD *)(v15 + 40) = v39;
  *(_BYTE *)(v15 + 48) = 32;
  (*(void (**)(uint64_t, char *, uint64_t))(v26 + 32))(v15 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v28, v25);
  sub_15BD4((uint64_t)v24, v15 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics, (uint64_t *)&unk_3B8790);
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v33, v25);
  sub_1459C(v47, &qword_3B0CC8);
  return v15;
}

void LibraryPlayAction.__allocating_init(deserializing:using:)()
{
  uint64_t v0;
  uint64_t v1;

  v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  *(_BYTE *)(v1 + OBJC_IVAR____TtC8ShelfKit17LibraryPlayAction_sharedContent) = 0;
  swift_release(v1);
  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRelease(0xE000000000000000);
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000033, 0x800000000030A500, "ShelfKit/PlayAction.swift", 25, 2, 270, 0, 0);
  __break(1u);
}

void LibraryPlayAction.init(deserializing:using:)()
{
  uint64_t v0;

  *(_BYTE *)(v0 + OBJC_IVAR____TtC8ShelfKit17LibraryPlayAction_sharedContent) = 0;
  swift_release(v0);
  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRelease(0xE000000000000000);
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000033, 0x800000000030A500, "ShelfKit/PlayAction.swift", 25, 2, 270, 0, 0);
  __break(1u);
}

void LibraryPlayAction.init(uniqueId:title:presentationStyle:actionMetrics:impressionMetrics:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  sub_1D2B8(a1, a2, a3, a4, a5, a6, a7, (uint64_t)"ShelfKit.LibraryPlayAction", 0x1Au);
}

uint64_t sub_19A0C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit17LibraryPlayAction_episodeUuid + 8));
  return sub_1459C(v0 + OBJC_IVAR____TtC8ShelfKit17LibraryPlayAction_settings, &qword_3B0CC8);
}

uint64_t LibraryPlayAction.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  v1 = v0 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics;
  v2 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_1459C(v0 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics, (uint64_t *)&unk_3B8790);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit17LibraryPlayAction_episodeUuid + 8));
  sub_1459C(v0 + OBJC_IVAR____TtC8ShelfKit17LibraryPlayAction_settings, &qword_3B0CC8);
  return v0;
}

uint64_t LibraryPlayAction.__deallocating_deinit()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  v1 = (char *)v0 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics;
  v2 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_1459C((uint64_t)v0 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics, (uint64_t *)&unk_3B8790);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC8ShelfKit17LibraryPlayAction_episodeUuid + 8));
  sub_1459C((uint64_t)v0 + OBJC_IVAR____TtC8ShelfKit17LibraryPlayAction_settings, &qword_3B0CC8);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t LibraryPlayAction.playPauseAction.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = swift_retain(v0);
  v2 = sub_1EF74(v1);
  swift_release(v0);
  return v2;
}

uint64_t LibraryPlayPauseAction.__allocating_init(libraryPlayAction:)(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1EF74(a1);
  swift_release(a1);
  return v2;
}

uint64_t LibraryPlayAction.episodeAdamID.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit17LibraryPlayAction_episodeAdamId);
}

uint64_t LibraryPlayAction.episodeIdentifier.getter()
{
  return sub_1C490(&OBJC_IVAR____TtC8ShelfKit17LibraryPlayAction_episodeUuid);
}

uint64_t sub_19C1C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  v2 = swift_retain(*v0);
  v3 = sub_1EF74(v2);
  swift_release(v1);
  return v3;
}

uint64_t sub_19C54()
{
  _QWORD *v0;

  return *(_QWORD *)(*v0 + OBJC_IVAR____TtC8ShelfKit17LibraryPlayAction_episodeAdamId);
}

uint64_t sub_19C70(uint64_t a1, uint64_t a2)
{
  return sub_1C4F0(a1, a2, &OBJC_IVAR____TtC8ShelfKit17LibraryPlayAction_episodeUuid);
}

uint64_t LibraryPlayAction.metricsName(sender:)()
{
  return 2036427856;
}

uint64_t LibraryPlayAction.metricsId(sender:)(uint64_t a1)
{
  return sub_1CBF4(a1, &OBJC_IVAR____TtC8ShelfKit17LibraryPlayAction_episodeAdamId);
}

uint64_t sub_19C98(uint64_t a1)
{
  return sub_1EC58(a1);
}

double sub_19CB8@<D0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double result;

  v4 = a1;
  if ((*(_BYTE *)(*v3 + OBJC_IVAR____TtC8ShelfKit17LibraryPlayAction_episodeAdamId + 8) & 1) != 0)
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  else
  {
    v8 = sub_144B4();
    a1 = BinaryInteger.description.getter(&type metadata for UInt64, v8);
    v6 = a1;
    v7 = a2;
  }
  v9 = static MetricsTargetType.button.getter(a1, a2);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v7;
  *(_BYTE *)(a3 + 16) = 1;
  *(_QWORD *)(a3 + 24) = v4;
  *(_QWORD *)(a3 + 32) = v9;
  *(_QWORD *)(a3 + 40) = v10;
  *(_QWORD *)&result = 2036427856;
  *(_OWORD *)(a3 + 48) = xmmword_2EA840;
  return result;
}

uint64_t sub_19D58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CB88(a1, a2, a3, &OBJC_IVAR____TtC8ShelfKit17LibraryPlayAction_episodeAdamId);
}

Swift::Void __swiftcall LibraryPlayAction.markAsSharedContent()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + OBJC_IVAR____TtC8ShelfKit17LibraryPlayAction_sharedContent) = 1;
}

uint64_t PlayStationAction.stationUuid.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit17PlayStationAction_stationUuid);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit17PlayStationAction_stationUuid + 8));
  return v1;
}

uint64_t PlayStationAction.episodeUuid.getter()
{
  return sub_1CCE8(&OBJC_IVAR____TtC8ShelfKit17PlayStationAction_episodeUuid);
}

uint64_t PlayStationAction.episodeAdamID.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit17PlayStationAction_episodeAdamID);
}

uint64_t PlayStationAction.__allocating_init(title:stationUuid:episodeUuid:episodeAdamID:actionMetrics:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9)
{
  return sub_1CD74(a1, a2, a3, a4, a5, a6, a7, a8, a9, &OBJC_IVAR____TtC8ShelfKit17PlayStationAction_stationUuid, &OBJC_IVAR____TtC8ShelfKit17PlayStationAction_episodeUuid, &OBJC_IVAR____TtC8ShelfKit17PlayStationAction_episodeAdamID);
}

uint64_t PlayStationAction.init(title:stationUuid:episodeUuid:episodeAdamID:actionMetrics:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9)
{
  return sub_1CFEC(a1, a2, a3, a4, a5, a6, a7, a8, a9, &OBJC_IVAR____TtC8ShelfKit17PlayStationAction_stationUuid, &OBJC_IVAR____TtC8ShelfKit17PlayStationAction_episodeUuid, &OBJC_IVAR____TtC8ShelfKit17PlayStationAction_episodeAdamID);
}

void PlayStationAction.init(deserializing:using:)(uint64_t a1, uint64_t a2)
{
  sub_1D220(a1, a2, 342);
}

void PlayStationAction.init(uniqueId:title:presentationStyle:actionMetrics:impressionMetrics:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  sub_1D2B8(a1, a2, a3, a4, a5, a6, a7, (uint64_t)"ShelfKit.PlayStationAction", 0x1Au);
}

uint64_t sub_19E84()
{
  return sub_1D2F4(&OBJC_IVAR____TtC8ShelfKit17PlayStationAction_stationUuid, &OBJC_IVAR____TtC8ShelfKit17PlayStationAction_episodeUuid);
}

uint64_t PlayStationAction.deinit()
{
  return sub_1D340(&OBJC_IVAR____TtC8ShelfKit17PlayStationAction_stationUuid, &OBJC_IVAR____TtC8ShelfKit17PlayStationAction_episodeUuid);
}

uint64_t PlayStationAction.__deallocating_deinit()
{
  return sub_1D3F8(&OBJC_IVAR____TtC8ShelfKit17PlayStationAction_stationUuid, &OBJC_IVAR____TtC8ShelfKit17PlayStationAction_episodeUuid);
}

uint64_t PlayStationAction.playPauseAction.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46[24];

  v1 = v0;
  v2 = type metadata accessor for UUID(0);
  v44 = *(_QWORD *)(v2 - 8);
  v45 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v5);
  v42 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ActionMetrics(0);
  v41 = *(_QWORD *)(v7 - 8);
  v8 = v41;
  v9 = __chkstk_darwin(v7);
  v38 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v12 = (char *)&v35 - v11;
  v43 = *(_QWORD *)(v0 + 32);
  v40 = *(_QWORD *)(v0 + 40);
  v13 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit17PlayStationAction_stationUuid);
  v14 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit17PlayStationAction_stationUuid + 8);
  v16 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit17PlayStationAction_episodeUuid);
  v15 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit17PlayStationAction_episodeUuid + 8);
  v36 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit17PlayStationAction_episodeAdamID);
  v37 = v13;
  v17 = *(_BYTE *)(v1 + OBJC_IVAR____TtC8ShelfKit17PlayStationAction_episodeAdamID + 8);
  v18 = v1 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics;
  swift_beginAccess(v1 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v46, 0, 0);
  v19 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v39 = v12;
  v19(v12, v18, v7);
  v20 = type metadata accessor for PlayPauseStationAction(0);
  v21 = swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
  v22 = (_QWORD *)(v21 + OBJC_IVAR____TtC8ShelfKit22PlayPauseStationAction_stationUuid);
  *v22 = v37;
  v22[1] = v14;
  v23 = (_QWORD *)(v21 + OBJC_IVAR____TtC8ShelfKit22PlayPauseStationAction_episodeUuid);
  *v23 = v16;
  v23[1] = v15;
  v24 = v21 + OBJC_IVAR____TtC8ShelfKit22PlayPauseStationAction_episodeAdamID;
  *(_QWORD *)v24 = v36;
  *(_BYTE *)(v24 + 8) = v17;
  v25 = v38;
  v19(v38, (uint64_t)v12, v7);
  v26 = type metadata accessor for ImpressionMetrics(0);
  v27 = (uint64_t)v42;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v42, 1, 1, v26);
  swift_bridgeObjectRetain(v15);
  swift_retain(v1);
  v28 = v40;
  swift_bridgeObjectRetain(v40);
  v29 = swift_bridgeObjectRetain(v14);
  UUID.init()(v29);
  v30 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
  v32 = v31;
  (*(void (**)(char *, uint64_t))(v44 + 8))(v4, v45);
  *(_QWORD *)(v21 + 16) = v30;
  *(_QWORD *)(v21 + 24) = v32;
  *(_QWORD *)(v21 + 32) = v43;
  *(_QWORD *)(v21 + 40) = v28;
  *(_BYTE *)(v21 + 48) = 32;
  v33 = v41;
  (*(void (**)(uint64_t, char *, uint64_t))(v41 + 32))(v21 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v25, v7);
  sub_15BD4(v27, v21 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics, (uint64_t *)&unk_3B8790);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v39, v7);
  swift_release(v1);
  return v21;
}

uint64_t PlayPauseStationAction.__allocating_init(playStationAction:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(_BYTE *, uint64_t, uint64_t);
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE v35[4];
  int v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  _BYTE *v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE v47[24];

  v2 = v1;
  v4 = type metadata accessor for UUID(0);
  v45 = *(_QWORD *)(v4 - 8);
  v46 = v4;
  __chkstk_darwin(v4);
  v6 = &v35[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v7);
  v43 = &v35[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for ActionMetrics(0);
  v42 = *(_QWORD *)(v9 - 8);
  v10 = v42;
  v11 = __chkstk_darwin(v9);
  v39 = &v35[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v11);
  v14 = &v35[-v13];
  v44 = *(_QWORD *)(a1 + 32);
  v41 = *(_QWORD *)(a1 + 40);
  v16 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8ShelfKit17PlayStationAction_stationUuid);
  v15 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8ShelfKit17PlayStationAction_stationUuid + 8);
  v17 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8ShelfKit17PlayStationAction_episodeUuid);
  v18 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8ShelfKit17PlayStationAction_episodeUuid + 8);
  v37 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8ShelfKit17PlayStationAction_episodeAdamID);
  v38 = v17;
  v36 = *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC8ShelfKit17PlayStationAction_episodeAdamID + 8);
  v19 = a1 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics;
  swift_beginAccess(a1 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v47, 0, 0);
  v20 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v10 + 16);
  v40 = v14;
  v20(v14, v19, v9);
  v21 = swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  v22 = (_QWORD *)(v21 + OBJC_IVAR____TtC8ShelfKit22PlayPauseStationAction_stationUuid);
  *v22 = v16;
  v22[1] = v15;
  v23 = (_QWORD *)(v21 + OBJC_IVAR____TtC8ShelfKit22PlayPauseStationAction_episodeUuid);
  v24 = v39;
  *v23 = v38;
  v23[1] = v18;
  v25 = v21 + OBJC_IVAR____TtC8ShelfKit22PlayPauseStationAction_episodeAdamID;
  *(_QWORD *)v25 = v37;
  *(_BYTE *)(v25 + 8) = v36;
  v20(v24, (uint64_t)v14, v9);
  v26 = type metadata accessor for ImpressionMetrics(0);
  v27 = (uint64_t)v43;
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v43, 1, 1, v26);
  swift_bridgeObjectRetain(v18);
  v28 = v41;
  swift_bridgeObjectRetain(v41);
  v29 = swift_bridgeObjectRetain(v15);
  UUID.init()(v29);
  v30 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
  v32 = v31;
  (*(void (**)(_BYTE *, uint64_t))(v45 + 8))(v6, v46);
  *(_QWORD *)(v21 + 16) = v30;
  *(_QWORD *)(v21 + 24) = v32;
  *(_QWORD *)(v21 + 32) = v44;
  *(_QWORD *)(v21 + 40) = v28;
  *(_BYTE *)(v21 + 48) = 32;
  v33 = v42;
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v42 + 32))(v21 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v24, v9);
  sub_15BD4(v27, v21 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics, (uint64_t *)&unk_3B8790);
  (*(void (**)(_BYTE *, uint64_t))(v33 + 8))(v40, v9);
  swift_release(a1);
  return v21;
}

uint64_t PlayStationAction.episodeIdentifier.getter()
{
  return sub_1D4B4(&OBJC_IVAR____TtC8ShelfKit17PlayStationAction_episodeUuid);
}

uint64_t sub_1A498()
{
  return PlayStationAction.playPauseAction.getter();
}

uint64_t sub_1A4B8()
{
  _QWORD *v0;

  return *(_QWORD *)(*v0 + OBJC_IVAR____TtC8ShelfKit17PlayStationAction_episodeAdamID);
}

uint64_t sub_1A4D4(uint64_t a1, uint64_t a2)
{
  return sub_1D51C(a1, a2, &OBJC_IVAR____TtC8ShelfKit17PlayStationAction_episodeUuid);
}

uint64_t PlayButtonState.metricsActionType.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  _QWORD v4[3];

  switch(a1)
  {
    case 2:
      return static MetricsActionType.openDocument.getter();
    case 1:
      return static MetricsActionType.pause.getter();
    case 0:
      return static MetricsActionType.play.getter();
  }
  v4[1] = v1;
  v4[2] = v2;
  v4[0] = a1;
  result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(&type metadata for PlayButtonState, v4, &type metadata for PlayButtonState, &type metadata for Int);
  __break(1u);
  return result;
}

unint64_t PlayButtonState.init(rawValue:)(unint64_t result)
{
  if (result > 2)
    return 0;
  return result;
}

Swift::Int sub_1A540()
{
  Swift::UInt *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_1A584()
{
  Swift::UInt *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_1A5AC()
{
  Swift::UInt *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t *sub_1A5EC@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  BOOL v3;

  v2 = *result;
  v3 = (unint64_t)*result > 2;
  if ((unint64_t)*result > 2)
    v2 = 0;
  *(_QWORD *)a2 = v2;
  *(_BYTE *)(a2 + 8) = v3;
  return result;
}

uint64_t PlayPauseAction.contentId.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit15PlayPauseAction_contentId);
}

uint64_t PlayPauseAction.episodeOffer.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1E3E8(v1 + OBJC_IVAR____TtC8ShelfKit15PlayPauseAction_episodeOffer, a1);
}

uint64_t PlayPauseAction.timestamp.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit15PlayPauseAction_timestamp);
}

uint64_t PlayPauseAction.state.getter()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = v0 + OBJC_IVAR____TtC8ShelfKit15PlayPauseAction_state;
  swift_beginAccess(v0 + OBJC_IVAR____TtC8ShelfKit15PlayPauseAction_state, v3, 0, 0);
  return *(_QWORD *)v1;
}

uint64_t PlayPauseAction.state.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;
  _BYTE v5[24];

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit15PlayPauseAction_state);
  result = swift_beginAccess(v3, v5, 1, 0);
  *v3 = a1;
  return result;
}

uint64_t (*PlayPauseAction.state.modify(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC8ShelfKit15PlayPauseAction_state, a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t PlayPauseAction.__allocating_init(adamId:episodeOffer:timestamp:actionMetrics:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;

  v6 = v5;
  v29 = a4;
  v28 = a3;
  v30 = a2;
  v31 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v13);
  v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for ActionMetrics(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v28 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  *(_QWORD *)(v20 + OBJC_IVAR____TtC8ShelfKit15PlayPauseAction_contentId) = a1;
  sub_1E3E8(a2, v20 + OBJC_IVAR____TtC8ShelfKit15PlayPauseAction_episodeOffer);
  v21 = v20 + OBJC_IVAR____TtC8ShelfKit15PlayPauseAction_timestamp;
  *(_QWORD *)v21 = v28;
  *(_BYTE *)(v21 + 8) = v29 & 1;
  *(_QWORD *)(v20 + OBJC_IVAR____TtC8ShelfKit15PlayPauseAction_state) = 1;
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, a5, v16);
  v22 = type metadata accessor for ImpressionMetrics(0);
  v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v15, 1, 1, v22);
  UUID.init()(v23);
  v24 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
  v26 = v25;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v31);
  *(_QWORD *)(v20 + 16) = v24;
  *(_QWORD *)(v20 + 24) = v26;
  *(_QWORD *)(v20 + 32) = 0;
  *(_QWORD *)(v20 + 40) = 0;
  *(_BYTE *)(v20 + 48) = 32;
  (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(v20 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v19, v16);
  sub_15BD4((uint64_t)v15, v20 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics, (uint64_t *)&unk_3B8790);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(a5, v16);
  sub_1E42C(v30);
  return v20;
}

uint64_t PlayPauseAction.init(adamId:episodeOffer:timestamp:actionMetrics:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;

  v6 = v5;
  v28 = a4;
  v27 = a3;
  v29 = a2;
  v30 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v13);
  v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for ActionMetrics(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v6 + OBJC_IVAR____TtC8ShelfKit15PlayPauseAction_contentId) = a1;
  sub_1E3E8(a2, v6 + OBJC_IVAR____TtC8ShelfKit15PlayPauseAction_episodeOffer);
  v20 = v6 + OBJC_IVAR____TtC8ShelfKit15PlayPauseAction_timestamp;
  *(_QWORD *)v20 = v27;
  *(_BYTE *)(v20 + 8) = v28 & 1;
  *(_QWORD *)(v6 + OBJC_IVAR____TtC8ShelfKit15PlayPauseAction_state) = 1;
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, a5, v16);
  v21 = type metadata accessor for ImpressionMetrics(0);
  v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v15, 1, 1, v21);
  UUID.init()(v22);
  v23 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
  v25 = v24;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v30);
  *(_QWORD *)(v6 + 16) = v23;
  *(_QWORD *)(v6 + 24) = v25;
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 40) = 0;
  *(_BYTE *)(v6 + 48) = 32;
  (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(v6 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v19, v16);
  sub_15BD4((uint64_t)v15, v6 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics, (uint64_t *)&unk_3B8790);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(a5, v16);
  sub_1E42C(v29);
  return v6;
}

void PlayPauseAction.init(deserializing:using:)(uint64_t a1, uint64_t a2)
{
  sub_1D220(a1, a2, 408);
}

void PlayPauseAction.init(uniqueId:title:presentationStyle:actionMetrics:impressionMetrics:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  sub_1D2B8(a1, a2, a3, a4, a5, a6, a7, (uint64_t)"ShelfKit.PlayPauseAction", 0x18u);
}

uint64_t sub_1AB90()
{
  uint64_t v0;

  return sub_1E42C(v0 + OBJC_IVAR____TtC8ShelfKit15PlayPauseAction_episodeOffer);
}

uint64_t PlayPauseAction.deinit()
{
  return sub_1ABAC(&OBJC_IVAR____TtC8ShelfKit15PlayPauseAction_episodeOffer);
}

uint64_t sub_1ABAC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  swift_bridgeObjectRelease(*(_QWORD *)(v1 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v1 + 40));
  v3 = v1 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics;
  v4 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  sub_1459C(v1 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics, (uint64_t *)&unk_3B8790);
  sub_1E42C(v1 + *a1);
  return v1;
}

uint64_t PlayPauseAction.__deallocating_deinit()
{
  return sub_1AC44(&OBJC_IVAR____TtC8ShelfKit15PlayPauseAction_episodeOffer);
}

uint64_t sub_1AC44(_QWORD *a1)
{
  _QWORD *v1;
  char *v3;
  uint64_t v4;

  swift_bridgeObjectRelease(v1[3]);
  swift_bridgeObjectRelease(v1[5]);
  v3 = (char *)v1 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics;
  v4 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  sub_1459C((uint64_t)v1 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics, (uint64_t *)&unk_3B8790);
  sub_1E42C((uint64_t)v1 + *a1);
  return swift_deallocClassInstance(v1, *(unsigned int *)(*v1 + 48), *(unsigned __int16 *)(*v1 + 52));
}

uint64_t Highlight.highlightModel.getter()
{
  uint64_t v0;

  return swift_retain(v0);
}

uint64_t PlayPauseAction.episodeAdamID.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit15PlayPauseAction_episodeOffer);
}

uint64_t PlayPauseAction.episodeIdentifier.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit15PlayPauseAction_episodeOffer);
}

uint64_t sub_1AD10@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return sub_1E3E8(*v1 + OBJC_IVAR____TtC8ShelfKit15PlayPauseAction_episodeOffer, a1);
}

uint64_t ModernStationDetailPresenter.Configuration.station.getter()
{
  _QWORD *v0;

  return swift_retain(*v0);
}

uint64_t sub_1AD30()
{
  _QWORD *v0;

  return *(_QWORD *)(*v0 + OBJC_IVAR____TtC8ShelfKit15PlayPauseAction_episodeOffer);
}

uint64_t sub_1AD48()
{
  _QWORD *v0;

  return *(_QWORD *)(*v0 + OBJC_IVAR____TtC8ShelfKit15PlayPauseAction_episodeOffer);
}

uint64_t PlayPauseQueueAction.contentId.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit20PlayPauseQueueAction_contentId);
}

uint64_t PlayPauseQueueAction.episodeOffer.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1E3E8(v1 + OBJC_IVAR____TtC8ShelfKit20PlayPauseQueueAction_episodeOffer, a1);
}

uint64_t PlayPauseQueueAction.queueEpisodeIds.getter()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit20PlayPauseQueueAction_queueEpisodeIds));
}

uint64_t PlayPauseQueueAction.state.getter()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = v0 + OBJC_IVAR____TtC8ShelfKit20PlayPauseQueueAction_state;
  swift_beginAccess(v0 + OBJC_IVAR____TtC8ShelfKit20PlayPauseQueueAction_state, v3, 0, 0);
  return *(_QWORD *)v1;
}

uint64_t PlayPauseQueueAction.state.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;
  _BYTE v5[24];

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit20PlayPauseQueueAction_state);
  result = swift_beginAccess(v3, v5, 1, 0);
  *v3 = a1;
  return result;
}

uint64_t (*PlayPauseQueueAction.state.modify(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC8ShelfKit20PlayPauseQueueAction_state, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t PlayPauseQueueAction.__allocating_init(contentId:episodeOffer:queueEpisodeIds:actionMetrics:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v5 = v4;
  v27 = a3;
  v28 = a2;
  v29 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v12);
  v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for ActionMetrics(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  *(_QWORD *)(v19 + OBJC_IVAR____TtC8ShelfKit20PlayPauseQueueAction_contentId) = a1;
  sub_1E3E8(a2, v19 + OBJC_IVAR____TtC8ShelfKit20PlayPauseQueueAction_episodeOffer);
  *(_QWORD *)(v19 + OBJC_IVAR____TtC8ShelfKit20PlayPauseQueueAction_queueEpisodeIds) = v27;
  *(_QWORD *)(v19 + OBJC_IVAR____TtC8ShelfKit20PlayPauseQueueAction_state) = 1;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a4, v15);
  v20 = type metadata accessor for ImpressionMetrics(0);
  v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v14, 1, 1, v20);
  UUID.init()(v21);
  v22 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
  v24 = v23;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v29);
  *(_QWORD *)(v19 + 16) = v22;
  *(_QWORD *)(v19 + 24) = v24;
  *(_QWORD *)(v19 + 32) = 0;
  *(_QWORD *)(v19 + 40) = 0;
  *(_BYTE *)(v19 + 48) = 32;
  (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(v19 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v18, v15);
  sub_15BD4((uint64_t)v14, v19 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics, (uint64_t *)&unk_3B8790);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(a4, v15);
  sub_1E42C(v28);
  return v19;
}

uint64_t PlayPauseQueueAction.init(contentId:episodeOffer:queueEpisodeIds:actionMetrics:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v5 = v4;
  v26 = a3;
  v27 = a2;
  v28 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v12);
  v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for ActionMetrics(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v5 + OBJC_IVAR____TtC8ShelfKit20PlayPauseQueueAction_contentId) = a1;
  sub_1E3E8(a2, v5 + OBJC_IVAR____TtC8ShelfKit20PlayPauseQueueAction_episodeOffer);
  *(_QWORD *)(v5 + OBJC_IVAR____TtC8ShelfKit20PlayPauseQueueAction_queueEpisodeIds) = v26;
  *(_QWORD *)(v5 + OBJC_IVAR____TtC8ShelfKit20PlayPauseQueueAction_state) = 1;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a4, v15);
  v19 = type metadata accessor for ImpressionMetrics(0);
  v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v14, 1, 1, v19);
  UUID.init()(v20);
  v21 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
  v23 = v22;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v28);
  *(_QWORD *)(v5 + 16) = v21;
  *(_QWORD *)(v5 + 24) = v23;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = 0;
  *(_BYTE *)(v5 + 48) = 32;
  (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(v5 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v18, v15);
  sub_15BD4((uint64_t)v14, v5 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics, (uint64_t *)&unk_3B8790);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(a4, v15);
  sub_1E42C(v27);
  return v5;
}

uint64_t PlayPauseQueueAction.__allocating_init(playQueueAction:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36[24];

  v2 = v1;
  v4 = type metadata accessor for UUID(0);
  v34 = *(_QWORD *)(v4 - 8);
  v35 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v7);
  v32 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ActionMetrics(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v31 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v14 = (char *)&v31 - v13;
  v15 = type metadata accessor for EpisodeOffer(0);
  __chkstk_darwin(v15);
  v17 = (char *)&v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8ShelfKit15PlayQueueAction_contentId);
  sub_1E3E8(a1 + OBJC_IVAR____TtC8ShelfKit15PlayQueueAction_episodeOffer, (uint64_t)v17);
  v33 = a1;
  v19 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8ShelfKit15PlayQueueAction_queueEpisodeIds);
  v20 = a1 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics;
  swift_beginAccess(a1 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v36, 0, 0);
  v21 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v21(v14, v20, v9);
  v22 = swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  *(_QWORD *)(v22 + OBJC_IVAR____TtC8ShelfKit20PlayPauseQueueAction_contentId) = v18;
  sub_1E3E8((uint64_t)v17, v22 + OBJC_IVAR____TtC8ShelfKit20PlayPauseQueueAction_episodeOffer);
  *(_QWORD *)(v22 + OBJC_IVAR____TtC8ShelfKit20PlayPauseQueueAction_queueEpisodeIds) = v19;
  *(_QWORD *)(v22 + OBJC_IVAR____TtC8ShelfKit20PlayPauseQueueAction_state) = 1;
  v23 = v31;
  v21(v31, (uint64_t)v14, v9);
  v24 = type metadata accessor for ImpressionMetrics(0);
  v25 = (uint64_t)v32;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v32, 1, 1, v24);
  v26 = swift_bridgeObjectRetain(v19);
  UUID.init()(v26);
  v27 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
  v29 = v28;
  (*(void (**)(char *, uint64_t))(v34 + 8))(v6, v35);
  *(_QWORD *)(v22 + 16) = v27;
  *(_QWORD *)(v22 + 24) = v29;
  *(_QWORD *)(v22 + 32) = 0;
  *(_QWORD *)(v22 + 40) = 0;
  *(_BYTE *)(v22 + 48) = 32;
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v22 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v23, v9);
  sub_15BD4(v25, v22 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics, (uint64_t *)&unk_3B8790);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v14, v9);
  sub_1E42C((uint64_t)v17);
  swift_release(v33);
  return v22;
}

void PlayPauseQueueAction.init(deserializing:using:)(uint64_t a1, uint64_t a2)
{
  sub_1D220(a1, a2, 459);
}

void PlayPauseQueueAction.init(uniqueId:title:presentationStyle:actionMetrics:impressionMetrics:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  sub_1D2B8(a1, a2, a3, a4, a5, a6, a7, (uint64_t)"ShelfKit.PlayPauseQueueAction", 0x1Du);
}

uint64_t sub_1B59C()
{
  uint64_t v0;

  sub_1E42C(v0 + OBJC_IVAR____TtC8ShelfKit20PlayPauseQueueAction_episodeOffer);
  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit20PlayPauseQueueAction_queueEpisodeIds));
}

uint64_t PlayPauseQueueAction.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  v1 = v0 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics;
  v2 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_1459C(v0 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics, (uint64_t *)&unk_3B8790);
  sub_1E42C(v0 + OBJC_IVAR____TtC8ShelfKit20PlayPauseQueueAction_episodeOffer);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit20PlayPauseQueueAction_queueEpisodeIds));
  return v0;
}

uint64_t PlayPauseQueueAction.__deallocating_deinit()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  v1 = (char *)v0 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics;
  v2 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_1459C((uint64_t)v0 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics, (uint64_t *)&unk_3B8790);
  sub_1E42C((uint64_t)v0 + OBJC_IVAR____TtC8ShelfKit20PlayPauseQueueAction_episodeOffer);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC8ShelfKit20PlayPauseQueueAction_queueEpisodeIds));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t PlayPauseQueueAction.episodeAdamID.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit20PlayPauseQueueAction_contentId);
}

uint64_t PlayPauseQueueAction.episodeIdentifier.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit20PlayPauseQueueAction_episodeOffer);
}

uint64_t sub_1B728@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return sub_1E3E8(*v1 + OBJC_IVAR____TtC8ShelfKit20PlayPauseQueueAction_episodeOffer, a1);
}

uint64_t sub_1B740()
{
  _QWORD *v0;

  return *(_QWORD *)(*v0 + OBJC_IVAR____TtC8ShelfKit20PlayPauseQueueAction_contentId);
}

uint64_t sub_1B758()
{
  _QWORD *v0;

  return *(_QWORD *)(*v0 + OBJC_IVAR____TtC8ShelfKit20PlayPauseQueueAction_episodeOffer);
}

uint64_t LibraryPlayPauseAction.episodeUuid.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_episodeUuid);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_episodeUuid + 8));
  return v1;
}

uint64_t LibraryPlayPauseAction.settings.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  v3 = v1 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_settings;
  swift_beginAccess(v3, v5, 0, 0);
  return sub_1EC10(v3, a1);
}

uint64_t LibraryPlayPauseAction.settings.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  v3 = v1 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_settings;
  swift_beginAccess(v3, v5, 33, 0);
  sub_1F3D0(a1, v3);
  return swift_endAccess(v5);
}

uint64_t (*LibraryPlayPauseAction.settings.modify(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_settings, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t LibraryPlayPauseAction.showPlayerIfPlaying.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_showPlayerIfPlaying);
}

uint64_t LibraryPlayPauseAction.isSmartPlayButton.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_isSmartPlayButton);
}

uint64_t LibraryPlayPauseAction.isWidgetPlayButton.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_isWidgetPlayButton);
}

uint64_t LibraryPlayPauseAction.forcePlay.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_forcePlay);
}

uint64_t LibraryPlayPauseAction.timestamp.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_timestamp);
}

uint64_t LibraryPlayPauseAction.waitForEngine.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_waitForEngine);
}

uint64_t LibraryPlayPauseAction.shouldPreventQueueing.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_shouldPreventQueueing);
}

uint64_t LibraryPlayPauseAction.playState.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  _BYTE v4[24];

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_playState);
  swift_beginAccess(v0 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_playState, v4, 0, 0);
  v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

uint64_t LibraryPlayPauseAction.playState.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  _BYTE v8[24];

  v5 = (_QWORD *)(v2 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_playState);
  swift_beginAccess(v5, v8, 1, 0);
  v6 = v5[1];
  *v5 = a1;
  v5[1] = a2;
  return swift_bridgeObjectRelease(v6);
}

uint64_t (*LibraryPlayPauseAction.playState.modify(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_playState, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t LibraryPlayPauseAction.__allocating_init(episodeUuid:episodeAdamId:channelAdamId:settings:showPlayerIfPlaying:forcePlay:isSmartPlayButton:isWidgetPlayButton:timestamp:waitForEngine:shouldPreventQueueing:actionMetrics:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6, uint64_t a7, int a8, unsigned __int8 a9, unsigned __int8 a10, unsigned __int8 a11, uint64_t a12, unsigned __int8 a13, unsigned __int8 a14, unsigned __int8 a15, uint64_t a16)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  uint64_t v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE v65[24];

  v17 = v16;
  v55 = a8;
  v53 = a6;
  v52 = a5;
  v51 = a4;
  v50 = a3;
  v62 = a16;
  v60 = a13;
  v61 = a15;
  v59 = a12;
  v57 = a11;
  v58 = a14;
  v56 = a10;
  v54 = a9;
  v21 = type metadata accessor for UUID(0);
  v63 = *(_QWORD *)(v21 - 8);
  v64 = v21;
  __chkstk_darwin(v21);
  v23 = (char *)&v50 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v24);
  v26 = (char *)&v50 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for ActionMetrics(0);
  v28 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v30 = (char *)&v50 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
  v32 = v31 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_settings;
  v33 = type metadata accessor for EpisodeListSettings(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v32, 1, 1, v33);
  *(_BYTE *)(v31 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_sharedContent) = 0;
  v34 = (_QWORD *)(v31 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_episodeUuid);
  *v34 = a1;
  v34[1] = a2;
  v35 = v31 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_episodeAdamId;
  *(_QWORD *)v35 = v50;
  *(_BYTE *)(v35 + 8) = v51 & 1;
  v36 = v31 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_channelAdamId;
  *(_QWORD *)v36 = v52;
  *(_BYTE *)(v36 + 8) = v53 & 1;
  swift_beginAccess(v32, v65, 33, 0);
  swift_retain(v31);
  v37 = a7;
  sub_1F418(a7, v32);
  v38 = swift_endAccess(v65);
  *(_BYTE *)(v31 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_showPlayerIfPlaying) = v55;
  *(_BYTE *)(v31 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_forcePlay) = v54;
  v39 = static MetricsActionType.play.getter(v38);
  v40 = (uint64_t *)(v31 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_playState);
  *v40 = v39;
  v40[1] = v41;
  *(_BYTE *)(v31 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_isSmartPlayButton) = v56;
  *(_BYTE *)(v31 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_isWidgetPlayButton) = v57;
  *(_BYTE *)(v31 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_waitForEngine) = v58;
  v42 = v31 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_timestamp;
  *(_QWORD *)v42 = v59;
  *(_BYTE *)(v42 + 8) = v60 & 1;
  *(_BYTE *)(v31 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_shouldPreventQueueing) = v61;
  swift_release(v31);
  v43 = v62;
  (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v30, v62, v27);
  v44 = type metadata accessor for ImpressionMetrics(0);
  v45 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v26, 1, 1, v44);
  UUID.init()(v45);
  v46 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
  v48 = v47;
  (*(void (**)(char *, uint64_t))(v63 + 8))(v23, v64);
  *(_QWORD *)(v31 + 16) = v46;
  *(_QWORD *)(v31 + 24) = v48;
  *(_QWORD *)(v31 + 32) = 0;
  *(_QWORD *)(v31 + 40) = 0;
  *(_BYTE *)(v31 + 48) = 32;
  (*(void (**)(uint64_t, char *, uint64_t))(v28 + 32))(v31 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v30, v27);
  sub_15BD4((uint64_t)v26, v31 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics, (uint64_t *)&unk_3B8790);
  (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v43, v27);
  sub_1459C(v37, &qword_3B0CC8);
  return v31;
}

uint64_t LibraryPlayPauseAction.init(episodeUuid:episodeAdamId:channelAdamId:settings:showPlayerIfPlaying:forcePlay:isSmartPlayButton:isWidgetPlayButton:timestamp:waitForEngine:shouldPreventQueueing:actionMetrics:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6, uint64_t a7, int a8, unsigned __int8 a9, unsigned __int8 a10, unsigned __int8 a11, uint64_t a12, unsigned __int8 a13, unsigned __int8 a14, unsigned __int8 a15, uint64_t a16)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE v64[24];

  v17 = v16;
  v54 = a8;
  v52 = a6;
  v51 = a5;
  v50 = a4;
  v49 = a3;
  v61 = a16;
  v59 = a13;
  v60 = a15;
  v58 = a12;
  v56 = a11;
  v57 = a14;
  v55 = a10;
  v53 = a9;
  v21 = type metadata accessor for UUID(0);
  v62 = *(_QWORD *)(v21 - 8);
  v63 = v21;
  __chkstk_darwin(v21);
  v23 = (char *)&v49 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v24);
  v26 = (char *)&v49 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for ActionMetrics(0);
  v28 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v30 = (char *)&v49 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = v17 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_settings;
  v32 = type metadata accessor for EpisodeListSettings(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v31, 1, 1, v32);
  *(_BYTE *)(v17 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_sharedContent) = 0;
  v33 = (_QWORD *)(v17 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_episodeUuid);
  *v33 = a1;
  v33[1] = a2;
  v34 = v17 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_episodeAdamId;
  *(_QWORD *)v34 = v49;
  *(_BYTE *)(v34 + 8) = v50 & 1;
  v35 = v17 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_channelAdamId;
  *(_QWORD *)v35 = v51;
  *(_BYTE *)(v35 + 8) = v52 & 1;
  swift_beginAccess(v31, v64, 33, 0);
  swift_retain(v17);
  v36 = a7;
  sub_1F418(a7, v31);
  v37 = swift_endAccess(v64);
  *(_BYTE *)(v17 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_showPlayerIfPlaying) = v54;
  *(_BYTE *)(v17 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_forcePlay) = v53;
  v38 = static MetricsActionType.play.getter(v37);
  v39 = (uint64_t *)(v17 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_playState);
  *v39 = v38;
  v39[1] = v40;
  *(_BYTE *)(v17 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_isSmartPlayButton) = v55;
  *(_BYTE *)(v17 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_isWidgetPlayButton) = v56;
  *(_BYTE *)(v17 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_waitForEngine) = v57;
  v41 = v17 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_timestamp;
  *(_QWORD *)v41 = v58;
  *(_BYTE *)(v41 + 8) = v59 & 1;
  *(_BYTE *)(v17 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_shouldPreventQueueing) = v60;
  swift_release(v17);
  v42 = v61;
  (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v30, v61, v27);
  v43 = type metadata accessor for ImpressionMetrics(0);
  v44 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56))(v26, 1, 1, v43);
  UUID.init()(v44);
  v45 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
  v47 = v46;
  (*(void (**)(char *, uint64_t))(v62 + 8))(v23, v63);
  *(_QWORD *)(v17 + 16) = v45;
  *(_QWORD *)(v17 + 24) = v47;
  *(_QWORD *)(v17 + 32) = 0;
  *(_QWORD *)(v17 + 40) = 0;
  *(_BYTE *)(v17 + 48) = 32;
  (*(void (**)(uint64_t, char *, uint64_t))(v28 + 32))(v17 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v30, v27);
  sub_15BD4((uint64_t)v26, v17 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics, (uint64_t *)&unk_3B8790);
  (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v42, v27);
  sub_1459C(v36, &qword_3B0CC8);
  return v17;
}

void LibraryPlayPauseAction.__allocating_init(deserializing:using:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  v2 = v1 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_settings;
  v3 = type metadata accessor for EpisodeListSettings(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  *(_BYTE *)(v1 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_sharedContent) = 0;
  swift_release(v1);
  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRelease(0xE000000000000000);
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000033, 0x800000000030A500, "ShelfKit/PlayAction.swift", 25, 2, 554, 0, 0);
  __break(1u);
}

void LibraryPlayPauseAction.init(deserializing:using:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_settings;
  v2 = type metadata accessor for EpisodeListSettings(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  *(_BYTE *)(v0 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_sharedContent) = 0;
  swift_release(v0);
  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRelease(0xE000000000000000);
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000033, 0x800000000030A500, "ShelfKit/PlayAction.swift", 25, 2, 554, 0, 0);
  __break(1u);
}

void LibraryPlayPauseAction.init(uniqueId:title:presentationStyle:actionMetrics:impressionMetrics:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  sub_1D2B8(a1, a2, a3, a4, a5, a6, a7, (uint64_t)"ShelfKit.LibraryPlayPauseAction", 0x1Fu);
}

uint64_t sub_1C2AC()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_episodeUuid + 8));
  sub_1459C(v0 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_settings, &qword_3B0CC8);
  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_playState + 8));
}

uint64_t LibraryPlayPauseAction.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  v1 = v0 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics;
  v2 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_1459C(v0 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics, (uint64_t *)&unk_3B8790);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_episodeUuid + 8));
  sub_1459C(v0 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_settings, &qword_3B0CC8);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_playState + 8));
  return v0;
}

uint64_t LibraryPlayPauseAction.__deallocating_deinit()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  v1 = (char *)v0 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics;
  v2 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_1459C((uint64_t)v0 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics, (uint64_t *)&unk_3B8790);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_episodeUuid + 8));
  sub_1459C((uint64_t)v0 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_settings, &qword_3B0CC8);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_playState + 8));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t LibraryPlayPauseAction.episodeAdamID.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_episodeAdamId);
}

uint64_t LibraryPlayPauseAction.episodeIdentifier.getter()
{
  return sub_1C490(&OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_episodeUuid);
}

uint64_t sub_1C490(_QWORD *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v1 + *a1);
  v3 = *v2;
  swift_bridgeObjectRetain(v2[1]);
  return v3;
}

uint64_t sub_1C4C8()
{
  _QWORD *v0;

  return *(_QWORD *)(*v0 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_episodeAdamId);
}

uint64_t sub_1C4E4(uint64_t a1, uint64_t a2)
{
  return sub_1C4F0(a1, a2, &OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_episodeUuid);
}

uint64_t sub_1C4F0(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;

  v4 = (uint64_t *)(*v3 + *a3);
  v5 = *v4;
  swift_bridgeObjectRetain(v4[1]);
  return v5;
}

uint64_t LibraryPlayPauseAction.generateItemLevelImpressionFields(interactionView:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  void *v38;
  char v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  void *v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  _OWORD v71[2];
  __int128 v72;
  void *v73;
  void *v74;

  v2 = v1;
  v4 = type metadata accessor for ScalarDictionary(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v66 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ImpressionMetrics.ID(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v66 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = v1 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics;
  v11 = type metadata accessor for ImpressionMetrics(0);
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) != 1)
  {
    v13 = static os_log_type_t.error.getter();
    sub_1F470();
    v14 = (void *)static OS_os_log.metrics.getter();
    os_log(_:dso:log:_:_:)(v13, &dword_0, v14, "tried to generate impressions but impressions are already there", 63, 2, _swiftEmptyArrayStorage);

  }
  if ((*(_BYTE *)(v2 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_episodeAdamId + 8) & 1) != 0)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(a1, 1, 1, v11);
  *(_QWORD *)&v72 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_episodeAdamId);
  v16 = sub_144B4();
  v17 = BinaryInteger.description.getter(&type metadata for UInt64, v16);
  v67 = v18;
  v68 = v17;
  v74 = &_swiftEmptyDictionarySingleton;
  v19 = *(_BYTE *)(v2 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_channelAdamId + 8);
  v69 = a1;
  if ((v19 & 1) != 0)
  {
    sub_1D560(0x416C656E6E616863, 0xED000064496D6164, &v72);
    v20 = sub_1459C((uint64_t)&v72, (uint64_t *)&unk_3BC540);
    v21 = v74;
  }
  else
  {
    *(_QWORD *)&v72 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_channelAdamId);
    v22 = BinaryInteger.description.getter(&type metadata for UInt64, v16);
    v73 = &type metadata for String;
    *(_QWORD *)&v72 = v22;
    *((_QWORD *)&v72 + 1) = v23;
    sub_1F460(&v72, v71);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
    v70 = &_swiftEmptyDictionarySingleton;
    sub_1D728(v71, 0x416C656E6E616863, 0xED000064496D6164, isUniquelyReferenced_nonNull_native);
    v21 = v70;
    v20 = swift_bridgeObjectRelease(0x8000000000000000);
  }
  v25 = static MetricsField<>.impressionType.getter(v20);
  v27 = v26;
  v28 = static MetricsTargetType.button.getter(v25, v26);
  v73 = &type metadata for String;
  *(_QWORD *)&v72 = v28;
  *((_QWORD *)&v72 + 1) = v29;
  sub_1F460(&v72, v71);
  v30 = swift_isUniquelyReferenced_nonNull_native(v21);
  v70 = v21;
  v74 = (void *)0x8000000000000000;
  sub_1E640(v71, v25, v27, v30);
  v31 = v74;
  v74 = v70;
  swift_bridgeObjectRelease(v27);
  v32 = swift_bridgeObjectRelease(v31);
  v33 = static MetricsField<>.name.getter(v32);
  v35 = v34;
  if ((*(_BYTE *)(v2 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_isWidgetPlayButton) & 1) != 0)
  {
    v36 = 0xE600000000000000;
    v37 = 0x746567646957;
  }
  else
  {
    v37 = 2036427856;
    if (*(_BYTE *)(v2 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_isSmartPlayButton))
      v37 = 0x616C507472616D53;
    v36 = 0xE400000000000000;
    if (*(_BYTE *)(v2 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_isSmartPlayButton))
      v36 = 0xEF6E6F7474754279;
  }
  v73 = &type metadata for String;
  *(_QWORD *)&v72 = v37;
  *((_QWORD *)&v72 + 1) = v36;
  sub_1F460(&v72, v71);
  v38 = v74;
  v39 = swift_isUniquelyReferenced_nonNull_native(v74);
  v70 = v38;
  v74 = (void *)0x8000000000000000;
  sub_1E640(v71, v33, v35, v39);
  v40 = v74;
  v74 = v70;
  swift_bridgeObjectRelease(v35);
  v41 = swift_bridgeObjectRelease(v40);
  v42 = static MetricsField<>.idType.getter(v41);
  v44 = v43;
  v45 = static MetricsIDType.itsID.getter();
  v73 = &type metadata for String;
  *(_QWORD *)&v72 = v45;
  *((_QWORD *)&v72 + 1) = v46;
  sub_1F460(&v72, v71);
  v47 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  v70 = &_swiftEmptyDictionarySingleton;
  sub_1E640(v71, v42, v44, v47);
  v48 = v70;
  swift_bridgeObjectRelease(v44);
  v49 = swift_bridgeObjectRelease(0x8000000000000000);
  v50 = static MetricsField<>.name.getter(v49);
  v52 = v51;
  v73 = &type metadata for String;
  *(_QWORD *)&v72 = 0x616C507472616D53;
  *((_QWORD *)&v72 + 1) = 0xEF6E6F7474754279;
  sub_1F460(&v72, v71);
  v53 = swift_isUniquelyReferenced_nonNull_native(v48);
  v70 = v48;
  sub_1E640(v71, v50, v52, v53);
  v54 = v70;
  swift_bridgeObjectRelease(v52);
  v55 = swift_bridgeObjectRelease(0x8000000000000000);
  v56 = static MetricsField<>.locationType.getter(v55);
  v58 = v57;
  v59 = static MetricsTargetType.button.getter(v56, v57);
  v73 = &type metadata for String;
  *(_QWORD *)&v72 = v59;
  *((_QWORD *)&v72 + 1) = v60;
  sub_1F460(&v72, v71);
  v61 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  v70 = &_swiftEmptyDictionarySingleton;
  sub_1E640(v71, v56, v58, v61);
  v62 = v70;
  swift_bridgeObjectRelease(v58);
  swift_bridgeObjectRelease(0x8000000000000000);
  v63 = ImpressionMetrics.ID.init(element:)(v68, v67);
  v64 = v74;
  ScalarDictionary.init()(v63);
  v65 = v69;
  ImpressionMetrics.init(id:fields:custom:commonFields:clickLocationFields:)(v9, v64, v6, v54, v62);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v12 + 56))(v65, 0, 1, v11);
}

uint64_t LibraryPlayPauseAction.metricsName(sender:)()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_isWidgetPlayButton) & 1) != 0)
    return 0x746567646957;
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_isSmartPlayButton))
    return 0x616C507472616D53;
  return 2036427856;
}

uint64_t sub_1CAEC@<X0>(uint64_t a1@<X8>)
{
  return LibraryPlayPauseAction.generateItemLevelImpressionFields(interactionView:)(a1);
}

uint64_t sub_1CB0C()
{
  _QWORD *v0;

  if ((*(_BYTE *)(*v0 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_isWidgetPlayButton) & 1) != 0)
    return 0x746567646957;
  if (*(_BYTE *)(*v0 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_isSmartPlayButton))
    return 0x616C507472616D53;
  return 2036427856;
}

uint64_t sub_1CB7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CB88(a1, a2, a3, &OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_episodeAdamId);
}

uint64_t sub_1CB88(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  unint64_t v6;

  if ((*(_BYTE *)(*v4 + *a4 + 8) & 1) != 0)
    return 0;
  v6 = sub_144B4();
  return BinaryInteger.description.getter(&type metadata for UInt64, v6);
}

uint64_t LibraryPlayPauseAction.metricsId(sender:)(uint64_t a1)
{
  return sub_1CBF4(a1, &OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_episodeAdamId);
}

uint64_t sub_1CBF4(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v4;

  if ((*(_BYTE *)(v2 + *a2 + 8) & 1) != 0)
    return 0;
  v4 = sub_144B4();
  return BinaryInteger.description.getter(&type metadata for UInt64, v4);
}

Swift::Void __swiftcall LibraryPlayPauseAction.markAsSharedContent()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_sharedContent) = 1;
}

uint64_t sub_1CC64()
{
  return sub_1EDD8();
}

uint64_t sub_1CC84@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_167D0(a1, a2, a3);
}

uint64_t PlayPauseStationAction.stationUuid.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit22PlayPauseStationAction_stationUuid);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit22PlayPauseStationAction_stationUuid + 8));
  return v1;
}

uint64_t PlayPauseStationAction.episodeUuid.getter()
{
  return sub_1CCE8(&OBJC_IVAR____TtC8ShelfKit22PlayPauseStationAction_episodeUuid);
}

uint64_t sub_1CCE8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v1 + *a1);
  v3 = *v2;
  swift_bridgeObjectRetain(v2[1]);
  return v3;
}

uint64_t PlayPauseStationAction.episodeAdamID.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit22PlayPauseStationAction_episodeAdamID);
}

uint64_t PlayPauseStationAction.__allocating_init(title:stationUuid:episodeUuid:episodeAdamID:actionMetrics:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9)
{
  return sub_1CD74(a1, a2, a3, a4, a5, a6, a7, a8, a9, &OBJC_IVAR____TtC8ShelfKit22PlayPauseStationAction_stationUuid, &OBJC_IVAR____TtC8ShelfKit22PlayPauseStationAction_episodeUuid, &OBJC_IVAR____TtC8ShelfKit22PlayPauseStationAction_episodeAdamID);
}

uint64_t sub_1CD74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, _QWORD *a10, _QWORD *a11, _QWORD *a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;

  v13 = v12;
  v47 = a8;
  v45 = a6;
  v46 = a7;
  v43 = a4;
  v44 = a5;
  v48 = a1;
  v49 = a2;
  v41 = a3;
  v42 = a12;
  v39 = a9;
  v40 = a11;
  v14 = type metadata accessor for UUID(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v18);
  v20 = (char *)&v38 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for ActionMetrics(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = (char *)&v38 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  v26 = (_QWORD *)(v25 + *a10);
  v27 = v43;
  *v26 = v41;
  v26[1] = v27;
  v28 = (_QWORD *)(v25 + *v40);
  v29 = v45;
  *v28 = v44;
  v28[1] = v29;
  v30 = v25 + *v42;
  *(_QWORD *)v30 = v46;
  *(_BYTE *)(v30 + 8) = v47 & 1;
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v24, a9, v21);
  v31 = type metadata accessor for ImpressionMetrics(0);
  v32 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v20, 1, 1, v31);
  UUID.init()(v32);
  v33 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
  v35 = v34;
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  *(_QWORD *)(v25 + 16) = v33;
  *(_QWORD *)(v25 + 24) = v35;
  v36 = v49;
  *(_QWORD *)(v25 + 32) = v48;
  *(_QWORD *)(v25 + 40) = v36;
  *(_BYTE *)(v25 + 48) = 32;
  (*(void (**)(uint64_t, char *, uint64_t))(v22 + 32))(v25 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v24, v21);
  sub_15BD4((uint64_t)v20, v25 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics, (uint64_t *)&unk_3B8790);
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v39, v21);
  return v25;
}

uint64_t PlayPauseStationAction.init(title:stationUuid:episodeUuid:episodeAdamID:actionMetrics:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9)
{
  return sub_1CFEC(a1, a2, a3, a4, a5, a6, a7, a8, a9, &OBJC_IVAR____TtC8ShelfKit22PlayPauseStationAction_stationUuid, &OBJC_IVAR____TtC8ShelfKit22PlayPauseStationAction_episodeUuid, &OBJC_IVAR____TtC8ShelfKit22PlayPauseStationAction_episodeAdamID);
}

uint64_t sub_1CFEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, _QWORD *a10, _QWORD *a11, _QWORD *a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;

  v13 = v12;
  v46 = a8;
  v44 = a6;
  v45 = a7;
  v47 = a1;
  v48 = a2;
  v40 = a12;
  v41 = a4;
  v38 = a11;
  v39 = a3;
  v42 = a9;
  v43 = a5;
  v14 = type metadata accessor for UUID(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v18);
  v20 = (char *)&v37 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for ActionMetrics(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = (char *)&v37 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = (_QWORD *)(v13 + *a10);
  v26 = v41;
  *v25 = v39;
  v25[1] = v26;
  v27 = (_QWORD *)(v13 + *v38);
  v28 = v44;
  *v27 = v43;
  v27[1] = v28;
  v29 = v13 + *v40;
  *(_QWORD *)v29 = v45;
  *(_BYTE *)(v29 + 8) = v46 & 1;
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v24, a9, v21);
  v30 = type metadata accessor for ImpressionMetrics(0);
  v31 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v20, 1, 1, v30);
  UUID.init()(v31);
  v32 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
  v34 = v33;
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  *(_QWORD *)(v13 + 16) = v32;
  *(_QWORD *)(v13 + 24) = v34;
  v35 = v48;
  *(_QWORD *)(v13 + 32) = v47;
  *(_QWORD *)(v13 + 40) = v35;
  *(_BYTE *)(v13 + 48) = 32;
  (*(void (**)(uint64_t, char *, uint64_t))(v22 + 32))(v13 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v24, v21);
  sub_15BD4((uint64_t)v20, v13 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics, (uint64_t *)&unk_3B8790);
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v42, v21);
  return v13;
}

void PlayPauseStationAction.init(deserializing:using:)(uint64_t a1, uint64_t a2)
{
  sub_1D220(a1, a2, 671);
}

void sub_1D220(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRelease(0xE000000000000000);
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000033, 0x800000000030A500, "ShelfKit/PlayAction.swift", 25, 2, a3, 0, 0);
  __break(1u);
}

void PlayPauseStationAction.init(uniqueId:title:presentationStyle:actionMetrics:impressionMetrics:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  sub_1D2B8(a1, a2, a3, a4, a5, a6, a7, (uint64_t)"ShelfKit.PlayPauseStationAction", 0x1Fu);
}

void sub_1D2B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  _swift_stdlib_reportUnimplementedInitializer(a8, a9, "init(uniqueId:title:presentationStyle:actionMetrics:impressionMetrics:)", 71, 0);
  __break(1u);
}

uint64_t sub_1D2E0()
{
  return sub_1D2F4(&OBJC_IVAR____TtC8ShelfKit22PlayPauseStationAction_stationUuid, &OBJC_IVAR____TtC8ShelfKit22PlayPauseStationAction_episodeUuid);
}

uint64_t sub_1D2F4(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;

  swift_bridgeObjectRelease(*(_QWORD *)(v2 + *a1 + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(v2 + *a2 + 8));
}

uint64_t PlayPauseStationAction.deinit()
{
  return sub_1D340(&OBJC_IVAR____TtC8ShelfKit22PlayPauseStationAction_stationUuid, &OBJC_IVAR____TtC8ShelfKit22PlayPauseStationAction_episodeUuid);
}

uint64_t sub_1D340(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;

  swift_bridgeObjectRelease(*(_QWORD *)(v2 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v2 + 40));
  v5 = v2 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics;
  v6 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  sub_1459C(v2 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics, (uint64_t *)&unk_3B8790);
  swift_bridgeObjectRelease(*(_QWORD *)(v2 + *a1 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v2 + *a2 + 8));
  return v2;
}

uint64_t PlayPauseStationAction.__deallocating_deinit()
{
  return sub_1D3F8(&OBJC_IVAR____TtC8ShelfKit22PlayPauseStationAction_stationUuid, &OBJC_IVAR____TtC8ShelfKit22PlayPauseStationAction_episodeUuid);
}

uint64_t sub_1D3F8(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v2;
  char *v5;
  uint64_t v6;

  swift_bridgeObjectRelease(v2[3]);
  swift_bridgeObjectRelease(v2[5]);
  v5 = (char *)v2 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics;
  v6 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  sub_1459C((uint64_t)v2 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics, (uint64_t *)&unk_3B8790);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v2 + *a1 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v2 + *a2 + 8));
  return swift_deallocClassInstance(v2, *(unsigned int *)(*v2 + 48), *(unsigned __int16 *)(*v2 + 52));
}

uint64_t PlayPauseStationAction.episodeIdentifier.getter()
{
  return sub_1D4B4(&OBJC_IVAR____TtC8ShelfKit22PlayPauseStationAction_episodeUuid);
}

uint64_t sub_1D4B4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (uint64_t *)(v1 + *a1);
  v4 = *v2;
  v3 = v2[1];
  swift_bridgeObjectRetain(v3);
  if (v3)
    return v4;
  else
    return 0;
}

uint64_t sub_1D4F4()
{
  _QWORD *v0;

  return *(_QWORD *)(*v0 + OBJC_IVAR____TtC8ShelfKit22PlayPauseStationAction_episodeAdamID);
}

uint64_t sub_1D510(uint64_t a1, uint64_t a2)
{
  return sub_1D51C(a1, a2, &OBJC_IVAR____TtC8ShelfKit22PlayPauseStationAction_episodeUuid);
}

uint64_t sub_1D51C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = (uint64_t *)(*v3 + *a3);
  v6 = *v4;
  v5 = v4[1];
  swift_bridgeObjectRetain(v5);
  if (v5)
    return v6;
  else
    return 0;
}

double sub_1D560@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  unint64_t v9;
  char v10;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;
  double result;
  uint64_t v15;

  v4 = v3;
  v8 = *v4;
  swift_bridgeObjectRetain(*v4);
  v9 = sub_29724(a1, a2);
  LOBYTE(a2) = v10;
  swift_bridgeObjectRelease(v8);
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    v12 = *v4;
    v15 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_23199C();
      v12 = v15;
    }
    swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v12 + 48) + 16 * v9 + 8));
    sub_1F460((_OWORD *)(*(_QWORD *)(v12 + 56) + 32 * v9), a3);
    sub_13EAA0(v9, v12);
    v13 = *v4;
    *v4 = v12;
    swift_bridgeObjectRelease(v13);
  }
  else
  {
    result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

uint64_t sub_1D650(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v4;
  char v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v2 = v1;
  swift_bridgeObjectRetain();
  v4 = sub_29CA0(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v7 = *v2;
  v12 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_2323FC();
    v7 = v12;
  }
  v8 = *(_QWORD *)(v7 + 48);
  v9 = type metadata accessor for URL(0);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * v4, v9);
  v10 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v4);
  sub_230F80(v4, v7);
  *v2 = v7;
  swift_bridgeObjectRelease();
  return v10;
}

_OWORD *sub_1D728(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _OWORD *result;
  unint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_29724(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = (_QWORD *)(v18[7] + 32 * v12);
        __swift_destroy_boxed_opaque_existential_1(v19);
        return sub_1F460(a1, v19);
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_23199C();
      goto LABEL_7;
    }
    sub_22E384(v15, a4 & 1);
    v21 = sub_29724(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_1EA98(v12, a2, a3, a1, v18);
      return (_OWORD *)swift_bridgeObjectRetain(a3);
    }
  }
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_1D858(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v23;
  char v24;
  uint64_t v25;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = sub_299B0(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  v18 = v13;
  v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    v20 = *v4;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = v20[7];
      result = swift_bridgeObjectRelease();
      *(_QWORD *)(v21 + 8 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_231B80();
    goto LABEL_7;
  }
  sub_22E680(v17, a3 & 1);
  v23 = sub_299B0(a2);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return result;
  }
  v14 = v23;
  v20 = *v4;
  if ((v18 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_2316A0(v14, (uint64_t)v11, a1, v20);
}

uint64_t sub_1D9B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  _QWORD *v5;
  _QWORD **v6;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t result;
  unint64_t v23;
  char v24;

  v6 = (_QWORD **)v5;
  v12 = (_QWORD *)*v5;
  v14 = sub_2993C(a3, a4);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = v12[3];
    if (v19 >= v17 && (a5 & 1) != 0)
    {
LABEL_7:
      v20 = *v6;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        v21 = (uint64_t *)(v20[7] + 16 * v14);
        result = swift_release(v21[1]);
        *v21 = a1;
        v21[1] = a2;
        return result;
      }
      goto LABEL_11;
    }
    if (v19 >= v17 && (a5 & 1) == 0)
    {
      sub_231BA0();
      goto LABEL_7;
    }
    sub_22E6B0(v17, a5 & 1);
    v23 = sub_2993C(a3, a4);
    if ((v18 & 1) == (v24 & 1))
    {
      v14 = v23;
      v20 = *v6;
      if ((v18 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_2316AC(v14, a3, a4, a1, a2, v20);
      return swift_bridgeObjectRetain();
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for ActionMenu.ID);
  __break(1u);
  return result;
}

uint64_t sub_1DAF4(char a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t result;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  uint64_t v22;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = sub_299B0(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  result = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  v18 = v13;
  v19 = v12[3];
  if (v19 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    v20 = *v4;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      *(_BYTE *)(v20[7] + v14) = a1 & 1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= result && (a3 & 1) == 0)
  {
    result = (uint64_t)sub_2321DC();
    goto LABEL_7;
  }
  sub_22F068(result, a3 & 1);
  result = sub_299B0(a2);
  if ((v18 & 1) != (v21 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return result;
  }
  v14 = result;
  v20 = *v4;
  if ((v18 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_2316FC(v14, (uint64_t)v11, a1 & 1, v20);
}

uint64_t sub_1DC48(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v23;
  char v24;
  uint64_t v25;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = sub_29CA0(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  v18 = v13;
  v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    v20 = *v4;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = v20[7];
      result = swift_bridgeObjectRelease();
      *(_QWORD *)(v21 + 8 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_2323FC();
    goto LABEL_7;
  }
  sub_22F404(v17, a3 & 1);
  v23 = sub_29CA0(a2);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return result;
  }
  v14 = v23;
  v20 = *v4;
  if ((v18 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_231794(v14, (uint64_t)v11, a1, v20);
}

uint64_t sub_1DDA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  _QWORD *v5;
  _QWORD **v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;

  v6 = (_QWORD **)v5;
  v29 = a2;
  v30 = a3;
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (_QWORD *)*v5;
  v16 = sub_299B0(a4);
  v17 = v14[2];
  v18 = (v15 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_14;
  }
  v20 = v15;
  v21 = v14[3];
  if (v21 >= v19 && (a5 & 1) != 0)
  {
LABEL_7:
    v22 = *v6;
    if ((v20 & 1) != 0)
    {
LABEL_8:
      v23 = (uint64_t *)(v22[7] + 24 * v16);
      v24 = *v23;
      swift_release(v23[2]);
      result = swift_unknownObjectRelease(v24);
      v26 = v29;
      *v23 = a1;
      v23[1] = v26;
      v23[2] = v30;
      return result;
    }
    goto LABEL_11;
  }
  if (v21 >= v19 && (a5 & 1) == 0)
  {
    sub_232640();
    goto LABEL_7;
  }
  sub_22F7B4(v19, a5 & 1);
  v27 = sub_299B0(a4);
  if ((v20 & 1) != (v28 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v10);
    __break(1u);
    return result;
  }
  v16 = v27;
  v22 = *v6;
  if ((v20 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a4, v10);
  return sub_231838(v16, (uint64_t)v13, a1, v29, v30, v22);
}

uint64_t sub_1DF28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  _QWORD *v5;
  _QWORD **v6;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t result;
  unint64_t v23;
  char v24;

  v6 = (_QWORD **)v5;
  v12 = (_QWORD *)*v5;
  v14 = sub_29724(a3, a4);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = v12[3];
    if (v19 >= v17 && (a5 & 1) != 0)
    {
LABEL_7:
      v20 = *v6;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        v21 = (uint64_t *)(v20[7] + 16 * v14);
        result = swift_bridgeObjectRelease();
        *v21 = a1;
        v21[1] = a2;
        return result;
      }
      goto LABEL_11;
    }
    if (v19 >= v17 && (a5 & 1) == 0)
    {
      sub_232894();
      goto LABEL_7;
    }
    sub_22FB80(v17, a5 & 1);
    v23 = sub_29724(a3, a4);
    if ((v18 & 1) == (v24 & 1))
    {
      v14 = v23;
      v20 = *v6;
      if ((v18 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_2316AC(v14, a3, a4, a1, a2, v20);
      return swift_bridgeObjectRetain();
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_1E068(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_29724(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = v18[7];
        result = swift_release(*(_QWORD *)(v19 + 8 * v12));
        *(_QWORD *)(v19 + 8 * v12) = a1;
        return result;
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_232BEC();
      goto LABEL_7;
    }
    sub_230158(v15, a4 & 1);
    v21 = sub_29724(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_2318EC(v12, a2, a3, a1, v18);
      return swift_bridgeObjectRetain(a3);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

_OWORD *sub_1E194(_OWORD *a1, void *a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _OWORD *result;
  unint64_t v18;
  char v19;
  uint64_t v20;

  v4 = v3;
  v7 = *v3;
  v9 = sub_29818((uint64_t)a2);
  v10 = *(_QWORD *)(v7 + 16);
  v11 = (v8 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
  }
  else
  {
    v13 = v8;
    v14 = *(_QWORD *)(v7 + 24);
    if (v14 >= v12 && (a3 & 1) != 0)
    {
LABEL_7:
      v15 = *v4;
      if ((v13 & 1) != 0)
      {
LABEL_8:
        v16 = (_QWORD *)(*(_QWORD *)(v15 + 56) + 32 * v9);
        __swift_destroy_boxed_opaque_existential_1(v16);
        return sub_1F460(a1, v16);
      }
      goto LABEL_11;
    }
    if (v14 >= v12 && (a3 & 1) == 0)
    {
      sub_232DA4();
      goto LABEL_7;
    }
    sub_230474(v12, a3 & 1);
    v18 = sub_29818((uint64_t)a2);
    if ((v13 & 1) == (v19 & 1))
    {
      v9 = v18;
      v15 = *v4;
      if ((v13 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_231934(v9, a2, a1, v15);
      return a2;
    }
  }
  type metadata accessor for Key(0);
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v20);
  __break(1u);
  return result;
}

_OWORD *sub_1E2B4(_OWORD *a1, void *a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _OWORD *result;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v4 = v3;
  v7 = *v3;
  v9 = sub_29788(a2);
  v10 = *(_QWORD *)(v7 + 16);
  v11 = (v8 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
  }
  else
  {
    v13 = v8;
    v14 = *(_QWORD *)(v7 + 24);
    if (v14 >= v12 && (a3 & 1) != 0)
    {
LABEL_7:
      v15 = *v4;
      if ((v13 & 1) != 0)
      {
LABEL_8:
        v16 = (_QWORD *)(*(_QWORD *)(v15 + 56) + 32 * v9);
        __swift_destroy_boxed_opaque_existential_1(v16);
        return sub_1F460(a1, v16);
      }
      goto LABEL_11;
    }
    if (v14 >= v12 && (a3 & 1) == 0)
    {
      sub_232DB0();
      goto LABEL_7;
    }
    sub_2307AC(v12, a3 & 1);
    v18 = sub_29788(a2);
    if ((v13 & 1) == (v19 & 1))
    {
      v9 = v18;
      v15 = *v4;
      if ((v13 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_231934(v9, a2, a1, v15);
      return a2;
    }
  }
  type metadata accessor for AttributeName(0);
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v20);
  __break(1u);
  return result;
}

uint64_t sub_1E3D4(unint64_t a1)
{
  return sub_10874(0, *(_QWORD *)(a1 + 16), 0, a1);
}

uint64_t sub_1E3E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for EpisodeOffer(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1E42C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for EpisodeOffer(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1E468()
{
  unint64_t result;

  result = qword_3B0CB0;
  if (!qword_3B0CB0)
  {
    type metadata accessor for JSONError(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for JSONError);
    atomic_store(result, (unint64_t *)&qword_3B0CB0);
  }
  return result;
}

uint64_t sub_1E4B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for EpisodeOffer(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for PlayPauseAction(uint64_t a1)
{
  return sub_1F9D4(a1, qword_3B1390, (uint64_t)&nominal type descriptor for PlayPauseAction);
}

_QWORD *sub_1E508(_QWORD *a1)
{
  return sub_10BA0(0, a1[2], 0, a1);
}

uint64_t sub_1E51C(unint64_t a1)
{
  return sub_10CD4(0, *(_QWORD *)(a1 + 16), 0, a1);
}

_QWORD *sub_1E530(_QWORD *a1)
{
  return sub_10CC0(0, a1[2], 0, a1);
}

uint64_t sub_1E548(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v4 = a1;
    else
      v4 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v4);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v2 = *(_QWORD *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8));
  }
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0, a1);
}

uint64_t sub_1E5B0(unint64_t a1)
{
  return sub_111EC(0, *(_QWORD *)(a1 + 16), 0, a1);
}

_QWORD *sub_1E5C4(_QWORD *a1)
{
  return sub_1190C(0, a1[2], 0, a1);
}

_BYTE *sub_1E5D8@<X0>(_BYTE *result@<X0>, BOOL *a2@<X8>)
{
  unsigned int v3;
  BOOL v4;
  uint64_t v5;
  BOOL v6;
  BOOL v7;

  v3 = *result;
  v4 = v3 > 0x20;
  v5 = (1 << v3) & 0x100003E01;
  v6 = v4 || v5 == 0;
  v7 = v6 && (result = (_BYTE *)_swift_stdlib_strtod_clocale()) != 0 && *result == 0;
  *a2 = v7;
  return result;
}

_OWORD *sub_1E640(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  char v5;
  _QWORD **v6;
  _QWORD *v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  _QWORD *v19;
  _QWORD *v20;
  _OWORD *result;

  v6 = (_QWORD **)v4;
  v11 = (_QWORD *)*v4;
  v13 = sub_211DC0(a2, a3);
  v14 = v11[2];
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_10;
  }
  v5 = v12;
  if (v11[3] >= v16)
  {
    if ((a4 & 1) != 0)
    {
      v19 = *v6;
      if ((v12 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_1EA98(v13, a2, a3, a1, v19);
      return (_OWORD *)swift_bridgeObjectRetain(a3);
    }
LABEL_10:
    sub_13E8AC();
    v19 = *v6;
    if ((v5 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
  sub_1E770(v16, a4 & 1);
  v17 = sub_211DC0(a2, a3);
  if ((v5 & 1) == (v18 & 1))
  {
    v13 = v17;
    v19 = *v6;
    if ((v5 & 1) == 0)
      goto LABEL_11;
LABEL_8:
    v20 = (_QWORD *)(v19[7] + 32 * v13);
    __swift_destroy_boxed_opaque_existential_1(v20);
    return sub_1F460(a1, v20);
  }
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_1E770(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t i;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  _QWORD *v35;
  int64_t v36;
  _QWORD v37[9];
  _OWORD v38[2];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&qword_3B1810);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v34 = v3;
    v35 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v36 = (unint64_t)(v9 + 63) >> 6;
    v12 = v7 + 64;
    result = swift_retain(v5);
    v14 = 0;
    while (1)
    {
      if (v11)
      {
        v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v18 = v17 | (v14 << 6);
      }
      else
      {
        v19 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }
        if (v19 >= v36)
          goto LABEL_38;
        v20 = v35[v19];
        ++v14;
        if (!v20)
        {
          v14 = v19 + 1;
          if (v19 + 1 >= v36)
            goto LABEL_38;
          v20 = v35[v14];
          if (!v20)
          {
            v14 = v19 + 2;
            if (v19 + 2 >= v36)
              goto LABEL_38;
            v20 = v35[v14];
            if (!v20)
            {
              v14 = v19 + 3;
              if (v19 + 3 >= v36)
              {
LABEL_38:
                swift_release(v5);
                v3 = v34;
                if ((a2 & 1) != 0)
                {
                  v33 = 1 << *(_BYTE *)(v5 + 32);
                  if (v33 >= 64)
                    bzero(v35, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                  else
                    *v35 = -1 << v33;
                  *(_QWORD *)(v5 + 16) = 0;
                }
                break;
              }
              v20 = v35[v14];
              for (i = v19 + 3; !v20; ++i)
              {
                v14 = i + 1;
                if (__OFADD__(i, 1))
                  goto LABEL_45;
                if (v14 >= v36)
                  goto LABEL_38;
                v20 = v35[v14];
              }
            }
          }
        }
        v11 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v14 << 6);
      }
      v22 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v18);
      v24 = *v22;
      v23 = v22[1];
      v25 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v18);
      if ((a2 & 1) != 0)
      {
        sub_1F460(v25, v38);
      }
      else
      {
        sub_1FB98((uint64_t)v25, (uint64_t)v38);
        swift_bridgeObjectRetain(v23);
      }
      Hasher.init(_seed:)(v37);
      String.hash(into:)(v37, v24, v23);
      result = Hasher._finalize()();
      v26 = -1 << *(_BYTE *)(v8 + 32);
      v27 = result & ~v26;
      v28 = v27 >> 6;
      if (((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v29 = 0;
        v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }
          v31 = v28 == v30;
          if (v28 == v30)
            v28 = 0;
          v29 |= v31;
          v32 = *(_QWORD *)(v12 + 8 * v28);
        }
        while (v32 == -1);
        v15 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      v16 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v15);
      *v16 = v24;
      v16[1] = v23;
      result = (uint64_t)sub_1F460(v38, (_OWORD *)(*(_QWORD *)(v8 + 56) + 32 * v15));
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

_OWORD *sub_1EA98(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, _QWORD *a5)
{
  _QWORD *v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a5[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = sub_1F460(a4, (_OWORD *)(a5[7] + 32 * a1));
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

uint64_t sub_1EB00(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr))
{
  uint64_t v3;
  char v4;
  uint64_t var2;

  if (a1)
  {
    a3(&var2);
    if (!v3)
      v4 = var2;
  }
  else
  {
    ((void (*)(uint64_t *__return_ptr, _QWORD, _QWORD))a3)((uint64_t *)((char *)&var2 + 1), 0, 0);
    if (!v3)
      v4 = BYTE1(var2);
  }
  return v4 & 1;
}

_QWORD *sub_1EB54@<X0>(_QWORD *(*a1)(uint64_t *__return_ptr)@<X2>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;

  result = a1(&v5);
  if (!v2)
    *a2 = v5;
  return result;
}

_BYTE *sub_1EB90@<X0>(_BYTE *a1@<X0>, BOOL *a2@<X8>)
{
  return sub_1EBA4(a1, a2);
}

_BYTE *sub_1EBA4@<X0>(_BYTE *result@<X0>, BOOL *a2@<X8>)
{
  unsigned int v3;
  BOOL v4;
  uint64_t v5;
  BOOL v6;
  BOOL v7;

  v3 = *result;
  v4 = v3 > 0x20;
  v5 = (1 << v3) & 0x100003E01;
  v6 = v4 || v5 == 0;
  v7 = v6 && (result = (_BYTE *)_swift_stdlib_strtod_clocale()) != 0 && *result == 0;
  *a2 = v7;
  return result;
}

uint64_t sub_1EC10(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0CC8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1EC58(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  _BYTE v20[135];
  unsigned __int8 v21;
  _OWORD v22[8];

  v2 = v1;
  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC8ShelfKit17LibraryPlayAction_episodeAdamId + 8) & 1) != 0)
  {
    v3 = 0;
    v4 = 0xE000000000000000;
  }
  else
  {
    *(_QWORD *)&v22[0] = *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit17LibraryPlayAction_episodeAdamId);
    v5 = sub_144B4();
    a1 = BinaryInteger.description.getter(&type metadata for UInt64, v5);
    v3 = a1;
    v4 = v6;
  }
  v7 = static MetricsActionType.play.getter(a1);
  v9 = v8;
  v10 = static MetricsTargetType.button.getter(v7, v8);
  v12 = v11;
  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC8ShelfKit17LibraryPlayAction_channelAdamId + 8) & 1) != 0)
  {
    v13 = 0;
    v14 = 0;
  }
  else
  {
    *(_QWORD *)&v22[0] = *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit17LibraryPlayAction_channelAdamId);
    v15 = sub_144B4();
    v13 = BinaryInteger.description.getter(&type metadata for UInt64, v15);
    v14 = v16;
  }
  v21 = 19;
  v17 = *(_BYTE *)(v2 + OBJC_IVAR____TtC8ShelfKit17LibraryPlayAction_sharedContent);
  sub_1FB80(v22);
  sub_15BD4((uint64_t)v22, (uint64_t)v20, &qword_3B1808);
  v18 = sub_B2EB8(v3, v4, v7, v9, v10, v12, v13, v14, (Swift::String)0, &v21, v17, (uint64_t)v20);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(v14);
  return v18;
}

uint64_t sub_1EDD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  _BYTE v21[135];
  unsigned __int8 v22;
  _OWORD v23[8];
  _BYTE v24[32];

  v1 = v0;
  if ((*(_BYTE *)(v0 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_episodeAdamId + 8) & 1) != 0)
  {
    v2 = 0;
    v3 = 0xE000000000000000;
  }
  else
  {
    *(_QWORD *)&v23[0] = *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_episodeAdamId);
    v4 = sub_144B4();
    v2 = BinaryInteger.description.getter(&type metadata for UInt64, v4);
    v3 = v5;
  }
  v6 = (uint64_t *)(v0 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_playState);
  swift_beginAccess(v1 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_playState, v24, 0, 0);
  v8 = *v6;
  v7 = (void *)v6[1];
  v9 = swift_bridgeObjectRetain(v7);
  v11 = static MetricsTargetType.button.getter(v9, v10);
  v13 = v12;
  v14 = 0;
  v15 = 0;
  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_channelAdamId + 8) & 1) == 0)
  {
    *(_QWORD *)&v23[0] = *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_channelAdamId);
    v16 = sub_144B4();
    v14 = BinaryInteger.description.getter(&type metadata for UInt64, v16);
    v15 = v17;
  }
  v22 = 19;
  v18 = *(_BYTE *)(v1 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_sharedContent);
  sub_1FB80(v23);
  sub_15BD4((uint64_t)v23, (uint64_t)v21, &qword_3B1808);
  v19 = sub_B2EB8(v2, v3, v8, v7, v11, v13, v14, v15, (Swift::String)0, &v22, v18, (uint64_t)v21);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(v15);
  return v19;
}

uint64_t sub_1EF74(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  void (*v21)(_BYTE *, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE v43[4];
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE *v52;
  _BYTE *v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE v56[24];
  char v57[24];

  v2 = type metadata accessor for UUID(0);
  v54 = *(_QWORD *)(v2 - 8);
  v55 = v2;
  __chkstk_darwin(v2);
  v4 = &v43[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v5);
  v53 = &v43[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for ActionMetrics(0);
  v51 = *(_QWORD *)(v7 - 8);
  v8 = v51;
  v9 = __chkstk_darwin(v7);
  v52 = &v43[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v9);
  v12 = &v43[-v11];
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0CC8);
  __chkstk_darwin(v13);
  v15 = &v43[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8ShelfKit17LibraryPlayAction_episodeUuid);
  v16 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8ShelfKit17LibraryPlayAction_episodeUuid + 8);
  v18 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8ShelfKit17LibraryPlayAction_episodeAdamId);
  v46 = *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC8ShelfKit17LibraryPlayAction_episodeAdamId + 8);
  v45 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8ShelfKit17LibraryPlayAction_channelAdamId);
  v44 = *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC8ShelfKit17LibraryPlayAction_channelAdamId + 8);
  sub_1EC10(a1 + OBJC_IVAR____TtC8ShelfKit17LibraryPlayAction_settings, (uint64_t)v15);
  v19 = *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC8ShelfKit17LibraryPlayAction_showPlayerIfPlaying);
  v47 = *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC8ShelfKit17LibraryPlayAction_forcePlay);
  v48 = v19;
  v50 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8ShelfKit17LibraryPlayAction_timestamp);
  v49 = *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC8ShelfKit17LibraryPlayAction_timestamp + 8);
  v20 = a1 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics;
  swift_beginAccess(v20, v57, 0, 0);
  v21 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v8 + 16);
  v21(v12, v20, v7);
  v22 = type metadata accessor for LibraryPlayPauseAction(0);
  v23 = swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
  v24 = v23 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_settings;
  v25 = type metadata accessor for EpisodeListSettings(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v24, 1, 1, v25);
  *(_BYTE *)(v23 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_sharedContent) = 0;
  v26 = (_QWORD *)(v23 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_episodeUuid);
  *v26 = v17;
  v26[1] = v16;
  v27 = v23 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_episodeAdamId;
  *(_QWORD *)v27 = v18;
  *(_BYTE *)(v27 + 8) = v46;
  v28 = v23 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_channelAdamId;
  *(_QWORD *)v28 = v45;
  *(_BYTE *)(v28 + 8) = v44;
  swift_beginAccess(v24, v56, 33, 0);
  swift_bridgeObjectRetain(v16);
  swift_retain(v23);
  sub_1F418((uint64_t)v15, v24);
  v29 = swift_endAccess(v56);
  *(_BYTE *)(v23 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_showPlayerIfPlaying) = v48;
  *(_BYTE *)(v23 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_forcePlay) = v47;
  v30 = static MetricsActionType.play.getter(v29);
  v31 = (uint64_t *)(v23 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_playState);
  *v31 = v30;
  v31[1] = v32;
  *(_BYTE *)(v23 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_isSmartPlayButton) = 0;
  *(_BYTE *)(v23 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_isWidgetPlayButton) = 0;
  *(_BYTE *)(v23 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_waitForEngine) = 0;
  v33 = v23 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_timestamp;
  *(_QWORD *)v33 = v50;
  *(_BYTE *)(v33 + 8) = v49;
  *(_BYTE *)(v23 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_shouldPreventQueueing) = 0;
  swift_release(v23);
  v34 = v52;
  v21(v52, (uint64_t)v12, v7);
  v35 = type metadata accessor for ImpressionMetrics(0);
  v36 = (uint64_t)v53;
  v37 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v53, 1, 1, v35);
  UUID.init()(v37);
  v38 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
  v40 = v39;
  (*(void (**)(_BYTE *, uint64_t))(v54 + 8))(v4, v55);
  *(_QWORD *)(v23 + 16) = v38;
  *(_QWORD *)(v23 + 24) = v40;
  *(_QWORD *)(v23 + 32) = 0;
  *(_QWORD *)(v23 + 40) = 0;
  *(_BYTE *)(v23 + 48) = 32;
  v41 = v51;
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v51 + 32))(v23 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v34, v7);
  sub_15BD4(v36, v23 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics, (uint64_t *)&unk_3B8790);
  (*(void (**)(_BYTE *, uint64_t))(v41 + 8))(v12, v7);
  sub_1459C((uint64_t)v15, &qword_3B0CC8);
  return v23;
}

uint64_t type metadata accessor for PlayPauseStationAction(uint64_t a1)
{
  return sub_1F9D4(a1, qword_3B1720, (uint64_t)&nominal type descriptor for PlayPauseStationAction);
}

uint64_t sub_1F3D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0CC8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1F418(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0CC8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

_OWORD *sub_1F460(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

unint64_t sub_1F470()
{
  unint64_t result;
  uint64_t v1;

  result = qword_3B0CF0;
  if (!qword_3B0CF0)
  {
    v1 = objc_opt_self(OS_os_log);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_3B0CF0);
  }
  return result;
}

unint64_t sub_1F4B0()
{
  unint64_t result;

  result = qword_3B0CF8;
  if (!qword_3B0CF8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for PlayButtonState);
    atomic_store(result, (unint64_t *)&qword_3B0CF8);
  }
  return result;
}

uint64_t dispatch thunk of LibraryObserverProviderProtocol.libraryRecentlyUnfollowedShowsCountPublisher.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of EntitlementsActionProviding.appAdamID.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of Observer.currentValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of LibraryObserverProviderProtocol.libraryChannelCountPublisher.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t sub_1F530(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t sub_1F554()
{
  return type metadata accessor for PlayAction(0);
}

uint64_t type metadata accessor for PlayAction(uint64_t a1)
{
  return sub_1F9D4(a1, qword_3B0D28, (uint64_t)&nominal type descriptor for PlayAction);
}

uint64_t sub_1F570(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  result = type metadata accessor for EpisodeOffer(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = &unk_2EAB18;
    result = swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 160);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for PlayAction(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for PlayAction);
}

uint64_t dispatch thunk of PlayAction.__allocating_init(adamId:episodeOffer:timestamp:actionMetrics:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v4 + 184))(a1, a2, a3, a4 & 1);
}

uint64_t sub_1F60C()
{
  return type metadata accessor for PodcastPlayAction(0);
}

uint64_t type metadata accessor for PodcastPlayAction(uint64_t a1)
{
  return sub_1F9D4(a1, qword_3B0E38, (uint64_t)&nominal type descriptor for PodcastPlayAction);
}

uint64_t method lookup function for PodcastPlayAction(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for PodcastPlayAction);
}

uint64_t dispatch thunk of WebAuthenticationSession.__allocating_init(authorizationURL:window:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 168))();
}

uint64_t sub_1F640()
{
  return type metadata accessor for StoreEpisodePlayAction(0);
}

uint64_t type metadata accessor for StoreEpisodePlayAction(uint64_t a1)
{
  return sub_1F9D4(a1, qword_3B0F38, (uint64_t)&nominal type descriptor for StoreEpisodePlayAction);
}

uint64_t sub_1F65C(uint64_t a1)
{
  char *v2;

  v2 = (char *)&value witness table for Builtin.Int64 + 64;
  return swift_updateClassMetadata2(a1, 256, 1, &v2, a1 + 160);
}

uint64_t method lookup function for StoreEpisodePlayAction(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for StoreEpisodePlayAction);
}

uint64_t sub_1F6AC()
{
  return type metadata accessor for SeekToTimestampAndPlayAction(0);
}

uint64_t type metadata accessor for SeekToTimestampAndPlayAction(uint64_t a1)
{
  return sub_1F9D4(a1, qword_3B1038, (uint64_t)&nominal type descriptor for SeekToTimestampAndPlayAction);
}

uint64_t sub_1F6C8(uint64_t a1)
{
  _QWORD v2[2];

  v2[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v2[1] = (char *)&value witness table for Builtin.Int64 + 64;
  return swift_updateClassMetadata2(a1, 256, 2, v2, a1 + 160);
}

uint64_t method lookup function for SeekToTimestampAndPlayAction(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for SeekToTimestampAndPlayAction);
}

uint64_t dispatch thunk of SeekToTimestampAndPlayAction.__allocating_init(episodeId:timestamp:actionMetrics:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 176))();
}

uint64_t sub_1F720()
{
  return type metadata accessor for LibraryPlayAction(0);
}

uint64_t type metadata accessor for LibraryPlayAction(uint64_t a1)
{
  return sub_1F9D4(a1, (uint64_t *)&unk_3B1140, (uint64_t)&nominal type descriptor for LibraryPlayAction);
}

void sub_1F73C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[8];

  v4[0] = &unk_2EABE8;
  sub_1F820(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    v4[2] = &unk_2EAC00;
    v4[3] = &unk_2EAC00;
    v4[4] = &unk_2EAB18;
    v4[5] = &unk_2EAB18;
    v4[6] = &unk_2EAC18;
    v4[7] = &unk_2EAB18;
    swift_updateClassMetadata2(a1, 256, 8, v4, a1 + 160);
  }
}

uint64_t method lookup function for LibraryPlayAction(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for LibraryPlayAction);
}

uint64_t dispatch thunk of LibraryPlayAction.__allocating_init(episodeUuid:episodeAdamId:channelAdamId:settings:showPlayerIfPlaying:forcePlay:title:timestamp:actionMetrics:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, char a6)
{
  uint64_t v6;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD))(v6 + 224))(a1, a2, a3, a4 & 1, a5, a6 & 1);
}

void sub_1F820(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_3B1150)
  {
    v2 = type metadata accessor for EpisodeListSettings(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_3B1150);
  }
}

uint64_t sub_1F874()
{
  return type metadata accessor for PlayStationAction(0);
}

uint64_t type metadata accessor for PlayStationAction(uint64_t a1)
{
  return sub_1F9D4(a1, qword_3B1280, (uint64_t)&nominal type descriptor for PlayStationAction);
}

uint64_t method lookup function for PlayStationAction(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for PlayStationAction);
}

uint64_t dispatch thunk of PlayStationAction.__allocating_init(title:stationUuid:episodeUuid:episodeAdamID:actionMetrics:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v8;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(v8 + 184))(a1, a2, a3, a4, a5, a6, a7, a8 & 1);
}

ValueMetadata *type metadata accessor for PlayButtonState()
{
  return &type metadata for PlayButtonState;
}

uint64_t sub_1F8C4()
{
  return type metadata accessor for PlayPauseAction(0);
}

uint64_t sub_1F8CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1F918(a1, a2, a3, (uint64_t)&unk_2EAB18);
}

uint64_t method lookup function for PlayPauseAction(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for PlayPauseAction);
}

uint64_t dispatch thunk of PlayPauseAction.__allocating_init(adamId:episodeOffer:timestamp:actionMetrics:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v4 + 192))(a1, a2, a3, a4 & 1);
}

uint64_t sub_1F8F0()
{
  return type metadata accessor for PlayPauseQueueAction(0);
}

uint64_t type metadata accessor for PlayPauseQueueAction(uint64_t a1)
{
  return sub_1F9D4(a1, qword_3B14A8, (uint64_t)&nominal type descriptor for PlayPauseQueueAction);
}

uint64_t sub_1F90C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1F918(a1, a2, a3, (uint64_t)&unk_2EACC8);
}

uint64_t sub_1F918(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v7;
  _QWORD v8[4];

  v8[0] = (char *)&value witness table for Builtin.Int64 + 64;
  result = type metadata accessor for EpisodeOffer(319);
  if (v7 <= 0x3F)
  {
    v8[1] = *(_QWORD *)(result - 8) + 64;
    v8[2] = a4;
    v8[3] = (char *)&value witness table for Builtin.Int64 + 64;
    result = swift_updateClassMetadata2(a1, 256, 4, v8, a1 + 160);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for PlayPauseQueueAction(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for PlayPauseQueueAction);
}

uint64_t dispatch thunk of PlayPauseQueueAction.__allocating_init(contentId:episodeOffer:queueEpisodeIds:actionMetrics:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 192))();
}

uint64_t sub_1F9B8()
{
  return type metadata accessor for LibraryPlayPauseAction(0);
}

uint64_t type metadata accessor for LibraryPlayPauseAction(uint64_t a1)
{
  return sub_1F9D4(a1, qword_3B15C0, (uint64_t)&nominal type descriptor for LibraryPlayPauseAction);
}

uint64_t sub_1F9D4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata(a1, a3);
  return result;
}

void sub_1FA08(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[13];

  v4[0] = &unk_2EABE8;
  sub_1F820(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    v4[2] = &unk_2EAC00;
    v4[3] = &unk_2EAC18;
    v4[4] = &unk_2EAC18;
    v4[5] = &unk_2EAC00;
    v4[6] = &unk_2EAB18;
    v4[7] = &unk_2EAC18;
    v4[8] = &unk_2EAC18;
    v4[9] = &unk_2EAB18;
    v4[10] = &unk_2EAB18;
    v4[11] = &unk_2EAC18;
    v4[12] = &unk_2EABE8;
    swift_updateClassMetadata2(a1, 256, 13, v4, a1 + 160);
  }
}

uint64_t method lookup function for LibraryPlayPauseAction(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for LibraryPlayPauseAction);
}

uint64_t dispatch thunk of LibraryPlayPauseAction.__allocating_init(episodeUuid:episodeAdamId:channelAdamId:settings:showPlayerIfPlaying:forcePlay:isSmartPlayButton:isWidgetPlayButton:timestamp:waitForEngine:shouldPreventQueueing:actionMetrics:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, char a6)
{
  uint64_t v6;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD))(v6 + 264))(a1, a2, a3, a4 & 1, a5, a6 & 1);
}

uint64_t sub_1FB18()
{
  return type metadata accessor for PlayPauseStationAction(0);
}

uint64_t sub_1FB20(uint64_t a1)
{
  _QWORD v2[3];

  v2[0] = &unk_2EABE8;
  v2[1] = &unk_2EAC58;
  v2[2] = &unk_2EAB18;
  return swift_updateClassMetadata2(a1, 256, 3, v2, a1 + 160);
}

uint64_t method lookup function for PlayPauseStationAction(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for PlayPauseStationAction);
}

double sub_1FB80(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t sub_1FB98(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t dispatch thunk of PlayPauseStationAction.__allocating_init(title:stationUuid:episodeUuid:episodeAdamID:actionMetrics:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  return dispatch thunk of PlayStationAction.__allocating_init(title:stationUuid:episodeUuid:episodeAdamID:actionMetrics:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t NSUserDefaults.Keys.rawValue.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain(v0[1]);
  return v1;
}

uint64_t TapToRate.shelfUniqueId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 24));
  return v1;
}

uint64_t Showcase.caption.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 40));
  return v1;
}

uint64_t Showcase.title.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 56));
  return v1;
}

uint64_t Showcase.subtitle.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 72));
  return v1;
}

uint64_t ChannelSubscriptionOffer.freeTrial.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 80);
}

uint64_t Podcast.author.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 88);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 96));
  return v1;
}

uint64_t RecommendationsShelvesIntent.suppressInlineCategoriesModule.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 104);
}

uint64_t ChannelSubscriptionOffer.isFree.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 105);
}

uint64_t ChannelSubscriptionOffer.isStudent.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 106);
}

uint64_t ChannelSubscriptionOffer.isSubscribed.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 107);
}

uint64_t ChannelSubscriptionOffer.legalTexts.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(_QWORD *)(v1 + 216);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 112);
  v3 = *(_OWORD *)(v1 + 120);
  *(_OWORD *)(a1 + 8) = v3;
  v4 = *(_OWORD *)(v1 + 136);
  *(_OWORD *)(a1 + 24) = v4;
  v5 = *(_OWORD *)(v1 + 152);
  *(_OWORD *)(a1 + 40) = v5;
  v6 = *(_OWORD *)(v1 + 168);
  *(_OWORD *)(a1 + 56) = v6;
  v7 = *(_OWORD *)(v1 + 184);
  *(_OWORD *)(a1 + 72) = v7;
  v8 = v3;
  v9 = *(_OWORD *)(v1 + 200);
  v10 = v4;
  v11 = v5;
  *(_OWORD *)(a1 + 88) = v9;
  v12 = v6;
  v13 = v7;
  *(_QWORD *)(a1 + 104) = v2;
  v14 = v9;
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  return swift_bridgeObjectRetain(v14);
}

uint64_t ChannelSubscriptionOffer.offerName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 224);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 232));
  return v1;
}

uint64_t ChannelSubscriptionOffer.valueProposition.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = v1[31];
  v3 = v1[32];
  v4 = v1[33];
  *a1 = v1[30];
  a1[1] = v2;
  a1[2] = v3;
  a1[3] = v4;
  swift_bridgeObjectRetain(v2);
  return swift_bridgeObjectRetain(v4);
}

uint64_t ChannelSubscriptionOffer.Kind.init(rawValue:)@<X0>(Swift::String string@<0:X0, 8:X1>, BOOL *a2@<X8>)
{
  void *object;
  Swift::String v3;
  Swift::Int v5;
  uint64_t result;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_373058, v3);
  result = swift_bridgeObjectRelease(object);
  *a2 = v5 != 0;
  return result;
}

uint64_t ChannelSubscriptionOffer.Kind.rawValue.getter()
{
  return 0x6269726373627573;
}

Swift::Int sub_1FEA0()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  String.hash(into:)(v1, 0x6269726373627573, 0xE900000000000065);
  return Hasher._finalize()();
}

uint64_t sub_1FEF4(uint64_t a1)
{
  return String.hash(into:)(a1, 0x6269726373627573, 0xE900000000000065);
}

Swift::Int sub_1FF10()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  String.hash(into:)(v1, 0x6269726373627573, 0xE900000000000065);
  return Hasher._finalize()();
}

uint64_t sub_1FF60@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_373090, v3);
  result = swift_bridgeObjectRelease(v4);
  *a2 = v5 != 0;
  return result;
}

void sub_1FFB0(_QWORD *a1@<X8>)
{
  *a1 = 0x6269726373627573;
  a1[1] = 0xE900000000000065;
}

uint64_t Showcase.overlayingCaption.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 80);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 88));
  return v1;
}

uint64_t Review.contents.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 96);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 104));
  return v1;
}

__n128 ChannelSubscriptionOffer.init(deserializing:using:)@<Q0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  void (*v45)(char *, uint64_t);
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  __n128 result;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  void (*v58)(char *, uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  unint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t *v93;
  char *v94;
  uint64_t v95;
  char *v96;
  void (*v97)(uint64_t, uint64_t);
  char *v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  unint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  unint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  int v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  int v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t *v169;
  char *v170;
  char *v171;
  char *v172;
  char *v173;
  char *v174;
  char *v175;
  char *v176;
  char *v177;
  char *v178;
  char *v179;
  char *v180;
  char *v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  _BYTE v187[7];
  __n128 v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191[14];
  char *v192;
  uint64_t v193;
  uint64_t v194;

  v186 = a2;
  v169 = a3;
  v4 = type metadata accessor for JSONContext(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v172 = (char *)&v147 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v175 = (char *)&v147 - v8;
  v9 = type metadata accessor for JSONObject(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v171 = (char *)&v147 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v170 = (char *)&v147 - v14;
  v15 = __chkstk_darwin(v13);
  v174 = (char *)&v147 - v16;
  v17 = __chkstk_darwin(v15);
  v173 = (char *)&v147 - v18;
  v19 = __chkstk_darwin(v17);
  v176 = (char *)&v147 - v20;
  v21 = __chkstk_darwin(v19);
  v177 = (char *)&v147 - v22;
  v23 = __chkstk_darwin(v21);
  v179 = (char *)&v147 - v24;
  v25 = __chkstk_darwin(v23);
  v178 = (char *)&v147 - v26;
  v27 = __chkstk_darwin(v25);
  v180 = (char *)&v147 - v28;
  v29 = __chkstk_darwin(v27);
  v181 = (char *)&v147 - v30;
  v31 = __chkstk_darwin(v29);
  v33 = (char *)&v147 - v32;
  v34 = __chkstk_darwin(v31);
  v36 = (char *)&v147 - v35;
  v37 = __chkstk_darwin(v34);
  v39 = (char *)&v147 - v38;
  __chkstk_darwin(v37);
  v41 = (char *)&v147 - v40;
  v192 = a1;
  v42 = JSONObject.subscript.getter(25705, 0xE200000000000000);
  v168 = JSONObject.string.getter(v42);
  v44 = v43;
  v45 = *(void (**)(char *, uint64_t))(v10 + 8);
  v45(v41, v9);
  if (!v44)
  {
    v49 = type metadata accessor for JSONError(0);
    v50 = sub_1E468();
    swift_allocError(v49, v50, 0, 0);
    *v51 = 25705;
    v51[1] = 0xE200000000000000;
    v51[2] = &type metadata for ChannelSubscriptionOffer;
    v52 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v49 - 8) + 104))(v51, enum case for JSONError.missingProperty(_:), v49);
    swift_willThrow(v52);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v186, v4);
    v48 = v192;
    goto LABEL_5;
  }
  v182 = v44;
  v184 = v5;
  v183 = v4;
  v46 = v192;
  v47 = v185;
  sub_21150(1684957547, 0xE400000000000000, (uint64_t)&type metadata for ChannelSubscriptionOffer);
  if (v47)
  {
    swift_bridgeObjectRelease(v182);
    (*(void (**)(uint64_t, uint64_t))(v184 + 8))(v186, v183);
    v48 = v46;
LABEL_5:
    v45(v48, v9);
    return result;
  }
  v167 = 0;
  v54 = JSONObject.subscript.getter(0x656C746974, 0xE500000000000000);
  v166 = JSONObject.string.getter(v54);
  v56 = v55;
  v57 = v39;
  v58 = v45;
  v59 = v9;
  v45(v57, v9);
  if (!v56)
  {
    v80 = type metadata accessor for JSONError(0);
    v81 = sub_1E468();
    swift_allocError(v80, v81, 0, 0);
    *v82 = 0x656C746974;
    v82[1] = 0xE500000000000000;
    v82[2] = &type metadata for ChannelSubscriptionOffer;
    v83 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v80 - 8) + 104))(v82, enum case for JSONError.missingProperty(_:), v80);
    swift_willThrow(v83);
LABEL_13:
    v88 = v182;
LABEL_18:
    swift_bridgeObjectRelease(v88);
    (*(void (**)(uint64_t, uint64_t))(v184 + 8))(v186, v183);
    goto LABEL_19;
  }
  v185 = v56;
  v60 = JSONObject.subscript.getter(0x6D61726150797562, 0xE900000000000073);
  v61 = JSONObject.string.getter(v60);
  v63 = v62;
  v45(v36, v9);
  if (!v63)
  {
    v84 = type metadata accessor for JSONError(0);
    v85 = sub_1E468();
    swift_allocError(v84, v85, 0, 0);
    *v86 = 0x6D61726150797562;
    v86[1] = 0xE900000000000073;
    v86[2] = &type metadata for ChannelSubscriptionOffer;
    v87 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v84 - 8) + 104))(v86, enum case for JSONError.missingProperty(_:), v84);
    swift_willThrow(v87);
    swift_bridgeObjectRelease(v185);
    goto LABEL_13;
  }
  v164 = v61;
  v165 = v63;
  v64 = JSONObject.subscript.getter(0x7470697263736564, 0xEB000000006E6F69);
  v163 = JSONObject.string.getter(v64);
  v66 = v65;
  v45(v33, v9);
  v67 = v181;
  v68 = JSONObject.subscript.getter(0x6C69626967696C65, 0xEF65707954797469);
  v69 = JSONObject.string.getter(v68);
  v71 = v70;
  v58(v67, v9);
  if (!v71)
  {
    v89 = type metadata accessor for JSONError(0);
    v90 = sub_1E468();
    swift_allocError(v89, v90, 0, 0);
    *v91 = 0x6C69626967696C65;
    v91[1] = 0xEF65707954797469;
    v91[2] = &type metadata for ChannelSubscriptionOffer;
    v92 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v89 - 8) + 104))(v91, enum case for JSONError.missingProperty(_:), v89);
    swift_willThrow(v92);
    swift_bridgeObjectRelease(v165);
    swift_bridgeObjectRelease(v185);
    v93 = &v194;
LABEL_17:
    swift_bridgeObjectRelease(*(v93 - 32));
    v88 = v66;
    goto LABEL_18;
  }
  v162 = v69;
  v181 = v66;
  v72 = v180;
  v73 = JSONObject.subscript.getter(0x6169725465657266, 0xE90000000000006CLL);
  v74 = JSONObject.BOOL.getter(v73);
  v58(v72, v59);
  v75 = v184;
  if (v74 == 2)
  {
    v76 = type metadata accessor for JSONError(0);
    v77 = sub_1E468();
    swift_allocError(v76, v77, 0, 0);
    *v78 = 0x6169725465657266;
    v78[1] = 0xE90000000000006CLL;
    v78[2] = &type metadata for ChannelSubscriptionOffer;
    v79 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v76 - 8) + 104))(v78, enum case for JSONError.missingProperty(_:), v76);
    swift_willThrow(v79);
    swift_bridgeObjectRelease(v71);
    swift_bridgeObjectRelease(v165);
    swift_bridgeObjectRelease(v185);
    swift_bridgeObjectRelease(v182);
    swift_bridgeObjectRelease(v181);
    (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v186, v183);
LABEL_19:
    v105 = v46;
LABEL_20:
    v58(v105, v59);
    return result;
  }
  v160 = v74;
  v180 = v71;
  v94 = v178;
  v95 = JSONObject.subscript.getter(0x6169725465657266, 0xEF646F697265506CLL);
  v161 = JSONObject.string.getter(v95);
  v66 = v96;
  v97 = (void (*)(uint64_t, uint64_t))v58;
  v58(v94, v59);
  v98 = v179;
  v99 = JSONObject.subscript.getter(0x796C696D61467369, 0xE800000000000000);
  v100 = JSONObject.BOOL.getter(v99);
  v58(v98, v59);
  if (v100 == 2)
  {
    v101 = type metadata accessor for JSONError(0);
    v102 = sub_1E468();
    swift_allocError(v101, v102, 0, 0);
    *v103 = 0x796C696D61467369;
    v103[1] = 0xE800000000000000;
    v103[2] = &type metadata for ChannelSubscriptionOffer;
    v104 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v101 - 8) + 104))(v103, enum case for JSONError.missingProperty(_:), v101);
    swift_willThrow(v104);
    swift_bridgeObjectRelease(v180);
    swift_bridgeObjectRelease(v165);
    swift_bridgeObjectRelease(v185);
    swift_bridgeObjectRelease(v182);
    v93 = &v193;
    goto LABEL_17;
  }
  LODWORD(v178) = v100;
  v179 = v66;
  v106 = v177;
  v107 = JSONObject.subscript.getter(0x656572467369, 0xE600000000000000);
  v108 = JSONObject.BOOL.getter(v107);
  v58(v106, v59);
  if (v108 == 2)
  {
    v109 = type metadata accessor for JSONError(0);
    v110 = sub_1E468();
    swift_allocError(v109, v110, 0, 0);
    *v111 = 0x656572467369;
    v111[1] = 0xE600000000000000;
    v111[2] = &type metadata for ChannelSubscriptionOffer;
    v112 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v109 - 8) + 104))(v111, enum case for JSONError.missingProperty(_:), v109);
    swift_willThrow(v112);
    swift_bridgeObjectRelease(v180);
    swift_bridgeObjectRelease(v165);
    swift_bridgeObjectRelease(v185);
    swift_bridgeObjectRelease(v182);
    swift_bridgeObjectRelease(v181);
    swift_bridgeObjectRelease(v179);
    (*(void (**)(uint64_t, uint64_t))(v184 + 8))(v186, v183);
LABEL_25:
    v105 = v192;
    goto LABEL_20;
  }
  v113 = v176;
  v114 = JSONObject.subscript.getter(0x6E65647574537369, 0xE900000000000074);
  v115 = JSONObject.BOOL.getter(v114);
  v58(v113, v59);
  v116 = v184;
  if (v115 == 2)
  {
    v117 = type metadata accessor for JSONError(0);
    v118 = sub_1E468();
    swift_allocError(v117, v118, 0, 0);
    *v119 = 0x6E65647574537369;
    v119[1] = 0xE900000000000074;
    v119[2] = &type metadata for ChannelSubscriptionOffer;
    v120 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v117 - 8) + 104))(v119, enum case for JSONError.missingProperty(_:), v117);
    swift_willThrow(v120);
    swift_bridgeObjectRelease(v180);
    swift_bridgeObjectRelease(v165);
    swift_bridgeObjectRelease(v185);
    swift_bridgeObjectRelease(v182);
    swift_bridgeObjectRelease(v181);
    swift_bridgeObjectRelease(v179);
    (*(void (**)(uint64_t, uint64_t))(v116 + 8))(v186, v183);
    goto LABEL_25;
  }
  LODWORD(v176) = v115;
  v121 = v173;
  v122 = JSONObject.subscript.getter(0x7263736275537369, 0xEC00000064656269);
  v123 = JSONObject.BOOL.getter(v122);
  v58(v121, v59);
  v124 = v174;
  JSONObject.subscript.getter(0x7865546C6167656CLL, 0xEA00000000007374);
  v125 = (uint64_t)v175;
  v126 = v186;
  v127 = v183;
  v177 = *(char **)(v116 + 16);
  ((void (*)(char *, uint64_t, uint64_t))v177)(v175, v186, v183);
  v128 = v167;
  ChannelSubscriptionOffer.LegalTexts.init(deserializing:using:)(v124, v125, v191);
  if (v128)
  {
    swift_bridgeObjectRelease(v180);
    swift_bridgeObjectRelease(v165);
    swift_bridgeObjectRelease(v185);
    swift_bridgeObjectRelease(v182);
    swift_bridgeObjectRelease(v181);
    swift_bridgeObjectRelease(v179);
    (*(void (**)(uint64_t, uint64_t))(v116 + 8))(v126, v127);
    v97((uint64_t)v192, v59);
  }
  else
  {
    v155 = v123;
    v154 = v191[0];
    v157 = v191[1];
    v153 = v191[2];
    v158 = v191[3];
    v152 = v191[4];
    v159 = v191[5];
    v151 = v191[6];
    v173 = (char *)v191[7];
    v150 = v191[8];
    v174 = (char *)v191[9];
    v149 = v191[10];
    v175 = (char *)v191[11];
    v148 = v191[12];
    v156 = v191[13];
    v129 = v170;
    v130 = JSONObject.subscript.getter(0x6D614E726566666FLL, 0xE900000000000065);
    v147 = JSONObject.string.getter(v130);
    v132 = v131;
    v133 = v129;
    v134 = v126;
    v97((uint64_t)v133, v59);
    v135 = (uint64_t)v171;
    JSONObject.subscript.getter(0xD000000000000010, 0x800000000030A940);
    v136 = v183;
    v137 = (uint64_t)v172;
    ((void (*)(char *, uint64_t, uint64_t))v177)(v172, v134, v183);
    ChannelSubscriptionOffer.ValueProposition.init(deserializing:using:)(v135, v137, (uint64_t *)&v188);
    v167 = 0;
    v138 = v136;
    LOBYTE(v136) = v160 & 1;
    v139 = v134;
    v140 = v132;
    LOBYTE(v132) = v178 & 1;
    v141 = v176 & 1;
    (*(void (**)(uint64_t, uint64_t))(v184 + 8))(v139, v138);
    v97((uint64_t)v192, v59);
    v142 = v169;
    v143 = (uint64_t)v182;
    *v169 = v168;
    v142[1] = v143;
    v144 = v185;
    v142[2] = v166;
    v142[3] = v144;
    result = v188;
    v142[4] = v164;
    v145 = v189;
    v146 = v190;
    v142[5] = v165;
    v142[6] = v163;
    v142[7] = (uint64_t)v181;
    v142[8] = v162;
    v142[9] = (uint64_t)v180;
    *((_BYTE *)v142 + 80) = v136;
    *(_DWORD *)((char *)v142 + 81) = *(_DWORD *)v187;
    *((_DWORD *)v142 + 21) = *(_DWORD *)&v187[3];
    v142[11] = v161;
    v142[12] = (uint64_t)v179;
    *((_BYTE *)v142 + 104) = v132;
    *((_BYTE *)v142 + 105) = v108 & 1;
    *((_BYTE *)v142 + 106) = v141;
    *((_BYTE *)v142 + 107) = v155;
    v142[14] = v154;
    v142[15] = v157;
    v142[16] = v153;
    v142[17] = v158;
    v142[18] = v152;
    v142[19] = v159;
    v142[20] = v151;
    v142[21] = (uint64_t)v173;
    v142[22] = v150;
    v142[23] = (uint64_t)v174;
    v142[24] = v149;
    v142[25] = (uint64_t)v175;
    v142[26] = v148;
    v142[27] = v156;
    v142[28] = v147;
    v142[29] = v140;
    *((__n128 *)v142 + 15) = result;
    v142[32] = v145;
    v142[33] = v146;
  }
  return result;
}

uint64_t sub_21150(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  Swift::String v14;
  Swift::Int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v24;

  v6 = type metadata accessor for JSONObject(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = JSONObject.subscript.getter(a1, a2);
  v11 = JSONObject.string.getter(v10);
  v13 = v12;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if (!v13)
  {
    v20 = type metadata accessor for JSONError(0);
    v21 = sub_1E468();
    swift_allocError(v20, v21, 0, 0);
    *v22 = a1;
    v22[1] = a2;
    v22[2] = a3;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v20 - 8) + 104))(v22, enum case for JSONError.missingProperty(_:), v20);
    v19 = swift_bridgeObjectRetain(a2);
    return swift_willThrow(v19);
  }
  swift_bridgeObjectRetain(v13);
  v14._countAndFlagsBits = v11;
  v14._object = v13;
  v15 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_372C00, v14);
  swift_bridgeObjectRelease(v13);
  if (v15)
  {
    v16 = type metadata accessor for JSONError(0);
    v17 = sub_1E468();
    swift_allocError(v16, v17, 0, 0);
    *v18 = v11;
    v18[1] = (uint64_t)v13;
    v18[2] = (uint64_t)&type metadata for ChannelSubscriptionOffer.Kind;
    v19 = (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(v18, enum case for JSONError.unknownCase(_:), v16);
    return swift_willThrow(v19);
  }
  return swift_bridgeObjectRelease(v13);
}

uint64_t ChannelSubscriptionOffer.LegalTexts.init(deserializing:using:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t result;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;

  v71 = a2;
  v5 = type metadata accessor for JSONObject(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = ((uint64_t (*)(void))__chkstk_darwin)();
  v70 = (char *)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v67 = (char *)&v58 - v10;
  v11 = __chkstk_darwin(v9);
  v64 = (char *)&v58 - v12;
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v58 - v14;
  v16 = __chkstk_darwin(v13);
  v18 = (char *)&v58 - v17;
  v19 = __chkstk_darwin(v16);
  v21 = (char *)&v58 - v20;
  __chkstk_darwin(v19);
  v23 = (char *)&v58 - v22;
  v24 = JSONObject.subscript.getter(0x6563697270, 0xE500000000000000);
  v25 = JSONObject.string.getter(v24);
  v68 = v26;
  v69 = v25;
  v27 = *(void (**)(char *, uint64_t))(v6 + 8);
  v27(v23, v5);
  v28 = JSONObject.subscript.getter(0x7265746E49796170, 0xEB000000006C6176);
  v29 = JSONObject.string.getter(v28);
  v65 = v30;
  v66 = v29;
  v27(v21, v5);
  v31 = JSONObject.subscript.getter(0x7275446C61697274, 0xED00006E6F697461);
  v32 = JSONObject.string.getter(v31);
  v62 = v33;
  v63 = v32;
  v27(v18, v5);
  v34 = JSONObject.subscript.getter(0x647261646E617473, 0xE800000000000000);
  v35 = JSONObject.string.getter(v34);
  v60 = v36;
  v61 = v35;
  v27(v15, v5);
  v37 = v64;
  v38 = JSONObject.subscript.getter(0x74726F6873, 0xE500000000000000);
  v39 = JSONObject.string.getter(v38);
  v58 = v40;
  v59 = v39;
  v27(v37, v5);
  v41 = v67;
  v42 = JSONObject.subscript.getter(0x6C65636E6163, 0xE600000000000000);
  v43 = JSONObject.string.getter(v42);
  v45 = v44;
  v27(v41, v5);
  v46 = v70;
  v47 = JSONObject.subscript.getter(0x746966656E6562, 0xE700000000000000);
  v48 = JSONObject.string.getter(v47);
  v50 = v49;
  v51 = type metadata accessor for JSONContext(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 8))(v71, v51);
  v27(a1, v5);
  result = ((uint64_t (*)(char *, uint64_t))v27)(v46, v5);
  v53 = v68;
  *a3 = v69;
  a3[1] = v53;
  v54 = v65;
  a3[2] = v66;
  a3[3] = v54;
  v55 = v62;
  a3[4] = v63;
  a3[5] = v55;
  v56 = v60;
  a3[6] = v61;
  a3[7] = v56;
  v57 = v58;
  a3[8] = v59;
  a3[9] = v57;
  a3[10] = v43;
  a3[11] = v45;
  a3[12] = v48;
  a3[13] = v50;
  return result;
}

uint64_t ChannelSubscriptionOffer.ValueProposition.init(deserializing:using:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v33 = a2;
  v5 = type metadata accessor for JSONObject(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v32 - v10;
  v12 = JSONObject.subscript.getter(0x6563697270, 0xE500000000000000);
  v13 = JSONObject.string.getter(v12);
  v15 = v14;
  v16 = *(void (**)(char *, uint64_t))(v6 + 8);
  v16(v11, v5);
  if (v15)
  {
    v17 = JSONObject.subscript.getter(0x726F466563697270, 0xEF79616C70736944);
    v18 = JSONObject.string.getter(v17);
    v20 = v19;
    v16(v9, v5);
    if (v20)
    {
      v21 = type metadata accessor for JSONContext(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v33, v21);
      result = ((uint64_t (*)(uint64_t, uint64_t))v16)(a1, v5);
      *a3 = v13;
      a3[1] = v15;
      a3[2] = v18;
      a3[3] = v20;
      return result;
    }
    v27 = type metadata accessor for JSONError(0);
    v28 = sub_1E468();
    swift_allocError(v27, v28, 0, 0);
    *v29 = 0x726F466563697270;
    v29[1] = 0xEF79616C70736944;
    v29[2] = &type metadata for ChannelSubscriptionOffer.ValueProposition;
    v30 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v27 - 8) + 104))(v29, enum case for JSONError.missingProperty(_:), v27);
    swift_willThrow(v30);
    swift_bridgeObjectRelease(v15);
  }
  else
  {
    v23 = type metadata accessor for JSONError(0);
    v24 = sub_1E468();
    swift_allocError(v23, v24, 0, 0);
    *v25 = 0x6563697270;
    v25[1] = 0xE500000000000000;
    v25[2] = &type metadata for ChannelSubscriptionOffer.ValueProposition;
    v26 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v23 - 8) + 104))(v25, enum case for JSONError.missingProperty(_:), v23);
    swift_willThrow(v26);
  }
  v31 = type metadata accessor for JSONContext(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 8))(v33, v31);
  return ((uint64_t (*)(uint64_t, uint64_t))v16)(a1, v5);
}

unint64_t sub_218E8()
{
  unint64_t result;

  result = qword_3B1818;
  if (!qword_3B1818)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ChannelSubscriptionOffer.Kind);
    atomic_store(result, (unint64_t *)&qword_3B1818);
  }
  return result;
}

double sub_2192C@<D0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  double result;

  *(_QWORD *)&result = ChannelSubscriptionOffer.init(deserializing:using:)(a1, a2, a3).n128_u64[0];
  return result;
}

uint64_t sub_21940@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return ChannelSubscriptionOffer.LegalTexts.init(deserializing:using:)(a1, a2, a3);
}

uint64_t sub_21954@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return ChannelSubscriptionOffer.ValueProposition.init(deserializing:using:)(a1, a2, a3);
}

uint64_t destroy for ChannelSubscriptionOffer(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[7]);
  swift_bridgeObjectRelease(a1[9]);
  swift_bridgeObjectRelease(a1[12]);
  swift_bridgeObjectRelease(a1[15]);
  swift_bridgeObjectRelease(a1[17]);
  swift_bridgeObjectRelease(a1[19]);
  swift_bridgeObjectRelease(a1[21]);
  swift_bridgeObjectRelease(a1[23]);
  swift_bridgeObjectRelease(a1[25]);
  swift_bridgeObjectRelease(a1[27]);
  swift_bridgeObjectRelease(a1[29]);
  swift_bridgeObjectRelease(a1[31]);
  return swift_bridgeObjectRelease(a1[33]);
}

uint64_t initializeWithCopy for ChannelSubscriptionOffer(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v19 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v19;
  v18 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v18;
  v17 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v17;
  v16 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v16;
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v15 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v15;
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  v4 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v4;
  v5 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v5;
  v6 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v6;
  v7 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = v7;
  v8 = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = v8;
  v9 = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = v9;
  v10 = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = v10;
  v11 = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 232) = v11;
  v12 = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 248) = v12;
  v14 = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 264) = v14;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v14);
  return a1;
}

uint64_t assignWithCopy for ChannelSubscriptionOffer(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v12 = *(_QWORD *)(a2 + 72);
  v13 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v14 = *(_QWORD *)(a2 + 96);
  v15 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_BYTE *)(a1 + 105) = *(_BYTE *)(a2 + 105);
  *(_BYTE *)(a1 + 106) = *(_BYTE *)(a2 + 106);
  *(_BYTE *)(a1 + 107) = *(_BYTE *)(a2 + 107);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  v16 = *(_QWORD *)(a2 + 120);
  v17 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  v18 = *(_QWORD *)(a2 + 136);
  v19 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 136) = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  v20 = *(_QWORD *)(a2 + 152);
  v21 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 152) = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  v22 = *(_QWORD *)(a2 + 168);
  v23 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 168) = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  v24 = *(_QWORD *)(a2 + 184);
  v25 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 184) = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v25);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  v26 = *(_QWORD *)(a2 + 200);
  v27 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 200) = v26;
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRelease(v27);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  v28 = *(_QWORD *)(a2 + 216);
  v29 = *(_QWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 216) = v28;
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRelease(v29);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  v30 = *(_QWORD *)(a2 + 232);
  v31 = *(_QWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 232) = v30;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease(v31);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  v32 = *(_QWORD *)(a2 + 248);
  v33 = *(_QWORD *)(a1 + 248);
  *(_QWORD *)(a1 + 248) = v32;
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRelease(v33);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  v34 = *(_QWORD *)(a2 + 264);
  v35 = *(_QWORD *)(a1 + 264);
  *(_QWORD *)(a1 + 264) = v34;
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRelease(v35);
  return a1;
}

void *__swift_memcpy272_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x110uLL);
}

uint64_t assignWithTake for ChannelSubscriptionOffer(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v10;
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(a2 + 72);
  v13 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v12;
  swift_bridgeObjectRelease(v13);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v14 = *(_QWORD *)(a2 + 96);
  v15 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v14;
  swift_bridgeObjectRelease(v15);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_BYTE *)(a1 + 105) = *(_BYTE *)(a2 + 105);
  *(_BYTE *)(a1 + 106) = *(_BYTE *)(a2 + 106);
  *(_BYTE *)(a1 + 107) = *(_BYTE *)(a2 + 107);
  v16 = *(_QWORD *)(a2 + 120);
  v17 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v16;
  swift_bridgeObjectRelease(v17);
  v18 = *(_QWORD *)(a2 + 136);
  v19 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v18;
  swift_bridgeObjectRelease(v19);
  v20 = *(_QWORD *)(a2 + 152);
  v21 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v20;
  swift_bridgeObjectRelease(v21);
  v22 = *(_QWORD *)(a2 + 168);
  v23 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = v22;
  swift_bridgeObjectRelease(v23);
  v24 = *(_QWORD *)(a2 + 184);
  v25 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = v24;
  swift_bridgeObjectRelease(v25);
  v26 = *(_QWORD *)(a2 + 200);
  v27 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = v26;
  swift_bridgeObjectRelease(v27);
  v28 = *(_QWORD *)(a2 + 216);
  v29 = *(_QWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = v28;
  swift_bridgeObjectRelease(v29);
  v30 = *(_QWORD *)(a2 + 232);
  v31 = *(_QWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 232) = v30;
  swift_bridgeObjectRelease(v31);
  v32 = *(_QWORD *)(a2 + 248);
  v33 = *(_QWORD *)(a1 + 248);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 248) = v32;
  swift_bridgeObjectRelease(v33);
  v34 = *(_QWORD *)(a2 + 264);
  v35 = *(_QWORD *)(a1 + 264);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 264) = v34;
  swift_bridgeObjectRelease(v35);
  return a1;
}

uint64_t getEnumTagSinglePayload for ChannelSubscriptionOffer(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 272))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ChannelSubscriptionOffer(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 264) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 272) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 272) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ChannelSubscriptionOffer()
{
  return &type metadata for ChannelSubscriptionOffer;
}

uint64_t storeEnumTagSinglePayload for ChannelSubscriptionOffer.Kind(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_22030 + 4 * byte_2EAD40[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_22050 + 4 * byte_2EAD45[v4]))();
}

_BYTE *sub_22030(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_22050(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_22058(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_22060(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_22068(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_22070(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ChannelSubscriptionOffer.Kind()
{
  return &type metadata for ChannelSubscriptionOffer.Kind;
}

uint64_t destroy for ChannelSubscriptionOffer.LegalTexts(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[7]);
  swift_bridgeObjectRelease(a1[9]);
  swift_bridgeObjectRelease(a1[11]);
  return swift_bridgeObjectRelease(a1[13]);
}

_QWORD *initializeWithCopy for ChannelSubscriptionOffer.LegalTexts(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  v8 = a2[11];
  a1[10] = a2[10];
  a1[11] = v8;
  v9 = a2[13];
  a1[12] = a2[12];
  a1[13] = v9;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  return a1;
}

_QWORD *assignWithCopy for ChannelSubscriptionOffer.LegalTexts(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  v8 = a2[5];
  v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[6] = a2[6];
  v10 = a2[7];
  v11 = a1[7];
  a1[7] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  a1[8] = a2[8];
  v12 = a2[9];
  v13 = a1[9];
  a1[9] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  a1[10] = a2[10];
  v14 = a2[11];
  v15 = a1[11];
  a1[11] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  a1[12] = a2[12];
  v16 = a2[13];
  v17 = a1[13];
  a1[13] = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  return a1;
}

__n128 __swift_memcpy112_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v5;
  return result;
}

_QWORD *assignWithTake for ChannelSubscriptionOffer.LegalTexts(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  v6 = a2[3];
  v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a2[5];
  v9 = a1[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease(v9);
  v10 = a2[7];
  v11 = a1[7];
  a1[6] = a2[6];
  a1[7] = v10;
  swift_bridgeObjectRelease(v11);
  v12 = a2[9];
  v13 = a1[9];
  a1[8] = a2[8];
  a1[9] = v12;
  swift_bridgeObjectRelease(v13);
  v14 = a2[11];
  v15 = a1[11];
  a1[10] = a2[10];
  a1[11] = v14;
  swift_bridgeObjectRelease(v15);
  v16 = a2[13];
  v17 = a1[13];
  a1[12] = a2[12];
  a1[13] = v16;
  swift_bridgeObjectRelease(v17);
  return a1;
}

uint64_t getEnumTagSinglePayload for ChannelSubscriptionOffer.LegalTexts(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 112))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ChannelSubscriptionOffer.LegalTexts(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 112) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 112) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ChannelSubscriptionOffer.LegalTexts()
{
  return &type metadata for ChannelSubscriptionOffer.LegalTexts;
}

uint64_t destroy for ChannelSubscriptionOffer.ValueProposition(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
}

_QWORD *initializeWithCopy for ChannelSubscriptionOffer.ValueProposition(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

_QWORD *assignWithCopy for ChannelSubscriptionOffer.ValueProposition(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

_QWORD *assignWithTake for ChannelSubscriptionOffer.ValueProposition(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  v6 = a2[3];
  v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for ChannelSubscriptionOffer.ValueProposition(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ChannelSubscriptionOffer.ValueProposition(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ChannelSubscriptionOffer.ValueProposition()
{
  return &type metadata for ChannelSubscriptionOffer.ValueProposition;
}

uint64_t dispatch thunk of LibraryRemovalControllerProtocol.removeAndUnfollowOptionsSheetAction(show:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

unint64_t static FetchUpNextEpisodesIntent.kind.getter()
{
  return 0xD000000000000019;
}

uint64_t ShowOffer.adamId.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t FetchUpNextEpisodesIntent.limit.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

void (__swiftcall *NSUserDefaults.Keys.rawValue.modify())()
{
  return FindOrCreateEpisodeOfferContentIDsIntentsIntentImplementation.init();
}

void sub_22610(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000019;
  a1[1] = 0x80000000002EAF30;
}

ValueMetadata *type metadata accessor for FetchUpNextEpisodesIntent()
{
  return &type metadata for FetchUpNextEpisodesIntent;
}

uint64_t type metadata accessor for PageExtension()
{
  return objc_opt_self(_TtC8ShelfKit13PageExtension);
}

uint64_t method lookup function for PageExtension(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for PageExtension);
}

uint64_t static Localization.decimal(_:_:_:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  id v11;
  id v12;
  Class isa;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v18;

  v6 = type metadata accessor for Locale(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1)
    return 0;
  v10 = objc_allocWithZone((Class)NSNumberFormatter);
  v11 = a1;
  v12 = objc_msgSend(v10, "init");
  objc_msgSend(v12, "setNumberStyle:", 1);
  static Locale.current.getter(objc_msgSend(v12, "setFormatterBehavior:", 1040));
  isa = Locale._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  objc_msgSend(v12, "setLocale:", isa);

  objc_msgSend(v12, "setMinimumFractionDigits:", a2);
  objc_msgSend(v12, "setMaximumFractionDigits:", a3);
  v14 = objc_msgSend(v12, "stringFromNumber:", v11);
  if (!v14)
  {

    return 0;
  }
  v15 = v14;
  v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);

  return v16;
}

uint64_t static Localization.duration(_:)(double a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  if (a1 <= 0.0)
    return 0;
  v1 = objc_msgSend((id)objc_opt_self(NSString), "prettyShortStringWithDuration:abbreviated:", 0, a1);
  if (!v1)
    return 0;
  v2 = v1;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

uint64_t static Localization.duration(_:abbreviated:)(char a1, double a2)
{
  id v2;
  void *v3;
  uint64_t v4;

  if (a2 <= 0.0)
    return 0;
  v2 = objc_msgSend((id)objc_opt_self(NSString), "prettyShortStringWithDuration:abbreviated:", a1 & 1, a2);
  if (!v2)
    return 0;
  v3 = v2;
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  return v4;
}

void static Localization.fileSize(_:)(void *a1)
{
  id v1;
  Class v2;
  id v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  double v9;
  double v10;
  unint64_t v11;
  double v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  id v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  void *object;
  uint64_t v28;
  uint64_t v29;
  uint64_t countAndFlagsBits;
  void *v31;
  uint64_t v32;
  int *v33;
  void *v34;
  uint64_t v35;
  double v36;
  id v37;
  id v38;
  void *v39;
  id v40;
  Class isa;
  id v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  Swift::String v47;
  Swift::String v48;
  Swift::String v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;

  v5 = type metadata accessor for Locale(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    objc_msgSend(a1, "doubleValue");
    v10 = v9;
    if (qword_3B0028 != -1)
LABEL_23:
      swift_once(&qword_3B0028, sub_22F0C);
    v11 = *(_QWORD *)((char *)off_3B18B8[0] + (unint64_t)&dword_10);
    if (v11)
    {
      v12 = *(double *)((char *)off_3B18B8[0] + (unint64_t)&stru_20);
      if (v12 <= v10)
      {
        v14 = 0;
        goto LABEL_15;
      }
      if (v11 != 1)
      {
        v13 = 5;
        while (1)
        {
          v14 = v13 - 4;
          v12 = *(double *)&off_3B18B8[0][2 * v13];
          if (v12 <= v10)
            break;
          v15 = v13 - 3;
          if (__OFADD__(v14, 1))
          {
            __break(1u);
            goto LABEL_23;
          }
          ++v13;
          if (v15 == v11)
            goto LABEL_10;
        }
LABEL_15:
        if (v14 >= v11)
        {
          __break(1u);
        }
        else if (qword_3B0030 == -1)
        {
LABEL_17:
          if (v14 < *(_QWORD *)((char *)off_3B18C0[0] + (unint64_t)&dword_10))
          {
            v33 = &off_3B18C0[0][4 * v14];
            v35 = *((_QWORD *)v33 + 4);
            v34 = (void *)*((_QWORD *)v33 + 5);
            v36 = round(v10 / v12 * 10.0) / 10.0;
            v37 = objc_allocWithZone((Class)NSNumber);
            swift_bridgeObjectRetain(v34);
            v38 = objc_msgSend(v37, "initWithDouble:", v36);
            if (!v38)
            {
LABEL_30:
              __break(1u);
              return;
            }
            v39 = v38;
            v40 = objc_allocWithZone((Class)NSNumberFormatter);
            v2 = v39;
            v3 = objc_msgSend(v40, "init");
            objc_msgSend(v3, "setNumberStyle:", 1);
            static Locale.current.getter(objc_msgSend(v3, "setFormatterBehavior:", 1040));
            isa = Locale._bridgeToObjectiveC()().super.isa;
            (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
            objc_msgSend(v3, "setLocale:", isa);

            objc_msgSend(v3, "setMinimumFractionDigits:", 0);
            objc_msgSend(v3, "setMaximumFractionDigits:", 3);
            v42 = objc_msgSend(v3, "stringFromNumber:", v2);
            if (v42)
            {
              v43 = v42;
              v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
              v46 = v45;

              v47._countAndFlagsBits = v35;
              v47._object = v34;
              v48._countAndFlagsBits = 0;
              v48._object = (void *)0xE000000000000000;
              v49 = PFLocalizedString(_:comment:)(v47, v48);
              object = v49._object;
              swift_bridgeObjectRelease(v34);
              v50 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8E10);
              v51 = swift_allocObject(v50, 72, 7);
              *(_OWORD *)(v51 + 16) = xmmword_2EA0D0;
              *(_QWORD *)(v51 + 56) = &type metadata for String;
              *(_QWORD *)(v51 + 64) = sub_22F20();
              *(_QWORD *)(v51 + 32) = v44;
              *(_QWORD *)(v51 + 40) = v46;
              countAndFlagsBits = v49._countAndFlagsBits;
              v31 = v49._object;
              v32 = v51;
              goto LABEL_21;
            }
LABEL_29:

            goto LABEL_30;
          }
          __break(1u);
          goto LABEL_27;
        }
        v53 = v12;
        swift_once(&qword_3B0030, sub_22F64);
        v12 = v53;
        goto LABEL_17;
      }
    }
LABEL_10:
    v16 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithDouble:", v10);
    if (!v16)
    {
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    v17 = v16;
    v18 = objc_allocWithZone((Class)NSNumberFormatter);
    v14 = v17;
    v1 = objc_msgSend(v18, "init");
    objc_msgSend(v1, "setNumberStyle:", 1);
    static Locale.current.getter(objc_msgSend(v1, "setFormatterBehavior:", 1040));
    v2 = Locale._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    objc_msgSend(v1, "setLocale:", v2);

    objc_msgSend(v1, "setMinimumFractionDigits:", 0);
    objc_msgSend(v1, "setMaximumFractionDigits:", 3);
    v19 = objc_msgSend(v1, "stringFromNumber:", v14);
    if (v19)
    {
      v20 = v19;
      v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
      v23 = v22;

      v24._object = (void *)0x800000000030A980;
      v24._countAndFlagsBits = 0xD000000000000012;
      v25._countAndFlagsBits = 0;
      v25._object = (void *)0xE000000000000000;
      v26 = PFLocalizedString(_:comment:)(v24, v25);
      object = v26._object;
      v28 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8E10);
      v29 = swift_allocObject(v28, 72, 7);
      *(_OWORD *)(v29 + 16) = xmmword_2EA0D0;
      *(_QWORD *)(v29 + 56) = &type metadata for String;
      *(_QWORD *)(v29 + 64) = sub_22F20();
      *(_QWORD *)(v29 + 32) = v21;
      *(_QWORD *)(v29 + 40) = v23;
      countAndFlagsBits = v26._countAndFlagsBits;
      v31 = v26._object;
      v32 = v29;
LABEL_21:
      String.init(format:_:)(countAndFlagsBits, v31, v32);
      swift_bridgeObjectRelease(object);
      return;
    }
LABEL_27:

    goto LABEL_28;
  }
}

uint64_t static Localization.timeRemaining(_:)(double a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  if (a1 <= 0.0)
    return 0;
  v1 = objc_msgSend((id)objc_opt_self(NSString), "prettyShortStringWithDuration:includeTimeRemainingPhrase:abbreviated:", 1, 0, a1);
  if (!v1)
    return 0;
  v2 = v1;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

uint64_t static Localization.timeRemaining(_:includeTimeRemainingPhrase:abbreviated:)(char a1, char a2, double a3)
{
  id v3;
  void *v4;
  uint64_t v5;

  if (a3 <= 0.0)
    return 0;
  v3 = objc_msgSend((id)objc_opt_self(NSString), "prettyShortStringWithDuration:includeTimeRemainingPhrase:abbreviated:", a1 & 1, a2 & 1, a3);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);

  return v5;
}

void sub_22F0C()
{
  off_3B18B8[0] = (int *)&off_3730C8;
}

unint64_t sub_22F20()
{
  unint64_t result;

  result = qword_3B18C8;
  if (!qword_3B18C8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String);
    atomic_store(result, (unint64_t *)&qword_3B18C8);
  }
  return result;
}

void sub_22F64()
{
  off_3B18C0[0] = (int *)&off_373108;
}

Swift::String __swiftcall localizedStringReferencingWiFi(_:comment:)(Swift::String _, Swift::String comment)
{
  void *object;
  uint64_t countAndFlagsBits;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  void *v12;
  Swift::String result;
  unint64_t v14;

  object = comment._object;
  countAndFlagsBits = comment._countAndFlagsBits;
  v4 = _._object;
  v5 = _._countAndFlagsBits;
  if (objc_msgSend((id)objc_opt_self(ASKMobileGestalt), "wapiCapability"))
    v6 = 1312902231;
  else
    v6 = 1229343063;
  v14 = v6 & 0xFFFF0000FFFFFFFFLL | 0x5F00000000;
  v7._countAndFlagsBits = v5;
  v7._object = v4;
  String.append(_:)(v7);
  v8._countAndFlagsBits = v14;
  v8._object = (void *)0xE500000000000000;
  v9._countAndFlagsBits = countAndFlagsBits;
  v9._object = object;
  v10 = PFLocalizedString(_:comment:)(v8, v9);
  swift_bridgeObjectRelease(0xE500000000000000);
  v11 = v10._countAndFlagsBits;
  v12 = v10._object;
  result._object = v12;
  result._countAndFlagsBits = v11;
  return result;
}

ValueMetadata *type metadata accessor for Localization()
{
  return &type metadata for Localization;
}

UIMenuElementState __swiftcall UIMenuElementState.init(from:)(ShelfKit::ActionMenu::ItemState from)
{
  return (unint64_t)((from & 1) == 0);
}

uint64_t ThinClientBookmarkEpisodeIntentImplementation.perform(_:objectGraph:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_task_switch(sub_23064, 0, 0);
}

uint64_t sub_23064()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t **v2;

  v1 = BookmarkEpisodeIntent.episodeIdentifiers.getter();
  v0[4] = v1;
  v2 = (uint64_t **)swift_task_alloc(dword_3BE8FC);
  v0[5] = (uint64_t)v2;
  *v2 = v0;
  v2[1] = (uint64_t *)sub_230C8;
  return ThinClientToggleBookmarkEpisodeHelper.toggle(to:episodeIdentifiers:objectGraph:)(1, v1, v0[3]);
}

uint64_t sub_230C8(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(*v2 + 40);
  v5 = *v2;
  *(_QWORD *)(v5 + 48) = v1;
  swift_task_dealloc(v4);
  if (v1)
    return swift_task_switch(sub_23150, 0, 0);
  swift_bridgeObjectRelease(*(_QWORD *)(v5 + 32));
  return (*(uint64_t (**)(_QWORD))(v5 + 8))(a1 & 1);
}

uint64_t sub_23150()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_23188()
{
  unint64_t result;

  result = qword_3B18D8;
  if (!qword_3B18D8)
  {
    type metadata accessor for BookmarkEpisodeIntent(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for BookmarkEpisodeIntent);
    atomic_store(result, (unint64_t *)&qword_3B18D8);
  }
  return result;
}

uint64_t sub_231D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return swift_task_switch(sub_231F0, 0, 0);
}

uint64_t sub_231F0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t **v2;

  v1 = BookmarkEpisodeIntent.episodeIdentifiers.getter();
  v0[5] = v1;
  v2 = (uint64_t **)swift_task_alloc(dword_3BE8FC);
  v0[6] = (uint64_t)v2;
  *v2 = v0;
  v2[1] = (uint64_t *)sub_23254;
  return ThinClientToggleBookmarkEpisodeHelper.toggle(to:episodeIdentifiers:objectGraph:)(1, v1, v0[4]);
}

uint64_t sub_23254(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v7;

  v4 = *(_QWORD *)(*v2 + 48);
  v5 = *v2;
  *(_QWORD *)(v5 + 56) = v1;
  swift_task_dealloc(v4);
  if (v1)
    return swift_task_switch(sub_232E8, 0, 0);
  v7 = *(_BYTE **)(v5 + 16);
  swift_bridgeObjectRelease(*(_QWORD *)(v5 + 40));
  *v7 = a1 & 1;
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_232E8()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

ValueMetadata *type metadata accessor for ThinClientBookmarkEpisodeIntentImplementation()
{
  return &type metadata for ThinClientBookmarkEpisodeIntentImplementation;
}

uint64_t UIAction.init(wrapping:asPartOf:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v5 = a1[3];
  v6 = a1[4];
  v7 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)a1, v5);
  __chkstk_darwin(v7);
  v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v10 + 16))(v9);
  v11 = sub_235BC((uint64_t)v9, a2, v2, v5, v6);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v11;
}

uint64_t sub_233D4(void *a1, uint64_t a2, uint64_t a3)
{
  id v6;
  id v7;
  unint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD v21[2];
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  BaseObjectGraph.injectIfAvailable<A>(_:)(&type metadata for ActionOrigin, &type metadata for ActionOrigin);
  if (*((_QWORD *)&v18 + 1) == 1)
  {
    v6 = objc_msgSend(a1, "sender");
    if (v6)
    {
      v7 = v6;
      _bridgeAnyObjectToAny(_:)(v21);
      swift_unknownObjectRelease(v7);
    }
    else
    {
      memset(v21, 0, sizeof(v21));
    }
    sub_236BC((uint64_t)v21, (uint64_t)&v22);
    if (*((_QWORD *)&v23 + 1))
    {
      v8 = sub_237A8();
      if ((swift_dynamicCast(&v16, &v22, (char *)&type metadata for Any + 8, v8, 6) & 1) != 0)
      {
        *((_QWORD *)&v23 + 1) = v8;
        *(_QWORD *)&v22 = v16;
        v9 = v16;
        v10 = UIResponder.firstViewInResponderChain.getter();

LABEL_11:
        v24 = v10;
        sub_1459C((uint64_t)v21, (uint64_t *)&unk_3BC540);
        sub_1459C((uint64_t)&v17, &qword_3B18E8);
        goto LABEL_12;
      }
    }
    else
    {
      sub_1459C((uint64_t)&v22, (uint64_t *)&unk_3BC540);
    }
    sub_236BC((uint64_t)v21, (uint64_t)&v22);
    v10 = 0;
    goto LABEL_11;
  }
  v22 = v17;
  v23 = v18;
  v24 = v19;
LABEL_12:
  type metadata accessor for ActionRunnerOptions(0);
  v11 = swift_retain(a2);
  v12 = BaseObjectGraph.__allocating_init(_:)(v11);
  sub_23704((uint64_t)&v22, (uint64_t)&v17);
  v13 = _s8ShelfKit19ActionRunnerOptionsC04withC6OriginyACXDAA0cG0VSgF_0((uint64_t)&v17);
  swift_release(v12);
  sub_1459C((uint64_t)&v17, &qword_3B18E8);
  sub_150C8(a3, (uint64_t)&v17);
  v20 = v13;
  swift_retain(v13);
  v14 = ActionPerformer.callAsFunction()();
  swift_release(v13);
  swift_release(v14);
  sub_23740(&v17);
  return sub_23774((uint64_t)&v22);
}

uint64_t sub_235BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *boxed_opaque_existential_2Tm;
  uint64_t v10;
  uint64_t v11;
  __int128 v13[2];
  _QWORD v14[5];

  v14[3] = a4;
  v14[4] = a5;
  boxed_opaque_existential_2Tm = __swift_allocate_boxed_opaque_existential_2Tm(v14);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(boxed_opaque_existential_2Tm, a1, a4);
  sub_150C8((uint64_t)v14, (uint64_t)v13);
  v10 = swift_allocObject(&unk_377D10, 72, 7);
  *(_QWORD *)(v10 + 16) = a2;
  sub_F4D8(v13, v10 + 24);
  *(_QWORD *)(v10 + 64) = a3;
  v11 = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(0, 0xE000000000000000, 0, 0, 0, 0, 0, 0, 0, 0, 0, sub_23810, v10);
  __swift_destroy_boxed_opaque_existential_1(v14);
  return v11;
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t sub_236BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3BC540);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23704(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for ActionOrigin(a2, a1);
  return a2;
}

_QWORD *sub_23740(_QWORD *a1)
{
  destroy for ActionPerformer(a1);
  return a1;
}

uint64_t sub_23774(uint64_t a1)
{
  destroy for ActionOrigin(a1);
  return a1;
}

unint64_t sub_237A8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_3B18F0;
  if (!qword_3B18F0)
  {
    v1 = objc_opt_self(UIResponder);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_3B18F0);
  }
  return result;
}

uint64_t sub_237E4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  __swift_destroy_boxed_opaque_existential_1((_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_23810(void *a1)
{
  uint64_t v1;

  return sub_233D4(a1, *(_QWORD *)(v1 + 16), v1 + 24);
}

uint64_t UpsellDismissingAction.__allocating_init(uniqueId:title:presentationStyle:actionMetrics:impressionMetrics:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v15;

  v15 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  UpsellDismissingAction.init(uniqueId:title:presentationStyle:actionMetrics:impressionMetrics:)(a1, a2, a3, a4, a5, a6, a7);
  return v15;
}

uint64_t UpsellDismissingAction.init(uniqueId:title:presentationStyle:actionMetrics:impressionMetrics:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  void (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;

  v8 = v7;
  v33 = a7;
  v34 = a3;
  v36 = a5;
  v35 = a4;
  v32 = a1;
  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v15);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for ActionMetrics(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v32 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = *(void (**)(char *, uint64_t, uint64_t))(v19 + 16);
  v37 = a6;
  v23 = a6;
  v24 = v33;
  v22(v21, v23, v18);
  v25 = sub_23A70(v24, (uint64_t)v17);
  if (a2)
  {
    v26 = v32;
  }
  else
  {
    UUID.init()(v25);
    v27 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
    v28 = v11;
    v26 = v27;
    a2 = v29;
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v28);
  }
  *(_QWORD *)(v8 + 16) = v26;
  *(_QWORD *)(v8 + 24) = a2;
  v30 = v35;
  *(_QWORD *)(v8 + 32) = v34;
  *(_QWORD *)(v8 + 40) = v30;
  *(_BYTE *)(v8 + 48) = v36;
  (*(void (**)(uint64_t, char *, uint64_t))(v19 + 32))(v8 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v21, v18);
  sub_23AB8((uint64_t)v17, v8 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics);
  sub_23B00(v24);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v37, v18);
  return v8;
}

uint64_t sub_23A70(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23AB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_23B00(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t RefollowAllRecentlyUnfollowedShowsAction.__allocating_init(deserializing:using:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v5 = type metadata accessor for JSONContext(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for JSONObject(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  v13 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v17 = a1;
  v13(v12, a1, v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a2, v5);
  v14 = Action.init(deserializing:using:)(v12, (uint64_t)v8);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a2, v5);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v17, v9);
  return v14;
}

uint64_t RefollowAllRecentlyUnfollowedShowsAction.init(deserializing:using:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v4 = type metadata accessor for JSONContext(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for JSONObject(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v16 = a1;
  v12(v11, a1, v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
  v13 = Action.init(deserializing:using:)(v11, (uint64_t)v7);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a2, v4);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v16, v8);
  return v13;
}

uint64_t RefollowAllRecentlyUnfollowedShowsAction.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  v1 = v0 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics;
  v2 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_23B00(v0 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics);
  return v0;
}

uint64_t RefollowAllRecentlyUnfollowedShowsAction.__deallocating_deinit()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  v1 = (char *)v0 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics;
  v2 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_23B00((uint64_t)v0 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_23E8C()
{
  return type metadata accessor for UpsellDismissingAction(0);
}

uint64_t type metadata accessor for UpsellDismissingAction(uint64_t a1)
{
  uint64_t result;

  result = qword_3B1920;
  if (!qword_3B1920)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for UpsellDismissingAction);
  return result;
}

uint64_t sub_23ED0(uint64_t a1)
{
  _BYTE v2[8];

  return swift_updateClassMetadata2(a1, 256, 0, v2, a1 + 160);
}

ShelfKit::CategorySection::TitleStyle_optional __swiftcall CategorySection.TitleStyle.init(rawValue:)(Swift::String rawValue)
{
  void *object;
  Swift::String v2;
  Swift::Int v3;
  ShelfKit::CategorySection::TitleStyle_optional v4;

  object = rawValue._object;
  v2._countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_373168, v2);
  swift_bridgeObjectRelease(object);
  if (v3 == 1)
    v4.value = ShelfKit_CategorySection_TitleStyle_secondary;
  else
    v4.value = ShelfKit_CategorySection_TitleStyle_unknownDefault;
  if (v3)
    return v4;
  else
    return 0;
}

uint64_t CategorySection.TitleStyle.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0x7261646E6F636573;
  else
    return 0x7972616D697270;
}

uint64_t sub_23F90(_BYTE *a1, _BYTE *a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v8;

  v2 = *a1 == 0;
  if (*a1)
    v3 = 0x7261646E6F636573;
  else
    v3 = 0x7972616D697270;
  if (v2)
    v4 = 0xE700000000000000;
  else
    v4 = 0xE900000000000079;
  if (*a2)
    v5 = 0x7261646E6F636573;
  else
    v5 = 0x7972616D697270;
  if (*a2)
    v6 = 0xE900000000000079;
  else
    v6 = 0xE700000000000000;
  if (v3 == v5 && v4 == v6)
  {
    v8 = 1;
    v6 = v4;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v8 & 1;
}

Swift::Int sub_2403C()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  if (v1)
    v2 = 0x7261646E6F636573;
  else
    v2 = 0x7972616D697270;
  if (v1)
    v3 = 0xE900000000000079;
  else
    v3 = 0xE700000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_240C0(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0x7261646E6F636573;
  else
    v2 = 0x7972616D697270;
  if (*v1)
    v3 = 0xE900000000000079;
  else
    v3 = 0xE700000000000000;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_24120()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  if (v1)
    v2 = 0x7261646E6F636573;
  else
    v2 = 0x7972616D697270;
  if (v1)
    v3 = 0xE900000000000079;
  else
    v3 = 0xE700000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_241A0@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;
  char v7;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_373168, v3);
  result = swift_bridgeObjectRelease(v4);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

void sub_241FC(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x7972616D697270;
  if (*v1)
    v2 = 0x7261646E6F636573;
  v3 = 0xE700000000000000;
  if (*v1)
    v3 = 0xE900000000000079;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_24240(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_26750();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_2429C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_26750();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t EpisodeUpsellBannerProvider.presentationType.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t CategorySection.description.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for CategorySection(0);
  return sub_267BC(v1 + *(int *)(v3 + 24), a1, &qword_3B19E8);
}

uint64_t type metadata accessor for CategorySection(uint64_t a1)
{
  uint64_t result;

  result = qword_3B1AC0;
  if (!qword_3B1AC0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CategorySection);
  return result;
}

uint64_t CategorySection.categories.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for CategorySection(0);
  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + *(int *)(v1 + 28)));
}

uint64_t CategorySection.init(title:titleStyle:description:categories:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t result;

  *(_QWORD *)a6 = a1;
  *(_QWORD *)(a6 + 8) = a2;
  *(_BYTE *)(a6 + 16) = a3 & 1;
  v9 = type metadata accessor for CategorySection(0);
  result = sub_243E4(a4, a6 + *(int *)(v9 + 24));
  *(_QWORD *)(a6 + *(int *)(v9 + 28)) = a5;
  return result;
}

uint64_t sub_243E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B19E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t CategorySection.hash(into:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v2 = v1;
  v4 = type metadata accessor for AttributedString(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B19E8);
  __chkstk_darwin(v8);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *v2;
  v12 = v2[1];
  swift_bridgeObjectRetain(v12);
  String.hash(into:)(a1, v11, v12);
  swift_bridgeObjectRelease(v12);
  if (*((_BYTE *)v2 + 16))
    v13 = 0x7261646E6F636573;
  else
    v13 = 0x7972616D697270;
  if (*((_BYTE *)v2 + 16))
    v14 = 0xE900000000000079;
  else
    v14 = 0xE700000000000000;
  String.hash(into:)(a1, v13, v14);
  swift_bridgeObjectRelease(v14);
  v15 = type metadata accessor for CategorySection(0);
  sub_267BC((uint64_t)v2 + *(int *)(v15 + 24), (uint64_t)v10, &qword_3B19E8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
    Hasher._combine(_:)(1u);
    v16 = sub_F1C0(&qword_3B19F0, (void (*)(uint64_t))&type metadata accessor for AttributedString, (uint64_t)&protocol conformance descriptor for AttributedString);
    dispatch thunk of Hashable.hash(into:)(a1, v4, v16);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  v17 = *(uint64_t *)((char *)v2 + *(int *)(v15 + 28));
  swift_bridgeObjectRetain(v17);
  sub_2522C(a1, v17);
  return swift_bridgeObjectRelease(v17);
}

BOOL static PreviewingPresentationHint.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int PreviewingPresentationHint.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void PreviewingPresentationHint.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_246AC()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_246EC()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_24718 + 4 * byte_2EB0C8[*v0]))(0x656C746974, 0xE500000000000000);
}

uint64_t sub_24718()
{
  return 0x797453656C746974;
}

uint64_t sub_24734()
{
  return 0x7470697263736564;
}

uint64_t sub_24754()
{
  return 0x69726F6765746163;
}

uint64_t sub_24774@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_26578(a1, a2);
  *a3 = result;
  return result;
}

void sub_24798(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_247A4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_25828();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_247CC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_25828();
  return CodingKey.debugDescription.getter(a1, v2);
}

Swift::Int CategorySection.hashValue.getter()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  CategorySection.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int sub_24834()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  CategorySection.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t CategorySection.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v19[16];
  uint64_t v20;
  _BYTE v21[2];
  char v22;
  char v23;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B19F8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v19[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = a1[3];
  v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  v11 = sub_25828();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for CategorySection.CodingKeys, &type metadata for CategorySection.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  v23 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, &v23, v5);
  if (!v2)
  {
    v22 = *((_BYTE *)v3 + 16);
    v21[1] = 1;
    sub_2586C();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v22);
    v14 = type metadata accessor for CategorySection(0);
    v15 = (uint64_t)v3 + *(int *)(v14 + 24);
    v21[0] = 2;
    v16 = type metadata accessor for AttributedString(0);
    v17 = sub_F1C0(&qword_3B1A10, (void (*)(uint64_t))&type metadata accessor for AttributedString, (uint64_t)&protocol conformance descriptor for AttributedString);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v15, v21, v5, v16, v17);
    v20 = *(uint64_t *)((char *)v3 + *(int *)(v14 + 28));
    v19[15] = 3;
    __swift_instantiateConcreteTypeFromMangledName(&qword_3B1A18);
    sub_258F4(&qword_3B1A20, &qword_3B1A28, (uint64_t)&protocol conformance descriptor for Category, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v20);
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t CategorySection.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  char v27;
  _BYTE v28[2];
  uint64_t v29;

  v23 = a2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B19E8);
  __chkstk_darwin(v4);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B1A30);
  v7 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for CategorySection(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v13 = a1[4];
  v25 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v14);
  v15 = sub_25828();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for CategorySection.CodingKeys, &type metadata for CategorySection.CodingKeys, v15, v14, v13);
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1(v25);
  v16 = v7;
  BYTE1(v29) = 0;
  v17 = v24;
  *(_QWORD *)v12 = KeyedDecodingContainer.decode(_:forKey:)((char *)&v29 + 1, v24);
  *((_QWORD *)v12 + 1) = v18;
  v28[1] = 1;
  sub_258B0();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v29, &type metadata for CategorySection.TitleStyle);
  v12[16] = v29;
  v19 = type metadata accessor for AttributedString(0);
  v28[0] = 2;
  v20 = sub_F1C0(&qword_3B1A40, (void (*)(uint64_t))&type metadata accessor for AttributedString, (uint64_t)&protocol conformance descriptor for AttributedString);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v19, v28, v17, v19, v20);
  sub_243E4((uint64_t)v6, (uint64_t)&v12[*(int *)(v10 + 24)]);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B1A18);
  v27 = 3;
  sub_258F4(&qword_3B1A48, &qword_3B1A50, (uint64_t)&protocol conformance descriptor for Category, (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v26, v21);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v9, v17);
  *(_QWORD *)&v12[*(int *)(v10 + 28)] = v26;
  sub_14510((uint64_t)v12, v23, type metadata accessor for CategorySection);
  __swift_destroy_boxed_opaque_existential_1(v25);
  return sub_145D8((uint64_t)v12, type metadata accessor for CategorySection);
}

uint64_t sub_24DB8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return CategorySection.init(from:)(a1, a2);
}

uint64_t sub_24DCC(_QWORD *a1)
{
  return CategorySection.encode(to:)(a1);
}

uint64_t sub_24DE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return sub_45E1C(a1, a2, a3);
}

void sub_24DF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  Swift::UInt v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t v18;
  Swift::UInt v19;
  char *v20;
  uint64_t v21;
  char *v22;
  void (*v23)(char *, uint64_t);
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  Swift::UInt v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  char *v34;
  uint64_t v35;

  v4 = type metadata accessor for Glyph(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v34 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3BC5B0);
  __chkstk_darwin(v7);
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (int *)type metadata accessor for TabMenu.Item(0);
  v11 = *((_QWORD *)v10 - 1);
  __chkstk_darwin(v10);
  v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v14);
  if (v14)
  {
    v15 = a2 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    v35 = *(_QWORD *)(v11 + 72);
    v33 = v10;
    do
    {
      sub_14510(v15, (uint64_t)v13, type metadata accessor for TabMenu.Item);
      v16 = sub_F1C0(&qword_3B1B28, (void (*)(uint64_t))&type metadata accessor for Glyph, (uint64_t)&protocol conformance descriptor for Glyph);
      dispatch thunk of Hashable.hash(into:)(a1, v4, v16);
      sub_267BC((uint64_t)&v13[v10[5]], (uint64_t)v9, (uint64_t *)&unk_3BC5B0);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v9, 1, v4) == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        v17 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
        v18 = v15;
        v19 = v14;
        v20 = v9;
        v21 = v5;
        v22 = v34;
        v17(v34, v20, v4);
        Hasher._combine(_:)(1u);
        dispatch thunk of Hashable.hash(into:)(a1, v4, v16);
        v23 = *(void (**)(char *, uint64_t))(v21 + 8);
        v24 = v22;
        v5 = v21;
        v9 = v20;
        v14 = v19;
        v15 = v18;
        v10 = v33;
        v23(v24, v4);
      }
      v25 = &v13[v10[6]];
      v26 = *(_QWORD *)v25;
      v27 = *((_QWORD *)v25 + 1);
      swift_bridgeObjectRetain();
      String.hash(into:)(a1, v26, v27);
      swift_bridgeObjectRelease();
      v28 = *(_QWORD **)&v13[v10[7]];
      switch((unint64_t)v28)
      {
        case 1uLL:
          v29 = 0;
          goto LABEL_26;
        case 2uLL:
          v29 = 1;
          goto LABEL_26;
        case 3uLL:
          v29 = 2;
          goto LABEL_26;
        case 4uLL:
          v29 = 3;
          goto LABEL_26;
        case 5uLL:
          v29 = 4;
          goto LABEL_26;
        case 6uLL:
          v29 = 5;
          goto LABEL_26;
        case 7uLL:
          v29 = 7;
          goto LABEL_26;
        case 8uLL:
          v29 = 8;
          goto LABEL_26;
        case 9uLL:
          v29 = 9;
          goto LABEL_26;
        case 0xAuLL:
          v29 = 10;
          goto LABEL_26;
        case 0xBuLL:
          v29 = 11;
          goto LABEL_26;
        case 0xCuLL:
          v29 = 12;
          goto LABEL_26;
        case 0xDuLL:
          v29 = 13;
          goto LABEL_26;
        case 0xEuLL:
          v29 = 14;
          goto LABEL_26;
        case 0xFuLL:
          v29 = 15;
          goto LABEL_26;
        case 0x10uLL:
          v29 = 16;
          goto LABEL_26;
        case 0x11uLL:
          v29 = 17;
LABEL_26:
          Hasher._combine(_:)(v29);
          break;
        default:
          Hasher._combine(_:)(6uLL);
          if (v28)
          {
            Hasher._combine(_:)(1u);
            v30 = v28[3];
            v32 = v28[2];
            sub_26794((uint64_t)v28);
            swift_bridgeObjectRetain();
            String.hash(into:)(a1, v32, v30);
            swift_bridgeObjectRelease();
            v31 = v28[5];
            v32 = v28[4];
            swift_bridgeObjectRetain();
            String.hash(into:)(a1, v32, v31);
            swift_bridgeObjectRelease();
            Hasher._combine(_:)(*(_QWORD *)((char *)v28 + OBJC_IVAR____TtC8ShelfKit13StationDetail_episodeCount));
            Hasher._combine(_:)(*(_QWORD *)((char *)v28 + OBJC_IVAR____TtC8ShelfKit13StationDetail_unplayedCount));
            sub_267A8((uint64_t)v28);
          }
          else
          {
            Hasher._combine(_:)(0);
            sub_267A8(0);
            sub_267A8(0);
          }
          break;
      }
      Hasher._combine(_:)(v13[v10[8]]);
      Hasher._combine(_:)(v13[v10[9]]);
      Hasher._combine(_:)(v13[v10[10]]);
      Hasher._combine(_:)(v13[v10[11]]);
      Hasher._combine(_:)(v13[v10[12]]);
      sub_145D8((uint64_t)v13, type metadata accessor for TabMenu.Item);
      v15 += v35;
      --v14;
    }
    while (v14);
  }
}

void sub_2522C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  Swift::UInt v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = type metadata accessor for ArtworkModel(0);
  v20 = *(_QWORD *)(v4 - 8);
  v21 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
  __chkstk_darwin(v7);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for Category(0);
  v10 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v13);
  if (v13)
  {
    v14 = a2 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    v15 = *(_QWORD *)(v10 + 72);
    do
    {
      sub_14510(v14, (uint64_t)v12, type metadata accessor for Category);
      Hasher._combine(_:)(*(_QWORD *)v12);
      v16 = *((_QWORD *)v12 + 1);
      v17 = *((_QWORD *)v12 + 2);
      swift_bridgeObjectRetain(v17);
      String.hash(into:)(a1, v16, v17);
      swift_bridgeObjectRelease(v17);
      Hasher._combine(_:)(bswap32(*((_DWORD *)v12 + 6)));
      sub_267BC((uint64_t)&v12[*(int *)(v19 + 28)], (uint64_t)v9, &qword_3BEB70);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v9, 1, v21) == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        sub_14614((uint64_t)v9, (uint64_t)v6);
        Hasher._combine(_:)(1u);
        ArtworkModel.hash(into:)(a1);
        sub_145D8((uint64_t)v6, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
      }
      sub_145D8((uint64_t)v12, type metadata accessor for Category);
      v14 += v15;
      --v13;
    }
    while (v13);
  }
}

uint64_t _s8ShelfKit15CategorySectionV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int (*v29)(uint64_t, uint64_t, uint64_t);
  char *v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  void (*v35)(char *, uint64_t);
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;

  v4 = type metadata accessor for AttributedString(0);
  v39 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v38 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B1B30);
  __chkstk_darwin(v6);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B19E8);
  v10 = __chkstk_darwin(v9);
  v40 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v37 - v13;
  __chkstk_darwin(v12);
  v16 = (char *)&v37 - v15;
  v17 = *(_QWORD *)(a1 + 8);
  v18 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)a1 == *(_QWORD *)a2 && v17 == v18
    || (v19 = _stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)a1, v17, *(_QWORD *)a2, v18, 0),
        v20 = 0,
        (v19 & 1) != 0))
  {
    if (*(_BYTE *)(a1 + 16))
      v21 = 0x7261646E6F636573;
    else
      v21 = 0x7972616D697270;
    if (*(_BYTE *)(a1 + 16))
      v22 = 0xE900000000000079;
    else
      v22 = 0xE700000000000000;
    if (*(_BYTE *)(a2 + 16))
      v23 = 0x7261646E6F636573;
    else
      v23 = 0x7972616D697270;
    if (*(_BYTE *)(a2 + 16))
      v24 = 0xE900000000000079;
    else
      v24 = 0xE700000000000000;
    if (v21 == v23 && v22 == v24)
    {
      swift_bridgeObjectRelease_n(v22, 2);
      goto LABEL_20;
    }
    v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v21, v22, v23, v24, 0);
    swift_bridgeObjectRelease(v22);
    swift_bridgeObjectRelease(v24);
    v20 = 0;
    if ((v25 & 1) != 0)
    {
LABEL_20:
      v26 = type metadata accessor for CategorySection(0);
      sub_267BC(a1 + *(int *)(v26 + 24), (uint64_t)v16, &qword_3B19E8);
      sub_267BC(a2 + *(int *)(v26 + 24), (uint64_t)v14, &qword_3B19E8);
      v27 = (uint64_t)&v8[*(int *)(v6 + 48)];
      sub_267BC((uint64_t)v16, (uint64_t)v8, &qword_3B19E8);
      sub_267BC((uint64_t)v14, v27, &qword_3B19E8);
      v28 = v39;
      v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48);
      if (v29((uint64_t)v8, 1, v4) == 1)
      {
        sub_1459C((uint64_t)v14, &qword_3B19E8);
        sub_1459C((uint64_t)v16, &qword_3B19E8);
        if (v29(v27, 1, v4) == 1)
        {
          sub_1459C((uint64_t)v8, &qword_3B19E8);
LABEL_27:
          v20 = sub_13230(*(_QWORD *)(a1 + *(int *)(v26 + 28)), *(_QWORD *)(a2 + *(int *)(v26 + 28)));
          return v20 & 1;
        }
      }
      else
      {
        sub_267BC((uint64_t)v8, (uint64_t)v40, &qword_3B19E8);
        if (v29(v27, 1, v4) != 1)
        {
          v30 = v38;
          (*(void (**)(char *, uint64_t, uint64_t))(v28 + 32))(v38, v27, v4);
          v31 = sub_F1C0(&qword_3B1B38, (void (*)(uint64_t))&type metadata accessor for AttributedString, (uint64_t)&protocol conformance descriptor for AttributedString);
          v32 = dispatch thunk of static Equatable.== infix(_:_:)(v40, v30, v4, v31);
          v33 = v28;
          v34 = v32;
          v35 = *(void (**)(char *, uint64_t))(v33 + 8);
          v35(v30, v4);
          sub_1459C((uint64_t)v14, &qword_3B19E8);
          sub_1459C((uint64_t)v16, &qword_3B19E8);
          v35(v40, v4);
          sub_1459C((uint64_t)v8, &qword_3B19E8);
          if ((v34 & 1) != 0)
            goto LABEL_27;
LABEL_28:
          v20 = 0;
          return v20 & 1;
        }
        sub_1459C((uint64_t)v14, &qword_3B19E8);
        sub_1459C((uint64_t)v16, &qword_3B19E8);
        (*(void (**)(char *, uint64_t))(v28 + 8))(v40, v4);
      }
      sub_1459C((uint64_t)v8, &qword_3B1B30);
      goto LABEL_28;
    }
  }
  return v20 & 1;
}

unint64_t sub_25828()
{
  unint64_t result;

  result = qword_3B1A00;
  if (!qword_3B1A00)
  {
    result = swift_getWitnessTable(&unk_2EB408);
    atomic_store(result, (unint64_t *)&qword_3B1A00);
  }
  return result;
}

unint64_t sub_2586C()
{
  unint64_t result;

  result = qword_3B1A08;
  if (!qword_3B1A08)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CategorySection.TitleStyle);
    atomic_store(result, (unint64_t *)&qword_3B1A08);
  }
  return result;
}

unint64_t sub_258B0()
{
  unint64_t result;

  result = qword_3B1A38;
  if (!qword_3B1A38)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CategorySection.TitleStyle);
    atomic_store(result, (unint64_t *)&qword_3B1A38);
  }
  return result;
}

uint64_t sub_258F4(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_3B1A18);
    sub_F1C0(a2, (void (*)(uint64_t))type metadata accessor for Category, a3);
    result = swift_getWitnessTable(a4);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_2597C()
{
  unint64_t result;

  result = qword_3B1A58;
  if (!qword_3B1A58)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CategorySection.TitleStyle);
    atomic_store(result, (unint64_t *)&qword_3B1A58);
  }
  return result;
}

uint64_t sub_259C0()
{
  return sub_F1C0(&qword_3B1A60, (void (*)(uint64_t))type metadata accessor for CategorySection, (uint64_t)&protocol conformance descriptor for CategorySection);
}

_QWORD *initializeBufferWithCopyOfBuffer for CategorySection(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(const void *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v15);
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v8 = *(int *)(a3 + 24);
    v9 = (void *)(a1 + v8);
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for AttributedString(0);
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain(v7);
    if (v13(v10, 1, v11))
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B19E8);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    v16 = *(int *)(a3 + 28);
    v17 = *(uint64_t *)((char *)a2 + v16);
    *(_QWORD *)((char *)v4 + v16) = v17;
    swift_bridgeObjectRetain(v17);
  }
  return v4;
}

uint64_t destroy for CategorySection(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for AttributedString(0);
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 28)));
}

uint64_t initializeWithCopy for CategorySection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(const void *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v7 = *(int *)(a3 + 24);
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = type metadata accessor for AttributedString(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain(v6);
  if (v12(v9, 1, v10))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B19E8);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v14 = *(int *)(a3 + 28);
  v15 = *(_QWORD *)(a2 + v14);
  *(_QWORD *)(a1 + v14) = v15;
  swift_bridgeObjectRetain(v15);
  return a1;
}

uint64_t assignWithCopy for CategorySection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v8 = *(int *)(a3 + 24);
  v9 = (void *)(a1 + v8);
  v10 = (void *)(a2 + v8);
  v11 = type metadata accessor for AttributedString(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 24))(v9, v10, v11);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v12 + 8))(v9, v11);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B19E8);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v12 + 16))(v9, v10, v11);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
LABEL_7:
  v17 = *(int *)(a3 + 28);
  v18 = *(_QWORD *)(a2 + v17);
  v19 = *(_QWORD *)(a1 + v17);
  *(_QWORD *)(a1 + v17) = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  return a1;
}

uint64_t initializeWithTake for CategorySection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(int *)(a3 + 24);
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = type metadata accessor for AttributedString(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B19E8);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  *(_QWORD *)(a1 + *(int *)(a3 + 28)) = *(_QWORD *)(a2 + *(int *)(a3 + 28));
  return a1;
}

uint64_t assignWithTake for CategorySection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v8 = *(int *)(a3 + 24);
  v9 = (void *)(a1 + v8);
  v10 = (void *)(a2 + v8);
  v11 = type metadata accessor for AttributedString(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 40))(v9, v10, v11);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v12 + 8))(v9, v11);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B19E8);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v12 + 32))(v9, v10, v11);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
LABEL_7:
  v17 = *(int *)(a3 + 28);
  v18 = *(_QWORD *)(a1 + v17);
  *(_QWORD *)(a1 + v17) = *(_QWORD *)(a2 + v17);
  swift_bridgeObjectRelease(v18);
  return a1;
}

uint64_t getEnumTagSinglePayload for CategorySection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_25FFC);
}

uint64_t sub_25FFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B19E8);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for CategorySection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_26088);
}

uint64_t sub_26088(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B19E8);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

void sub_26100(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = &unk_2EB308;
  v4[1] = &unk_2EB320;
  sub_26188(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(v2 - 8) + 64;
    v4[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
  }
}

void sub_26188(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_3B1AD0)
  {
    v2 = type metadata accessor for AttributedString(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_3B1AD0);
  }
}

uint64_t getEnumTagSinglePayload for CategorySection.TitleStyle(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for CategorySection.TitleStyle(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_262B8 + 4 * byte_2EB0E2[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_262EC + 4 * byte_2EB0DD[v4]))();
}

uint64_t sub_262EC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_262F4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x262FCLL);
  return result;
}

uint64_t sub_26308(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x26310);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_26314(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2631C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_26328(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for CategorySection.TitleStyle()
{
  return &type metadata for CategorySection.TitleStyle;
}

uint64_t getEnumTagSinglePayload for CategorySection.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for CategorySection.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_26420 + 4 * byte_2EB0EC[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_26454 + 4 * byte_2EB0E7[v4]))();
}

uint64_t sub_26454(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2645C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x26464);
  return result;
}

uint64_t sub_26470(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x26478);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_2647C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_26484(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CategorySection.CodingKeys()
{
  return &type metadata for CategorySection.CodingKeys;
}

unint64_t sub_264A4()
{
  unint64_t result;

  result = qword_3B1B08;
  if (!qword_3B1B08)
  {
    result = swift_getWitnessTable(&unk_2EB3E0);
    atomic_store(result, (unint64_t *)&qword_3B1B08);
  }
  return result;
}

unint64_t sub_264EC()
{
  unint64_t result;

  result = qword_3B1B10;
  if (!qword_3B1B10)
  {
    result = swift_getWitnessTable(&unk_2EB350);
    atomic_store(result, (unint64_t *)&qword_3B1B10);
  }
  return result;
}

unint64_t sub_26534()
{
  unint64_t result;

  result = qword_3B1B18;
  if (!qword_3B1B18)
  {
    result = swift_getWitnessTable(&unk_2EB378);
    atomic_store(result, (unint64_t *)&qword_3B1B18);
  }
  return result;
}

uint64_t sub_26578(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 0x656C746974 && a2 == 0xE500000000000000)
  {
    v5 = 0xE500000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656C746974, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x797453656C746974 && a2 == 0xEA0000000000656CLL)
  {
    v7 = 0xEA0000000000656CLL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x797453656C746974, 0xEA0000000000656CLL, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x7470697263736564 && a2 == 0xEB000000006E6F69)
  {
    v8 = 0xEB000000006E6F69;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7470697263736564, 0xEB000000006E6F69, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x69726F6765746163 && a2 == 0xEA00000000007365)
  {
    swift_bridgeObjectRelease(0xEA00000000007365);
    return 3;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x69726F6765746163, 0xEA00000000007365, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

unint64_t sub_26750()
{
  unint64_t result;

  result = qword_3B1B20;
  if (!qword_3B1B20)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CategorySection.TitleStyle);
    atomic_store(result, (unint64_t *)&qword_3B1B20);
  }
  return result;
}

uint64_t sub_26794(uint64_t result)
{
  if ((unint64_t)(result - 1) >= 0x11)
    return swift_retain(result);
  return result;
}

uint64_t sub_267A8(uint64_t result)
{
  if ((unint64_t)(result - 1) >= 0x11)
    return swift_release(result);
  return result;
}

uint64_t sub_267BC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t static SearchLandingPageIntent.kind.getter()
{
  return 0xD000000000000017;
}

uint64_t RecommendationsShelvesIntent.metadata.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  v2 = *(_QWORD *)(v1 + 24);
  v3 = *(_BYTE *)(v1 + 32);
  v4 = *(_BYTE *)(v1 + 33);
  v5 = *(_BYTE *)(v1 + 34);
  v6 = *(_QWORD *)(v1 + 40);
  v7 = *(_QWORD *)(v1 + 48);
  v8 = *(_QWORD *)(v1 + 56);
  v9 = *(_QWORD *)(v1 + 64);
  v10 = *(_QWORD *)(v1 + 72);
  v11 = *(_QWORD *)(v1 + 80);
  v12 = *(_QWORD *)(v1 + 88);
  v13 = *(_QWORD *)(v1 + 96);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  v14 = *(_OWORD *)(v1 + 8);
  *(_OWORD *)(a1 + 8) = v14;
  *(_QWORD *)(a1 + 24) = v2;
  *(_BYTE *)(a1 + 32) = v3;
  *(_BYTE *)(a1 + 33) = v4;
  *(_BYTE *)(a1 + 34) = v5;
  *(_QWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 56) = v8;
  *(_QWORD *)(a1 + 64) = v9;
  *(_QWORD *)(a1 + 72) = v10;
  *(_QWORD *)(a1 + 80) = v11;
  v15 = v14;
  *(_QWORD *)(a1 + 88) = v12;
  *(_QWORD *)(a1 + 96) = v13;
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  return swift_bridgeObjectRetain(v15);
}

void __swiftcall ManageCategoriesPageIntent.init(metadata:)(ShelfKit::ManageCategoriesPageIntent *__return_ptr retstr, ShelfKit::RecommendationsMetadata *metadata)
{
  Swift::Bool userAllowsPersonalization;
  Swift::Bool userIsManagedAccount;
  Swift::Bool userIsUnder13;
  Swift::String_optional userID;

  userAllowsPersonalization = metadata->analytics.userAllowsPersonalization;
  userIsManagedAccount = metadata->analytics.userIsManagedAccount;
  userIsUnder13 = metadata->analytics.userIsUnder13;
  userID = metadata->analytics.userID;
  retstr->metadata.analytics.clientID = metadata->analytics.clientID;
  retstr->metadata.analytics.userID = userID;
  retstr->metadata.analytics.userAllowsPersonalization = userAllowsPersonalization;
  retstr->metadata.analytics.userIsManagedAccount = userIsManagedAccount;
  retstr->metadata.analytics.userIsUnder13 = userIsUnder13;
  retstr->metadata.categories = metadata->categories;
  retstr->metadata.channels = metadata->channels;
  *(_OWORD *)&retstr->metadata.episodes.recentlyPlayed._rawValue = *(_OWORD *)&metadata->episodes.recentlyPlayed._rawValue;
  *(_OWORD *)&retstr->metadata.shows.unfollowed._rawValue = *(_OWORD *)&metadata->shows.unfollowed._rawValue;
}

BOOL static ManageCategoriesPageIntent.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  char v4;
  char v5;
  char v6;
  char v7;
  __int128 v8;
  __int128 v9;
  _OWORD v11[2];
  char v12;
  char v13;
  char v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _OWORD v19[2];
  char v20;
  char v21;
  char v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;

  v2 = *(_BYTE *)(a1 + 32);
  v3 = *(_BYTE *)(a1 + 33);
  v4 = *(_BYTE *)(a1 + 34);
  v5 = *(_BYTE *)(a2 + 32);
  v6 = *(_BYTE *)(a2 + 33);
  v7 = *(_BYTE *)(a2 + 34);
  v8 = *(_OWORD *)(a1 + 16);
  v19[0] = *(_OWORD *)a1;
  v19[1] = v8;
  v20 = v2;
  v21 = v3;
  v22 = v4;
  v23 = *(_OWORD *)(a1 + 40);
  v24 = *(_OWORD *)(a1 + 56);
  v25 = *(_OWORD *)(a1 + 72);
  v26 = *(_OWORD *)(a1 + 88);
  v9 = *(_OWORD *)(a2 + 16);
  v11[0] = *(_OWORD *)a2;
  v11[1] = v9;
  v12 = v5;
  v13 = v6;
  v14 = v7;
  v15 = *(_OWORD *)(a2 + 40);
  v16 = *(_OWORD *)(a2 + 56);
  v17 = *(_OWORD *)(a2 + 72);
  v18 = *(_OWORD *)(a2 + 88);
  return _s8ShelfKit23RecommendationsMetadataV2eeoiySbAC_ACtFZ_0((uint64_t)v19, (uint64_t)v11);
}

Swift::Int TranscriptSnippet.DeserializeError.hashValue.getter()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

void TranscriptSnippet.DeserializeError.hash(into:)()
{
  Hasher._combine(_:)(0);
}

Swift::Int sub_26A44()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

uint64_t sub_26A80()
{
  return 0x617461646174656DLL;
}

uint64_t sub_26A98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x617461646174656DLL && a2 == 0xE800000000000000)
  {
    result = swift_bridgeObjectRelease(0xE800000000000000);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x617461646174656DLL, 0xE800000000000000, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_26B2C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_26EE4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_26B54(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_26EE4();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_26B7C(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000017;
  a1[1] = 0x80000000002EB450;
}

uint64_t SearchLandingPageIntent.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  __int128 *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v17;
  int v18;
  int v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  char v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B1B40);
  v21 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *v2;
  v8 = *((_QWORD *)v2 + 2);
  v7 = *((_QWORD *)v2 + 3);
  v9 = *((_BYTE *)v2 + 32);
  v10 = *((unsigned __int8 *)v2 + 33);
  v18 = *((unsigned __int8 *)v2 + 34);
  v19 = v10;
  v11 = a1[3];
  v12 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v11);
  v13 = sub_26EE4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SearchLandingPageIntent.CodingKeys, &type metadata for SearchLandingPageIntent.CodingKeys, v13, v11, v12);
  v22 = v20;
  v23 = v8;
  v24 = v7;
  v25 = v9;
  v26 = v19;
  v27 = v18;
  v14 = *(__int128 *)((char *)v2 + 56);
  v28 = *(__int128 *)((char *)v2 + 40);
  v29 = v14;
  v15 = *(__int128 *)((char *)v2 + 88);
  v30 = *(__int128 *)((char *)v2 + 72);
  v31 = v15;
  sub_26F28();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v22);
  return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v6, v4);
}

uint64_t SearchLandingPageIntent.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  char v13;
  char v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _OWORD v21[2];
  char v22;
  char v23;
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B1B58);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  v11 = sub_26EE4();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SearchLandingPageIntent.CodingKeys, &type metadata for SearchLandingPageIntent.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    sub_26F6C();
    KeyedDecodingContainer.decode<A>(_:forKey:)(v21, &type metadata for RecommendationsMetadata);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v12 = v22;
    v13 = v23;
    v14 = v24;
    v15 = v25;
    v16 = v26;
    v17 = v27;
    v18 = v28;
    v19 = v21[1];
    *(_OWORD *)a2 = v21[0];
    *(_OWORD *)(a2 + 16) = v19;
    *(_BYTE *)(a2 + 32) = v12;
    *(_BYTE *)(a2 + 33) = v13;
    *(_BYTE *)(a2 + 34) = v14;
    *(_OWORD *)(a2 + 40) = v15;
    *(_OWORD *)(a2 + 56) = v16;
    *(_OWORD *)(a2 + 72) = v17;
    *(_OWORD *)(a2 + 88) = v18;
  }
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t sub_26E4C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return SearchLandingPageIntent.init(from:)(a1, a2);
}

uint64_t sub_26E60(_QWORD *a1)
{
  return SearchLandingPageIntent.encode(to:)(a1);
}

uint64_t sub_26E74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_27610();
  return CustomJSValueConvertible<>.jsRepresentation(in:)(a1, a2, a3, v6);
}

uint64_t sub_26ED0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_47C70(a1, a2, a3);
}

unint64_t sub_26EE4()
{
  unint64_t result;

  result = qword_3B1B48;
  if (!qword_3B1B48)
  {
    result = swift_getWitnessTable(&unk_2EB6C0);
    atomic_store(result, (unint64_t *)&qword_3B1B48);
  }
  return result;
}

unint64_t sub_26F28()
{
  unint64_t result;

  result = qword_3B1B50;
  if (!qword_3B1B50)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for RecommendationsMetadata);
    atomic_store(result, (unint64_t *)&qword_3B1B50);
  }
  return result;
}

unint64_t sub_26F6C()
{
  unint64_t result;

  result = qword_3B1B60;
  if (!qword_3B1B60)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for RecommendationsMetadata);
    atomic_store(result, (unint64_t *)&qword_3B1B60);
  }
  return result;
}

unint64_t sub_26FB4()
{
  unint64_t result;

  result = qword_3B1B68;
  if (!qword_3B1B68)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SearchLandingPageIntent);
    atomic_store(result, (unint64_t *)&qword_3B1B68);
  }
  return result;
}

unint64_t sub_26FFC()
{
  unint64_t result;

  result = qword_3B1B70;
  if (!qword_3B1B70)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SearchLandingPageIntent);
    atomic_store(result, (unint64_t *)&qword_3B1B70);
  }
  return result;
}

unint64_t sub_27044()
{
  unint64_t result;

  result = qword_3B1B78;
  if (!qword_3B1B78)
  {
    type metadata accessor for Page(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for Page);
    atomic_store(result, (unint64_t *)&qword_3B1B78);
  }
  return result;
}

uint64_t destroy for RecommendationsMetadata(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(a1[7]);
  swift_bridgeObjectRelease(a1[8]);
  swift_bridgeObjectRelease(a1[9]);
  swift_bridgeObjectRelease(a1[10]);
  swift_bridgeObjectRelease(a1[11]);
  return swift_bridgeObjectRelease(a1[12]);
}

uint64_t initializeWithCopy for RecommendationsMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_WORD *)(a1 + 33) = *(_WORD *)(a2 + 33);
  v5 = *(_QWORD *)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 48) = v6;
  v7 = *(_QWORD *)(a2 + 56);
  v8 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v7;
  *(_QWORD *)(a1 + 64) = v8;
  v9 = *(_QWORD *)(a2 + 72);
  v10 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = v9;
  *(_QWORD *)(a1 + 80) = v10;
  v11 = *(_QWORD *)(a2 + 88);
  v12 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = v11;
  *(_QWORD *)(a1 + 96) = v12;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  return a1;
}

uint64_t assignWithCopy for RecommendationsMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(a2 + 56);
  v13 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  v14 = *(_QWORD *)(a2 + 64);
  v15 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  v16 = *(_QWORD *)(a2 + 72);
  v17 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  v18 = *(_QWORD *)(a2 + 80);
  v19 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  v20 = *(_QWORD *)(a2 + 88);
  v21 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  v22 = *(_QWORD *)(a2 + 96);
  v23 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  return a1;
}

__n128 __swift_memcpy104_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for RecommendationsMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
  v8 = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 56));
  v9 = *(_QWORD *)(a1 + 64);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 72));
  v10 = *(_QWORD *)(a1 + 80);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 88));
  v11 = *(_QWORD *)(a1 + 96);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_bridgeObjectRelease(v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for RecommendationsMetadata(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 104))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RecommendationsMetadata(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 104) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 40) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 104) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SearchLandingPageIntent()
{
  return &type metadata for SearchLandingPageIntent;
}

uint64_t storeEnumTagSinglePayload for SearchLandingPageIntent.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_274DC + 4 * byte_2EB460[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_274FC + 4 * byte_2EB465[v4]))();
}

_BYTE *sub_274DC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_274FC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_27504(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_2750C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_27514(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_2751C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for SearchLandingPageIntent.CodingKeys()
{
  return &type metadata for SearchLandingPageIntent.CodingKeys;
}

unint64_t sub_2753C()
{
  unint64_t result;

  result = qword_3B1B80;
  if (!qword_3B1B80)
  {
    result = swift_getWitnessTable(&unk_2EB698);
    atomic_store(result, (unint64_t *)&qword_3B1B80);
  }
  return result;
}

unint64_t sub_27584()
{
  unint64_t result;

  result = qword_3B1B88;
  if (!qword_3B1B88)
  {
    result = swift_getWitnessTable(&unk_2EB608);
    atomic_store(result, (unint64_t *)&qword_3B1B88);
  }
  return result;
}

unint64_t sub_275CC()
{
  unint64_t result;

  result = qword_3B1B90;
  if (!qword_3B1B90)
  {
    result = swift_getWitnessTable(&unk_2EB630);
    atomic_store(result, (unint64_t *)&qword_3B1B90);
  }
  return result;
}

unint64_t sub_27610()
{
  unint64_t result;

  result = qword_3B1B98;
  if (!qword_3B1B98)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SearchLandingPageIntent);
    atomic_store(result, (unint64_t *)&qword_3B1B98);
  }
  return result;
}

uint64_t ShareSheetContext.rawValue.getter(char a1)
{
  if (!a1)
    return 0x656C6369747261;
  if (a1 == 1)
    return 0x746375646F7270;
  return 0x7265666E69;
}

uint64_t sub_276AC(_BYTE *a1, _BYTE *a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;

  v2 = *a1;
  v3 = 0xE700000000000000;
  v4 = 0xE700000000000000;
  v5 = 0x746375646F7270;
  if (v2 != 1)
  {
    v5 = 0x7265666E69;
    v4 = 0xE500000000000000;
  }
  if (*a1)
    v6 = v5;
  else
    v6 = 0x656C6369747261;
  if (v2)
    v7 = v4;
  else
    v7 = 0xE700000000000000;
  v8 = 0x746375646F7270;
  if (*a2 != 1)
  {
    v8 = 0x7265666E69;
    v3 = 0xE500000000000000;
  }
  if (*a2)
    v9 = v8;
  else
    v9 = 0x656C6369747261;
  if (*a2)
    v10 = v3;
  else
    v10 = 0xE700000000000000;
  if (v6 == v9 && v7 == v10)
  {
    v11 = 1;
    v10 = v7;
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v7, v9, v10, 0);
  }
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v10);
  return v11 & 1;
}

Swift::Int sub_277A4()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7);
  v2 = 0xE700000000000000;
  v3 = 0x746375646F7270;
  if (v1 != 1)
  {
    v3 = 0x7265666E69;
    v2 = 0xE500000000000000;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 0x656C6369747261;
  if (v1)
    v5 = v2;
  else
    v5 = 0xE700000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_27840(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0xE700000000000000;
  v3 = 0x746375646F7270;
  if (*v1 != 1)
  {
    v3 = 0x7265666E69;
    v2 = 0xE500000000000000;
  }
  if (*v1)
    v4 = v3;
  else
    v4 = 0x656C6369747261;
  if (*v1)
    v5 = v2;
  else
    v5 = 0xE700000000000000;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_278B8()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7);
  v2 = 0xE700000000000000;
  v3 = 0x746375646F7270;
  if (v1 != 1)
  {
    v3 = 0x7265666E69;
    v2 = 0xE500000000000000;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 0x656C6369747261;
  if (v1)
    v5 = v2;
  else
    v5 = 0xE700000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

unint64_t sub_27950@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = _s8ShelfKit17ShareSheetContextO8rawValueACSgSS_tcfC_0(*a1);
  *a2 = result;
  return result;
}

void sub_2797C(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE700000000000000;
  v4 = 0xE700000000000000;
  v5 = 0x746375646F7270;
  if (v2 != 1)
  {
    v5 = 0x7265666E69;
    v4 = 0xE500000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x656C6369747261;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t HeaderFooterShelves.footerShelves.getter()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 24));
}

uint64_t ShareSheetData.__allocating_init(context:items:)(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_allocObject(v2, 32, 7);
  *(_BYTE *)(result + 16) = a1;
  *(_QWORD *)(result + 24) = a2;
  return result;
}

uint64_t ShareSheetData.init(context:items:)(char a1, uint64_t a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return v2;
}

uint64_t ShareSheetData.__allocating_init(deserializing:using:)(char *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = swift_allocObject(v2, 32, 7);
  ShareSheetData.init(deserializing:using:)(a1, a2);
  return v5;
}

uint64_t *ShareSheetData.init(deserializing:using:)(char *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  void (*v32)(char *, uint64_t);
  char *v33;
  uint64_t v34;
  Swift::String v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t *v44;
  uint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t *v49;
  uint64_t v50;
  unsigned int *v51;
  unint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v78;
  unint64_t v79;
  void (*v80)(char *, uint64_t);
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t *v89;
  uint64_t *v90;
  uint64_t v91;

  v91 = a2;
  v3 = type metadata accessor for ShareItem(0);
  v4 = *(_QWORD *)(v3 - 8);
  v85 = v3;
  v86 = v4;
  v5 = __chkstk_darwin(v3);
  v89 = (uint64_t *)((char *)&v78 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v5);
  v82 = (uint64_t)&v78 - v7;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
  v9 = __chkstk_darwin(v8);
  v81 = (char *)&v78 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v12 = (char *)&v78 - v11;
  v13 = type metadata accessor for URL(0);
  v83 = *(_QWORD *)(v13 - 8);
  v84 = v13;
  __chkstk_darwin(v13);
  v87 = (char *)&v78 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for JSONObject(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v88 = (char *)&v78 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v78 - v20;
  v22 = __chkstk_darwin(v19);
  v24 = (char *)&v78 - v23;
  __chkstk_darwin(v22);
  v26 = (char *)&v78 - v25;
  v27 = a1;
  v28 = JSONObject.subscript.getter(0x747865746E6F63, 0xE700000000000000);
  v29 = JSONObject.string.getter(v28);
  v31 = v30;
  v32 = *(void (**)(char *, uint64_t))(v16 + 8);
  v33 = v26;
  v34 = v15;
  v32(v33, v15);
  if (!v31)
  {
    v45 = type metadata accessor for JSONError(0);
    v46 = sub_1E468();
    swift_allocError(v45, v46, 0, 0);
    v48 = v47;
    v49 = v90;
    v50 = *v90;
    *v47 = 0x747865746E6F63;
    v47[1] = 0xE700000000000000;
    v47[2] = v50;
    v51 = (unsigned int *)&enum case for JSONError.missingProperty(_:);
LABEL_9:
    v55 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v45 - 8) + 104))(v48, *v51, v45);
    v56 = v91;
    swift_willThrow(v55);
    v57 = type metadata accessor for JSONContext(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 8))(v56, v57);
    v32(v27, v34);
    v58 = type metadata accessor for ShareSheetData();
    swift_deallocPartialClassInstance(v49, v58, 32, 7);
    return v49;
  }
  v35._countAndFlagsBits = v29;
  v35._object = v31;
  v36 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_372B98, v35);
  swift_bridgeObjectRelease(v31);
  if (v36 >= 3)
  {
    v45 = type metadata accessor for JSONError(0);
    v52 = sub_1E468();
    swift_allocError(v45, v52, 0, 0);
    v48 = v53;
    v49 = v90;
    v54 = *v90;
    *v53 = 0x747865746E6F63;
    v53[1] = 0xE700000000000000;
    v53[2] = v54;
    v53[3] = _swiftEmptyArrayStorage;
    v51 = (unsigned int *)&enum case for JSONError.malformedProperty(_:);
    goto LABEL_9;
  }
  v79 = v36;
  v37 = JSONObject.subscript.getter(7107189, 0xE300000000000000);
  v38 = JSONObject.string.getter(v37);
  v40 = v39;
  v80 = v32;
  v32(v24, v15);
  if (v40)
  {
    URL.init(string:)(v38, v40);
    swift_bridgeObjectRelease(v40);
    v41 = v83;
    v42 = v84;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v83 + 48))(v12, 1, v84) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v87, v12, v42);
      v59 = JSONObject.subscript.getter(0x6C725574726F6873, 0xE800000000000000);
      v60 = JSONObject.string.getter(v59);
      v62 = v61;
      v80(v21, v34);
      v44 = v89;
      v63 = (uint64_t)v81;
      if (v62)
      {
        URL.init(string:)(v60, v62);
        swift_bridgeObjectRelease(v62);
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v41 + 56))(v81, 1, 1, v42);
      }
      v64 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B1BA0);
      v65 = v82;
      v66 = v82 + *(int *)(v64 + 48);
      (*(void (**)(uint64_t, char *, uint64_t))(v41 + 16))(v82, v87, v42);
      sub_282CC(v63, v66);
      swift_storeEnumTagMultiPayload(v65, v85, 1);
      v43 = (_QWORD *)sub_10750(0, 1, 1, (unint64_t)_swiftEmptyArrayStorage);
      v68 = v43[2];
      v67 = v43[3];
      if (v68 >= v67 >> 1)
        v43 = (_QWORD *)sub_10750(v67 > 1, v68 + 1, 1, (unint64_t)v43);
      v43[2] = v68 + 1;
      sub_28248(v82, (uint64_t)v43+ ((*(unsigned __int8 *)(v86 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v86 + 80))+ *(_QWORD *)(v86 + 72) * v68);
      sub_2828C(v63);
      (*(void (**)(char *, uint64_t))(v83 + 8))(v87, v84);
      goto LABEL_16;
    }
    sub_2828C((uint64_t)v12);
  }
  v43 = _swiftEmptyArrayStorage;
  v44 = v89;
LABEL_16:
  v69 = v88;
  v70 = JSONObject.subscript.getter(1954047348, 0xE400000000000000);
  v71 = JSONObject.string.getter(v70);
  v73 = v72;
  v80(v69, v34);
  if (v73)
  {
    *v44 = v71;
    v44[1] = v73;
    swift_storeEnumTagMultiPayload(v44, v85, 0);
    if ((swift_isUniquelyReferenced_nonNull_native(v43) & 1) == 0)
      v43 = (_QWORD *)sub_10750(0, v43[2] + 1, 1, (unint64_t)v43);
    v75 = v43[2];
    v74 = v43[3];
    if (v75 >= v74 >> 1)
      v43 = (_QWORD *)sub_10750(v74 > 1, v75 + 1, 1, (unint64_t)v43);
    v43[2] = v75 + 1;
    sub_28248((uint64_t)v44, (uint64_t)v43+ ((*(unsigned __int8 *)(v86 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v86 + 80))+ *(_QWORD *)(v86 + 72) * v75);
  }
  v76 = type metadata accessor for JSONContext(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v76 - 8) + 8))(v91, v76);
  v80(v27, v34);
  v49 = v90;
  *((_BYTE *)v90 + 16) = v79;
  v49[3] = (uint64_t)v43;
  return v49;
}

uint64_t HighlightIdentifier.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return v0;
}

uint64_t ShareSheetData.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t *sub_28140@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t *result;

  v7 = type metadata accessor for ShareSheetData();
  v8 = swift_allocObject(v7, 32, 7);
  result = ShareSheetData.init(deserializing:using:)(a1, a2);
  if (!v3)
    *a3 = v8;
  return result;
}

unint64_t _s8ShelfKit17ShareSheetContextO8rawValueACSgSS_tcfC_0(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_372B98, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

uint64_t type metadata accessor for ShareItem(uint64_t a1)
{
  uint64_t result;

  result = qword_3B1C20;
  if (!qword_3B1C20)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ShareItem);
  return result;
}

uint64_t type metadata accessor for ShareSheetData()
{
  return objc_opt_self(_TtC8ShelfKit14ShareSheetData);
}

uint64_t sub_28248(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ShareItem(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_2828C(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_282CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_28318()
{
  unint64_t result;

  result = qword_3B1BA8;
  if (!qword_3B1BA8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ShareSheetContext);
    atomic_store(result, (unint64_t *)&qword_3B1BA8);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ShareSheetContext(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ShareSheetContext(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_28438 + 4 * byte_2EB715[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_2846C + 4 * byte_2EB710[v4]))();
}

uint64_t sub_2846C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_28474(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2847CLL);
  return result;
}

uint64_t sub_28488(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x28490);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_28494(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2849C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ShareSheetContext()
{
  return &type metadata for ShareSheetContext;
}

uint64_t *initializeBufferWithCopyOfBuffer for ShareItem(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v14);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      v7 = type metadata accessor for URL(0);
      v8 = *(_QWORD *)(v7 - 8);
      v9 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16);
      v9(a1, a2, v7);
      v10 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B1BA0) + 48);
      v11 = (char *)a1 + v10;
      v12 = (char *)a2 + v10;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v12, 1, v7))
      {
        v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
        memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
      }
      else
      {
        v9((uint64_t *)v11, (uint64_t *)v12, v7);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v11, 0, 1, v7);
      }
      v16 = a1;
      v17 = a3;
      v18 = 1;
    }
    else
    {
      v15 = a2[1];
      *a1 = *a2;
      a1[1] = v15;
      swift_bridgeObjectRetain(v15);
      v16 = a1;
      v17 = a3;
      v18 = 0;
    }
    swift_storeEnumTagMultiPayload(v16, v17, v18);
  }
  return a1;
}

uint64_t destroy for ShareItem(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  void (*v7)(uint64_t, uint64_t);

  if (swift_getEnumCaseMultiPayload(a1, a2) != 1)
    return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v3 = type metadata accessor for URL(0);
  v4 = *(_QWORD *)(v3 - 8);
  v7 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v7(a1, v3);
  v5 = a1 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B1BA0) + 48);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v5, 1, v3);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v7)(v5, v3);
  return result;
}

char *initializeWithCopy for ShareItem(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    v6 = type metadata accessor for URL(0);
    v7 = *(_QWORD *)(v6 - 8);
    v8 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
    v8(a1, a2, v6);
    v9 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B1BA0) + 48);
    v10 = &a1[v9];
    v11 = &a2[v9];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v11, 1, v6))
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      v8(v10, v11, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
    }
    v14 = a1;
    v15 = a3;
    v16 = 1;
  }
  else
  {
    v13 = *((_QWORD *)a2 + 1);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *((_QWORD *)a1 + 1) = v13;
    swift_bridgeObjectRetain(v13);
    v14 = a1;
    v15 = a3;
    v16 = 0;
  }
  swift_storeEnumTagMultiPayload(v14, v15, v16);
  return a1;
}

char *assignWithCopy for ShareItem(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  if (a1 != a2)
  {
    sub_2891C((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      v6 = type metadata accessor for URL(0);
      v7 = *(_QWORD *)(v6 - 8);
      v8 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
      v8(a1, a2, v6);
      v9 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B1BA0) + 48);
      v10 = &a1[v9];
      v11 = &a2[v9];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v11, 1, v6))
      {
        v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
        memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
      }
      else
      {
        v8(v10, v11, v6);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
      }
      v14 = a1;
      v15 = a3;
      v16 = 1;
    }
    else
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v13 = *((_QWORD *)a2 + 1);
      *((_QWORD *)a1 + 1) = v13;
      swift_bridgeObjectRetain(v13);
      v14 = a1;
      v15 = a3;
      v16 = 0;
    }
    swift_storeEnumTagMultiPayload(v14, v15, v16);
  }
  return a1;
}

uint64_t sub_2891C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ShareItem(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

char *initializeWithTake for ShareItem(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;

  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    v6 = type metadata accessor for URL(0);
    v7 = *(_QWORD *)(v6 - 8);
    v8 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
    v8(a1, a2, v6);
    v9 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B1BA0) + 48);
    v10 = &a1[v9];
    v11 = &a2[v9];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v11, 1, v6))
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      v8(v10, v11, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
    }
    swift_storeEnumTagMultiPayload(a1, a3, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

char *assignWithTake for ShareItem(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;

  if (a1 != a2)
  {
    sub_2891C((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      v6 = type metadata accessor for URL(0);
      v7 = *(_QWORD *)(v6 - 8);
      v8 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
      v8(a1, a2, v6);
      v9 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B1BA0) + 48);
      v10 = &a1[v9];
      v11 = &a2[v9];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v11, 1, v6))
      {
        v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
        memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
      }
      else
      {
        v8(v10, v11, v6);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
      }
      swift_storeEnumTagMultiPayload(a1, a3, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for ShareItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for ShareItem(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t sub_28BBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_storeEnumTagMultiPayload(a1, a3, a2);
}

uint64_t sub_28BCC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _BYTE v7[32];
  _QWORD v8[2];

  v8[0] = &unk_2EB830;
  v2 = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    sub_28C74(319);
    if (v5 > 0x3F)
    {
      return v4;
    }
    else
    {
      swift_getTupleTypeLayout2(v7, *(_QWORD *)(v2 - 8) + 64, *(_QWORD *)(v4 - 8) + 64);
      v8[1] = v7;
      swift_initEnumMetadataMultiPayload(a1, 256, 2, v8);
      return 0;
    }
  }
  return v2;
}

void sub_28C74(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_3B1C30)
  {
    v2 = type metadata accessor for URL(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_3B1C30);
  }
}

uint64_t method lookup function for ShareSheetData(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for ShareSheetData);
}

uint64_t dispatch thunk of InformationViewCoordinator.__allocating_init(asPartOf:withStyle:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of HighlightIdentifier.__allocating_init(deserializing:using:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

unint64_t StoreDataCacheError.description.getter()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  v1 = 0xD000000000000017;
  v2 = *(_QWORD *)(v0 + 8);
  if (!v2)
    v1 = 0xD000000000000019;
  if (v2 == 1)
    return 0xD000000000000035;
  else
    return v1;
}

unint64_t destroy for StoreDataCacheError(uint64_t a1)
{
  unint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result >= 0xFFFFFFFF)
    return swift_bridgeObjectRelease(result);
  return result;
}

uint64_t _s8ShelfKit19StoreDataCacheErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v3;
    swift_bridgeObjectRetain(v3);
  }
  return a1;
}

_QWORD *assignWithCopy for StoreDataCacheError(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a1[1];
  v5 = a2[1];
  if (v4 < 0xFFFFFFFF)
  {
    if (v5 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      v7 = a2[1];
      a1[1] = v7;
      swift_bridgeObjectRetain(v7);
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v5 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(a1[1]);
    goto LABEL_7;
  }
  *a1 = *a2;
  v6 = a2[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t assignWithTake for StoreDataCacheError(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4 < 0xFFFFFFFF)
    goto LABEL_5;
  v5 = *(_QWORD *)(a2 + 8);
  if (v5 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(v4);
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for StoreDataCacheError(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFE && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 1;
  if (v4 >= 3)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for StoreDataCacheError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2 + 1;
  }
  return result;
}

uint64_t sub_28F78(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *sub_28F90(_QWORD *result, int a2)
{
  if (a2 < 0)
  {
    *result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for StoreDataCacheError()
{
  return &type metadata for StoreDataCacheError;
}

NSObject_optional __swiftcall AppEntityRepresentable.appEntityAnnotation()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  Swift::Bool v15;
  objc_class *v16;
  __int128 v17;
  uint64_t v18;
  _QWORD v19[3];
  uint64_t v20;
  uint64_t v21;
  NSObject_optional result;

  v2 = v1;
  v3 = v0;
  v4 = type metadata accessor for AppEntityVisualState(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v2 + 16))(&v17, v3, v2);
  if (v18)
  {
    sub_F4D8(&v17, (uint64_t)v19);
    v7 = v20;
    v8 = v21;
    v9 = __swift_project_boxed_opaque_existential_1(v19, v20);
    v10 = type metadata accessor for AppEntityViewAnnotation(0);
    __chkstk_darwin(v10);
    v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, _QWORD *, uint64_t))(v13 + 16))(v12, v9, v7);
    sub_2914C();
    v14 = AppEntityViewAnnotation.__allocating_init<A>(entity:state:)(v12, v6, v7, v8);
    __swift_destroy_boxed_opaque_existential_1(v19);
  }
  else
  {
    sub_2910C((uint64_t)&v17);
    v14 = 0;
  }
  v16 = (objc_class *)v14;
  result.value.isa = v16;
  result.is_nil = v15;
  return result;
}

uint64_t sub_2910C(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B1D10);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_2914C()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD *v5;

  v0 = type metadata accessor for AppEntityVisualState(0);
  v5 = _swiftEmptyArrayStorage;
  v1 = sub_291C8();
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B1D20);
  v3 = sub_29210();
  return dispatch thunk of SetAlgebra.init<A>(_:)(&v5, v2, v3, v0, v1);
}

unint64_t sub_291C8()
{
  unint64_t result;

  result = qword_3B1D18;
  if (!qword_3B1D18)
  {
    type metadata accessor for AppEntityVisualState(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for AppEntityVisualState);
    atomic_store(result, (unint64_t *)&qword_3B1D18);
  }
  return result;
}

unint64_t sub_29210()
{
  unint64_t result;

  result = qword_3B1D28;
  if (!qword_3B1D28)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_3B1D20);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A]);
    atomic_store(result, (unint64_t *)&qword_3B1D28);
  }
  return result;
}

void sub_2925C()
{
  id v0;
  NSString v1;
  id v2;

  v0 = objc_allocWithZone((Class)NSUserActivity);
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "initWithActivityType:", v1);

  qword_3B1D30 = (uint64_t)v2;
}

id static NSUserActivity.stateRestorationActivity.getter()
{
  if (qword_3B0038 != -1)
    swift_once(&qword_3B0038, sub_2925C);
  return (id)qword_3B1D30;
}

uint64_t NSUserActivity.isStateRestorationActivity.getter()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v6;

  v1 = objc_msgSend(v0, "activityType");
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  v4 = v3;

  if (v2 == 0xD000000000000023 && v4 == 0x800000000030AA90)
  {
    swift_bridgeObjectRelease(0x800000000030AA90);
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, v4, 0xD000000000000023, 0x800000000030AA90, 0);
    swift_bridgeObjectRelease(v4);
    return v6 & 1;
  }
}

uint64_t NSUserActivity.stateRestorationNavigationTab.getter()
{
  void *v0;
  id v1;
  void *v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v7[2];
  _BYTE v8[40];
  __int128 v9;
  __int128 v10;

  if (objc_msgSend(v0, "isStateRestorationActivity"))
  {
    v1 = objc_msgSend(v0, "userInfo");
    if (v1)
    {
      v2 = v1;
      v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v1, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

      strcpy((char *)v7, "navigationTab");
      HIWORD(v7[1]) = -4864;
      AnyHashable.init<A>(_:)(v7, &type metadata for String, &protocol witness table for String);
      if (*(_QWORD *)(v3 + 16) && (v4 = sub_29898((uint64_t)v8), (v5 & 1) != 0))
      {
        sub_1FB98(*(_QWORD *)(v3 + 56) + 32 * v4, (uint64_t)&v9);
      }
      else
      {
        v9 = 0u;
        v10 = 0u;
      }
      swift_bridgeObjectRelease(v3);
      sub_298C8((uint64_t)v8);
      if (*((_QWORD *)&v10 + 1))
      {
        if ((swift_dynamicCast(v7, &v9, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
          return _s8ShelfKit13NavigationTabO11stringValueACSS_tcfC_0(v7[0], v7[1]);
      }
      else
      {
        sub_298FC((uint64_t)&v9);
      }
    }
  }
  return 18;
}

id static NSUserActivity.stateRestorationActivity(for:)(unint64_t a1)
{
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t inited;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Class isa;
  _WORD v11[8];
  _BYTE v12[104];

  if (a1 <= 0xD && ((1 << a1) & 0x2C00) != 0)
    return 0;
  if (qword_3B0038 != -1)
    swift_once(&qword_3B0038, sub_2925C);
  v3 = (void *)qword_3B1D30;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B1D38);
  inited = swift_initStackObject(v4, v12);
  *(_OWORD *)(inited + 16) = xmmword_2EA0D0;
  strcpy((char *)v11, "navigationTab");
  v11[7] = -4864;
  v2 = v3;
  AnyHashable.init<A>(_:)(v11, &type metadata for String, &protocol witness table for String);
  v6 = NavigationTab.stringValue.getter(a1);
  *(_QWORD *)(inited + 96) = &type metadata for String;
  *(_QWORD *)(inited + 72) = v6;
  *(_QWORD *)(inited + 80) = v7;
  v8 = sub_288314(inited);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v8);
  objc_msgSend(v2, "setUserInfo:", isa);

  return v2;
}

unint64_t sub_29724(uint64_t a1, uint64_t a2)
{
  Swift::Int v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6);
  String.hash(into:)(v6, a1, a2);
  v4 = Hasher._finalize()();
  return sub_29D68(a1, a2, v4);
}

unint64_t sub_2978C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::Int v5;
  _QWORD v7[9];

  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v4 = v3;
  Hasher.init(_seed:)(v7);
  String.hash(into:)(v7, v2, v4);
  v5 = Hasher._finalize()();
  swift_bridgeObjectRelease(v4);
  return sub_29E48(a1, v5);
}

unint64_t sub_29818(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::Int v5;
  _QWORD v7[9];

  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v4 = v3;
  Hasher.init(_seed:)(v7);
  String.hash(into:)(v7, v2, v4);
  v5 = Hasher._finalize()();
  swift_bridgeObjectRelease(v4);
  return sub_29E48(a1, v5);
}

unint64_t sub_29898(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_29FBC(a1, v4);
}

uint64_t sub_298C8(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for AnyHashable - 1) + 8))();
  return a1;
}

uint64_t sub_298FC(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3BC540);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_2993C(uint64_t a1, uint64_t a2)
{
  Swift::Int v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6);
  swift_bridgeObjectRetain(a2);
  String.hash(into:)(v6, a1, a2);
  swift_bridgeObjectRelease(a2);
  v4 = Hasher._finalize()();
  return sub_29D68(a1, a2, v4);
}

unint64_t sub_299B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 40);
  v5 = type metadata accessor for UUID(0);
  v6 = sub_F1C0(&qword_3B1D40, (void (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_2A080(a1, v7, (void (*)(uint64_t))&type metadata accessor for UUID, &qword_3B1D48, (uint64_t)&protocol conformance descriptor for UUID);
}

unint64_t sub_29A48(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 40);
  v5 = type metadata accessor for MediaRequest.ContentType(0);
  v6 = sub_F1C0(&qword_3B1D68, (void (*)(uint64_t))&type metadata accessor for MediaRequest.ContentType, (uint64_t)&protocol conformance descriptor for MediaRequest.ContentType);
  v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_2A080(a1, v7, (void (*)(uint64_t))&type metadata accessor for MediaRequest.ContentType, &qword_3B1D70, (uint64_t)&protocol conformance descriptor for MediaRequest.ContentType);
}

unint64_t sub_29AE0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 40);
  v5 = type metadata accessor for TipGroup(0);
  v6 = sub_F1C0(&qword_3B1D50, (void (*)(uint64_t))&type metadata accessor for TipGroup, (uint64_t)&protocol conformance descriptor for TipGroup);
  v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_2A080(a1, v7, (void (*)(uint64_t))&type metadata accessor for TipGroup, &qword_3B1D58, (uint64_t)&protocol conformance descriptor for TipGroup);
}

void sub_29B78(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2);
  __asm { BR              X10 }
}

uint64_t sub_29BC4()
{
  uint64_t v0;
  Swift::Int v1;
  uint64_t v3;

  String.hash(into:)(&v3, 2036625250, 0xE400000000000000);
  swift_bridgeObjectRelease();
  v1 = Hasher._finalize()();
  return sub_2A1B0(v0, v1);
}

unint64_t sub_29C48(Swift::UInt64 a1)
{
  Swift::Int v2;
  _QWORD v4[9];

  Hasher.init(_seed:)(v4);
  Hasher._combine(_:)(a1);
  v2 = Hasher._finalize()();
  return sub_2A388(a1, v2);
}

unint64_t sub_29CA0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 40);
  v5 = type metadata accessor for URL(0);
  v6 = sub_F1C0(&qword_3B1D60, (void (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_2A080(a1, v7, (void (*)(uint64_t))&type metadata accessor for URL, (unint64_t *)&qword_3B0B08, (uint64_t)&protocol conformance descriptor for URL);
}

unint64_t sub_29D38(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = static Hasher._hash(seed:_:)(*(_QWORD *)(v1 + 40), a1);
  return sub_2A388(a1, v3);
}

unint64_t sub_29D68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = v10[1];
    v12 = *v10 == a1 && v11 == a2;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0) & 1) == 0)
    {
      v13 = ~v5;
      do
      {
        v6 = (v6 + 1) & v13;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v14 = (_QWORD *)(v9 + 16 * v6);
        v15 = v14[1];
        v16 = *v14 == a1 && v15 == a2;
      }
      while (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0) & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_29E48(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v5));
    v9 = v8;
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    if (v7 == v10 && v9 == v11)
    {
LABEL_16:
      swift_bridgeObjectRelease_n(v9, 2);
      return v5;
    }
    v13 = v11;
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v13);
    if ((v14 & 1) == 0)
    {
      v15 = ~v4;
      v5 = (v5 + 1) & v15;
      if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
      {
        while (1)
        {
          v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v5));
          v9 = v17;
          v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
          if (v16 == v18 && v9 == v19)
            break;
          v21 = v19;
          v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v9, v18, v19, 0);
          swift_bridgeObjectRelease(v9);
          swift_bridgeObjectRelease(v21);
          if ((v22 & 1) == 0)
          {
            v5 = (v5 + 1) & v15;
            if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
              continue;
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

unint64_t sub_29FBC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      sub_2A424(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = static AnyHashable.== infix(_:_:)(v9, a1);
      sub_298C8((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_2A080(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, unint64_t, uint64_t);
  uint64_t v17;
  char v18;
  uint64_t v20;
  void (*v21)(uint64_t);
  unint64_t *v22;
  uint64_t v23;

  v22 = a4;
  v23 = a5;
  v6 = v5;
  v20 = a1;
  v21 = a3;
  v8 = ((uint64_t (*)(_QWORD))a3)(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v20 - v10;
  v12 = -1 << *(_BYTE *)(v6 + 32);
  v13 = a2 & ~v12;
  if (((*(_QWORD *)(v6 + 64 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
  {
    v14 = ~v12;
    v15 = *(_QWORD *)(v9 + 72);
    v16 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
    do
    {
      v16(v11, *(_QWORD *)(v6 + 48) + v15 * v13, v8);
      v17 = sub_F1C0(v22, v21, v23);
      v18 = dispatch thunk of static Equatable.== infix(_:_:)(v11, v20, v8, v17);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      if ((v18 & 1) != 0)
        break;
      v13 = (v13 + 1) & v14;
    }
    while (((*(_QWORD *)(v6 + 64 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0);
  }
  return v13;
}

uint64_t sub_2A1B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  v3 = a2 & ~(-1 << *(_BYTE *)(v2 + 32));
  if (((*(_QWORD *)(v2 + 64 + ((v3 >> 3) & 0xFFFFFFFFFFFFF8)) >> v3) & 1) != 0)
    __asm { BR              X9 }
  return a2 & ~(-1 << *(_BYTE *)(v2 + 32));
}

unint64_t sub_2A388(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_QWORD *)(v7 + 8 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_QWORD *)(v7 + 8 * result) == a1)
          break;
      }
    }
  }
  return result;
}

uint64_t sub_2A424(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(&type metadata for AnyHashable - 1) + 16))(a2, a1);
  return a2;
}

unint64_t static FetchSearchShowLockupsIntent.kind.getter()
{
  return 0xD00000000000001CLL;
}

uint64_t sub_2A47C()
{
  return 7562345;
}

uint64_t sub_2A48C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 7562345 && a2 == 0xE300000000000000)
  {
    result = swift_bridgeObjectRelease(0xE300000000000000);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(7562345, 0xE300000000000000, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_2A510(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_2A740();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_2A538(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_2A740();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_2A560(_QWORD *a1@<X8>)
{
  *a1 = 0xD00000000000001CLL;
  a1[1] = 0x80000000002EB970;
}

uint64_t FetchSearchShowLockupsIntent.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B1D78);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = a1[3];
  v9 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v8);
  v10 = sub_2A740();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for FetchSearchShowLockupsIntent.CodingKeys, &type metadata for FetchSearchShowLockupsIntent.CodingKeys, v10, v8, v9);
  v13 = v7;
  __swift_instantiateConcreteTypeFromMangledName(&qword_3B0A90);
  sub_16138(&qword_3B0A98, &qword_3B0A90, (void (*)(void))sub_13E9C, (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v13);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_2A6A8(_QWORD *a1)
{
  return FetchSearchShowLockupsIntent.encode(to:)(a1);
}

uint64_t sub_2A6BC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_2A7D0();
  return IntentModel<>.kind.getter(a1, v2);
}

uint64_t sub_2A6E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_2AA14();
  return CustomJSValueConvertible<>.jsRepresentation(in:)(a1, a2, a3, v6);
}

unint64_t sub_2A740()
{
  unint64_t result;

  result = qword_3B1D80;
  if (!qword_3B1D80)
  {
    result = swift_getWitnessTable(&unk_2EBBD0);
    atomic_store(result, (unint64_t *)&qword_3B1D80);
  }
  return result;
}

unint64_t sub_2A788()
{
  unint64_t result;

  result = qword_3B1D88;
  if (!qword_3B1D88)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for FetchSearchShowLockupsIntent);
    atomic_store(result, (unint64_t *)&qword_3B1D88);
  }
  return result;
}

unint64_t sub_2A7D0()
{
  unint64_t result;

  result = qword_3B1D90;
  if (!qword_3B1D90)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for FetchSearchShowLockupsIntent);
    atomic_store(result, (unint64_t *)&qword_3B1D90);
  }
  return result;
}

uint64_t sub_2A814()
{
  return sub_16138(&qword_3B1D98, &qword_3B09E8, (void (*)(void))sub_2A848, (uint64_t)&protocol conformance descriptor for <A> [A]);
}

unint64_t sub_2A848()
{
  unint64_t result;

  result = qword_3B1DA0;
  if (!qword_3B1DA0)
  {
    type metadata accessor for LegacyLockup(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for LegacyLockup);
    atomic_store(result, (unint64_t *)&qword_3B1DA0);
  }
  return result;
}

ValueMetadata *type metadata accessor for FetchSearchShowLockupsIntent()
{
  return &type metadata for FetchSearchShowLockupsIntent;
}

uint64_t storeEnumTagSinglePayload for FetchSearchShowLockupsIntent.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_2A8E0 + 4 * byte_2EB980[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_2A900 + 4 * byte_2EB985[v4]))();
}

_BYTE *sub_2A8E0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_2A900(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_2A908(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_2A910(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_2A918(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_2A920(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for FetchSearchShowLockupsIntent.CodingKeys()
{
  return &type metadata for FetchSearchShowLockupsIntent.CodingKeys;
}

unint64_t sub_2A940()
{
  unint64_t result;

  result = qword_3B1DA8;
  if (!qword_3B1DA8)
  {
    result = swift_getWitnessTable(&unk_2EBBA8);
    atomic_store(result, (unint64_t *)&qword_3B1DA8);
  }
  return result;
}

unint64_t sub_2A988()
{
  unint64_t result;

  result = qword_3B1DB0;
  if (!qword_3B1DB0)
  {
    result = swift_getWitnessTable(&unk_2EBB18);
    atomic_store(result, (unint64_t *)&qword_3B1DB0);
  }
  return result;
}

unint64_t sub_2A9D0()
{
  unint64_t result;

  result = qword_3B1DB8;
  if (!qword_3B1DB8)
  {
    result = swift_getWitnessTable(&unk_2EBB40);
    atomic_store(result, (unint64_t *)&qword_3B1DB8);
  }
  return result;
}

unint64_t sub_2AA14()
{
  unint64_t result;

  result = qword_3B1DC0;
  if (!qword_3B1DC0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for FetchSearchShowLockupsIntent);
    atomic_store(result, (unint64_t *)&qword_3B1DC0);
  }
  return result;
}

uint64_t ReorderingExtension.canReorder.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_retain(v0[1]);
  return v1;
}

uint64_t MultiSelectableExtension.shouldDisplayMultiSelectUI.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_retain(*(_QWORD *)(v0 + 24));
  return v1;
}

uint64_t destroy for DeletableExtension(uint64_t a1)
{
  swift_release(*(_QWORD *)(a1 + 8));
  return swift_release(*(_QWORD *)(a1 + 24));
}

uint64_t initializeWithCopy for DeletableExtension(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  v4 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 24) = v3;
  swift_retain(v4);
  swift_retain(v3);
  return a1;
}

_QWORD *assignWithCopy for DeletableExtension(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain(v4);
  swift_release(v5);
  v7 = a2[2];
  v6 = a2[3];
  v8 = a1[3];
  a1[2] = v7;
  a1[3] = v6;
  swift_retain(v6);
  swift_release(v8);
  return a1;
}

uint64_t assignWithTake for DeletableExtension(uint64_t a1, _OWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *a2;
  swift_release(v4);
  v5 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = a2[1];
  swift_release(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for DeletableExtension(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DeletableExtension(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DeletableExtension()
{
  return &type metadata for DeletableExtension;
}

uint64_t sub_2AC58()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_2EBC68);
  v2 = swift_getKeyPath(&unk_2EBC90);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

uint64_t sub_2ACC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t KeyPath;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD v61[3];

  v1 = v0;
  v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B20D8);
  __chkstk_darwin(v48);
  v3 = (char *)&v48 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B20E0);
  v5 = *(_QWORD *)(v4 - 8);
  v49 = v4;
  v50 = v5;
  __chkstk_darwin(v4);
  v7 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B20E8);
  v56 = *(_QWORD *)(v53 - 8);
  __chkstk_darwin(v53);
  v9 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B20F0);
  __chkstk_darwin(v60);
  v51 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B20F8);
  __chkstk_darwin(v54);
  v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2100);
  v58 = *(_QWORD *)(v55 - 8);
  __chkstk_darwin(v55);
  v14 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2108);
  v59 = *(_QWORD *)(v57 - 8);
  __chkstk_darwin(v57);
  v52 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(v0 + 16);
  v17 = objc_msgSend((id)objc_opt_self(IMNetworkObserver), "isLikelyToReachRemoteServerWithReachabilityFlags:", objc_msgSend(*(id *)(v16 + 16), "networkReachabilityFlags"));
  v61[0] = v16;
  v18 = sub_3289C();
  v19 = Publisher.eraseToAnyPublisher()(&type metadata for NetworkObserver.NetworkObserverPublisher, v18);
  v61[0] = v19;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2118);
  v21 = swift_allocObject(v20, 33, 7);
  *(_OWORD *)(v21 + 16) = xmmword_2EA0D0;
  *(_BYTE *)(v21 + 32) = v17;
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2120);
  v23 = sub_32914(&qword_3B2128, &qword_3B2120, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.prepend(_:)(v21, v22, v23);
  swift_release(v19);
  swift_bridgeObjectRelease(v21);
  swift_beginAccess(v0 + OBJC_IVAR____TtC8ShelfKit21NetworkObservingItems__value, v61, 33, 0);
  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2030);
  Published.projectedValue.getter(v24);
  swift_endAccess(v61);
  v25 = *(_QWORD *)(v0 + 24);
  v61[0] = v25;
  swift_retain(v25);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B20D0);
  v27 = sub_32914(&qword_3B2130, &qword_3B20D8, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
  v28 = sub_32914(&qword_3B2138, &qword_3B20D0, (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
  Publishers.CombineLatest.init(_:_:)(v3, v61, v48, v26, v27, v28);
  v29 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B1E68);
  v30 = sub_32914(&qword_3B2140, &qword_3B20E0, (uint64_t)&protocol conformance descriptor for Publishers.CombineLatest<A, B>);
  v31 = v49;
  Publisher.map<A>(_:)(sub_2B2D0, 0, v49, v29, v30);
  (*(void (**)(char *, uint64_t))(v50 + 8))(v7, v31);
  KeyPath = swift_getKeyPath(&unk_2EBC68);
  v33 = swift_getKeyPath(&unk_2EBC90);
  static Published.subscript.getter(v61, v1, KeyPath, v33);
  swift_release(KeyPath);
  swift_release(v33);
  v34 = swift_allocObject(&unk_3789D8, 24, 7);
  swift_weakInit(v34 + 16, v1);
  v35 = swift_allocObject(&unk_378A00, 32, 7);
  *(_QWORD *)(v35 + 16) = v34;
  *(_QWORD *)(v35 + 24) = v25;
  v36 = sub_32914(&qword_3B2148, &qword_3B20E8, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  swift_retain(v25);
  v37 = v51;
  v38 = v53;
  Publisher.scan<A>(_:_:)(v61, sub_3290C, v35, v53, v29, v36);
  swift_release(v35);
  swift_bridgeObjectRelease(v61[0]);
  (*(void (**)(char *, uint64_t))(v56 + 8))(v9, v38);
  v39 = sub_32914(&qword_3B2150, &qword_3B20F8, (uint64_t)&protocol conformance descriptor for Publishers.Concatenate<A, B>);
  v40 = sub_32914(&qword_3B2158, &qword_3B20F0, (uint64_t)&protocol conformance descriptor for Publishers.Scan<A, B>);
  Publishers.CombineLatest.init(_:_:)(v12, v37, v54, v60, v39, v40);
  v41 = sub_32914(&qword_3B2160, &qword_3B2100, (uint64_t)&protocol conformance descriptor for Publishers.CombineLatest<A, B>);
  v42 = v52;
  v43 = v55;
  Publisher.map<A>(_:)(sub_2B4CC, 0, v55, v29, v41);
  (*(void (**)(char *, uint64_t))(v58 + 8))(v14, v43);
  v44 = sub_32914(&qword_3B2168, &qword_3B2108, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v45 = v57;
  v46 = Publisher.eraseToAnyPublisher()(v57, v44);
  (*(void (**)(char *, uint64_t))(v59 + 8))(v42, v45);
  return v46;
}

uint64_t sub_2B2D0@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  *a2 = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_2B2DC@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t Strong;
  uint64_t v9;
  char v10;
  uint64_t v11;
  _QWORD v13[3];

  v5 = *a1;
  v6 = *a2;
  v7 = a3 + 16;
  swift_beginAccess(a3 + 16, (char *)v13 + 1, 0, 0);
  Strong = swift_weakLoadStrong(v7);
  if (Strong)
  {
    v9 = Strong;
    CurrentValueSubject.value.getter(v13, Strong);
    if (LOBYTE(v13[0]) == 1)
      v10 = sub_135C0(v5, v6) ^ 1;
    else
      v10 = 0;
    *(_BYTE *)(v9 + 32) = v10 & 1;
    Strong = swift_release(v9);
  }
  CurrentValueSubject.value.getter(v13, Strong);
  if (LOBYTE(v13[0]))
    v11 = v5;
  else
    v11 = v6;
  *a4 = v11;
  return swift_bridgeObjectRetain(v11);
}

_QWORD *sub_2B39C(char a1, uint64_t a2)
{
  uint64_t v2;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  _QWORD *v9;
  char v10;
  char v11;
  uint64_t v12;
  __int128 v14;

  v2 = *(_QWORD *)(a2 + 16);
  if (v2)
  {
    v5 = (char *)(a2 + 32);
    swift_bridgeObjectRetain(a2);
    do
    {
      v10 = *v5;
      v11 = v5[1];
      v12 = *((_QWORD *)v5 + 3);
      if ((a1 & 1) != 0 || v5[1])
      {
        v14 = *(_OWORD *)(v5 + 8);
        swift_bridgeObjectRetain(v12);
        if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
          sub_1807DC(0, _swiftEmptyArrayStorage[2] + 1, 1);
        v7 = _swiftEmptyArrayStorage[2];
        v6 = _swiftEmptyArrayStorage[3];
        v8 = v14;
        if (v7 >= v6 >> 1)
        {
          sub_1807DC(v6 > 1, v7 + 1, 1);
          v8 = v14;
        }
        _swiftEmptyArrayStorage[2] = v7 + 1;
        v9 = &_swiftEmptyArrayStorage[4 * v7];
        *((_BYTE *)v9 + 32) = v10;
        *((_BYTE *)v9 + 33) = v11;
        *(_OWORD *)(v9 + 5) = v8;
        v9[7] = v12;
      }
      v5 += 32;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease(a2);
  }
  return _swiftEmptyArrayStorage;
}

_QWORD *sub_2B4CC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;

  result = sub_2B39C(*(_BYTE *)a1, *(_QWORD *)(a1 + 8));
  *a2 = result;
  return result;
}

uint64_t sub_2B4FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  id v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  _BYTE v11[24];

  v2 = v1;
  v4 = objc_msgSend((id)objc_opt_self(IMNetworkObserver), "sharedInstance");
  v5 = type metadata accessor for NetworkObserver();
  v6 = (_QWORD *)swift_allocObject(v5, 80, 7);
  *(_QWORD *)(v2 + 16) = sub_2BA108(v4, v6);
  *(_BYTE *)(v2 + 32) = 0;
  swift_beginAccess(v2 + OBJC_IVAR____TtC8ShelfKit21NetworkObservingItems__value, v11, 33, 0);
  v10 = a1;
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B1E68);
  Published.init(initialValue:)(&v10, v7);
  swift_endAccess(v11);
  v11[0] = 0;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B20D0);
  swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  *(_QWORD *)(v2 + 24) = CurrentValueSubject.init(_:)(v11);
  return v2;
}

uint64_t sub_2B5F0()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  swift_release(v0[2]);
  swift_release(v0[3]);
  v1 = (char *)v0 + OBJC_IVAR____TtC8ShelfKit21NetworkObservingItems__value;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2030);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_2B654(_QWORD *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  char v23;
  char v24;

  v22 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B1FE8);
  v20 = *(_QWORD *)(v3 - 8);
  v21 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B1FF0);
  v6 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B1FF8);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v14 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v13);
  v15 = sub_31934();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for RecentlySearchedStorage.Item.Scope.CodingKeys, &type metadata for RecentlySearchedStorage.Item.Scope.CodingKeys, v15, v13, v14);
  if ((v22 & 1) != 0)
  {
    v24 = 1;
    v17 = sub_31978();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for RecentlySearchedStorage.Item.Scope.LibraryCodingKeys, &v24, v9, &type metadata for RecentlySearchedStorage.Item.Scope.LibraryCodingKeys, v17);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v5, v21);
  }
  else
  {
    v23 = 0;
    v16 = sub_319BC();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for RecentlySearchedStorage.Item.Scope.StoreCodingKeys, &v23, v9, &type metadata for RecentlySearchedStorage.Item.Scope.StoreCodingKeys, v16);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v19);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

BOOL static EpisodePlayedTextStyle.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_2B844()
{
  _BYTE *v0;

  if (*v0)
    return 0x7972617262696CLL;
  else
    return 0x65726F7473;
}

uint64_t sub_2B87C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_30EA0(a1, a2);
  *a3 = result;
  return result;
}

void sub_2B8A0(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_2B8AC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_31934();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_2B8D4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_31934();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ModernShelf.metricsId(sender:)()
{
  return 0;
}

uint64_t sub_2B908(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_31978();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_2B930(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_31978();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_2B958@<X0>(uint64_t a1@<X1>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = swift_bridgeObjectRelease(a1);
  *a2 = 1;
  return result;
}

uint64_t sub_2B984(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_319BC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_2B9AC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_319BC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_2B9D4@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_30B74(a1);
  if (!v2)
    *a2 = result & 1;
  return result;
}

uint64_t sub_2BA00(_QWORD *a1)
{
  unsigned __int8 *v1;

  return sub_2B654(a1, *v1);
}

uint64_t sub_2BA18()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_2BA40 + 4 * byte_2EBC50[*v0]))(1684957547, 0xE400000000000000);
}

uint64_t sub_2BA40()
{
  return 0x65706F6373;
}

uint64_t sub_2BA54()
{
  return 0x64496D616461;
}

uint64_t sub_2BA68()
{
  return 1684632949;
}

uint64_t sub_2BA74@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_30F88(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2BA98(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_2BCBC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_2BAC0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_2BCBC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t RecentlySearchedStorage.Item.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  _BYTE v23[3];
  _BYTE v24[2];
  char v25;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B1DE0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v21 = v1[1];
  v9 = *((_QWORD *)v1 + 1);
  v19 = *((_QWORD *)v1 + 2);
  v20 = v9;
  v18 = *((_QWORD *)v1 + 3);
  v10 = a1[3];
  v11 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v10);
  v12 = sub_2BCBC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for RecentlySearchedStorage.Item.CodingKeys, &type metadata for RecentlySearchedStorage.Item.CodingKeys, v12, v10, v11);
  v25 = v8;
  v24[1] = 0;
  sub_2BD00();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v25);
  if (!v2)
  {
    v13 = v19;
    v14 = v20;
    v15 = v18;
    v24[0] = v21;
    v23[2] = 1;
    sub_2BD44();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v24);
    v22 = v14;
    v23[1] = 2;
    sub_13E9C();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v22);
    v23[0] = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v13, v15, v23, v4);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_2BCBC()
{
  unint64_t result;

  result = qword_3B1DE8;
  if (!qword_3B1DE8)
  {
    result = swift_getWitnessTable(&unk_2EC000);
    atomic_store(result, (unint64_t *)&qword_3B1DE8);
  }
  return result;
}

unint64_t sub_2BD00()
{
  unint64_t result;

  result = qword_3B1DF0;
  if (!qword_3B1DF0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ModernShelf.ItemKind);
    atomic_store(result, (unint64_t *)&qword_3B1DF0);
  }
  return result;
}

unint64_t sub_2BD44()
{
  unint64_t result;

  result = qword_3B1DF8;
  if (!qword_3B1DF8)
  {
    result = swift_getWitnessTable(&unk_2EBFD8);
    atomic_store(result, (unint64_t *)&qword_3B1DF8);
  }
  return result;
}

uint64_t RecentlySearchedStorage.Item.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  char v13;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[3];
  uint64_t v22;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B1E00);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  v11 = sub_2BCBC();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for RecentlySearchedStorage.Item.CodingKeys, &type metadata for RecentlySearchedStorage.Item.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    BYTE1(v22) = 0;
    sub_2BF84();
    KeyedDecodingContainer.decode<A>(_:forKey:)((uint64_t *)((char *)&v22 + 2), &type metadata for ModernShelf.ItemKind);
    v12 = BYTE2(v22);
    v21[2] = 1;
    sub_2BFC8();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v22, &type metadata for RecentlySearchedStorage.Item.Scope);
    v13 = v22;
    v21[1] = 2;
    sub_14088();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v20, &type metadata for AdamID);
    v19 = v20;
    v21[0] = 3;
    v15 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v21, v5);
    v16 = v8;
    v18 = v17;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v16, v5);
    *(_BYTE *)a2 = v12;
    *(_BYTE *)(a2 + 1) = v13;
    *(_QWORD *)(a2 + 8) = v19;
    *(_QWORD *)(a2 + 16) = v15;
    *(_QWORD *)(a2 + 24) = v18;
  }
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

unint64_t sub_2BF84()
{
  unint64_t result;

  result = qword_3B1E08;
  if (!qword_3B1E08)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ModernShelf.ItemKind);
    atomic_store(result, (unint64_t *)&qword_3B1E08);
  }
  return result;
}

unint64_t sub_2BFC8()
{
  unint64_t result;

  result = qword_3B1E10;
  if (!qword_3B1E10)
  {
    result = swift_getWitnessTable(&unk_2EBFB0);
    atomic_store(result, (unint64_t *)&qword_3B1E10);
  }
  return result;
}

uint64_t sub_2C00C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return RecentlySearchedStorage.Item.init(from:)(a1, a2);
}

uint64_t sub_2C020(_QWORD *a1)
{
  return RecentlySearchedStorage.Item.encode(to:)(a1);
}

uint64_t sub_2C034()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v5;

  v0 = type metadata accessor for OSLogger.Subsystem(0);
  __chkstk_darwin(v0);
  v2 = (char *)&v5 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for OSLogger(0);
  __swift_allocate_value_buffer(v3, qword_3B1DC8);
  __swift_project_value_buffer(v3, (uint64_t)qword_3B1DC8);
  static OSLogger.Subsystem.podcasts.getter();
  return OSLogger.init(subsystem:category:)(v2, 0x7453686372616553, 0xED0000656761726FLL);
}

uint64_t RecentlySearchedStorage.items.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 88);
  KeyPath = swift_getKeyPath(&unk_2EBC68);
  v3 = swift_getKeyPath(&unk_2EBC90);
  v4 = swift_retain(v1);
  static Published.subscript.getter(&v6, v4, KeyPath, v3);
  swift_release(v1);
  swift_release(KeyPath);
  swift_release(v3);
  return v6;
}

uint64_t sub_2C16C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v3 = *(_QWORD *)(*(_QWORD *)a1 + 88);
  KeyPath = swift_getKeyPath(&unk_2EBC68);
  v5 = swift_getKeyPath(&unk_2EBC90);
  v6 = swift_retain(v3);
  static Published.subscript.getter(&v8, v6, KeyPath, v5);
  swift_release(v3);
  swift_release(KeyPath);
  result = swift_release(v5);
  *a2 = v8;
  return result;
}

uint64_t sub_2C1F8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  v2 = *a1;
  v3 = *(_QWORD *)(*(_QWORD *)a2 + 88);
  KeyPath = swift_getKeyPath(&unk_2EBC68);
  v5 = swift_getKeyPath(&unk_2EBC90);
  v7 = v2;
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

uint64_t RecentlySearchedStorage.$items.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 88);
  swift_retain(v1);
  v2 = sub_2ACC8();
  swift_release(v1);
  return v2;
}

uint64_t RecentlySearchedStorage.pauseUpdates.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 88) + 24);
  v2 = swift_retain(v1);
  CurrentValueSubject.value.getter(&v4, v2);
  swift_release(v1);
  return v4;
}

uint64_t sub_2C2F0@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 88) + 24);
  v4 = swift_retain(v3);
  CurrentValueSubject.value.getter(&v6, v4);
  result = swift_release(v3);
  *a2 = v6;
  return result;
}

uint64_t sub_2C340(char *a1, uint64_t a2)
{
  uint64_t v2;
  char v4;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 88) + 24);
  v4 = *a1;
  swift_retain(v2);
  CurrentValueSubject.value.setter(&v4);
  return swift_release(v2);
}

uint64_t RecentlySearchedStorage.pauseUpdates.setter(char a1)
{
  uint64_t v1;
  uint64_t v2;
  char v4;

  v2 = *(_QWORD *)(*(_QWORD *)(v1 + 88) + 24);
  v4 = a1;
  swift_retain(v2);
  CurrentValueSubject.value.setter(&v4);
  return swift_release(v2);
}

uint64_t (*RecentlySearchedStorage.pauseUpdates.modify(uint64_t a1))(_BYTE *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (_QWORD *)(a1 + 9);
  *(_QWORD *)a1 = v1;
  v4 = *(_QWORD *)(*(_QWORD *)(v1 + 88) + 24);
  v5 = swift_retain(v4);
  CurrentValueSubject.value.getter(v3, v5);
  swift_release(v4);
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a1 + 9);
  return sub_2C430;
}

uint64_t sub_2C430(_BYTE *a1)
{
  uint64_t v1;
  _BYTE *v2;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 88) + 24);
  a1[9] = a1[8];
  v2 = a1 + 9;
  swift_retain(v1);
  CurrentValueSubject.value.setter(v2);
  return swift_release(v1);
}

uint64_t RecentlySearchedStorage.hasUnpublishedChanges.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(*(_QWORD *)(v0 + 88) + 32);
}

_QWORD *RecentlySearchedStorage.__allocating_init()()
{
  uint64_t v0;
  id v1;
  id v2;
  id v3;
  _QWORD *v4;
  _QWORD *v5;

  v1 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "_applePodcastsFoundationSharedUserDefaults");
  v2 = objc_msgSend((id)objc_opt_self(MTDB), "sharedInstance");
  v3 = objc_msgSend(v2, "privateQueueContext");

  v4 = (_QWORD *)swift_allocObject(v0, 96, 7);
  v5 = sub_31110((uint64_t)v1, v3, v4);

  return v5;
}

uint64_t sub_2C530()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[2];
  uint64_t v19;
  _QWORD *v20;
  _QWORD aBlock[5];
  uint64_t v22;

  v1 = *v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v19 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18[1] = v0[8];
  v9 = swift_allocObject(&unk_3785E8, 24, 7);
  swift_weakInit(v9 + 16, v0);
  v10 = swift_allocObject(&unk_378938, 32, 7);
  *(_QWORD *)(v10 + 16) = v9;
  *(_QWORD *)(v10 + 24) = v1;
  aBlock[4] = sub_32854;
  v22 = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_2C9F4;
  aBlock[3] = &block_descriptor_38;
  v11 = _Block_copy(aBlock);
  v12 = swift_retain(v9);
  static DispatchQoS.unspecified.getter(v12);
  v20 = _swiftEmptyArrayStorage;
  v13 = sub_F1C0((unint64_t *)&qword_3B4420, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8720);
  v15 = sub_32914((unint64_t *)&qword_3B4430, (uint64_t *)&unk_3B8720, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v20, v14, v15, v2, v13);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v4, v11);
  _Block_release(v11);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v4, v2);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v16 = v22;
  swift_release(v9);
  return swift_release(v16);
}

Swift::Void __swiftcall RecentlySearchedStorage.clear()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[2];
  uint64_t v16;
  _QWORD *v17;
  _QWORD aBlock[5];
  uint64_t v19;

  v1 = type metadata accessor for DispatchWorkItemFlags(0);
  v16 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v3 = (char *)v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchQoS(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15[1] = *(_QWORD *)(v0 + 64);
  v8 = swift_allocObject(&unk_3785E8, 24, 7);
  swift_weakInit(v8 + 16);
  aBlock[4] = sub_3138C;
  v19 = v8;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_2C9F4;
  aBlock[3] = &block_descriptor;
  v9 = _Block_copy(aBlock);
  v10 = swift_retain(v8);
  static DispatchQoS.unspecified.getter(v10);
  v17 = _swiftEmptyArrayStorage;
  v11 = sub_F1C0((unint64_t *)&qword_3B4420, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8720);
  v13 = sub_32914((unint64_t *)&qword_3B4430, (uint64_t *)&unk_3B8720, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v17, v12, v13, v1, v11);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v7, v3, v9);
  _Block_release(v9);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v3, v1);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v14 = v19;
  swift_release(v8);
  swift_release(v14);
}

_QWORD *sub_2C964(uint64_t a1)
{
  uint64_t v1;
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v7[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v7, 0, 0);
  result = (_QWORD *)swift_weakLoadStrong(v1);
  if (result)
  {
    v3 = (uint64_t)result;
    v4 = result[6];
    v5 = result[7];
    __swift_project_boxed_opaque_existential_1(result + 3, v4);
    (*(void (**)(uint64_t, uint64_t))(v5 + 24))(v4, v5);
    v6 = swift_retain(v3);
    sub_31D4C(v6, v3);
    return (_QWORD *)swift_release_n(v3, 2);
  }
  return result;
}

uint64_t sub_2C9F4(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

uint64_t RecentlySearchedStorage.add(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v4;
  uint64_t v5;

  v1 = swift_retain(a1);
  RecentlySearchedStorage.Item.init(_:)(v1, (uint64_t)&v4);
  v2 = v5;
  sub_2CA7C(&v4, 0);
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_2CA7C(char *a1, int a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD aBlock[5];
  uint64_t v34;

  v3 = v2;
  v27 = a2;
  v26 = *v2;
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v31 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v29 = *(_QWORD *)(v8 - 8);
  v30 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *a1;
  v12 = a1[1];
  v13 = *((_QWORD *)a1 + 1);
  v14 = *((_QWORD *)a1 + 2);
  v15 = *((_QWORD *)a1 + 3);
  v28 = v3[8];
  v16 = swift_allocObject(&unk_3785E8, 24, 7);
  swift_weakInit(v16 + 16, v3);
  v17 = swift_allocObject(&unk_378870, 72, 7);
  *(_QWORD *)(v17 + 16) = v16;
  *(_BYTE *)(v17 + 24) = v11;
  *(_BYTE *)(v17 + 25) = v12;
  *(_QWORD *)(v17 + 32) = v13;
  *(_QWORD *)(v17 + 40) = v14;
  *(_QWORD *)(v17 + 48) = v15;
  *(_BYTE *)(v17 + 56) = v27;
  *(_QWORD *)(v17 + 64) = v26;
  aBlock[4] = sub_32770;
  v34 = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_2C9F4;
  aBlock[3] = &block_descriptor_22;
  v18 = _Block_copy(aBlock);
  swift_bridgeObjectRetain(v15);
  v19 = swift_retain(v16);
  static DispatchQoS.unspecified.getter(v19);
  v32 = _swiftEmptyArrayStorage;
  v20 = sub_F1C0((unint64_t *)&qword_3B4420, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8720);
  v22 = sub_32914((unint64_t *)&qword_3B4430, (uint64_t *)&unk_3B8720, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v32, v21, v22, v5, v20);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v7, v18);
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v10, v30);
  v23 = v34;
  swift_release(v16);
  return swift_release(v23);
}

uint64_t RecentlySearchedStorage.remove(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v4;
  uint64_t v5;

  v1 = swift_retain(a1);
  RecentlySearchedStorage.Item.init(_:)(v1, (uint64_t)&v4);
  v2 = v5;
  sub_2CD3C(&v4);
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_2CD3C(char *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v25[2];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD aBlock[5];
  uint64_t v31;

  v2 = v1;
  v25[0] = *v1;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v28 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v26 = *(_QWORD *)(v7 - 8);
  v27 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *a1;
  v11 = a1[1];
  v12 = *((_QWORD *)a1 + 1);
  v13 = *((_QWORD *)a1 + 2);
  v14 = *((_QWORD *)a1 + 3);
  v25[1] = v2[8];
  v15 = swift_allocObject(&unk_3785E8, 24, 7);
  swift_weakInit(v15 + 16, v2);
  v16 = swift_allocObject(&unk_378820, 64, 7);
  *(_QWORD *)(v16 + 16) = v15;
  *(_BYTE *)(v16 + 24) = v10;
  *(_BYTE *)(v16 + 25) = v11;
  *(_QWORD *)(v16 + 32) = v12;
  *(_QWORD *)(v16 + 40) = v13;
  v17 = v25[0];
  *(_QWORD *)(v16 + 48) = v14;
  *(_QWORD *)(v16 + 56) = v17;
  aBlock[4] = sub_31D24;
  v31 = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_2C9F4;
  aBlock[3] = &block_descriptor_13;
  v18 = _Block_copy(aBlock);
  swift_bridgeObjectRetain(v14);
  v19 = swift_retain(v15);
  static DispatchQoS.unspecified.getter(v19);
  v29 = _swiftEmptyArrayStorage;
  v20 = sub_F1C0((unint64_t *)&qword_3B4420, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8720);
  v22 = sub_32914((unint64_t *)&qword_3B4430, (uint64_t *)&unk_3B8720, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v29, v21, v22, v4, v20);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v6, v18);
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v9, v27);
  v23 = v31;
  swift_release(v15);
  return swift_release(v23);
}

uint64_t sub_2CF94(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t result;
  _QWORD *v20;
  void *v21;
  _QWORD *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t KeyPath;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char ***v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int16 v64;
  __int16 v65;
  uint64_t v66;
  _BYTE *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(uint64_t, uint64_t, uint64_t);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  Swift::String v84;
  uint64_t v85;
  _QWORD *v86;
  _QWORD *boxed_opaque_existential_2Tm;
  Swift::String v88;
  _BYTE v89[12];
  int v90;
  uint64_t v91;
  _QWORD *v92;
  _BYTE *v93;
  _BYTE *v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  void (*v98)();
  _QWORD *v99;
  _BYTE *v100;
  uint64_t v101;
  uint64_t v102;
  __int128 v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD aBlock[3];
  void *v109;
  uint64_t (*v110)();
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  char v116[12];
  __int16 v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char v121[8];

  v12 = type metadata accessor for LogMessage.StringInterpolation(0);
  __chkstk_darwin(v12);
  v14 = &v89[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v106 = type metadata accessor for OSLogger(0);
  v15 = *(_QWORD *)(v106 - 8);
  __chkstk_darwin(v106);
  v17 = &v89[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v102 = type metadata accessor for IndexSet(0);
  v101 = *(_QWORD *)(v102 - 8);
  __chkstk_darwin(v102);
  v100 = &v89[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  a1 += 16;
  swift_beginAccess(a1, v121, 0, 0);
  result = swift_weakLoadStrong(a1);
  if (!result)
    return result;
  v20 = (_QWORD *)result;
  v117 = a2 & 0x1FF;
  v118 = a3;
  v119 = a4;
  v120 = a5;
  if ((a2 & 0x100) == 0)
  {
    if (a3 < 0)
    {
      __break(1u);
    }
    else
    {
      v112 = 0;
      v113 = 0;
      v21 = *(void **)(result + 16);
      v22 = (_QWORD *)swift_allocObject(&unk_3788C0, 48, 7);
      v22[2] = &v117;
      v22[3] = v21;
      v22[4] = a3;
      v22[5] = &v112;
      v23 = swift_allocObject(&unk_3788E8, 32, 7);
      *(_QWORD *)(v23 + 16) = sub_327D4;
      *(_QWORD *)(v23 + 24) = v22;
      v99 = v22;
      v110 = sub_327F0;
      v111 = v23;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_D4A2C;
      v109 = &block_descriptor_31;
      v24 = _Block_copy(aBlock);
      v25 = v111;
      swift_bridgeObjectRetain(a5);
      v26 = v21;
      swift_retain(v23);
      swift_release(v25);
      objc_msgSend(v26, "performBlockAndWait:", v24);
      _Block_release(v24);
      LOBYTE(v24) = swift_isEscapingClosureAtFileLocation(v23, "", 144, 217, 55, 1);
      result = swift_release(v23);
      if ((v24 & 1) == 0)
      {
        v27 = v113;
        if (v113)
        {
          v28 = v120;
          HIBYTE(v117) = 1;
          v119 = v112;
          v120 = v113;
          swift_bridgeObjectRetain(v113);
          swift_bridgeObjectRelease(v28);
          v27 = v113;
        }
        swift_bridgeObjectRelease(v27);
        v98 = sub_327D4;
        goto LABEL_9;
      }
    }
    __break(1u);
    return result;
  }
  swift_bridgeObjectRetain(a5);
  v98 = 0;
  v99 = 0;
LABEL_9:
  v29 = v20[11];
  KeyPath = swift_getKeyPath(&unk_2EBC68);
  v31 = swift_getKeyPath(&unk_2EBC90);
  v32 = swift_retain(v29);
  static Published.subscript.getter(aBlock, v32, KeyPath, v31);
  swift_release(v29);
  swift_release(KeyPath);
  swift_release(v31);
  v33 = aBlock[0];
  v112 = aBlock[0];
  v34 = *(_QWORD *)(aBlock[0] + 16);
  v35 = &off_3B0000;
  if (!v34)
  {
    v60 = 0;
    goto LABEL_37;
  }
  v90 = a6;
  v92 = v20;
  v93 = v14;
  v94 = v17;
  v95 = v15;
  v107 = v118;
  v36 = v120;
  v105 = v119;
  swift_bridgeObjectRetain(aBlock[0]);
  swift_bridgeObjectRetain(v36);
  v37 = 0;
  v91 = v33;
  v38 = (unint64_t *)(v33 + 56);
  v103 = xmmword_2EA0D0;
  v97 = (unint64_t)"Division by zero";
  v96 = 0x800000000030A380;
  v104 = v34;
  while (1)
  {
    v39 = *(v38 - 2);
    v40 = *(v38 - 1);
    v41 = *v38;
    swift_bridgeObjectRetain_n(*v38, 2);
    if ((AdamID.isEmpty.getter(v39) & 1) != 0)
    {
      if (v41)
      {
        v42 = v41;
      }
      else
      {
        if (v35[8] != (char **)-1)
          swift_once(&qword_3B0040, sub_2C034);
        v45 = v106;
        __swift_project_value_buffer(v106, (uint64_t)qword_3B1DC8);
        v46 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0B10);
        v47 = type metadata accessor for LogMessage(0);
        v48 = swift_allocObject(v46, ((*(unsigned __int8 *)(*(_QWORD *)(v47 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v47 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v47 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v47 - 8) + 80) | 7);
        *(_OWORD *)(v48 + 16) = v103;
        LogMessage.init(stringLiteral:)(0xD00000000000002ELL, v96);
        Logger.warning(_:)(v48, v45, &protocol witness table for OSLogger);
        swift_bridgeObjectRelease(0);
        swift_bridgeObjectRelease(v48);
        v40 = 0x656E696665646E75;
        v42 = 0xE900000000000064;
        v34 = v104;
      }
    }
    else
    {
      aBlock[0] = v39;
      v43 = sub_144B4();
      v40 = BinaryInteger.description.getter(&type metadata for UInt64, v43);
      v42 = v44;
      swift_bridgeObjectRelease(v41);
    }
    swift_bridgeObjectRetain(v36);
    v49 = v107;
    if ((AdamID.isEmpty.getter(v107) & 1) != 0)
    {
      v50 = v105;
      v51 = v36;
      if (!v36)
      {
        if (v35[8] != (char **)-1)
          swift_once(&qword_3B0040, sub_2C034);
        v52 = v106;
        __swift_project_value_buffer(v106, (uint64_t)qword_3B1DC8);
        v53 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0B10);
        v54 = type metadata accessor for LogMessage(0);
        v55 = swift_allocObject(v53, ((*(unsigned __int8 *)(*(_QWORD *)(v54 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v54 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v54 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v54 - 8) + 80) | 7);
        *(_OWORD *)(v55 + 16) = v103;
        LogMessage.init(stringLiteral:)(0xD00000000000002ELL, v97 | 0x8000000000000000);
        Logger.warning(_:)(v55, v52, &protocol witness table for OSLogger);
        swift_bridgeObjectRelease(0);
        swift_bridgeObjectRelease(v55);
        v50 = 0x656E696665646E75;
        v51 = 0xE900000000000064;
        v35 = &off_3B0000;
        v34 = v104;
      }
      if (v40 != v50)
        goto LABEL_27;
    }
    else
    {
      aBlock[0] = v49;
      v56 = sub_144B4();
      v50 = BinaryInteger.description.getter(&type metadata for UInt64, v56);
      v51 = v57;
      swift_bridgeObjectRelease(v36);
      if (v40 != v50)
        goto LABEL_27;
    }
    if (v42 == v51)
    {
      swift_bridgeObjectRelease(v91);
      swift_bridgeObjectRelease(v36);
      swift_bridgeObjectRelease(v41);
      swift_bridgeObjectRelease(v42);
      goto LABEL_33;
    }
LABEL_27:
    v58 = _stringCompareWithSmolCheck(_:_:expecting:)(v40, v42, v50, v51, 0);
    swift_bridgeObjectRelease(v41);
    swift_bridgeObjectRelease(v42);
    swift_bridgeObjectRelease(v51);
    if ((v58 & 1) != 0)
      break;
    v38 += 4;
    if (v34 == ++v37)
    {
      swift_bridgeObjectRelease(v91);
      swift_bridgeObjectRelease(v36);
      v60 = 0;
      goto LABEL_36;
    }
  }
  swift_bridgeObjectRelease(v91);
  v42 = v36;
LABEL_33:
  v59 = v90;
  swift_bridgeObjectRelease(v42);
  sub_2D2644(v37, (uint64_t)aBlock);
  swift_bridgeObjectRelease(v109);
  if ((v59 & 1) != 0)
    v60 = v37;
  else
    v60 = 0;
LABEL_36:
  v15 = v95;
  v17 = v94;
  v14 = v93;
  v20 = v92;
LABEL_37:
  if (*(_QWORD *)(v112 + 16) < v60)
  {
    __break(1u);
    swift_once(&qword_3B0040, sub_2C034);
    v79 = v106;
    v80 = __swift_project_value_buffer(v106, (uint64_t)qword_3B1DC8);
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v15 + 16))(v17, v80, v79);
    v81 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0B10);
    v82 = type metadata accessor for LogMessage(0);
    v83 = swift_allocObject(v81, ((*(unsigned __int8 *)(*(_QWORD *)(v82 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v82 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v82 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v82 - 8) + 80) | 7);
    *(_OWORD *)(v83 + 16) = xmmword_2EA0D0;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(41, 1);
    v84._countAndFlagsBits = 0xD000000000000029;
    v84._object = (void *)0x800000000030ACE0;
    LogMessage.StringInterpolation.appendLiteral(_:)(v84);
    swift_getErrorValue(v60, v116, &v114);
    v85 = v114;
    v86 = v115;
    v109 = v115;
    boxed_opaque_existential_2Tm = __swift_allocate_boxed_opaque_existential_2Tm(aBlock);
    (*(void (**)(_QWORD *, uint64_t, _QWORD *))(*(v86 - 1) + 16))(boxed_opaque_existential_2Tm, v85, v86);
    LogMessage.StringInterpolation.appendInterpolation(safe:)(aBlock);
    sub_298FC((uint64_t)aBlock);
    v88._countAndFlagsBits = 0;
    v88._object = (void *)0xE000000000000000;
    LogMessage.StringInterpolation.appendLiteral(_:)(v88);
    LogMessage.init(stringInterpolation:)(v14);
    Logger.error(_:)(v83, v79, &protocol witness table for OSLogger);
    swift_bridgeObjectRelease(v83);
    swift_errorRelease(v60);
    swift_release(v20);
    (*(void (**)(_BYTE *, uint64_t))(v15 + 8))(v17, v79);
  }
  else
  {
    v62 = v119;
    v61 = v120;
    v63 = v118;
    if (HIBYTE(v117))
      v64 = 256;
    else
      v64 = 0;
    v65 = v64 | v117;
    swift_bridgeObjectRetain(v120);
    sub_6A6EC(v60, v60, v65, v63, v62, v61);
    v66 = v112;
    if (*(_QWORD *)(v112 + 16) >= 0x15uLL)
    {
      v67 = v100;
      IndexSet.init(integersIn:)(20);
      v68 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B1E68);
      v69 = sub_32914(&qword_3B20A0, (uint64_t *)&unk_3B1E68, (uint64_t)&protocol conformance descriptor for [A]);
      v70 = sub_32914(&qword_3B20A8, (uint64_t *)&unk_3B1E68, (uint64_t)&protocol conformance descriptor for [A]);
      RangeReplaceableCollection<>.remove(atOffsets:)(v67, v68, v69, v70);
      (*(void (**)(_BYTE *, uint64_t))(v101 + 8))(v67, v102);
      v66 = v112;
    }
    v71 = v20[11];
    v72 = swift_getKeyPath(&unk_2EBC68);
    v73 = swift_getKeyPath(&unk_2EBC90);
    aBlock[0] = v66;
    swift_bridgeObjectRetain(v66);
    swift_retain(v71);
    static Published.subscript.setter(aBlock, v71, v72, v73);
    v74 = v20[6];
    v75 = v20[7];
    __swift_project_boxed_opaque_existential_1(v20 + 3, v74);
    v76 = v112;
    v77 = *(void (**)(uint64_t, uint64_t, uint64_t))(v75 + 16);
    v78 = swift_bridgeObjectRetain(v112);
    v77(v78, v74, v75);
    swift_bridgeObjectRelease(v76);
    sub_2DBF0(v76);
    swift_bridgeObjectRelease(v76);
    swift_release(v20);
  }
  swift_bridgeObjectRelease(v120);
  return sub_327A0((uint64_t)v98, (uint64_t)v99);
}

void sub_2DA40(unsigned __int8 *a1, id a2, uint64_t a3, uint64_t *a4)
{
  int v5;
  id v6;
  id v7;
  void *v8;
  unsigned __int8 v9;
  id v10;
  void *v11;
  unsigned __int8 v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  id v20;

  v5 = *a1;
  if (v5 == 60)
  {
    v18 = objc_msgSend(a2, "podcastForStoreId:");
    if (v18)
    {
      v20 = v18;
      if ((objc_msgSend(v18, "isImplicitlyFollowed") & 1) == 0
        && objc_msgSend(v20, "subscribed"))
      {
        v13 = objc_msgSend(v20, "uuid");
        if (v13)
          goto LABEL_9;
        goto LABEL_14;
      }
      goto LABEL_17;
    }
  }
  else if (v5 == 61)
  {
    v6 = objc_msgSend(a2, "episodeForStoreTrackID:");
    if (v6)
    {
      v20 = v6;
      v7 = objc_msgSend(v6, "podcast");
      if (!v7
        || (v8 = v7, v9 = objc_msgSend(v7, "isImplicitlyFollowed"), v8, (v9 & 1) == 0))
      {
        v10 = objc_msgSend(v20, "podcast");
        if (v10)
        {
          v11 = v10;
          v12 = objc_msgSend(v10, "subscribed");

          if ((v12 & 1) != 0)
          {
            v13 = objc_msgSend(v20, "uuid");
            if (v13)
            {
LABEL_9:
              v14 = v13;
              v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
              v17 = v16;

LABEL_15:
              v19 = a4[1];
              *a4 = v15;
              a4[1] = v17;
              swift_bridgeObjectRelease(v19);
              return;
            }
LABEL_14:

            v15 = 0;
            v17 = 0;
            goto LABEL_15;
          }
        }
      }
LABEL_17:

    }
  }
}

uint64_t sub_2DBF0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  Class isa;
  id v55;
  uint64_t v56;
  void *v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  unsigned __int8 v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v82;
  char v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  Class v106;
  id v107;
  uint64_t v108;
  void *v109;
  id v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  _QWORD *v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  _QWORD v139[3];
  char v140[24];
  char v141[32];

  v136 = a1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2058);
  v129 = *(_QWORD *)(v2 - 8);
  v130 = v2;
  __chkstk_darwin(v2);
  v128 = (char *)&v125 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2060);
  v133 = *(_QWORD *)(v4 - 8);
  v134 = v4;
  __chkstk_darwin(v4);
  v131 = (char *)&v125 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (_QWORD *)(v1 + 72);
  swift_beginAccess(v1 + 72, v141, 1, 0);
  v7 = *(_QWORD *)(v1 + 72);
  v8 = (_QWORD *)(v1 + 80);
  swift_beginAccess(v1 + 80, v140, 1, 0);
  v132 = v1;
  v9 = *(_QWORD *)(v1 + 80);
  v139[0] = _swiftEmptyArrayStorage;
  swift_bridgeObjectRetain_n(v7, 2);
  swift_bridgeObjectRetain(v9);
  sub_1E3CEC(v7);
  sub_1E3CEC(v9);
  swift_bridgeObjectRelease(v7);
  v10 = v139[0];
  if (v139[0] >> 62)
  {
    if (v139[0] < 0)
      v122 = v139[0];
    else
      v122 = v139[0] & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v139[0]);
    result = _CocoaArrayWrapper.endIndex.getter(v122);
    v11 = result;
    if (!result)
      goto LABEL_6;
  }
  else
  {
    v11 = *(_QWORD *)((char *)&dword_10 + (v139[0] & 0xFFFFFFFFFFFFF8));
    result = swift_bridgeObjectRetain(v139[0]);
    if (!v11)
      goto LABEL_6;
  }
  if (v11 < 1)
  {
    __break(1u);
    return result;
  }
  v13 = (uint64_t *)(v10 + 32);
  do
  {
    v14 = *v13++;
    swift_retain(v14);
    AnyCancellable.cancel()();
    swift_release(v14);
    --v11;
  }
  while (v11);
LABEL_6:
  swift_bridgeObjectRelease_n(v10, 2);
  v15 = *v6;
  *v6 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease(v15);
  v16 = *v8;
  *v8 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease(v16);
  v17 = v136;
  v139[0] = v136;
  v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B1E68);
  v19 = sub_32914(&qword_3B2068, (uint64_t *)&unk_3B1E68, (uint64_t)&protocol conformance descriptor for [A]);
  v135 = v18;
  result = Collection.isNotEmpty.getter(v18, v19);
  if ((result & 1) != 0)
  {
    v125 = v6;
    v20 = *(_QWORD *)(v17 + 16);
    v127 = v19;
    v126 = v8;
    if (v20)
    {
      v21 = v17 + 32;
      swift_bridgeObjectRetain(v17);
      v22 = _swiftEmptyArrayStorage;
      v23 = v20;
      v137 = v20;
      while (1)
      {
        v24 = v22;
        v25 = *(_BYTE *)v21;
        v138 = *(unsigned __int8 *)(v21 + 1);
        v27 = *(_QWORD *)(v21 + 8);
        v26 = *(_QWORD *)(v21 + 16);
        v28 = *(_QWORD *)(v21 + 24);
        v29 = ModernShelf.ItemKind.rawValue.getter(v25);
        if (v29 == 0x6853686372616573 && v30 == 0xEA0000000000776FLL)
          break;
        v32 = v30;
        v33 = _stringCompareWithSmolCheck(_:_:expecting:)(v29, v30, 0x6853686372616573, 0xEA0000000000776FLL, 0);
        swift_bridgeObjectRetain(v28);
        v34 = swift_bridgeObjectRelease(v32);
        if ((v33 & 1) != 0)
          goto LABEL_18;
        swift_bridgeObjectRelease(v28);
        v22 = v24;
LABEL_10:
        v21 += 32;
        if (!--v23)
        {
          v17 = v136;
          swift_bridgeObjectRelease(v136);
          v8 = v126;
          v19 = v127;
          goto LABEL_26;
        }
      }
      swift_bridgeObjectRetain(v28);
      v34 = swift_bridgeObjectRelease(0xEA0000000000776FLL);
LABEL_18:
      v22 = v24;
      if (v27 == static AdamID.empty.getter(v34))
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v24);
        v139[0] = v24;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_1807DC(0, v24[2] + 1, 1);
          v22 = (_QWORD *)v139[0];
        }
        v37 = v22[2];
        v36 = v22[3];
        if (v37 >= v36 >> 1)
        {
          sub_1807DC(v36 > 1, v37 + 1, 1);
          v22 = (_QWORD *)v139[0];
        }
        v22[2] = v37 + 1;
        v38 = &v22[4 * v37];
        *((_BYTE *)v38 + 32) = v25;
        *((_BYTE *)v38 + 33) = v138;
        v38[5] = v27;
        v38[6] = v26;
        v38[7] = v28;
        v20 = v137;
      }
      else
      {
        swift_bridgeObjectRelease(v28);
      }
      goto LABEL_10;
    }
    v22 = _swiftEmptyArrayStorage;
LABEL_26:
    v139[0] = v22;
    v39 = (uint64_t)v22;
    if ((Collection.isNotEmpty.getter(v135, v19) & 1) != 0)
    {
      v40 = v22[2];
      if (v40)
      {
        swift_retain(v22);
        v41 = v22;
        v42 = v22 + 7;
        v43 = _swiftEmptyArrayStorage;
        do
        {
          v45 = *v42;
          if (*v42)
          {
            v46 = *(v42 - 1);
            swift_bridgeObjectRetain(*v42);
            if ((swift_isUniquelyReferenced_nonNull_native(v43) & 1) == 0)
              v43 = sub_10644(0, v43[2] + 1, 1, v43);
            v48 = v43[2];
            v47 = v43[3];
            if (v48 >= v47 >> 1)
              v43 = sub_10644((_QWORD *)(v47 > 1), v48 + 1, 1, v43);
            v43[2] = v48 + 1;
            v44 = &v43[2 * v48];
            v44[4] = v46;
            v44[5] = v45;
          }
          v42 += 4;
          --v40;
        }
        while (v40);
        v39 = (uint64_t)v41;
        swift_release(v41);
      }
      else
      {
        v43 = _swiftEmptyArrayStorage;
      }
      swift_release(v39);
      v49 = sub_2CF528((uint64_t)v43);
      swift_bridgeObjectRelease(v43);
      v50 = static String._unconditionallyBridgeFromObjectiveC(_:)(kMTPodcastEntityName);
      v52 = v51;
      v53 = (void *)objc_opt_self(MTPodcast);
      isa = Set._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v49);
      v55 = objc_msgSend(v53, "predicateForHiddenPodcastUuids:", isa);

      v56 = v132;
      v57 = *(void **)(v132 + 16);
      sub_327F8(0, (unint64_t *)&qword_3B8710, OS_dispatch_queue_ptr);
      v58 = v57;
      v59 = static OS_dispatch_queue.main.getter();
      v60 = sub_327F8(0, &qword_3B2070, NSManagedObject_ptr);
      v123 = v59;
      v61 = v128;
      FetchedResultsListPublisher.init(identifier:entityName:predicate:sortDescriptors:pageSize:managedObjectContext:receiveOn:transform:updateRequiredComparator:)(0xD000000000000026, 0x800000000030ACB0, v50, v52, v55, _swiftEmptyArrayStorage, 20, v58, v123, sub_2FA1C, 0, Paragraph.reloadOnClick.getter, 0, &type metadata for RecentlySearchedStorage.Item, v60);
      v62 = sub_32914(&qword_3B2078, &qword_3B2058, (uint64_t)&protocol conformance descriptor for FetchedResultsListPublisher<A, B>);
      v63 = v130;
      v64 = v131;
      Publisher.map<A>(_:)(sub_32C38, 0, v130, v135, v62);
      (*(void (**)(char *, uint64_t))(v129 + 8))(v61, v63);
      v65 = swift_allocObject(&unk_3785E8, 24, 7);
      swift_weakInit(v65 + 16, v56);
      v66 = sub_32914(&qword_3B2080, &qword_3B2060, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
      v67 = v134;
      v39 = Publisher<>.sink(receiveValue:)(sub_32718, v65, v134, v66);
      swift_release(v65);
      (*(void (**)(char *, uint64_t))(v133 + 8))(v64, v67);
      v68 = v125;
      swift_beginAccess(v125, v139, 33, 0);
      v69 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2088);
      v70 = sub_32914(&qword_3B2090, &qword_3B2088, (uint64_t)&protocol conformance descriptor for [A]);
      AnyCancellable.store<A>(in:)(v68, v69, v70);
      swift_endAccess(v139);
      v17 = v136;
      v19 = v127;
    }
    swift_release(v39);
    if (v20)
    {
      v71 = v17 + 32;
      swift_bridgeObjectRetain(v17);
      v72 = _swiftEmptyArrayStorage;
      while (1)
      {
        v73 = v72;
        v74 = *(_BYTE *)v71;
        v75 = *(_BYTE *)(v71 + 1);
        v76 = *(_QWORD *)(v71 + 8);
        v77 = *(_QWORD *)(v71 + 16);
        v78 = *(_QWORD *)(v71 + 24);
        v79 = ModernShelf.ItemKind.rawValue.getter(*(_BYTE *)v71);
        if (v79 == 0x7045686372616573 && v80 == 0xED000065646F7369)
          break;
        v82 = v80;
        v83 = _stringCompareWithSmolCheck(_:_:expecting:)(v79, v80, 0x7045686372616573, 0xED000065646F7369, 0);
        swift_bridgeObjectRetain(v78);
        v84 = swift_bridgeObjectRelease(v82);
        if ((v83 & 1) != 0)
          goto LABEL_50;
        swift_bridgeObjectRelease(v78);
        v72 = v73;
LABEL_42:
        v71 += 32;
        if (!--v20)
        {
          swift_bridgeObjectRelease(v136);
          v8 = v126;
          v19 = v127;
          goto LABEL_58;
        }
      }
      swift_bridgeObjectRetain(v78);
      v84 = swift_bridgeObjectRelease(0xED000065646F7369);
LABEL_50:
      v72 = v73;
      if (v76 == static AdamID.empty.getter(v84))
      {
        v85 = swift_isUniquelyReferenced_nonNull_native(v73);
        v139[0] = v73;
        v86 = v20;
        if ((v85 & 1) == 0)
        {
          sub_1807DC(0, v72[2] + 1, 1);
          v72 = (_QWORD *)v139[0];
        }
        v88 = v72[2];
        v87 = v72[3];
        if (v88 >= v87 >> 1)
        {
          sub_1807DC(v87 > 1, v88 + 1, 1);
          v72 = (_QWORD *)v139[0];
        }
        v72[2] = v88 + 1;
        v89 = &v72[4 * v88];
        *((_BYTE *)v89 + 32) = v74;
        *((_BYTE *)v89 + 33) = v75;
        v89[5] = v76;
        v89[6] = v77;
        v89[7] = v78;
        v20 = v86;
      }
      else
      {
        swift_bridgeObjectRelease(v78);
      }
      goto LABEL_42;
    }
    v72 = _swiftEmptyArrayStorage;
LABEL_58:
    v139[0] = v72;
    v90 = (uint64_t)v72;
    if ((Collection.isNotEmpty.getter(v135, v19) & 1) != 0)
    {
      v91 = v72[2];
      if (v91)
      {
        v92 = swift_retain(v72);
        v93 = (_QWORD *)(v92 + 56);
        v94 = _swiftEmptyArrayStorage;
        do
        {
          v96 = *v93;
          if (*v93)
          {
            v97 = *(v93 - 1);
            swift_bridgeObjectRetain(*v93);
            if ((swift_isUniquelyReferenced_nonNull_native(v94) & 1) == 0)
              v94 = sub_10644(0, v94[2] + 1, 1, v94);
            v99 = v94[2];
            v98 = v94[3];
            if (v99 >= v98 >> 1)
              v94 = sub_10644((_QWORD *)(v98 > 1), v99 + 1, 1, v94);
            v94[2] = v99 + 1;
            v95 = &v94[2 * v99];
            v95[4] = v97;
            v95[5] = v96;
          }
          v93 += 4;
          --v91;
        }
        while (v91);
        v100 = (_QWORD *)v92;
        swift_release(v92);
      }
      else
      {
        v100 = v72;
        v94 = _swiftEmptyArrayStorage;
      }
      swift_release(v100);
      v101 = sub_2CF528((uint64_t)v94);
      swift_bridgeObjectRelease(v94);
      v102 = static String._unconditionallyBridgeFromObjectiveC(_:)(kMTEpisodeEntityName);
      v104 = v103;
      v105 = (void *)objc_opt_self(MTEpisode);
      v106 = Set._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v101);
      v107 = objc_msgSend(v105, "predicateForHiddenPodcastForEpisodeUuids:", v106);

      v108 = v132;
      v109 = *(void **)(v132 + 16);
      sub_327F8(0, (unint64_t *)&qword_3B8710, OS_dispatch_queue_ptr);
      v110 = v109;
      v111 = static OS_dispatch_queue.main.getter();
      v112 = sub_327F8(0, &qword_3B2070, NSManagedObject_ptr);
      v124 = v111;
      v113 = v128;
      FetchedResultsListPublisher.init(identifier:entityName:predicate:sortDescriptors:pageSize:managedObjectContext:receiveOn:transform:updateRequiredComparator:)(0xD000000000000029, 0x800000000030AC80, v102, v104, v107, _swiftEmptyArrayStorage, 20, v110, v124, sub_2FA2C, 0, Paragraph.reloadOnClick.getter, 0, &type metadata for RecentlySearchedStorage.Item, v112);
      v114 = sub_32914(&qword_3B2078, &qword_3B2058, (uint64_t)&protocol conformance descriptor for FetchedResultsListPublisher<A, B>);
      v115 = v130;
      v116 = v131;
      Publisher.map<A>(_:)(sub_2FAD4, 0, v130, v135, v114);
      (*(void (**)(char *, uint64_t))(v129 + 8))(v113, v115);
      v117 = swift_allocObject(&unk_3785E8, 24, 7);
      swift_weakInit(v117 + 16, v108);
      v118 = sub_32914(&qword_3B2080, &qword_3B2060, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
      v119 = v134;
      v90 = Publisher<>.sink(receiveValue:)(sub_32718, v117, v134, v118);
      swift_release(v117);
      (*(void (**)(char *, uint64_t))(v133 + 8))(v116, v119);
      swift_beginAccess(v8, v139, 33, 0);
      v120 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2088);
      v121 = sub_32914(&qword_3B2090, &qword_3B2088, (uint64_t)&protocol conformance descriptor for [A]);
      AnyCancellable.store<A>(in:)(v8, v120, v121);
      swift_endAccess(v139);
    }
    return swift_release(v90);
  }
  return result;
}

uint64_t sub_2E834(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t result;
  _QWORD *v18;
  uint64_t v19;
  uint64_t KeyPath;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  Swift::String v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *boxed_opaque_existential_2Tm;
  Swift::String v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48[8];
  _QWORD v49[5];
  uint64_t v50;
  char v51[24];

  v10 = type metadata accessor for LogMessage.StringInterpolation(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for OSLogger(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  a1 += 16;
  swift_beginAccess(a1, v51, 0, 0);
  result = swift_weakLoadStrong(a1);
  if (result)
  {
    v18 = (_QWORD *)result;
    v44 = v16;
    v45 = v14;
    v19 = *(_QWORD *)(result + 88);
    KeyPath = swift_getKeyPath(&unk_2EBC68);
    v21 = swift_getKeyPath(&unk_2EBC90);
    v22 = swift_retain(v19);
    static Published.subscript.getter(v49, v22, KeyPath, v21);
    swift_release(v19);
    swift_release(KeyPath);
    swift_release(v21);
    v50 = v49[0];
    swift_bridgeObjectRetain(a5);
    v23 = sub_31F34((uint64_t)&v50, a2 & 0x1FF, a3, a4, a5);
    swift_bridgeObjectRelease(a5);
    v24 = *(_QWORD *)(v50 + 16);
    if (v24 < v23)
    {
      __break(1u);
      swift_once(&qword_3B0040, sub_2C034);
      v31 = __swift_project_value_buffer(v13, (uint64_t)qword_3B1DC8);
      v33 = v44;
      v32 = v45;
      (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v44, v31, v13);
      v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0B10);
      v35 = type metadata accessor for LogMessage(0);
      v36 = swift_allocObject(v34, ((*(unsigned __int8 *)(*(_QWORD *)(v35 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v35 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v35 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v35 - 8) + 80) | 7);
      *(_OWORD *)(v36 + 16) = xmmword_2EA0D0;
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(46, 1);
      v37._object = (void *)0x800000000030AC50;
      v37._countAndFlagsBits = 0xD00000000000002ELL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v37);
      swift_getErrorValue(0, v48, &v46);
      v38 = v46;
      v39 = v47;
      v49[3] = v47;
      boxed_opaque_existential_2Tm = __swift_allocate_boxed_opaque_existential_2Tm(v49);
      (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 16))(boxed_opaque_existential_2Tm, v38, v39);
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v49);
      sub_298FC((uint64_t)v49);
      v41._countAndFlagsBits = 0;
      v41._object = (void *)0xE000000000000000;
      LogMessage.StringInterpolation.appendLiteral(_:)(v41);
      LogMessage.init(stringInterpolation:)(v12);
      Logger.error(_:)(v36, v13, &protocol witness table for OSLogger);
      swift_bridgeObjectRelease(v36);
      swift_errorRelease(0);
      swift_release(v18);
      (*(void (**)(char *, uint64_t))(v32 + 8))(v33, v13);
      v28 = v50;
    }
    else
    {
      sub_6B554(v23, v24);
      v25 = swift_retain(v18);
      sub_31E3C(v25, (uint64_t)v18, &v50);
      swift_release(v18);
      v26 = v18[6];
      v27 = v18[7];
      __swift_project_boxed_opaque_existential_1(v18 + 3, v26);
      v28 = v50;
      v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 16);
      v30 = swift_bridgeObjectRetain(v50);
      v29(v30, v26, v27);
      swift_bridgeObjectRelease(v28);
      v42 = swift_bridgeObjectRetain(v28);
      sub_2DBF0(v42);
      swift_bridgeObjectRelease(v28);
      swift_release(v18);
    }
    return swift_bridgeObjectRelease(v28);
  }
  return result;
}

_QWORD *sub_2EBD4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t KeyPath;
  uint64_t v11;
  uint64_t v12[3];
  _BYTE v13[24];

  v2 = type metadata accessor for LogMessage.StringInterpolation(0);
  __chkstk_darwin(v2);
  v3 = type metadata accessor for OSLogger(0);
  __chkstk_darwin(v3);
  a1 += 16;
  swift_beginAccess(a1, v13, 0, 0);
  result = (_QWORD *)swift_weakLoadStrong(a1);
  if (result)
  {
    v5 = result;
    v6 = result[6];
    v7 = result[7];
    __swift_project_boxed_opaque_existential_1(result + 3, v6);
    v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v6, v7);
    sub_2DBF0(v8);
    v9 = v5[11];
    KeyPath = swift_getKeyPath(&unk_2EBC68);
    v11 = swift_getKeyPath(&unk_2EBC90);
    v12[0] = v8;
    swift_retain(v9);
    static Published.subscript.setter(v12, v9, KeyPath, v11);
    sub_2EF00();
    return (_QWORD *)swift_release(v5);
  }
  return result;
}

void sub_2EF00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  uint64_t v15;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  unsigned __int8 v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  char v30;
  char v31;
  char v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  unsigned __int8 v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  char v45;
  char v46;
  unint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  void *v50;
  uint64_t v51;
  _QWORD *v52;
  void *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD aBlock[5];
  _QWORD *v61;

  v1 = v0;
  v2 = *(_QWORD *)(v0 + 88);
  KeyPath = swift_getKeyPath(&unk_2EBC68);
  v4 = swift_getKeyPath(&unk_2EBC90);
  v5 = swift_retain(v2);
  static Published.subscript.getter(aBlock, v5, KeyPath, v4);
  swift_release(v2);
  swift_release(KeyPath);
  swift_release(v4);
  v6 = aBlock[0];
  v7 = *(_QWORD *)(aBlock[0] + 16);
  if (v7)
  {
    v8 = aBlock[0] + 32;
    v9 = _swiftEmptyArrayStorage;
    do
    {
      if (*(_BYTE *)(v8 + 1) == 1)
      {
        v14 = *(_BYTE *)v8;
        v57 = *(_OWORD *)(v8 + 8);
        v15 = *(_QWORD *)(v8 + 24);
        swift_bridgeObjectRetain(v15);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v9);
        aBlock[0] = v9;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_1807DC(0, v9[2] + 1, 1);
          v9 = (_QWORD *)aBlock[0];
        }
        v11 = v9[2];
        v10 = v9[3];
        v12 = v9;
        if (v11 >= v10 >> 1)
        {
          sub_1807DC(v10 > 1, v11 + 1, 1);
          v12 = (_QWORD *)aBlock[0];
        }
        v12[2] = v11 + 1;
        v13 = &v12[4 * v11];
        *((_BYTE *)v13 + 32) = v14;
        *((_BYTE *)v13 + 33) = 1;
        *(_OWORD *)(v13 + 5) = v57;
        v13[7] = v15;
        v9 = v12;
      }
      v8 += 32;
      --v7;
    }
    while (v7);
  }
  else
  {
    v9 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease(v6);
  v17 = v9[2];
  if (!v17)
  {
    v19 = _swiftEmptyArrayStorage;
    v36 = _swiftEmptyArrayStorage;
    goto LABEL_44;
  }
  v54 = v1;
  v55 = v9;
  v18 = v9 + 4;
  swift_retain(v9);
  v19 = _swiftEmptyArrayStorage;
  v20 = v9 + 4;
  v21 = v17;
  do
  {
    v23 = *(_BYTE *)v20;
    v24 = *((_BYTE *)v20 + 1);
    v25 = v20[3];
    v56 = v20[2];
    v58 = v20[1];
    v26 = ModernShelf.ItemKind.rawValue.getter(*(_BYTE *)v20);
    if (v26 == 0x6853686372616573 && v27 == 0xEA0000000000776FLL)
    {
      swift_bridgeObjectRetain(v25);
      swift_bridgeObjectRelease(0xEA0000000000776FLL);
    }
    else
    {
      v29 = v27;
      v30 = _stringCompareWithSmolCheck(_:_:expecting:)(v26, v27, 0x6853686372616573, 0xEA0000000000776FLL, 0);
      swift_bridgeObjectRetain(v25);
      swift_bridgeObjectRelease(v29);
      if ((v30 & 1) == 0)
      {
        swift_bridgeObjectRelease(v25);
        v22 = v19;
        goto LABEL_14;
      }
    }
    v22 = v19;
    v31 = swift_isUniquelyReferenced_nonNull_native(v19);
    aBlock[0] = v19;
    v32 = v24;
    if ((v31 & 1) == 0)
    {
      sub_1807DC(0, v22[2] + 1, 1);
      v22 = (_QWORD *)aBlock[0];
    }
    v34 = v22[2];
    v33 = v22[3];
    if (v34 >= v33 >> 1)
    {
      sub_1807DC(v33 > 1, v34 + 1, 1);
      v22 = (_QWORD *)aBlock[0];
    }
    v22[2] = v34 + 1;
    v35 = &v22[4 * v34];
    *((_BYTE *)v35 + 32) = v23;
    *((_BYTE *)v35 + 33) = v32;
    v35[5] = v58;
    v35[6] = v56;
    v35[7] = v25;
LABEL_14:
    v19 = v22;
    v20 += 4;
    --v21;
  }
  while (v21);
  swift_release(v55);
  v36 = _swiftEmptyArrayStorage;
  do
  {
    v37 = *(_BYTE *)v18;
    v38 = *((_BYTE *)v18 + 1);
    v39 = v18[1];
    v59 = v18[2];
    v40 = v18[3];
    v41 = ModernShelf.ItemKind.rawValue.getter(*(_BYTE *)v18);
    if (v41 == 0x7045686372616573 && v42 == 0xED000065646F7369)
    {
      swift_bridgeObjectRetain(v40);
      swift_bridgeObjectRelease(0xED000065646F7369);
    }
    else
    {
      v44 = v42;
      v45 = _stringCompareWithSmolCheck(_:_:expecting:)(v41, v42, 0x7045686372616573, 0xED000065646F7369, 0);
      swift_bridgeObjectRetain(v40);
      swift_bridgeObjectRelease(v44);
      if ((v45 & 1) == 0)
      {
        swift_bridgeObjectRelease(v40);
        goto LABEL_29;
      }
    }
    v46 = swift_isUniquelyReferenced_nonNull_native(v36);
    aBlock[0] = v36;
    if ((v46 & 1) == 0)
    {
      sub_1807DC(0, v36[2] + 1, 1);
      v36 = (_QWORD *)aBlock[0];
    }
    v48 = v36[2];
    v47 = v36[3];
    if (v48 >= v47 >> 1)
    {
      sub_1807DC(v47 > 1, v48 + 1, 1);
      v36 = (_QWORD *)aBlock[0];
    }
    v36[2] = v48 + 1;
    v49 = &v36[4 * v48];
    *((_BYTE *)v49 + 32) = v37;
    *((_BYTE *)v49 + 33) = v38;
    v49[5] = v39;
    v49[6] = v59;
    v49[7] = v40;
LABEL_29:
    v18 += 4;
    --v17;
  }
  while (v17);
  v1 = v54;
  v9 = v55;
LABEL_44:
  swift_release(v9);
  v50 = *(void **)(v1 + 16);
  v51 = swift_allocObject(&unk_3785E8, 24, 7);
  swift_weakInit(v51 + 16, v1);
  v52 = (_QWORD *)swift_allocObject(&unk_378988, 40, 7);
  v52[2] = v51;
  v52[3] = v19;
  v52[4] = v36;
  aBlock[4] = sub_32890;
  v61 = v52;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_2C9F4;
  aBlock[3] = &block_descriptor_45;
  v53 = _Block_copy(aBlock);
  swift_release(v61);
  objc_msgSend(v50, "performBlock:", v53);
  _Block_release(v53);
}

uint64_t sub_2F3F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  id v11;
  id v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  id v20;
  id v21;
  void *v22;
  uint64_t v23;
  Class isa;
  id v25;
  _QWORD *v26;
  Class v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  id v35;
  id v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  id v44;
  id v45;
  void *v46;
  uint64_t v47;
  Class v48;
  id v49;
  _QWORD *v50;
  Class v51;
  id v52;
  uint64_t v53;
  unint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  char v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _BYTE v83[24];

  v5 = a1 + 16;
  swift_beginAccess(a1 + 16, v83, 0, 0);
  result = swift_weakLoadStrong(v5);
  if (result)
  {
    v7 = result;
    v8 = *(void **)(result + 16);
    v9 = (void *)kMTPodcastEntityName;
    v10 = *(_QWORD *)(a2 + 16);
    v75 = a2;
    v77 = a3;
    if (v10)
    {
      v11 = v8;
      v12 = v9;
      swift_bridgeObjectRetain(a2);
      v13 = (_QWORD *)(a2 + 56);
      v14 = _swiftEmptyArrayStorage;
      do
      {
        v16 = *v13;
        if (*v13)
        {
          v17 = *(v13 - 1);
          swift_bridgeObjectRetain(*v13);
          if ((swift_isUniquelyReferenced_nonNull_native(v14) & 1) == 0)
            v14 = sub_10644(0, v14[2] + 1, 1, v14);
          v19 = v14[2];
          v18 = v14[3];
          if (v19 >= v18 >> 1)
            v14 = sub_10644((_QWORD *)(v18 > 1), v19 + 1, 1, v14);
          v14[2] = v19 + 1;
          v15 = &v14[2 * v19];
          v15[4] = v17;
          v15[5] = v16;
        }
        v13 += 4;
        --v10;
      }
      while (v10);
      swift_bridgeObjectRelease(v75);
      a3 = v77;
    }
    else
    {
      v20 = v8;
      v21 = v9;
      v14 = _swiftEmptyArrayStorage;
    }
    v22 = (void *)objc_opt_self(MTPodcast);
    v23 = sub_2CF528((uint64_t)v14);
    swift_bridgeObjectRelease(v14);
    isa = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v23);
    v25 = objc_msgSend(v22, "predicateForPodcastUuids:", isa);

    v26 = _swiftEmptyArrayStorage;
    v27 = Array._bridgeToObjectiveC()().super.isa;
    v28 = objc_msgSend(v8, "objectsInEntity:predicate:sortDescriptors:returnsObjectsAsFaults:", v9, v25, v27, 1);

    if (v28)
    {
      v29 = sub_327F8(0, &qword_3B2070, NSManagedObject_ptr);
      v30 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v28, v29);

      v31 = sub_20A344(v30);
      swift_bridgeObjectRelease(v30);
      if (v31)
        v26 = v31;
    }
    v74 = (uint64_t)v26;
    v32 = *(void **)(v7 + 16);
    v33 = (void *)kMTEpisodeEntityName;
    v34 = *(_QWORD *)(a3 + 16);
    if (v34)
    {
      v35 = v32;
      v36 = v33;
      swift_bridgeObjectRetain(a3);
      v37 = (_QWORD *)(a3 + 56);
      v38 = _swiftEmptyArrayStorage;
      do
      {
        v40 = *v37;
        if (*v37)
        {
          v41 = *(v37 - 1);
          swift_bridgeObjectRetain(*v37);
          if ((swift_isUniquelyReferenced_nonNull_native(v38) & 1) == 0)
            v38 = sub_10644(0, v38[2] + 1, 1, v38);
          v43 = v38[2];
          v42 = v38[3];
          if (v43 >= v42 >> 1)
            v38 = sub_10644((_QWORD *)(v42 > 1), v43 + 1, 1, v38);
          v38[2] = v43 + 1;
          v39 = &v38[2 * v43];
          v39[4] = v41;
          v39[5] = v40;
        }
        v37 += 4;
        --v34;
      }
      while (v34);
      swift_bridgeObjectRelease(v77);
    }
    else
    {
      v44 = v32;
      v45 = v33;
      v38 = _swiftEmptyArrayStorage;
    }
    v46 = (void *)objc_opt_self(MTEpisode);
    v47 = sub_2CF528((uint64_t)v38);
    swift_bridgeObjectRelease(v38);
    v48 = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v47);
    v49 = objc_msgSend(v46, "predicateForEpisodeUuids:", v48);

    v50 = _swiftEmptyArrayStorage;
    v51 = Array._bridgeToObjectiveC()().super.isa;
    v52 = objc_msgSend(v32, "objectsInEntity:predicate:sortDescriptors:returnsObjectsAsFaults:", v33, v49, v51, 1);

    if (v52)
    {
      v53 = sub_327F8(0, &qword_3B2070, NSManagedObject_ptr);
      v54 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v52, v53);

      v55 = sub_20A350(v54);
      swift_bridgeObjectRelease(v54);
      if (v55)
        v50 = v55;
    }
    v56 = swift_bridgeObjectRetain(v75);
    v57 = sub_30840(v56, v74);
    swift_bridgeObjectRelease(v75);
    swift_bridgeObjectRelease(v74);
    v58 = *(_QWORD *)(v57 + 16);
    if (v58)
    {
      v76 = v50;
      v59 = v57 + 32;
      swift_bridgeObjectRetain(v57);
      do
      {
        v60 = *(_BYTE *)v59;
        v61 = *(_BYTE *)(v59 + 1);
        v62 = *(_QWORD *)(v59 + 8);
        v63 = *(_QWORD *)(v59 + 16);
        v64 = *(_QWORD *)(v59 + 24);
        swift_bridgeObjectRetain(v64);
        if ((AdamID.isEmpty.getter(v62) & 1) != 0)
        {
          v78 = v60;
          v79 = v61;
          v80 = v62;
          v81 = v63;
          v82 = v64;
          sub_2CD3C(&v78);
          swift_bridgeObjectRelease(v64);
        }
        else
        {
          v78 = v60;
          v79 = 0;
          v80 = v62;
          v81 = v63;
          v82 = v64;
          swift_bridgeObjectRetain(v64);
          sub_2CA7C(&v78, 1);
          swift_bridgeObjectRelease_n(v64, 2);
        }
        v59 += 32;
        --v58;
      }
      while (v58);
      swift_bridgeObjectRelease(v57);
      v50 = v76;
    }
    swift_bridgeObjectRelease(v57);
    v65 = swift_bridgeObjectRetain(v77);
    v66 = sub_30840(v65, (uint64_t)v50);
    swift_bridgeObjectRelease(v77);
    swift_bridgeObjectRelease(v50);
    v67 = *(_QWORD *)(v66 + 16);
    if (v67)
    {
      v68 = v66 + 32;
      swift_bridgeObjectRetain(v66);
      do
      {
        v69 = *(_BYTE *)v68;
        v70 = *(_BYTE *)(v68 + 1);
        v71 = *(_QWORD *)(v68 + 8);
        v72 = *(_QWORD *)(v68 + 16);
        v73 = *(_QWORD *)(v68 + 24);
        swift_bridgeObjectRetain(v73);
        if ((AdamID.isEmpty.getter(v71) & 1) != 0)
        {
          v78 = v69;
          v79 = v70;
          v80 = v71;
          v81 = v72;
          v82 = v73;
          sub_2CD3C(&v78);
          swift_bridgeObjectRelease(v73);
        }
        else
        {
          v78 = v69;
          v79 = 0;
          v80 = v71;
          v81 = v72;
          v82 = v73;
          swift_bridgeObjectRetain(v73);
          sub_2CA7C(&v78, 1);
          swift_bridgeObjectRelease_n(v73, 2);
        }
        v68 += 32;
        --v67;
      }
      while (v67);
      swift_release(v7);
      swift_bridgeObjectRelease(v66);
    }
    else
    {
      swift_release(v7);
    }
    return swift_bridgeObjectRelease(v66);
  }
  return result;
}

void sub_2FA1C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_2FA3C(a1, MTPodcast_ptr, 316, a2);
}

void sub_2FA2C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_2FA3C(a1, MTEpisode_ptr, 317, a2);
}

void sub_2FA3C(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = static AdamID.empty.getter();
  v9 = objc_opt_self(*a2);
  v10 = (void *)swift_dynamicCastObjCClass(a1, v9);
  if (v10 && (v11 = objc_msgSend(v10, "uuid")) != 0)
  {
    v12 = v11;
    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    v15 = v14;

  }
  else
  {
    v13 = 0;
    v15 = 0;
  }
  *a4 = a3;
  a4[1] = v8;
  a4[2] = v13;
  a4[3] = v15;
}

uint64_t sub_2FAD4()
{
  uint64_t v0;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2098);
  return FRPOutput.content.getter(v0);
}

_QWORD *sub_2FB08(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t Strong;
  uint64_t v12;
  char v13[8];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[24];

  v2 = *result;
  v3 = *(_QWORD *)(*result + 16);
  if (v3)
  {
    v4 = v2 + 32;
    v5 = a2 + 16;
    swift_bridgeObjectRetain(*result);
    swift_beginAccess(v5, v17, 0, 0);
    do
    {
      v6 = *(_BYTE *)v4;
      v7 = *(_BYTE *)(v4 + 1);
      v8 = *(_QWORD *)(v4 + 8);
      v9 = *(_QWORD *)(v4 + 16);
      v10 = *(_QWORD *)(v4 + 24);
      Strong = swift_weakLoadStrong(v5);
      if (Strong)
      {
        v12 = Strong;
        v13[0] = v6;
        v13[1] = v7;
        v14 = v8;
        v15 = v9;
        v16 = v10;
        swift_bridgeObjectRetain(v10);
        sub_2CD3C(v13);
        swift_bridgeObjectRelease(v10);
        swift_release(v12);
      }
      v4 += 32;
      --v3;
    }
    while (v3);
    return (_QWORD *)swift_bridgeObjectRelease(v2);
  }
  return result;
}

uint64_t RecentlySearchedStorage.deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1((_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 72));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 80));
  swift_release(*(_QWORD *)(v0 + 88));
  return v0;
}

uint64_t RecentlySearchedStorage.__deallocating_deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1((_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 72));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 80));
  swift_release(*(_QWORD *)(v0 + 88));
  return swift_deallocClassInstance(v0, 96, 7);
}

_QWORD *sub_2FC74()
{
  void *v0;
  uint64_t v1;
  NSString v2;
  id v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *result;
  _OWORD v10[2];
  _QWORD v11[4];

  v2 = String._bridgeToObjectiveC()();
  v3 = objc_msgSend(v0, "valueForKey:", v2);

  if (v3)
  {
    _bridgeAnyObjectToAny(_:)(v10);
    swift_unknownObjectRelease(v3);
  }
  else
  {
    memset(v10, 0, sizeof(v10));
  }
  sub_31BE8((uint64_t)v10, (uint64_t)v11);
  if (!v11[3])
  {
    sub_298FC((uint64_t)v11);
    return _swiftEmptyArrayStorage;
  }
  if ((swift_dynamicCast(v10, v11, (char *)&type metadata for Any + 8, &type metadata for Data, 6) & 1) == 0)
    return _swiftEmptyArrayStorage;
  v4 = v10[0];
  v5 = type metadata accessor for JSONDecoder(0);
  swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  v6 = JSONDecoder.init()();
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B1E68);
  v8 = sub_31C30(&qword_3B2048, (void (*)(void))sub_31C98, (uint64_t)&protocol conformance descriptor for <A> [A]);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(v11, v7, v4, *((_QWORD *)&v4 + 1), v7, v8);
  sub_31BA4(v4, *((unint64_t *)&v4 + 1));
  result = (_QWORD *)swift_release(v6);
  if (!v1)
    return (_QWORD *)v11[0];
  return result;
}

uint64_t sub_2FDF8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t result;
  _QWORD v11[4];

  v3 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  v4 = JSONEncoder.init()();
  v11[0] = a1;
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B1E68);
  v6 = sub_31C30(&qword_3B2038, (void (*)(void))sub_31B1C, (uint64_t)&protocol conformance descriptor for <A> [A]);
  v7 = dispatch thunk of JSONEncoder.encode<A>(_:)(v11, v5, v6);
  v9 = v8;
  result = swift_release(v4);
  if (!v1)
  {
    v11[3] = &type metadata for Data;
    v11[0] = v7;
    v11[1] = v9;
    sub_31B60(v7, v9);
    sub_31A00((uint64_t)v11);
    return sub_31BA4(v7, v9);
  }
  return result;
}

_QWORD *sub_2FEE8()
{
  return sub_2FC74();
}

uint64_t sub_2FF08(uint64_t a1)
{
  return sub_2FDF8(a1);
}

uint64_t sub_2FF28()
{
  _OWORD v1[2];

  memset(v1, 0, sizeof(v1));
  return sub_31A00((uint64_t)v1);
}

uint64_t RecentlySearchedStorage.Item.hash(into:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v3 = v1[1];
  v4 = v1[2];
  v5 = v1[3];
  swift_bridgeObjectRetain(v5);
  if ((AdamID.isEmpty.getter(v3) & 1) != 0)
  {
    if (!v5)
    {
      if (qword_3B0040 != -1)
        swift_once(&qword_3B0040, sub_2C034);
      v6 = type metadata accessor for OSLogger(0);
      __swift_project_value_buffer(v6, (uint64_t)qword_3B1DC8);
      v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0B10);
      v8 = type metadata accessor for LogMessage(0);
      v9 = swift_allocObject(v7, ((*(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v8 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80) | 7);
      *(_OWORD *)(v9 + 16) = xmmword_2EA0D0;
      LogMessage.init(stringLiteral:)(0xD00000000000002ELL, 0x800000000030A380);
      Logger.warning(_:)(v9, v6, &protocol witness table for OSLogger);
      swift_bridgeObjectRelease(0);
      swift_bridgeObjectRelease(v9);
      v5 = 0xE900000000000064;
      v4 = 0x656E696665646E75;
    }
  }
  else
  {
    v10 = sub_144B4();
    v4 = BinaryInteger.description.getter(&type metadata for UInt64, v10);
    v12 = v11;
    swift_bridgeObjectRelease(v5);
    v5 = v12;
  }
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int RecentlySearchedStorage.Item.hashValue.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD v12[9];

  v1 = v0[1];
  v2 = v0[2];
  v3 = v0[3];
  Hasher.init(_seed:)(v12);
  swift_bridgeObjectRetain(v3);
  if ((AdamID.isEmpty.getter(v1) & 1) != 0)
  {
    if (!v3)
    {
      if (qword_3B0040 != -1)
        swift_once(&qword_3B0040, sub_2C034);
      v4 = type metadata accessor for OSLogger(0);
      __swift_project_value_buffer(v4, (uint64_t)qword_3B1DC8);
      v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0B10);
      v6 = type metadata accessor for LogMessage(0);
      v7 = swift_allocObject(v5, ((*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v6 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80) | 7);
      *(_OWORD *)(v7 + 16) = xmmword_2EA0D0;
      LogMessage.init(stringLiteral:)(0xD00000000000002ELL, 0x800000000030A380);
      Logger.warning(_:)(v7, v4, &protocol witness table for OSLogger);
      swift_bridgeObjectRelease(0);
      swift_bridgeObjectRelease(v7);
      v3 = 0xE900000000000064;
      v2 = 0x656E696665646E75;
    }
  }
  else
  {
    v8 = sub_144B4();
    v2 = BinaryInteger.description.getter(&type metadata for UInt64, v8);
    v10 = v9;
    swift_bridgeObjectRelease(v3);
    v3 = v10;
  }
  String.hash(into:)(v12, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

Swift::Int sub_30294()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD v12[9];

  v1 = v0[1];
  v2 = v0[2];
  v3 = v0[3];
  Hasher.init(_seed:)(v12);
  swift_bridgeObjectRetain(v3);
  if ((AdamID.isEmpty.getter(v1) & 1) != 0)
  {
    if (!v3)
    {
      if (qword_3B0040 != -1)
        swift_once(&qword_3B0040, sub_2C034);
      v4 = type metadata accessor for OSLogger(0);
      __swift_project_value_buffer(v4, (uint64_t)qword_3B1DC8);
      v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0B10);
      v6 = type metadata accessor for LogMessage(0);
      v7 = swift_allocObject(v5, ((*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v6 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80) | 7);
      *(_OWORD *)(v7 + 16) = xmmword_2EA0D0;
      LogMessage.init(stringLiteral:)(0xD00000000000002ELL, 0x800000000030A380);
      Logger.warning(_:)(v7, v4, &protocol witness table for OSLogger);
      swift_bridgeObjectRelease(0);
      swift_bridgeObjectRelease(v7);
      v3 = 0xE900000000000064;
      v2 = 0x656E696665646E75;
    }
  }
  else
  {
    v8 = sub_144B4();
    v2 = BinaryInteger.description.getter(&type metadata for UInt64, v8);
    v10 = v9;
    swift_bridgeObjectRelease(v3);
    v3 = v10;
  }
  String.hash(into:)(v12, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_30430@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_2EBC68);
  v5 = swift_getKeyPath(&unk_2EBC90);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(KeyPath);
  result = swift_release(v5);
  *a2 = v7;
  return result;
}

uint64_t sub_304B0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_2EBC68);
  v5 = swift_getKeyPath(&unk_2EBC90);
  v7 = v2;
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

uint64_t _s8ShelfKit23RecentlySearchedStorageC4ItemV2eeoiySbAE_AEtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;

  v2 = a1[1];
  v3 = a1[2];
  v4 = a1[3];
  v6 = a2[1];
  v5 = a2[2];
  v7 = a2[3];
  swift_bridgeObjectRetain(v4);
  if ((AdamID.isEmpty.getter(v2) & 1) != 0)
  {
    if (!v4)
    {
      if (qword_3B0040 != -1)
        swift_once(&qword_3B0040, sub_2C034);
      v3 = 0x656E696665646E75;
      v8 = type metadata accessor for OSLogger(0);
      __swift_project_value_buffer(v8, (uint64_t)qword_3B1DC8);
      v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0B10);
      v10 = type metadata accessor for LogMessage(0);
      v11 = swift_allocObject(v9, ((*(unsigned __int8 *)(*(_QWORD *)(v10 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v10 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v10 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v10 - 8) + 80) | 7);
      *(_OWORD *)(v11 + 16) = xmmword_2EA0D0;
      LogMessage.init(stringLiteral:)(0xD00000000000002ELL, 0x800000000030A380);
      Logger.warning(_:)(v11, v8, &protocol witness table for OSLogger);
      swift_bridgeObjectRelease(0);
      swift_bridgeObjectRelease(v11);
      v4 = 0xE900000000000064;
    }
  }
  else
  {
    v12 = sub_144B4();
    v3 = BinaryInteger.description.getter(&type metadata for UInt64, v12);
    v14 = v13;
    swift_bridgeObjectRelease(v4);
    v4 = v14;
  }
  swift_bridgeObjectRetain(v7);
  if ((AdamID.isEmpty.getter(v6) & 1) != 0)
  {
    if (!v7)
    {
      if (qword_3B0040 != -1)
        swift_once(&qword_3B0040, sub_2C034);
      v5 = 0x656E696665646E75;
      v15 = type metadata accessor for OSLogger(0);
      __swift_project_value_buffer(v15, (uint64_t)qword_3B1DC8);
      v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0B10);
      v17 = type metadata accessor for LogMessage(0);
      v18 = swift_allocObject(v16, ((*(unsigned __int8 *)(*(_QWORD *)(v17 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v17 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v17 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v17 - 8) + 80) | 7);
      *(_OWORD *)(v18 + 16) = xmmword_2EA0D0;
      LogMessage.init(stringLiteral:)(0xD00000000000002ELL, 0x800000000030A380);
      Logger.warning(_:)(v18, v15, &protocol witness table for OSLogger);
      swift_bridgeObjectRelease(0);
      swift_bridgeObjectRelease(v18);
      v7 = 0xE900000000000064;
    }
  }
  else
  {
    v19 = sub_144B4();
    v5 = BinaryInteger.description.getter(&type metadata for UInt64, v19);
    v21 = v20;
    swift_bridgeObjectRelease(v7);
    v7 = v21;
  }
  if (v3 == v5 && v4 == v7)
  {
    v22 = 1;
    v7 = v4;
  }
  else
  {
    v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v7, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v7);
  return v22 & 1;
}

uint64_t sub_30840(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  _QWORD *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;

  v2 = *(_QWORD *)(result + 16);
  if (!v2)
    return (uint64_t)_swiftEmptyArrayStorage;
  v3 = a2;
  v4 = 0;
  v35 = result + 32;
  v5 = a2 & 0xFFFFFFFFFFFFFF8;
  v33 = a2 & 0xFFFFFFFFFFFFFF8;
  if (a2 < 0)
    v5 = a2;
  v30 = v5;
  v42 = a2 & 0xC000000000000001;
  v6 = _swiftEmptyArrayStorage;
  v34 = (unint64_t)a2 >> 62;
  v31 = *(_QWORD *)(result + 16);
  while (1)
  {
    if (v4 <= v2)
      v7 = v2;
    else
      v7 = v4;
    v38 = v6;
    v32 = v7;
LABEL_9:
    if (v4 == v7)
    {
LABEL_46:
      __break(1u);
      return result;
    }
    v8 = v35 + 32 * v4;
    v9 = *(_BYTE *)v8;
    v10 = *(_BYTE *)(v8 + 1);
    v39 = *(_QWORD *)(v8 + 8);
    v11 = *(_QWORD *)(v8 + 24);
    v41 = *(_QWORD *)(v8 + 16);
    if (v34)
      break;
    v12 = *(_QWORD *)(v33 + 16);
    swift_bridgeObjectRetain_n(v11, 2);
    swift_bridgeObjectRetain(v3);
    ++v4;
    if (v12)
      goto LABEL_12;
LABEL_35:
    v25 = v3;
    v26 = v11;
LABEL_37:
    swift_bridgeObjectRelease(v25);
    swift_bridgeObjectRelease(v26);
    result = swift_isUniquelyReferenced_nonNull_native(v6);
    if ((result & 1) == 0)
      result = sub_1807DC(0, v6[2] + 1, 1);
    v28 = v6[2];
    v27 = v6[3];
    if (v28 >= v27 >> 1)
      result = sub_1807DC(v27 > 1, v28 + 1, 1);
    v6[2] = v28 + 1;
    v29 = &v6[4 * v28];
    *((_BYTE *)v29 + 32) = v9;
    *((_BYTE *)v29 + 33) = v10;
    v29[5] = v39;
    v29[6] = v41;
    v29[7] = v11;
    if (v4 == v2)
      return (uint64_t)v6;
  }
  swift_bridgeObjectRetain_n(v11, 2);
  swift_bridgeObjectRetain(v3);
  v12 = _CocoaArrayWrapper.endIndex.getter(v30);
  ++v4;
  if (!v12)
    goto LABEL_35;
LABEL_12:
  v36 = v10;
  v37 = v9;
  v40 = v4;
  v13 = 4;
  while (1)
  {
    if (v42)
      result = specialized _ArrayBuffer._getElementSlowPath(_:)(v13 - 4, v3);
    else
      result = (uint64_t)*(id *)(v3 + 8 * v13);
    v14 = (void *)result;
    v15 = v13 - 3;
    if (__OFADD__(v13 - 4, 1))
    {
      __break(1u);
      goto LABEL_46;
    }
    v16 = v3;
    v17 = objc_msgSend((id)result, "uuid");
    if (!v17)
      break;
    v18 = v17;
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    v21 = v20;

    if (!v11)
    {
      v3 = v16;
      swift_bridgeObjectRelease(v16);

      swift_bridgeObjectRelease(0);
      swift_bridgeObjectRelease(v21);
      goto LABEL_31;
    }
    if (v19 == v41 && v11 == v21)
    {

      swift_bridgeObjectRelease(v21);
    }
    else
    {
      v23 = _stringCompareWithSmolCheck(_:_:expecting:)(v19, v21, v41, v11, 0);

      swift_bridgeObjectRelease(v21);
      if ((v23 & 1) == 0)
      {
        swift_bridgeObjectRelease(v11);
        v3 = v16;
        v24 = v16;
        goto LABEL_32;
      }
    }
LABEL_14:
    ++v13;
    v3 = v16;
    if (v15 == v12)
    {
      v25 = v11;
      v26 = v16;
      v2 = v31;
      v4 = v40;
      v6 = v38;
      v10 = v36;
      v9 = v37;
      goto LABEL_37;
    }
  }
  if (!v11)
  {

    goto LABEL_14;
  }
  swift_bridgeObjectRelease(v3);

LABEL_31:
  v24 = v11;
LABEL_32:
  v2 = v31;
  v7 = v32;
  v4 = v40;
  v6 = v38;
  swift_bridgeObjectRelease(v24);
  result = swift_bridgeObjectRelease(v11);
  if (v40 != v31)
    goto LABEL_9;
  return (uint64_t)v6;
}

uint64_t sub_30B74(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char v35;
  char v36;

  v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2018);
  v30 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v33 = (char *)&v29 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2020);
  v3 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2028);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v10);
  v12 = sub_31934();
  v13 = v34;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for RecentlySearchedStorage.Item.Scope.CodingKeys, &type metadata for RecentlySearchedStorage.Item.Scope.CodingKeys, v12, v10, v11);
  if (v13)
    goto LABEL_7;
  v14 = v5;
  v15 = v33;
  v29 = a1;
  v34 = v7;
  v16 = KeyedDecodingContainer.allKeys.getter(v6);
  v17 = v16;
  v18 = v6;
  if (*(_QWORD *)(v16 + 16) != 1)
  {
    v21 = type metadata accessor for DecodingError(0);
    swift_allocError(v21, &protocol witness table for DecodingError, 0, 0);
    v22 = v9;
    v24 = v23;
    __swift_instantiateConcreteTypeFromMangledName(&qword_3B0B38);
    *v24 = &type metadata for RecentlySearchedStorage.Item.Scope;
    v25 = KeyedDecodingContainer.codingPath.getter(v6);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v25, 0xD00000000000002BLL, 0x800000000030AC00, 0);
    v26 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v21 - 8) + 104))(v24, enum case for DecodingError.typeMismatch(_:), v21);
    swift_willThrow(v26);
    swift_bridgeObjectRelease(v17);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v22, v6);
    a1 = v29;
LABEL_7:
    __swift_destroy_boxed_opaque_existential_1(a1);
    return v6;
  }
  v6 = *(unsigned __int8 *)(v16 + 32);
  if ((v6 & 1) != 0)
  {
    v36 = 1;
    v19 = sub_31978();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for RecentlySearchedStorage.Item.Scope.LibraryCodingKeys, &v36, v18, &type metadata for RecentlySearchedStorage.Item.Scope.LibraryCodingKeys, v19);
    v20 = v34;
    (*(void (**)(char *, uint64_t))(v30 + 8))(v15, v32);
  }
  else
  {
    v35 = 0;
    v27 = sub_319BC();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for RecentlySearchedStorage.Item.Scope.StoreCodingKeys, &v35, v18, &type metadata for RecentlySearchedStorage.Item.Scope.StoreCodingKeys, v27);
    v20 = v34;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v14, v31);
  }
  swift_bridgeObjectRelease(v17);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v9, v18);
  __swift_destroy_boxed_opaque_existential_1(v29);
  return v6;
}

uint64_t sub_30EA0(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x65726F7473 && a2 == 0xE500000000000000)
  {
    v5 = 0xE500000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65726F7473, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x7972617262696CLL && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease(0xE700000000000000);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7972617262696CLL, 0xE700000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_30F88(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 1684957547 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1684957547, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x65706F6373 && a2 == 0xE500000000000000)
  {
    v7 = 0xE500000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65706F6373, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x64496D616461 && a2 == 0xE600000000000000)
  {
    v8 = 0xE600000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x64496D616461, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 1684632949 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease(0xE400000000000000);
    return 3;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(1684632949, 0xE400000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

_QWORD *sub_31110(uint64_t a1, void *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  _QWORD *v26;
  _QWORD v27[5];

  v25 = a2;
  v5 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v23 = *(_QWORD *)(v5 - 8);
  v24 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27[3] = sub_327F8(0, &qword_3B20B0, NSUserDefaults_ptr);
  v27[4] = &off_378628;
  v27[0] = a1;
  sub_327F8(0, (unint64_t *)&qword_3B8710, OS_dispatch_queue_ptr);
  static DispatchQoS.userInitiated.getter();
  v26 = _swiftEmptyArrayStorage;
  v14 = sub_F1C0(&qword_3B20B8, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B20C0);
  v16 = sub_32914((unint64_t *)&qword_3B20C8, &qword_3B20C0, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v26, v15, v16, v8, v14);
  (*(void (**)(char *, _QWORD, uint64_t))(v23 + 104))(v7, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v24);
  a3[8] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000028, 0x800000000030AD10, v13, v10, v7, 0);
  a3[9] = _swiftEmptyArrayStorage;
  a3[10] = _swiftEmptyArrayStorage;
  v17 = type metadata accessor for NetworkObservingItems(0);
  v18 = swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
  sub_2B4FC((uint64_t)_swiftEmptyArrayStorage);
  a3[11] = v18;
  sub_150C8((uint64_t)v27, (uint64_t)(a3 + 3));
  v19 = v25;
  a3[2] = v25;
  v20 = v19;
  sub_2C530();
  __swift_destroy_boxed_opaque_existential_1(v27);
  return a3;
}

uint64_t sub_31368()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

_QWORD *sub_3138C()
{
  uint64_t v0;

  return sub_2C964(v0);
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t block_destroy_helper(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_313B0()
{
  unint64_t result;

  result = qword_3B1E20;
  if (!qword_3B1E20)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for RecentlySearchedStorage.Item);
    atomic_store(result, (unint64_t *)&qword_3B1E20);
  }
  return result;
}

uint64_t sub_31404()
{
  return type metadata accessor for NetworkObservingItems(0);
}

uint64_t type metadata accessor for NetworkObservingItems(uint64_t a1)
{
  uint64_t result;

  result = qword_3B1E50;
  if (!qword_3B1E50)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for NetworkObservingItems);
  return result;
}

void sub_31448(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[2] = &unk_2EBDD8;
  sub_314D0(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(v2 - 8) + 64;
    swift_updateClassMetadata2(a1, 256, 4, v4, a1 + 80);
  }
}

void sub_314D0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_3B1E60)
  {
    v2 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_3B1E68);
    v3 = type metadata accessor for Published(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_3B1E60);
  }
}

uint64_t sub_31528(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t sub_31540(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t type metadata accessor for RecentlySearchedStorage()
{
  return objc_opt_self(_TtC8ShelfKit23RecentlySearchedStorage);
}

uint64_t method lookup function for RecentlySearchedStorage(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for RecentlySearchedStorage);
}

uint64_t destroy for RecentlySearchedStorage.Item(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
}

uint64_t initializeWithCopy for RecentlySearchedStorage.Item(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for RecentlySearchedStorage.Item(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v3 = *(_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t assignWithTake for RecentlySearchedStorage.Item(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for RecentlySearchedStorage.Item(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for RecentlySearchedStorage.Item(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for RecentlySearchedStorage.Item()
{
  return &type metadata for RecentlySearchedStorage.Item;
}

ValueMetadata *type metadata accessor for RecentlySearchedStorage.Item.Scope()
{
  return &type metadata for RecentlySearchedStorage.Item.Scope;
}

uint64_t storeEnumTagSinglePayload for RecentlySearchedStorage.Item.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_31794 + 4 * byte_2EBC59[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_317C8 + 4 * byte_2EBC54[v4]))();
}

uint64_t sub_317C8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_317D0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x317D8);
  return result;
}

uint64_t sub_317E4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x317ECLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_317F0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_317F8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RecentlySearchedStorage.Item.CodingKeys()
{
  return &type metadata for RecentlySearchedStorage.Item.CodingKeys;
}

unint64_t sub_31818()
{
  unint64_t result;

  result = qword_3B1FC8;
  if (!qword_3B1FC8)
  {
    result = swift_getWitnessTable(&unk_2EBF20);
    atomic_store(result, (unint64_t *)&qword_3B1FC8);
  }
  return result;
}

unint64_t sub_31860()
{
  unint64_t result;

  result = qword_3B1FD0;
  if (!qword_3B1FD0)
  {
    result = swift_getWitnessTable(&unk_2EBF88);
    atomic_store(result, (unint64_t *)&qword_3B1FD0);
  }
  return result;
}

unint64_t sub_318A8()
{
  unint64_t result;

  result = qword_3B1FD8;
  if (!qword_3B1FD8)
  {
    result = swift_getWitnessTable(&unk_2EBE90);
    atomic_store(result, (unint64_t *)&qword_3B1FD8);
  }
  return result;
}

unint64_t sub_318F0()
{
  unint64_t result;

  result = qword_3B1FE0;
  if (!qword_3B1FE0)
  {
    result = swift_getWitnessTable(&unk_2EBEB8);
    atomic_store(result, (unint64_t *)&qword_3B1FE0);
  }
  return result;
}

unint64_t sub_31934()
{
  unint64_t result;

  result = qword_3B2000;
  if (!qword_3B2000)
  {
    result = swift_getWitnessTable(&unk_2EC26C);
    atomic_store(result, (unint64_t *)&qword_3B2000);
  }
  return result;
}

unint64_t sub_31978()
{
  unint64_t result;

  result = qword_3B2008;
  if (!qword_3B2008)
  {
    result = swift_getWitnessTable(&unk_2EC21C);
    atomic_store(result, (unint64_t *)&qword_3B2008);
  }
  return result;
}

unint64_t sub_319BC()
{
  unint64_t result;

  result = qword_3B2010;
  if (!qword_3B2010)
  {
    result = swift_getWitnessTable(&unk_2EC1CC);
    atomic_store(result, (unint64_t *)&qword_3B2010);
  }
  return result;
}

uint64_t sub_31A00(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  NSString v9;
  _QWORD v11[3];
  uint64_t v12;

  sub_236BC(a1, (uint64_t)v11);
  v3 = v12;
  if (v12)
  {
    v4 = __swift_project_boxed_opaque_existential_1(v11, v12);
    v5 = *(_QWORD *)(v3 - 8);
    __chkstk_darwin(v4);
    v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v5 + 16))(v7);
    v8 = _bridgeAnythingToObjectiveC<A>(_:)(v7, v3);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v3);
    __swift_destroy_boxed_opaque_existential_1(v11);
  }
  else
  {
    v8 = 0;
  }
  v9 = String._bridgeToObjectiveC()();
  objc_msgSend(v1, "setObject:forKey:", v8, v9);
  swift_unknownObjectRelease(v8);

  return sub_298FC(a1);
}

unint64_t sub_31B1C()
{
  unint64_t result;

  result = qword_3B2040;
  if (!qword_3B2040)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for RecentlySearchedStorage.Item);
    atomic_store(result, (unint64_t *)&qword_3B2040);
  }
  return result;
}

uint64_t sub_31B60(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain(result);
  }
  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_31BA4(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release(result);
  }
  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_31BE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3BC540);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_31C30(unint64_t *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t result;

  result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_3B1E68);
    a2();
    result = swift_getWitnessTable(a3);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_31C98()
{
  unint64_t result;

  result = qword_3B2050;
  if (!qword_3B2050)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for RecentlySearchedStorage.Item);
    atomic_store(result, (unint64_t *)&qword_3B2050);
  }
  return result;
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    v4 = swift_slowAlloc(*(_QWORD *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }
  return a2;
}

uint64_t sub_31D1C()
{
  return objectdestroy_9Tm(64);
}

uint64_t sub_31D24()
{
  uint64_t v0;
  __int16 v1;

  if (*(_BYTE *)(v0 + 25))
    v1 = 256;
  else
    v1 = 0;
  return sub_2E834(*(_QWORD *)(v0 + 16), v1 | *(unsigned __int8 *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
}

uint64_t sub_31D4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  char v13;
  void *v14;
  char v15;
  uint64_t v16;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 24);
  v5 = swift_retain(v4);
  CurrentValueSubject.value.getter(&v16, v5);
  swift_release(v4);
  v6 = v16;
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 24);
  v15 = 0;
  swift_retain(v7);
  CurrentValueSubject.value.setter(&v15);
  swift_release(v7);
  v8 = *(_QWORD *)(a2 + 88);
  KeyPath = swift_getKeyPath(&unk_2EBC68);
  v10 = swift_getKeyPath(&unk_2EBC90);
  v14 = &_swiftEmptyArrayStorage;
  swift_retain(v8);
  static Published.subscript.setter(&v14, v8, KeyPath, v10);
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 24);
  v13 = v6;
  swift_retain(v11);
  CurrentValueSubject.value.setter(&v13);
  return swift_release(v11);
}

uint64_t sub_31E3C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t KeyPath;
  uint64_t v13;
  uint64_t v14;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;

  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 24);
  v7 = swift_retain(v6);
  CurrentValueSubject.value.getter(&v19, v7);
  swift_release(v6);
  v8 = v19;
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 24);
  v18 = 0;
  swift_retain(v9);
  CurrentValueSubject.value.setter(&v18);
  swift_release(v9);
  v10 = *a3;
  v11 = *(_QWORD *)(a2 + 88);
  KeyPath = swift_getKeyPath(&unk_2EBC68);
  v13 = swift_getKeyPath(&unk_2EBC90);
  v17 = v10;
  swift_bridgeObjectRetain(v10);
  swift_retain(v11);
  static Published.subscript.setter(&v17, v11, KeyPath, v13);
  v14 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 24);
  v16 = v8;
  swift_retain(v14);
  CurrentValueSubject.value.setter(&v16);
  return swift_release(v14);
}

uint64_t sub_31F34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t result;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  char v59;
  uint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  char v67;
  char v68;
  __int128 v69;
  uint64_t v71;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;

  v5 = *(_QWORD **)a1;
  v74 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if (!v74)
    return 0;
  swift_bridgeObjectRetain(v5);
  v7 = 0;
  v8 = 0;
  v73 = a3;
  while (1)
  {
    v10 = v5[v7 + 5];
    v9 = v5[v7 + 6];
    v11 = v5[v7 + 7];
    swift_bridgeObjectRetain(v11);
    if ((AdamID.isEmpty.getter(v10) & 1) != 0)
    {
      if (!v11)
      {
        if (qword_3B0040 != -1)
          swift_once(&qword_3B0040, sub_2C034);
        v12 = type metadata accessor for OSLogger(0);
        __swift_project_value_buffer(v12, (uint64_t)qword_3B1DC8);
        v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0B10);
        v14 = type metadata accessor for LogMessage(0);
        v15 = swift_allocObject(v13, ((*(unsigned __int8 *)(*(_QWORD *)(v14 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v14 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v14 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v14 - 8) + 80) | 7);
        *(_OWORD *)(v15 + 16) = xmmword_2EA0D0;
        LogMessage.init(stringLiteral:)(0xD00000000000002ELL, 0x800000000030A380);
        Logger.warning(_:)(v15, v12, &protocol witness table for OSLogger);
        swift_bridgeObjectRelease(0);
        swift_bridgeObjectRelease(v15);
        v9 = 0x656E696665646E75;
        v11 = 0xE900000000000064;
      }
    }
    else
    {
      v16 = sub_144B4();
      v9 = BinaryInteger.description.getter(&type metadata for UInt64, v16);
      v18 = v17;
      swift_bridgeObjectRelease(v11);
      v11 = v18;
    }
    swift_bridgeObjectRetain(a5);
    if ((AdamID.isEmpty.getter(a3) & 1) != 0)
    {
      v19 = a4;
      v20 = a5;
      if (!a5)
      {
        v21 = v5;
        if (qword_3B0040 != -1)
          swift_once(&qword_3B0040, sub_2C034);
        v22 = type metadata accessor for OSLogger(0);
        __swift_project_value_buffer(v22, (uint64_t)qword_3B1DC8);
        v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0B10);
        v24 = type metadata accessor for LogMessage(0);
        v25 = swift_allocObject(v23, ((*(unsigned __int8 *)(*(_QWORD *)(v24 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v24 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v24 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v24 - 8) + 80) | 7);
        *(_OWORD *)(v25 + 16) = xmmword_2EA0D0;
        LogMessage.init(stringLiteral:)(0xD00000000000002ELL, 0x800000000030A380);
        Logger.warning(_:)(v25, v22, &protocol witness table for OSLogger);
        swift_bridgeObjectRelease(a5);
        swift_bridgeObjectRelease(v25);
        v19 = 0x656E696665646E75;
        v20 = 0xE900000000000064;
        v5 = v21;
        a3 = v73;
      }
      if (v9 != v19)
        goto LABEL_18;
    }
    else
    {
      v26 = sub_144B4();
      v19 = BinaryInteger.description.getter(&type metadata for UInt64, v26);
      v20 = v27;
      swift_bridgeObjectRelease(a5);
      if (v9 != v19)
        goto LABEL_18;
    }
    if (v11 == v20)
    {
      swift_bridgeObjectRelease(v5);
      swift_bridgeObjectRelease(v11);
      goto LABEL_24;
    }
LABEL_18:
    v28 = _stringCompareWithSmolCheck(_:_:expecting:)(v9, v11, v19, v20, 0);
    swift_bridgeObjectRelease(v11);
    swift_bridgeObjectRelease(v20);
    if ((v28 & 1) != 0)
      break;
    ++v8;
    v7 += 4;
    if (v74 == v8)
    {
      swift_bridgeObjectRelease(v5);
      return v5[2];
    }
  }
  v11 = (unint64_t)v5;
LABEL_24:
  result = swift_bridgeObjectRelease(v11);
  v30 = v8 + 1;
  if (__OFADD__(v8, 1))
    goto LABEL_65;
  v31 = v5[2];
  if (v30 == v31)
    return v8;
  v32 = v7 * 8 + 88;
  v33 = a5;
  while (2)
  {
    if (v30 < v31)
    {
      v75 = v5;
      v34 = (_QWORD *)((char *)v5 + v32);
      v35 = *(_QWORD *)((char *)v5 + v32 - 16);
      v36 = *(_QWORD *)((char *)v5 + v32 - 8);
      v37 = *v34;
      swift_bridgeObjectRetain(*v34);
      if ((AdamID.isEmpty.getter(v35) & 1) != 0)
      {
        if (!v37)
        {
          if (qword_3B0040 != -1)
            swift_once(&qword_3B0040, sub_2C034);
          v38 = type metadata accessor for OSLogger(0);
          __swift_project_value_buffer(v38, (uint64_t)qword_3B1DC8);
          v39 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0B10);
          v40 = type metadata accessor for LogMessage(0);
          v41 = swift_allocObject(v39, ((*(unsigned __int8 *)(*(_QWORD *)(v40 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v40 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v40 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v40 - 8) + 80) | 7);
          *(_OWORD *)(v41 + 16) = xmmword_2EA0D0;
          LogMessage.init(stringLiteral:)(0xD00000000000002ELL, 0x800000000030A380);
          Logger.warning(_:)(v41, v38, &protocol witness table for OSLogger);
          swift_bridgeObjectRelease(0);
          swift_bridgeObjectRelease(v41);
          v36 = 0x656E696665646E75;
          v37 = 0xE900000000000064;
          v33 = a5;
        }
      }
      else
      {
        v42 = sub_144B4();
        v36 = BinaryInteger.description.getter(&type metadata for UInt64, v42);
        v44 = v43;
        swift_bridgeObjectRelease(v37);
        v37 = v44;
      }
      swift_bridgeObjectRetain(v33);
      if ((AdamID.isEmpty.getter(v73) & 1) != 0)
      {
        v45 = a4;
        v46 = v33;
        if (!v33)
        {
          if (qword_3B0040 != -1)
            swift_once(&qword_3B0040, sub_2C034);
          v47 = type metadata accessor for OSLogger(0);
          __swift_project_value_buffer(v47, (uint64_t)qword_3B1DC8);
          v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0B10);
          v49 = type metadata accessor for LogMessage(0);
          v50 = swift_allocObject(v48, ((*(unsigned __int8 *)(*(_QWORD *)(v49 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v49 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v49 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v49 - 8) + 80) | 7);
          *(_OWORD *)(v50 + 16) = xmmword_2EA0D0;
          LogMessage.init(stringLiteral:)(0xD00000000000002ELL, 0x800000000030A380);
          Logger.warning(_:)(v50, v47, &protocol witness table for OSLogger);
          swift_bridgeObjectRelease(a5);
          v51 = v50;
          v33 = a5;
          swift_bridgeObjectRelease(v51);
          v45 = 0x656E696665646E75;
          v46 = 0xE900000000000064;
        }
      }
      else
      {
        v52 = sub_144B4();
        v45 = BinaryInteger.description.getter(&type metadata for UInt64, v52);
        v46 = v53;
        swift_bridgeObjectRelease(v33);
      }
      if (v36 != v45 || v37 != v46)
      {
        v54 = _stringCompareWithSmolCheck(_:_:expecting:)(v36, v37, v45, v46, 0);
        swift_bridgeObjectRelease(v37);
        result = swift_bridgeObjectRelease(v46);
        if ((v54 & 1) != 0)
        {
          v33 = a5;
LABEL_28:
          v5 = v75;
        }
        else
        {
          v5 = v75;
          if (v30 != v8)
          {
            if ((v8 & 0x8000000000000000) != 0)
              goto LABEL_61;
            v55 = v75[2];
            if (v8 >= v55)
              goto LABEL_62;
            if (v30 >= v55)
              goto LABEL_63;
            v56 = (uint64_t)&v75[4 * v8 + 4];
            v67 = *(_BYTE *)(v56 + 1);
            v68 = *(_BYTE *)v56;
            v69 = *(_OWORD *)(v56 + 8);
            v57 = *(_QWORD *)(v56 + 24);
            v58 = *((_BYTE *)v34 - 24);
            v59 = *((_BYTE *)v34 - 23);
            v60 = *(v34 - 2);
            v71 = *(v34 - 1);
            v61 = *v34;
            swift_bridgeObjectRetain(*v34);
            swift_bridgeObjectRetain(v57);
            if ((swift_isUniquelyReferenced_nonNull_native(v75) & 1) == 0)
              v75 = sub_1E508(v75);
            v62 = &v75[4 * v8];
            v63 = v62[7];
            *((_BYTE *)v62 + 32) = v58;
            v5 = v75;
            *((_BYTE *)v62 + 33) = v59;
            v62[5] = v60;
            v62[6] = v71;
            v62[7] = v61;
            result = swift_bridgeObjectRelease(v63);
            if (v30 >= v75[2])
              goto LABEL_64;
            v64 = (_QWORD *)((char *)v75 + v32);
            v65 = *(_QWORD *)((char *)v75 + v32);
            *((_BYTE *)v64 - 24) = v68;
            *((_BYTE *)v64 - 23) = v67;
            *((_OWORD *)v64 - 1) = v69;
            *v64 = v57;
            result = swift_bridgeObjectRelease(v65);
            *(_QWORD *)a1 = v75;
          }
          v33 = a5;
          if (__OFADD__(v8++, 1))
            goto LABEL_60;
        }
        ++v30;
        v31 = v5[2];
        v32 += 32;
        if (v30 == v31)
          return v8;
        continue;
      }
      result = swift_bridgeObjectRelease_n(v37, 2);
      goto LABEL_28;
    }
    break;
  }
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  __break(1u);
LABEL_64:
  __break(1u);
LABEL_65:
  __break(1u);
  return result;
}

_QWORD *sub_32718(_QWORD *a1)
{
  uint64_t v1;

  return sub_2FB08(a1, v1);
}

uint64_t sub_32730()
{
  return objectdestroy_9Tm(72);
}

uint64_t objectdestroy_9Tm(uint64_t a1)
{
  uint64_t v1;

  swift_release(*(_QWORD *)(v1 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v1 + 48));
  return swift_deallocObject(v1, a1, 7);
}

uint64_t sub_32770()
{
  uint64_t v0;
  __int16 v1;

  if (*(_BYTE *)(v0 + 25))
    v1 = 256;
  else
    v1 = 0;
  return sub_2CF94(*(_QWORD *)(v0 + 16), v1 | *(unsigned __int8 *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(unsigned __int8 *)(v0 + 56));
}

uint64_t sub_327A0(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_release(a2);
  return result;
}

uint64_t sub_327B0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 48, 7);
}

void sub_327D4()
{
  uint64_t v0;

  sub_2DA40(*(unsigned __int8 **)(v0 + 16), *(id *)(v0 + 24), *(_QWORD *)(v0 + 32), *(uint64_t **)(v0 + 40));
}

uint64_t sub_327E0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_327F0()
{
  uint64_t v0;

  return sub_691F8(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_327F8(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a2;
  if (!*a2)
  {
    v5 = objc_opt_self(*a3);
    result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_32830()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

_QWORD *sub_32854()
{
  uint64_t v0;

  return sub_2EBD4(*(_QWORD *)(v0 + 16));
}

uint64_t sub_3285C()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[4]);
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_32890()
{
  uint64_t *v0;

  return sub_2F3F8(v0[2], v0[3], v0[4]);
}

unint64_t sub_3289C()
{
  unint64_t result;

  result = qword_3B2110;
  if (!qword_3B2110)
  {
    result = swift_getWitnessTable(&unk_305614);
    atomic_store(result, (unint64_t *)&qword_3B2110);
  }
  return result;
}

uint64_t sub_328E0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_3290C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_2B2DC(a1, a2, *(_QWORD *)(v3 + 16), a3);
}

uint64_t sub_32914(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;

  result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = swift_getWitnessTable(a3);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s8ShelfKit23RecentlySearchedStorageC4ItemV5ScopeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_329A0 + 4 * byte_2EBC63[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_329D4 + 4 * byte_2EBC5E[v4]))();
}

uint64_t sub_329D4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_329DC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x329E4);
  return result;
}

uint64_t sub_329F0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x329F8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_329FC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_32A04(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RecentlySearchedStorage.Item.Scope.CodingKeys()
{
  return &type metadata for RecentlySearchedStorage.Item.Scope.CodingKeys;
}

ValueMetadata *type metadata accessor for RecentlySearchedStorage.Item.Scope.StoreCodingKeys()
{
  return &type metadata for RecentlySearchedStorage.Item.Scope.StoreCodingKeys;
}

ValueMetadata *type metadata accessor for RecentlySearchedStorage.Item.Scope.LibraryCodingKeys()
{
  return &type metadata for RecentlySearchedStorage.Item.Scope.LibraryCodingKeys;
}

unint64_t sub_32A44()
{
  unint64_t result;

  result = qword_3B2170;
  if (!qword_3B2170)
  {
    result = swift_getWitnessTable(&unk_2EC1A4);
    atomic_store(result, (unint64_t *)&qword_3B2170);
  }
  return result;
}

unint64_t sub_32A8C()
{
  unint64_t result;

  result = qword_3B2178;
  if (!qword_3B2178)
  {
    result = swift_getWitnessTable(&unk_2EC0C4);
    atomic_store(result, (unint64_t *)&qword_3B2178);
  }
  return result;
}

unint64_t sub_32AD4()
{
  unint64_t result;

  result = qword_3B2180;
  if (!qword_3B2180)
  {
    result = swift_getWitnessTable(&unk_2EC0EC);
    atomic_store(result, (unint64_t *)&qword_3B2180);
  }
  return result;
}

unint64_t sub_32B1C()
{
  unint64_t result;

  result = qword_3B2188;
  if (!qword_3B2188)
  {
    result = swift_getWitnessTable(&unk_2EC074);
    atomic_store(result, (unint64_t *)&qword_3B2188);
  }
  return result;
}

unint64_t sub_32B64()
{
  unint64_t result;

  result = qword_3B2190;
  if (!qword_3B2190)
  {
    result = swift_getWitnessTable(&unk_2EC09C);
    atomic_store(result, (unint64_t *)&qword_3B2190);
  }
  return result;
}

unint64_t sub_32BAC()
{
  unint64_t result;

  result = qword_3B2198;
  if (!qword_3B2198)
  {
    result = swift_getWitnessTable(&unk_2EC114);
    atomic_store(result, (unint64_t *)&qword_3B2198);
  }
  return result;
}

unint64_t sub_32BF4()
{
  unint64_t result;

  result = qword_3B21A0;
  if (!qword_3B21A0)
  {
    result = swift_getWitnessTable(&unk_2EC13C);
    atomic_store(result, (unint64_t *)&qword_3B21A0);
  }
  return result;
}

unint64_t static SearchHintsPageIntent.kind.getter()
{
  return 0xD000000000000015;
}

uint64_t NSUserDefaults.Keys.init(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t static GroupedSearchResultsIntent.== infix(_:_:)(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a1;
  v5 = a1[1];
  v6 = a2[1];
  if (v4 == *a2 && v5 == v6)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v6, 0);
}

uint64_t sub_32CD0()
{
  return 1836213620;
}

uint64_t sub_32CE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 1836213620 && a2 == 0xE400000000000000)
  {
    result = swift_bridgeObjectRelease(0xE400000000000000);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(1836213620, 0xE400000000000000, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_32D64(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_32EC0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_32D8C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_32EC0();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_32DB4(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000015;
  a1[1] = 0x80000000002EC2C0;
}

uint64_t SearchHintsPageIntent.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B21A8);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = v1[1];
  v9 = a1[3];
  v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  v11 = sub_32EC0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SearchHintsPageIntent.CodingKeys, &type metadata for SearchHintsPageIntent.CodingKeys, v11, v9, v10);
  KeyedEncodingContainer.encode(_:forKey:)(v7, v8, v12, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_32EC0()
{
  unint64_t result;

  result = qword_3B21B0;
  if (!qword_3B21B0)
  {
    result = swift_getWitnessTable(&unk_2EC530);
    atomic_store(result, (unint64_t *)&qword_3B21B0);
  }
  return result;
}

uint64_t SearchHintsPageIntent.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B21B8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  v11 = sub_32EC0();
  v12 = dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SearchHintsPageIntent.CodingKeys, &type metadata for SearchHintsPageIntent.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v13 = KeyedDecodingContainer.decode(_:forKey:)(v12, v5);
    v15 = v14;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v13;
    a2[1] = v15;
  }
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

unint64_t sub_33024()
{
  unint64_t result;

  result = qword_3B21C0;
  if (!qword_3B21C0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SearchHintsPageIntent);
    atomic_store(result, (unint64_t *)&qword_3B21C0);
  }
  return result;
}

unint64_t sub_3306C()
{
  unint64_t result;

  result = qword_3B21C8;
  if (!qword_3B21C8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SearchHintsPageIntent);
    atomic_store(result, (unint64_t *)&qword_3B21C8);
  }
  return result;
}

unint64_t sub_330B4()
{
  unint64_t result;

  result = qword_3B21D0;
  if (!qword_3B21D0)
  {
    type metadata accessor for SearchHintsPage(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for SearchHintsPage);
    atomic_store(result, (unint64_t *)&qword_3B21D0);
  }
  return result;
}

uint64_t sub_330FC@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return SearchHintsPageIntent.init(from:)(a1, a2);
}

uint64_t sub_33110(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_3342C();
  return CustomJSValueConvertible<>.jsRepresentation(in:)(a1, a2, a3, v6);
}

uint64_t sub_3316C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return sub_4653C(a1, a2, a3);
}

_QWORD *initializeBufferWithCopyOfBuffer for ActionMenu.ID(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t destroy for ActionMenu.ID(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
}

_QWORD *assignWithCopy for ActionMenu.ID(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = *a2;
  v3 = a2[1];
  v4 = a1[1];
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

_QWORD *assignWithTake for ActionMenu.ID(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for ActionMenu.ID(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ActionMenu.ID(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SearchHintsPageIntent()
{
  return &type metadata for SearchHintsPageIntent;
}

uint64_t storeEnumTagSinglePayload for SearchHintsPageIntent.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_332F8 + 4 * byte_2EC2D0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_33318 + 4 * byte_2EC2D5[v4]))();
}

_BYTE *sub_332F8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_33318(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_33320(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_33328(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_33330(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_33338(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for SearchHintsPageIntent.CodingKeys()
{
  return &type metadata for SearchHintsPageIntent.CodingKeys;
}

unint64_t sub_33358()
{
  unint64_t result;

  result = qword_3B21D8;
  if (!qword_3B21D8)
  {
    result = swift_getWitnessTable(&unk_2EC508);
    atomic_store(result, (unint64_t *)&qword_3B21D8);
  }
  return result;
}

unint64_t sub_333A0()
{
  unint64_t result;

  result = qword_3B21E0;
  if (!qword_3B21E0)
  {
    result = swift_getWitnessTable(&unk_2EC478);
    atomic_store(result, (unint64_t *)&qword_3B21E0);
  }
  return result;
}

unint64_t sub_333E8()
{
  unint64_t result;

  result = qword_3B21E8;
  if (!qword_3B21E8)
  {
    result = swift_getWitnessTable(&unk_2EC4A0);
    atomic_store(result, (unint64_t *)&qword_3B21E8);
  }
  return result;
}

unint64_t sub_3342C()
{
  unint64_t result;

  result = qword_3B21F0;
  if (!qword_3B21F0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SearchHintsPageIntent);
    atomic_store(result, (unint64_t *)&qword_3B21F0);
  }
  return result;
}

id Highlight.sLHighlight.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 32);
}

uint64_t Highlight.adamID.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 40);
}

uint64_t Highlight.impressionMetrics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23A70(v1 + OBJC_IVAR____TtC8ShelfKit9Highlight_impressionMetrics, a1);
}

uint64_t Highlight.__allocating_init(sLHighlight:adamId:impressionMetrics:)(void *a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v9 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  *(_QWORD *)(v9 + 32) = a1;
  v10 = a1;
  v11 = objc_msgSend(v10, "identifier");
  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  v14 = v13;

  *(_QWORD *)(v9 + 16) = v12;
  *(_QWORD *)(v9 + 24) = v14;
  *(_QWORD *)(v9 + 40) = a2;
  *(_BYTE *)(v9 + 48) = a3 & 1;
  sub_23AB8(a4, v9 + OBJC_IVAR____TtC8ShelfKit9Highlight_impressionMetrics);
  return v9;
}

uint64_t Highlight.init(sLHighlight:adamId:impressionMetrics:)(void *a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v4;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)(v4 + 32) = a1;
  v8 = a1;
  v9 = objc_msgSend(v8, "identifier");
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  v12 = v11;

  *(_QWORD *)(v4 + 16) = v10;
  *(_QWORD *)(v4 + 24) = v12;
  *(_QWORD *)(v4 + 40) = a2;
  *(_BYTE *)(v4 + 48) = a3 & 1;
  sub_23AB8(a4, v4 + OBJC_IVAR____TtC8ShelfKit9Highlight_impressionMetrics);
  return v4;
}

uint64_t Highlight.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = objc_msgSend(*(id *)(v1 + 32), "identifier");
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v6 = v5;

  String.hash(into:)(a1, v4, v6);
  return swift_bridgeObjectRelease(v6);
}

uint64_t Highlight.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));

  sub_23B00(v0 + OBJC_IVAR____TtC8ShelfKit9Highlight_impressionMetrics);
  return v0;
}

uint64_t Highlight.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));

  sub_23B00(v0 + OBJC_IVAR____TtC8ShelfKit9Highlight_impressionMetrics);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

Swift::Int Highlight.hashValue.getter()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6);
  v1 = objc_msgSend(*(id *)(v0 + 32), "identifier");
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  v4 = v3;

  String.hash(into:)(v6, v2, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t FilterAction.id.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 16);
  swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)v0 + 24));
  return v1;
}

Swift::Int sub_33778()
{
  uint64_t *v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7);
  v2 = objc_msgSend(*(id *)(v1 + 32), "identifier");
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  v5 = v4;

  String.hash(into:)(v7, v3, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_337FC(uint64_t a1)
{
  uint64_t v1;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = objc_msgSend(*(id *)(*(_QWORD *)v1 + 32), "identifier");
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v6 = v5;

  String.hash(into:)(a1, v4, v6);
  return swift_bridgeObjectRelease(v6);
}

Swift::Int sub_33864()
{
  uint64_t *v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7);
  v2 = objc_msgSend(*(id *)(v1 + 32), "identifier");
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  v5 = v4;

  String.hash(into:)(v7, v3, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_338E4@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return sub_23A70(*v1 + OBJC_IVAR____TtC8ShelfKit9Highlight_impressionMetrics, a1);
}

uint64_t sub_338FC(uint64_t *a1, uint64_t *a2)
{
  return _s8ShelfKit9HighlightC2eeoiySbAC_ACtFZ_0(*a1, *a2);
}

uint64_t Episode.channelAdamId.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t HighlightIdentifier.__allocating_init(identifier:adamId:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t result;

  result = swift_allocObject(v4, 41, 7);
  *(_QWORD *)(result + 16) = a1;
  *(_QWORD *)(result + 24) = a2;
  *(_QWORD *)(result + 32) = a3;
  *(_BYTE *)(result + 40) = a4 & 1;
  return result;
}

uint64_t HighlightIdentifier.init(identifier:adamId:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a2;
  *(_QWORD *)(v4 + 32) = a3;
  *(_BYTE *)(v4 + 40) = a4 & 1;
  return v4;
}

uint64_t HighlightIdentifier.__allocating_init(deserializing:using:)(char *a1, uint64_t a2)
{
  return sub_33C90(a1, a2);
}

uint64_t HighlightIdentifier.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocClassInstance(v0, 41, 7);
}

uint64_t sub_339BC@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t result;

  result = sub_33C90(a1, a2);
  if (!v3)
    *a3 = result;
  return result;
}

uint64_t sub_339E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return ExpressibleByJSON.init(tryDeserializing:using:)(a1, a2, v2);
}

uint64_t HighlightIdentifier.__allocating_init(from:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  v5 = a1[2];
  swift_bridgeObjectRetain(v3);
  sub_33E40((uint64_t)a1);
  result = swift_allocObject(v1, 41, 7);
  *(_QWORD *)(result + 16) = v4;
  *(_QWORD *)(result + 24) = v3;
  *(_QWORD *)(result + 32) = v5;
  *(_BYTE *)(result + 40) = 0;
  return result;
}

ShelfKit::HighlightType_optional __swiftcall HighlightType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  ShelfKit::HighlightType_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_3731B8, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 3;
  if (v5 < 3)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t HighlightType.rawValue.getter()
{
  char *v0;

  return *(_QWORD *)&aPodcast_7[8 * *v0];
}

uint64_t sub_33ABC(char *a1, char *a2)
{
  return sub_1E2A14(*a1, *a2);
}

Swift::Int sub_33AC8()
{
  char *v0;
  uint64_t v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  String.hash(into:)(v3, *(_QWORD *)&aPodcast_7[8 * v1], 0xE700000000000000);
  swift_bridgeObjectRelease(0xE700000000000000);
  return Hasher._finalize()();
}

uint64_t sub_33B20(uint64_t a1)
{
  char *v1;

  String.hash(into:)(a1, *(_QWORD *)&aPodcast_7[8 * *v1], 0xE700000000000000);
  return swift_bridgeObjectRelease(0xE700000000000000);
}

Swift::Int sub_33B4C()
{
  char *v0;
  uint64_t v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  String.hash(into:)(v3, *(_QWORD *)&aPodcast_7[8 * v1], 0xE700000000000000);
  swift_bridgeObjectRelease(0xE700000000000000);
  return Hasher._finalize()();
}

ShelfKit::HighlightType_optional sub_33BA0(Swift::String *a1)
{
  return HighlightType.init(rawValue:)(*a1);
}

void sub_33BAC(_QWORD *a1@<X8>)
{
  char *v1;

  *a1 = *(_QWORD *)&aPodcast_7[8 * *v1];
  a1[1] = 0xE700000000000000;
}

uint64_t _s8ShelfKit9HighlightC2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v12;

  v3 = objc_msgSend(*(id *)(a1 + 32), "identifier");
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v6 = v5;

  v7 = objc_msgSend(*(id *)(a2 + 32), "identifier");
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  v10 = v9;

  if (v4 == v8 && v6 == v10)
  {
    v12 = 1;
    v10 = v6;
  }
  else
  {
    v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v6, v8, v10, 0);
  }
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v10);
  return v12 & 1;
}

uint64_t sub_33C90(char *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;

  v27 = a2;
  v4 = type metadata accessor for JSONObject(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v26 - v9;
  v11 = JSONObject.subscript.getter(0x696669746E656469, 0xEA00000000007265);
  v12 = JSONObject.string.getter(v11);
  v14 = v13;
  v15 = *(void (**)(char *, uint64_t))(v5 + 8);
  v15(v10, v4);
  v16 = JSONObject.subscript.getter(0x64496D616461, 0xE600000000000000);
  v17 = JSONObject.string.getter(v16);
  v19 = v18;
  if (v18)
  {
    v20 = static AdamID.parse(_:)(v17, v18);
    if (v2)
    {
      v21 = swift_bridgeObjectRelease(v19);
      v22 = static AdamID.empty.getter(v21);
      swift_errorRelease(v2);
    }
    else
    {
      v22 = v20;
      swift_bridgeObjectRelease(v19);
    }
  }
  else
  {
    v22 = 0;
  }
  v23 = type metadata accessor for JSONContext(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(v27, v23);
  v15(a1, v4);
  v15(v8, v4);
  v24 = type metadata accessor for HighlightIdentifier();
  result = swift_allocObject(v24, 41, 7);
  *(_QWORD *)(result + 16) = v12;
  *(_QWORD *)(result + 24) = v14;
  *(_QWORD *)(result + 32) = v22;
  *(_BYTE *)(result + 40) = v19 == 0;
  return result;
}

uint64_t sub_33E40(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for HighlightResource(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_33E7C(uint64_t a1)
{
  uint64_t result;

  result = sub_33F10(&qword_3B21F8, (uint64_t)&protocol conformance descriptor for Highlight);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for Highlight(uint64_t a1)
{
  uint64_t result;

  result = qword_3B2240;
  if (!qword_3B2240)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for Highlight);
  return result;
}

uint64_t sub_33EEC()
{
  return sub_33F10(&qword_3B2200, (uint64_t)&protocol conformance descriptor for Highlight);
}

uint64_t sub_33F10(unint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  if (!result)
  {
    type metadata accessor for Highlight(255);
    result = swift_getWitnessTable(a2);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_33F54()
{
  unint64_t result;

  result = qword_3B2208;
  if (!qword_3B2208)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for HighlightFeedback);
    atomic_store(result, (unint64_t *)&qword_3B2208);
  }
  return result;
}

unint64_t sub_33F9C()
{
  unint64_t result;

  result = qword_3B2210;
  if (!qword_3B2210)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for HighlightType);
    atomic_store(result, (unint64_t *)&qword_3B2210);
  }
  return result;
}

uint64_t sub_33FE0()
{
  return type metadata accessor for Highlight(0);
}

void sub_33FE8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = &unk_2EC830;
  v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[2] = &unk_2EC848;
  sub_34090(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(v2 - 8) + 64;
    swift_updateClassMetadata2(a1, 256, 4, v4, a1 + 80);
  }
}

uint64_t method lookup function for Highlight(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for Highlight);
}

uint64_t dispatch thunk of Highlight.__allocating_init(sLHighlight:adamId:impressionMetrics:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v3 + 112))(a1, a2, a3 & 1);
}

void sub_34090(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_3B2250)
  {
    v2 = type metadata accessor for ImpressionMetrics(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_3B2250);
  }
}

uint64_t type metadata accessor for HighlightIdentifier()
{
  return objc_opt_self(_TtC8ShelfKit19HighlightIdentifier);
}

uint64_t method lookup function for HighlightIdentifier(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for HighlightIdentifier);
}

uint64_t dispatch thunk of HighlightIdentifier.__allocating_init(identifier:adamId:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v4 + 96))(a1, a2, a3, a4 & 1);
}

uint64_t storeEnumTagSinglePayload for HighlightFeedback(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_34168 + 4 * byte_2EC5D5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_3419C + 4 * asc_2EC5D0[v4]))();
}

uint64_t sub_3419C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_341A4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x341ACLL);
  return result;
}

uint64_t sub_341B8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x341C0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_341C4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_341CC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HighlightFeedback()
{
  return &type metadata for HighlightFeedback;
}

uint64_t storeEnumTagSinglePayload for HighlightType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_34234 + 4 * byte_2EC5DF[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_34268 + 4 * byte_2EC5DA[v4]))();
}

uint64_t sub_34268(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_34270(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x34278);
  return result;
}

uint64_t sub_34284(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x3428CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_34290(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_34298(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HighlightType()
{
  return &type metadata for HighlightType;
}

uint64_t StoreDataCacheKey.init(rawValue:)@<X0>(Swift::String string@<0:X0, 8:X1>, BOOL *a2@<X8>)
{
  void *object;
  Swift::String v3;
  Swift::Int v5;
  uint64_t result;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_373220, v3);
  result = swift_bridgeObjectRelease(object);
  *a2 = v5 != 0;
  return result;
}

uint64_t StoreDataCacheKey.rawValue.getter()
{
  return 0x6F4E6E657473694CLL;
}

unint64_t sub_34330()
{
  unint64_t result;

  result = qword_3B2398;
  if (!qword_3B2398)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for StoreDataCacheKey);
    atomic_store(result, (unint64_t *)&qword_3B2398);
  }
  return result;
}

Swift::Int sub_34374()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  String.hash(into:)(v1, 0x6F4E6E657473694CLL, 0xEF7265746F6F4677);
  return Hasher._finalize()();
}

uint64_t sub_343D0(uint64_t a1)
{
  return String.hash(into:)(a1, 0x6F4E6E657473694CLL, 0xEF7265746F6F4677);
}

Swift::Int sub_343F4()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  String.hash(into:)(v1, 0x6F4E6E657473694CLL, 0xEF7265746F6F4677);
  return Hasher._finalize()();
}

uint64_t sub_3444C@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_373258, v3);
  result = swift_bridgeObjectRelease(v4);
  *a2 = v5 != 0;
  return result;
}

void sub_3449C(_QWORD *a1@<X8>)
{
  *a1 = 0x6F4E6E657473694CLL;
  a1[1] = 0xEF7265746F6F4677;
}

uint64_t storeEnumTagSinglePayload for StoreDataCacheKey(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_34504 + 4 * asc_2EC910[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_34524 + 4 * byte_2EC915[v4]))();
}

_BYTE *sub_34504(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_34524(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_3452C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_34534(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_3453C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_34544(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for StoreDataCacheKey()
{
  return &type metadata for StoreDataCacheKey;
}

uint64_t UberBackgroundProtocol.interfaceStyleForOverride.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v4 = type metadata accessor for AnalyzedColor(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a2 + 32))(&v14, a1, a2);
  if ((_BYTE)v14)
  {
    if (v14 == 1)
      return 1;
    else
      return v14;
  }
  else
  {
    v9 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a2 + 24))(a1, a2);

    if (v9)
    {
      v10 = UberBackgroundProtocol.normalizedBackgroundColor.getter(a1, a2);
      v11 = AnalyzedColor.init(color:)(v10);
      v8 = AnalyzedColor.suggestedInterfaceStyle.getter(v11);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    }
    else
    {
      return 0;
    }
  }
  return v8;
}

uint64_t UberBackgroundProtocol.normalizedBackgroundColor.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;

  v2 = (*(uint64_t (**)(void))(a2 + 24))();
  if (!v2)
    return Color.color.getter(0, 2);
  v3 = (void *)v2;
  v4 = UIColor.clampedBrightness(min:max:)(0.13, 0.95);

  return v4;
}

uint64_t EpisodeCaptionGenerator.caption.getter()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_2ECA00);
  v2 = swift_getKeyPath(&unk_2ECA28);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

double sub_34728@<D0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  __int128 v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_2ECA00);
  v5 = swift_getKeyPath(&unk_2ECA28);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(KeyPath);
  swift_release(v5);
  result = *(double *)&v7;
  *a2 = v7;
  return result;
}

uint64_t sub_347A8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  _QWORD v8[2];

  v3 = *a1;
  v2 = a1[1];
  v4 = *a2;
  KeyPath = swift_getKeyPath(&unk_2ECA00);
  v6 = swift_getKeyPath(&unk_2ECA28);
  v8[0] = v3;
  v8[1] = v2;
  swift_bridgeObjectRetain(v2);
  swift_retain(v4);
  return static Published.subscript.setter(v8, v4, KeyPath, v6);
}

uint64_t EpisodeCaptionGenerator.$caption.getter()
{
  return sub_349B8(&OBJC_IVAR____TtC8ShelfKit23EpisodeCaptionGenerator__caption, &qword_3B23A8);
}

uint64_t EpisodeCaptionGenerator.isPlayed.getter()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_2ECA48);
  v2 = swift_getKeyPath(&unk_2ECA70);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

uint64_t sub_348B0@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_2ECA48);
  v5 = swift_getKeyPath(&unk_2ECA70);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(KeyPath);
  result = swift_release(v5);
  *a2 = v7;
  return result;
}

uint64_t sub_34930(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  char v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_2ECA48);
  v5 = swift_getKeyPath(&unk_2ECA70);
  v7 = v2;
  swift_retain(v3);
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

uint64_t EpisodeCaptionGenerator.$isPlayed.getter()
{
  return sub_349B8(&OBJC_IVAR____TtC8ShelfKit23EpisodeCaptionGenerator__isPlayed, &qword_3B23B8);
}

uint64_t sub_349B8(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  _BYTE v6[24];

  swift_beginAccess(v2 + *a1, v6, 33, 0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(a2);
  Published.projectedValue.getter(v4);
  return swift_endAccess(v6);
}

uint64_t sub_34A1C(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t *a5)
{
  uint64_t v6;
  _BYTE v8[24];

  swift_beginAccess(*a1 + *a4, v8, 33, 0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(a5);
  Published.projectedValue.getter(v6);
  return swift_endAccess(v8);
}

uint64_t sub_34A88(_BYTE *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t *a5, _QWORD *a6, uint64_t *a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  _BYTE *v17;
  void (*v18)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  _BYTE v23[24];

  v11 = __swift_instantiateConcreteTypeFromMangledName(a5);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = &v23[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v13);
  v17 = &v23[-v16 - 8];
  v18 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v12 + 16);
  v18(&v23[-v16 - 8], a1, v11);
  v19 = *a2;
  v18(v15, v17, v11);
  swift_beginAccess(v19 + *a6, v23, 33, 0);
  v20 = __swift_instantiateConcreteTypeFromMangledName(a7);
  Published.projectedValue.setter(v15, v20);
  swift_endAccess(v23);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v12 + 8))(v17, v11);
}

uint64_t EpisodeCaptionGenerator.__allocating_init(asPartOf:episodeHeader:showsSubscriptionBadge:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;

  v4 = v3;
  v8 = type metadata accessor for EyebrowBuilder.ListContext(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(a2 + 72) == 1)
  {
    swift_release(a1);
    swift_release(a2);
    return 0;
  }
  else
  {
    v13 = *(_QWORD *)(a2 + 64);
    v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B23C0);
    v15 = type metadata accessor for BaseObjectGraph(0);
    inject<A, B>(_:from:)(&v21, v14, a1, v14, v15);
    v16 = v21;
    swift_retain(a2);
    v17 = EpisodeStateController.stateMachine(for:)(v13);
    (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for EyebrowBuilder.ListContext.single(_:), v8);
    v18 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v12 = sub_354F0(a1, a2, v17, (uint64_t)v11, a3 & 1, v18, (void (*)(uint64_t))type metadata accessor for EpisodeHeader, &qword_3B24F0, (uint64_t)&protocol conformance descriptor for EpisodeHeader, (uint64_t)sub_3661C);
    swift_release(v16);
    swift_release(a2);
    swift_release(a1);
    swift_release(v17);
  }
  return v12;
}

uint64_t EpisodeCaptionGenerator.__allocating_init(asPartOf:source:playStateMachine:listContext:showsSubscriptionBadge:)(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v11 = a2[3];
  v12 = a2[4];
  v13 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)a2, v11);
  v14 = sub_36280(a1, v13, a3, a4, a5, v5, v11, v12);
  swift_release(a1);
  swift_release(a3);
  __swift_destroy_boxed_opaque_existential_1(a2);
  return v14;
}

uint64_t EpisodeCaptionGenerator.init(asPartOf:source:playStateMachine:listContext:showsSubscriptionBadge:)(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v11 = a2[3];
  v12 = a2[4];
  v13 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)a2, v11);
  __chkstk_darwin(v13);
  v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v16 + 16))(v15);
  v17 = sub_35BC4(a1, (uint64_t)v15, a3, a4, a5, v5, v11, v12);
  swift_release(a1);
  swift_release(a3);
  __swift_destroy_boxed_opaque_existential_1(a2);
  return v17;
}

uint64_t sub_34EB4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t Strong;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  uint64_t KeyPath;
  uint64_t v15;
  uint64_t v16;
  char v17;
  _BYTE v18[24];
  _BYTE v19[24];

  v3 = type metadata accessor for EpisodePlayState(0);
  __chkstk_darwin(v3);
  v5 = (uint64_t *)((char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = a2 + 16;
  swift_beginAccess(a2 + 16, v19, 0, 0);
  Strong = swift_weakLoadStrong(a2 + 16);
  if (Strong)
  {
    v8 = Strong;
    v9 = *(_QWORD *)(Strong + OBJC_IVAR____TtC8ShelfKit23EpisodeCaptionGenerator_playState);
    swift_retain(v9);
    swift_release(v8);
    dispatch thunk of EpisodeStateMachine.currentState.getter(v5);
    CurrentValueSubject.value.setter(v5);
    swift_release(v9);
  }
  swift_beginAccess(v6, v18, 0, 0);
  result = swift_weakLoadStrong(v6);
  if (result)
  {
    v11 = result;
    v12 = dispatch thunk of EpisodeStateMachine.currentState.getter(v5);
    v13 = EpisodePlayState.isEpisodePlayed.getter(v12);
    sub_36668((uint64_t)v5);
    KeyPath = swift_getKeyPath(&unk_2ECA48);
    v15 = swift_getKeyPath(&unk_2ECA70);
    v17 = v13 & 1;
    return static Published.subscript.setter(&v17, v11, KeyPath, v15);
  }
  return result;
}

uint64_t EpisodeCaptionGenerator.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0 + OBJC_IVAR____TtC8ShelfKit23EpisodeCaptionGenerator__caption;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B23A8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = v0 + OBJC_IVAR____TtC8ShelfKit23EpisodeCaptionGenerator__isPlayed;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B23B8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit23EpisodeCaptionGenerator_playStateMachine));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit23EpisodeCaptionGenerator_playState));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit23EpisodeCaptionGenerator_subscriptions));
  return v0;
}

uint64_t EpisodeCaptionGenerator.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0 + OBJC_IVAR____TtC8ShelfKit23EpisodeCaptionGenerator__caption;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B23A8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = v0 + OBJC_IVAR____TtC8ShelfKit23EpisodeCaptionGenerator__isPlayed;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B23B8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit23EpisodeCaptionGenerator_playStateMachine));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit23EpisodeCaptionGenerator_playState));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit23EpisodeCaptionGenerator_subscriptions));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_35154@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t result;

  result = ObservableObject<>.objectWillChange.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t _s8ShelfKit23EpisodeCaptionGeneratorC8asPartOf7episode22showsSubscriptionBadge16useSearchContextAC9JetEngine15BaseObjectGraphC_AA06LegacyC6LockupCS2btcfC_0(uint64_t a1, uint64_t a2, int a3, char a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;

  v32 = a3;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B24F8);
  __chkstk_darwin(v7);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for EyebrowBuilder.ListContext(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v16 = (uint64_t *)((char *)&v30 - v15);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B23C0);
  v18 = type metadata accessor for BaseObjectGraph(0);
  v31 = a1;
  inject<A, B>(_:from:)(&v33, v17, a1, v17, v18);
  v19 = type metadata accessor for LibraryEpisodeLockup(0);
  v20 = swift_dynamicCastClass(a2, v19);
  if (v20)
  {
    v21 = a4;
    v22 = *(_QWORD *)(v20 + OBJC_IVAR____TtC8ShelfKit20LibraryEpisodeLockup_uuid);
    v23 = *(_QWORD *)(v20 + OBJC_IVAR____TtC8ShelfKit20LibraryEpisodeLockup_uuid + 8);
    swift_retain();
    swift_bridgeObjectRetain();
    v24 = dispatch thunk of EpisodeStateController.stateMachine(for:)(v22, v23, 1);
    swift_release();
    swift_bridgeObjectRelease();
    if ((v21 & 1) != 0)
    {
LABEL_3:
      dispatch thunk of EpisodeStateMachine.currentState.getter(v16);
      v25 = type metadata accessor for EpisodePlayState(0);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v16, 0, 1, v25);
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(v11 + 104))(v16, enum case for EyebrowBuilder.ListContext.episodeSearchResult(_:), v10);
      goto LABEL_8;
    }
  }
  else
  {
    v24 = dispatch thunk of EpisodeStateController.stateMachine(for:)(*(_QWORD *)(a2 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup_adamId), 0, 0);
    if ((a4 & 1) != 0)
      goto LABEL_3;
  }
  sub_366A4(a2 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_listContext, (uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v11 + 104))(v16, enum case for EyebrowBuilder.ListContext.single(_:), v10);
    sub_366EC((uint64_t)v9);
  }
  else
  {
    (*(void (**)(_QWORD *, char *, uint64_t))(v11 + 32))(v16, v9, v10);
  }
LABEL_8:
  (*(void (**)(char *, _QWORD *, uint64_t))(v11 + 16))(v13, v16, v10);
  v26 = type metadata accessor for EpisodeCaptionGenerator(0);
  v27 = swift_allocObject(v26, *(unsigned int *)(v26 + 48), *(unsigned __int16 *)(v26 + 52));
  swift_retain();
  swift_retain();
  v28 = sub_354F0(v31, a2, v24, (uint64_t)v13, v32 & 1, v27, (void (*)(uint64_t))type metadata accessor for LegacyEpisodeLockup, &qword_3B2500, (uint64_t)&protocol conformance descriptor for LegacyEpisodeLockup, (uint64_t)sub_3661C);
  swift_release();
  swift_release();
  swift_release();
  swift_release_n(v24, 2);
  (*(void (**)(_QWORD *, uint64_t))(v11 + 8))(v16, v10);
  return v28;
}

uint64_t sub_354B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  return sub_354F0(a1, a2, a3, a4, a5, a6, (void (*)(uint64_t))type metadata accessor for EpisodeHeader, &qword_3B24F0, (uint64_t)&protocol conformance descriptor for EpisodeHeader, (uint64_t)sub_3661C);
}

uint64_t sub_354F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, void (*a7)(uint64_t), unint64_t *a8, uint64_t a9, uint64_t a10)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  _QWORD *v74;
  uint64_t v75;
  unint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  char *v85;
  int v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD v94[3];
  _QWORD v95[3];
  uint64_t v96;
  uint64_t v97;
  _QWORD v98[5];

  v76 = a8;
  v86 = a5;
  v92 = a4;
  v78 = a3;
  v84 = a2;
  v80 = a1;
  v75 = a9;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B24D0);
  v90 = *(_QWORD *)(v12 - 8);
  v91 = v12;
  v13 = __chkstk_darwin(v12);
  v88 = (char *)&v74 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v89 = (char *)&v74 - v15;
  v82 = type metadata accessor for EyebrowBuilder.Style(0);
  v81 = *(_QWORD *)(v82 - 8);
  __chkstk_darwin(v82);
  v85 = (char *)&v74 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B24D8);
  __chkstk_darwin(v17);
  v83 = (char *)&v74 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = type metadata accessor for EyebrowBuilder.ListContext(0);
  v93 = *(_QWORD *)(v87 - 8);
  __chkstk_darwin(v87);
  v79 = (char *)&v74 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for EpisodePlayState(0);
  v21 = __chkstk_darwin(v20);
  v74 = (_QWORD **)((char *)&v74 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  v23 = __chkstk_darwin(v21);
  v77 = (uint64_t)&v74 - v24;
  __chkstk_darwin(v23);
  v26 = (char *)&v74 - v25;
  v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B23B8);
  v28 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v30 = (char *)&v74 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B23A8);
  v32 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v34 = (char *)&v74 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98[3] = ((uint64_t (*)(_QWORD))a7)(0);
  v98[4] = sub_F1C0(v76, a7, v75);
  v98[0] = v84;
  v35 = a6 + OBJC_IVAR____TtC8ShelfKit23EpisodeCaptionGenerator__caption;
  v95[0] = 0;
  v95[1] = 0;
  v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2420);
  Published.init(initialValue:)(v95, v36);
  v37 = *(void (**)(uint64_t, char *, uint64_t))(v32 + 32);
  v84 = v31;
  v38 = v31;
  v39 = v78;
  v37(v35, v34, v38);
  v40 = a6 + OBJC_IVAR____TtC8ShelfKit23EpisodeCaptionGenerator__isPlayed;
  LOBYTE(v95[0]) = 0;
  Published.init(initialValue:)(v95, &type metadata for Bool);
  (*(void (**)(uint64_t, char *, uint64_t))(v28 + 32))(v40, v30, v27);
  v41 = OBJC_IVAR____TtC8ShelfKit23EpisodeCaptionGenerator_playState;
  swift_storeEnumTagMultiPayload(v26, v20, 5);
  v42 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B24E0);
  swift_allocObject(v42, *(unsigned int *)(v42 + 48), *(unsigned __int16 *)(v42 + 52));
  *(_QWORD *)(a6 + v41) = CurrentValueSubject.init(_:)(v26);
  *(_QWORD *)(a6 + OBJC_IVAR____TtC8ShelfKit23EpisodeCaptionGenerator_subscriptions) = _swiftEmptyArrayStorage;
  *(_QWORD *)(a6 + OBJC_IVAR____TtC8ShelfKit23EpisodeCaptionGenerator_playStateMachine) = v39;
  if (v39)
  {
    swift_retain(v39);
    v43 = v74;
    dispatch thunk of EpisodeStateMachine.currentState.getter(v74);
    v44 = v77;
    sub_36624((uint64_t)v43, v77);
    CurrentValueSubject.value.setter(v44);
    v45 = swift_allocObject(&unk_379108, 24, 7);
    swift_weakInit(v45 + 16);
    swift_retain(v39);
    v46 = swift_retain(a6);
    dispatch thunk of EpisodeStateMachine.addStateTransitionObserver(_:action:)(v46, a10, v45);
    swift_release(v39);
    swift_release(a6);
    swift_release(v45);
  }
  else
  {
    v47 = v77;
    swift_storeEnumTagMultiPayload(v77, v20, 5);
    CurrentValueSubject.value.setter(v47);
  }
  v48 = OBJC_IVAR____TtC8ShelfKit23EpisodeCaptionGenerator_playState;
  v49 = type metadata accessor for ExplicitContentPresenter(0);
  v50 = BaseObjectGraph.inject<A>(_:)(v95, v49, v49);
  v51 = v95[0];
  v52 = ExplicitContentPresenter.symbol.getter(v50);
  v54 = v53;
  swift_release(v51);
  sub_150C8((uint64_t)v98, (uint64_t)v95);
  v55 = v92;
  v56 = v79;
  v57 = v87;
  (*(void (**)(char *, uint64_t, uint64_t))(v93 + 16))(v79, v92, v87);
  v58 = type metadata accessor for AbbreviatedTimeIntervalFormatter.Configuration(0);
  v59 = v83;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 56))(v83, 1, 1, v58);
  v60 = v85;
  (*(void (**)(char *, _QWORD, uint64_t))(v81 + 104))(v85, enum case for EyebrowBuilder.Style.default(_:), v82);
  v61 = type metadata accessor for EyebrowBuilder(0);
  swift_allocObject(v61, *(unsigned int *)(v61 + 48), *(unsigned __int16 *)(v61 + 52));
  v62 = EyebrowBuilder.init(episode:context:style:uppercase:explicitSymbol:abbreviatedPubDateConfig:showsSubscriptionBadge:hostingViewHasLimitedSpace:)(v95, v56, v60, 1, v52, v54, v59, v86 & 1, 0);
  v94[0] = *(_QWORD *)(a6 + v48);
  v63 = v94[0];
  v64 = sub_365AC();
  swift_retain(v63);
  EyebrowBuilder.captionPublisher<A>(playStatePublisher:)(v95, v94, v42, v64);
  swift_release(v63);
  swift_release(v62);
  v65 = v96;
  v66 = v97;
  __swift_project_boxed_opaque_existential_1(v95, v96);
  v67 = a6 + OBJC_IVAR____TtC8ShelfKit23EpisodeCaptionGenerator__caption;
  swift_beginAccess(a6 + OBJC_IVAR____TtC8ShelfKit23EpisodeCaptionGenerator__caption, v94, 33, 0);
  v68 = v89;
  v69 = v84;
  Published.projectedValue.getter(v84);
  swift_endAccess(v94);
  Publisher<>.assign(to:)(v68, v65, v66);
  v71 = v90;
  v70 = v91;
  v72 = v88;
  (*(void (**)(char *, char *, uint64_t))(v90 + 16))(v88, v68, v91);
  swift_beginAccess(v67, v94, 33, 0);
  Published.projectedValue.setter(v72, v69);
  swift_endAccess(v94);
  (*(void (**)(char *, uint64_t))(v71 + 8))(v68, v70);
  (*(void (**)(uint64_t, uint64_t))(v93 + 8))(v55, v57);
  __swift_destroy_boxed_opaque_existential_1(v98);
  __swift_destroy_boxed_opaque_existential_1(v95);
  return a6;
}

uint64_t sub_35BC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  _QWORD *boxed_opaque_existential_2Tm;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, char *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  int v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD v93[3];
  _QWORD v94[3];
  uint64_t v95;
  uint64_t v96;
  _QWORD v97[5];

  v75 = a8;
  v85 = a5;
  v91 = a4;
  v77 = a3;
  v79 = a2;
  v80 = a1;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B24D0);
  v89 = *(_QWORD *)(v10 - 8);
  v90 = v10;
  v11 = __chkstk_darwin(v10);
  v87 = (char *)&v73 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v88 = (char *)&v73 - v13;
  v82 = type metadata accessor for EyebrowBuilder.Style(0);
  v81 = *(_QWORD *)(v82 - 8);
  __chkstk_darwin(v82);
  v84 = (char *)&v73 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B24D8);
  __chkstk_darwin(v15);
  v83 = (char *)&v73 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = type metadata accessor for EyebrowBuilder.ListContext(0);
  v92 = *(_QWORD *)(v86 - 8);
  __chkstk_darwin(v86);
  v78 = (char *)&v73 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for EpisodePlayState(0);
  v19 = __chkstk_darwin(v18);
  v74 = (uint64_t *)((char *)&v73 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  v21 = __chkstk_darwin(v19);
  v76 = (uint64_t)&v73 - v22;
  __chkstk_darwin(v21);
  v24 = (char *)&v73 - v23;
  v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B23B8);
  v26 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v28 = (char *)&v73 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B23A8);
  v30 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v32 = (char *)&v73 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97[3] = a7;
  v97[4] = v75;
  boxed_opaque_existential_2Tm = __swift_allocate_boxed_opaque_existential_2Tm(v97);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a7 - 8) + 32))(boxed_opaque_existential_2Tm, v79, a7);
  v34 = a6 + OBJC_IVAR____TtC8ShelfKit23EpisodeCaptionGenerator__caption;
  v94[0] = 0;
  v94[1] = 0;
  v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2420);
  Published.init(initialValue:)(v94, v35);
  v36 = *(void (**)(uint64_t, char *, uint64_t))(v30 + 32);
  v79 = v29;
  v37 = v29;
  v38 = v77;
  v36(v34, v32, v37);
  v39 = a6 + OBJC_IVAR____TtC8ShelfKit23EpisodeCaptionGenerator__isPlayed;
  LOBYTE(v94[0]) = 0;
  Published.init(initialValue:)(v94, &type metadata for Bool);
  (*(void (**)(uint64_t, char *, uint64_t))(v26 + 32))(v39, v28, v25);
  v40 = OBJC_IVAR____TtC8ShelfKit23EpisodeCaptionGenerator_playState;
  swift_storeEnumTagMultiPayload(v24, v18, 5);
  v41 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B24E0);
  swift_allocObject(v41, *(unsigned int *)(v41 + 48), *(unsigned __int16 *)(v41 + 52));
  *(_QWORD *)(a6 + v40) = CurrentValueSubject.init(_:)(v24);
  *(_QWORD *)(a6 + OBJC_IVAR____TtC8ShelfKit23EpisodeCaptionGenerator_subscriptions) = _swiftEmptyArrayStorage;
  *(_QWORD *)(a6 + OBJC_IVAR____TtC8ShelfKit23EpisodeCaptionGenerator_playStateMachine) = v38;
  if (v38)
  {
    swift_retain(v38);
    v42 = v74;
    dispatch thunk of EpisodeStateMachine.currentState.getter(v74);
    v43 = v76;
    sub_36624((uint64_t)v42, v76);
    CurrentValueSubject.value.setter(v43);
    v44 = swift_allocObject(&unk_379108, 24, 7);
    swift_weakInit(v44 + 16);
    swift_retain(v38);
    v45 = swift_retain(a6);
    dispatch thunk of EpisodeStateMachine.addStateTransitionObserver(_:action:)(v45, sub_3661C, v44);
    swift_release(v38);
    swift_release(a6);
    swift_release(v44);
  }
  else
  {
    v46 = v76;
    swift_storeEnumTagMultiPayload(v76, v18, 5);
    CurrentValueSubject.value.setter(v46);
  }
  v47 = OBJC_IVAR____TtC8ShelfKit23EpisodeCaptionGenerator_playState;
  v48 = type metadata accessor for ExplicitContentPresenter(0);
  v49 = BaseObjectGraph.inject<A>(_:)(v94, v48, v48);
  v50 = v94[0];
  v51 = ExplicitContentPresenter.symbol.getter(v49);
  v53 = v52;
  swift_release(v50);
  sub_150C8((uint64_t)v97, (uint64_t)v94);
  v54 = v91;
  v55 = v78;
  v56 = v86;
  (*(void (**)(char *, uint64_t, uint64_t))(v92 + 16))(v78, v91, v86);
  v57 = type metadata accessor for AbbreviatedTimeIntervalFormatter.Configuration(0);
  v58 = v83;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 56))(v83, 1, 1, v57);
  v59 = v84;
  (*(void (**)(char *, _QWORD, uint64_t))(v81 + 104))(v84, enum case for EyebrowBuilder.Style.default(_:), v82);
  v60 = type metadata accessor for EyebrowBuilder(0);
  swift_allocObject(v60, *(unsigned int *)(v60 + 48), *(unsigned __int16 *)(v60 + 52));
  v61 = EyebrowBuilder.init(episode:context:style:uppercase:explicitSymbol:abbreviatedPubDateConfig:showsSubscriptionBadge:hostingViewHasLimitedSpace:)(v94, v55, v59, 1, v51, v53, v58, v85 & 1, 0);
  v93[0] = *(_QWORD *)(a6 + v47);
  v62 = v93[0];
  v63 = sub_365AC();
  swift_retain(v62);
  EyebrowBuilder.captionPublisher<A>(playStatePublisher:)(v94, v93, v41, v63);
  swift_release(v62);
  swift_release(v61);
  v64 = v95;
  v65 = v96;
  __swift_project_boxed_opaque_existential_1(v94, v95);
  v66 = a6 + OBJC_IVAR____TtC8ShelfKit23EpisodeCaptionGenerator__caption;
  swift_beginAccess(a6 + OBJC_IVAR____TtC8ShelfKit23EpisodeCaptionGenerator__caption, v93, 33, 0);
  v67 = v88;
  v68 = v79;
  Published.projectedValue.getter(v79);
  swift_endAccess(v93);
  Publisher<>.assign(to:)(v67, v64, v65);
  v70 = v89;
  v69 = v90;
  v71 = v87;
  (*(void (**)(char *, char *, uint64_t))(v89 + 16))(v87, v67, v90);
  swift_beginAccess(v66, v93, 33, 0);
  Published.projectedValue.setter(v71, v68);
  swift_endAccess(v93);
  (*(void (**)(char *, uint64_t))(v70 + 8))(v67, v69);
  (*(void (**)(uint64_t, uint64_t))(v92 + 8))(v54, v56);
  __swift_destroy_boxed_opaque_existential_1(v97);
  __swift_destroy_boxed_opaque_existential_1(v94);
  return a6;
}

uint64_t sub_36280(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v15 = *(_QWORD *)(a7 - 8);
  __chkstk_darwin(a1);
  v17 = (char *)&v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a2, a7);
  return sub_35BC4(a1, (uint64_t)v17, a3, a4, a5, v19, a7, a8);
}

void *sub_36350()
{
  return &protocol witness table for ObservableObjectPublisher;
}

uint64_t sub_3635C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_34A1C(a1, a2, a3, &OBJC_IVAR____TtC8ShelfKit23EpisodeCaptionGenerator__caption, &qword_3B23A8);
}

uint64_t sub_36380(_BYTE *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_34A88(a1, a2, a3, a4, &qword_3B24D0, &OBJC_IVAR____TtC8ShelfKit23EpisodeCaptionGenerator__caption, &qword_3B23A8);
}

uint64_t sub_363AC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_34A1C(a1, a2, a3, &OBJC_IVAR____TtC8ShelfKit23EpisodeCaptionGenerator__isPlayed, &qword_3B23B8);
}

uint64_t sub_363D0(_BYTE *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_34A88(a1, a2, a3, a4, &qword_3B24C8, &OBJC_IVAR____TtC8ShelfKit23EpisodeCaptionGenerator__isPlayed, &qword_3B23B8);
}

uint64_t sub_363FC()
{
  return type metadata accessor for EpisodeCaptionGenerator(0);
}

uint64_t type metadata accessor for EpisodeCaptionGenerator(uint64_t a1)
{
  uint64_t result;

  result = qword_3B2408;
  if (!qword_3B2408)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for EpisodeCaptionGenerator);
  return result;
}

void sub_36440(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[5];

  sub_36500(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_36558();
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      v6[2] = &unk_2ECB08;
      v6[3] = (char *)&value witness table for Builtin.NativeObject + 64;
      v6[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
      swift_updateClassMetadata2(a1, 256, 5, v6, a1 + 80);
    }
  }
}

uint64_t method lookup function for EpisodeCaptionGenerator(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for EpisodeCaptionGenerator);
}

uint64_t dispatch thunk of Brick.__allocating_init(artwork:accessibilityLabel:clickAction:impressionMetrics:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

void sub_36500(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_3B2418)
  {
    v2 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_3B2420);
    v3 = type metadata accessor for Published(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_3B2418);
  }
}

void sub_36558()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_3B2428)
  {
    v0 = type metadata accessor for Published(0, &type metadata for Bool);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_3B2428);
  }
}

unint64_t sub_365AC()
{
  unint64_t result;

  result = qword_3B24E8;
  if (!qword_3B24E8)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_3B24E0);
    result = swift_getWitnessTable(&protocol conformance descriptor for CurrentValueSubject<A, B>);
    atomic_store(result, (unint64_t *)&qword_3B24E8);
  }
  return result;
}

uint64_t sub_365F8()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_3661C(uint64_t a1)
{
  uint64_t v1;

  return sub_34EB4(a1, v1);
}

uint64_t sub_36624(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for EpisodePlayState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_36668(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for EpisodePlayState(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_366A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B24F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_366EC(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B24F8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_3672C(char *a1, unsigned __int8 *a2)
{
  return sub_3ABDC(*a1, *a2);
}

uint64_t sub_36738(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  uint64_t v3;
  int v4;

  if (a1[1])
    v2 = 256;
  else
    v2 = 0;
  v3 = v2 | *a1;
  if (a2[1])
    v4 = 256;
  else
    v4 = 0;
  return sub_3ACD4(v3, v4 | *a2);
}

uint64_t sub_3676C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return _s8ShelfKit17ShowListPresenterC4KindO2eeoiySbAE_AEtFZ_0(*a1, *a2);
}

uint64_t ShowListPresenter.interactionContextPage.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(v1 + 120) + OBJC_IVAR____TtC8ShelfKit16ShowListProvider_kind);
  v4 = type metadata accessor for InteractionContext.Page(0);
  if (v3 == 9)
    v5 = 14;
  else
    v5 = 16;
  return swift_storeEnumTagMultiPayload(a1, v4, v5);
}

uint64_t ShowListPresenter.pageContent.getter()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(*(_QWORD *)(v0 + 120) + OBJC_IVAR____TtC8ShelfKit16ShowListProvider_pageContent));
}

uint64_t MacSearchPresenter.pageContent.getter()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + 104));
}

uint64_t ShowListPresenter.headerButtonItems.getter()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 112, v2, 0, 0);
  return swift_retain(*(_QWORD *)(v0 + 112));
}

uint64_t ShowListPresenter.headerButtonItems.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + 112, v5, 1, 0);
  v3 = *(_QWORD *)(v1 + 112);
  *(_QWORD *)(v1 + 112) = a1;
  return swift_release(v3);
}

uint64_t (*ShowListPresenter.headerButtonItems.modify(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + 112, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t sub_3689C()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_2ECB60);
  v2 = swift_getKeyPath(&unk_2ECB88);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return (unsigned __int16)v4;
}

uint64_t ShowListPresenter.paginatedPublisher.getter()
{
  uint64_t v0;
  _QWORD *v1;
  _BYTE v3[24];

  v1 = (_QWORD *)(*(_QWORD *)(v0 + 120) + OBJC_IVAR____TtC8ShelfKit16ShowListProvider_paginatedPublisher);
  swift_beginAccess(v1, v3, 0, 0);
  return swift_retain(*v1);
}

uint64_t sub_3695C@<X0>(_QWORD *a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[24];

  v3 = (uint64_t *)(*a1 + OBJC_IVAR____TtC8ShelfKit17ShowListPresenter_rebuildMenuBar);
  swift_beginAccess(v3, v8, 0, 0);
  v5 = *v3;
  v4 = v3[1];
  v6 = swift_allocObject(&unk_3794C8, 32, 7);
  *(_QWORD *)(v6 + 16) = v5;
  *(_QWORD *)(v6 + 24) = v4;
  *a2 = sub_327F0;
  a2[1] = (uint64_t (*)())v6;
  return swift_retain(v4);
}

uint64_t sub_369DC(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (**v6)();
  uint64_t (*v7)();
  char v9[24];

  v4 = *a1;
  v3 = a1[1];
  v5 = swift_allocObject(&unk_3794A0, 32, 7);
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  v6 = (uint64_t (**)())(*a2 + OBJC_IVAR____TtC8ShelfKit17ShowListPresenter_rebuildMenuBar);
  swift_beginAccess(v6, v9, 1, 0);
  v7 = v6[1];
  *v6 = sub_327F0;
  v6[1] = (uint64_t (*)())v5;
  swift_retain(v3);
  return swift_release(v7);
}

uint64_t ShowListPresenter.rebuildMenuBar.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  _BYTE v4[24];

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC8ShelfKit17ShowListPresenter_rebuildMenuBar);
  swift_beginAccess(v0 + OBJC_IVAR____TtC8ShelfKit17ShowListPresenter_rebuildMenuBar, v4, 0, 0);
  v2 = *v1;
  swift_retain(v1[1]);
  return v2;
}

uint64_t ShowListPresenter.rebuildMenuBar.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  _BYTE v8[24];

  v5 = (_QWORD *)(v2 + OBJC_IVAR____TtC8ShelfKit17ShowListPresenter_rebuildMenuBar);
  swift_beginAccess(v5, v8, 1, 0);
  v6 = v5[1];
  *v5 = a1;
  v5[1] = a2;
  return swift_release(v6);
}

uint64_t (*ShowListPresenter.rebuildMenuBar.modify(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC8ShelfKit17ShowListPresenter_rebuildMenuBar, a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t ShowListPresenter.refreshControls.getter()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit17ShowListPresenter_refreshControls));
}

uint64_t ShowListPresenter.isEditing.getter()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit17ShowListPresenter_isEditing));
}

uint64_t ShowListPresenter.dismiss.getter()
{
  uint64_t v0;
  _QWORD *v1;
  _BYTE v3[24];

  v1 = (_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit17ShowListPresenter_dismiss);
  swift_beginAccess(v0 + OBJC_IVAR____TtC8ShelfKit17ShowListPresenter_dismiss, v3, 0, 0);
  return swift_retain(*v1);
}

uint64_t ShowListPresenter.dismiss.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC8ShelfKit17ShowListPresenter_dismiss);
  swift_beginAccess(v3, v6, 1, 0);
  v4 = *v3;
  *v3 = a1;
  return swift_release(v4);
}

uint64_t (*ShowListPresenter.dismiss.modify(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC8ShelfKit17ShowListPresenter_dismiss, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t ShowListPresenter.reorderingExtension.getter@<X0>(uint64_t (**a1)(uint64_t a1, uint64_t *a2)@<X8>)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t *);
  uint64_t v9;
  void (__swiftcall *v10)();
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC8ShelfKit17ShowListPresenter____lazy_storage___reorderingExtension);
  v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit17ShowListPresenter____lazy_storage___reorderingExtension);
  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit17ShowListPresenter____lazy_storage___reorderingExtension + 8);
  v6 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit17ShowListPresenter____lazy_storage___reorderingExtension + 16);
  v7 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit17ShowListPresenter____lazy_storage___reorderingExtension + 24);
  v8 = (uint64_t (*)(uint64_t, uint64_t *))v5;
  v9 = v4;
  v10 = (void (__swiftcall *)())v6;
  v12 = v3[4];
  v11 = v3[5];
  v13 = v7;
  v14 = (uint64_t (*)(uint64_t, uint64_t))v12;
  v15 = v11;
  if (v5 == 1)
  {
    v25 = v6;
    v26 = v4;
    v23 = v3[5];
    v24 = v7;
    v9 = swift_allocObject(&unk_379150, 24, 7);
    swift_weakInit(v9 + 16);
    v15 = swift_allocObject(&unk_379150, 24, 7);
    swift_weakInit(v15 + 16);
    v16 = *v3;
    v21 = v3[2];
    v22 = v3[1];
    v19 = v3[4];
    v20 = v3[3];
    v18 = v3[5];
    v8 = sub_3AEE8;
    *v3 = (uint64_t)sub_3AEE8;
    v3[1] = v9;
    v10 = FindOrCreateEpisodeOfferContentIDsIntentsIntentImplementation.init();
    v3[2] = (uint64_t)FindOrCreateEpisodeOfferContentIDsIntentsIntentImplementation.init();
    v3[3] = 0;
    v14 = sub_3AEF0;
    v3[4] = (uint64_t)sub_3AEF0;
    v3[5] = v15;
    swift_retain(v9);
    swift_retain(v15);
    sub_3AEF8(v16, v22, v21, v20, v19, v18);
    v11 = v23;
    v7 = v24;
    v6 = v25;
    v4 = v26;
    v13 = 0;
  }
  *a1 = v8;
  a1[1] = (uint64_t (*)(uint64_t, uint64_t *))v9;
  a1[2] = (uint64_t (*)(uint64_t, uint64_t *))v10;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t *))v13;
  a1[4] = (uint64_t (*)(uint64_t, uint64_t *))v14;
  a1[5] = (uint64_t (*)(uint64_t, uint64_t *))v15;
  return sub_3AF44(v5, v4, v6, v7, v12, v11);
}

uint64_t sub_36DB4(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  v6 = a1[4];
  v7 = a1[5];
  v8 = (uint64_t *)(*a2 + OBJC_IVAR____TtC8ShelfKit17ShowListPresenter____lazy_storage___reorderingExtension);
  v9 = *v8;
  v10 = v8[1];
  v11 = v8[2];
  v12 = v8[3];
  v13 = v8[4];
  v14 = v8[5];
  *v8 = *a1;
  v8[1] = v3;
  v8[2] = v4;
  v8[3] = v5;
  v8[4] = v6;
  v8[5] = v7;
  sub_3AF54(v2, v3, v4, v5, v6, v7);
  return sub_3AEF8(v9, v10, v11, v12, v13, v14);
}

uint64_t ShowListPresenter.reorderingExtension.setter(_OWORD *a1)
{
  uint64_t v1;
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;

  v2 = (_OWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit17ShowListPresenter____lazy_storage___reorderingExtension);
  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit17ShowListPresenter____lazy_storage___reorderingExtension);
  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit17ShowListPresenter____lazy_storage___reorderingExtension + 8);
  v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit17ShowListPresenter____lazy_storage___reorderingExtension + 16);
  v6 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit17ShowListPresenter____lazy_storage___reorderingExtension + 24);
  v7 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit17ShowListPresenter____lazy_storage___reorderingExtension + 32);
  v8 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit17ShowListPresenter____lazy_storage___reorderingExtension + 40);
  v9 = a1[1];
  *v2 = *a1;
  v2[1] = v9;
  v2[2] = a1[2];
  return sub_3AEF8(v4, v3, v5, v6, v7, v8);
}

uint64_t sub_36E64(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t Strong;
  uint64_t v7;
  char v8;
  _BYTE v10[24];

  v5 = a3 + 16;
  swift_beginAccess(a3 + 16, v10, 0, 0);
  Strong = swift_weakLoadStrong(v5);
  if (Strong)
  {
    v7 = Strong;
    v8 = sub_36EE4(a1, a2);
    swift_release(v7);
  }
  else
  {
    v8 = 0;
  }
  return v8 & 1;
}

uint64_t sub_36EE4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v9;

  v3 = *a2;
  v4 = a2[1];
  if (v3 == 0xD00000000000001ELL && v4 == 0x800000000030B0F0
    || (_stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, 0xD00000000000001ELL, 0x800000000030B0F0, 0) & 1) != 0)
  {
    v5 = *(_QWORD *)(v2 + 120);
    KeyPath = swift_getKeyPath(&unk_2ECE30);
    v7 = swift_getKeyPath(&unk_2ECE58);
    static Published.subscript.getter(&v9, v5, KeyPath, v7);
    swift_release(KeyPath);
    swift_release(v7);
    __asm { BR              X11 }
  }
  return 0;
}

uint64_t sub_37030(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  _BYTE v8[24];

  v5 = a3 + 16;
  swift_beginAccess(a3 + 16, v8, 0, 0);
  result = swift_weakLoadStrong(v5);
  if (result)
  {
    v7 = result;
    sub_370A0(a1, a2);
    return swift_release(v7);
  }
  return result;
}

uint64_t sub_370A0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v18;
  uint64_t v19;
  _BYTE v20[40];
  _QWORD v21[5];

  v3 = *(_QWORD *)(a2 + 16);
  if (v3)
  {
    v4 = a2 + 32;
    swift_bridgeObjectRetain(a2);
    v6 = _swiftEmptyArrayStorage;
    do
    {
      sub_150C8(v4, (uint64_t)v21);
      sub_150C8((uint64_t)v21, (uint64_t)v20);
      v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0A50);
      v8 = type metadata accessor for LibraryShowLockup(0);
      if ((swift_dynamicCast(&v19, v20, v7, v8, 6) & 1) != 0)
      {
        v9 = v19;
        v11 = *(_QWORD *)(v19 + OBJC_IVAR____TtC8ShelfKit17LibraryShowLockup_uuid);
        v10 = *(_QWORD *)(v19 + OBJC_IVAR____TtC8ShelfKit17LibraryShowLockup_uuid + 8);
        swift_bridgeObjectRetain(v10);
        swift_release(v9);
        __swift_destroy_boxed_opaque_existential_1(v21);
        if ((swift_isUniquelyReferenced_nonNull_native(v6) & 1) == 0)
          v6 = sub_10644(0, v6[2] + 1, 1, v6);
        v13 = v6[2];
        v12 = v6[3];
        if (v13 >= v12 >> 1)
          v6 = sub_10644((_QWORD *)(v12 > 1), v13 + 1, 1, v6);
        v6[2] = v13 + 1;
        v14 = &v6[2 * v13];
        v14[4] = v11;
        v14[5] = v10;
      }
      else
      {
        __swift_destroy_boxed_opaque_existential_1(v21);
      }
      v4 += 40;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease(a2);
    v2 = v18;
  }
  else
  {
    v6 = _swiftEmptyArrayStorage;
  }
  v15 = v2[6];
  v16 = v2[7];
  __swift_project_boxed_opaque_existential_1(v2 + 3, v15);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(v16 + 192))(v6, v15, v16);
  return swift_bridgeObjectRelease(v6);
}

void (*ShowListPresenter.reorderingExtension.modify(uint64_t (***a1)(uint64_t a1, uint64_t *a2)))(uint64_t **a1, char a2)
{
  uint64_t (*v1)(uint64_t, uint64_t *);
  uint64_t (**v3)(uint64_t, uint64_t *);

  v3 = (uint64_t (**)(uint64_t, uint64_t *))malloc(0x38uLL);
  *a1 = v3;
  v3[6] = v1;
  ShowListPresenter.reorderingExtension.getter(v3);
  return sub_3729C;
}

void sub_3729C(uint64_t **a1, char a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = *a1;
  v4 = (*a1)[5];
  v5 = (*a1)[6];
  v6 = **a1;
  v7 = v3[1];
  v8 = v3[2];
  v9 = v3[3];
  v10 = v3[4];
  v11 = (uint64_t *)(v5 + OBJC_IVAR____TtC8ShelfKit17ShowListPresenter____lazy_storage___reorderingExtension);
  v12 = *v11;
  v13 = v11[1];
  v14 = v11[2];
  v15 = v11[3];
  v16 = v11[4];
  v17 = v11[5];
  *v11 = v6;
  v11[1] = v7;
  v11[2] = v8;
  v11[3] = v9;
  v11[4] = v10;
  v11[5] = v4;
  if ((a2 & 1) != 0)
  {
    sub_3AF54(v6, v7, v8, v9, v10, v4);
    sub_3AEF8(v12, v13, v14, v15, v16, v17);
    sub_3AF08(*v3, v3[1], v3[2], v3[3], v3[4], v3[5]);
  }
  else
  {
    sub_3AEF8(v12, v13, v14, v15, v16, v17);
  }
  free(v3);
}

uint64_t ShowListPresenter.deletableExtension.getter@<X0>(uint64_t (**a1)()@<X8>)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, void *);
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC8ShelfKit17ShowListPresenter____lazy_storage___deletableExtension);
  v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit17ShowListPresenter____lazy_storage___deletableExtension);
  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit17ShowListPresenter____lazy_storage___deletableExtension + 8);
  v6 = (uint64_t (*)())v5;
  v8 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit17ShowListPresenter____lazy_storage___deletableExtension + 16);
  v7 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit17ShowListPresenter____lazy_storage___deletableExtension + 24);
  v9 = v4;
  v10 = (uint64_t (*)(uint64_t, uint64_t, void *))v8;
  v11 = v7;
  if (v5 == 1)
  {
    v11 = swift_allocObject(&unk_379150, 24, 7);
    swift_weakInit(v11 + 16);
    v12 = *v3;
    v15 = v3[2];
    v16 = v3[1];
    v14 = v3[3];
    v6 = Paragraph.reloadOnClick.getter;
    *v3 = (uint64_t)Paragraph.reloadOnClick.getter;
    v3[1] = 0;
    v10 = sub_3AF90;
    v3[2] = (uint64_t)sub_3AF90;
    v3[3] = v11;
    swift_retain(v11);
    sub_3AF98(v12, v16, v15, v14);
    v9 = 0;
  }
  *a1 = v6;
  a1[1] = (uint64_t (*)())v9;
  a1[2] = (uint64_t (*)())v10;
  a1[3] = (uint64_t (*)())v11;
  return sub_3AFD8(v5, v4, v8, v7);
}

uint64_t sub_37454(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  v6 = (uint64_t *)(*a2 + OBJC_IVAR____TtC8ShelfKit17ShowListPresenter____lazy_storage___deletableExtension);
  v7 = *v6;
  v8 = v6[1];
  v9 = v6[2];
  v10 = v6[3];
  *v6 = *a1;
  v6[1] = v3;
  v6[2] = v4;
  v6[3] = v5;
  sub_3AFE8(v2, v3, v4, v5);
  return sub_3AF98(v7, v8, v9, v10);
}

uint64_t ShowListPresenter.deletableExtension.setter(_OWORD *a1)
{
  uint64_t v1;
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  v2 = (_OWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit17ShowListPresenter____lazy_storage___deletableExtension);
  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit17ShowListPresenter____lazy_storage___deletableExtension);
  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit17ShowListPresenter____lazy_storage___deletableExtension + 8);
  v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit17ShowListPresenter____lazy_storage___deletableExtension + 16);
  v6 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit17ShowListPresenter____lazy_storage___deletableExtension + 24);
  v7 = a1[1];
  *v2 = *a1;
  v2[1] = v7;
  return sub_3AF98(v4, v3, v5, v6);
}

uint64_t sub_374DC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  _BYTE v10[24];

  v7 = a4 + 16;
  swift_beginAccess(a4 + 16, v10, 0, 0);
  result = swift_weakLoadStrong(v7);
  if (result)
  {
    v9 = result;
    sub_37554(a1, a2, a3);
    return swift_release(v9);
  }
  return result;
}

uint64_t sub_37554(uint64_t a1, uint64_t a2, void *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[5];

  v4 = v3;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2820);
  __chkstk_darwin(v7);
  v9 = (char *)&v28[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_150C8(a1, (uint64_t)v28);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0A50);
  v11 = type metadata accessor for LibraryShowLockup(0);
  result = swift_dynamicCast(&v27, v28, v10, v11, 6);
  if ((_DWORD)result)
  {
    v13 = v27;
    if (*(_BYTE *)(v4[15] + OBJC_IVAR____TtC8ShelfKit16ShowListProvider_kind) == 9)
    {
      v14 = v4 + 3;
      v15 = v4[6];
      v16 = v4[7];
      __swift_project_boxed_opaque_existential_1(v14, v15);
      v17 = *(_QWORD *)(v13 + OBJC_IVAR____TtC8ShelfKit17LibraryShowLockup_uuid);
      v18 = *(_QWORD *)(v13 + OBJC_IVAR____TtC8ShelfKit17LibraryShowLockup_uuid + 8);
      v19 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 184);
      swift_bridgeObjectRetain(v18);
      v19(v17, v18, v15, v16);
      swift_release(v13);
      return swift_bridgeObjectRelease(v18);
    }
    else
    {
      v20 = v4[11];
      v21 = v4[12];
      __swift_project_boxed_opaque_existential_1(v4 + 8, v20);
      v22 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 24))(v13, v20, v21);
      v28[3] = sub_327F8(0, (unint64_t *)&qword_3B18F0, UIResponder_ptr);
      v28[0] = a3;
      swift_retain(v22);
      v23 = a3;
      v24 = (void *)UIResponder.firstViewInResponderChain.getter();
      v25 = type metadata accessor for ClickLocationElement(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v9, 1, 1, v25);
      v26 = sub_3A930(v22, (uint64_t)v28, v24, (uint64_t)v9, (uint64_t)v4);
      swift_release(v22);
      swift_release(v13);
      swift_release(v26);

      sub_1459C((uint64_t)v9, &qword_3B2820);
      sub_1459C((uint64_t)v28, (uint64_t *)&unk_3BC540);
      return swift_release(v22);
    }
  }
  return result;
}

void (*ShowListPresenter.deletableExtension.modify(uint64_t (***a1)()))(uint64_t **a1, char a2)
{
  uint64_t (*v1)();
  uint64_t (**v3)();

  v3 = (uint64_t (**)())malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  ShowListPresenter.deletableExtension.getter(v3);
  return sub_377C0;
}

void sub_377C0(uint64_t **a1, char a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *a1;
  v4 = (*a1)[3];
  v5 = (*a1)[4];
  v6 = **a1;
  v7 = v3[1];
  v8 = v3[2];
  v9 = (uint64_t *)(v5 + OBJC_IVAR____TtC8ShelfKit17ShowListPresenter____lazy_storage___deletableExtension);
  v10 = *v9;
  v11 = v9[1];
  v12 = v9[2];
  v13 = v9[3];
  *v9 = v6;
  v9[1] = v7;
  v9[2] = v8;
  v9[3] = v4;
  if ((a2 & 1) != 0)
  {
    sub_3AFE8(v6, v7, v8, v4);
    sub_3AF98(v10, v11, v12, v13);
    sub_3AFA8(*v3, v3[1], v3[2], v3[3]);
  }
  else
  {
    sub_3AF98(v10, v11, v12, v13);
  }
  free(v3);
}

uint64_t TabMenu.Section.group.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t CategoryListPresenter.Configuration.showPageHeader.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t ShowListPresenter.Configuration.showsPageHeader.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 1);
}

uint64_t ShowListPresenter.Configuration.showsPageHeader.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 1) = result;
  return result;
}

void (__swiftcall *ShowListPresenter.Configuration.showsPageHeader.modify())()
{
  return FindOrCreateEpisodeOfferContentIDsIntentsIntentImplementation.init();
}

uint64_t ShowListPresenter.Configuration.init(kind:showsPageHeader:)@<X0>(uint64_t result@<X0>, char a2@<W1>, _BYTE *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

_QWORD *ShowListPresenter.__allocating_init(asPartOf:with:)(uint64_t a1, char *a2)
{
  uint64_t v2;
  _QWORD *v5;

  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  v5 = sub_3B1C0(a1, a2);
  swift_release(a1);
  return v5;
}

_QWORD *ShowListPresenter.init(asPartOf:with:)(uint64_t a1, char *a2)
{
  _QWORD *v3;

  v3 = sub_3B1C0(a1, a2);
  swift_release(a1);
  return v3;
}

uint64_t sub_37920()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t result;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD v69[3];

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2780);
  v3 = *(_QWORD *)(v2 - 8);
  v66 = v2;
  v67 = v3;
  __chkstk_darwin(v2);
  v65 = (char *)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2788);
  v62 = *(_QWORD *)(v5 - 8);
  v63 = v5;
  v6 = __chkstk_darwin(v5);
  v61 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v9 = (char *)&v54 - v8;
  v56 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2790);
  __chkstk_darwin(v56);
  v11 = (char *)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2798);
  v13 = *(_QWORD *)(v12 - 8);
  v57 = v12;
  v58 = v13;
  __chkstk_darwin(v12);
  v15 = (char *)&v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B27A0);
  v17 = *(_QWORD *)(v16 - 8);
  v59 = v16;
  v60 = v17;
  __chkstk_darwin(v16);
  v55 = (char *)&v54 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *(_QWORD *)(v0 + 120);
  v64 = v19;
  swift_beginAccess(v19 + OBJC_IVAR____TtC8ShelfKit16ShowListProvider__state, v69, 33, 0);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B27A8);
  Published.projectedValue.getter(v20);
  swift_endAccess(v69);
  v69[0] = *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit17ShowListPresenter_isEditing);
  v54 = OBJC_IVAR____TtC8ShelfKit16ShowListProvider_pageContent;
  v68 = *(_QWORD *)(v19 + OBJC_IVAR____TtC8ShelfKit16ShowListProvider_pageContent);
  v21 = v68;
  swift_retain(v69[0]);
  swift_retain(v21);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B20D0);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B27B0);
  v24 = sub_32914(&qword_3B27B8, &qword_3B2790, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
  v25 = sub_32914(&qword_3B2138, &qword_3B20D0, (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
  v26 = v1;
  v27 = v23;
  v28 = sub_32914(&qword_3B27C0, &qword_3B27B0, (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
  Publishers.CombineLatest3.init(_:_:_:)(v11, v69, &v68, v56, v22, v27, v24, v25, v28);
  v29 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B2678);
  v30 = sub_32914(&qword_3B27C8, &qword_3B2798, (uint64_t)&protocol conformance descriptor for Publishers.CombineLatest3<A, B, C>);
  v31 = v55;
  v32 = v57;
  Publisher.map<A>(_:)(sub_3817C, 0, v57, v29, v30);
  (*(void (**)(char *, uint64_t))(v58 + 8))(v15, v32);
  v33 = v1 + OBJC_IVAR____TtC8ShelfKit17ShowListPresenter__headerButtonState;
  swift_beginAccess(v1 + OBJC_IVAR____TtC8ShelfKit17ShowListPresenter__headerButtonState, v69, 33, 0);
  v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2520);
  Published.projectedValue.getter(v34);
  swift_endAccess(v69);
  v35 = sub_32914(&qword_3B27D0, &qword_3B27A0, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v36 = v59;
  Publisher<>.assign(to:)(v9, v59, v35);
  (*(void (**)(char *, uint64_t))(v60 + 8))(v31, v36);
  v37 = v61;
  v38 = v62;
  v39 = v63;
  (*(void (**)(char *, char *, uint64_t))(v62 + 16))(v61, v9, v63);
  swift_beginAccess(v33, v69, 33, 0);
  Published.projectedValue.setter(v37, v34);
  swift_endAccess(v69);
  v40 = *(void (**)(char *, uint64_t))(v38 + 8);
  v41 = v39;
  v40(v9, v39);
  swift_beginAccess(v33, v69, 33, 0);
  Published.projectedValue.getter(v34);
  swift_endAccess(v69);
  v42 = sub_32914(&qword_3B27D8, &qword_3B2788, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
  v43 = sub_3C498();
  v44 = v65;
  Publisher<>.removeDuplicates()(v41, v42, v43);
  v40(v9, v41);
  v45 = swift_allocObject(&unk_379150, 24, 7);
  swift_weakInit(v45 + 16);
  v46 = sub_32914(&qword_3B27F0, &qword_3B2780, (uint64_t)&protocol conformance descriptor for Publishers.RemoveDuplicates<A>);
  v47 = v66;
  v48 = Publisher<>.sink(receiveValue:)(sub_3C540, v45, v66, v46);
  swift_release(v45);
  (*(void (**)(char *, uint64_t))(v67 + 8))(v44, v47);
  v49 = v26 + OBJC_IVAR____TtC8ShelfKit17ShowListPresenter_subscriptions;
  swift_beginAccess(v26 + OBJC_IVAR____TtC8ShelfKit17ShowListPresenter_subscriptions, v69, 33, 0);
  v50 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2088);
  v51 = sub_32914(&qword_3B2090, &qword_3B2088, (uint64_t)&protocol conformance descriptor for [A]);
  AnyCancellable.store<A>(in:)(v49, v50, v51);
  swift_endAccess(v69);
  result = swift_release(v48);
  if (*(_BYTE *)(v64 + OBJC_IVAR____TtC8ShelfKit16ShowListProvider_kind) == 9)
  {
    v69[0] = *(_QWORD *)(v64 + v54);
    swift_retain(v69[0]);
    swift_retain(v26);
    v53 = Publisher<>.sink(receiveValue:)(sub_3C548, v26, v27, v28);
    swift_release(v26);
    swift_release(v69[0]);
    swift_beginAccess(v49, v69, 33, 0);
    AnyCancellable.store<A>(in:)(v49, v50, v51);
    swift_endAccess(v69);
    return swift_release(v53);
  }
  return result;
}

void sub_37F40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  v4 = type metadata accessor for PageContent(0);
  v5 = __chkstk_darwin(v4);
  __chkstk_darwin(v5);
  v7 = (char *)&v9 - v6;
  sub_14510(a3, (uint64_t)&v9 - v6, type metadata accessor for PageContent);
  v8 = (char *)sub_38008 + 4 * byte_2ECB24[swift_getEnumCaseMultiPayload(v7, v4)];
  __asm { BR              X10 }
}

uint64_t sub_38008()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(_QWORD);
  int EnumCaseMultiPayload;

  sub_145D8(v3, v4);
  sub_14510(v1, v0, type metadata accessor for PageContent);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v0, v2);
  return ((uint64_t (*)())((char *)sub_380A4 + 4 * byte_2ECB28[EnumCaseMultiPayload]))();
}

uint64_t sub_380A4()
{
  char v0;
  uint64_t v1;
  uint64_t (*v2)(_QWORD);
  unsigned int v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v7;
  int v8;

  sub_145D8(v1, v2);
  v5 = v3 >> 6;
  if ((_DWORD)v5 == 2)
    return 512;
  if (v4)
    v7 = 8;
  else
    v7 = 9;
  if ((v4 & 1) == 0)
    __asm { BR              X11 }
  if ((v0 & 1) != 0)
    v8 = 256;
  else
    v8 = 0;
  return v8 & 0xFFFFFF00 | v7;
}

void sub_3817C(uint64_t a1@<X0>, _WORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  __int16 v6;

  v4 = *(unsigned __int8 *)(a1 + 1);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2818);
  sub_37F40(a1, v4, a1 + *(int *)(v5 + 64));
  *a2 = v6;
}

uint64_t sub_381CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v10, 0, 0);
  result = swift_weakLoadStrong(v2);
  if (result)
  {
    v4 = result;
    v5 = result + OBJC_IVAR____TtC8ShelfKit17ShowListPresenter_rebuildMenuBar;
    swift_beginAccess(result + OBJC_IVAR____TtC8ShelfKit17ShowListPresenter_rebuildMenuBar, &v9, 0, 0);
    v7 = *(void (**)(uint64_t))v5;
    v6 = *(_QWORD *)(v5 + 8);
    v8 = swift_retain(v6);
    v7(v8);
    swift_release(v6);
    sub_383D4();
    return swift_release(v4);
  }
  return result;
}

void sub_3826C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t (*v5)(_QWORD);
  char *v6;
  uint64_t v7;

  v2 = type metadata accessor for PageContent(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_14510(a1, (uint64_t)v4, v5);
  v6 = (char *)sub_382FC + 4 * byte_2ECB30[swift_getEnumCaseMultiPayload(v4, v2)];
  __asm { BR              X10 }
}

uint64_t sub_382FC()
{
  uint64_t v0;

  return sub_145D8(v0, type metadata accessor for PageContent);
}

Swift::Void __swiftcall ShowListPresenter.viewDidLoad()()
{
  ShowListProvider.start()();
}

uint64_t sub_383D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t (**v33)();
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  id v64;
  Swift::String v65;
  Swift::String v66;
  Swift::String v67;
  uint64_t v68;
  void (*v69)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  int *v79;
  unint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  id v92;
  id v93;
  Swift::String v94;
  Swift::String v95;
  Swift::String v96;
  uint64_t v97;
  uint64_t v98;
  id v99;
  Swift::String v100;
  Swift::String v101;
  Swift::String v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  int *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t *v125;
  _QWORD *v126;
  _QWORD *v127;
  id v128;
  Swift::String v129;
  Swift::String v130;
  Swift::String v131;
  uint64_t v132;
  void (*v133)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t v141;
  int *v142;
  unint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  void (*v155)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  void (*v175)(uint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t *v181;
  uint64_t v182;
  _QWORD *v183;
  uint64_t v184;
  char *v185;
  id v186;
  void *object;
  uint64_t countAndFlagsBits;
  void *v189;
  unint64_t *v190;
  int *v191;
  void (*v192)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  _QWORD *v198;
  unint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  uint64_t v203;
  char *v204;
  uint64_t v205;
  uint64_t v206;
  char *v207;
  unint64_t v208;
  uint64_t v209;
  unint64_t *v210;
  uint64_t v211;
  uint64_t v212;
  _QWORD v213[4];
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  Swift::String v217;
  Swift::String v218;
  Swift::String v219;
  Swift::String v220;

  v1 = v0;
  v205 = type metadata accessor for UUID(0);
  v203 = *(_QWORD *)(v205 - 8);
  __chkstk_darwin(v205);
  v202 = (char *)&v184 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v3);
  v204 = (char *)&v184 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ActionMenu.Item(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v184 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v201 = type metadata accessor for ActionMetrics(0);
  v200 = *(_QWORD *)(v201 - 8);
  __chkstk_darwin(v201);
  v207 = (char *)&v184 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ActionMenu.Child(0);
  v208 = *(_QWORD *)(v9 - 8);
  v209 = v9;
  v10 = __chkstk_darwin(v9);
  v199 = (unint64_t)&v184 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v206 = (uint64_t)&v184 - v13;
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v184 - v15;
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v184 - v18;
  __chkstk_darwin(v17);
  v21 = (char *)&v184 - v20;
  v22 = type metadata accessor for ActionMenu(0);
  __chkstk_darwin(v22);
  v210 = (unint64_t *)((char *)&v184 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
  v25 = __chkstk_darwin(v24);
  v212 = (uint64_t)&v184 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v28 = (char *)&v184 - v27;
  v29 = type metadata accessor for HeaderButtonItem(0);
  __chkstk_darwin(v29);
  v33 = (uint64_t (**)())((char *)&v184 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0));
  if ((v31 & 0xFF00) != 0x200)
  {
    v211 = v1;
    if ((v31 & 0x100) != 0)
    {
      v52 = v30;
      v53 = swift_allocObject(&unk_379150, 24, 7);
      v54 = v211;
      swift_weakInit(v53 + 16);
      *v33 = sub_3C5B0;
      v33[1] = (uint64_t (*)())v53;
      swift_storeEnumTagMultiPayload(v33, v29, 4);
      swift_beginAccess(v54 + 112, &v214, 0, 0);
      v55 = *(_QWORD *)(v54 + 112);
      v56 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8800);
      v57 = *(unsigned __int8 *)(v52 + 80);
      v58 = (v57 + 32) & ~v57;
      v59 = swift_allocObject(v56, v58 + *(_QWORD *)(v52 + 72), v57 | 7);
      *(_OWORD *)(v59 + 16) = xmmword_2EA0D0;
      sub_14510((uint64_t)v33, v59 + v58, type metadata accessor for HeaderButtonItem);
      v213[0] = v59;
      swift_retain(v55);
      CurrentValueSubject.send(_:)();
      swift_bridgeObjectRelease(v59);
      swift_release(v55);
      return sub_145D8((uint64_t)v33, type metadata accessor for HeaderButtonItem);
    }
    v196 = v22;
    v195 = v29;
    v194 = v30;
    if (v31 == 10)
    {
      LODWORD(v189) = v31;
      v185 = v16;
      v191 = (int *)v5;
      v190 = (unint64_t *)v7;
      v198 = _swiftEmptyArrayStorage;
    }
    else
    {
      v35 = v211;
      if (v31 == 8)
      {
        swift_beginAccess(v211 + 112, &v214, 0, 0);
        v209 = *(_QWORD *)(v35 + 112);
        v36 = v209;
        v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8800);
        v38 = *(unsigned __int8 *)(v194 + 80);
        v39 = (v38 + 32) & ~v38;
        v40 = swift_allocObject(v37, v39 + *(_QWORD *)(v194 + 72), v38 | 7);
        v211 = v40;
        *(_OWORD *)(v40 + 16) = xmmword_2EA0D0;
        v41 = v40 + v39;
        v42 = type metadata accessor for ArtworkModel(0);
        v43 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56);
        v43(v28, 1, 1, v42);
        swift_retain(v36);
        v44 = _s8ShelfKit10ActionMenuV2IDVAEycfC_0();
        v46 = v45;
        v208 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B27F8) + 48);
        v47 = v212;
        sub_267BC((uint64_t)v28, v212, &qword_3BEB70);
        v48 = v196;
        v49 = v210;
        v50 = (uint64_t)v210 + *(int *)(v196 + 28);
        v43((char *)v50, 1, 1, v42);
        *v49 = v44;
        v49[1] = v46;
        v49[2] = 0;
        v49[3] = 0xE000000000000000;
        v49[4] = 0;
        v49[5] = 0;
        swift_bridgeObjectRetain(v46);
        sub_3C454(v47, v50, &qword_3BEB70);
        *(unint64_t *)((char *)v49 + *(int *)(v48 + 32)) = (unint64_t)_swiftEmptyArrayStorage;
        sub_3C56C((uint64_t)v49, v41, type metadata accessor for ActionMenu);
        *(_BYTE *)(v41 + v208) = 0;
        swift_storeEnumTagMultiPayload(v41, v195, 6);
        swift_bridgeObjectRelease(v46);
        sub_1459C((uint64_t)v28, &qword_3BEB70);
        v51 = v211;
        v213[0] = v211;
        v34 = v209;
LABEL_26:
        CurrentValueSubject.send(_:)();
        swift_bridgeObjectRelease(v51);
        return swift_release(v34);
      }
      LODWORD(v189) = v31;
      sub_3A0E0((uint64_t)v21);
      v61 = sub_10CAC(0, 1, 1, (unint64_t)_swiftEmptyArrayStorage);
      v63 = *(_QWORD *)(v61 + 16);
      v62 = *(_QWORD *)(v61 + 24);
      if (v63 >= v62 >> 1)
        v61 = sub_10CAC(v62 > 1, v63 + 1, 1, v61);
      v198 = (_QWORD *)v61;
      v185 = v16;
      v191 = (int *)v5;
      v190 = (unint64_t *)v7;
      *(_QWORD *)(v61 + 16) = v63 + 1;
      sub_3C56C((uint64_t)v21, v61+ ((*(unsigned __int8 *)(v208 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v208 + 80))+ *(_QWORD *)(v208 + 72) * v63, type metadata accessor for ActionMenu.Child);
    }
    v186 = (id)objc_opt_self(NSBundle);
    v64 = objc_msgSend(v186, "mainBundle");
    v217._object = (void *)0xEA00000000007377;
    v65._countAndFlagsBits = 0x4F48535F54494445;
    v65._object = (void *)0xEA00000000005357;
    v66._countAndFlagsBits = 0;
    v66._object = (void *)0xE000000000000000;
    v217._countAndFlagsBits = 0x6F68532074696445;
    v67 = NSLocalizedString(_:tableName:bundle:value:comment:)(v65, (Swift::String_optional)0, (NSBundle)v64, v66, v217);
    countAndFlagsBits = v67._countAndFlagsBits;
    object = v67._object;

    v68 = type metadata accessor for ArtworkModel(0);
    v69 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 56);
    v69(v28, 1, 1, v68);
    v70 = swift_allocObject(&unk_379150, 24, 7);
    swift_weakInit(v70 + 16);
    v71 = swift_retain(v70);
    v72 = (uint64_t)v207;
    static ActionMetrics.notInstrumented.getter(v71);
    v73 = type metadata accessor for ClosureAction(0);
    swift_allocObject(v73, *(unsigned int *)(v73 + 48), *(unsigned __int16 *)(v73 + 52));
    v74 = sub_213C1C(0, 0, 32, v72, (uint64_t)sub_3C550, v70);
    swift_release_n(v70, 2);
    v215 = v73;
    v216 = sub_F1C0(&qword_3B2768, (void (*)(uint64_t))type metadata accessor for ClosureAction, (uint64_t)&protocol conformance descriptor for Action);
    v214 = v74;
    v75 = _s8ShelfKit10ActionMenuV2IDVAEycfC_0();
    v77 = v76;
    v78 = v212;
    sub_267BC((uint64_t)v28, v212, &qword_3BEB70);
    sub_267BC((uint64_t)&v214, (uint64_t)v213, &qword_3B0C50);
    v79 = v191;
    v80 = v190;
    v81 = (uint64_t)v190 + v191[6];
    v193 = v68;
    v192 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v69;
    v69((char *)v81, 1, 1, v68);
    v197 = v28;
    v82 = v79[7];
    *((_BYTE *)v80 + v82) = 2;
    v83 = (uint64_t)v80 + v79[9];
    *(_QWORD *)(v83 + 32) = 0;
    *(_OWORD *)v83 = 0u;
    *(_OWORD *)(v83 + 16) = 0u;
    *v80 = v75;
    v80[1] = v77;
    v84 = (unint64_t)object;
    v80[2] = countAndFlagsBits;
    v80[3] = v84;
    swift_bridgeObjectRetain(v77);
    swift_bridgeObjectRetain(v84);
    sub_3C454(v78, v81, &qword_3BEB70);
    *((_BYTE *)v80 + v82) = 2;
    v85 = (uint64_t)v197;
    *((_BYTE *)v80 + v79[8]) = 1;
    sub_3C454((uint64_t)v213, v83, &qword_3B0C50);
    sub_3C56C((uint64_t)v80, (uint64_t)v19, type metadata accessor for ActionMenu.Item);
    swift_storeEnumTagMultiPayload(v19, v209, 0);
    swift_bridgeObjectRelease(v84);
    swift_bridgeObjectRelease(v77);
    sub_1459C(v85, &qword_3BEB70);
    sub_1459C((uint64_t)&v214, &qword_3B0C50);
    v86 = (unint64_t)v198;
    if ((swift_isUniquelyReferenced_nonNull_native(v198) & 1) == 0)
      v86 = sub_10CAC(0, *(_QWORD *)(v86 + 16) + 1, 1, v86);
    v88 = *(_QWORD *)(v86 + 16);
    v87 = *(_QWORD *)(v86 + 24);
    v89 = v211;
    if (v88 >= v87 >> 1)
      v86 = sub_10CAC(v87 > 1, v88 + 1, 1, v86);
    *(_QWORD *)(v86 + 16) = v88 + 1;
    v90 = (*(unsigned __int8 *)(v208 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v208 + 80);
    v91 = *(_QWORD *)(v208 + 72);
    sub_3C56C((uint64_t)v19, v86 + v90 + v91 * v88, type metadata accessor for ActionMenu.Child);
    v198 = (_QWORD *)v86;
    if (v189 - 8 >= 2)
    {
      countAndFlagsBits = v91;
      v208 = v90;
      if (v189 == 10)
      {
        v191 = v79;
        v92 = v186;
        v93 = objc_msgSend(v186, "mainBundle");
        v218._object = (void *)0x800000000030B070;
        v94._countAndFlagsBits = 0xD000000000000011;
        v94._object = (void *)0x800000000030B050;
        v95._countAndFlagsBits = 0;
        v95._object = (void *)0xE000000000000000;
        v218._countAndFlagsBits = 0xD000000000000010;
        v96 = NSLocalizedString(_:tableName:bundle:value:comment:)(v94, (Swift::String_optional)0, (NSBundle)v93, v95, v218);
        v199 = v96._countAndFlagsBits;
        v189 = v96._object;

        ArtworkModel.init(glyphName:accessibilityTitle:isCustomSymbol:isMulticolorSymbol:)(0x7269632E73756C70, 0xEB00000000656C63, 0, 0, 0, 0);
        v192(v85, 0, 1, v193);
        v97 = type metadata accessor for RefollowAllRecentlyUnfollowedShowsAction(0);
        v98 = swift_allocObject(v97, *(unsigned int *)(v97 + 48), *(unsigned __int16 *)(v97 + 52));
        v99 = objc_msgSend(v92, "mainBundle");
        v219._object = (void *)0x800000000030B070;
        v100._countAndFlagsBits = 0xD000000000000011;
        v100._object = (void *)0x800000000030B050;
        v101._countAndFlagsBits = 0;
        v101._object = (void *)0xE000000000000000;
        v219._countAndFlagsBits = 0xD000000000000010;
        v102 = NSLocalizedString(_:tableName:bundle:value:comment:)(v100, (Swift::String_optional)0, (NSBundle)v99, v101, v219);

        v103 = type metadata accessor for ImpressionMetrics(0);
        v104 = (uint64_t)v204;
        v105 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v103 - 8) + 56))(v204, 1, 1, v103);
        v106 = v207;
        v107 = static ActionMetrics.notInstrumented.getter(v105);
        v108 = v202;
        UUID.init()(v107);
        v109 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
        v111 = v110;
        (*(void (**)(char *, uint64_t))(v203 + 8))(v108, v205);
        *(_QWORD *)(v98 + 16) = v109;
        *(_QWORD *)(v98 + 24) = v111;
        *(Swift::String *)(v98 + 32) = v102;
        *(_BYTE *)(v98 + 48) = 32;
        (*(void (**)(uint64_t, char *, uint64_t))(v200 + 32))(v98 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v106, v201);
        sub_23AB8(v104, v98 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics);
        v215 = v97;
        v216 = sub_F1C0(&qword_3B2800, (void (*)(uint64_t))type metadata accessor for RefollowAllRecentlyUnfollowedShowsAction, (uint64_t)&protocol conformance descriptor for Action);
        v214 = v98;
        v112 = _s8ShelfKit10ActionMenuV2IDVAEycfC_0();
        v114 = v113;
        v115 = v212;
        sub_267BC((uint64_t)v197, v212, &qword_3BEB70);
        sub_267BC((uint64_t)&v214, (uint64_t)v213, &qword_3B0C50);
        v116 = v191;
        v117 = (uint64_t)v80 + v191[6];
        v192(v117, 1, 1, v193);
        v118 = v116[7];
        *((_BYTE *)v80 + v118) = 2;
        v119 = (uint64_t)v80 + v116[9];
        *(_QWORD *)(v119 + 32) = 0;
        *(_OWORD *)v119 = 0u;
        *(_OWORD *)(v119 + 16) = 0u;
        *v80 = v112;
        v80[1] = v114;
        v120 = (unint64_t)v189;
        v80[2] = v199;
        v80[3] = v120;
        swift_bridgeObjectRetain(v114);
        swift_bridgeObjectRetain(v120);
        sub_3C454(v115, v117, &qword_3BEB70);
        *((_BYTE *)v80 + v118) = 2;
        v121 = (uint64_t)v197;
        *((_BYTE *)v80 + v116[8]) = 1;
        sub_3C454((uint64_t)v213, v119, &qword_3B0C50);
        v122 = (uint64_t)v185;
        sub_3C56C((uint64_t)v80, (uint64_t)v185, type metadata accessor for ActionMenu.Item);
        swift_storeEnumTagMultiPayload(v122, v209, 0);
        swift_bridgeObjectRelease(v120);
        swift_bridgeObjectRelease(v114);
        sub_1459C(v121, &qword_3BEB70);
        sub_1459C((uint64_t)&v214, &qword_3B0C50);
        v124 = v198[2];
        v123 = v198[3];
        v125 = v80;
        if (v124 >= v123 >> 1)
          v198 = (_QWORD *)sub_10CAC(v123 > 1, v124 + 1, 1, (unint64_t)v198);
        v126 = (_QWORD *)v211;
        v127 = v198;
        v198[2] = v124 + 1;
        sub_3C56C(v122, (uint64_t)v127 + v208 + v124 * countAndFlagsBits, type metadata accessor for ActionMenu.Child);
        v128 = objc_msgSend(v186, "mainBundle");
        v220._object = (void *)0xE000000000000000;
        v129._object = (void *)0x800000000030B090;
        v129._countAndFlagsBits = 0xD000000000000010;
        v130._countAndFlagsBits = 0;
        v130._object = (void *)0xE000000000000000;
        v220._countAndFlagsBits = 0;
        v131 = NSLocalizedString(_:tableName:bundle:value:comment:)(v129, (Swift::String_optional)0, (NSBundle)v128, v130, v220);
        v207 = (char *)v131._countAndFlagsBits;

        ArtworkModel.init(glyphName:accessibilityTitle:isCustomSymbol:isMulticolorSymbol:)(0x6873617274, 0xE500000000000000, 0, 0, 0, 0);
        v132 = v193;
        v133 = v192;
        v192(v121, 0, 1, v193);
        v134 = v126 + 8;
        v135 = v126[11];
        v136 = v126[12];
        __swift_project_boxed_opaque_existential_1(v134, v135);
        v137 = (*(uint64_t (**)(uint64_t, uint64_t))(v136 + 64))(v135, v136);
        v215 = type metadata accessor for SheetAction(0);
        v216 = sub_F1C0(&qword_3B2808, (void (*)(uint64_t))type metadata accessor for SheetAction, (uint64_t)&protocol conformance descriptor for Action);
        v214 = v137;
        v138 = _s8ShelfKit10ActionMenuV2IDVAEycfC_0();
        v140 = v139;
        v141 = v212;
        sub_267BC(v121, v212, &qword_3BEB70);
        sub_267BC((uint64_t)&v214, (uint64_t)v213, &qword_3B0C50);
        v142 = v191;
        v143 = v125;
        v144 = (uint64_t)v125 + v191[6];
        v133(v144, 1, 1, v132);
        v145 = v142[7];
        *((_BYTE *)v143 + v145) = 2;
        v146 = (char *)v143 + v142[9];
        *((_QWORD *)v146 + 4) = 0;
        *(_OWORD *)v146 = 0u;
        *((_OWORD *)v146 + 1) = 0u;
        *v143 = v138;
        v143[1] = v140;
        v143[2] = (unint64_t)v207;
        v143[3] = (unint64_t)v131._object;
        swift_bridgeObjectRetain(v140);
        swift_bridgeObjectRetain(v131._object);
        sub_3C454(v141, v144, &qword_3BEB70);
        *((_BYTE *)v143 + v145) = 1;
        v147 = (uint64_t)v197;
        *((_BYTE *)v143 + v142[8]) = 1;
        v148 = (uint64_t)v146;
        v85 = v147;
        sub_3C454((uint64_t)v213, v148, &qword_3B0C50);
        v149 = v206;
        sub_3C56C((uint64_t)v143, v206, type metadata accessor for ActionMenu.Item);
        swift_storeEnumTagMultiPayload(v149, v209, 0);
        swift_bridgeObjectRelease(v131._object);
        v150 = (unint64_t)v198;
        swift_bridgeObjectRelease(v140);
        sub_1459C(v85, &qword_3BEB70);
        sub_1459C((uint64_t)&v214, &qword_3B0C50);
      }
      else
      {
        v151 = v189;
        v152 = v85;
        v153 = v85;
        v154 = v193;
        v155 = v192;
        v192(v152, 1, 1, v193);
        v156 = sub_39984(v151);
        v157 = _s8ShelfKit10ActionMenuV2IDVAEycfC_0();
        v159 = v158;
        v160 = v212;
        sub_267BC(v153, v212, &qword_3BEB70);
        v161 = v196;
        v162 = v210;
        v163 = (uint64_t)v210 + *(int *)(v196 + 28);
        v164 = v154;
        v85 = v153;
        v155(v163, 1, 1, v164);
        *v162 = v157;
        v162[1] = v159;
        v162[2] = 0;
        v162[3] = 0xE000000000000000;
        v162[4] = 0;
        v162[5] = 0;
        swift_bridgeObjectRetain(v159);
        swift_bridgeObjectRetain(v156);
        sub_3C454(v160, v163, &qword_3BEB70);
        *(unint64_t *)((char *)v162 + *(int *)(v161 + 32)) = (unint64_t)v156;
        v165 = (uint64_t)v162;
        v149 = v199;
        sub_3C56C(v165, v199, type metadata accessor for ActionMenu);
        swift_storeEnumTagMultiPayload(v149, v209, 1);
        swift_bridgeObjectRelease(v156);
        swift_bridgeObjectRelease(v159);
        sub_1459C(v153, &qword_3BEB70);
        v150 = (unint64_t)v198;
      }
      v167 = *(_QWORD *)(v150 + 16);
      v166 = *(_QWORD *)(v150 + 24);
      if (v167 >= v166 >> 1)
        v150 = sub_10CAC(v166 > 1, v167 + 1, 1, v150);
      v89 = v211;
      v168 = v208;
      v198 = (_QWORD *)v150;
      *(_QWORD *)(v150 + 16) = v167 + 1;
      sub_3C56C(v149, v150 + v168 + v167 * countAndFlagsBits, type metadata accessor for ActionMenu.Child);
    }
    swift_beginAccess(v89 + 112, &v214, 0, 0);
    v169 = *(_QWORD *)(v89 + 112);
    v211 = v169;
    v170 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8800);
    v171 = *(unsigned __int8 *)(v194 + 80);
    v172 = (v171 + 32) & ~v171;
    v51 = swift_allocObject(v170, v172 + *(_QWORD *)(v194 + 72), v171 | 7);
    *(_OWORD *)(v51 + 16) = xmmword_2EA0D0;
    v173 = v51 + v172;
    swift_retain(v169);
    ArtworkModel.init(glyphName:accessibilityTitle:isCustomSymbol:isMulticolorSymbol:)(0x73697370696C6C65, 0xE800000000000000, 0, 0, 0, 0);
    v174 = v193;
    v175 = v192;
    v192(v85, 0, 1, v193);
    v176 = _s8ShelfKit10ActionMenuV2IDVAEycfC_0();
    v178 = v177;
    v209 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B27F8) + 48);
    v179 = v212;
    sub_267BC(v85, v212, &qword_3BEB70);
    v180 = v196;
    v181 = v210;
    v182 = (uint64_t)v210 + *(int *)(v196 + 28);
    v175(v182, 1, 1, v174);
    *v181 = v176;
    v181[1] = v178;
    v181[2] = 0;
    v181[3] = 0xE000000000000000;
    v181[4] = 0;
    v181[5] = 0;
    swift_bridgeObjectRetain(v178);
    v183 = v198;
    swift_bridgeObjectRetain(v198);
    sub_3C454(v179, v182, &qword_3BEB70);
    *(unint64_t *)((char *)v181 + *(int *)(v180 + 32)) = (unint64_t)v183;
    sub_3C56C((uint64_t)v181, v173, type metadata accessor for ActionMenu);
    *(_BYTE *)(v173 + v209) = 2;
    swift_storeEnumTagMultiPayload(v173, v195, 6);
    swift_bridgeObjectRelease(v183);
    swift_bridgeObjectRelease(v178);
    sub_1459C((uint64_t)v197, &qword_3BEB70);
    v213[0] = v51;
    v34 = v211;
    goto LABEL_26;
  }
  swift_beginAccess(v1 + 112, &v214, 0, 0);
  v34 = *(_QWORD *)(v1 + 112);
  v213[0] = _swiftEmptyArrayStorage;
  swift_retain(v34);
  CurrentValueSubject.send(_:)();
  return swift_release(v34);
}

uint64_t ShowListPresenter.buildMenuBar(with:)(void *a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t result;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  _QWORD *v10;
  char isEscapingClosureAtFileLocation;
  _QWORD v12[5];
  _QWORD *v13;

  KeyPath = swift_getKeyPath(&unk_2ECB60);
  v4 = swift_getKeyPath(&unk_2ECB88);
  static Published.subscript.getter(v12, v1, KeyPath, v4);
  swift_release(KeyPath);
  swift_release(v4);
  result = LOWORD(v12[0]);
  if ((v12[0] & 0xFF00) != 0x200 && (LOBYTE(v12[0]) - 8) >= 3u)
  {
    v6 = sub_39984(LOWORD(v12[0]));
    if (!v6[2])
      return swift_bridgeObjectRelease(v6);
    if (qword_3B0138 != -1)
      swift_once(&qword_3B0138, sub_143660);
    v7 = qword_3BC000;
    v8 = swift_allocObject(&unk_379178, 32, 7);
    *(_QWORD *)(v8 + 16) = v6;
    *(_QWORD *)(v8 + 24) = v1;
    v6 = (_QWORD *)swift_allocObject(&unk_3791A0, 32, 7);
    v6[2] = sub_3B558;
    v6[3] = v8;
    v12[4] = sub_3B570;
    v13 = v6;
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 1107296256;
    v12[2] = sub_39D9C;
    v12[3] = &block_descriptor_0;
    v9 = _Block_copy(v12);
    v10 = v13;
    swift_retain(v1);
    swift_retain(v6);
    swift_release(v10);
    objc_msgSend(a1, "replaceChildrenOfMenuForIdentifier:fromChildrenBlock:", v7, v9);
    _Block_release(v9);
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v6, "", 141, 286, 55, 1);
    swift_release(v8);
    result = swift_release(v6);
    if ((isEscapingClosureAtFileLocation & 1) != 0)
    {
      __break(1u);
      return swift_bridgeObjectRelease(v6);
    }
  }
  return result;
}

_QWORD *sub_39984(uint64_t a1)
{
  uint64_t v1;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;

  sub_1807F8(0, 4, 0);
  v3 = 0;
  v4 = ShowsSortType.rawValue.getter(0);
  v6 = v5;
  v7 = ShowsSortType.rawValue.getter(a1);
  if (v4 == v7 && v6 == v8)
  {
    swift_bridgeObjectRelease_n(v6, 2);
    goto LABEL_8;
  }
  v10 = v8;
  v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v6, v7, v8, 0);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v10);
  if ((v11 & 1) != 0)
LABEL_8:
    v3 = ShowsSortType.ascendingType.getter(0);
  v13 = _swiftEmptyArrayStorage[2];
  v12 = _swiftEmptyArrayStorage[3];
  if (v13 >= v12 >> 1)
    sub_1807F8(v12 > 1, v13 + 1, 1);
  _swiftEmptyArrayStorage[2] = v13 + 1;
  *((_BYTE *)&_swiftEmptyArrayStorage[4] + v13) = v3;
  v14 = 4;
  v15 = ShowsSortType.rawValue.getter(4);
  v17 = v16;
  v19 = ShowsSortType.rawValue.getter(a1);
  v20 = v18;
  if (v15 == v19 && v17 == v18)
  {
    swift_bridgeObjectRelease_n(v17, 2);
  }
  else
  {
    v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v17, v19, v18, 0);
    swift_bridgeObjectRelease(v17);
    swift_bridgeObjectRelease(v20);
    if ((v21 & 1) == 0)
      goto LABEL_16;
  }
  v14 = ShowsSortType.ascendingType.getter(4);
LABEL_16:
  v23 = _swiftEmptyArrayStorage[2];
  v22 = _swiftEmptyArrayStorage[3];
  if (v23 >= v22 >> 1)
    sub_1807F8(v22 > 1, v23 + 1, 1);
  _swiftEmptyArrayStorage[2] = v23 + 1;
  *((_BYTE *)&_swiftEmptyArrayStorage[4] + v23) = v14;
  v24 = 2;
  v25 = ShowsSortType.rawValue.getter(2);
  v27 = v26;
  v29 = ShowsSortType.rawValue.getter(a1);
  v30 = v28;
  if (v25 == v29 && v27 == v28)
  {
    swift_bridgeObjectRelease_n(v27, 2);
  }
  else
  {
    v31 = _stringCompareWithSmolCheck(_:_:expecting:)(v25, v27, v29, v28, 0);
    swift_bridgeObjectRelease(v27);
    swift_bridgeObjectRelease(v30);
    if ((v31 & 1) == 0)
      goto LABEL_23;
  }
  v24 = ShowsSortType.ascendingType.getter(2);
LABEL_23:
  v33 = _swiftEmptyArrayStorage[2];
  v32 = _swiftEmptyArrayStorage[3];
  if (v33 >= v32 >> 1)
    sub_1807F8(v32 > 1, v33 + 1, 1);
  _swiftEmptyArrayStorage[2] = v33 + 1;
  *((_BYTE *)&_swiftEmptyArrayStorage[4] + v33) = v24;
  v34 = 6;
  v35 = ShowsSortType.rawValue.getter(6);
  v37 = v36;
  v39 = ShowsSortType.rawValue.getter(a1);
  v40 = v38;
  if (v35 == v39 && v37 == v38)
  {
    swift_bridgeObjectRelease_n(v37, 2);
  }
  else
  {
    v41 = _stringCompareWithSmolCheck(_:_:expecting:)(v35, v37, v39, v38, 0);
    swift_bridgeObjectRelease(v37);
    swift_bridgeObjectRelease(v40);
    if ((v41 & 1) == 0)
      goto LABEL_30;
  }
  v34 = ShowsSortType.ascendingType.getter(6);
LABEL_30:
  v43 = _swiftEmptyArrayStorage[2];
  v42 = _swiftEmptyArrayStorage[3];
  if (v43 >= v42 >> 1)
    sub_1807F8(v42 > 1, v43 + 1, 1);
  _swiftEmptyArrayStorage[2] = v43 + 1;
  *((_BYTE *)&_swiftEmptyArrayStorage[4] + v43) = v34;
  swift_retain(v1);
  v44 = sub_3BB9C((uint64_t)_swiftEmptyArrayStorage, v1, a1);
  swift_release(_swiftEmptyArrayStorage);
  swift_release(v1);
  return v44;
}

_QWORD *sub_39D18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  unint64_t v7;

  v7 = sub_288454((uint64_t)_swiftEmptyArrayStorage);
  v5 = ActionMenuBuilder.buildMenuElements(for:asPartOf:)(a2, *(_QWORD *)(a3 + 16));
  swift_bridgeObjectRelease(v7);
  return v5;
}

uint64_t sub_39D7C(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

Class sub_39D9C(uint64_t a1, uint64_t a2)
{
  uint64_t (*v3)(void);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Class isa;

  v3 = *(uint64_t (**)(void))(a1 + 32);
  v4 = sub_327F8(0, (unint64_t *)&unk_3BC580, UIMenuElement_ptr);
  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a2, v4);
  v6 = v3();
  swift_bridgeObjectRelease(v5);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v6);
  return isa;
}

_QWORD *ShowListPresenter.deinit()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  swift_release(v0[2]);
  __swift_destroy_boxed_opaque_existential_1(v0 + 3);
  __swift_destroy_boxed_opaque_existential_1(v0 + 8);
  swift_release(v0[13]);
  swift_release(v0[14]);
  swift_release(v0[15]);
  v1 = (char *)v0 + OBJC_IVAR____TtC8ShelfKit17ShowListPresenter__headerButtonState;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2520);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC8ShelfKit17ShowListPresenter_subscriptions));
  swift_release(*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC8ShelfKit17ShowListPresenter_rebuildMenuBar + 8));
  swift_release(*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC8ShelfKit17ShowListPresenter_refreshControls));
  sub_3B5A8(*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC8ShelfKit17ShowListPresenter_libraryRefreshType), *(_QWORD *)((char *)v0 + OBJC_IVAR____TtC8ShelfKit17ShowListPresenter_libraryRefreshType + 8), *((_BYTE *)v0 + OBJC_IVAR____TtC8ShelfKit17ShowListPresenter_libraryRefreshType + 16));
  swift_release(*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC8ShelfKit17ShowListPresenter_isEditing));
  swift_release(*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC8ShelfKit17ShowListPresenter_dismiss));
  sub_3AEF8(*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC8ShelfKit17ShowListPresenter____lazy_storage___reorderingExtension), *(_QWORD *)((char *)v0 + OBJC_IVAR____TtC8ShelfKit17ShowListPresenter____lazy_storage___reorderingExtension + 8), *(_QWORD *)((char *)v0 + OBJC_IVAR____TtC8ShelfKit17ShowListPresenter____lazy_storage___reorderingExtension + 16), *(_QWORD *)((char *)v0 + OBJC_IVAR____TtC8ShelfKit17ShowListPresenter____lazy_storage___reorderingExtension + 24), *(_QWORD *)((char *)v0 + OBJC_IVAR____TtC8ShelfKit17ShowListPresenter____lazy_storage___reorderingExtension + 32), *(_QWORD *)((char *)v0 + OBJC_IVAR____TtC8ShelfKit17ShowListPresenter____lazy_storage___reorderingExtension + 40));
  sub_3AF98(*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC8ShelfKit17ShowListPresenter____lazy_storage___deletableExtension), *(_QWORD *)((char *)v0 + OBJC_IVAR____TtC8ShelfKit17ShowListPresenter____lazy_storage___deletableExtension + 8), *(_QWORD *)((char *)v0 + OBJC_IVAR____TtC8ShelfKit17ShowListPresenter____lazy_storage___deletableExtension + 16), *(_QWORD *)((char *)v0 + OBJC_IVAR____TtC8ShelfKit17ShowListPresenter____lazy_storage___deletableExtension + 24));
  return v0;
}

uint64_t ShowListPresenter.__deallocating_deinit()
{
  uint64_t v0;

  ShowListPresenter.deinit();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

_QWORD *sub_39F60(uint64_t a1, char *a2)
{
  uint64_t v2;
  char v4;
  _QWORD *v5;
  char v7[2];

  v4 = a2[1];
  v7[0] = *a2;
  v7[1] = v4;
  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  v5 = sub_3B1C0(a1, v7);
  swift_release(a1);
  return v5;
}

uint64_t sub_39FC4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v1 + 120) + OBJC_IVAR____TtC8ShelfKit16ShowListProvider_kind);
  v4 = type metadata accessor for InteractionContext.Page(0);
  if (v3 == 9)
    v5 = 14;
  else
    v5 = 16;
  return swift_storeEnumTagMultiPayload(a1, v4, v5);
}

uint64_t (*sub_3A01C(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC8ShelfKit17ShowListPresenter_rebuildMenuBar, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t sub_3A060@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = (uint64_t *)(*(_QWORD *)(v1 + 120) + OBJC_IVAR____TtC8ShelfKit16ShowListProvider_paginatedPublisher);
  swift_beginAccess(v3, v6, 0, 0);
  v4 = *v3;
  *a1 = *v3;
  return swift_retain(v4);
}

void sub_3A0B8()
{
  ViewControllerPresenter.viewWillAppear()();
}

void sub_3A0C0()
{
  ViewControllerPresenter.viewDidAppear()();
}

uint64_t sub_3A0C8(uint64_t a1)
{
  _QWORD *v1;

  return ViewControllerPresenter.viewWillDisappear(forReason:)(a1, *v1);
}

void sub_3A0D0()
{
  ViewControllerPresenter.viewDidDisappear()();
}

void sub_3A0D8()
{
  ViewControllerPresenter.viewDidReceiveMemoryWarning()();
}

uint64_t sub_3A0E0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  id v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  id v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  id v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  int *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v42;
  void (*v43)(char *, uint64_t, uint64_t, uint64_t);
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE v50[40];
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  Swift::String v54;
  Swift::String v55;
  Swift::String v56;
  Swift::String v57;

  v48 = a1;
  v47 = type metadata accessor for ActionMenu.Item(0);
  __chkstk_darwin(v47);
  v3 = (unint64_t *)((char *)&v42 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
  v5 = __chkstk_darwin(v4);
  v46 = (uint64_t)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v8 = (char *)&v42 - v7;
  v49 = (uint64_t)&v42 - v7;
  v9 = (void *)objc_opt_self(NSBundle);
  v10 = objc_msgSend(v9, "mainBundle");
  v54._object = (void *)0xE000000000000000;
  v11._countAndFlagsBits = 0xD000000000000011;
  v11._object = (void *)0x800000000030B0B0;
  v12._countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  v54._countAndFlagsBits = 0;
  v13 = NSLocalizedString(_:tableName:bundle:value:comment:)(v11, (Swift::String_optional)0, (NSBundle)v10, v12, v54);
  object = v13._object;
  countAndFlagsBits = v13._countAndFlagsBits;

  v14 = type metadata accessor for ArtworkModel(0);
  v43 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56);
  v43(v8, 1, 1, v14);
  sub_150C8(v1 + 24, (uint64_t)&v51);
  v15 = swift_allocObject(&unk_379518, 56, 7);
  sub_F4D8(&v51, v15 + 16);
  v16 = objc_msgSend(v9, "mainBundle");
  v55._object = (void *)0xE000000000000000;
  v17._countAndFlagsBits = 0xD000000000000011;
  v17._object = (void *)0x800000000030B0B0;
  v18._countAndFlagsBits = 0;
  v18._object = (void *)0xE000000000000000;
  v55._countAndFlagsBits = 0;
  v19 = NSLocalizedString(_:tableName:bundle:value:comment:)(v17, (Swift::String_optional)0, (NSBundle)v16, v18, v55);
  v42 = v19._object;

  v20 = objc_msgSend(v9, "mainBundle");
  v56._object = (void *)0xE000000000000000;
  v21._countAndFlagsBits = 0x425F574F4C4C4F46;
  v21._object = (void *)0xED00004E4F545455;
  v22._countAndFlagsBits = 0;
  v22._object = (void *)0xE000000000000000;
  v56._countAndFlagsBits = 0;
  v23 = NSLocalizedString(_:tableName:bundle:value:comment:)(v21, (Swift::String_optional)0, (NSBundle)v20, v22, v56);

  v24 = objc_msgSend(v9, "mainBundle");
  v25._countAndFlagsBits = 0xD000000000000017;
  v57._object = (void *)0xE000000000000000;
  v25._object = (void *)0x800000000030B0D0;
  v26._countAndFlagsBits = 0;
  v26._object = (void *)0xE000000000000000;
  v57._countAndFlagsBits = 0;
  v27 = NSLocalizedString(_:tableName:bundle:value:comment:)(v25, (Swift::String_optional)0, (NSBundle)v24, v26, v57);

  v28 = type metadata accessor for TextFieldAction(0);
  swift_allocObject(v28, *(unsigned int *)(v28 + 48), *(unsigned __int16 *)(v28 + 52));
  v29 = sub_E3210(v19._countAndFlagsBits, (uint64_t)v42, 0, 0, v23._countAndFlagsBits, (uint64_t)v23._object, v27._countAndFlagsBits, (uint64_t)v27._object, 0, 0, 1u, 1, 0x20u, (uint64_t)sub_3C5F0, v15);
  swift_release(v15);
  v52 = v28;
  v53 = sub_F1C0(&qword_3B2810, (void (*)(uint64_t))type metadata accessor for TextFieldAction, (uint64_t)&protocol conformance descriptor for Action);
  *(_QWORD *)&v51 = v29;
  v30 = _s8ShelfKit10ActionMenuV2IDVAEycfC_0();
  v32 = v31;
  v33 = v46;
  sub_267BC(v49, v46, &qword_3BEB70);
  sub_267BC((uint64_t)&v51, (uint64_t)v50, &qword_3B0C50);
  v34 = (int *)v47;
  v35 = (uint64_t)v3 + *(int *)(v47 + 24);
  v43((char *)v35, 1, 1, v14);
  v36 = v34[7];
  *((_BYTE *)v3 + v36) = 2;
  v37 = (uint64_t)v3 + v34[9];
  *(_QWORD *)(v37 + 32) = 0;
  *(_OWORD *)v37 = 0u;
  *(_OWORD *)(v37 + 16) = 0u;
  *v3 = v30;
  v3[1] = v32;
  v38 = (unint64_t)object;
  v3[2] = countAndFlagsBits;
  v3[3] = v38;
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRetain(v38);
  sub_3C454(v33, v35, &qword_3BEB70);
  *((_BYTE *)v3 + v36) = 2;
  *((_BYTE *)v3 + v34[8]) = 1;
  sub_3C454((uint64_t)v50, v37, &qword_3B0C50);
  v39 = v48;
  sub_3C56C((uint64_t)v3, v48, type metadata accessor for ActionMenu.Item);
  v40 = type metadata accessor for ActionMenu.Child(0);
  swift_storeEnumTagMultiPayload(v39, v40, 0);
  swift_bridgeObjectRelease(v38);
  swift_bridgeObjectRelease(v32);
  sub_1459C(v49, &qword_3BEB70);
  return sub_1459C((uint64_t)&v51, &qword_3B0C50);
}

uint64_t sub_3A58C(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char v7;
  _BYTE v8[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v8, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    v6 = *(_QWORD *)(result + OBJC_IVAR____TtC8ShelfKit17ShowListPresenter_isEditing);
    swift_retain(v6);
    swift_release(v5);
    v7 = a2;
    CurrentValueSubject.send(_:)(&v7);
    return swift_release(v6);
  }
  return result;
}

uint64_t sub_3A614(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v20 - v10;
  v12 = type metadata accessor for URL(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a2)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 1, 1, v12);
    goto LABEL_5;
  }
  swift_bridgeObjectRetain(a2);
  URL.init(string:)(a1, a2);
  swift_bridgeObjectRelease(a2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
LABEL_5:
    sub_1459C((uint64_t)v11, &qword_3B4370);
    return 0;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v11, v12);
  v16 = a3[3];
  v17 = a3[4];
  __swift_project_boxed_opaque_existential_1(a3, v16);
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v9, v15, v12);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v9, 0, 1, v12);
  v18 = LibraryActionControllerProtocol.subscribe(feedUrl:adamId:location:explicit:displaySuccessHUD:)((uint64_t)v9, 0, 1, 0, 0, 0, 1, v16, v17);
  swift_release(v18);
  sub_1459C((uint64_t)v9, &qword_3B4370);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  return 0;
}

Swift::Void __swiftcall ShowListPresenter.didTransition(to:)(ShelfKit::InterfaceMode to)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v2 = *(_QWORD *)(*(_QWORD *)(v1 + 120) + OBJC_IVAR____TtC8ShelfKit16ShowListProvider_interfaceMode);
  v3 = to & 1;
  swift_retain(v2);
  CurrentValueSubject.send(_:)(&v3);
  swift_release(v2);
}

uint64_t sub_3A844@<X0>(uint64_t *a1@<X0>, _WORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_2ECB60);
  v5 = swift_getKeyPath(&unk_2ECB88);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(KeyPath);
  result = swift_release(v5);
  *a2 = v7;
  return result;
}

uint64_t sub_3A8C0(__int16 *a1, uint64_t *a2)
{
  __int16 v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  __int16 v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_2ECB60);
  v5 = swift_getKeyPath(&unk_2ECB88);
  v7 = v2;
  swift_retain(v3);
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

uint64_t sub_3A930(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  id v32;
  _QWORD v33[6];
  _QWORD v34[5];

  v31 = a2;
  v32 = a3;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2820);
  __chkstk_darwin(v8);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ClickLocationElement(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  v14 = __chkstk_darwin(v11);
  v15 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v17 = (char *)&v30 - v16;
  v34[3] = type metadata accessor for SheetAction(0);
  v34[4] = sub_F1C0(&qword_3B2808, (void (*)(uint64_t))type metadata accessor for SheetAction, (uint64_t)&protocol conformance descriptor for Action);
  v34[0] = a1;
  v18 = *(_QWORD *)(a5 + 16);
  sub_267BC(a4, (uint64_t)v10, &qword_3B2820);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    swift_retain(v18);
    swift_retain(a1);
    sub_1459C((uint64_t)v10, &qword_3B2820);
  }
  else
  {
    v19 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
    v19(v17, v10, v11);
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v17, v11);
    v20 = *(unsigned __int8 *)(v12 + 80);
    v21 = (v20 + 16) & ~v20;
    v22 = swift_allocObject(&unk_379540, v21 + v13, v20 | 7);
    v19((char *)(v22 + v21), v15, v11);
    swift_retain_n(v18, 2);
    swift_retain(a1);
    v23 = BaseObjectGraph.transformingMetricsFieldsContext(with:)(sub_3C658, v22);
    swift_release_n(v18, 2);
    swift_release(v22);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v17, v11);
    v18 = v23;
  }
  type metadata accessor for ActionRunnerOptions(0);
  v24 = swift_retain(v18);
  v25 = BaseObjectGraph.__allocating_init(_:)(v24);
  sub_267BC(v31, (uint64_t)v33, (uint64_t *)&unk_3BC540);
  v33[4] = v32;
  v26 = v32;
  v27 = _s8ShelfKit19ActionRunnerOptionsC04withC6OriginyACXDAA0cG0VSgF_0((uint64_t)v33);
  sub_1459C((uint64_t)v33, &qword_3B18E8);
  swift_release(v25);
  sub_150C8((uint64_t)v34, (uint64_t)v33);
  v33[5] = v27;
  v28 = ActionPerformer.callAsFunction()();
  swift_release(v18);
  sub_23740(v33);
  __swift_destroy_boxed_opaque_existential_1(v34);
  return v28;
}

uint64_t sub_3ABDC(char a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  switch(a1)
  {
    case 10:
      return a2 == 10;
    case 9:
      return a2 == 9;
    case 8:
      return a2 == 8;
  }
  if ((a2 - 8) < 3u)
    return 0;
  v4 = ((uint64_t (*)(void))ShowsSortType.rawValue.getter)();
  v6 = v5;
  v8 = ShowsSortType.rawValue.getter(a2);
  v9 = v7;
  if (v4 == v8 && v6 == v7)
  {
    swift_bridgeObjectRelease_n(v6, 2);
    return 1;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v6, v8, v7, 0);
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v9);
    return v10 & 1;
  }
}

uint64_t sub_3ACD4(uint64_t a1, uint64_t a2)
{
  __int16 v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v3 = a1;
  switch(a1)
  {
    case 0xAu:
      if (a2 != 10)
        return 0;
      break;
    case 9u:
      if (a2 != 9)
        return 0;
      break;
    case 8u:
      if (a2 != 8)
        return 0;
      return ((v3 & 0x100) == 0) ^ ((unsigned __int16)(a2 & 0x100) >> 8);
    default:
      if ((a2 - 8) < 3u)
        return 0;
      v5 = ShowsSortType.rawValue.getter(a1);
      v7 = v6;
      v9 = ShowsSortType.rawValue.getter(a2);
      v10 = v8;
      if (v5 == v9 && v7 == v8)
      {
        swift_bridgeObjectRelease_n(v7, 2);
      }
      else
      {
        v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v7, v9, v8, 0);
        swift_bridgeObjectRelease(v7);
        swift_bridgeObjectRelease(v10);
        result = 0;
        if ((v11 & 1) == 0)
          return result;
      }
      break;
  }
  return ((v3 & 0x100) == 0) ^ ((unsigned __int16)(a2 & 0x100) >> 8);
}

uint64_t _s8ShelfKit17ShowListPresenterC4KindO2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  if (a1 == 9)
    return a2 == 9;
  if (a1 == 8)
    return a2 == 8;
  if ((a2 & 0xFE) == 8)
    return 0;
  v4 = ShowsSortType.rawValue.getter(a1);
  v6 = v5;
  v8 = ShowsSortType.rawValue.getter(a2);
  v9 = v7;
  if (v4 == v8 && v6 == v7)
  {
    swift_bridgeObjectRelease_n(v6, 2);
    return 1;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v6, v8, v7, 0);
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v9);
    return v10 & 1;
  }
}

uint64_t sub_3AEC4()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_3AEE8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return sub_36E64(a1, a2, v2);
}

uint64_t sub_3AEF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_37030(a1, a2, v2);
}

uint64_t sub_3AEF8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (result != 1)
    return sub_3AF08(result, a2, a3, a4, a5, a6);
  return result;
}

uint64_t sub_3AF08(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (result)
  {
    swift_release(a2);
    swift_release(a4);
    return swift_release(a6);
  }
  return result;
}

uint64_t sub_3AF44(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (result != 1)
    return sub_3AF54(result, a2, a3, a4, a5, a6);
  return result;
}

uint64_t sub_3AF54(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (result)
  {
    swift_retain(a2);
    swift_retain(a4);
    return swift_retain(a6);
  }
  return result;
}

uint64_t sub_3AF90(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;

  return sub_374DC(a1, a2, a3, v3);
}

uint64_t sub_3AF98(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result != 1)
    return sub_3AFA8(result, a2, a3, a4);
  return result;
}

uint64_t sub_3AFA8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result)
  {
    swift_release(a2);
    return swift_release(a4);
  }
  return result;
}

uint64_t sub_3AFD8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result != 1)
    return sub_3AFE8(result, a2, a3, a4);
  return result;
}

uint64_t sub_3AFE8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result)
  {
    swift_retain(a2);
    return swift_retain(a4);
  }
  return result;
}

uint64_t sub_3B018(unsigned __int8 a1)
{
  void *v2;
  id v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t countAndFlagsBits;
  id v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  Swift::String v12;
  unint64_t v14;
  Swift::String v15;

  v2 = (void *)objc_opt_self(NSBundle);
  v3 = objc_msgSend(v2, "mainBundle");
  v15._object = (void *)0xE500000000000000;
  v4._countAndFlagsBits = 0x48535F454C544954;
  v4._object = (void *)0xEB0000000053574FLL;
  v5._countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  v15._countAndFlagsBits = 0x73776F6853;
  v6 = NSLocalizedString(_:tableName:bundle:value:comment:)(v4, (Swift::String_optional)0, (NSBundle)v3, v5, v15);
  countAndFlagsBits = v6._countAndFlagsBits;

  if (a1 - 2 < 2)
  {
    swift_bridgeObjectRelease(v6._object);
    v8 = objc_msgSend(v2, "mainBundle");
    v9 = 0xD000000000000016;
    v14 = 0x800000000030AFF0;
    v10 = 0x800000000030AFD0;
    v11 = 0xD000000000000010;
LABEL_5:
    v12._countAndFlagsBits = 0;
    v12._object = (void *)0xE000000000000000;
    countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v11, (Swift::String_optional)0, (NSBundle)v8, v12, *(Swift::String *)&v9)._countAndFlagsBits;

    return countAndFlagsBits;
  }
  if (a1 == 9)
  {
    swift_bridgeObjectRelease(v6._object);
    v8 = objc_msgSend(v2, "mainBundle");
    v9 = 0xD000000000000013;
    v11 = 0xD000000000000019;
    v14 = 0x800000000030B030;
    v10 = 0x800000000030B010;
    goto LABEL_5;
  }
  return countAndFlagsBits;
}

_QWORD *sub_3B1C0(uint64_t a1, char *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void (__swiftcall **v16)();
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v34;
  __int128 v35;
  int v36;
  char v37;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2520);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *a2;
  v11 = a2[1];
  v35 = 0uLL;
  v36 = 0;
  v37 = 5;
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8770);
  swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  v3[13] = CurrentValueSubject.init(_:)(&v35);
  *(_QWORD *)&v35 = _swiftEmptyArrayStorage;
  v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8780);
  swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  v3[14] = CurrentValueSubject.init(_:)(&v35);
  v14 = (char *)v3 + OBJC_IVAR____TtC8ShelfKit17ShowListPresenter__headerButtonState;
  LOWORD(v35) = 512;
  v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B2678);
  Published.init(initialValue:)(&v35, v15);
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v14, v9, v6);
  *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC8ShelfKit17ShowListPresenter_subscriptions) = _swiftEmptyArrayStorage;
  v16 = (void (__swiftcall **)())((char *)v3 + OBJC_IVAR____TtC8ShelfKit17ShowListPresenter_rebuildMenuBar);
  *v16 = FindOrCreateEpisodeOfferContentIDsIntentsIntentImplementation.init();
  v16[1] = 0;
  v17 = OBJC_IVAR____TtC8ShelfKit17ShowListPresenter_refreshControls;
  LOBYTE(v35) = 1;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2770);
  swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
  *(_QWORD *)((char *)v3 + v17) = CurrentValueSubject.init(_:)(&v35);
  v19 = (char *)v3 + OBJC_IVAR____TtC8ShelfKit17ShowListPresenter_libraryRefreshType;
  *(_QWORD *)v19 = 0;
  *((_QWORD *)v19 + 1) = 0;
  v19[16] = 2;
  v20 = OBJC_IVAR____TtC8ShelfKit17ShowListPresenter_isEditing;
  LOBYTE(v35) = 0;
  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B20D0);
  swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
  *(_QWORD *)((char *)v3 + v20) = CurrentValueSubject.init(_:)(&v35);
  v22 = OBJC_IVAR____TtC8ShelfKit17ShowListPresenter_dismiss;
  LOBYTE(v35) = 0;
  swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
  *(_QWORD *)((char *)v3 + v22) = CurrentValueSubject.init(_:)(&v35);
  v23 = (char *)v3 + OBJC_IVAR____TtC8ShelfKit17ShowListPresenter____lazy_storage___reorderingExtension;
  *(_QWORD *)v23 = 1;
  *((_QWORD *)v23 + 5) = 0;
  *(_OWORD *)(v23 + 24) = 0u;
  *(_OWORD *)(v23 + 8) = 0u;
  v24 = (_QWORD *)((char *)v3 + OBJC_IVAR____TtC8ShelfKit17ShowListPresenter____lazy_storage___deletableExtension);
  *v24 = 1;
  v24[1] = 0;
  v24[2] = 0;
  v24[3] = 0;
  v3[2] = a1;
  v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BC3F0);
  swift_retain(a1);
  BaseObjectGraph.inject<A>(_:)(&v35, v25, v25);
  sub_F4D8(&v35, (uint64_t)(v3 + 3));
  v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2778);
  BaseObjectGraph.inject<A>(_:)(&v35, v26, v26);
  sub_F4D8(&v35, (uint64_t)(v3 + 8));
  v27 = qword_3B02D8;
  swift_retain(a1);
  if (v27 != -1)
    swift_once(&qword_3B02D8, sub_2B868C);
  v28 = qword_3C6D98;
  v29 = type metadata accessor for ShowListProvider(0);
  swift_allocObject(v29, *(unsigned int *)(v29 + 48), *(unsigned __int16 *)(v29 + 52));
  v30 = sub_86848(a1, v10, v28);
  swift_release(a1);
  v3[15] = v30;
  if ((v11 & 1) != 0)
  {
    *(_QWORD *)&v35 = sub_3B018(v10);
    *((_QWORD *)&v35 + 1) = v31;
    v36 = 0;
    v32 = 3;
  }
  else
  {
    v35 = 0uLL;
    v36 = 0;
    v32 = 5;
  }
  v37 = v32;
  CurrentValueSubject.value.setter(&v35);
  sub_37920();
  return v3;
}

uint64_t sub_3B52C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

_QWORD *sub_3B558(uint64_t a1)
{
  uint64_t v1;

  return sub_39D18(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_3B560()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_3B570()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t block_destroy_helper_0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_3B5A8(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 0xFF)
    return sub_3B5BC(a1, a2, a3);
  return a1;
}

uint64_t sub_3B5BC(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 1u)
    return swift_bridgeObjectRelease(a2);
  return result;
}

uint64_t sub_3B5D4(uint64_t a1)
{
  uint64_t result;

  result = sub_F1C0(&qword_3B25F0, (void (*)(uint64_t))type metadata accessor for ShowListPresenter, (uint64_t)&protocol conformance descriptor for ShowListPresenter);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for ShowListPresenter(uint64_t a1)
{
  uint64_t result;

  result = qword_3B2660;
  if (!qword_3B2660)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ShowListPresenter);
  return result;
}

uint64_t sub_3B64C()
{
  return sub_32914((unint64_t *)&qword_3B25F8, &qword_3B2600, (uint64_t)&protocol conformance descriptor for AnyPaginatedPublisher<A, B>);
}

uint64_t sub_3B678()
{
  return sub_F1C0(&qword_3B2630, (void (*)(uint64_t))type metadata accessor for ShowListPresenter, (uint64_t)&protocol conformance descriptor for ShowListPresenter);
}

double sub_3B6AC@<D0>(_OWORD *a1@<X8>)
{
  __int128 v2;
  double result;
  _OWORD v4[2];
  __int128 v5;

  ShowListPresenter.reorderingExtension.getter((uint64_t (**)(uint64_t, uint64_t *))v4);
  v2 = v4[1];
  *a1 = v4[0];
  a1[1] = v2;
  result = *(double *)&v5;
  a1[2] = v5;
  return result;
}

double sub_3B6F0@<D0>(_OWORD *a1@<X8>)
{
  double result;
  __int128 v3;
  _OWORD v4[2];

  ShowListPresenter.deletableExtension.getter((uint64_t (**)())v4);
  result = *(double *)v4;
  v3 = v4[1];
  *a1 = v4[0];
  a1[1] = v3;
  return result;
}

uint64_t sub_3B72C()
{
  return type metadata accessor for ShowListPresenter(0);
}

void sub_3B734(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[15];

  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[1] = &unk_2ECD78;
  v4[2] = &unk_2ECD78;
  v4[3] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[4] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[5] = (char *)&value witness table for Builtin.NativeObject + 64;
  sub_3B810(319);
  if (v3 <= 0x3F)
  {
    v4[6] = *(_QWORD *)(v2 - 8) + 64;
    v4[7] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[8] = (char *)&value witness table for () + 64;
    v4[9] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[10] = &unk_2ECD90;
    v4[11] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[12] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[13] = &unk_2ECDA8;
    v4[14] = &unk_2ECDC0;
    swift_updateClassMetadata2(a1, 256, 15, v4, a1 + 80);
  }
}

uint64_t method lookup function for ShowListPresenter(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for ShowListPresenter);
}

uint64_t dispatch thunk of CategoryPagePresenter.__allocating_init(asPartOf:with:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 200))();
}

void sub_3B810(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_3B2670)
  {
    v2 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_3B2678);
    v3 = type metadata accessor for Published(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_3B2670);
  }
}

uint64_t getEnumTagSinglePayload for ShowListPresenter.Kind(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v6;
  unsigned int v7;

  if (!a2)
    return 0;
  if (a2 < 0xF7)
  {
    v6 = *a1;
    if (v6 >= 8)
      v7 = v6 - 7;
    else
      v7 = 0;
    if (v7 >= 3)
      return v7 - 2;
    else
      return 0;
  }
  else
  {
    v2 = a2 + 9;
    if (a2 + 9 >= 0xFFFF00)
      v3 = 4;
    else
      v3 = 2;
    if (v2 >> 8 < 0xFF)
      v3 = 1;
    if (v2 >= 0x100)
      v4 = v3;
    else
      v4 = 0;
    return ((uint64_t (*)(void))((char *)&loc_3B8B8 + 4 * byte_2ECB34[v4]))();
  }
}

uint64_t storeEnumTagSinglePayload for ShowListPresenter.Kind(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;

  v3 = a3 + 9;
  if (a3 + 9 >= 0xFFFF00)
    v4 = 4;
  else
    v4 = 2;
  if (v3 >> 8 < 0xFF)
    v4 = 1;
  if (v3 >= 0x100)
    LODWORD(v5) = v4;
  else
    LODWORD(v5) = 0;
  if (a3 >= 0xF7)
    v5 = v5;
  else
    v5 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_3B964 + 4 * byte_2ECB3E[v5]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_3B998 + 4 * byte_2ECB39[v5]))();
}

uint64_t sub_3B998(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_3B9A0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x3B9A8);
  return result;
}

uint64_t sub_3B9B4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x3B9BCLL);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_3B9C0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_3B9C8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ShowListPresenter.Kind()
{
  return &type metadata for ShowListPresenter.Kind;
}

_WORD *__swift_memcpy2_1(_WORD *result, _WORD *a2)
{
  *result = *a2;
  return result;
}

ValueMetadata *type metadata accessor for ShowListPresenter.Configuration()
{
  return &type metadata for ShowListPresenter.Configuration;
}

uint64_t getEnumTagSinglePayload for LibraryMenuAction(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 65281 <= 0xFFFEFFFF)
    v2 = 2;
  else
    v2 = 4;
  if (a2 + 65281 < 0xFF0000)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 16)) - 65281;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
      return (*a1 | (v4 << 16)) - 65281;
    }
    v4 = *((unsigned __int8 *)a1 + 2);
    if (*((_BYTE *)a1 + 2))
      return (*a1 | (v4 << 16)) - 65281;
  }
LABEL_17:
  v6 = *((unsigned __int8 *)a1 + 1);
  v7 = v6 >= 2;
  v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s8ShelfKit17HeaderButtonStateVwst_0(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65281 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65281 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_3BAF8 + 4 * byte_2ECB48[v4]))();
  *a1 = a2 - 255;
  return ((uint64_t (*)(void))((char *)sub_3BB2C + 4 * byte_2ECB43[v4]))();
}

uint64_t sub_3BB2C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_3BB34(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x3BB3CLL);
  return result;
}

uint64_t sub_3BB48(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x3BB50);
  *(_BYTE *)(result + 1) = a2 + 1;
  return result;
}

uint64_t sub_3BB54(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_3BB5C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HeaderButtonState()
{
  return &type metadata for HeaderButtonState;
}

uint64_t sub_3BB78()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

_QWORD *sub_3BB9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (**v43)();
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  Swift::String v55;
  void *object;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  int *v60;
  unint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  _QWORD v71[2];
  unint64_t v72;
  uint64_t v73;
  id v74;
  uint64_t v75;
  int64_t v76;
  char *v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  unint64_t v91;
  unint64_t v92;
  _QWORD *v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;

  v89 = type metadata accessor for ActionMenu.Item(0);
  __chkstk_darwin(v89);
  v82 = (char *)v71 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = type metadata accessor for UUID(0);
  v87 = *(_QWORD *)(v88 - 8);
  __chkstk_darwin(v88);
  v86 = (char *)v71 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v9);
  v85 = (char *)v71 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = type metadata accessor for ActionMetrics(0);
  v83 = *(_QWORD *)(v84 - 8);
  v11 = __chkstk_darwin(v84);
  v95 = (char *)v71 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v94 = (char *)v71 - v13;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
  v15 = __chkstk_darwin(v14);
  v81 = (uint64_t)v71 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v96 = (uint64_t)v71 - v17;
  v80 = type metadata accessor for ActionMenu.Child(0);
  v79 = *(_QWORD *)(v80 - 8);
  __chkstk_darwin(v80);
  v19 = (char *)v71 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *(_QWORD *)(a1 + 16);
  v21 = _swiftEmptyArrayStorage;
  if (v20)
  {
    v71[1] = v3;
    v104 = _swiftEmptyArrayStorage;
    sub_18073C(0, v20, 0);
    v21 = v104;
    v75 = a1 + 32;
    v74 = (id)objc_opt_self(UITraitCollection);
    v22 = 0;
    v73 = a2 + 24;
    v72 = 0x800000000030AFA0;
    v77 = v19;
    v76 = v20;
    v78 = a3;
    while (1)
    {
      v23 = *(unsigned __int8 *)(v75 + v22);
      v24 = objc_msgSend(v74, "currentTraitCollection");
      v25 = UITraitCollection.interfaceIdiomIsMac.getter();

      v93 = v21;
      v97 = v22;
      if ((v25 & 1) != 0)
        break;
      if (ShowsSortType.isAscending()() && (ShowsSortType.baseSortTypeMatches(otherSort:)(a3, v23) & 1) != 0)
      {
        sub_2BC1D0(a3);
        v27 = v26;
        v29 = v28;
        v30 = v96;
        v31 = 0xEA00000000007075;
      }
      else
      {
        if (!ShowsSortType.isDescending()() || (ShowsSortType.baseSortTypeMatches(otherSort:)(a3, v23) & 1) == 0)
          break;
        sub_2BC1D0(a3);
        v27 = v32;
        v29 = v33;
        v30 = v96;
        v31 = 0xEC0000006E776F64;
      }
      ArtworkModel.init(glyphName:accessibilityTitle:isCustomSymbol:isMulticolorSymbol:)(0x2E6E6F7276656863, v31, v27, v29, 0, 0);
      v34 = type metadata accessor for ArtworkModel(0);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v30, 0, 1, v34);
LABEL_12:
      ShowsSortType.displayTitle.getter(v23);
      v91 = v36;
      v92 = v37;
      v90 = ShowsSortType.baseSortTypeMatches(otherSort:)(v23, a3);
      sub_150C8(v73, (uint64_t)&v101);
      v38 = swift_allocObject(&unk_3794F0, 57, 7);
      v39 = sub_F4D8(&v101, v38 + 16);
      *(_BYTE *)(v38 + 56) = v23;
      v40 = v94;
      static ActionMetrics.notInstrumented.getter(v39);
      v41 = type metadata accessor for ClosureAction(0);
      v42 = swift_allocObject(v41, *(unsigned int *)(v41 + 48), *(unsigned __int16 *)(v41 + 52));
      v43 = (uint64_t (**)())(v42 + OBJC_IVAR____TtC8ShelfKit13ClosureAction_closure);
      *v43 = sub_3C404;
      v43[1] = (uint64_t (*)())v38;
      v44 = v83;
      v45 = v84;
      (*(void (**)(char *, char *, uint64_t))(v83 + 16))(v95, v40, v84);
      v46 = type metadata accessor for ImpressionMetrics(0);
      v47 = (uint64_t)v85;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v85, 1, 1, v46);
      v48 = swift_retain(v38);
      v49 = v86;
      UUID.init()(v48);
      v50 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
      v52 = v51;
      (*(void (**)(char *, uint64_t))(v87 + 8))(v49, v88);
      *(_QWORD *)(v42 + 16) = v50;
      *(_QWORD *)(v42 + 24) = v52;
      *(_QWORD *)(v42 + 32) = 0;
      *(_QWORD *)(v42 + 40) = 0;
      *(_BYTE *)(v42 + 48) = 32;
      (*(void (**)(uint64_t, char *, uint64_t))(v44 + 32))(v42 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v95, v45);
      sub_23AB8(v47, v42 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics);
      (*(void (**)(char *, uint64_t))(v44 + 8))(v94, v45);
      swift_release(v38);
      v102 = v41;
      v103 = sub_F1C0(&qword_3B2768, (void (*)(uint64_t))type metadata accessor for ClosureAction, (uint64_t)&protocol conformance descriptor for Action);
      *(_QWORD *)&v101 = v42;
      if (qword_3B01B0 != -1)
        swift_once(&qword_3B01B0, sub_1CCBB0);
      ++v97;
      v90 ^= 1u;
      v53 = (unint64_t *)(*(uint64_t (**)(void))(*(_QWORD *)off_3C0C48 + 136))();
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 + 1, v53));
      v98 = 0;
      v99 = 0xE000000000000000;
      _StringGuts.grow(_:)(38);
      swift_bridgeObjectRelease(v99);
      v98 = 0xD000000000000024;
      v99 = v72;
      v100 = v54;
      v55._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
      object = v55._object;
      String.append(_:)(v55);
      swift_bridgeObjectRelease(object);
      v58 = v98;
      v57 = v99;
      v59 = v81;
      sub_267BC(v96, v81, &qword_3BEB70);
      sub_267BC((uint64_t)&v101, (uint64_t)&v98, &qword_3B0C50);
      v60 = (int *)v89;
      v61 = (unint64_t *)v82;
      v62 = (uint64_t)&v82[*(int *)(v89 + 24)];
      v63 = type metadata accessor for ArtworkModel(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 56))(v62, 1, 1, v63);
      v64 = v60[7];
      *((_BYTE *)v61 + v64) = 2;
      v65 = (uint64_t)v61 + v60[9];
      *(_QWORD *)(v65 + 32) = 0;
      *(_OWORD *)v65 = 0u;
      *(_OWORD *)(v65 + 16) = 0u;
      *v61 = v58;
      v61[1] = v57;
      v66 = v92;
      v61[2] = v91;
      v61[3] = v66;
      swift_bridgeObjectRetain(v57);
      swift_bridgeObjectRetain(v66);
      sub_3C454(v59, v62, &qword_3BEB70);
      *((_BYTE *)v61 + v64) = 2;
      *((_BYTE *)v61 + v60[8]) = v90 & 1;
      sub_3C454((uint64_t)&v98, v65, &qword_3B0C50);
      v67 = (uint64_t)v77;
      sub_3C56C((uint64_t)v61, (uint64_t)v77, type metadata accessor for ActionMenu.Item);
      swift_storeEnumTagMultiPayload(v67, v80, 0);
      swift_bridgeObjectRelease(v66);
      swift_bridgeObjectRelease(v57);
      sub_1459C(v96, &qword_3BEB70);
      sub_1459C((uint64_t)&v101, &qword_3B0C50);
      v21 = v93;
      v104 = v93;
      v69 = v93[2];
      v68 = v93[3];
      if (v69 >= v68 >> 1)
      {
        sub_18073C(v68 > 1, v69 + 1, 1);
        v21 = v104;
      }
      v21[2] = v69 + 1;
      sub_3C56C(v67, (uint64_t)v21+ ((*(unsigned __int8 *)(v79 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v79 + 80))+ *(_QWORD *)(v79 + 72) * v69, type metadata accessor for ActionMenu.Child);
      v22 = v97;
      a3 = v78;
      if (v97 == v76)
        return v21;
    }
    v35 = type metadata accessor for ArtworkModel(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v96, 1, 1, v35);
    goto LABEL_12;
  }
  return v21;
}

uint64_t sub_3C3E0()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1((_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 57, 7);
}

uint64_t sub_3C404()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = (_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v0 + 48);
  v4 = *(unsigned __int8 *)(v0 + 56);
  __swift_project_boxed_opaque_existential_1(v1, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 208))(v4, v2, v3);
}

uint64_t sub_3C454(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

unint64_t sub_3C498()
{
  unint64_t result;

  result = qword_3B27E0;
  if (!qword_3B27E0)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_3B2678);
    sub_3C4FC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?);
    atomic_store(result, (unint64_t *)&qword_3B27E0);
  }
  return result;
}

unint64_t sub_3C4FC()
{
  unint64_t result;

  result = qword_3B27E8;
  if (!qword_3B27E8)
  {
    result = swift_getWitnessTable(&unk_2ECE04);
    atomic_store(result, (unint64_t *)&qword_3B27E8);
  }
  return result;
}

uint64_t sub_3C540(uint64_t a1)
{
  uint64_t v1;

  return sub_381CC(a1, v1);
}

void sub_3C548(uint64_t a1)
{
  sub_3826C(a1);
}

uint64_t sub_3C550()
{
  uint64_t v0;

  return sub_3A58C(v0, 1);
}

uint64_t sub_3C56C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_3C5B0()
{
  uint64_t v0;

  return sub_3A58C(v0, 0);
}

uint64_t sub_3C5CC()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1((_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_3C5F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_3A614(a1, a2, (_QWORD *)(v2 + 16));
}

uint64_t sub_3C5F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for ClickLocationElement(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_3C658(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ClickLocationElement(0) - 8) + 80);
  return sub_2604D4(a1, v1 + ((v3 + 16) & ~v3));
}

uint64_t getEnumTagSinglePayload for HeaderButtonState.Children(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v6;
  unsigned int v7;

  if (!a2)
    return 0;
  if (a2 < 0xF6)
  {
    v6 = *a1;
    if (v6 >= 8)
      v7 = v6 - 7;
    else
      v7 = 0;
    if (v7 >= 4)
      return v7 - 3;
    else
      return 0;
  }
  else
  {
    v2 = a2 + 10;
    if (a2 + 10 >= 0xFFFF00)
      v3 = 4;
    else
      v3 = 2;
    if (v2 >> 8 < 0xFF)
      v3 = 1;
    if (v2 >= 0x100)
      v4 = v3;
    else
      v4 = 0;
    return ((uint64_t (*)(void))((char *)&loc_3C6EC + 4 * byte_2ECB4D[v4]))();
  }
}

uint64_t storeEnumTagSinglePayload for HeaderButtonState.Children(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;

  v3 = a3 + 10;
  if (a3 + 10 >= 0xFFFF00)
    v4 = 4;
  else
    v4 = 2;
  if (v3 >> 8 < 0xFF)
    v4 = 1;
  if (v3 >= 0x100)
    LODWORD(v5) = v4;
  else
    LODWORD(v5) = 0;
  if (a3 >= 0xF6)
    v5 = v5;
  else
    v5 = 0;
  if (a2 <= 0xF5)
    return ((uint64_t (*)(void))((char *)&loc_3C798 + 4 * byte_2ECB57[v5]))();
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_3C7CC + 4 * byte_2ECB52[v5]))();
}

uint64_t sub_3C7CC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_3C7D4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x3C7DCLL);
  return result;
}

uint64_t sub_3C7E8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x3C7F0);
  *(_BYTE *)result = a2 + 10;
  return result;
}

uint64_t sub_3C7F4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_3C7FC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_3C808(unsigned __int8 *a1)
{
  unsigned int v1;

  v1 = *a1;
  if (v1 >= 8)
    return v1 - 7;
  else
    return 0;
}

_BYTE *sub_3C81C(_BYTE *result, int a2)
{
  if (a2)
    *result = a2 + 7;
  return result;
}

ValueMetadata *type metadata accessor for HeaderButtonState.Children()
{
  return &type metadata for HeaderButtonState.Children;
}

uint64_t LegacyActionButton.action.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_150C8(v1 + 16, a1);
}

uint64_t Review.title.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 64));
  return v1;
}

uint64_t Ratings.formattedCount.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 72);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 80));
  return v1;
}

uint64_t LegacyActionLink.artwork.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for LegacyActionLink(0);
  return sub_267BC(v1 + *(int *)(v3 + 32), a1, &qword_3BEB70);
}

uint64_t type metadata accessor for LegacyActionLink(uint64_t a1)
{
  uint64_t result;

  result = qword_3B2890;
  if (!qword_3B2890)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LegacyActionLink);
  return result;
}

uint64_t LegacyActionLink.presentationStyle.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for LegacyActionLink(0) + 36));
}

uint64_t LegacyActionLink.impressionMetrics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for LegacyActionLink(0);
  return sub_267BC(v1 + *(int *)(v3 + 40), a1, (uint64_t *)&unk_3B8790);
}

uint64_t LegacyActionLink.init(deserializing:using:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t (*v31)(char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t, uint64_t);
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD v78[5];
  _QWORD v79[6];
  uint64_t v80;

  v75 = a2;
  v71 = a3;
  v70 = type metadata accessor for LegacyActionLink(0);
  __chkstk_darwin(v70);
  v67 = (uint64_t *)((char *)&v58 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  v6 = __chkstk_darwin(v5);
  v68 = (uint64_t)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v69 = (char *)&v58 - v8;
  v80 = type metadata accessor for JSONContext(0);
  v77 = *(_QWORD *)(v80 - 8);
  __chkstk_darwin(v80);
  v65 = (char *)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
  v11 = __chkstk_darwin(v10);
  v66 = (uint64_t)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v76 = (uint64_t)&v58 - v13;
  v14 = type metadata accessor for UUID(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v58 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for JSONObject(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = __chkstk_darwin(v18);
  v22 = (char *)&v58 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v24 = (char *)&v58 - v23;
  v25 = a1;
  v26 = JSONObject.subscript.getter(0x6449657571696E75, 0xE800000000000000);
  v72 = JSONObject.string.getter(v26);
  v28 = v27;
  v29 = v24;
  v30 = v18;
  v31 = *(uint64_t (**)(char *, uint64_t))(v19 + 8);
  v32 = v31(v29, v30);
  if (v28)
  {
    v74 = v28;
  }
  else
  {
    UUID.init()(v32);
    v72 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
    v74 = v33;
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  }
  v34 = v25;
  v35 = v25;
  v36 = v75;
  v37 = v73;
  static AnyActionTypes.makeInstance(byDeserializing:using:)(v79, v35, v75);
  if (v37)
  {
    swift_bridgeObjectRelease(v74);
    (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v36, v80);
    return v31(v34, v30);
  }
  else
  {
    v73 = 0;
    v39 = JSONObject.subscript.getter(0x656C746974, 0xE500000000000000);
    v63 = JSONObject.string.getter(v39);
    v62 = v40;
    v31(v22, v30);
    v41 = JSONObject.subscript.getter(0x726F737365636361, 0xED00007478655479);
    v61 = JSONObject.string.getter(v41);
    v60 = v42;
    v31(v22, v30);
    v43 = type metadata accessor for ArtworkModel(0);
    v64 = v30;
    v44 = v43;
    JSONObject.subscript.getter(0x6B726F77747261, 0xE700000000000000);
    v45 = *(void (**)(char *, uint64_t, uint64_t))(v77 + 16);
    v46 = v65;
    v47 = v80;
    v45(v65, v36, v80);
    sub_3CFA8();
    ExpressibleByJSON.init(tryDeserializing:using:)(v22, v46, v44);
    JSONObject.subscript.getter(0xD000000000000011, 0x800000000030B110);
    v45(v46, v36, v47);
    sub_3CFF0();
    ExpressibleByJSON.init(tryDeserializing:using:)(v22, v46, &type metadata for Link.Presentation);
    v59 = LOBYTE(v78[0]);
    v58 = BYTE1(v78[0]);
    v48 = type metadata accessor for ImpressionMetrics(0);
    JSONObject.subscript.getter(0xD000000000000011, 0x8000000000309180);
    v45(v46, v36, v47);
    v49 = (uint64_t)v69;
    ExpressibleByJSON.init(tryDeserializing:using:)(v22, v46, v48);
    sub_150C8((uint64_t)v79, (uint64_t)v78);
    v50 = v66;
    sub_267BC(v76, v66, &qword_3BEB70);
    v51 = v68;
    sub_267BC(v49, v68, (uint64_t *)&unk_3B8790);
    v65 = (char *)v31;
    v52 = v67;
    v53 = v74;
    *v67 = v72;
    v52[1] = v53;
    sub_150C8((uint64_t)v78, (uint64_t)(v52 + 2));
    v54 = v62;
    v52[7] = v63;
    v52[8] = v54;
    v55 = v60;
    v52[9] = v61;
    v52[10] = v55;
    v56 = v70;
    sub_267BC(v50, (uint64_t)v52 + *(int *)(v70 + 32), &qword_3BEB70);
    if (v58)
      v57 = 0;
    else
      v57 = v59;
    sub_1459C(v50, &qword_3BEB70);
    __swift_destroy_boxed_opaque_existential_1(v78);
    *((_BYTE *)v52 + *(int *)(v56 + 36)) = v57;
    sub_23AB8(v51, (uint64_t)v52 + *(int *)(v56 + 40));
    sub_3D034((uint64_t)v52, v71);
    (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v36, v80);
    ((void (*)(char *, uint64_t))v65)(v34, v64);
    sub_1459C(v49, (uint64_t *)&unk_3B8790);
    sub_1459C(v76, &qword_3BEB70);
    return __swift_destroy_boxed_opaque_existential_1(v79);
  }
}

uint64_t sub_3CF94@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return LegacyActionLink.init(deserializing:using:)(a1, a2, a3);
}

unint64_t sub_3CFA8()
{
  unint64_t result;

  result = qword_3B2828;
  if (!qword_3B2828)
  {
    type metadata accessor for ArtworkModel(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for ArtworkModel);
    atomic_store(result, (unint64_t *)&qword_3B2828);
  }
  return result;
}

unint64_t sub_3CFF0()
{
  unint64_t result;

  result = qword_3B2830;
  if (!qword_3B2830)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Link.Presentation);
    atomic_store(result, (unint64_t *)&qword_3B2830);
  }
  return result;
}

uint64_t sub_3D034(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LegacyActionLink(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t initializeBufferWithCopyOfBuffer for LegacyActionLink(uint64_t a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  int *v16;
  uint64_t v17;
  unsigned int (*v18)(_QWORD *, uint64_t, int *);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  id *v25;
  int v26;
  id v27;
  id *v28;
  int v29;
  id v30;
  id *v31;
  int v32;
  id v33;
  id *v34;
  int v35;
  id v36;
  id *v37;
  int v38;
  id v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  void (*v52)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v53;
  void *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v20 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v20);
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = *(_OWORD *)(a2 + 5);
    *(_OWORD *)(a1 + 40) = v8;
    v9 = v8;
    v10 = **(void (***)(uint64_t, uint64_t *, uint64_t))(v8 - 8);
    swift_bridgeObjectRetain(v7);
    v10(a1 + 16, a2 + 2, v9);
    v11 = a2[8];
    *(_QWORD *)(a1 + 56) = a2[7];
    *(_QWORD *)(a1 + 64) = v11;
    v12 = a2[10];
    *(_QWORD *)(a1 + 72) = a2[9];
    *(_QWORD *)(a1 + 80) = v12;
    v13 = a3[8];
    v14 = (_QWORD *)(a1 + v13);
    v15 = (uint64_t *)((char *)a2 + v13);
    v16 = (int *)type metadata accessor for ArtworkModel(0);
    v17 = *((_QWORD *)v16 - 1);
    v18 = *(unsigned int (**)(_QWORD *, uint64_t, int *))(v17 + 48);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v12);
    if (v18(v15, 1, v16))
    {
      v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      v21 = v15[1];
      *v14 = *v15;
      v14[1] = v21;
      v22 = *((unsigned __int8 *)v15 + 32);
      swift_bridgeObjectRetain(v21);
      if (v22 == 255)
      {
        *((_OWORD *)v14 + 1) = *((_OWORD *)v15 + 1);
        *((_BYTE *)v14 + 32) = *((_BYTE *)v15 + 32);
      }
      else
      {
        v23 = v15[2];
        v24 = v15[3];
        sub_3D464(v23, v24, v22);
        v14[2] = v23;
        v14[3] = v24;
        *((_BYTE *)v14 + 32) = v22;
      }
      *(_OWORD *)(v14 + 5) = *(_OWORD *)(v15 + 5);
      v25 = (id *)(v15 + 7);
      v26 = *((unsigned __int8 *)v15 + 64);
      if (v26 == 255)
      {
        v14[7] = *v25;
        *((_BYTE *)v14 + 64) = *((_BYTE *)v15 + 64);
      }
      else
      {
        v27 = *v25;
        sub_3D47C(*v25, *((_BYTE *)v15 + 64));
        v14[7] = v27;
        *((_BYTE *)v14 + 64) = v26;
      }
      v28 = (id *)(v15 + 9);
      v29 = *((unsigned __int8 *)v15 + 80);
      if (v29 == 255)
      {
        v14[9] = *v28;
        *((_BYTE *)v14 + 80) = *((_BYTE *)v15 + 80);
      }
      else
      {
        v30 = *v28;
        sub_3D47C(*v28, *((_BYTE *)v15 + 80));
        v14[9] = v30;
        *((_BYTE *)v14 + 80) = v29;
      }
      v31 = (id *)(v15 + 11);
      v32 = *((unsigned __int8 *)v15 + 96);
      if (v32 == 255)
      {
        v14[11] = *v31;
        *((_BYTE *)v14 + 96) = *((_BYTE *)v15 + 96);
      }
      else
      {
        v33 = *v31;
        sub_3D47C(*v31, *((_BYTE *)v15 + 96));
        v14[11] = v33;
        *((_BYTE *)v14 + 96) = v32;
      }
      v34 = (id *)(v15 + 13);
      v35 = *((unsigned __int8 *)v15 + 112);
      if (v35 == 255)
      {
        v14[13] = *v34;
        *((_BYTE *)v14 + 112) = *((_BYTE *)v15 + 112);
      }
      else
      {
        v36 = *v34;
        sub_3D47C(*v34, *((_BYTE *)v15 + 112));
        v14[13] = v36;
        *((_BYTE *)v14 + 112) = v35;
      }
      v37 = (id *)(v15 + 15);
      v38 = *((unsigned __int8 *)v15 + 128);
      if (v38 == 255)
      {
        v14[15] = *v37;
        *((_BYTE *)v14 + 128) = *((_BYTE *)v15 + 128);
      }
      else
      {
        v39 = *v37;
        sub_3D47C(*v37, *((_BYTE *)v15 + 128));
        v14[15] = v39;
        *((_BYTE *)v14 + 128) = v38;
      }
      *((_BYTE *)v14 + 129) = *((_BYTE *)v15 + 129);
      v40 = v16[11];
      v41 = (char *)v14 + v40;
      v42 = (char *)v15 + v40;
      v43 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 16))(v41, v42, v43);
      v44 = v16[12];
      v45 = (_QWORD *)((char *)v14 + v44);
      v46 = (_QWORD *)((char *)v15 + v44);
      v47 = v46[1];
      *v45 = *v46;
      v45[1] = v47;
      *((_BYTE *)v14 + v16[13]) = *((_BYTE *)v15 + v16[13]);
      *((_BYTE *)v14 + v16[14]) = *((_BYTE *)v15 + v16[14]);
      *((_BYTE *)v14 + v16[15]) = *((_BYTE *)v15 + v16[15]);
      v48 = v16[16];
      v49 = (_QWORD *)((char *)v14 + v48);
      v50 = (_QWORD *)((char *)v15 + v48);
      v51 = v50[1];
      *v49 = *v50;
      v49[1] = v51;
      v52 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v17 + 56);
      swift_bridgeObjectRetain(v47);
      swift_bridgeObjectRetain(v51);
      v52(v14, 0, 1, v16);
    }
    v53 = a3[10];
    *(_BYTE *)(a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
    v54 = (void *)(a1 + v53);
    v55 = (char *)a2 + v53;
    v56 = type metadata accessor for ImpressionMetrics(0);
    v57 = *(_QWORD *)(v56 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48))(v55, 1, v56))
    {
      v58 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
      memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v57 + 16))(v54, v55, v56);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v57 + 56))(v54, 0, 1, v56);
    }
  }
  return a1;
}

uint64_t sub_3D464(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 1u)
    return swift_bridgeObjectRetain(a2);
  return result;
}

id sub_3D47C(id result, char a2)
{
  if (a2 == 1)
    return result;
  return result;
}

uint64_t destroy for LegacyActionLink(_QWORD *a1, uint64_t a2)
{
  char *v4;
  int *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;

  swift_bridgeObjectRelease(a1[1]);
  __swift_destroy_boxed_opaque_existential_1(a1 + 2);
  swift_bridgeObjectRelease(a1[8]);
  swift_bridgeObjectRelease(a1[10]);
  v4 = (char *)a1 + *(int *)(a2 + 32);
  v5 = (int *)type metadata accessor for ArtworkModel(0);
  if (!(*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v5 - 1) + 48))(v4, 1, v5))
  {
    swift_bridgeObjectRelease(*((_QWORD *)v4 + 1));
    v6 = v4[32];
    if (v6 != 255)
      sub_3B5BC(*((_QWORD *)v4 + 2), *((_QWORD *)v4 + 3), v6);
    v7 = v4[64];
    if (v7 != 255)
      sub_3D624(*((id *)v4 + 7), v7);
    v8 = v4[80];
    if (v8 != 255)
      sub_3D624(*((id *)v4 + 9), v8);
    v9 = v4[96];
    if (v9 != 255)
      sub_3D624(*((id *)v4 + 11), v9);
    v10 = v4[112];
    if (v10 != 255)
      sub_3D624(*((id *)v4 + 13), v10);
    v11 = v4[128];
    if (v11 != 255)
      sub_3D624(*((id *)v4 + 15), v11);
    v12 = &v4[v5[11]];
    v13 = type metadata accessor for ArtworkCrop(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
    swift_bridgeObjectRelease(*(_QWORD *)&v4[v5[12] + 8]);
    swift_bridgeObjectRelease(*(_QWORD *)&v4[v5[16] + 8]);
  }
  v14 = (char *)a1 + *(int *)(a2 + 40);
  v15 = type metadata accessor for ImpressionMetrics(0);
  v16 = *(_QWORD *)(v15 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v14, v15);
  return result;
}

void sub_3D624(id a1, char a2)
{
  if (a2 == 1)

}

uint64_t initializeWithCopy for LegacyActionLink(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  int *v16;
  uint64_t v17;
  unsigned int (*v18)(_QWORD *, uint64_t, int *);
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  id *v24;
  int v25;
  id v26;
  id *v27;
  int v28;
  id v29;
  id *v30;
  int v31;
  id v32;
  id *v33;
  int v34;
  id v35;
  id *v36;
  int v37;
  id v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  void (*v51)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v52;
  void *v53;
  const void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = a2 + 16;
  v8 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 40) = v8;
  v9 = v8;
  v10 = **(void (***)(uint64_t, uint64_t, uint64_t))(v8 - 8);
  swift_bridgeObjectRetain(v6);
  v10(a1 + 16, v7, v9);
  v11 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v11;
  v12 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v12;
  v13 = a3[8];
  v14 = (_QWORD *)(a1 + v13);
  v15 = (_QWORD *)(a2 + v13);
  v16 = (int *)type metadata accessor for ArtworkModel(0);
  v17 = *((_QWORD *)v16 - 1);
  v18 = *(unsigned int (**)(_QWORD *, uint64_t, int *))(v17 + 48);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  if (v18(v15, 1, v16))
  {
    v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    v20 = v15[1];
    *v14 = *v15;
    v14[1] = v20;
    v21 = *((unsigned __int8 *)v15 + 32);
    swift_bridgeObjectRetain(v20);
    if (v21 == 255)
    {
      *((_OWORD *)v14 + 1) = *((_OWORD *)v15 + 1);
      *((_BYTE *)v14 + 32) = *((_BYTE *)v15 + 32);
    }
    else
    {
      v22 = v15[2];
      v23 = v15[3];
      sub_3D464(v22, v23, v21);
      v14[2] = v22;
      v14[3] = v23;
      *((_BYTE *)v14 + 32) = v21;
    }
    *(_OWORD *)(v14 + 5) = *(_OWORD *)(v15 + 5);
    v24 = (id *)(v15 + 7);
    v25 = *((unsigned __int8 *)v15 + 64);
    if (v25 == 255)
    {
      v14[7] = *v24;
      *((_BYTE *)v14 + 64) = *((_BYTE *)v15 + 64);
    }
    else
    {
      v26 = *v24;
      sub_3D47C(*v24, *((_BYTE *)v15 + 64));
      v14[7] = v26;
      *((_BYTE *)v14 + 64) = v25;
    }
    v27 = (id *)(v15 + 9);
    v28 = *((unsigned __int8 *)v15 + 80);
    if (v28 == 255)
    {
      v14[9] = *v27;
      *((_BYTE *)v14 + 80) = *((_BYTE *)v15 + 80);
    }
    else
    {
      v29 = *v27;
      sub_3D47C(*v27, *((_BYTE *)v15 + 80));
      v14[9] = v29;
      *((_BYTE *)v14 + 80) = v28;
    }
    v30 = (id *)(v15 + 11);
    v31 = *((unsigned __int8 *)v15 + 96);
    if (v31 == 255)
    {
      v14[11] = *v30;
      *((_BYTE *)v14 + 96) = *((_BYTE *)v15 + 96);
    }
    else
    {
      v32 = *v30;
      sub_3D47C(*v30, *((_BYTE *)v15 + 96));
      v14[11] = v32;
      *((_BYTE *)v14 + 96) = v31;
    }
    v33 = (id *)(v15 + 13);
    v34 = *((unsigned __int8 *)v15 + 112);
    if (v34 == 255)
    {
      v14[13] = *v33;
      *((_BYTE *)v14 + 112) = *((_BYTE *)v15 + 112);
    }
    else
    {
      v35 = *v33;
      sub_3D47C(*v33, *((_BYTE *)v15 + 112));
      v14[13] = v35;
      *((_BYTE *)v14 + 112) = v34;
    }
    v36 = (id *)(v15 + 15);
    v37 = *((unsigned __int8 *)v15 + 128);
    if (v37 == 255)
    {
      v14[15] = *v36;
      *((_BYTE *)v14 + 128) = *((_BYTE *)v15 + 128);
    }
    else
    {
      v38 = *v36;
      sub_3D47C(*v36, *((_BYTE *)v15 + 128));
      v14[15] = v38;
      *((_BYTE *)v14 + 128) = v37;
    }
    *((_BYTE *)v14 + 129) = *((_BYTE *)v15 + 129);
    v39 = v16[11];
    v40 = (char *)v14 + v39;
    v41 = (char *)v15 + v39;
    v42 = type metadata accessor for ArtworkCrop(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 16))(v40, v41, v42);
    v43 = v16[12];
    v44 = (_QWORD *)((char *)v14 + v43);
    v45 = (_QWORD *)((char *)v15 + v43);
    v46 = v45[1];
    *v44 = *v45;
    v44[1] = v46;
    *((_BYTE *)v14 + v16[13]) = *((_BYTE *)v15 + v16[13]);
    *((_BYTE *)v14 + v16[14]) = *((_BYTE *)v15 + v16[14]);
    *((_BYTE *)v14 + v16[15]) = *((_BYTE *)v15 + v16[15]);
    v47 = v16[16];
    v48 = (_QWORD *)((char *)v14 + v47);
    v49 = (_QWORD *)((char *)v15 + v47);
    v50 = v49[1];
    *v48 = *v49;
    v48[1] = v50;
    v51 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v17 + 56);
    swift_bridgeObjectRetain(v46);
    swift_bridgeObjectRetain(v50);
    v51(v14, 0, 1, v16);
  }
  v52 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  v53 = (void *)(a1 + v52);
  v54 = (const void *)(a2 + v52);
  v55 = type metadata accessor for ImpressionMetrics(0);
  v56 = *(_QWORD *)(v55 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v56 + 48))(v54, 1, v55))
  {
    v57 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
    memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v56 + 16))(v53, v54, v55);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v56 + 56))(v53, 0, 1, v55);
  }
  return a1;
}

_QWORD *assignWithCopy for LegacyActionLink(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int *v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, int *);
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 *v27;
  __int128 *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 v34;
  __int128 v35;
  id *v36;
  int v37;
  id v38;
  id v39;
  id *v40;
  int v41;
  id v42;
  id v43;
  id *v44;
  int v45;
  id v46;
  id v47;
  id *v48;
  int v49;
  id v50;
  id v51;
  id *v52;
  int v53;
  id v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  char *v66;
  uint64_t v67;
  void (*v68)(uint64_t, _QWORD, uint64_t, int *);
  uint64_t v69;
  uint64_t v70;
  char v71;
  __int128 v72;
  id *v73;
  id *v74;
  int v75;
  id v76;
  void *v77;
  char v78;
  id v79;
  char v80;
  id v81;
  id *v82;
  id *v83;
  int v84;
  id v85;
  void *v86;
  char v87;
  id v88;
  char v89;
  id v90;
  id *v91;
  id *v92;
  int v93;
  id v94;
  void *v95;
  char v96;
  id v97;
  char v98;
  id v99;
  id *v100;
  id *v101;
  int v102;
  id v103;
  void *v104;
  char v105;
  id v106;
  char v107;
  id v108;
  id *v109;
  id *v110;
  int v111;
  id v112;
  void *v113;
  char v114;
  id v115;
  char v116;
  id v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t (*v137)(char *, uint64_t, uint64_t);
  int v138;
  int v139;
  uint64_t v140;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  __swift_assign_boxed_opaque_existential_1(a1 + 2, a2 + 2);
  a1[7] = a2[7];
  v8 = a2[8];
  v9 = a1[8];
  a1[8] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[9] = a2[9];
  v10 = a2[10];
  v11 = a1[10];
  a1[10] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = a3[8];
  v13 = (uint64_t)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = (int *)type metadata accessor for ArtworkModel(0);
  v16 = *((_QWORD *)v15 - 1);
  v17 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17((uint64_t)v14, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      *(_QWORD *)v13 = *(_QWORD *)v14;
      v20 = *((_QWORD *)v14 + 1);
      *(_QWORD *)(v13 + 8) = v20;
      v21 = v14[32];
      swift_bridgeObjectRetain(v20);
      if (v21 == 255)
      {
        v35 = *((_OWORD *)v14 + 1);
        *(_BYTE *)(v13 + 32) = v14[32];
        *(_OWORD *)(v13 + 16) = v35;
      }
      else
      {
        v22 = *((_QWORD *)v14 + 2);
        v23 = *((_QWORD *)v14 + 3);
        sub_3D464(v22, v23, v21);
        *(_QWORD *)(v13 + 16) = v22;
        *(_QWORD *)(v13 + 24) = v23;
        *(_BYTE *)(v13 + 32) = v21;
      }
      *(_QWORD *)(v13 + 40) = *((_QWORD *)v14 + 5);
      *(_QWORD *)(v13 + 48) = *((_QWORD *)v14 + 6);
      v36 = (id *)(v14 + 56);
      v37 = v14[64];
      if (v37 == 255)
      {
        v39 = *v36;
        *(_BYTE *)(v13 + 64) = v14[64];
        *(_QWORD *)(v13 + 56) = v39;
      }
      else
      {
        v38 = *v36;
        sub_3D47C(*v36, v14[64]);
        *(_QWORD *)(v13 + 56) = v38;
        *(_BYTE *)(v13 + 64) = v37;
      }
      v40 = (id *)(v14 + 72);
      v41 = v14[80];
      if (v41 == 255)
      {
        v43 = *v40;
        *(_BYTE *)(v13 + 80) = v14[80];
        *(_QWORD *)(v13 + 72) = v43;
      }
      else
      {
        v42 = *v40;
        sub_3D47C(*v40, v14[80]);
        *(_QWORD *)(v13 + 72) = v42;
        *(_BYTE *)(v13 + 80) = v41;
      }
      v44 = (id *)(v14 + 88);
      v45 = v14[96];
      if (v45 == 255)
      {
        v47 = *v44;
        *(_BYTE *)(v13 + 96) = v14[96];
        *(_QWORD *)(v13 + 88) = v47;
      }
      else
      {
        v46 = *v44;
        sub_3D47C(*v44, v14[96]);
        *(_QWORD *)(v13 + 88) = v46;
        *(_BYTE *)(v13 + 96) = v45;
      }
      v48 = (id *)(v14 + 104);
      v49 = v14[112];
      if (v49 == 255)
      {
        v51 = *v48;
        *(_BYTE *)(v13 + 112) = v14[112];
        *(_QWORD *)(v13 + 104) = v51;
      }
      else
      {
        v50 = *v48;
        sub_3D47C(*v48, v14[112]);
        *(_QWORD *)(v13 + 104) = v50;
        *(_BYTE *)(v13 + 112) = v49;
      }
      v52 = (id *)(v14 + 120);
      v53 = v14[128];
      if (v53 == 255)
      {
        v55 = *v52;
        *(_BYTE *)(v13 + 128) = v14[128];
        *(_QWORD *)(v13 + 120) = v55;
      }
      else
      {
        v54 = *v52;
        sub_3D47C(*v52, v14[128]);
        *(_QWORD *)(v13 + 120) = v54;
        *(_BYTE *)(v13 + 128) = v53;
      }
      *(_BYTE *)(v13 + 129) = v14[129];
      v56 = v15[11];
      v57 = v13 + v56;
      v58 = &v14[v56];
      v59 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v59 - 8) + 16))(v57, v58, v59);
      v60 = v15[12];
      v61 = (_QWORD *)(v13 + v60);
      v62 = &v14[v60];
      *v61 = *(_QWORD *)v62;
      v63 = *((_QWORD *)v62 + 1);
      v61[1] = v63;
      *(_BYTE *)(v13 + v15[13]) = v14[v15[13]];
      *(_BYTE *)(v13 + v15[14]) = v14[v15[14]];
      *(_BYTE *)(v13 + v15[15]) = v14[v15[15]];
      v64 = v15[16];
      v65 = (_QWORD *)(v13 + v64);
      v66 = &v14[v64];
      *v65 = *(_QWORD *)v66;
      v67 = *((_QWORD *)v66 + 1);
      v65[1] = v67;
      v68 = *(void (**)(uint64_t, _QWORD, uint64_t, int *))(v16 + 56);
      swift_bridgeObjectRetain(v63);
      swift_bridgeObjectRetain(v67);
      v68(v13, 0, 1, v15);
      goto LABEL_68;
    }
LABEL_7:
    v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
    memcpy((void *)v13, v14, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    goto LABEL_68;
  }
  if (v19)
  {
    sub_3E4A4(v13);
    goto LABEL_7;
  }
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v25 = *((_QWORD *)v14 + 1);
  v26 = *(_QWORD *)(v13 + 8);
  *(_QWORD *)(v13 + 8) = v25;
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRelease(v26);
  v27 = (__int128 *)(v13 + 16);
  v28 = (__int128 *)(v14 + 16);
  v29 = v14[32];
  if (*(unsigned __int8 *)(v13 + 32) == 255)
  {
    if (v29 == 255)
    {
      v72 = *v28;
      *(_BYTE *)(v13 + 32) = v14[32];
      *v27 = v72;
    }
    else
    {
      v69 = *((_QWORD *)v14 + 2);
      v70 = *((_QWORD *)v14 + 3);
      sub_3D464(v69, v70, v14[32]);
      *(_QWORD *)(v13 + 16) = v69;
      *(_QWORD *)(v13 + 24) = v70;
      *(_BYTE *)(v13 + 32) = v29;
    }
  }
  else if (v29 == 255)
  {
    sub_3E43C(v13 + 16);
    v71 = v14[32];
    *v27 = *v28;
    *(_BYTE *)(v13 + 32) = v71;
  }
  else
  {
    v30 = *((_QWORD *)v14 + 2);
    v31 = *((_QWORD *)v14 + 3);
    sub_3D464(v30, v31, v14[32]);
    v32 = *(_QWORD *)(v13 + 16);
    v33 = *(_QWORD *)(v13 + 24);
    *(_QWORD *)(v13 + 16) = v30;
    *(_QWORD *)(v13 + 24) = v31;
    v34 = *(_BYTE *)(v13 + 32);
    *(_BYTE *)(v13 + 32) = v29;
    sub_3B5BC(v32, v33, v34);
  }
  *(_QWORD *)(v13 + 40) = *((_QWORD *)v14 + 5);
  *(_QWORD *)(v13 + 48) = *((_QWORD *)v14 + 6);
  v73 = (id *)(v13 + 56);
  v74 = (id *)(v14 + 56);
  v75 = v14[64];
  if (*(unsigned __int8 *)(v13 + 64) == 255)
  {
    if (v75 == 255)
    {
      v81 = *v74;
      *(_BYTE *)(v13 + 64) = v14[64];
      *v73 = v81;
    }
    else
    {
      v79 = *v74;
      sub_3D47C(*v74, v14[64]);
      *(_QWORD *)(v13 + 56) = v79;
      *(_BYTE *)(v13 + 64) = v75;
    }
  }
  else if (v75 == 255)
  {
    sub_3E470(v13 + 56);
    v80 = v14[64];
    *v73 = *v74;
    *(_BYTE *)(v13 + 64) = v80;
  }
  else
  {
    v76 = *v74;
    sub_3D47C(*v74, v14[64]);
    v77 = *(void **)(v13 + 56);
    *(_QWORD *)(v13 + 56) = v76;
    v78 = *(_BYTE *)(v13 + 64);
    *(_BYTE *)(v13 + 64) = v75;
    sub_3D624(v77, v78);
  }
  v82 = (id *)(v13 + 72);
  v83 = (id *)(v14 + 72);
  v84 = v14[80];
  if (*(unsigned __int8 *)(v13 + 80) == 255)
  {
    if (v84 == 255)
    {
      v90 = *v83;
      *(_BYTE *)(v13 + 80) = v14[80];
      *v82 = v90;
    }
    else
    {
      v88 = *v83;
      sub_3D47C(*v83, v14[80]);
      *(_QWORD *)(v13 + 72) = v88;
      *(_BYTE *)(v13 + 80) = v84;
    }
  }
  else if (v84 == 255)
  {
    sub_3E470(v13 + 72);
    v89 = v14[80];
    *v82 = *v83;
    *(_BYTE *)(v13 + 80) = v89;
  }
  else
  {
    v85 = *v83;
    sub_3D47C(*v83, v14[80]);
    v86 = *(void **)(v13 + 72);
    *(_QWORD *)(v13 + 72) = v85;
    v87 = *(_BYTE *)(v13 + 80);
    *(_BYTE *)(v13 + 80) = v84;
    sub_3D624(v86, v87);
  }
  v91 = (id *)(v13 + 88);
  v92 = (id *)(v14 + 88);
  v93 = v14[96];
  if (*(unsigned __int8 *)(v13 + 96) == 255)
  {
    if (v93 == 255)
    {
      v99 = *v92;
      *(_BYTE *)(v13 + 96) = v14[96];
      *v91 = v99;
    }
    else
    {
      v97 = *v92;
      sub_3D47C(*v92, v14[96]);
      *(_QWORD *)(v13 + 88) = v97;
      *(_BYTE *)(v13 + 96) = v93;
    }
  }
  else if (v93 == 255)
  {
    sub_3E470(v13 + 88);
    v98 = v14[96];
    *v91 = *v92;
    *(_BYTE *)(v13 + 96) = v98;
  }
  else
  {
    v94 = *v92;
    sub_3D47C(*v92, v14[96]);
    v95 = *(void **)(v13 + 88);
    *(_QWORD *)(v13 + 88) = v94;
    v96 = *(_BYTE *)(v13 + 96);
    *(_BYTE *)(v13 + 96) = v93;
    sub_3D624(v95, v96);
  }
  v100 = (id *)(v13 + 104);
  v101 = (id *)(v14 + 104);
  v102 = v14[112];
  if (*(unsigned __int8 *)(v13 + 112) == 255)
  {
    if (v102 == 255)
    {
      v108 = *v101;
      *(_BYTE *)(v13 + 112) = v14[112];
      *v100 = v108;
    }
    else
    {
      v106 = *v101;
      sub_3D47C(*v101, v14[112]);
      *(_QWORD *)(v13 + 104) = v106;
      *(_BYTE *)(v13 + 112) = v102;
    }
  }
  else if (v102 == 255)
  {
    sub_3E470(v13 + 104);
    v107 = v14[112];
    *v100 = *v101;
    *(_BYTE *)(v13 + 112) = v107;
  }
  else
  {
    v103 = *v101;
    sub_3D47C(*v101, v14[112]);
    v104 = *(void **)(v13 + 104);
    *(_QWORD *)(v13 + 104) = v103;
    v105 = *(_BYTE *)(v13 + 112);
    *(_BYTE *)(v13 + 112) = v102;
    sub_3D624(v104, v105);
  }
  v109 = (id *)(v13 + 120);
  v110 = (id *)(v14 + 120);
  v111 = v14[128];
  if (*(unsigned __int8 *)(v13 + 128) == 255)
  {
    if (v111 == 255)
    {
      v117 = *v110;
      *(_BYTE *)(v13 + 128) = v14[128];
      *v109 = v117;
    }
    else
    {
      v115 = *v110;
      sub_3D47C(*v110, v14[128]);
      *(_QWORD *)(v13 + 120) = v115;
      *(_BYTE *)(v13 + 128) = v111;
    }
  }
  else if (v111 == 255)
  {
    sub_3E470(v13 + 120);
    v116 = v14[128];
    *v109 = *v110;
    *(_BYTE *)(v13 + 128) = v116;
  }
  else
  {
    v112 = *v110;
    sub_3D47C(*v110, v14[128]);
    v113 = *(void **)(v13 + 120);
    *(_QWORD *)(v13 + 120) = v112;
    v114 = *(_BYTE *)(v13 + 128);
    *(_BYTE *)(v13 + 128) = v111;
    sub_3D624(v113, v114);
  }
  *(_BYTE *)(v13 + 129) = v14[129];
  v118 = v15[11];
  v119 = v13 + v118;
  v120 = &v14[v118];
  v121 = type metadata accessor for ArtworkCrop(0);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v121 - 8) + 24))(v119, v120, v121);
  v122 = v15[12];
  v123 = (_QWORD *)(v13 + v122);
  v124 = &v14[v122];
  *v123 = *(_QWORD *)v124;
  v125 = *((_QWORD *)v124 + 1);
  v126 = v123[1];
  v123[1] = v125;
  swift_bridgeObjectRetain(v125);
  swift_bridgeObjectRelease(v126);
  *(_BYTE *)(v13 + v15[13]) = v14[v15[13]];
  *(_BYTE *)(v13 + v15[14]) = v14[v15[14]];
  *(_BYTE *)(v13 + v15[15]) = v14[v15[15]];
  v127 = v15[16];
  v128 = (_QWORD *)(v13 + v127);
  v129 = &v14[v127];
  *v128 = *(_QWORD *)v129;
  v130 = *((_QWORD *)v129 + 1);
  v131 = v128[1];
  v128[1] = v130;
  swift_bridgeObjectRetain(v130);
  swift_bridgeObjectRelease(v131);
LABEL_68:
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  v132 = a3[10];
  v133 = (char *)a1 + v132;
  v134 = (char *)a2 + v132;
  v135 = type metadata accessor for ImpressionMetrics(0);
  v136 = *(_QWORD *)(v135 - 8);
  v137 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v136 + 48);
  v138 = v137(v133, 1, v135);
  v139 = v137(v134, 1, v135);
  if (!v138)
  {
    if (!v139)
    {
      (*(void (**)(char *, char *, uint64_t))(v136 + 24))(v133, v134, v135);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v136 + 8))(v133, v135);
    goto LABEL_73;
  }
  if (v139)
  {
LABEL_73:
    v140 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
    memcpy(v133, v134, *(_QWORD *)(*(_QWORD *)(v140 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v136 + 16))(v133, v134, v135);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v136 + 56))(v133, 0, 1, v135);
  return a1;
}

_QWORD *__swift_assign_boxed_opaque_existential_1(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v11 = *result;
        v12 = *a2;
        swift_retain(*a2);
        result = (_QWORD *)swift_release(v11);
        *v3 = v12;
      }
      else
      {
        return (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD *, _QWORD))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        v10 = *result;
        if ((v8 & 0x20000) != 0)
        {
          v14 = *a2;
          *v3 = *a2;
          swift_retain(v14);
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (_QWORD *)swift_release(v10);
      }
      else
      {
        (*(void (**)(_BYTE *, _QWORD *, uint64_t))(v6 + 32))(v15, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          v13 = *a2;
          *v3 = *a2;
          swift_retain(v13);
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (_QWORD *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v15, v4);
      }
    }
  }
  return result;
}

uint64_t sub_3E43C(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for LibraryEntity - 1) + 8))();
  return a1;
}

uint64_t sub_3E470(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for Color - 1) + 8))();
  return a1;
}

uint64_t sub_3E4A4(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ArtworkModel(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t initializeWithTake for LegacyActionLink(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v7 = a3[8];
  v8 = (_OWORD *)(a1 + v7);
  v9 = (_OWORD *)(a2 + v7);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  v10 = (int *)type metadata accessor for ArtworkModel(0);
  v11 = *((_QWORD *)v10 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v11 + 48))(v9, 1, v10))
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v13 = v9[1];
    *v8 = *v9;
    v8[1] = v13;
    *((_BYTE *)v8 + 32) = *((_BYTE *)v9 + 32);
    *(_OWORD *)((char *)v8 + 40) = *(_OWORD *)((char *)v9 + 40);
    *((_QWORD *)v8 + 7) = *((_QWORD *)v9 + 7);
    *((_BYTE *)v8 + 64) = *((_BYTE *)v9 + 64);
    *(_OWORD *)((char *)v8 + 113) = *(_OWORD *)((char *)v9 + 113);
    *(_OWORD *)((char *)v8 + 104) = *(_OWORD *)((char *)v9 + 104);
    *(_OWORD *)((char *)v8 + 88) = *(_OWORD *)((char *)v9 + 88);
    *(_OWORD *)((char *)v8 + 72) = *(_OWORD *)((char *)v9 + 72);
    *((_BYTE *)v8 + 129) = *((_BYTE *)v9 + 129);
    v14 = v10[11];
    v15 = (char *)v8 + v14;
    v16 = (char *)v9 + v14;
    v17 = type metadata accessor for ArtworkCrop(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v15, v16, v17);
    *(_OWORD *)((char *)v8 + v10[12]) = *(_OWORD *)((char *)v9 + v10[12]);
    *((_BYTE *)v8 + v10[13]) = *((_BYTE *)v9 + v10[13]);
    *((_BYTE *)v8 + v10[14]) = *((_BYTE *)v9 + v10[14]);
    *((_BYTE *)v8 + v10[15]) = *((_BYTE *)v9 + v10[15]);
    *(_OWORD *)((char *)v8 + v10[16]) = *(_OWORD *)((char *)v9 + v10[16]);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v11 + 56))(v8, 0, 1, v10);
  }
  v18 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  v19 = (void *)(a1 + v18);
  v20 = (const void *)(a2 + v18);
  v21 = type metadata accessor for ImpressionMetrics(0);
  v22 = *(_QWORD *)(v21 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
  {
    v23 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v22 + 32))(v19, v20, v21);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  }
  return a1;
}

uint64_t assignWithTake for LegacyActionLink(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, int *);
  int v18;
  int v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(void *, uint64_t, uint64_t);
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  _OWORD *v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  int v44;
  int v45;
  void *v46;
  _QWORD *v47;
  int v48;
  int v49;
  void *v50;
  _QWORD *v51;
  int v52;
  int v53;
  void *v54;
  _QWORD *v55;
  int v56;
  int v57;
  void *v58;
  _QWORD *v59;
  int v60;
  int v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  __swift_destroy_boxed_opaque_existential_1((_QWORD *)(a1 + 16));
  v8 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v8;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 80);
  v11 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v10;
  swift_bridgeObjectRelease(v11);
  v12 = a3[8];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = (int *)type metadata accessor for ArtworkModel(0);
  v16 = *((_QWORD *)v15 - 1);
  v17 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      v20 = *(_OWORD *)(v14 + 16);
      *(_OWORD *)v13 = *(_OWORD *)v14;
      *(_OWORD *)(v13 + 16) = v20;
      *(_BYTE *)(v13 + 32) = *(_BYTE *)(v14 + 32);
      *(_OWORD *)(v13 + 40) = *(_OWORD *)(v14 + 40);
      *(_QWORD *)(v13 + 56) = *(_QWORD *)(v14 + 56);
      *(_BYTE *)(v13 + 64) = *(_BYTE *)(v14 + 64);
      *(_OWORD *)(v13 + 113) = *(_OWORD *)(v14 + 113);
      *(_OWORD *)(v13 + 104) = *(_OWORD *)(v14 + 104);
      *(_OWORD *)(v13 + 88) = *(_OWORD *)(v14 + 88);
      *(_OWORD *)(v13 + 72) = *(_OWORD *)(v14 + 72);
      *(_BYTE *)(v13 + 129) = *(_BYTE *)(v14 + 129);
      v21 = v15[11];
      v22 = v13 + v21;
      v23 = v14 + v21;
      v24 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v22, v23, v24);
      *(_OWORD *)(v13 + v15[12]) = *(_OWORD *)(v14 + v15[12]);
      *(_BYTE *)(v13 + v15[13]) = *(_BYTE *)(v14 + v15[13]);
      *(_BYTE *)(v13 + v15[14]) = *(_BYTE *)(v14 + v15[14]);
      *(_BYTE *)(v13 + v15[15]) = *(_BYTE *)(v14 + v15[15]);
      *(_OWORD *)(v13 + v15[16]) = *(_OWORD *)(v14 + v15[16]);
      (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v16 + 56))(v13, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v19)
  {
    sub_3E4A4(v13);
LABEL_6:
    v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
    memcpy((void *)v13, (const void *)v14, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    goto LABEL_7;
  }
  v36 = *(_QWORD *)(v14 + 8);
  v37 = *(_QWORD *)(v13 + 8);
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *(_QWORD *)(v13 + 8) = v36;
  swift_bridgeObjectRelease(v37);
  v38 = (_OWORD *)(v14 + 16);
  v39 = *(unsigned __int8 *)(v13 + 32);
  if (v39 != 255)
  {
    v40 = *(unsigned __int8 *)(v14 + 32);
    if (v40 != 255)
    {
      v41 = *(_QWORD *)(v13 + 16);
      v42 = *(_QWORD *)(v13 + 24);
      *(_OWORD *)(v13 + 16) = *v38;
      *(_BYTE *)(v13 + 32) = v40;
      sub_3B5BC(v41, v42, v39);
      goto LABEL_20;
    }
    sub_3E43C(v13 + 16);
  }
  *(_OWORD *)(v13 + 16) = *v38;
  *(_BYTE *)(v13 + 32) = *(_BYTE *)(v14 + 32);
LABEL_20:
  *(_OWORD *)(v13 + 40) = *(_OWORD *)(v14 + 40);
  v43 = (_QWORD *)(v14 + 56);
  v44 = *(unsigned __int8 *)(v13 + 64);
  if (v44 != 255)
  {
    v45 = *(unsigned __int8 *)(v14 + 64);
    if (v45 != 255)
    {
      v46 = *(void **)(v13 + 56);
      *(_QWORD *)(v13 + 56) = *v43;
      *(_BYTE *)(v13 + 64) = v45;
      sub_3D624(v46, v44);
      goto LABEL_25;
    }
    sub_3E470(v13 + 56);
  }
  *(_QWORD *)(v13 + 56) = *v43;
  *(_BYTE *)(v13 + 64) = *(_BYTE *)(v14 + 64);
LABEL_25:
  v47 = (_QWORD *)(v14 + 72);
  v48 = *(unsigned __int8 *)(v13 + 80);
  if (v48 != 255)
  {
    v49 = *(unsigned __int8 *)(v14 + 80);
    if (v49 != 255)
    {
      v50 = *(void **)(v13 + 72);
      *(_QWORD *)(v13 + 72) = *v47;
      *(_BYTE *)(v13 + 80) = v49;
      sub_3D624(v50, v48);
      goto LABEL_30;
    }
    sub_3E470(v13 + 72);
  }
  *(_QWORD *)(v13 + 72) = *v47;
  *(_BYTE *)(v13 + 80) = *(_BYTE *)(v14 + 80);
LABEL_30:
  v51 = (_QWORD *)(v14 + 88);
  v52 = *(unsigned __int8 *)(v13 + 96);
  if (v52 != 255)
  {
    v53 = *(unsigned __int8 *)(v14 + 96);
    if (v53 != 255)
    {
      v54 = *(void **)(v13 + 88);
      *(_QWORD *)(v13 + 88) = *v51;
      *(_BYTE *)(v13 + 96) = v53;
      sub_3D624(v54, v52);
      goto LABEL_35;
    }
    sub_3E470(v13 + 88);
  }
  *(_QWORD *)(v13 + 88) = *v51;
  *(_BYTE *)(v13 + 96) = *(_BYTE *)(v14 + 96);
LABEL_35:
  v55 = (_QWORD *)(v14 + 104);
  v56 = *(unsigned __int8 *)(v13 + 112);
  if (v56 != 255)
  {
    v57 = *(unsigned __int8 *)(v14 + 112);
    if (v57 != 255)
    {
      v58 = *(void **)(v13 + 104);
      *(_QWORD *)(v13 + 104) = *v55;
      *(_BYTE *)(v13 + 112) = v57;
      sub_3D624(v58, v56);
      goto LABEL_40;
    }
    sub_3E470(v13 + 104);
  }
  *(_QWORD *)(v13 + 104) = *v55;
  *(_BYTE *)(v13 + 112) = *(_BYTE *)(v14 + 112);
LABEL_40:
  v59 = (_QWORD *)(v14 + 120);
  v60 = *(unsigned __int8 *)(v13 + 128);
  if (v60 == 255)
  {
LABEL_44:
    *(_QWORD *)(v13 + 120) = *v59;
    *(_BYTE *)(v13 + 128) = *(_BYTE *)(v14 + 128);
    goto LABEL_45;
  }
  v61 = *(unsigned __int8 *)(v14 + 128);
  if (v61 == 255)
  {
    sub_3E470(v13 + 120);
    goto LABEL_44;
  }
  v62 = *(void **)(v13 + 120);
  *(_QWORD *)(v13 + 120) = *v59;
  *(_BYTE *)(v13 + 128) = v61;
  sub_3D624(v62, v60);
LABEL_45:
  *(_BYTE *)(v13 + 129) = *(_BYTE *)(v14 + 129);
  v63 = v15[11];
  v64 = v13 + v63;
  v65 = v14 + v63;
  v66 = type metadata accessor for ArtworkCrop(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 40))(v64, v65, v66);
  v67 = v15[12];
  v68 = (_QWORD *)(v13 + v67);
  v69 = (uint64_t *)(v14 + v67);
  v71 = *v69;
  v70 = v69[1];
  v72 = v68[1];
  *v68 = v71;
  v68[1] = v70;
  swift_bridgeObjectRelease(v72);
  *(_BYTE *)(v13 + v15[13]) = *(_BYTE *)(v14 + v15[13]);
  *(_BYTE *)(v13 + v15[14]) = *(_BYTE *)(v14 + v15[14]);
  *(_BYTE *)(v13 + v15[15]) = *(_BYTE *)(v14 + v15[15]);
  v73 = v15[16];
  v74 = (_QWORD *)(v13 + v73);
  v75 = (uint64_t *)(v14 + v73);
  v77 = *v75;
  v76 = v75[1];
  v78 = v74[1];
  *v74 = v77;
  v74[1] = v76;
  swift_bridgeObjectRelease(v78);
LABEL_7:
  v26 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  v27 = (void *)(a1 + v26);
  v28 = (void *)(a2 + v26);
  v29 = type metadata accessor for ImpressionMetrics(0);
  v30 = *(_QWORD *)(v29 - 8);
  v31 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v30 + 48);
  v32 = v31(v27, 1, v29);
  v33 = v31(v28, 1, v29);
  if (!v32)
  {
    if (!v33)
    {
      (*(void (**)(void *, void *, uint64_t))(v30 + 40))(v27, v28, v29);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v30 + 8))(v27, v29);
    goto LABEL_12;
  }
  if (v33)
  {
LABEL_12:
    v34 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v30 + 32))(v27, v28, v29);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
  return a1;
}

uint64_t getEnumTagSinglePayload for LegacyActionLink(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_3EC48);
}

uint64_t sub_3EC48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 32);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 40);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for LegacyActionLink(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_3ECFC);
}

uint64_t sub_3ECFC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 32);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 40);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void sub_3EDA0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[7];

  v6[0] = &unk_2ECF38;
  v6[1] = &unk_2ECF50;
  v6[2] = &unk_2ECF68;
  v6[3] = &unk_2ECF68;
  sub_3EE70(319, (unint64_t *)&qword_3B28A0, (uint64_t (*)(uint64_t))&type metadata accessor for ArtworkModel);
  if (v3 <= 0x3F)
  {
    v6[4] = *(_QWORD *)(v2 - 8) + 64;
    v6[5] = (char *)&value witness table for Builtin.Int8 + 64;
    sub_3EE70(319, (unint64_t *)&qword_3B2250, (uint64_t (*)(uint64_t))&type metadata accessor for ImpressionMetrics);
    if (v5 <= 0x3F)
    {
      v6[6] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 7, v6, a1 + 16);
    }
  }
}

void sub_3EE70(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v5 = a3(255);
    v6 = type metadata accessor for Optional(a1, v5);
    if (!v7)
      atomic_store(v6, a2);
  }
}

uint64_t Label.shelfUniqueId.getter(Swift::String a1, char a2)
{
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v4;
  void *v5;
  Swift::String v6;
  uint64_t v8;

  object = a1._object;
  countAndFlagsBits = a1._countAndFlagsBits;
  if ((a2 & 1) != 0)
  {
    v8 = 0x3A6E6F69746361;
    v4 = *(_QWORD *)(a1._countAndFlagsBits + 16);
    v5 = *(void **)(a1._countAndFlagsBits + 24);
    sub_3EF80(a1._countAndFlagsBits, (uint64_t)a1._object, 1);
    swift_bridgeObjectRetain(v5);
    v6._countAndFlagsBits = v4;
    v6._object = v5;
    String.append(_:)(v6);
    swift_bridgeObjectRelease(v5);
    sub_3EF90(countAndFlagsBits, (uint64_t)object, 1);
  }
  else
  {
    v8 = 0x3A656C746974;
    String.append(_:)(a1);
  }
  return v8;
}

uint64_t sub_3EF80(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_retain(a1);
  else
    return swift_bridgeObjectRetain(a2);
}

uint64_t sub_3EF90(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_release(a1);
  else
    return swift_bridgeObjectRelease(a2);
}

uint64_t AMSDialogRequest.impressionMetrics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = type metadata accessor for ImpressionMetrics(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t Label.init(deserializing:using:)(char *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  result = sub_3F1E4(a1, a2);
  if (v2)
    return v4;
  return result;
}

uint64_t Label.action.getter(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_retain(a1);
  else
    return 0;
}

uint64_t Label.clickAction.getter@<X0>(uint64_t result@<X0>, char a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t v4;

  if ((a2 & 1) != 0)
  {
    v4 = result;
    *(_QWORD *)(a3 + 24) = type metadata accessor for Action(0);
    *(_QWORD *)(a3 + 32) = sub_F1C0((unint64_t *)&qword_3B28E8, (void (*)(uint64_t))type metadata accessor for Action, (uint64_t)&protocol conformance descriptor for Action);
    *(_QWORD *)a3 = v4;
    return swift_retain(v4);
  }
  else
  {
    *(_QWORD *)(a3 + 32) = 0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return result;
}

uint64_t Label.clickSender.getter@<X0>(uint64_t result@<X0>, char a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t v4;

  if ((a2 & 1) != 0)
  {
    v4 = result;
    *(_QWORD *)(a3 + 24) = type metadata accessor for Action(0);
    *(_QWORD *)a3 = v4;
    return swift_retain(v4);
  }
  else
  {
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return result;
}

uint64_t sub_3F0DC@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v6;
  char v7;

  result = sub_3F1E4(a1, a2);
  if (!v3)
  {
    *(_QWORD *)a3 = result;
    *(_QWORD *)(a3 + 8) = v6;
    *(_BYTE *)(a3 + 16) = v7 & 1;
  }
  return result;
}

uint64_t sub_3F10C()
{
  uint64_t v0;

  return Label.shelfUniqueId.getter(*(Swift::String *)v0, *(_BYTE *)(v0 + 16));
}

void sub_3F118(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;

  if (*((_BYTE *)v1 + 16) == 1)
  {
    v3 = *v1;
    *(_QWORD *)(a1 + 24) = type metadata accessor for Action(0);
    *(_QWORD *)(a1 + 32) = sub_F1C0((unint64_t *)&qword_3B28E8, (void (*)(uint64_t))type metadata accessor for Action, (uint64_t)&protocol conformance descriptor for Action);
    swift_retain(v3);
  }
  else
  {
    v3 = 0;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
  }
  *(_QWORD *)a1 = v3;
}

void sub_3F190(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;

  if (*((_BYTE *)v1 + 16) == 1)
  {
    v3 = *v1;
    a1[3] = type metadata accessor for Action(0);
    swift_retain(v3);
  }
  else
  {
    v3 = 0;
    a1[1] = 0;
    a1[2] = 0;
    a1[3] = 0;
  }
  *a1 = v3;
}

uint64_t sub_3F1E4(char *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t Instance15byDeserializing5usingACSg9JetEngine10JSONObjectV_AH11JSONContextVtFZ_0;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t);
  uint64_t v16;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v4 = type metadata accessor for JSONObject(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)v22 - v9;
  v11 = JSONObject.subscript.getter(1954047348, 0xE400000000000000);
  Instance15byDeserializing5usingACSg9JetEngine10JSONObjectV_AH11JSONContextVtFZ_0 = JSONObject.string.getter(v11);
  v14 = v13;
  v15 = *(void (**)(char *, uint64_t))(v5 + 8);
  v15(v10, v4);
  if (v14
    || (JSONObject.subscript.getter(0x6E6F69746361, 0xE600000000000000),
        Instance15byDeserializing5usingACSg9JetEngine10JSONObjectV_AH11JSONContextVtFZ_0 = _s8ShelfKit6ActionC17tryToMakeInstance15byDeserializing5usingACSg9JetEngine10JSONObjectV_AH11JSONContextVtFZ_0((uint64_t)v8, a2), v15(v8, v4), Instance15byDeserializing5usingACSg9JetEngine10JSONObjectV_AH11JSONContextVtFZ_0))
  {
    v16 = type metadata accessor for JSONContext(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(a2, v16);
    v15(a1, v4);
  }
  else
  {
    Instance15byDeserializing5usingACSg9JetEngine10JSONObjectV_AH11JSONContextVtFZ_0 = type metadata accessor for JSONError(0);
    v18 = sub_F1C0((unint64_t *)&qword_3B0CB0, (void (*)(uint64_t))&type metadata accessor for JSONError, (uint64_t)&protocol conformance descriptor for JSONError);
    swift_allocError(Instance15byDeserializing5usingACSg9JetEngine10JSONObjectV_AH11JSONContextVtFZ_0, v18, 0, 0);
    *v19 = 1954047348;
    v19[1] = 0xE400000000000000;
    v19[2] = &type metadata for Label;
    v20 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(Instance15byDeserializing5usingACSg9JetEngine10JSONObjectV_AH11JSONContextVtFZ_0
                                                                           - 8)
                                                               + 104))(v19, enum case for JSONError.missingProperty(_:), Instance15byDeserializing5usingACSg9JetEngine10JSONObjectV_AH11JSONContextVtFZ_0);
    swift_willThrow(v20);
    v21 = type metadata accessor for JSONContext(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(a2, v21);
    v15(a1, v4);
  }
  return Instance15byDeserializing5usingACSg9JetEngine10JSONObjectV_AH11JSONContextVtFZ_0;
}

unint64_t sub_3F3E8(uint64_t a1)
{
  unint64_t result;

  result = sub_3F40C();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_3F40C()
{
  unint64_t result;

  result = qword_3B28F0;
  if (!qword_3B28F0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Label);
    atomic_store(result, (unint64_t *)&qword_3B28F0);
  }
  return result;
}

unint64_t sub_3F450(uint64_t a1)
{
  unint64_t result;

  result = sub_3F474();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_3F474()
{
  unint64_t result;

  result = qword_3B28F8;
  if (!qword_3B28F8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Label);
    atomic_store(result, (unint64_t *)&qword_3B28F8);
  }
  return result;
}

uint64_t destroy for Label(uint64_t a1)
{
  return sub_3EF90(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t _s8ShelfKit5LabelOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_3EF80(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for Label(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_3EF80(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  sub_3EF90(v6, v7, v8);
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for Label(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  sub_3EF90(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for Label(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Label(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_3F64C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_3F654(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for Label()
{
  return &type metadata for Label;
}

_QWORD *sub_3F670(_QWORD *(*a1)(uint64_t *__return_ptr, uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  _QWORD *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v4 = v3;
  v6 = *(_QWORD *)(a3 + 16);
  result = _swiftEmptyArrayStorage;
  if (v6)
  {
    v17 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v6);
    v9 = *(_QWORD *)(type metadata accessor for ModernShelf(0) - 8);
    v10 = a3 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    v11 = *(_QWORD *)(v9 + 72);
    while (1)
    {
      v12 = a1(&v16, v10);
      if (v4)
        break;
      v4 = 0;
      v13 = v16;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v12);
      v14 = v17[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v14);
      v15 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14, v13);
      specialized ContiguousArray._endMutation()(v15);
      v10 += v11;
      if (!--v6)
        return v17;
    }
    return (_QWORD *)swift_release(v17);
  }
  return result;
}

uint64_t sub_3F778(void (*a1)(_QWORD *__return_ptr, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v20;
  _QWORD v21[2];
  _QWORD *v22;

  v4 = v3;
  if ((unint64_t)a3 >> 62)
    goto LABEL_19;
  v6 = *(_QWORD *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFF8));
  while (1)
  {
    v7 = _swiftEmptyArrayStorage;
    if (!v6)
      return (uint64_t)v7;
    v22 = _swiftEmptyArrayStorage;
    result = sub_1807B0(0, v6 & ~(v6 >> 63), 0);
    if (v6 < 0)
      break;
    v9 = 0;
    v7 = v22;
    while (v6 != v9)
    {
      if ((a3 & 0xC000000000000001) != 0)
      {
        v10 = specialized _ArrayBuffer._getElementSlowPath(_:)(v9, a3);
      }
      else
      {
        v10 = *(_QWORD *)(a3 + 8 * v9 + 32);
        swift_retain(v10);
      }
      v20 = v10;
      a1(v21, &v20);
      if (v4)
      {
        swift_release(v7);
        swift_release(v10);
        return (uint64_t)v7;
      }
      v11 = v6;
      swift_release(v10);
      v13 = v21[0];
      v12 = v21[1];
      v22 = v7;
      v15 = v7[2];
      v14 = v7[3];
      if (v15 >= v14 >> 1)
      {
        sub_1807B0(v14 > 1, v15 + 1, 1);
        v7 = v22;
      }
      ++v9;
      v7[2] = v15 + 1;
      v16 = &v7[2 * v15];
      v16[4] = v13;
      v16[5] = v12;
      v6 = v11;
      v17 = v11 == v9;
      v4 = 0;
      if (v17)
        return (uint64_t)v7;
    }
    __break(1u);
LABEL_19:
    if (a3 < 0)
      v18 = a3;
    else
      v18 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v6 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease(a3);
  }
  __break(1u);
  return result;
}

_QWORD *sub_3F918(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  unint64_t v18;
  void (*v19)(uint64_t);
  uint64_t v20;
  _QWORD *v21;

  v4 = v3;
  v19 = a1;
  v20 = a2;
  v6 = type metadata accessor for TabMenu.Item(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a3 + 16);
  v11 = _swiftEmptyArrayStorage;
  if (v10)
  {
    v21 = _swiftEmptyArrayStorage;
    sub_180924(0, v10, 0);
    v11 = v21;
    v18 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    v12 = a3 + v18;
    v13 = *(_QWORD *)(v7 + 72);
    while (1)
    {
      v19(v12);
      if (v4)
        break;
      v4 = 0;
      v21 = v11;
      v15 = v11[2];
      v14 = v11[3];
      if (v15 >= v14 >> 1)
      {
        sub_180924(v14 > 1, v15 + 1, 1);
        v11 = v21;
      }
      v11[2] = v15 + 1;
      sub_3C56C((uint64_t)v9, (uint64_t)v11 + v18 + v15 * v13, type metadata accessor for TabMenu.Item);
      v12 += v13;
      if (!--v10)
        return v11;
    }
    swift_release(v11);
  }
  return v11;
}

_QWORD *sub_3FA70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int64_t v10;
  _QWORD *v11;
  char *v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD v18[2];
  uint64_t v19;
  char v20;
  _QWORD *v21;

  v4 = v3;
  v18[0] = a1;
  v18[1] = a2;
  v6 = type metadata accessor for ActionMenu.Child(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a3 + 16);
  v11 = _swiftEmptyArrayStorage;
  if (v10)
  {
    v21 = _swiftEmptyArrayStorage;
    sub_18073C(0, v10, 0);
    v11 = v21;
    v12 = (char *)(a3 + 40);
    while (1)
    {
      v13 = *((_QWORD *)v12 - 1);
      v14 = *v12;
      v19 = v13;
      v20 = v14;
      sub_43568(v13, v14);
      ((void (*)(uint64_t *))v18[0])(&v19);
      if (v4)
        break;
      v4 = 0;
      sub_4357C(v13, v14);
      v21 = v11;
      v16 = v11[2];
      v15 = v11[3];
      if (v16 >= v15 >> 1)
      {
        sub_18073C(v15 > 1, v16 + 1, 1);
        v11 = v21;
      }
      v12 += 16;
      v11[2] = v16 + 1;
      sub_3C56C((uint64_t)v9, (uint64_t)v11+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v16, type metadata accessor for ActionMenu.Child);
      if (!--v10)
        return v11;
    }
    sub_4357C(v13, v14);
    swift_release(v11);
  }
  return v11;
}

uint64_t StoreDataProvider.progressivelyLoadShelfItemsPublisher(objectGraph:shelf:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, char *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2900);
  v9 = *(_QWORD *)(v8 - 8);
  v82 = v8;
  v83 = v9;
  __chkstk_darwin(v8);
  v81 = (char *)&v73 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ModernShelf(0);
  v12 = *(_QWORD *)(v11 - 8);
  v89 = v11;
  v90 = v12;
  __chkstk_darwin(v11);
  v79 = v13;
  v80 = (uint64_t)&v73 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2908);
  v85 = *(_QWORD *)(v14 - 8);
  *(_QWORD *)&v86 = v14;
  __chkstk_darwin(v14);
  v84 = (char *)&v73 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2910);
  v87 = *(_QWORD *)(v16 - 8);
  v88 = v16;
  __chkstk_darwin(v16);
  v18 = (char *)&v73 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2918);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)&v73 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
  __chkstk_darwin(v23);
  v25 = (char *)&v73 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for URL(0);
  v27 = *(_QWORD *)(v26 - 8);
  v91 = v26;
  v92 = v27;
  __chkstk_darwin(v26);
  v29 = (char *)&v73 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = a1;
  v31 = a2;
  v32 = sub_423EC(v30, a2);
  if (v32)
    return v32;
  v74 = a3;
  v75 = v18;
  v76 = v22;
  v77 = v20;
  v78 = v19;
  sub_282CC(a2 + *(int *)(v89 + 36), (uint64_t)v25);
  v35 = v91;
  v34 = v92;
  v36 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v92 + 48))(v25, 1, v91);
  v37 = v90;
  if (v36 == 1)
  {
    sub_1459C((uint64_t)v25, &qword_3B4370);
    v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0A48);
    v39 = *(unsigned __int8 *)(v37 + 80);
    v40 = (v39 + 32) & ~v39;
    v41 = swift_allocObject(v38, v40 + *(_QWORD *)(v37 + 72), v39 | 7);
    *(_OWORD *)(v41 + 16) = xmmword_2EA0D0;
    sub_42980(v31, v41 + v40);
    v93 = v41;
    v42 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3BF7B0);
    v43 = v81;
    Just.init(_:)(&v93, v42);
    v44 = sub_32914(&qword_3B2920, &qword_3B2900, (uint64_t)&protocol conformance descriptor for Just<A>);
    v45 = v82;
    v33 = Publisher.eraseToAnyPublisher()(v82, v44);
    (*(void (**)(char *, uint64_t))(v83 + 8))(v43, v45);
  }
  else
  {
    v46 = *(void (**)(char *, char *, uint64_t))(v34 + 32);
    v73 = v29;
    v46(v29, v25, v35);
    v47 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(a4 + 192))(v29, v74, a4);
    v48 = Promise.publisher.getter(v47);
    swift_release(v47);
    v93 = v48;
    v49 = v80;
    sub_42980(v31, v80);
    v50 = *(unsigned __int8 *)(v37 + 80);
    v51 = (v50 + 16) & ~v50;
    v89 = v50 | 7;
    v52 = swift_allocObject(&unk_3797D0, v51 + v79, v50 | 7);
    sub_3C56C(v49, v52 + v51, type metadata accessor for ModernShelf);
    v53 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2928);
    v54 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3BF7B0);
    v55 = sub_32914(&qword_3B2930, &qword_3B2928, (uint64_t)&protocol conformance descriptor for Future<A, B>);
    v56 = v84;
    Publisher.tryMap<A>(_:)(sub_42F38, v52, v53, v54, v55);
    swift_release(v52);
    swift_release(v93);
    v57 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2938);
    v58 = sub_32914(&qword_3B2940, &qword_3B2908, (uint64_t)&protocol conformance descriptor for Publishers.TryMap<A, B>);
    v59 = sub_32914(&qword_3B2948, &qword_3B2938, (uint64_t)&protocol conformance descriptor for Empty<A, B>);
    v60 = v75;
    v61 = v86;
    Publisher.catch<A>(_:)(sub_403B8, 0, v86, v57, v58, v59);
    (*(void (**)(char *, uint64_t))(v85 + 8))(v56, v61);
    v62 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B08F0);
    v63 = swift_allocObject(v62, 40, 7);
    v86 = xmmword_2EA0D0;
    *(_OWORD *)(v63 + 16) = xmmword_2EA0D0;
    v64 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0A48);
    v65 = (v50 + 32) & ~v50;
    v66 = swift_allocObject(v64, *(_QWORD *)(v37 + 72) + v65, v89);
    *(_OWORD *)(v66 + 16) = v86;
    sub_42980(v31, v66 + v65);
    *(_QWORD *)(v63 + 32) = v66;
    v67 = sub_32914(&qword_3B2950, &qword_3B2910, (uint64_t)&protocol conformance descriptor for Publishers.Catch<A, B>);
    v68 = v76;
    v69 = v88;
    Publisher.prepend(_:)(v63, v88, v67);
    swift_bridgeObjectRelease(v63);
    (*(void (**)(char *, uint64_t))(v87 + 8))(v60, v69);
    v70 = sub_32914(&qword_3B2958, &qword_3B2918, (uint64_t)&protocol conformance descriptor for Publishers.Concatenate<A, B>);
    v71 = v78;
    v33 = Publisher.eraseToAnyPublisher()(v78, v70);
    (*(void (**)(char *, uint64_t))(v77 + 8))(v68, v71);
    (*(void (**)(char *, uint64_t))(v92 + 8))(v73, v35);
  }
  return v33;
}

uint64_t sub_401F0@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8660);
  __chkstk_darwin(v5);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ModernShelf(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *a1;
  Shelf.mapToModernShelf()((uint64_t)v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    sub_1459C((uint64_t)v7, &qword_3B8660);
    v13 = type metadata accessor for ShelfError(0);
    v14 = sub_43590();
    swift_allocError(v13, v14, 0, 0);
    *v15 = v12;
    swift_storeEnumTagMultiPayload(v15, v13, 2);
    return swift_willThrow(v12);
  }
  else
  {
    sub_3C56C((uint64_t)v7, (uint64_t)v11, type metadata accessor for ModernShelf);
    v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0A48);
    v18 = *(unsigned __int8 *)(v9 + 80);
    v19 = (v18 + 32) & ~v18;
    v20 = swift_allocObject(v17, v19 + *(_QWORD *)(v9 + 72), v18 | 7);
    *(_OWORD *)(v20 + 16) = xmmword_2EA0D0;
    ModernShelf.merging(shelf:)((uint64_t)v11, v20 + v19);
    if (v2)
    {
      *(_QWORD *)(v20 + 16) = 0;
      swift_release(v20);
      return sub_434E4((uint64_t)v11);
    }
    else
    {
      result = sub_434E4((uint64_t)v11);
      *a2 = v20;
    }
  }
  return result;
}

uint64_t sub_403B8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD v21[2];
  uint64_t v22;
  uint64_t v23;

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *a1;
  sub_327F8(0, (unint64_t *)&qword_3B0CF0, OS_os_log_ptr);
  static OS_os_log.shelfSystem.getter();
  swift_errorRetain(v8);
  v9 = swift_errorRetain(v8);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v21[1] = a2;
    v12 = swift_slowAlloc(12, -1);
    v21[0] = v4;
    v13 = (uint8_t *)v12;
    v14 = swift_slowAlloc(32, -1);
    v22 = v8;
    v23 = v14;
    *(_DWORD *)v13 = 136315138;
    swift_errorRetain(v8);
    v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2B08);
    v16 = String.init<A>(describing:)(&v22, v15);
    v18 = v17;
    v22 = sub_69298(v16, v17, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23);
    swift_bridgeObjectRelease(v18);
    swift_errorRelease(v8);
    swift_errorRelease(v8);
    _os_log_impl(&dword_0, v10, v11, "Error completing a shelf: %s", v13, 0xCu);
    swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);

    (*(void (**)(char *, _QWORD))(v5 + 8))(v7, v21[0]);
  }
  else
  {
    swift_errorRelease(v8);
    swift_errorRelease(v8);

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3BF7B0);
  return Empty.init(completeImmediately:)(1, v19, &type metadata for Never, &protocol witness table for Never);
}

uint64_t StoreDataProvider.progressivelyLoadShelfItemsPublisher(objectGraph:shelves:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[16];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2960);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2968);
  v25 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = a3;
  v28 = a4;
  v29 = v4;
  v30 = a1;
  v16 = sub_3F670((_QWORD *(*)(uint64_t *__return_ptr, uint64_t))sub_42F90, (uint64_t)v26, a2);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2970);
  v18 = sub_32914(&qword_3B2978, &qword_3B2970, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publishers.PFCombineLatestMany.init(_:)(v16, v17, v18);
  v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3BF7B0);
  v20 = sub_32914(&qword_3B2980, &qword_3B2960, (uint64_t)&protocol conformance descriptor for Publishers.PFCombineLatestMany<A>);
  Publisher.map<A>(_:)(sub_407D8, 0, v9, v19, v20);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v21 = sub_32914(&qword_3B2988, &qword_3B2968, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v22 = Publisher.eraseToAnyPublisher()(v13, v21);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v15, v13);
  return v22;
}

{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  _QWORD *v21;
  id v22;
  void *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8660);
  __chkstk_darwin(v9);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for ModernShelf(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v33 = (uint64_t)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v17 = (char *)&v28 - v16;
  if (!((unint64_t)a2 >> 62))
  {
    v18 = *(_QWORD *)((char *)&dword_10 + (a2 & 0xFFFFFFFFFFFFF8));
    result = swift_bridgeObjectRetain(a2);
    v31 = a1;
    if (v18)
      goto LABEL_3;
LABEL_21:
    swift_bridgeObjectRelease(a2);
    v21 = _swiftEmptyArrayStorage;
LABEL_22:
    v27 = StoreDataProvider.progressivelyLoadShelfItemsPublisher(objectGraph:shelves:)(v31, (uint64_t)v21, a3, a4);
    swift_bridgeObjectRelease(v21);
    return v27;
  }
  if (a2 < 0)
    v26 = a2;
  else
    v26 = a2 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a2);
  result = _CocoaArrayWrapper.endIndex.getter(v26);
  v18 = result;
  v31 = a1;
  if (!result)
    goto LABEL_21;
LABEL_3:
  if (v18 >= 1)
  {
    v28 = a3;
    v29 = a4;
    v30 = v4;
    v20 = 0;
    v21 = _swiftEmptyArrayStorage;
    v32 = v12;
    do
    {
      if ((a2 & 0xC000000000000001) != 0)
        v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v20, a2);
      else
        v22 = *(id *)(a2 + 8 * v20 + 32);
      v23 = v22;
      Shelf.mapToModernShelf()((uint64_t)v11);

      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
      {
        sub_1459C((uint64_t)v11, &qword_3B8660);
      }
      else
      {
        sub_3C56C((uint64_t)v11, (uint64_t)v17, type metadata accessor for ModernShelf);
        sub_3C56C((uint64_t)v17, v33, type metadata accessor for ModernShelf);
        if ((swift_isUniquelyReferenced_nonNull_native(v21) & 1) == 0)
          v21 = (_QWORD *)sub_10CD4(0, v21[2] + 1, 1, (unint64_t)v21);
        v25 = v21[2];
        v24 = v21[3];
        if (v25 >= v24 >> 1)
          v21 = (_QWORD *)sub_10CD4(v24 > 1, v25 + 1, 1, (unint64_t)v21);
        v21[2] = v25 + 1;
        sub_3C56C(v33, (uint64_t)v21+ ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80))+ *(_QWORD *)(v13 + 72) * v25, type metadata accessor for ModernShelf);
        v12 = v32;
      }
      ++v20;
    }
    while (v18 != v20);
    swift_bridgeObjectRelease(a2);
    a4 = v29;
    a3 = v28;
    goto LABEL_22;
  }
  __break(1u);
  return result;
}

uint64_t sub_407D8@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)result;
  v4 = *(_QWORD *)(*(_QWORD *)result + 16);
  if (v4)
  {
    swift_bridgeObjectRetain(v3);
    for (i = 0; i != v4; ++i)
    {
      v6 = *(_QWORD *)(v3 + 8 * i + 32);
      v7 = swift_bridgeObjectRetain(v6);
      sub_1E3E60(v7);
    }
    result = swift_bridgeObjectRelease(v3);
  }
  *a2 = _swiftEmptyArrayStorage;
  return result;
}

uint64_t sub_40B1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  return swift_task_switch(sub_40B38, 0, 0);
}

uint64_t sub_40B38()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v1 = (_QWORD *)v0[3];
  v2 = (_QWORD *)v0[4];
  v3 = v1[3];
  v4 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v3);
  v5 = v2[3];
  v6 = v2[4];
  v7 = __swift_project_boxed_opaque_existential_1(v2, v5);
  v8 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of IntentDispatcher.dispatch<A>(_:objectGraph:)[1]);
  v0[6] = v8;
  *v8 = v0;
  v8[1] = sub_40BDC;
  return dispatch thunk of IntentDispatcher.dispatch<A>(_:objectGraph:)(v0[2], v7, v0[5], v5, v6, v3, v4);
}

uint64_t sub_40BDC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *v0;
  v1 = *(_QWORD *)(v4 + 48);
  v2 = *v0;
  v4 = v2;
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_40C24@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  *a2 = v2;
  return swift_retain(v2);
}

uint64_t sub_40C30@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint8_t *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  _QWORD *v36;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2900);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *a1;
  sub_327F8(0, (unint64_t *)&qword_3B0CF0, OS_os_log_ptr);
  static OS_os_log.shelfSystem.getter();
  swift_errorRetain(v12);
  v13 = swift_errorRetain(v12);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v34 = a2;
    v16 = swift_slowAlloc(12, -1);
    v31 = v8;
    v17 = (uint8_t *)v16;
    v18 = (_QWORD *)swift_slowAlloc(32, -1);
    v30 = v9;
    v19 = v18;
    v35 = v12;
    v36 = v18;
    v32 = v5;
    v33 = v4;
    *(_DWORD *)v17 = 136315138;
    swift_errorRetain(v12);
    v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2B08);
    v21 = String.init<A>(describing:)(&v35, v20);
    v23 = v22;
    v35 = sub_69298(v21, v22, (uint64_t *)&v36);
    v5 = v32;
    v4 = v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36);
    v24 = v23;
    a2 = v34;
    swift_bridgeObjectRelease(v24);
    swift_errorRelease(v12);
    swift_errorRelease(v12);
    _os_log_impl(&dword_0, v14, v15, "Error completing a shelf: %s", v17, 0xCu);
    swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1, -1);
    swift_slowDealloc(v17, -1, -1);

    (*(void (**)(char *, uint64_t))(v30 + 8))(v11, v31);
  }
  else
  {
    swift_errorRelease(v12);
    swift_errorRelease(v12);

    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  v36 = _swiftEmptyArrayStorage;
  v25 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3BF7B0);
  Just.init(_:)(&v36, v25);
  v26 = sub_32914(&qword_3B2920, &qword_3B2900, (uint64_t)&protocol conformance descriptor for Just<A>);
  v27 = Publisher.eraseToAnyPublisher()(v4, v26);
  result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  *a2 = v27;
  return result;
}

uint64_t Publisher<>.progressivelyLoadingShelfItems(objectGraph:storeDataProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t AssociatedConformanceWitness;
  uint64_t v13;
  uint64_t WitnessTable;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;

  v30 = a2;
  v31 = a1;
  v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_3B2970);
  v28 = v6;
  v7 = type metadata accessor for Publishers.Map(0, a3);
  v32 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v27 - v8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a4, a3);
  v11 = sub_32914(&qword_3B2978, &qword_3B2970, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v29 = v11;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a4, a3, AssociatedTypeWitness, &protocol requirements base descriptor for Publisher, &associated conformance descriptor for Publisher.Publisher.Failure: Error);
  *(_QWORD *)&v33 = v6;
  *((_QWORD *)&v33 + 1) = AssociatedTypeWitness;
  v34 = v11;
  v35 = AssociatedConformanceWitness;
  v13 = type metadata accessor for Publishers.SetFailureType(255, &v33);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Publishers.Map<A, B>);
  v15 = type metadata accessor for Publishers.Map(255, v7);
  v16 = swift_getWitnessTable(&protocol conformance descriptor for Publishers.SetFailureType<A, B>);
  v17 = swift_getWitnessTable(&protocol conformance descriptor for Publishers.Map<A, B>);
  *(_QWORD *)&v33 = v13;
  *((_QWORD *)&v33 + 1) = v15;
  v34 = v16;
  v35 = v17;
  v18 = type metadata accessor for Publishers.SwitchToLatest(0, &v33);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v27 - v20;
  sub_150C8(v30, (uint64_t)&v33);
  v22 = swift_allocObject(&unk_3797F8, 64, 7);
  sub_F4D8(&v33, v22 + 16);
  v23 = v31;
  *(_QWORD *)(v22 + 56) = v31;
  swift_retain(v23);
  Publisher.map<A>(_:)(sub_43000, v22, a3, v28, a4);
  swift_release(v22);
  Publisher<>.switchToLatest()(v7, WitnessTable, v29);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v9, v7);
  v24 = swift_getWitnessTable(&protocol conformance descriptor for Publishers.SwitchToLatest<A, B>);
  v25 = Publisher.eraseToAnyPublisher()(v18, v24);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  return v25;
}

uint64_t sub_41180@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v6 = *a1;
  v7 = a2[3];
  v8 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v7);
  result = StoreDataProvider.progressivelyLoadShelfItemsPublisher(objectGraph:shelves:)(a3, v6, v7, v8);
  *a4 = result;
  return result;
}

_QWORD *ProgressivelyLoadShelvesController.__allocating_init(asPartOf:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v3 = (_QWORD *)swift_allocObject(v1, 88, 7);
  v3[7] = _swiftEmptyArrayStorage;
  v3[8] = _swiftEmptyArrayStorage;
  v3[9] = &_swiftEmptyDictionarySingleton;
  v8 = 0;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2990);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v3[10] = CurrentValueSubject.init(_:)(&v8);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BE9F0);
  v6 = type metadata accessor for BaseObjectGraph(0);
  inject<A, B>(_:from:)(v3 + 2, v5, a1, v5, v6);
  swift_release(a1);
  return v3;
}

_QWORD *ProgressivelyLoadShelvesController.init(asPartOf:)(uint64_t a1)
{
  _QWORD *v2;

  v2 = sub_43068(a1);
  swift_release(a1);
  return v2;
}

uint64_t sub_412D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2998);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(v0 + 80);
  v12[1] = v5;
  swift_retain(v5);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2990);
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3BF7B0);
  v8 = sub_32914(&qword_3B29A0, &qword_3B2990, (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
  Publisher.compactMap<A>(_:)(sub_2B2D0, 0, v6, v7, v8);
  swift_release(v5);
  v9 = sub_32914(&qword_3B29A8, &qword_3B2998, (uint64_t)&protocol conformance descriptor for Publishers.CompactMap<A, B>);
  v10 = Publisher.eraseToAnyPublisher()(v1, v9);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return v10;
}

uint64_t sub_41408()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];
  _BYTE v12[24];
  _BYTE v13[24];

  v1 = v0;
  swift_beginAccess(v0 + 7, v13, 1, 0);
  v2 = v0[7];
  if (!((unint64_t)v2 >> 62))
  {
    v3 = *(_QWORD *)((char *)&dword_10 + (v2 & 0xFFFFFFFFFFFFF8));
    result = swift_bridgeObjectRetain(v0[7]);
    if (v3)
      goto LABEL_3;
LABEL_13:
    swift_bridgeObjectRelease(v2);
    v8 = v1[7];
    v1[7] = &_swiftEmptyArrayStorage;
    swift_bridgeObjectRelease(v8);
    swift_beginAccess(v1 + 8, v12, 1, 0);
    v9 = v1[8];
    v1[8] = &_swiftEmptyArrayStorage;
    swift_bridgeObjectRelease(v9);
    swift_beginAccess(v1 + 9, v11, 1, 0);
    v10 = v1[9];
    v1[9] = &_swiftEmptyDictionarySingleton;
    return swift_bridgeObjectRelease(v10);
  }
  if (v2 < 0)
    v7 = v0[7];
  else
    v7 = v2 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v2);
  result = _CocoaArrayWrapper.endIndex.getter(v7);
  v3 = result;
  if (!result)
    goto LABEL_13;
LABEL_3:
  if (v3 >= 1)
  {
    for (i = 0; i != v3; ++i)
    {
      if ((v2 & 0xC000000000000001) != 0)
      {
        v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v2);
      }
      else
      {
        v6 = *(_QWORD *)(v2 + 8 * i + 32);
        swift_retain(v6);
      }
      AnyCancellable.cancel()();
      swift_release(v6);
    }
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

uint64_t sub_41550()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  sub_41408();
  v5 = 0;
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2990);
  swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  v2 = CurrentValueSubject.init(_:)(&v5);
  v3 = *(_QWORD *)(v0 + 80);
  *(_QWORD *)(v0 + 80) = v2;
  return swift_release(v3);
}

uint64_t sub_415B0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t *v14;
  unint64_t v15;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  void (*v36)(char *, char *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  char *v39;
  _QWORD v40[3];

  v3 = v2;
  v37 = a1;
  v38 = a2;
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = __chkstk_darwin(v4);
  v39 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v35 - v9;
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v35 - v12;
  UUID.init()(v11);
  v36 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
  v36(v10, v13, v4);
  v14 = v2 + 8;
  swift_beginAccess(v2 + 8, v40, 33, 0);
  v15 = v2[8];
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v15);
  v2[8] = v15;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v15 = sub_10CE8(0, *(_QWORD *)(v15 + 16) + 1, 1, v15);
    *v14 = v15;
  }
  v18 = *(_QWORD *)(v15 + 16);
  v17 = *(_QWORD *)(v15 + 24);
  if (v18 >= v17 >> 1)
  {
    v15 = sub_10CE8(v17 > 1, v18 + 1, 1, v15);
    *v14 = v15;
  }
  *(_QWORD *)(v15 + 16) = v18 + 1;
  v19 = *(unsigned __int8 *)(v5 + 80);
  v20 = v15 + ((v19 + 32) & ~v19) + *(_QWORD *)(v5 + 72) * v18;
  v21 = *(void (**)(uint64_t, char *, uint64_t))(v5 + 32);
  v21(v20, v10, v4);
  swift_endAccess(v40);
  v22 = v2[5];
  v23 = v3[6];
  __swift_project_boxed_opaque_existential_1(v3 + 2, v3[5]);
  v40[0] = StoreDataProvider.progressivelyLoadShelfItemsPublisher(objectGraph:shelves:)(v37, v38, v22, v23);
  v24 = swift_allocObject(&unk_379820, 24, 7);
  swift_weakInit(v24 + 16);
  v25 = v39;
  v36(v39, v13, v4);
  v26 = (v19 + 24) & ~v19;
  v27 = swift_allocObject(&unk_379848, v26 + v6, v19 | 7);
  *(_QWORD *)(v27 + 16) = v24;
  v21(v27 + v26, v25, v4);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2970);
  v29 = sub_32914(&qword_3B2978, &qword_3B2970, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v30 = Publisher<>.sink(receiveValue:)(sub_431B4, v27, v28, v29);
  swift_release(v27);
  swift_release(v40[0]);
  v31 = v3 + 7;
  swift_beginAccess(v31, v40, 33, 0);
  v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2088);
  v33 = sub_32914(&qword_3B2090, &qword_3B2088, (uint64_t)&protocol conformance descriptor for [A]);
  AnyCancellable.store<A>(in:)(v31, v32, v33);
  swift_endAccess(v40);
  swift_release(v30);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v13, v4);
}

uint64_t sub_418B0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  _BYTE v8[24];

  v4 = *a1;
  v5 = a2 + 16;
  swift_beginAccess(a2 + 16, v8, 0, 0);
  result = swift_weakLoadStrong(v5);
  if (result)
  {
    v7 = result;
    sub_41920(a3, v4);
    return swift_release(v7);
  }
  return result;
}

uint64_t sub_41920(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t);
  void (*v21)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t, uint64_t);
  uint64_t v39;
  void (*v40)(char *, uint64_t);
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  _BYTE v44[24];

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2B00);
  __chkstk_darwin(v6);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v35 - v14;
  v38 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v38((char *)&v35 - v14, a1, v9);
  v41 = (_QWORD *)(v3 + 72);
  swift_beginAccess(v3 + 72, v44, 33, 0);
  swift_bridgeObjectRetain(a2);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v3 + 72));
  v43 = *(_QWORD *)(v3 + 72);
  *(_QWORD *)(v3 + 72) = 0x8000000000000000;
  sub_1D858(a2, (uint64_t)v15, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v3 + 72) = v43;
  swift_bridgeObjectRelease();
  v40 = *(void (**)(char *, uint64_t))(v10 + 8);
  v40(v15, v9);
  swift_endAccess(v44);
  swift_beginAccess(v3 + 64, v44, 0, 0);
  v17 = *(_QWORD *)(v3 + 64);
  v18 = *(_QWORD *)(v17 + 16);
  v37 = v3;
  if (v18)
  {
    v19 = v17 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    v39 = *(_QWORD *)(v10 + 72);
    v36 = v17;
    swift_bridgeObjectRetain_n(v17, 2);
    swift_retain(v3);
    v42 = _swiftEmptyArrayStorage;
    v20 = v38;
    v38(v8, v19, v9);
    while (1)
    {
      v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
      v21(v8, 0, 1, v9);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
      {
        v17 = v36;
        v30 = v37;
        goto LABEL_19;
      }
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v13, v8, v9);
      v22 = *v41;
      if (!*(_QWORD *)(*v41 + 16))
        goto LABEL_4;
      swift_bridgeObjectRetain(*v41);
      v23 = sub_299B0((uint64_t)v13);
      if ((v24 & 1) == 0)
        break;
      v25 = *(_QWORD *)(*(_QWORD *)(v22 + 56) + 8 * v23);
      swift_bridgeObjectRetain(v25);
      swift_bridgeObjectRelease();
      v40(v13, v9);
      if ((swift_isUniquelyReferenced_nonNull_native(v42) & 1) == 0)
        v42 = sub_10CFC(0, v42[2] + 1, 1, v42);
      v27 = v42[2];
      v26 = v42[3];
      if (v27 >= v26 >> 1)
        v42 = sub_10CFC((_QWORD *)(v26 > 1), v27 + 1, 1, v42);
      v28 = v42;
      v42[2] = v27 + 1;
      v28[v27 + 4] = v25;
      v20 = v38;
LABEL_5:
      v19 += v39;
      if (!--v18)
      {
        v17 = v36;
        goto LABEL_18;
      }
      v20(v8, v19, v9);
    }
    swift_bridgeObjectRelease();
LABEL_4:
    v40(v13, v9);
    goto LABEL_5;
  }
  v29 = v3;
  v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
  swift_bridgeObjectRetain_n(v17, 2);
  swift_retain(v29);
  v42 = _swiftEmptyArrayStorage;
LABEL_18:
  v21(v8, 1, 1, v9);
  v30 = v37;
LABEL_19:
  swift_release(v30);
  swift_bridgeObjectRelease_n(v17, 2);
  v31 = sub_41FC0((uint64_t)v42);
  swift_bridgeObjectRelease();
  v32 = sub_4324C(v31);
  swift_release(v31);
  v33 = *(_QWORD *)(v30 + 80);
  v43 = v32;
  swift_retain(v33);
  CurrentValueSubject.send(_:)();
  swift_bridgeObjectRelease();
  return swift_release(v33);
}

_QWORD *ProgressivelyLoadShelvesController.deinit()
{
  _QWORD *v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 2);
  swift_bridgeObjectRelease(v0[7]);
  swift_bridgeObjectRelease(v0[8]);
  swift_bridgeObjectRelease(v0[9]);
  swift_release(v0[10]);
  return v0;
}

uint64_t ProgressivelyLoadShelvesController.__deallocating_deinit()
{
  _QWORD *v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 2);
  swift_bridgeObjectRelease(v0[7]);
  swift_bridgeObjectRelease(v0[8]);
  swift_bridgeObjectRelease(v0[9]);
  swift_release(v0[10]);
  return swift_deallocClassInstance(v0, 88, 7);
}

void (*sub_41D70(uint64_t **a1, unint64_t a2, uint64_t a3))(_QWORD *)
{
  uint64_t *v6;

  v6 = (uint64_t *)malloc(0x28uLL);
  *a1 = v6;
  v6[4] = (uint64_t)sub_41E6C(v6, a2, a3);
  return sub_DAE4;
}

void (*sub_41DC4(uint64_t **a1, unint64_t a2, uint64_t a3))(_QWORD *)
{
  uint64_t *v6;

  v6 = (uint64_t *)malloc(0x28uLL);
  *a1 = v6;
  v6[4] = (uint64_t)sub_41EE0(v6, a2, a3);
  return sub_DAE4;
}

void (*sub_41E18(void (**a1)(id *a1), unint64_t a2, uint64_t a3))(_QWORD *)
{
  void (*v6)(id *);

  v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = sub_41F4C(v6, a2, a3);
  return sub_DAE4;
}

uint64_t *sub_41E6C(uint64_t *result, unint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFF8)) > a2)
  {
    v4 = swift_retain(*(_QWORD *)(a3 + 8 * a2 + 32));
LABEL_5:
    *v3 = v4;
    return (uint64_t *)destroy for ModernStationDetailPresenter.Configuration;
  }
  __break(1u);
  return result;
}

uint64_t destroy for ModernStationDetailPresenter.Configuration(_QWORD *a1)
{
  return swift_release(*a1);
}

uint64_t *sub_41EE0(uint64_t *result, unint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFF8)) > a2)
  {
    v4 = swift_retain(*(_QWORD *)(a3 + 8 * a2 + 32));
LABEL_5:
    *v3 = v4;
    return (uint64_t *)j__s8ShelfKit28ModernStationDetailPresenterC13ConfigurationVwxx;
  }
  __break(1u);
  return result;
}

void (*sub_41F4C(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  void (*v3)(id *);
  id v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a2);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFF8)) > a2)
  {
    v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(_QWORD *)v3 = v4;
    return sub_41FB8;
  }
  __break(1u);
  return result;
}

void sub_41FB8(id *a1)
{

}

uint64_t sub_41FC0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  unint64_t v52;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8660);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v47 = (uint64_t)&v43 - v6;
  v7 = type metadata accessor for ModernShelf(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v48 = (uint64_t)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(unsigned __int8 *)(v8 + 80);
  v51 = _swiftEmptyArrayStorage;
  v49 = (uint64_t)_swiftEmptyArrayStorage + ((v10 + 32) & ~v10);
  v45 = v10 | 7;
  v46 = (v10 + 32) & ~v10;
  result = swift_bridgeObjectRetain(a1);
  v52 = 0;
  v50 = 0;
  v12 = 0;
LABEL_4:
  v15 = *(_QWORD *)(a1 + 16);
  if (v12 != v15)
  {
    if (v12 < v15)
    {
      while (1)
      {
        v16 = *(_QWORD *)(a1 + 32 + 8 * v12);
        swift_bridgeObjectRetain(v16);
        result = swift_bridgeObjectRelease();
        if (v16)
          break;
LABEL_9:
        ++v12;
        v17 = *(_QWORD *)(a1 + 16);
        if (v12 == v17)
          goto LABEL_38;
        if (v12 >= v17)
          goto LABEL_43;
      }
      v13 = *(_QWORD *)(v16 + 16);
      if (!v13)
      {
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v5, 1, 1, v7);
        result = sub_1459C((uint64_t)v5, &qword_3B8660);
        goto LABEL_9;
      }
      v14 = 0;
      ++v12;
      while (1)
      {
        if (v14 >= v13)
          goto LABEL_44;
        v18 = *(_QWORD *)(v8 + 72);
        v52 = v14;
        sub_42980(v16 + v46 + v18 * v14, (uint64_t)v5);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
        v19 = v47;
        sub_43520((uint64_t)v5, v47);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v19, 1, v7) == 1)
          goto LABEL_39;
        result = sub_3C56C(v19, v48, type metadata accessor for ModernShelf);
        if (!v50)
          break;
        v20 = v51;
        v21 = v50 - 1;
        if (__OFSUB__(v50, 1))
          goto LABEL_45;
LABEL_37:
        v50 = v21;
        ++v52;
        v38 = v49;
        result = sub_3C56C(v48, v49, type metadata accessor for ModernShelf);
        v49 = v38 + v18;
        v51 = v20;
        v13 = *(_QWORD *)(v16 + 16);
        v14 = v52;
        if (v52 == v13)
        {
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v5, 1, 1, v7);
          result = sub_1459C((uint64_t)v5, &qword_3B8660);
          goto LABEL_4;
        }
      }
      v22 = v51[3];
      if ((uint64_t)((v22 >> 1) + 0x4000000000000000) < 0)
        goto LABEL_47;
      v23 = v22 & 0xFFFFFFFFFFFFFFFELL;
      if (v23 <= 1)
        v24 = 1;
      else
        v24 = v23;
      v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0A48);
      v26 = v46;
      v50 = v24;
      v20 = (_QWORD *)swift_allocObject(v25, v46 + v24 * v18, v45);
      result = _swift_stdlib_malloc_size(v20);
      if (!v18)
        goto LABEL_48;
      v27 = result - v26;
      if (result - v26 == 0x8000000000000000 && v18 == -1)
        goto LABEL_49;
      v29 = v26;
      v30 = v27 / v18;
      v31 = v51;
      v20[2] = v50;
      v20[3] = 2 * (v27 / v18);
      v32 = (unint64_t)v20 + v29;
      v33 = v31[3] >> 1;
      v34 = v33 * v18;
      if (!v31[2])
      {
LABEL_36:
        v49 = v32 + v34;
        v36 = (v30 & 0x7FFFFFFFFFFFFFFFLL) - v33;
        result = swift_release(v31);
        v37 = __OFSUB__(v36, 1);
        v21 = v36 - 1;
        if (v37)
          goto LABEL_45;
        goto LABEL_37;
      }
      v35 = (char *)v31 + v29;
      if (v20 < v31 || v32 >= (unint64_t)&v35[v34])
      {
        v49 = (uint64_t)v20 + v29;
        v50 = v33;
        v44 = v33 * v18;
        swift_arrayInitWithTakeFrontToBack((char *)v20 + v29, v35, v33, v7);
      }
      else
      {
        if (v20 == v51)
        {
LABEL_35:
          v31 = v51;
          v51[2] = 0;
          goto LABEL_36;
        }
        v49 = (uint64_t)v20 + v29;
        v50 = v33;
        v44 = v33 * v18;
        swift_arrayInitWithTakeBackToFront((char *)v20 + v29);
      }
      v34 = v44;
      v32 = v49;
      v33 = v50;
      goto LABEL_35;
    }
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
LABEL_38:
  v19 = v47;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(v47, 1, 1, v7);
LABEL_39:
  swift_bridgeObjectRelease();
  v39 = v51;
  swift_bridgeObjectRelease();
  result = sub_1459C(v19, &qword_3B8660);
  v40 = v39[3];
  if (v40 < 2)
    return (uint64_t)v39;
  v41 = v40 >> 1;
  v37 = __OFSUB__(v41, v50);
  v42 = v41 - v50;
  if (!v37)
  {
    v39[2] = v42;
    return (uint64_t)v39;
  }
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
  return result;
}

uint64_t sub_423EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60[2];
  __int128 v61[2];
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  _QWORD v65[6];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2B18);
  __chkstk_darwin(v4);
  v6 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2B20);
  v55 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v57 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2B28);
  v56 = *(_QWORD *)(v57 - 8);
  __chkstk_darwin(v57);
  v11 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2B30);
  v58 = *(_QWORD *)(v59 - 8);
  __chkstk_darwin(v59);
  v13 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2B38);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = type metadata accessor for ModernShelf(0);
  v18 = a2 + *(int *)(v54 + 48);
  if (!*(_QWORD *)(v18 + 24))
  {
    v49 = *(_OWORD *)(v18 + 16);
    v62 = *(_OWORD *)v18;
    v63 = v49;
    v64 = *(_QWORD *)(v18 + 32);
    if (*((_QWORD *)&v49 + 1))
      goto LABEL_3;
    return 0;
  }
  sub_150C8(v18, (uint64_t)&v62);
  if (!*((_QWORD *)&v63 + 1))
    return 0;
LABEL_3:
  sub_F4D8(&v62, (uint64_t)v65);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8C50);
  BaseObjectGraph.inject<A>(_:)(&v62, v19, v19);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2B40);
  v53 = v14;
  v21 = v20;
  sub_150C8((uint64_t)&v62, (uint64_t)v61);
  sub_150C8((uint64_t)v65, (uint64_t)v60);
  v22 = swift_allocObject(&unk_379870, 104, 7);
  v52 = a2;
  v23 = v22;
  sub_F4D8(v61, v22 + 16);
  sub_F4D8(v60, v23 + 56);
  *(_QWORD *)(v23 + 96) = a1;
  swift_retain(a1);
  *(_QWORD *)&v61[0] = Future<>.init(unwrapping:)(&unk_3B2B50, v23);
  v24 = sub_327F8(0, (unint64_t *)&qword_3B8710, OS_dispatch_queue_ptr);
  *(_QWORD *)&v60[0] = static OS_dispatch_queue.main.getter(v24);
  v25 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v6, 1, 1, v25);
  v26 = sub_32914(&qword_3B2B58, &qword_3B2B40, (uint64_t)&protocol conformance descriptor for Future<A, B>);
  v51 = v15;
  v27 = v26;
  v28 = sub_436CC();
  Publisher.subscribe<A>(on:options:)(v60, v6, v21, v24, v27, v28);
  sub_1459C((uint64_t)v6, &qword_3B2B18);

  v29 = swift_release(*(_QWORD *)&v61[0]);
  v30 = static Subscribers.Demand.unlimited.getter(v29);
  v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2970);
  v32 = sub_32914(&qword_3B2B68, &qword_3B2B20, (uint64_t)&protocol conformance descriptor for Publishers.SubscribeOn<A, B>);
  v33 = sub_32914(&qword_3B2978, &qword_3B2970, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.flatMap<A>(maxPublishers:_:)(v30, sub_40C24, 0, v7, v31, v32, v33);
  (*(void (**)(char *, uint64_t))(v55 + 8))(v9, v7);
  v34 = sub_32914(&qword_3B2B70, &qword_3B2B28, (uint64_t)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
  v35 = v57;
  Publisher.catch<A>(_:)(sub_40C30, 0, v57, v31, v34, v33);
  (*(void (**)(char *, uint64_t))(v56 + 8))(v11, v35);
  v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B08F0);
  v37 = swift_allocObject(v36, 40, 7);
  v57 = xmmword_2EA0D0;
  *(_OWORD *)(v37 + 16) = xmmword_2EA0D0;
  v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0A48);
  v39 = *(_QWORD *)(v54 - 8);
  v40 = *(_QWORD *)(v39 + 72);
  v41 = *(unsigned __int8 *)(v39 + 80);
  v42 = (v41 + 32) & ~v41;
  v43 = swift_allocObject(v38, v42 + v40, v41 | 7);
  *(_OWORD *)(v43 + 16) = v57;
  sub_42980(v52, v43 + v42);
  *(_QWORD *)(v37 + 32) = v43;
  v44 = sub_32914(&qword_3B2B78, &qword_3B2B30, (uint64_t)&protocol conformance descriptor for Publishers.Catch<A, B>);
  v45 = v59;
  Publisher.prepend(_:)(v37, v59, v44);
  swift_bridgeObjectRelease(v37);
  (*(void (**)(char *, uint64_t))(v58 + 8))(v13, v45);
  v46 = sub_32914(&qword_3B2B80, &qword_3B2B38, (uint64_t)&protocol conformance descriptor for Publishers.Concatenate<A, B>);
  v47 = v53;
  v48 = Publisher.eraseToAnyPublisher()(v53, v46);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v17, v47);
  __swift_destroy_boxed_opaque_existential_1(&v62);
  __swift_destroy_boxed_opaque_existential_1(v65);
  return v48;
}

uint64_t sub_42980(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ModernShelf(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_429C4()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  int *v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  int *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  char *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  int *v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  char *v33;
  int *v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v1 = (int *)type metadata accessor for ModernShelf(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 8));
  v7 = (_QWORD *)(v0 + v4 + v1[5]);
  v8 = (int *)type metadata accessor for Header(0);
  if (!(*(unsigned int (**)(_QWORD *, uint64_t, int *))(*((_QWORD *)v8 - 1) + 48))(v7, 1, v8))
  {
    v54 = v5;
    swift_bridgeObjectRelease(v7[1]);
    swift_bridgeObjectRelease(v7[3]);
    swift_bridgeObjectRelease(v7[5]);
    v9 = (_QWORD *)((char *)v7 + v8[9]);
    v10 = type metadata accessor for ActionMenu(0);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1, v10))
    {
      v53 = v0;
      swift_bridgeObjectRelease(v9[1]);
      swift_bridgeObjectRelease(v9[3]);
      swift_bridgeObjectRelease(v9[5]);
      v11 = (char *)v9 + *(int *)(v10 + 28);
      v12 = v10;
      v13 = (int *)type metadata accessor for ArtworkModel(0);
      if (!(*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v13 - 1) + 48))(v11, 1, v13))
      {
        v52 = v12;
        swift_bridgeObjectRelease(*((_QWORD *)v11 + 1));
        v14 = v11[32];
        if (v14 != 255)
          sub_3B5BC(*((_QWORD *)v11 + 2), *((_QWORD *)v11 + 3), v14);
        v15 = v11[64];
        if (v15 != 255)
          sub_3D624(*((id *)v11 + 7), v15);
        v16 = v11[80];
        if (v16 != 255)
          sub_3D624(*((id *)v11 + 9), v16);
        v17 = v11[96];
        if (v17 != 255)
          sub_3D624(*((id *)v11 + 11), v17);
        v18 = v11[112];
        if (v18 != 255)
          sub_3D624(*((id *)v11 + 13), v18);
        v19 = v11[128];
        if (v19 != 255)
          sub_3D624(*((id *)v11 + 15), v19);
        v20 = &v11[v13[11]];
        v21 = type metadata accessor for ArtworkCrop(0);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v20, v21);
        swift_bridgeObjectRelease(*(_QWORD *)&v11[v13[12] + 8]);
        swift_bridgeObjectRelease(*(_QWORD *)&v11[v13[16] + 8]);
        v12 = v52;
      }
      swift_bridgeObjectRelease(*(_QWORD *)((char *)v9 + *(int *)(v12 + 32)));
      v10 = v12;
      v0 = v53;
    }
    v22 = (_QWORD *)((char *)v7 + v8[10]);
    v23 = type metadata accessor for Header.PrimaryAction(0);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 48))(v22, 1, v23))
    {
      if (swift_getEnumCaseMultiPayload(v22, v23) == 1)
      {
        swift_bridgeObjectRelease(v22[1]);
        swift_bridgeObjectRelease(v22[3]);
        swift_bridgeObjectRelease(v22[5]);
        v24 = (char *)v22 + *(int *)(v10 + 28);
        v25 = (int *)type metadata accessor for ArtworkModel(0);
        if (!(*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v25 - 1) + 48))(v24, 1, v25))
        {
          swift_bridgeObjectRelease(*((_QWORD *)v24 + 1));
          v26 = v24[32];
          if (v26 != 255)
            sub_3B5BC(*((_QWORD *)v24 + 2), *((_QWORD *)v24 + 3), v26);
          v27 = v24[64];
          if (v27 != 255)
            sub_3D624(*((id *)v24 + 7), v27);
          v28 = v24[80];
          if (v28 != 255)
            sub_3D624(*((id *)v24 + 9), v28);
          v29 = v24[96];
          if (v29 != 255)
            sub_3D624(*((id *)v24 + 11), v29);
          v30 = v24[112];
          if (v30 != 255)
            sub_3D624(*((id *)v24 + 13), v30);
          v31 = v24[128];
          if (v31 != 255)
            sub_3D624(*((id *)v24 + 15), v31);
          v51 = &v24[v25[11]];
          v32 = type metadata accessor for ArtworkCrop(0);
          (*(void (**)(char *, uint64_t))(*(_QWORD *)(v32 - 8) + 8))(v51, v32);
          swift_bridgeObjectRelease(*(_QWORD *)&v24[v25[12] + 8]);
          swift_bridgeObjectRelease(*(_QWORD *)&v24[v25[16] + 8]);
        }
        swift_bridgeObjectRelease(*(_QWORD *)((char *)v22 + *(int *)(v10 + 32)));
        v4 = (v3 + 16) & ~v3;
      }
      else
      {
        swift_release(*v22);
      }
    }
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v7 + v8[11]));
    v33 = (char *)v7 + v8[12];
    v34 = (int *)type metadata accessor for ArtworkModel(0);
    v5 = v54;
    if (!(*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v34 - 1) + 48))(v33, 1, v34))
    {
      swift_bridgeObjectRelease(*((_QWORD *)v33 + 1));
      v35 = v33[32];
      if (v35 != 255)
        sub_3B5BC(*((_QWORD *)v33 + 2), *((_QWORD *)v33 + 3), v35);
      v36 = v33[64];
      if (v36 != 255)
        sub_3D624(*((id *)v33 + 7), v36);
      v37 = v33[80];
      if (v37 != 255)
        sub_3D624(*((id *)v33 + 9), v37);
      v38 = v33[96];
      if (v38 != 255)
        sub_3D624(*((id *)v33 + 11), v38);
      v39 = v33[112];
      if (v39 != 255)
        sub_3D624(*((id *)v33 + 13), v39);
      v40 = v33[128];
      if (v40 != 255)
        sub_3D624(*((id *)v33 + 15), v40);
      v41 = &v33[v34[11]];
      v42 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v42 - 8) + 8))(v41, v42);
      swift_bridgeObjectRelease(*(_QWORD *)&v33[v34[12] + 8]);
      swift_bridgeObjectRelease(*(_QWORD *)&v33[v34[16] + 8]);
    }
  }
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[7]));
  v43 = v6 + v1[9];
  v44 = type metadata accessor for URL(0);
  v45 = *(_QWORD *)(v44 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44))
    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v43, v44);
  v46 = (_QWORD *)(v6 + v1[12]);
  if (v46[3])
    __swift_destroy_boxed_opaque_existential_1(v46);
  v47 = v6 + v1[13];
  v48 = type metadata accessor for ImpressionMetrics(0);
  v49 = *(_QWORD *)(v48 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v49 + 48))(v47, 1, v48))
    (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v47, v48);
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_42F38@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  type metadata accessor for ModernShelf(0);
  return sub_401F0(a1, a2);
}

uint64_t sub_42F90@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t result;

  result = StoreDataProvider.progressivelyLoadShelfItemsPublisher(objectGraph:shelf:)(v2[5], a1, v2[2], v2[3]);
  *a2 = result;
  return result;
}

uint64_t sub_42FD4()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1((_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_43000@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t result;

  v4 = v2 + 2;
  v5 = *a1;
  v6 = v2[5];
  v9 = v2 + 6;
  v7 = v2[6];
  v8 = v9[1];
  __swift_project_boxed_opaque_existential_1(v4, v6);
  result = StoreDataProvider.progressivelyLoadShelfItemsPublisher(objectGraph:shelves:)(v8, v5, v6, v7);
  *a2 = result;
  return result;
}

_QWORD *sub_43068(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8[2];

  v2 = v1;
  v1[7] = _swiftEmptyArrayStorage;
  v1[8] = _swiftEmptyArrayStorage;
  v1[9] = &_swiftEmptyDictionarySingleton;
  *(_QWORD *)&v8[0] = 0;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2990);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v1[10] = CurrentValueSubject.init(_:)(v8);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BE9F0);
  v6 = type metadata accessor for BaseObjectGraph(0);
  inject<A, B>(_:from:)(v8, v5, a1, v5, v6);
  sub_F4D8(v8, (uint64_t)(v2 + 2));
  return v2;
}

uint64_t sub_4311C()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_43140()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_431B4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  return sub_418B0(a1, *(_QWORD *)(v1 + 16), v1 + ((v3 + 24) & ~v3));
}

uint64_t type metadata accessor for ProgressivelyLoadShelvesController()
{
  return objc_opt_self(_TtC8ShelfKit34ProgressivelyLoadShelvesController);
}

uint64_t method lookup function for ProgressivelyLoadShelvesController(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for ProgressivelyLoadShelvesController);
}

uint64_t dispatch thunk of ProgressivelyLoadShelvesController.__allocating_init(asPartOf:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 216))();
}

uint64_t dispatch thunk of ProgressivelyLoadShelvesController.publisher.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of ProgressivelyLoadShelvesController.resetAndClearBuffer()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of ProgressivelyLoadShelvesController.addBatch(objectGraph:shelves:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t sub_4324C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  int *v29;

  v29 = (int *)type metadata accessor for ModernShelf(0);
  v2 = __chkstk_darwin(v29);
  v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v7 = (char *)&v26 - v6;
  v8 = *(_QWORD *)(a1 + 16);
  if (v8)
  {
    v28 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    v9 = a1 + v28;
    v10 = *(_QWORD *)(v5 + 72);
    v26 = a1;
    swift_bridgeObjectRetain(a1);
    v11 = _swiftEmptyArrayStorage;
    v27 = v4;
    while (1)
    {
      sub_42980(v9, (uint64_t)v7);
      v12 = v11[2];
      if (!v12 || v7[v29[10]] != 1)
        break;
      v13 = v29[6];
      v14 = *((_BYTE *)v11 + v28 + (v12 - 1) * v10 + v13);
      v15 = ModernShelf.ItemKind.rawValue.getter(v7[v13]);
      v17 = v16;
      v18 = ModernShelf.ItemKind.rawValue.getter(v14);
      if (v15 == v18 && v17 == v19)
      {
        swift_bridgeObjectRelease_n(v17, 2);
      }
      else
      {
        v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v17, v18, v19, 0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v4 = v27;
        if ((v21 & 1) == 0)
          break;
      }
      v24 = *(_QWORD *)&v7[v29[7]];
      swift_bridgeObjectRetain(v24);
      result = swift_isUniquelyReferenced_nonNull_native(v11);
      if ((result & 1) == 0)
      {
        result = sub_1E51C((unint64_t)v11);
        v11 = (_QWORD *)result;
      }
      if (v12 > v11[2])
      {
        __break(1u);
        return result;
      }
      sub_1E3CF8(v24);
      v4 = v27;
LABEL_4:
      sub_434E4((uint64_t)v7);
      v9 += v10;
      if (!--v8)
      {
        swift_bridgeObjectRelease();
        return (uint64_t)v11;
      }
    }
    sub_42980((uint64_t)v7, (uint64_t)v4);
    if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0)
      v11 = (_QWORD *)sub_10CD4(0, v11[2] + 1, 1, (unint64_t)v11);
    v23 = v11[2];
    v22 = v11[3];
    if (v23 >= v22 >> 1)
      v11 = (_QWORD *)sub_10CD4(v22 > 1, v23 + 1, 1, (unint64_t)v11);
    v11[2] = v23 + 1;
    sub_3C56C((uint64_t)v4, (uint64_t)v11 + v28 + v23 * v10, type metadata accessor for ModernShelf);
    goto LABEL_4;
  }
  return (uint64_t)_swiftEmptyArrayStorage;
}

uint64_t sub_434E4(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ModernShelf(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_43520(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8660);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_43568(uint64_t result, char a2)
{
  if (a2 == 1)
    return swift_retain(result);
  return result;
}

uint64_t sub_4357C(uint64_t result, char a2)
{
  if (a2 == 1)
    return swift_release(result);
  return result;
}

unint64_t sub_43590()
{
  unint64_t result;

  result = qword_3B2B10;
  if (!qword_3B2B10)
  {
    type metadata accessor for ShelfError(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for ShelfError);
    atomic_store(result, (unint64_t *)&qword_3B2B10);
  }
  return result;
}

uint64_t sub_435D8()
{
  _QWORD *v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 2);
  __swift_destroy_boxed_opaque_existential_1(v0 + 7);
  swift_release(v0[12]);
  return swift_deallocObject(v0, 104, 7);
}

uint64_t sub_4360C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1 + 16;
  v5 = v1 + 56;
  v6 = *(_QWORD *)(v1 + 96);
  v7 = (_QWORD *)swift_task_alloc(dword_3B2B4C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_43684;
  v7[4] = v5;
  v7[5] = v6;
  v7[2] = a1;
  v7[3] = v4;
  return swift_task_switch(sub_40B38, 0, 0);
}

uint64_t sub_43684()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

unint64_t sub_436CC()
{
  unint64_t result;

  result = qword_3B2B60;
  if (!qword_3B2B60)
  {
    sub_327F8(255, (unint64_t *)&qword_3B8710, OS_dispatch_queue_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for OS_dispatch_queue);
    atomic_store(result, (unint64_t *)&qword_3B2B60);
  }
  return result;
}

uint64_t AccountSetting.navigationFlowDestination.getter@<X0>(_QWORD *a1@<X8>)
{
  char *v1;
  char v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v3 = *v1;
  v4 = type metadata accessor for FlowDestination(0);
  if ((v3 & 1) != 0)
  {
    v5 = a1;
    v6 = 51;
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
    v5 = a1;
    v6 = 12;
  }
  return swift_storeEnumTagMultiPayload(v5, v4, v6);
}

unint64_t sub_43774()
{
  unint64_t result;

  result = qword_3B2B88;
  if (!qword_3B2B88)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AccountSetting);
    atomic_store(result, (unint64_t *)&qword_3B2B88);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AccountSetting(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_43804 + 4 * byte_2ED0AD[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_43838 + 4 * byte_2ED0A8[v4]))();
}

uint64_t sub_43838(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_43840(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x43848);
  return result;
}

uint64_t sub_43854(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x4385CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_43860(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_43868(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccountSetting()
{
  return &type metadata for AccountSetting;
}

uint64_t JSONObject.adamId.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = JSONObject.string.getter(a1);
  v3 = v2;
  if (!v2)
    return 0;
  v4 = static AdamID.parse(_:)(v1, v2);
  swift_bridgeObjectRelease(v3);
  return v4;
}

uint64_t JSONObject.init(fromFile:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  id v16;
  void (*v17)(char *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v25 = a3;
  v6 = type metadata accessor for JSONObject(0);
  v23 = *(_QWORD *)(v6 - 8);
  v24 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v23 - v14;
  v16 = objc_msgSend((id)objc_opt_self(MTConstants), "sharedDocumentsDirectory");
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  URL.appendingPathComponent(_:)(a1, a2);
  swift_bridgeObjectRelease(a2);
  v17 = *(void (**)(char *, uint64_t))(v10 + 8);
  v17(v13, v9);
  v18 = Data.init(contentsOf:options:)(v15, 0);
  if (v3)
    return ((uint64_t (*)(char *, uint64_t))v17)(v15, v9);
  JSONObject.init(deserializing:)(v18);
  v17(v15, v9);
  v20 = v23;
  v19 = v24;
  v21 = v25;
  (*(void (**)(uint64_t, char *, uint64_t))(v23 + 32))(v25, v8, v24);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v20 + 56))(v21, 0, 1, v19);
}

uint64_t sub_43AB0()
{
  uint64_t v0;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2BC0);
  __swift_allocate_value_buffer(v0, qword_3B2B90);
  __swift_project_value_buffer(v0, (uint64_t)qword_3B2B90);
  return MetricsFieldsContext.Property.init(_:)(0xD000000000000033, 0x800000000030B1E0, &type metadata for Bool);
}

uint64_t static MetricsFieldsContext.Property<A>.participatingInCrossfireReferral.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_43BD0(&qword_3B0048, &qword_3B2BC0, (uint64_t)qword_3B2B90, (uint64_t)sub_43AB0, a1);
}

uint64_t sub_43B40()
{
  uint64_t v0;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2BC8);
  __swift_allocate_value_buffer(v0, qword_3B2BA8);
  __swift_project_value_buffer(v0, (uint64_t)qword_3B2BA8);
  return MetricsFieldsContext.Property.init(_:)(0xD000000000000021, 0x800000000030B1B0, &type metadata for ChildAndParentLocation);
}

uint64_t static MetricsFieldsContext.Property<A>.locationFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_43BD0(&qword_3B0050, &qword_3B2BC8, (uint64_t)qword_3B2BA8, (uint64_t)sub_43B40, a1);
}

uint64_t sub_43BD0@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;

  if (*a1 != -1)
    swift_once(a1, a4);
  v8 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v9 = __swift_project_value_buffer(v8, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a5, v9, v8);
}

void TabMenu.Item.GlyphTint.hash(into:)(uint64_t a1, char a2)
{
  Hasher._combine(_:)(a2 & 1);
}

BOOL static TabMenu.Item.GlyphTint.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

Swift::Int TabMenu.Item.GlyphTint.hashValue.getter(char a1)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(a1 & 1);
  return Hasher._finalize()();
}

double RecommendationsMetadata.Categories.Metadata.timestamp.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

double UpNextScoringWeights.percentOfEpisodesFromShowPlayedWeight.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

uint64_t OffsetMultiplier.init(source:xMultiplier:yMultiplier:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  *(_BYTE *)a2 = result & 1;
  *(double *)(a2 + 8) = a3;
  *(double *)(a2 + 16) = a4;
  return result;
}

uint64_t View.offset(multiplier:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD v14[4];
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;

  v8 = *a1;
  v9 = *((_QWORD *)a1 + 1);
  v10 = *((_QWORD *)a1 + 2);
  v11 = swift_allocObject(&unk_379B00, 56, 7);
  *(_QWORD *)(v11 + 16) = a2;
  *(_QWORD *)(v11 + 24) = a3;
  *(_BYTE *)(v11 + 32) = v8;
  *(_QWORD *)(v11 + 40) = v9;
  *(_QWORD *)(v11 + 48) = v10;
  v14[2] = a2;
  v14[3] = a3;
  v15 = v4;
  v16 = v8;
  v17 = v9;
  v18 = v10;
  v12 = sub_445F4();
  sub_26AE84((uint64_t)sub_43E1C, (uint64_t)v14, (uint64_t)&type metadata for OffsetMultiplierLayout, a2, v12, a3, a4);
  return swift_release(v11);
}

uint64_t sub_43D8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  v5 = *(_QWORD *)(a2 - 8);
  v6 = __chkstk_darwin(a1);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_135B90(v6, v9, (uint64_t)v8);
  sub_133078((uint64_t)v8, a2, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, a2);
}

uint64_t sub_43E1C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_43D8C(*(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_43E2C()
{
  unint64_t result;

  result = qword_3B2BD0;
  if (!qword_3B2BD0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for OffsetMultiplier.Source);
    atomic_store(result, (unint64_t *)&qword_3B2BD0);
  }
  return result;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

ValueMetadata *type metadata accessor for OffsetMultiplier()
{
  return &type metadata for OffsetMultiplier;
}

uint64_t storeEnumTagSinglePayload for OffsetMultiplier.Source(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_43EE8 + 4 * byte_2ED155[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_43F1C + 4 * byte_2ED150[v4]))();
}

uint64_t sub_43F1C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_43F24(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x43F2CLL);
  return result;
}

uint64_t sub_43F38(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x43F40);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_43F44(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_43F4C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for OffsetMultiplier.Source()
{
  return &type metadata for OffsetMultiplier.Source;
}

uint64_t sub_43F68(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *a1;
  v2 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_3B2BD8);
  v3 = sub_43FFC(&qword_3B2BE0, (uint64_t)&protocol conformance descriptor for _LayoutRoot<A>);
  type metadata accessor for _VariadicView.Tree(255, v2, v1, v3);
  sub_43FFC(&qword_3B2BE8, (uint64_t)&protocol conformance descriptor for _LayoutRoot<A>);
  return swift_getWitnessTable(&protocol conformance descriptor for <> _VariadicView.Tree<A, B>);
}

uint64_t sub_43FFC(unint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_3B2BD8);
    result = swift_getWitnessTable(a2);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s8ShelfKit16OffsetMultiplierVwet_0(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[24])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = v3 - 2;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t _s8ShelfKit16OffsetMultiplierVwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for OffsetMultiplierLayout()
{
  return &type metadata for OffsetMultiplierLayout;
}

unint64_t sub_440DC()
{
  unint64_t result;

  result = qword_3B2BF0;
  if (!qword_3B2BF0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for EmptyAnimatableData);
    atomic_store(result, (unint64_t *)&qword_3B2BF0);
  }
  return result;
}

uint64_t sub_44120(uint64_t a1, char a2, uint64_t a3, int a4, double a5, double a6, double a7, double a8)
{
  double *v8;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  int v23;
  double v24;
  double v25;
  uint64_t v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  _BYTE v36[12];
  int v37;
  char v38;
  char v39;

  v37 = a4;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2C00);
  __chkstk_darwin(v16);
  v18 = &v36[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = type metadata accessor for LayoutSubview(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = &v36[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v23 = *(unsigned __int8 *)v8;
  v25 = v8[1];
  v24 = v8[2];
  sub_D7794((uint64_t)v18);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19) == 1)
    return sub_445A4((uint64_t)v18);
  v27 = (*(uint64_t (**)(_BYTE *, _BYTE *, uint64_t))(v20 + 32))(v22, v18, v19);
  v28 = *(double *)&a1;
  v29 = 10.0;
  if ((a2 & 1) != 0)
    v28 = 10.0;
  if ((v37 & 1) == 0)
    v29 = *(double *)&a3;
  if (v23)
  {
    v28 = a7;
    v29 = a8;
  }
  v30 = v28 * v25 + a5;
  v31 = v29 * v24 + a6;
  v32 = v28;
  v33 = v29;
  v34 = static UnitPoint.topLeading.getter(v27);
  v39 = 0;
  v38 = 0;
  LayoutSubview.place(at:anchor:proposal:)(*(_QWORD *)&v32, 0, *(_QWORD *)&v33, 0, v30, v31, v34, v35);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v20 + 8))(v22, v19);
}

double sub_442F4(uint64_t a1, char a2, uint64_t a3, char a4)
{
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  double v14;
  _BYTE v16[16];

  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2C00);
  __chkstk_darwin(v7);
  v9 = &v16[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for LayoutSubview(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = &v16[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_D7794((uint64_t)v9);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    sub_445A4((uint64_t)v9);
    return 0.0;
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v11 + 32))(v13, v9, v10);
    v16[8] = a2 & 1;
    v16[0] = a4 & 1;
    v14 = LayoutSubview.sizeThatFits(_:)(a1);
    (*(void (**)(_BYTE *, uint64_t))(v11 + 8))(v13, v10);
  }
  return v14;
}

uint64_t sub_44450(uint64_t a1, char a2, uint64_t a3, char a4, double a5, double a6, double a7, double a8)
{
  return sub_44120(a1, a2 & 1, a3, a4 & 1, a5, a6, a7, a8);
}

uint64_t sub_44468(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_444C0(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(uint64_t))&Layout.explicitAlignment(of:in:proposal:subviews:cache:));
}

uint64_t sub_44494(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_444C0(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(uint64_t))&Layout.explicitAlignment(of:in:proposal:subviews:cache:));
}

uint64_t sub_444C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(uint64_t))
{
  return a10(a1);
}

void (*sub_444FC(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = Animatable<>.animatableData.modify();
  return sub_DB98;
}

unint64_t sub_44560()
{
  unint64_t result;

  result = qword_3B2BF8;
  if (!qword_3B2BF8)
  {
    result = swift_getWitnessTable(&unk_2ED218);
    atomic_store(result, (unint64_t *)&qword_3B2BF8);
  }
  return result;
}

uint64_t sub_445A4(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2C00);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_445E4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 56, 7);
}

unint64_t sub_445F4()
{
  unint64_t result;

  result = qword_3B2C08;
  if (!qword_3B2C08)
  {
    result = swift_getWitnessTable(&unk_2ED268);
    atomic_store(result, (unint64_t *)&qword_3B2C08);
  }
  return result;
}

uint64_t sub_44638@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return sub_446C8(a1, a2, (uint64_t (*)(void))sub_55F1C, (uint64_t)&type metadata for FromChannelShelvesIntent, a3);
}

uint64_t sub_4465C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return sub_446C8(a1, a2, (uint64_t (*)(void))sub_55D40, (uint64_t)&type metadata for EpisodeUpsellShelfIntent, a3);
}

uint64_t sub_44680@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  return sub_461EC(a1, a2, (uint64_t (*)(void))sub_55D84, (uint64_t)&type metadata for SharedWithYouShelfIntent, a3);
}

uint64_t sub_446A4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return sub_446C8(a1, a2, (uint64_t (*)(void))sub_55C30, (uint64_t)&type metadata for CategoryPageFromYourShowsShelfIntent, a3);
}

uint64_t sub_446C8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;

  v40 = a5;
  v41 = type metadata accessor for DecodingError(0);
  v39 = *(_QWORD *)(v41 - 8);
  v10 = __chkstk_darwin(v41);
  v38 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v13 = (char *)&v36 - v12;
  v14 = type metadata accessor for JSONContext(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a2, v14);
  v18 = Dictionary<>.init(jsonContext:)(v17);
  v19 = a3();
  v37 = a4;
  JSONObject.decode<A>(_:withUserInfo:)(&v42, a4, v18, a4, v19);
  if (v5)
  {
    v36 = a2;
    v40 = a1;
    swift_bridgeObjectRelease(v18);
    v42 = v5;
    swift_errorRetain(v5);
    v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2B08);
    v21 = v41;
    if (swift_dynamicCast(v13, &v42, v20, v41, 0))
    {
      swift_errorRelease(v5);
      v22 = v38;
      v23 = v39;
      (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v38, v13, v21);
      v24 = type metadata accessor for JSONError(0);
      v25 = sub_F1C0((unint64_t *)&qword_3B0CB0, (void (*)(uint64_t))&type metadata accessor for JSONError, (uint64_t)&protocol conformance descriptor for JSONError);
      swift_allocError(v24, v25, 0, 0);
      v27 = v26;
      v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2CF0);
      v29 = swift_allocObject(v28, 40, 7);
      *(_OWORD *)(v29 + 16) = xmmword_2EA0D0;
      *(_QWORD *)(v29 + 32) = swift_allocError(v21, &protocol witness table for DecodingError, 0, 0);
      (*(void (**)(uint64_t, char *, uint64_t))(v23 + 16))(v30, v22, v21);
      *v27 = v37;
      v27[1] = v29;
      v31 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v24 - 8) + 104))(v27, enum case for JSONError.malformedDocument(_:), v24);
      swift_willThrow(v31);
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v36, v14);
      v32 = type metadata accessor for JSONObject(0);
      (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v32 - 8) + 8))(v40, v32);
      (*(void (**)(char *, uint64_t))(v23 + 8))(v22, v21);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v36, v14);
      v35 = type metadata accessor for JSONObject(0);
      (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v35 - 8) + 8))(v40, v35);
    }
    return swift_errorRelease(v42);
  }
  else
  {
    swift_bridgeObjectRelease(v18);
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(a2, v14);
    v33 = type metadata accessor for JSONObject(0);
    result = (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v33 - 8) + 8))(a1, v33);
    *v40 = v42;
  }
  return result;
}

_QWORD *sub_449EC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  _QWORD *v38;
  uint64_t v39;

  v5 = type metadata accessor for DecodingError(0);
  v39 = *(_QWORD *)(v5 - 8);
  v6 = __chkstk_darwin(v5);
  v37 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v9 = (char *)&v32 - v8;
  v10 = type metadata accessor for JSONContext(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a2, v10);
  v14 = Dictionary<>.init(jsonContext:)(v13);
  v15 = sub_55F60();
  v16 = &type metadata for Color;
  JSONObject.decode<A>(_:withUserInfo:)(&v38, &type metadata for Color, v14, &type metadata for Color, v15);
  if (v2)
  {
    v33 = v11;
    v34 = v10;
    v35 = a2;
    v36 = a1;
    swift_bridgeObjectRelease();
    v38 = v2;
    swift_errorRetain(v2);
    v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2B08);
    if (swift_dynamicCast(v9, &v38, v17, v5, 0))
    {
      swift_errorRelease(v2);
      v18 = v39;
      v19 = v37;
      (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v37, v9, v5);
      v20 = type metadata accessor for JSONError(0);
      v21 = sub_F1C0((unint64_t *)&qword_3B0CB0, (void (*)(uint64_t))&type metadata accessor for JSONError, (uint64_t)&protocol conformance descriptor for JSONError);
      swift_allocError(v20, v21, 0, 0);
      v23 = v22;
      v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2CF0);
      v25 = swift_allocObject(v24, 40, 7);
      *(_OWORD *)(v25 + 16) = xmmword_2EA0D0;
      *(_QWORD *)(v25 + 32) = swift_allocError(v5, &protocol witness table for DecodingError, 0, 0);
      (*(void (**)(uint64_t, char *, uint64_t))(v18 + 16))(v26, v19, v5);
      *v23 = &type metadata for Color;
      v23[1] = v25;
      v27 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v20 - 8) + 104))(v23, enum case for JSONError.malformedDocument(_:), v20);
      swift_willThrow(v27);
      (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v35, v34);
      v28 = type metadata accessor for JSONObject(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 8))(v36, v28);
      (*(void (**)(char *, uint64_t))(v18 + 8))(v19, v5);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v35, v34);
      v30 = type metadata accessor for JSONObject(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 8))(v36, v30);
    }
    swift_errorRelease(v38);
  }
  else
  {
    swift_bridgeObjectRelease();
    v16 = v38;
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a2, v10);
    v29 = type metadata accessor for JSONObject(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 8))(a1, v29);
  }
  return v16;
}

_QWORD *sub_44D08(uint64_t a1, uint64_t a2)
{
  return sub_45474(a1, a2, (uint64_t (*)(void))sub_55BA8, (uint64_t)&type metadata for ActionMenu.ID);
}

uint64_t sub_44D2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return sub_44D84(a1, a2, (void (*)(uint64_t))type metadata accessor for ActionMenu.Item, &qword_3B2D80, (uint64_t)&protocol conformance descriptor for ActionMenu.Item, a3);
}

uint64_t sub_44D58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return sub_44D84(a1, a2, (void (*)(uint64_t))type metadata accessor for ActionMenu.Child, &qword_3B2D88, (uint64_t)&protocol conformance descriptor for ActionMenu.Child, a3);
}

uint64_t sub_44D84@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t)@<X2>, unint64_t *a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v45 = a5;
  v44 = a6;
  v10 = type metadata accessor for DecodingError(0);
  v42 = *(_QWORD *)(v10 - 8);
  v43 = v10;
  v11 = __chkstk_darwin(v10);
  v41 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v14 = (char *)&v39 - v13;
  v15 = (_QWORD *)type metadata accessor for JSONContext(0);
  v16 = *(v15 - 1);
  __chkstk_darwin(v15);
  v18 = (char *)&v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = ((uint64_t (*)(_QWORD))a3)(0);
  (*(void (**)(char *, uint64_t, _QWORD *))(v16 + 16))(v18, a2, v15);
  v20 = Dictionary<>.init(jsonContext:)(v18);
  v21 = sub_F1C0(a4, a3, v45);
  v45 = v19;
  v22 = v46;
  JSONObject.decode<A>(_:withUserInfo:)(v44, v19, v20, v19, v21);
  if (v22)
  {
    v40 = v16;
    v44 = v15;
    v46 = a2;
    swift_bridgeObjectRelease(v20);
    v47 = v22;
    swift_errorRetain(v22);
    v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2B08);
    v24 = v43;
    if (swift_dynamicCast(v14, &v47, v23, v43, 0))
    {
      swift_errorRelease(v22);
      v26 = v41;
      v25 = v42;
      (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v41, v14, v24);
      v27 = type metadata accessor for JSONError(0);
      v28 = sub_F1C0((unint64_t *)&qword_3B0CB0, (void (*)(uint64_t))&type metadata accessor for JSONError, (uint64_t)&protocol conformance descriptor for JSONError);
      swift_allocError(v27, v28, 0, 0);
      v30 = v29;
      v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2CF0);
      v32 = swift_allocObject(v31, 40, 7);
      *(_OWORD *)(v32 + 16) = xmmword_2EA0D0;
      *(_QWORD *)(v32 + 32) = swift_allocError(v24, &protocol witness table for DecodingError, 0, 0);
      (*(void (**)(uint64_t, char *, uint64_t))(v25 + 16))(v33, v26, v24);
      *v30 = v45;
      v30[1] = v32;
      v34 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v27 - 8) + 104))(v30, enum case for JSONError.malformedDocument(_:), v27);
      swift_willThrow(v34);
      (*(void (**)(uint64_t, _QWORD *))(v40 + 8))(v46, v44);
      v35 = type metadata accessor for JSONObject(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 8))(a1, v35);
      (*(void (**)(char *, uint64_t))(v25 + 8))(v26, v24);
    }
    else
    {
      (*(void (**)(uint64_t, _QWORD *))(v40 + 8))(v46, v44);
      v38 = type metadata accessor for JSONObject(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 8))(a1, v38);
    }
    return swift_errorRelease(v47);
  }
  else
  {
    swift_bridgeObjectRelease(v20);
    (*(void (**)(uint64_t, _QWORD *))(v16 + 8))(a2, v15);
    v36 = type metadata accessor for JSONObject(0);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 8))(a1, v36);
  }
}

uint64_t sub_450C0(uint64_t a1, uint64_t a2)
{
  return sub_45108(a1, a2, (uint64_t (*)(void))sub_55B64, (uint64_t)&type metadata for ActionMenu.ItemRole);
}

uint64_t sub_450E4(uint64_t a1, uint64_t a2)
{
  return sub_45108(a1, a2, (uint64_t (*)(void))sub_55B20, (uint64_t)&type metadata for ActionMenu.ItemState);
}

uint64_t sub_45108(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v43 = type metadata accessor for DecodingError(0);
  v41 = *(_QWORD *)(v43 - 8);
  __chkstk_darwin(v43);
  v42 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v12 = (char *)&v37 - v11;
  v13 = type metadata accessor for JSONContext(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v14 + 16))(v17, a2, v13, v15);
  v18 = Dictionary<>.init(jsonContext:)(v17);
  v19 = a3();
  v40 = a4;
  JSONObject.decode<A>(_:withUserInfo:)(&v45, a4, v18, a4, v19);
  if (v4)
  {
    v39 = a2;
    swift_bridgeObjectRelease();
    v44 = v4;
    swift_errorRetain(v4);
    v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2B08);
    v21 = v43;
    if (swift_dynamicCast(v12, &v44, v20, v43, 0))
    {
      swift_errorRelease(v4);
      v22 = v41;
      (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v42, v12, v21);
      v23 = type metadata accessor for JSONError(0);
      v24 = sub_F1C0((unint64_t *)&qword_3B0CB0, (void (*)(uint64_t))&type metadata accessor for JSONError, (uint64_t)&protocol conformance descriptor for JSONError);
      swift_allocError(v23, v24, 0, 0);
      v26 = v25;
      v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2CF0);
      v28 = swift_allocObject(v27, 40, 7);
      v38 = a1;
      v29 = v28;
      *(_OWORD *)(v28 + 16) = xmmword_2EA0D0;
      *(_QWORD *)(v28 + 32) = swift_allocError(v21, &protocol witness table for DecodingError, 0, 0);
      v30 = v42;
      (*(void (**)(uint64_t, char *, uint64_t))(v22 + 16))(v31, v42, v21);
      *v26 = v40;
      v26[1] = v29;
      v32 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v23 - 8) + 104))(v26, enum case for JSONError.malformedDocument(_:), v23);
      swift_willThrow(v32);
      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v39, v13);
      v33 = type metadata accessor for JSONObject(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 8))(v38, v33);
      (*(void (**)(char *, uint64_t))(v22 + 8))(v30, v21);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v39, v13);
      v35 = type metadata accessor for JSONObject(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 8))(a1, v35);
    }
    swift_errorRelease(v44);
  }
  else
  {
    swift_bridgeObjectRelease();
    v21 = v45;
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(a2, v13);
    v34 = type metadata accessor for JSONObject(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 8))(a1, v34);
  }
  return v21;
}

uint64_t sub_45424@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return sub_44D84(a1, a2, (void (*)(uint64_t))type metadata accessor for ActionMenu, &qword_3B2E18, (uint64_t)&protocol conformance descriptor for ActionMenu, a3);
}

_QWORD *sub_45450(uint64_t a1, uint64_t a2)
{
  return sub_45474(a1, a2, (uint64_t (*)(void))sub_55ADC, (uint64_t)&type metadata for ActionButton.ID);
}

_QWORD *sub_45474(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4)
{
  _QWORD *v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;

  v42 = type metadata accessor for DecodingError(0);
  v40 = *(_QWORD *)(v42 - 8);
  __chkstk_darwin(v42);
  v39 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v12 = (char *)&v35 - v11;
  v13 = type metadata accessor for JSONContext(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v14 + 16))(v17, a2, v13, v15);
  v18 = (_QWORD *)Dictionary<>.init(jsonContext:)(v17);
  v19 = a3();
  v38 = a4;
  JSONObject.decode<A>(_:withUserInfo:)(&v41, a4, v18, a4, v19);
  if (v4)
  {
    v35 = v14;
    v36 = v13;
    v37 = a2;
    swift_bridgeObjectRelease();
    v41 = v4;
    swift_errorRetain(v4);
    v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2B08);
    v21 = v42;
    if (swift_dynamicCast(v12, &v41, v20, v42, 0))
    {
      swift_errorRelease(v4);
      v22 = v39;
      v23 = v40;
      (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v39, v12, v21);
      v24 = type metadata accessor for JSONError(0);
      v25 = sub_F1C0((unint64_t *)&qword_3B0CB0, (void (*)(uint64_t))&type metadata accessor for JSONError, (uint64_t)&protocol conformance descriptor for JSONError);
      swift_allocError(v24, v25, 0, 0);
      v18 = v26;
      v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2CF0);
      v28 = swift_allocObject(v27, 40, 7);
      *(_OWORD *)(v28 + 16) = xmmword_2EA0D0;
      *(_QWORD *)(v28 + 32) = swift_allocError(v21, &protocol witness table for DecodingError, 0, 0);
      (*(void (**)(uint64_t, char *, uint64_t))(v23 + 16))(v29, v22, v21);
      *v18 = v38;
      v18[1] = v28;
      v30 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v24 - 8) + 104))(v18, enum case for JSONError.malformedDocument(_:), v24);
      swift_willThrow(v30);
      (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v37, v36);
      v31 = type metadata accessor for JSONObject(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 8))(a1, v31);
      (*(void (**)(char *, uint64_t))(v23 + 8))(v22, v21);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v37, v36);
      v33 = type metadata accessor for JSONObject(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 8))(a1, v33);
    }
    swift_errorRelease(v41);
  }
  else
  {
    swift_bridgeObjectRelease();
    v18 = v41;
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(a2, v13);
    v32 = type metadata accessor for JSONObject(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 8))(a1, v32);
  }
  return v18;
}

uint64_t sub_45794@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, char *, uint64_t);
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v36 = a3;
  v6 = type metadata accessor for DecodingError(0);
  v38 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v37 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v34 - v9;
  v11 = type metadata accessor for JSONContext(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v12 + 16))(v15, a2, v11, v13);
  v16 = Dictionary<>.init(jsonContext:)(v15);
  v17 = sub_55A98();
  JSONObject.decode<A>(_:withUserInfo:)(&v40, &type metadata for ActionButton.Role, v16, &type metadata for ActionButton.Role, v17);
  if (v3)
  {
    v35 = a2;
    v36 = a1;
    swift_bridgeObjectRelease();
    v39 = v3;
    swift_errorRetain(v3);
    v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2B08);
    if (swift_dynamicCast(v10, &v39, v18, v6, 0))
    {
      swift_errorRelease(v3);
      v19 = v38;
      (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v37, v10, v6);
      v20 = type metadata accessor for JSONError(0);
      v21 = sub_F1C0((unint64_t *)&qword_3B0CB0, (void (*)(uint64_t))&type metadata accessor for JSONError, (uint64_t)&protocol conformance descriptor for JSONError);
      swift_allocError(v20, v21, 0, 0);
      v23 = v22;
      v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2CF0);
      v25 = swift_allocObject(v24, 40, 7);
      *(_OWORD *)(v25 + 16) = xmmword_2EA0D0;
      *(_QWORD *)(v25 + 32) = swift_allocError(v6, &protocol witness table for DecodingError, 0, 0);
      v26 = *(void (**)(uint64_t, char *, uint64_t))(v19 + 16);
      v27 = v37;
      v26(v28, v37, v6);
      *v23 = &type metadata for ActionButton.Role;
      v23[1] = v25;
      v29 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v20 - 8) + 104))(v23, enum case for JSONError.malformedDocument(_:), v20);
      swift_willThrow(v29);
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v35, v11);
      v30 = type metadata accessor for JSONObject(0);
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(v30 - 8) + 8))(v36, v30);
      (*(void (**)(char *, uint64_t))(v38 + 8))(v27, v6);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v35, v11);
      v33 = type metadata accessor for JSONObject(0);
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(v33 - 8) + 8))(v36, v33);
    }
    return swift_errorRelease(v39);
  }
  else
  {
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a2, v11);
    v31 = type metadata accessor for JSONObject(0);
    result = (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)(v31 - 8) + 8))(a1, v31);
    *v36 = v40;
  }
  return result;
}

uint64_t sub_45AB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return sub_44D84(a1, a2, (void (*)(uint64_t))type metadata accessor for ActionButton, &qword_3B2D58, (uint64_t)&protocol conformance descriptor for ActionButton, a3);
}

uint64_t sub_45ADC(uint64_t a1, uint64_t a2)
{
  return sub_45B00(a1, a2, (uint64_t (*)(void))sub_55BEC, (uint64_t)&type metadata for SearchOrigin);
}

uint64_t sub_45B00(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v42 = type metadata accessor for DecodingError(0);
  v40 = *(_QWORD *)(v42 - 8);
  v9 = __chkstk_darwin(v42);
  v41 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v12 = (char *)&v36 - v11;
  v13 = type metadata accessor for JSONContext(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a2, v13);
  v17 = Dictionary<>.init(jsonContext:)(v16);
  v18 = a3();
  v39 = a4;
  JSONObject.decode<A>(_:withUserInfo:)(&v44, a4, v17, a4, v18);
  if (v4)
  {
    v38 = a2;
    swift_bridgeObjectRelease(v17);
    v43 = v4;
    swift_errorRetain(v4);
    v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2B08);
    v20 = v42;
    if (swift_dynamicCast(v12, &v43, v19, v42, 0))
    {
      swift_errorRelease(v4);
      v21 = v40;
      (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v41, v12, v20);
      v22 = type metadata accessor for JSONError(0);
      v23 = sub_F1C0((unint64_t *)&qword_3B0CB0, (void (*)(uint64_t))&type metadata accessor for JSONError, (uint64_t)&protocol conformance descriptor for JSONError);
      swift_allocError(v22, v23, 0, 0);
      v25 = v24;
      v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2CF0);
      v27 = swift_allocObject(v26, 40, 7);
      v37 = a1;
      v28 = v27;
      *(_OWORD *)(v27 + 16) = xmmword_2EA0D0;
      *(_QWORD *)(v27 + 32) = swift_allocError(v20, &protocol witness table for DecodingError, 0, 0);
      v29 = v41;
      (*(void (**)(uint64_t, char *, uint64_t))(v21 + 16))(v30, v41, v20);
      *v25 = v39;
      v25[1] = v28;
      v31 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v22 - 8) + 104))(v25, enum case for JSONError.malformedDocument(_:), v22);
      swift_willThrow(v31);
      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v38, v13);
      v32 = type metadata accessor for JSONObject(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 8))(v37, v32);
      (*(void (**)(char *, uint64_t))(v21 + 8))(v29, v20);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v38, v13);
      v34 = type metadata accessor for JSONObject(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 8))(a1, v34);
    }
    swift_errorRelease(v43);
  }
  else
  {
    swift_bridgeObjectRelease(v17);
    v20 = v44;
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(a2, v13);
    v33 = type metadata accessor for JSONObject(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 8))(a1, v33);
  }
  return v20;
}

uint64_t sub_45E1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return sub_44D84(a1, a2, (void (*)(uint64_t))type metadata accessor for CategorySection, &qword_3B2E00, (uint64_t)&protocol conformance descriptor for CategorySection, a3);
}

uint64_t sub_45E48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return sub_44D84(a1, a2, (void (*)(uint64_t))type metadata accessor for CategorySelection, &qword_3B2DD0, (uint64_t)&protocol conformance descriptor for CategorySelection, a3);
}

uint64_t sub_45E74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, char *, uint64_t);
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  __int16 v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;

  v7 = type metadata accessor for DecodingError(0);
  v40 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v37 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v36 - v10;
  v12 = type metadata accessor for JSONContext(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v13 + 16))(v16, a2, v12, v14);
  v17 = Dictionary<>.init(jsonContext:)(v16);
  v18 = sub_55CB8();
  JSONObject.decode<A>(_:withUserInfo:)(&v38, &type metadata for ChannelPageIntent, v17, &type metadata for ChannelPageIntent, v18);
  if (v3)
  {
    v36 = a2;
    swift_bridgeObjectRelease();
    v38 = v3;
    swift_errorRetain(v3);
    v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2B08);
    if (swift_dynamicCast(v11, &v38, v19, v7, 0))
    {
      swift_errorRelease(v3);
      v20 = v40;
      (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v37, v11, v7);
      v21 = type metadata accessor for JSONError(0);
      v22 = sub_F1C0((unint64_t *)&qword_3B0CB0, (void (*)(uint64_t))&type metadata accessor for JSONError, (uint64_t)&protocol conformance descriptor for JSONError);
      swift_allocError(v21, v22, 0, 0);
      v24 = v23;
      v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2CF0);
      v26 = swift_allocObject(v25, 40, 7);
      *(_OWORD *)(v26 + 16) = xmmword_2EA0D0;
      *(_QWORD *)(v26 + 32) = swift_allocError(v7, &protocol witness table for DecodingError, 0, 0);
      v27 = *(void (**)(uint64_t, char *, uint64_t))(v20 + 16);
      v28 = v37;
      v27(v29, v37, v7);
      *v24 = &type metadata for ChannelPageIntent;
      v24[1] = v26;
      v30 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v21 - 8) + 104))(v24, enum case for JSONError.malformedDocument(_:), v21);
      swift_willThrow(v30);
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v36, v12);
      v31 = type metadata accessor for JSONObject(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 8))(a1, v31);
      (*(void (**)(char *, uint64_t))(v40 + 8))(v28, v7);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v36, v12);
      v35 = type metadata accessor for JSONObject(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 8))(a1, v35);
    }
    return swift_errorRelease(v38);
  }
  else
  {
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a2, v12);
    v32 = type metadata accessor for JSONObject(0);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 8))(a1, v32);
    v34 = v39;
    *(_QWORD *)a3 = v38;
    *(_WORD *)(a3 + 8) = v34;
  }
  return result;
}

uint64_t sub_4619C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return sub_44D84(a1, a2, (void (*)(uint64_t))type metadata accessor for HighlightResource, &qword_3B2D48, (uint64_t)&protocol conformance descriptor for HighlightResource, a3);
}

uint64_t sub_461C8@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  return sub_461EC(a1, a2, (uint64_t (*)(void))sub_55A54, (uint64_t)&type metadata for HighlightsPageIntent, a3);
}

uint64_t sub_461EC@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  _OWORD *v41;
  __int128 v42;
  uint64_t v43;

  v41 = a5;
  v43 = type metadata accessor for DecodingError(0);
  v40 = *(_QWORD *)(v43 - 8);
  v10 = __chkstk_darwin(v43);
  v39 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v13 = (char *)&v36 - v12;
  v14 = type metadata accessor for JSONContext(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a2, v14);
  v18 = Dictionary<>.init(jsonContext:)(v17);
  v19 = a3();
  v38 = a4;
  JSONObject.decode<A>(_:withUserInfo:)(&v42, a4, v18, a4, v19);
  if (v5)
  {
    v37 = a2;
    v41 = a1;
    swift_bridgeObjectRelease();
    *(_QWORD *)&v42 = v5;
    swift_errorRetain(v5);
    v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2B08);
    v21 = v43;
    if (swift_dynamicCast(v13, &v42, v20, v43, 0))
    {
      swift_errorRelease(v5);
      v22 = v39;
      v23 = v40;
      (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v39, v13, v21);
      v24 = type metadata accessor for JSONError(0);
      v25 = sub_F1C0((unint64_t *)&qword_3B0CB0, (void (*)(uint64_t))&type metadata accessor for JSONError, (uint64_t)&protocol conformance descriptor for JSONError);
      swift_allocError(v24, v25, 0, 0);
      v27 = v26;
      v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2CF0);
      v29 = swift_allocObject(v28, 40, 7);
      *(_OWORD *)(v29 + 16) = xmmword_2EA0D0;
      *(_QWORD *)(v29 + 32) = swift_allocError(v21, &protocol witness table for DecodingError, 0, 0);
      (*(void (**)(uint64_t, char *, uint64_t))(v23 + 16))(v30, v22, v21);
      *v27 = v38;
      v27[1] = v29;
      v31 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v24 - 8) + 104))(v27, enum case for JSONError.malformedDocument(_:), v24);
      swift_willThrow(v31);
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v37, v14);
      v32 = type metadata accessor for JSONObject(0);
      (*(void (**)(_OWORD *, uint64_t))(*(_QWORD *)(v32 - 8) + 8))(v41, v32);
      (*(void (**)(char *, uint64_t))(v23 + 8))(v22, v21);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v37, v14);
      v35 = type metadata accessor for JSONObject(0);
      (*(void (**)(_OWORD *, uint64_t))(*(_QWORD *)(v35 - 8) + 8))(v41, v35);
    }
    return swift_errorRelease(v42);
  }
  else
  {
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(a2, v14);
    v33 = type metadata accessor for JSONObject(0);
    result = (*(uint64_t (**)(_OWORD *, uint64_t))(*(_QWORD *)(v33 - 8) + 8))(a1, v33);
    *v41 = v42;
  }
  return result;
}

uint64_t sub_46510@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return sub_44D84(a1, a2, (void (*)(uint64_t))type metadata accessor for ManageCategoriesPage, &qword_3B2D40, (uint64_t)&protocol conformance descriptor for ManageCategoriesPage, a3);
}

uint64_t sub_4653C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, char *, uint64_t);
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  _QWORD v37[2];
  uint64_t v38;

  v7 = type metadata accessor for DecodingError(0);
  v38 = *(_QWORD *)(v7 - 8);
  v8 = __chkstk_darwin(v7);
  v36 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)&v35 - v10;
  v12 = type metadata accessor for JSONContext(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a2, v12);
  v16 = Dictionary<>.init(jsonContext:)(v15);
  v17 = sub_55E94();
  JSONObject.decode<A>(_:withUserInfo:)(v37, &type metadata for SearchHintsPageIntent, v16, &type metadata for SearchHintsPageIntent, v17);
  if (v3)
  {
    v35 = a2;
    swift_bridgeObjectRelease(v16);
    v37[0] = v3;
    swift_errorRetain(v3);
    v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2B08);
    if (swift_dynamicCast(v11, v37, v18, v7, 0))
    {
      swift_errorRelease(v3);
      v19 = v38;
      (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v36, v11, v7);
      v20 = type metadata accessor for JSONError(0);
      v21 = sub_F1C0((unint64_t *)&qword_3B0CB0, (void (*)(uint64_t))&type metadata accessor for JSONError, (uint64_t)&protocol conformance descriptor for JSONError);
      swift_allocError(v20, v21, 0, 0);
      v23 = v22;
      v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2CF0);
      v25 = swift_allocObject(v24, 40, 7);
      *(_OWORD *)(v25 + 16) = xmmword_2EA0D0;
      *(_QWORD *)(v25 + 32) = swift_allocError(v7, &protocol witness table for DecodingError, 0, 0);
      v26 = *(void (**)(uint64_t, char *, uint64_t))(v19 + 16);
      v27 = v36;
      v26(v28, v36, v7);
      *v23 = &type metadata for SearchHintsPageIntent;
      v23[1] = v25;
      v29 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v20 - 8) + 104))(v23, enum case for JSONError.malformedDocument(_:), v20);
      swift_willThrow(v29);
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v35, v12);
      v30 = type metadata accessor for JSONObject(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 8))(a1, v30);
      (*(void (**)(char *, uint64_t))(v38 + 8))(v27, v7);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v35, v12);
      v34 = type metadata accessor for JSONObject(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 8))(a1, v34);
    }
    return swift_errorRelease(v37[0]);
  }
  else
  {
    swift_bridgeObjectRelease(v16);
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a2, v12);
    v31 = type metadata accessor for JSONObject(0);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 8))(a1, v31);
    v33 = v37[1];
    *a3 = v37[0];
    a3[1] = v33;
  }
  return result;
}

uint64_t sub_4685C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, char *, uint64_t);
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  _QWORD v38[2];
  uint64_t v39;

  v7 = type metadata accessor for DecodingError(0);
  v39 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v37 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v36 - v10;
  v12 = type metadata accessor for JSONContext(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v13 + 16))(v16, a2, v12, v14);
  v17 = Dictionary<>.init(jsonContext:)(v16);
  v18 = sub_559CC();
  JSONObject.decode<A>(_:withUserInfo:)(v38, &type metadata for RecommendationsMetadata.Categories.Metadata, v17, &type metadata for RecommendationsMetadata.Categories.Metadata, v18);
  if (v3)
  {
    v36 = a2;
    swift_bridgeObjectRelease();
    v38[0] = v3;
    swift_errorRetain(v3);
    v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2B08);
    if (swift_dynamicCast(v11, v38, v19, v7, 0))
    {
      swift_errorRelease(v3);
      v20 = v39;
      (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v37, v11, v7);
      v21 = type metadata accessor for JSONError(0);
      v22 = sub_F1C0((unint64_t *)&qword_3B0CB0, (void (*)(uint64_t))&type metadata accessor for JSONError, (uint64_t)&protocol conformance descriptor for JSONError);
      swift_allocError(v21, v22, 0, 0);
      v24 = v23;
      v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2CF0);
      v26 = swift_allocObject(v25, 40, 7);
      *(_OWORD *)(v26 + 16) = xmmword_2EA0D0;
      *(_QWORD *)(v26 + 32) = swift_allocError(v7, &protocol witness table for DecodingError, 0, 0);
      v27 = *(void (**)(uint64_t, char *, uint64_t))(v20 + 16);
      v28 = v37;
      v27(v29, v37, v7);
      *v24 = &type metadata for RecommendationsMetadata.Categories.Metadata;
      v24[1] = v26;
      v30 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v21 - 8) + 104))(v24, enum case for JSONError.malformedDocument(_:), v21);
      swift_willThrow(v30);
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v36, v12);
      v31 = type metadata accessor for JSONObject(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 8))(a1, v31);
      (*(void (**)(char *, uint64_t))(v39 + 8))(v28, v7);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v36, v12);
      v35 = type metadata accessor for JSONObject(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 8))(a1, v35);
    }
    return swift_errorRelease(v38[0]);
  }
  else
  {
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a2, v12);
    v32 = type metadata accessor for JSONObject(0);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 8))(a1, v32);
    v34 = v38[1];
    *a3 = v38[0];
    a3[1] = v34;
  }
  return result;
}

uint64_t sub_46B84@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  return sub_461EC(a1, a2, (uint64_t (*)(void))sub_558BC, (uint64_t)&type metadata for RecommendationsMetadata.Categories, a3);
}

uint64_t sub_46BA8@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  return sub_46F18(a1, a2, (uint64_t (*)(void))sub_55900, (uint64_t)&type metadata for RecommendationsMetadata.Shows.Metadata, a3);
}

uint64_t sub_46BCC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, char *, uint64_t);
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;

  v7 = type metadata accessor for DecodingError(0);
  v40 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v37 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v36 - v10;
  v12 = type metadata accessor for JSONContext(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v13 + 16))(v16, a2, v12, v14);
  v17 = Dictionary<>.init(jsonContext:)(v16);
  v18 = sub_557F0();
  JSONObject.decode<A>(_:withUserInfo:)(&v38, &type metadata for RecommendationsMetadata.Shows, v17, &type metadata for RecommendationsMetadata.Shows, v18);
  if (v3)
  {
    v36 = a2;
    swift_bridgeObjectRelease();
    *(_QWORD *)&v38 = v3;
    swift_errorRetain(v3);
    v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2B08);
    if (swift_dynamicCast(v11, &v38, v19, v7, 0))
    {
      swift_errorRelease(v3);
      v20 = v40;
      (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v37, v11, v7);
      v21 = type metadata accessor for JSONError(0);
      v22 = sub_F1C0((unint64_t *)&qword_3B0CB0, (void (*)(uint64_t))&type metadata accessor for JSONError, (uint64_t)&protocol conformance descriptor for JSONError);
      swift_allocError(v21, v22, 0, 0);
      v24 = v23;
      v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2CF0);
      v26 = swift_allocObject(v25, 40, 7);
      *(_OWORD *)(v26 + 16) = xmmword_2EA0D0;
      *(_QWORD *)(v26 + 32) = swift_allocError(v7, &protocol witness table for DecodingError, 0, 0);
      v27 = *(void (**)(uint64_t, char *, uint64_t))(v20 + 16);
      v28 = v37;
      v27(v29, v37, v7);
      *v24 = &type metadata for RecommendationsMetadata.Shows;
      v24[1] = v26;
      v30 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v21 - 8) + 104))(v24, enum case for JSONError.malformedDocument(_:), v21);
      swift_willThrow(v30);
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v36, v12);
      v31 = type metadata accessor for JSONObject(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 8))(a1, v31);
      (*(void (**)(char *, uint64_t))(v40 + 8))(v28, v7);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v36, v12);
      v35 = type metadata accessor for JSONObject(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 8))(a1, v35);
    }
    return swift_errorRelease(v38);
  }
  else
  {
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a2, v12);
    v32 = type metadata accessor for JSONObject(0);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 8))(a1, v32);
    v34 = v39;
    *(_OWORD *)a3 = v38;
    *(_QWORD *)(a3 + 16) = v34;
  }
  return result;
}

uint64_t sub_46EF4@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  return sub_46F18(a1, a2, (uint64_t (*)(void))sub_55988, (uint64_t)&type metadata for RecommendationsMetadata.Channels.Metadata, a3);
}

uint64_t sub_46F18@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t result;
  char v36;
  _OWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _OWORD *v43;
  char *v44;
  __int128 v45;
  char v46;
  uint64_t v47;

  v43 = a5;
  v47 = type metadata accessor for DecodingError(0);
  v42 = *(_QWORD *)(v47 - 8);
  __chkstk_darwin(v47);
  v44 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v39 - v12;
  v14 = type metadata accessor for JSONContext(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v15 + 16))(v18, a2, v14, v16);
  v19 = Dictionary<>.init(jsonContext:)(v18);
  v20 = a3();
  v41 = a4;
  JSONObject.decode<A>(_:withUserInfo:)(&v45, a4, v19, a4, v20);
  if (v5)
  {
    v40 = a2;
    v43 = a1;
    swift_bridgeObjectRelease();
    *(_QWORD *)&v45 = v5;
    swift_errorRetain(v5);
    v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2B08);
    v22 = v47;
    if (swift_dynamicCast(v13, &v45, v21, v47, 0))
    {
      swift_errorRelease(v5);
      v23 = v42;
      (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v44, v13, v22);
      v24 = type metadata accessor for JSONError(0);
      v25 = sub_F1C0((unint64_t *)&qword_3B0CB0, (void (*)(uint64_t))&type metadata accessor for JSONError, (uint64_t)&protocol conformance descriptor for JSONError);
      swift_allocError(v24, v25, 0, 0);
      v27 = v26;
      v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2CF0);
      v29 = swift_allocObject(v28, 40, 7);
      *(_OWORD *)(v29 + 16) = xmmword_2EA0D0;
      *(_QWORD *)(v29 + 32) = swift_allocError(v22, &protocol witness table for DecodingError, 0, 0);
      v30 = v44;
      (*(void (**)(uint64_t, char *, uint64_t))(v23 + 16))(v31, v44, v22);
      *v27 = v41;
      v27[1] = v29;
      v32 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v24 - 8) + 104))(v27, enum case for JSONError.malformedDocument(_:), v24);
      swift_willThrow(v32);
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v40, v14);
      v33 = type metadata accessor for JSONObject(0);
      (*(void (**)(_OWORD *, uint64_t))(*(_QWORD *)(v33 - 8) + 8))(v43, v33);
      (*(void (**)(char *, uint64_t))(v23 + 8))(v30, v22);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v40, v14);
      v38 = type metadata accessor for JSONObject(0);
      (*(void (**)(_OWORD *, uint64_t))(*(_QWORD *)(v38 - 8) + 8))(v43, v38);
    }
    return swift_errorRelease(v45);
  }
  else
  {
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(a2, v14);
    v34 = type metadata accessor for JSONObject(0);
    result = (*(uint64_t (**)(_OWORD *, uint64_t))(*(_QWORD *)(v34 - 8) + 8))(a1, v34);
    v36 = v46;
    v37 = v43;
    *v43 = v45;
    *((_BYTE *)v37 + 16) = v36;
  }
  return result;
}

uint64_t sub_47248@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  return sub_461EC(a1, a2, (uint64_t (*)(void))sub_55878, (uint64_t)&type metadata for RecommendationsMetadata.Channels, a3);
}

uint64_t sub_4726C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, char *, uint64_t);
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  char v34;
  char v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  __int128 v43;
  char v44;
  char v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  char v49;
  uint64_t v50;

  v7 = type metadata accessor for DecodingError(0);
  v50 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v42 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v41 - v10;
  v12 = type metadata accessor for JSONContext(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v13 + 16))(v16, a2, v12, v14);
  v17 = Dictionary<>.init(jsonContext:)(v16);
  v18 = sub_55944();
  JSONObject.decode<A>(_:withUserInfo:)(&v43, &type metadata for RecommendationsMetadata.Episodes.Metadata, v17, &type metadata for RecommendationsMetadata.Episodes.Metadata, v18);
  if (v3)
  {
    v41 = a2;
    swift_bridgeObjectRelease();
    *(_QWORD *)&v43 = v3;
    swift_errorRetain(v3);
    v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2B08);
    if (swift_dynamicCast(v11, &v43, v19, v7, 0))
    {
      swift_errorRelease(v3);
      v20 = v50;
      (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v42, v11, v7);
      v21 = type metadata accessor for JSONError(0);
      v22 = sub_F1C0((unint64_t *)&qword_3B0CB0, (void (*)(uint64_t))&type metadata accessor for JSONError, (uint64_t)&protocol conformance descriptor for JSONError);
      swift_allocError(v21, v22, 0, 0);
      v24 = v23;
      v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2CF0);
      v26 = swift_allocObject(v25, 40, 7);
      *(_OWORD *)(v26 + 16) = xmmword_2EA0D0;
      *(_QWORD *)(v26 + 32) = swift_allocError(v7, &protocol witness table for DecodingError, 0, 0);
      v27 = *(void (**)(uint64_t, char *, uint64_t))(v20 + 16);
      v28 = v42;
      v27(v29, v42, v7);
      *v24 = &type metadata for RecommendationsMetadata.Episodes.Metadata;
      v24[1] = v26;
      v30 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v21 - 8) + 104))(v24, enum case for JSONError.malformedDocument(_:), v21);
      swift_willThrow(v30);
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v41, v12);
      v31 = type metadata accessor for JSONObject(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 8))(a1, v31);
      (*(void (**)(char *, uint64_t))(v50 + 8))(v28, v7);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v41, v12);
      v40 = type metadata accessor for JSONObject(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 8))(a1, v40);
    }
    return swift_errorRelease(v43);
  }
  else
  {
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a2, v12);
    v32 = type metadata accessor for JSONObject(0);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 8))(a1, v32);
    v34 = v44;
    v35 = v45;
    v36 = v46;
    v37 = v47;
    v38 = v48;
    v39 = v49;
    *(_OWORD *)a3 = v43;
    *(_BYTE *)(a3 + 16) = v34;
    *(_BYTE *)(a3 + 17) = v35;
    *(_QWORD *)(a3 + 24) = v36;
    *(_BYTE *)(a3 + 32) = v37;
    *(_QWORD *)(a3 + 40) = v38;
    *(_BYTE *)(a3 + 48) = v39;
  }
  return result;
}

uint64_t sub_475BC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return sub_446C8(a1, a2, (uint64_t (*)(void))sub_55834, (uint64_t)&type metadata for RecommendationsMetadata.Episodes, a3);
}

uint64_t sub_475E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, char *, uint64_t);
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  char v34;
  char v35;
  char v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  _OWORD v41[2];
  char v42;
  char v43;
  char v44;
  uint64_t v45;

  v7 = type metadata accessor for DecodingError(0);
  v45 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v40 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v39 - v10;
  v12 = type metadata accessor for JSONContext(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v13 + 16))(v16, a2, v12, v14);
  v17 = Dictionary<>.init(jsonContext:)(v16);
  v18 = sub_55A10();
  JSONObject.decode<A>(_:withUserInfo:)(v41, &type metadata for RecommendationsMetadata.Analytics, v17, &type metadata for RecommendationsMetadata.Analytics, v18);
  if (v3)
  {
    v39 = a2;
    swift_bridgeObjectRelease();
    *(_QWORD *)&v41[0] = v3;
    swift_errorRetain(v3);
    v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2B08);
    if (swift_dynamicCast(v11, v41, v19, v7, 0))
    {
      swift_errorRelease(v3);
      v20 = v45;
      (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v40, v11, v7);
      v21 = type metadata accessor for JSONError(0);
      v22 = sub_F1C0((unint64_t *)&qword_3B0CB0, (void (*)(uint64_t))&type metadata accessor for JSONError, (uint64_t)&protocol conformance descriptor for JSONError);
      swift_allocError(v21, v22, 0, 0);
      v24 = v23;
      v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2CF0);
      v26 = swift_allocObject(v25, 40, 7);
      *(_OWORD *)(v26 + 16) = xmmword_2EA0D0;
      *(_QWORD *)(v26 + 32) = swift_allocError(v7, &protocol witness table for DecodingError, 0, 0);
      v27 = *(void (**)(uint64_t, char *, uint64_t))(v20 + 16);
      v28 = v40;
      v27(v29, v40, v7);
      *v24 = &type metadata for RecommendationsMetadata.Analytics;
      v24[1] = v26;
      v30 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v21 - 8) + 104))(v24, enum case for JSONError.malformedDocument(_:), v21);
      swift_willThrow(v30);
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v39, v12);
      v31 = type metadata accessor for JSONObject(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 8))(a1, v31);
      (*(void (**)(char *, uint64_t))(v45 + 8))(v28, v7);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v39, v12);
      v38 = type metadata accessor for JSONObject(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 8))(a1, v38);
    }
    return swift_errorRelease(*(_QWORD *)&v41[0]);
  }
  else
  {
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a2, v12);
    v32 = type metadata accessor for JSONObject(0);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 8))(a1, v32);
    v34 = v42;
    v35 = v43;
    v36 = v44;
    v37 = v41[1];
    *(_OWORD *)a3 = v41[0];
    *(_OWORD *)(a3 + 16) = v37;
    *(_BYTE *)(a3 + 32) = v34;
    *(_BYTE *)(a3 + 33) = v35;
    *(_BYTE *)(a3 + 34) = v36;
  }
  return result;
}

uint64_t sub_47918@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, char *, uint64_t);
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  char v34;
  char v35;
  char v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  _OWORD v41[2];
  char v42;
  char v43;
  char v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;

  v7 = type metadata accessor for DecodingError(0);
  v49 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v40 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v39 - v10;
  v12 = type metadata accessor for JSONContext(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v13 + 16))(v16, a2, v12, v14);
  v17 = Dictionary<>.init(jsonContext:)(v16);
  v18 = sub_26F6C();
  JSONObject.decode<A>(_:withUserInfo:)(v41, &type metadata for RecommendationsMetadata, v17, &type metadata for RecommendationsMetadata, v18);
  if (v3)
  {
    v39 = a2;
    swift_bridgeObjectRelease();
    *(_QWORD *)&v41[0] = v3;
    swift_errorRetain(v3);
    v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2B08);
    if (swift_dynamicCast(v11, v41, v19, v7, 0))
    {
      swift_errorRelease(v3);
      v20 = v49;
      (*(void (**)(char *, char *, uint64_t))(v49 + 32))(v40, v11, v7);
      v21 = type metadata accessor for JSONError(0);
      v22 = sub_F1C0((unint64_t *)&qword_3B0CB0, (void (*)(uint64_t))&type metadata accessor for JSONError, (uint64_t)&protocol conformance descriptor for JSONError);
      swift_allocError(v21, v22, 0, 0);
      v24 = v23;
      v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2CF0);
      v26 = swift_allocObject(v25, 40, 7);
      *(_OWORD *)(v26 + 16) = xmmword_2EA0D0;
      *(_QWORD *)(v26 + 32) = swift_allocError(v7, &protocol witness table for DecodingError, 0, 0);
      v27 = *(void (**)(uint64_t, char *, uint64_t))(v20 + 16);
      v28 = v40;
      v27(v29, v40, v7);
      *v24 = &type metadata for RecommendationsMetadata;
      v24[1] = v26;
      v30 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v21 - 8) + 104))(v24, enum case for JSONError.malformedDocument(_:), v21);
      swift_willThrow(v30);
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v39, v12);
      v31 = type metadata accessor for JSONObject(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 8))(a1, v31);
      (*(void (**)(char *, uint64_t))(v49 + 8))(v28, v7);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v39, v12);
      v38 = type metadata accessor for JSONObject(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 8))(a1, v38);
    }
    return swift_errorRelease(*(_QWORD *)&v41[0]);
  }
  else
  {
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a2, v12);
    v32 = type metadata accessor for JSONObject(0);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 8))(a1, v32);
    v34 = v42;
    v35 = v43;
    v36 = v44;
    v37 = v41[1];
    *(_OWORD *)a3 = v41[0];
    *(_OWORD *)(a3 + 16) = v37;
    *(_BYTE *)(a3 + 32) = v34;
    *(_BYTE *)(a3 + 33) = v35;
    *(_BYTE *)(a3 + 34) = v36;
    *(_OWORD *)(a3 + 40) = v45;
    *(_OWORD *)(a3 + 56) = v46;
    *(_OWORD *)(a3 + 72) = v47;
    *(_OWORD *)(a3 + 88) = v48;
  }
  return result;
}

uint64_t sub_47C70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_47CB8(a1, a2, (uint64_t (*)(void))sub_55ED8, (uint64_t)&type metadata for SearchLandingPageIntent, a3);
}

uint64_t sub_47C94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_47CB8(a1, a2, (uint64_t (*)(void))sub_55CFC, (uint64_t)&type metadata for ManageCategoriesPageIntent, a3);
}

uint64_t sub_47CB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t result;
  char v36;
  char v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  _OWORD v47[2];
  char v48;
  char v49;
  char v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;

  v46 = type metadata accessor for DecodingError(0);
  v44 = *(_QWORD *)(v46 - 8);
  v10 = __chkstk_darwin(v46);
  v45 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v13 = (char *)&v41 - v12;
  v14 = type metadata accessor for JSONContext(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a2, v14);
  v18 = Dictionary<>.init(jsonContext:)(v17);
  v19 = a3();
  v43 = a4;
  v20 = v55;
  JSONObject.decode<A>(_:withUserInfo:)(v47, a4, v18, a4, v19);
  if (v20)
  {
    v42 = a2;
    v55 = a1;
    swift_bridgeObjectRelease(v18);
    *(_QWORD *)&v47[0] = v20;
    swift_errorRetain(v20);
    v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2B08);
    v22 = v46;
    if (swift_dynamicCast(v13, v47, v21, v46, 0))
    {
      swift_errorRelease(v20);
      v23 = v44;
      (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v45, v13, v22);
      v24 = type metadata accessor for JSONError(0);
      v25 = sub_F1C0((unint64_t *)&qword_3B0CB0, (void (*)(uint64_t))&type metadata accessor for JSONError, (uint64_t)&protocol conformance descriptor for JSONError);
      swift_allocError(v24, v25, 0, 0);
      v27 = v26;
      v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2CF0);
      v29 = swift_allocObject(v28, 40, 7);
      *(_OWORD *)(v29 + 16) = xmmword_2EA0D0;
      *(_QWORD *)(v29 + 32) = swift_allocError(v22, &protocol witness table for DecodingError, 0, 0);
      v30 = v45;
      (*(void (**)(uint64_t, char *, uint64_t))(v23 + 16))(v31, v45, v22);
      *v27 = v43;
      v27[1] = v29;
      v32 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v24 - 8) + 104))(v27, enum case for JSONError.malformedDocument(_:), v24);
      swift_willThrow(v32);
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v42, v14);
      v33 = type metadata accessor for JSONObject(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 8))(v55, v33);
      (*(void (**)(char *, uint64_t))(v23 + 8))(v30, v22);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v42, v14);
      v40 = type metadata accessor for JSONObject(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 8))(v55, v40);
    }
    return swift_errorRelease(*(_QWORD *)&v47[0]);
  }
  else
  {
    swift_bridgeObjectRelease(v18);
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(a2, v14);
    v34 = type metadata accessor for JSONObject(0);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 8))(a1, v34);
    v36 = v48;
    v37 = v49;
    v38 = v50;
    v39 = v47[1];
    *(_OWORD *)a5 = v47[0];
    *(_OWORD *)(a5 + 16) = v39;
    *(_BYTE *)(a5 + 32) = v36;
    *(_BYTE *)(a5 + 33) = v37;
    *(_BYTE *)(a5 + 34) = v38;
    *(_OWORD *)(a5 + 40) = v51;
    *(_OWORD *)(a5 + 56) = v52;
    *(_OWORD *)(a5 + 72) = v53;
    *(_OWORD *)(a5 + 88) = v54;
  }
  return result;
}

uint64_t sub_48010@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, char *, uint64_t);
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  char v34;
  char v35;
  char v36;
  char v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  _OWORD v42[2];
  char v43;
  char v44;
  char v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  char v50;
  uint64_t v51;

  v7 = type metadata accessor for DecodingError(0);
  v51 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v41 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v40 - v10;
  v12 = type metadata accessor for JSONContext(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v13 + 16))(v16, a2, v12, v14);
  v17 = Dictionary<>.init(jsonContext:)(v16);
  v18 = sub_55C74();
  JSONObject.decode<A>(_:withUserInfo:)(v42, &type metadata for RecommendationsShelvesIntent, v17, &type metadata for RecommendationsShelvesIntent, v18);
  if (v3)
  {
    v40 = a2;
    swift_bridgeObjectRelease();
    *(_QWORD *)&v42[0] = v3;
    swift_errorRetain(v3);
    v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2B08);
    if (swift_dynamicCast(v11, v42, v19, v7, 0))
    {
      swift_errorRelease(v3);
      v20 = v51;
      (*(void (**)(char *, char *, uint64_t))(v51 + 32))(v41, v11, v7);
      v21 = type metadata accessor for JSONError(0);
      v22 = sub_F1C0((unint64_t *)&qword_3B0CB0, (void (*)(uint64_t))&type metadata accessor for JSONError, (uint64_t)&protocol conformance descriptor for JSONError);
      swift_allocError(v21, v22, 0, 0);
      v24 = v23;
      v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2CF0);
      v26 = swift_allocObject(v25, 40, 7);
      *(_OWORD *)(v26 + 16) = xmmword_2EA0D0;
      *(_QWORD *)(v26 + 32) = swift_allocError(v7, &protocol witness table for DecodingError, 0, 0);
      v27 = *(void (**)(uint64_t, char *, uint64_t))(v20 + 16);
      v28 = v41;
      v27(v29, v41, v7);
      *v24 = &type metadata for RecommendationsShelvesIntent;
      v24[1] = v26;
      v30 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v21 - 8) + 104))(v24, enum case for JSONError.malformedDocument(_:), v21);
      swift_willThrow(v30);
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v40, v12);
      v31 = type metadata accessor for JSONObject(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 8))(a1, v31);
      (*(void (**)(char *, uint64_t))(v51 + 8))(v28, v7);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v40, v12);
      v39 = type metadata accessor for JSONObject(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 8))(a1, v39);
    }
    return swift_errorRelease(*(_QWORD *)&v42[0]);
  }
  else
  {
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a2, v12);
    v32 = type metadata accessor for JSONObject(0);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 8))(a1, v32);
    v34 = v43;
    v35 = v44;
    v36 = v45;
    v37 = v50;
    v38 = v42[1];
    *(_OWORD *)a3 = v42[0];
    *(_OWORD *)(a3 + 16) = v38;
    *(_BYTE *)(a3 + 32) = v34;
    *(_BYTE *)(a3 + 33) = v35;
    *(_BYTE *)(a3 + 34) = v36;
    *(_OWORD *)(a3 + 40) = v46;
    *(_OWORD *)(a3 + 56) = v47;
    *(_OWORD *)(a3 + 72) = v48;
    *(_OWORD *)(a3 + 88) = v49;
    *(_BYTE *)(a3 + 104) = v37;
  }
  return result;
}

uint64_t sub_48370@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return sub_44D84(a1, a2, (void (*)(uint64_t))type metadata accessor for Category, &qword_3B1A50, (uint64_t)&protocol conformance descriptor for Category, a3);
}

uint64_t static HeaderButtonItem.menu(id:title:subtitle:icon:style:children:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;

  v29 = a8;
  v27 = a3;
  v28 = a5;
  v26 = a1;
  v15 = type metadata accessor for ActionMenu(0);
  __chkstk_darwin(v15);
  v17 = (uint64_t *)((char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
  __chkstk_darwin(v18);
  v20 = (char *)&v26 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B27F8) + 48);
  sub_14554(a7, (uint64_t)v20);
  v22 = (uint64_t)v17 + *(int *)(v15 + 28);
  v23 = type metadata accessor for ArtworkModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v22, 1, 1, v23);
  *v17 = v26;
  v17[1] = a2;
  v17[2] = v27;
  v17[3] = a4;
  v17[4] = v28;
  v17[5] = a6;
  swift_bridgeObjectRetain(a6);
  swift_bridgeObjectRetain(a10);
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(a4);
  sub_48E00((uint64_t)v20, v22);
  *(_QWORD *)((char *)v17 + *(int *)(v15 + 32)) = a10;
  sub_3C56C((uint64_t)v17, a9, type metadata accessor for ActionMenu);
  *(_BYTE *)(a9 + v21) = v29;
  v24 = type metadata accessor for HeaderButtonItem(0);
  return swift_storeEnumTagMultiPayload(a9, v24, 6);
}

uint64_t HeaderButtonItem.ButtonStyle.rawValue.getter(char a1)
{
  if (a1)
    return 0xD000000000000010;
  else
    return 0x746C7561666564;
}

uint64_t sub_4859C(_BYTE *a1, _BYTE *a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;

  v2 = *a1;
  v3 = 0x80000000003090A0;
  if (v2 == 1)
    v4 = 0x80000000003090A0;
  else
    v4 = 0x80000000003090C0;
  if (*a1)
    v5 = 0xD000000000000010;
  else
    v5 = 0x746C7561666564;
  if (v2)
    v6 = v4;
  else
    v6 = 0xE700000000000000;
  if (*a2 != 1)
    v3 = 0x80000000003090C0;
  if (*a2)
    v7 = 0xD000000000000010;
  else
    v7 = 0x746C7561666564;
  if (*a2)
    v8 = v3;
  else
    v8 = 0xE700000000000000;
  if (v5 == v7 && v6 == v8)
  {
    v9 = 1;
    v8 = v6;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v7, v8, 0);
  }
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v8);
  return v9 & 1;
}

Swift::Int sub_48670()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v1 = *v0;
  Hasher.init(_seed:)(v6);
  v2 = 0x80000000003090A0;
  if (v1 != 1)
    v2 = 0x80000000003090C0;
  if (v1)
    v3 = 0xD000000000000010;
  else
    v3 = 0x746C7561666564;
  if (v1)
    v4 = v2;
  else
    v4 = 0xE700000000000000;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_48718(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = 0x80000000003090A0;
  if (*v1 != 1)
    v2 = 0x80000000003090C0;
  if (*v1)
    v3 = 0xD000000000000010;
  else
    v3 = 0x746C7561666564;
  if (*v1)
    v4 = v2;
  else
    v4 = 0xE700000000000000;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v4);
}

Swift::Int sub_4879C()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v1 = *v0;
  Hasher.init(_seed:)(v6);
  v2 = 0x80000000003090A0;
  if (v1 != 1)
    v2 = 0x80000000003090C0;
  if (v1)
    v3 = 0xD000000000000010;
  else
    v3 = 0x746C7561666564;
  if (v1)
    v4 = v2;
  else
    v4 = 0xE700000000000000;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

unint64_t sub_48840@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = _s8ShelfKit16HeaderButtonItemO0D5StyleO8rawValueAESgSS_tcfC_0(*a1);
  *a2 = result;
  return result;
}

void sub_4886C(unint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;

  v2 = *v1;
  v3 = 0xE700000000000000;
  v4 = 0x80000000003090A0;
  if (v2 != 1)
    v4 = 0x80000000003090C0;
  v5 = v2 == 0;
  if (*v1)
    v6 = 0xD000000000000010;
  else
    v6 = 0x746C7561666564;
  if (!v5)
    v3 = v4;
  *a1 = v6;
  a1[1] = v3;
}

uint64_t sub_488D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_55E50();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_48930(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_55E50();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

ShelfKit::HeaderButtonItem::ProfilePictureDisplayMode_optional __swiftcall HeaderButtonItem.ProfilePictureDisplayMode.init(rawValue:)(Swift::String rawValue)
{
  void *object;
  Swift::String v2;
  Swift::Int v3;
  ShelfKit::HeaderButtonItem::ProfilePictureDisplayMode_optional v4;

  object = rawValue._object;
  v2._countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_373320, v2);
  swift_bridgeObjectRelease(object);
  if (v3 == 1)
    v4.value = ShelfKit_HeaderButtonItem_ProfilePictureDisplayMode_onlyCompact;
  else
    v4.value = ShelfKit_HeaderButtonItem_ProfilePictureDisplayMode_unknownDefault;
  if (v3)
    return v4;
  else
    return 0;
}

uint64_t HeaderButtonItem.ProfilePictureDisplayMode.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0x706D6F43796C6E6FLL;
  else
    return 0x737961776C61;
}

uint64_t sub_48A08(_BYTE *a1, _BYTE *a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v8;

  v2 = *a1 == 0;
  if (*a1)
    v3 = 0x706D6F43796C6E6FLL;
  else
    v3 = 0x737961776C61;
  if (v2)
    v4 = 0xE600000000000000;
  else
    v4 = 0xEB00000000746361;
  if (*a2)
    v5 = 0x706D6F43796C6E6FLL;
  else
    v5 = 0x737961776C61;
  if (*a2)
    v6 = 0xEB00000000746361;
  else
    v6 = 0xE600000000000000;
  if (v3 == v5 && v4 == v6)
  {
    v8 = 1;
    v6 = v4;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v8 & 1;
}

Swift::Int sub_48AB4()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  if (v1)
    v2 = 0x706D6F43796C6E6FLL;
  else
    v2 = 0x737961776C61;
  if (v1)
    v3 = 0xEB00000000746361;
  else
    v3 = 0xE600000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_48B38(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0x706D6F43796C6E6FLL;
  else
    v2 = 0x737961776C61;
  if (*v1)
    v3 = 0xEB00000000746361;
  else
    v3 = 0xE600000000000000;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_48B98()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  if (v1)
    v2 = 0x706D6F43796C6E6FLL;
  else
    v2 = 0x737961776C61;
  if (v1)
    v3 = 0xEB00000000746361;
  else
    v3 = 0xE600000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_48C18@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;
  char v7;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_373320, v3);
  result = swift_bridgeObjectRelease(v4);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

void sub_48C74(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x737961776C61;
  if (*v1)
    v2 = 0x706D6F43796C6E6FLL;
  v3 = 0xE600000000000000;
  if (*v1)
    v3 = 0xEB00000000746361;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_48CB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_55E0C();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_48D14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_55E0C();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

Swift::Bool __swiftcall HeaderButtonItem.prefersLargeTitleAccessoryView(horizontalSizeClass:)(UIUserInterfaceSizeClass horizontalSizeClass)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t (*v5)(_QWORD);
  int EnumCaseMultiPayload;
  uint64_t v8;

  v2 = type metadata accessor for HeaderButtonItem(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_14510(v1, (uint64_t)v4, v5);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v4, v2);
  if (EnumCaseMultiPayload != 9)
    sub_145D8((uint64_t)v4, type metadata accessor for HeaderButtonItem);
  return EnumCaseMultiPayload == 9;
}

uint64_t sub_48E00(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for HeaderButtonItem(uint64_t a1)
{
  uint64_t result;

  result = qword_3B2CB8;
  if (!qword_3B2CB8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for HeaderButtonItem);
  return result;
}

uint64_t sub_48E84@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v3;
  uint64_t result;

  result = sub_45B00(a1, a2, (uint64_t (*)(void))sub_55DC8, (uint64_t)&type metadata for HeaderButtonItem.ButtonStyle);
  if (!v3)
    *a3 = result;
  return result;
}

uint64_t HeaderButtonItem.init(deserializing:using:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  void (*v84)(char *, uint64_t);
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  unint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void (*v116)(char *, uint64_t);
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void (*v120)(char *, uint64_t, uint64_t);
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  char *v125;
  char *v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  char v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  void (*v146)(char *, uint64_t);
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char v150;
  void (*v151)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  uint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  void (*v158)(char *, uint64_t);
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char v162;
  void (*v163)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v164;
  uint64_t v165;
  _QWORD *v166;
  uint64_t v167;
  _QWORD *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  char v195;
  void (*v196)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  _QWORD *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  _QWORD *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  char *v238;
  char *v239;
  char *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  char *v244;
  char *v245;
  char *v246;
  char *v247;
  uint64_t v248;
  char *v249;
  char *v250;
  char *v251;
  char *v252;
  uint64_t v253;
  char *v254;
  char *v255;
  uint64_t v256;
  uint64_t v257;
  char *v258;
  char *v259;
  char *v260;
  char *v261;
  char *v262;
  char *v263;
  uint64_t v264;
  char *v265;
  char *v266;
  _QWORD *v267;
  char *v268;
  char *v269;
  char *v270;
  unint64_t *v271;
  uint64_t v272;
  _QWORD *v273;
  uint64_t v274;
  char *v275;
  void (*v276)(char *, uint64_t);
  uint64_t v277;
  char *v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  char v282[8];
  __int128 v283;
  uint64_t v284;

  v280 = a2;
  v273 = a3;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2C10);
  __chkstk_darwin(v4);
  v244 = (char *)&v237 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v243 = type metadata accessor for ShowOffer(0);
  v242 = *(_QWORD *)(v243 - 8);
  __chkstk_darwin(v243);
  v241 = (uint64_t)&v237 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2C18);
  v8 = __chkstk_darwin(v7);
  v250 = (char *)&v237 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v255 = (char *)&v237 - v10;
  v257 = type metadata accessor for EpisodeOffer(0);
  v256 = *(_QWORD *)(v257 - 8);
  v11 = __chkstk_darwin(v257);
  v248 = (uint64_t)&v237 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v253 = (uint64_t)&v237 - v13;
  v274 = type metadata accessor for HeaderButtonItem(0);
  __chkstk_darwin(v274);
  v264 = (uint64_t)&v237 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for ActionMenu(0);
  v16 = __chkstk_darwin(v15);
  v267 = (uint64_t *)((char *)&v237 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v16);
  v272 = (uint64_t)&v237 - v18;
  v279 = type metadata accessor for JSONContext(0);
  v281 = *(_QWORD *)(v279 - 8);
  v19 = __chkstk_darwin(v279);
  v240 = (char *)&v237 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v19);
  v247 = (char *)&v237 - v22;
  v23 = __chkstk_darwin(v21);
  v252 = (char *)&v237 - v24;
  v25 = __chkstk_darwin(v23);
  v259 = (char *)&v237 - v26;
  v27 = __chkstk_darwin(v25);
  v262 = (char *)&v237 - v28;
  v29 = __chkstk_darwin(v27);
  v263 = (char *)&v237 - v30;
  v31 = __chkstk_darwin(v29);
  v266 = (char *)&v237 - v32;
  v33 = __chkstk_darwin(v31);
  v270 = (char *)&v237 - v34;
  __chkstk_darwin(v33);
  v275 = (char *)&v237 - v35;
  v36 = type metadata accessor for LegacyActionMenu(0);
  v37 = __chkstk_darwin(v36);
  v271 = (unint64_t *)((char *)&v237 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v37);
  v278 = (char *)&v237 - v39;
  v40 = type metadata accessor for JSONObject(0);
  v41 = *(_QWORD *)(v40 - 8);
  v42 = __chkstk_darwin(v40);
  v238 = (char *)&v237 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = __chkstk_darwin(v42);
  v239 = (char *)&v237 - v45;
  v46 = __chkstk_darwin(v44);
  v245 = (char *)&v237 - v47;
  v48 = __chkstk_darwin(v46);
  v246 = (char *)&v237 - v49;
  v50 = __chkstk_darwin(v48);
  v249 = (char *)&v237 - v51;
  v52 = __chkstk_darwin(v50);
  v251 = (char *)&v237 - v53;
  v54 = __chkstk_darwin(v52);
  v254 = (char *)&v237 - v55;
  v56 = __chkstk_darwin(v54);
  v258 = (char *)&v237 - v57;
  v58 = __chkstk_darwin(v56);
  v260 = (char *)&v237 - v59;
  v60 = __chkstk_darwin(v58);
  v261 = (char *)&v237 - v61;
  v62 = __chkstk_darwin(v60);
  v265 = (char *)&v237 - v63;
  v64 = __chkstk_darwin(v62);
  v268 = (char *)&v237 - v65;
  v66 = __chkstk_darwin(v64);
  v269 = (char *)&v237 - v67;
  v68 = __chkstk_darwin(v66);
  v70 = (char *)&v237 - v69;
  v71 = __chkstk_darwin(v68);
  v73 = (char *)&v237 - v72;
  v74 = __chkstk_darwin(v71);
  v76 = (char *)&v237 - v75;
  __chkstk_darwin(v74);
  v78 = (char *)&v237 - v77;
  v79 = JSONObject.subscript.getter(0x646E696B24, 0xE500000000000000);
  v80 = JSONObject.string.getter(v79);
  v82 = v81;
  v83 = v78;
  v84 = *(void (**)(char *, uint64_t))(v41 + 8);
  v84(v83, v40);
  (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v76, a1, v40);
  if (v82)
  {
    v276 = v84;
    v84(v76, v40);
    v85 = v40;
  }
  else
  {
    v86 = JSONObject.subscript.getter(0x657079546D657469, 0xE800000000000000);
    v80 = JSONObject.string.getter(v86);
    v82 = v87;
    v84(v73, v40);
    v84(v76, v40);
    v85 = v40;
    if (!v82)
    {
      v109 = a1;
      v110 = type metadata accessor for JSONError(0);
      v111 = sub_F1C0((unint64_t *)&qword_3B0CB0, (void (*)(uint64_t))&type metadata accessor for JSONError, (uint64_t)&protocol conformance descriptor for JSONError);
      swift_allocError(v110, v111, 0, 0);
      *v112 = 0x646E696B24;
      v112[1] = 0xE500000000000000;
      v112[2] = v274;
      v113 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v110 - 8) + 104))(v112, enum case for JSONError.missingProperty(_:), v110);
      swift_willThrow(v113);
      (*(void (**)(uint64_t, uint64_t))(v281 + 8))(v280, v279);
      return ((uint64_t (*)(char *, uint64_t))v84)(v109, v40);
    }
    v276 = v84;
  }
  v88 = (uint64_t)v278;
  if (v80 == 0x6E6F69746361 && v82 == 0xE600000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F69746361, 0xE600000000000000, v80, v82, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(v82);
    JSONObject.subscript.getter(0x6C65646F6DLL, 0xE500000000000000);
    v89 = v280;
    v90 = v281;
    v91 = (uint64_t)v275;
    v92 = v279;
    (*(void (**)(char *, uint64_t, uint64_t))(v281 + 16))(v275, v280, v279);
    v93 = v277;
    LegacyActionMenu.init(deserializing:using:)((uint64_t)v70, v91, v88);
    if (!v93)
    {
      v95 = v85;
      v96 = v271;
      sub_14510(v88, (uint64_t)v271, type metadata accessor for LegacyActionMenu);
      v97 = v272;
      ActionMenu.init(from:)(v96, v272);
      (*(void (**)(uint64_t, uint64_t))(v90 + 8))(v89, v92);
      v276(a1, v95);
      sub_145D8(v88, type metadata accessor for LegacyActionMenu);
      v98 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B27F8) + 48);
      v99 = v273;
      sub_3C56C(v97, (uint64_t)v273, type metadata accessor for ActionMenu);
      *((_BYTE *)v99 + v98) = 0;
      return swift_storeEnumTagMultiPayload(v99, v274, 6);
    }
    (*(void (**)(uint64_t, uint64_t))(v90 + 8))(v89, v92);
    v94 = a1;
    return ((uint64_t (*)(char *, uint64_t))v276)(v94, v85);
  }
  if (v80 == 0x4D747865746E6F63 && v82 == 0xEB00000000756E65
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x4D747865746E6F63, 0xEB00000000756E65, v80, v82, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(v82);
    v101 = (uint64_t)v269;
    JSONObject.subscript.getter(0x7079546C65646F6DLL, 0xE900000000000065);
    v102 = v280;
    v103 = v281;
    v104 = (uint64_t)v270;
    v105 = v279;
    (*(void (**)(char *, uint64_t, uint64_t))(v281 + 16))(v270, v280, v279);
    v106 = v277;
    v107 = sub_45B00(v101, v104, (uint64_t (*)(void))sub_55FE8, (uint64_t)&type metadata for HeaderButtonItem.ModelType);
    v108 = a1;
    if (v106)
    {
      (*(void (**)(uint64_t, uint64_t))(v103 + 8))(v102, v105);
LABEL_16:
      v94 = v108;
      return ((uint64_t (*)(char *, uint64_t))v276)(v94, v85);
    }
    v114 = v107;
    v115 = (uint64_t)v268;
    JSONObject.subscript.getter(0x6C65646F6DLL, 0xE500000000000000);
    sub_4AF64(v115, v102, v114, (uint64_t)&v283);
    v116 = v276;
    (*(void (**)(uint64_t, uint64_t))(v103 + 8))(v102, v105);
    v116(v108, v85);
    v116((char *)v115, v85);
    v124 = v273;
    sub_F4D8(&v283, (uint64_t)v273);
    return swift_storeEnumTagMultiPayload(v124, v274, 5);
  }
  if (v80 == 1970169197 && v82 == 0xE400000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)(1970169197, 0xE400000000000000, v80, v82, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(v82);
    v117 = (uint64_t)v265;
    JSONObject.subscript.getter(1970169197, 0xE400000000000000);
    v278 = a1;
    v118 = v280;
    v119 = v281;
    v120 = *(void (**)(char *, uint64_t, uint64_t))(v281 + 16);
    v121 = (uint64_t)v266;
    v122 = v279;
    v120(v266, v280, v279);
    v123 = v277;
    sub_44D84(v117, v121, (void (*)(uint64_t))type metadata accessor for ActionMenu, &qword_3B2E18, (uint64_t)&protocol conformance descriptor for ActionMenu, v267);
    if (v123)
    {
      (*(void (**)(uint64_t, uint64_t))(v119 + 8))(v118, v122);
      v94 = v278;
      return ((uint64_t (*)(_QWORD, _QWORD))v276)(v94, v85);
    }
    v125 = v278;
    JSONObject.subscript.getter(0x656C797473, 0xE500000000000000);
    v126 = v263;
    v120(v263, v118, v122);
    sub_4B95C();
    ExpressibleByJSON.init(tryDeserializing:using:)(v73, v126, &type metadata for HeaderButtonItem.ButtonStyle);
    (*(void (**)(uint64_t, uint64_t))(v119 + 8))(v118, v122);
    v276(v125, v85);
    v127 = v283;
    v128 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B27F8) + 48);
    v129 = v264;
    sub_3C56C((uint64_t)v267, v264, type metadata accessor for ActionMenu);
    if (v127 == 3)
      v130 = 0;
    else
      v130 = v127;
    *(_BYTE *)(v129 + v128) = v130;
    swift_storeEnumTagMultiPayload(v129, v274, 6);
    return sub_3C56C(v129, (uint64_t)v273, type metadata accessor for HeaderButtonItem);
  }
  if (v80 == 0x6B72616D6B6F6F62 && v82 == 0xE800000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6B72616D6B6F6F62, 0xE800000000000000, v80, v82, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(v82);
    v131 = (uint64_t)v261;
    JSONObject.subscript.getter(0x7079546C65646F6DLL, 0xE900000000000065);
    v133 = v280;
    v132 = v281;
    v134 = (uint64_t)v262;
    v135 = v279;
    (*(void (**)(char *, uint64_t, uint64_t))(v281 + 16))(v262, v280, v279);
    v136 = v277;
    v137 = sub_45B00(v131, v134, (uint64_t (*)(void))sub_55FE8, (uint64_t)&type metadata for HeaderButtonItem.ModelType);
    v108 = a1;
    if (v136)
    {
LABEL_33:
      (*(void (**)(uint64_t, uint64_t))(v132 + 8))(v133, v135);
      goto LABEL_16;
    }
    v138 = v137;
    v139 = (uint64_t)v260;
    JSONObject.subscript.getter(0x6C65646F6DLL, 0xE500000000000000);
    sub_4AF64(v139, v133, v138, (uint64_t)&v283);
    v277 = 0;
    v278 = v108;
    v158 = v276;
    v276((char *)v139, v85);
    sub_150C8((uint64_t)&v283, (uint64_t)v282);
    v159 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2C20);
    v160 = (uint64_t)v255;
    v161 = v257;
    v162 = swift_dynamicCast(v255, v282, v159, v257, 6);
    v163 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v256 + 56);
    if ((v162 & 1) == 0)
    {
      v276 = v158;
      v163(v160, 1, 1, v161);
      sub_1459C(v160, &qword_3B2C18);
      v179 = type metadata accessor for JSONError(0);
      v180 = sub_F1C0((unint64_t *)&qword_3B0CB0, (void (*)(uint64_t))&type metadata accessor for JSONError, (uint64_t)&protocol conformance descriptor for JSONError);
      swift_allocError(v179, v180, 0, 0);
      __asm { BR              X11 }
    }
    v163(v160, 0, 1, v161);
    (*(void (**)(uint64_t, uint64_t))(v281 + 8))(v133, v135);
    v158(v278, v85);
    __swift_destroy_boxed_opaque_existential_1(&v283);
    v164 = v253;
    sub_3C56C(v160, v253, type metadata accessor for EpisodeOffer);
    v165 = v164;
    v166 = v273;
    sub_3C56C(v165, (uint64_t)v273, type metadata accessor for EpisodeOffer);
    v167 = type metadata accessor for BookmarkButtonPresenter.Data(0);
    swift_storeEnumTagMultiPayload(v166, v167, 1);
    v168 = v166;
    v169 = v274;
    v170 = 1;
    return swift_storeEnumTagMultiPayload(v168, v169, v170);
  }
  if (v80 == 0x64616F6C6E776F64 && v82 == 0xE800000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x64616F6C6E776F64, 0xE800000000000000, v80, v82, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(v82);
    v140 = (uint64_t)v258;
    JSONObject.subscript.getter(0x7079546C65646F6DLL, 0xE900000000000065);
    v133 = v280;
    v132 = v281;
    v141 = (uint64_t)v259;
    v135 = v279;
    (*(void (**)(char *, uint64_t, uint64_t))(v281 + 16))(v259, v280, v279);
    v142 = v277;
    v143 = sub_45B00(v140, v141, (uint64_t (*)(void))sub_55FE8, (uint64_t)&type metadata for HeaderButtonItem.ModelType);
    v108 = a1;
    if (v142)
      goto LABEL_33;
    v144 = v143;
    v145 = (uint64_t)v254;
    JSONObject.subscript.getter(0x6C65646F6DLL, 0xE500000000000000);
    sub_4AF64(v145, v133, v144, (uint64_t)&v283);
    v277 = 0;
    v278 = v108;
    v146 = v276;
    v276((char *)v145, v85);
    sub_150C8((uint64_t)&v283, (uint64_t)v282);
    v147 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2C20);
    v148 = (uint64_t)v250;
    v149 = v257;
    v150 = swift_dynamicCast(v250, v282, v147, v257, 6);
    v151 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v256 + 56);
    if ((v150 & 1) != 0)
    {
      v151(v148, 0, 1, v149);
      (*(void (**)(uint64_t, uint64_t))(v281 + 8))(v133, v135);
      v146(v278, v85);
      __swift_destroy_boxed_opaque_existential_1(&v283);
      v152 = v248;
      sub_3C56C(v148, v248, type metadata accessor for EpisodeOffer);
      v153 = v152;
      v154 = v273;
      sub_3C56C(v153, (uint64_t)v273, type metadata accessor for EpisodeOffer);
      v155 = type metadata accessor for DownloadButtonPresenter.Data(0);
      v156 = v154;
      v157 = 1;
    }
    else
    {
      v151(v148, 1, 1, v149);
      sub_1459C(v148, &qword_3B2C18);
      sub_150C8((uint64_t)&v283, (uint64_t)v282);
      v190 = type metadata accessor for LegacyEpisodeLockup(0);
      if ((swift_dynamicCast(&v284, v282, v147, v190, 6) & 1) == 0)
      {
        v202 = type metadata accessor for JSONError(0);
        v203 = sub_F1C0((unint64_t *)&qword_3B0CB0, (void (*)(uint64_t))&type metadata accessor for JSONError, (uint64_t)&protocol conformance descriptor for JSONError);
        swift_allocError(v202, v203, 0, 0);
        __asm { BR              X11 }
      }
      v191 = v284;
      (*(void (**)(uint64_t, uint64_t))(v281 + 8))(v133, v135);
      v146(v278, v85);
      __swift_destroy_boxed_opaque_existential_1(&v283);
      v154 = v273;
      *v273 = v191;
      v155 = type metadata accessor for DownloadButtonPresenter.Data(0);
      v156 = v154;
      v157 = 2;
    }
    swift_storeEnumTagMultiPayload(v156, v155, v157);
    v168 = v154;
    v169 = v274;
    v170 = 2;
    return swift_storeEnumTagMultiPayload(v168, v169, v170);
  }
  if (v80 == 0x776F6C6C6F66 && v82 == 0xE600000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x776F6C6C6F66, 0xE600000000000000, v80, v82, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(v82);
    v171 = (uint64_t)v251;
    JSONObject.subscript.getter(0x7079546C65646F6DLL, 0xE900000000000065);
    v172 = v280;
    v173 = v281;
    v174 = (uint64_t)v252;
    v175 = v279;
    (*(void (**)(char *, uint64_t, uint64_t))(v281 + 16))(v252, v280, v279);
    v176 = v277;
    v177 = sub_45B00(v171, v174, (uint64_t (*)(void))sub_55FE8, (uint64_t)&type metadata for HeaderButtonItem.ModelType);
    v178 = a1;
    if (v176)
    {
      (*(void (**)(uint64_t, uint64_t))(v173 + 8))(v172, v175);
      return ((uint64_t (*)(char *, uint64_t))v276)(a1, v85);
    }
    else
    {
      v181 = v177;
      v182 = (uint64_t)v249;
      JSONObject.subscript.getter(0x6C65646F6DLL, 0xE500000000000000);
      sub_4AF64(v182, v172, v181, (uint64_t)&v283);
      v278 = v178;
      v276((char *)v182, v85);
      sub_150C8((uint64_t)&v283, (uint64_t)v282);
      v192 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2C20);
      v193 = (uint64_t)v244;
      v194 = v243;
      v195 = swift_dynamicCast(v244, v282, v192, v243, 6);
      v196 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v242 + 56);
      if ((v195 & 1) == 0)
      {
        v196(v193, 1, 1, v194);
        sub_1459C(v193, &qword_3B2C10);
        v215 = type metadata accessor for JSONError(0);
        v216 = sub_F1C0((unint64_t *)&qword_3B0CB0, (void (*)(uint64_t))&type metadata accessor for JSONError, (uint64_t)&protocol conformance descriptor for JSONError);
        swift_allocError(v215, v216, 0, 0);
        __asm { BR              X11 }
      }
      v196(v193, 0, 1, v194);
      (*(void (**)(uint64_t, uint64_t))(v173 + 8))(v172, v175);
      v276(v278, v85);
      __swift_destroy_boxed_opaque_existential_1(&v283);
      v197 = v193;
      v198 = v241;
      sub_3C56C(v197, v241, type metadata accessor for ShowOffer);
      v199 = v198;
      v200 = v273;
      sub_3C56C(v199, (uint64_t)v273, type metadata accessor for ShowOffer);
      v201 = type metadata accessor for FollowButtonPresenter.Data(0);
      swift_storeEnumTagMultiPayload(v200, v201, 1);
      return swift_storeEnumTagMultiPayload(v200, v274, 3);
    }
  }
  if ((v80 != 0x657469726F766166 || v82 != 0xE800000000000000)
    && (_stringCompareWithSmolCheck(_:_:expecting:)(0x657469726F766166, 0xE800000000000000, v80, v82, 0) & 1) == 0)
  {
    v207 = v80;
    v108 = a1;
    v208 = v207;
    if (v207 == 0x4C74736567677573 && v82 == 0xEB00000000737365
      || (_stringCompareWithSmolCheck(_:_:expecting:)(0x4C74736567677573, 0xEB00000000737365, v207, v82, 0) & 1) != 0)
    {
      swift_bridgeObjectRelease(v82);
      v209 = (uint64_t)v239;
      JSONObject.subscript.getter(0x7079546C65646F6DLL, 0xE900000000000065);
      v210 = (uint64_t)v240;
      (*(void (**)(char *, uint64_t, uint64_t))(v281 + 16))(v240, v280, v279);
      v211 = v277;
      v212 = sub_45B00(v209, v210, (uint64_t (*)(void))sub_55FE8, (uint64_t)&type metadata for HeaderButtonItem.ModelType);
      if (!v211)
      {
        v213 = v212;
        v214 = (uint64_t)v238;
        JSONObject.subscript.getter(0x6C65646F6DLL, 0xE500000000000000);
        sub_4AF64(v214, v280, v213, (uint64_t)&v283);
        v276(v238, v85);
        sub_150C8((uint64_t)&v283, (uint64_t)v282);
        v227 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2C20);
        if ((swift_dynamicCast(&v284, v282, v227, &type metadata for AdamID, 6) & 1) != 0)
        {
          v228 = v284;
          (*(void (**)(uint64_t, uint64_t))(v281 + 8))(v280, v279);
          v276(v108, v85);
          __swift_destroy_boxed_opaque_existential_1(&v283);
          v229 = v273;
          *v273 = v228;
        }
        else
        {
          sub_150C8((uint64_t)&v283, (uint64_t)v282);
          v232 = type metadata accessor for LegacyChannelLockup(0);
          if ((swift_dynamicCast(&v284, v282, v227, v232, 6) & 1) == 0)
          {
            v235 = type metadata accessor for JSONError(0);
            v236 = sub_F1C0((unint64_t *)&qword_3B0CB0, (void (*)(uint64_t))&type metadata accessor for JSONError, (uint64_t)&protocol conformance descriptor for JSONError);
            swift_allocError(v235, v236, 0, 0);
            __asm { BR              X11 }
          }
          v233 = v284;
          (*(void (**)(uint64_t, uint64_t))(v281 + 8))(v280, v279);
          v276(v108, v85);
          __swift_destroy_boxed_opaque_existential_1(&v283);
          v234 = *(_QWORD *)(v233 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup_adamId);
          swift_release(v233);
          v229 = v273;
          *v273 = v234;
        }
        return swift_storeEnumTagMultiPayload(v229, v274, 8);
      }
    }
    else
    {
      v220 = type metadata accessor for JSONError(0);
      v221 = sub_F1C0((unint64_t *)&qword_3B0CB0, (void (*)(uint64_t))&type metadata accessor for JSONError, (uint64_t)&protocol conformance descriptor for JSONError);
      swift_allocError(v220, v221, 0, 0);
      *v222 = v208;
      v222[1] = v82;
      v222[2] = v274;
      v223 = (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v220 - 8) + 104))(v222, enum case for JSONError.unknownCase(_:), v220);
      swift_willThrow(v223);
    }
    (*(void (**)(uint64_t, uint64_t))(v281 + 8))(v280, v279);
    goto LABEL_16;
  }
  swift_bridgeObjectRelease(v82);
  v183 = (uint64_t)v246;
  JSONObject.subscript.getter(0x7079546C65646F6DLL, 0xE900000000000065);
  v184 = v280;
  v185 = v281;
  v186 = (uint64_t)v247;
  v187 = v279;
  (*(void (**)(char *, uint64_t, uint64_t))(v281 + 16))(v247, v280, v279);
  v188 = v277;
  v189 = sub_45B00(v183, v186, (uint64_t (*)(void))sub_55FE8, (uint64_t)&type metadata for HeaderButtonItem.ModelType);
  v108 = a1;
  if (v188)
  {
    (*(void (**)(uint64_t, uint64_t))(v185 + 8))(v184, v187);
    goto LABEL_16;
  }
  v204 = v189;
  v205 = (uint64_t)v245;
  v206 = v108;
  JSONObject.subscript.getter(0x6C65646F6DLL, 0xE500000000000000);
  sub_4AF64(v205, v184, v204, (uint64_t)&v283);
  v276(v245, v85);
  sub_150C8((uint64_t)&v283, (uint64_t)v282);
  v217 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2C20);
  if ((swift_dynamicCast(&v284, v282, v217, &type metadata for AdamID, 6) & 1) != 0)
  {
    v218 = v284;
    (*(void (**)(uint64_t, uint64_t))(v281 + 8))(v280, v279);
    v276(v206, v85);
    __swift_destroy_boxed_opaque_existential_1(&v283);
    v219 = v273;
    *v273 = v218;
  }
  else
  {
    sub_150C8((uint64_t)&v283, (uint64_t)v282);
    v224 = type metadata accessor for LegacyChannelLockup(0);
    if ((swift_dynamicCast(&v284, v282, v217, v224, 6) & 1) == 0)
    {
      v230 = type metadata accessor for JSONError(0);
      v231 = sub_F1C0((unint64_t *)&qword_3B0CB0, (void (*)(uint64_t))&type metadata accessor for JSONError, (uint64_t)&protocol conformance descriptor for JSONError);
      swift_allocError(v230, v231, 0, 0);
      __asm { BR              X11 }
    }
    v225 = v284;
    (*(void (**)(uint64_t, uint64_t))(v281 + 8))(v280, v279);
    v276(v206, v85);
    __swift_destroy_boxed_opaque_existential_1(&v283);
    v226 = *(_QWORD *)(v225 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup_adamId);
    swift_release(v225);
    v219 = v273;
    *v273 = v226;
  }
  return swift_storeEnumTagMultiPayload(v219, v274, 7);
}

void sub_4AD9C(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *a1 = 0x70756B636F4CLL;
  a1[1] = a2;
  a1[2] = *(_QWORD *)(v3 - 232);
  v4 = (*(uint64_t (**)(void))(*(_QWORD *)(v2 - 8) + 104))();
  swift_willThrow(v4);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v3 - 176) + 8))(*(_QWORD *)(v3 - 184), *(_QWORD *)(v3 - 192));
  JUMPOUT(0x4A5C4);
}

void sub_4ADAC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  strcpy((char *)a1, "ChannelLockup");
  *(_WORD *)(a1 + 14) = -4864;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(v2 - 232);
  v3 = (*(uint64_t (**)(void))(*(_QWORD *)(v1 - 8) + 104))();
  swift_willThrow(v3);
  JUMPOUT(0x4A5BCLL);
}

void sub_4ADE4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  strcpy((char *)a1, "EpisodeOffer");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(v2 - 232);
  v3 = (*(uint64_t (**)(void))(*(_QWORD *)(v1 - 8) + 104))();
  swift_willThrow(v3);
  JUMPOUT(0x4A5BCLL);
}

void sub_4AE30()
{
  JUMPOUT(0x4AE44);
}

void sub_4AE84(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  strcpy((char *)a1, "ChannelLockup");
  *(_WORD *)(a1 + 14) = -4864;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(v2 - 232);
  v3 = (*(uint64_t (**)(void))(*(_QWORD *)(v1 - 8) + 104))();
  swift_willThrow(v3);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v2 - 176) + 8))(*(_QWORD *)(v2 - 184), *(_QWORD *)(v2 - 192));
  JUMPOUT(0x4A5C4);
}

void sub_4AEBC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  strcpy((char *)a1, "EpisodeOffer");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(v2 - 232);
  v3 = (*(uint64_t (**)(void))(*(_QWORD *)(v1 - 8) + 104))();
  swift_willThrow(v3);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v2 - 176) + 8))(*(_QWORD *)(v2 - 184), *(_QWORD *)(v2 - 192));
  JUMPOUT(0x4A5C4);
}

void sub_4AEF0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *a1 = 0x6566664F776F6853;
  a1[1] = v1 + 13;
  a1[2] = *(_QWORD *)(v3 - 232);
  v4 = (*(uint64_t (**)(void))(*(_QWORD *)(v2 - 8) + 104))();
  swift_willThrow(v4);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v3 - 176) + 8))(*(_QWORD *)(v3 - 184), *(_QWORD *)(v3 - 192));
  JUMPOUT(0x4A5C4);
}

void sub_4AF08()
{
  JUMPOUT(0x4AF1CLL);
}

void sub_4AF64(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[5];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v24 = a1;
  v25 = a3;
  v22 = a2;
  v20[4] = a4;
  v21 = type metadata accessor for JSONContext(0);
  v23 = *(_QWORD *)(v21 - 8);
  v4 = __chkstk_darwin(v21);
  v20[3] = (char *)v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v4);
  v20[1] = (char *)v20 - v7;
  v8 = __chkstk_darwin(v6);
  v20[0] = (char *)v20 - v9;
  v10 = __chkstk_darwin(v8);
  v20[2] = (char *)v20 - v11;
  v12 = __chkstk_darwin(v10);
  __chkstk_darwin(v12);
  v13 = type metadata accessor for JSONObject(0);
  v14 = __chkstk_darwin(v13);
  v15 = __chkstk_darwin(v14);
  v16 = __chkstk_darwin(v15);
  v17 = __chkstk_darwin(v16);
  v18 = __chkstk_darwin(v17);
  v19 = __chkstk_darwin(v18);
  __chkstk_darwin(v19);
  __asm { BR              X10 }
}

_QWORD *sub_4B16C()
{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t *boxed_opaque_existential_2Tm;
  uint64_t v7;
  _QWORD *result;

  (*(void (**)(char *, _QWORD))(v0 + 16))(v1, *(_QWORD *)(v2 - 184));
  v3 = *(_QWORD *)(v2 - 232);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v2 - 200) + 16))(v3, *(_QWORD *)(v2 - 208), *(_QWORD *)(v2 - 216));
  v4 = type metadata accessor for ShowOffer(0);
  v5 = *(_QWORD **)(v2 - 224);
  v5[3] = v4;
  v5[4] = sub_F1C0(&qword_3B2E28, (void (*)(uint64_t))type metadata accessor for ShowOffer, (uint64_t)&protocol conformance descriptor for ShowOffer);
  boxed_opaque_existential_2Tm = __swift_allocate_boxed_opaque_existential_2Tm(v5);
  v7 = *(_QWORD *)(v2 - 192);
  result = (_QWORD *)ShowOffer.init(deserializing:using:)(v1, v3, boxed_opaque_existential_2Tm);
  if (v7)
    return __swift_deallocate_boxed_opaque_existential_2(v5);
  return result;
}

void sub_4B6DC(char *a1)
{
  sub_1E1E44(*a1);
}

void sub_4B6E8()
{
  char *v0;

  sub_2D9468(0, *v0);
}

void sub_4B6F4(uint64_t a1)
{
  char *v1;

  sub_2D8AE0(a1, *v1);
}

void sub_4B6FC(uint64_t a1)
{
  char *v1;

  sub_2D9468(a1, *v1);
}

unint64_t sub_4B704@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_56184(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_4B730()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_4B75C + 4 * byte_2ED328[*v0]))();
}

void sub_4B75C(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x70756B636F4CLL;
  a1[1] = v1;
}

void sub_4B770(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "ChannelLockup");
  *(_WORD *)(a1 + 14) = -4864;
}

void sub_4B7AC(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "EpisodeOffer");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

void sub_4B7E4(_QWORD *a1@<X8>)
{
  *a1 = 0x6566664F776F6853;
  a1[1] = 0xE900000000000072;
}

void sub_4B804(_QWORD *a1@<X8>)
{
  *a1 = 0x79726F6765746143;
  a1[1] = 0xE800000000000000;
}

uint64_t sub_4B820(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_56140();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_4B87C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_56140();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_4B8C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v3;
  uint64_t result;

  result = sub_45B00(a1, a2, (uint64_t (*)(void))sub_55FE8, (uint64_t)&type metadata for HeaderButtonItem.ModelType);
  if (!v3)
    *a3 = result;
  return result;
}

uint64_t sub_4B900@<X0>(char *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return HeaderButtonItem.init(deserializing:using:)(a1, a2, a3);
}

unint64_t _s8ShelfKit16HeaderButtonItemO0D5StyleO8rawValueAESgSS_tcfC_0(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_3732B8, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

unint64_t sub_4B95C()
{
  unint64_t result;

  result = qword_3B2C28;
  if (!qword_3B2C28)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for HeaderButtonItem.ButtonStyle);
    atomic_store(result, (unint64_t *)&qword_3B2C28);
  }
  return result;
}

unint64_t sub_4B9A4()
{
  unint64_t result;

  result = qword_3B2C30;
  if (!qword_3B2C30)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for HeaderButtonItem.ButtonStyle);
    atomic_store(result, (unint64_t *)&qword_3B2C30);
  }
  return result;
}

unint64_t sub_4B9EC()
{
  unint64_t result;

  result = qword_3B2C38;
  if (!qword_3B2C38)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for HeaderButtonItem.ProfilePictureDisplayMode);
    atomic_store(result, (unint64_t *)&qword_3B2C38);
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for HeaderButtonItem(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  int *v14;
  uint64_t v15;
  unsigned int (*v16)(_QWORD *, uint64_t, int *);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  int EnumCaseMultiPayload;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  int *v38;
  unsigned int (*v39)(_QWORD *, uint64_t, int *);
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  int *v47;
  uint64_t v48;
  unsigned int (*v49)(_QWORD *, uint64_t, int *);
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  int *v59;
  uint64_t v60;
  unsigned int (*v61)(_QWORD *, uint64_t, int *);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  int *v84;
  unsigned int (*v85)(_QWORD *, uint64_t, int *);
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  id *v96;
  int v97;
  id v98;
  id *v99;
  int v100;
  id v101;
  id *v102;
  int v103;
  id v104;
  id *v105;
  int v106;
  id v107;
  id *v108;
  int v109;
  id v110;
  id *v111;
  int v112;
  id v113;
  id *v114;
  int v115;
  id v116;
  id *v117;
  int v118;
  id v119;
  id *v120;
  int v121;
  id v122;
  id *v123;
  int v124;
  id v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  _QWORD *v136;
  uint64_t v137;
  void (*v138)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v139;
  __int128 v140;
  uint64_t v141;
  char *v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  _QWORD *v153;
  uint64_t v154;
  uint64_t v155;
  _QWORD *v156;
  _QWORD *v157;
  uint64_t v158;
  void (*v159)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  int v168;
  uint64_t v169;
  uint64_t v170;
  id *v171;
  int v172;
  id v173;
  id *v174;
  int v175;
  id v176;
  id *v177;
  int v178;
  id v179;
  id *v180;
  int v181;
  id v182;
  id *v183;
  int v184;
  id v185;
  uint64_t v186;
  char *v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  _QWORD *v191;
  _QWORD *v192;
  uint64_t v193;
  uint64_t v194;
  _QWORD *v195;
  _QWORD *v196;
  uint64_t v197;
  void (*v198)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v199;
  _QWORD *v200;
  _QWORD *v201;
  uint64_t v202;
  uint64_t v203;
  _QWORD *v204;
  _QWORD *v205;
  uint64_t v206;
  uint64_t v207;
  _QWORD *v208;
  _QWORD *v209;
  uint64_t v210;
  uint64_t v211;
  _QWORD *v212;
  _QWORD *v213;
  uint64_t v214;
  uint64_t v215;
  char *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unsigned int (*v220)(char *, uint64_t, uint64_t);
  unsigned int (*v221)(char *, uint64_t, uint64_t);
  uint64_t v222;
  uint64_t v223;
  _QWORD *v224;
  _QWORD *v225;
  uint64_t v226;
  uint64_t v227;
  _QWORD *v228;
  _QWORD *v229;
  uint64_t v230;
  uint64_t v231;
  char *v232;
  char *v233;
  uint64_t v234;
  uint64_t v235;
  char *v236;
  char *v237;
  uint64_t v238;
  id *v239;
  int v240;
  id v241;
  id *v242;
  int v243;
  id v244;
  id *v245;
  int v246;
  id v247;
  id *v248;
  int v249;
  id v250;
  id *v251;
  int v252;
  id v253;
  id *v254;
  int v255;
  id v256;
  id *v257;
  int v258;
  id v259;
  id *v260;
  int v261;
  id v262;
  id *v263;
  int v264;
  id v265;
  id *v266;
  int v267;
  id v268;
  uint64_t v269;
  char *v270;
  char *v271;
  uint64_t v272;
  uint64_t v273;
  char *v274;
  char *v275;
  uint64_t v276;
  uint64_t v277;
  char *v278;
  char *v279;
  uint64_t v280;
  void (*v281)(char *, _QWORD, uint64_t, int *);
  uint64_t v282;
  char *v283;
  char *v284;
  uint64_t v285;
  uint64_t v286;
  char *v287;
  char *v288;
  uint64_t v289;
  uint64_t v290;
  char *v291;
  char *v292;
  uint64_t v293;
  uint64_t v294;
  char *v295;
  char *v296;
  uint64_t v297;
  uint64_t v298;
  char *v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  unsigned int (*v303)(char *, uint64_t, uint64_t);
  unsigned int (*v304)(char *, uint64_t, uint64_t);
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  char *v308;
  char *v309;
  uint64_t v310;
  uint64_t v311;
  char *v312;
  char *v313;
  uint64_t v314;
  uint64_t v315;
  char *v316;
  char *v317;
  uint64_t v318;
  uint64_t v319;
  char *v320;
  char *v321;
  uint64_t v322;
  uint64_t v323;
  char *v324;
  char *v325;
  uint64_t v326;
  void (*v327)(char *, char *, uint64_t);
  uint64_t v328;
  _QWORD *v329;
  _QWORD *v330;
  uint64_t v331;
  uint64_t v332;
  _QWORD *v333;
  _QWORD *v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  char *v339;
  char *v340;
  uint64_t v341;
  _QWORD *v342;
  _QWORD *v343;
  uint64_t v344;
  uint64_t v345;
  int v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  char *v350;
  char *v351;
  uint64_t v352;
  uint64_t v353;
  char *v354;
  char *v355;
  uint64_t v356;
  uint64_t v357;
  char *v358;
  char *v359;
  uint64_t v360;
  void (*v361)(char *, _QWORD, uint64_t, int *);
  uint64_t v362;
  char *v363;
  char *v364;
  uint64_t v365;
  uint64_t v366;
  char *v367;
  char *v368;
  uint64_t v369;
  uint64_t v370;
  char *v371;
  char *v372;
  uint64_t v373;
  uint64_t v374;
  char *v375;
  char *v376;
  uint64_t v377;
  uint64_t v378;
  char *v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  unsigned int (*v383)(char *, uint64_t, uint64_t);
  unsigned int (*v384)(char *, uint64_t, uint64_t);
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  char *v388;
  char *v389;
  uint64_t v390;
  uint64_t v391;
  char *v392;
  char *v393;
  uint64_t v394;
  uint64_t v395;
  char *v396;
  char *v397;
  uint64_t v398;
  uint64_t v399;
  char *v400;
  char *v401;
  uint64_t v402;
  uint64_t v403;
  char *v404;
  char *v405;
  uint64_t v406;
  void (*v407)(char *, char *, uint64_t);
  uint64_t v408;
  _QWORD *v409;
  _QWORD *v410;
  uint64_t v411;
  uint64_t v412;
  _QWORD *v413;
  _QWORD *v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  char *v419;
  char *v420;
  uint64_t v421;
  _QWORD *v422;
  _QWORD *v423;
  uint64_t v424;
  uint64_t v425;
  int v426;
  uint64_t v427;
  uint64_t v428;
  id *v429;
  int v430;
  id v431;
  id *v432;
  int v433;
  id v434;
  id *v435;
  int v436;
  id v437;
  id *v438;
  int v439;
  id v440;
  id *v441;
  int v442;
  id v443;
  id *v444;
  int v445;
  id v446;
  id *v447;
  int v448;
  id v449;
  id *v450;
  int v451;
  id v452;
  id *v453;
  int v454;
  id v455;
  id *v456;
  int v457;
  id v458;
  uint64_t v459;
  char *v460;
  char *v461;
  uint64_t v462;
  uint64_t v463;
  _QWORD *v464;
  _QWORD *v465;
  uint64_t v466;
  uint64_t v467;
  _QWORD *v468;
  _QWORD *v469;
  uint64_t v470;
  void (*v471)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v472;
  _QWORD *v473;
  _QWORD *v474;
  uint64_t v475;
  uint64_t v476;
  char *v477;
  char *v478;
  uint64_t v479;
  char *v480;
  char *v481;
  uint64_t v482;
  char *v483;
  char *v484;
  uint64_t v485;
  uint64_t v486;
  unsigned int (*v487)(char *, uint64_t, uint64_t);
  uint64_t v488;
  uint64_t v489;
  char *v490;
  char *v491;
  uint64_t v492;
  uint64_t v493;
  _QWORD *v494;
  _QWORD *v495;
  uint64_t v496;
  uint64_t v497;
  _QWORD *v498;
  _QWORD *v499;
  uint64_t v500;
  void (*v501)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v502;
  _QWORD *v503;
  _QWORD *v504;
  uint64_t v505;
  uint64_t v506;
  char *v507;
  char *v508;
  uint64_t v509;
  char *v510;
  char *v511;
  uint64_t v512;
  char *v513;
  char *v514;
  uint64_t v515;
  uint64_t v516;
  unsigned int (*v517)(char *, uint64_t, uint64_t);
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  char *v521;
  char *v522;
  unsigned int (*v523)(_QWORD *, uint64_t, int *);
  unsigned int (*v524)(_QWORD *, uint64_t, int *);
  int *v525;
  int *v526;
  uint64_t v527;
  uint64_t v528;
  int *v529;
  int *v530;
  uint64_t v531;
  int *__dst;
  int *__dsta;
  char *__dstb;
  char *v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  char *v539;
  uint64_t v540;
  char *v541;
  int *v542;
  uint64_t v543;
  char *v544;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) == 0)
  {
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        v540 = a3;
        v8 = a2[1];
        *a1 = *a2;
        a1[1] = v8;
        v9 = a2[3];
        a1[2] = a2[2];
        a1[3] = v9;
        v10 = (int *)type metadata accessor for ActionButton(0);
        v11 = v10[6];
        v12 = (_QWORD *)((char *)a1 + v11);
        v13 = (_QWORD *)((char *)a2 + v11);
        v14 = (int *)type metadata accessor for ArtworkModel(0);
        v15 = *((_QWORD *)v14 - 1);
        v16 = *(unsigned int (**)(_QWORD *, uint64_t, int *))(v15 + 48);
        swift_bridgeObjectRetain(v8);
        swift_bridgeObjectRetain(v9);
        if (v16(v13, 1, v14))
        {
          v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
          memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
          v18 = v540;
        }
        else
        {
          v538 = v15;
          v67 = v13[1];
          *v12 = *v13;
          v12[1] = v67;
          v68 = *((unsigned __int8 *)v13 + 32);
          swift_bridgeObjectRetain(v67);
          if (v68 == 255)
          {
            *((_OWORD *)v12 + 1) = *((_OWORD *)v13 + 1);
            *((_BYTE *)v12 + 32) = *((_BYTE *)v13 + 32);
          }
          else
          {
            v69 = v13[2];
            v70 = v13[3];
            sub_3D464(v69, v70, v68);
            v12[2] = v69;
            v12[3] = v70;
            *((_BYTE *)v12 + 32) = v68;
          }
          v18 = v540;
          *(_OWORD *)(v12 + 5) = *(_OWORD *)(v13 + 5);
          v96 = (id *)(v13 + 7);
          v97 = *((unsigned __int8 *)v13 + 64);
          if (v97 == 255)
          {
            v12[7] = *v96;
            *((_BYTE *)v12 + 64) = *((_BYTE *)v13 + 64);
          }
          else
          {
            v98 = *v96;
            sub_3D47C(*v96, *((_BYTE *)v13 + 64));
            v12[7] = v98;
            *((_BYTE *)v12 + 64) = v97;
          }
          v102 = (id *)(v13 + 9);
          v103 = *((unsigned __int8 *)v13 + 80);
          if (v103 == 255)
          {
            v12[9] = *v102;
            *((_BYTE *)v12 + 80) = *((_BYTE *)v13 + 80);
          }
          else
          {
            v104 = *v102;
            sub_3D47C(*v102, *((_BYTE *)v13 + 80));
            v12[9] = v104;
            *((_BYTE *)v12 + 80) = v103;
          }
          v108 = (id *)(v13 + 11);
          v109 = *((unsigned __int8 *)v13 + 96);
          if (v109 == 255)
          {
            v12[11] = *v108;
            *((_BYTE *)v12 + 96) = *((_BYTE *)v13 + 96);
          }
          else
          {
            v110 = *v108;
            sub_3D47C(*v108, *((_BYTE *)v13 + 96));
            v12[11] = v110;
            *((_BYTE *)v12 + 96) = v109;
          }
          v114 = (id *)(v13 + 13);
          v115 = *((unsigned __int8 *)v13 + 112);
          if (v115 == 255)
          {
            v12[13] = *v114;
            *((_BYTE *)v12 + 112) = *((_BYTE *)v13 + 112);
          }
          else
          {
            v116 = *v114;
            sub_3D47C(*v114, *((_BYTE *)v13 + 112));
            v12[13] = v116;
            *((_BYTE *)v12 + 112) = v115;
          }
          v120 = (id *)(v13 + 15);
          v121 = *((unsigned __int8 *)v13 + 128);
          if (v121 == 255)
          {
            v12[15] = *v120;
            *((_BYTE *)v12 + 128) = *((_BYTE *)v13 + 128);
          }
          else
          {
            v122 = *v120;
            sub_3D47C(*v120, *((_BYTE *)v13 + 128));
            v12[15] = v122;
            *((_BYTE *)v12 + 128) = v121;
          }
          *((_BYTE *)v12 + 129) = *((_BYTE *)v13 + 129);
          v126 = v14[11];
          v127 = (char *)v12 + v126;
          v128 = (char *)v13 + v126;
          v129 = type metadata accessor for ArtworkCrop(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v129 - 8) + 16))(v127, v128, v129);
          v130 = v14[12];
          v131 = (_QWORD *)((char *)v12 + v130);
          v132 = (_QWORD *)((char *)v13 + v130);
          v133 = v132[1];
          *v131 = *v132;
          v131[1] = v133;
          *((_BYTE *)v12 + v14[13]) = *((_BYTE *)v13 + v14[13]);
          *((_BYTE *)v12 + v14[14]) = *((_BYTE *)v13 + v14[14]);
          *((_BYTE *)v12 + v14[15]) = *((_BYTE *)v13 + v14[15]);
          v134 = v14[16];
          v135 = (_QWORD *)((char *)v12 + v134);
          v136 = (_QWORD *)((char *)v13 + v134);
          v137 = v136[1];
          *v135 = *v136;
          v135[1] = v137;
          v138 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v538 + 56);
          swift_bridgeObjectRetain(v133);
          swift_bridgeObjectRetain(v137);
          v138(v12, 0, 1, v14);
        }
        *((_BYTE *)a1 + v10[7]) = *((_BYTE *)a2 + v10[7]);
        v139 = v10[8];
        v140 = *(_OWORD *)((char *)a2 + v139 + 24);
        *(_OWORD *)((char *)a1 + v139 + 24) = v140;
        (**(void (***)(void))(v140 - 8))();
        v141 = v10[9];
        v142 = (char *)a1 + v141;
        v143 = (char *)a2 + v141;
        v144 = type metadata accessor for ImpressionMetrics(0);
        v145 = *(_QWORD *)(v144 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v145 + 48))(v143, 1, v144))
        {
          v146 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
          memcpy(v142, v143, *(_QWORD *)(*(_QWORD *)(v146 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v145 + 16))(v142, v143, v144);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v145 + 56))(v142, 0, 1, v144);
        }
        swift_storeEnumTagMultiPayload(a1, v18, 0);
        return a1;
      case 1u:
        v21 = type metadata accessor for BookmarkButtonPresenter.Data(0);
        EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v21);
        if (EnumCaseMultiPayload == 1)
        {
          v528 = v21;
          *(_OWORD *)a1 = *(_OWORD *)a2;
          v75 = a2[2];
          a1[2] = v75;
          v76 = type metadata accessor for EpisodeOffer(0);
          v77 = *(int *)(v76 + 24);
          v78 = (char *)a1 + v77;
          v79 = (char *)a2 + v77;
          *(_OWORD *)v78 = *(_OWORD *)((char *)a2 + v77);
          v80 = *(_QWORD *)((char *)a2 + v77 + 16);
          *((_QWORD *)v78 + 2) = v80;
          v78[24] = *((_BYTE *)a2 + v77 + 24);
          __dsta = (int *)type metadata accessor for ShowOffer(0);
          v539 = v79;
          v81 = __dsta[7];
          v544 = v78;
          v82 = &v78[v81];
          v83 = &v79[v81];
          v84 = (int *)type metadata accessor for ArtworkModel(0);
          v520 = *((_QWORD *)v84 - 1);
          v85 = *(unsigned int (**)(_QWORD *, uint64_t, int *))(v520 + 48);
          swift_bridgeObjectRetain(v75);
          swift_bridgeObjectRetain(v80);
          v524 = v85;
          v530 = v84;
          v526 = (int *)v76;
          if (v85(v83, 1, v84))
          {
            v86 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
            memcpy(v82, v83, *(_QWORD *)(*(_QWORD *)(v86 - 8) + 64));
          }
          else
          {
            v167 = *((_QWORD *)v83 + 1);
            *(_QWORD *)v82 = *(_QWORD *)v83;
            *((_QWORD *)v82 + 1) = v167;
            v168 = v83[32];
            swift_bridgeObjectRetain(v167);
            if (v168 == 255)
            {
              *((_OWORD *)v82 + 1) = *((_OWORD *)v83 + 1);
              v82[32] = v83[32];
            }
            else
            {
              v169 = *((_QWORD *)v83 + 2);
              v170 = *((_QWORD *)v83 + 3);
              sub_3D464(v169, v170, v168);
              *((_QWORD *)v82 + 2) = v169;
              *((_QWORD *)v82 + 3) = v170;
              v82[32] = v168;
            }
            *(_OWORD *)(v82 + 40) = *(_OWORD *)(v83 + 40);
            v242 = (id *)(v83 + 56);
            v243 = v83[64];
            if (v243 == 255)
            {
              *((_QWORD *)v82 + 7) = *v242;
              v82[64] = v83[64];
            }
            else
            {
              v244 = *v242;
              sub_3D47C(*v242, v83[64]);
              *((_QWORD *)v82 + 7) = v244;
              v82[64] = v243;
            }
            v248 = (id *)(v83 + 72);
            v249 = v83[80];
            if (v249 == 255)
            {
              *((_QWORD *)v82 + 9) = *v248;
              v82[80] = v83[80];
            }
            else
            {
              v250 = *v248;
              sub_3D47C(*v248, v83[80]);
              *((_QWORD *)v82 + 9) = v250;
              v82[80] = v249;
            }
            v254 = (id *)(v83 + 88);
            v255 = v83[96];
            if (v255 == 255)
            {
              *((_QWORD *)v82 + 11) = *v254;
              v82[96] = v83[96];
            }
            else
            {
              v256 = *v254;
              sub_3D47C(*v254, v83[96]);
              *((_QWORD *)v82 + 11) = v256;
              v82[96] = v255;
            }
            v260 = (id *)(v83 + 104);
            v261 = v83[112];
            if (v261 == 255)
            {
              *((_QWORD *)v82 + 13) = *v260;
              v82[112] = v83[112];
            }
            else
            {
              v262 = *v260;
              sub_3D47C(*v260, v83[112]);
              *((_QWORD *)v82 + 13) = v262;
              v82[112] = v261;
            }
            v266 = (id *)(v83 + 120);
            v267 = v83[128];
            if (v267 == 255)
            {
              *((_QWORD *)v82 + 15) = *v266;
              v82[128] = v83[128];
            }
            else
            {
              v268 = *v266;
              sub_3D47C(*v266, v83[128]);
              *((_QWORD *)v82 + 15) = v268;
              v82[128] = v267;
            }
            v82[129] = v83[129];
            v349 = v84[11];
            v350 = &v82[v349];
            v351 = &v83[v349];
            v352 = type metadata accessor for ArtworkCrop(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v352 - 8) + 16))(v350, v351, v352);
            v353 = v84[12];
            v354 = &v82[v353];
            v355 = &v83[v353];
            v356 = *((_QWORD *)v355 + 1);
            *(_QWORD *)v354 = *(_QWORD *)v355;
            *((_QWORD *)v354 + 1) = v356;
            v82[v84[13]] = v83[v84[13]];
            v82[v84[14]] = v83[v84[14]];
            v82[v84[15]] = v83[v84[15]];
            v357 = v84[16];
            v358 = &v82[v357];
            v359 = &v83[v357];
            v360 = *((_QWORD *)v359 + 1);
            *(_QWORD *)v358 = *(_QWORD *)v359;
            *((_QWORD *)v358 + 1) = v360;
            v361 = *(void (**)(char *, _QWORD, uint64_t, int *))(v520 + 56);
            swift_bridgeObjectRetain(v356);
            swift_bridgeObjectRetain(v360);
            v361(v82, 0, 1, v84);
          }
          v362 = __dsta[8];
          v363 = &v544[v362];
          v364 = &v539[v362];
          v365 = *((_QWORD *)v364 + 1);
          *(_QWORD *)v363 = *(_QWORD *)v364;
          *((_QWORD *)v363 + 1) = v365;
          v366 = __dsta[9];
          v367 = &v544[v366];
          v368 = &v539[v366];
          v369 = *((_QWORD *)v368 + 1);
          *(_QWORD *)v367 = *(_QWORD *)v368;
          *((_QWORD *)v367 + 1) = v369;
          v544[__dsta[10]] = v539[__dsta[10]];
          v370 = __dsta[11];
          v371 = &v544[v370];
          v372 = &v539[v370];
          v373 = *((_QWORD *)v372 + 1);
          *(_QWORD *)v371 = *(_QWORD *)v372;
          *((_QWORD *)v371 + 1) = v373;
          v374 = __dsta[12];
          v375 = &v544[v374];
          v376 = &v539[v374];
          v377 = *((_QWORD *)v376 + 1);
          *(_QWORD *)v375 = *(_QWORD *)v376;
          *((_QWORD *)v375 + 1) = v377;
          v378 = __dsta[13];
          v522 = &v544[v378];
          v379 = &v539[v378];
          v380 = type metadata accessor for URL(0);
          v381 = *(_QWORD *)(v380 - 8);
          v382 = v365;
          v383 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v381 + 48);
          swift_bridgeObjectRetain(v382);
          swift_bridgeObjectRetain(v369);
          swift_bridgeObjectRetain(v373);
          swift_bridgeObjectRetain(v377);
          v384 = v383;
          if (v383(v379, 1, v380))
          {
            v385 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
            memcpy(v522, v379, *(_QWORD *)(*(_QWORD *)(v385 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v381 + 16))(v522, v379, v380);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v381 + 56))(v522, 0, 1, v380);
          }
          v386 = v381;
          v387 = __dsta[14];
          v388 = &v544[v387];
          v389 = &v539[v387];
          v390 = *((_QWORD *)v389 + 1);
          *(_QWORD *)v388 = *(_QWORD *)v389;
          *((_QWORD *)v388 + 1) = v390;
          v391 = __dsta[15];
          v392 = &v544[v391];
          v393 = &v539[v391];
          v394 = *((_QWORD *)v393 + 1);
          *(_QWORD *)v392 = *(_QWORD *)v393;
          *((_QWORD *)v392 + 1) = v394;
          v395 = __dsta[16];
          v396 = &v544[v395];
          v397 = &v539[v395];
          swift_bridgeObjectRetain(v390);
          swift_bridgeObjectRetain(v394);
          if (v384(v397, 1, v380))
          {
            v398 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
            memcpy(v396, v397, *(_QWORD *)(*(_QWORD *)(v398 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v386 + 16))(v396, v397, v380);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v386 + 56))(v396, 0, 1, v380);
          }
          v399 = __dsta[17];
          v400 = &v544[v399];
          v401 = &v539[v399];
          if (v384(&v539[v399], 1, v380))
          {
            v402 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
            memcpy(v400, v401, *(_QWORD *)(*(_QWORD *)(v402 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v386 + 16))(v400, v401, v380);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v386 + 56))(v400, 0, 1, v380);
          }
          v544[__dsta[18]] = v539[__dsta[18]];
          v403 = v526[7];
          v404 = (char *)a1 + v403;
          v405 = (char *)a2 + v403;
          if (v384((char *)a2 + v403, 1, v380))
          {
            v406 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
            memcpy(v404, v405, *(_QWORD *)(*(_QWORD *)(v406 - 8) + 64));
            (*(void (**)(char *, char *, uint64_t))(v386 + 16))((char *)a1 + v526[8], (char *)a2 + v526[8], v380);
          }
          else
          {
            v407 = *(void (**)(char *, char *, uint64_t))(v386 + 16);
            v407(v404, v405, v380);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v386 + 56))(v404, 0, 1, v380);
            v407((char *)a1 + v526[8], (char *)a2 + v526[8], v380);
          }
          *(_QWORD *)((char *)a1 + v526[9]) = *(_QWORD *)((char *)a2 + v526[9]);
          v408 = v526[10];
          v409 = (_QWORD *)((char *)a1 + v408);
          v410 = (_QWORD *)((char *)a2 + v408);
          v411 = v410[1];
          *v409 = *v410;
          v409[1] = v411;
          v412 = v526[11];
          v413 = (_QWORD *)((char *)a1 + v412);
          v414 = (_QWORD *)((char *)a2 + v412);
          v415 = v414[1];
          *v413 = *v414;
          v413[1] = v415;
          v416 = v526[12];
          v417 = *(_QWORD *)((char *)a2 + v416);
          *(_QWORD *)((char *)a1 + v416) = v417;
          *((_BYTE *)a1 + v526[13]) = *((_BYTE *)a2 + v526[13]);
          *((_BYTE *)a1 + v526[14]) = *((_BYTE *)a2 + v526[14]);
          v418 = v526[15];
          v419 = (char *)a1 + v418;
          v420 = (char *)a2 + v418;
          *(_QWORD *)v419 = *(_QWORD *)v420;
          v419[8] = v420[8];
          v421 = v526[16];
          v422 = (_QWORD *)((char *)a1 + v421);
          v423 = (_QWORD *)((char *)a2 + v421);
          swift_bridgeObjectRetain(v411);
          swift_bridgeObjectRetain(v415);
          swift_retain(v417);
          if (v524(v423, 1, v530))
          {
            v424 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
            memcpy(v422, v423, *(_QWORD *)(*(_QWORD *)(v424 - 8) + 64));
          }
          else
          {
            v425 = v423[1];
            *v422 = *v423;
            v422[1] = v425;
            v426 = *((unsigned __int8 *)v423 + 32);
            swift_bridgeObjectRetain(v425);
            if (v426 == 255)
            {
              *((_OWORD *)v422 + 1) = *((_OWORD *)v423 + 1);
              *((_BYTE *)v422 + 32) = *((_BYTE *)v423 + 32);
            }
            else
            {
              v427 = v423[2];
              v428 = v423[3];
              sub_3D464(v427, v428, v426);
              v422[2] = v427;
              v422[3] = v428;
              *((_BYTE *)v422 + 32) = v426;
            }
            *(_OWORD *)(v422 + 5) = *(_OWORD *)(v423 + 5);
            v432 = (id *)(v423 + 7);
            v433 = *((unsigned __int8 *)v423 + 64);
            if (v433 == 255)
            {
              v422[7] = *v432;
              *((_BYTE *)v422 + 64) = *((_BYTE *)v423 + 64);
            }
            else
            {
              v434 = *v432;
              sub_3D47C(*v432, *((_BYTE *)v423 + 64));
              v422[7] = v434;
              *((_BYTE *)v422 + 64) = v433;
            }
            v438 = (id *)(v423 + 9);
            v439 = *((unsigned __int8 *)v423 + 80);
            if (v439 == 255)
            {
              v422[9] = *v438;
              *((_BYTE *)v422 + 80) = *((_BYTE *)v423 + 80);
            }
            else
            {
              v440 = *v438;
              sub_3D47C(*v438, *((_BYTE *)v423 + 80));
              v422[9] = v440;
              *((_BYTE *)v422 + 80) = v439;
            }
            v444 = (id *)(v423 + 11);
            v445 = *((unsigned __int8 *)v423 + 96);
            if (v445 == 255)
            {
              v422[11] = *v444;
              *((_BYTE *)v422 + 96) = *((_BYTE *)v423 + 96);
            }
            else
            {
              v446 = *v444;
              sub_3D47C(*v444, *((_BYTE *)v423 + 96));
              v422[11] = v446;
              *((_BYTE *)v422 + 96) = v445;
            }
            v450 = (id *)(v423 + 13);
            v451 = *((unsigned __int8 *)v423 + 112);
            if (v451 == 255)
            {
              v422[13] = *v450;
              *((_BYTE *)v422 + 112) = *((_BYTE *)v423 + 112);
            }
            else
            {
              v452 = *v450;
              sub_3D47C(*v450, *((_BYTE *)v423 + 112));
              v422[13] = v452;
              *((_BYTE *)v422 + 112) = v451;
            }
            v456 = (id *)(v423 + 15);
            v457 = *((unsigned __int8 *)v423 + 128);
            if (v457 == 255)
            {
              v422[15] = *v456;
              *((_BYTE *)v422 + 128) = *((_BYTE *)v423 + 128);
            }
            else
            {
              v458 = *v456;
              sub_3D47C(*v456, *((_BYTE *)v423 + 128));
              v422[15] = v458;
              *((_BYTE *)v422 + 128) = v457;
            }
            *((_BYTE *)v422 + 129) = *((_BYTE *)v423 + 129);
            v489 = v530[11];
            v490 = (char *)v422 + v489;
            v491 = (char *)v423 + v489;
            v492 = type metadata accessor for ArtworkCrop(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v492 - 8) + 16))(v490, v491, v492);
            v493 = v530[12];
            v494 = (_QWORD *)((char *)v422 + v493);
            v495 = (_QWORD *)((char *)v423 + v493);
            v496 = v495[1];
            *v494 = *v495;
            v494[1] = v496;
            *((_BYTE *)v422 + v530[13]) = *((_BYTE *)v423 + v530[13]);
            *((_BYTE *)v422 + v530[14]) = *((_BYTE *)v423 + v530[14]);
            *((_BYTE *)v422 + v530[15]) = *((_BYTE *)v423 + v530[15]);
            v497 = v530[16];
            v498 = (_QWORD *)((char *)v422 + v497);
            v499 = (_QWORD *)((char *)v423 + v497);
            v500 = v499[1];
            *v498 = *v499;
            v498[1] = v500;
            v501 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v520 + 56);
            swift_bridgeObjectRetain(v496);
            swift_bridgeObjectRetain(v500);
            v501(v422, 0, 1, v530);
          }
          v502 = v526[17];
          v503 = (_QWORD *)((char *)a1 + v502);
          v504 = (_QWORD *)((char *)a2 + v502);
          v505 = v504[1];
          *v503 = *v504;
          v503[1] = v505;
          v506 = v526[18];
          v507 = (char *)a1 + v506;
          v508 = (char *)a2 + v506;
          v507[8] = v508[8];
          *(_QWORD *)v507 = *(_QWORD *)v508;
          v509 = v526[19];
          v510 = (char *)a1 + v509;
          v511 = (char *)a2 + v509;
          *(_QWORD *)v510 = *(_QWORD *)v511;
          v510[8] = v511[8];
          *((_BYTE *)a1 + v526[20]) = *((_BYTE *)a2 + v526[20]);
          *((_BYTE *)a1 + v526[21]) = *((_BYTE *)a2 + v526[21]);
          v512 = v526[22];
          v513 = (char *)a1 + v512;
          v514 = (char *)a2 + v512;
          v515 = type metadata accessor for TranscriptRequestInformation(0);
          v516 = *(_QWORD *)(v515 - 8);
          v517 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v516 + 48);
          swift_bridgeObjectRetain(v505);
          if (v517(v514, 1, v515))
          {
            v518 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2C40);
            memcpy(v513, v514, *(_QWORD *)(*(_QWORD *)(v518 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v516 + 16))(v513, v514, v515);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v516 + 56))(v513, 0, 1, v515);
          }
          v25 = v528;
          v24 = a1;
          v26 = 1;
        }
        else
        {
          if (EnumCaseMultiPayload)
          {
            memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
LABEL_215:
            swift_storeEnumTagMultiPayload(a1, a3, 1);
            return a1;
          }
          v23 = a2[1];
          *a1 = *a2;
          a1[1] = v23;
          swift_bridgeObjectRetain(v23);
          v24 = a1;
          v25 = v21;
          v26 = 0;
        }
        swift_storeEnumTagMultiPayload(v24, v25, v26);
        goto LABEL_215;
      case 2u:
        v27 = type metadata accessor for DownloadButtonPresenter.Data(0);
        v28 = swift_getEnumCaseMultiPayload(a2, v27);
        if (v28 == 2)
        {
          v87 = *a2;
          *a1 = *a2;
          swift_retain(v87);
          v88 = a1;
          v89 = v27;
          v90 = 2;
        }
        else if (v28 == 1)
        {
          v527 = v27;
          *(_OWORD *)a1 = *(_OWORD *)a2;
          v29 = a2[2];
          a1[2] = v29;
          v30 = type metadata accessor for EpisodeOffer(0);
          v31 = *(int *)(v30 + 24);
          v32 = (char *)a1 + v31;
          v33 = (char *)a2 + v31;
          *(_OWORD *)v32 = *(_OWORD *)((char *)a2 + v31);
          v34 = *(_QWORD *)((char *)a2 + v31 + 16);
          *((_QWORD *)v32 + 2) = v34;
          v32[24] = *((_BYTE *)a2 + v31 + 24);
          __dst = (int *)type metadata accessor for ShowOffer(0);
          v535 = v33;
          v35 = __dst[7];
          v541 = v32;
          v36 = &v32[v35];
          v37 = &v33[v35];
          v38 = (int *)type metadata accessor for ArtworkModel(0);
          v519 = *((_QWORD *)v38 - 1);
          v39 = *(unsigned int (**)(_QWORD *, uint64_t, int *))(v519 + 48);
          swift_bridgeObjectRetain(v29);
          swift_bridgeObjectRetain(v34);
          v523 = v39;
          v529 = v38;
          v525 = (int *)v30;
          if (v39(v37, 1, v38))
          {
            v40 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
            memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
          }
          else
          {
            v163 = *((_QWORD *)v37 + 1);
            *(_QWORD *)v36 = *(_QWORD *)v37;
            *((_QWORD *)v36 + 1) = v163;
            v164 = v37[32];
            swift_bridgeObjectRetain(v163);
            if (v164 == 255)
            {
              *((_OWORD *)v36 + 1) = *((_OWORD *)v37 + 1);
              v36[32] = v37[32];
            }
            else
            {
              v165 = *((_QWORD *)v37 + 2);
              v166 = *((_QWORD *)v37 + 3);
              sub_3D464(v165, v166, v164);
              *((_QWORD *)v36 + 2) = v165;
              *((_QWORD *)v36 + 3) = v166;
              v36[32] = v164;
            }
            *(_OWORD *)(v36 + 40) = *(_OWORD *)(v37 + 40);
            v239 = (id *)(v37 + 56);
            v240 = v37[64];
            if (v240 == 255)
            {
              *((_QWORD *)v36 + 7) = *v239;
              v36[64] = v37[64];
            }
            else
            {
              v241 = *v239;
              sub_3D47C(*v239, v37[64]);
              *((_QWORD *)v36 + 7) = v241;
              v36[64] = v240;
            }
            v245 = (id *)(v37 + 72);
            v246 = v37[80];
            if (v246 == 255)
            {
              *((_QWORD *)v36 + 9) = *v245;
              v36[80] = v37[80];
            }
            else
            {
              v247 = *v245;
              sub_3D47C(*v245, v37[80]);
              *((_QWORD *)v36 + 9) = v247;
              v36[80] = v246;
            }
            v251 = (id *)(v37 + 88);
            v252 = v37[96];
            if (v252 == 255)
            {
              *((_QWORD *)v36 + 11) = *v251;
              v36[96] = v37[96];
            }
            else
            {
              v253 = *v251;
              sub_3D47C(*v251, v37[96]);
              *((_QWORD *)v36 + 11) = v253;
              v36[96] = v252;
            }
            v257 = (id *)(v37 + 104);
            v258 = v37[112];
            if (v258 == 255)
            {
              *((_QWORD *)v36 + 13) = *v257;
              v36[112] = v37[112];
            }
            else
            {
              v259 = *v257;
              sub_3D47C(*v257, v37[112]);
              *((_QWORD *)v36 + 13) = v259;
              v36[112] = v258;
            }
            v263 = (id *)(v37 + 120);
            v264 = v37[128];
            if (v264 == 255)
            {
              *((_QWORD *)v36 + 15) = *v263;
              v36[128] = v37[128];
            }
            else
            {
              v265 = *v263;
              sub_3D47C(*v263, v37[128]);
              *((_QWORD *)v36 + 15) = v265;
              v36[128] = v264;
            }
            v36[129] = v37[129];
            v269 = v38[11];
            v270 = &v36[v269];
            v271 = &v37[v269];
            v272 = type metadata accessor for ArtworkCrop(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v272 - 8) + 16))(v270, v271, v272);
            v273 = v38[12];
            v274 = &v36[v273];
            v275 = &v37[v273];
            v276 = *((_QWORD *)v275 + 1);
            *(_QWORD *)v274 = *(_QWORD *)v275;
            *((_QWORD *)v274 + 1) = v276;
            v36[v38[13]] = v37[v38[13]];
            v36[v38[14]] = v37[v38[14]];
            v36[v38[15]] = v37[v38[15]];
            v277 = v38[16];
            v278 = &v36[v277];
            v279 = &v37[v277];
            v280 = *((_QWORD *)v279 + 1);
            *(_QWORD *)v278 = *(_QWORD *)v279;
            *((_QWORD *)v278 + 1) = v280;
            v281 = *(void (**)(char *, _QWORD, uint64_t, int *))(v519 + 56);
            swift_bridgeObjectRetain(v276);
            swift_bridgeObjectRetain(v280);
            v281(v36, 0, 1, v38);
          }
          v282 = __dst[8];
          v283 = &v541[v282];
          v284 = &v535[v282];
          v285 = *((_QWORD *)v284 + 1);
          *(_QWORD *)v283 = *(_QWORD *)v284;
          *((_QWORD *)v283 + 1) = v285;
          v286 = __dst[9];
          v287 = &v541[v286];
          v288 = &v535[v286];
          v289 = *((_QWORD *)v288 + 1);
          *(_QWORD *)v287 = *(_QWORD *)v288;
          *((_QWORD *)v287 + 1) = v289;
          v541[__dst[10]] = v535[__dst[10]];
          v290 = __dst[11];
          v291 = &v541[v290];
          v292 = &v535[v290];
          v293 = *((_QWORD *)v292 + 1);
          *(_QWORD *)v291 = *(_QWORD *)v292;
          *((_QWORD *)v291 + 1) = v293;
          v294 = __dst[12];
          v295 = &v541[v294];
          v296 = &v535[v294];
          v297 = *((_QWORD *)v296 + 1);
          *(_QWORD *)v295 = *(_QWORD *)v296;
          *((_QWORD *)v295 + 1) = v297;
          v298 = __dst[13];
          v521 = &v541[v298];
          v299 = &v535[v298];
          v300 = type metadata accessor for URL(0);
          v301 = *(_QWORD *)(v300 - 8);
          v302 = v285;
          v303 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v301 + 48);
          swift_bridgeObjectRetain(v302);
          swift_bridgeObjectRetain(v289);
          swift_bridgeObjectRetain(v293);
          swift_bridgeObjectRetain(v297);
          v304 = v303;
          if (v303(v299, 1, v300))
          {
            v305 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
            memcpy(v521, v299, *(_QWORD *)(*(_QWORD *)(v305 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v301 + 16))(v521, v299, v300);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v301 + 56))(v521, 0, 1, v300);
          }
          v306 = v301;
          v307 = __dst[14];
          v308 = &v541[v307];
          v309 = &v535[v307];
          v310 = *((_QWORD *)v309 + 1);
          *(_QWORD *)v308 = *(_QWORD *)v309;
          *((_QWORD *)v308 + 1) = v310;
          v311 = __dst[15];
          v312 = &v541[v311];
          v313 = &v535[v311];
          v314 = *((_QWORD *)v313 + 1);
          *(_QWORD *)v312 = *(_QWORD *)v313;
          *((_QWORD *)v312 + 1) = v314;
          v315 = __dst[16];
          v316 = &v541[v315];
          v317 = &v535[v315];
          swift_bridgeObjectRetain(v310);
          swift_bridgeObjectRetain(v314);
          if (v304(v317, 1, v300))
          {
            v318 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
            memcpy(v316, v317, *(_QWORD *)(*(_QWORD *)(v318 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v306 + 16))(v316, v317, v300);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v306 + 56))(v316, 0, 1, v300);
          }
          v319 = __dst[17];
          v320 = &v541[v319];
          v321 = &v535[v319];
          if (v304(&v535[v319], 1, v300))
          {
            v322 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
            memcpy(v320, v321, *(_QWORD *)(*(_QWORD *)(v322 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v306 + 16))(v320, v321, v300);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v306 + 56))(v320, 0, 1, v300);
          }
          v541[__dst[18]] = v535[__dst[18]];
          v323 = v525[7];
          v324 = (char *)a1 + v323;
          v325 = (char *)a2 + v323;
          if (v304((char *)a2 + v323, 1, v300))
          {
            v326 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
            memcpy(v324, v325, *(_QWORD *)(*(_QWORD *)(v326 - 8) + 64));
            (*(void (**)(char *, char *, uint64_t))(v306 + 16))((char *)a1 + v525[8], (char *)a2 + v525[8], v300);
          }
          else
          {
            v327 = *(void (**)(char *, char *, uint64_t))(v306 + 16);
            v327(v324, v325, v300);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v306 + 56))(v324, 0, 1, v300);
            v327((char *)a1 + v525[8], (char *)a2 + v525[8], v300);
          }
          *(_QWORD *)((char *)a1 + v525[9]) = *(_QWORD *)((char *)a2 + v525[9]);
          v328 = v525[10];
          v329 = (_QWORD *)((char *)a1 + v328);
          v330 = (_QWORD *)((char *)a2 + v328);
          v331 = v330[1];
          *v329 = *v330;
          v329[1] = v331;
          v332 = v525[11];
          v333 = (_QWORD *)((char *)a1 + v332);
          v334 = (_QWORD *)((char *)a2 + v332);
          v335 = v334[1];
          *v333 = *v334;
          v333[1] = v335;
          v336 = v525[12];
          v337 = *(_QWORD *)((char *)a2 + v336);
          *(_QWORD *)((char *)a1 + v336) = v337;
          *((_BYTE *)a1 + v525[13]) = *((_BYTE *)a2 + v525[13]);
          *((_BYTE *)a1 + v525[14]) = *((_BYTE *)a2 + v525[14]);
          v338 = v525[15];
          v339 = (char *)a1 + v338;
          v340 = (char *)a2 + v338;
          *(_QWORD *)v339 = *(_QWORD *)v340;
          v339[8] = v340[8];
          v341 = v525[16];
          v342 = (_QWORD *)((char *)a1 + v341);
          v343 = (_QWORD *)((char *)a2 + v341);
          swift_bridgeObjectRetain(v331);
          swift_bridgeObjectRetain(v335);
          swift_retain(v337);
          if (v523(v343, 1, v529))
          {
            v344 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
            memcpy(v342, v343, *(_QWORD *)(*(_QWORD *)(v344 - 8) + 64));
          }
          else
          {
            v345 = v343[1];
            *v342 = *v343;
            v342[1] = v345;
            v346 = *((unsigned __int8 *)v343 + 32);
            swift_bridgeObjectRetain(v345);
            if (v346 == 255)
            {
              *((_OWORD *)v342 + 1) = *((_OWORD *)v343 + 1);
              *((_BYTE *)v342 + 32) = *((_BYTE *)v343 + 32);
            }
            else
            {
              v347 = v343[2];
              v348 = v343[3];
              sub_3D464(v347, v348, v346);
              v342[2] = v347;
              v342[3] = v348;
              *((_BYTE *)v342 + 32) = v346;
            }
            *(_OWORD *)(v342 + 5) = *(_OWORD *)(v343 + 5);
            v429 = (id *)(v343 + 7);
            v430 = *((unsigned __int8 *)v343 + 64);
            if (v430 == 255)
            {
              v342[7] = *v429;
              *((_BYTE *)v342 + 64) = *((_BYTE *)v343 + 64);
            }
            else
            {
              v431 = *v429;
              sub_3D47C(*v429, *((_BYTE *)v343 + 64));
              v342[7] = v431;
              *((_BYTE *)v342 + 64) = v430;
            }
            v435 = (id *)(v343 + 9);
            v436 = *((unsigned __int8 *)v343 + 80);
            if (v436 == 255)
            {
              v342[9] = *v435;
              *((_BYTE *)v342 + 80) = *((_BYTE *)v343 + 80);
            }
            else
            {
              v437 = *v435;
              sub_3D47C(*v435, *((_BYTE *)v343 + 80));
              v342[9] = v437;
              *((_BYTE *)v342 + 80) = v436;
            }
            v441 = (id *)(v343 + 11);
            v442 = *((unsigned __int8 *)v343 + 96);
            if (v442 == 255)
            {
              v342[11] = *v441;
              *((_BYTE *)v342 + 96) = *((_BYTE *)v343 + 96);
            }
            else
            {
              v443 = *v441;
              sub_3D47C(*v441, *((_BYTE *)v343 + 96));
              v342[11] = v443;
              *((_BYTE *)v342 + 96) = v442;
            }
            v447 = (id *)(v343 + 13);
            v448 = *((unsigned __int8 *)v343 + 112);
            if (v448 == 255)
            {
              v342[13] = *v447;
              *((_BYTE *)v342 + 112) = *((_BYTE *)v343 + 112);
            }
            else
            {
              v449 = *v447;
              sub_3D47C(*v447, *((_BYTE *)v343 + 112));
              v342[13] = v449;
              *((_BYTE *)v342 + 112) = v448;
            }
            v453 = (id *)(v343 + 15);
            v454 = *((unsigned __int8 *)v343 + 128);
            if (v454 == 255)
            {
              v342[15] = *v453;
              *((_BYTE *)v342 + 128) = *((_BYTE *)v343 + 128);
            }
            else
            {
              v455 = *v453;
              sub_3D47C(*v453, *((_BYTE *)v343 + 128));
              v342[15] = v455;
              *((_BYTE *)v342 + 128) = v454;
            }
            *((_BYTE *)v342 + 129) = *((_BYTE *)v343 + 129);
            v459 = v529[11];
            v460 = (char *)v342 + v459;
            v461 = (char *)v343 + v459;
            v462 = type metadata accessor for ArtworkCrop(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v462 - 8) + 16))(v460, v461, v462);
            v463 = v529[12];
            v464 = (_QWORD *)((char *)v342 + v463);
            v465 = (_QWORD *)((char *)v343 + v463);
            v466 = v465[1];
            *v464 = *v465;
            v464[1] = v466;
            *((_BYTE *)v342 + v529[13]) = *((_BYTE *)v343 + v529[13]);
            *((_BYTE *)v342 + v529[14]) = *((_BYTE *)v343 + v529[14]);
            *((_BYTE *)v342 + v529[15]) = *((_BYTE *)v343 + v529[15]);
            v467 = v529[16];
            v468 = (_QWORD *)((char *)v342 + v467);
            v469 = (_QWORD *)((char *)v343 + v467);
            v470 = v469[1];
            *v468 = *v469;
            v468[1] = v470;
            v471 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v519 + 56);
            swift_bridgeObjectRetain(v466);
            swift_bridgeObjectRetain(v470);
            v471(v342, 0, 1, v529);
          }
          v472 = v525[17];
          v473 = (_QWORD *)((char *)a1 + v472);
          v474 = (_QWORD *)((char *)a2 + v472);
          v475 = v474[1];
          *v473 = *v474;
          v473[1] = v475;
          v476 = v525[18];
          v477 = (char *)a1 + v476;
          v478 = (char *)a2 + v476;
          v477[8] = v478[8];
          *(_QWORD *)v477 = *(_QWORD *)v478;
          v479 = v525[19];
          v480 = (char *)a1 + v479;
          v481 = (char *)a2 + v479;
          *(_QWORD *)v480 = *(_QWORD *)v481;
          v480[8] = v481[8];
          *((_BYTE *)a1 + v525[20]) = *((_BYTE *)a2 + v525[20]);
          *((_BYTE *)a1 + v525[21]) = *((_BYTE *)a2 + v525[21]);
          v482 = v525[22];
          v483 = (char *)a1 + v482;
          v484 = (char *)a2 + v482;
          v485 = type metadata accessor for TranscriptRequestInformation(0);
          v486 = *(_QWORD *)(v485 - 8);
          v487 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v486 + 48);
          swift_bridgeObjectRetain(v475);
          if (v487(v484, 1, v485))
          {
            v488 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2C40);
            memcpy(v483, v484, *(_QWORD *)(*(_QWORD *)(v488 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v486 + 16))(v483, v484, v485);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v486 + 56))(v483, 0, 1, v485);
          }
          v89 = v527;
          v88 = a1;
          v90 = 1;
        }
        else
        {
          v91 = a2[1];
          *a1 = *a2;
          a1[1] = v91;
          swift_bridgeObjectRetain(v91);
          v88 = a1;
          v89 = v27;
          v90 = 0;
        }
        swift_storeEnumTagMultiPayload(v88, v89, v90);
        swift_storeEnumTagMultiPayload(a1, a3, 2);
        return a1;
      case 3u:
        v41 = type metadata accessor for FollowButtonPresenter.Data(0);
        v42 = swift_getEnumCaseMultiPayload(a2, v41);
        *a1 = *a2;
        if (v42 == 1)
        {
          v43 = a2[2];
          a1[1] = a2[1];
          a1[2] = v43;
          *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
          v542 = (int *)type metadata accessor for ShowOffer(0);
          v44 = v542[7];
          v45 = (_QWORD *)((char *)a1 + v44);
          v46 = (_QWORD *)((char *)a2 + v44);
          v47 = (int *)type metadata accessor for ArtworkModel(0);
          v48 = *((_QWORD *)v47 - 1);
          v49 = *(unsigned int (**)(_QWORD *, uint64_t, int *))(v48 + 48);
          swift_bridgeObjectRetain(v43);
          v536 = v41;
          if (v49(v46, 1, v47))
          {
            v50 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
            memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
          }
          else
          {
            v92 = v46[1];
            *v45 = *v46;
            v45[1] = v92;
            v93 = *((unsigned __int8 *)v46 + 32);
            swift_bridgeObjectRetain(v92);
            if (v93 == 255)
            {
              *((_OWORD *)v45 + 1) = *((_OWORD *)v46 + 1);
              *((_BYTE *)v45 + 32) = *((_BYTE *)v46 + 32);
            }
            else
            {
              v95 = v46[2];
              v94 = v46[3];
              sub_3D464(v95, v94, v93);
              v45[2] = v95;
              v45[3] = v94;
              *((_BYTE *)v45 + 32) = v93;
            }
            *(_OWORD *)(v45 + 5) = *(_OWORD *)(v46 + 5);
            v171 = (id *)(v46 + 7);
            v172 = *((unsigned __int8 *)v46 + 64);
            if (v172 == 255)
            {
              v45[7] = *v171;
              *((_BYTE *)v45 + 64) = *((_BYTE *)v46 + 64);
            }
            else
            {
              v173 = *v171;
              sub_3D47C(*v171, *((_BYTE *)v46 + 64));
              v45[7] = v173;
              *((_BYTE *)v45 + 64) = v172;
            }
            v174 = (id *)(v46 + 9);
            v175 = *((unsigned __int8 *)v46 + 80);
            if (v175 == 255)
            {
              v45[9] = *v174;
              *((_BYTE *)v45 + 80) = *((_BYTE *)v46 + 80);
            }
            else
            {
              v176 = *v174;
              sub_3D47C(*v174, *((_BYTE *)v46 + 80));
              v45[9] = v176;
              *((_BYTE *)v45 + 80) = v175;
            }
            v177 = (id *)(v46 + 11);
            v178 = *((unsigned __int8 *)v46 + 96);
            if (v178 == 255)
            {
              v45[11] = *v177;
              *((_BYTE *)v45 + 96) = *((_BYTE *)v46 + 96);
            }
            else
            {
              v179 = *v177;
              sub_3D47C(*v177, *((_BYTE *)v46 + 96));
              v45[11] = v179;
              *((_BYTE *)v45 + 96) = v178;
            }
            v180 = (id *)(v46 + 13);
            v181 = *((unsigned __int8 *)v46 + 112);
            if (v181 == 255)
            {
              v45[13] = *v180;
              *((_BYTE *)v45 + 112) = *((_BYTE *)v46 + 112);
            }
            else
            {
              v182 = *v180;
              sub_3D47C(*v180, *((_BYTE *)v46 + 112));
              v45[13] = v182;
              *((_BYTE *)v45 + 112) = v181;
            }
            v183 = (id *)(v46 + 15);
            v184 = *((unsigned __int8 *)v46 + 128);
            if (v184 == 255)
            {
              v45[15] = *v183;
              *((_BYTE *)v45 + 128) = *((_BYTE *)v46 + 128);
            }
            else
            {
              v185 = *v183;
              sub_3D47C(*v183, *((_BYTE *)v46 + 128));
              v45[15] = v185;
              *((_BYTE *)v45 + 128) = v184;
            }
            *((_BYTE *)v45 + 129) = *((_BYTE *)v46 + 129);
            v186 = v47[11];
            v187 = (char *)v45 + v186;
            v188 = (char *)v46 + v186;
            v189 = type metadata accessor for ArtworkCrop(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v189 - 8) + 16))(v187, v188, v189);
            v190 = v47[12];
            v191 = (_QWORD *)((char *)v45 + v190);
            v192 = (_QWORD *)((char *)v46 + v190);
            v193 = v192[1];
            *v191 = *v192;
            v191[1] = v193;
            *((_BYTE *)v45 + v47[13]) = *((_BYTE *)v46 + v47[13]);
            *((_BYTE *)v45 + v47[14]) = *((_BYTE *)v46 + v47[14]);
            *((_BYTE *)v45 + v47[15]) = *((_BYTE *)v46 + v47[15]);
            v194 = v47[16];
            v195 = (_QWORD *)((char *)v45 + v194);
            v196 = (_QWORD *)((char *)v46 + v194);
            v197 = v196[1];
            *v195 = *v196;
            v195[1] = v197;
            v198 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v48 + 56);
            swift_bridgeObjectRetain(v193);
            swift_bridgeObjectRetain(v197);
            v198(v45, 0, 1, v47);
          }
          v199 = v542[8];
          v200 = (_QWORD *)((char *)a1 + v199);
          v201 = (_QWORD *)((char *)a2 + v199);
          v202 = v201[1];
          *v200 = *v201;
          v200[1] = v202;
          v203 = v542[9];
          v204 = (_QWORD *)((char *)a1 + v203);
          v205 = (_QWORD *)((char *)a2 + v203);
          v206 = v205[1];
          *v204 = *v205;
          v204[1] = v206;
          *((_BYTE *)a1 + v542[10]) = *((_BYTE *)a2 + v542[10]);
          v207 = v542[11];
          v208 = (_QWORD *)((char *)a1 + v207);
          v209 = (_QWORD *)((char *)a2 + v207);
          v210 = v209[1];
          *v208 = *v209;
          v208[1] = v210;
          v211 = v542[12];
          v212 = (_QWORD *)((char *)a1 + v211);
          v213 = (_QWORD *)((char *)a2 + v211);
          v214 = v213[1];
          *v212 = *v213;
          v212[1] = v214;
          v215 = v542[13];
          __dstb = (char *)a1 + v215;
          v216 = (char *)a2 + v215;
          v217 = type metadata accessor for URL(0);
          v218 = *(_QWORD *)(v217 - 8);
          v219 = v202;
          v220 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v218 + 48);
          swift_bridgeObjectRetain(v219);
          swift_bridgeObjectRetain(v206);
          swift_bridgeObjectRetain(v210);
          swift_bridgeObjectRetain(v214);
          v531 = v218;
          v221 = v220;
          if (v220(v216, 1, v217))
          {
            v222 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
            memcpy(__dstb, v216, *(_QWORD *)(*(_QWORD *)(v222 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v218 + 16))(__dstb, v216, v217);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v218 + 56))(__dstb, 0, 1, v217);
          }
          v41 = v536;
          v223 = v542[14];
          v224 = (_QWORD *)((char *)a1 + v223);
          v225 = (_QWORD *)((char *)a2 + v223);
          v226 = v225[1];
          *v224 = *v225;
          v224[1] = v226;
          v227 = v542[15];
          v228 = (_QWORD *)((char *)a1 + v227);
          v229 = (_QWORD *)((char *)a2 + v227);
          v230 = v229[1];
          *v228 = *v229;
          v228[1] = v230;
          v231 = v542[16];
          v232 = (char *)a1 + v231;
          v233 = (char *)a2 + v231;
          swift_bridgeObjectRetain(v226);
          swift_bridgeObjectRetain(v230);
          if (v221(v233, 1, v217))
          {
            v234 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
            memcpy(v232, v233, *(_QWORD *)(*(_QWORD *)(v234 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v531 + 16))(v232, v233, v217);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v531 + 56))(v232, 0, 1, v217);
          }
          v235 = v542[17];
          v236 = (char *)a1 + v235;
          v237 = (char *)a2 + v235;
          if (v221((char *)a2 + v235, 1, v217))
          {
            v238 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
            memcpy(v236, v237, *(_QWORD *)(*(_QWORD *)(v238 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v531 + 16))(v236, v237, v217);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v531 + 56))(v236, 0, 1, v217);
          }
          *((_BYTE *)a1 + v542[18]) = *((_BYTE *)a2 + v542[18]);
          v66 = 1;
        }
        else
        {
          v65 = a2[1];
          a1[1] = v65;
          swift_bridgeObjectRetain(v65);
          v66 = 0;
        }
        swift_storeEnumTagMultiPayload(a1, v41, v66);
        swift_storeEnumTagMultiPayload(a1, a3, 3);
        return a1;
      case 4u:
        v51 = a2[1];
        *a1 = *a2;
        a1[1] = v51;
        swift_retain(v51);
        swift_storeEnumTagMultiPayload(a1, a3, 4);
        return a1;
      case 5u:
        v52 = *(_OWORD *)(a2 + 3);
        *(_OWORD *)(a1 + 3) = v52;
        (**(void (***)(_QWORD *, _QWORD *))(v52 - 8))(a1, a2);
        swift_storeEnumTagMultiPayload(a1, a3, 5);
        return a1;
      case 6u:
        v543 = a3;
        v53 = a2[1];
        *a1 = *a2;
        a1[1] = v53;
        v54 = a2[3];
        a1[2] = a2[2];
        a1[3] = v54;
        v55 = a2[5];
        a1[4] = a2[4];
        a1[5] = v55;
        v537 = type metadata accessor for ActionMenu(0);
        v56 = *(int *)(v537 + 28);
        v57 = (_QWORD *)((char *)a1 + v56);
        v58 = (_QWORD *)((char *)a2 + v56);
        v59 = (int *)type metadata accessor for ArtworkModel(0);
        v60 = *((_QWORD *)v59 - 1);
        v61 = *(unsigned int (**)(_QWORD *, uint64_t, int *))(v60 + 48);
        swift_bridgeObjectRetain(v53);
        swift_bridgeObjectRetain(v54);
        swift_bridgeObjectRetain(v55);
        if (v61(v58, 1, v59))
        {
          v62 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
          memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
          v64 = v537;
          v63 = v543;
        }
        else
        {
          v71 = v58[1];
          *v57 = *v58;
          v57[1] = v71;
          v72 = *((unsigned __int8 *)v58 + 32);
          swift_bridgeObjectRetain(v71);
          if (v72 == 255)
          {
            *((_OWORD *)v57 + 1) = *((_OWORD *)v58 + 1);
            *((_BYTE *)v57 + 32) = *((_BYTE *)v58 + 32);
          }
          else
          {
            v73 = v58[2];
            v74 = v58[3];
            sub_3D464(v73, v74, v72);
            v57[2] = v73;
            v57[3] = v74;
            *((_BYTE *)v57 + 32) = v72;
          }
          v64 = v537;
          v63 = v543;
          *(_OWORD *)(v57 + 5) = *(_OWORD *)(v58 + 5);
          v99 = (id *)(v58 + 7);
          v100 = *((unsigned __int8 *)v58 + 64);
          if (v100 == 255)
          {
            v57[7] = *v99;
            *((_BYTE *)v57 + 64) = *((_BYTE *)v58 + 64);
          }
          else
          {
            v101 = *v99;
            sub_3D47C(*v99, *((_BYTE *)v58 + 64));
            v57[7] = v101;
            *((_BYTE *)v57 + 64) = v100;
          }
          v105 = (id *)(v58 + 9);
          v106 = *((unsigned __int8 *)v58 + 80);
          if (v106 == 255)
          {
            v57[9] = *v105;
            *((_BYTE *)v57 + 80) = *((_BYTE *)v58 + 80);
          }
          else
          {
            v107 = *v105;
            sub_3D47C(*v105, *((_BYTE *)v58 + 80));
            v57[9] = v107;
            *((_BYTE *)v57 + 80) = v106;
          }
          v111 = (id *)(v58 + 11);
          v112 = *((unsigned __int8 *)v58 + 96);
          if (v112 == 255)
          {
            v57[11] = *v111;
            *((_BYTE *)v57 + 96) = *((_BYTE *)v58 + 96);
          }
          else
          {
            v113 = *v111;
            sub_3D47C(*v111, *((_BYTE *)v58 + 96));
            v57[11] = v113;
            *((_BYTE *)v57 + 96) = v112;
          }
          v117 = (id *)(v58 + 13);
          v118 = *((unsigned __int8 *)v58 + 112);
          if (v118 == 255)
          {
            v57[13] = *v117;
            *((_BYTE *)v57 + 112) = *((_BYTE *)v58 + 112);
          }
          else
          {
            v119 = *v117;
            sub_3D47C(*v117, *((_BYTE *)v58 + 112));
            v57[13] = v119;
            *((_BYTE *)v57 + 112) = v118;
          }
          v123 = (id *)(v58 + 15);
          v124 = *((unsigned __int8 *)v58 + 128);
          if (v124 == 255)
          {
            v57[15] = *v123;
            *((_BYTE *)v57 + 128) = *((_BYTE *)v58 + 128);
          }
          else
          {
            v125 = *v123;
            sub_3D47C(*v123, *((_BYTE *)v58 + 128));
            v57[15] = v125;
            *((_BYTE *)v57 + 128) = v124;
          }
          *((_BYTE *)v57 + 129) = *((_BYTE *)v58 + 129);
          v147 = v59[11];
          v148 = (char *)v57 + v147;
          v149 = (char *)v58 + v147;
          v150 = type metadata accessor for ArtworkCrop(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v150 - 8) + 16))(v148, v149, v150);
          v151 = v59[12];
          v152 = (_QWORD *)((char *)v57 + v151);
          v153 = (_QWORD *)((char *)v58 + v151);
          v154 = v153[1];
          *v152 = *v153;
          v152[1] = v154;
          *((_BYTE *)v57 + v59[13]) = *((_BYTE *)v58 + v59[13]);
          *((_BYTE *)v57 + v59[14]) = *((_BYTE *)v58 + v59[14]);
          *((_BYTE *)v57 + v59[15]) = *((_BYTE *)v58 + v59[15]);
          v155 = v59[16];
          v156 = (_QWORD *)((char *)v57 + v155);
          v157 = (_QWORD *)((char *)v58 + v155);
          v158 = v157[1];
          *v156 = *v157;
          v156[1] = v158;
          v159 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v60 + 56);
          swift_bridgeObjectRetain(v154);
          swift_bridgeObjectRetain(v158);
          v159(v57, 0, 1, v59);
        }
        v160 = *(int *)(v64 + 32);
        v161 = *(_QWORD *)((char *)a2 + v160);
        *(_QWORD *)((char *)a1 + v160) = v161;
        swift_bridgeObjectRetain(v161);
        v162 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B27F8);
        *((_BYTE *)a1 + *(int *)(v162 + 48)) = *((_BYTE *)a2 + *(int *)(v162 + 48));
        swift_storeEnumTagMultiPayload(a1, v63, 6);
        return a1;
      default:
        memcpy(a1, a2, *(_QWORD *)(v5 + 64));
        return a1;
    }
  }
  v19 = *a2;
  *a1 = *a2;
  a1 = (_QWORD *)(v19 + ((v6 + 16) & ~(unint64_t)v6));
  swift_retain(v19);
  return a1;
}

uint64_t destroy for HeaderButtonItem(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  int *v4;
  char *v5;
  int *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  char *v20;
  int *v21;
  char *v22;
  int *v23;
  unsigned int (*v24)(char *, uint64_t, int *);
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int (*v36)(char *, uint64_t, uint64_t);
  char *v37;
  char *v38;
  char *v39;
  unsigned int v40;
  void (*v41)(char *, uint64_t);
  char *v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int *v54;
  char *v55;
  int *v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  char *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int (*v68)(char *, uint64_t, uint64_t);
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  int *v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  char *v82;
  uint64_t v83;

  result = swift_getEnumCaseMultiPayload(a1, a2);
  switch((int)result)
  {
    case 0:
      swift_bridgeObjectRelease(a1[1]);
      swift_bridgeObjectRelease(a1[3]);
      v4 = (int *)type metadata accessor for ActionButton(0);
      v5 = (char *)a1 + v4[6];
      v6 = (int *)type metadata accessor for ArtworkModel(0);
      if (!(*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v6 - 1) + 48))(v5, 1, v6))
      {
        swift_bridgeObjectRelease(*((_QWORD *)v5 + 1));
        v7 = v5[32];
        if (v7 != 255)
          sub_3B5BC(*((_QWORD *)v5 + 2), *((_QWORD *)v5 + 3), v7);
        v8 = v5[64];
        if (v8 != 255)
          sub_3D624(*((id *)v5 + 7), v8);
        v9 = v5[80];
        if (v9 != 255)
          sub_3D624(*((id *)v5 + 9), v9);
        v10 = v5[96];
        if (v10 != 255)
          sub_3D624(*((id *)v5 + 11), v10);
        v11 = v5[112];
        if (v11 != 255)
          sub_3D624(*((id *)v5 + 13), v11);
        v12 = v5[128];
        if (v12 != 255)
          sub_3D624(*((id *)v5 + 15), v12);
        v13 = &v5[v6[11]];
        v14 = type metadata accessor for ArtworkCrop(0);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
        swift_bridgeObjectRelease(*(_QWORD *)&v5[v6[12] + 8]);
        swift_bridgeObjectRelease(*(_QWORD *)&v5[v6[16] + 8]);
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t *)((char *)a1 + v4[8]));
      v15 = (char *)a1 + v4[9];
      v16 = type metadata accessor for ImpressionMetrics(0);
      goto LABEL_59;
    case 1:
      v17 = type metadata accessor for BookmarkButtonPresenter.Data(0);
      result = swift_getEnumCaseMultiPayload(a1, v17);
      if ((_DWORD)result != 1)
        goto LABEL_18;
      goto LABEL_22;
    case 2:
      v18 = type metadata accessor for DownloadButtonPresenter.Data(0);
      result = swift_getEnumCaseMultiPayload(a1, v18);
      if ((_DWORD)result == 2)
      {
        v72 = *a1;
LABEL_102:
        result = swift_release(v72);
      }
      else if ((_DWORD)result == 1)
      {
LABEL_22:
        swift_bridgeObjectRelease(a1[2]);
        v19 = (int *)type metadata accessor for EpisodeOffer(0);
        v20 = (char *)a1 + v19[6];
        swift_bridgeObjectRelease(*((_QWORD *)v20 + 2));
        v21 = (int *)type metadata accessor for ShowOffer(0);
        v22 = &v20[v21[7]];
        v23 = (int *)type metadata accessor for ArtworkModel(0);
        v24 = *(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v23 - 1) + 48);
        if (!v24(v22, 1, v23))
        {
          swift_bridgeObjectRelease(*((_QWORD *)v22 + 1));
          v25 = v22[32];
          if (v25 != 255)
            sub_3B5BC(*((_QWORD *)v22 + 2), *((_QWORD *)v22 + 3), v25);
          v26 = v22[64];
          if (v26 != 255)
            sub_3D624(*((id *)v22 + 7), v26);
          v27 = v22[80];
          if (v27 != 255)
            sub_3D624(*((id *)v22 + 9), v27);
          v28 = v22[96];
          if (v28 != 255)
            sub_3D624(*((id *)v22 + 11), v28);
          v29 = v22[112];
          if (v29 != 255)
            sub_3D624(*((id *)v22 + 13), v29);
          v30 = v22[128];
          if (v30 != 255)
            sub_3D624(*((id *)v22 + 15), v30);
          v31 = &v22[v23[11]];
          v32 = type metadata accessor for ArtworkCrop(0);
          (*(void (**)(char *, uint64_t))(*(_QWORD *)(v32 - 8) + 8))(v31, v32);
          swift_bridgeObjectRelease(*(_QWORD *)&v22[v23[12] + 8]);
          swift_bridgeObjectRelease(*(_QWORD *)&v22[v23[16] + 8]);
        }
        swift_bridgeObjectRelease(*(_QWORD *)&v20[v21[8] + 8]);
        swift_bridgeObjectRelease(*(_QWORD *)&v20[v21[9] + 8]);
        swift_bridgeObjectRelease(*(_QWORD *)&v20[v21[11] + 8]);
        swift_bridgeObjectRelease(*(_QWORD *)&v20[v21[12] + 8]);
        v33 = &v20[v21[13]];
        v34 = type metadata accessor for URL(0);
        v35 = *(_QWORD *)(v34 - 8);
        v36 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48);
        if (!v36(v33, 1, v34))
          (*(void (**)(char *, uint64_t))(v35 + 8))(v33, v34);
        swift_bridgeObjectRelease(*(_QWORD *)&v20[v21[14] + 8]);
        swift_bridgeObjectRelease(*(_QWORD *)&v20[v21[15] + 8]);
        v37 = &v20[v21[16]];
        if (!v36(v37, 1, v34))
          (*(void (**)(char *, uint64_t))(v35 + 8))(v37, v34);
        v38 = &v20[v21[17]];
        if (!v36(v38, 1, v34))
          (*(void (**)(char *, uint64_t))(v35 + 8))(v38, v34);
        v39 = (char *)a1 + v19[7];
        v40 = v36(v39, 1, v34);
        v41 = *(void (**)(char *, uint64_t))(v35 + 8);
        if (!v40)
          v41(v39, v34);
        v41((char *)a1 + v19[8], v34);
        swift_bridgeObjectRelease(*(uint64_t *)((char *)a1 + v19[10] + 8));
        swift_bridgeObjectRelease(*(uint64_t *)((char *)a1 + v19[11] + 8));
        swift_release(*(uint64_t *)((char *)a1 + v19[12]));
        v42 = (char *)a1 + v19[16];
        if (!v24(v42, 1, v23))
        {
          swift_bridgeObjectRelease(*((_QWORD *)v42 + 1));
          v43 = v42[32];
          if (v43 != 255)
            sub_3B5BC(*((_QWORD *)v42 + 2), *((_QWORD *)v42 + 3), v43);
          v44 = v42[64];
          if (v44 != 255)
            sub_3D624(*((id *)v42 + 7), v44);
          v45 = v42[80];
          if (v45 != 255)
            sub_3D624(*((id *)v42 + 9), v45);
          v46 = v42[96];
          if (v46 != 255)
            sub_3D624(*((id *)v42 + 11), v46);
          v47 = v42[112];
          if (v47 != 255)
            sub_3D624(*((id *)v42 + 13), v47);
          v48 = v42[128];
          if (v48 != 255)
            sub_3D624(*((id *)v42 + 15), v48);
          v49 = &v42[v23[11]];
          v50 = type metadata accessor for ArtworkCrop(0);
          (*(void (**)(char *, uint64_t))(*(_QWORD *)(v50 - 8) + 8))(v49, v50);
          swift_bridgeObjectRelease(*(_QWORD *)&v42[v23[12] + 8]);
          swift_bridgeObjectRelease(*(_QWORD *)&v42[v23[16] + 8]);
        }
        swift_bridgeObjectRelease(*(uint64_t *)((char *)a1 + v19[17] + 8));
        v15 = (char *)a1 + v19[22];
        v16 = type metadata accessor for TranscriptRequestInformation(0);
LABEL_59:
        v51 = v16;
        v52 = *(_QWORD *)(v16 - 8);
        result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v52 + 48))(v15, 1, v16);
        if (!(_DWORD)result)
          result = (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v15, v51);
      }
      else
      {
LABEL_18:
        if (!(_DWORD)result)
        {
LABEL_82:
          v71 = a1[1];
LABEL_100:
          result = swift_bridgeObjectRelease(v71);
        }
      }
      break;
    case 3:
      v53 = type metadata accessor for FollowButtonPresenter.Data(0);
      if (swift_getEnumCaseMultiPayload(a1, v53) != 1)
        goto LABEL_82;
      swift_bridgeObjectRelease(a1[2]);
      v54 = (int *)type metadata accessor for ShowOffer(0);
      v55 = (char *)a1 + v54[7];
      v56 = (int *)type metadata accessor for ArtworkModel(0);
      if (!(*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v56 - 1) + 48))(v55, 1, v56))
      {
        swift_bridgeObjectRelease(*((_QWORD *)v55 + 1));
        v57 = v55[32];
        if (v57 != 255)
          sub_3B5BC(*((_QWORD *)v55 + 2), *((_QWORD *)v55 + 3), v57);
        v58 = v55[64];
        if (v58 != 255)
          sub_3D624(*((id *)v55 + 7), v58);
        v59 = v55[80];
        if (v59 != 255)
          sub_3D624(*((id *)v55 + 9), v59);
        v60 = v55[96];
        if (v60 != 255)
          sub_3D624(*((id *)v55 + 11), v60);
        v61 = v55[112];
        if (v61 != 255)
          sub_3D624(*((id *)v55 + 13), v61);
        v62 = v55[128];
        if (v62 != 255)
          sub_3D624(*((id *)v55 + 15), v62);
        v63 = &v55[v56[11]];
        v64 = type metadata accessor for ArtworkCrop(0);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v64 - 8) + 8))(v63, v64);
        swift_bridgeObjectRelease(*(_QWORD *)&v55[v56[12] + 8]);
        swift_bridgeObjectRelease(*(_QWORD *)&v55[v56[16] + 8]);
      }
      swift_bridgeObjectRelease(*(uint64_t *)((char *)a1 + v54[8] + 8));
      swift_bridgeObjectRelease(*(uint64_t *)((char *)a1 + v54[9] + 8));
      swift_bridgeObjectRelease(*(uint64_t *)((char *)a1 + v54[11] + 8));
      swift_bridgeObjectRelease(*(uint64_t *)((char *)a1 + v54[12] + 8));
      v65 = (char *)a1 + v54[13];
      v66 = type metadata accessor for URL(0);
      v67 = *(_QWORD *)(v66 - 8);
      v68 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v67 + 48);
      if (!v68(v65, 1, v66))
        (*(void (**)(char *, uint64_t))(v67 + 8))(v65, v66);
      swift_bridgeObjectRelease(*(uint64_t *)((char *)a1 + v54[14] + 8));
      swift_bridgeObjectRelease(*(uint64_t *)((char *)a1 + v54[15] + 8));
      v69 = (char *)a1 + v54[16];
      if (!v68(v69, 1, v66))
        (*(void (**)(char *, uint64_t))(v67 + 8))(v69, v66);
      v70 = (char *)a1 + v54[17];
      result = ((uint64_t (*)(char *, uint64_t, uint64_t))v68)(v70, 1, v66);
      if (!(_DWORD)result)
        result = (*(uint64_t (**)(char *, uint64_t))(v67 + 8))(v70, v66);
      break;
    case 4:
      v72 = a1[1];
      goto LABEL_102;
    case 5:
      return __swift_destroy_boxed_opaque_existential_1(a1);
    case 6:
      swift_bridgeObjectRelease(a1[1]);
      swift_bridgeObjectRelease(a1[3]);
      swift_bridgeObjectRelease(a1[5]);
      v73 = type metadata accessor for ActionMenu(0);
      v74 = (char *)a1 + *(int *)(v73 + 28);
      v75 = (int *)type metadata accessor for ArtworkModel(0);
      if (!(*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v75 - 1) + 48))(v74, 1, v75))
      {
        swift_bridgeObjectRelease(*((_QWORD *)v74 + 1));
        v76 = v74[32];
        if (v76 != 255)
          sub_3B5BC(*((_QWORD *)v74 + 2), *((_QWORD *)v74 + 3), v76);
        v77 = v74[64];
        if (v77 != 255)
          sub_3D624(*((id *)v74 + 7), v77);
        v78 = v74[80];
        if (v78 != 255)
          sub_3D624(*((id *)v74 + 9), v78);
        v79 = v74[96];
        if (v79 != 255)
          sub_3D624(*((id *)v74 + 11), v79);
        v80 = v74[112];
        if (v80 != 255)
          sub_3D624(*((id *)v74 + 13), v80);
        v81 = v74[128];
        if (v81 != 255)
          sub_3D624(*((id *)v74 + 15), v81);
        v82 = &v74[v75[11]];
        v83 = type metadata accessor for ArtworkCrop(0);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v83 - 8) + 8))(v82, v83);
        swift_bridgeObjectRelease(*(_QWORD *)&v74[v75[12] + 8]);
        swift_bridgeObjectRelease(*(_QWORD *)&v74[v75[16] + 8]);
      }
      v71 = *(uint64_t *)((char *)a1 + *(int *)(v73 + 32));
      goto LABEL_100;
    default:
      return result;
  }
  return result;
}

_QWORD *initializeWithCopy for HeaderButtonItem(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  int *v12;
  uint64_t v13;
  unsigned int (*v14)(_QWORD *, uint64_t, int *);
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  int EnumCaseMultiPayload;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  int *v35;
  unsigned int (*v36)(_QWORD *, uint64_t, int *);
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int *v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  int *v45;
  uint64_t v46;
  unsigned int (*v47)(_QWORD *, uint64_t, int *);
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  int *v60;
  uint64_t v61;
  unsigned int (*v62)(_QWORD *, uint64_t, int *);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  unsigned int (*v84)(_QWORD *, uint64_t, int *);
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  id *v95;
  int v96;
  id v97;
  id *v98;
  int v99;
  id v100;
  id *v101;
  int v102;
  id v103;
  id *v104;
  int v105;
  id v106;
  id *v107;
  int v108;
  id v109;
  id *v110;
  int v111;
  id v112;
  id *v113;
  int v114;
  id v115;
  id *v116;
  int v117;
  id v118;
  id *v119;
  int v120;
  id v121;
  id *v122;
  int v123;
  id v124;
  uint64_t v125;
  char *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  _QWORD *v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  _QWORD *v135;
  uint64_t v136;
  void (*v137)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v138;
  __int128 v139;
  uint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  _QWORD *v152;
  uint64_t v153;
  uint64_t v154;
  _QWORD *v155;
  _QWORD *v156;
  uint64_t v157;
  void (*v158)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  int v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  int v167;
  uint64_t v168;
  uint64_t v169;
  id *v170;
  int v171;
  id v172;
  id *v173;
  int v174;
  id v175;
  id *v176;
  int v177;
  id v178;
  id *v179;
  int v180;
  id v181;
  id *v182;
  int v183;
  id v184;
  uint64_t v185;
  char *v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  _QWORD *v190;
  _QWORD *v191;
  uint64_t v192;
  uint64_t v193;
  _QWORD *v194;
  _QWORD *v195;
  uint64_t v196;
  void (*v197)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v198;
  _QWORD *v199;
  _QWORD *v200;
  uint64_t v201;
  uint64_t v202;
  _QWORD *v203;
  _QWORD *v204;
  uint64_t v205;
  uint64_t v206;
  _QWORD *v207;
  _QWORD *v208;
  uint64_t v209;
  uint64_t v210;
  _QWORD *v211;
  _QWORD *v212;
  uint64_t v213;
  uint64_t v214;
  char *v215;
  uint64_t v216;
  uint64_t v217;
  unsigned int (*v218)(char *, uint64_t, uint64_t);
  uint64_t v219;
  uint64_t v220;
  _QWORD *v221;
  _QWORD *v222;
  uint64_t v223;
  uint64_t v224;
  _QWORD *v225;
  _QWORD *v226;
  uint64_t v227;
  uint64_t v228;
  char *v229;
  char *v230;
  uint64_t v231;
  uint64_t v232;
  char *v233;
  char *v234;
  uint64_t v235;
  id *v236;
  int v237;
  id v238;
  id *v239;
  int v240;
  id v241;
  id *v242;
  int v243;
  id v244;
  id *v245;
  int v246;
  id v247;
  id *v248;
  int v249;
  id v250;
  id *v251;
  int v252;
  id v253;
  id *v254;
  int v255;
  id v256;
  id *v257;
  int v258;
  id v259;
  id *v260;
  int v261;
  id v262;
  id *v263;
  int v264;
  id v265;
  uint64_t v266;
  char *v267;
  char *v268;
  uint64_t v269;
  uint64_t v270;
  char *v271;
  char *v272;
  uint64_t v273;
  uint64_t v274;
  char *v275;
  char *v276;
  uint64_t v277;
  void (*v278)(char *, _QWORD, uint64_t, int *);
  uint64_t v279;
  char *v280;
  char *v281;
  uint64_t v282;
  uint64_t v283;
  char *v284;
  char *v285;
  uint64_t v286;
  uint64_t v287;
  char *v288;
  char *v289;
  uint64_t v290;
  uint64_t v291;
  char *v292;
  char *v293;
  uint64_t v294;
  uint64_t v295;
  char *v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  unsigned int (*v300)(char *, uint64_t, uint64_t);
  unsigned int (*v301)(char *, uint64_t, uint64_t);
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  char *v305;
  char *v306;
  uint64_t v307;
  uint64_t v308;
  char *v309;
  char *v310;
  uint64_t v311;
  uint64_t v312;
  char *v313;
  char *v314;
  uint64_t v315;
  uint64_t v316;
  char *v317;
  char *v318;
  uint64_t v319;
  uint64_t v320;
  char *v321;
  char *v322;
  uint64_t v323;
  void (*v324)(char *, char *, uint64_t);
  uint64_t v325;
  _QWORD *v326;
  _QWORD *v327;
  uint64_t v328;
  uint64_t v329;
  _QWORD *v330;
  _QWORD *v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  char *v336;
  char *v337;
  uint64_t v338;
  _QWORD *v339;
  _QWORD *v340;
  uint64_t v341;
  uint64_t v342;
  int v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  char *v347;
  char *v348;
  uint64_t v349;
  uint64_t v350;
  char *v351;
  char *v352;
  uint64_t v353;
  uint64_t v354;
  char *v355;
  char *v356;
  uint64_t v357;
  void (*v358)(char *, _QWORD, uint64_t, int *);
  uint64_t v359;
  char *v360;
  char *v361;
  uint64_t v362;
  uint64_t v363;
  char *v364;
  char *v365;
  uint64_t v366;
  uint64_t v367;
  char *v368;
  char *v369;
  uint64_t v370;
  uint64_t v371;
  char *v372;
  char *v373;
  uint64_t v374;
  uint64_t v375;
  char *v376;
  uint64_t v377;
  uint64_t v378;
  unsigned int (*v379)(char *, uint64_t, uint64_t);
  unsigned int (*v380)(char *, uint64_t, uint64_t);
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  char *v384;
  _QWORD *v385;
  uint64_t v386;
  uint64_t v387;
  char *v388;
  _QWORD *v389;
  uint64_t v390;
  uint64_t v391;
  char *v392;
  char *v393;
  uint64_t v394;
  uint64_t v395;
  char *v396;
  char *v397;
  uint64_t v398;
  uint64_t v399;
  char *v400;
  char *v401;
  uint64_t v402;
  void (*v403)(char *, char *, uint64_t);
  uint64_t v404;
  _QWORD *v405;
  _QWORD *v406;
  uint64_t v407;
  uint64_t v408;
  _QWORD *v409;
  _QWORD *v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  char *v415;
  char *v416;
  uint64_t v417;
  _QWORD *v418;
  _QWORD *v419;
  uint64_t v420;
  uint64_t v421;
  int v422;
  uint64_t v423;
  uint64_t v424;
  id *v425;
  int v426;
  id v427;
  id *v428;
  int v429;
  id v430;
  id *v431;
  int v432;
  id v433;
  id *v434;
  int v435;
  id v436;
  id *v437;
  int v438;
  id v439;
  id *v440;
  int v441;
  id v442;
  id *v443;
  int v444;
  id v445;
  id *v446;
  int v447;
  id v448;
  id *v449;
  int v450;
  id v451;
  id *v452;
  int v453;
  id v454;
  uint64_t v455;
  char *v456;
  char *v457;
  uint64_t v458;
  uint64_t v459;
  _QWORD *v460;
  _QWORD *v461;
  uint64_t v462;
  uint64_t v463;
  _QWORD *v464;
  _QWORD *v465;
  uint64_t v466;
  void (*v467)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v468;
  _QWORD *v469;
  _QWORD *v470;
  uint64_t v471;
  uint64_t v472;
  char *v473;
  char *v474;
  uint64_t v475;
  char *v476;
  char *v477;
  uint64_t v478;
  char *v479;
  char *v480;
  uint64_t v481;
  uint64_t v482;
  unsigned int (*v483)(char *, uint64_t, uint64_t);
  uint64_t v484;
  uint64_t v485;
  char *v486;
  char *v487;
  uint64_t v488;
  uint64_t v489;
  _QWORD *v490;
  _QWORD *v491;
  uint64_t v492;
  uint64_t v493;
  _QWORD *v494;
  _QWORD *v495;
  uint64_t v496;
  void (*v497)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v498;
  _QWORD *v499;
  _QWORD *v500;
  uint64_t v501;
  uint64_t v502;
  char *v503;
  char *v504;
  uint64_t v505;
  char *v506;
  char *v507;
  uint64_t v508;
  char *v509;
  char *v510;
  uint64_t v511;
  uint64_t v512;
  unsigned int (*v513)(char *, uint64_t, uint64_t);
  uint64_t v514;
  uint64_t v516;
  _QWORD *v517;
  char *v518;
  char *__dst;
  char *__dsta;
  _BYTE *__dstb;
  unsigned int (*v522)(_QWORD *, uint64_t, int *);
  unsigned int (*v523)(_QWORD *, uint64_t, int *);
  int *v524;
  int *v525;
  int *v526;
  uint64_t v527;
  void *v528;
  int *v529;
  char *v530;
  int *v531;
  int *v532;
  int *v533;
  char *v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  char *v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;

  v3 = a3;
  switch(swift_getEnumCaseMultiPayload(a2, a3))
  {
    case 0u:
      v539 = v3;
      v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      v7 = a2[3];
      a1[2] = a2[2];
      a1[3] = v7;
      v8 = type metadata accessor for ActionButton(0);
      v9 = *(int *)(v8 + 24);
      v10 = (_QWORD *)((char *)a1 + v9);
      v11 = (_QWORD *)((char *)a2 + v9);
      v12 = (int *)type metadata accessor for ArtworkModel(0);
      v13 = *((_QWORD *)v12 - 1);
      v14 = *(unsigned int (**)(_QWORD *, uint64_t, int *))(v13 + 48);
      swift_bridgeObjectRetain(v6);
      swift_bridgeObjectRetain(v7);
      if (v14(v11, 1, v12))
      {
        v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
        memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
        v16 = v539;
        v17 = (int *)v8;
      }
      else
      {
        v537 = v13;
        v68 = v11[1];
        *v10 = *v11;
        v10[1] = v68;
        v69 = *((unsigned __int8 *)v11 + 32);
        swift_bridgeObjectRetain(v68);
        if (v69 == 255)
        {
          *((_OWORD *)v10 + 1) = *((_OWORD *)v11 + 1);
          *((_BYTE *)v10 + 32) = *((_BYTE *)v11 + 32);
        }
        else
        {
          v70 = v11[2];
          v71 = v11[3];
          sub_3D464(v70, v71, v69);
          v10[2] = v70;
          v10[3] = v71;
          *((_BYTE *)v10 + 32) = v69;
        }
        v17 = (int *)v8;
        *(_OWORD *)(v10 + 5) = *(_OWORD *)(v11 + 5);
        v95 = (id *)(v11 + 7);
        v96 = *((unsigned __int8 *)v11 + 64);
        if (v96 == 255)
        {
          v10[7] = *v95;
          *((_BYTE *)v10 + 64) = *((_BYTE *)v11 + 64);
        }
        else
        {
          v97 = *v95;
          sub_3D47C(*v95, *((_BYTE *)v11 + 64));
          v10[7] = v97;
          *((_BYTE *)v10 + 64) = v96;
        }
        v16 = v539;
        v101 = (id *)(v11 + 9);
        v102 = *((unsigned __int8 *)v11 + 80);
        if (v102 == 255)
        {
          v10[9] = *v101;
          *((_BYTE *)v10 + 80) = *((_BYTE *)v11 + 80);
        }
        else
        {
          v103 = *v101;
          sub_3D47C(*v101, *((_BYTE *)v11 + 80));
          v10[9] = v103;
          *((_BYTE *)v10 + 80) = v102;
        }
        v107 = (id *)(v11 + 11);
        v108 = *((unsigned __int8 *)v11 + 96);
        if (v108 == 255)
        {
          v10[11] = *v107;
          *((_BYTE *)v10 + 96) = *((_BYTE *)v11 + 96);
        }
        else
        {
          v109 = *v107;
          sub_3D47C(*v107, *((_BYTE *)v11 + 96));
          v10[11] = v109;
          *((_BYTE *)v10 + 96) = v108;
        }
        v113 = (id *)(v11 + 13);
        v114 = *((unsigned __int8 *)v11 + 112);
        if (v114 == 255)
        {
          v10[13] = *v113;
          *((_BYTE *)v10 + 112) = *((_BYTE *)v11 + 112);
        }
        else
        {
          v115 = *v113;
          sub_3D47C(*v113, *((_BYTE *)v11 + 112));
          v10[13] = v115;
          *((_BYTE *)v10 + 112) = v114;
        }
        v119 = (id *)(v11 + 15);
        v120 = *((unsigned __int8 *)v11 + 128);
        if (v120 == 255)
        {
          v10[15] = *v119;
          *((_BYTE *)v10 + 128) = *((_BYTE *)v11 + 128);
        }
        else
        {
          v121 = *v119;
          sub_3D47C(*v119, *((_BYTE *)v11 + 128));
          v10[15] = v121;
          *((_BYTE *)v10 + 128) = v120;
        }
        *((_BYTE *)v10 + 129) = *((_BYTE *)v11 + 129);
        v125 = v12[11];
        v126 = (char *)v10 + v125;
        v127 = (char *)v11 + v125;
        v128 = type metadata accessor for ArtworkCrop(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v128 - 8) + 16))(v126, v127, v128);
        v129 = v12[12];
        v130 = (_QWORD *)((char *)v10 + v129);
        v131 = (_QWORD *)((char *)v11 + v129);
        v132 = v131[1];
        *v130 = *v131;
        v130[1] = v132;
        *((_BYTE *)v10 + v12[13]) = *((_BYTE *)v11 + v12[13]);
        *((_BYTE *)v10 + v12[14]) = *((_BYTE *)v11 + v12[14]);
        *((_BYTE *)v10 + v12[15]) = *((_BYTE *)v11 + v12[15]);
        v133 = v12[16];
        v134 = (_QWORD *)((char *)v10 + v133);
        v135 = (_QWORD *)((char *)v11 + v133);
        v136 = v135[1];
        *v134 = *v135;
        v134[1] = v136;
        v137 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v537 + 56);
        swift_bridgeObjectRetain(v132);
        swift_bridgeObjectRetain(v136);
        v137(v10, 0, 1, v12);
      }
      *((_BYTE *)a1 + v17[7]) = *((_BYTE *)a2 + v17[7]);
      v138 = v17[8];
      v139 = *(_OWORD *)((char *)a2 + v138 + 24);
      *(_OWORD *)((char *)a1 + v138 + 24) = v139;
      (**(void (***)(void))(v139 - 8))();
      v140 = v17[9];
      v141 = (char *)a1 + v140;
      v142 = (char *)a2 + v140;
      v143 = type metadata accessor for ImpressionMetrics(0);
      v144 = *(_QWORD *)(v143 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v144 + 48))(v142, 1, v143))
      {
        v145 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
        memcpy(v141, v142, *(_QWORD *)(*(_QWORD *)(v145 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v144 + 16))(v141, v142, v143);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v144 + 56))(v141, 0, 1, v143);
      }
      v50 = a1;
      v51 = v16;
      v52 = 0;
      goto LABEL_213;
    case 1u:
      v18 = type metadata accessor for BookmarkButtonPresenter.Data(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v18);
      if (EnumCaseMultiPayload == 1)
      {
        v543 = v3;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        v76 = a2[2];
        a1[2] = v76;
        v77 = type metadata accessor for EpisodeOffer(0);
        v78 = *(int *)(v77 + 24);
        v79 = (char *)a1 + v78;
        v80 = (char *)a2 + v78;
        *(_OWORD *)v79 = *(_OWORD *)((char *)a2 + v78);
        v81 = *(_QWORD *)((char *)a2 + v78 + 16);
        *((_QWORD *)v79 + 2) = v81;
        v79[24] = *((_BYTE *)a2 + v78 + 24);
        v532 = (int *)type metadata accessor for ShowOffer(0);
        v538 = v79;
        v82 = v532[7];
        __dst = &v79[v82];
        v83 = &v80[v82];
        v529 = (int *)type metadata accessor for ArtworkModel(0);
        v516 = *((_QWORD *)v529 - 1);
        v84 = *(unsigned int (**)(_QWORD *, uint64_t, int *))(v516 + 48);
        swift_bridgeObjectRetain(v76);
        swift_bridgeObjectRetain(v81);
        v523 = v84;
        v525 = (int *)v77;
        v527 = v18;
        if (v84(v83, 1, v529))
        {
          v85 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
          memcpy(__dst, v83, *(_QWORD *)(*(_QWORD *)(v85 - 8) + 64));
        }
        else
        {
          v166 = *((_QWORD *)v83 + 1);
          *(_QWORD *)__dst = *(_QWORD *)v83;
          *((_QWORD *)__dst + 1) = v166;
          v167 = v83[32];
          swift_bridgeObjectRetain(v166);
          if (v167 == 255)
          {
            *((_OWORD *)__dst + 1) = *((_OWORD *)v83 + 1);
            __dst[32] = v83[32];
          }
          else
          {
            v168 = *((_QWORD *)v83 + 2);
            v169 = *((_QWORD *)v83 + 3);
            sub_3D464(v168, v169, v167);
            *((_QWORD *)__dst + 2) = v168;
            *((_QWORD *)__dst + 3) = v169;
            __dst[32] = v167;
          }
          *(_OWORD *)(__dst + 40) = *(_OWORD *)(v83 + 40);
          v239 = (id *)(v83 + 56);
          v240 = v83[64];
          if (v240 == 255)
          {
            *((_QWORD *)__dst + 7) = *v239;
            __dst[64] = v83[64];
          }
          else
          {
            v241 = *v239;
            sub_3D47C(*v239, v83[64]);
            *((_QWORD *)__dst + 7) = v241;
            __dst[64] = v240;
          }
          v245 = (id *)(v83 + 72);
          v246 = v83[80];
          if (v246 == 255)
          {
            *((_QWORD *)__dst + 9) = *v245;
            __dst[80] = v83[80];
          }
          else
          {
            v247 = *v245;
            sub_3D47C(*v245, v83[80]);
            *((_QWORD *)__dst + 9) = v247;
            __dst[80] = v246;
          }
          v251 = (id *)(v83 + 88);
          v252 = v83[96];
          if (v252 == 255)
          {
            *((_QWORD *)__dst + 11) = *v251;
            __dst[96] = v83[96];
          }
          else
          {
            v253 = *v251;
            sub_3D47C(*v251, v83[96]);
            *((_QWORD *)__dst + 11) = v253;
            __dst[96] = v252;
          }
          v257 = (id *)(v83 + 104);
          v258 = v83[112];
          if (v258 == 255)
          {
            *((_QWORD *)__dst + 13) = *v257;
            __dst[112] = v83[112];
          }
          else
          {
            v259 = *v257;
            sub_3D47C(*v257, v83[112]);
            *((_QWORD *)__dst + 13) = v259;
            __dst[112] = v258;
          }
          v263 = (id *)(v83 + 120);
          v264 = v83[128];
          if (v264 == 255)
          {
            *((_QWORD *)__dst + 15) = *v263;
            __dst[128] = v83[128];
          }
          else
          {
            v265 = *v263;
            sub_3D47C(*v263, v83[128]);
            *((_QWORD *)__dst + 15) = v265;
            __dst[128] = v264;
          }
          __dst[129] = v83[129];
          v346 = v529[11];
          v347 = &__dst[v346];
          v348 = &v83[v346];
          v349 = type metadata accessor for ArtworkCrop(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v349 - 8) + 16))(v347, v348, v349);
          v350 = v529[12];
          v351 = &__dst[v350];
          v352 = &v83[v350];
          v353 = *((_QWORD *)v352 + 1);
          *(_QWORD *)v351 = *(_QWORD *)v352;
          *((_QWORD *)v351 + 1) = v353;
          __dst[v529[13]] = v83[v529[13]];
          __dst[v529[14]] = v83[v529[14]];
          __dst[v529[15]] = v83[v529[15]];
          v354 = v529[16];
          v355 = &__dst[v354];
          v356 = &v83[v354];
          v357 = *((_QWORD *)v356 + 1);
          *(_QWORD *)v355 = *(_QWORD *)v356;
          *((_QWORD *)v355 + 1) = v357;
          v358 = *(void (**)(char *, _QWORD, uint64_t, int *))(v516 + 56);
          swift_bridgeObjectRetain(v353);
          swift_bridgeObjectRetain(v357);
          v358(__dst, 0, 1, v529);
        }
        v359 = v532[8];
        v360 = &v538[v359];
        v361 = &v80[v359];
        v362 = *((_QWORD *)v361 + 1);
        *(_QWORD *)v360 = *(_QWORD *)v361;
        *((_QWORD *)v360 + 1) = v362;
        v363 = v532[9];
        v364 = &v538[v363];
        v365 = &v80[v363];
        v366 = *((_QWORD *)v365 + 1);
        *(_QWORD *)v364 = *(_QWORD *)v365;
        *((_QWORD *)v364 + 1) = v366;
        v538[v532[10]] = v80[v532[10]];
        v367 = v532[11];
        v368 = &v538[v367];
        v369 = &v80[v367];
        v370 = *((_QWORD *)v369 + 1);
        *(_QWORD *)v368 = *(_QWORD *)v369;
        *((_QWORD *)v368 + 1) = v370;
        v371 = v532[12];
        v372 = &v538[v371];
        v373 = &v80[v371];
        v374 = *((_QWORD *)v373 + 1);
        *(_QWORD *)v372 = *(_QWORD *)v373;
        *((_QWORD *)v372 + 1) = v374;
        v375 = v532[13];
        v518 = &v538[v375];
        __dstb = v80;
        v376 = &v80[v375];
        v377 = type metadata accessor for URL(0);
        v378 = *(_QWORD *)(v377 - 8);
        v379 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v378 + 48);
        swift_bridgeObjectRetain(v362);
        swift_bridgeObjectRetain(v366);
        swift_bridgeObjectRetain(v370);
        swift_bridgeObjectRetain(v374);
        v380 = v379;
        if (v379(v376, 1, v377))
        {
          v381 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
          memcpy(v518, v376, *(_QWORD *)(*(_QWORD *)(v381 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v378 + 16))(v518, v376, v377);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v378 + 56))(v518, 0, 1, v377);
        }
        v382 = v378;
        v383 = v532[14];
        v384 = &v538[v383];
        v385 = &__dstb[v383];
        v386 = v385[1];
        *(_QWORD *)v384 = *v385;
        *((_QWORD *)v384 + 1) = v386;
        v387 = v532[15];
        v388 = &v538[v387];
        v389 = &__dstb[v387];
        v390 = v389[1];
        *(_QWORD *)v388 = *v389;
        *((_QWORD *)v388 + 1) = v390;
        v391 = v532[16];
        v392 = &v538[v391];
        v393 = &__dstb[v391];
        swift_bridgeObjectRetain(v386);
        swift_bridgeObjectRetain(v390);
        if (v379(v393, 1, v377))
        {
          v394 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
          memcpy(v392, v393, *(_QWORD *)(*(_QWORD *)(v394 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v382 + 16))(v392, v393, v377);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v382 + 56))(v392, 0, 1, v377);
        }
        v395 = v532[17];
        v396 = &v538[v395];
        v397 = &__dstb[v395];
        if (v379(&__dstb[v395], 1, v377))
        {
          v398 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
          memcpy(v396, v397, *(_QWORD *)(*(_QWORD *)(v398 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v382 + 16))(v396, v397, v377);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v382 + 56))(v396, 0, 1, v377);
        }
        v538[v532[18]] = __dstb[v532[18]];
        v399 = v525[7];
        v400 = (char *)a1 + v399;
        v401 = (char *)a2 + v399;
        v3 = v543;
        if (v380((char *)a2 + v399, 1, v377))
        {
          v402 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
          memcpy(v400, v401, *(_QWORD *)(*(_QWORD *)(v402 - 8) + 64));
          (*(void (**)(char *, char *, uint64_t))(v382 + 16))((char *)a1 + v525[8], (char *)a2 + v525[8], v377);
        }
        else
        {
          v403 = *(void (**)(char *, char *, uint64_t))(v382 + 16);
          v403(v400, v401, v377);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v382 + 56))(v400, 0, 1, v377);
          v403((char *)a1 + v525[8], (char *)a2 + v525[8], v377);
        }
        *(_QWORD *)((char *)a1 + v525[9]) = *(_QWORD *)((char *)a2 + v525[9]);
        v404 = v525[10];
        v405 = (_QWORD *)((char *)a1 + v404);
        v406 = (_QWORD *)((char *)a2 + v404);
        v407 = v406[1];
        *v405 = *v406;
        v405[1] = v407;
        v408 = v525[11];
        v409 = (_QWORD *)((char *)a1 + v408);
        v410 = (_QWORD *)((char *)a2 + v408);
        v411 = v410[1];
        *v409 = *v410;
        v409[1] = v411;
        v412 = v525[12];
        v413 = *(_QWORD *)((char *)a2 + v412);
        *(_QWORD *)((char *)a1 + v412) = v413;
        *((_BYTE *)a1 + v525[13]) = *((_BYTE *)a2 + v525[13]);
        *((_BYTE *)a1 + v525[14]) = *((_BYTE *)a2 + v525[14]);
        v414 = v525[15];
        v415 = (char *)a1 + v414;
        v416 = (char *)a2 + v414;
        *(_QWORD *)v415 = *(_QWORD *)v416;
        v415[8] = v416[8];
        v417 = v525[16];
        v418 = (_QWORD *)((char *)a1 + v417);
        v419 = (_QWORD *)((char *)a2 + v417);
        swift_bridgeObjectRetain(v407);
        swift_bridgeObjectRetain(v411);
        swift_retain(v413);
        if (v523(v419, 1, v529))
        {
          v420 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
          memcpy(v418, v419, *(_QWORD *)(*(_QWORD *)(v420 - 8) + 64));
        }
        else
        {
          v421 = v419[1];
          *v418 = *v419;
          v418[1] = v421;
          v422 = *((unsigned __int8 *)v419 + 32);
          swift_bridgeObjectRetain(v421);
          if (v422 == 255)
          {
            *((_OWORD *)v418 + 1) = *((_OWORD *)v419 + 1);
            *((_BYTE *)v418 + 32) = *((_BYTE *)v419 + 32);
          }
          else
          {
            v423 = v419[2];
            v424 = v419[3];
            sub_3D464(v423, v424, v422);
            v418[2] = v423;
            v418[3] = v424;
            *((_BYTE *)v418 + 32) = v422;
          }
          *(_OWORD *)(v418 + 5) = *(_OWORD *)(v419 + 5);
          v428 = (id *)(v419 + 7);
          v429 = *((unsigned __int8 *)v419 + 64);
          if (v429 == 255)
          {
            v418[7] = *v428;
            *((_BYTE *)v418 + 64) = *((_BYTE *)v419 + 64);
          }
          else
          {
            v430 = *v428;
            sub_3D47C(*v428, *((_BYTE *)v419 + 64));
            v418[7] = v430;
            *((_BYTE *)v418 + 64) = v429;
          }
          v434 = (id *)(v419 + 9);
          v435 = *((unsigned __int8 *)v419 + 80);
          if (v435 == 255)
          {
            v418[9] = *v434;
            *((_BYTE *)v418 + 80) = *((_BYTE *)v419 + 80);
          }
          else
          {
            v436 = *v434;
            sub_3D47C(*v434, *((_BYTE *)v419 + 80));
            v418[9] = v436;
            *((_BYTE *)v418 + 80) = v435;
          }
          v440 = (id *)(v419 + 11);
          v441 = *((unsigned __int8 *)v419 + 96);
          if (v441 == 255)
          {
            v418[11] = *v440;
            *((_BYTE *)v418 + 96) = *((_BYTE *)v419 + 96);
          }
          else
          {
            v442 = *v440;
            sub_3D47C(*v440, *((_BYTE *)v419 + 96));
            v418[11] = v442;
            *((_BYTE *)v418 + 96) = v441;
          }
          v446 = (id *)(v419 + 13);
          v447 = *((unsigned __int8 *)v419 + 112);
          if (v447 == 255)
          {
            v418[13] = *v446;
            *((_BYTE *)v418 + 112) = *((_BYTE *)v419 + 112);
          }
          else
          {
            v448 = *v446;
            sub_3D47C(*v446, *((_BYTE *)v419 + 112));
            v418[13] = v448;
            *((_BYTE *)v418 + 112) = v447;
          }
          v452 = (id *)(v419 + 15);
          v453 = *((unsigned __int8 *)v419 + 128);
          if (v453 == 255)
          {
            v418[15] = *v452;
            *((_BYTE *)v418 + 128) = *((_BYTE *)v419 + 128);
          }
          else
          {
            v454 = *v452;
            sub_3D47C(*v452, *((_BYTE *)v419 + 128));
            v418[15] = v454;
            *((_BYTE *)v418 + 128) = v453;
          }
          *((_BYTE *)v418 + 129) = *((_BYTE *)v419 + 129);
          v485 = v529[11];
          v486 = (char *)v418 + v485;
          v487 = (char *)v419 + v485;
          v488 = type metadata accessor for ArtworkCrop(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v488 - 8) + 16))(v486, v487, v488);
          v489 = v529[12];
          v490 = (_QWORD *)((char *)v418 + v489);
          v491 = (_QWORD *)((char *)v419 + v489);
          v492 = v491[1];
          *v490 = *v491;
          v490[1] = v492;
          *((_BYTE *)v418 + v529[13]) = *((_BYTE *)v419 + v529[13]);
          *((_BYTE *)v418 + v529[14]) = *((_BYTE *)v419 + v529[14]);
          *((_BYTE *)v418 + v529[15]) = *((_BYTE *)v419 + v529[15]);
          v493 = v529[16];
          v494 = (_QWORD *)((char *)v418 + v493);
          v495 = (_QWORD *)((char *)v419 + v493);
          v496 = v495[1];
          *v494 = *v495;
          v494[1] = v496;
          v497 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v516 + 56);
          swift_bridgeObjectRetain(v492);
          swift_bridgeObjectRetain(v496);
          v497(v418, 0, 1, v529);
        }
        v498 = v525[17];
        v499 = (_QWORD *)((char *)a1 + v498);
        v500 = (_QWORD *)((char *)a2 + v498);
        v501 = v500[1];
        *v499 = *v500;
        v499[1] = v501;
        v502 = v525[18];
        v503 = (char *)a1 + v502;
        v504 = (char *)a2 + v502;
        v503[8] = v504[8];
        *(_QWORD *)v503 = *(_QWORD *)v504;
        v505 = v525[19];
        v506 = (char *)a1 + v505;
        v507 = (char *)a2 + v505;
        *(_QWORD *)v506 = *(_QWORD *)v507;
        v506[8] = v507[8];
        *((_BYTE *)a1 + v525[20]) = *((_BYTE *)a2 + v525[20]);
        *((_BYTE *)a1 + v525[21]) = *((_BYTE *)a2 + v525[21]);
        v508 = v525[22];
        v509 = (char *)a1 + v508;
        v510 = (char *)a2 + v508;
        v511 = type metadata accessor for TranscriptRequestInformation(0);
        v512 = *(_QWORD *)(v511 - 8);
        v513 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v512 + 48);
        swift_bridgeObjectRetain(v501);
        if (v513(v510, 1, v511))
        {
          v514 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2C40);
          memcpy(v509, v510, *(_QWORD *)(*(_QWORD *)(v514 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v512 + 16))(v509, v510, v511);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v512 + 56))(v509, 0, 1, v511);
        }
        v22 = v527;
        v21 = a1;
        v23 = 1;
      }
      else
      {
        if (EnumCaseMultiPayload)
        {
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
          goto LABEL_212;
        }
        v20 = a2[1];
        *a1 = *a2;
        a1[1] = v20;
        swift_bridgeObjectRetain(v20);
        v21 = a1;
        v22 = v18;
        v23 = 0;
      }
      swift_storeEnumTagMultiPayload(v21, v22, v23);
LABEL_212:
      v50 = a1;
      v51 = v3;
      v52 = 1;
LABEL_213:
      swift_storeEnumTagMultiPayload(v50, v51, v52);
      return a1;
    case 2u:
      v24 = type metadata accessor for DownloadButtonPresenter.Data(0);
      v25 = swift_getEnumCaseMultiPayload(a2, v24);
      if (v25 == 2)
      {
        v86 = *a2;
        *a1 = *a2;
        swift_retain(v86);
        v87 = a1;
        v88 = v24;
        v89 = 2;
      }
      else if (v25 == 1)
      {
        v528 = (void *)v24;
        v540 = v3;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        v26 = a2[2];
        a1[2] = v26;
        v27 = type metadata accessor for EpisodeOffer(0);
        v28 = *(int *)(v27 + 24);
        v29 = (char *)a1 + v28;
        v30 = (char *)a2 + v28;
        *(_OWORD *)v29 = *(_OWORD *)((char *)a2 + v28);
        v31 = *(_QWORD *)((char *)a2 + v28 + 16);
        *((_QWORD *)v29 + 2) = v31;
        v29[24] = *((_BYTE *)a2 + v28 + 24);
        v531 = (int *)type metadata accessor for ShowOffer(0);
        v534 = v29;
        v32 = v531[7];
        v33 = &v29[v32];
        v34 = &v30[v32];
        v35 = (int *)type metadata accessor for ArtworkModel(0);
        v517 = (_QWORD *)*((_QWORD *)v35 - 1);
        v36 = (unsigned int (*)(_QWORD *, uint64_t, int *))v517[6];
        swift_bridgeObjectRetain(v26);
        swift_bridgeObjectRetain(v31);
        v522 = v36;
        v524 = v35;
        v526 = (int *)v27;
        if (v36(v34, 1, v35))
        {
          v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
          memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
        }
        else
        {
          v162 = *((_QWORD *)v34 + 1);
          *(_QWORD *)v33 = *(_QWORD *)v34;
          *((_QWORD *)v33 + 1) = v162;
          v163 = v34[32];
          swift_bridgeObjectRetain(v162);
          if (v163 == 255)
          {
            *((_OWORD *)v33 + 1) = *((_OWORD *)v34 + 1);
            v33[32] = v34[32];
          }
          else
          {
            v164 = *((_QWORD *)v34 + 2);
            v165 = *((_QWORD *)v34 + 3);
            sub_3D464(v164, v165, v163);
            *((_QWORD *)v33 + 2) = v164;
            *((_QWORD *)v33 + 3) = v165;
            v33[32] = v163;
          }
          *(_OWORD *)(v33 + 40) = *(_OWORD *)(v34 + 40);
          v236 = (id *)(v34 + 56);
          v237 = v34[64];
          if (v237 == 255)
          {
            *((_QWORD *)v33 + 7) = *v236;
            v33[64] = v34[64];
          }
          else
          {
            v238 = *v236;
            sub_3D47C(*v236, v34[64]);
            *((_QWORD *)v33 + 7) = v238;
            v33[64] = v237;
          }
          v242 = (id *)(v34 + 72);
          v243 = v34[80];
          if (v243 == 255)
          {
            *((_QWORD *)v33 + 9) = *v242;
            v33[80] = v34[80];
          }
          else
          {
            v244 = *v242;
            sub_3D47C(*v242, v34[80]);
            *((_QWORD *)v33 + 9) = v244;
            v33[80] = v243;
          }
          v248 = (id *)(v34 + 88);
          v249 = v34[96];
          if (v249 == 255)
          {
            *((_QWORD *)v33 + 11) = *v248;
            v33[96] = v34[96];
          }
          else
          {
            v250 = *v248;
            sub_3D47C(*v248, v34[96]);
            *((_QWORD *)v33 + 11) = v250;
            v33[96] = v249;
          }
          v254 = (id *)(v34 + 104);
          v255 = v34[112];
          if (v255 == 255)
          {
            *((_QWORD *)v33 + 13) = *v254;
            v33[112] = v34[112];
          }
          else
          {
            v256 = *v254;
            sub_3D47C(*v254, v34[112]);
            *((_QWORD *)v33 + 13) = v256;
            v33[112] = v255;
          }
          v260 = (id *)(v34 + 120);
          v261 = v34[128];
          if (v261 == 255)
          {
            *((_QWORD *)v33 + 15) = *v260;
            v33[128] = v34[128];
          }
          else
          {
            v262 = *v260;
            sub_3D47C(*v260, v34[128]);
            *((_QWORD *)v33 + 15) = v262;
            v33[128] = v261;
          }
          v33[129] = v34[129];
          v266 = v35[11];
          v267 = &v33[v266];
          v268 = &v34[v266];
          v269 = type metadata accessor for ArtworkCrop(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v269 - 8) + 16))(v267, v268, v269);
          v270 = v35[12];
          v271 = &v33[v270];
          v272 = &v34[v270];
          v273 = *((_QWORD *)v272 + 1);
          *(_QWORD *)v271 = *(_QWORD *)v272;
          *((_QWORD *)v271 + 1) = v273;
          v33[v35[13]] = v34[v35[13]];
          v33[v35[14]] = v34[v35[14]];
          v33[v35[15]] = v34[v35[15]];
          v274 = v35[16];
          v275 = &v33[v274];
          v276 = &v34[v274];
          v277 = *((_QWORD *)v276 + 1);
          *(_QWORD *)v275 = *(_QWORD *)v276;
          *((_QWORD *)v275 + 1) = v277;
          v278 = (void (*)(char *, _QWORD, uint64_t, int *))v517[7];
          swift_bridgeObjectRetain(v273);
          swift_bridgeObjectRetain(v277);
          v278(v33, 0, 1, v35);
        }
        v279 = v531[8];
        v280 = &v534[v279];
        v281 = &v30[v279];
        v282 = *((_QWORD *)v281 + 1);
        *(_QWORD *)v280 = *(_QWORD *)v281;
        *((_QWORD *)v280 + 1) = v282;
        v283 = v531[9];
        v284 = &v534[v283];
        v285 = &v30[v283];
        v286 = *((_QWORD *)v285 + 1);
        *(_QWORD *)v284 = *(_QWORD *)v285;
        *((_QWORD *)v284 + 1) = v286;
        v534[v531[10]] = v30[v531[10]];
        v287 = v531[11];
        v288 = &v534[v287];
        v289 = &v30[v287];
        v290 = *((_QWORD *)v289 + 1);
        *(_QWORD *)v288 = *(_QWORD *)v289;
        *((_QWORD *)v288 + 1) = v290;
        v291 = v531[12];
        v292 = &v534[v291];
        v293 = &v30[v291];
        v294 = *((_QWORD *)v293 + 1);
        *(_QWORD *)v292 = *(_QWORD *)v293;
        *((_QWORD *)v292 + 1) = v294;
        v295 = v531[13];
        __dsta = &v534[v295];
        v296 = &v30[v295];
        v297 = type metadata accessor for URL(0);
        v298 = *(_QWORD *)(v297 - 8);
        v299 = v282;
        v300 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v298 + 48);
        swift_bridgeObjectRetain(v299);
        swift_bridgeObjectRetain(v286);
        swift_bridgeObjectRetain(v290);
        swift_bridgeObjectRetain(v294);
        v301 = v300;
        if (v300(v296, 1, v297))
        {
          v302 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
          memcpy(__dsta, v296, *(_QWORD *)(*(_QWORD *)(v302 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v298 + 16))(__dsta, v296, v297);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v298 + 56))(__dsta, 0, 1, v297);
        }
        v303 = v298;
        v304 = v531[14];
        v305 = &v534[v304];
        v306 = &v30[v304];
        v307 = *((_QWORD *)v306 + 1);
        *(_QWORD *)v305 = *(_QWORD *)v306;
        *((_QWORD *)v305 + 1) = v307;
        v308 = v531[15];
        v309 = &v534[v308];
        v310 = &v30[v308];
        v311 = *((_QWORD *)v310 + 1);
        *(_QWORD *)v309 = *(_QWORD *)v310;
        *((_QWORD *)v309 + 1) = v311;
        v312 = v531[16];
        v313 = &v534[v312];
        v314 = &v30[v312];
        swift_bridgeObjectRetain(v307);
        swift_bridgeObjectRetain(v311);
        if (v301(v314, 1, v297))
        {
          v315 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
          memcpy(v313, v314, *(_QWORD *)(*(_QWORD *)(v315 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v303 + 16))(v313, v314, v297);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v303 + 56))(v313, 0, 1, v297);
        }
        v316 = v531[17];
        v317 = &v534[v316];
        v318 = &v30[v316];
        if (v301(&v30[v316], 1, v297))
        {
          v319 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
          memcpy(v317, v318, *(_QWORD *)(*(_QWORD *)(v319 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v303 + 16))(v317, v318, v297);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v303 + 56))(v317, 0, 1, v297);
        }
        v534[v531[18]] = v30[v531[18]];
        v320 = v526[7];
        v321 = (char *)a1 + v320;
        v322 = (char *)a2 + v320;
        v3 = v540;
        if (v301((char *)a2 + v320, 1, v297))
        {
          v323 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
          memcpy(v321, v322, *(_QWORD *)(*(_QWORD *)(v323 - 8) + 64));
          (*(void (**)(char *, char *, uint64_t))(v303 + 16))((char *)a1 + v526[8], (char *)a2 + v526[8], v297);
        }
        else
        {
          v324 = *(void (**)(char *, char *, uint64_t))(v303 + 16);
          v324(v321, v322, v297);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v303 + 56))(v321, 0, 1, v297);
          v324((char *)a1 + v526[8], (char *)a2 + v526[8], v297);
        }
        *(_QWORD *)((char *)a1 + v526[9]) = *(_QWORD *)((char *)a2 + v526[9]);
        v325 = v526[10];
        v326 = (_QWORD *)((char *)a1 + v325);
        v327 = (_QWORD *)((char *)a2 + v325);
        v328 = v327[1];
        *v326 = *v327;
        v326[1] = v328;
        v329 = v526[11];
        v330 = (_QWORD *)((char *)a1 + v329);
        v331 = (_QWORD *)((char *)a2 + v329);
        v332 = v331[1];
        *v330 = *v331;
        v330[1] = v332;
        v333 = v526[12];
        v334 = *(_QWORD *)((char *)a2 + v333);
        *(_QWORD *)((char *)a1 + v333) = v334;
        *((_BYTE *)a1 + v526[13]) = *((_BYTE *)a2 + v526[13]);
        *((_BYTE *)a1 + v526[14]) = *((_BYTE *)a2 + v526[14]);
        v335 = v526[15];
        v336 = (char *)a1 + v335;
        v337 = (char *)a2 + v335;
        *(_QWORD *)v336 = *(_QWORD *)v337;
        v336[8] = v337[8];
        v338 = v526[16];
        v339 = (_QWORD *)((char *)a1 + v338);
        v340 = (_QWORD *)((char *)a2 + v338);
        swift_bridgeObjectRetain(v328);
        swift_bridgeObjectRetain(v332);
        swift_retain(v334);
        if (v522(v340, 1, v524))
        {
          v341 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
          memcpy(v339, v340, *(_QWORD *)(*(_QWORD *)(v341 - 8) + 64));
        }
        else
        {
          v342 = v340[1];
          *v339 = *v340;
          v339[1] = v342;
          v343 = *((unsigned __int8 *)v340 + 32);
          swift_bridgeObjectRetain(v342);
          if (v343 == 255)
          {
            *((_OWORD *)v339 + 1) = *((_OWORD *)v340 + 1);
            *((_BYTE *)v339 + 32) = *((_BYTE *)v340 + 32);
          }
          else
          {
            v344 = v340[2];
            v345 = v340[3];
            sub_3D464(v344, v345, v343);
            v339[2] = v344;
            v339[3] = v345;
            *((_BYTE *)v339 + 32) = v343;
          }
          *(_OWORD *)(v339 + 5) = *(_OWORD *)(v340 + 5);
          v425 = (id *)(v340 + 7);
          v426 = *((unsigned __int8 *)v340 + 64);
          if (v426 == 255)
          {
            v339[7] = *v425;
            *((_BYTE *)v339 + 64) = *((_BYTE *)v340 + 64);
          }
          else
          {
            v427 = *v425;
            sub_3D47C(*v425, *((_BYTE *)v340 + 64));
            v339[7] = v427;
            *((_BYTE *)v339 + 64) = v426;
          }
          v431 = (id *)(v340 + 9);
          v432 = *((unsigned __int8 *)v340 + 80);
          if (v432 == 255)
          {
            v339[9] = *v431;
            *((_BYTE *)v339 + 80) = *((_BYTE *)v340 + 80);
          }
          else
          {
            v433 = *v431;
            sub_3D47C(*v431, *((_BYTE *)v340 + 80));
            v339[9] = v433;
            *((_BYTE *)v339 + 80) = v432;
          }
          v437 = (id *)(v340 + 11);
          v438 = *((unsigned __int8 *)v340 + 96);
          if (v438 == 255)
          {
            v339[11] = *v437;
            *((_BYTE *)v339 + 96) = *((_BYTE *)v340 + 96);
          }
          else
          {
            v439 = *v437;
            sub_3D47C(*v437, *((_BYTE *)v340 + 96));
            v339[11] = v439;
            *((_BYTE *)v339 + 96) = v438;
          }
          v443 = (id *)(v340 + 13);
          v444 = *((unsigned __int8 *)v340 + 112);
          if (v444 == 255)
          {
            v339[13] = *v443;
            *((_BYTE *)v339 + 112) = *((_BYTE *)v340 + 112);
          }
          else
          {
            v445 = *v443;
            sub_3D47C(*v443, *((_BYTE *)v340 + 112));
            v339[13] = v445;
            *((_BYTE *)v339 + 112) = v444;
          }
          v449 = (id *)(v340 + 15);
          v450 = *((unsigned __int8 *)v340 + 128);
          if (v450 == 255)
          {
            v339[15] = *v449;
            *((_BYTE *)v339 + 128) = *((_BYTE *)v340 + 128);
          }
          else
          {
            v451 = *v449;
            sub_3D47C(*v449, *((_BYTE *)v340 + 128));
            v339[15] = v451;
            *((_BYTE *)v339 + 128) = v450;
          }
          *((_BYTE *)v339 + 129) = *((_BYTE *)v340 + 129);
          v455 = v524[11];
          v456 = (char *)v339 + v455;
          v457 = (char *)v340 + v455;
          v458 = type metadata accessor for ArtworkCrop(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v458 - 8) + 16))(v456, v457, v458);
          v459 = v524[12];
          v460 = (_QWORD *)((char *)v339 + v459);
          v461 = (_QWORD *)((char *)v340 + v459);
          v462 = v461[1];
          *v460 = *v461;
          v460[1] = v462;
          *((_BYTE *)v339 + v524[13]) = *((_BYTE *)v340 + v524[13]);
          *((_BYTE *)v339 + v524[14]) = *((_BYTE *)v340 + v524[14]);
          *((_BYTE *)v339 + v524[15]) = *((_BYTE *)v340 + v524[15]);
          v463 = v524[16];
          v464 = (_QWORD *)((char *)v339 + v463);
          v465 = (_QWORD *)((char *)v340 + v463);
          v466 = v465[1];
          *v464 = *v465;
          v464[1] = v466;
          v467 = (void (*)(_QWORD *, _QWORD, uint64_t, int *))v517[7];
          swift_bridgeObjectRetain(v462);
          swift_bridgeObjectRetain(v466);
          v467(v339, 0, 1, v524);
        }
        v468 = v526[17];
        v469 = (_QWORD *)((char *)a1 + v468);
        v470 = (_QWORD *)((char *)a2 + v468);
        v471 = v470[1];
        *v469 = *v470;
        v469[1] = v471;
        v472 = v526[18];
        v473 = (char *)a1 + v472;
        v474 = (char *)a2 + v472;
        v473[8] = v474[8];
        *(_QWORD *)v473 = *(_QWORD *)v474;
        v475 = v526[19];
        v476 = (char *)a1 + v475;
        v477 = (char *)a2 + v475;
        *(_QWORD *)v476 = *(_QWORD *)v477;
        v476[8] = v477[8];
        *((_BYTE *)a1 + v526[20]) = *((_BYTE *)a2 + v526[20]);
        *((_BYTE *)a1 + v526[21]) = *((_BYTE *)a2 + v526[21]);
        v478 = v526[22];
        v479 = (char *)a1 + v478;
        v480 = (char *)a2 + v478;
        v481 = type metadata accessor for TranscriptRequestInformation(0);
        v482 = *(_QWORD *)(v481 - 8);
        v483 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v482 + 48);
        swift_bridgeObjectRetain(v471);
        if (v483(v480, 1, v481))
        {
          v484 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2C40);
          memcpy(v479, v480, *(_QWORD *)(*(_QWORD *)(v484 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v482 + 16))(v479, v480, v481);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v482 + 56))(v479, 0, 1, v481);
        }
        v88 = (uint64_t)v528;
        v87 = a1;
        v89 = 1;
      }
      else
      {
        v90 = a2[1];
        *a1 = *a2;
        a1[1] = v90;
        swift_bridgeObjectRetain(v90);
        v87 = a1;
        v88 = v24;
        v89 = 0;
      }
      swift_storeEnumTagMultiPayload(v87, v88, v89);
      v50 = a1;
      v51 = v3;
      v52 = 2;
      goto LABEL_213;
    case 3u:
      v38 = type metadata accessor for FollowButtonPresenter.Data(0);
      v39 = swift_getEnumCaseMultiPayload(a2, v38);
      *a1 = *a2;
      if (v39 == 1)
      {
        v535 = v38;
        v40 = a2[2];
        a1[1] = a2[1];
        a1[2] = v40;
        *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
        v41 = (int *)type metadata accessor for ShowOffer(0);
        v42 = v41[7];
        v43 = (_QWORD *)((char *)a1 + v42);
        v44 = (_QWORD *)((char *)a2 + v42);
        v45 = (int *)type metadata accessor for ArtworkModel(0);
        v46 = *((_QWORD *)v45 - 1);
        v47 = *(unsigned int (**)(_QWORD *, uint64_t, int *))(v46 + 48);
        swift_bridgeObjectRetain(v40);
        v541 = v3;
        if (v47(v44, 1, v45))
        {
          v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
          memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
        }
        else
        {
          v91 = v44[1];
          *v43 = *v44;
          v43[1] = v91;
          v92 = *((unsigned __int8 *)v44 + 32);
          swift_bridgeObjectRetain(v91);
          if (v92 == 255)
          {
            *((_OWORD *)v43 + 1) = *((_OWORD *)v44 + 1);
            *((_BYTE *)v43 + 32) = *((_BYTE *)v44 + 32);
          }
          else
          {
            v93 = v44[2];
            v94 = v44[3];
            sub_3D464(v93, v94, v92);
            v43[2] = v93;
            v43[3] = v94;
            *((_BYTE *)v43 + 32) = v92;
          }
          *(_OWORD *)(v43 + 5) = *(_OWORD *)(v44 + 5);
          v170 = (id *)(v44 + 7);
          v171 = *((unsigned __int8 *)v44 + 64);
          if (v171 == 255)
          {
            v43[7] = *v170;
            *((_BYTE *)v43 + 64) = *((_BYTE *)v44 + 64);
          }
          else
          {
            v172 = *v170;
            sub_3D47C(*v170, *((_BYTE *)v44 + 64));
            v43[7] = v172;
            *((_BYTE *)v43 + 64) = v171;
          }
          v173 = (id *)(v44 + 9);
          v174 = *((unsigned __int8 *)v44 + 80);
          if (v174 == 255)
          {
            v43[9] = *v173;
            *((_BYTE *)v43 + 80) = *((_BYTE *)v44 + 80);
          }
          else
          {
            v175 = *v173;
            sub_3D47C(*v173, *((_BYTE *)v44 + 80));
            v43[9] = v175;
            *((_BYTE *)v43 + 80) = v174;
          }
          v176 = (id *)(v44 + 11);
          v177 = *((unsigned __int8 *)v44 + 96);
          if (v177 == 255)
          {
            v43[11] = *v176;
            *((_BYTE *)v43 + 96) = *((_BYTE *)v44 + 96);
          }
          else
          {
            v178 = *v176;
            sub_3D47C(*v176, *((_BYTE *)v44 + 96));
            v43[11] = v178;
            *((_BYTE *)v43 + 96) = v177;
          }
          v179 = (id *)(v44 + 13);
          v180 = *((unsigned __int8 *)v44 + 112);
          if (v180 == 255)
          {
            v43[13] = *v179;
            *((_BYTE *)v43 + 112) = *((_BYTE *)v44 + 112);
          }
          else
          {
            v181 = *v179;
            sub_3D47C(*v179, *((_BYTE *)v44 + 112));
            v43[13] = v181;
            *((_BYTE *)v43 + 112) = v180;
          }
          v182 = (id *)(v44 + 15);
          v183 = *((unsigned __int8 *)v44 + 128);
          if (v183 == 255)
          {
            v43[15] = *v182;
            *((_BYTE *)v43 + 128) = *((_BYTE *)v44 + 128);
          }
          else
          {
            v184 = *v182;
            sub_3D47C(*v182, *((_BYTE *)v44 + 128));
            v43[15] = v184;
            *((_BYTE *)v43 + 128) = v183;
          }
          *((_BYTE *)v43 + 129) = *((_BYTE *)v44 + 129);
          v185 = v45[11];
          v186 = (char *)v43 + v185;
          v187 = (char *)v44 + v185;
          v188 = type metadata accessor for ArtworkCrop(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v188 - 8) + 16))(v186, v187, v188);
          v189 = v45[12];
          v190 = (_QWORD *)((char *)v43 + v189);
          v191 = (_QWORD *)((char *)v44 + v189);
          v192 = v191[1];
          *v190 = *v191;
          v190[1] = v192;
          *((_BYTE *)v43 + v45[13]) = *((_BYTE *)v44 + v45[13]);
          *((_BYTE *)v43 + v45[14]) = *((_BYTE *)v44 + v45[14]);
          *((_BYTE *)v43 + v45[15]) = *((_BYTE *)v44 + v45[15]);
          v193 = v45[16];
          v194 = (_QWORD *)((char *)v43 + v193);
          v195 = (_QWORD *)((char *)v44 + v193);
          v196 = v195[1];
          *v194 = *v195;
          v194[1] = v196;
          v197 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v46 + 56);
          swift_bridgeObjectRetain(v192);
          swift_bridgeObjectRetain(v196);
          v197(v43, 0, 1, v45);
        }
        v198 = v41[8];
        v199 = (_QWORD *)((char *)a1 + v198);
        v200 = (_QWORD *)((char *)a2 + v198);
        v201 = v200[1];
        *v199 = *v200;
        v199[1] = v201;
        v202 = v41[9];
        v203 = (_QWORD *)((char *)a1 + v202);
        v204 = (_QWORD *)((char *)a2 + v202);
        v205 = v204[1];
        *v203 = *v204;
        v203[1] = v205;
        *((_BYTE *)a1 + v41[10]) = *((_BYTE *)a2 + v41[10]);
        v206 = v41[11];
        v207 = (_QWORD *)((char *)a1 + v206);
        v208 = (_QWORD *)((char *)a2 + v206);
        v209 = v208[1];
        *v207 = *v208;
        v207[1] = v209;
        v210 = v41[12];
        v211 = (_QWORD *)((char *)a1 + v210);
        v212 = (_QWORD *)((char *)a2 + v210);
        v213 = v212[1];
        *v211 = *v212;
        v211[1] = v213;
        v214 = v41[13];
        v530 = (char *)a1 + v214;
        v533 = v41;
        v215 = (char *)a2 + v214;
        v216 = type metadata accessor for URL(0);
        v217 = *(_QWORD *)(v216 - 8);
        v218 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v217 + 48);
        swift_bridgeObjectRetain(v201);
        swift_bridgeObjectRetain(v205);
        swift_bridgeObjectRetain(v209);
        swift_bridgeObjectRetain(v213);
        if (v218(v215, 1, v216))
        {
          v219 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
          memcpy(v530, v215, *(_QWORD *)(*(_QWORD *)(v219 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v217 + 16))(v530, v215, v216);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v217 + 56))(v530, 0, 1, v216);
        }
        v3 = v541;
        v220 = v533[14];
        v221 = (_QWORD *)((char *)a1 + v220);
        v222 = (_QWORD *)((char *)a2 + v220);
        v223 = v222[1];
        *v221 = *v222;
        v221[1] = v223;
        v224 = v533[15];
        v225 = (_QWORD *)((char *)a1 + v224);
        v226 = (_QWORD *)((char *)a2 + v224);
        v227 = v226[1];
        *v225 = *v226;
        v225[1] = v227;
        v228 = v533[16];
        v229 = (char *)a1 + v228;
        v230 = (char *)a2 + v228;
        swift_bridgeObjectRetain(v223);
        swift_bridgeObjectRetain(v227);
        if (v218(v230, 1, v216))
        {
          v231 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
          memcpy(v229, v230, *(_QWORD *)(*(_QWORD *)(v231 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v217 + 16))(v229, v230, v216);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v217 + 56))(v229, 0, 1, v216);
        }
        v38 = v535;
        v232 = v533[17];
        v233 = (char *)a1 + v232;
        v234 = (char *)a2 + v232;
        if (v218((char *)a2 + v232, 1, v216))
        {
          v235 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
          memcpy(v233, v234, *(_QWORD *)(*(_QWORD *)(v235 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v217 + 16))(v233, v234, v216);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v217 + 56))(v233, 0, 1, v216);
        }
        *((_BYTE *)a1 + v533[18]) = *((_BYTE *)a2 + v533[18]);
        v67 = 1;
      }
      else
      {
        v66 = a2[1];
        a1[1] = v66;
        swift_bridgeObjectRetain(v66);
        v67 = 0;
      }
      swift_storeEnumTagMultiPayload(a1, v38, v67);
      v50 = a1;
      v51 = v3;
      v52 = 3;
      goto LABEL_213;
    case 4u:
      v49 = a2[1];
      *a1 = *a2;
      a1[1] = v49;
      swift_retain(v49);
      v50 = a1;
      v51 = v3;
      v52 = 4;
      goto LABEL_213;
    case 5u:
      v53 = *(_OWORD *)(a2 + 3);
      *(_OWORD *)(a1 + 3) = v53;
      (**(void (***)(_QWORD *, _QWORD *))(v53 - 8))(a1, a2);
      v50 = a1;
      v51 = v3;
      v52 = 5;
      goto LABEL_213;
    case 6u:
      v542 = v3;
      v54 = a2[1];
      *a1 = *a2;
      a1[1] = v54;
      v55 = a2[3];
      a1[2] = a2[2];
      a1[3] = v55;
      v56 = a2[5];
      a1[4] = a2[4];
      a1[5] = v56;
      v536 = type metadata accessor for ActionMenu(0);
      v57 = *(int *)(v536 + 28);
      v58 = (_QWORD *)((char *)a1 + v57);
      v59 = (_QWORD *)((char *)a2 + v57);
      v60 = (int *)type metadata accessor for ArtworkModel(0);
      v61 = *((_QWORD *)v60 - 1);
      v62 = *(unsigned int (**)(_QWORD *, uint64_t, int *))(v61 + 48);
      swift_bridgeObjectRetain(v54);
      swift_bridgeObjectRetain(v55);
      swift_bridgeObjectRetain(v56);
      if (v62(v59, 1, v60))
      {
        v63 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
        memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
        v64 = v536;
        v65 = v542;
      }
      else
      {
        v72 = v59[1];
        *v58 = *v59;
        v58[1] = v72;
        v73 = *((unsigned __int8 *)v59 + 32);
        swift_bridgeObjectRetain(v72);
        if (v73 == 255)
        {
          *((_OWORD *)v58 + 1) = *((_OWORD *)v59 + 1);
          *((_BYTE *)v58 + 32) = *((_BYTE *)v59 + 32);
        }
        else
        {
          v74 = v59[2];
          v75 = v59[3];
          sub_3D464(v74, v75, v73);
          v58[2] = v74;
          v58[3] = v75;
          *((_BYTE *)v58 + 32) = v73;
        }
        v64 = v536;
        v65 = v542;
        *(_OWORD *)(v58 + 5) = *(_OWORD *)(v59 + 5);
        v98 = (id *)(v59 + 7);
        v99 = *((unsigned __int8 *)v59 + 64);
        if (v99 == 255)
        {
          v58[7] = *v98;
          *((_BYTE *)v58 + 64) = *((_BYTE *)v59 + 64);
        }
        else
        {
          v100 = *v98;
          sub_3D47C(*v98, *((_BYTE *)v59 + 64));
          v58[7] = v100;
          *((_BYTE *)v58 + 64) = v99;
        }
        v104 = (id *)(v59 + 9);
        v105 = *((unsigned __int8 *)v59 + 80);
        if (v105 == 255)
        {
          v58[9] = *v104;
          *((_BYTE *)v58 + 80) = *((_BYTE *)v59 + 80);
        }
        else
        {
          v106 = *v104;
          sub_3D47C(*v104, *((_BYTE *)v59 + 80));
          v58[9] = v106;
          *((_BYTE *)v58 + 80) = v105;
        }
        v110 = (id *)(v59 + 11);
        v111 = *((unsigned __int8 *)v59 + 96);
        if (v111 == 255)
        {
          v58[11] = *v110;
          *((_BYTE *)v58 + 96) = *((_BYTE *)v59 + 96);
        }
        else
        {
          v112 = *v110;
          sub_3D47C(*v110, *((_BYTE *)v59 + 96));
          v58[11] = v112;
          *((_BYTE *)v58 + 96) = v111;
        }
        v116 = (id *)(v59 + 13);
        v117 = *((unsigned __int8 *)v59 + 112);
        if (v117 == 255)
        {
          v58[13] = *v116;
          *((_BYTE *)v58 + 112) = *((_BYTE *)v59 + 112);
        }
        else
        {
          v118 = *v116;
          sub_3D47C(*v116, *((_BYTE *)v59 + 112));
          v58[13] = v118;
          *((_BYTE *)v58 + 112) = v117;
        }
        v122 = (id *)(v59 + 15);
        v123 = *((unsigned __int8 *)v59 + 128);
        if (v123 == 255)
        {
          v58[15] = *v122;
          *((_BYTE *)v58 + 128) = *((_BYTE *)v59 + 128);
        }
        else
        {
          v124 = *v122;
          sub_3D47C(*v122, *((_BYTE *)v59 + 128));
          v58[15] = v124;
          *((_BYTE *)v58 + 128) = v123;
        }
        *((_BYTE *)v58 + 129) = *((_BYTE *)v59 + 129);
        v146 = v60[11];
        v147 = (char *)v58 + v146;
        v148 = (char *)v59 + v146;
        v149 = type metadata accessor for ArtworkCrop(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v149 - 8) + 16))(v147, v148, v149);
        v150 = v60[12];
        v151 = (_QWORD *)((char *)v58 + v150);
        v152 = (_QWORD *)((char *)v59 + v150);
        v153 = v152[1];
        *v151 = *v152;
        v151[1] = v153;
        *((_BYTE *)v58 + v60[13]) = *((_BYTE *)v59 + v60[13]);
        *((_BYTE *)v58 + v60[14]) = *((_BYTE *)v59 + v60[14]);
        *((_BYTE *)v58 + v60[15]) = *((_BYTE *)v59 + v60[15]);
        v154 = v60[16];
        v155 = (_QWORD *)((char *)v58 + v154);
        v156 = (_QWORD *)((char *)v59 + v154);
        v157 = v156[1];
        *v155 = *v156;
        v155[1] = v157;
        v158 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v61 + 56);
        swift_bridgeObjectRetain(v153);
        swift_bridgeObjectRetain(v157);
        v158(v58, 0, 1, v60);
      }
      v159 = *(int *)(v64 + 32);
      v160 = *(_QWORD *)((char *)a2 + v159);
      *(_QWORD *)((char *)a1 + v159) = v160;
      swift_bridgeObjectRetain(v160);
      v161 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B27F8);
      *((_BYTE *)a1 + *(int *)(v161 + 48)) = *((_BYTE *)a2 + *(int *)(v161 + 48));
      v50 = a1;
      v51 = v65;
      v52 = 6;
      goto LABEL_213;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
      return a1;
  }
}

_QWORD *assignWithCopy for HeaderButtonItem(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  int *v12;
  uint64_t v13;
  unsigned int (*v14)(_QWORD *, uint64_t, int *);
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  int EnumCaseMultiPayload;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  unsigned int (*v36)(_QWORD *, uint64_t, int *);
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int *v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  int *v45;
  uint64_t v46;
  unsigned int (*v47)(_QWORD *, uint64_t, int *);
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  int *v60;
  uint64_t v61;
  unsigned int (*v62)(_QWORD *, uint64_t, int *);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  unsigned int (*v86)(_QWORD *, uint64_t, int *);
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  __int128 v97;
  id *v98;
  int v99;
  id v100;
  __int128 v101;
  id *v102;
  int v103;
  id v104;
  id v105;
  id *v106;
  int v107;
  id v108;
  id v109;
  id *v110;
  int v111;
  id v112;
  id v113;
  id *v114;
  int v115;
  id v116;
  id v117;
  id *v118;
  int v119;
  id v120;
  id v121;
  id *v122;
  int v123;
  id v124;
  id v125;
  id *v126;
  int v127;
  id v128;
  id v129;
  id *v130;
  int v131;
  id v132;
  id v133;
  id *v134;
  int v135;
  id v136;
  id v137;
  uint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  _QWORD *v144;
  uint64_t v145;
  uint64_t v146;
  _QWORD *v147;
  _QWORD *v148;
  uint64_t v149;
  void (*v150)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  id v160;
  uint64_t v161;
  char *v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  _QWORD *v166;
  _QWORD *v167;
  uint64_t v168;
  uint64_t v169;
  _QWORD *v170;
  _QWORD *v171;
  uint64_t v172;
  void (*v173)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  int v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  int v182;
  uint64_t v183;
  uint64_t v184;
  __int128 v185;
  id *v186;
  int v187;
  id v188;
  id v189;
  id *v190;
  int v191;
  id v192;
  id v193;
  id *v194;
  int v195;
  id v196;
  id v197;
  id *v198;
  int v199;
  id v200;
  id v201;
  id *v202;
  int v203;
  id v204;
  id v205;
  uint64_t v206;
  char *v207;
  char *v208;
  uint64_t v209;
  uint64_t v210;
  _QWORD *v211;
  _QWORD *v212;
  uint64_t v213;
  uint64_t v214;
  _QWORD *v215;
  _QWORD *v216;
  uint64_t v217;
  void (*v218)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v219;
  _QWORD *v220;
  _QWORD *v221;
  uint64_t v222;
  uint64_t v223;
  _QWORD *v224;
  _QWORD *v225;
  uint64_t v226;
  uint64_t v227;
  _QWORD *v228;
  _QWORD *v229;
  uint64_t v230;
  uint64_t v231;
  _QWORD *v232;
  _QWORD *v233;
  uint64_t v234;
  uint64_t v235;
  char *v236;
  uint64_t v237;
  uint64_t v238;
  unsigned int (*v239)(char *, uint64_t, uint64_t);
  uint64_t v240;
  uint64_t v241;
  _QWORD *v242;
  _QWORD *v243;
  uint64_t v244;
  uint64_t v245;
  _QWORD *v246;
  _QWORD *v247;
  uint64_t v248;
  uint64_t v249;
  char *v250;
  char *v251;
  uint64_t v252;
  uint64_t v253;
  char *v254;
  char *v255;
  uint64_t v256;
  __int128 v257;
  id *v258;
  int v259;
  id v260;
  __int128 v261;
  id *v262;
  int v263;
  id v264;
  id v265;
  id *v266;
  int v267;
  id v268;
  id v269;
  id *v270;
  int v271;
  id v272;
  id v273;
  id *v274;
  int v275;
  id v276;
  id v277;
  id *v278;
  int v279;
  id v280;
  id v281;
  id *v282;
  int v283;
  id v284;
  id v285;
  id *v286;
  int v287;
  id v288;
  id v289;
  id *v290;
  int v291;
  id v292;
  id v293;
  id *v294;
  int v295;
  id v296;
  id v297;
  uint64_t v298;
  char *v299;
  char *v300;
  uint64_t v301;
  uint64_t v302;
  char *v303;
  char *v304;
  uint64_t v305;
  uint64_t v306;
  char *v307;
  char *v308;
  uint64_t v309;
  void (*v310)(char *, _QWORD, uint64_t, int *);
  uint64_t v311;
  char *v312;
  char *v313;
  uint64_t v314;
  uint64_t v315;
  char *v316;
  char *v317;
  uint64_t v318;
  uint64_t v319;
  char *v320;
  char *v321;
  uint64_t v322;
  uint64_t v323;
  char *v324;
  char *v325;
  uint64_t v326;
  uint64_t v327;
  char *v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  unsigned int (*v332)(char *, uint64_t, uint64_t);
  unsigned int (*v333)(char *, uint64_t, uint64_t);
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  char *v337;
  char *v338;
  uint64_t v339;
  uint64_t v340;
  char *v341;
  char *v342;
  uint64_t v343;
  uint64_t v344;
  char *v345;
  char *v346;
  uint64_t v347;
  uint64_t v348;
  char *v349;
  char *v350;
  uint64_t v351;
  uint64_t v352;
  char *v353;
  char *v354;
  uint64_t v355;
  void (*v356)(char *, char *, uint64_t);
  uint64_t v357;
  _QWORD *v358;
  _QWORD *v359;
  uint64_t v360;
  uint64_t v361;
  _QWORD *v362;
  _QWORD *v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  char *v368;
  char *v369;
  char v370;
  uint64_t v371;
  _QWORD *v372;
  _QWORD *v373;
  uint64_t v374;
  uint64_t v375;
  int v376;
  uint64_t v377;
  uint64_t v378;
  id v379;
  uint64_t v380;
  char *v381;
  char *v382;
  uint64_t v383;
  uint64_t v384;
  char *v385;
  char *v386;
  uint64_t v387;
  uint64_t v388;
  char *v389;
  char *v390;
  uint64_t v391;
  void (*v392)(char *, _QWORD, uint64_t, int *);
  uint64_t v393;
  char *v394;
  char *v395;
  uint64_t v396;
  uint64_t v397;
  char *v398;
  char *v399;
  uint64_t v400;
  uint64_t v401;
  char *v402;
  char *v403;
  uint64_t v404;
  uint64_t v405;
  char *v406;
  char *v407;
  uint64_t v408;
  uint64_t v409;
  char *v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  unsigned int (*v414)(char *, uint64_t, uint64_t);
  unsigned int (*v415)(char *, uint64_t, uint64_t);
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  char *v419;
  char *v420;
  uint64_t v421;
  uint64_t v422;
  char *v423;
  char *v424;
  uint64_t v425;
  uint64_t v426;
  char *v427;
  char *v428;
  uint64_t v429;
  uint64_t v430;
  char *v431;
  char *v432;
  uint64_t v433;
  uint64_t v434;
  char *v435;
  char *v436;
  uint64_t v437;
  void (*v438)(char *, char *, uint64_t);
  uint64_t v439;
  _QWORD *v440;
  _QWORD *v441;
  uint64_t v442;
  uint64_t v443;
  _QWORD *v444;
  _QWORD *v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  char *v450;
  char *v451;
  char v452;
  uint64_t v453;
  _QWORD *v454;
  _QWORD *v455;
  uint64_t v456;
  uint64_t v457;
  int v458;
  uint64_t v459;
  uint64_t v460;
  __int128 v461;
  id *v462;
  int v463;
  id v464;
  __int128 v465;
  id *v466;
  int v467;
  id v468;
  id v469;
  id *v470;
  int v471;
  id v472;
  id v473;
  id *v474;
  int v475;
  id v476;
  id v477;
  id *v478;
  int v479;
  id v480;
  id v481;
  id *v482;
  int v483;
  id v484;
  id v485;
  id *v486;
  int v487;
  id v488;
  id v489;
  id *v490;
  int v491;
  id v492;
  id v493;
  id *v494;
  int v495;
  id v496;
  id v497;
  id *v498;
  int v499;
  id v500;
  id v501;
  uint64_t v502;
  char *v503;
  char *v504;
  uint64_t v505;
  uint64_t v506;
  _QWORD *v507;
  _QWORD *v508;
  uint64_t v509;
  uint64_t v510;
  _QWORD *v511;
  _QWORD *v512;
  uint64_t v513;
  void (*v514)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v515;
  _QWORD *v516;
  _QWORD *v517;
  uint64_t v518;
  uint64_t v519;
  char *v520;
  char *v521;
  uint64_t v522;
  uint64_t v523;
  char *v524;
  char *v525;
  uint64_t v526;
  uint64_t v527;
  char *v528;
  char *v529;
  uint64_t v530;
  uint64_t v531;
  unsigned int (*v532)(char *, uint64_t, uint64_t);
  uint64_t v533;
  id v534;
  uint64_t v535;
  char *v536;
  char *v537;
  uint64_t v538;
  uint64_t v539;
  _QWORD *v540;
  _QWORD *v541;
  uint64_t v542;
  uint64_t v543;
  _QWORD *v544;
  _QWORD *v545;
  uint64_t v546;
  void (*v547)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v548;
  _QWORD *v549;
  _QWORD *v550;
  uint64_t v551;
  uint64_t v552;
  char *v553;
  char *v554;
  uint64_t v555;
  uint64_t v556;
  char *v557;
  char *v558;
  uint64_t v559;
  uint64_t v560;
  char *v561;
  char *v562;
  uint64_t v563;
  uint64_t v564;
  unsigned int (*v565)(char *, uint64_t, uint64_t);
  uint64_t v566;
  uint64_t v568;
  uint64_t v569;
  unsigned int (*v570)(_QWORD *, uint64_t, int *);
  unsigned int (*v571)(_QWORD *, uint64_t, int *);
  int *v572;
  int *v573;
  uint64_t v574;
  uint64_t v575;
  char *v576;
  char *v577;
  int *__dst;
  int *__dsta;
  char *__dstb;
  int *v581;
  int *v582;
  int *v583;
  char *v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  char *v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;

  if (a1 != a2)
  {
    sub_145D8((uint64_t)a1, type metadata accessor for HeaderButtonItem);
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        v589 = a3;
        *a1 = *a2;
        v6 = a2[1];
        a1[1] = v6;
        a1[2] = a2[2];
        v7 = a2[3];
        a1[3] = v7;
        v8 = type metadata accessor for ActionButton(0);
        v9 = *(int *)(v8 + 24);
        v10 = (_QWORD *)((char *)a1 + v9);
        v11 = (_QWORD *)((char *)a2 + v9);
        v12 = (int *)type metadata accessor for ArtworkModel(0);
        v13 = *((_QWORD *)v12 - 1);
        v14 = *(unsigned int (**)(_QWORD *, uint64_t, int *))(v13 + 48);
        swift_bridgeObjectRetain(v6);
        swift_bridgeObjectRetain(v7);
        if (v14(v11, 1, v12))
        {
          v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
          memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
          v16 = v589;
          v17 = (int *)v8;
        }
        else
        {
          v587 = v13;
          *v10 = *v11;
          v68 = v11[1];
          v10[1] = v68;
          v69 = *((unsigned __int8 *)v11 + 32);
          swift_bridgeObjectRetain(v68);
          if (v69 == 255)
          {
            v97 = *((_OWORD *)v11 + 1);
            *((_BYTE *)v10 + 32) = *((_BYTE *)v11 + 32);
            *((_OWORD *)v10 + 1) = v97;
          }
          else
          {
            v70 = v11[2];
            v71 = v11[3];
            sub_3D464(v70, v71, v69);
            v10[2] = v70;
            v10[3] = v71;
            *((_BYTE *)v10 + 32) = v69;
          }
          v17 = (int *)v8;
          v10[5] = v11[5];
          v10[6] = v11[6];
          v98 = (id *)(v11 + 7);
          v99 = *((unsigned __int8 *)v11 + 64);
          if (v99 == 255)
          {
            v105 = *v98;
            *((_BYTE *)v10 + 64) = *((_BYTE *)v11 + 64);
            v10[7] = v105;
          }
          else
          {
            v100 = *v98;
            sub_3D47C(*v98, *((_BYTE *)v11 + 64));
            v10[7] = v100;
            *((_BYTE *)v10 + 64) = v99;
          }
          v16 = v589;
          v106 = (id *)(v11 + 9);
          v107 = *((unsigned __int8 *)v11 + 80);
          if (v107 == 255)
          {
            v113 = *v106;
            *((_BYTE *)v10 + 80) = *((_BYTE *)v11 + 80);
            v10[9] = v113;
          }
          else
          {
            v108 = *v106;
            sub_3D47C(*v106, *((_BYTE *)v11 + 80));
            v10[9] = v108;
            *((_BYTE *)v10 + 80) = v107;
          }
          v114 = (id *)(v11 + 11);
          v115 = *((unsigned __int8 *)v11 + 96);
          if (v115 == 255)
          {
            v121 = *v114;
            *((_BYTE *)v10 + 96) = *((_BYTE *)v11 + 96);
            v10[11] = v121;
          }
          else
          {
            v116 = *v114;
            sub_3D47C(*v114, *((_BYTE *)v11 + 96));
            v10[11] = v116;
            *((_BYTE *)v10 + 96) = v115;
          }
          v122 = (id *)(v11 + 13);
          v123 = *((unsigned __int8 *)v11 + 112);
          if (v123 == 255)
          {
            v129 = *v122;
            *((_BYTE *)v10 + 112) = *((_BYTE *)v11 + 112);
            v10[13] = v129;
          }
          else
          {
            v124 = *v122;
            sub_3D47C(*v122, *((_BYTE *)v11 + 112));
            v10[13] = v124;
            *((_BYTE *)v10 + 112) = v123;
          }
          v130 = (id *)(v11 + 15);
          v131 = *((unsigned __int8 *)v11 + 128);
          if (v131 == 255)
          {
            v137 = *v130;
            *((_BYTE *)v10 + 128) = *((_BYTE *)v11 + 128);
            v10[15] = v137;
          }
          else
          {
            v132 = *v130;
            sub_3D47C(*v130, *((_BYTE *)v11 + 128));
            v10[15] = v132;
            *((_BYTE *)v10 + 128) = v131;
          }
          *((_BYTE *)v10 + 129) = *((_BYTE *)v11 + 129);
          v138 = v12[11];
          v139 = (char *)v10 + v138;
          v140 = (char *)v11 + v138;
          v141 = type metadata accessor for ArtworkCrop(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v141 - 8) + 16))(v139, v140, v141);
          v142 = v12[12];
          v143 = (_QWORD *)((char *)v10 + v142);
          v144 = (_QWORD *)((char *)v11 + v142);
          *v143 = *v144;
          v145 = v144[1];
          v143[1] = v145;
          *((_BYTE *)v10 + v12[13]) = *((_BYTE *)v11 + v12[13]);
          *((_BYTE *)v10 + v12[14]) = *((_BYTE *)v11 + v12[14]);
          *((_BYTE *)v10 + v12[15]) = *((_BYTE *)v11 + v12[15]);
          v146 = v12[16];
          v147 = (_QWORD *)((char *)v10 + v146);
          v148 = (_QWORD *)((char *)v11 + v146);
          *v147 = *v148;
          v149 = v148[1];
          v147[1] = v149;
          v150 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v587 + 56);
          swift_bridgeObjectRetain(v145);
          swift_bridgeObjectRetain(v149);
          v150(v10, 0, 1, v12);
        }
        *((_BYTE *)a1 + v17[7]) = *((_BYTE *)a2 + v17[7]);
        v151 = v17[8];
        v152 = (char *)a1 + v151;
        v153 = *(_QWORD *)((char *)a2 + v151 + 24);
        *((_QWORD *)v152 + 3) = v153;
        *((_QWORD *)v152 + 4) = *(_QWORD *)((char *)a2 + v151 + 32);
        (**(void (***)(void))(v153 - 8))();
        v154 = v17[9];
        v155 = (char *)a1 + v154;
        v156 = (char *)a2 + v154;
        v157 = type metadata accessor for ImpressionMetrics(0);
        v158 = *(_QWORD *)(v157 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v158 + 48))(v156, 1, v157))
        {
          v159 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
          memcpy(v155, v156, *(_QWORD *)(*(_QWORD *)(v159 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v158 + 16))(v155, v156, v157);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v158 + 56))(v155, 0, 1, v157);
        }
        v50 = a1;
        v51 = v16;
        v52 = 0;
        goto LABEL_214;
      case 1u:
        v18 = type metadata accessor for BookmarkButtonPresenter.Data(0);
        EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v18);
        if (EnumCaseMultiPayload == 1)
        {
          v575 = v18;
          v593 = a3;
          *a1 = *a2;
          a1[1] = a2[1];
          v76 = a2[2];
          a1[2] = v76;
          v77 = type metadata accessor for EpisodeOffer(0);
          v78 = *(int *)(v77 + 24);
          v79 = (char *)a1 + v78;
          v80 = (char *)a2 + v78;
          *(_QWORD *)v79 = *(_QWORD *)((char *)a2 + v78);
          *((_QWORD *)v79 + 1) = *(_QWORD *)((char *)a2 + v78 + 8);
          v81 = *(_QWORD *)((char *)a2 + v78 + 16);
          *((_QWORD *)v79 + 2) = v81;
          v79[24] = *((_BYTE *)a2 + v78 + 24);
          v582 = (int *)type metadata accessor for ShowOffer(0);
          v588 = v79;
          v82 = v582[7];
          v83 = &v79[v82];
          v84 = &v80[v82];
          v85 = type metadata accessor for ArtworkModel(0);
          v569 = *(_QWORD *)(v85 - 8);
          v86 = *(unsigned int (**)(_QWORD *, uint64_t, int *))(v569 + 48);
          swift_bridgeObjectRetain(v76);
          swift_bridgeObjectRetain(v81);
          __dsta = (int *)v85;
          v571 = v86;
          v573 = (int *)v77;
          if (v86(v84, 1, (int *)v85))
          {
            v87 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
            memcpy(v83, v84, *(_QWORD *)(*(_QWORD *)(v87 - 8) + 64));
          }
          else
          {
            *(_QWORD *)v83 = *(_QWORD *)v84;
            v181 = *((_QWORD *)v84 + 1);
            *((_QWORD *)v83 + 1) = v181;
            v182 = v84[32];
            swift_bridgeObjectRetain(v181);
            if (v182 == 255)
            {
              v261 = *((_OWORD *)v84 + 1);
              v83[32] = v84[32];
              *((_OWORD *)v83 + 1) = v261;
            }
            else
            {
              v183 = *((_QWORD *)v84 + 2);
              v184 = *((_QWORD *)v84 + 3);
              sub_3D464(v183, v184, v182);
              *((_QWORD *)v83 + 2) = v183;
              *((_QWORD *)v83 + 3) = v184;
              v83[32] = v182;
            }
            *((_QWORD *)v83 + 5) = *((_QWORD *)v84 + 5);
            *((_QWORD *)v83 + 6) = *((_QWORD *)v84 + 6);
            v262 = (id *)(v84 + 56);
            v263 = v84[64];
            if (v263 == 255)
            {
              v269 = *v262;
              v83[64] = v84[64];
              *((_QWORD *)v83 + 7) = v269;
            }
            else
            {
              v264 = *v262;
              sub_3D47C(*v262, v84[64]);
              *((_QWORD *)v83 + 7) = v264;
              v83[64] = v263;
            }
            v270 = (id *)(v84 + 72);
            v271 = v84[80];
            if (v271 == 255)
            {
              v277 = *v270;
              v83[80] = v84[80];
              *((_QWORD *)v83 + 9) = v277;
            }
            else
            {
              v272 = *v270;
              sub_3D47C(*v270, v84[80]);
              *((_QWORD *)v83 + 9) = v272;
              v83[80] = v271;
            }
            v278 = (id *)(v84 + 88);
            v279 = v84[96];
            if (v279 == 255)
            {
              v285 = *v278;
              v83[96] = v84[96];
              *((_QWORD *)v83 + 11) = v285;
            }
            else
            {
              v280 = *v278;
              sub_3D47C(*v278, v84[96]);
              *((_QWORD *)v83 + 11) = v280;
              v83[96] = v279;
            }
            v286 = (id *)(v84 + 104);
            v287 = v84[112];
            if (v287 == 255)
            {
              v293 = *v286;
              v83[112] = v84[112];
              *((_QWORD *)v83 + 13) = v293;
            }
            else
            {
              v288 = *v286;
              sub_3D47C(*v286, v84[112]);
              *((_QWORD *)v83 + 13) = v288;
              v83[112] = v287;
            }
            v294 = (id *)(v84 + 120);
            v295 = v84[128];
            if (v295 == 255)
            {
              v379 = *v294;
              v83[128] = v84[128];
              *((_QWORD *)v83 + 15) = v379;
            }
            else
            {
              v296 = *v294;
              sub_3D47C(*v294, v84[128]);
              *((_QWORD *)v83 + 15) = v296;
              v83[128] = v295;
            }
            v83[129] = v84[129];
            v380 = __dsta[11];
            v381 = &v83[v380];
            v382 = &v84[v380];
            v383 = type metadata accessor for ArtworkCrop(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v383 - 8) + 16))(v381, v382, v383);
            v384 = __dsta[12];
            v385 = &v83[v384];
            v386 = &v84[v384];
            *(_QWORD *)v385 = *(_QWORD *)v386;
            v387 = *((_QWORD *)v386 + 1);
            *((_QWORD *)v385 + 1) = v387;
            v83[__dsta[13]] = v84[__dsta[13]];
            v83[__dsta[14]] = v84[__dsta[14]];
            v83[__dsta[15]] = v84[__dsta[15]];
            v388 = __dsta[16];
            v389 = &v83[v388];
            v390 = &v84[v388];
            *(_QWORD *)v389 = *(_QWORD *)v390;
            v391 = *((_QWORD *)v390 + 1);
            *((_QWORD *)v389 + 1) = v391;
            v392 = *(void (**)(char *, _QWORD, uint64_t, int *))(v569 + 56);
            swift_bridgeObjectRetain(v387);
            swift_bridgeObjectRetain(v391);
            v392(v83, 0, 1, __dsta);
          }
          v393 = v582[8];
          v394 = &v588[v393];
          v395 = &v80[v393];
          *(_QWORD *)v394 = *(_QWORD *)v395;
          v396 = *((_QWORD *)v395 + 1);
          *((_QWORD *)v394 + 1) = v396;
          v397 = v582[9];
          v398 = &v588[v397];
          v399 = &v80[v397];
          *(_QWORD *)v398 = *(_QWORD *)v399;
          v400 = *((_QWORD *)v399 + 1);
          *((_QWORD *)v398 + 1) = v400;
          v588[v582[10]] = v80[v582[10]];
          v401 = v582[11];
          v402 = &v588[v401];
          v403 = &v80[v401];
          *(_QWORD *)v402 = *(_QWORD *)v403;
          v404 = *((_QWORD *)v403 + 1);
          *((_QWORD *)v402 + 1) = v404;
          v405 = v582[12];
          v406 = &v588[v405];
          v407 = &v80[v405];
          *(_QWORD *)v406 = *(_QWORD *)v407;
          v408 = *((_QWORD *)v407 + 1);
          *((_QWORD *)v406 + 1) = v408;
          v409 = v582[13];
          v577 = &v588[v409];
          v410 = &v80[v409];
          v411 = type metadata accessor for URL(0);
          v412 = *(_QWORD *)(v411 - 8);
          v413 = v396;
          v414 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v412 + 48);
          swift_bridgeObjectRetain(v413);
          swift_bridgeObjectRetain(v400);
          swift_bridgeObjectRetain(v404);
          swift_bridgeObjectRetain(v408);
          v415 = v414;
          if (v414(v410, 1, v411))
          {
            v416 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
            memcpy(v577, v410, *(_QWORD *)(*(_QWORD *)(v416 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v412 + 16))(v577, v410, v411);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v412 + 56))(v577, 0, 1, v411);
          }
          v417 = v412;
          v418 = v582[14];
          v419 = &v588[v418];
          v420 = &v80[v418];
          *(_QWORD *)v419 = *(_QWORD *)v420;
          v421 = *((_QWORD *)v420 + 1);
          *((_QWORD *)v419 + 1) = v421;
          v422 = v582[15];
          v423 = &v588[v422];
          v424 = &v80[v422];
          *(_QWORD *)v423 = *(_QWORD *)v424;
          v425 = *((_QWORD *)v424 + 1);
          *((_QWORD *)v423 + 1) = v425;
          v426 = v582[16];
          v427 = &v588[v426];
          v428 = &v80[v426];
          swift_bridgeObjectRetain(v421);
          swift_bridgeObjectRetain(v425);
          if (v415(v428, 1, v411))
          {
            v429 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
            memcpy(v427, v428, *(_QWORD *)(*(_QWORD *)(v429 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v417 + 16))(v427, v428, v411);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v417 + 56))(v427, 0, 1, v411);
          }
          v430 = v582[17];
          v431 = &v588[v430];
          v432 = &v80[v430];
          if (v415(&v80[v430], 1, v411))
          {
            v433 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
            memcpy(v431, v432, *(_QWORD *)(*(_QWORD *)(v433 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v417 + 16))(v431, v432, v411);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v417 + 56))(v431, 0, 1, v411);
          }
          v588[v582[18]] = v80[v582[18]];
          v434 = v573[7];
          v435 = (char *)a1 + v434;
          v436 = (char *)a2 + v434;
          a3 = v593;
          if (v415((char *)a2 + v434, 1, v411))
          {
            v437 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
            memcpy(v435, v436, *(_QWORD *)(*(_QWORD *)(v437 - 8) + 64));
            (*(void (**)(char *, char *, uint64_t))(v417 + 16))((char *)a1 + v573[8], (char *)a2 + v573[8], v411);
          }
          else
          {
            v438 = *(void (**)(char *, char *, uint64_t))(v417 + 16);
            v438(v435, v436, v411);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v417 + 56))(v435, 0, 1, v411);
            v438((char *)a1 + v573[8], (char *)a2 + v573[8], v411);
          }
          *(_QWORD *)((char *)a1 + v573[9]) = *(_QWORD *)((char *)a2 + v573[9]);
          v439 = v573[10];
          v440 = (_QWORD *)((char *)a1 + v439);
          v441 = (_QWORD *)((char *)a2 + v439);
          *v440 = *v441;
          v442 = v441[1];
          v440[1] = v442;
          v443 = v573[11];
          v444 = (_QWORD *)((char *)a1 + v443);
          v445 = (_QWORD *)((char *)a2 + v443);
          *v444 = *v445;
          v446 = v445[1];
          v444[1] = v446;
          v447 = v573[12];
          v448 = *(_QWORD *)((char *)a2 + v447);
          *(_QWORD *)((char *)a1 + v447) = v448;
          *((_BYTE *)a1 + v573[13]) = *((_BYTE *)a2 + v573[13]);
          *((_BYTE *)a1 + v573[14]) = *((_BYTE *)a2 + v573[14]);
          v449 = v573[15];
          v450 = (char *)a1 + v449;
          v451 = (char *)a2 + v449;
          v452 = v451[8];
          *(_QWORD *)v450 = *(_QWORD *)v451;
          v450[8] = v452;
          v453 = v573[16];
          v454 = (_QWORD *)((char *)a1 + v453);
          v455 = (_QWORD *)((char *)a2 + v453);
          swift_bridgeObjectRetain(v442);
          swift_bridgeObjectRetain(v446);
          swift_retain(v448);
          if (v571(v455, 1, __dsta))
          {
            v456 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
            memcpy(v454, v455, *(_QWORD *)(*(_QWORD *)(v456 - 8) + 64));
          }
          else
          {
            *v454 = *v455;
            v457 = v455[1];
            v454[1] = v457;
            v458 = *((unsigned __int8 *)v455 + 32);
            swift_bridgeObjectRetain(v457);
            if (v458 == 255)
            {
              v465 = *((_OWORD *)v455 + 1);
              *((_BYTE *)v454 + 32) = *((_BYTE *)v455 + 32);
              *((_OWORD *)v454 + 1) = v465;
            }
            else
            {
              v459 = v455[2];
              v460 = v455[3];
              sub_3D464(v459, v460, v458);
              v454[2] = v459;
              v454[3] = v460;
              *((_BYTE *)v454 + 32) = v458;
            }
            v454[5] = v455[5];
            v454[6] = v455[6];
            v466 = (id *)(v455 + 7);
            v467 = *((unsigned __int8 *)v455 + 64);
            if (v467 == 255)
            {
              v473 = *v466;
              *((_BYTE *)v454 + 64) = *((_BYTE *)v455 + 64);
              v454[7] = v473;
            }
            else
            {
              v468 = *v466;
              sub_3D47C(*v466, *((_BYTE *)v455 + 64));
              v454[7] = v468;
              *((_BYTE *)v454 + 64) = v467;
            }
            v474 = (id *)(v455 + 9);
            v475 = *((unsigned __int8 *)v455 + 80);
            if (v475 == 255)
            {
              v481 = *v474;
              *((_BYTE *)v454 + 80) = *((_BYTE *)v455 + 80);
              v454[9] = v481;
            }
            else
            {
              v476 = *v474;
              sub_3D47C(*v474, *((_BYTE *)v455 + 80));
              v454[9] = v476;
              *((_BYTE *)v454 + 80) = v475;
            }
            v482 = (id *)(v455 + 11);
            v483 = *((unsigned __int8 *)v455 + 96);
            if (v483 == 255)
            {
              v489 = *v482;
              *((_BYTE *)v454 + 96) = *((_BYTE *)v455 + 96);
              v454[11] = v489;
            }
            else
            {
              v484 = *v482;
              sub_3D47C(*v482, *((_BYTE *)v455 + 96));
              v454[11] = v484;
              *((_BYTE *)v454 + 96) = v483;
            }
            v490 = (id *)(v455 + 13);
            v491 = *((unsigned __int8 *)v455 + 112);
            if (v491 == 255)
            {
              v497 = *v490;
              *((_BYTE *)v454 + 112) = *((_BYTE *)v455 + 112);
              v454[13] = v497;
            }
            else
            {
              v492 = *v490;
              sub_3D47C(*v490, *((_BYTE *)v455 + 112));
              v454[13] = v492;
              *((_BYTE *)v454 + 112) = v491;
            }
            v498 = (id *)(v455 + 15);
            v499 = *((unsigned __int8 *)v455 + 128);
            if (v499 == 255)
            {
              v534 = *v498;
              *((_BYTE *)v454 + 128) = *((_BYTE *)v455 + 128);
              v454[15] = v534;
            }
            else
            {
              v500 = *v498;
              sub_3D47C(*v498, *((_BYTE *)v455 + 128));
              v454[15] = v500;
              *((_BYTE *)v454 + 128) = v499;
            }
            *((_BYTE *)v454 + 129) = *((_BYTE *)v455 + 129);
            v535 = __dsta[11];
            v536 = (char *)v454 + v535;
            v537 = (char *)v455 + v535;
            v538 = type metadata accessor for ArtworkCrop(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v538 - 8) + 16))(v536, v537, v538);
            v539 = __dsta[12];
            v540 = (_QWORD *)((char *)v454 + v539);
            v541 = (_QWORD *)((char *)v455 + v539);
            *v540 = *v541;
            v542 = v541[1];
            v540[1] = v542;
            *((_BYTE *)v454 + __dsta[13]) = *((_BYTE *)v455 + __dsta[13]);
            *((_BYTE *)v454 + __dsta[14]) = *((_BYTE *)v455 + __dsta[14]);
            *((_BYTE *)v454 + __dsta[15]) = *((_BYTE *)v455 + __dsta[15]);
            v543 = __dsta[16];
            v544 = (_QWORD *)((char *)v454 + v543);
            v545 = (_QWORD *)((char *)v455 + v543);
            *v544 = *v545;
            v546 = v545[1];
            v544[1] = v546;
            v547 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v569 + 56);
            swift_bridgeObjectRetain(v542);
            swift_bridgeObjectRetain(v546);
            v547(v454, 0, 1, __dsta);
          }
          v548 = v573[17];
          v549 = (_QWORD *)((char *)a1 + v548);
          v550 = (_QWORD *)((char *)a2 + v548);
          *v549 = *v550;
          v551 = v550[1];
          v549[1] = v551;
          v552 = v573[18];
          v553 = (char *)a1 + v552;
          v554 = (char *)a2 + v552;
          v555 = *(_QWORD *)v554;
          v553[8] = v554[8];
          *(_QWORD *)v553 = v555;
          v556 = v573[19];
          v557 = (char *)a1 + v556;
          v558 = (char *)a2 + v556;
          v559 = *(_QWORD *)v558;
          v557[8] = v558[8];
          *(_QWORD *)v557 = v559;
          *((_BYTE *)a1 + v573[20]) = *((_BYTE *)a2 + v573[20]);
          *((_BYTE *)a1 + v573[21]) = *((_BYTE *)a2 + v573[21]);
          v560 = v573[22];
          v561 = (char *)a1 + v560;
          v562 = (char *)a2 + v560;
          v563 = type metadata accessor for TranscriptRequestInformation(0);
          v564 = *(_QWORD *)(v563 - 8);
          v565 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v564 + 48);
          swift_bridgeObjectRetain(v551);
          if (v565(v562, 1, v563))
          {
            v566 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2C40);
            memcpy(v561, v562, *(_QWORD *)(*(_QWORD *)(v566 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v564 + 16))(v561, v562, v563);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v564 + 56))(v561, 0, 1, v563);
          }
          v21 = a1;
          v22 = v575;
          v23 = 1;
        }
        else
        {
          if (EnumCaseMultiPayload)
          {
            memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
            goto LABEL_213;
          }
          *a1 = *a2;
          v20 = a2[1];
          a1[1] = v20;
          swift_bridgeObjectRetain(v20);
          v21 = a1;
          v22 = v18;
          v23 = 0;
        }
        swift_storeEnumTagMultiPayload(v21, v22, v23);
LABEL_213:
        v50 = a1;
        v51 = a3;
        v52 = 1;
LABEL_214:
        swift_storeEnumTagMultiPayload(v50, v51, v52);
        break;
      case 2u:
        v24 = type metadata accessor for DownloadButtonPresenter.Data(0);
        v25 = swift_getEnumCaseMultiPayload(a2, v24);
        if (v25 == 2)
        {
          v88 = *a2;
          *a1 = *a2;
          swift_retain(v88);
          v89 = a1;
          v90 = v24;
          v91 = 2;
        }
        else if (v25 == 1)
        {
          v574 = v24;
          v590 = a3;
          *a1 = *a2;
          a1[1] = a2[1];
          v26 = a2[2];
          a1[2] = v26;
          v27 = type metadata accessor for EpisodeOffer(0);
          v28 = *(int *)(v27 + 24);
          v29 = (char *)a1 + v28;
          v30 = (char *)a2 + v28;
          *(_QWORD *)v29 = *(_QWORD *)((char *)a2 + v28);
          *((_QWORD *)v29 + 1) = *(_QWORD *)((char *)a2 + v28 + 8);
          v31 = *(_QWORD *)((char *)a2 + v28 + 16);
          *((_QWORD *)v29 + 2) = v31;
          v29[24] = *((_BYTE *)a2 + v28 + 24);
          v581 = (int *)type metadata accessor for ShowOffer(0);
          v584 = v29;
          v32 = v581[7];
          v33 = &v29[v32];
          v34 = &v30[v32];
          v35 = type metadata accessor for ArtworkModel(0);
          v568 = *(_QWORD *)(v35 - 8);
          v36 = *(unsigned int (**)(_QWORD *, uint64_t, int *))(v568 + 48);
          swift_bridgeObjectRetain(v26);
          swift_bridgeObjectRetain(v31);
          __dst = (int *)v35;
          v570 = v36;
          v572 = (int *)v27;
          if (v36(v34, 1, (int *)v35))
          {
            v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
            memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
          }
          else
          {
            *(_QWORD *)v33 = *(_QWORD *)v34;
            v177 = *((_QWORD *)v34 + 1);
            *((_QWORD *)v33 + 1) = v177;
            v178 = v34[32];
            swift_bridgeObjectRetain(v177);
            if (v178 == 255)
            {
              v257 = *((_OWORD *)v34 + 1);
              v33[32] = v34[32];
              *((_OWORD *)v33 + 1) = v257;
            }
            else
            {
              v179 = *((_QWORD *)v34 + 2);
              v180 = *((_QWORD *)v34 + 3);
              sub_3D464(v179, v180, v178);
              *((_QWORD *)v33 + 2) = v179;
              *((_QWORD *)v33 + 3) = v180;
              v33[32] = v178;
            }
            *((_QWORD *)v33 + 5) = *((_QWORD *)v34 + 5);
            *((_QWORD *)v33 + 6) = *((_QWORD *)v34 + 6);
            v258 = (id *)(v34 + 56);
            v259 = v34[64];
            if (v259 == 255)
            {
              v265 = *v258;
              v33[64] = v34[64];
              *((_QWORD *)v33 + 7) = v265;
            }
            else
            {
              v260 = *v258;
              sub_3D47C(*v258, v34[64]);
              *((_QWORD *)v33 + 7) = v260;
              v33[64] = v259;
            }
            v266 = (id *)(v34 + 72);
            v267 = v34[80];
            if (v267 == 255)
            {
              v273 = *v266;
              v33[80] = v34[80];
              *((_QWORD *)v33 + 9) = v273;
            }
            else
            {
              v268 = *v266;
              sub_3D47C(*v266, v34[80]);
              *((_QWORD *)v33 + 9) = v268;
              v33[80] = v267;
            }
            v274 = (id *)(v34 + 88);
            v275 = v34[96];
            if (v275 == 255)
            {
              v281 = *v274;
              v33[96] = v34[96];
              *((_QWORD *)v33 + 11) = v281;
            }
            else
            {
              v276 = *v274;
              sub_3D47C(*v274, v34[96]);
              *((_QWORD *)v33 + 11) = v276;
              v33[96] = v275;
            }
            v282 = (id *)(v34 + 104);
            v283 = v34[112];
            if (v283 == 255)
            {
              v289 = *v282;
              v33[112] = v34[112];
              *((_QWORD *)v33 + 13) = v289;
            }
            else
            {
              v284 = *v282;
              sub_3D47C(*v282, v34[112]);
              *((_QWORD *)v33 + 13) = v284;
              v33[112] = v283;
            }
            v290 = (id *)(v34 + 120);
            v291 = v34[128];
            if (v291 == 255)
            {
              v297 = *v290;
              v33[128] = v34[128];
              *((_QWORD *)v33 + 15) = v297;
            }
            else
            {
              v292 = *v290;
              sub_3D47C(*v290, v34[128]);
              *((_QWORD *)v33 + 15) = v292;
              v33[128] = v291;
            }
            v33[129] = v34[129];
            v298 = __dst[11];
            v299 = &v33[v298];
            v300 = &v34[v298];
            v301 = type metadata accessor for ArtworkCrop(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v301 - 8) + 16))(v299, v300, v301);
            v302 = __dst[12];
            v303 = &v33[v302];
            v304 = &v34[v302];
            *(_QWORD *)v303 = *(_QWORD *)v304;
            v305 = *((_QWORD *)v304 + 1);
            *((_QWORD *)v303 + 1) = v305;
            v33[__dst[13]] = v34[__dst[13]];
            v33[__dst[14]] = v34[__dst[14]];
            v33[__dst[15]] = v34[__dst[15]];
            v306 = __dst[16];
            v307 = &v33[v306];
            v308 = &v34[v306];
            *(_QWORD *)v307 = *(_QWORD *)v308;
            v309 = *((_QWORD *)v308 + 1);
            *((_QWORD *)v307 + 1) = v309;
            v310 = *(void (**)(char *, _QWORD, uint64_t, int *))(v568 + 56);
            swift_bridgeObjectRetain(v305);
            swift_bridgeObjectRetain(v309);
            v310(v33, 0, 1, __dst);
          }
          v311 = v581[8];
          v312 = &v584[v311];
          v313 = &v30[v311];
          *(_QWORD *)v312 = *(_QWORD *)v313;
          v314 = *((_QWORD *)v313 + 1);
          *((_QWORD *)v312 + 1) = v314;
          v315 = v581[9];
          v316 = &v584[v315];
          v317 = &v30[v315];
          *(_QWORD *)v316 = *(_QWORD *)v317;
          v318 = *((_QWORD *)v317 + 1);
          *((_QWORD *)v316 + 1) = v318;
          v584[v581[10]] = v30[v581[10]];
          v319 = v581[11];
          v320 = &v584[v319];
          v321 = &v30[v319];
          *(_QWORD *)v320 = *(_QWORD *)v321;
          v322 = *((_QWORD *)v321 + 1);
          *((_QWORD *)v320 + 1) = v322;
          v323 = v581[12];
          v324 = &v584[v323];
          v325 = &v30[v323];
          *(_QWORD *)v324 = *(_QWORD *)v325;
          v326 = *((_QWORD *)v325 + 1);
          *((_QWORD *)v324 + 1) = v326;
          v327 = v581[13];
          v576 = &v584[v327];
          v328 = &v30[v327];
          v329 = type metadata accessor for URL(0);
          v330 = *(_QWORD *)(v329 - 8);
          v331 = v314;
          v332 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v330 + 48);
          swift_bridgeObjectRetain(v331);
          swift_bridgeObjectRetain(v318);
          swift_bridgeObjectRetain(v322);
          swift_bridgeObjectRetain(v326);
          v333 = v332;
          if (v332(v328, 1, v329))
          {
            v334 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
            memcpy(v576, v328, *(_QWORD *)(*(_QWORD *)(v334 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v330 + 16))(v576, v328, v329);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v330 + 56))(v576, 0, 1, v329);
          }
          v335 = v330;
          v336 = v581[14];
          v337 = &v584[v336];
          v338 = &v30[v336];
          *(_QWORD *)v337 = *(_QWORD *)v338;
          v339 = *((_QWORD *)v338 + 1);
          *((_QWORD *)v337 + 1) = v339;
          v340 = v581[15];
          v341 = &v584[v340];
          v342 = &v30[v340];
          *(_QWORD *)v341 = *(_QWORD *)v342;
          v343 = *((_QWORD *)v342 + 1);
          *((_QWORD *)v341 + 1) = v343;
          v344 = v581[16];
          v345 = &v584[v344];
          v346 = &v30[v344];
          swift_bridgeObjectRetain(v339);
          swift_bridgeObjectRetain(v343);
          if (v333(v346, 1, v329))
          {
            v347 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
            memcpy(v345, v346, *(_QWORD *)(*(_QWORD *)(v347 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v335 + 16))(v345, v346, v329);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v335 + 56))(v345, 0, 1, v329);
          }
          v348 = v581[17];
          v349 = &v584[v348];
          v350 = &v30[v348];
          if (v333(&v30[v348], 1, v329))
          {
            v351 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
            memcpy(v349, v350, *(_QWORD *)(*(_QWORD *)(v351 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v335 + 16))(v349, v350, v329);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v335 + 56))(v349, 0, 1, v329);
          }
          v584[v581[18]] = v30[v581[18]];
          v352 = v572[7];
          v353 = (char *)a1 + v352;
          v354 = (char *)a2 + v352;
          a3 = v590;
          if (v333((char *)a2 + v352, 1, v329))
          {
            v355 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
            memcpy(v353, v354, *(_QWORD *)(*(_QWORD *)(v355 - 8) + 64));
            (*(void (**)(char *, char *, uint64_t))(v335 + 16))((char *)a1 + v572[8], (char *)a2 + v572[8], v329);
          }
          else
          {
            v356 = *(void (**)(char *, char *, uint64_t))(v335 + 16);
            v356(v353, v354, v329);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v335 + 56))(v353, 0, 1, v329);
            v356((char *)a1 + v572[8], (char *)a2 + v572[8], v329);
          }
          *(_QWORD *)((char *)a1 + v572[9]) = *(_QWORD *)((char *)a2 + v572[9]);
          v357 = v572[10];
          v358 = (_QWORD *)((char *)a1 + v357);
          v359 = (_QWORD *)((char *)a2 + v357);
          *v358 = *v359;
          v360 = v359[1];
          v358[1] = v360;
          v361 = v572[11];
          v362 = (_QWORD *)((char *)a1 + v361);
          v363 = (_QWORD *)((char *)a2 + v361);
          *v362 = *v363;
          v364 = v363[1];
          v362[1] = v364;
          v365 = v572[12];
          v366 = *(_QWORD *)((char *)a2 + v365);
          *(_QWORD *)((char *)a1 + v365) = v366;
          *((_BYTE *)a1 + v572[13]) = *((_BYTE *)a2 + v572[13]);
          *((_BYTE *)a1 + v572[14]) = *((_BYTE *)a2 + v572[14]);
          v367 = v572[15];
          v368 = (char *)a1 + v367;
          v369 = (char *)a2 + v367;
          v370 = v369[8];
          *(_QWORD *)v368 = *(_QWORD *)v369;
          v368[8] = v370;
          v371 = v572[16];
          v372 = (_QWORD *)((char *)a1 + v371);
          v373 = (_QWORD *)((char *)a2 + v371);
          swift_bridgeObjectRetain(v360);
          swift_bridgeObjectRetain(v364);
          swift_retain(v366);
          if (v570(v373, 1, __dst))
          {
            v374 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
            memcpy(v372, v373, *(_QWORD *)(*(_QWORD *)(v374 - 8) + 64));
          }
          else
          {
            *v372 = *v373;
            v375 = v373[1];
            v372[1] = v375;
            v376 = *((unsigned __int8 *)v373 + 32);
            swift_bridgeObjectRetain(v375);
            if (v376 == 255)
            {
              v461 = *((_OWORD *)v373 + 1);
              *((_BYTE *)v372 + 32) = *((_BYTE *)v373 + 32);
              *((_OWORD *)v372 + 1) = v461;
            }
            else
            {
              v377 = v373[2];
              v378 = v373[3];
              sub_3D464(v377, v378, v376);
              v372[2] = v377;
              v372[3] = v378;
              *((_BYTE *)v372 + 32) = v376;
            }
            v372[5] = v373[5];
            v372[6] = v373[6];
            v462 = (id *)(v373 + 7);
            v463 = *((unsigned __int8 *)v373 + 64);
            if (v463 == 255)
            {
              v469 = *v462;
              *((_BYTE *)v372 + 64) = *((_BYTE *)v373 + 64);
              v372[7] = v469;
            }
            else
            {
              v464 = *v462;
              sub_3D47C(*v462, *((_BYTE *)v373 + 64));
              v372[7] = v464;
              *((_BYTE *)v372 + 64) = v463;
            }
            v470 = (id *)(v373 + 9);
            v471 = *((unsigned __int8 *)v373 + 80);
            if (v471 == 255)
            {
              v477 = *v470;
              *((_BYTE *)v372 + 80) = *((_BYTE *)v373 + 80);
              v372[9] = v477;
            }
            else
            {
              v472 = *v470;
              sub_3D47C(*v470, *((_BYTE *)v373 + 80));
              v372[9] = v472;
              *((_BYTE *)v372 + 80) = v471;
            }
            v478 = (id *)(v373 + 11);
            v479 = *((unsigned __int8 *)v373 + 96);
            if (v479 == 255)
            {
              v485 = *v478;
              *((_BYTE *)v372 + 96) = *((_BYTE *)v373 + 96);
              v372[11] = v485;
            }
            else
            {
              v480 = *v478;
              sub_3D47C(*v478, *((_BYTE *)v373 + 96));
              v372[11] = v480;
              *((_BYTE *)v372 + 96) = v479;
            }
            v486 = (id *)(v373 + 13);
            v487 = *((unsigned __int8 *)v373 + 112);
            if (v487 == 255)
            {
              v493 = *v486;
              *((_BYTE *)v372 + 112) = *((_BYTE *)v373 + 112);
              v372[13] = v493;
            }
            else
            {
              v488 = *v486;
              sub_3D47C(*v486, *((_BYTE *)v373 + 112));
              v372[13] = v488;
              *((_BYTE *)v372 + 112) = v487;
            }
            v494 = (id *)(v373 + 15);
            v495 = *((unsigned __int8 *)v373 + 128);
            if (v495 == 255)
            {
              v501 = *v494;
              *((_BYTE *)v372 + 128) = *((_BYTE *)v373 + 128);
              v372[15] = v501;
            }
            else
            {
              v496 = *v494;
              sub_3D47C(*v494, *((_BYTE *)v373 + 128));
              v372[15] = v496;
              *((_BYTE *)v372 + 128) = v495;
            }
            *((_BYTE *)v372 + 129) = *((_BYTE *)v373 + 129);
            v502 = __dst[11];
            v503 = (char *)v372 + v502;
            v504 = (char *)v373 + v502;
            v505 = type metadata accessor for ArtworkCrop(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v505 - 8) + 16))(v503, v504, v505);
            v506 = __dst[12];
            v507 = (_QWORD *)((char *)v372 + v506);
            v508 = (_QWORD *)((char *)v373 + v506);
            *v507 = *v508;
            v509 = v508[1];
            v507[1] = v509;
            *((_BYTE *)v372 + __dst[13]) = *((_BYTE *)v373 + __dst[13]);
            *((_BYTE *)v372 + __dst[14]) = *((_BYTE *)v373 + __dst[14]);
            *((_BYTE *)v372 + __dst[15]) = *((_BYTE *)v373 + __dst[15]);
            v510 = __dst[16];
            v511 = (_QWORD *)((char *)v372 + v510);
            v512 = (_QWORD *)((char *)v373 + v510);
            *v511 = *v512;
            v513 = v512[1];
            v511[1] = v513;
            v514 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v568 + 56);
            swift_bridgeObjectRetain(v509);
            swift_bridgeObjectRetain(v513);
            v514(v372, 0, 1, __dst);
          }
          v515 = v572[17];
          v516 = (_QWORD *)((char *)a1 + v515);
          v517 = (_QWORD *)((char *)a2 + v515);
          *v516 = *v517;
          v518 = v517[1];
          v516[1] = v518;
          v519 = v572[18];
          v520 = (char *)a1 + v519;
          v521 = (char *)a2 + v519;
          v522 = *(_QWORD *)v521;
          v520[8] = v521[8];
          *(_QWORD *)v520 = v522;
          v523 = v572[19];
          v524 = (char *)a1 + v523;
          v525 = (char *)a2 + v523;
          v526 = *(_QWORD *)v525;
          v524[8] = v525[8];
          *(_QWORD *)v524 = v526;
          *((_BYTE *)a1 + v572[20]) = *((_BYTE *)a2 + v572[20]);
          *((_BYTE *)a1 + v572[21]) = *((_BYTE *)a2 + v572[21]);
          v527 = v572[22];
          v528 = (char *)a1 + v527;
          v529 = (char *)a2 + v527;
          v530 = type metadata accessor for TranscriptRequestInformation(0);
          v531 = *(_QWORD *)(v530 - 8);
          v532 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v531 + 48);
          swift_bridgeObjectRetain(v518);
          if (v532(v529, 1, v530))
          {
            v533 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2C40);
            memcpy(v528, v529, *(_QWORD *)(*(_QWORD *)(v533 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v531 + 16))(v528, v529, v530);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v531 + 56))(v528, 0, 1, v530);
          }
          v89 = a1;
          v90 = v574;
          v91 = 1;
        }
        else
        {
          *a1 = *a2;
          v92 = a2[1];
          a1[1] = v92;
          swift_bridgeObjectRetain(v92);
          v89 = a1;
          v90 = v24;
          v91 = 0;
        }
        swift_storeEnumTagMultiPayload(v89, v90, v91);
        v50 = a1;
        v51 = a3;
        v52 = 2;
        goto LABEL_214;
      case 3u:
        v38 = type metadata accessor for FollowButtonPresenter.Data(0);
        v39 = swift_getEnumCaseMultiPayload(a2, v38);
        *a1 = *a2;
        if (v39 == 1)
        {
          v585 = v38;
          a1[1] = a2[1];
          v40 = a2[2];
          a1[2] = v40;
          *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
          v41 = (int *)type metadata accessor for ShowOffer(0);
          v42 = v41[7];
          v43 = (_QWORD *)((char *)a1 + v42);
          v44 = (_QWORD *)((char *)a2 + v42);
          v45 = (int *)type metadata accessor for ArtworkModel(0);
          v46 = *((_QWORD *)v45 - 1);
          v47 = *(unsigned int (**)(_QWORD *, uint64_t, int *))(v46 + 48);
          swift_bridgeObjectRetain(v40);
          v591 = a3;
          if (v47(v44, 1, v45))
          {
            v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
            memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
          }
          else
          {
            *v43 = *v44;
            v93 = v44[1];
            v43[1] = v93;
            v94 = *((unsigned __int8 *)v44 + 32);
            swift_bridgeObjectRetain(v93);
            if (v94 == 255)
            {
              v185 = *((_OWORD *)v44 + 1);
              *((_BYTE *)v43 + 32) = *((_BYTE *)v44 + 32);
              *((_OWORD *)v43 + 1) = v185;
            }
            else
            {
              v96 = v44[2];
              v95 = v44[3];
              sub_3D464(v96, v95, v94);
              v43[2] = v96;
              v43[3] = v95;
              *((_BYTE *)v43 + 32) = v94;
            }
            v43[5] = v44[5];
            v43[6] = v44[6];
            v186 = (id *)(v44 + 7);
            v187 = *((unsigned __int8 *)v44 + 64);
            if (v187 == 255)
            {
              v189 = *v186;
              *((_BYTE *)v43 + 64) = *((_BYTE *)v44 + 64);
              v43[7] = v189;
            }
            else
            {
              v188 = *v186;
              sub_3D47C(*v186, *((_BYTE *)v44 + 64));
              v43[7] = v188;
              *((_BYTE *)v43 + 64) = v187;
            }
            v190 = (id *)(v44 + 9);
            v191 = *((unsigned __int8 *)v44 + 80);
            if (v191 == 255)
            {
              v193 = *v190;
              *((_BYTE *)v43 + 80) = *((_BYTE *)v44 + 80);
              v43[9] = v193;
            }
            else
            {
              v192 = *v190;
              sub_3D47C(*v190, *((_BYTE *)v44 + 80));
              v43[9] = v192;
              *((_BYTE *)v43 + 80) = v191;
            }
            v194 = (id *)(v44 + 11);
            v195 = *((unsigned __int8 *)v44 + 96);
            if (v195 == 255)
            {
              v197 = *v194;
              *((_BYTE *)v43 + 96) = *((_BYTE *)v44 + 96);
              v43[11] = v197;
            }
            else
            {
              v196 = *v194;
              sub_3D47C(*v194, *((_BYTE *)v44 + 96));
              v43[11] = v196;
              *((_BYTE *)v43 + 96) = v195;
            }
            v198 = (id *)(v44 + 13);
            v199 = *((unsigned __int8 *)v44 + 112);
            if (v199 == 255)
            {
              v201 = *v198;
              *((_BYTE *)v43 + 112) = *((_BYTE *)v44 + 112);
              v43[13] = v201;
            }
            else
            {
              v200 = *v198;
              sub_3D47C(*v198, *((_BYTE *)v44 + 112));
              v43[13] = v200;
              *((_BYTE *)v43 + 112) = v199;
            }
            v202 = (id *)(v44 + 15);
            v203 = *((unsigned __int8 *)v44 + 128);
            if (v203 == 255)
            {
              v205 = *v202;
              *((_BYTE *)v43 + 128) = *((_BYTE *)v44 + 128);
              v43[15] = v205;
            }
            else
            {
              v204 = *v202;
              sub_3D47C(*v202, *((_BYTE *)v44 + 128));
              v43[15] = v204;
              *((_BYTE *)v43 + 128) = v203;
            }
            *((_BYTE *)v43 + 129) = *((_BYTE *)v44 + 129);
            v206 = v45[11];
            v207 = (char *)v43 + v206;
            v208 = (char *)v44 + v206;
            v209 = type metadata accessor for ArtworkCrop(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v209 - 8) + 16))(v207, v208, v209);
            v210 = v45[12];
            v211 = (_QWORD *)((char *)v43 + v210);
            v212 = (_QWORD *)((char *)v44 + v210);
            *v211 = *v212;
            v213 = v212[1];
            v211[1] = v213;
            *((_BYTE *)v43 + v45[13]) = *((_BYTE *)v44 + v45[13]);
            *((_BYTE *)v43 + v45[14]) = *((_BYTE *)v44 + v45[14]);
            *((_BYTE *)v43 + v45[15]) = *((_BYTE *)v44 + v45[15]);
            v214 = v45[16];
            v215 = (_QWORD *)((char *)v43 + v214);
            v216 = (_QWORD *)((char *)v44 + v214);
            *v215 = *v216;
            v217 = v216[1];
            v215[1] = v217;
            v218 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v46 + 56);
            swift_bridgeObjectRetain(v213);
            swift_bridgeObjectRetain(v217);
            v218(v43, 0, 1, v45);
          }
          v219 = v41[8];
          v220 = (_QWORD *)((char *)a1 + v219);
          v221 = (_QWORD *)((char *)a2 + v219);
          *v220 = *v221;
          v222 = v221[1];
          v220[1] = v222;
          v223 = v41[9];
          v224 = (_QWORD *)((char *)a1 + v223);
          v225 = (_QWORD *)((char *)a2 + v223);
          *v224 = *v225;
          v226 = v225[1];
          v224[1] = v226;
          *((_BYTE *)a1 + v41[10]) = *((_BYTE *)a2 + v41[10]);
          v227 = v41[11];
          v228 = (_QWORD *)((char *)a1 + v227);
          v229 = (_QWORD *)((char *)a2 + v227);
          *v228 = *v229;
          v230 = v229[1];
          v228[1] = v230;
          v231 = v41[12];
          v232 = (_QWORD *)((char *)a1 + v231);
          v233 = (_QWORD *)((char *)a2 + v231);
          *v232 = *v233;
          v234 = v233[1];
          v232[1] = v234;
          v235 = v41[13];
          __dstb = (char *)a1 + v235;
          v583 = v41;
          v236 = (char *)a2 + v235;
          v237 = type metadata accessor for URL(0);
          v238 = *(_QWORD *)(v237 - 8);
          v239 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v238 + 48);
          swift_bridgeObjectRetain(v222);
          swift_bridgeObjectRetain(v226);
          swift_bridgeObjectRetain(v230);
          swift_bridgeObjectRetain(v234);
          if (v239(v236, 1, v237))
          {
            v240 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
            memcpy(__dstb, v236, *(_QWORD *)(*(_QWORD *)(v240 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v238 + 16))(__dstb, v236, v237);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v238 + 56))(__dstb, 0, 1, v237);
          }
          a3 = v591;
          v241 = v583[14];
          v242 = (_QWORD *)((char *)a1 + v241);
          v243 = (_QWORD *)((char *)a2 + v241);
          *v242 = *v243;
          v244 = v243[1];
          v242[1] = v244;
          v245 = v583[15];
          v246 = (_QWORD *)((char *)a1 + v245);
          v247 = (_QWORD *)((char *)a2 + v245);
          *v246 = *v247;
          v248 = v247[1];
          v246[1] = v248;
          v249 = v583[16];
          v250 = (char *)a1 + v249;
          v251 = (char *)a2 + v249;
          swift_bridgeObjectRetain(v244);
          swift_bridgeObjectRetain(v248);
          if (v239(v251, 1, v237))
          {
            v252 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
            memcpy(v250, v251, *(_QWORD *)(*(_QWORD *)(v252 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v238 + 16))(v250, v251, v237);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v238 + 56))(v250, 0, 1, v237);
          }
          v38 = v585;
          v253 = v583[17];
          v254 = (char *)a1 + v253;
          v255 = (char *)a2 + v253;
          if (v239((char *)a2 + v253, 1, v237))
          {
            v256 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
            memcpy(v254, v255, *(_QWORD *)(*(_QWORD *)(v256 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v238 + 16))(v254, v255, v237);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v238 + 56))(v254, 0, 1, v237);
          }
          *((_BYTE *)a1 + v583[18]) = *((_BYTE *)a2 + v583[18]);
          v67 = 1;
        }
        else
        {
          v66 = a2[1];
          a1[1] = v66;
          swift_bridgeObjectRetain(v66);
          v67 = 0;
        }
        swift_storeEnumTagMultiPayload(a1, v38, v67);
        v50 = a1;
        v51 = a3;
        v52 = 3;
        goto LABEL_214;
      case 4u:
        v49 = a2[1];
        *a1 = *a2;
        a1[1] = v49;
        swift_retain(v49);
        v50 = a1;
        v51 = a3;
        v52 = 4;
        goto LABEL_214;
      case 5u:
        v53 = a2[3];
        a1[3] = v53;
        a1[4] = a2[4];
        (**(void (***)(_QWORD *, _QWORD *))(v53 - 8))(a1, a2);
        v50 = a1;
        v51 = a3;
        v52 = 5;
        goto LABEL_214;
      case 6u:
        v592 = a3;
        *a1 = *a2;
        v54 = a2[1];
        a1[1] = v54;
        a1[2] = a2[2];
        v55 = a2[3];
        a1[3] = v55;
        a1[4] = a2[4];
        v56 = a2[5];
        a1[5] = v56;
        v586 = type metadata accessor for ActionMenu(0);
        v57 = *(int *)(v586 + 28);
        v58 = (_QWORD *)((char *)a1 + v57);
        v59 = (_QWORD *)((char *)a2 + v57);
        v60 = (int *)type metadata accessor for ArtworkModel(0);
        v61 = *((_QWORD *)v60 - 1);
        v62 = *(unsigned int (**)(_QWORD *, uint64_t, int *))(v61 + 48);
        swift_bridgeObjectRetain(v54);
        swift_bridgeObjectRetain(v55);
        swift_bridgeObjectRetain(v56);
        if (v62(v59, 1, v60))
        {
          v63 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
          memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
          v64 = v586;
          v65 = v592;
        }
        else
        {
          *v58 = *v59;
          v72 = v59[1];
          v58[1] = v72;
          v73 = *((unsigned __int8 *)v59 + 32);
          swift_bridgeObjectRetain(v72);
          if (v73 == 255)
          {
            v101 = *((_OWORD *)v59 + 1);
            *((_BYTE *)v58 + 32) = *((_BYTE *)v59 + 32);
            *((_OWORD *)v58 + 1) = v101;
          }
          else
          {
            v74 = v59[2];
            v75 = v59[3];
            sub_3D464(v74, v75, v73);
            v58[2] = v74;
            v58[3] = v75;
            *((_BYTE *)v58 + 32) = v73;
          }
          v64 = v586;
          v65 = v592;
          v58[5] = v59[5];
          v58[6] = v59[6];
          v102 = (id *)(v59 + 7);
          v103 = *((unsigned __int8 *)v59 + 64);
          if (v103 == 255)
          {
            v109 = *v102;
            *((_BYTE *)v58 + 64) = *((_BYTE *)v59 + 64);
            v58[7] = v109;
          }
          else
          {
            v104 = *v102;
            sub_3D47C(*v102, *((_BYTE *)v59 + 64));
            v58[7] = v104;
            *((_BYTE *)v58 + 64) = v103;
          }
          v110 = (id *)(v59 + 9);
          v111 = *((unsigned __int8 *)v59 + 80);
          if (v111 == 255)
          {
            v117 = *v110;
            *((_BYTE *)v58 + 80) = *((_BYTE *)v59 + 80);
            v58[9] = v117;
          }
          else
          {
            v112 = *v110;
            sub_3D47C(*v110, *((_BYTE *)v59 + 80));
            v58[9] = v112;
            *((_BYTE *)v58 + 80) = v111;
          }
          v118 = (id *)(v59 + 11);
          v119 = *((unsigned __int8 *)v59 + 96);
          if (v119 == 255)
          {
            v125 = *v118;
            *((_BYTE *)v58 + 96) = *((_BYTE *)v59 + 96);
            v58[11] = v125;
          }
          else
          {
            v120 = *v118;
            sub_3D47C(*v118, *((_BYTE *)v59 + 96));
            v58[11] = v120;
            *((_BYTE *)v58 + 96) = v119;
          }
          v126 = (id *)(v59 + 13);
          v127 = *((unsigned __int8 *)v59 + 112);
          if (v127 == 255)
          {
            v133 = *v126;
            *((_BYTE *)v58 + 112) = *((_BYTE *)v59 + 112);
            v58[13] = v133;
          }
          else
          {
            v128 = *v126;
            sub_3D47C(*v126, *((_BYTE *)v59 + 112));
            v58[13] = v128;
            *((_BYTE *)v58 + 112) = v127;
          }
          v134 = (id *)(v59 + 15);
          v135 = *((unsigned __int8 *)v59 + 128);
          if (v135 == 255)
          {
            v160 = *v134;
            *((_BYTE *)v58 + 128) = *((_BYTE *)v59 + 128);
            v58[15] = v160;
          }
          else
          {
            v136 = *v134;
            sub_3D47C(*v134, *((_BYTE *)v59 + 128));
            v58[15] = v136;
            *((_BYTE *)v58 + 128) = v135;
          }
          *((_BYTE *)v58 + 129) = *((_BYTE *)v59 + 129);
          v161 = v60[11];
          v162 = (char *)v58 + v161;
          v163 = (char *)v59 + v161;
          v164 = type metadata accessor for ArtworkCrop(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v164 - 8) + 16))(v162, v163, v164);
          v165 = v60[12];
          v166 = (_QWORD *)((char *)v58 + v165);
          v167 = (_QWORD *)((char *)v59 + v165);
          *v166 = *v167;
          v168 = v167[1];
          v166[1] = v168;
          *((_BYTE *)v58 + v60[13]) = *((_BYTE *)v59 + v60[13]);
          *((_BYTE *)v58 + v60[14]) = *((_BYTE *)v59 + v60[14]);
          *((_BYTE *)v58 + v60[15]) = *((_BYTE *)v59 + v60[15]);
          v169 = v60[16];
          v170 = (_QWORD *)((char *)v58 + v169);
          v171 = (_QWORD *)((char *)v59 + v169);
          *v170 = *v171;
          v172 = v171[1];
          v170[1] = v172;
          v173 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v61 + 56);
          swift_bridgeObjectRetain(v168);
          swift_bridgeObjectRetain(v172);
          v173(v58, 0, 1, v60);
        }
        v174 = *(int *)(v64 + 32);
        v175 = *(_QWORD *)((char *)a2 + v174);
        *(_QWORD *)((char *)a1 + v174) = v175;
        swift_bridgeObjectRetain(v175);
        v176 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B27F8);
        *((_BYTE *)a1 + *(int *)(v176 + 48)) = *((_BYTE *)a2 + *(int *)(v176 + 48));
        v50 = a1;
        v51 = v65;
        v52 = 6;
        goto LABEL_214;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        return a1;
    }
  }
  return a1;
}

_OWORD *initializeWithTake for HeaderButtonItem(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v3;
  __int128 v6;
  int *v7;
  uint64_t v8;
  _OWORD *v9;
  _OWORD *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  int *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  int *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  int *v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  uint64_t v38;
  _OWORD *v39;
  _OWORD *v40;
  int *v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  _OWORD *v47;
  _OWORD *v48;
  int *v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  __int128 v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _OWORD *v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  unsigned int (*v99)(char *, uint64_t, uint64_t);
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  unsigned int (*v104)(char *, uint64_t, uint64_t);
  uint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  void (*v122)(char *, char *, uint64_t);
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  _OWORD *v127;
  _OWORD *v128;
  uint64_t v129;
  void (*v130)(char *, char *, uint64_t);
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  _OWORD *v135;
  _OWORD *v136;
  uint64_t v137;
  __int128 v138;
  uint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  char *v145;
  uint64_t v146;
  char *v147;
  char *v148;
  uint64_t v149;
  char *v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  __int128 v155;
  uint64_t v156;
  char *v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  char *v162;
  uint64_t v163;
  char *v164;
  char *v165;
  uint64_t v166;
  char *v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  __int128 v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  char *v176;
  uint64_t v177;
  char *v178;
  uint64_t v179;
  char *v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  unsigned int (*v184)(char *, uint64_t, uint64_t);
  uint64_t v185;
  uint64_t v186;
  char *v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  char *v192;
  uint64_t v193;
  uint64_t v195;
  uint64_t v196;
  unsigned int (*v197)(char *, uint64_t, int *);
  unsigned int (*v198)(char *, uint64_t, int *);
  int *v199;
  int *v200;
  uint64_t v201;
  uint64_t v202;
  unsigned int (*v203)(char *, uint64_t, uint64_t);
  unsigned int (*v204)(char *, uint64_t, uint64_t);
  char *v205;
  uint64_t v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;

  v3 = a3;
  switch(swift_getEnumCaseMultiPayload(a2, a3))
  {
    case 0u:
      v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      v7 = (int *)type metadata accessor for ActionButton(0);
      v8 = v7[6];
      v9 = (_OWORD *)((char *)a1 + v8);
      v10 = (_OWORD *)((char *)a2 + v8);
      v11 = (int *)type metadata accessor for ArtworkModel(0);
      v12 = *((_QWORD *)v11 - 1);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
      {
        v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
        memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
      }
      else
      {
        v52 = v10[1];
        *v9 = *v10;
        v9[1] = v52;
        *((_BYTE *)v9 + 32) = *((_BYTE *)v10 + 32);
        *(_OWORD *)((char *)v9 + 40) = *(_OWORD *)((char *)v10 + 40);
        *((_QWORD *)v9 + 7) = *((_QWORD *)v10 + 7);
        *((_BYTE *)v9 + 64) = *((_BYTE *)v10 + 64);
        *(_OWORD *)((char *)v9 + 113) = *(_OWORD *)((char *)v10 + 113);
        *(_OWORD *)((char *)v9 + 104) = *(_OWORD *)((char *)v10 + 104);
        *(_OWORD *)((char *)v9 + 88) = *(_OWORD *)((char *)v10 + 88);
        *(_OWORD *)((char *)v9 + 72) = *(_OWORD *)((char *)v10 + 72);
        *((_BYTE *)v9 + 129) = *((_BYTE *)v10 + 129);
        v53 = v11[11];
        v54 = (char *)v9 + v53;
        v55 = (char *)v10 + v53;
        v56 = type metadata accessor for ArtworkCrop(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v56 - 8) + 32))(v54, v55, v56);
        *(_OWORD *)((char *)v9 + v11[12]) = *(_OWORD *)((char *)v10 + v11[12]);
        *((_BYTE *)v9 + v11[13]) = *((_BYTE *)v10 + v11[13]);
        *((_BYTE *)v9 + v11[14]) = *((_BYTE *)v10 + v11[14]);
        *((_BYTE *)v9 + v11[15]) = *((_BYTE *)v10 + v11[15]);
        *(_OWORD *)((char *)v9 + v11[16]) = *(_OWORD *)((char *)v10 + v11[16]);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
      }
      *((_BYTE *)a1 + v7[7]) = *((_BYTE *)a2 + v7[7]);
      v57 = v7[8];
      v58 = (char *)a1 + v57;
      v59 = (char *)a2 + v57;
      v60 = *((_OWORD *)v59 + 1);
      *(_OWORD *)v58 = *(_OWORD *)v59;
      *((_OWORD *)v58 + 1) = v60;
      *((_QWORD *)v58 + 4) = *((_QWORD *)v59 + 4);
      v61 = v7[9];
      v62 = (char *)a1 + v61;
      v63 = (char *)a2 + v61;
      v64 = type metadata accessor for ImpressionMetrics(0);
      v65 = *(_QWORD *)(v64 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v65 + 48))(v63, 1, v64))
      {
        v66 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
        memcpy(v62, v63, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v65 + 32))(v62, v63, v64);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v65 + 56))(v62, 0, 1, v64);
      }
      v67 = a1;
      v68 = v3;
      v69 = 0;
      goto LABEL_80;
    case 1u:
      v14 = type metadata accessor for BookmarkButtonPresenter.Data(0);
      if (swift_getEnumCaseMultiPayload(a2, v14) == 1)
      {
        v201 = v14;
        v209 = v3;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_OWORD *)((char *)a1 + 8) = *(_OWORD *)((char *)a2 + 8);
        v15 = (int *)type metadata accessor for EpisodeOffer(0);
        v16 = v15[6];
        v17 = (char *)a1 + v16;
        v18 = (char *)a2 + v16;
        *(_QWORD *)v17 = *(_QWORD *)((char *)a2 + v16);
        *(_OWORD *)(v17 + 8) = *(_OWORD *)((char *)a2 + v16 + 8);
        v17[24] = *((_BYTE *)a2 + v16 + 24);
        v19 = (int *)type metadata accessor for ShowOffer(0);
        v20 = v19[7];
        v21 = &v17[v20];
        v22 = &v18[v20];
        v23 = (int *)type metadata accessor for ArtworkModel(0);
        v197 = *(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v23 - 1) + 48);
        v199 = v23;
        v195 = *((_QWORD *)v23 - 1);
        if (v197(v22, 1, v23))
        {
          v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
          memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
        }
        else
        {
          v76 = *((_OWORD *)v22 + 1);
          *(_OWORD *)v21 = *(_OWORD *)v22;
          *((_OWORD *)v21 + 1) = v76;
          v21[32] = v22[32];
          *(_OWORD *)(v21 + 40) = *(_OWORD *)(v22 + 40);
          *((_QWORD *)v21 + 7) = *((_QWORD *)v22 + 7);
          v21[64] = v22[64];
          *(_OWORD *)(v21 + 113) = *(_OWORD *)(v22 + 113);
          *(_OWORD *)(v21 + 104) = *(_OWORD *)(v22 + 104);
          *(_OWORD *)(v21 + 88) = *(_OWORD *)(v22 + 88);
          *(_OWORD *)(v21 + 72) = *(_OWORD *)(v22 + 72);
          v21[129] = v22[129];
          v77 = v23[11];
          v78 = &v21[v77];
          v205 = &v22[v77];
          v79 = type metadata accessor for ArtworkCrop(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v79 - 8) + 32))(v78, v205, v79);
          *(_OWORD *)&v21[v23[12]] = *(_OWORD *)&v22[v23[12]];
          v21[v23[13]] = v22[v23[13]];
          v21[v23[14]] = v22[v23[14]];
          v21[v23[15]] = v22[v23[15]];
          *(_OWORD *)&v21[v23[16]] = *(_OWORD *)&v22[v23[16]];
          (*(void (**)(char *, _QWORD, uint64_t, int *))(v195 + 56))(v21, 0, 1, v23);
        }
        *(_OWORD *)&v17[v19[8]] = *(_OWORD *)&v18[v19[8]];
        *(_OWORD *)&v17[v19[9]] = *(_OWORD *)&v18[v19[9]];
        v17[v19[10]] = v18[v19[10]];
        *(_OWORD *)&v17[v19[11]] = *(_OWORD *)&v18[v19[11]];
        *(_OWORD *)&v17[v19[12]] = *(_OWORD *)&v18[v19[12]];
        v80 = v19[13];
        v81 = &v17[v80];
        v82 = &v18[v80];
        v83 = type metadata accessor for URL(0);
        v84 = *(_QWORD *)(v83 - 8);
        v203 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v84 + 48);
        v206 = v84;
        if (v203(v82, 1, v83))
        {
          v85 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
          memcpy(v81, v82, *(_QWORD *)(*(_QWORD *)(v85 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v84 + 32))(v81, v82, v83);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v84 + 56))(v81, 0, 1, v83);
        }
        *(_OWORD *)&v17[v19[14]] = *(_OWORD *)&v18[v19[14]];
        *(_OWORD *)&v17[v19[15]] = *(_OWORD *)&v18[v19[15]];
        v96 = v19[16];
        v97 = &v17[v96];
        v98 = &v18[v96];
        v99 = v203;
        if (v203(&v18[v96], 1, v83))
        {
          v100 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
          memcpy(v97, v98, *(_QWORD *)(*(_QWORD *)(v100 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v206 + 32))(v97, v98, v83);
          v99 = v203;
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v206 + 56))(v97, 0, 1, v83);
        }
        v106 = v19[17];
        v107 = &v17[v106];
        v108 = &v18[v106];
        if (v99(&v18[v106], 1, v83))
        {
          v109 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
          memcpy(v107, v108, *(_QWORD *)(*(_QWORD *)(v109 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v206 + 32))(v107, v108, v83);
          v99 = v203;
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v206 + 56))(v107, 0, 1, v83);
        }
        v17[v19[18]] = v18[v19[18]];
        v114 = v15[7];
        v115 = (char *)a1 + v114;
        v116 = (char *)a2 + v114;
        v3 = v209;
        if (v99((char *)a2 + v114, 1, v83))
        {
          v117 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
          memcpy(v115, v116, *(_QWORD *)(*(_QWORD *)(v117 - 8) + 64));
          (*(void (**)(char *, char *, uint64_t))(v206 + 32))((char *)a1 + v15[8], (char *)a2 + v15[8], v83);
        }
        else
        {
          v122 = *(void (**)(char *, char *, uint64_t))(v206 + 32);
          v122(v115, v116, v83);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v206 + 56))(v115, 0, 1, v83);
          v122((char *)a1 + v15[8], (char *)a2 + v15[8], v83);
        }
        *(_QWORD *)((char *)a1 + v15[9]) = *(_QWORD *)((char *)a2 + v15[9]);
        *(_OWORD *)((char *)a1 + v15[10]) = *(_OWORD *)((char *)a2 + v15[10]);
        *(_OWORD *)((char *)a1 + v15[11]) = *(_OWORD *)((char *)a2 + v15[11]);
        *(_QWORD *)((char *)a1 + v15[12]) = *(_QWORD *)((char *)a2 + v15[12]);
        *((_BYTE *)a1 + v15[13]) = *((_BYTE *)a2 + v15[13]);
        *((_BYTE *)a1 + v15[14]) = *((_BYTE *)a2 + v15[14]);
        v123 = v15[15];
        v124 = (char *)a1 + v123;
        v125 = (char *)a2 + v123;
        *(_QWORD *)v124 = *(_QWORD *)v125;
        v124[8] = v125[8];
        v126 = v15[16];
        v127 = (_OWORD *)((char *)a1 + v126);
        v128 = (_OWORD *)((char *)a2 + v126);
        if (v197((char *)a2 + v126, 1, v199))
        {
          v129 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
          memcpy(v127, v128, *(_QWORD *)(*(_QWORD *)(v129 - 8) + 64));
        }
        else
        {
          v138 = v128[1];
          *v127 = *v128;
          v127[1] = v138;
          *((_BYTE *)v127 + 32) = *((_BYTE *)v128 + 32);
          *(_OWORD *)((char *)v127 + 40) = *(_OWORD *)((char *)v128 + 40);
          *((_QWORD *)v127 + 7) = *((_QWORD *)v128 + 7);
          *((_BYTE *)v127 + 64) = *((_BYTE *)v128 + 64);
          *(_OWORD *)((char *)v127 + 113) = *(_OWORD *)((char *)v128 + 113);
          *(_OWORD *)((char *)v127 + 104) = *(_OWORD *)((char *)v128 + 104);
          *(_OWORD *)((char *)v127 + 88) = *(_OWORD *)((char *)v128 + 88);
          *(_OWORD *)((char *)v127 + 72) = *(_OWORD *)((char *)v128 + 72);
          *((_BYTE *)v127 + 129) = *((_BYTE *)v128 + 129);
          v139 = v199[11];
          v140 = (char *)v127 + v139;
          v141 = (char *)v128 + v139;
          v142 = type metadata accessor for ArtworkCrop(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v142 - 8) + 32))(v140, v141, v142);
          *(_OWORD *)((char *)v127 + v199[12]) = *(_OWORD *)((char *)v128 + v199[12]);
          *((_BYTE *)v127 + v199[13]) = *((_BYTE *)v128 + v199[13]);
          *((_BYTE *)v127 + v199[14]) = *((_BYTE *)v128 + v199[14]);
          *((_BYTE *)v127 + v199[15]) = *((_BYTE *)v128 + v199[15]);
          *(_OWORD *)((char *)v127 + v199[16]) = *(_OWORD *)((char *)v128 + v199[16]);
          (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v195 + 56))(v127, 0, 1, v199);
        }
        *(_OWORD *)((char *)a1 + v15[17]) = *(_OWORD *)((char *)a2 + v15[17]);
        v143 = v15[18];
        v144 = (char *)a1 + v143;
        v145 = (char *)a2 + v143;
        v144[8] = v145[8];
        *(_QWORD *)v144 = *(_QWORD *)v145;
        v146 = v15[19];
        v147 = (char *)a1 + v146;
        v148 = (char *)a2 + v146;
        *(_QWORD *)v147 = *(_QWORD *)v148;
        v147[8] = v148[8];
        *((_BYTE *)a1 + v15[20]) = *((_BYTE *)a2 + v15[20]);
        *((_BYTE *)a1 + v15[21]) = *((_BYTE *)a2 + v15[21]);
        v149 = v15[22];
        v150 = (char *)a1 + v149;
        v151 = (char *)a2 + v149;
        v152 = type metadata accessor for TranscriptRequestInformation(0);
        v153 = *(_QWORD *)(v152 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v153 + 48))(v151, 1, v152))
        {
          v154 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2C40);
          memcpy(v150, v151, *(_QWORD *)(*(_QWORD *)(v154 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v153 + 32))(v150, v151, v152);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v153 + 56))(v150, 0, 1, v152);
        }
        swift_storeEnumTagMultiPayload(a1, v201, 1);
      }
      else
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
      }
      v67 = a1;
      v68 = v3;
      v69 = 1;
      goto LABEL_80;
    case 2u:
      v25 = type metadata accessor for DownloadButtonPresenter.Data(0);
      if (swift_getEnumCaseMultiPayload(a2, v25) == 1)
      {
        v202 = v25;
        v210 = v3;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_OWORD *)((char *)a1 + 8) = *(_OWORD *)((char *)a2 + 8);
        v26 = (int *)type metadata accessor for EpisodeOffer(0);
        v27 = v26[6];
        v28 = (char *)a1 + v27;
        v29 = (char *)a2 + v27;
        *(_QWORD *)v28 = *(_QWORD *)((char *)a2 + v27);
        *(_OWORD *)(v28 + 8) = *(_OWORD *)((char *)a2 + v27 + 8);
        v28[24] = *((_BYTE *)a2 + v27 + 24);
        v30 = (int *)type metadata accessor for ShowOffer(0);
        v31 = v30[7];
        v32 = &v28[v31];
        v33 = &v29[v31];
        v34 = (int *)type metadata accessor for ArtworkModel(0);
        v198 = *(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v34 - 1) + 48);
        v200 = v34;
        v196 = *((_QWORD *)v34 - 1);
        if (v198(v33, 1, v34))
        {
          v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
          memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
        }
        else
        {
          v86 = *((_OWORD *)v33 + 1);
          *(_OWORD *)v32 = *(_OWORD *)v33;
          *((_OWORD *)v32 + 1) = v86;
          v32[32] = v33[32];
          *(_OWORD *)(v32 + 40) = *(_OWORD *)(v33 + 40);
          *((_QWORD *)v32 + 7) = *((_QWORD *)v33 + 7);
          v32[64] = v33[64];
          *(_OWORD *)(v32 + 113) = *(_OWORD *)(v33 + 113);
          *(_OWORD *)(v32 + 104) = *(_OWORD *)(v33 + 104);
          *(_OWORD *)(v32 + 88) = *(_OWORD *)(v33 + 88);
          *(_OWORD *)(v32 + 72) = *(_OWORD *)(v33 + 72);
          v32[129] = v33[129];
          v87 = v34[11];
          v88 = &v32[v87];
          v207 = &v33[v87];
          v89 = type metadata accessor for ArtworkCrop(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v89 - 8) + 32))(v88, v207, v89);
          *(_OWORD *)&v32[v34[12]] = *(_OWORD *)&v33[v34[12]];
          v32[v34[13]] = v33[v34[13]];
          v32[v34[14]] = v33[v34[14]];
          v32[v34[15]] = v33[v34[15]];
          *(_OWORD *)&v32[v34[16]] = *(_OWORD *)&v33[v34[16]];
          (*(void (**)(char *, _QWORD, uint64_t, int *))(v196 + 56))(v32, 0, 1, v34);
        }
        *(_OWORD *)&v28[v30[8]] = *(_OWORD *)&v29[v30[8]];
        *(_OWORD *)&v28[v30[9]] = *(_OWORD *)&v29[v30[9]];
        v28[v30[10]] = v29[v30[10]];
        *(_OWORD *)&v28[v30[11]] = *(_OWORD *)&v29[v30[11]];
        *(_OWORD *)&v28[v30[12]] = *(_OWORD *)&v29[v30[12]];
        v90 = v30[13];
        v91 = &v28[v90];
        v92 = &v29[v90];
        v93 = type metadata accessor for URL(0);
        v94 = *(_QWORD *)(v93 - 8);
        v204 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v94 + 48);
        v208 = v94;
        if (v204(v92, 1, v93))
        {
          v95 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
          memcpy(v91, v92, *(_QWORD *)(*(_QWORD *)(v95 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v94 + 32))(v91, v92, v93);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v94 + 56))(v91, 0, 1, v93);
        }
        *(_OWORD *)&v28[v30[14]] = *(_OWORD *)&v29[v30[14]];
        *(_OWORD *)&v28[v30[15]] = *(_OWORD *)&v29[v30[15]];
        v101 = v30[16];
        v102 = &v28[v101];
        v103 = &v29[v101];
        v104 = v204;
        if (v204(&v29[v101], 1, v93))
        {
          v105 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
          memcpy(v102, v103, *(_QWORD *)(*(_QWORD *)(v105 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v208 + 32))(v102, v103, v93);
          v104 = v204;
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v208 + 56))(v102, 0, 1, v93);
        }
        v110 = v30[17];
        v111 = &v28[v110];
        v112 = &v29[v110];
        if (v104(&v29[v110], 1, v93))
        {
          v113 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
          memcpy(v111, v112, *(_QWORD *)(*(_QWORD *)(v113 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v208 + 32))(v111, v112, v93);
          v104 = v204;
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v208 + 56))(v111, 0, 1, v93);
        }
        v28[v30[18]] = v29[v30[18]];
        v118 = v26[7];
        v119 = (char *)a1 + v118;
        v120 = (char *)a2 + v118;
        v3 = v210;
        if (v104((char *)a2 + v118, 1, v93))
        {
          v121 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
          memcpy(v119, v120, *(_QWORD *)(*(_QWORD *)(v121 - 8) + 64));
          (*(void (**)(char *, char *, uint64_t))(v208 + 32))((char *)a1 + v26[8], (char *)a2 + v26[8], v93);
        }
        else
        {
          v130 = *(void (**)(char *, char *, uint64_t))(v208 + 32);
          v130(v119, v120, v93);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v208 + 56))(v119, 0, 1, v93);
          v130((char *)a1 + v26[8], (char *)a2 + v26[8], v93);
        }
        *(_QWORD *)((char *)a1 + v26[9]) = *(_QWORD *)((char *)a2 + v26[9]);
        *(_OWORD *)((char *)a1 + v26[10]) = *(_OWORD *)((char *)a2 + v26[10]);
        *(_OWORD *)((char *)a1 + v26[11]) = *(_OWORD *)((char *)a2 + v26[11]);
        *(_QWORD *)((char *)a1 + v26[12]) = *(_QWORD *)((char *)a2 + v26[12]);
        *((_BYTE *)a1 + v26[13]) = *((_BYTE *)a2 + v26[13]);
        *((_BYTE *)a1 + v26[14]) = *((_BYTE *)a2 + v26[14]);
        v131 = v26[15];
        v132 = (char *)a1 + v131;
        v133 = (char *)a2 + v131;
        *(_QWORD *)v132 = *(_QWORD *)v133;
        v132[8] = v133[8];
        v134 = v26[16];
        v135 = (_OWORD *)((char *)a1 + v134);
        v136 = (_OWORD *)((char *)a2 + v134);
        if (v198((char *)a2 + v134, 1, v200))
        {
          v137 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
          memcpy(v135, v136, *(_QWORD *)(*(_QWORD *)(v137 - 8) + 64));
        }
        else
        {
          v155 = v136[1];
          *v135 = *v136;
          v135[1] = v155;
          *((_BYTE *)v135 + 32) = *((_BYTE *)v136 + 32);
          *(_OWORD *)((char *)v135 + 40) = *(_OWORD *)((char *)v136 + 40);
          *((_QWORD *)v135 + 7) = *((_QWORD *)v136 + 7);
          *((_BYTE *)v135 + 64) = *((_BYTE *)v136 + 64);
          *(_OWORD *)((char *)v135 + 113) = *(_OWORD *)((char *)v136 + 113);
          *(_OWORD *)((char *)v135 + 104) = *(_OWORD *)((char *)v136 + 104);
          *(_OWORD *)((char *)v135 + 88) = *(_OWORD *)((char *)v136 + 88);
          *(_OWORD *)((char *)v135 + 72) = *(_OWORD *)((char *)v136 + 72);
          *((_BYTE *)v135 + 129) = *((_BYTE *)v136 + 129);
          v156 = v200[11];
          v157 = (char *)v135 + v156;
          v158 = (char *)v136 + v156;
          v159 = type metadata accessor for ArtworkCrop(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v159 - 8) + 32))(v157, v158, v159);
          *(_OWORD *)((char *)v135 + v200[12]) = *(_OWORD *)((char *)v136 + v200[12]);
          *((_BYTE *)v135 + v200[13]) = *((_BYTE *)v136 + v200[13]);
          *((_BYTE *)v135 + v200[14]) = *((_BYTE *)v136 + v200[14]);
          *((_BYTE *)v135 + v200[15]) = *((_BYTE *)v136 + v200[15]);
          *(_OWORD *)((char *)v135 + v200[16]) = *(_OWORD *)((char *)v136 + v200[16]);
          (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v196 + 56))(v135, 0, 1, v200);
        }
        *(_OWORD *)((char *)a1 + v26[17]) = *(_OWORD *)((char *)a2 + v26[17]);
        v160 = v26[18];
        v161 = (char *)a1 + v160;
        v162 = (char *)a2 + v160;
        v161[8] = v162[8];
        *(_QWORD *)v161 = *(_QWORD *)v162;
        v163 = v26[19];
        v164 = (char *)a1 + v163;
        v165 = (char *)a2 + v163;
        *(_QWORD *)v164 = *(_QWORD *)v165;
        v164[8] = v165[8];
        *((_BYTE *)a1 + v26[20]) = *((_BYTE *)a2 + v26[20]);
        *((_BYTE *)a1 + v26[21]) = *((_BYTE *)a2 + v26[21]);
        v166 = v26[22];
        v167 = (char *)a1 + v166;
        v168 = (char *)a2 + v166;
        v169 = type metadata accessor for TranscriptRequestInformation(0);
        v170 = *(_QWORD *)(v169 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v170 + 48))(v168, 1, v169))
        {
          v171 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2C40);
          memcpy(v167, v168, *(_QWORD *)(*(_QWORD *)(v171 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v170 + 32))(v167, v168, v169);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v170 + 56))(v167, 0, 1, v169);
        }
        swift_storeEnumTagMultiPayload(a1, v202, 1);
      }
      else
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
      }
      v67 = a1;
      v68 = v3;
      v69 = 2;
      goto LABEL_80;
    case 3u:
      v36 = type metadata accessor for FollowButtonPresenter.Data(0);
      if (swift_getEnumCaseMultiPayload(a2, v36) == 1)
      {
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_OWORD *)((char *)a1 + 8) = *(_OWORD *)((char *)a2 + 8);
        *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
        v37 = (int *)type metadata accessor for ShowOffer(0);
        v38 = v37[7];
        v39 = (_OWORD *)((char *)a1 + v38);
        v40 = (_OWORD *)((char *)a2 + v38);
        v41 = (int *)type metadata accessor for ArtworkModel(0);
        v42 = *((_QWORD *)v41 - 1);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v42 + 48))(v40, 1, v41))
        {
          v43 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
          memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
        }
        else
        {
          v172 = v40[1];
          *v39 = *v40;
          v39[1] = v172;
          *((_BYTE *)v39 + 32) = *((_BYTE *)v40 + 32);
          *(_OWORD *)((char *)v39 + 40) = *(_OWORD *)((char *)v40 + 40);
          *((_QWORD *)v39 + 7) = *((_QWORD *)v40 + 7);
          *((_BYTE *)v39 + 64) = *((_BYTE *)v40 + 64);
          *(_OWORD *)((char *)v39 + 113) = *(_OWORD *)((char *)v40 + 113);
          *(_OWORD *)((char *)v39 + 104) = *(_OWORD *)((char *)v40 + 104);
          *(_OWORD *)((char *)v39 + 88) = *(_OWORD *)((char *)v40 + 88);
          *(_OWORD *)((char *)v39 + 72) = *(_OWORD *)((char *)v40 + 72);
          *((_BYTE *)v39 + 129) = *((_BYTE *)v40 + 129);
          v173 = v41[11];
          v174 = (char *)v39 + v173;
          v211 = v36;
          v175 = v3;
          v176 = (char *)v40 + v173;
          v177 = type metadata accessor for ArtworkCrop(0);
          v178 = v176;
          v3 = v175;
          v36 = v211;
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v177 - 8) + 32))(v174, v178, v177);
          *(_OWORD *)((char *)v39 + v41[12]) = *(_OWORD *)((char *)v40 + v41[12]);
          *((_BYTE *)v39 + v41[13]) = *((_BYTE *)v40 + v41[13]);
          *((_BYTE *)v39 + v41[14]) = *((_BYTE *)v40 + v41[14]);
          *((_BYTE *)v39 + v41[15]) = *((_BYTE *)v40 + v41[15]);
          *(_OWORD *)((char *)v39 + v41[16]) = *(_OWORD *)((char *)v40 + v41[16]);
          (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v42 + 56))(v39, 0, 1, v41);
        }
        *(_OWORD *)((char *)a1 + v37[8]) = *(_OWORD *)((char *)a2 + v37[8]);
        *(_OWORD *)((char *)a1 + v37[9]) = *(_OWORD *)((char *)a2 + v37[9]);
        *((_BYTE *)a1 + v37[10]) = *((_BYTE *)a2 + v37[10]);
        *(_OWORD *)((char *)a1 + v37[11]) = *(_OWORD *)((char *)a2 + v37[11]);
        *(_OWORD *)((char *)a1 + v37[12]) = *(_OWORD *)((char *)a2 + v37[12]);
        v179 = v37[13];
        v180 = (char *)a1 + v179;
        v181 = (char *)a2 + v179;
        v182 = type metadata accessor for URL(0);
        v183 = *(_QWORD *)(v182 - 8);
        v184 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v183 + 48);
        if (v184(v181, 1, v182))
        {
          v185 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
          memcpy(v180, v181, *(_QWORD *)(*(_QWORD *)(v185 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v183 + 32))(v180, v181, v182);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v183 + 56))(v180, 0, 1, v182);
        }
        *(_OWORD *)((char *)a1 + v37[14]) = *(_OWORD *)((char *)a2 + v37[14]);
        *(_OWORD *)((char *)a1 + v37[15]) = *(_OWORD *)((char *)a2 + v37[15]);
        v186 = v37[16];
        v187 = (char *)a1 + v186;
        v188 = (char *)a2 + v186;
        if (v184((char *)a2 + v186, 1, v182))
        {
          v189 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
          memcpy(v187, v188, *(_QWORD *)(*(_QWORD *)(v189 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v183 + 32))(v187, v188, v182);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v183 + 56))(v187, 0, 1, v182);
        }
        v190 = v37[17];
        v191 = (char *)a1 + v190;
        v192 = (char *)a2 + v190;
        if (v184((char *)a2 + v190, 1, v182))
        {
          v193 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
          memcpy(v191, v192, *(_QWORD *)(*(_QWORD *)(v193 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v183 + 32))(v191, v192, v182);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v183 + 56))(v191, 0, 1, v182);
        }
        *((_BYTE *)a1 + v37[18]) = *((_BYTE *)a2 + v37[18]);
        swift_storeEnumTagMultiPayload(a1, v36, 1);
      }
      else
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
      }
      v67 = a1;
      v68 = v3;
      v69 = 3;
      goto LABEL_80;
    case 6u:
      v44 = a2[1];
      *a1 = *a2;
      a1[1] = v44;
      a1[2] = a2[2];
      v45 = type metadata accessor for ActionMenu(0);
      v46 = *(int *)(v45 + 28);
      v47 = (_OWORD *)((char *)a1 + v46);
      v48 = (_OWORD *)((char *)a2 + v46);
      v49 = (int *)type metadata accessor for ArtworkModel(0);
      v50 = *((_QWORD *)v49 - 1);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v50 + 48))(v48, 1, v49))
      {
        v51 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
        memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
      }
      else
      {
        v70 = v48[1];
        *v47 = *v48;
        v47[1] = v70;
        *((_BYTE *)v47 + 32) = *((_BYTE *)v48 + 32);
        *(_OWORD *)((char *)v47 + 40) = *(_OWORD *)((char *)v48 + 40);
        *((_QWORD *)v47 + 7) = *((_QWORD *)v48 + 7);
        *((_BYTE *)v47 + 64) = *((_BYTE *)v48 + 64);
        *(_OWORD *)((char *)v47 + 113) = *(_OWORD *)((char *)v48 + 113);
        *(_OWORD *)((char *)v47 + 104) = *(_OWORD *)((char *)v48 + 104);
        *(_OWORD *)((char *)v47 + 88) = *(_OWORD *)((char *)v48 + 88);
        *(_OWORD *)((char *)v47 + 72) = *(_OWORD *)((char *)v48 + 72);
        *((_BYTE *)v47 + 129) = *((_BYTE *)v48 + 129);
        v71 = v49[11];
        v72 = (char *)v47 + v71;
        v73 = (char *)v48 + v71;
        v74 = type metadata accessor for ArtworkCrop(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v74 - 8) + 32))(v72, v73, v74);
        *(_OWORD *)((char *)v47 + v49[12]) = *(_OWORD *)((char *)v48 + v49[12]);
        *((_BYTE *)v47 + v49[13]) = *((_BYTE *)v48 + v49[13]);
        *((_BYTE *)v47 + v49[14]) = *((_BYTE *)v48 + v49[14]);
        *((_BYTE *)v47 + v49[15]) = *((_BYTE *)v48 + v49[15]);
        *(_OWORD *)((char *)v47 + v49[16]) = *(_OWORD *)((char *)v48 + v49[16]);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v50 + 56))(v47, 0, 1, v49);
      }
      *(_QWORD *)((char *)a1 + *(int *)(v45 + 32)) = *(_QWORD *)((char *)a2 + *(int *)(v45 + 32));
      v75 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B27F8);
      *((_BYTE *)a1 + *(int *)(v75 + 48)) = *((_BYTE *)a2 + *(int *)(v75 + 48));
      v67 = a1;
      v68 = v3;
      v69 = 6;
LABEL_80:
      swift_storeEnumTagMultiPayload(v67, v68, v69);
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
      break;
  }
  return a1;
}

_OWORD *assignWithTake for HeaderButtonItem(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6;
  int *v7;
  uint64_t v8;
  _OWORD *v9;
  _OWORD *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  int *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  uint64_t v38;
  _OWORD *v39;
  _OWORD *v40;
  int *v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  _OWORD *v47;
  _OWORD *v48;
  int *v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  __int128 v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _OWORD *v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  __int128 v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  unsigned int (*v108)(char *, uint64_t, uint64_t);
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  unsigned int (*v113)(char *, uint64_t, uint64_t);
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  unsigned int (*v118)(char *, uint64_t, uint64_t);
  uint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  void (*v140)(char *, char *, uint64_t);
  uint64_t v141;
  char *v142;
  char *v143;
  uint64_t v144;
  void (*v145)(char *, char *, uint64_t);
  uint64_t v146;
  char *v147;
  char *v148;
  uint64_t v149;
  _OWORD *v150;
  _OWORD *v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  char *v155;
  uint64_t v156;
  _OWORD *v157;
  _OWORD *v158;
  uint64_t v159;
  __int128 v160;
  uint64_t v161;
  char *v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  char *v167;
  uint64_t v168;
  char *v169;
  char *v170;
  uint64_t v171;
  char *v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  __int128 v177;
  uint64_t v178;
  char *v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  char *v184;
  uint64_t v185;
  char *v186;
  char *v187;
  uint64_t v188;
  char *v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unsigned int (*v195)(char *, uint64_t, int *);
  unsigned int (*v196)(char *, uint64_t, int *);
  int *v197;
  int *v198;
  int *v199;
  int *v200;
  uint64_t v201;
  uint64_t v202;
  unsigned int (*v203)(char *, uint64_t, uint64_t);
  unsigned int (*v204)(char *, uint64_t, uint64_t);
  char *v205;
  uint64_t v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;

  if (a1 != a2)
  {
    sub_145D8((uint64_t)a1, type metadata accessor for HeaderButtonItem);
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        v6 = a2[1];
        *a1 = *a2;
        a1[1] = v6;
        v7 = (int *)type metadata accessor for ActionButton(0);
        v8 = v7[6];
        v9 = (_OWORD *)((char *)a1 + v8);
        v10 = (_OWORD *)((char *)a2 + v8);
        v11 = (int *)type metadata accessor for ArtworkModel(0);
        v12 = *((_QWORD *)v11 - 1);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
        {
          v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
          memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
        }
        else
        {
          v52 = v10[1];
          *v9 = *v10;
          v9[1] = v52;
          *((_BYTE *)v9 + 32) = *((_BYTE *)v10 + 32);
          *(_OWORD *)((char *)v9 + 40) = *(_OWORD *)((char *)v10 + 40);
          *((_QWORD *)v9 + 7) = *((_QWORD *)v10 + 7);
          *((_BYTE *)v9 + 64) = *((_BYTE *)v10 + 64);
          *(_OWORD *)((char *)v9 + 113) = *(_OWORD *)((char *)v10 + 113);
          *(_OWORD *)((char *)v9 + 104) = *(_OWORD *)((char *)v10 + 104);
          *(_OWORD *)((char *)v9 + 88) = *(_OWORD *)((char *)v10 + 88);
          *(_OWORD *)((char *)v9 + 72) = *(_OWORD *)((char *)v10 + 72);
          *((_BYTE *)v9 + 129) = *((_BYTE *)v10 + 129);
          v53 = v11[11];
          v54 = (char *)v9 + v53;
          v55 = (char *)v10 + v53;
          v56 = type metadata accessor for ArtworkCrop(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v56 - 8) + 32))(v54, v55, v56);
          *(_OWORD *)((char *)v9 + v11[12]) = *(_OWORD *)((char *)v10 + v11[12]);
          *((_BYTE *)v9 + v11[13]) = *((_BYTE *)v10 + v11[13]);
          *((_BYTE *)v9 + v11[14]) = *((_BYTE *)v10 + v11[14]);
          *((_BYTE *)v9 + v11[15]) = *((_BYTE *)v10 + v11[15]);
          *(_OWORD *)((char *)v9 + v11[16]) = *(_OWORD *)((char *)v10 + v11[16]);
          (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
        }
        *((_BYTE *)a1 + v7[7]) = *((_BYTE *)a2 + v7[7]);
        v57 = v7[8];
        v58 = (char *)a1 + v57;
        v59 = (char *)a2 + v57;
        v60 = *((_OWORD *)v59 + 1);
        *(_OWORD *)v58 = *(_OWORD *)v59;
        *((_OWORD *)v58 + 1) = v60;
        *((_QWORD *)v58 + 4) = *((_QWORD *)v59 + 4);
        v61 = v7[9];
        v62 = (char *)a1 + v61;
        v63 = (char *)a2 + v61;
        v64 = type metadata accessor for ImpressionMetrics(0);
        v65 = *(_QWORD *)(v64 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v65 + 48))(v63, 1, v64))
        {
          v66 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
          memcpy(v62, v63, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v65 + 32))(v62, v63, v64);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v65 + 56))(v62, 0, 1, v64);
        }
        v67 = a1;
        v68 = a3;
        v69 = 0;
        goto LABEL_81;
      case 1u:
        v14 = type metadata accessor for BookmarkButtonPresenter.Data(0);
        if (swift_getEnumCaseMultiPayload(a2, v14) == 1)
        {
          v209 = a3;
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_OWORD *)((char *)a1 + 8) = *(_OWORD *)((char *)a2 + 8);
          v197 = (int *)type metadata accessor for EpisodeOffer(0);
          v15 = v197[6];
          v16 = (char *)a1 + v15;
          v17 = (char *)a2 + v15;
          *(_QWORD *)v16 = *(_QWORD *)((char *)a2 + v15);
          *(_OWORD *)(v16 + 8) = *(_OWORD *)((char *)a2 + v15 + 8);
          v16[24] = *((_BYTE *)a2 + v15 + 24);
          v18 = (int *)type metadata accessor for ShowOffer(0);
          v19 = v18[7];
          v20 = &v16[v19];
          v21 = &v17[v19];
          v22 = (int *)type metadata accessor for ArtworkModel(0);
          v23 = *((_QWORD *)v22 - 1);
          v195 = *(unsigned int (**)(char *, uint64_t, int *))(v23 + 48);
          v199 = v22;
          v201 = v14;
          if (v195(v21, 1, v22))
          {
            v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
            memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
          }
          else
          {
            v76 = *((_OWORD *)v21 + 1);
            *(_OWORD *)v20 = *(_OWORD *)v21;
            *((_OWORD *)v20 + 1) = v76;
            v20[32] = v21[32];
            *(_OWORD *)(v20 + 40) = *(_OWORD *)(v21 + 40);
            *((_QWORD *)v20 + 7) = *((_QWORD *)v21 + 7);
            v20[64] = v21[64];
            *(_OWORD *)(v20 + 113) = *(_OWORD *)(v21 + 113);
            *(_OWORD *)(v20 + 104) = *(_OWORD *)(v21 + 104);
            *(_OWORD *)(v20 + 88) = *(_OWORD *)(v21 + 88);
            *(_OWORD *)(v20 + 72) = *(_OWORD *)(v21 + 72);
            v20[129] = v21[129];
            v77 = v22[11];
            v78 = &v20[v77];
            v205 = &v21[v77];
            v79 = type metadata accessor for ArtworkCrop(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v79 - 8) + 32))(v78, v205, v79);
            *(_OWORD *)&v20[v22[12]] = *(_OWORD *)&v21[v22[12]];
            v20[v22[13]] = v21[v22[13]];
            v20[v22[14]] = v21[v22[14]];
            v20[v22[15]] = v21[v22[15]];
            *(_OWORD *)&v20[v22[16]] = *(_OWORD *)&v21[v22[16]];
            (*(void (**)(char *, _QWORD, uint64_t, int *))(v23 + 56))(v20, 0, 1, v22);
          }
          *(_OWORD *)&v16[v18[8]] = *(_OWORD *)&v17[v18[8]];
          *(_OWORD *)&v16[v18[9]] = *(_OWORD *)&v17[v18[9]];
          v16[v18[10]] = v17[v18[10]];
          *(_OWORD *)&v16[v18[11]] = *(_OWORD *)&v17[v18[11]];
          *(_OWORD *)&v16[v18[12]] = *(_OWORD *)&v17[v18[12]];
          v80 = v18[13];
          v81 = &v16[v80];
          v82 = &v17[v80];
          v83 = type metadata accessor for URL(0);
          v84 = *(_QWORD *)(v83 - 8);
          v203 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v84 + 48);
          v206 = v84;
          if (v203(v82, 1, v83))
          {
            v85 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
            memcpy(v81, v82, *(_QWORD *)(*(_QWORD *)(v85 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v84 + 32))(v81, v82, v83);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v84 + 56))(v81, 0, 1, v83);
          }
          *(_OWORD *)&v16[v18[14]] = *(_OWORD *)&v17[v18[14]];
          *(_OWORD *)&v16[v18[15]] = *(_OWORD *)&v17[v18[15]];
          v110 = v18[16];
          v111 = &v16[v110];
          v112 = &v17[v110];
          v113 = v203;
          if (v203(&v17[v110], 1, v83))
          {
            v114 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
            memcpy(v111, v112, *(_QWORD *)(*(_QWORD *)(v114 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v206 + 32))(v111, v112, v83);
            v113 = v203;
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v206 + 56))(v111, 0, 1, v83);
          }
          v124 = v18[17];
          v125 = &v16[v124];
          v126 = &v17[v124];
          if (v113(&v17[v124], 1, v83))
          {
            v127 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
            memcpy(v125, v126, *(_QWORD *)(*(_QWORD *)(v127 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v206 + 32))(v125, v126, v83);
            v113 = v203;
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v206 + 56))(v125, 0, 1, v83);
          }
          v16[v18[18]] = v17[v18[18]];
          v136 = v197[7];
          v137 = (char *)a1 + v136;
          v138 = (char *)a2 + v136;
          a3 = v209;
          if (v113((char *)a2 + v136, 1, v83))
          {
            v139 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
            memcpy(v137, v138, *(_QWORD *)(*(_QWORD *)(v139 - 8) + 64));
            v140 = *(void (**)(char *, char *, uint64_t))(v206 + 32);
          }
          else
          {
            v140 = *(void (**)(char *, char *, uint64_t))(v206 + 32);
            v140(v137, v138, v83);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v206 + 56))(v137, 0, 1, v83);
          }
          v140((char *)a1 + v197[8], (char *)a2 + v197[8], v83);
          *(_QWORD *)((char *)a1 + v197[9]) = *(_QWORD *)((char *)a2 + v197[9]);
          *(_OWORD *)((char *)a1 + v197[10]) = *(_OWORD *)((char *)a2 + v197[10]);
          *(_OWORD *)((char *)a1 + v197[11]) = *(_OWORD *)((char *)a2 + v197[11]);
          *(_QWORD *)((char *)a1 + v197[12]) = *(_QWORD *)((char *)a2 + v197[12]);
          *((_BYTE *)a1 + v197[13]) = *((_BYTE *)a2 + v197[13]);
          *((_BYTE *)a1 + v197[14]) = *((_BYTE *)a2 + v197[14]);
          v146 = v197[15];
          v147 = (char *)a1 + v146;
          v148 = (char *)a2 + v146;
          *(_QWORD *)v147 = *(_QWORD *)v148;
          v147[8] = v148[8];
          v149 = v197[16];
          v150 = (_OWORD *)((char *)a1 + v149);
          v151 = (_OWORD *)((char *)a2 + v149);
          if (v195((char *)a2 + v149, 1, v199))
          {
            v152 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
            memcpy(v150, v151, *(_QWORD *)(*(_QWORD *)(v152 - 8) + 64));
          }
          else
          {
            v160 = v151[1];
            *v150 = *v151;
            v150[1] = v160;
            *((_BYTE *)v150 + 32) = *((_BYTE *)v151 + 32);
            *(_OWORD *)((char *)v150 + 40) = *(_OWORD *)((char *)v151 + 40);
            *((_QWORD *)v150 + 7) = *((_QWORD *)v151 + 7);
            *((_BYTE *)v150 + 64) = *((_BYTE *)v151 + 64);
            *(_OWORD *)((char *)v150 + 113) = *(_OWORD *)((char *)v151 + 113);
            *(_OWORD *)((char *)v150 + 104) = *(_OWORD *)((char *)v151 + 104);
            *(_OWORD *)((char *)v150 + 88) = *(_OWORD *)((char *)v151 + 88);
            *(_OWORD *)((char *)v150 + 72) = *(_OWORD *)((char *)v151 + 72);
            *((_BYTE *)v150 + 129) = *((_BYTE *)v151 + 129);
            v161 = v199[11];
            v162 = (char *)v150 + v161;
            v163 = (char *)v151 + v161;
            v164 = type metadata accessor for ArtworkCrop(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v164 - 8) + 32))(v162, v163, v164);
            *(_OWORD *)((char *)v150 + v199[12]) = *(_OWORD *)((char *)v151 + v199[12]);
            *((_BYTE *)v150 + v199[13]) = *((_BYTE *)v151 + v199[13]);
            *((_BYTE *)v150 + v199[14]) = *((_BYTE *)v151 + v199[14]);
            *((_BYTE *)v150 + v199[15]) = *((_BYTE *)v151 + v199[15]);
            *(_OWORD *)((char *)v150 + v199[16]) = *(_OWORD *)((char *)v151 + v199[16]);
            (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v23 + 56))(v150, 0, 1, v199);
          }
          *(_OWORD *)((char *)a1 + v197[17]) = *(_OWORD *)((char *)a2 + v197[17]);
          v165 = v197[18];
          v166 = (char *)a1 + v165;
          v167 = (char *)a2 + v165;
          v166[8] = v167[8];
          *(_QWORD *)v166 = *(_QWORD *)v167;
          v168 = v197[19];
          v169 = (char *)a1 + v168;
          v170 = (char *)a2 + v168;
          *(_QWORD *)v169 = *(_QWORD *)v170;
          v169[8] = v170[8];
          *((_BYTE *)a1 + v197[20]) = *((_BYTE *)a2 + v197[20]);
          *((_BYTE *)a1 + v197[21]) = *((_BYTE *)a2 + v197[21]);
          v171 = v197[22];
          v172 = (char *)a1 + v171;
          v173 = (char *)a2 + v171;
          v174 = type metadata accessor for TranscriptRequestInformation(0);
          v175 = *(_QWORD *)(v174 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v175 + 48))(v173, 1, v174))
          {
            v176 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2C40);
            memcpy(v172, v173, *(_QWORD *)(*(_QWORD *)(v176 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v175 + 32))(v172, v173, v174);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v175 + 56))(v172, 0, 1, v174);
          }
          swift_storeEnumTagMultiPayload(a1, v201, 1);
        }
        else
        {
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
        }
        v67 = a1;
        v68 = a3;
        v69 = 1;
        goto LABEL_81;
      case 2u:
        v25 = type metadata accessor for DownloadButtonPresenter.Data(0);
        if (swift_getEnumCaseMultiPayload(a2, v25) == 1)
        {
          v210 = a3;
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_OWORD *)((char *)a1 + 8) = *(_OWORD *)((char *)a2 + 8);
          v198 = (int *)type metadata accessor for EpisodeOffer(0);
          v26 = v198[6];
          v27 = (char *)a1 + v26;
          v28 = (char *)a2 + v26;
          *(_QWORD *)v27 = *(_QWORD *)((char *)a2 + v26);
          *(_OWORD *)(v27 + 8) = *(_OWORD *)((char *)a2 + v26 + 8);
          v27[24] = *((_BYTE *)a2 + v26 + 24);
          v29 = (int *)type metadata accessor for ShowOffer(0);
          v30 = v29[7];
          v31 = &v27[v30];
          v32 = &v28[v30];
          v33 = (int *)type metadata accessor for ArtworkModel(0);
          v34 = *((_QWORD *)v33 - 1);
          v196 = *(unsigned int (**)(char *, uint64_t, int *))(v34 + 48);
          v200 = v33;
          v202 = v25;
          if (v196(v32, 1, v33))
          {
            v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
            memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
          }
          else
          {
            v86 = *((_OWORD *)v32 + 1);
            *(_OWORD *)v31 = *(_OWORD *)v32;
            *((_OWORD *)v31 + 1) = v86;
            v31[32] = v32[32];
            *(_OWORD *)(v31 + 40) = *(_OWORD *)(v32 + 40);
            *((_QWORD *)v31 + 7) = *((_QWORD *)v32 + 7);
            v31[64] = v32[64];
            *(_OWORD *)(v31 + 113) = *(_OWORD *)(v32 + 113);
            *(_OWORD *)(v31 + 104) = *(_OWORD *)(v32 + 104);
            *(_OWORD *)(v31 + 88) = *(_OWORD *)(v32 + 88);
            *(_OWORD *)(v31 + 72) = *(_OWORD *)(v32 + 72);
            v31[129] = v32[129];
            v87 = v33[11];
            v88 = &v31[v87];
            v207 = &v32[v87];
            v89 = type metadata accessor for ArtworkCrop(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v89 - 8) + 32))(v88, v207, v89);
            *(_OWORD *)&v31[v33[12]] = *(_OWORD *)&v32[v33[12]];
            v31[v33[13]] = v32[v33[13]];
            v31[v33[14]] = v32[v33[14]];
            v31[v33[15]] = v32[v33[15]];
            *(_OWORD *)&v31[v33[16]] = *(_OWORD *)&v32[v33[16]];
            (*(void (**)(char *, _QWORD, uint64_t, int *))(v34 + 56))(v31, 0, 1, v33);
          }
          *(_OWORD *)&v27[v29[8]] = *(_OWORD *)&v28[v29[8]];
          *(_OWORD *)&v27[v29[9]] = *(_OWORD *)&v28[v29[9]];
          v27[v29[10]] = v28[v29[10]];
          *(_OWORD *)&v27[v29[11]] = *(_OWORD *)&v28[v29[11]];
          *(_OWORD *)&v27[v29[12]] = *(_OWORD *)&v28[v29[12]];
          v90 = v29[13];
          v91 = &v27[v90];
          v92 = &v28[v90];
          v93 = type metadata accessor for URL(0);
          v94 = *(_QWORD *)(v93 - 8);
          v204 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v94 + 48);
          v208 = v94;
          if (v204(v92, 1, v93))
          {
            v95 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
            memcpy(v91, v92, *(_QWORD *)(*(_QWORD *)(v95 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v94 + 32))(v91, v92, v93);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v94 + 56))(v91, 0, 1, v93);
          }
          *(_OWORD *)&v27[v29[14]] = *(_OWORD *)&v28[v29[14]];
          *(_OWORD *)&v27[v29[15]] = *(_OWORD *)&v28[v29[15]];
          v115 = v29[16];
          v116 = &v27[v115];
          v117 = &v28[v115];
          v118 = v204;
          if (v204(&v28[v115], 1, v93))
          {
            v119 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
            memcpy(v116, v117, *(_QWORD *)(*(_QWORD *)(v119 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v208 + 32))(v116, v117, v93);
            v118 = v204;
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v208 + 56))(v116, 0, 1, v93);
          }
          v128 = v29[17];
          v129 = &v27[v128];
          v130 = &v28[v128];
          if (v118(&v28[v128], 1, v93))
          {
            v131 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
            memcpy(v129, v130, *(_QWORD *)(*(_QWORD *)(v131 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v208 + 32))(v129, v130, v93);
            v118 = v204;
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v208 + 56))(v129, 0, 1, v93);
          }
          v27[v29[18]] = v28[v29[18]];
          v141 = v198[7];
          v142 = (char *)a1 + v141;
          v143 = (char *)a2 + v141;
          a3 = v210;
          if (v118((char *)a2 + v141, 1, v93))
          {
            v144 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
            memcpy(v142, v143, *(_QWORD *)(*(_QWORD *)(v144 - 8) + 64));
            v145 = *(void (**)(char *, char *, uint64_t))(v208 + 32);
          }
          else
          {
            v145 = *(void (**)(char *, char *, uint64_t))(v208 + 32);
            v145(v142, v143, v93);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v208 + 56))(v142, 0, 1, v93);
          }
          v145((char *)a1 + v198[8], (char *)a2 + v198[8], v93);
          *(_QWORD *)((char *)a1 + v198[9]) = *(_QWORD *)((char *)a2 + v198[9]);
          *(_OWORD *)((char *)a1 + v198[10]) = *(_OWORD *)((char *)a2 + v198[10]);
          *(_OWORD *)((char *)a1 + v198[11]) = *(_OWORD *)((char *)a2 + v198[11]);
          *(_QWORD *)((char *)a1 + v198[12]) = *(_QWORD *)((char *)a2 + v198[12]);
          *((_BYTE *)a1 + v198[13]) = *((_BYTE *)a2 + v198[13]);
          *((_BYTE *)a1 + v198[14]) = *((_BYTE *)a2 + v198[14]);
          v153 = v198[15];
          v154 = (char *)a1 + v153;
          v155 = (char *)a2 + v153;
          *(_QWORD *)v154 = *(_QWORD *)v155;
          v154[8] = v155[8];
          v156 = v198[16];
          v157 = (_OWORD *)((char *)a1 + v156);
          v158 = (_OWORD *)((char *)a2 + v156);
          if (v196((char *)a2 + v156, 1, v200))
          {
            v159 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
            memcpy(v157, v158, *(_QWORD *)(*(_QWORD *)(v159 - 8) + 64));
          }
          else
          {
            v177 = v158[1];
            *v157 = *v158;
            v157[1] = v177;
            *((_BYTE *)v157 + 32) = *((_BYTE *)v158 + 32);
            *(_OWORD *)((char *)v157 + 40) = *(_OWORD *)((char *)v158 + 40);
            *((_QWORD *)v157 + 7) = *((_QWORD *)v158 + 7);
            *((_BYTE *)v157 + 64) = *((_BYTE *)v158 + 64);
            *(_OWORD *)((char *)v157 + 113) = *(_OWORD *)((char *)v158 + 113);
            *(_OWORD *)((char *)v157 + 104) = *(_OWORD *)((char *)v158 + 104);
            *(_OWORD *)((char *)v157 + 88) = *(_OWORD *)((char *)v158 + 88);
            *(_OWORD *)((char *)v157 + 72) = *(_OWORD *)((char *)v158 + 72);
            *((_BYTE *)v157 + 129) = *((_BYTE *)v158 + 129);
            v178 = v200[11];
            v179 = (char *)v157 + v178;
            v180 = (char *)v158 + v178;
            v181 = type metadata accessor for ArtworkCrop(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v181 - 8) + 32))(v179, v180, v181);
            *(_OWORD *)((char *)v157 + v200[12]) = *(_OWORD *)((char *)v158 + v200[12]);
            *((_BYTE *)v157 + v200[13]) = *((_BYTE *)v158 + v200[13]);
            *((_BYTE *)v157 + v200[14]) = *((_BYTE *)v158 + v200[14]);
            *((_BYTE *)v157 + v200[15]) = *((_BYTE *)v158 + v200[15]);
            *(_OWORD *)((char *)v157 + v200[16]) = *(_OWORD *)((char *)v158 + v200[16]);
            (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v34 + 56))(v157, 0, 1, v200);
          }
          *(_OWORD *)((char *)a1 + v198[17]) = *(_OWORD *)((char *)a2 + v198[17]);
          v182 = v198[18];
          v183 = (char *)a1 + v182;
          v184 = (char *)a2 + v182;
          v183[8] = v184[8];
          *(_QWORD *)v183 = *(_QWORD *)v184;
          v185 = v198[19];
          v186 = (char *)a1 + v185;
          v187 = (char *)a2 + v185;
          *(_QWORD *)v186 = *(_QWORD *)v187;
          v186[8] = v187[8];
          *((_BYTE *)a1 + v198[20]) = *((_BYTE *)a2 + v198[20]);
          *((_BYTE *)a1 + v198[21]) = *((_BYTE *)a2 + v198[21]);
          v188 = v198[22];
          v189 = (char *)a1 + v188;
          v190 = (char *)a2 + v188;
          v191 = type metadata accessor for TranscriptRequestInformation(0);
          v192 = *(_QWORD *)(v191 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v192 + 48))(v190, 1, v191))
          {
            v193 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2C40);
            memcpy(v189, v190, *(_QWORD *)(*(_QWORD *)(v193 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v192 + 32))(v189, v190, v191);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v192 + 56))(v189, 0, 1, v191);
          }
          swift_storeEnumTagMultiPayload(a1, v202, 1);
        }
        else
        {
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
        }
        v67 = a1;
        v68 = a3;
        v69 = 2;
        goto LABEL_81;
      case 3u:
        v36 = type metadata accessor for FollowButtonPresenter.Data(0);
        if (swift_getEnumCaseMultiPayload(a2, v36) == 1)
        {
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_OWORD *)((char *)a1 + 8) = *(_OWORD *)((char *)a2 + 8);
          *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
          v37 = (int *)type metadata accessor for ShowOffer(0);
          v38 = v37[7];
          v39 = (_OWORD *)((char *)a1 + v38);
          v40 = (_OWORD *)((char *)a2 + v38);
          v41 = (int *)type metadata accessor for ArtworkModel(0);
          v42 = *((_QWORD *)v41 - 1);
          if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v42 + 48))(v40, 1, v41))
          {
            v43 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
            memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
          }
          else
          {
            v96 = v40[1];
            *v39 = *v40;
            v39[1] = v96;
            *((_BYTE *)v39 + 32) = *((_BYTE *)v40 + 32);
            *(_OWORD *)((char *)v39 + 40) = *(_OWORD *)((char *)v40 + 40);
            *((_QWORD *)v39 + 7) = *((_QWORD *)v40 + 7);
            *((_BYTE *)v39 + 64) = *((_BYTE *)v40 + 64);
            *(_OWORD *)((char *)v39 + 113) = *(_OWORD *)((char *)v40 + 113);
            *(_OWORD *)((char *)v39 + 104) = *(_OWORD *)((char *)v40 + 104);
            *(_OWORD *)((char *)v39 + 88) = *(_OWORD *)((char *)v40 + 88);
            *(_OWORD *)((char *)v39 + 72) = *(_OWORD *)((char *)v40 + 72);
            *((_BYTE *)v39 + 129) = *((_BYTE *)v40 + 129);
            v97 = v41[11];
            v98 = (char *)v39 + v97;
            v211 = v36;
            v99 = a3;
            v100 = (char *)v40 + v97;
            v101 = type metadata accessor for ArtworkCrop(0);
            v102 = v100;
            a3 = v99;
            v36 = v211;
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v101 - 8) + 32))(v98, v102, v101);
            *(_OWORD *)((char *)v39 + v41[12]) = *(_OWORD *)((char *)v40 + v41[12]);
            *((_BYTE *)v39 + v41[13]) = *((_BYTE *)v40 + v41[13]);
            *((_BYTE *)v39 + v41[14]) = *((_BYTE *)v40 + v41[14]);
            *((_BYTE *)v39 + v41[15]) = *((_BYTE *)v40 + v41[15]);
            *(_OWORD *)((char *)v39 + v41[16]) = *(_OWORD *)((char *)v40 + v41[16]);
            (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v42 + 56))(v39, 0, 1, v41);
          }
          *(_OWORD *)((char *)a1 + v37[8]) = *(_OWORD *)((char *)a2 + v37[8]);
          *(_OWORD *)((char *)a1 + v37[9]) = *(_OWORD *)((char *)a2 + v37[9]);
          *((_BYTE *)a1 + v37[10]) = *((_BYTE *)a2 + v37[10]);
          *(_OWORD *)((char *)a1 + v37[11]) = *(_OWORD *)((char *)a2 + v37[11]);
          *(_OWORD *)((char *)a1 + v37[12]) = *(_OWORD *)((char *)a2 + v37[12]);
          v103 = v37[13];
          v104 = (char *)a1 + v103;
          v105 = (char *)a2 + v103;
          v106 = type metadata accessor for URL(0);
          v107 = *(_QWORD *)(v106 - 8);
          v108 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v107 + 48);
          if (v108(v105, 1, v106))
          {
            v109 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
            memcpy(v104, v105, *(_QWORD *)(*(_QWORD *)(v109 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v107 + 32))(v104, v105, v106);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v107 + 56))(v104, 0, 1, v106);
          }
          *(_OWORD *)((char *)a1 + v37[14]) = *(_OWORD *)((char *)a2 + v37[14]);
          *(_OWORD *)((char *)a1 + v37[15]) = *(_OWORD *)((char *)a2 + v37[15]);
          v120 = v37[16];
          v121 = (char *)a1 + v120;
          v122 = (char *)a2 + v120;
          if (v108((char *)a2 + v120, 1, v106))
          {
            v123 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
            memcpy(v121, v122, *(_QWORD *)(*(_QWORD *)(v123 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v107 + 32))(v121, v122, v106);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v107 + 56))(v121, 0, 1, v106);
          }
          v132 = v37[17];
          v133 = (char *)a1 + v132;
          v134 = (char *)a2 + v132;
          if (v108((char *)a2 + v132, 1, v106))
          {
            v135 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
            memcpy(v133, v134, *(_QWORD *)(*(_QWORD *)(v135 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v107 + 32))(v133, v134, v106);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v107 + 56))(v133, 0, 1, v106);
          }
          *((_BYTE *)a1 + v37[18]) = *((_BYTE *)a2 + v37[18]);
          swift_storeEnumTagMultiPayload(a1, v36, 1);
        }
        else
        {
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
        }
        v67 = a1;
        v68 = a3;
        v69 = 3;
        goto LABEL_81;
      case 6u:
        v44 = a2[1];
        *a1 = *a2;
        a1[1] = v44;
        a1[2] = a2[2];
        v45 = type metadata accessor for ActionMenu(0);
        v46 = *(int *)(v45 + 28);
        v47 = (_OWORD *)((char *)a1 + v46);
        v48 = (_OWORD *)((char *)a2 + v46);
        v49 = (int *)type metadata accessor for ArtworkModel(0);
        v50 = *((_QWORD *)v49 - 1);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v50 + 48))(v48, 1, v49))
        {
          v51 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
          memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
        }
        else
        {
          v70 = v48[1];
          *v47 = *v48;
          v47[1] = v70;
          *((_BYTE *)v47 + 32) = *((_BYTE *)v48 + 32);
          *(_OWORD *)((char *)v47 + 40) = *(_OWORD *)((char *)v48 + 40);
          *((_QWORD *)v47 + 7) = *((_QWORD *)v48 + 7);
          *((_BYTE *)v47 + 64) = *((_BYTE *)v48 + 64);
          *(_OWORD *)((char *)v47 + 113) = *(_OWORD *)((char *)v48 + 113);
          *(_OWORD *)((char *)v47 + 104) = *(_OWORD *)((char *)v48 + 104);
          *(_OWORD *)((char *)v47 + 88) = *(_OWORD *)((char *)v48 + 88);
          *(_OWORD *)((char *)v47 + 72) = *(_OWORD *)((char *)v48 + 72);
          *((_BYTE *)v47 + 129) = *((_BYTE *)v48 + 129);
          v71 = v49[11];
          v72 = (char *)v47 + v71;
          v73 = (char *)v48 + v71;
          v74 = type metadata accessor for ArtworkCrop(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v74 - 8) + 32))(v72, v73, v74);
          *(_OWORD *)((char *)v47 + v49[12]) = *(_OWORD *)((char *)v48 + v49[12]);
          *((_BYTE *)v47 + v49[13]) = *((_BYTE *)v48 + v49[13]);
          *((_BYTE *)v47 + v49[14]) = *((_BYTE *)v48 + v49[14]);
          *((_BYTE *)v47 + v49[15]) = *((_BYTE *)v48 + v49[15]);
          *(_OWORD *)((char *)v47 + v49[16]) = *(_OWORD *)((char *)v48 + v49[16]);
          (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v50 + 56))(v47, 0, 1, v49);
        }
        *(_QWORD *)((char *)a1 + *(int *)(v45 + 32)) = *(_QWORD *)((char *)a2 + *(int *)(v45 + 32));
        v75 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B27F8);
        *((_BYTE *)a1 + *(int *)(v75 + 48)) = *((_BYTE *)a2 + *(int *)(v75 + 48));
        v67 = a1;
        v68 = a3;
        v69 = 6;
LABEL_81:
        swift_storeEnumTagMultiPayload(v67, v68, v69);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t sub_55540(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _BYTE v8[32];
  _QWORD v9[10];

  result = type metadata accessor for ActionButton(319);
  if (v3 <= 0x3F)
  {
    v9[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for BookmarkButtonPresenter.Data(319);
    if (v4 <= 0x3F)
    {
      v9[1] = *(_QWORD *)(result - 8) + 64;
      result = type metadata accessor for DownloadButtonPresenter.Data(319);
      if (v5 <= 0x3F)
      {
        v9[2] = *(_QWORD *)(result - 8) + 64;
        result = type metadata accessor for FollowButtonPresenter.Data(319);
        if (v6 <= 0x3F)
        {
          v9[3] = *(_QWORD *)(result - 8) + 64;
          v9[4] = (char *)&value witness table for () + 64;
          v9[5] = "(";
          result = type metadata accessor for ActionMenu(319);
          if (v7 <= 0x3F)
          {
            swift_getTupleTypeLayout2(v8, *(_QWORD *)(result - 8) + 64, &unk_2ED600);
            v9[6] = v8;
            v9[7] = (char *)&value witness table for Builtin.Int64 + 64;
            v9[8] = (char *)&value witness table for Builtin.Int64 + 64;
            v9[9] = &unk_2ED618;
            swift_initEnumMetadataMultiPayload(a1, 256, 10, v9);
            return 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for HeaderButtonItem.ButtonStyle(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_556A4 + 4 * byte_2ED367[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_556D8 + 4 * byte_2ED362[v4]))();
}

uint64_t sub_556D8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_556E0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x556E8);
  return result;
}

uint64_t sub_556F4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x556FCLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_55700(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_55708(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HeaderButtonItem.ButtonStyle()
{
  return &type metadata for HeaderButtonItem.ButtonStyle;
}

uint64_t storeEnumTagSinglePayload for HeaderButtonItem.ProfilePictureDisplayMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_55770 + 4 * byte_2ED371[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_557A4 + 4 * byte_2ED36C[v4]))();
}

uint64_t sub_557A4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_557AC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x557B4);
  return result;
}

uint64_t sub_557C0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x557C8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_557CC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_557D4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HeaderButtonItem.ProfilePictureDisplayMode()
{
  return &type metadata for HeaderButtonItem.ProfilePictureDisplayMode;
}

unint64_t sub_557F0()
{
  unint64_t result;

  result = qword_3B2CF8;
  if (!qword_3B2CF8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for RecommendationsMetadata.Shows);
    atomic_store(result, (unint64_t *)&qword_3B2CF8);
  }
  return result;
}

unint64_t sub_55834()
{
  unint64_t result;

  result = qword_3B2D00;
  if (!qword_3B2D00)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for RecommendationsMetadata.Episodes);
    atomic_store(result, (unint64_t *)&qword_3B2D00);
  }
  return result;
}

unint64_t sub_55878()
{
  unint64_t result;

  result = qword_3B2D08;
  if (!qword_3B2D08)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for RecommendationsMetadata.Channels);
    atomic_store(result, (unint64_t *)&qword_3B2D08);
  }
  return result;
}

unint64_t sub_558BC()
{
  unint64_t result;

  result = qword_3B2D10;
  if (!qword_3B2D10)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for RecommendationsMetadata.Categories);
    atomic_store(result, (unint64_t *)&qword_3B2D10);
  }
  return result;
}

unint64_t sub_55900()
{
  unint64_t result;

  result = qword_3B2D18;
  if (!qword_3B2D18)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for RecommendationsMetadata.Shows.Metadata);
    atomic_store(result, (unint64_t *)&qword_3B2D18);
  }
  return result;
}

unint64_t sub_55944()
{
  unint64_t result;

  result = qword_3B2D20;
  if (!qword_3B2D20)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for RecommendationsMetadata.Episodes.Metadata);
    atomic_store(result, (unint64_t *)&qword_3B2D20);
  }
  return result;
}

unint64_t sub_55988()
{
  unint64_t result;

  result = qword_3B2D28;
  if (!qword_3B2D28)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for RecommendationsMetadata.Channels.Metadata);
    atomic_store(result, (unint64_t *)&qword_3B2D28);
  }
  return result;
}

unint64_t sub_559CC()
{
  unint64_t result;

  result = qword_3B2D30;
  if (!qword_3B2D30)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for RecommendationsMetadata.Categories.Metadata);
    atomic_store(result, (unint64_t *)&qword_3B2D30);
  }
  return result;
}

unint64_t sub_55A10()
{
  unint64_t result;

  result = qword_3B2D38;
  if (!qword_3B2D38)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for RecommendationsMetadata.Analytics);
    atomic_store(result, (unint64_t *)&qword_3B2D38);
  }
  return result;
}

unint64_t sub_55A54()
{
  unint64_t result;

  result = qword_3B2D50;
  if (!qword_3B2D50)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for HighlightsPageIntent);
    atomic_store(result, (unint64_t *)&qword_3B2D50);
  }
  return result;
}

unint64_t sub_55A98()
{
  unint64_t result;

  result = qword_3B2D60;
  if (!qword_3B2D60)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ActionButton.Role);
    atomic_store(result, (unint64_t *)&qword_3B2D60);
  }
  return result;
}

unint64_t sub_55ADC()
{
  unint64_t result;

  result = qword_3B2D68;
  if (!qword_3B2D68)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ActionButton.ID);
    atomic_store(result, (unint64_t *)&qword_3B2D68);
  }
  return result;
}

unint64_t sub_55B20()
{
  unint64_t result;

  result = qword_3B2D70;
  if (!qword_3B2D70)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ActionMenu.ItemState);
    atomic_store(result, (unint64_t *)&qword_3B2D70);
  }
  return result;
}

unint64_t sub_55B64()
{
  unint64_t result;

  result = qword_3B2D78;
  if (!qword_3B2D78)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ActionMenu.ItemRole);
    atomic_store(result, (unint64_t *)&qword_3B2D78);
  }
  return result;
}

unint64_t sub_55BA8()
{
  unint64_t result;

  result = qword_3B2D90;
  if (!qword_3B2D90)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ActionMenu.ID);
    atomic_store(result, (unint64_t *)&qword_3B2D90);
  }
  return result;
}

unint64_t sub_55BEC()
{
  unint64_t result;

  result = qword_3B2D98;
  if (!qword_3B2D98)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SearchOrigin);
    atomic_store(result, (unint64_t *)&qword_3B2D98);
  }
  return result;
}

unint64_t sub_55C30()
{
  unint64_t result;

  result = qword_3B2DA0;
  if (!qword_3B2DA0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CategoryPageFromYourShowsShelfIntent);
    atomic_store(result, (unint64_t *)&qword_3B2DA0);
  }
  return result;
}

unint64_t sub_55C74()
{
  unint64_t result;

  result = qword_3B2DA8;
  if (!qword_3B2DA8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for RecommendationsShelvesIntent);
    atomic_store(result, (unint64_t *)&qword_3B2DA8);
  }
  return result;
}

unint64_t sub_55CB8()
{
  unint64_t result;

  result = qword_3B2DB0;
  if (!qword_3B2DB0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ChannelPageIntent);
    atomic_store(result, (unint64_t *)&qword_3B2DB0);
  }
  return result;
}

unint64_t sub_55CFC()
{
  unint64_t result;

  result = qword_3B2DB8;
  if (!qword_3B2DB8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ManageCategoriesPageIntent);
    atomic_store(result, (unint64_t *)&qword_3B2DB8);
  }
  return result;
}

unint64_t sub_55D40()
{
  unint64_t result;

  result = qword_3B2DC0;
  if (!qword_3B2DC0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for EpisodeUpsellShelfIntent);
    atomic_store(result, (unint64_t *)&qword_3B2DC0);
  }
  return result;
}

unint64_t sub_55D84()
{
  unint64_t result;

  result = qword_3B2DC8;
  if (!qword_3B2DC8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SharedWithYouShelfIntent);
    atomic_store(result, (unint64_t *)&qword_3B2DC8);
  }
  return result;
}

unint64_t sub_55DC8()
{
  unint64_t result;

  result = qword_3B2DD8;
  if (!qword_3B2DD8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for HeaderButtonItem.ButtonStyle);
    atomic_store(result, (unint64_t *)&qword_3B2DD8);
  }
  return result;
}

unint64_t sub_55E0C()
{
  unint64_t result;

  result = qword_3B2DE0;
  if (!qword_3B2DE0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for HeaderButtonItem.ProfilePictureDisplayMode);
    atomic_store(result, (unint64_t *)&qword_3B2DE0);
  }
  return result;
}

unint64_t sub_55E50()
{
  unint64_t result;

  result = qword_3B2DE8;
  if (!qword_3B2DE8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for HeaderButtonItem.ButtonStyle);
    atomic_store(result, (unint64_t *)&qword_3B2DE8);
  }
  return result;
}

unint64_t sub_55E94()
{
  unint64_t result;

  result = qword_3B2DF0;
  if (!qword_3B2DF0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SearchHintsPageIntent);
    atomic_store(result, (unint64_t *)&qword_3B2DF0);
  }
  return result;
}

unint64_t sub_55ED8()
{
  unint64_t result;

  result = qword_3B2DF8;
  if (!qword_3B2DF8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SearchLandingPageIntent);
    atomic_store(result, (unint64_t *)&qword_3B2DF8);
  }
  return result;
}

unint64_t sub_55F1C()
{
  unint64_t result;

  result = qword_3B2E08;
  if (!qword_3B2E08)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for FromChannelShelvesIntent);
    atomic_store(result, (unint64_t *)&qword_3B2E08);
  }
  return result;
}

unint64_t sub_55F60()
{
  unint64_t result;

  result = qword_3B2E10;
  if (!qword_3B2E10)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Color);
    atomic_store(result, (unint64_t *)&qword_3B2E10);
  }
  return result;
}

unint64_t sub_55FA4()
{
  unint64_t result;

  result = qword_3B2E20;
  if (!qword_3B2E20)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AdamID);
    atomic_store(result, (unint64_t *)&qword_3B2E20);
  }
  return result;
}

unint64_t sub_55FE8()
{
  unint64_t result;

  result = qword_3B2E50;
  if (!qword_3B2E50)
  {
    result = swift_getWitnessTable(&unk_2ED75C);
    atomic_store(result, (unint64_t *)&qword_3B2E50);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for HeaderButtonItem.ModelType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_56078 + 4 * byte_2ED37B[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_560AC + 4 * byte_2ED376[v4]))();
}

uint64_t sub_560AC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_560B4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x560BCLL);
  return result;
}

uint64_t sub_560C8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x560D0);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_560D4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_560DC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HeaderButtonItem.ModelType()
{
  return &type metadata for HeaderButtonItem.ModelType;
}

unint64_t sub_560FC()
{
  unint64_t result;

  result = qword_3B2E58;
  if (!qword_3B2E58)
  {
    result = swift_getWitnessTable(&unk_2ED734);
    atomic_store(result, (unint64_t *)&qword_3B2E58);
  }
  return result;
}

unint64_t sub_56140()
{
  unint64_t result;

  result = qword_3B2E60;
  if (!qword_3B2E60)
  {
    result = swift_getWitnessTable(&unk_2ED6BC);
    atomic_store(result, (unint64_t *)&qword_3B2E60);
  }
  return result;
}

unint64_t sub_56184(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_373370, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 8)
    return 8;
  else
    return v3;
}

uint64_t dispatch thunk of LibraryRemovalControllerProtocol.removeShowFromLibraryAlertController(uuid:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of LibraryRemovalControllerProtocol.unsaveAllConfirmationSheet(uuid:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t dispatch thunk of AccountPresenterView.authenticating.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of Observer.didChange.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of EpisodeControllerProtocol.preflight(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of LibraryActionControllerProtocol.turnOnAutoDownloads(podcast:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 64))();
}

uint64_t dispatch thunk of LibraryActionControllerProtocol.turnOnAutoDownloads(offer:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 72))();
}

uint64_t dispatch thunk of MetricsPagePresenter.pageEnterGate.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 80))();
}

uint64_t dispatch thunk of LibraryActionControllerProtocol.turnOffAutoDownloads(offer:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 88))();
}

uint64_t dispatch thunk of StoreDataProvider.fetchHighlightsPage(for:resourceUrls:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 96))();
}

uint64_t dispatch thunk of EpisodeControllerProtocol.play(storeShowId:sender:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 104))();
}

uint64_t dispatch thunk of LibraryActionControllerProtocol.resetDark(podcast:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 112))();
}

uint64_t dispatch thunk of StoreDataProvider.fetchListenNowFooter(for:suppressInlineCategoriesModule:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 120))();
}

uint64_t dispatch thunk of LibraryDataProviderProtocol.fetchEpisode(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 128))();
}

uint64_t dispatch thunk of ModernPagePresenter.animateSectionChanges.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 136))();
}

uint64_t dispatch thunk of LibraryActionControllerProtocol.updateFeedForStorePageLoadedOnlyIfImplicitlyFollowed(podcast:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 144))();
}

uint64_t dispatch thunk of LibraryDataProviderProtocol.episodeUuid(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 152))();
}

uint64_t dispatch thunk of StoreDataProvider.fetchProductPageHeaderAndFooter(for:ignoreCache:personalizedHint:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 160))();
}

uint64_t dispatch thunk of StoreDataProvider.fetchGroupedSearchResults(term:facets:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 168))();
}

uint64_t dispatch thunk of ModernPagePresenter.init(asPartOf:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 176))();
}

uint64_t dispatch thunk of ModernPagePresenter.dependenciesDidChange(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 184))();
}

uint64_t dispatch thunk of LibraryActionControllerProtocol.changeOrder(shows:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 192))();
}

uint64_t DismissInlineModuleAction.actionMetrics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for ActionMetrics(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t FavoriteInterestAction.adamID.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for FavoriteInterestAction(0) + 20));
}

uint64_t type metadata accessor for FavoriteInterestAction(uint64_t a1)
{
  uint64_t result;

  result = qword_3B2EC0;
  if (!qword_3B2EC0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for FavoriteInterestAction);
  return result;
}

uint64_t FavoriteInterestAction.init(adamID:actionMetrics:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t result;

  v6 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a3, a2, v6);
  result = type metadata accessor for FavoriteInterestAction(0);
  *(_QWORD *)(a3 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for FavoriteInterestAction(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v8);
  }
  else
  {
    v7 = type metadata accessor for ActionMetrics(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

uint64_t destroy for FavoriteInterestAction(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ActionMetrics(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t initializeWithCopy for FavoriteInterestAction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithCopy for FavoriteInterestAction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t initializeWithTake for FavoriteInterestAction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for FavoriteInterestAction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t getEnumTagSinglePayload for FavoriteInterestAction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_565A8);
}

uint64_t sub_565A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ActionMetrics(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for FavoriteInterestAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_565F0);
}

uint64_t sub_565F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ActionMetrics(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_56630(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for ActionMetrics(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t ActionRunnerOptions.__allocating_init()()
{
  return BaseObjectGraph.__allocating_init(name:_:)(0xD000000000000015, 0x800000000030B220, &_swiftEmptyArrayStorage);
}

uint64_t _s8ShelfKit19ActionRunnerOptionsC04withC6OriginyACXDAA0cG0VSgF_0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  _OWORD v12[2];
  uint64_t v13;

  v2 = type metadata accessor for Dependency(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_267BC(a1, (uint64_t)&v9, &qword_3B18E8);
  if (*((_QWORD *)&v10 + 1) == 1)
  {
    sub_569C4((uint64_t)&v9);
    return dispatch thunk of BaseObjectGraph.subtracting(dependencyFor:)(&type metadata for ActionOrigin);
  }
  else
  {
    v12[0] = v9;
    v12[1] = v10;
    v13 = v11;
    sub_23704((uint64_t)v12, (uint64_t)&v9);
    Dependency.init<A>(satisfying:with:)(&type metadata for ActionOrigin, &v9, &type metadata for ActionOrigin);
    v6 = dispatch thunk of BaseObjectGraph.adding(dependency:)(v5);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    sub_23774((uint64_t)v12);
  }
  return v6;
}

uint64_t ActionRunnerOptions.__allocating_init(name:dependencies:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;

  v7 = type metadata accessor for DependencyDictionary(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a3, v7);
  v11 = BaseObjectGraph.init(name:dependencies:)(a1, a2, v10);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a3, v7);
  return v11;
}

uint64_t ActionRunnerOptions.init(name:dependencies:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;

  v6 = type metadata accessor for DependencyDictionary(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a3, v6);
  v10 = BaseObjectGraph.init(name:dependencies:)(a1, a2, v9);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a3, v6);
  return v10;
}

uint64_t ActionRunnerOptions.__deallocating_deinit()
{
  uint64_t v0;

  v0 = _s8ShelfKit19ActionRunnerOptionsCfd_0();
  return swift_deallocClassInstance(v0, 16, 7);
}

uint64_t ActionRunnerOptions.withActionOrigin(sender:view:)(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  _BYTE v6[32];
  void *v7;

  sub_267BC(a1, (uint64_t)v6, (uint64_t *)&unk_3BC540);
  v7 = a2;
  v3 = a2;
  v4 = _s8ShelfKit19ActionRunnerOptionsC04withC6OriginyACXDAA0cG0VSgF_0((uint64_t)v6);
  sub_569C4((uint64_t)v6);
  return v4;
}

uint64_t sub_569C4(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B18E8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t ActionRunnerOptions.withFlowTransitionSource(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  v2 = type metadata accessor for Dependency(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for FlowTransitionSource();
  v7 = v6;
  if (!a1)
    return dispatch thunk of BaseObjectGraph.subtracting(dependencyFor:)(v6);
  v11 = a1;
  swift_retain(a1);
  Dependency.init<A>(satisfying:with:)(v7, &v11, v7);
  v8 = dispatch thunk of BaseObjectGraph.adding(dependency:)(v5);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v8;
}

uint64_t ActionRunnerOptions.withFlowTransitionSource(view:)(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v12;
  _BYTE v13[24];

  v3 = type metadata accessor for Dependency(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (a1)
  {
    v7 = type metadata accessor for FlowTransitionSource();
    v8 = swift_allocObject(v7, 24, 7);
    v9 = swift_unknownObjectWeakInit(v8 + 16, 0);
    swift_beginAccess(v9, v13, 1, 0);
    swift_unknownObjectWeakAssign(v8 + 16, a1);
    v12 = v8;
    v10 = a1;
    swift_retain(v8);
    Dependency.init<A>(satisfying:with:)(v7, &v12, v7);
    v1 = dispatch thunk of BaseObjectGraph.adding(dependency:)(v6);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);

    swift_release(v8);
  }
  else
  {
    swift_retain(v1);
  }
  return v1;
}

uint64_t type metadata accessor for ActionRunnerOptions(uint64_t a1)
{
  uint64_t result;

  result = qword_3B2EF8;
  if (!qword_3B2EF8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ActionRunnerOptions);
  return result;
}

uint64_t sub_56C38(uint64_t a1)
{
  _BYTE v2[8];

  return swift_initClassMetadata2(a1, 0, 0, v2, a1 + class metadata base offset for ActionRunnerOptions);
}

uint64_t sub_56C74()
{
  return type metadata accessor for ActionRunnerOptions(0);
}

uint64_t HeaderButtonTipProvider.__allocating_init(asPartOf:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = swift_allocObject(v1, 64, 7);
  *(_QWORD *)(v3 + 56) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for TipViewControllerProvider()), "init");
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BC3F0);
  BaseObjectGraph.inject<A>(_:)((_QWORD *)(v3 + 16), v4, v4);
  swift_release(a1);
  return v3;
}

uint64_t HeaderButtonTipProvider.init(asPartOf:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  __int128 v6[2];

  v2 = v1;
  *(_QWORD *)(v2 + 56) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for TipViewControllerProvider()), "init");
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BC3F0);
  BaseObjectGraph.inject<A>(_:)(v6, v4, v4);
  swift_release(a1);
  sub_F4D8(v6, v2 + 16);
  return v2;
}

void sub_56D6C()
{
  sub_57014();
}

id sub_56D88(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v11;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B9BB0);
  __chkstk_darwin(v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!sub_56E80())
    return 0;
  v5 = sub_57418();
  v6 = enum case for TipType.follow(_:);
  v7 = type metadata accessor for TipType(0);
  v8 = *(_QWORD *)(v7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 104))(v4, v6, v7);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v4, 0, 1, v7);
  v9 = sub_105488(v5, (uint64_t)v4, a1);

  sub_57698((uint64_t)v4);
  return v9;
}

BOOL sub_56E80()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  NSString v7;
  unsigned __int8 v8;
  uint64_t v9;
  void *v11;
  Class isa;
  id v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = v0;
  v2 = type metadata accessor for Date(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "_applePodcastsFoundationSharedUserDefaults");
  v7 = String._bridgeToObjectiveC()();
  v8 = objc_msgSend(v6, "BOOLForKey:", v7);

  if ((v8 & 1) != 0)
    return 0;
  Date.init(timeIntervalSinceReferenceDate:)(v9);
  v11 = (void *)objc_opt_self(MTPodcast);
  isa = Date._bridgeToObjectiveC()().super.isa;
  v13 = objc_msgSend(v11, "predicateForPodcastsFollowedSince:", isa);

  v14 = v1 + 2;
  v16 = v1[5];
  v15 = v1[6];
  __swift_project_boxed_opaque_existential_1(v14, v16);
  v17 = (*(uint64_t (**)(id, uint64_t, uint64_t))(v15 + 480))(v13, v16, v15);

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v17 == 0;
}

void sub_56FF8()
{
  sub_57014();
}

void sub_57014()
{
  id v0;
  id v1;

  v0 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "_applePodcastsFoundationSharedUserDefaults");
  v1 = String._bridgeToObjectiveC()();
  objc_msgSend(v0, "setBool:forKey:", 1, v1);

}

id sub_57098(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  id v5;
  NSString v6;
  unsigned __int8 v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B9BB0);
  __chkstk_darwin(v2);
  v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "_applePodcastsFoundationSharedUserDefaults");
  v6 = String._bridgeToObjectiveC()();
  v7 = objc_msgSend(v5, "BOOLForKey:", v6);

  if ((v7 & 1) != 0)
    return 0;
  v9 = sub_576D8();
  v10 = enum case for TipType.favorite(_:);
  v11 = type metadata accessor for TipType(0);
  v12 = *(_QWORD *)(v11 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 104))(v4, v10, v11);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v4, 0, 1, v11);
  v8 = sub_105488(v9, (uint64_t)v4, a1);

  sub_57698((uint64_t)v4);
  return v8;
}

uint64_t HeaderButtonTipProvider.deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1((_QWORD *)(v0 + 16));

  return v0;
}

uint64_t HeaderButtonTipProvider.__deallocating_deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1((_QWORD *)(v0 + 16));

  return swift_deallocClassInstance(v0, 64, 7);
}

id sub_57240(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v11;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B9BB0);
  __chkstk_darwin(v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!sub_56E80())
    return 0;
  v5 = sub_57418();
  v6 = enum case for TipType.follow(_:);
  v7 = type metadata accessor for TipType(0);
  v8 = *(_QWORD *)(v7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 104))(v4, v6, v7);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v4, 0, 1, v7);
  v9 = sub_105488(v5, (uint64_t)v4, a1);

  sub_57698((uint64_t)v4);
  return v9;
}

id sub_5733C(uint64_t a1)
{
  return sub_57098(a1);
}

void sub_5735C()
{
  sub_57394();
}

void sub_57378()
{
  sub_57394();
}

void sub_57394()
{
  id v0;
  id v1;

  v0 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "_applePodcastsFoundationSharedUserDefaults");
  v1 = String._bridgeToObjectiveC()();
  objc_msgSend(v0, "setBool:forKey:", 1, v1);

}

id sub_57418()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  void *v3;
  id v4;
  Swift::String v5;
  Swift::String v6;
  void *object;
  id v8;
  Swift::String v9;
  Swift::String v10;
  void *v11;
  id v12;
  NSString v13;
  NSString v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  NSURL *v19;
  void *v20;
  void *v21;
  uint64_t v23;
  Swift::String v24;
  Swift::String v25;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
  __chkstk_darwin(v0);
  v2 = (char *)&v23 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = (void *)objc_opt_self(NSBundle);
  v4 = objc_msgSend(v3, "mainBundle");
  v24._object = (void *)0xE000000000000000;
  v5._object = (void *)0x800000000030B370;
  v5._countAndFlagsBits = 0xD000000000000010;
  v6._countAndFlagsBits = 0;
  v6._object = (void *)0xE000000000000000;
  v24._countAndFlagsBits = 0;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v5, (Swift::String_optional)0, (NSBundle)v4, v6, v24)._object;

  v8 = objc_msgSend(v3, "mainBundle");
  v9._countAndFlagsBits = 0xD000000000000013;
  v25._object = (void *)0xE000000000000000;
  v9._object = (void *)0x800000000030B390;
  v10._countAndFlagsBits = 0;
  v10._object = (void *)0xE000000000000000;
  v25._countAndFlagsBits = 0;
  v11 = NSLocalizedString(_:tableName:bundle:value:comment:)(v9, (Swift::String_optional)0, (NSBundle)v8, v10, v25)._object;

  v12 = objc_allocWithZone((Class)AMSDialogRequest);
  v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v11);
  v15 = objc_msgSend(v12, "initWithTitle:message:", v13, v14);

  objc_msgSend(v15, "setStyle:", 4);
  v16 = objc_msgSend((id)objc_opt_self(AMSDialogAction), "actionWithTitle:style:", 0, 2);
  objc_msgSend(v15, "addButtonAction:", v16);
  URL.init(string:)(0xD00000000000001ELL, 0x800000000030B3B0);
  v17 = type metadata accessor for URL(0);
  v18 = *(_QWORD *)(v17 - 8);
  v20 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v2, 1, v17) != 1)
  {
    URL._bridgeToObjectiveC()(v19);
    v20 = v21;
    (*(void (**)(char *, uint64_t))(v18 + 8))(v2, v17);
  }
  objc_msgSend(v15, "setIconURL:", v20);

  return v15;
}

uint64_t sub_57698(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B9BB0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id sub_576D8()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  void *v3;
  id v4;
  Swift::String v5;
  Swift::String v6;
  void *object;
  id v8;
  Swift::String v9;
  Swift::String v10;
  void *v11;
  id v12;
  NSString v13;
  NSString v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  NSURL *v19;
  void *v20;
  void *v21;
  uint64_t v23;
  Swift::String v24;
  Swift::String v25;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
  __chkstk_darwin(v0);
  v2 = (char *)&v23 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = (void *)objc_opt_self(NSBundle);
  v4 = objc_msgSend(v3, "mainBundle");
  v24._object = (void *)0xE000000000000000;
  v5._object = (void *)0x800000000030B300;
  v5._countAndFlagsBits = 0xD000000000000012;
  v6._countAndFlagsBits = 0;
  v6._object = (void *)0xE000000000000000;
  v24._countAndFlagsBits = 0;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v5, (Swift::String_optional)0, (NSBundle)v4, v6, v24)._object;

  v8 = objc_msgSend(v3, "mainBundle");
  v9._countAndFlagsBits = 0xD000000000000020;
  v25._object = (void *)0xE000000000000000;
  v9._object = (void *)0x800000000030B320;
  v10._countAndFlagsBits = 0;
  v10._object = (void *)0xE000000000000000;
  v25._countAndFlagsBits = 0;
  v11 = NSLocalizedString(_:tableName:bundle:value:comment:)(v9, (Swift::String_optional)0, (NSBundle)v8, v10, v25)._object;

  v12 = objc_allocWithZone((Class)AMSDialogRequest);
  v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v11);
  v15 = objc_msgSend(v12, "initWithTitle:message:", v13, v14);

  objc_msgSend(v15, "setStyle:", 4);
  v16 = objc_msgSend((id)objc_opt_self(AMSDialogAction), "actionWithTitle:style:", 0, 2);
  objc_msgSend(v15, "addButtonAction:", v16);
  URL.init(string:)(0xD000000000000012, 0x800000000030B350);
  v17 = type metadata accessor for URL(0);
  v18 = *(_QWORD *)(v17 - 8);
  v20 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v2, 1, v17) != 1)
  {
    URL._bridgeToObjectiveC()(v19);
    v20 = v21;
    (*(void (**)(char *, uint64_t))(v18 + 8))(v2, v17);
  }
  objc_msgSend(v15, "setIconURL:", v20);

  return v15;
}

uint64_t dispatch thunk of StoreViewControllerLifecycleObserver.observe(lifecycleEvent:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of HeaderButtonTipProviderProtocol.favoriteBubbleTipController(metricsController:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of Observer.didChange.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t type metadata accessor for HeaderButtonTipProvider()
{
  return objc_opt_self(_TtC8ShelfKit23HeaderButtonTipProvider);
}

uint64_t method lookup function for HeaderButtonTipProvider(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for HeaderButtonTipProvider);
}

uint64_t dispatch thunk of HeaderButtonTipProvider.__allocating_init(asPartOf:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of HeaderButtonTipProvider.markFollowTipAsPresented()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of HeaderButtonTipProvider.followBubbleTipController(metricsController:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of HeaderButtonTipProvider.markFavoriteTipAsPresented()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of HeaderButtonTipProvider.favoriteBubbleTipController(metricsController:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t StationDetail.artwork.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_14554(v1 + OBJC_IVAR____TtC8ShelfKit13StationDetail_artwork, a1);
}

void StationDetail.sortOrder.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + OBJC_IVAR____TtC8ShelfKit13StationDetail_sortOrder);
}

uint64_t StationDetail.grouped.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8ShelfKit13StationDetail_grouped);
}

uint64_t StationDetail.hidePlayedEpisodes.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8ShelfKit13StationDetail_hidePlayedEpisodes);
}

uint64_t sub_57A20()
{
  return sub_57AEC(&OBJC_IVAR____TtC8ShelfKit13StationDetail_episodes);
}

uint64_t sub_57A2C(uint64_t a1)
{
  return sub_57B3C(a1, &OBJC_IVAR____TtC8ShelfKit13StationDetail_episodes);
}

uint64_t (*sub_57A38(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC8ShelfKit13StationDetail_episodes, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t sub_57A7C(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  _BYTE v9[24];

  v5 = *a1;
  v6 = (uint64_t *)(*a2 + *a5);
  swift_beginAccess(v6, v9, 1, 0);
  v7 = *v6;
  *v6 = v5;
  swift_bridgeObjectRetain(v5);
  return swift_bridgeObjectRelease(v7);
}

uint64_t sub_57AE0()
{
  return sub_57AEC(&OBJC_IVAR____TtC8ShelfKit13StationDetail_shows);
}

uint64_t sub_57AEC(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  _BYTE v4[24];

  v2 = (_QWORD *)(v1 + *a1);
  swift_beginAccess(v2, v4, 0, 0);
  return swift_bridgeObjectRetain(*v2);
}

uint64_t sub_57B30(uint64_t a1)
{
  return sub_57B3C(a1, &OBJC_IVAR____TtC8ShelfKit13StationDetail_shows);
}

uint64_t sub_57B3C(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  _BYTE v7[24];

  v4 = (uint64_t *)(v2 + *a2);
  swift_beginAccess(v4, v7, 1, 0);
  v5 = *v4;
  *v4 = a1;
  return swift_bridgeObjectRelease(v5);
}

uint64_t (*sub_57B88(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC8ShelfKit13StationDetail_shows, a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t sub_57BCC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[24];
  _QWORD *v17;
  _BYTE v18[24];

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC8ShelfKit13StationDetail_shows);
  swift_beginAccess(v0 + OBJC_IVAR____TtC8ShelfKit13StationDetail_shows, v18, 0, 0);
  v2 = *v1;
  if (!v2)
    return 0;
  v17 = &_swiftEmptyArrayStorage;
  if ((unint64_t)v2 >> 62)
  {
    if (v2 >= 0)
      v15 = v2 & 0xFFFFFFFFFFFFFF8;
    else
      v15 = v2;
    swift_bridgeObjectRetain(v2);
    result = _CocoaArrayWrapper.endIndex.getter(v15);
    v3 = result;
    if (!result)
      goto LABEL_20;
  }
  else
  {
    v3 = *(_QWORD *)((char *)&dword_10 + (v2 & 0xFFFFFFFFFFFFFF8));
    result = swift_bridgeObjectRetain(v2);
    if (!v3)
      goto LABEL_20;
  }
  if (v3 < 1)
  {
    __break(1u);
    return result;
  }
  if ((v2 & 0xC000000000000001) != 0)
  {
    for (i = 0; i != v3; ++i)
    {
      v8 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v2);
      v9 = swift_beginAccess(v8 + 56, v16, 0, 0);
      if (*(uint64_t *)(v8 + 56) >= 1)
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v9);
        v6 = v17[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v6);
        v7 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v6, v8);
        specialized ContiguousArray._endMutation()(v7);
      }
      else
      {
        swift_unknownObjectRelease(v8);
      }
    }
  }
  else
  {
    v10 = (uint64_t *)(v2 + 32);
    do
    {
      v11 = *v10;
      swift_beginAccess(*v10 + 56, v16, 0, 0);
      if (*(uint64_t *)(v11 + 56) >= 1)
      {
        v12 = swift_retain(v11);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v12);
        v13 = v17[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v13);
        v14 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v13, v11);
        specialized ContiguousArray._endMutation()(v14);
      }
      ++v10;
      --v3;
    }
    while (v3);
  }
LABEL_20:
  swift_bridgeObjectRelease(v2);
  return (uint64_t)v17;
}

uint64_t StationDetail.episodeCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit13StationDetail_episodeCount);
}

uint64_t StationDetail.showCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit13StationDetail_showCount);
}

uint64_t StationDetail.unplayedCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit13StationDetail_unplayedCount);
}

void StationDetail.type.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + OBJC_IVAR____TtC8ShelfKit13StationDetail_type);
}

void *StationDetail.predicateForEpisodes.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC8ShelfKit13StationDetail_predicateForEpisodes);
  v2 = v1;
  return v1;
}

id StationDetail.objectID.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC8ShelfKit13StationDetail_objectID);
}

uint64_t StationDetail.dateCreated.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC8ShelfKit13StationDetail_dateCreated;
  v4 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t StationDetail.__allocating_init(uuid:type:title:artwork:sortOrder:grouped:hidePlayedEpisodes:episodeCount:showCount:unplayedCount:episodes:shows:predicateForEpisodes:objectID:dateCreated:)(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, char *a7, char a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;
  uint64_t v24;

  v24 = swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
  StationDetail.init(uuid:type:title:artwork:sortOrder:grouped:hidePlayedEpisodes:episodeCount:showCount:unplayedCount:episodes:shows:predicateForEpisodes:objectID:dateCreated:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
  return v24;
}

_QWORD *StationDetail.init(uuid:type:title:artwork:sortOrder:grouped:hidePlayedEpisodes:episodeCount:showCount:unplayedCount:episodes:shows:predicateForEpisodes:objectID:dateCreated:)(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, char *a7, char a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  _QWORD *v17;
  char v19;
  uint64_t *v20;
  uint64_t *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char v28[24];
  char v29[24];

  v19 = *a3;
  v20 = (_QWORD *)((char *)v17 + OBJC_IVAR____TtC8ShelfKit13StationDetail_episodes);
  *(_QWORD *)((char *)v17 + OBJC_IVAR____TtC8ShelfKit13StationDetail_episodes) = 0;
  v21 = (_QWORD *)((char *)v17 + OBJC_IVAR____TtC8ShelfKit13StationDetail_shows);
  *(_QWORD *)((char *)v17 + OBJC_IVAR____TtC8ShelfKit13StationDetail_shows) = 0;
  v17[2] = a1;
  v17[3] = a2;
  *((_BYTE *)v17 + OBJC_IVAR____TtC8ShelfKit13StationDetail_type) = v19;
  v22 = *a7;
  v17[4] = a4;
  v17[5] = a5;
  sub_58F4C(a6, (uint64_t)v17 + OBJC_IVAR____TtC8ShelfKit13StationDetail_artwork);
  *((_BYTE *)v17 + OBJC_IVAR____TtC8ShelfKit13StationDetail_sortOrder) = v22;
  *((_BYTE *)v17 + OBJC_IVAR____TtC8ShelfKit13StationDetail_grouped) = a8;
  *((_BYTE *)v17 + OBJC_IVAR____TtC8ShelfKit13StationDetail_hidePlayedEpisodes) = a9;
  *(_QWORD *)((char *)v17 + OBJC_IVAR____TtC8ShelfKit13StationDetail_episodeCount) = a10;
  *(_QWORD *)((char *)v17 + OBJC_IVAR____TtC8ShelfKit13StationDetail_showCount) = a11;
  *(_QWORD *)((char *)v17 + OBJC_IVAR____TtC8ShelfKit13StationDetail_unplayedCount) = a12;
  swift_beginAccess(v20, v29, 1, 0);
  v23 = *v20;
  *v20 = a13;
  swift_bridgeObjectRelease(v23);
  swift_beginAccess(v21, v28, 1, 0);
  v24 = *v21;
  *v21 = a14;
  swift_bridgeObjectRelease(v24);
  *(_QWORD *)((char *)v17 + OBJC_IVAR____TtC8ShelfKit13StationDetail_predicateForEpisodes) = a15;
  *(_QWORD *)((char *)v17 + OBJC_IVAR____TtC8ShelfKit13StationDetail_objectID) = a16;
  v25 = (char *)v17 + OBJC_IVAR____TtC8ShelfKit13StationDetail_dateCreated;
  v26 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v25, a17, v26);
  return v17;
}

void sub_580CC(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = v2[2];
  v5 = v2[3];
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(a1, v4, v5);
  swift_bridgeObjectRelease(v5);
  v6 = v2[4];
  v7 = v2[5];
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(a1, v6, v7);
  swift_bridgeObjectRelease(v7);
  Hasher._combine(_:)(*(_QWORD *)((char *)v2 + OBJC_IVAR____TtC8ShelfKit13StationDetail_episodeCount));
  Hasher._combine(_:)(*(_QWORD *)((char *)v2 + OBJC_IVAR____TtC8ShelfKit13StationDetail_unplayedCount));
}

uint64_t sub_58160@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v2 = v1;
  v28 = a1;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
  __chkstk_darwin(v3);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(void **)((char *)v2 + OBJC_IVAR____TtC8ShelfKit13StationDetail_objectID);
  v15 = objc_msgSend(v14, "URIRepresentation");
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v15);

  v17 = URL.absoluteString.getter(v16);
  v26 = v18;
  v27 = v17;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  v19 = v2[2];
  v20 = v2[3];
  v21 = v2[4];
  v22 = v2[5];
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, (uint64_t)v2 + OBJC_IVAR____TtC8ShelfKit13StationDetail_dateCreated, v6);
  LOBYTE(v6) = *((_BYTE *)v2 + OBJC_IVAR____TtC8ShelfKit13StationDetail_hidePlayedEpisodes);
  sub_14554((uint64_t)v2 + OBJC_IVAR____TtC8ShelfKit13StationDetail_artwork, (uint64_t)v5);
  swift_bridgeObjectRetain(v20);
  v23 = v14;
  swift_bridgeObjectRetain(v22);
  return StationEntity.init(id:uuid:objectID:title:dateCreated:showUnplayedEpisodes:artworkModel:artworkData:)(v27, v26, v19, v20, v14, v21, v22, v9, (v6 & 1) == 0, v5, 0, 0xF000000000000000);
}

uint64_t StationDetail.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  sub_59040(v0 + OBJC_IVAR____TtC8ShelfKit13StationDetail_artwork);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit13StationDetail_episodes));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit13StationDetail_shows));

  v1 = v0 + OBJC_IVAR____TtC8ShelfKit13StationDetail_dateCreated;
  v2 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t StationDetail.__deallocating_deinit()
{
  uint64_t v0;

  StationDetail.deinit();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

Swift::Int sub_58404()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[9];

  v1 = v0;
  Hasher.init(_seed:)(v7);
  v2 = v0[2];
  v3 = v1[3];
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(v7, v2, v3);
  swift_bridgeObjectRelease(v3);
  v4 = v1[4];
  v5 = v1[5];
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  Hasher._combine(_:)(*(_QWORD *)((char *)v1 + OBJC_IVAR____TtC8ShelfKit13StationDetail_episodeCount));
  Hasher._combine(_:)(*(_QWORD *)((char *)v1 + OBJC_IVAR____TtC8ShelfKit13StationDetail_unplayedCount));
  return Hasher._finalize()();
}

Swift::Int sub_584B8()
{
  return sub_58404();
}

void sub_584D8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v3[3];
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(a1, v4, v5);
  swift_bridgeObjectRelease(v5);
  v6 = v3[4];
  v7 = v3[5];
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(a1, v6, v7);
  swift_bridgeObjectRelease(v7);
  Hasher._combine(_:)(*(_QWORD *)((char *)v3 + OBJC_IVAR____TtC8ShelfKit13StationDetail_episodeCount));
  Hasher._combine(_:)(*(_QWORD *)((char *)v3 + OBJC_IVAR____TtC8ShelfKit13StationDetail_unplayedCount));
}

Swift::Int sub_5856C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7);
  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 16);
  v3 = *(_QWORD *)(*v0 + 24);
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(v7, v2, v3);
  swift_bridgeObjectRelease(v3);
  v4 = *(_QWORD *)(v1 + 32);
  v5 = *(_QWORD *)(v1 + 40);
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  Hasher._combine(_:)(*(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit13StationDetail_episodeCount));
  Hasher._combine(_:)(*(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit13StationDetail_unplayedCount));
  return Hasher._finalize()();
}

BOOL sub_58618(_QWORD **a1, _QWORD **a2)
{
  return _s8ShelfKit13StationDetailC2eeoiySbAC_ACtFZ_0(*a1, *a2);
}

void static StationSortOrder.default.getter(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

void StationSortOrder.displayTitle.getter()
{
  __asm { BR              X10 }
}

uint64_t sub_58668()
{
  id v0;
  Swift::String v1;
  Swift::String v2;
  uint64_t countAndFlagsBits;
  Swift::String v5;

  v0 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v1._countAndFlagsBits = 0xD00000000000001ALL;
  v5._object = (void *)0xE000000000000000;
  v1._object = (void *)0x800000000030B3D0;
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  v5._countAndFlagsBits = 0;
  countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v1, (Swift::String_optional)0, (NSBundle)v0, v2, v5)._countAndFlagsBits;

  return countAndFlagsBits;
}

uint64_t StationSortOrder.artwork(currentSort:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 *v2;
  uint64_t v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  id v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  uint64_t countAndFlagsBits;
  void *object;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  uint64_t v23;
  Swift::String v24;
  Swift::String v25;

  v4 = *a1;
  v5 = *v2;
  if ((_DWORD)v4 != 4 && (_DWORD)v4 != 1)
  {
LABEL_12:
    if ((((_BYTE)v4 - 3) & 0xFD) != 0)
      goto LABEL_13;
    goto LABEL_17;
  }
  if (v5 == 3)
  {
    v7 = 1;
    if ((_DWORD)v4 != 3)
      goto LABEL_11;
  }
  else
  {
    if (v5 == 5)
    {
      if ((_DWORD)v4 == 3)
      {
LABEL_13:
        v8 = type metadata accessor for ArtworkModel(0);
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(a2, 1, 1, v8);
      }
      v7 = 4;
LABEL_11:
      if (v7 != v4)
        goto LABEL_12;
LABEL_16:
      v10 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v24._object = (void *)0xE000000000000000;
      v11._object = (void *)0x800000000030B490;
      v11._countAndFlagsBits = 0xD000000000000021;
      v12._countAndFlagsBits = 0;
      v12._object = (void *)0xE000000000000000;
      v24._countAndFlagsBits = 0;
      v13 = NSLocalizedString(_:tableName:bundle:value:comment:)(v11, (Swift::String_optional)0, (NSBundle)v10, v12, v24);
      countAndFlagsBits = v13._countAndFlagsBits;
      object = v13._object;

      v16 = 0xEC0000006E776F64;
      goto LABEL_30;
    }
    v7 = *v2;
    if ((_DWORD)v4 != 3)
      goto LABEL_11;
  }
  if (v7 == 1)
    goto LABEL_16;
LABEL_17:
  v17 = 1;
  if (v5 != 3)
    v17 = *v2;
  if (v5 == 5)
    v18 = 4;
  else
    v18 = v17;
  if ((_DWORD)v4 == 3)
  {
    if (v18 != 1)
      goto LABEL_13;
  }
  else if ((_DWORD)v4 == 5)
  {
    if (v18 != 4)
      goto LABEL_13;
  }
  else if (v18 != v4)
  {
    goto LABEL_13;
  }
  v19 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v25._object = (void *)0xE000000000000000;
  v20._object = (void *)0x800000000030B460;
  v20._countAndFlagsBits = 0xD000000000000021;
  v21._countAndFlagsBits = 0;
  v21._object = (void *)0xE000000000000000;
  v25._countAndFlagsBits = 0;
  v22 = NSLocalizedString(_:tableName:bundle:value:comment:)(v20, (Swift::String_optional)0, (NSBundle)v19, v21, v25);
  countAndFlagsBits = v22._countAndFlagsBits;
  object = v22._object;

  v16 = 0xEA00000000007075;
LABEL_30:
  ArtworkModel.init(glyphName:accessibilityTitle:isCustomSymbol:isMulticolorSymbol:)(0x2E6E6F7276656863, v16, countAndFlagsBits, object, 0, 0);
  v23 = type metadata accessor for ArtworkModel(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(a2, 0, 1, v23);
}

Swift::Bool __swiftcall StationSortOrder.isSelected(currentSort:)(ShelfKit::StationSortOrder currentSort)
{
  unsigned __int8 *v1;
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(unsigned __int8 *)currentSort;
  v3 = *v1;
  v4 = 1;
  if (v3 != 3)
    v4 = *v1;
  if (v3 == 5)
    v5 = 4;
  else
    v5 = v4;
  v6 = 1;
  if (v2 != 3)
    v6 = *(unsigned __int8 *)currentSort;
  if (v2 == 5)
    v7 = 4;
  else
    v7 = v6;
  return v5 == v7;
}

uint64_t StationSortOrder.episodeSort.getter()
{
  unsigned __int8 *v0;
  int v1;
  unsigned int v2;

  v1 = *v0;
  if (v1 == 3)
    v2 = 3;
  else
    v2 = 17;
  if (v1 == 1)
    return 2;
  else
    return v2;
}

Swift::Bool __swiftcall StationSortOrder.supportsUsingFRP(isGrouped:)(Swift::Bool isGrouped)
{
  _BYTE *v1;
  Swift::Bool v2;

  if (*v1)
    v2 = 1;
  else
    v2 = isGrouped;
  return *v1 != 2 && v2;
}

ShelfKit::StationSortOrder_optional __swiftcall StationSortOrder.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;

  v2 = 7;
  if ((unint64_t)rawValue < 7)
    v2 = rawValue;
  *v1 = v2;
  return (ShelfKit::StationSortOrder_optional)rawValue;
}

_UNKNOWN **static StationSortOrder.allCases.getter()
{
  return &off_373450;
}

ShelfKit::StationSortOrder_optional sub_58AF0(Swift::Int *a1)
{
  return StationSortOrder.init(rawValue:)(*a1);
}

void sub_58AF8(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1;
}

void sub_58B04(_QWORD *a1@<X8>)
{
  *a1 = &off_373450;
}

uint64_t FlowAction.__allocating_init(station:presentationContext:showChevron:)(_QWORD *a1, unsigned __int8 *a2, char a3)
{
  uint64_t v4;

  v4 = sub_59080(a1, a2, a3);
  swift_release(a1);
  return v4;
}

uint64_t Link.init(station:presentationContext:showChevron:)@<X0>(_QWORD *a1@<X0>, char *a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  char *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *boxed_opaque_existential_2Tm;
  uint64_t result;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  char *v54;
  char v55;
  char v56;
  uint64_t v57;
  char v58;

  v8 = type metadata accessor for ActionMetrics(0);
  __chkstk_darwin(v8);
  v54 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for FlowDestination(0);
  __chkstk_darwin(v10);
  v12 = (uint64_t *)((char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = *a2;
  v14 = *(_QWORD *)((char *)a1 + OBJC_IVAR____TtC8ShelfKit13StationDetail_episodeCount);
  if (v14 < 1)
  {
    v17 = 0;
    v19 = 0;
  }
  else
  {
    v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8E10);
    v16 = swift_allocObject(v15, 72, 7);
    *(_OWORD *)(v16 + 16) = xmmword_2EA0D0;
    *(_QWORD *)(v16 + 56) = &type metadata for Int;
    *(_QWORD *)(v16 + 64) = &protocol witness table for Int;
    *(_QWORD *)(v16 + 32) = v14;
    v17 = static String.localizedStringWithFormat(_:_:)(26917, 0xE200000000000000, v16);
    v19 = v18;
    swift_bridgeObjectRelease();
  }
  v48 = v17;
  if ((a3 & 1) != 0)
    v20 = 8;
  else
    v20 = 32;
  v53 = v20;
  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8730);
  v22 = swift_allocObject(v21, 96, 7);
  *(_OWORD *)(v22 + 16) = xmmword_2ED8E0;
  v23 = a1[3];
  *(_QWORD *)(v22 + 32) = a1[2];
  *(_QWORD *)(v22 + 40) = v23;
  v24 = a1[5];
  *(_QWORD *)(v22 + 48) = a1[4];
  *(_QWORD *)(v22 + 56) = v24;
  v58 = v20;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  *(_QWORD *)(v22 + 64) = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt8, &protocol witness table for UInt8);
  *(_QWORD *)(v22 + 72) = v25;
  v26 = 48;
  if (v19)
    v26 = v17;
  v27 = 0xE100000000000000;
  if (v19)
    v27 = v19;
  *(_QWORD *)(v22 + 80) = v26;
  *(_QWORD *)(v22 + 88) = v27;
  v57 = v22;
  swift_bridgeObjectRetain();
  v28 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3BC430);
  v29 = sub_32914((unint64_t *)&qword_3B3030, (uint64_t *)&unk_3BC430, (uint64_t)&protocol conformance descriptor for [A]);
  v30 = BidirectionalCollection<>.joined(separator:)(45, 0xE100000000000000, v28, v29);
  v51 = v31;
  v52 = v30;
  swift_bridgeObjectRelease();
  v32 = a1[4];
  v49 = a1[5];
  v50 = v32;
  v33 = (int *)type metadata accessor for Link(0);
  v34 = (char *)a4 + v33[7];
  swift_bridgeObjectRetain();
  ArtworkModel.init(glyphName:accessibilityTitle:isCustomSymbol:isMulticolorSymbol:)(0x7061687372616567, 0xE900000000000065, 0, 0, 0, 0);
  v35 = type metadata accessor for ArtworkModel(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v34, 0, 1, v35);
  v36 = (uint64_t *)((char *)a4 + v33[9]);
  *v12 = a1;
  swift_storeEnumTagMultiPayload(v12, v10, 13);
  v56 = v13;
  v55 = 0;
  v37 = swift_retain();
  v38 = (uint64_t)v54;
  static ActionMetrics.notInstrumented.getter(v37);
  v39 = type metadata accessor for FlowAction(0);
  swift_allocObject(v39, *(unsigned int *)(v39 + 48), *(unsigned __int16 *)(v39 + 52));
  v40 = FlowAction.init(_:id:title:presentationContext:animationBehavior:presentationStyle:destinationPageHeader:actionMetrics:)((uint64_t)v12, 0, 0, 0, 0, &v56, 0, 48, &v55, v38);
  v36[3] = v39;
  v36[4] = sub_F1C0((unint64_t *)&qword_3B0C40, (void (*)(uint64_t))type metadata accessor for FlowAction, (uint64_t)&protocol conformance descriptor for Action);
  *v36 = v40;
  v41 = (char *)a4 + v33[10];
  v42 = type metadata accessor for ImpressionMetrics(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v41, 1, 1, v42);
  v43 = (uint64_t *)((char *)a4 + v33[11]);
  v43[3] = type metadata accessor for StationEntity(0);
  v43[4] = sub_F1C0(&qword_3B3038, (void (*)(uint64_t))&type metadata accessor for StationEntity, (uint64_t)&protocol conformance descriptor for StationEntity);
  boxed_opaque_existential_2Tm = __swift_allocate_boxed_opaque_existential_2Tm(v43);
  sub_58160((uint64_t)boxed_opaque_existential_2Tm);
  result = swift_release(a1);
  v46 = v51;
  *a4 = v52;
  a4[1] = v46;
  v47 = v49;
  a4[2] = v50;
  a4[3] = v47;
  a4[4] = v48;
  a4[5] = v19;
  *((_BYTE *)a4 + v33[8]) = v53;
  return result;
}

uint64_t sub_58F4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

BOOL _s8ShelfKit13StationDetailC2eeoiySbAC_ACtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char v9;
  _BOOL8 result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;

  v4 = a1[2];
  v5 = a1[3];
  v6 = a2[2];
  v7 = a2[3];
  v8 = v4 == v6 && v5 == v7;
  if (v8 || (v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v6, v7, 0), result = 0, (v9 & 1) != 0))
  {
    v11 = a1[4];
    v12 = a1[5];
    v13 = a2[4];
    v14 = a2[5];
    if (v11 == v13 && v12 == v14)
      return *(_QWORD *)((char *)a1 + OBJC_IVAR____TtC8ShelfKit13StationDetail_episodeCount) == *(_QWORD *)((char *)a2 + OBJC_IVAR____TtC8ShelfKit13StationDetail_episodeCount)
          && *(_QWORD *)((char *)a1 + OBJC_IVAR____TtC8ShelfKit13StationDetail_unplayedCount) == *(_QWORD *)((char *)a2 + OBJC_IVAR____TtC8ShelfKit13StationDetail_unplayedCount);
    v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v12, v13, v14, 0);
    result = 0;
    if ((v16 & 1) != 0)
      return *(_QWORD *)((char *)a1 + OBJC_IVAR____TtC8ShelfKit13StationDetail_episodeCount) == *(_QWORD *)((char *)a2 + OBJC_IVAR____TtC8ShelfKit13StationDetail_episodeCount)
          && *(_QWORD *)((char *)a1 + OBJC_IVAR____TtC8ShelfKit13StationDetail_unplayedCount) == *(_QWORD *)((char *)a2 + OBJC_IVAR____TtC8ShelfKit13StationDetail_unplayedCount);
  }
  return result;
}

uint64_t sub_59040(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_59080(_QWORD *a1, unsigned __int8 *a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v33[4];
  int v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  uint64_t v39;
  char v40;

  v6 = type metadata accessor for ActionMetrics(0);
  __chkstk_darwin(v6);
  v8 = &v33[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v35 = type metadata accessor for FlowDestination(0);
  __chkstk_darwin(v35);
  v10 = &v33[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v34 = *a2;
  v11 = *(_QWORD *)((char *)a1 + OBJC_IVAR____TtC8ShelfKit13StationDetail_episodeCount);
  if (v11 < 1)
  {
    v14 = 0;
    v16 = 0;
  }
  else
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8E10);
    v13 = swift_allocObject(v12, 72, 7);
    *(_OWORD *)(v13 + 16) = xmmword_2EA0D0;
    *(_QWORD *)(v13 + 56) = &type metadata for Int;
    *(_QWORD *)(v13 + 64) = &protocol witness table for Int;
    *(_QWORD *)(v13 + 32) = v11;
    v14 = static String.localizedStringWithFormat(_:_:)(26917, 0xE200000000000000, v13);
    v16 = v15;
    swift_bridgeObjectRelease(v13);
  }
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8730);
  v18 = swift_allocObject(v17, 96, 7);
  *(_OWORD *)(v18 + 16) = xmmword_2ED8E0;
  v19 = a1[3];
  *(_QWORD *)(v18 + 32) = a1[2];
  *(_QWORD *)(v18 + 40) = v19;
  v20 = a1[4];
  v21 = a1[5];
  *(_QWORD *)(v18 + 48) = v20;
  *(_QWORD *)(v18 + 56) = v21;
  if ((a3 & 1) != 0)
    v22 = 8;
  else
    v22 = 32;
  v40 = v22;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v21);
  *(_QWORD *)(v18 + 64) = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt8, &protocol witness table for UInt8);
  *(_QWORD *)(v18 + 72) = v23;
  v24 = 48;
  if (v16)
    v24 = v14;
  v25 = 0xE100000000000000;
  if (v16)
    v25 = v16;
  *(_QWORD *)(v18 + 80) = v24;
  *(_QWORD *)(v18 + 88) = v25;
  v39 = v18;
  v26 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3BC430);
  v27 = sub_32914((unint64_t *)&qword_3B3030, (uint64_t *)&unk_3BC430, (uint64_t)&protocol conformance descriptor for [A]);
  v28 = BidirectionalCollection<>.joined(separator:)(45, 0xE100000000000000, v26, v27);
  v30 = v29;
  swift_bridgeObjectRelease(v18);
  *v10 = a1;
  swift_storeEnumTagMultiPayload(v10, v35, 13);
  v38 = v34;
  v37 = 0;
  swift_bridgeObjectRetain(v21);
  v31 = swift_retain(a1);
  static ActionMetrics.notInstrumented.getter(v31);
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, char *, _QWORD, uint64_t, char *, _BYTE *))(v36 + 200))(v10, v28, v30, v20, v21, &v38, 0, v22, &v37, v8);
}

unint64_t sub_5931C()
{
  unint64_t result;

  result = qword_3B3040;
  if (!qword_3B3040)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for StationType);
    atomic_store(result, (unint64_t *)&qword_3B3040);
  }
  return result;
}

uint64_t sub_59360()
{
  return sub_F1C0(&qword_3B3048, (void (*)(uint64_t))type metadata accessor for StationDetail, (uint64_t)&protocol conformance descriptor for StationDetail);
}

uint64_t type metadata accessor for StationDetail(uint64_t a1)
{
  uint64_t result;

  result = qword_3B3090;
  if (!qword_3B3090)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for StationDetail);
  return result;
}

unint64_t sub_593CC()
{
  unint64_t result;

  result = qword_3B3050;
  if (!qword_3B3050)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for StationSortOrder);
    atomic_store(result, (unint64_t *)&qword_3B3050);
  }
  return result;
}

uint64_t sub_59410()
{
  return sub_32914(&qword_3B3058, &qword_3B3060, (uint64_t)&protocol conformance descriptor for [A]);
}

uint64_t sub_5943C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return keypath_getTm(a1, &OBJC_IVAR____TtC8ShelfKit13StationDetail_episodes, a2);
}

uint64_t sub_59448(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_57A7C(a1, a2, a3, a4, &OBJC_IVAR____TtC8ShelfKit13StationDetail_episodes);
}

uint64_t sub_59464@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return keypath_getTm(a1, &OBJC_IVAR____TtC8ShelfKit13StationDetail_shows, a2);
}

uint64_t keypath_getTm@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X3>, uint64_t *a3@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  _BYTE v7[24];

  v4 = (uint64_t *)(*a1 + *a2);
  swift_beginAccess(v4, v7, 0, 0);
  v5 = *v4;
  *a3 = *v4;
  return swift_bridgeObjectRetain(v5);
}

uint64_t sub_594C0(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_57A7C(a1, a2, a3, a4, &OBJC_IVAR____TtC8ShelfKit13StationDetail_shows);
}

uint64_t storeEnumTagSinglePayload for StationType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_59528 + 4 * byte_2ED8F5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_5955C + 4 * byte_2ED8F0[v4]))();
}

uint64_t sub_5955C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_59564(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x5956CLL);
  return result;
}

uint64_t sub_59578(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x59580);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_59584(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_5958C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for StationType()
{
  return &type metadata for StationType;
}

uint64_t sub_595A8()
{
  return type metadata accessor for StationDetail(0);
}

void sub_595B0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[15];

  v6[0] = &unk_2EDB08;
  v6[1] = &unk_2EDB08;
  sub_5971C(319);
  if (v3 <= 0x3F)
  {
    v6[2] = *(_QWORD *)(v2 - 8) + 64;
    v6[3] = &unk_2EDB20;
    v6[4] = &unk_2EDB38;
    v6[5] = &unk_2EDB38;
    v6[6] = &unk_2EDB50;
    v6[7] = &unk_2EDB50;
    v6[8] = (char *)&value witness table for Builtin.Int64 + 64;
    v6[9] = (char *)&value witness table for Builtin.Int64 + 64;
    v6[10] = (char *)&value witness table for Builtin.Int64 + 64;
    v6[11] = &unk_2EDB38;
    v6[12] = &unk_2EDB50;
    v6[13] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4 = type metadata accessor for Date(319);
    if (v5 <= 0x3F)
    {
      v6[14] = *(_QWORD *)(v4 - 8) + 64;
      swift_updateClassMetadata2(a1, 256, 15, v6, a1 + 80);
    }
  }
}

uint64_t method lookup function for StationDetail(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for StationDetail);
}

uint64_t dispatch thunk of StationDetail.episodes.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of StationDetail.episodes.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of StationDetail.shows.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of BookmarkButtonPresenter.performPrimaryAction()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t dispatch thunk of StationDetail.__allocating_init(uuid:type:title:artwork:sortOrder:grouped:hidePlayedEpisodes:episodeCount:showCount:unplayedCount:episodes:shows:predicateForEpisodes:objectID:dateCreated:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 256))();
}

uint64_t dispatch thunk of StationDetail.hash(into:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

uint64_t dispatch thunk of StationDetail.appEntity()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 272))();
}

uint64_t dispatch thunk of StationDetail.hashValue.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 280))();
}

void sub_5971C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_3B28A0)
  {
    v2 = type metadata accessor for ArtworkModel(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_3B28A0);
  }
}

uint64_t getEnumTagSinglePayload for StationSortOrder(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
    goto LABEL_17;
  if (a2 + 6 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 6) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 6;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 6;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 6;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v8 = v6 - 7;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for StationSortOrder(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_5984C + 4 * byte_2ED8FF[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_59880 + 4 * byte_2ED8FA[v4]))();
}

uint64_t sub_59880(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_59888(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x59890);
  return result;
}

uint64_t sub_5989C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x598A4);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_598A8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_598B0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for StationSortOrder()
{
  return &type metadata for StationSortOrder;
}

id SearchHeaderView.searchScopeControl.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC8ShelfKit16SearchHeaderView_searchScopeControl);
}

double SearchHeaderView.pageMarginInsets.getter()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = v0 + OBJC_IVAR____TtC8ShelfKit16SearchHeaderView_pageMarginInsets;
  swift_beginAccess(v0 + OBJC_IVAR____TtC8ShelfKit16SearchHeaderView_pageMarginInsets, v3, 0, 0);
  return *(double *)v1;
}

id sub_59924(__int128 *a1, void **a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  __int128 v7;
  _BYTE v8[24];

  v7 = *a1;
  v2 = *((_QWORD *)a1 + 2);
  v3 = *((_QWORD *)a1 + 3);
  v4 = *a2;
  v5 = (uint64_t)*a2 + OBJC_IVAR____TtC8ShelfKit16SearchHeaderView_pageMarginInsets;
  swift_beginAccess(v5, v8, 1, 0);
  *(_OWORD *)v5 = v7;
  *(_QWORD *)(v5 + 16) = v2;
  *(_QWORD *)(v5 + 24) = v3;
  return objc_msgSend(v4, "setNeedsLayout");
}

id SearchHeaderView.pageMarginInsets.setter(double a1, double a2, double a3, double a4)
{
  char *v4;
  double *v9;
  _BYTE v11[24];

  v9 = (double *)&v4[OBJC_IVAR____TtC8ShelfKit16SearchHeaderView_pageMarginInsets];
  swift_beginAccess(&v4[OBJC_IVAR____TtC8ShelfKit16SearchHeaderView_pageMarginInsets], v11, 1, 0);
  *v9 = a1;
  v9[1] = a2;
  v9[2] = a3;
  v9[3] = a4;
  return objc_msgSend(v4, "setNeedsLayout");
}

id (*SearchHeaderView.pageMarginInsets.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess(v1 + OBJC_IVAR____TtC8ShelfKit16SearchHeaderView_pageMarginInsets, a1, 33, 0);
  return sub_59A58;
}

id sub_59A58(uint64_t a1, char a2)
{
  id result;

  result = (id)swift_endAccess(a1);
  if ((a2 & 1) == 0)
    return objc_msgSend(*(id *)(a1 + 24), "setNeedsLayout");
  return result;
}

char *SearchHeaderView.__allocating_init(searchScopeTitles:)(uint64_t a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return SearchHeaderView.init(searchScopeTitles:)(a1);
}

char *SearchHeaderView.init(searchScopeTitles:)(uint64_t a1)
{
  char *v1;
  uint64_t v3;
  id v4;
  char *v5;
  uint64_t v6;
  id v7;
  char *v8;
  __int128 v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  id v16;
  NSString v17;
  char *v18;
  uint64_t v19;
  char *v20;
  objc_super v22;
  objc_super v23;

  v22.super_class = (Class)swift_getObjectType();
  v3 = OBJC_IVAR____TtC8ShelfKit16SearchHeaderView_searchScopeControl;
  v4 = objc_allocWithZone((Class)UISegmentedControl);
  v5 = v1;
  *(_QWORD *)&v1[v3] = objc_msgSend(v4, "init");
  *(_QWORD *)&v5[OBJC_IVAR____TtC8ShelfKit16SearchHeaderView_bottomMargin] = 0x4024000000000000;
  v6 = OBJC_IVAR____TtC8ShelfKit16SearchHeaderView_headerLabel;
  v7 = objc_msgSend(objc_allocWithZone((Class)UILabel), "init");
  if (qword_3B0058 != -1)
    swift_once(&qword_3B0058, sub_5A3C0);
  objc_msgSend(v7, "setFont:", qword_3B31D8);
  *(_QWORD *)&v5[v6] = v7;
  v8 = &v5[OBJC_IVAR____TtC8ShelfKit16SearchHeaderView_pageMarginInsets];
  v9 = *(_OWORD *)&UIEdgeInsetsZero.bottom;
  *(_OWORD *)v8 = *(_OWORD *)&UIEdgeInsetsZero.top;
  *((_OWORD *)v8 + 1) = v9;
  v22.receiver = v5;
  v10 = &v5[OBJC_IVAR____TtC8ShelfKit16SearchHeaderView_searchTerm];
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = 0;
  v10[16] = -1;
  objc_msgSend(*(id *)&v1[v3], "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v11 = *(_QWORD *)(a1 + 16);
  if (v11)
  {
    v12 = 0;
    v13 = (_QWORD *)(a1 + 40);
    do
    {
      v14 = *v13;
      v15 = *(void **)&v1[v3];
      swift_bridgeObjectRetain(*v13);
      v16 = v15;
      v17 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v14);
      objc_msgSend(v16, "insertSegmentWithTitle:atIndex:animated:", v17, v12, 0);

      v13 += 2;
      ++v12;
    }
    while (v11 != v12);
  }
  swift_bridgeObjectRelease(a1);

  v23 = v22;
  v18 = (char *)objc_msgSendSuper2(&v23, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v19 = *(_QWORD *)&v18[OBJC_IVAR____TtC8ShelfKit16SearchHeaderView_searchScopeControl];
  v20 = v18;
  objc_msgSend(v20, "addSubview:", v19);
  objc_msgSend(v20, "addSubview:", *(_QWORD *)&v20[OBJC_IVAR____TtC8ShelfKit16SearchHeaderView_headerLabel]);

  return v20;
}

uint64_t SearchHeaderView.searchTerm.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  _BYTE v8[24];

  v3 = v1 + OBJC_IVAR____TtC8ShelfKit16SearchHeaderView_searchTerm;
  swift_beginAccess(v3, v8, 0, 0);
  v4 = *(_QWORD *)v3;
  v5 = *(_QWORD *)(v3 + 8);
  *(_QWORD *)a1 = *(_QWORD *)v3;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = *(_BYTE *)(v3 + 16);
  *(_BYTE *)(a1 + 16) = v6;
  return sub_5A3FC(v4, v5, v6);
}

uint64_t sub_59D88@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  _BYTE v8[24];

  v3 = *a1 + OBJC_IVAR____TtC8ShelfKit16SearchHeaderView_searchTerm;
  swift_beginAccess(v3, v8, 0, 0);
  v4 = *(_QWORD *)v3;
  v5 = *(_QWORD *)(v3 + 8);
  *(_QWORD *)a2 = *(_QWORD *)v3;
  *(_QWORD *)(a2 + 8) = v5;
  v6 = *(_BYTE *)(v3 + 16);
  *(_BYTE *)(a2 + 16) = v6;
  return sub_5A3FC(v4, v5, v6);
}

id sub_59DE4(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  _BYTE v10[24];

  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *a2 + OBJC_IVAR____TtC8ShelfKit16SearchHeaderView_searchTerm;
  v5 = *(_BYTE *)(a1 + 16);
  swift_beginAccess(v4, v10, 1, 0);
  v6 = *(_QWORD *)v4;
  v7 = *(_QWORD *)(v4 + 8);
  *(_QWORD *)v4 = v2;
  *(_QWORD *)(v4 + 8) = v3;
  v8 = *(_BYTE *)(v4 + 16);
  *(_BYTE *)(v4 + 16) = v5;
  sub_5A3FC(v2, v3, v5);
  sub_3B5A8(v6, v7, v8);
  return sub_59EEC();
}

id SearchHeaderView.searchTerm.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  _BYTE v10[24];

  v2 = *a1;
  v3 = a1[1];
  v4 = *((_BYTE *)a1 + 16);
  v5 = v1 + OBJC_IVAR____TtC8ShelfKit16SearchHeaderView_searchTerm;
  swift_beginAccess(v1 + OBJC_IVAR____TtC8ShelfKit16SearchHeaderView_searchTerm, v10, 1, 0);
  v6 = *(_QWORD *)v5;
  v7 = *(_QWORD *)(v5 + 8);
  *(_QWORD *)v5 = v2;
  *(_QWORD *)(v5 + 8) = v3;
  v8 = *(_BYTE *)(v5 + 16);
  *(_BYTE *)(v5 + 16) = v4;
  sub_3B5A8(v6, v7, v8);
  return sub_59EEC();
}

id sub_59EEC()
{
  char *v0;
  void *v1;
  char *v2;
  char v3;
  id v4;
  void *v5;
  char **v6;
  id v7;
  __int128 v9;
  char v10;
  char v11[24];

  v1 = *(void **)&v0[OBJC_IVAR____TtC8ShelfKit16SearchHeaderView_headerLabel];
  v2 = &v0[OBJC_IVAR____TtC8ShelfKit16SearchHeaderView_searchTerm];
  swift_beginAccess(&v0[OBJC_IVAR____TtC8ShelfKit16SearchHeaderView_searchTerm], v11, 0, 0);
  v3 = v2[16];
  v9 = *(_OWORD *)v2;
  v10 = v3;
  v4 = sub_5A8F4((uint64_t)&v9);
  objc_msgSend(v1, "setAttributedText:", v4);

  LODWORD(v1) = v2[16];
  v5 = (void *)objc_opt_self(UIColor);
  v6 = &selRef_quaternarySystemFillColor;
  if ((_DWORD)v1 != 1)
    v6 = &selRef_clearColor;
  v7 = objc_msgSend(v5, *v6);
  objc_msgSend(v0, "setBackgroundColor:", v7);

  return objc_msgSend(v0, "setNeedsLayout");
}

id (*SearchHeaderView.searchTerm.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess(v1 + OBJC_IVAR____TtC8ShelfKit16SearchHeaderView_searchTerm, a1, 33, 0);
  return sub_5A020;
}

id sub_5A020(uint64_t a1, char a2)
{
  id result;

  result = (id)swift_endAccess(a1);
  if ((a2 & 1) == 0)
    return sub_59EEC();
  return result;
}

Swift::Void __swiftcall SearchHeaderView.layoutSubviews()()
{
  char *v0;
  char *v1;
  void *v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double *v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  uint64_t v27;
  double v28;
  double v29;
  double MinX;
  void *v31;
  double v32;
  double v33;
  double v34;
  double v35;
  _BYTE v36[24];
  objc_super v37;

  v37.receiver = v0;
  v37.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v37, "layoutSubviews");
  v1 = (char *)objc_msgSend(v0, "effectiveUserInterfaceLayoutDirection");
  v2 = *(void **)&v0[OBJC_IVAR____TtC8ShelfKit16SearchHeaderView_searchScopeControl];
  objc_msgSend(v0, "bounds");
  objc_msgSend(v2, "sizeThatFits:", v3, v4);
  v6 = v5;
  objc_msgSend(v0, "bounds");
  v8 = v7;
  v10 = v9;
  v12 = v11;
  v14 = v13;
  v15 = (double *)&v0[OBJC_IVAR____TtC8ShelfKit16SearchHeaderView_pageMarginInsets];
  swift_beginAccess(&v0[OBJC_IVAR____TtC8ShelfKit16SearchHeaderView_pageMarginInsets], v36, 0, 0);
  v16 = UIEdgeInsetsInsetRect(v8, v10, v12, v14, *v15, v15[1]);
  v18 = v17;
  v20 = v19;
  v22 = v21;
  objc_msgSend(v2, "frame");
  v24 = v23;
  v25 = floor(v22 - v23 + (v22 - v23) * -0.5);
  v26 = v16;
  v27 = v18;
  v28 = v20;
  v29 = v22;
  if (v1 == (_BYTE *)&dword_0 + 1)
    MinX = CGRectGetMinX(*(CGRect *)&v26);
  else
    MinX = CGRectGetMaxX(*(CGRect *)&v26) - v6 + 1.0;
  objc_msgSend(v2, "setFrame:", MinX, v25, v6, v24);
  v31 = *(void **)&v0[OBJC_IVAR____TtC8ShelfKit16SearchHeaderView_headerLabel];
  objc_msgSend(v2, "frame");
  objc_msgSend(v31, "sizeThatFits:", v20 - v32, v22);
  if (v1 == (_BYTE *)&dword_0 + 1)
  {
    v34 = v6 + 16.0;
    v35 = v6 + 16.0 + v15[3];
  }
  else
  {
    v35 = v15[1];
    v34 = v6 + 16.0;
  }
  objc_msgSend(v31, "setFrame:", v35, (v22 - v33) * 0.5, v20 - v34);
}

id ProfilePictureButton.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  objc_class *v4;

  return objc_msgSend(objc_allocWithZone(v4), "initWithFrame:", a1, a2, a3, a4);
}

void SearchHeaderView.init(frame:)()
{
  _swift_stdlib_reportUnimplementedInitializer("ShelfKit.SearchHeaderView", 25, "init(frame:)", 12, 0);
  __break(1u);
}

id UniversalMetricsDictionary.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType(v0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

id sub_5A3C0()
{
  id result;

  result = objc_msgSend((id)objc_opt_self(UIFont), "systemFontOfSize:", 14.0);
  qword_3B31D8 = (uint64_t)result;
  return result;
}

uint64_t sub_5A3FC(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 0xFF)
    return sub_3D464(a1, a2, a3);
  return a1;
}

id sub_5A410()
{
  id result;

  result = objc_msgSend((id)objc_opt_self(UIFont), "systemFontOfSize:weight:", 14.0, UIFontWeightSemibold);
  qword_3B31E0 = (uint64_t)result;
  return result;
}

double UIEdgeInsetsInsetRect(double a1, double a2, double a3, double a4, double a5, double a6)
{
  return a1 + a6;
}

__n128 sub_5A474@<Q0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3;
  __n128 result;
  __int128 v5;
  _BYTE v6[24];

  v3 = *a1 + OBJC_IVAR____TtC8ShelfKit16SearchHeaderView_pageMarginInsets;
  swift_beginAccess(v3, v6, 0, 0);
  result = *(__n128 *)v3;
  v5 = *(_OWORD *)(v3 + 16);
  *a2 = *(_OWORD *)v3;
  a2[1] = v5;
  return result;
}

uint64_t type metadata accessor for SearchHeaderView()
{
  return objc_opt_self(_TtC8ShelfKit16SearchHeaderView);
}

uint64_t method lookup function for SearchHeaderView(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for SearchHeaderView);
}

uint64_t dispatch thunk of RecommendationsMetadataProvider.__allocating_init(asPartOf:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t destroy for LibraryRefreshType(uint64_t a1)
{
  return sub_3B5BC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t _s8ShelfKit18LibraryRefreshTypeOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_3D464(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for LibraryRefreshType(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_3D464(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_3B5BC(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for LibraryRefreshType(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_3B5BC(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for LibraryRefreshType(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for LibraryRefreshType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 254;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_5A684(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 1u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t sub_5A69C(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_QWORD *)result = a2 - 2;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for SearchHeaderView.SearchTerm()
{
  return &type metadata for SearchHeaderView.SearchTerm;
}

void sub_5A6C4()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  char *v4;
  __int128 v5;
  char *v6;

  v1 = OBJC_IVAR____TtC8ShelfKit16SearchHeaderView_searchScopeControl;
  *(_QWORD *)&v0[v1] = objc_msgSend(objc_allocWithZone((Class)UISegmentedControl), "init");
  *(_QWORD *)&v0[OBJC_IVAR____TtC8ShelfKit16SearchHeaderView_bottomMargin] = 0x4024000000000000;
  v2 = OBJC_IVAR____TtC8ShelfKit16SearchHeaderView_headerLabel;
  v3 = objc_msgSend(objc_allocWithZone((Class)UILabel), "init");
  if (qword_3B0058 != -1)
    swift_once(&qword_3B0058, sub_5A3C0);
  objc_msgSend(v3, "setFont:", qword_3B31D8);
  *(_QWORD *)&v0[v2] = v3;
  v4 = &v0[OBJC_IVAR____TtC8ShelfKit16SearchHeaderView_pageMarginInsets];
  v5 = *(_OWORD *)&UIEdgeInsetsZero.bottom;
  *(_OWORD *)v4 = *(_OWORD *)&UIEdgeInsetsZero.top;
  *((_OWORD *)v4 + 1) = v5;
  v6 = &v0[OBJC_IVAR____TtC8ShelfKit16SearchHeaderView_searchTerm];
  *(_QWORD *)v6 = 0;
  *((_QWORD *)v6 + 1) = 0;
  v6[16] = -1;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x800000000030B670, "ShelfKit/SearchHeaderView.swift", 31, 2, 50, 0);
  __break(1u);
}

uint64_t sub_5A7F0(uint64_t a1)
{
  id v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t countAndFlagsBits;
  Swift::String v5;
  uint64_t v6;
  unint64_t v8;

  if (*(unsigned __int8 *)(a1 + 16) > 1u)
    return 0;
  if (*(_BYTE *)(a1 + 16))
  {
    v1 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v8 = 0xE000000000000000;
    v3 = 0x800000000030B6A0;
    v2 = 0xD000000000000014;
  }
  else
  {
    v1 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v2 = 0xD000000000000018;
    v8 = 0xE000000000000000;
    v3 = 0x800000000030B6C0;
  }
  v5._countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  v6 = 0;
  countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v2, (Swift::String_optional)0, (NSBundle)v1, v5, *(Swift::String *)(&v8 - 1))._countAndFlagsBits;

  return countAndFlagsBits;
}

id sub_5A8F4(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  unsigned int v3;
  id v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  NSString v10;
  id v11;
  NSString v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t inited;
  NSString *v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  id v23;
  NSString v24;
  Class isa;
  id v26;
  uint64_t v27;
  NSString *v28;
  uint64_t v29;
  NSString *v30;
  void *v31;
  id v32;
  unint64_t v33;
  id v34;
  NSString v35;
  Class v36;
  id v37;
  id v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  id v43;
  _BYTE v44[112];
  _BYTE v45[72];
  _QWORD v46[2];
  char v47;

  v2 = *(_QWORD *)a1;
  v1 = *(_QWORD *)(a1 + 8);
  v3 = *(unsigned __int8 *)(a1 + 16);
  v4 = objc_msgSend(objc_allocWithZone((Class)NSMutableAttributedString), "init");
  if (v3 <= 1 && v1 != 0)
  {
    v6 = HIBYTE(v1) & 0xF;
    if ((v1 & 0x2000000000000000) == 0)
      v6 = v2 & 0xFFFFFFFFFFFFLL;
    if (v6)
    {
      v46[0] = v2;
      v46[1] = v1;
      v47 = v3;
      sub_3D464(v2, v1, v3);
      sub_5A7F0((uint64_t)v46);
      v8 = v7;
      v9 = objc_allocWithZone((Class)NSString);
      v10 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v8);
      v11 = objc_msgSend(v9, "initWithString:", v10);

      v12 = String._bridgeToObjectiveC()();
      v13 = objc_msgSend(v11, "rangeOfString:", v12);
      v15 = v14;

      if (v15 < 1)
      {

        sub_3B5A8(v2, v1, v3);
      }
      else
      {
        v42 = v15;
        v43 = v13;
        static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
        v17 = v16;
        v40 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C7F10);
        v41 = v11;
        inited = swift_initStackObject(v40, v45);
        *(_OWORD *)(inited + 16) = xmmword_2EA0D0;
        *(_QWORD *)(inited + 32) = NSForegroundColorAttributeName;
        v39 = (id)objc_opt_self(UIColor);
        v19 = NSForegroundColorAttributeName;
        v20 = objc_msgSend(v39, "secondaryLabelColor");
        v21 = sub_327F8(0, &qword_3B3238, UIColor_ptr);
        *(_QWORD *)(inited + 64) = v21;
        *(_QWORD *)(inited + 40) = v20;
        v22 = sub_2881B4(inited);
        v23 = objc_allocWithZone((Class)NSAttributedString);
        v24 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v17);
        type metadata accessor for Key(0);
        sub_5ACDC();
        isa = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v22);
        v26 = objc_msgSend(v23, "initWithString:attributes:", v24, isa);

        objc_msgSend(v4, "appendAttributedString:", v26);
        v27 = swift_initStackObject(v40, v44);
        *(_OWORD *)(v27 + 16) = xmmword_2EA080;
        *(_QWORD *)(v27 + 32) = v19;
        v28 = v19;
        *(_QWORD *)(v27 + 40) = objc_msgSend(v39, "labelColor");
        *(_QWORD *)(v27 + 64) = v21;
        *(_QWORD *)(v27 + 72) = NSFontAttributeName;
        v29 = qword_3B0060;
        v30 = NSFontAttributeName;
        if (v29 != -1)
          swift_once(&qword_3B0060, sub_5A410);
        v31 = (void *)qword_3B31E0;
        *(_QWORD *)(v27 + 104) = sub_327F8(0, (unint64_t *)&qword_3B3240, UIFont_ptr);
        *(_QWORD *)(v27 + 80) = v31;
        v32 = v31;
        v33 = sub_2881B4(v27);
        v34 = objc_allocWithZone((Class)NSAttributedString);
        v35 = String._bridgeToObjectiveC()();
        sub_3B5A8(v2, v1, v3);
        v36 = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v33);
        v37 = objc_msgSend(v34, "initWithString:attributes:", v35, v36);

        objc_msgSend(v4, "replaceCharactersInRange:withAttributedString:", v43, v42, v37);
      }
    }
  }
  return v4;
}

unint64_t sub_5ACDC()
{
  unint64_t result;

  result = qword_3C7F00;
  if (!qword_3C7F00)
  {
    type metadata accessor for Key(255);
    result = swift_getWitnessTable(&unk_2E9460);
    atomic_store(result, (unint64_t *)&qword_3C7F00);
  }
  return result;
}

uint64_t Page.shelves.getter()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 16));
}

uint64_t CategorySelection.totalCategoriesCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t CategorySelection.seeAllAction.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v4[2];

  sub_267BC(v1 + 32, (uint64_t)v4, &qword_3B3248);
  return sub_F4D8(v4, a1);
}

uint64_t CategorySelection.seeAllAction.setter(__int128 *a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + 32);
  __swift_destroy_boxed_opaque_existential_1(v3);
  return sub_F4D8(a1, (uint64_t)v3);
}

void (__swiftcall *Header.subtitleSymbolName.modify())()
{
  return FindOrCreateEpisodeOfferContentIDsIntentsIntentImplementation.init();
}

uint64_t CategorySelection.getRecommendationsAction.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v4[2];

  sub_267BC(v1 + 72, (uint64_t)v4, &qword_3B3248);
  return sub_F4D8(v4, a1);
}

uint64_t CategorySelection.getRecommendationsAction.setter(__int128 *a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + 72);
  __swift_destroy_boxed_opaque_existential_1(v3);
  return sub_F4D8(a1, (uint64_t)v3);
}

void (__swiftcall *CategorySelection.getRecommendationsAction.modify())()
{
  return FindOrCreateEpisodeOfferContentIDsIntentsIntentImplementation.init();
}

uint64_t CategorySelection.impressionMetrics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for CategorySelection(0);
  return sub_267BC(v1 + *(int *)(v3 + 36), a1, (uint64_t *)&unk_3B8790);
}

uint64_t type metadata accessor for CategorySelection(uint64_t a1)
{
  uint64_t result;

  result = qword_3B32E8;
  if (!qword_3B32E8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CategorySelection);
  return result;
}

uint64_t CategorySelection.init(id:categories:totalCategoriesCount:seeAllAction:getRecommendationsAction:impressionMetrics:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X4>, __int128 *a6@<X5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  uint64_t v12;

  *a8 = a1;
  a8[1] = a2;
  a8[2] = a3;
  a8[3] = a4;
  sub_150C8((uint64_t)a5, (uint64_t)(a8 + 4));
  sub_F4D8(a6, (uint64_t)(a8 + 9));
  __swift_destroy_boxed_opaque_existential_1(a5);
  v12 = (uint64_t)a8 + *(int *)(type metadata accessor for CategorySelection(0) + 36);
  return sub_23AB8(a7, v12);
}

uint64_t sub_5AF20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_267BC(v2 + *(int *)(a1 + 36), a2, (uint64_t *)&unk_3B8790);
}

uint64_t ShowHero.id.getter()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD v3[2];

  v1 = v0[1];
  v3[0] = *v0;
  v3[1] = v1;
  swift_bridgeObjectRetain(v1);
  return AnyHashable.init<A>(_:)(v3, &type metadata for String, &protocol witness table for String);
}

double Paragraph.clickAction.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t sub_5AFA8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_5AFD0 + 4 * byte_2EDBF0[a1]))(25705, 0xE200000000000000);
}

unint64_t sub_5AFD0()
{
  return 0xD000000000000014;
}

unint64_t sub_5B044()
{
  return 0xD000000000000011;
}

uint64_t sub_5B060(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_5B088 + 4 * byte_2EDBF6[a1]))(25705, 0xE200000000000000);
}

unint64_t sub_5B088()
{
  return 0xD000000000000014;
}

unint64_t sub_5B0FC()
{
  return 0xD000000000000011;
}

void sub_5B118(char *a1)
{
  sub_1E19E4(*a1);
}

void sub_5B124()
{
  char *v0;

  sub_2D826C(*v0);
}

void sub_5B12C(uint64_t a1)
{
  char *v1;

  sub_2D8938(a1, *v1);
}

void sub_5B134(uint64_t a1)
{
  char *v1;

  sub_2D9678(a1, *v1);
}

unint64_t sub_5B13C@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_5C62C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_5B168@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_5AFA8(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_5B190()
{
  unsigned __int8 *v0;

  return sub_5B060(*v0);
}

unint64_t sub_5B198@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_5C62C(a1);
  *a2 = result;
  return result;
}

uint64_t sub_5B1BC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_5B480();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_5B1E4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_5B480();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t CategorySelection.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v20[4];
  uint64_t v21;
  char v22;
  char v23;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3250);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v20[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 4];
  v9 = a1[3];
  v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  v11 = sub_5B480();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for CategorySelection.CodingKeys, &type metadata for CategorySelection.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  v23 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, &v23, v5);
  if (!v2)
  {
    v14 = v3[3];
    v22 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, &v22, v5);
    v21 = v3[2];
    v20[3] = 2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_3B1A18);
    sub_258F4(&qword_3B1A20, &qword_3B1A28, (uint64_t)&protocol conformance descriptor for Category, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v21);
    v20[2] = 3;
    __swift_instantiateConcreteTypeFromMangledName(&qword_3B3248);
    sub_5B910(&qword_3B3260, (uint64_t)&protocol conformance descriptor for CodeByKind<A>);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v3 + 4);
    v20[1] = 4;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v3 + 9);
    v15 = (char *)v3 + *(int *)(type metadata accessor for CategorySelection(0) + 36);
    v20[0] = 5;
    v16 = type metadata accessor for ImpressionMetrics(0);
    v17 = sub_F1C0(&qword_3B3268, (void (*)(uint64_t))&type metadata accessor for ImpressionMetrics, (uint64_t)&protocol conformance descriptor for ImpressionMetrics);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v15, v20, v5, v16, v17);
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_5B480()
{
  unint64_t result;

  result = qword_3B3258;
  if (!qword_3B3258)
  {
    result = swift_getWitnessTable(&unk_2EDE74);
    atomic_store(result, (unint64_t *)&qword_3B3258);
  }
  return result;
}

uint64_t CategorySelection.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  char *v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  char v35;

  v28 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v3);
  v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3270);
  v6 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CategorySelection(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  v30 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v12);
  v14 = sub_5B480();
  v15 = v31;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for CategorySelection.CodingKeys, &type metadata for CategorySelection.CodingKeys, v14, v12, v13);
  if (v15)
    return __swift_destroy_boxed_opaque_existential_1(v30);
  v16 = v6;
  v31 = v5;
  LOBYTE(v32) = 0;
  v17 = v29;
  *(_QWORD *)v11 = KeyedDecodingContainer.decode(_:forKey:)(&v32, v29);
  *((_QWORD *)v11 + 1) = v18;
  LOBYTE(v32) = 1;
  *((_QWORD *)v11 + 3) = KeyedDecodingContainer.decode(_:forKey:)(&v32, v17);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B1A18);
  v35 = 2;
  sub_258F4(&qword_3B1A48, &qword_3B1A50, (uint64_t)&protocol conformance descriptor for Category, (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v32, v19);
  *((_QWORD *)v11 + 2) = v32;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3248);
  v35 = 3;
  sub_5B910(&qword_3B3278, (uint64_t)&protocol conformance descriptor for CodeByKind<A>);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v32, v20);
  v21 = v33;
  *((_OWORD *)v11 + 2) = v32;
  *((_OWORD *)v11 + 3) = v21;
  *((_QWORD *)v11 + 8) = v34;
  v35 = 4;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v32, v20);
  v22 = v33;
  *(_OWORD *)(v11 + 72) = v32;
  *(_OWORD *)(v11 + 88) = v22;
  *((_QWORD *)v11 + 13) = v34;
  v23 = type metadata accessor for ImpressionMetrics(0);
  LOBYTE(v32) = 5;
  v24 = sub_F1C0(&qword_3B3280, (void (*)(uint64_t))&type metadata accessor for ImpressionMetrics, (uint64_t)&protocol conformance descriptor for ImpressionMetrics);
  v25 = (uint64_t)v31;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v23, &v32, v17, v23, v24);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v8, v17);
  sub_23AB8(v25, (uint64_t)&v11[*(int *)(v9 + 36)]);
  sub_5B954((uint64_t)v11, v28);
  __swift_destroy_boxed_opaque_existential_1(v30);
  return sub_5B998((uint64_t)v11);
}

uint64_t sub_5B8D0(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3248);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_5B910(unint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_3B3248);
    result = swift_getWitnessTable(a2);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_5B954(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CategorySelection(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_5B998(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for CategorySelection(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_5B9D4(uint64_t a1)
{
  uint64_t result;

  result = sub_F1C0(&qword_3B3288, (void (*)(uint64_t))type metadata accessor for CategorySelection, (uint64_t)&protocol conformance descriptor for CategorySelection);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_5BA10()
{
  return sub_F1C0(&qword_3B3288, (void (*)(uint64_t))type metadata accessor for CategorySelection, (uint64_t)&protocol conformance descriptor for CategorySelection);
}

uint64_t sub_5BA3C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return CategorySelection.init(from:)(a1, a2);
}

uint64_t sub_5BA50(_QWORD *a1)
{
  return CategorySelection.encode(to:)(a1);
}

uint64_t sub_5BA64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return sub_45E48(a1, a2, a3);
}

uint64_t sub_5BA78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v4[2];

  sub_267BC(a1 + 32, (uint64_t)v4, &qword_3B3248);
  return sub_F4D8(v4, a2);
}

uint64_t sub_5BABC(uint64_t a1, _QWORD *a2)
{
  __int128 v4[2];

  sub_150C8(a1, (uint64_t)v4);
  a2 += 4;
  __swift_destroy_boxed_opaque_existential_1(a2);
  return sub_F4D8(v4, (uint64_t)a2);
}

uint64_t sub_5BB00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v4[2];

  sub_267BC(a1 + 72, (uint64_t)v4, &qword_3B3248);
  return sub_F4D8(v4, a2);
}

uint64_t sub_5BB44(uint64_t a1, _QWORD *a2)
{
  __int128 v4[2];

  sub_150C8(a1, (uint64_t)v4);
  a2 += 9;
  __swift_destroy_boxed_opaque_existential_1(a2);
  return sub_F4D8(v4, (uint64_t)a2);
}

uint64_t initializeBufferWithCopyOfBuffer for CategorySelection(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  __int128 v13;
  uint64_t v14;
  void *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v20 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v20);
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    v9 = a2[2];
    v8 = a2[3];
    *(_QWORD *)(a1 + 16) = v9;
    *(_QWORD *)(a1 + 24) = v8;
    v10 = *(_OWORD *)(a2 + 7);
    *(_OWORD *)(a1 + 56) = v10;
    v11 = v10;
    v12 = **(void (***)(uint64_t, uint64_t, uint64_t))(v10 - 8);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v9);
    v12(a1 + 32, (uint64_t)(a2 + 4), v11);
    v13 = *((_OWORD *)a2 + 6);
    *(_OWORD *)(a1 + 96) = v13;
    (**(void (***)(uint64_t, uint64_t))(v13 - 8))(a1 + 72, (uint64_t)(a2 + 9));
    v14 = *(int *)(a3 + 36);
    v15 = (void *)(a1 + v14);
    v16 = (char *)a2 + v14;
    v17 = type metadata accessor for ImpressionMetrics(0);
    v18 = *(_QWORD *)(v17 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v18 + 16))(v15, v16, v17);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
  }
  return a1;
}

uint64_t destroy for CategorySelection(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[2]);
  __swift_destroy_boxed_opaque_existential_1(a1 + 4);
  __swift_destroy_boxed_opaque_existential_1(a1 + 9);
  v4 = (char *)a1 + *(int *)(a2 + 36);
  v5 = type metadata accessor for ImpressionMetrics(0);
  v6 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v4, v5);
  return result;
}

uint64_t initializeWithCopy for CategorySelection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  __int128 v13;
  uint64_t v14;
  void *v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  v8 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v7;
  v9 = a2 + 32;
  v10 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 56) = v10;
  v11 = v10;
  v12 = **(void (***)(uint64_t, uint64_t, uint64_t))(v10 - 8);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v8);
  v12(a1 + 32, v9, v11);
  v13 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 96) = v13;
  (**(void (***)(uint64_t, uint64_t))(v13 - 8))(a1 + 72, a2 + 72);
  v14 = *(int *)(a3 + 36);
  v15 = (void *)(a1 + v14);
  v16 = (const void *)(a2 + v14);
  v17 = type metadata accessor for ImpressionMetrics(0);
  v18 = *(_QWORD *)(v17 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
  {
    v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v18 + 16))(v15, v16, v17);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  }
  return a1;
}

_QWORD *assignWithCopy for CategorySelection(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(char *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a2[2];
  v9 = a1[2];
  a1[2] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[3] = a2[3];
  __swift_assign_boxed_opaque_existential_1(a1 + 4, a2 + 4);
  __swift_assign_boxed_opaque_existential_1(a1 + 9, a2 + 9);
  v10 = *(int *)(a3 + 36);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for ImpressionMetrics(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (!v17)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 24))(v11, v12, v13);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v11, v13);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  return a1;
}

uint64_t initializeWithTake for CategorySelection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  const void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  v6 = *(int *)(a3 + 36);
  v7 = (const void *)(a2 + v6);
  v8 = (void *)(a1 + v6);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  v9 = type metadata accessor for ImpressionMetrics(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v7, 1, v9))
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
    memcpy(v8, v7, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v8, v7, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v8, 0, 1, v9);
  }
  return a1;
}

uint64_t assignWithTake for CategorySelection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(void *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  __swift_destroy_boxed_opaque_existential_1((_QWORD *)(a1 + 32));
  v9 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  __swift_destroy_boxed_opaque_existential_1((_QWORD *)(a1 + 72));
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  v10 = *(int *)(a3 + 36);
  v11 = (void *)(a1 + v10);
  v12 = (void *)(a2 + v10);
  v13 = type metadata accessor for ImpressionMetrics(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (!v17)
    {
      (*(void (**)(void *, void *, uint64_t))(v14 + 40))(v11, v12, v13);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v14 + 8))(v11, v13);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v14 + 32))(v11, v12, v13);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for CategorySelection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_5C258);
}

uint64_t sub_5C258(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 36), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for CategorySelection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_5C2E4);
}

uint64_t sub_5C2E4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 36), a2, a2, v7);
  }
  return result;
}

void sub_5C35C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[6];

  v4[0] = &unk_2EDD48;
  v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[3] = &unk_2EDD60;
  v4[4] = &unk_2EDD60;
  sub_34090(319);
  if (v3 <= 0x3F)
  {
    v4[5] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 6, v4, a1 + 16);
  }
}

uint64_t getEnumTagSinglePayload for UberStyle(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for CategorySelection.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_5C4D4 + 4 * byte_2EDC01[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_5C508 + 4 * byte_2EDBFC[v4]))();
}

uint64_t sub_5C508(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_5C510(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x5C518);
  return result;
}

uint64_t sub_5C524(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x5C52CLL);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_5C530(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_5C538(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CategorySelection.CodingKeys()
{
  return &type metadata for CategorySelection.CodingKeys;
}

unint64_t sub_5C558()
{
  unint64_t result;

  result = qword_3B3330;
  if (!qword_3B3330)
  {
    result = swift_getWitnessTable(&unk_2EDE4C);
    atomic_store(result, (unint64_t *)&qword_3B3330);
  }
  return result;
}

unint64_t sub_5C5A0()
{
  unint64_t result;

  result = qword_3B3338;
  if (!qword_3B3338)
  {
    result = swift_getWitnessTable(&unk_2EDD84);
    atomic_store(result, (unint64_t *)&qword_3B3338);
  }
  return result;
}

unint64_t sub_5C5E8()
{
  unint64_t result;

  result = qword_3B3340;
  if (!qword_3B3340)
  {
    result = swift_getWitnessTable(&unk_2EDDAC);
    atomic_store(result, (unint64_t *)&qword_3B3340);
  }
  return result;
}

unint64_t sub_5C62C(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_373478, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 6)
    return 6;
  else
    return v3;
}

_QWORD *initializeBufferWithCopyOfBuffer for ContextMenuPreviewModel(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = *a2 & 0x3FFFFFFFFFFFFFFFLL;
  *a1 = *a2;
  swift_retain(v3);
  return a1;
}

uint64_t destroy for ContextMenuPreviewModel(_QWORD *a1)
{
  return swift_release(*a1 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t *assignWithCopy for ContextMenuPreviewModel(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2 & 0x3FFFFFFFFFFFFFFFLL;
  v4 = *a1;
  *a1 = *a2;
  v5 = v4 & 0x3FFFFFFFFFFFFFFFLL;
  swift_retain(v3);
  swift_release(v5);
  return a1;
}

_QWORD *__swift_memcpy8_8(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t *assignWithTake for ContextMenuPreviewModel(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a1;
  *a1 = *a2;
  swift_release(v3 & 0x3FFFFFFFFFFFFFFFLL);
  return a1;
}

uint64_t getEnumTagSinglePayload for ContextMenuPreviewModel(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7E && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 126);
  v3 = (((*(_QWORD *)a1 >> 57) >> 5) | (4 * ((*(_QWORD *)a1 >> 57) & 0x18 | *(_QWORD *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7D)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for ContextMenuPreviewModel(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x7D)
  {
    *(_QWORD *)result = a2 - 126;
    if (a3 >= 0x7E)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7E)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
    {
      v3 = (-a2 >> 2) & 0x1F | (32 * (-a2 & 0x7F));
      *(_QWORD *)result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t sub_5C7DC(_QWORD *a1)
{
  return *a1 >> 62;
}

_QWORD *sub_5C7E8(_QWORD *result)
{
  *result &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

uint64_t *sub_5C7F8(uint64_t *result, uint64_t a2)
{
  *result = *result & 0xFFFFFFFFFFFFFF8 | (a2 << 62);
  return result;
}

ValueMetadata *type metadata accessor for ContextMenuPreviewModel()
{
  return &type metadata for ContextMenuPreviewModel;
}

_QWORD *sub_5C820(uint64_t a1)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  if ((unint64_t)a1 >> 62)
    goto LABEL_15;
  v2 = *(_QWORD *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8));
  while (1)
  {
    if (!v2)
      return _swiftEmptyArrayStorage;
    result = (_QWORD *)sub_1807B0(0, v2 & ~(v2 >> 63), 0);
    if (v2 < 0)
      break;
    v4 = 0;
    while (v2 != v4)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        v5 = specialized _ArrayBuffer._getElementSlowPath(_:)(v4, a1);
      }
      else
      {
        v5 = *(_QWORD *)(a1 + 8 * v4 + 32);
        swift_retain(v5);
      }
      v7 = *(_QWORD *)(v5 + 16);
      v6 = *(_QWORD *)(v5 + 24);
      swift_bridgeObjectRetain(v6);
      swift_release(v5);
      v9 = _swiftEmptyArrayStorage[2];
      v8 = _swiftEmptyArrayStorage[3];
      if (v9 >= v8 >> 1)
        sub_1807B0(v8 > 1, v9 + 1, 1);
      ++v4;
      _swiftEmptyArrayStorage[2] = v9 + 1;
      v10 = &_swiftEmptyArrayStorage[2 * v9];
      v10[4] = v7;
      v10[5] = v6;
      if (v2 == v4)
        return _swiftEmptyArrayStorage;
    }
    __break(1u);
LABEL_15:
    if (a1 < 0)
      v11 = a1;
    else
      v11 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v11);
    swift_bridgeObjectRelease(a1);
  }
  __break(1u);
  return result;
}

uint64_t HomePageProvider.pageContent.getter()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + 16));
}

uint64_t HomePageProvider.isStillLoading.getter()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  _BYTE v4[8];
  uint64_t v5;
  uint64_t v6;

  sub_5C9EC((uint64_t)v4);
  v0 = v5;
  v1 = v6;
  v2 = ModernShelfListBuilder.areAnyImportantShelvesStillLoading.getter();
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v0);
  return v2 & 1;
}

uint64_t sub_5C9EC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *boxed_opaque_existential_2Tm;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  id v56;
  NSString v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  _QWORD *v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  __n128 v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  __n128 v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  __n128 v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  __n128 v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  __n128 v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t result;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char v122[24];
  char v123[24];
  unint64_t v124;
  unint64_t v125[3];
  uint64_t v126;
  uint64_t v127;
  char v128;

  v116 = a1;
  v121 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B35D0);
  v2 = __chkstk_darwin(v121);
  v111 = (uint64_t)&v110 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v110 - v5;
  v7 = __chkstk_darwin(v4);
  v115 = (char *)&v110 - v8;
  v9 = __chkstk_darwin(v7);
  v112 = (uint64_t)&v110 - v10;
  v11 = __chkstk_darwin(v9);
  v120 = (uint64_t)&v110 - v12;
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v110 - v14;
  __chkstk_darwin(v13);
  v17 = (char *)&v110 - v16;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8660);
  v19 = __chkstk_darwin(v18);
  v113 = (uint64_t)&v110 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v19);
  v23 = (char *)&v110 - v22;
  __chkstk_darwin(v21);
  v25 = (char *)&v110 - v24;
  v26 = type metadata accessor for ModernShelf(0);
  v119 = *(_QWORD *)(v26 - 8);
  v27 = __chkstk_darwin(v26);
  v114 = (uint64_t)&v110 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __chkstk_darwin(v27);
  v31 = (char *)&v110 - v30;
  v32 = __chkstk_darwin(v29);
  v34 = (char *)&v110 - v33;
  v128 = 1;
  v35 = *(unsigned __int8 *)(v1 + 40);
  v118 = v32;
  v117 = v35;
  if ((v35 & 1) != 0)
    goto LABEL_4;
  v110 = v6;
  v36 = v1;
  v37 = v1 + OBJC_IVAR____TtC8ShelfKit16HomePageProvider_unifiedMessagingHeaderShelf;
  swift_beginAccess(v1 + OBJC_IVAR____TtC8ShelfKit16HomePageProvider_unifiedMessagingHeaderShelf, v122, 0, 0);
  v38 = v37;
  v26 = v118;
  sub_64238(v38, (uint64_t)v25);
  v39 = v119;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v119 + 48))(v25, 1, v26) == 1)
  {
    sub_1459C((uint64_t)v25, &qword_3B8660);
    v6 = v110;
LABEL_4:
    v40 = type metadata accessor for Podcasts(0);
    v126 = v40;
    v127 = sub_F1C0((unint64_t *)&qword_3B33B8, (void (*)(uint64_t))&type metadata accessor for Podcasts, (uint64_t)&protocol conformance descriptor for Podcasts);
    boxed_opaque_existential_2Tm = __swift_allocate_boxed_opaque_existential_2Tm(v125);
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v40 - 8) + 104))(boxed_opaque_existential_2Tm, enum case for Podcasts.ponderosa(_:), v40);
    LOBYTE(v40) = isFeatureEnabled(_:)(v125);
    __swift_destroy_boxed_opaque_existential_1(v125);
    if ((v40 & 1) != 0)
    {
      v42 = v1 + OBJC_IVAR____TtC8ShelfKit16HomePageProvider_recommendationsUpdatedTipShelf;
      swift_beginAccess(v1 + OBJC_IVAR____TtC8ShelfKit16HomePageProvider_recommendationsUpdatedTipShelf, v123, 0, 0);
      sub_64238(v42, (uint64_t)v23);
      v43 = v119;
      v44 = (uint64_t)v6;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v119 + 48))(v23, 1, v26) == 1)
      {
        sub_1459C((uint64_t)v23, &qword_3B8660);
        v45 = _swiftEmptyArrayStorage;
        v46 = v1;
      }
      else
      {
        sub_15C18((uint64_t)v23, (uint64_t)v31);
        sub_14510((uint64_t)v31, (uint64_t)v15, type metadata accessor for ModernShelf);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v15, 0, 2, v26);
        v52 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3BF7B0);
        Loadable.map<A>(_:)(v125, sub_192A50, 0, v121, v52);
        v53 = v125[0];
        sub_644D8(v125[0]);
        v45 = _swiftEmptyArrayStorage;
        if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
          v45 = sub_10E28(0, _swiftEmptyArrayStorage[2] + 1, 1, _swiftEmptyArrayStorage);
        v55 = v45[2];
        v54 = v45[3];
        v46 = v1;
        if (v55 >= v54 >> 1)
          v45 = sub_10E28((_QWORD *)(v54 > 1), v55 + 1, 1, v45);
        v45[2] = v55 + 1;
        v45[v55 + 4] = v53;
        sub_64510(v53);
        sub_1459C((uint64_t)v15, &qword_3B35D0);
        v56 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "_applePodcastsFoundationSharedUserDefaults");
        v57 = String._bridgeToObjectiveC()();
        objc_msgSend(v56, "setBool:forKey:", 1, v57);

        sub_145D8((uint64_t)v31, type metadata accessor for ModernShelf);
      }
    }
    else
    {
      v45 = _swiftEmptyArrayStorage;
      v44 = (uint64_t)v6;
      v46 = v1;
    }
    v51 = (uint64_t)v115;
    goto LABEL_17;
  }
  sub_15C18((uint64_t)v25, (uint64_t)v34);
  sub_14510((uint64_t)v34, (uint64_t)v17, type metadata accessor for ModernShelf);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v17, 0, 2, v26);
  v47 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3BF7B0);
  Loadable.map<A>(_:)(v125, sub_192A50, 0, v121, v47);
  v48 = v125[0];
  sub_644D8(v125[0]);
  v45 = sub_10E28(0, 1, 1, _swiftEmptyArrayStorage);
  v50 = v45[2];
  v49 = v45[3];
  if (v50 >= v49 >> 1)
    v45 = sub_10E28((_QWORD *)(v49 > 1), v50 + 1, 1, v45);
  v46 = v36;
  v51 = (uint64_t)v115;
  v45[2] = v50 + 1;
  v45[v50 + 4] = v48;
  sub_64510(v48);
  sub_1459C((uint64_t)v17, &qword_3B35D0);
  sub_145D8((uint64_t)v34, type metadata accessor for ModernShelf);
  v44 = (uint64_t)v110;
LABEL_17:
  swift_beginAccess(v46 + OBJC_IVAR____TtC8ShelfKit16HomePageProvider_upNextShelf, v125, 32, 0);
  v58 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B33D0);
  ((void (*)(void))PerformanceLoadable.value.getter)();
  swift_endAccess(v125);
  v59 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3BF7B0);
  Loadable.map<A>(_:)(v125, sub_192A50, 0, v121, v59);
  v60 = v125[0];
  sub_644D8(v125[0]);
  v61 = _swiftEmptyArrayStorage;
  if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
    v61 = sub_10E28(0, _swiftEmptyArrayStorage[2] + 1, 1, _swiftEmptyArrayStorage);
  v63 = v61[2];
  v62 = v61[3];
  if (v63 >= v62 >> 1)
    v61 = sub_10E28((_QWORD *)(v62 > 1), v63 + 1, 1, v61);
  v61[2] = v63 + 1;
  v61[v63 + 4] = v60;
  sub_644D8(v60);
  if ((swift_isUniquelyReferenced_nonNull_native(v45) & 1) == 0)
    v45 = sub_10E28(0, v45[2] + 1, 1, v45);
  v65 = v45[2];
  v64 = v45[3];
  if (v65 >= v64 >> 1)
    v45 = sub_10E28((_QWORD *)(v64 > 1), v65 + 1, 1, v45);
  v45[2] = v65 + 1;
  v45[v65 + 4] = v60;
  sub_64510(v60);
  v66 = sub_1459C(v120, &qword_3B35D0);
  if ((v117 & 1) == 0)
  {
    if (os_feature_enabled_prototype_up_next(v66))
    {
      v67 = swift_beginAccess(v46 + OBJC_IVAR____TtC8ShelfKit16HomePageProvider_prototypeUpNextShelf, v125, 32, 0);
      PerformanceLoadable.value.getter(v58, v67);
      swift_endAccess(v125);
      Loadable.map<A>(_:)(v125, sub_192A50, 0, v121, v59);
      v68 = v125[0];
      sub_644D8(v125[0]);
      if ((swift_isUniquelyReferenced_nonNull_native(v45) & 1) == 0)
        v45 = sub_10E28(0, v45[2] + 1, 1, v45);
      v70 = v45[2];
      v69 = v45[3];
      if (v70 >= v69 >> 1)
        v45 = sub_10E28((_QWORD *)(v69 > 1), v70 + 1, 1, v45);
      v45[2] = v70 + 1;
      v45[v70 + 4] = v68;
      sub_64510(v68);
      sub_1459C(v112, &qword_3B35D0);
    }
    type metadata accessor for AccountsUtil(0);
    if ((static AccountsUtil.userAllowsPersonalization.getter() & 1) == 0)
    {
      swift_beginAccess(v46 + OBJC_IVAR____TtC8ShelfKit16HomePageProvider_fromChannelShelves, v125, 32, 0);
      v71 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B33E0);
      PerformanceLoadable.value.getter(v71, v72);
      v73 = v124;
      swift_endAccess(v125);
      sub_644D8(v73);
      if ((swift_isUniquelyReferenced_nonNull_native(v61) & 1) == 0)
        v61 = sub_10E28(0, v61[2] + 1, 1, v61);
      v75 = v61[2];
      v74 = v61[3];
      if (v75 >= v74 >> 1)
        v61 = sub_10E28((_QWORD *)(v74 > 1), v75 + 1, 1, v61);
      v61[2] = v75 + 1;
      v61[v75 + 4] = v73;
      sub_644D8(v73);
      if ((swift_isUniquelyReferenced_nonNull_native(v45) & 1) == 0)
        v45 = sub_10E28(0, v45[2] + 1, 1, v45);
      v77 = v45[2];
      v76 = v45[3];
      if (v77 >= v76 >> 1)
        v45 = sub_10E28((_QWORD *)(v76 > 1), v77 + 1, 1, v45);
      v45[2] = v77 + 1;
      v45[v77 + 4] = v73;
      sub_64510(v73);
    }
    swift_beginAccess(v46 + OBJC_IVAR____TtC8ShelfKit16HomePageProvider_storeShelves, v125, 32, 0);
    v78 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B33E0);
    PerformanceLoadable.value.getter(v78, v79);
    v80 = v124;
    swift_endAccess(v125);
    sub_644D8(v80);
    if ((swift_isUniquelyReferenced_nonNull_native(v61) & 1) == 0)
      v61 = sub_10E28(0, v61[2] + 1, 1, v61);
    v82 = v61[2];
    v81 = v61[3];
    if (v82 >= v81 >> 1)
      v61 = sub_10E28((_QWORD *)(v81 > 1), v82 + 1, 1, v61);
    v61[2] = v82 + 1;
    v61[v82 + 4] = v80;
    sub_644D8(v80);
    if ((swift_isUniquelyReferenced_nonNull_native(v45) & 1) == 0)
      v45 = sub_10E28(0, v45[2] + 1, 1, v45);
    v84 = v45[2];
    v83 = v45[3];
    if (v84 >= v83 >> 1)
      v45 = sub_10E28((_QWORD *)(v83 > 1), v84 + 1, 1, v45);
    v45[2] = v84 + 1;
    v45[v84 + 4] = v80;
    sub_64510(v80);
    v85 = swift_beginAccess(v46 + OBJC_IVAR____TtC8ShelfKit16HomePageProvider_sharedWithYouShelf, v125, 32, 0);
    PerformanceLoadable.value.getter(v58, v85);
    swift_endAccess(v125);
    Loadable.map<A>(_:)(v125, sub_192A50, 0, v121, v59);
    v86 = v125[0];
    sub_644D8(v125[0]);
    v88 = v45[2];
    v87 = v45[3];
    if (v88 >= v87 >> 1)
      v45 = sub_10E28((_QWORD *)(v87 > 1), v88 + 1, 1, v45);
    v45[2] = v88 + 1;
    v45[v88 + 4] = v86;
    sub_64510(v86);
    sub_1459C(v51, &qword_3B35D0);
  }
  v89 = swift_beginAccess(v46 + OBJC_IVAR____TtC8ShelfKit16HomePageProvider_recentlyPlayedShelf, v125, 32, 0);
  PerformanceLoadable.value.getter(v58, v89);
  swift_endAccess(v125);
  Loadable.map<A>(_:)(v125, sub_192A50, 0, v121, v59);
  v90 = v125[0];
  sub_644D8(v125[0]);
  if ((swift_isUniquelyReferenced_nonNull_native(v61) & 1) == 0)
    v61 = sub_10E28(0, v61[2] + 1, 1, v61);
  v91 = v116;
  v93 = v61[2];
  v92 = v61[3];
  if (v93 >= v92 >> 1)
    v61 = sub_10E28((_QWORD *)(v92 > 1), v93 + 1, 1, v61);
  v61[2] = v93 + 1;
  v61[v93 + 4] = v90;
  sub_644D8(v90);
  if ((swift_isUniquelyReferenced_nonNull_native(v45) & 1) == 0)
    v45 = sub_10E28(0, v45[2] + 1, 1, v45);
  v95 = v45[2];
  v94 = v45[3];
  if (v95 >= v94 >> 1)
    v45 = sub_10E28((_QWORD *)(v94 > 1), v95 + 1, 1, v45);
  v45[2] = v95 + 1;
  v45[v95 + 4] = v90;
  sub_64510(v90);
  sub_1459C(v44, &qword_3B35D0);
  v96 = type metadata accessor for Podcasts(0);
  v126 = v96;
  v127 = sub_F1C0((unint64_t *)&qword_3B33B8, (void (*)(uint64_t))&type metadata accessor for Podcasts, (uint64_t)&protocol conformance descriptor for Podcasts);
  v97 = __swift_allocate_boxed_opaque_existential_2Tm(v125);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v96 - 8) + 104))(v97, enum case for Podcasts.ponderosa(_:), v96);
  LOBYTE(v96) = isFeatureEnabled(_:)(v125);
  result = __swift_destroy_boxed_opaque_existential_1(v125);
  if ((v96 & 1) != 0)
  {
    v99 = v46 + OBJC_IVAR____TtC8ShelfKit16HomePageProvider_addFavoriteCategoriesTipShelf;
    swift_beginAccess(v46 + OBJC_IVAR____TtC8ShelfKit16HomePageProvider_addFavoriteCategoriesTipShelf, v125, 0, 0);
    v100 = v99;
    v101 = v113;
    sub_64238(v100, v113);
    v102 = v118;
    v103 = v119;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v119 + 48))(v101, 1, v118) == 1)
    {
      result = sub_1459C(v101, &qword_3B8660);
    }
    else
    {
      v104 = v101;
      v105 = v114;
      sub_15C18(v104, v114);
      v106 = v111;
      sub_14510(v105, v111, type metadata accessor for ModernShelf);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v103 + 56))(v106, 0, 2, v102);
      Loadable.map<A>(_:)(&v124, sub_192A50, 0, v121, v59);
      v107 = v124;
      sub_644D8(v124);
      if ((swift_isUniquelyReferenced_nonNull_native(v45) & 1) == 0)
        v45 = sub_10E28(0, v45[2] + 1, 1, v45);
      v109 = v45[2];
      v108 = v45[3];
      if (v109 >= v108 >> 1)
        v45 = sub_10E28((_QWORD *)(v108 > 1), v109 + 1, 1, v45);
      v45[2] = v109 + 1;
      v45[v109 + 4] = v107;
      sub_64510(v107);
      sub_1459C(v106, &qword_3B35D0);
      result = sub_145D8(v114, type metadata accessor for ModernShelf);
    }
  }
  *(_BYTE *)v91 = v128;
  *(_QWORD *)(v91 + 8) = v61;
  *(_QWORD *)(v91 + 16) = v45;
  return result;
}

void HomePageProvider.episodeOrderingFrozen.setter(char a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  _BYTE v5[24];

  swift_beginAccess(v1 + 24, v5, 1, 0);
  *(_BYTE *)(v1 + 24) = a1;
  v3 = OBJC_IVAR____TtC8ShelfKit16HomePageProvider_upNextEpisodesQueue;
  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit16HomePageProvider_upNextEpisodesQueue))
  {
    v4 = (_QWORD *)swift_bridgeObjectRetain(*(_QWORD *)(v1
                                                      + OBJC_IVAR____TtC8ShelfKit16HomePageProvider_upNextEpisodesQueue));
    sub_5D954(v4);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v1 + v3) = 0;
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_5D954(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t KeyPath;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  char v51;
  uint64_t v53;
  void *v54;
  id v55;
  Swift::String v56;
  Swift::String v57;
  Swift::String v58;
  id v59;
  Swift::String v60;
  Swift::String v61;
  Swift::String v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void (*v95)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int *v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  __int128 v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  uint64_t v117;
  void (*v118)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v119;
  _QWORD *v120;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  char *v129;
  char *v130;
  uint64_t *v131;
  char *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  int *v136;
  uint64_t v137;
  char *v138;
  char *v139;
  char *v140;
  uint64_t v141;
  char v142[24];
  __int128 v143;
  __int128 v144;
  uint64_t v145;
  char v146;
  Swift::String v147;
  Swift::String v148;

  v2 = v1;
  v4 = type metadata accessor for PageContent(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v114 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B35D0);
  __chkstk_darwin(v7);
  v9 = (char *)&v114 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v10);
  v12 = (char *)&v114 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
  __chkstk_darwin(v13);
  v133 = (char *)&v114 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3740);
  __chkstk_darwin(v15);
  v131 = (uint64_t *)((char *)&v114 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3BF7E0);
  __chkstk_darwin(v17);
  v130 = (char *)&v114 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0C38);
  __chkstk_darwin(v19);
  v134 = (uint64_t)&v114 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for ModernShelf(0);
  v135 = *(_QWORD *)(v21 - 8);
  v136 = (int *)v21;
  v22 = __chkstk_darwin(v21);
  v125 = (char *)&v114 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v137 = (uint64_t)&v114 - v24;
  v25 = type metadata accessor for ScalarDictionary(0);
  __chkstk_darwin(v25);
  v129 = (char *)&v114 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v127 = type metadata accessor for MetricsData.Configuration(0);
  v126 = *(_QWORD *)(v127 - 8);
  __chkstk_darwin(v127);
  v124 = (char *)&v114 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
  __chkstk_darwin(v28);
  v132 = (char *)&v114 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for ActionMetrics(0);
  __chkstk_darwin(v30);
  v128 = (char *)&v114 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = type metadata accessor for FlowDestination(0);
  v33 = __chkstk_darwin(v32);
  v141 = (uint64_t)&v114 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v33);
  v36 = (char *)&v114 - v35;
  v37 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8ShelfKit16HomePageProvider_upNextEpisodesQueue);
  *(_QWORD *)(v2 + OBJC_IVAR____TtC8ShelfKit16HomePageProvider_upNextEpisodesQueue) = a1;
  swift_bridgeObjectRelease(v37);
  v38 = OBJC_IVAR____TtC8ShelfKit16HomePageProvider_currentUpNextEpisodes;
  v39 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8ShelfKit16HomePageProvider_currentUpNextEpisodes);
  v139 = v9;
  v140 = v6;
  v138 = v12;
  if (v39 && (swift_beginAccess(v2 + 24, v142, 0, 0), (*(_BYTE *)(v2 + 24) & 1) != 0))
  {
    swift_bridgeObjectRetain(a1);
    swift_bridgeObjectRetain(v39);
    v40 = (_QWORD *)sub_28857C((uint64_t)_swiftEmptyArrayStorage);
    v41 = sub_63644(v40, (unint64_t)a1, sub_62EF0);
    *(_QWORD *)&v143 = sub_3F778((void (*)(_QWORD *__return_ptr, uint64_t *))sub_63614, 0, v39);
    KeyPath = swift_getKeyPath(&unk_2EE0A0);
    v43 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3BC430);
    v44 = sub_32914((unint64_t *)&qword_3B3750, (uint64_t *)&unk_3BC430, (uint64_t)&protocol conformance descriptor for [A]);
    v45 = Sequence.uniqued<A>(by:)(KeyPath, v43, v44, &protocol witness table for String);
    swift_release(KeyPath);
    swift_bridgeObjectRelease(v143);
    swift_bridgeObjectRetain(v41);
    a1 = sub_260C10(v45, v41);
    swift_bridgeObjectRelease(v39);
    swift_bridgeObjectRelease(v45);
    swift_bridgeObjectRelease_n(v41, 2);
  }
  else
  {
    swift_bridgeObjectRetain_n(a1, 2);
  }
  v46 = sub_5C820((uint64_t)a1);
  v47 = v46;
  v48 = *(_QWORD *)(v2 + v38);
  if (v48)
  {
    v49 = swift_bridgeObjectRetain(*(_QWORD *)(v2 + v38));
    v50 = sub_5C820(v49);
    swift_bridgeObjectRelease(v48);
    v51 = sub_12FE8(v50, v47);
    swift_bridgeObjectRelease(v50);
    swift_bridgeObjectRelease(v47);
    if ((v51 & 1) != 0)
      return swift_bridgeObjectRelease(a1);
  }
  else
  {
    swift_bridgeObjectRelease(v46);
  }
  v53 = *(_QWORD *)(v2 + v38);
  v123 = v2;
  *(_QWORD *)(v2 + v38) = a1;
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRelease(v53);
  v54 = (void *)objc_opt_self(NSBundle);
  v55 = objc_msgSend(v54, "mainBundle");
  v147._object = (void *)0xE000000000000000;
  v56._countAndFlagsBits = 0x5458454E5F5055;
  v56._object = (void *)0xE700000000000000;
  v57._countAndFlagsBits = 0;
  v57._object = (void *)0xE000000000000000;
  v147._countAndFlagsBits = 0;
  v58 = NSLocalizedString(_:tableName:bundle:value:comment:)(v56, (Swift::String_optional)0, (NSBundle)v55, v57, v147);
  countAndFlagsBits = v58._countAndFlagsBits;
  object = v58._object;

  *(_QWORD *)v36 = 257;
  *(_OWORD *)(v36 + 8) = 0u;
  *(_OWORD *)(v36 + 24) = 0u;
  *(_OWORD *)(v36 + 40) = 0u;
  *((_QWORD *)v36 + 7) = 0;
  v36[64] = 5;
  swift_storeEnumTagMultiPayload(v36, v32, 8);
  sub_14510((uint64_t)v36, v141, type metadata accessor for FlowDestination);
  v59 = objc_msgSend(v54, "mainBundle");
  v148._object = (void *)0xE000000000000000;
  v60._countAndFlagsBits = 0x535F4E4F49544341;
  v60._object = (void *)0xEE004C4C415F4545;
  v61._countAndFlagsBits = 0;
  v61._object = (void *)0xE000000000000000;
  v148._countAndFlagsBits = 0;
  v62 = NSLocalizedString(_:tableName:bundle:value:comment:)(v60, (Swift::String_optional)0, (NSBundle)v59, v61, v148);
  v117 = v62._countAndFlagsBits;
  v116 = v62._object;

  v63 = static MetricsTargetID.seeAll.getter();
  v120 = a1;
  v115 = v63;
  v65 = v64;
  v66 = static MetricsTargetType.button.getter(v63, v64);
  v68 = v67;
  v119 = type metadata accessor for URL(0);
  v118 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v119 - 8) + 56);
  v69 = (uint64_t)v132;
  v118(v132, 1, 1, v119);
  v70 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0930);
  v71 = *(_QWORD *)(type metadata accessor for MetricsData(0) - 8);
  v72 = swift_allocObject(v70, ((*(unsigned __int8 *)(v71 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80))+ *(_QWORD *)(v71 + 72), *(unsigned __int8 *)(v71 + 80) | 7);
  *(_OWORD *)(v72 + 16) = xmmword_2EA0D0;
  v73 = static MetricsActionType.navigate.getter();
  v75 = v74;
  v76 = v124;
  static MetricsData.Configuration.podcasts.getter();
  static MetricsData.clickData(targetID:targetType:actionType:actionContext:actionResult:actionURL:fields:configuration:)(v115, v65, v66, v68, v73, v75, 0, 0, 0, 0, v69, &_swiftEmptyDictionarySingleton, v76);
  swift_bridgeObjectRelease(v75);
  v77 = (*(uint64_t (**)(char *, uint64_t))(v126 + 8))(v76, v127);
  v78 = v129;
  ScalarDictionary.init()(v77);
  v79 = (uint64_t)v128;
  ActionMetrics.init(data:custom:)(v72, v78);
  swift_bridgeObjectRelease(v65);
  swift_bridgeObjectRelease(v68);
  v80 = v69;
  sub_1459C(v69, &qword_3B4370);
  LOBYTE(v143) = 0;
  v146 = 0;
  v81 = type metadata accessor for FlowAction(0);
  swift_allocObject(v81, *(unsigned int *)(v81 + 48), *(unsigned __int16 *)(v81 + 52));
  v82 = FlowAction.init(_:id:title:presentationContext:animationBehavior:presentationStyle:destinationPageHeader:actionMetrics:)(v141, 0, 0, v117, (uint64_t)v116, (char *)&v143, 0, 48, &v146, v79);
  sub_145D8((uint64_t)v36, type metadata accessor for FlowDestination);
  v83 = type metadata accessor for ActionMenu(0);
  v84 = v130;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v83 - 8) + 56))(v130, 1, 1, v83);
  v85 = (uint64_t)v131;
  *v131 = v82;
  v86 = type metadata accessor for Header.PrimaryAction(0);
  swift_storeEnumTagMultiPayload(v85, v86, 0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v86 - 8) + 56))(v85, 0, 1, v86);
  v87 = type metadata accessor for ArtworkModel(0);
  v88 = (uint64_t)v133;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v87 - 8) + 56))(v133, 1, 1, v87);
  v89 = (uint64_t)object;
  swift_bridgeObjectRetain(object);
  v141 = v82;
  swift_retain(v82);
  v113 = (uint64_t)v84;
  v90 = v134;
  v91 = countAndFlagsBits;
  Header.init(title:subtitle:subtitleSymbolName:displaySubtitleAsEyebrow:hasColoredBackground:titleContextMenu:primaryAction:secondaryButtons:artwork:)(countAndFlagsBits, v89, 0, 0, 0, 0, 0, 0, v134, v113, v85, (uint64_t)_swiftEmptyArrayStorage, v88);
  v92 = (uint64_t)v120;
  v133 = (char *)sub_2452E8((uint64_t)v120);
  swift_bridgeObjectRelease(v92);
  v93 = v80;
  v94 = v119;
  v95 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v118;
  v96 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v118)(v80, 1, 1, v119);
  v145 = 0;
  v143 = 0u;
  v144 = 0u;
  v97 = static MetricsTargetType.powerSwoosh.getter(v96);
  v99 = v98;
  v100 = (uint64_t)v138;
  static ImpressionMetrics.shelf(id:idType:uniqueID:impressionType:name:)(0x7478654E7055, 0xE600000000000000, 0, 0, 0xD000000000000020, 0x800000000030B6E0, v97, v98, v91, v89);
  swift_bridgeObjectRelease(v99);
  swift_bridgeObjectRelease(v89);
  v101 = type metadata accessor for ImpressionMetrics(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v101 - 8) + 56))(v100, 0, 1, v101);
  v102 = v136;
  v103 = v136[8];
  v104 = v125;
  v125[v103] = 3;
  v105 = (uint64_t)v104 + v102[9];
  v95(v105, 1, 1, v94);
  *v104 = 0xD000000000000020;
  v104[1] = 0x800000000030B6E0;
  sub_15BD4(v90, (uint64_t)v104 + v102[5], &qword_3B0C38);
  v106 = (char *)v104 + v102[6];
  *(_WORD *)v106 = 263;
  *((_WORD *)v106 + 3) = 256;
  *(_DWORD *)(v106 + 2) = 0;
  *((_QWORD *)v106 + 1) = 1;
  *(_QWORD *)((char *)v104 + v102[7]) = v133;
  sub_15B8C(v93, v105);
  *((_BYTE *)v104 + v102[10]) = 1;
  *((_BYTE *)v104 + v102[11]) = 0;
  v107 = (uint64_t)v104 + v102[12];
  if (*((_QWORD *)&v144 + 1))
  {
    sub_F4D8(&v143, v107);
  }
  else
  {
    v108 = (unint64_t)v144;
    *(_OWORD *)v107 = v143;
    *(_OWORD *)(v107 + 16) = v108;
    *(_QWORD *)(v107 + 32) = v145;
  }
  v109 = (uint64_t)v139;
  sub_15BD4(v100, (uint64_t)v104 + v102[13], (uint64_t *)&unk_3B8790);
  *((_BYTE *)v104 + v103) = 3;
  v110 = v137;
  sub_15C18((uint64_t)v104, v137);
  sub_14510(v110, v109, type metadata accessor for ModernShelf);
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v135 + 56))(v109, 0, 2, v102);
  swift_beginAccess(v123 + OBJC_IVAR____TtC8ShelfKit16HomePageProvider_upNextShelf, &v143, 33, 0);
  v111 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B33D0);
  PerformanceLoadable.value.setter(v109, v111);
  swift_endAccess(&v143);
  v112 = (uint64_t)v140;
  sub_63130((uint64_t)v140);
  CurrentValueSubject.value.setter(v112);
  swift_release(v141);
  return sub_145D8(v110, type metadata accessor for ModernShelf);
}

uint64_t (*HomePageProvider.episodeOrderingFrozen.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess(v1 + 24, a1, 33, 0);
  return sub_5E5C8;
}

uint64_t sub_5E5C8(uint64_t a1, char a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  result = swift_endAccess(a1);
  if ((a2 & 1) == 0)
  {
    v5 = *(_QWORD *)(a1 + 24);
    v6 = OBJC_IVAR____TtC8ShelfKit16HomePageProvider_upNextEpisodesQueue;
    v7 = *(_QWORD *)(v5 + OBJC_IVAR____TtC8ShelfKit16HomePageProvider_upNextEpisodesQueue);
    if (v7)
    {
      v8 = (_QWORD *)swift_bridgeObjectRetain(*(_QWORD *)(v5
                                                        + OBJC_IVAR____TtC8ShelfKit16HomePageProvider_upNextEpisodesQueue));
      sub_5D954(v8);
      swift_bridgeObjectRelease(v7);
      v9 = *(_QWORD *)(v5 + v6);
      *(_QWORD *)(v5 + v6) = 0;
      return swift_bridgeObjectRelease(v9);
    }
  }
  return result;
}

uint64_t HomePageProvider.__allocating_init(asPartOf:platformContext:)(uint64_t a1, char a2)
{
  uint64_t v2;
  char v4;
  uint64_t v5;

  v4 = a2 & 1;
  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  v5 = sub_638F8(a1, v4);
  swift_release(a1);
  return v5;
}

uint64_t HomePageProvider.init(asPartOf:platformContext:)(uint64_t a1, char a2)
{
  uint64_t v3;

  v3 = sub_638F8(a1, a2 & 1);
  swift_release(a1);
  return v3;
}

Swift::Void __swiftcall HomePageProvider.loadPageContent()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t ObjectType;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  os_unfair_lock_s *v27;
  os_unfair_lock_s *v28;
  os_unfair_lock_s *v29;
  id v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  id v61;

  v1 = v0;
  v54 = type metadata accessor for ObserverQueue(0);
  __chkstk_darwin(v54);
  v3 = (char *)&v50 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3358);
  v56 = *(_QWORD *)(v4 - 8);
  v57 = v4;
  __chkstk_darwin(v4);
  v55 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3360);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2B18);
  __chkstk_darwin(v10);
  v12 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3368);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_5EF0C(5, 30, (uint64_t)sub_64560);
  sub_5ECD4();
  sub_5EF0C(9, 12, (uint64_t)sub_64520);
  if ((*(_BYTE *)(v0 + 40) & 1) == 0)
  {
    v51 = v9;
    v52 = v7;
    v53 = v6;
    sub_5F0C0();
    v17 = *(_QWORD *)(v0 + 112);
    ObjectType = swift_getObjectType();
    *(_QWORD *)&v58 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(ObjectType, v17);
    v19 = sub_327F8(0, (unint64_t *)&qword_3B8710, OS_dispatch_queue_ptr);
    v61 = (id)static OS_dispatch_queue.main.getter(v19);
    v20 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v12, 1, 1, v20);
    v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3370);
    v22 = sub_32914(&qword_3BEA40, &qword_3B3370, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
    v23 = sub_436CC();
    Publisher.receive<A>(on:options:)(&v61, v12, v21, v19, v22, v23);
    sub_1459C((uint64_t)v12, &qword_3B2B18);

    swift_release(v58);
    v24 = swift_allocObject(&unk_37A3F0, 24, 7);
    swift_weakInit(v24 + 16);
    v25 = sub_32914(&qword_3B3378, &qword_3B3368, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
    v26 = Publisher<>.sink(receiveValue:)(sub_63E1C, v24, v13, v25);
    swift_release(v24);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    v27 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC8ShelfKit16HomePageProvider_subscriptions);
    v28 = v27 + 4;
    v29 = v27 + 6;
    os_unfair_lock_lock(v27 + 6);
    AnyCancellable.store(in:)(v28);
    os_unfair_lock_unlock(v29);
    swift_release(v26);
    v30 = objc_msgSend((id)objc_opt_self(UITraitCollection), "currentTraitCollection");
    LOBYTE(v24) = UITraitCollection.interfaceIdiomIsMac.getter();

    if ((v24 & 1) == 0
      || (v31 = type metadata accessor for Podcasts(0),
          v59 = v31,
          v60 = sub_F1C0((unint64_t *)&qword_3B33B8, (void (*)(uint64_t))&type metadata accessor for Podcasts, (uint64_t)&protocol conformance descriptor for Podcasts), v32 = __swift_allocate_boxed_opaque_existential_2Tm(&v58), (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v31 - 8) + 104))(v32, enum case for Podcasts.mercuryOnMac(_:), v31), LOBYTE(v31) = isFeatureEnabled(_:)(&v58), __swift_destroy_boxed_opaque_existential_1(&v58), (v31 & 1) != 0))
    {
      sub_5F478();
    }
    type metadata accessor for AccountsUtil(0);
    if ((static AccountsUtil.userAllowsPersonalization.getter() & 1) == 0)
    {
      v33 = *(_QWORD *)(v1 + 56);
      v34 = swift_getObjectType();
      v35 = (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 208))(v34, v33);
      swift_storeEnumTagMultiPayload(v3, v54, 2);
      v36 = (void *)sub_833EC((uint64_t)v3);
      swift_release(v35);
      sub_145D8((uint64_t)v3, type metadata accessor for ObserverQueue);
      v61 = v36;
      sub_150C8(v1 + 64, (uint64_t)&v58);
      v37 = swift_allocObject(&unk_37A418, 56, 7);
      sub_F4D8(&v58, v37 + 16);
      v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3388);
      v39 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3390);
      v40 = sub_32914(&qword_3B3398, &qword_3B3388, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
      v41 = v55;
      Publisher.map<A>(_:)(sub_63E48, v37, v38, v39, v40);
      swift_release(v37);
      swift_release(v61);
      v42 = sub_32914(&qword_3B33A0, &qword_3B3358, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
      v43 = sub_32914(&qword_3B33A8, &qword_3B3390, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
      v44 = v51;
      v45 = v57;
      Publisher<>.switchToLatest()(v57, v42, v43);
      (*(void (**)(char *, uint64_t))(v56 + 8))(v41, v45);
      v46 = swift_allocObject(&unk_37A3F0, 24, 7);
      swift_weakInit(v46 + 16);
      v47 = sub_32914(&qword_3B33B0, &qword_3B3360, (uint64_t)&protocol conformance descriptor for Publishers.SwitchToLatest<A, B>);
      v48 = v53;
      v49 = Publisher<>.sink(receiveValue:)(sub_63E50, v46, v53, v47);
      swift_release(v46);
      (*(void (**)(char *, uint64_t))(v52 + 8))(v44, v48);
      os_unfair_lock_lock(v29);
      AnyCancellable.store(in:)(v28);
      os_unfair_lock_unlock(v29);
      swift_release(v49);
    }
    sub_5FC58();
    sub_60260();
    sub_60494();
  }
}

uint64_t sub_5ECD4()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ObjectType;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  os_unfair_lock_s *v20;
  os_unfair_lock_s *v21;
  os_unfair_lock_s *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  char v29;

  v1 = v0;
  v2 = type metadata accessor for EpisodeListSettings(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = os_feature_enabled_prototype_up_next(v4);
  if ((_DWORD)result)
  {
    v8 = v0[11];
    v9 = v0[12];
    __swift_project_boxed_opaque_existential_1(v0 + 8, v8);
    v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 136))(v8, v9);
    v11 = sub_327F8(0, (unint64_t *)&qword_3B8710, OS_dispatch_queue_ptr);
    v12 = static OS_dispatch_queue.main.getter(v11);
    *(_QWORD *)&v26 = v11;
    *((_QWORD *)&v26 + 1) = &protocol witness table for OS_dispatch_queue;
    v24 = v12;
    Promise.then(perform:orCatchError:on:)(sub_61094, 0, sub_6109C, 0, &v24);
    swift_release(v10);
    __swift_destroy_boxed_opaque_existential_1(&v24);
    v13 = v1[7];
    ObjectType = swift_getObjectType();
    v24 = 2;
    v25 = 0u;
    v26 = 0u;
    v27 = 0u;
    v28 = 0;
    v29 = 9;
    EpisodeListSettings.init(_:sort:pubDateLimit:hidePlayedEpisodes:hideTrailers:hideVideoEpisodes:)(&v24, 17, 3, 0, 0, 0);
    v15 = LibraryDataProviderProtocol.episodeListPublisher(settings:pageSize:)((uint64_t)v6, 30, ObjectType, v13);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    v23 = v15;
    v16 = swift_allocObject(&unk_37A3F0, 24, 7);
    swift_weakInit(v16 + 16);
    v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3730);
    v18 = sub_32914(&qword_3B3738, &qword_3B3730, (uint64_t)&protocol conformance descriptor for AnyPaginatedPublisher<A, B>);
    v19 = Publisher<>.sink(receiveValue:)(sub_64540, v16, v17, v18);
    swift_release(v16);
    swift_release(v23);
    v20 = *(os_unfair_lock_s **)((char *)v1 + OBJC_IVAR____TtC8ShelfKit16HomePageProvider_subscriptions);
    v21 = v20 + 4;
    v22 = v20 + 6;
    os_unfair_lock_lock(v20 + 6);
    AnyCancellable.store(in:)(v21);
    os_unfair_lock_unlock(v22);
    return swift_release(v19);
  }
  return result;
}

uint64_t sub_5EF0C(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t ObjectType;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  os_unfair_lock_s *v19;
  os_unfair_lock_s *v20;
  os_unfair_lock_s *v21;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  char v29;

  v7 = v3;
  v8 = type metadata accessor for EpisodeListSettings(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(v3 + 56);
  ObjectType = swift_getObjectType();
  v24 = 1;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0;
  v29 = a1;
  EpisodeListSettings.init(_:sort:pubDateLimit:hidePlayedEpisodes:hideTrailers:hideVideoEpisodes:)(&v24, 17, 3, 0, 0, 0);
  v14 = LibraryDataProviderProtocol.episodeListPublisher(settings:pageSize:)((uint64_t)v11, a2, ObjectType, v12);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v23 = v14;
  v15 = swift_allocObject(&unk_37A3F0, 24, 7);
  swift_weakInit(v15 + 16);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3730);
  v17 = sub_32914(&qword_3B3738, &qword_3B3730, (uint64_t)&protocol conformance descriptor for AnyPaginatedPublisher<A, B>);
  v18 = Publisher<>.sink(receiveValue:)(a3, v15, v16, v17);
  swift_release(v15);
  swift_release(v23);
  v19 = *(os_unfair_lock_s **)(v7 + OBJC_IVAR____TtC8ShelfKit16HomePageProvider_subscriptions);
  v20 = v19 + 4;
  v21 = v19 + 6;
  os_unfair_lock_lock(v19 + 6);
  AnyCancellable.store(in:)(v20);
  os_unfair_lock_unlock(v21);
  return swift_release(v18);
}

uint64_t sub_5F0C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  os_unfair_lock_s *v21;
  os_unfair_lock_s *v22;
  os_unfair_lock_s *v23;
  _QWORD v25[2];

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3708);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3710);
  v25[0] = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (_QWORD *)(v0 + 136);
  v10 = *(_QWORD *)(v0 + 160);
  v11 = *(_QWORD *)(v1 + 168);
  __swift_project_boxed_opaque_existential_1(v9, v10);
  v12 = StoreDataCache.fetchCachedListenNowFooter()(v10, v11);
  v13 = Promise.optionalPublisher.getter();
  swift_release(v12);
  v25[1] = v13;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3718);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0AD8);
  v16 = sub_32914(&qword_3B3720, &qword_3B3718, (uint64_t)&protocol conformance descriptor for Future<A, B>);
  Publisher.compactMap<A>(_:)(sub_2B2D0, 0, v14, v15, v16);
  swift_release(v13);
  v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3BF7B0);
  Publishers.CompactMap.map<A>(_:)(sub_61D64, 0, v2, v17);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v18 = swift_allocObject(&unk_37A3F0, 24, 7);
  swift_weakInit(v18 + 16);
  v19 = sub_32914(&qword_3B3728, &qword_3B3710, (uint64_t)&protocol conformance descriptor for Publishers.CompactMap<A, B>);
  v20 = Publisher<>.sink(receiveValue:)(sub_64508, v18, v6, v19);
  swift_release(v18);
  (*(void (**)(char *, uint64_t))(v25[0] + 8))(v8, v6);
  v21 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC8ShelfKit16HomePageProvider_subscriptions);
  v22 = v21 + 4;
  v23 = v21 + 6;
  os_unfair_lock_lock(v21 + 6);
  AnyCancellable.store(in:)(v22);
  os_unfair_lock_unlock(v23);
  return swift_release(v20);
}

uint64_t sub_5F314(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[24];
  _BYTE v15[24];

  v4 = type metadata accessor for PageContent(0);
  __chkstk_darwin(v4);
  v6 = &v14[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B35D0);
  __chkstk_darwin(v7);
  v9 = &v14[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  a2 += 16;
  swift_beginAccess(a2, v15, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (result)
  {
    v11 = result;
    sub_14510(a1, (uint64_t)v9, type metadata accessor for ModernShelf);
    v12 = type metadata accessor for ModernShelf(0);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v9, 0, 2, v12);
    swift_beginAccess(v11 + OBJC_IVAR____TtC8ShelfKit16HomePageProvider_sharedWithYouShelf, v14, 33, 0);
    v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B33D0);
    PerformanceLoadable.value.setter(v9, v13);
    swift_endAccess(v14);
    sub_63130((uint64_t)v6);
    CurrentValueSubject.value.setter(v6);
    return swift_release(v11);
  }
  return result;
}

uint64_t sub_5F478()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  os_unfair_lock_s *v17;
  os_unfair_lock_s *v18;
  os_unfair_lock_s *v19;
  id v21;
  uint64_t v22;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2B18);
  __chkstk_darwin(v2);
  v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B36E8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = UnifiedMessagingProvider.bannerShelfPublisher.getter();
  v9 = sub_327F8(0, (unint64_t *)&qword_3B8710, OS_dispatch_queue_ptr);
  v21 = (id)static OS_dispatch_queue.main.getter(v9);
  v10 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v4, 1, 1, v10);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B36F0);
  v12 = sub_32914(&qword_3B36F8, &qword_3B36F0, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v13 = sub_436CC();
  Publisher.receive<A>(on:options:)(&v21, v4, v11, v9, v12, v13);
  sub_1459C((uint64_t)v4, &qword_3B2B18);

  swift_release(v22);
  v14 = swift_allocObject(&unk_37A3F0, 24, 7);
  swift_weakInit(v14 + 16);
  v15 = sub_32914(&qword_3B3700, &qword_3B36E8, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v16 = Publisher<>.sink(receiveValue:)(sub_644E8, v14, v5, v15);
  swift_release(v14);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v17 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC8ShelfKit16HomePageProvider_subscriptions);
  v18 = v17 + 4;
  v19 = v17 + 6;
  os_unfair_lock_lock(v17 + 6);
  AnyCancellable.store(in:)(v18);
  os_unfair_lock_unlock(v19);
  return swift_release(v16);
}

Swift::Int sub_5F6AC@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  Swift::Int result;
  uint64_t v18;
  uint64_t v19;
  Swift::Int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;

  v53 = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B36C8);
  v6 = *(uint64_t **)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B36D0);
  __chkstk_darwin(v9);
  v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *a1;
  v14 = (unint64_t)v13 >> 62;
  if ((unint64_t)v13 >> 62)
    goto LABEL_40;
  v15 = *(_QWORD *)((char *)&dword_10 + (v13 & 0xFFFFFFFFFFFFF8));
  while (v15)
  {
    v51 = v12;
    v52 = v10;
    if (v15 < 0)
    {
      v5 = 2;
      if (!v14)
        goto LABEL_8;
    }
    else
    {
      if (v15 >= 2)
        v5 = 2;
      else
        v5 = v15;
      if (!v14)
      {
LABEL_8:
        v16 = *(_QWORD *)((char *)&dword_10 + (v13 & 0xFFFFFFFFFFFFF8));
        result = swift_bridgeObjectRetain(v13);
        goto LABEL_15;
      }
    }
    if (v13 < 0)
      v18 = v13;
    else
      v18 = v13 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n(v13, 2);
    v19 = _CocoaArrayWrapper.endIndex.getter(v18);
    result = swift_bridgeObjectRelease();
    if (v19 < 0)
    {
      __break(1u);
LABEL_47:
      __break(1u);
LABEL_48:
      __break(1u);
LABEL_49:
      __break(1u);
      return result;
    }
    swift_bridgeObjectRetain(v13);
    v16 = _CocoaArrayWrapper.endIndex.getter(v18);
    result = swift_bridgeObjectRelease();
LABEL_15:
    if (v16 < v5)
      goto LABEL_47;
    v50 = v9;
    if ((v13 & 0xC000000000000001) != 0)
    {
      type metadata accessor for LegacyLockup(0);
      result = 0;
      do
      {
        v20 = result + 1;
        _ArrayBuffer._typeCheckSlowPath(_:)(result);
        result = v20;
      }
      while (v5 != v20);
    }
    if (v14)
    {
      if (v13 < 0)
        v22 = v13;
      else
        v22 = v13 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v13);
      v8 = (char *)_CocoaArrayWrapper.subscript.getter(0, v5, v22);
      v21 = v23;
      v14 = (int64_t)v24;
      v26 = v25;
      result = swift_bridgeObjectRelease_n(v13, 2);
      v5 = v26 >> 1;
    }
    else
    {
      v8 = (char *)(v13 & 0xFFFFFFFFFFFFFF8);
      v21 = (v13 & 0xFFFFFFFFFFFFFF8) + 32;
    }
    v9 = v5 - v14;
    if (__OFSUB__(v5, v14))
      goto LABEL_48;
    if (!v9)
    {
      swift_unknownObjectRelease(v8);
      v27 = _swiftEmptyArrayStorage;
LABEL_38:
      v32 = v53[3];
      v33 = v53[4];
      __swift_project_boxed_opaque_existential_1(v53, v32);
      v34 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v33 + 24))(v27, v32, v33);
      v35 = swift_bridgeObjectRelease();
      v36 = Promise.publisher.getter(v35);
      swift_release(v34);
      v54 = (_QWORD *)v36;
      v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B36B8);
      v38 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3BF7B0);
      v39 = sub_32914(&qword_3B36C0, &qword_3B36B8, (uint64_t)&protocol conformance descriptor for Future<A, B>);
      v40 = v51;
      Publisher.map<A>(_:)(sub_5FB28, 0, v37, v38, v39);
      swift_release(v36);
      v41 = sub_32914(&qword_3B36D8, &qword_3B36D0, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
      v42 = v50;
      v43 = Publisher.mapToLoadable()(v50, v41);
      result = (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v40, v42);
      goto LABEL_45;
    }
    v54 = _swiftEmptyArrayStorage;
    v13 = (uint64_t)&v54;
    result = sub_180848(0, v9 & ~(v9 >> 63), 0);
    if (v9 < 0)
      goto LABEL_49;
    v49 = a3;
    v27 = v54;
    if (v5 <= v14)
      v28 = v14;
    else
      v28 = v5;
    a3 = (uint64_t *)(v28 - v14);
    v14 = v21 + 8 * v14;
    v6 = &OBJC_IVAR____TtC8ShelfKit12LegacyLockup_adamId;
    while (a3)
    {
      v12 = (char *)OBJC_IVAR____TtC8ShelfKit12LegacyLockup_adamId;
      v29 = *(_QWORD *)(*(_QWORD *)v14 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup_adamId);
      v54 = v27;
      v31 = v27[2];
      v30 = v27[3];
      v5 = v31 + 1;
      if (v31 >= v30 >> 1)
      {
        v13 = (uint64_t)&v54;
        sub_180848(v30 > 1, v31 + 1, 1);
        v27 = v54;
      }
      v27[2] = v5;
      v27[v31 + 4] = v29;
      a3 = (uint64_t *)((char *)a3 - 1);
      v14 += 8;
      if (!--v9)
      {
        swift_unknownObjectRelease(v8);
        a3 = v49;
        goto LABEL_38;
      }
    }
    __break(1u);
LABEL_40:
    if (v13 < 0)
      v44 = v13;
    else
      v44 = v13 & 0xFFFFFFFFFFFFFF8;
    v45 = v12;
    v46 = v10;
    swift_bridgeObjectRetain(v13);
    v15 = _CocoaArrayWrapper.endIndex.getter(v44);
    swift_bridgeObjectRelease();
    v12 = v45;
    v10 = v46;
  }
  v54 = _swiftEmptyArrayStorage;
  v47 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0A38);
  Just.init(_:)(&v54, v47);
  v48 = sub_32914(&qword_3B36E0, &qword_3B36C8, (uint64_t)&protocol conformance descriptor for Just<A>);
  v43 = Publisher.eraseToAnyPublisher()(v5, v48);
  result = ((uint64_t (*)(char *, uint64_t))v6[1])(v8, v5);
LABEL_45:
  *a3 = v43;
  return result;
}

uint64_t sub_5FB28@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v3;
  uint64_t result;

  v3 = Array<A>.mapToModernShelves()(*a1);
  result = sub_15E7E0((unint64_t)v3);
  *a2 = result;
  return result;
}

uint64_t sub_5FB54(unint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[24];
  unint64_t v13;
  _BYTE v14[24];

  v4 = type metadata accessor for PageContent(0);
  __chkstk_darwin(v4);
  v6 = &v12[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v7 = *a1;
  a2 += 16;
  swift_beginAccess(a2, v14, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (result)
  {
    v9 = result;
    v13 = v7;
    swift_beginAccess(result + OBJC_IVAR____TtC8ShelfKit16HomePageProvider_fromChannelShelves, v12, 33, 0);
    sub_644D8(v7);
    v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B33E0);
    PerformanceLoadable.value.setter(&v13, v10);
    swift_endAccess(v12);
    sub_63130((uint64_t)v6);
    CurrentValueSubject.value.setter(v6);
    return swift_release(v9);
  }
  return result;
}

uint64_t sub_5FC58()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  os_unfair_lock_s *v53;
  os_unfair_lock_s *v54;
  os_unfair_lock_s *v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  __int128 v66[2];
  uint64_t v67;
  uint64_t v68;

  v1 = v0;
  v57 = *v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2B18);
  __chkstk_darwin(v2);
  v65 = (char *)&v57 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B35D8);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B35E0);
  v58 = *(_QWORD *)(v8 - 8);
  v59 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B35E8);
  v60 = *(_QWORD *)(v11 - 8);
  v61 = v11;
  __chkstk_darwin(v11);
  v13 = (char *)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B35F0);
  v63 = *(_QWORD *)(v14 - 8);
  v64 = v14;
  __chkstk_darwin(v14);
  v62 = (char *)&v57 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(v0[16] + 16);
  *(_QWORD *)&v66[0] = v16;
  v17 = qword_3B0080;
  swift_retain(v16);
  if (v17 != -1)
    swift_once(&qword_3B0080, sub_73178);
  v18 = qword_3B3FA0;
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B35F8);
  v20 = sub_32914(&qword_3B3600, &qword_3B35F8, (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
  v21 = Publisher.emitSignpostEvent(log:name:)(v18, "metadata", 8, 2, v19, v20);
  swift_release(v16);
  *(_QWORD *)&v66[0] = v21;
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3608);
  v23 = sub_32914(&qword_3B3610, &qword_3B3608, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.compactMap<A>(_:)(sub_730F4, 0, v22, &type metadata for RecommendationsMetadata, v23);
  swift_release(v21);
  v24 = sub_32914(&qword_3B3618, &qword_3B35D8, (uint64_t)&protocol conformance descriptor for Publishers.CompactMap<A, B>);
  v25 = Publisher.eraseToAnyPublisher()(v4, v24);
  v26 = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  *(_QWORD *)&v66[0] = v25;
  v68 = InterestObserverProvider.dismissedInlineSelectionModulePublisher.getter(v26);
  v67 = InterestObserverProvider.userAppSessionsCountPublisher.getter();
  v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3620);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2120);
  v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3628);
  v30 = sub_32914(&qword_3B3630, &qword_3B3620, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v31 = sub_32914(&qword_3B2128, &qword_3B2120, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v32 = sub_32914(&qword_3B3638, &qword_3B3628, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publishers.CombineLatest3.init(_:_:_:)(v66, &v68, &v67, v27, v28, v29, v30, v31, v32);
  v33 = v1[4];
  sub_150C8((uint64_t)(v1 + 8), (uint64_t)v66);
  v34 = swift_allocObject(&unk_37A4E0, 72, 7);
  *(_QWORD *)(v34 + 16) = v33;
  sub_F4D8(v66, v34 + 24);
  *(_QWORD *)(v34 + 64) = v57;
  v35 = swift_allocObject(&unk_37A508, 32, 7);
  *(_QWORD *)(v35 + 16) = sub_64314;
  *(_QWORD *)(v35 + 24) = v34;
  v36 = swift_retain(v33);
  v37 = static Subscribers.Demand.unlimited.getter(v36);
  v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3390);
  v39 = sub_32914(&qword_3B3640, &qword_3B35E0, (uint64_t)&protocol conformance descriptor for Publishers.CombineLatest3<A, B, C>);
  v40 = sub_32914(&qword_3B33A8, &qword_3B3390, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v41 = v59;
  Publisher<>.flatMap<A>(maxPublishers:_:)(v37, sub_64348, v35, v59, v38, v39, v40);
  swift_release(v35);
  (*(void (**)(char *, uint64_t))(v58 + 8))(v10, v41);
  v42 = sub_327F8(0, (unint64_t *)&qword_3B8710, OS_dispatch_queue_ptr);
  *(_QWORD *)&v66[0] = static OS_dispatch_queue.main.getter(v42);
  v43 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  v44 = (uint64_t)v65;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56))(v65, 1, 1, v43);
  v45 = sub_32914(&qword_3B3648, &qword_3B35E8, (uint64_t)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
  v46 = sub_436CC();
  v48 = v61;
  v47 = v62;
  Publisher.receive<A>(on:options:)(v66, v44, v61, v42, v45, v46);
  sub_1459C(v44, &qword_3B2B18);

  (*(void (**)(char *, uint64_t))(v60 + 8))(v13, v48);
  v49 = swift_allocObject(&unk_37A3F0, 24, 7);
  swift_weakInit(v49 + 16);
  v50 = sub_32914(&qword_3B3650, &qword_3B35F0, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v51 = v64;
  v52 = Publisher<>.sink(receiveValue:)(sub_64378, v49, v64, v50);
  swift_release(v49);
  (*(void (**)(char *, uint64_t))(v63 + 8))(v47, v51);
  v53 = *(os_unfair_lock_s **)((char *)v1 + OBJC_IVAR____TtC8ShelfKit16HomePageProvider_subscriptions);
  v54 = v53 + 4;
  v55 = v53 + 6;
  os_unfair_lock_lock(v53 + 6);
  AnyCancellable.store(in:)(v54);
  os_unfair_lock_unlock(v55);
  return swift_release(v52);
}

uint64_t sub_60260()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  os_unfair_lock_s *v17;
  os_unfair_lock_s *v18;
  os_unfair_lock_s *v19;
  id v21;
  uint64_t v22;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2B18);
  __chkstk_darwin(v2);
  v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B35B0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = AddFavoriteCategoriesSearchTipProvider.addFavoriteCategoriesSearchTipShelf.getter();
  v9 = sub_327F8(0, (unint64_t *)&qword_3B8710, OS_dispatch_queue_ptr);
  v21 = (id)static OS_dispatch_queue.main.getter(v9);
  v10 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v4, 1, 1, v10);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B35B8);
  v12 = sub_32914(&qword_3B35C0, &qword_3B35B8, (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
  v13 = sub_436CC();
  Publisher.receive<A>(on:options:)(&v21, v4, v11, v9, v12, v13);
  sub_1459C((uint64_t)v4, &qword_3B2B18);

  swift_release(v22);
  v14 = swift_allocObject(&unk_37A3F0, 24, 7);
  swift_weakInit(v14 + 16);
  v15 = sub_32914(&qword_3B35C8, &qword_3B35B0, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v16 = Publisher<>.sink(receiveValue:)(sub_642C8, v14, v5, v15);
  swift_release(v14);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v17 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC8ShelfKit16HomePageProvider_subscriptions);
  v18 = v17 + 4;
  v19 = v17 + 6;
  os_unfair_lock_lock(v17 + 6);
  AnyCancellable.store(in:)(v18);
  os_unfair_lock_unlock(v19);
  return swift_release(v16);
}

uint64_t sub_60494()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  os_unfair_lock_s *v17;
  os_unfair_lock_s *v18;
  os_unfair_lock_s *v19;
  id v21;
  uint64_t v22;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2B18);
  __chkstk_darwin(v2);
  v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B35B0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = AddFavoriteCategoriesSearchTipProvider.addFavoriteCategoriesSearchTipShelf.getter();
  v9 = sub_327F8(0, (unint64_t *)&qword_3B8710, OS_dispatch_queue_ptr);
  v21 = (id)static OS_dispatch_queue.main.getter(v9);
  v10 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v4, 1, 1, v10);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B35B8);
  v12 = sub_32914(&qword_3B35C0, &qword_3B35B8, (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
  v13 = sub_436CC();
  Publisher.receive<A>(on:options:)(&v21, v4, v11, v9, v12, v13);
  sub_1459C((uint64_t)v4, &qword_3B2B18);

  swift_release(v22);
  v14 = swift_allocObject(&unk_37A3F0, 24, 7);
  swift_weakInit(v14 + 16);
  v15 = sub_32914(&qword_3B35C8, &qword_3B35B0, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v16 = Publisher<>.sink(receiveValue:)(sub_64218, v14, v5, v15);
  swift_release(v14);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v17 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC8ShelfKit16HomePageProvider_subscriptions);
  v18 = v17 + 4;
  v19 = v17 + 6;
  os_unfair_lock_lock(v17 + 6);
  AnyCancellable.store(in:)(v18);
  os_unfair_lock_unlock(v19);
  return swift_release(v16);
}

unint64_t static HomePageProvider.upNextShelfID.getter()
{
  return 0xD000000000000020;
}

uint64_t sub_606E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  id v35;
  Swift::String v36;
  Swift::String v37;
  Swift::String v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *object;
  uint64_t countAndFlagsBits;
  char *v87;
  char *v88;
  uint64_t v89;
  void (*v90)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t *v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  char v109[9];
  Swift::String v110;

  v99 = a1;
  v1 = type metadata accessor for PageContent(0);
  __chkstk_darwin(v1);
  v103 = (uint64_t)&v82 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B35D0);
  __chkstk_darwin(v3);
  v102 = (uint64_t)&v82 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v5);
  v105 = (uint64_t)&v82 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
  __chkstk_darwin(v7);
  v97 = (char *)&v82 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3740);
  __chkstk_darwin(v9);
  v95 = (uint64_t *)((char *)&v82 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3BF7E0);
  __chkstk_darwin(v11);
  v94 = (char *)&v82 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0C38);
  __chkstk_darwin(v13);
  v96 = (uint64_t)&v82 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = type metadata accessor for ModernShelf(0);
  v100 = *(_QWORD *)(v98 - 8);
  v15 = __chkstk_darwin(v98);
  v17 = (uint64_t *)((char *)&v82 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v15);
  v101 = (uint64_t)&v82 - v18;
  v19 = type metadata accessor for ScalarDictionary(0);
  __chkstk_darwin(v19);
  v93 = (char *)&v82 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = type metadata accessor for MetricsData.Configuration(0);
  v89 = *(_QWORD *)(v92 - 8);
  __chkstk_darwin(v92);
  v22 = (char *)&v82 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
  __chkstk_darwin(v23);
  v25 = (char *)&v82 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for ActionMetrics(0);
  __chkstk_darwin(v26);
  v87 = (char *)&v82 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for FlowDestination(0);
  v29 = __chkstk_darwin(v28);
  v31 = (char *)&v82 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = v31;
  __chkstk_darwin(v29);
  v33 = (char *)&v82 - v32;
  *(_QWORD *)v33 = 2;
  *(_OWORD *)(v33 + 8) = 0u;
  *(_OWORD *)(v33 + 24) = 0u;
  *(_OWORD *)(v33 + 40) = 0u;
  *((_QWORD *)v33 + 7) = 0;
  v33[64] = 9;
  swift_storeEnumTagMultiPayload((char *)&v82 - v32, v34, 8);
  sub_14510((uint64_t)v33, (uint64_t)v31, type metadata accessor for FlowDestination);
  v35 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v110._object = (void *)0xE000000000000000;
  v36._countAndFlagsBits = 0x535F4E4F49544341;
  v36._object = (void *)0xEE004C4C415F4545;
  v37._countAndFlagsBits = 0;
  v37._object = (void *)0xE000000000000000;
  v110._countAndFlagsBits = 0;
  v38 = NSLocalizedString(_:tableName:bundle:value:comment:)(v36, (Swift::String_optional)0, (NSBundle)v35, v37, v110);
  countAndFlagsBits = v38._countAndFlagsBits;
  object = v38._object;

  v83 = static MetricsTargetID.seeAll.getter();
  v40 = v39;
  v82 = static MetricsTargetType.button.getter(v83, v39);
  v42 = v41;
  v91 = type metadata accessor for URL(0);
  v90 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v91 - 8) + 56);
  v43 = (uint64_t)v25;
  v90(v25, 1, 1, v91);
  v44 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0930);
  v45 = type metadata accessor for MetricsData(0);
  v46 = swift_allocObject(v44, ((*(unsigned __int8 *)(*(_QWORD *)(v45 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v45 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v45 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v45 - 8) + 80) | 7);
  *(_OWORD *)(v46 + 16) = xmmword_2EA0D0;
  v47 = static MetricsActionType.navigate.getter();
  v49 = v48;
  static MetricsData.Configuration.podcasts.getter();
  static MetricsData.clickData(targetID:targetType:actionType:actionContext:actionResult:actionURL:fields:configuration:)(v83, v40, v82, v42, v47, v49, 0, 0, 0, 0, v25, &_swiftEmptyDictionarySingleton, v22);
  swift_bridgeObjectRelease(v49);
  v50 = (*(uint64_t (**)(char *, uint64_t))(v89 + 8))(v22, v92);
  v51 = v93;
  ScalarDictionary.init()(v50);
  v52 = (uint64_t)v87;
  ActionMetrics.init(data:custom:)(v46, v51);
  swift_bridgeObjectRelease(v40);
  swift_bridgeObjectRelease(v42);
  v53 = v43;
  v84 = v43;
  sub_1459C(v43, &qword_3B4370);
  LOBYTE(v106) = 0;
  v109[0] = 0;
  v54 = type metadata accessor for FlowAction(0);
  swift_allocObject(v54, *(unsigned int *)(v54 + 48), *(unsigned __int16 *)(v54 + 52));
  v55 = FlowAction.init(_:id:title:presentationContext:animationBehavior:presentationStyle:destinationPageHeader:actionMetrics:)((uint64_t)v88, 0, 0, countAndFlagsBits, (uint64_t)object, (char *)&v106, 0, 48, v109, v52);
  v56 = v105;
  sub_145D8((uint64_t)v33, type metadata accessor for FlowDestination);
  v57 = type metadata accessor for ActionMenu(0);
  v58 = (uint64_t)v94;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 56))(v94, 1, 1, v57);
  v59 = (uint64_t)v95;
  *v95 = v55;
  v60 = type metadata accessor for Header.PrimaryAction(0);
  swift_storeEnumTagMultiPayload(v59, v60, 0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 56))(v59, 0, 1, v60);
  v61 = type metadata accessor for ArtworkModel(0);
  v62 = (uint64_t)v97;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 56))(v97, 1, 1, v61);
  v93 = (char *)v55;
  swift_retain(v55);
  v63 = v96;
  Header.init(title:subtitle:subtitleSymbolName:displaySubtitleAsEyebrow:hasColoredBackground:titleContextMenu:primaryAction:secondaryButtons:artwork:)(0xD000000000000011, 0x800000000030BB20, 0, 0, 0, 0, 0, 0, v96, v58, v59, (uint64_t)_swiftEmptyArrayStorage, v62);
  v99 = sub_2452E8(v99);
  v64 = v91;
  v65 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v90;
  v66 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v90)(v53, 1, 1, v91);
  v108 = 0;
  v106 = 0u;
  v107 = 0u;
  v67 = static MetricsTargetType.swoosh.getter(v66);
  v69 = v68;
  static ImpressionMetrics.shelf(id:idType:uniqueID:impressionType:name:)(0x7079746F746F7250, 0xEF7478654E705565, 0, 0, 0xD00000000000002ALL, 0x800000000030BAF0, v67, v68, 0xD000000000000011, 0x800000000030BB20);
  swift_bridgeObjectRelease(v69);
  v70 = type metadata accessor for ImpressionMetrics(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v70 - 8) + 56))(v56, 0, 1, v70);
  v71 = (int *)v98;
  v72 = *(int *)(v98 + 32);
  *((_BYTE *)v17 + v72) = 3;
  v73 = (uint64_t)v17 + v71[9];
  v65(v73, 1, 1, v64);
  *v17 = 0xD00000000000002ALL;
  v17[1] = 0x800000000030BAF0;
  sub_15BD4(v63, (uint64_t)v17 + v71[5], &qword_3B0C38);
  v74 = (char *)v17 + v71[6];
  *(_WORD *)v74 = 258;
  *((_WORD *)v74 + 3) = 1;
  *(_DWORD *)(v74 + 2) = 3;
  *((_QWORD *)v74 + 1) = 1;
  *(_QWORD *)((char *)v17 + v71[7]) = v99;
  sub_15B8C(v84, v73);
  *((_BYTE *)v17 + v71[10]) = 1;
  *((_BYTE *)v17 + v71[11]) = 0;
  v75 = (uint64_t)v17 + v71[12];
  if (*((_QWORD *)&v107 + 1))
  {
    sub_F4D8(&v106, v75);
  }
  else
  {
    v76 = (unint64_t)v107;
    *(_OWORD *)v75 = v106;
    *(_OWORD *)(v75 + 16) = v76;
    *(_QWORD *)(v75 + 32) = v108;
  }
  sub_15BD4(v105, (uint64_t)v17 + v71[13], (uint64_t *)&unk_3B8790);
  *((_BYTE *)v17 + v72) = 3;
  v77 = v101;
  sub_15C18((uint64_t)v17, v101);
  v78 = v102;
  sub_14510(v77, v102, type metadata accessor for ModernShelf);
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v100 + 56))(v78, 0, 2, v71);
  swift_beginAccess(v104 + OBJC_IVAR____TtC8ShelfKit16HomePageProvider_prototypeUpNextShelf, &v106, 33, 0);
  v79 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B33D0);
  PerformanceLoadable.value.setter(v78, v79);
  swift_endAccess(&v106);
  v80 = v103;
  sub_63130(v103);
  CurrentValueSubject.value.setter(v80);
  swift_release(v93);
  return sub_145D8(v77, type metadata accessor for ModernShelf);
}

void sub_61094(double **a1)
{
  _s8ShelfKit27UpNextScoringWeightsManagerO013updateDefaultF04withyAA0cdeF0C_tFZ_0(*a1);
}

uint64_t sub_6109C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint8_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_327F8(0, (unint64_t *)&qword_3B0CF0, OS_os_log_ptr);
  static OS_os_log.home.getter();
  swift_errorRetain(a1);
  v6 = swift_errorRetain(a1);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = swift_slowAlloc(12, -1);
    v16 = v2;
    v10 = (uint8_t *)v9;
    v11 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v10 = 138412290;
    swift_errorRetain(a1);
    v12 = _swift_stdlib_bridgeErrorToNSError(a1);
    v17 = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18);
    *v11 = v12;
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl(&dword_0, v7, v8, "Unable to fetch the prototype \"Up Next\" scoring weights: %@", v10, 0xCu);
    v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8E70);
    swift_arrayDestroy(v11, 1, v13);
    swift_slowDealloc(v11, -1, -1);
    v14 = v10;
    v2 = v16;
    swift_slowDealloc(v14, -1, -1);
  }
  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

unint64_t static HomePageProvider.recentlyPlayedShelfID.getter()
{
  return 0xD000000000000028;
}

uint64_t sub_61298(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  void *v33;
  id v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  id v38;
  Swift::String v39;
  Swift::String v40;
  Swift::String v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  int *v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  char *v97;
  char *v98;
  void (*v99)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  void *object;
  char *v105;
  uint64_t countAndFlagsBits;
  char *v107;
  uint64_t *v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  char v122;
  Swift::String v123;
  Swift::String v124;

  v113 = a1;
  v1 = type metadata accessor for PageContent(0);
  __chkstk_darwin(v1);
  v117 = (uint64_t)&v91 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B35D0);
  __chkstk_darwin(v3);
  v116 = (uint64_t)&v91 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v5);
  v110 = (char *)&v91 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
  __chkstk_darwin(v7);
  v111 = (char *)&v91 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3740);
  __chkstk_darwin(v9);
  v108 = (uint64_t *)((char *)&v91 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3BF7E0);
  __chkstk_darwin(v11);
  v107 = (char *)&v91 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0C38);
  __chkstk_darwin(v13);
  v109 = (uint64_t)&v91 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v112 = type metadata accessor for ModernShelf(0);
  v114 = *(_QWORD *)(v112 - 8);
  v15 = __chkstk_darwin(v112);
  v17 = (uint64_t *)((char *)&v91 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v15);
  v115 = (uint64_t)&v91 - v18;
  v19 = type metadata accessor for ScalarDictionary(0);
  __chkstk_darwin(v19);
  v105 = (char *)&v91 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v103 = type metadata accessor for MetricsData.Configuration(0);
  v102 = *(_QWORD *)(v103 - 8);
  __chkstk_darwin(v103);
  v98 = (char *)&v91 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
  __chkstk_darwin(v22);
  v24 = (char *)&v91 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for ActionMetrics(0);
  __chkstk_darwin(v25);
  v101 = (char *)&v91 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for FlowDestination(0);
  v28 = __chkstk_darwin(v27);
  v30 = (char *)&v91 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = v30;
  __chkstk_darwin(v28);
  v32 = (char *)&v91 - v31;
  v33 = (void *)objc_opt_self(NSBundle);
  v34 = objc_msgSend(v33, "mainBundle");
  v35._countAndFlagsBits = 0xD000000000000018;
  v123._object = (void *)0xE000000000000000;
  v35._object = (void *)0x800000000030BAD0;
  v36._countAndFlagsBits = 0;
  v36._object = (void *)0xE000000000000000;
  v123._countAndFlagsBits = 0;
  v37 = NSLocalizedString(_:tableName:bundle:value:comment:)(v35, (Swift::String_optional)0, (NSBundle)v34, v36, v123);
  countAndFlagsBits = v37._countAndFlagsBits;
  object = v37._object;

  *(_QWORD *)v32 = 1;
  *(_OWORD *)(v32 + 8) = 0u;
  *(_OWORD *)(v32 + 24) = 0u;
  *(_OWORD *)(v32 + 40) = 0u;
  *((_QWORD *)v32 + 7) = 0;
  v32[64] = 9;
  swift_storeEnumTagMultiPayload(v32, v27, 8);
  sub_14510((uint64_t)v32, (uint64_t)v30, type metadata accessor for FlowDestination);
  v38 = objc_msgSend(v33, "mainBundle");
  v124._object = (void *)0xE000000000000000;
  v39._countAndFlagsBits = 0x535F4E4F49544341;
  v39._object = (void *)0xEE004C4C415F4545;
  v40._countAndFlagsBits = 0;
  v40._object = (void *)0xE000000000000000;
  v124._countAndFlagsBits = 0;
  v41 = NSLocalizedString(_:tableName:bundle:value:comment:)(v39, (Swift::String_optional)0, (NSBundle)v38, v40, v124);
  v96 = v41._countAndFlagsBits;
  v95 = v41._object;

  v93 = static MetricsTargetID.seeAll.getter();
  v43 = v42;
  v92 = static MetricsTargetType.button.getter(v93, v42);
  v45 = v44;
  v100 = type metadata accessor for URL(0);
  v99 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v100 - 8) + 56);
  v46 = (uint64_t)v24;
  v99(v24, 1, 1, v100);
  v47 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0930);
  v48 = type metadata accessor for MetricsData(0);
  v49 = swift_allocObject(v47, ((*(unsigned __int8 *)(*(_QWORD *)(v48 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v48 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v48 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v48 - 8) + 80) | 7);
  *(_OWORD *)(v49 + 16) = xmmword_2EA0D0;
  v50 = static MetricsActionType.navigate.getter();
  v52 = v51;
  v53 = v98;
  static MetricsData.Configuration.podcasts.getter();
  static MetricsData.clickData(targetID:targetType:actionType:actionContext:actionResult:actionURL:fields:configuration:)(v93, v43, v92, v45, v50, v52, 0, 0, 0, 0, v46, &_swiftEmptyDictionarySingleton, v53);
  swift_bridgeObjectRelease();
  v54 = (*(uint64_t (**)(char *, uint64_t))(v102 + 8))(v53, v103);
  v55 = v105;
  ScalarDictionary.init()(v54);
  v56 = (uint64_t)v101;
  ActionMetrics.init(data:custom:)(v49, v55);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v94 = v46;
  sub_1459C(v46, &qword_3B4370);
  LOBYTE(v119) = 0;
  v122 = 0;
  v57 = type metadata accessor for FlowAction(0);
  swift_allocObject(v57, *(unsigned int *)(v57 + 48), *(unsigned __int16 *)(v57 + 52));
  v58 = FlowAction.init(_:id:title:presentationContext:animationBehavior:presentationStyle:destinationPageHeader:actionMetrics:)((uint64_t)v97, 0, 0, v96, (uint64_t)v95, (char *)&v119, 0, 48, &v122, v56);
  v59 = (uint64_t)v32;
  v60 = (uint64_t)v110;
  sub_145D8(v59, type metadata accessor for FlowDestination);
  v61 = type metadata accessor for ActionMenu(0);
  v62 = v107;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 56))(v107, 1, 1, v61);
  v63 = (uint64_t)v108;
  *v108 = v58;
  v64 = type metadata accessor for Header.PrimaryAction(0);
  swift_storeEnumTagMultiPayload(v63, v64, 0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 56))(v63, 0, 1, v64);
  v65 = type metadata accessor for ArtworkModel(0);
  v66 = (uint64_t)v111;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 56))(v111, 1, 1, v65);
  v67 = (uint64_t)object;
  swift_bridgeObjectRetain(object);
  v105 = (char *)v58;
  swift_retain(v58);
  v90 = (uint64_t)v62;
  v68 = v109;
  v69 = countAndFlagsBits;
  Header.init(title:subtitle:subtitleSymbolName:displaySubtitleAsEyebrow:hasColoredBackground:titleContextMenu:primaryAction:secondaryButtons:artwork:)(countAndFlagsBits, v67, 0, 0, 0, 0, 0, 0, v109, v90, v63, (uint64_t)_swiftEmptyArrayStorage, v66);
  v113 = sub_2452E8(v113);
  v70 = v46;
  v71 = v100;
  v72 = v99;
  v73 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v99)(v70, 1, 1, v100);
  v121 = 0;
  v119 = 0u;
  v120 = 0u;
  v74 = static MetricsTargetType.swoosh.getter(v73);
  static ImpressionMetrics.shelf(id:idType:uniqueID:impressionType:name:)(0x796C746E65636552, 0xEE00646579616C50, 0, 0, 0xD000000000000028, 0x800000000030B710, v74, v75, v69, v67);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v76 = type metadata accessor for ImpressionMetrics(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v76 - 8) + 56))(v60, 0, 1, v76);
  v77 = (int *)v112;
  v78 = *(int *)(v112 + 32);
  *((_BYTE *)v17 + v78) = 3;
  v79 = (char *)v17 + v77[9];
  v72(v79, 1, 1, v71);
  *v17 = 0xD000000000000028;
  v17[1] = 0x800000000030B710;
  sub_15BD4(v68, (uint64_t)v17 + v77[5], &qword_3B0C38);
  v80 = (char *)v17 + v77[6];
  *(_WORD *)v80 = 257;
  *((_WORD *)v80 + 3) = 256;
  *(_DWORD *)(v80 + 2) = 0;
  *((_QWORD *)v80 + 1) = 1;
  *(_QWORD *)((char *)v17 + v77[7]) = v113;
  v81 = (uint64_t)v79;
  v82 = v77;
  sub_15B8C(v94, v81);
  *((_BYTE *)v17 + v77[10]) = 1;
  *((_BYTE *)v17 + v77[11]) = 0;
  v83 = (uint64_t)v17 + v77[12];
  if (*((_QWORD *)&v120 + 1))
  {
    sub_F4D8(&v119, v83);
  }
  else
  {
    v84 = (unint64_t)v120;
    *(_OWORD *)v83 = v119;
    *(_OWORD *)(v83 + 16) = v84;
    *(_QWORD *)(v83 + 32) = v121;
  }
  sub_15BD4(v60, (uint64_t)v17 + v77[13], (uint64_t *)&unk_3B8790);
  *((_BYTE *)v17 + v78) = 3;
  v85 = v115;
  sub_15C18((uint64_t)v17, v115);
  v86 = v116;
  sub_14510(v85, v116, type metadata accessor for ModernShelf);
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v114 + 56))(v86, 0, 2, v82);
  swift_beginAccess(v118 + OBJC_IVAR____TtC8ShelfKit16HomePageProvider_recentlyPlayedShelf, &v119, 33, 0);
  v87 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B33D0);
  PerformanceLoadable.value.setter(v86, v87);
  swift_endAccess(&v119);
  v88 = v117;
  sub_63130(v117);
  CurrentValueSubject.value.setter(v88);
  swift_release(v105);
  return sub_145D8(v85, type metadata accessor for ModernShelf);
}

uint64_t sub_61CD8(uint64_t a1, uint64_t a2, void (*a3)())
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[24];

  v4 = a2 + 16;
  swift_beginAccess(a2 + 16, v8, 0, 0);
  result = swift_weakLoadStrong(v4);
  if (result)
  {
    v6 = result;
    v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3BF7F0);
    FRPOutput.content.getter(v7);
    a3();
    swift_bridgeObjectRelease();
    return swift_release(v6);
  }
  return result;
}

_QWORD *sub_61D64@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;

  result = Array<A>.mapToModernShelves()(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_61D8C(unint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_signpost_type_t v27;
  void (*v28)(char *, char *, uint64_t);
  uint8_t *v29;
  os_signpost_id_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t Strong;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __n128 v41;
  unint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  _QWORD v53[3];
  char v54[24];

  v4 = type metadata accessor for PageContent(0);
  __chkstk_darwin(v4);
  v47 = (uint64_t)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for OSSignposter(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v47 - v11;
  v13 = type metadata accessor for OSSignpostID(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v47 - v19;
  v48 = *a1;
  v49 = a2 + 16;
  v21 = static OSSignposter.listenNow.getter(v18);
  v22 = OSSignposter.logHandle.getter(v21);
  OSSignpostID.init(log:)(v22);
  v23 = *(uint64_t (**)(char *, uint64_t))(v7 + 8);
  v51 = v6;
  v24 = v23(v12, v6);
  v25 = static OSSignposter.listenNow.getter(v24);
  v50 = v10;
  v26 = OSSignposter.logHandle.getter(v25);
  v27 = static os_signpost_type_t.begin.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v28 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
    v28(v17, v20, v13);
    v29 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v29 = 0;
    v30 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_0, v26, v27, v30, "HomePageProvider.fetchCachedStoreShelves()", "", v29, 2u);
    swift_slowDealloc(v29, -1, -1);

    (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  }
  else
  {

    v28 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
  }
  v31 = v13;
  v28(v17, v20, v13);
  v32 = type metadata accessor for OSSignpostIntervalState(0);
  swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
  v33 = OSSignpostIntervalState.init(id:isOpen:)(v17, 1);
  v23(v50, v51);
  v34 = v49;
  swift_beginAccess(v49, v54, 0, 0);
  Strong = swift_weakLoadStrong(v34);
  v36 = v20;
  if (Strong)
  {
    v37 = Strong;
    v38 = v48;
    if (*(_QWORD *)(v48 + 16))
    {
      v39 = Strong + OBJC_IVAR____TtC8ShelfKit16HomePageProvider_storeShelves;
      swift_beginAccess(Strong + OBJC_IVAR____TtC8ShelfKit16HomePageProvider_storeShelves, v53, 32, 0);
      v40 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B33E0);
      PerformanceLoadable.value.getter(v40, v41);
      v42 = v52;
      swift_endAccess(v53);
      v53[0] = v42;
      v43 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0A38);
      v44 = Loadable.notLoaded.getter(v43);
      sub_64510(v42);
      if ((v44 & 1) != 0)
      {
        v52 = v38;
        swift_beginAccess(v39, v53, 33, 0);
        swift_bridgeObjectRetain(v38);
        PerformanceLoadable.value.setter(&v52, v40);
        swift_endAccess(v53);
        v45 = v47;
        sub_63130(v47);
        CurrentValueSubject.value.setter(v45);
      }
    }
    swift_release(v37);
  }
  sub_62124("HomePageProvider.fetchCachedStoreShelves()", 42, 2, v33);
  swift_release(v33);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v36, v31);
}

char *sub_62124(const char *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  char *result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  char *v29;
  uint8_t *v30;
  os_signpost_id_t v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  int v38;
  char *v39;

  v38 = a3;
  v39 = (char *)a1;
  v5 = type metadata accessor for OSSignpostError(0);
  v35 = *(_QWORD *)(v5 - 8);
  v36 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OSSignpostID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v37 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v13 = (char *)&v33 - v12;
  v14 = type metadata accessor for OSSignposter(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = static OSSignposter.listenNow.getter(v16);
  v20 = OSSignposter.logHandle.getter(v19);
  v21 = OSSignpostIntervalState.signpostID.getter();
  v34 = static os_signpost_type_t.end.getter(v21);
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    goto LABEL_5;
  v33 = v15;
  v22 = v9;
  if ((v38 & 1) == 0)
  {
    if (!v39)
    {
      __break(1u);
LABEL_5:

      (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v8);
      return (char *)(*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v14);
    }
    goto LABEL_10;
  }
  result = v39;
  if ((unint64_t)v39 >> 32)
  {
    __break(1u);
    goto LABEL_16;
  }
  if (v39 >> 11 == 27)
  {
LABEL_17:
    __break(1u);
    return result;
  }
  if (v39 >> 16 > 0x10)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v39 = sub_2441C8();
LABEL_10:
  v24 = swift_retain(a4);
  checkForErrorAndConsumeState(state:)(v24);
  swift_release(a4);
  v26 = v35;
  v25 = v36;
  if ((*(unsigned int (**)(char *, uint64_t))(v35 + 88))(v7, v36) == enum case for OSSignpostError.doubleEnd(_:))
  {
    v27 = "[Error] Interval already ended";
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v26 + 8))(v7, v25);
    v27 = "";
  }
  v28 = v14;
  v29 = v37;
  (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v37, v13, v8);
  v30 = (uint8_t *)swift_slowAlloc(2, -1);
  *(_WORD *)v30 = 0;
  v31 = OSSignpostID.rawValue.getter();
  _os_signpost_emit_with_name_impl(&dword_0, v20, (os_signpost_type_t)v34, v31, v39, v27, v30, 2u);
  swift_slowDealloc(v30, -1, -1);

  v32 = *(void (**)(char *, uint64_t))(v22 + 8);
  v32(v13, v8);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v18, v28);
  return (char *)((uint64_t (*)(char *, uint64_t))v32)(v29, v8);
}

uint64_t sub_623FC(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v5;
  char v6;
  char v7;
  __int128 v8;
  __int128 v10[2];
  char v11;
  char v12;
  char v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  v5 = *(_BYTE *)(a1 + 32);
  v6 = *(_BYTE *)(a1 + 33);
  v7 = *(_BYTE *)(a1 + 34);
  v8 = *(_OWORD *)(a1 + 16);
  v10[0] = *(_OWORD *)a1;
  v10[1] = v8;
  v11 = v5;
  v12 = v6;
  v13 = v7;
  v14 = *(_OWORD *)(a1 + 40);
  v15 = *(_OWORD *)(a1 + 56);
  v16 = *(_OWORD *)(a1 + 72);
  v17 = *(_OWORD *)(a1 + 88);
  return sub_62484(a4, a5, v10, a2 & 1u | (a3 > 2));
}

uint64_t sub_62484(uint64_t a1, uint64_t a2, __int128 *a3, char a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55[2];
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;

  v50 = a2;
  v51 = a1;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3658);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3660);
  v52 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3668);
  v16 = *(_QWORD *)(v15 - 8);
  v53 = v15;
  v54 = v16;
  __chkstk_darwin(v15);
  v18 = (char *)&v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = a3[5];
  v60 = a3[4];
  v61 = v19;
  v62 = *((_QWORD *)a3 + 12);
  v20 = a3[1];
  v56 = *a3;
  v57 = v20;
  v21 = a3[3];
  v58 = a3[2];
  v59 = v21;
  sub_150C8(a2, (uint64_t)v55);
  v22 = swift_allocObject(&unk_37A530, 176, 7);
  sub_F4D8(v55, v22 + 16);
  v23 = v58;
  *(_OWORD *)(v22 + 104) = v59;
  v24 = v61;
  *(_OWORD *)(v22 + 120) = v60;
  *(_OWORD *)(v22 + 136) = v24;
  v25 = v57;
  *(_OWORD *)(v22 + 56) = v56;
  *(_OWORD *)(v22 + 72) = v25;
  *(_QWORD *)(v22 + 152) = v62;
  *(_OWORD *)(v22 + 88) = v23;
  *(_BYTE *)(v22 + 160) = a4;
  *(_QWORD *)(v22 + 168) = v4;
  sub_64408(&v56);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3670);
  v27 = sub_32914(&qword_3B3678, &qword_3B3670, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  Deferred.init(createPublisher:)(sub_643F4, v22, v26, v27);
  v28 = sub_327F8(0, (unint64_t *)&qword_3B0CF0, OS_os_log_ptr);
  v29 = (void *)static OS_os_log.homePageSignpost.getter(v28);
  v30 = sub_32914(&qword_3B3680, &qword_3B3658, (uint64_t)&protocol conformance descriptor for Deferred<A>);
  v31 = Publisher.emitSignpostEvent(log:name:)(v29, "HomePagePresenter.storeDataProvider", 35, 2, v8, v30);

  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  *(_QWORD *)&v55[0] = v31;
  v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3688);
  v33 = sub_32914(&qword_3B3690, &qword_3B3688, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.retry(_:)(3, v32, v33);
  swift_release(v31);
  sub_150C8(v50, (uint64_t)v55);
  v34 = swift_allocObject(&unk_37A558, 64, 7);
  sub_F4D8(v55, v34 + 16);
  v35 = v51;
  *(_QWORD *)(v34 + 56) = v51;
  v36 = swift_retain(v35);
  v37 = static Subscribers.Demand.unlimited.getter(v36);
  v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2970);
  v39 = sub_32914(&qword_3B3698, &qword_3B3660, (uint64_t)&protocol conformance descriptor for Publishers.Retry<A>);
  v40 = sub_32914(&qword_3B2978, &qword_3B2970, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.flatMap<A>(maxPublishers:_:)(v37, sub_43000, v34, v12, v38, v39, v40);
  swift_release(v34);
  v41 = (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v14, v12);
  v42 = (void *)static OS_os_log.homePageSignpost.getter(v41);
  v43 = sub_32914(&qword_3B36A0, &qword_3B3668, (uint64_t)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
  v44 = v53;
  v45 = Publisher.emitSignpostEvent(log:name:)(v42, "HomePagePresenter.progressivelyLoadShelfItemsPublisher", 54, 2, v53, v43);

  (*(void (**)(char *, uint64_t))(v54 + 8))(v18, v44);
  *(_QWORD *)&v55[0] = v45;
  v46 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B36A8);
  v47 = sub_32914(&qword_3B36B0, &qword_3B36A8, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v48 = Publisher.mapToLoadable()(v46, v47);
  swift_release(v45);
  return v48;
}

uint64_t sub_628D8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(_BYTE *, _QWORD);
  uint64_t v12;
  _BYTE v14[32];
  _BYTE v15[24];
  uint64_t v16;
  _BYTE v17[24];

  v4 = type metadata accessor for PageContent(0);
  __chkstk_darwin(v4);
  v6 = &v14[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v7 = *a1;
  a2 += 16;
  swift_beginAccess(a2, v17, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (result)
  {
    v9 = result;
    v16 = v7;
    swift_beginAccess(result + OBJC_IVAR____TtC8ShelfKit16HomePageProvider_storeShelves, v15, 33, 0);
    v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B33E0);
    v11 = (void (*)(_BYTE *, _QWORD))PerformanceLoadable.value.modify(v14, v10);
    v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0A38);
    Loadable.coalesce(update:keepLoadedDataOnFailure:droppingNewNotLoadeds:)(&v16, 1, 1, v12);
    v11(v14, 0);
    swift_endAccess(v15);
    sub_63130((uint64_t)v6);
    CurrentValueSubject.value.setter(v6);
    return swift_release(v9);
  }
  return result;
}

uint64_t sub_62A04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  _QWORD *v15;

  v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_327F8(0, (unint64_t *)&qword_3B8710, OS_dispatch_queue_ptr);
  static DispatchQoS.userInitiated.getter();
  v15 = _swiftEmptyArrayStorage;
  v10 = sub_F1C0(&qword_3B20B8, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B20C0);
  v12 = sub_32914((unint64_t *)&qword_3B20C8, &qword_3B20C0, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v15, v11, v12, v4, v10);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v0);
  result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000027, 0x800000000030BA50, v9, v6, v3, 0);
  qword_3B3348 = result;
  return result;
}

uint64_t sub_62BD8(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v24;
  id v25;
  _OWORD v26[6];
  uint64_t v27;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2B18);
  __chkstk_darwin(v6);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  v11 = *(_OWORD *)(a2 + 80);
  v26[4] = *(_OWORD *)(a2 + 64);
  v26[5] = v11;
  v27 = *(_QWORD *)(a2 + 96);
  v12 = *(_OWORD *)(a2 + 16);
  v26[0] = *(_OWORD *)a2;
  v26[1] = v12;
  v13 = *(_OWORD *)(a2 + 48);
  v26[2] = *(_OWORD *)(a2 + 32);
  v26[3] = v13;
  v14 = (*(uint64_t (**)(_OWORD *, uint64_t, uint64_t, uint64_t))(v10 + 120))(v26, a3, v9, v10);
  v15 = Promise.publisher.getter(v14);
  swift_release(v14);
  *(_QWORD *)&v26[0] = v15;
  if (qword_3B0068 != -1)
    swift_once(&qword_3B0068, sub_62A04);
  v16 = (void *)qword_3B3348;
  v25 = (id)qword_3B3348;
  v17 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v8, 1, 1, v17);
  v18 = v16;
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B36B8);
  v20 = sub_327F8(0, (unint64_t *)&qword_3B8710, OS_dispatch_queue_ptr);
  v21 = sub_32914(&qword_3B36C0, &qword_3B36B8, (uint64_t)&protocol conformance descriptor for Future<A, B>);
  v22 = sub_436CC();
  Publisher.receive<A>(on:options:)(&v25, v8, v19, v20, v21, v22);
  sub_1459C((uint64_t)v8, &qword_3B2B18);

  return swift_release(*(_QWORD *)&v26[0]);
}

uint64_t sub_62DB0(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[24];
  _BYTE v16[24];

  v6 = type metadata accessor for PageContent(0);
  __chkstk_darwin(v6);
  v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8660);
  __chkstk_darwin(v9);
  v11 = &v15[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  a2 += 16;
  swift_beginAccess(a2, v16, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (result)
  {
    v13 = result;
    sub_64238(a1, (uint64_t)v11);
    v14 = v13 + *a3;
    swift_beginAccess(v14, v15, 33, 0);
    sub_64280((uint64_t)v11, v14);
    swift_endAccess(v15);
    sub_63130((uint64_t)v8);
    CurrentValueSubject.value.setter(v8);
    sub_1459C((uint64_t)v11, &qword_3B8660);
    return swift_release(v13);
  }
  return result;
}

uint64_t sub_62EF0(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (uint64_t *)(*a1 + OBJC_IVAR____TtC8ShelfKit20LibraryEpisodeLockup_podcastUuid);
  v2 = *v1;
  v3 = *(_QWORD *)(*a1 + OBJC_IVAR____TtC8ShelfKit20LibraryEpisodeLockup_uuid + 8);
  swift_bridgeObjectRetain(v1[1]);
  swift_bridgeObjectRetain(v3);
  return v2;
}

uint64_t HomePageProvider.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 48));
  __swift_destroy_boxed_opaque_existential_1((_QWORD *)(v0 + 64));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 104));

  swift_release(*(_QWORD *)(v0 + 128));
  __swift_destroy_boxed_opaque_existential_1((_QWORD *)(v0 + 136));
  swift_release(*(_QWORD *)(v0 + 176));
  swift_release(*(_QWORD *)(v0 + 184));
  swift_release(*(_QWORD *)(v0 + 192));
  sub_1459C(v0 + OBJC_IVAR____TtC8ShelfKit16HomePageProvider_unifiedMessagingHeaderShelf, &qword_3B8660);
  v1 = v0 + OBJC_IVAR____TtC8ShelfKit16HomePageProvider_sharedWithYouShelf;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B33D0);
  v3 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8);
  v3(v1, v2);
  v4 = v0 + OBJC_IVAR____TtC8ShelfKit16HomePageProvider_fromChannelShelves;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B33E0);
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v6(v4, v5);
  v6(v0 + OBJC_IVAR____TtC8ShelfKit16HomePageProvider_storeShelves, v5);
  sub_1459C(v0 + OBJC_IVAR____TtC8ShelfKit16HomePageProvider_addFavoriteCategoriesTipShelf, &qword_3B8660);
  sub_1459C(v0 + OBJC_IVAR____TtC8ShelfKit16HomePageProvider_recommendationsUpdatedTipShelf, &qword_3B8660);
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit16HomePageProvider_subscriptions));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v3(v0 + OBJC_IVAR____TtC8ShelfKit16HomePageProvider_upNextShelf, v2);
  v3(v0 + OBJC_IVAR____TtC8ShelfKit16HomePageProvider_prototypeUpNextShelf, v2);
  v3(v0 + OBJC_IVAR____TtC8ShelfKit16HomePageProvider_recentlyPlayedShelf, v2);
  return v0;
}

uint64_t HomePageProvider.__deallocating_deinit()
{
  uint64_t v0;

  HomePageProvider.deinit();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_63130@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  __n128 v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  Swift::String v29;
  Swift::String v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  unint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;

  v64 = type metadata accessor for ScalarDictionary(0);
  v62 = *(_QWORD *)(v64 - 8);
  v3 = __chkstk_darwin(v64);
  v5 = (char *)&v57 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v57 - v6;
  v8 = type metadata accessor for PageMetrics(0);
  v68 = *(_QWORD *)(v8 - 8);
  v69 = v8;
  __chkstk_darwin(v8);
  v67 = (char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = type metadata accessor for PageID(0);
  v63 = *(_QWORD *)(v66 - 8);
  __chkstk_darwin(v66);
  v11 = (char *)&v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = type metadata accessor for ModernPage(0);
  __chkstk_darwin(v65);
  v13 = (char *)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B35D0);
  __chkstk_darwin(v14);
  v16 = (char *)&v57 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess(v1 + OBJC_IVAR____TtC8ShelfKit16HomePageProvider_upNextShelf, &v71, 32, 0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B33D0);
  PerformanceLoadable.value.getter(v17, v18);
  swift_endAccess(&v71);
  LOBYTE(v14) = Loadable.notLoaded.getter(v14);
  sub_1459C((uint64_t)v16, &qword_3B35D0);
  if ((v14 & 1) != 0)
    goto LABEL_5;
  sub_5C9EC((uint64_t)&v71);
  v19 = v71;
  v21 = v72;
  v20 = v73;
  if ((ModernShelfListBuilder.hasImportantContent.getter() & 1) != 0)
  {
    v22 = static MetricsPageType.landing.getter();
    v60 = v19;
    v23 = v22;
    v25 = v24;
    v26 = ((uint64_t (*)(void))static MetricsPageID.listenNow.getter)();
    v61 = a1;
    v28 = v27;
    v71 = v23;
    v72 = v25;
    v29._countAndFlagsBits = 95;
    v29._object = (void *)0xE100000000000000;
    String.append(_:)(v29);
    v30._countAndFlagsBits = v26;
    v30._object = v28;
    String.append(_:)(v30);
    swift_bridgeObjectRelease(v28);
    v31 = PageID.init(with:)(v71, v72);
    v32 = static MetricsPageID.listenNow.getter(v31);
    v34 = v33;
    v35 = static MetricsPageType.landing.getter();
    v71 = v32;
    v72 = v34;
    v73 = v35;
    v74 = v36;
    v75 = 0;
    v76 = 0;
    v77 = 0;
    ScalarDictionary.init()(v35);
    v59 = sub_C97A8((uint64_t)_swiftEmptyArrayStorage);
    v37 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B89A0);
    v38 = type metadata accessor for PageMetrics.Instruction(0);
    v39 = swift_allocObject(v37, ((*(unsigned __int8 *)(*(_QWORD *)(v38 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v38 - 8) + 80))+ 2 * *(_QWORD *)(*(_QWORD *)(v38 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v38 - 8) + 80) | 7);
    *(_OWORD *)(v39 + 16) = xmmword_2EA080;
    v70 = 0;
    PageMetrics.Instruction.init(eventType:)(&v70);
    v70 = 1;
    PageMetrics.Instruction.init(eventType:)(&v70);
    v40 = MetricsPageFields.metricsFields.getter();
    v58 = v11;
    v41 = v62;
    v42 = v64;
    (*(void (**)(char *, char *, uint64_t))(v62 + 16))(v5, v7, v64);
    v43 = v67;
    PageMetrics.init(instructions:pageFields:custom:clickLocationFields:)(v39, v40, v5, v59);
    (*(void (**)(char *, uint64_t))(v41 + 8))(v7, v42);
    v44 = v72;
    v45 = v75;
    v46 = v77;
    swift_bridgeObjectRelease(v74);
    swift_bridgeObjectRelease(v44);
    swift_bridgeObjectRelease(v45);
    swift_bridgeObjectRelease(v46);
    LOBYTE(v71) = v60;
    v72 = v21;
    v73 = v20;
    v47 = ModernShelfListBuilder.buildList()();
    swift_bridgeObjectRelease(v20);
    swift_bridgeObjectRelease(v21);
    (*(void (**)(char *, char *, uint64_t))(v63 + 32))(v13, v58, v66);
    v48 = v65;
    (*(void (**)(char *, char *, uint64_t))(v68 + 32))(&v13[*(int *)(v65 + 20)], v43, v69);
    *(_QWORD *)&v13[*(int *)(v48 + 24)] = v47;
    __swift_instantiateConcreteTypeFromMangledName(&qword_3B89B0);
    v49 = v61;
    v50 = sub_14510((uint64_t)v13, v61, type metadata accessor for ModernPage);
    static PageRenderContentTypes.unspecified.getter(v50);
    v51 = type metadata accessor for PageContent(0);
    swift_storeEnumTagMultiPayload(v49, v51, 3);
    return sub_145D8((uint64_t)v13, type metadata accessor for ModernPage);
  }
  LOBYTE(v71) = v19;
  v72 = v21;
  v73 = v20;
  v53 = ModernShelfListBuilder.areAnyImportantShelvesStillLoading.getter();
  swift_bridgeObjectRelease(v20);
  swift_bridgeObjectRelease(v21);
  if ((v53 & 1) != 0)
  {
LABEL_5:
    *(_BYTE *)a1 = 0;
    v54 = type metadata accessor for PageContent(0);
    v55 = a1;
    v56 = 0;
  }
  else
  {
    v54 = type metadata accessor for PageContent(0);
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    v55 = a1;
    v56 = 2;
  }
  return swift_storeEnumTagMultiPayload(v55, v54, v56);
}

uint64_t sub_635EC()
{
  return AnyCancellable.store(in:)();
}

uint64_t sub_63614@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = (_QWORD *)(*a1 + OBJC_IVAR____TtC8ShelfKit20LibraryEpisodeLockup_podcastUuid);
  v3 = v2[1];
  *a2 = *v2;
  a2[1] = v3;
  return swift_bridgeObjectRetain(v3);
}

uint64_t sub_63644(_QWORD *a1, unint64_t a2, uint64_t (*a3)(uint64_t *))
{
  int64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v19;
  uint64_t v20;
  _BOOL8 v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  char v25;
  uint64_t *v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  int64_t v33;
  unint64_t v34;
  uint64_t v36;

  v3 = a2;
  if (a2 >> 62)
  {
LABEL_28:
    if (v3 < 0)
      v30 = v3;
    else
      v30 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v3);
    v5 = _CocoaArrayWrapper.endIndex.getter(v30);
    if (v5)
      goto LABEL_3;
LABEL_32:
    swift_bridgeObjectRelease(v3);
    return (uint64_t)a1;
  }
  v5 = *(_QWORD *)((char *)&dword_10 + (a2 & 0xFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain(a2);
  if (!v5)
    goto LABEL_32;
LABEL_3:
  v33 = v3;
  v34 = v3 & 0xC000000000000001;
  v6 = 4;
  v32 = v5;
  while (1)
  {
    v9 = v6 - 4;
    if (v34)
    {
      v10 = specialized _ArrayBuffer._getElementSlowPath(_:)(v6 - 4, v3);
      v11 = v6 - 3;
      if (__OFADD__(v9, 1))
        goto LABEL_25;
    }
    else
    {
      v10 = *(_QWORD *)(v3 + 8 * v6);
      swift_retain(v10);
      v11 = v6 - 3;
      if (__OFADD__(v9, 1))
      {
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
        goto LABEL_28;
      }
    }
    v36 = v10;
    v12 = a3(&v36);
    v14 = v13;
    swift_bridgeObjectRelease(v15);
    if (a1[2])
    {
      swift_bridgeObjectRetain(v14);
      sub_29724(v12, v14);
      if ((v16 & 1) != 0)
      {
        swift_release(v10);
        swift_bridgeObjectRelease_n(v14, 2);
        goto LABEL_6;
      }
      swift_bridgeObjectRelease(v14);
    }
    v17 = v11;
    swift_retain(v10);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(a1);
    v3 = sub_29724(v12, v14);
    v20 = a1[2];
    v21 = (v19 & 1) == 0;
    v22 = v20 + v21;
    if (__OFADD__(v20, v21))
      goto LABEL_26;
    v23 = v19;
    if (a1[3] >= v22)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        sub_231B94();
      goto LABEL_22;
    }
    sub_22E6A4(v22, isUniquelyReferenced_nonNull_native);
    v24 = sub_29724(v12, v14);
    if ((v23 & 1) != (v25 & 1))
      break;
    v3 = v24;
LABEL_22:
    v11 = v17;
    if ((v23 & 1) != 0)
    {
      v7 = a1[7];
      swift_release(*(_QWORD *)(v7 + 8 * v3));
      v8 = v10;
      *(_QWORD *)(v7 + 8 * v3) = v10;
    }
    else
    {
      a1[((unint64_t)v3 >> 6) + 8] |= 1 << v3;
      v26 = (uint64_t *)(a1[6] + 16 * v3);
      *v26 = v12;
      v26[1] = v14;
      v8 = v10;
      *(_QWORD *)(a1[7] + 8 * v3) = v10;
      v27 = a1[2];
      v28 = __OFADD__(v27, 1);
      v29 = v27 + 1;
      if (v28)
        goto LABEL_27;
      a1[2] = v29;
      swift_bridgeObjectRetain(v14);
    }
    swift_release(v8);
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease(0x8000000000000000);
    v5 = v32;
    v3 = v33;
LABEL_6:
    ++v6;
    if (v11 == v5)
      goto LABEL_32;
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_638F8(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v42[3];

  v3 = v2;
  v6 = type metadata accessor for PageContent(0);
  __chkstk_darwin(v6);
  v8 = (char *)v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *v8 = 0;
  swift_storeEnumTagMultiPayload(v8, v9, 0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B27B0);
  swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
  *(_QWORD *)(v3 + 16) = CurrentValueSubject.init(_:)(v8);
  *(_BYTE *)(v3 + 24) = 0;
  v11 = v3 + OBJC_IVAR____TtC8ShelfKit16HomePageProvider_unifiedMessagingHeaderShelf;
  v12 = type metadata accessor for ModernShelf(0);
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56);
  v13(v11, 1, 1, v12);
  sub_327F8(0, (unint64_t *)&qword_3B0CF0, OS_os_log_ptr);
  v14 = ((uint64_t (*)(void))static OS_os_log.homePageSignpost.getter)();
  v15 = PerformanceLoadable.init(log:signpostName:startMetadata:)(v14, "ShelfLoad", 9, 2, 0x7720646572616853, 0xEF756F5920687469, v12);
  v16 = static OS_os_log.homePageSignpost.getter(v15);
  v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3BF7B0);
  v18 = PerformanceLoadable.init(log:signpostName:startMetadata:)(v16, "ShelfLoad", 9, 2, 0x616843206D6F7246, 0xEC0000006C656E6ELL, v17);
  v19 = static OS_os_log.homePageSignpost.getter(v18);
  PerformanceLoadable.init(log:signpostName:startMetadata:)(v19, "ShelfLoad", 9, 2, 0x68532065726F7453, 0xED00007365766C65, v17);
  v13(v3 + OBJC_IVAR____TtC8ShelfKit16HomePageProvider_addFavoriteCategoriesTipShelf, 1, 1, v12);
  v13(v3 + OBJC_IVAR____TtC8ShelfKit16HomePageProvider_recommendationsUpdatedTipShelf, 1, 1, v12);
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
    && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
  {
    v20 = (void *)sub_B3484((uint64_t)_swiftEmptyArrayStorage);
  }
  else
  {
    v20 = &_swiftEmptySetSingleton;
  }
  v21 = a2 & 1;
  v22 = OBJC_IVAR____TtC8ShelfKit16HomePageProvider_subscriptions;
  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3748);
  v24 = swift_allocObject(v23, 28, 7);
  *(_DWORD *)(v24 + 24) = 0;
  *(_QWORD *)(v3 + v22) = v24;
  *(_QWORD *)(v24 + 16) = v20;
  *(_QWORD *)(v3 + OBJC_IVAR____TtC8ShelfKit16HomePageProvider_currentUpNextEpisodes) = 0;
  *(_QWORD *)(v3 + OBJC_IVAR____TtC8ShelfKit16HomePageProvider_upNextEpisodesQueue) = 0;
  v25 = static OS_os_log.homePageSignpost.getter(v24);
  v26 = PerformanceLoadable.init(log:signpostName:startMetadata:)(v25, "ShelfLoad", 9, 2, 0x7478654E207055, 0xE700000000000000, v12);
  v27 = static OS_os_log.homePageSignpost.getter(v26);
  v28 = PerformanceLoadable.init(log:signpostName:startMetadata:)(v27, "ShelfLoad", 9, 2, 0xD000000000000011, 0x800000000030BB20, v12);
  v29 = static OS_os_log.homePageSignpost.getter(v28);
  PerformanceLoadable.init(log:signpostName:startMetadata:)(v29, "ShelfLoad", 9, 2, 0x796C746E65636552, 0xEF646579616C5020, v12);
  *(_QWORD *)(v3 + 32) = a1;
  *(_BYTE *)(v3 + 40) = v21;
  v30 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3BF760);
  swift_retain(a1);
  BaseObjectGraph.inject<A>(_:)(v42, v30, v30);
  *(_OWORD *)(v3 + 48) = v42[0];
  v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BE9F0);
  BaseObjectGraph.inject<A>(_:)(v42, v31, v31);
  sub_F4D8(v42, v3 + 64);
  v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BAFB0);
  BaseObjectGraph.inject<A>(_:)(v42, v32, v32);
  *(_OWORD *)(v3 + 104) = v42[0];
  v33 = objc_allocWithZone((Class)type metadata accessor for UnifiedMessagingProvider());
  *(_QWORD *)(v3 + 120) = UnifiedMessagingProvider.init(placement:)(0x6F4E6E657473696CLL, 0xEF72656461654877);
  v34 = type metadata accessor for RecommendationsMetadataProvider(0);
  BaseObjectGraph.inject<A>(_:)(v42, v34, v34);
  *(_QWORD *)(v3 + 128) = *(_QWORD *)&v42[0];
  v35 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3BAFC0);
  BaseObjectGraph.inject<A>(_:)(v42, v35, v35);
  sub_F4D8(v42, v3 + 136);
  v36 = type metadata accessor for AddFavoriteCategoriesTipProvider();
  swift_allocObject(v36, 40, 7);
  v37 = swift_retain(a1);
  *(_QWORD *)(v3 + 176) = AddFavoriteCategoriesTipProvider.init(asPartOf:)(v37);
  v38 = type metadata accessor for RecommendationsUpdatedTipProvider();
  swift_allocObject(v38, 64, 7);
  v39 = swift_retain(a1);
  *(_QWORD *)(v3 + 184) = RecommendationsUpdatedTipProvider.init(asPartOf:)(v39);
  v40 = type metadata accessor for InterestObserverProvider(0);
  BaseObjectGraph.inject<A>(_:)(v42, v40, v40);
  *(_QWORD *)(v3 + 192) = *(_QWORD *)&v42[0];
  return v3;
}

uint64_t sub_63DF8()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_63E1C(uint64_t a1)
{
  uint64_t v1;

  return sub_5F314(a1, v1);
}

uint64_t sub_63E24()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1((_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 56, 7);
}

Swift::Int sub_63E48@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_5F6AC(a1, (_QWORD *)(v2 + 16), a2);
}

uint64_t sub_63E50(unint64_t *a1)
{
  uint64_t v1;

  return sub_5FB54(a1, v1);
}

unint64_t sub_63E5C()
{
  unint64_t result;

  result = qword_3B3420;
  if (!qword_3B3420)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for HomePageProvider.PlatformContext);
    atomic_store(result, (unint64_t *)&qword_3B3420);
  }
  return result;
}

uint64_t sub_63EA0@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  _BYTE v5[24];

  v3 = *a1;
  result = swift_beginAccess(*a1 + 24, v5, 0, 0);
  *a2 = *(_BYTE *)(v3 + 24);
  return result;
}

void sub_63EE4(char *a1)
{
  HomePageProvider.episodeOrderingFrozen.setter(*a1);
}

uint64_t sub_63F08()
{
  return type metadata accessor for HomePageProvider(0);
}

uint64_t type metadata accessor for HomePageProvider(uint64_t a1)
{
  uint64_t result;

  result = qword_3B3450;
  if (!qword_3B3450)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for HomePageProvider);
  return result;
}

void sub_63F4C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[15];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v10[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v10[1] = &unk_2EE028;
  v10[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  v10[3] = &unk_2EE028;
  v10[4] = &unk_2EE040;
  v10[5] = &unk_2EE058;
  v10[6] = &unk_2EE040;
  v10[7] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v10[8] = (char *)&value witness table for Builtin.NativeObject + 64;
  v10[9] = &unk_2EE058;
  v10[10] = (char *)&value witness table for Builtin.NativeObject + 64;
  v10[11] = (char *)&value witness table for Builtin.NativeObject + 64;
  v10[12] = (char *)&value witness table for Builtin.NativeObject + 64;
  sub_6409C(319, (unint64_t *)&qword_3B3460, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(v2 - 8) + 64;
    v10[13] = v4;
    sub_6409C(319, &qword_3B3468, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for PerformanceLoadable);
    if (v6 <= 0x3F)
    {
      v7 = *(_QWORD *)(v5 - 8) + 64;
      v10[14] = v7;
      sub_640F4(319);
      if (v9 <= 0x3F)
      {
        v11 = *(_QWORD *)(v8 - 8) + 64;
        v12 = v11;
        v13 = v4;
        v14 = v4;
        v15 = (char *)&value witness table for Builtin.NativeObject + 64;
        v16 = &unk_2EE070;
        v17 = &unk_2EE070;
        v18 = v7;
        v19 = v7;
        v20 = v7;
        swift_updateClassMetadata2(a1, 256, 25, v10, a1 + 80);
      }
    }
  }
}

uint64_t method lookup function for HomePageProvider(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for HomePageProvider);
}

uint64_t dispatch thunk of HomePageProvider.__allocating_init(asPartOf:platformContext:)(uint64_t a1, char a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v2 + 280))(a1, a2 & 1);
}

void sub_6409C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = type metadata accessor for ModernShelf(255);
    v7 = a3(a1, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

void sub_640F4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_3B3470)
  {
    v2 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_3BF7B0);
    v3 = type metadata accessor for PerformanceLoadable(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_3B3470);
  }
}

uint64_t storeEnumTagSinglePayload for HomePageProvider.PlatformContext(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_64198 + 4 * byte_2EDF05[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_641CC + 4 * asc_2EDF00[v4]))();
}

uint64_t sub_641CC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_641D4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x641DCLL);
  return result;
}

uint64_t sub_641E8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x641F0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_641F4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_641FC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HomePageProvider.PlatformContext()
{
  return &type metadata for HomePageProvider.PlatformContext;
}

uint64_t sub_64218(uint64_t a1)
{
  uint64_t v1;

  return sub_62DB0(a1, v1, &OBJC_IVAR____TtC8ShelfKit16HomePageProvider_recommendationsUpdatedTipShelf);
}

uint64_t sub_64238(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8660);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_64280(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8660);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_642C8(uint64_t a1)
{
  uint64_t v1;

  return sub_62DB0(a1, v1, &OBJC_IVAR____TtC8ShelfKit16HomePageProvider_addFavoriteCategoriesTipShelf);
}

uint64_t sub_642E8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  __swift_destroy_boxed_opaque_existential_1((_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_64314(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v3;

  return sub_623FC(a1, a2, a3, *(_QWORD *)(v3 + 16), v3 + 24);
}

uint64_t sub_64324()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_64348@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(v2 + 16))(a1, *(unsigned __int8 *)(a1 + 104), *(_QWORD *)(a1 + 112));
  *a2 = result;
  return result;
}

uint64_t sub_64378(uint64_t *a1)
{
  uint64_t v1;

  return sub_628D8(a1, v1);
}

uint64_t sub_64380()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1((_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, 176, 7);
}

uint64_t sub_643F4()
{
  uint64_t v0;

  return sub_62BD8((_QWORD *)(v0 + 16), v0 + 56, *(unsigned __int8 *)(v0 + 160));
}

_QWORD *sub_64408(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = a1[1];
  v3 = a1[5];
  v4 = a1[6];
  v5 = a1[7];
  v6 = a1[8];
  v7 = a1[9];
  v8 = a1[10];
  v9 = a1[11];
  v10 = a1[12];
  swift_bridgeObjectRetain(a1[3]);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v2);
  return a1;
}

uint64_t sub_644AC()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1((_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 64, 7);
}

unint64_t sub_644D8(unint64_t result)
{
  if (result >= 2)
    return swift_bridgeObjectRetain(result);
  return result;
}

uint64_t sub_644E8(uint64_t a1)
{
  uint64_t v1;

  return sub_62DB0(a1, v1, &OBJC_IVAR____TtC8ShelfKit16HomePageProvider_unifiedMessagingHeaderShelf);
}

uint64_t sub_64508(unint64_t *a1)
{
  uint64_t v1;

  return sub_61D8C(a1, v1);
}

unint64_t sub_64510(unint64_t result)
{
  if (result >= 2)
    return swift_bridgeObjectRelease(result);
  return result;
}

uint64_t sub_64520(uint64_t a1)
{
  uint64_t v1;

  return sub_61CD8(a1, v1, (void (*)())sub_61298);
}

uint64_t sub_64540(uint64_t a1)
{
  uint64_t v1;

  return sub_61CD8(a1, v1, (void (*)())sub_606E4);
}

uint64_t sub_64560(uint64_t a1)
{
  uint64_t v1;

  return sub_61CD8(a1, v1, (void (*)())sub_5D954);
}

unint64_t static ChannelSubscriptionOffersIntent.kind.getter()
{
  return 0xD00000000000001FLL;
}

void sub_6459C(_QWORD *a1@<X8>)
{
  *a1 = 0xD00000000000001FLL;
  a1[1] = 0x80000000002EE0B0;
}

Swift::Int sub_645BC()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  String.hash(into:)(v1, 0x64496D616461, 0xE600000000000000);
  return Hasher._finalize()();
}

uint64_t sub_64608(uint64_t a1)
{
  return String.hash(into:)(a1, 0x64496D616461, 0xE600000000000000);
}

Swift::Int sub_6461C()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  String.hash(into:)(v1, 0x64496D616461, 0xE600000000000000);
  return Hasher._finalize()();
}

uint64_t sub_64664@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_373528, v3);
  result = swift_bridgeObjectRelease(v4);
  *a2 = v5 != 0;
  return result;
}

void sub_646B4(_QWORD *a1@<X8>)
{
  *a1 = 0x64496D616461;
  a1[1] = 0xE600000000000000;
}

uint64_t sub_646CC()
{
  return 0x64496D616461;
}

uint64_t sub_646E0@<X0>(Swift::String string@<0:X0, 8:X1>, BOOL *a2@<X8>)
{
  void *object;
  Swift::String v3;
  Swift::Int v5;
  uint64_t result;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_373560, v3);
  result = swift_bridgeObjectRelease(object);
  *a2 = v5 != 0;
  return result;
}

uint64_t sub_64734(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_64880();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_6475C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_64880();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ChannelSubscriptionOffersIntent.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3758);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = a1[3];
  v9 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v8);
  v10 = sub_64880();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ChannelSubscriptionOffersIntent.CodingKeys, &type metadata for ChannelSubscriptionOffersIntent.CodingKeys, v10, v8, v9);
  v13 = v7;
  sub_13E9C();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v13);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_64880()
{
  unint64_t result;

  result = qword_3B3760;
  if (!qword_3B3760)
  {
    result = swift_getWitnessTable(&unk_2EE308);
    atomic_store(result, (unint64_t *)&qword_3B3760);
  }
  return result;
}

unint64_t sub_648C8()
{
  unint64_t result;

  result = qword_3B3768;
  if (!qword_3B3768)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ChannelSubscriptionOffersIntent);
    atomic_store(result, (unint64_t *)&qword_3B3768);
  }
  return result;
}

unint64_t sub_64910()
{
  unint64_t result;

  result = qword_3B3770;
  if (!qword_3B3770)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ChannelSubscriptionOffersIntent);
    atomic_store(result, (unint64_t *)&qword_3B3770);
  }
  return result;
}

unint64_t sub_64958()
{
  unint64_t result;

  result = qword_3B3778;
  if (!qword_3B3778)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_3B3780);
    sub_649BC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A]);
    atomic_store(result, (unint64_t *)&qword_3B3778);
  }
  return result;
}

unint64_t sub_649BC()
{
  unint64_t result;

  result = qword_3B3788;
  if (!qword_3B3788)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ChannelSubscriptionOffer);
    atomic_store(result, (unint64_t *)&qword_3B3788);
  }
  return result;
}

uint64_t sub_64A00(_QWORD *a1)
{
  return ChannelSubscriptionOffersIntent.encode(to:)(a1);
}

uint64_t sub_64A14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_64BF4();
  return CustomJSValueConvertible<>.jsRepresentation(in:)(a1, a2, a3, v6);
}

ValueMetadata *type metadata accessor for ChannelSubscriptionOffersIntent()
{
  return &type metadata for ChannelSubscriptionOffersIntent;
}

uint64_t storeEnumTagSinglePayload for ChannelSubscriptionOffersIntent.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_64AC0 + 4 * byte_2EE0C0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_64AE0 + 4 * byte_2EE0C5[v4]))();
}

_BYTE *sub_64AC0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_64AE0(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_64AE8(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_64AF0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_64AF8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_64B00(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ChannelSubscriptionOffersIntent.CodingKeys()
{
  return &type metadata for ChannelSubscriptionOffersIntent.CodingKeys;
}

unint64_t sub_64B20()
{
  unint64_t result;

  result = qword_3B3790;
  if (!qword_3B3790)
  {
    result = swift_getWitnessTable(&unk_2EE2E0);
    atomic_store(result, (unint64_t *)&qword_3B3790);
  }
  return result;
}

unint64_t sub_64B68()
{
  unint64_t result;

  result = qword_3B3798;
  if (!qword_3B3798)
  {
    result = swift_getWitnessTable(&unk_2EE218);
    atomic_store(result, (unint64_t *)&qword_3B3798);
  }
  return result;
}

unint64_t sub_64BB0()
{
  unint64_t result;

  result = qword_3B37A0;
  if (!qword_3B37A0)
  {
    result = swift_getWitnessTable(&unk_2EE240);
    atomic_store(result, (unint64_t *)&qword_3B37A0);
  }
  return result;
}

unint64_t sub_64BF4()
{
  unint64_t result;

  result = qword_3B37A8;
  if (!qword_3B37A8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ChannelSubscriptionOffersIntent);
    atomic_store(result, (unint64_t *)&qword_3B37A8);
  }
  return result;
}

double ShelfCellHeight.fractionOfWidth.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void ShelfCellHeight.init(fractionOfWidth:absolute:)(double *a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  *a1 = a2;
  a1[1] = a3;
}

double ShelfCellHeight.heightFor(width:)(double a1)
{
  double *v1;

  return *v1 * a1 + v1[1];
}

double ShelfCellHeight.widthFor(height:)(double a1)
{
  double *v1;

  return (a1 - v1[1]) / *v1;
}

double ShelfCellHeight.artworkInsets(position:)(_BYTE *a1)
{
  double *v1;

  if (*v1 <= 0.0)
    return UIEdgeInsetsZero.top;
  if (!*a1)
    return 0.0;
  if (*a1 == 1)
    return UIEdgeInsetsZero.top;
  return v1[1];
}

uint64_t ShelfCellListSeparatorMode.Placement.topVisible.getter()
{
  _WORD *v0;

  return ((*v0 & 0xFE) != 2) & (unsigned __int16)*v0;
}

uint64_t ShelfCellListSeparatorMode.Placement.bottomVisible.getter()
{
  unsigned __int16 *v0;
  unsigned int v1;
  int v2;
  unsigned int v3;

  v1 = *v0;
  v2 = v1 & 0xFE;
  v3 = (v1 >> 8) & 1;
  if (v2 == 2)
    return 0;
  else
    return v3;
}

uint64_t static ShelfCellListSeparatorMode.Placement.== infix(_:_:)(__int16 *a1, __int16 *a2)
{
  __int16 v2;
  __int16 v3;
  int v4;
  int v6;
  unsigned int v7;

  v2 = *a1;
  v3 = *a2;
  v4 = *a1;
  if (v4 == 2)
    return *a2 == 2;
  if (v4 == 3)
    return *a2 == 3;
  if ((v3 & 0xFE) == 2)
    return 0;
  v6 = v3 & 1;
  v7 = ((v2 & 0x100) == 0) ^ ((unsigned __int16)(v3 & 0x100) >> 8);
  if (((v2 & 1) == 0) == v6)
    return 0;
  else
    return v7;
}

uint64_t sub_64D80(__int16 *a1, __int16 *a2)
{
  __int16 v2;
  __int16 v3;
  int v4;
  char v6;
  unsigned int v7;

  v2 = *a1;
  v3 = *a2;
  v4 = *a1;
  if (v4 == 2)
    return *a2 == 2;
  if (v4 == 3)
    return *a2 == 3;
  if ((v3 & 0xFE) == 2)
    return 0;
  v6 = ((v2 & 1) == 0) ^ v3;
  v7 = ((v2 & 0x100) == 0) ^ ((unsigned __int16)(v3 & 0x100) >> 8);
  if ((v6 & 1) != 0)
    return v7;
  else
    return 0;
}

void ShelfCellListSeparatorMode.placement.getter(_WORD *a1@<X8>)
{
  _WORD *v1;

  *a1 = *v1;
}

_WORD *ShelfCellListSeparatorMode.placement.setter(_WORD *result)
{
  _WORD *v1;

  *v1 = *result;
  return result;
}

void ShelfCellListSeparatorMode.layout.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 2);
}

_BYTE *ShelfCellListSeparatorMode.layout.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 2) = *result;
  return result;
}

void (__swiftcall *ShelfCellListSeparatorMode.layout.modify())()
{
  return FindOrCreateEpisodeOfferContentIDsIntentsIntentImplementation.init();
}

_WORD *ShelfCellListSeparatorMode.init(placement:layout:)@<X0>(_WORD *result@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  char v3;

  v3 = *a2;
  *(_WORD *)a3 = *result;
  *(_BYTE *)(a3 + 2) = v3;
  return result;
}

unint64_t sub_64E54()
{
  unint64_t result;

  result = qword_3B37B0;
  if (!qword_3B37B0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ShelfCellListSeparatorMode.Layout);
    atomic_store(result, (unint64_t *)&qword_3B37B0);
  }
  return result;
}

uint64_t dispatch thunk of FollowButtonPresenterDelegate.followPresenterStateDidChange(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

ValueMetadata *type metadata accessor for ShelfCellHeight()
{
  return &type metadata for ShelfCellHeight;
}

uint64_t __swift_memcpy3_1(uint64_t result, __int16 *a2)
{
  __int16 v2;

  v2 = *a2;
  *(_BYTE *)(result + 2) = *((_BYTE *)a2 + 2);
  *(_WORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for ShelfCellListSeparatorMode(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  unsigned int v4;
  BOOL v5;
  int v6;

  if (!a2)
    return 0;
  if (a2 >= 0xFE)
  {
    if ((a2 + 33554178) >> 24)
    {
      v2 = *((unsigned __int8 *)a1 + 3);
      if (*((_BYTE *)a1 + 3))
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16776962;
    }
    else
    {
      v2 = *(unsigned __int16 *)((char *)a1 + 3);
      if (*(unsigned __int16 *)((char *)a1 + 3))
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16776962;
    }
  }
  v4 = *((unsigned __int8 *)a1 + 2);
  v5 = v4 >= 3;
  v6 = v4 - 3;
  if (!v5)
    v6 = -1;
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for ShelfCellListSeparatorMode(uint64_t result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;

  if ((a3 + 33554178) >> 24)
    v3 = 1;
  else
    v3 = 2;
  if (a3 <= 0xFD)
    v3 = 0;
  if (a2 > 0xFD)
  {
    *(_WORD *)result = a2 - 254;
    *(_BYTE *)(result + 2) = (a2 - 254) >> 16;
    if (v3)
    {
      v4 = ((a2 - 254) >> 24) + 1;
      if (v3 == 2)
        *(_WORD *)(result + 3) = v4;
      else
        *(_BYTE *)(result + 3) = v4;
    }
  }
  else
  {
    if (!v3)
      goto LABEL_10;
    if (v3 == 2)
    {
      *(_WORD *)(result + 3) = 0;
LABEL_10:
      if (!a2)
        return result;
LABEL_16:
      *(_BYTE *)(result + 2) = a2 + 2;
      return result;
    }
    *(_BYTE *)(result + 3) = 0;
    if (a2)
      goto LABEL_16;
  }
  return result;
}

ValueMetadata *type metadata accessor for ShelfCellListSeparatorMode()
{
  return &type metadata for ShelfCellListSeparatorMode;
}

uint64_t getEnumTagSinglePayload for ShelfCellListSeparatorMode.Placement(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t result;
  unsigned int v6;
  unsigned int v7;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
  {
    v6 = *a1;
    if (v6 >= 2)
    {
      v7 = (v6 + 2147483646) & 0x7FFFFFFF;
      result = v7 - 1;
      if (v7 > 1)
        return result;
    }
    return 0;
  }
  v2 = a2 + 65283;
  if (a2 + 65283 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (v2 < 0xFF0000)
    v3 = 1;
  if (v2 >= 0x10000)
    v4 = v3;
  else
    v4 = 0;
  return ((uint64_t (*)(void))((char *)&loc_65020 + 4 * byte_2EE360[v4]))();
}

uint64_t storeEnumTagSinglePayload for ShelfCellListSeparatorMode.Placement(_WORD *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;

  v3 = a3 + 65283;
  if (a3 + 65283 <= 0xFFFEFFFF)
    v4 = 2;
  else
    v4 = 4;
  if (v3 < 0xFF0000)
    v4 = 1;
  if (v3 >= 0x10000)
    LODWORD(v5) = v4;
  else
    LODWORD(v5) = 0;
  if (a3 >= 0xFD)
    v5 = v5;
  else
    v5 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_650D0 + 4 * byte_2EE36A[v5]))();
  *a1 = a2 - 253;
  return ((uint64_t (*)(void))((char *)sub_65104 + 4 * byte_2EE365[v5]))();
}

uint64_t sub_65104(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_6510C(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x65114);
  return result;
}

uint64_t sub_65120(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x65128);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_6512C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_65134(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_65140(unsigned __int8 *a1)
{
  unsigned int v1;
  BOOL v2;
  int v3;

  v1 = *a1;
  v2 = v1 >= 2;
  v3 = (v1 + 2147483646) & 0x7FFFFFFF;
  if (v2)
    return (v3 + 1);
  else
    return 0;
}

_WORD *sub_6515C(_WORD *result, unsigned int a2)
{
  if (a2 > 0xFE)
  {
    *result = a2 - 255;
  }
  else if (a2)
  {
    *(_BYTE *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for ShelfCellListSeparatorMode.Placement()
{
  return &type metadata for ShelfCellListSeparatorMode.Placement;
}

uint64_t storeEnumTagSinglePayload for ShelfCellListSeparatorMode.Layout(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_651DC + 4 * byte_2EE374[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_65210 + 4 * byte_2EE36F[v4]))();
}

uint64_t sub_65210(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_65218(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x65220);
  return result;
}

uint64_t sub_6522C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x65234);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_65238(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_65240(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ShelfCellListSeparatorMode.Layout()
{
  return &type metadata for ShelfCellListSeparatorMode.Layout;
}

uint64_t EmptyPage.pageMetrics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for PageMetrics(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t EmptyPage.init(pageMetrics:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = type metadata accessor for PageMetrics(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
}

uint64_t initializeBufferWithCopyOfBuffer for EmptyPage(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PageMetrics(0);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t destroy for EmptyPage(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for PageMetrics(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t initializeWithCopy for EmptyPage(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PageMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for EmptyPage(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PageMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for EmptyPage(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PageMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for EmptyPage(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PageMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for EmptyPage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_6545C);
}

uint64_t sub_6545C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PageMetrics(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for EmptyPage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_654A4);
}

uint64_t sub_654A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PageMetrics(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for EmptyPage(uint64_t a1)
{
  uint64_t result;

  result = qword_3B3810;
  if (!qword_3B3810)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for EmptyPage);
  return result;
}

uint64_t sub_65520(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for PageMetrics(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t InteractionContext.View.metricsTargetType.getter(unsigned __int8 a1)
{
  int v1;
  uint64_t result;

  v1 = a1 - 2;
  result = 0;
  switch(v1)
  {
    case 0:
    case 1:
    case 2:
      result = static MetricsTargetType.lockup.getter(0, 0);
      break;
    case 4:
      result = static MetricsTargetType.button.getter(0, 0);
      break;
    case 5:
      return result;
    default:
      result = static MetricsTargetType.powerSwooshItem.getter(0, 0);
      break;
  }
  return result;
}

uint64_t ActionButton.init<>(actionButton:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unsigned int (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  _OWORD v33[2];
  uint64_t v34;

  v31 = type metadata accessor for ButtonRole(0);
  v4 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v30 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3848);
  v32 = *(_QWORD *)(v6 - 8);
  v7 = *(_QWORD *)(v32 + 64);
  v8 = __chkstk_darwin(v6);
  v9 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v29 - v11;
  __chkstk_darwin(v10);
  v14 = (char *)&v29 - v13;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3850);
  __chkstk_darwin(v15);
  v17 = (char *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_658A8(a1, (uint64_t)v14);
  v18 = type metadata accessor for ActionButton(0);
  v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 48);
  if (v19(v14, 1, v18) == 1)
  {
    sub_658F0((uint64_t)v14);
    v20 = 1;
    v21 = v31;
  }
  else
  {
    v29 = a2;
    v22 = v14[*(int *)(v18 + 28)];
    v23 = sub_65C88((uint64_t)v14);
    if (v22 == 2)
    {
      v20 = 1;
      v21 = v31;
    }
    else
    {
      v21 = v31;
      if ((v22 & 1) != 0)
      {
        v24 = v30;
        static ButtonRole.destructive.getter(v23);
      }
      else
      {
        v24 = v30;
        static ButtonRole.cancel.getter(v23);
      }
      (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v17, v24, v21);
      v20 = 0;
    }
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v17, v20, 1, v21);
  sub_658A8(a1, (uint64_t)v12);
  if (v19(v12, 1, v18) == 1)
  {
    sub_658F0((uint64_t)v12);
    memset(v33, 0, sizeof(v33));
    v34 = 0;
  }
  else
  {
    sub_150C8((uint64_t)&v12[*(int *)(v18 + 32)], (uint64_t)v33);
    sub_65C88((uint64_t)v12);
  }
  sub_658A8(a1, (uint64_t)v9);
  v25 = *(unsigned __int8 *)(v32 + 80);
  v26 = (v25 + 16) & ~v25;
  v27 = swift_allocObject(&unk_37AA20, v26 + v7, v25 | 7);
  sub_65C00((uint64_t)v9, v27 + v26);
  ActionButton.init(role:action:label:)(v17, v33, sub_65C48, v27, &type metadata for Text, &protocol witness table for Text);
  return sub_658F0(a1);
}

uint64_t sub_658A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3848);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_658F0(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3848);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_65930@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t result;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD v15[2];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3848);
  __chkstk_darwin(v4);
  v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_658A8(a1, (uint64_t)v6);
  v7 = type metadata accessor for ActionButton(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    sub_658F0((uint64_t)v6);
    v8 = 0;
    v9 = 0xE000000000000000;
  }
  else
  {
    v8 = *((_QWORD *)v6 + 2);
    v9 = *((_QWORD *)v6 + 3);
    swift_bridgeObjectRetain(v9);
    sub_65C88((uint64_t)v6);
  }
  v15[0] = v8;
  v15[1] = v9;
  v10 = sub_65CC4();
  result = Text.init<A>(_:)(v15, &type metadata for String, v10);
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v12;
  *(_BYTE *)(a2 + 16) = v13 & 1;
  *(_QWORD *)(a2 + 24) = v14;
  return result;
}

uint64_t sub_65A20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B3848) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 16) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);
  v5 = v0 + v3;
  v6 = (int *)type metadata accessor for ActionButton(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v6 - 1) + 48))(v0 + v3, 1, v6))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v7 = v5 + v6[6];
    v8 = type metadata accessor for ArtworkModel(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v7, 1, v8))
    {
      swift_bridgeObjectRelease();
      v9 = *(unsigned __int8 *)(v7 + 32);
      if (v9 != 255)
        sub_3B5BC(*(_QWORD *)(v7 + 16), *(_QWORD *)(v7 + 24), v9);
      v10 = *(unsigned __int8 *)(v7 + 64);
      if (v10 != 255)
        sub_3D624(*(id *)(v7 + 56), v10);
      v11 = *(unsigned __int8 *)(v7 + 80);
      if (v11 != 255)
        sub_3D624(*(id *)(v7 + 72), v11);
      v12 = *(unsigned __int8 *)(v7 + 96);
      if (v12 != 255)
        sub_3D624(*(id *)(v7 + 88), v12);
      v13 = *(unsigned __int8 *)(v7 + 112);
      if (v13 != 255)
        sub_3D624(*(id *)(v7 + 104), v13);
      v14 = *(unsigned __int8 *)(v7 + 128);
      if (v14 != 255)
        sub_3D624(*(id *)(v7 + 120), v14);
      v15 = v7 + *(int *)(v8 + 44);
      v16 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    __swift_destroy_boxed_opaque_existential_1((_QWORD *)(v5 + v6[8]));
    v17 = v5 + v6[9];
    v18 = type metadata accessor for ImpressionMetrics(0);
    v19 = *(_QWORD *)(v18 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
      (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v17, v18);
  }
  return swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_65C00(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3848);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_65C48@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B3848) - 8) + 80);
  return sub_65930(v1 + ((v3 + 16) & ~v3), a1);
}

uint64_t sub_65C88(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ActionButton(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_65CC4()
{
  unint64_t result;

  result = qword_3B3858;
  if (!qword_3B3858)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String);
    atomic_store(result, (unint64_t *)&qword_3B3858);
  }
  return result;
}

uint64_t WeakNotificationObserver.deinit()
{
  uint64_t v0;
  void *Strong;
  void *v2;

  Strong = (void *)swift_unknownObjectWeakLoadStrong(v0 + 16);
  if (Strong)
  {
    v2 = Strong;
    objc_msgSend(Strong, "removeObserver:", v0);

  }
  swift_unknownObjectWeakDestroy(v0 + 16);
  swift_release(*(_QWORD *)(v0 + 32));
  return v0;
}

Swift::Void __swiftcall WeakNotificationObserver.invalidate()()
{
  uint64_t v0;
  void *Strong;
  id v2;

  Strong = (void *)swift_unknownObjectWeakLoadStrong(v0 + 16);
  if (Strong)
  {
    v2 = Strong;
    objc_msgSend(Strong, "removeObserver:", v0);

  }
}

uint64_t WeakNotificationObserver.__deallocating_deinit()
{
  uint64_t v0;
  void *Strong;
  void *v2;

  Strong = (void *)swift_unknownObjectWeakLoadStrong(v0 + 16);
  if (Strong)
  {
    v2 = Strong;
    objc_msgSend(Strong, "removeObserver:", v0);

  }
  swift_unknownObjectWeakDestroy(v0 + 16);
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocClassInstance(v0, 40, 7);
}

uint64_t NSNotificationCenter.weakObserver(for:using:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = type metadata accessor for WeakNotificationObserver();
  v8 = swift_allocObject(v7, 40, 7);
  v9 = swift_unknownObjectWeakInit(v8 + 16, 0);
  swift_unknownObjectWeakAssign(v9, v3);
  *(_QWORD *)(v8 + 24) = a2;
  *(_QWORD *)(v8 + 32) = a3;
  swift_retain(a3);
  objc_msgSend(v3, "addObserver:selector:name:object:", v8, "handleWithNotification:", a1, 0);
  return v8;
}

uint64_t type metadata accessor for WeakNotificationObserver()
{
  return objc_opt_self(_TtC8ShelfKit24WeakNotificationObserver);
}

uint64_t method lookup function for WeakNotificationObserver(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for WeakNotificationObserver);
}

void CrossfireReferralFieldsProvider.addTimeSensitiveMetricsFields(into:using:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;

  if (qword_3B0048 != -1)
    swift_once(&qword_3B0048, sub_43AB0);
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2BC0);
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_3B2B90);
  MetricsFieldsContext.subscript.getter(&v5, v3, &type metadata for Bool);
  v4 = v5;
  if (qword_3B0108 != -1)
    swift_once(&qword_3B0108, sub_13CAD4);
  MetricsActivity.addMetricsFields(into:participatingInCrossfireReferral:)(a1, (v4 == 2) | v4 & 1);
}

uint64_t sub_66040(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;

  v9 = (_QWORD *)swift_task_alloc(async function pointer to MetricsFieldsProvider.addExpensiveMetricsFields(into:using:)[1]);
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = sub_43684;
  return MetricsFieldsProvider.addExpensiveMetricsFields(into:using:)(a1, a2, a3, a4);
}

uint64_t sub_660BC()
{
  return MetricsFieldsProvider.addMetricsFields(into:using:)();
}

ValueMetadata *type metadata accessor for CrossfireReferralFieldsProvider()
{
  return &type metadata for CrossfireReferralFieldsProvider;
}

void VSpacer.init(_:)(double *a1@<X8>, double a2@<D0>)
{
  *a1 = a2;
}

double VSpacer.body.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  double result;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  __int128 v15;

  v3 = *v1;
  v4 = static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)(&v11, 0, 1, v3, 0, v4, v5);
  v6 = v11;
  v7 = v12;
  v8 = v13;
  v9 = v14;
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_BYTE *)(a1 + 40) = v9;
  result = *(double *)&v15;
  *(_OWORD *)(a1 + 48) = v15;
  return result;
}

uint64_t sub_66170(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of VSpacer.body>>, 1);
}

uint64_t sub_66188()
{
  return static View._viewListCount(inputs:)();
}

ValueMetadata *type metadata accessor for VSpacer()
{
  return &type metadata for VSpacer;
}

unint64_t sub_661B4()
{
  unint64_t result;

  result = qword_3B3910;
  if (!qword_3B3910)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_3B3918);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>);
    atomic_store(result, (unint64_t *)&qword_3B3910);
  }
  return result;
}

uint64_t NavigateBackAction.animationBehavior.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;
  _BYTE v3[24];

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC8ShelfKit18NavigateBackAction_animationBehavior);
  swift_beginAccess(v0 + OBJC_IVAR____TtC8ShelfKit18NavigateBackAction_animationBehavior, v3, 0, 0);
  return *v1;
}

uint64_t NavigateBackAction.animationBehavior.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;
  _BYTE v5[24];

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC8ShelfKit18NavigateBackAction_animationBehavior);
  result = swift_beginAccess(v3, v5, 1, 0);
  *v3 = a1;
  return result;
}

uint64_t (*NavigateBackAction.animationBehavior.modify(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC8ShelfKit18NavigateBackAction_animationBehavior, a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t NavigateBackAction.__allocating_init(animationBehavior:)(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v2 = v1;
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ActionMetrics(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v12);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  *(_BYTE *)(v15 + OBJC_IVAR____TtC8ShelfKit18NavigateBackAction_animationBehavior) = a1;
  v16 = type metadata accessor for ImpressionMetrics(0);
  v17 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v14, 1, 1, v16);
  v18 = static ActionMetrics.notInstrumented.getter(v17);
  UUID.init()(v18);
  v19 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
  v21 = v20;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  *(_QWORD *)(v15 + 16) = v19;
  *(_QWORD *)(v15 + 24) = v21;
  *(_QWORD *)(v15 + 32) = 0;
  *(_QWORD *)(v15 + 40) = 0;
  *(_BYTE *)(v15 + 48) = 32;
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v15 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v11, v8);
  sub_23AB8((uint64_t)v14, v15 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics);
  return v15;
}

uint64_t NavigateBackAction.init(animationBehavior:)(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v2 = v1;
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ActionMetrics(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v12);
  v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_BYTE *)(v2 + OBJC_IVAR____TtC8ShelfKit18NavigateBackAction_animationBehavior) = a1;
  v15 = type metadata accessor for ImpressionMetrics(0);
  v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
  v17 = static ActionMetrics.notInstrumented.getter(v16);
  UUID.init()(v17);
  v18 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
  v20 = v19;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  *(_QWORD *)(v2 + 16) = v18;
  *(_QWORD *)(v2 + 24) = v20;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 48) = 32;
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v2 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v11, v8);
  sub_23AB8((uint64_t)v14, v2 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics);
  return v2;
}

void NavigateBackAction.init(deserializing:using:)()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000033, 0x800000000030A500, "ShelfKit/NavigateBackAction.swift", 33, 2, 22, 0);
  __break(1u);
}

void NavigateBackAction.init(uniqueId:title:presentationStyle:actionMetrics:impressionMetrics:)()
{
  _swift_stdlib_reportUnimplementedInitializer("ShelfKit.NavigateBackAction", 27, "init(uniqueId:title:presentationStyle:actionMetrics:impressionMetrics:)", 71, 0);
  __break(1u);
}

uint64_t sub_666A8()
{
  return type metadata accessor for NavigateBackAction(0);
}

uint64_t type metadata accessor for NavigateBackAction(uint64_t a1)
{
  uint64_t result;

  result = qword_3B3948;
  if (!qword_3B3948)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for NavigateBackAction);
  return result;
}

uint64_t sub_666EC(uint64_t a1)
{
  void *v2;

  v2 = &unk_2EE6A8;
  return swift_updateClassMetadata2(a1, 256, 1, &v2, a1 + 160);
}

uint64_t method lookup function for NavigateBackAction(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for NavigateBackAction);
}

uint64_t dispatch thunk of NavigateBackAction.__allocating_init(animationBehavior:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 168))();
}

uint64_t NSUserDefaults.Keys.rawValue.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease(v2[1]);
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t LegacyActionButton.action.setter(__int128 *a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + 16);
  __swift_destroy_boxed_opaque_existential_1(v3);
  return sub_F4D8(a1, (uint64_t)v3);
}

void (__swiftcall *Header.subtitle.modify())()
{
  return FindOrCreateEpisodeOfferContentIDsIntentsIntentImplementation.init();
}

uint64_t LegacyActionButton.presentation.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 56);
}

uint64_t LegacyActionButton.presentation.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 56) = result;
  return result;
}

void (__swiftcall *LegacyActionButton.presentation.modify())()
{
  return FindOrCreateEpisodeOfferContentIDsIntentsIntentImplementation.init();
}

uint64_t LegacyActionButton.impressionMetrics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for LegacyActionButton(0) + 28);
  return sub_23A70(v3, a1);
}

uint64_t type metadata accessor for LegacyActionButton(uint64_t a1)
{
  uint64_t result;

  result = qword_3B3A78;
  if (!qword_3B3A78)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LegacyActionButton);
  return result;
}

uint64_t LegacyActionButton.impressionMetrics.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for LegacyActionButton(0) + 28);
  return sub_66870(a1, v3);
}

uint64_t sub_66870(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void (__swiftcall *LegacyActionButton.impressionMetrics.modify())()
{
  type metadata accessor for LegacyActionButton(0);
  return FindOrCreateEpisodeOfferContentIDsIntentsIntentImplementation.init();
}

uint64_t LegacyActionButton.init(title:action:presentation:impressionMetrics:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;

  v12 = a6 + *(int *)(type metadata accessor for LegacyActionButton(0) + 28);
  v13 = type metadata accessor for ImpressionMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
  *(_QWORD *)a6 = a1;
  *(_QWORD *)(a6 + 8) = a2;
  sub_F4D8(a3, a6 + 16);
  *(_BYTE *)(a6 + 56) = a4;
  return sub_66870(a5, v12);
}

uint64_t sub_66978@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_23A70(v2 + *(int *)(a1 + 28), a2);
}

uint64_t LegacyActionButton.init(deserializing:using:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  char *v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42[2];
  int v43;
  unsigned __int8 v44;
  char v45;

  v37 = a3;
  v40 = a2;
  v36 = type metadata accessor for LegacyActionButton(0);
  __chkstk_darwin(v36);
  v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v6);
  v35 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for JSONContext(0);
  v41 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for JSONObject(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v31 - v16;
  v18 = JSONObject.subscript.getter(0x656C746974, 0xE500000000000000);
  v34 = JSONObject.string.getter(v18);
  v39 = v19;
  v20 = *(void (**)(char *, uint64_t))(v12 + 8);
  v21 = v17;
  v22 = v40;
  v20(v21, v11);
  v23 = v38;
  static AnyActionTypes.makeInstance(byDeserializing:using:)(v42, a1, v22);
  if (v23)
  {
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v22, v8);
    return ((uint64_t (*)(uint64_t, uint64_t))v20)(a1, v11);
  }
  else
  {
    v38 = v20;
    JSONObject.subscript.getter(0xD000000000000011, 0x800000000030B110);
    v32 = *(void (**)(char *, uint64_t, uint64_t))(v41 + 16);
    v33 = v8;
    v32(v10, v22, v8);
    sub_3CFF0();
    ExpressibleByJSON.init(tryDeserializing:using:)(v15, v10, &type metadata for Link.Presentation);
    v25 = v44;
    if (v45)
      v25 = 0;
    v43 = v25;
    v26 = v22;
    v27 = type metadata accessor for ImpressionMetrics(0);
    JSONObject.subscript.getter(0xD000000000000011, 0x8000000000309180);
    v32(v10, v26, v33);
    v28 = (uint64_t)v35;
    ExpressibleByJSON.init(tryDeserializing:using:)(v15, v10, v27);
    v29 = (uint64_t)&v5[*(int *)(v36 + 28)];
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v29, 1, 1, v27);
    v30 = v39;
    *(_QWORD *)v5 = v34;
    *((_QWORD *)v5 + 1) = v30;
    sub_F4D8(v42, (uint64_t)(v5 + 16));
    v5[56] = v43;
    sub_66870(v28, v29);
    sub_66CDC((uint64_t)v5, v37);
    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v40, v33);
    return ((uint64_t (*)(uint64_t, uint64_t))v38)(a1, v11);
  }
}

uint64_t sub_66CC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return LegacyActionButton.init(deserializing:using:)(a1, a2, a3);
}

uint64_t sub_66CDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LegacyActionButton(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t initializeBufferWithCopyOfBuffer for LegacyActionButton(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  void *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v17 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v17);
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = *(_OWORD *)(a2 + 5);
    *(_OWORD *)(a1 + 40) = v8;
    v9 = v8;
    v10 = **(void (***)(uint64_t, uint64_t, uint64_t))(v8 - 8);
    swift_bridgeObjectRetain(v7);
    v10(a1 + 16, (uint64_t)(a2 + 2), v9);
    *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
    v11 = *(int *)(a3 + 28);
    v12 = (void *)(a1 + v11);
    v13 = (char *)a2 + v11;
    v14 = type metadata accessor for ImpressionMetrics(0);
    v15 = *(_QWORD *)(v14 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
    {
      v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
    }
  }
  return a1;
}

uint64_t destroy for LegacyActionButton(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((_QWORD *)(a1 + 16));
  v4 = a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for ImpressionMetrics(0);
  v6 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  return result;
}

uint64_t initializeWithCopy for LegacyActionButton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  void *v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = a2 + 16;
  v8 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 40) = v8;
  v9 = v8;
  v10 = **(void (***)(uint64_t, uint64_t, uint64_t))(v8 - 8);
  swift_bridgeObjectRetain(v6);
  v10(a1 + 16, v7, v9);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v11 = *(int *)(a3 + 28);
  v12 = (void *)(a1 + v11);
  v13 = (const void *)(a2 + v11);
  v14 = type metadata accessor for ImpressionMetrics(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v15 + 16))(v12, v13, v14);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t assignWithCopy for LegacyActionButton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease();
  __swift_assign_boxed_opaque_existential_1((_QWORD *)(a1 + 16), (_QWORD *)(a2 + 16));
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v7 = *(int *)(a3 + 28);
  v8 = (void *)(a1 + v7);
  v9 = (void *)(a2 + v7);
  v10 = type metadata accessor for ImpressionMetrics(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 24))(v8, v9, v10);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v11 + 16))(v8, v9, v10);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  return a1;
}

uint64_t initializeWithTake for LegacyActionButton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  void *v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v5 = *(int *)(a3 + 28);
  v6 = (void *)(a1 + v5);
  v7 = (const void *)(a2 + v5);
  v8 = type metadata accessor for ImpressionMetrics(0);
  v9 = *(_QWORD *)(v8 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 32))(v6, v7, v8);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  }
  return a1;
}

uint64_t assignWithTake for LegacyActionButton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((_QWORD *)(a1 + 16));
  v7 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v8 = *(int *)(a3 + 28);
  v9 = (void *)(a1 + v8);
  v10 = (void *)(a2 + v8);
  v11 = type metadata accessor for ImpressionMetrics(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 40))(v9, v10, v11);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v12 + 8))(v9, v11);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v12 + 32))(v9, v10, v11);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for LegacyActionButton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_6732C);
}

uint64_t sub_6732C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 40);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for LegacyActionButton(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_673B8);
}

uint64_t sub_673B8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 40) = (a2 - 1);
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

void sub_67430(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = &unk_2EE758;
  v4[1] = &unk_2EE770;
  v4[2] = (char *)&value witness table for Builtin.Int8 + 64;
  sub_34090(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
  }
}

uint64_t OAuthController.__allocating_init(endpointSubscriber:hudViewHandler:)(uint64_t a1, __int128 *a2)
{
  uint64_t v2;
  uint64_t v4;

  v4 = swift_allocObject(v2, 72, 7);
  OAuthController.init(endpointSubscriber:hudViewHandler:)(v4, a2);
  return v4;
}

uint64_t OAuthController.init(endpointSubscriber:hudViewHandler:)(uint64_t a1, __int128 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  unint64_t v19;
  __int128 *v20;
  _QWORD *v21;

  v3 = v2;
  v20 = a2;
  v4 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_676C8();
  static DispatchQoS.unspecified.getter(v19);
  v21 = _swiftEmptyArrayStorage;
  v14 = sub_F1C0(&qword_3B20B8, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B20C0);
  v16 = sub_67E30((unint64_t *)&qword_3B20C8, &qword_3B20C0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v21, v15, v16, v8, v14);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v4);
  *(_QWORD *)(v3 + 16) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000019, 0x800000000030BC60, v13, v10, v7, 0);
  *(_QWORD *)(v3 + 24) = 0;
  sub_F4D8(v20, v3 + 32);
  return v3;
}

unint64_t sub_676C8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_3B8710;
  if (!qword_3B8710)
  {
    v1 = objc_opt_self(OS_dispatch_queue);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_3B8710);
  }
  return result;
}

uint64_t OAuthController.authenticateThirdPartySubscription(authorizationURL:oAuthAdamId:window:completion:)(uint64_t a1, uint64_t a2, unint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  void *v38;
  _QWORD *v39;
  void *v40;
  id v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t aBlock[5];
  uint64_t v69;

  v56 = a5;
  v58 = a4;
  v59 = a6;
  v66 = a2;
  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v64 = *(_QWORD *)(v8 - 8);
  v65 = v8;
  __chkstk_darwin(v8);
  v63 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v61 = *(_QWORD *)(v10 - 8);
  v62 = v10;
  __chkstk_darwin(v10);
  v60 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v55 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  __chkstk_darwin(v55);
  v54 = (char *)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Logger(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v51 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.purchases.getter(v16);
  v19 = swift_bridgeObjectRetain_n(a3, 2);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v20, v21))
  {
    v22 = swift_slowAlloc(22, -1);
    v53 = a1;
    v23 = v22;
    v24 = swift_slowAlloc(32, -1);
    v52 = v14;
    v25 = v24;
    *(_DWORD *)v23 = 141558275;
    v67 = 1752392040;
    aBlock[0] = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, aBlock);
    *(_WORD *)(v23 + 12) = 2081;
    v51 = v15;
    swift_bridgeObjectRetain(a3);
    v67 = sub_69298(v66, a3, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, aBlock);
    swift_bridgeObjectRelease_n(a3, 3);
    _os_log_impl(&dword_0, v20, v21, "%{private,mask.hash}s: Authenticating OAuth from PurchaseController.", (uint8_t *)v23, 0x16u);
    swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1, -1);
    v26 = v23;
    a1 = v53;
    swift_slowDealloc(v26, -1, -1);

    (*(void (**)(char *, uint64_t))(v51 + 8))(v18, v52);
  }
  else
  {

    swift_bridgeObjectRelease_n(a3, 2);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  }
  v27 = v57;
  v53 = *(_QWORD *)(v57 + 16);
  v28 = v54;
  v29 = v55;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v54, a1, v55);
  v30 = *(unsigned __int8 *)(v12 + 80);
  v31 = (v30 + 24) & ~v30;
  v32 = (v13 + v31 + 7) & 0xFFFFFFFFFFFFFFF8;
  v33 = (v32 + 23) & 0xFFFFFFFFFFFFFFF8;
  v34 = (v33 + 15) & 0xFFFFFFFFFFFFFFF8;
  v35 = swift_allocObject(&unk_37AB38, v34 + 16, v30 | 7);
  *(_QWORD *)(v35 + 16) = v27;
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v35 + v31, v28, v29);
  v36 = (_QWORD *)(v35 + v32);
  *v36 = v66;
  v36[1] = a3;
  v38 = v58;
  v37 = v59;
  *(_QWORD *)(v35 + v33) = v58;
  v39 = (_QWORD *)(v35 + v34);
  *v39 = v56;
  v39[1] = v37;
  aBlock[4] = (uint64_t)sub_67E0C;
  v69 = v35;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_2C9F4;
  aBlock[3] = (uint64_t)&block_descriptor_1;
  v40 = _Block_copy(aBlock);
  swift_bridgeObjectRetain(a3);
  swift_retain(v27);
  v41 = v38;
  v42 = swift_retain(v37);
  v43 = v60;
  static DispatchQoS.unspecified.getter(v42);
  v67 = (uint64_t)_swiftEmptyArrayStorage;
  v44 = sub_F1C0((unint64_t *)&qword_3B4420, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v45 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8720);
  v46 = sub_67E30((unint64_t *)&qword_3B4430, (uint64_t *)&unk_3B8720);
  v47 = v63;
  v48 = v45;
  v49 = v65;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v67, v48, v46, v65, v44);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v43, v47, v40);
  _Block_release(v40);
  (*(void (**)(char *, uint64_t))(v64 + 8))(v47, v49);
  (*(void (**)(char *, uint64_t))(v61 + 8))(v43, v62);
  return swift_release(v69);
}

uint64_t sub_67B9C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  void *v37;
  unint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  void *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;

  v53 = a7;
  v52 = type metadata accessor for URL(0);
  v13 = *(_QWORD *)(v52 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  __chkstk_darwin(v52);
  v51 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Logger(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v20 = (char *)&v44 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = *(_QWORD *)(a1 + 24);
  if (!v21)
    return sub_68290(a2, a3, a4, v18, a1 + 32, a5, a6, v53);
  v44 = v17;
  v45 = a2;
  v47 = a6;
  v48 = a1;
  v49 = a4;
  v50 = a5;
  v46 = v21;
  v22 = swift_retain(v21);
  v23 = static Logger.purchases.getter(v22);
  v24 = Logger.logObject.getter(v23);
  v25 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v24, v25))
  {
    v26 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v26 = 0;
    _os_log_impl(&dword_0, v24, v25, "There already exists an OAuthSession. This should never happen. Cancelling existing session.", v26, 2u);
    swift_slowDealloc(v26, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v16 + 8))(v20, v44);
  v28 = v51;
  v27 = v52;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v51, v45, v52);
  v29 = *(unsigned __int8 *)(v13 + 80);
  v30 = (v29 + 24) & ~v29;
  v31 = (v14 + v30 + 7) & 0xFFFFFFFFFFFFFFF8;
  v32 = (v31 + 23) & 0xFFFFFFFFFFFFFFF8;
  v33 = (v32 + 15) & 0xFFFFFFFFFFFFFFF8;
  v34 = swift_allocObject(&unk_37ABD8, v33 + 16, v29 | 7);
  v35 = v48;
  *(_QWORD *)(v34 + 16) = v48;
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v34 + v30, v28, v27);
  v36 = (uint64_t *)(v34 + v31);
  v38 = v49;
  v37 = v50;
  *v36 = a3;
  v36[1] = v38;
  *(_QWORD *)(v34 + v32) = v37;
  v39 = (uint64_t *)(v34 + v33);
  v40 = v53;
  *v39 = v47;
  v39[1] = v40;
  swift_retain(v35);
  swift_bridgeObjectRetain(v38);
  v41 = v37;
  swift_retain(v40);
  v42 = v46;
  sub_292BAC((uint64_t)sub_699E4, v34);
  swift_release(v34);
  return swift_release(v42);
}

uint64_t sub_67E0C()
{
  return sub_69AC0((uint64_t (*)(_QWORD, unint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_67B9C);
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t block_destroy_helper_1(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_67E30(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;

  result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A]);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_67E70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  _QWORD *v27;
  uint64_t v28;
  void *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD aBlock[5];
  uint64_t v51;

  v41 = a6;
  v42 = a7;
  v39 = a4;
  v40 = a5;
  v38 = a3;
  v45 = type metadata accessor for DispatchWorkItemFlags(0);
  v48 = *(_QWORD *)(v45 - 8);
  __chkstk_darwin(v45);
  v44 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v46 = *(_QWORD *)(v10 - 8);
  v47 = v10;
  __chkstk_darwin(v10);
  v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for URL(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  __chkstk_darwin(v13);
  v16 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = *(_QWORD *)(a1 + 16);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a2, v13);
  v17 = *(unsigned __int8 *)(v14 + 80);
  v18 = (v17 + 24) & ~v17;
  v19 = (v15 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  v20 = (v19 + 23) & 0xFFFFFFFFFFFFFFF8;
  v21 = (v20 + 15) & 0xFFFFFFFFFFFFFFF8;
  v22 = swift_allocObject(&unk_37AC00, v21 + 16, v17 | 7);
  *(_QWORD *)(v22 + 16) = a1;
  (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(v22 + v18, v16, v13);
  v23 = (_QWORD *)(v22 + v19);
  v24 = v39;
  *v23 = v38;
  v23[1] = v24;
  v26 = v40;
  v25 = v41;
  *(_QWORD *)(v22 + v20) = v40;
  v27 = (_QWORD *)(v22 + v21);
  v28 = v42;
  *v27 = v25;
  v27[1] = v28;
  aBlock[4] = sub_69AB4;
  v51 = v22;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_2C9F4;
  aBlock[3] = &block_descriptor_15;
  v29 = _Block_copy(aBlock);
  swift_retain(a1);
  swift_bridgeObjectRetain(v24);
  v30 = v26;
  v31 = swift_retain(v28);
  static DispatchQoS.unspecified.getter(v31);
  v49 = _swiftEmptyArrayStorage;
  v32 = sub_F1C0((unint64_t *)&qword_3B4420, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v33 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8720);
  v34 = sub_67E30((unint64_t *)&qword_3B4430, (uint64_t *)&unk_3B8720);
  v36 = v44;
  v35 = v45;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v49, v33, v34, v45, v32);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v36, v29);
  _Block_release(v29);
  (*(void (**)(char *, uint64_t))(v48 + 8))(v36, v35);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v12, v47);
  return swift_release(v51);
}

uint64_t sub_68130(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint8_t *v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v31 = a2;
  v32 = a3;
  v12 = type metadata accessor for Logger(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  v17 = swift_release(v16);
  v18 = static Logger.purchases.getter(v17);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc(2, -1);
    v30 = a4;
    v22 = a5;
    v23 = a6;
    v24 = a7;
    v25 = v21;
    *(_WORD *)v21 = 0;
    _os_log_impl(&dword_0, v19, v20, "Canceled existing OAuth session before starting a new one.", v21, 2u);
    v26 = v25;
    a7 = v24;
    a6 = v23;
    a5 = v22;
    a4 = v30;
    swift_slowDealloc(v26, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  return sub_68290(v31, v32, a4, v27, a1 + 32, a5, a6, a7);
}

uint64_t sub_68290(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  id v32;
  id v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t result;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53[5];

  v9 = v8;
  v50 = a1;
  v16 = type metadata accessor for URL(0);
  v48 = *(_QWORD *)(v16 - 8);
  v49 = v16;
  __chkstk_darwin(v16);
  v51 = (char *)&v42 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for Logger(0);
  v46 = *(_QWORD *)(v18 - 8);
  v47 = v18;
  v19 = __chkstk_darwin(v18);
  v21 = (char *)&v42 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.purchases.getter(v19);
  v22 = swift_bridgeObjectRetain_n(a3, 2);
  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v23, v24))
  {
    v25 = swift_slowAlloc(22, -1);
    v44 = a7;
    v26 = v25;
    v27 = swift_slowAlloc(32, -1);
    v45 = a2;
    v42 = v27;
    *(_DWORD *)v26 = 141558275;
    v52 = 1752392040;
    v53[0] = v27;
    v43 = a5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, v53);
    *(_WORD *)(v26 + 12) = 2081;
    swift_bridgeObjectRetain(a3);
    v52 = sub_69298(v45, a3, v53);
    a5 = v43;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, v53);
    swift_bridgeObjectRelease_n(a3, 3);
    _os_log_impl(&dword_0, v23, v24, "%{private,mask.hash}s: Initializing an OAuth session in PurchaseController", (uint8_t *)v26, 0x16u);
    v28 = v42;
    swift_arrayDestroy(v42, 1, (char *)&type metadata for Any + 8);
    a2 = v45;
    swift_slowDealloc(v28, -1, -1);
    v29 = v26;
    a7 = v44;
    swift_slowDealloc(v29, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a3, 2);
  }
  (*(void (**)(char *, uint64_t))(v46 + 8))(v21, v47);
  v30 = (uint64_t)v51;
  (*(void (**)(char *, uint64_t, uint64_t))(v48 + 16))(v51, v50, v49);
  sub_150C8(a5, (uint64_t)v53);
  v31 = *(void **)(v9 + 16);
  sub_676C8();
  swift_bridgeObjectRetain(a3);
  v32 = a6;
  v33 = v31;
  v34 = (void *)static OS_dispatch_queue.main.getter(v33);
  v35 = type metadata accessor for OAuthSession(0);
  swift_allocObject(v35, *(unsigned int *)(v35 + 48), *(unsigned __int16 *)(v35 + 52));
  v37 = sub_296C20(v30, a2, a3, (uint64_t)v53, v36, v32, v33, v34);

  v38 = *(_QWORD *)(v9 + 24);
  *(_QWORD *)(v9 + 24) = v37;
  result = swift_release(v38);
  v40 = *(_QWORD *)(v9 + 24);
  if (v40)
  {
    v41 = (_QWORD *)swift_allocObject(&unk_37AC50, 40, 7);
    v41[2] = v9;
    v41[3] = a7;
    v41[4] = a8;
    swift_retain(v40);
    swift_retain(v9);
    swift_retain(a8);
    sub_29153C((uint64_t)sub_69B60, (uint64_t)v41);
    swift_release(v40);
    return swift_release(v41);
  }
  return result;
}

uint64_t OAuthController.resumeThirdPartySubscription(redirectURL:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[2];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD aBlock[5];
  uint64_t v27;

  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v24 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v22 = *(_QWORD *)(v6 - 8);
  v23 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9);
  v21[1] = *(_QWORD *)(v1 + 16);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v9);
  v12 = *(unsigned __int8 *)(v10 + 80);
  v13 = (v12 + 24) & ~v12;
  v14 = swift_allocObject(&unk_37AB88, v13 + v11, v12 | 7);
  *(_QWORD *)(v14 + 16) = v1;
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v14 + v13, (char *)v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  aBlock[4] = sub_6997C;
  v27 = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_2C9F4;
  aBlock[3] = &block_descriptor_6;
  v15 = _Block_copy(aBlock);
  v16 = swift_retain(v1);
  static DispatchQoS.unspecified.getter(v16);
  v25 = _swiftEmptyArrayStorage;
  v17 = sub_F1C0((unint64_t *)&qword_3B4420, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8720);
  v19 = sub_67E30((unint64_t *)&qword_3B4430, (uint64_t *)&unk_3B8720);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v25, v18, v19, v3, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v5, v15);
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v5, v3);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v8, v23);
  return swift_release(v27);
}

uint64_t sub_6884C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a1 + 24);
  if (v9)
  {
    swift_retain(v9);
    sub_2910B4(a2);
    return swift_release(v9);
  }
  else
  {
    v11 = static Logger.purchases.getter(v6);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, (os_log_type_t)v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v14 = 0;
      _os_log_impl(&dword_0, v12, (os_log_type_t)v13, "Resume OAuthSession called but there is no OAuthSession to resume.", v14, 2u);
      swift_slowDealloc(v14, -1, -1);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
}

uint64_t sub_68974(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v24[2];
  uint64_t v25;
  _QWORD *v26;
  _QWORD aBlock[5];
  uint64_t v28;

  v10 = type metadata accessor for DispatchWorkItemFlags(0);
  v25 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24[1] = *(_QWORD *)(a3 + 16);
  v17 = swift_allocObject(&unk_37AC78, 56, 7);
  *(_BYTE *)(v17 + 16) = a1;
  *(_QWORD *)(v17 + 24) = a3;
  *(_QWORD *)(v17 + 32) = a4;
  *(_QWORD *)(v17 + 40) = a5;
  *(_QWORD *)(v17 + 48) = a2;
  aBlock[4] = sub_69BA0;
  v28 = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_2C9F4;
  aBlock[3] = &block_descriptor_24;
  v18 = _Block_copy(aBlock);
  swift_retain(a3);
  swift_retain(a5);
  v19 = swift_errorRetain(a2);
  static DispatchQoS.unspecified.getter(v19);
  v26 = _swiftEmptyArrayStorage;
  v20 = sub_F1C0((unint64_t *)&qword_3B4420, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8720);
  v22 = sub_67E30((unint64_t *)&qword_3B4430, (uint64_t *)&unk_3B8720);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v26, v21, v22, v10, v20);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v16, v12, v18);
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v12, v10);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  return swift_release(v28);
}

uint64_t sub_68B84(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint8_t *v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint8_t *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char v40;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;

  v47 = a4;
  LODWORD(v46) = a1;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3B70);
  v44 = *(_QWORD *)(v8 - 8);
  v45 = v8;
  __chkstk_darwin(v8);
  v43 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Logger(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v42 - v16;
  v18 = static Logger.purchases.getter(v15);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc(8, -1);
    v42 = v14;
    v22 = v21;
    *(_DWORD *)v21 = 67109120;
    v48 = v46 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49);
    _os_log_impl(&dword_0, v19, v20, "OAuthSession Authentication completed with subscribed: %{BOOL}d", v22, 8u);
    v14 = v42;
    swift_slowDealloc(v22, -1, -1);
  }

  v23 = *(void (**)(char *, uint64_t))(v11 + 8);
  v23(v17, v10);
  if (a5)
  {
    v24 = swift_errorRetain(a5);
    static Logger.purchases.getter(v24);
    v25 = swift_errorRetain(a5);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      v45 = v10;
      v28 = swift_slowAlloc(12, -1);
      v46 = a3;
      v29 = (uint8_t *)v28;
      v44 = swift_slowAlloc(8, -1);
      *(_DWORD *)v29 = 138412290;
      v30 = a2;
      v31 = _convertErrorToNSError(_:)(a5);
      v49 = v31;
      v10 = v45;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50);
      v32 = v44;
      *(_QWORD *)v44 = v31;
      a2 = v30;
      swift_errorRelease(a5);
      _os_log_impl(&dword_0, v26, v27, "OAuthSession Authentication failed with error: %@", v29, 0xCu);
      v33 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8E70);
      swift_arrayDestroy(v32, 1, v33);
      swift_slowDealloc(v32, -1, -1);
      v34 = v29;
      a3 = v46;
      swift_slowDealloc(v34, -1, -1);
    }
    else
    {
      swift_errorRelease(a5);
    }

    v23(v14, v10);
    swift_errorRetain(a5);
    sub_68F2C(0, a5, a2, a3, v47);
    swift_errorRelease(a5);
    return swift_errorRelease(a5);
  }
  else
  {
    if ((v46 & 1) != 0)
    {
      type metadata accessor for PurchaseControllerWrapper(0);
      v35 = (void *)static PurchaseControllerWrapper.sharedInstance.getter();
      v36 = (void *)PurchaseControllerWrapper.purchaseController.getter();

      v38 = v43;
      v37 = v44;
      v39 = v45;
      (*(void (**)(char *, _QWORD, uint64_t))(v44 + 104))(v43, enum case for PurchaseController.RefreshCondition.always<A>(_:), v45);
      PurchaseController.getStateFromMediaAPI(condition:)(v38);

      (*(void (**)(char *, uint64_t))(v37 + 8))(v38, v39);
      v40 = 1;
    }
    else
    {
      v40 = 0;
    }
    return sub_68F2C(v40, 0, a2, a3, v47);
  }
}

uint64_t sub_68F2C(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  _QWORD aBlock[5];
  uint64_t v30;

  v10 = type metadata accessor for DispatchWorkItemFlags(0);
  v28 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for DispatchQoS(0);
  v13 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 24) = 0;
  swift_release(v16);
  v17 = sub_676C8();
  v18 = (void *)static OS_dispatch_queue.main.getter(v17);
  v19 = swift_allocObject(&unk_37ACC8, 48, 7);
  *(_QWORD *)(v19 + 16) = a4;
  *(_QWORD *)(v19 + 24) = a5;
  *(_BYTE *)(v19 + 32) = a1;
  *(_QWORD *)(v19 + 40) = a2;
  aBlock[4] = sub_69BDC;
  v30 = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_2C9F4;
  aBlock[3] = &block_descriptor_30;
  v20 = _Block_copy(aBlock);
  v21 = v30;
  swift_retain(a5);
  swift_errorRetain(a2);
  v22 = swift_release(v21);
  static DispatchQoS.unspecified.getter(v22);
  aBlock[0] = _swiftEmptyArrayStorage;
  v23 = sub_F1C0((unint64_t *)&qword_3B4420, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8720);
  v25 = sub_67E30((unint64_t *)&qword_3B4430, (uint64_t *)&unk_3B8720);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v24, v25, v10, v23);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v15, v12, v20);
  _Block_release(v20);

  (*(void (**)(char *, uint64_t))(v28 + 8))(v12, v10);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v27);
}

uint64_t OAuthController.deinit()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  __swift_destroy_boxed_opaque_existential_1((_QWORD *)(v0 + 32));
  return v0;
}

uint64_t OAuthController.__deallocating_deinit()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  __swift_destroy_boxed_opaque_existential_1((_QWORD *)(v0 + 32));
  return swift_deallocClassInstance(v0, 72, 7);
}

uint64_t sub_691B4(uint64_t result, _BYTE **a2)
{
  _BYTE *v2;

  v2 = *a2;
  *v2 = result;
  *a2 = v2 + 1;
  return result;
}

uint64_t sub_691C4(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

uint64_t sub_691F8(uint64_t (*a1)(void))
{
  return a1();
}

_BYTE **sub_69218(_BYTE **result, uint64_t a2, uint64_t a3, char a4)
{
  _BYTE *v4;

  v4 = *result;
  *v4 = a4;
  *result = v4 + 1;
  return result;
}

uint64_t sub_69228(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;

  v6 = a4();
  v8 = sub_69298(v6, v7, a3);
  v9 = *a1 + 8;
  v11 = v8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v11, &v12);
  result = swift_bridgeObjectRelease();
  *a1 = v9;
  return result;
}

uint64_t sub_69298(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  void *ObjectType;

  v6 = sub_69368(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_1FB98((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_1FB98((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain(a2);
  }
  __swift_destroy_boxed_opaque_existential_1(v12);
  return v7;
}

uint64_t sub_69368(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v12 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v12)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v12] || (char *)__src + v12 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter(0, HIBYTE(a6) & 0xF, __dst, a3);
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_69520(a5, a6);
    *a1 = v13;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = _StringObject.sharedUTF8.getter(a5, a6);
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringTesting.swift", 25, 2, 151, 0);
    __break(1u);
LABEL_17:
    LOBYTE(v14) = 2;
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableRawPointer.initializeMemory overlapping range", 58, 2, "Swift/UnsafeRawPointer.swift", 28, v14, 1173, 0);
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
}

uint64_t sub_69520(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = (uint64_t)sub_695B4(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_69728(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_69728(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

_QWORD *sub_695B4(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  _QWORD *result;
  int v10;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    while (1)
    {
      v5 = sub_185E80(v4, 0);
      if (v4 < 0)
        break;
      v6 = v5;
      v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v8 & 1) != 0)
        goto LABEL_14;
      if (v7 == v4)
        return v6;
      LOBYTE(v10) = 2;
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, v10, 1122, 0);
      __break(1u);
LABEL_10:
      v4 = String.UTF8View._foreignCount()();
      if (!v4)
        return _swiftEmptyArrayStorage;
    }
    LOBYTE(v10) = 2;
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, v10, 71, 0);
    __break(1u);
LABEL_14:
    LOBYTE(v10) = 2;
    result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Insufficient space allocated to copy string contents", 52, 2, "Swift/StringUTF8View.swift", 26, v10, 430, 0);
    __break(1u);
  }
  else
  {
    return _swiftEmptyArrayStorage;
  }
  return result;
}

uint64_t sub_69728(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB10);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = _swift_stdlib_malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_bridgeObjectRelease(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

void *sub_69874(void *__src, uint64_t a2, void *__dst, uint64_t a4)
{
  uint64_t v4;

  if (__src)
    v4 = a2 - (_QWORD)__src;
  else
    v4 = 0;
  if (!__dst)
  {
    if (v4 <= 0)
      return __src;
LABEL_10:
    __src = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableRawBufferPointer.copyMemory source has too many elements", 69, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 487, 0);
    __break(1u);
    return __src;
  }
  if (a4 - (uint64_t)__dst < v4)
    goto LABEL_10;
  if (__src)
    return memmove(__dst, __src, a2 - (_QWORD)__src);
  return __src;
}

uint64_t sub_69908()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_6997C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for URL(0) - 8) + 80);
  return sub_6884C(*(_QWORD *)(v0 + 16), v0 + ((v1 + 24) & ~v1));
}

uint64_t type metadata accessor for OAuthController()
{
  return objc_opt_self(_TtC8ShelfKit15OAuthController);
}

uint64_t method lookup function for OAuthController(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for OAuthController);
}

uint64_t dispatch thunk of UnifiedMessagingProvider.__allocating_init(placement:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t sub_699E4()
{
  return sub_69AC0((uint64_t (*)(_QWORD, unint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_67E70);
}

uint64_t objectdestroyTm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 23) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v6 + 8));

  swift_release(*(_QWORD *)(v0 + v8 + 8));
  return swift_deallocObject(v0, v8 + 16, v5);
}

uint64_t sub_69AB4()
{
  return sub_69AC0((uint64_t (*)(_QWORD, unint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_68130);
}

uint64_t sub_69AC0(uint64_t (*a1)(_QWORD, unint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = *(_QWORD *)(type metadata accessor for URL(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  return a1(*(_QWORD *)(v1 + 16), v1 + v3, *(_QWORD *)(v1 + v4), *(_QWORD *)(v1 + v4 + 8), *(_QWORD *)(v1 + ((v4 + 23) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((((v4 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((((v4 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_69B34()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_69B60(char a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_68974(a1, a2, v2[2], v2[3], v2[4]);
}

uint64_t sub_69B6C()
{
  _QWORD *v0;

  swift_release(v0[3]);
  swift_release(v0[5]);
  swift_errorRelease(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_69BA0()
{
  uint64_t v0;

  return sub_68B84(*(unsigned __int8 *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
}

uint64_t sub_69BB0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_errorRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_69BDC()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 16))(*(unsigned __int8 *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

BOOL static StoreViewControllerLifecycleEvent.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void StoreViewControllerLifecycleEvent.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

Swift::Int StoreViewControllerLifecycleEvent.hashValue.getter(unsigned __int8 a1)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

unint64_t sub_69CA4()
{
  unint64_t result;

  result = qword_3B3B78;
  if (!qword_3B3B78)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for StoreViewControllerLifecycleEvent);
    atomic_store(result, (unint64_t *)&qword_3B3B78);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for StoreViewControllerLifecycleEvent(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_69D34 + 4 * byte_2EE7F5[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_69D68 + 4 * byte_2EE7F0[v4]))();
}

uint64_t sub_69D68(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_69D70(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x69D78);
  return result;
}

uint64_t sub_69D84(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x69D8CLL);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_69D90(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_69D98(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for StoreViewControllerLifecycleEvent()
{
  return &type metadata for StoreViewControllerLifecycleEvent;
}

void PageContent.isLoaded.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;

  v1 = type metadata accessor for PageContent(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_14510(v0, (uint64_t)v3, type metadata accessor for PageContent);
  v4 = (char *)sub_69E4C + 4 * byte_2EE8D8[swift_getEnumCaseMultiPayload(v3, v1)];
  __asm { BR              X10 }
}

uint64_t sub_69E4C()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);

  sub_145D8(v0, v1);
  return 0;
}

uint64_t type metadata accessor for PageContent(uint64_t a1)
{
  uint64_t result;

  result = qword_3B3C00;
  if (!qword_3B3C00)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PageContent);
  return result;
}

void PageContent.isLoadedAndEmpty.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;

  v1 = type metadata accessor for PageContent(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_14510(v0, (uint64_t)v3, type metadata accessor for PageContent);
  v4 = (char *)sub_69F84 + 4 * byte_2EE8DC[swift_getEnumCaseMultiPayload(v3, v1)];
  __asm { BR              X10 }
}

uint64_t sub_69F84()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);

  sub_145D8(v0, v1);
  return 0;
}

uint64_t static PageContent.loading.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v2;

  *a1 = 0;
  v2 = type metadata accessor for PageContent(0);
  return swift_storeEnumTagMultiPayload(a1, v2, 0);
}

uint64_t static PageContent.loaded(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  __swift_instantiateConcreteTypeFromMangledName(&qword_3B89B0);
  v4 = sub_14510(a1, a2, type metadata accessor for ModernPage);
  static PageRenderContentTypes.unspecified.getter(v4);
  v5 = type metadata accessor for PageContent(0);
  return swift_storeEnumTagMultiPayload(a2, v5, 3);
}

uint64_t PageContent.isLoading.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  char *v5;
  int EnumCaseMultiPayload;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  v1 = v0;
  v2 = type metadata accessor for PageContent(0);
  v3 = type metadata accessor for PageContent;
  __chkstk_darwin(v2);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_14510(v1, (uint64_t)v5, type metadata accessor for PageContent);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v5, v2);
  if ((EnumCaseMultiPayload - 1) >= 2)
  {
    if (!EnumCaseMultiPayload)
      return 1;
    v8 = &v5[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B89B0) + 48)];
    v9 = type metadata accessor for PageRenderContentTypes(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
    v3 = type metadata accessor for ModernPage;
  }
  sub_145D8((uint64_t)v5, v3);
  return 0;
}

void PageContent.hasFailed.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;

  v1 = type metadata accessor for PageContent(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_14510(v0, (uint64_t)v3, type metadata accessor for PageContent);
  v4 = (char *)sub_6A208 + 4 * byte_2EE8E0[swift_getEnumCaseMultiPayload(v3, v1)];
  __asm { BR              X10 }
}

uint64_t sub_6A208()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);

  sub_145D8(v0, v1);
  return 0;
}

void PageContent.automationState.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;

  v1 = type metadata accessor for PageContent(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_14510(v0, (uint64_t)v3, type metadata accessor for PageContent);
  v4 = (char *)sub_6A324 + 4 * byte_2EE8E4[swift_getEnumCaseMultiPayload(v3, v1)];
  __asm { BR              X10 }
}

unint64_t sub_6A324()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);

  sub_145D8(v0, v1);
  return 0xD000000000000010;
}

uint64_t PageContent.addShelfToTop(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  uint64_t v21;
  uint64_t v22;
  void (*v23)(_QWORD, _QWORD, _QWORD);
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(_QWORD, _QWORD, _QWORD);

  v34 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3B80);
  __chkstk_darwin(v3);
  v32 = (uint64_t)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = type metadata accessor for PageContent(0);
  __chkstk_darwin(v33);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = type metadata accessor for PageRenderContentTypes(0);
  v7 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ModernPage(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8660);
  __chkstk_darwin(v13);
  v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for ModernShelf(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_64238(a1, (uint64_t)v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {
    sub_1459C((uint64_t)v15, &qword_3B8660);
    v21 = v34;
    v20 = v35;
  }
  else
  {
    v22 = v34;
    sub_3C56C((uint64_t)v15, (uint64_t)v19, type metadata accessor for ModernShelf);
    v23 = v35;
    sub_14510((uint64_t)v35, (uint64_t)v6, type metadata accessor for PageContent);
    if (swift_getEnumCaseMultiPayload(v6, v33) == 3)
    {
      v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B89B0);
      v25 = &v6[*(int *)(v24 + 48)];
      sub_3C56C((uint64_t)v6, (uint64_t)v12, type metadata accessor for ModernPage);
      v35 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 32);
      v26 = v31;
      v35(v9, v25, v31);
      v27 = v32;
      sub_14510((uint64_t)v19, v32, type metadata accessor for ModernShelf);
      sub_6B360(0, 0, v27, (uint64_t (*)(void))sub_10CD4, type metadata accessor for ModernShelf, &qword_3B3B80);
      sub_145D8((uint64_t)v19, type metadata accessor for ModernShelf);
      v28 = v22 + *(int *)(v24 + 48);
      sub_3C56C((uint64_t)v12, v22, type metadata accessor for ModernPage);
      v35(v28, v9, v26);
      return swift_storeEnumTagMultiPayload(v22, v33, 3);
    }
    sub_145D8((uint64_t)v19, type metadata accessor for ModernShelf);
    sub_145D8((uint64_t)v6, type metadata accessor for PageContent);
    v20 = v23;
    v21 = v22;
  }
  return sub_14510((uint64_t)v20, v21, type metadata accessor for PageContent);
}

char *sub_6A6EC(uint64_t a1, int64_t a2, __int16 a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v8;
  int64_t v9;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v17;
  uint64_t v18;
  char *result;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v8 = *(_QWORD **)v6;
  v9 = *(_QWORD *)(*(_QWORD *)v6 + 16);
  if (v9 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v11 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v12 = 1 - v11;
  if (__OFSUB__(1, v11))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v13 = v9 + v12;
  if (__OFADD__(v9, v12))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(v8);
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v13 > v8[3] >> 1)
  {
    if (v9 <= v13)
      v17 = v9 + v12;
    else
      v17 = v9;
    v8 = sub_10BA0(isUniquelyReferenced_nonNull_native, v17, 1, v8);
  }
  v18 = (uint64_t)&v8[4 * a1 + 4];
  result = (char *)swift_arrayDestroy(v18, v11, &type metadata for RecentlySearchedStorage.Item);
  if (!v12)
    goto LABEL_20;
  v20 = v8[2];
  v21 = __OFSUB__(v20, a2);
  v22 = v20 - a2;
  if (v21)
    goto LABEL_26;
  if ((v22 & 0x8000000000000000) == 0)
  {
    result = (char *)(v18 + 32);
    v23 = (char *)&v8[4 * a2 + 4];
    if ((char *)(v18 + 32) != v23 || result >= &v23[32 * v22])
      result = (char *)memmove(result, v23, 32 * v22);
    v24 = v8[2];
    v21 = __OFADD__(v24, v12);
    v25 = v24 + v12;
    if (!v21)
    {
      v8[2] = v25;
LABEL_20:
      *(_BYTE *)v18 = a3;
      *(_BYTE *)(v18 + 1) = HIBYTE(a3) & 1;
      *(_QWORD *)(v18 + 8) = a4;
      *(_QWORD *)(v18 + 16) = a5;
      *(_QWORD *)(v18 + 24) = a6;
      *(_QWORD *)v6 = v8;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  v26 = 2;
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v26, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_6A888(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_6B360(a1, a2, a3, (uint64_t (*)(void))sub_10CD4, type metadata accessor for ModernShelf, &qword_3B3B80);
}

unint64_t sub_6A8A8()
{
  unint64_t result;

  result = qword_3B3B88;
  if (!qword_3B3B88)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for PageContent.LoadingBehavior);
    atomic_store(result, (unint64_t *)&qword_3B3B88);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PageContent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain(v12);
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    switch(EnumCaseMultiPayload)
    {
      case 3:
        v13 = type metadata accessor for PageID(0);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a1, a2, v13);
        v14 = type metadata accessor for ModernPage(0);
        v15 = *(int *)(v14 + 20);
        v16 = (char *)a1 + v15;
        v17 = (char *)a2 + v15;
        v18 = type metadata accessor for PageMetrics(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
        v19 = *(int *)(v14 + 24);
        v20 = *(uint64_t *)((char *)a2 + v19);
        *(uint64_t *)((char *)a1 + v19) = v20;
        swift_bridgeObjectRetain(v20);
        v21 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B89B0) + 48);
        v22 = (char *)a1 + v21;
        v23 = (char *)a2 + v21;
        v24 = type metadata accessor for PageRenderContentTypes(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v22, v23, v24);
        swift_storeEnumTagMultiPayload(a1, a3, 3);
        break;
      case 2:
        v25 = *a2;
        v26 = a2[1];
        v27 = a2[2];
        sub_6AA9C(v25, v26, v27);
        *a1 = v25;
        a1[1] = v26;
        a1[2] = v27;
        swift_storeEnumTagMultiPayload(a1, a3, 2);
        break;
      case 1:
        v9 = *a2;
        swift_errorRetain(*a2);
        v11 = a2[1];
        v10 = a2[2];
        *a1 = v9;
        a1[1] = v11;
        a1[2] = v10;
        swift_retain(v10);
        swift_storeEnumTagMultiPayload(a1, a3, 1);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(v5 + 64));
        break;
    }
  }
  return a1;
}

uint64_t sub_6AA9C(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;

  switch(a3 >> 61)
  {
    case 1uLL:
      result = swift_retain(result);
      break;
    case 2uLL:
    case 4uLL:
      result = swift_bridgeObjectRetain(a2);
      break;
    case 3uLL:
      v3 = a3 & 0x1FFFFFFFFFFFFFFFLL;
      sub_43568(result, a2);
      result = swift_retain(v3);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t destroy for PageContent(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;

  result = swift_getEnumCaseMultiPayload(a1, a2);
  switch((_DWORD)result)
  {
    case 3:
      v4 = type metadata accessor for PageID(0);
      (*(void (**)(uint64_t *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
      v5 = (char *)a1 + *(int *)(type metadata accessor for ModernPage(0) + 20);
      v6 = type metadata accessor for PageMetrics(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
      swift_bridgeObjectRelease();
      v7 = (char *)a1 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B89B0) + 48);
      v8 = type metadata accessor for PageRenderContentTypes(0);
      return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
    case 2:
      return sub_6AC00(*a1, a1[1], a1[2]);
    case 1:
      swift_errorRelease(*a1);
      return swift_release(a1[2]);
  }
  return result;
}

uint64_t sub_6AC00(uint64_t result, char a2, unint64_t a3)
{
  uint64_t v3;

  switch(a3 >> 61)
  {
    case 1uLL:
      result = swift_release(result);
      break;
    case 2uLL:
    case 4uLL:
      result = swift_bridgeObjectRelease();
      break;
    case 3uLL:
      v3 = a3 & 0x1FFFFFFFFFFFFFFFLL;
      sub_4357C(result, a2);
      result = swift_release(v3);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t *initializeWithCopy for PageContent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  switch(EnumCaseMultiPayload)
  {
    case 3:
      v10 = type metadata accessor for PageID(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
      v11 = type metadata accessor for ModernPage(0);
      v12 = *(int *)(v11 + 20);
      v13 = (char *)a1 + v12;
      v14 = (char *)a2 + v12;
      v15 = type metadata accessor for PageMetrics(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
      v16 = *(int *)(v11 + 24);
      v17 = *(uint64_t *)((char *)a2 + v16);
      *(uint64_t *)((char *)a1 + v16) = v17;
      swift_bridgeObjectRetain(v17);
      v18 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B89B0) + 48);
      v19 = (char *)a1 + v18;
      v20 = (char *)a2 + v18;
      v21 = type metadata accessor for PageRenderContentTypes(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v19, v20, v21);
      swift_storeEnumTagMultiPayload(a1, a3, 3);
      break;
    case 2:
      v22 = *a2;
      v23 = a2[1];
      v24 = a2[2];
      sub_6AA9C(v22, v23, v24);
      *a1 = v22;
      a1[1] = v23;
      a1[2] = v24;
      swift_storeEnumTagMultiPayload(a1, a3, 2);
      break;
    case 1:
      v7 = *a2;
      swift_errorRetain(*a2);
      v9 = a2[1];
      v8 = a2[2];
      *a1 = v7;
      a1[1] = v9;
      a1[2] = v8;
      swift_retain(v8);
      swift_storeEnumTagMultiPayload(a1, a3, 1);
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

uint64_t *assignWithCopy for PageContent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;

  if (a1 != a2)
  {
    sub_145D8((uint64_t)a1, type metadata accessor for PageContent);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    switch(EnumCaseMultiPayload)
    {
      case 3:
        v9 = type metadata accessor for PageID(0);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
        v10 = type metadata accessor for ModernPage(0);
        v11 = *(int *)(v10 + 20);
        v12 = (char *)a1 + v11;
        v13 = (char *)a2 + v11;
        v14 = type metadata accessor for PageMetrics(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
        v15 = *(int *)(v10 + 24);
        v16 = *(uint64_t *)((char *)a2 + v15);
        *(uint64_t *)((char *)a1 + v15) = v16;
        swift_bridgeObjectRetain(v16);
        v17 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B89B0) + 48);
        v18 = (char *)a1 + v17;
        v19 = (char *)a2 + v17;
        v20 = type metadata accessor for PageRenderContentTypes(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
        swift_storeEnumTagMultiPayload(a1, a3, 3);
        break;
      case 2:
        v21 = *a2;
        v22 = a2[1];
        v23 = a2[2];
        sub_6AA9C(v21, v22, v23);
        *a1 = v21;
        a1[1] = v22;
        a1[2] = v23;
        swift_storeEnumTagMultiPayload(a1, a3, 2);
        break;
      case 1:
        v7 = *a2;
        swift_errorRetain(*a2);
        *a1 = v7;
        v8 = a2[2];
        a1[1] = a2[1];
        a1[2] = v8;
        swift_retain(v8);
        swift_storeEnumTagMultiPayload(a1, a3, 1);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

char *initializeWithTake for PageContent(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  if (swift_getEnumCaseMultiPayload(a2, a3) == 3)
  {
    v6 = type metadata accessor for PageID(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    v7 = type metadata accessor for ModernPage(0);
    v8 = *(int *)(v7 + 20);
    v9 = &a1[v8];
    v10 = &a2[v8];
    v11 = type metadata accessor for PageMetrics(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
    *(_QWORD *)&a1[*(int *)(v7 + 24)] = *(_QWORD *)&a2[*(int *)(v7 + 24)];
    v12 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B89B0) + 48);
    v13 = &a1[v12];
    v14 = &a2[v12];
    v15 = type metadata accessor for PageRenderContentTypes(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
    swift_storeEnumTagMultiPayload(a1, a3, 3);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

char *assignWithTake for PageContent(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  if (a1 != a2)
  {
    sub_145D8((uint64_t)a1, type metadata accessor for PageContent);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 3)
    {
      v6 = type metadata accessor for PageID(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      v7 = type metadata accessor for ModernPage(0);
      v8 = *(int *)(v7 + 20);
      v9 = &a1[v8];
      v10 = &a2[v8];
      v11 = type metadata accessor for PageMetrics(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
      *(_QWORD *)&a1[*(int *)(v7 + 24)] = *(_QWORD *)&a2[*(int *)(v7 + 24)];
      v12 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B89B0) + 48);
      v13 = &a1[v12];
      v14 = &a2[v12];
      v15 = type metadata accessor for PageRenderContentTypes(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
      swift_storeEnumTagMultiPayload(a1, a3, 3);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_6B1BC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _BYTE v7[32];
  _QWORD v8[4];

  v8[0] = &unk_2EE980;
  v8[1] = &unk_2EE998;
  v8[2] = &unk_2EE9B0;
  v2 = type metadata accessor for ModernPage(319);
  if (v3 <= 0x3F)
  {
    v4 = type metadata accessor for PageRenderContentTypes(319);
    if (v5 > 0x3F)
    {
      return v4;
    }
    else
    {
      swift_getTupleTypeLayout2(v7, *(_QWORD *)(v2 - 8) + 64, *(_QWORD *)(v4 - 8) + 64);
      v8[3] = v7;
      swift_initEnumMetadataMultiPayload(a1, 256, 4, v8);
      return 0;
    }
  }
  return v2;
}

uint64_t storeEnumTagSinglePayload for PageContent.LoadingBehavior(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_6B2C4 + 4 * byte_2EE8F5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_6B2F8 + 4 * byte_2EE8F0[v4]))();
}

uint64_t sub_6B2F8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_6B300(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x6B308);
  return result;
}

uint64_t sub_6B314(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x6B31CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_6B320(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_6B328(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PageContent.LoadingBehavior()
{
  return &type metadata for PageContent.LoadingBehavior;
}

uint64_t sub_6B344(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_6B360(a1, a2, a3, (uint64_t (*)(void))sub_111EC, type metadata accessor for TabMenu.Item, &qword_3B3C38);
}

uint64_t sub_6B360(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(_QWORD), uint64_t *a6)
{
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t result;
  char v30;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_26;
  }
  v8 = *v6;
  v9 = *(_QWORD *)(*v6 + 16);
  if (v9 < a2)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v11 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v12 = 1 - v11;
  if (__OFSUB__(1, v11))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (__OFADD__(v9, v12))
  {
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v8);
  *v6 = v8;
  if (!isUniquelyReferenced_nonNull_native || v9 + v12 > *(_QWORD *)(v8 + 24) >> 1)
  {
    v8 = a4();
    *v6 = v8;
  }
  v16 = a5(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = v8 + ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
  v19 = *(_QWORD *)(v17 + 72);
  v20 = v18 + v19 * a1;
  swift_arrayDestroy(v20, v11, v16);
  if (!v12)
    goto LABEL_22;
  v21 = *(_QWORD *)(v8 + 16);
  v22 = v21 - a2;
  if (__OFSUB__(v21, a2))
    goto LABEL_30;
  if (v22 < 0)
  {
LABEL_32:
    v30 = 2;
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v30, 1046, 0);
    __break(1u);
    return result;
  }
  v23 = v20 + v19;
  v24 = v18 + v19 * a2;
  if (v20 + v19 < v24 || v23 >= v24 + v22 * v19)
  {
    swift_arrayInitWithTakeFrontToBack(v23, v24, v22, v16);
  }
  else if (v23 != v24)
  {
    swift_arrayInitWithTakeBackToFront(v23);
  }
  v26 = *(_QWORD *)(v8 + 16);
  v27 = __OFADD__(v26, v12);
  v28 = v26 + v12;
  if (v27)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  *(_QWORD *)(v8 + 16) = v28;
LABEL_22:
  if (v19 >= 1)
    sub_14510(a3, v20, a5);
  return sub_1459C(a3, a6);
}

uint64_t sub_6B538(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_6B360(a1, a2, a3, (uint64_t (*)(void))sub_111D8, type metadata accessor for HeaderButtonItem, &qword_3B3C40);
}

void *sub_6B554(uint64_t a1, int64_t a2)
{
  _QWORD *v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  void *result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = (_QWORD *)*v2;
  v5 = *(_QWORD *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v2);
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = sub_10BA0(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  result = (void *)swift_arrayDestroy(&v4[4 * a1 + 4], v7, &type metadata for RecentlySearchedStorage.Item);
  if (!v7)
    goto LABEL_20;
  v13 = v4[2];
  v14 = __OFSUB__(v13, a2);
  v15 = v13 - a2;
  if (v14)
    goto LABEL_26;
  if ((v15 & 0x8000000000000000) == 0)
  {
    v16 = (char *)&v4[4 * a2 + 4];
    if (a1 != a2 || &v4[4 * a1 + 4] >= (_QWORD *)&v16[32 * v15])
      result = memmove(&v4[4 * a1 + 4], v16, 32 * v15);
    v17 = v4[2];
    v14 = __OFADD__(v17, v8);
    v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  v19 = 2;
  result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v19, 1046, 0);
  __break(1u);
  return result;
}

unint64_t sub_6B6BC(uint64_t a1, int64_t a2, uint64_t a3)
{
  unint64_t *v3;
  unint64_t v5;
  int64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  int isUniquelyReferenced_nonNull_native;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t result;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  char v27;
  uint64_t v28;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_29;
  }
  v5 = *v3;
  v6 = *(_QWORD *)(*v3 + 16);
  if (v6 < a2)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  v9 = *(_QWORD *)(a3 + 16);
  v10 = v9 - v8;
  if (__OFSUB__(v9, v8))
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  v11 = v6 + v10;
  if (__OFADD__(v6, v10))
  {
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  v28 = v9 - v8;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v5);
  if (!isUniquelyReferenced_nonNull_native || v11 > *(_QWORD *)(v5 + 24) >> 1)
  {
    if (v6 <= v11)
      v13 = v11;
    else
      v13 = v6;
    v5 = sub_10CD4(isUniquelyReferenced_nonNull_native, v13, 1, v5);
  }
  v14 = type metadata accessor for ModernShelf(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  v17 = *(_QWORD *)(v15 + 72);
  v18 = v5 + v16 + v17 * a1;
  result = swift_arrayDestroy(v18, v8, v14);
  if (!v28)
    goto LABEL_25;
  v20 = *(_QWORD *)(v5 + 16);
  v21 = v20 - a2;
  if (__OFSUB__(v20, a2))
    goto LABEL_33;
  if (v21 < 0)
  {
LABEL_35:
    v27 = 2;
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v27, 1046, 0);
    __break(1u);
    return result;
  }
  result = v18 + v17 * v9;
  v22 = v5 + v16 + v17 * a2;
  if (result < v22 || result >= v22 + v21 * v17)
  {
    result = swift_arrayInitWithTakeFrontToBack(result, v22, v21, v14);
  }
  else if (result != v22)
  {
    result = swift_arrayInitWithTakeBackToFront(result);
  }
  v24 = *(_QWORD *)(v5 + 16);
  v25 = __OFADD__(v24, v28);
  v26 = v24 + v28;
  if (v25)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  *(_QWORD *)(v5 + 16) = v26;
LABEL_25:
  if (v9)
    result = swift_arrayInitWithCopy(v18);
  *v3 = v5;
  return result;
}

uint64_t sub_6B88C(uint64_t a1, int64_t a2)
{
  unint64_t *v2;
  unint64_t v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  int isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  char v26;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_27;
  }
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  if (!isUniquelyReferenced_nonNull_native || v9 > *(_QWORD *)(v4 + 24) >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = sub_111EC(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  v12 = type metadata accessor for TabMenu.Item(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = v4 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  v15 = *(_QWORD *)(v13 + 72);
  v16 = v15 * a1;
  v17 = v14 + v15 * a1;
  result = swift_arrayDestroy(v17, v7, v12);
  if (!v7)
    goto LABEL_25;
  v19 = *(_QWORD *)(v4 + 16);
  v20 = v19 - a2;
  if (__OFSUB__(v19, a2))
    goto LABEL_31;
  if ((v20 & 0x8000000000000000) == 0)
  {
    v21 = v14 + v15 * a2;
    if (v16 < v15 * a2 || v17 >= v21 + v20 * v15)
    {
      result = swift_arrayInitWithTakeFrontToBack(v17, v21, v20, v12);
    }
    else if (v16 != v15 * a2)
    {
      result = swift_arrayInitWithTakeBackToFront(v17);
    }
    v23 = *(_QWORD *)(v4 + 16);
    v24 = __OFADD__(v23, v8);
    v25 = v23 - v7;
    if (!v24)
    {
      *(_QWORD *)(v4 + 16) = v25;
LABEL_25:
      *v2 = v4;
      return result;
    }
    goto LABEL_32;
  }
LABEL_33:
  v26 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v26, 1046, 0);
  __break(1u);
  return result;
}

unint64_t static MarkAsPlayedEpisodeIntent.kind.getter()
{
  return 0xD000000000000019;
}

void sub_6BA50(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000019;
  a1[1] = 0x80000000002EEA20;
}

ValueMetadata *type metadata accessor for MarkAsPlayedEpisodeIntent()
{
  return &type metadata for MarkAsPlayedEpisodeIntent;
}

unint64_t static MarkAsUnplayedEpisodeIntent.kind.getter()
{
  return 0xD00000000000001BLL;
}

void sub_6BA9C(_QWORD *a1@<X8>)
{
  *a1 = 0xD00000000000001BLL;
  a1[1] = 0x80000000002EEAA0;
}

ValueMetadata *type metadata accessor for MarkAsUnplayedEpisodeIntent()
{
  return &type metadata for MarkAsUnplayedEpisodeIntent;
}

uint64_t sub_6BACC()
{
  uint64_t v0;

  v0 = type metadata accessor for MetricsFieldExclusionRequest(0);
  __swift_allocate_value_buffer(v0, qword_3B3C48);
  __swift_project_value_buffer(v0, (uint64_t)qword_3B3C48);
  return MetricsFieldExclusionRequest.init(rawValue:)(0x746E6F4365676170, 0xEB00000000747865);
}

uint64_t static MetricsFieldExclusionRequest.pageContext.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_3B0070 != -1)
    swift_once(&qword_3B0070, sub_6BACC);
  v2 = type metadata accessor for MetricsFieldExclusionRequest(0);
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_3B3C48);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t PlayButtonPresenter.Data.triggerAction()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v7[2];
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;

  v9 = *v0;
  v1 = v9;
  v2 = type metadata accessor for Action(0);
  swift_retain(v9);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3C60);
  if (swift_dynamicCast(v7, &v9, v2, v3, 6))
  {
    sub_F4D8(v7, (uint64_t)v10);
    v4 = v11;
    v5 = v12;
    __swift_project_boxed_opaque_existential_1(v10, v11);
    v1 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v4, v5);
    __swift_destroy_boxed_opaque_existential_1(v10);
  }
  else
  {
    v8 = 0;
    memset(v7, 0, sizeof(v7));
    sub_1459C((uint64_t)v7, &qword_3B3C68);
    swift_retain(v1);
  }
  return v1;
}

uint64_t PlayButtonPresenter.Data.episodeIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  sub_6BCB8(v1, *(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
  return v1;
}

uint64_t sub_6BCB8(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255)
    return sub_6BCD0(result, a2, a3 & 1);
  return result;
}

uint64_t sub_6BCD0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) != 0)
    return swift_bridgeObjectRetain(a2);
  return result;
}

uint64_t PlayButtonPresenter.Data.mediaType.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 25);
}

uint64_t PlayButtonPresenter.Data.isDoc.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  char v8;

  v1 = EpisodeMediaType.rawValue.getter(*(unsigned __int8 *)(v0 + 25));
  v3 = v2;
  v4 = EpisodeMediaType.rawValue.getter(2);
  if (v1 == v4 && v3 == v5)
  {
    v8 = 1;
    v7 = v3;
  }
  else
  {
    v7 = v5;
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v1, v3, v4, v5, 0);
  }
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v7);
  return v8 & 1;
}

uint64_t PlayButtonPresenter.Data.init(playAction:mediaType:duration:label:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t result;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v24 = a1;
  v14 = type metadata accessor for Action(0);
  swift_retain_n(a1, 2);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3C60);
  if ((swift_dynamicCast(&v25, &v24, v14, v15, 6) & 1) != 0)
  {
    v16 = *((_QWORD *)&v26 + 1);
    v17 = v27;
    __swift_project_boxed_opaque_existential_1(&v25, *((uint64_t *)&v26 + 1));
    v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 24))(v16, v17);
    v20 = v19;
    v22 = v21;
    swift_release(a1);
    result = __swift_destroy_boxed_opaque_existential_1(&v25);
  }
  else
  {
    v27 = 0;
    v25 = 0u;
    v26 = 0u;
    swift_release(a1);
    result = sub_1459C((uint64_t)&v25, &qword_3B3C68);
    v18 = 0;
    v20 = 0;
    v22 = -1;
  }
  *(_QWORD *)a7 = a1;
  *(_QWORD *)(a7 + 8) = v18;
  *(_QWORD *)(a7 + 16) = v20;
  *(_BYTE *)(a7 + 24) = v22;
  *(_BYTE *)(a7 + 25) = a2;
  *(_QWORD *)(a7 + 32) = a3;
  *(_BYTE *)(a7 + 40) = a4 & 1;
  *(_QWORD *)(a7 + 48) = a5;
  *(_QWORD *)(a7 + 56) = a6;
  return result;
}

UIImage_optional __swiftcall PlayButtonPresenter.State.Symbol.image(traits:)(UITraitCollection traits)
{
  char v1;
  char v2;
  id v4;
  double v5;
  double v6;
  uint64_t v7;
  id v8;
  unint64_t v9;
  id v10;
  NSString v11;
  objc_class *v12;
  Swift::Bool v13;
  objc_class *v14;
  UIImage_optional result;

  v2 = v1;
  v4 = objc_msgSend(objc_allocWithZone((Class)UIFontMetrics), "initForTextStyle:", UIFontTextStyleBody);
  objc_msgSend(v4, "scaledValueForValue:compatibleWithTraitCollection:", traits.super.isa, 14.0);
  v6 = v5;

  if ((v2 & 0xFE) != 0)
    v7 = 7;
  else
    v7 = 0;
  v8 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithPointSize:weight:", v7, v6);
  if (v2)
  {
    if (v2 == 1)
      v9 = 0xE800000000000000;
    else
      v9 = 0xEF657369776B636FLL;
  }
  else
  {
    v9 = 0xE90000000000006CLL;
  }
  v10 = v8;
  v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v9);
  v12 = (objc_class *)objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:withConfiguration:", v11, v10);

  v14 = v12;
  result.value.super.isa = v14;
  result.is_nil = v13;
  return result;
}

uint64_t PlayButtonPresenter.State.Symbol.symbolWeight.getter(char a1)
{
  if ((a1 & 0xFE) != 0)
    return 7;
  else
    return 0;
}

uint64_t PlayButtonPresenter.State.Symbol.symbolName.getter(char a1)
{
  if (!a1)
    return 0x6C69662E79616C70;
  if (a1 == 1)
    return 0x6C6C69662E636F64;
  return 0x6C632E776F727261;
}

uint64_t static PlayButtonPresenter.State.Icon.== infix(_:_:)(__int16 a1, __int16 a2)
{
  unsigned int v2;
  _BOOL4 v3;

  if (((a1 & 1) == 0) == (a2 & 1))
    v2 = 0;
  else
    v2 = ((a1 & 0x100) == 0) ^ ((unsigned __int16)(a2 & 0x100) >> 8);
  if (a2 < 0)
  {
    v3 = 0;
  }
  else
  {
    v2 = 0;
    v3 = (a2 ^ a1) == 0;
  }
  if (a1 < 0)
    return v2;
  else
    return v3;
}

uint64_t sub_6C0DC(__int16 *a1, unsigned __int16 *a2)
{
  __int16 v2;
  int v3;

  v2 = *a1;
  v3 = *a2;
  if (*a1 < 0)
  {
    if ((v3 & 0x8000) != 0 && ((((v2 & 1) == 0) ^ v3) & 1) != 0)
      return ((v2 & 0x100) == 0) ^ ((unsigned __int16)(v3 & 0x100) >> 8);
  }
  else if ((v3 & 0x8000) == 0)
  {
    return (v3 ^ v2) == 0;
  }
  return 0;
}

uint64_t PlayButtonPresenter.State.icon.getter()
{
  unsigned __int16 *v0;

  return *v0;
}

uint64_t PlayButtonPresenter.State.showingProgress.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 2);
}

float PlayButtonPresenter.State.progress.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 4);
}

uint64_t ShowOffer.title.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 16));
  return v1;
}

uint64_t ShowHero.title.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 32));
  return v1;
}

void sub_6C1A0(uint64_t *a1@<X0>, uint64_t a2@<X1>, _WORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  void *v26;
  id v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  id v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  _WORD *v35;
  char *v36;
  _QWORD v37[4];
  int v38;
  uint64_t v39;
  char *v40;
  _WORD *v41;
  Swift::String v42;
  Swift::String v43;

  v39 = a2;
  v41 = a3;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3D80);
  v5 = __chkstk_darwin(v4);
  v37[0] = (char *)v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v40 = (char *)v37 - v8;
  __chkstk_darwin(v7);
  v37[1] = (char *)v37 - v9;
  v10 = type metadata accessor for EpisodePlayState(0);
  __chkstk_darwin(v10);
  v12 = (char *)v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *a1;
  v13 = a1[1];
  v15 = a1[2];
  v16 = *((_BYTE *)a1 + 24);
  v17 = a1[4];
  v38 = *((unsigned __int8 *)a1 + 40);
  v18 = a1[7];
  v37[2] = a1[6];
  v37[3] = v17;
  v19 = *((unsigned __int8 *)a1 + 25);
  swift_retain(v14);
  sub_6BCB8(v13, v15, v16);
  swift_bridgeObjectRetain(v18);
  v20 = EpisodeMediaType.rawValue.getter(v19);
  v22 = v21;
  v24 = EpisodeMediaType.rawValue.getter(2);
  if (v20 == v24 && v22 == v23)
  {
    swift_release(v14);
    swift_bridgeObjectRelease_n(v22, 2);
    sub_6FB94(v13, v15, v16);
    swift_bridgeObjectRelease();
  }
  else
  {
    v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v20, v22, v24, v23, 0);
    swift_release(v14);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_6FB94(v13, v15, v16);
    swift_bridgeObjectRelease();
    if ((v25 & 1) == 0)
    {
      sub_14510(v39, (uint64_t)v12, (uint64_t (*)(_QWORD))&type metadata accessor for EpisodePlayState);
      v36 = (char *)&loc_6C4B4 + *((int *)qword_6C968 + swift_getEnumCaseMultiPayload(v12, v10));
      __asm { BR              X10 }
    }
  }
  v26 = (void *)objc_opt_self(NSBundle);
  v27 = objc_msgSend(v26, "mainBundle");
  v42._object = (void *)0xE000000000000000;
  v28._countAndFlagsBits = 0xD000000000000010;
  v28._object = (void *)0x800000000030C060;
  v29._countAndFlagsBits = 0;
  v29._object = (void *)0xE000000000000000;
  v42._countAndFlagsBits = 0;
  v30 = NSLocalizedString(_:tableName:bundle:value:comment:)(v28, (Swift::String_optional)0, (NSBundle)v27, v29, v42);

  v31 = objc_msgSend(v26, "mainBundle");
  v43._object = (void *)0xE000000000000000;
  v32._countAndFlagsBits = 0xD000000000000010;
  v32._object = (void *)0x800000000030C060;
  v33._countAndFlagsBits = 0;
  v33._object = (void *)0xE000000000000000;
  v43._countAndFlagsBits = 0;
  v34 = NSLocalizedString(_:tableName:bundle:value:comment:)(v32, (Swift::String_optional)0, (NSBundle)v31, v33, v43);

  v35 = v41;
  *v41 = 1;
  *((_BYTE *)v35 + 2) = 0;
  *((_DWORD *)v35 + 1) = 0;
  *(Swift::String *)(v35 + 4) = v30;
  *(Swift::String *)(v35 + 12) = v34;
}

void sub_6C4C8()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *object;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::String v16;

  v3 = *(_QWORD *)(v2 - 168);
  PlayButtonTimeFormatHelper.init(timeLeft:duration:)(*(_QWORD *)(v2 - 152), *(unsigned int *)(v2 - 140), *(_QWORD *)(v2 - 152), *(unsigned int *)(v2 - 140));
  sub_267BC(v3, v0, &qword_3B3D80);
  object = v1;
  if (!v1)
  {
    v5 = sub_6ED88(v0);
    v7 = v5;
    if (v6)
    {
      object = v6;
      *(_QWORD *)(v2 - 160) = v5;
    }
    else
    {
      v8 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v16._object = (void *)0xE000000000000000;
      v9._object = (void *)0x800000000030BFB0;
      v9._countAndFlagsBits = 0xD000000000000010;
      v10._countAndFlagsBits = 0;
      v10._object = (void *)0xE000000000000000;
      v16._countAndFlagsBits = 0;
      v11 = NSLocalizedString(_:tableName:bundle:value:comment:)(v9, (Swift::String_optional)(unint64_t)v7, (NSBundle)v8, v10, v16);
      *(_QWORD *)(v2 - 160) = v11._countAndFlagsBits;
      object = v11._object;

    }
  }
  swift_bridgeObjectRetain(v1);
  sub_1459C(v0, &qword_3B3D80);
  v12 = sub_6F604(0, v3);
  v14 = v13;
  sub_1459C(v3, &qword_3B3D80);
  v15 = *(_QWORD *)(v2 - 120);
  *(_WORD *)v15 = 0;
  *(_BYTE *)(v15 + 2) = 0;
  *(_DWORD *)(v15 + 4) = 0;
  *(_QWORD *)(v15 + 8) = *(_QWORD *)(v2 - 160);
  *(_QWORD *)(v15 + 16) = object;
  *(_QWORD *)(v15 + 24) = v12;
  *(_QWORD *)(v15 + 32) = v14;
  JUMPOUT(0x6C460);
}

uint64_t sub_6C980@<X0>(__int16 a1@<W0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>, double a7@<D2>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  float v29;
  uint64_t v30;
  __int16 v31;
  void (*v32)(_BYTE *, _BYTE *, uint64_t);
  void (*v33)(_BYTE *, _QWORD, uint64_t, uint64_t);
  unint64_t v34;
  uint64_t v35;
  _BYTE v36[12];
  int v37;

  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3D80);
  v15 = __chkstk_darwin(v14);
  v17 = &v36[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v15);
  v19 = &v36[-v18];
  v20 = type metadata accessor for PlayButtonTimeFormatHelper(0);
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v23 = &v36[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (a5 <= 0.0 || a6 < 0.0 || a7 < 0.0)
    goto LABEL_6;
  PlayButtonTimeFormatHelper.init(timeLeft:duration:)(*(_QWORD *)&a7, 0, *(_QWORD *)&a5, 0);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20) == 1)
  {
    sub_1459C((uint64_t)v19, &qword_3B3D80);
LABEL_6:
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v21 + 56))(v17, 1, 1, v20);
    swift_bridgeObjectRetain(a3);
    v24 = a1;
    v25 = sub_6F604(a1, (uint64_t)v17);
    v27 = v26;
    result = sub_1459C((uint64_t)v17, &qword_3B3D80);
    *(_WORD *)a4 = v24;
    *(_BYTE *)(a4 + 2) = 0;
    v29 = 0.0;
    goto LABEL_10;
  }
  v30 = (*(uint64_t (**)(_BYTE *, _BYTE *, uint64_t))(v21 + 32))(v23, v19, v20);
  v37 = PlayButtonTimeFormatHelper.showsProgressBar.getter(v30);
  v31 = a1;
  v32 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v21 + 16);
  v32(v17, v23, v20);
  v33 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v21 + 56);
  v33(v17, 0, 1, v20);
  a2 = sub_6ED88((uint64_t)v17);
  a3 = v34;
  sub_1459C((uint64_t)v17, &qword_3B3D80);
  if (!a3)
  {
    a2 = 0;
    a3 = 0xE000000000000000;
  }
  v29 = a6 / a5;
  v32(v17, v23, v20);
  v33(v17, 0, 1, v20);
  v25 = sub_6F604(v31, (uint64_t)v17);
  v27 = v35;
  sub_1459C((uint64_t)v17, &qword_3B3D80);
  result = (*(uint64_t (**)(_BYTE *, uint64_t))(v21 + 8))(v23, v20);
  *(_WORD *)a4 = v31;
  *(_BYTE *)(a4 + 2) = v37 & 1;
LABEL_10:
  *(float *)(a4 + 4) = v29;
  *(_QWORD *)(a4 + 8) = a2;
  *(_QWORD *)(a4 + 16) = a3;
  *(_QWORD *)(a4 + 24) = v25;
  *(_QWORD *)(a4 + 32) = v27;
  return result;
}

uint64_t PlayButtonPresenter.currentState.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_2EEB60);
  v4 = swift_getKeyPath(&unk_2EEB88);
  static Published.subscript.getter(a1, v1, KeyPath, v4);
  swift_release(KeyPath);
  return swift_release(v4);
}

float sub_6CC90@<S0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  char v6;
  float result;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_2EEB60);
  v5 = swift_getKeyPath(&unk_2EEB88);
  static Published.subscript.getter(&v11, v3, KeyPath, v5);
  swift_release(KeyPath);
  swift_release(v5);
  v6 = BYTE2(v11);
  result = *((float *)&v11 + 1);
  v8 = v12;
  v9 = v13;
  v10 = v14;
  *(_WORD *)a2 = v11;
  *(_BYTE *)(a2 + 2) = v6;
  *(float *)(a2 + 4) = result;
  *(_OWORD *)(a2 + 8) = v8;
  *(_QWORD *)(a2 + 24) = v9;
  *(_QWORD *)(a2 + 32) = v10;
  return result;
}

uint64_t sub_6CD2C(uint64_t a1)
{
  char v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v8;
  char v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_BYTE *)(a1 + 2);
  v2 = *(_DWORD *)(a1 + 4);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  v8 = *(_WORD *)a1;
  v9 = v1;
  v10 = v2;
  v11 = v4;
  v12 = v3;
  v13 = v5;
  v14 = v6;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v6);
  return sub_6CD90(&v8);
}

uint64_t sub_6CD90(__int16 *a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  __int16 v6;
  char v7;
  int v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  __int128 v16;
  char v17;
  __int16 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;

  v17 = *((_BYTE *)a1 + 2);
  v18 = *a1;
  v2 = *((_DWORD *)a1 + 1);
  v16 = *(_OWORD *)(a1 + 4);
  v3 = *((_QWORD *)a1 + 4);
  v15 = *((_QWORD *)a1 + 3);
  KeyPath = swift_getKeyPath(&unk_2EEB60);
  v5 = swift_getKeyPath(&unk_2EEB88);
  static Published.subscript.getter(&v19, v1, KeyPath, v5);
  swift_release(KeyPath);
  swift_release(v5);
  v6 = v19;
  v7 = BYTE2(v19);
  v8 = HIDWORD(v19);
  v9 = v20;
  v11 = v21;
  v10 = v22;
  v12 = swift_getKeyPath(&unk_2EEB60);
  v13 = swift_getKeyPath(&unk_2EEB88);
  LOWORD(v19) = v18;
  BYTE2(v19) = v17;
  HIDWORD(v19) = v2;
  v20 = v16;
  v21 = v15;
  v22 = v3;
  swift_retain(v1);
  static Published.subscript.setter(&v19, v1, v12, v13);
  LOWORD(v19) = v6;
  BYTE2(v19) = v7;
  HIDWORD(v19) = v8;
  v20 = v9;
  v21 = v11;
  v22 = v10;
  sub_6CEDC((__int16 *)&v19);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_6CEDC(__int16 *a1)
{
  uint64_t v1;
  __int16 v2;
  char v3;
  float v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t ObjectType;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  float v17[2];
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v2 = *a1;
  v3 = *((_BYTE *)a1 + 2);
  v4 = *((float *)a1 + 1);
  v16 = *(_OWORD *)(a1 + 4);
  v5 = *((_QWORD *)a1 + 3);
  v6 = *((_QWORD *)a1 + 4);
  KeyPath = swift_getKeyPath(&unk_2EEB60);
  v8 = swift_getKeyPath(&unk_2EEB88);
  static Published.subscript.getter(&v27, v1, KeyPath, v8);
  swift_release(KeyPath);
  swift_release(v8);
  LOWORD(v21) = v27;
  BYTE2(v21) = BYTE2(v27);
  v22 = HIDWORD(v27);
  v23 = v28;
  v24 = v29;
  v25 = v30;
  v26 = v31;
  LOWORD(v17[0]) = v2;
  BYTE2(v17[0]) = v3;
  v17[1] = v4;
  v18 = v16;
  v19 = v5;
  v20 = v6;
  LOBYTE(v2) = _s8ShelfKit19PlayButtonPresenterC5StateV2eeoiySbAE_AEtFZ_0(&v21, v17);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if ((v2 & 1) == 0)
  {
    v10 = v1 + OBJC_IVAR____TtC8ShelfKit19PlayButtonPresenter_delegate;
    swift_beginAccess(v1 + OBJC_IVAR____TtC8ShelfKit19PlayButtonPresenter_delegate, v17, 0, 0);
    result = swift_unknownObjectWeakLoadStrong(v10);
    if (result)
    {
      v11 = result;
      v12 = *(_QWORD *)(v10 + 8);
      ObjectType = swift_getObjectType();
      v14 = swift_getKeyPath(&unk_2EEB60);
      v15 = swift_getKeyPath(&unk_2EEB88);
      static Published.subscript.getter(&v27, v1, v14, v15);
      swift_release(v14);
      swift_release(v15);
      LOWORD(v21) = v27;
      BYTE2(v21) = BYTE2(v27);
      v22 = HIDWORD(v27);
      v23 = v28;
      v24 = v29;
      v25 = v30;
      v26 = v31;
      (*(void (**)(float *, uint64_t, uint64_t))(v12 + 8))(&v21, ObjectType, v12);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_unknownObjectRelease(v11);
    }
  }
  return result;
}

uint64_t PlayButtonPresenter.$currentState.getter()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  swift_beginAccess(v0 + OBJC_IVAR____TtC8ShelfKit19PlayButtonPresenter__currentState, v3, 33, 0);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3C78);
  Published.projectedValue.getter(v1);
  return swift_endAccess(v3);
}

uint64_t sub_6D114(_QWORD *a1)
{
  uint64_t v1;
  _BYTE v3[24];

  swift_beginAccess(*a1 + OBJC_IVAR____TtC8ShelfKit19PlayButtonPresenter__currentState, v3, 33, 0);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3C78);
  Published.projectedValue.getter(v1);
  return swift_endAccess(v3);
}

uint64_t sub_6D178(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  void (*v11)(_BYTE *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3D78);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = &v16[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v6);
  v10 = &v16[-v9 - 8];
  v11 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16);
  v11(&v16[-v9 - 8], a1, v4);
  v12 = *a2;
  v11(v8, (uint64_t)v10, v4);
  swift_beginAccess(v12 + OBJC_IVAR____TtC8ShelfKit19PlayButtonPresenter__currentState, v16, 33, 0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3C78);
  Published.projectedValue.setter(v8, v13);
  swift_endAccess(v16);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v10, v4);
}

uint64_t PlayButtonPresenter.delegate.getter()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = v0 + OBJC_IVAR____TtC8ShelfKit19PlayButtonPresenter_delegate;
  swift_beginAccess(v0 + OBJC_IVAR____TtC8ShelfKit19PlayButtonPresenter_delegate, v3, 0, 0);
  return swift_unknownObjectWeakLoadStrong(v1);
}

uint64_t sub_6D2D4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *a1;
  v2 = a1[1];
  v3 = swift_unknownObjectRetain(*a1);
  sub_6F9C0(v3, v2);
  return swift_unknownObjectRelease(v1);
}

uint64_t PlayButtonPresenter.delegate.setter(uint64_t a1, uint64_t a2)
{
  sub_6F9C0(a1, a2);
  return swift_unknownObjectRelease(a1);
}

void (*PlayButtonPresenter.delegate.modify(_QWORD *a1))(__int16 **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t Strong;
  uint64_t v7;

  v3 = malloc(0x48uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC8ShelfKit19PlayButtonPresenter_delegate;
  v3[7] = v1;
  v3[8] = v4;
  v5 = v1 + v4;
  swift_beginAccess(v1 + v4, v3, 33, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v5);
  v7 = *(_QWORD *)(v5 + 8);
  v3[5] = Strong;
  v3[6] = v7;
  return sub_6D3A8;
}

void sub_6D3A8(__int16 **a1, char a2)
{
  __int16 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t Strong;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  uint64_t KeyPath;
  uint64_t v14;
  char v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int16 v21;
  char v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v3 = *a1;
  v4 = *((_QWORD *)*a1 + 5);
  v5 = *((_QWORD *)*a1 + 6);
  v6 = *((_QWORD *)*a1 + 7) + *((_QWORD *)*a1 + 8);
  *(_QWORD *)(v6 + 8) = v5;
  swift_unknownObjectWeakAssign(v6, v4);
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRelease(*((_QWORD *)v3 + 5));
    swift_endAccess(v3);
  }
  else
  {
    v7 = *((_QWORD *)v3 + 7) + *((_QWORD *)v3 + 8);
    swift_endAccess(v3);
    swift_unknownObjectRelease(v4);
    Strong = swift_unknownObjectWeakLoadStrong(v7);
    if (Strong)
    {
      v9 = Strong;
      v10 = *((_QWORD *)v3 + 7);
      v11 = *(_QWORD *)(v10 + *((_QWORD *)v3 + 8) + 8);
      ObjectType = swift_getObjectType(Strong);
      KeyPath = swift_getKeyPath(&unk_2EEB60);
      v14 = swift_getKeyPath(&unk_2EEB88);
      static Published.subscript.getter(v3, v10, KeyPath, v14);
      swift_release(v14);
      swift_release(KeyPath);
      v15 = *((_BYTE *)v3 + 2);
      v16 = *((_DWORD *)v3 + 1);
      v17 = *((_QWORD *)v3 + 1);
      v18 = *((_QWORD *)v3 + 2);
      v19 = *((_QWORD *)v3 + 3);
      v20 = *((_QWORD *)v3 + 4);
      v21 = *v3;
      v22 = v15;
      v23 = v16;
      v24 = v17;
      v25 = v18;
      v26 = v19;
      v27 = v20;
      (*(void (**)(__int16 *, uint64_t, uint64_t))(v11 + 8))(&v21, ObjectType, v11);
      swift_unknownObjectRelease(v9);
      swift_bridgeObjectRelease(v18);
      swift_bridgeObjectRelease(v20);
    }
  }
  free(v3);
}

uint64_t PlayButtonPresenter.data.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[24];

  v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC8ShelfKit19PlayButtonPresenter_data);
  swift_beginAccess(v3, v13, 0, 0);
  v4 = *v3;
  v5 = v3[1];
  v6 = v3[2];
  v7 = *((_BYTE *)v3 + 25);
  v8 = v3[4];
  v9 = *((_BYTE *)v3 + 40);
  v10 = v3[6];
  v11 = v3[7];
  *(_QWORD *)a1 = *v3;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  LOBYTE(v3) = *((_BYTE *)v3 + 24);
  *(_BYTE *)(a1 + 24) = (_BYTE)v3;
  *(_BYTE *)(a1 + 25) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_BYTE *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = v11;
  swift_retain(v4);
  sub_6BCB8(v5, v6, v3);
  return swift_bridgeObjectRetain(v11);
}

uint64_t PlayButtonPresenter.triggerAction.getter()
{
  uint64_t v0;
  _QWORD *v1;
  _BYTE v3[24];

  v1 = (_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit19PlayButtonPresenter_triggerAction);
  swift_beginAccess(v0 + OBJC_IVAR____TtC8ShelfKit19PlayButtonPresenter_triggerAction, v3, 0, 0);
  return swift_retain(*v1);
}

uint64_t PlayButtonPresenter.__allocating_init(data:asPartOf:)(__int128 *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  PlayButtonPresenter.init(data:asPartOf:)(a1, a2);
  return v5;
}

uint64_t PlayButtonPresenter.init(data:asPartOf:)(__int128 *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 *v15;
  __int128 v16;
  __int128 v17;
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int16 v31;
  char v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  _BYTE v46[24];
  _OWORD v47[2];
  __int128 v48;
  __int128 v49;
  __int16 v50;
  char v51;
  int v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;

  v3 = v2;
  v6 = type metadata accessor for EpisodePlayState(0);
  v7 = __chkstk_darwin(v6);
  v9 = (uint64_t *)((char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v7);
  v11 = (char *)&v43 - v10;
  v12 = a1[1];
  v56 = *a1;
  v57 = v12;
  v13 = a1[3];
  v58 = a1[2];
  v59 = v13;
  v14 = v3 + OBJC_IVAR____TtC8ShelfKit19PlayButtonPresenter_delegate;
  *(_QWORD *)(v14 + 8) = 0;
  swift_unknownObjectWeakInit(v14, 0);
  v15 = (__int128 *)(v3 + OBJC_IVAR____TtC8ShelfKit19PlayButtonPresenter_data);
  v16 = a1[1];
  *v15 = *a1;
  v15[1] = v16;
  v17 = a1[3];
  v15[2] = a1[2];
  v15[3] = v17;
  sub_6FADC((uint64_t)&v56);
  *(_QWORD *)(v3 + OBJC_IVAR____TtC8ShelfKit19PlayButtonPresenter_triggerAction) = PlayButtonPresenter.Data.triggerAction()();
  v18 = BYTE8(v57);
  if (BYTE8(v57) == 255)
  {
    v23 = a2;
    v25 = 0;
  }
  else
  {
    *(_QWORD *)&v45 = v9;
    v44 = v6;
    v20 = *((_QWORD *)&v56 + 1);
    v19 = v57;
    v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B23C0);
    sub_6BCD0(v20, v19, v18 & 1);
    v22 = type metadata accessor for BaseObjectGraph(0);
    v23 = a2;
    inject<A, B>(_:from:)(v47, v21, a2, v21, v22);
    v24 = *(_QWORD *)&v47[0];
    v25 = dispatch thunk of EpisodeStateController.stateMachine(for:)(v20, v19, v18 & 1);
    swift_release(v24);
    v26 = v20;
    v6 = v44;
    v27 = v19;
    v9 = (_QWORD *)v45;
    sub_6FB94(v26, v27, v18);
  }
  *(_QWORD *)(v3 + OBJC_IVAR____TtC8ShelfKit19PlayButtonPresenter_stateMachine) = v25;
  v47[0] = v56;
  v47[1] = v57;
  v48 = v58;
  v49 = v59;
  v28 = OBJC_IVAR____TtC8ShelfKit19PlayButtonPresenter_stateMachine;
  v29 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8ShelfKit19PlayButtonPresenter_stateMachine);
  if (v29)
  {
    swift_retain(*(_QWORD *)(v3 + OBJC_IVAR____TtC8ShelfKit19PlayButtonPresenter_stateMachine));
    dispatch thunk of EpisodeStateMachine.currentState.getter(v9);
    swift_release(v29);
    sub_36624((uint64_t)v9, (uint64_t)v11);
  }
  else
  {
    swift_storeEnumTagMultiPayload(v11, v6, 5);
  }
  v30 = v23;
  sub_6C1A0((uint64_t *)v47, (uint64_t)v11, &v50);
  sub_145D8((uint64_t)v11, (uint64_t (*)(_QWORD))&type metadata accessor for EpisodePlayState);
  v31 = v50;
  v32 = v51;
  v33 = v52;
  v45 = v53;
  v34 = v54;
  v35 = v55;
  swift_beginAccess(v3 + OBJC_IVAR____TtC8ShelfKit19PlayButtonPresenter__currentState, v46, 33, 0);
  LOWORD(v47[0]) = v31;
  BYTE2(v47[0]) = v32;
  DWORD1(v47[0]) = v33;
  *(_OWORD *)((char *)v47 + 8) = v45;
  *((_QWORD *)&v47[1] + 1) = v34;
  *(_QWORD *)&v48 = v35;
  Published.init(initialValue:)(v47, &type metadata for PlayButtonPresenter.State);
  swift_endAccess(v46);
  v36 = *(_QWORD *)(v3 + v28);
  if (v36)
  {
    v37 = swift_allocObject(&unk_37AF68, 24, 7);
    swift_weakInit(v37 + 16);
    v38 = swift_allocObject(&unk_37AF90, 88, 7);
    *(_QWORD *)(v38 + 16) = v37;
    v39 = v57;
    *(_OWORD *)(v38 + 24) = v56;
    *(_OWORD *)(v38 + 40) = v39;
    v40 = v59;
    *(_OWORD *)(v38 + 56) = v58;
    *(_OWORD *)(v38 + 72) = v40;
    swift_retain(v36);
    v41 = swift_retain(v3);
    dispatch thunk of EpisodeStateMachine.addStateTransitionObserver(_:action:)(v41, sub_6FC2C, v38);
    swift_release(v36);
    swift_release(v3);
    swift_release(v38);
    swift_release(v30);
  }
  else
  {
    swift_release(v30);
    sub_6FB38((uint64_t)&v56);
  }
  return v3;
}

uint64_t sub_6D9C8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t KeyPath;
  uint64_t v13;
  __int16 v14;
  char v15;
  int v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  int v25;
  int v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int16 v31;
  unsigned __int8 v32;
  int v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE v37[32];

  v5 = type metadata accessor for EpisodePlayState(0);
  __chkstk_darwin(v5);
  v7 = (uint64_t *)((char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  a2 += 16;
  swift_beginAccess(a2, v37, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (result)
  {
    v9 = result;
    dispatch thunk of EpisodeStateMachine.currentState.getter(v7);
    sub_6C1A0(a3, (uint64_t)v7, &v31);
    sub_145D8((uint64_t)v7, (uint64_t (*)(_QWORD))&type metadata accessor for EpisodePlayState);
    v25 = v32;
    v26 = v31;
    v10 = v33;
    v24 = v34;
    v11 = v36;
    v23 = v35;
    KeyPath = swift_getKeyPath(&unk_2EEB60);
    v13 = swift_getKeyPath(&unk_2EEB88);
    static Published.subscript.getter(&v27, v9, KeyPath, v13);
    swift_release(KeyPath);
    swift_release(v13);
    v14 = v27;
    v15 = BYTE2(v27);
    v16 = HIDWORD(v27);
    v17 = v28;
    v19 = v29;
    v18 = v30;
    v20 = swift_getKeyPath(&unk_2EEB60);
    v21 = swift_getKeyPath(&unk_2EEB88);
    LOWORD(v27) = v26;
    BYTE2(v27) = v25;
    HIDWORD(v27) = v10;
    v28 = v24;
    v29 = v23;
    v30 = v11;
    swift_retain(v9);
    static Published.subscript.setter(&v27, v9, v20, v21);
    LOWORD(v27) = v14;
    BYTE2(v27) = v15;
    HIDWORD(v27) = v16;
    v28 = v17;
    v29 = v19;
    v30 = v18;
    sub_6CEDC((__int16 *)&v27);
    swift_release(v9);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t PlayButtonPresenter.upgradeDataIfPossible(data:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t KeyPath;
  uint64_t v48;
  __int16 v49;
  char v50;
  int v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE v58[4];
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE *v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  int v81;
  int v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  char v90[8];
  uint64_t v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  char v98[8];

  v74 = type metadata accessor for EpisodePlayState(0);
  v3 = __chkstk_darwin(v74);
  v75 = &v58[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v3);
  v6 = &v58[-v5];
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)&v79 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(unsigned __int8 *)(a1 + 24);
  v82 = *(unsigned __int8 *)(a1 + 25);
  v78 = *(_QWORD *)(a1 + 32);
  v81 = *(unsigned __int8 *)(a1 + 40);
  v77 = *(_QWORD *)(a1 + 48);
  v76 = *(_QWORD *)(a1 + 56);
  v10 = v1 + OBJC_IVAR____TtC8ShelfKit19PlayButtonPresenter_data;
  swift_beginAccess(v1 + OBJC_IVAR____TtC8ShelfKit19PlayButtonPresenter_data, v98, 1, 0);
  v11 = *(_QWORD *)v10;
  v12 = *(_QWORD *)(v10 + 8);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = *(unsigned __int8 *)(v10 + 24);
  v15 = *(unsigned __int8 *)(v10 + 25);
  v16 = *(_QWORD *)(v10 + 32);
  v17 = *(unsigned __int8 *)(v10 + 40);
  v18 = *(_QWORD *)(v10 + 56);
  if (v14 != 255)
  {
    if (v9 != 255)
    {
      v68 = *(_QWORD *)(v10 + 48);
      v69 = v17;
      v70 = v16;
      LODWORD(v71) = v15;
      v64 = v6;
      LODWORD(v73) = v9 & 1;
      v80 = v11;
      swift_retain(v11);
      sub_6BCB8(v12, v13, v14);
      swift_bridgeObjectRetain(v18);
      sub_6BCB8(v7, v8, v9);
      sub_6BCB8(v12, v13, v14);
      v19 = static EpisodeStateIdentifier.== infix(_:_:)(v12, v13, v14 & 1, v7, v8, v73);
      sub_6FB94(v7, v8, v9);
      sub_6FB94(v12, v13, v14);
      if ((v19 & 1) == 0)
      {
        swift_release(v80);
        sub_6FB94(v12, v13, v14);
        swift_bridgeObjectRelease();
        return 0;
      }
      goto LABEL_8;
    }
    return 0;
  }
  if (v9 != 255)
    return 0;
  v68 = *(_QWORD *)(v10 + 48);
  v69 = v17;
  v70 = v16;
  LODWORD(v71) = v15;
  v64 = v6;
  v80 = v11;
  swift_retain(v11);
  sub_6BCB8(v12, v13, 0xFFu);
  swift_bridgeObjectRetain(v18);
LABEL_8:
  v63 = v12;
  v67 = v14;
  v60 = *(_QWORD *)v10;
  v62 = *(_QWORD *)(v10 + 8);
  v66 = v1;
  v72 = v13;
  v61 = *(_QWORD *)(v10 + 16);
  v21 = v79;
  *(_QWORD *)v10 = v79;
  *(_QWORD *)(v10 + 8) = v7;
  *(_QWORD *)(v10 + 16) = v8;
  v73 = v18;
  v59 = *(unsigned __int8 *)(v10 + 24);
  *(_BYTE *)(v10 + 24) = v9;
  *(_BYTE *)(v10 + 25) = v82;
  v22 = v8;
  v23 = v78;
  *(_QWORD *)(v10 + 32) = v78;
  v24 = v7;
  v25 = v81;
  *(_BYTE *)(v10 + 40) = v81;
  v26 = v77;
  *(_QWORD *)(v10 + 48) = v77;
  v27 = v26;
  v28 = v76;
  *(_QWORD *)(v10 + 56) = v76;
  swift_retain(v21);
  v65 = v22;
  sub_6BCB8(v24, v22, v9);
  swift_bridgeObjectRetain(v28);
  swift_release(v60);
  sub_6FB94(v62, v61, v59);
  swift_bridgeObjectRelease();
  v91 = v21;
  *(_QWORD *)&v92 = v24;
  *((_QWORD *)&v92 + 1) = v22;
  LOBYTE(v93) = v9;
  v29 = v82;
  BYTE1(v93) = v82;
  v94 = v23;
  v30 = v23;
  v95 = v25;
  v96 = v27;
  v97 = v28;
  v31 = PlayButtonPresenter.Data.triggerAction()();
  v32 = (uint64_t *)(v66 + OBJC_IVAR____TtC8ShelfKit19PlayButtonPresenter_triggerAction);
  swift_beginAccess(v66 + OBJC_IVAR____TtC8ShelfKit19PlayButtonPresenter_triggerAction, v90, 1, 0);
  v33 = *v32;
  *v32 = v31;
  v34 = v27;
  v35 = v30;
  swift_release(v33);
  v36 = v63;
  v91 = v80;
  *(_QWORD *)&v92 = v63;
  *((_QWORD *)&v92 + 1) = v72;
  v37 = v67;
  LOBYTE(v93) = v67;
  BYTE1(v93) = v71;
  v94 = v70;
  v95 = v69;
  v96 = v68;
  v97 = v73;
  v83 = v21;
  v71 = v24;
  *(_QWORD *)&v84 = v24;
  v38 = v81;
  *((_QWORD *)&v84 + 1) = v65;
  LOBYTE(v85) = v9;
  BYTE1(v85) = v29;
  v86 = v35;
  v87 = v81;
  v88 = v34;
  v89 = v28;
  if (_s8ShelfKit19PlayButtonPresenterC4DataV2eeoiySbAE_AEtFZ_0((uint64_t)&v91, (uint64_t)&v83))
  {
    swift_release(v80);
    v39 = v36;
    v40 = v72;
    v41 = v37;
  }
  else
  {
    v91 = v21;
    *(_QWORD *)&v92 = v71;
    *((_QWORD *)&v92 + 1) = v65;
    LOBYTE(v93) = v9;
    BYTE1(v93) = v29;
    v94 = v35;
    v95 = v38;
    v96 = v34;
    v97 = v28;
    v42 = v66;
    if (*(_QWORD *)(v66 + OBJC_IVAR____TtC8ShelfKit19PlayButtonPresenter_stateMachine))
    {
      v43 = v75;
      dispatch thunk of EpisodeStateMachine.currentState.getter(v75);
      v44 = (uint64_t)v43;
      v45 = (uint64_t)v64;
      sub_36624(v44, (uint64_t)v64);
    }
    else
    {
      v45 = (uint64_t)v64;
      swift_storeEnumTagMultiPayload(v64, v74, 5);
    }
    sub_6C1A0(&v91, v45, &v83);
    sub_145D8(v45, (uint64_t (*)(_QWORD))&type metadata accessor for EpisodePlayState);
    v82 = (unsigned __int16)v83;
    v81 = BYTE2(v83);
    v46 = HIDWORD(v83);
    v79 = v84;
    v78 = v85;
    v77 = v86;
    KeyPath = swift_getKeyPath(&unk_2EEB60);
    v48 = swift_getKeyPath(&unk_2EEB88);
    static Published.subscript.getter(&v91, v42, KeyPath, v48);
    swift_release(KeyPath);
    swift_release(v48);
    v49 = v91;
    v50 = BYTE2(v91);
    v51 = HIDWORD(v91);
    v52 = v92;
    v53 = v42;
    v55 = v93;
    v54 = v94;
    v56 = swift_getKeyPath(&unk_2EEB60);
    v57 = swift_getKeyPath(&unk_2EEB88);
    LOWORD(v91) = v82;
    BYTE2(v91) = v81;
    HIDWORD(v91) = v46;
    v92 = v79;
    v93 = v78;
    v94 = v77;
    swift_retain(v53);
    static Published.subscript.setter(&v91, v53, v56, v57);
    LOWORD(v91) = v49;
    BYTE2(v91) = v50;
    HIDWORD(v91) = v51;
    v92 = v52;
    v93 = v55;
    v94 = v54;
    sub_6CEDC((__int16 *)&v91);
    swift_release(v80);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v39 = v36;
    v40 = v72;
    v41 = v67;
  }
  sub_6FB94(v39, v40, v41);
  swift_bridgeObjectRelease();
  return 1;
}

uint64_t PlayButtonPresenter.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v1 = v0 + OBJC_IVAR____TtC8ShelfKit19PlayButtonPresenter__currentState;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3C78);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_6FC38(v0 + OBJC_IVAR____TtC8ShelfKit19PlayButtonPresenter_delegate);
  v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit19PlayButtonPresenter_data + 8);
  v4 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit19PlayButtonPresenter_data + 16);
  v5 = *(_BYTE *)(v0 + OBJC_IVAR____TtC8ShelfKit19PlayButtonPresenter_data + 24);
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit19PlayButtonPresenter_data));
  sub_6FB94(v3, v4, v5);
  swift_bridgeObjectRelease();
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit19PlayButtonPresenter_triggerAction));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit19PlayButtonPresenter_stateMachine));
  return v0;
}

uint64_t PlayButtonPresenter.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v1 = v0 + OBJC_IVAR____TtC8ShelfKit19PlayButtonPresenter__currentState;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3C78);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_6FC38(v0 + OBJC_IVAR____TtC8ShelfKit19PlayButtonPresenter_delegate);
  v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit19PlayButtonPresenter_data + 8);
  v4 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit19PlayButtonPresenter_data + 16);
  v5 = *(_BYTE *)(v0 + OBJC_IVAR____TtC8ShelfKit19PlayButtonPresenter_data + 24);
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit19PlayButtonPresenter_data));
  sub_6FB94(v3, v4, v5);
  swift_bridgeObjectRelease();
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit19PlayButtonPresenter_triggerAction));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit19PlayButtonPresenter_stateMachine));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t PlayButtonPresenter.Data.init(lockup:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  _BYTE v27[24];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3C88);
  __chkstk_darwin(v4);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup__playAction;
  swift_beginAccess(a1 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup__playAction, v27, 0, 0);
  sub_267BC(v7, (uint64_t)v6, &qword_3B3C88);
  Lazy.wrappedValue.getter(&v24, v4);
  sub_1459C((uint64_t)v6, &qword_3B3C88);
  v8 = v24;
  if ((_QWORD)v24)
  {
    v9 = *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_mediaType);
    v10 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_duration);
    v11 = *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_duration + 8);
    v23 = v24;
    v12 = type metadata accessor for Action(0);
    swift_retain_n(v8, 2);
    v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3C60);
    if ((swift_dynamicCast(&v24, &v23, v12, v13, 6) & 1) != 0)
    {
      v14 = *((_QWORD *)&v25 + 1);
      v15 = v26;
      __swift_project_boxed_opaque_existential_1(&v24, *((uint64_t *)&v25 + 1));
      v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 24))(v14, v15);
      v18 = v17;
      LOBYTE(v15) = v19;
      swift_release(v8);
      __swift_destroy_boxed_opaque_existential_1(&v24);
      result = swift_release(a1);
      v21 = v15;
    }
    else
    {
      v26 = 0;
      v24 = 0u;
      v25 = 0u;
      swift_release(v8);
      sub_1459C((uint64_t)&v24, &qword_3B3C68);
      result = swift_release(a1);
      v16 = 0;
      v18 = 0;
      v21 = 255;
    }
    *a2 = v8;
    a2[1] = v16;
    a2[2] = v18;
    a2[3] = v21 | (v9 << 8);
    a2[4] = v10;
    a2[5] = v11;
    a2[6] = 0;
    a2[7] = 0;
  }
  else
  {
    result = swift_release(a1);
    *((_OWORD *)a2 + 2) = 0u;
    *((_OWORD *)a2 + 3) = 0u;
    *(_OWORD *)a2 = 0u;
    *((_OWORD *)a2 + 1) = 0u;
  }
  return result;
}

uint64_t PlayButtonPresenter.Data.init(episodeHeader:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t result;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  v5 = *(_BYTE *)(a1 + 89);
  v6 = *(_QWORD *)(a1 + 120);
  v7 = *(_BYTE *)(a1 + 128);
  v18 = *(_QWORD *)(a1 + 176);
  v4 = v18;
  v8 = type metadata accessor for Action(0);
  swift_retain_n(v18, 3);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3C60);
  if (swift_dynamicCast(&v19, &v18, v8, v9, 6))
  {
    v10 = *((_QWORD *)&v20 + 1);
    v11 = v21;
    __swift_project_boxed_opaque_existential_1(&v19, *((uint64_t *)&v20 + 1));
    v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 24))(v10, v11);
    v14 = v13;
    v16 = v15;
    swift_release(v4);
    __swift_destroy_boxed_opaque_existential_1(&v19);
    result = swift_release(a1);
  }
  else
  {
    v21 = 0;
    v19 = 0u;
    v20 = 0u;
    swift_release(v4);
    sub_1459C((uint64_t)&v19, &qword_3B3C68);
    result = swift_release(a1);
    v12 = 0;
    v14 = 0;
    v16 = -1;
  }
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = v12;
  *(_QWORD *)(a2 + 16) = v14;
  *(_BYTE *)(a2 + 24) = v16;
  *(_BYTE *)(a2 + 25) = v5;
  *(_QWORD *)(a2 + 32) = v6;
  *(_BYTE *)(a2 + 40) = v7;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

uint64_t PlayButtonPresenter.Data.init(from:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t (*v10)(_QWORD);
  int v11;
  char *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v26 = a3;
  v7 = type metadata accessor for EpisodeOffer(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_14510(a1 + OBJC_IVAR____TtC8ShelfKit10PlayAction_episodeOffer, (uint64_t)v9, v10);
  v11 = v9[*(int *)(v7 + 52)];
  v12 = &v9[*(int *)(v7 + 60)];
  v13 = *(_QWORD *)v12;
  v14 = v12[8];
  v27 = a1;
  v15 = type metadata accessor for Action(0);
  swift_retain_n(a1, 2);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3C60);
  if (swift_dynamicCast(&v28, &v27, v15, v16, 6))
  {
    v17 = *((_QWORD *)&v29 + 1);
    v18 = v30;
    __swift_project_boxed_opaque_existential_1(&v28, *((uint64_t *)&v29 + 1));
    v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 24))(v17, v18);
    v21 = v20;
    v23 = v22;
    swift_release(a1);
    __swift_destroy_boxed_opaque_existential_1(&v28);
  }
  else
  {
    v30 = 0;
    v28 = 0u;
    v29 = 0u;
    swift_release(a1);
    sub_1459C((uint64_t)&v28, &qword_3B3C68);
    v19 = 0;
    v21 = 0;
    v23 = -1;
  }
  if (v11 == 3)
    LOBYTE(v11) = 0;
  result = sub_145D8((uint64_t)v9, type metadata accessor for EpisodeOffer);
  *(_QWORD *)a4 = a1;
  *(_QWORD *)(a4 + 8) = v19;
  *(_QWORD *)(a4 + 16) = v21;
  *(_BYTE *)(a4 + 24) = v23;
  *(_BYTE *)(a4 + 25) = v11;
  *(_QWORD *)(a4 + 32) = v13;
  *(_BYTE *)(a4 + 40) = v14;
  v25 = v26;
  *(_QWORD *)(a4 + 48) = a2;
  *(_QWORD *)(a4 + 56) = v25;
  return result;
}

void static PlayButtonPresenter.State.unknown.getter(uint64_t a1@<X8>)
{
  void *v2;
  id v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  id v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;

  v2 = (void *)objc_opt_self(NSBundle);
  v3 = objc_msgSend(v2, "mainBundle");
  v11._object = (void *)0xE000000000000000;
  v4._countAndFlagsBits = 0xD000000000000010;
  v4._object = (void *)0x800000000030BFB0;
  v5._countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  v11._countAndFlagsBits = 0;
  v6 = NSLocalizedString(_:tableName:bundle:value:comment:)(v4, (Swift::String_optional)0, (NSBundle)v3, v5, v11);

  v7 = objc_msgSend(v2, "mainBundle");
  v12._object = (void *)0xE000000000000000;
  v8._countAndFlagsBits = 0xD000000000000010;
  v8._object = (void *)0x800000000030BFB0;
  v9._countAndFlagsBits = 0;
  v9._object = (void *)0xE000000000000000;
  v12._countAndFlagsBits = 0;
  v10 = NSLocalizedString(_:tableName:bundle:value:comment:)(v8, (Swift::String_optional)0, (NSBundle)v7, v9, v12);

  *(_WORD *)a1 = 0;
  *(_BYTE *)(a1 + 2) = 0;
  *(_DWORD *)(a1 + 4) = 0;
  *(Swift::String *)(a1 + 8) = v6;
  *(Swift::String *)(a1 + 24) = v10;
}

BOOL _s8ShelfKit19PlayButtonPresenterC4DataV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  double v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  _BOOL8 result;
  char v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  char v36;

  v2 = *(unsigned __int8 *)(a1 + 24);
  v3 = *(unsigned __int8 *)(a1 + 25);
  v4 = *(double *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(unsigned __int8 *)(a2 + 24);
  v8 = *(unsigned __int8 *)(a2 + 25);
  v9 = *(double *)(a2 + 32);
  v10 = *(unsigned __int8 *)(a2 + 40);
  v12 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a2 + 56);
  if (v2 == 255)
  {
    v36 = *(_BYTE *)(a1 + 40);
    if (v7 != 255)
      return 0;
  }
  else
  {
    if (v7 == 255)
      return 0;
    v36 = *(_BYTE *)(a1 + 40);
    v34 = *(_QWORD *)(a2 + 48);
    v35 = *(_QWORD *)(a1 + 56);
    v32 = *(unsigned __int8 *)(a2 + 25);
    v33 = *(unsigned __int8 *)(a2 + 40);
    v13 = *(_QWORD *)(a1 + 8);
    v14 = *(_QWORD *)(a1 + 16);
    v15 = *(_QWORD *)(a1 + 48);
    v16 = *(_QWORD *)(a2 + 8);
    v17 = *(_QWORD *)(a2 + 16);
    v31 = *(unsigned __int8 *)(a1 + 25);
    sub_6BCB8(v16, v17, v7);
    sub_6BCB8(v13, v14, v2);
    v18 = static EpisodeStateIdentifier.== infix(_:_:)(v13, v14, v2 & 1, v16, v17, v7 & 1);
    v19 = v16;
    v5 = v15;
    v8 = v32;
    v20 = v17;
    v6 = v35;
    sub_6FB94(v19, v20, v7);
    v21 = v13;
    v12 = v34;
    v22 = v14;
    v10 = v33;
    sub_6FB94(v21, v22, v2);
    v3 = v31;
    if ((v18 & 1) == 0)
      return 0;
  }
  v23 = EpisodeMediaType.rawValue.getter(v3);
  v25 = v24;
  v27 = EpisodeMediaType.rawValue.getter(v8);
  if (v23 == v27 && v25 == v26)
  {
    swift_bridgeObjectRelease_n(v25, 2);
  }
  else
  {
    v28 = _stringCompareWithSmolCheck(_:_:expecting:)(v23, v25, v27, v26, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = 0;
    if ((v28 & 1) == 0)
      return result;
  }
  if ((v36 & 1) != 0)
  {
    if (!v10)
      return 0;
  }
  else
  {
    if (v4 == v9)
      v30 = v10;
    else
      v30 = 1;
    if ((v30 & 1) != 0)
      return 0;
  }
  if (v6)
    return v11
        && (v5 == v12 && v6 == v11 || (_stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v12, v11, 0) & 1) != 0);
  return !v11;
}

uint64_t _s8ShelfKit19PlayButtonPresenterC5StateV2eeoiySbAE_AEtFZ_0(float *a1, float *a2)
{
  int v4;
  __int16 v5;
  int v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  int v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  int v22;
  BOOL v23;
  BOOL v24;
  uint64_t result;
  char v27;

  v4 = *(__int16 *)a1;
  v5 = *(_WORD *)a1;
  v6 = *((unsigned __int8 *)a1 + 2);
  v7 = a1[1];
  v8 = *((_QWORD *)a1 + 1);
  v9 = *((_QWORD *)a1 + 2);
  v10 = *((_QWORD *)a1 + 3);
  v11 = *((_QWORD *)a1 + 4);
  v12 = *(_WORD *)a2;
  v13 = *((unsigned __int8 *)a2 + 2);
  v14 = a2[1];
  v15 = *((_QWORD *)a2 + 1);
  v16 = *((_QWORD *)a2 + 2);
  v17 = *((_QWORD *)a2 + 3);
  v18 = *((_QWORD *)a2 + 4);
  if (v4 < 0)
  {
    if ((*(_WORD *)a2 & 0x8000) == 0)
      return 0;
    v22 = v6 ^ v13;
    v23 = ((v5 & 1) == 0) == (v12 & 1) || ((v5 & 0x100) == 0) == (unsigned __int16)(v12 & 0x100) >> 8;
    v24 = !v23 && v22 == 0;
    if (!v24 || v7 != v14)
      return 0;
  }
  else
  {
    if ((*(_WORD *)a2 & 0x8000) != 0)
      return 0;
    v19 = v6 ^ v13;
    v20 = v12 == v5 && v19 == 0;
    if (!v20 || v7 != v14)
      return 0;
  }
  if (v8 == v15 && v9 == v16
    || (v27 = _stringCompareWithSmolCheck(_:_:expecting:)(v8, v9, v15, v16, 0), result = 0, (v27 & 1) != 0))
  {
    if (v10 == v17 && v11 == v18)
      return 1;
    else
      return _stringCompareWithSmolCheck(_:_:expecting:)(v10, v11, v17, v18, 0);
  }
  return result;
}

uint64_t sub_6ED88(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v52 = a1;
  v1 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0);
  v50 = *(_QWORD *)(v1 - 8);
  v51 = v1;
  __chkstk_darwin(v1);
  v49 = (char *)&v39 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = type metadata accessor for Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy(0);
  v46 = *(_QWORD *)(v48 - 8);
  __chkstk_darwin(v48);
  v44 = (char *)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = type metadata accessor for Duration.UnitsFormatStyle.UnitWidth(0);
  v41 = *(_QWORD *)(v43 - 8);
  __chkstk_darwin(v43);
  v40 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = type metadata accessor for Duration.UnitsFormatStyle(0);
  v45 = *(_QWORD *)(v47 - 8);
  __chkstk_darwin(v47);
  v42 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Duration.TimeFormatStyle.Pattern(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Duration.TimeFormatStyle(0);
  v39 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3D80);
  __chkstk_darwin(v13);
  v15 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for PlayButtonTimeFormatHelper(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v39 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_267BC(v52, (uint64_t)v15, &qword_3B3D80);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {
    sub_1459C((uint64_t)v15, &qword_3B3D80);
    return 0;
  }
  else
  {
    v21 = (*(uint64_t (**)(char *, char *, uint64_t))(v17 + 32))(v19, v15, v16);
    v22 = PlayButtonTimeFormatHelper.timeLeft.getter(v21);
    v23 = static Duration.seconds(_:)(v22);
    v25 = v24;
    v26 = PlayButtonTimeFormatHelper.formatStyle.getter();
    if ((static PlayButtonTimeFormatHelper.FormatStyle.== infix(_:_:)(v26, 0) & 1) != 0)
    {
      static Duration.TimeFormatStyle.Pattern.minuteSecond.getter();
      static FormatStyle<>.time(pattern:)(v9);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      v27 = sub_F1C0(&qword_3B3D98, (void (*)(uint64_t))&type metadata accessor for Duration.TimeFormatStyle, (uint64_t)&protocol conformance descriptor for Duration.TimeFormatStyle);
      Duration.formatted<A>(_:)(&v53, v12, v23, v25, v10, v27);
      (*(void (**)(char *, uint64_t))(v39 + 8))(v12, v10);
    }
    else
    {
      v28 = PlayButtonTimeFormatHelper.formatStyle.getter();
      v29 = PlayButtonTimeFormatHelper.FormatStyle.formatStyleUnits.getter(v28);
      v30 = v23;
      v31 = v40;
      v32 = static Duration.UnitsFormatStyle.UnitWidth.narrow.getter();
      v33 = v44;
      v34 = static Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.hide.getter(v32);
      v35 = v49;
      static Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.hide.getter(v34);
      v36 = v42;
      static FormatStyle<>.units(allowed:width:maximumUnitCount:zeroValueUnits:valueLength:fractionalPart:)(v29, v31, 0, 1, v33, 0, 1, v35);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v50 + 8))(v35, v51);
      (*(void (**)(char *, uint64_t))(v46 + 8))(v33, v48);
      (*(void (**)(char *, uint64_t))(v41 + 8))(v31, v43);
      v37 = sub_F1C0(&qword_3B3D90, (void (*)(uint64_t))&type metadata accessor for Duration.UnitsFormatStyle, (uint64_t)&protocol conformance descriptor for Duration.UnitsFormatStyle);
      v38 = v47;
      Duration.formatted<A>(_:)(&v53, v36, v30, v25, v47, v37);
      (*(void (**)(char *, uint64_t))(v45 + 8))(v36, v38);
    }
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
    return v53;
  }
}

void sub_6F19C(char a1, char a2, long double a3)
{
  double v4;
  double v7;
  double v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  unint64_t v14;
  const char *v15;
  unint64_t v16;
  Swift::String v17;
  uint64_t v18;
  Swift::String v19;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  const char *v25;
  unint64_t v26;
  Swift::String v27;
  uint64_t v28;
  Swift::String v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  Swift::String v33;
  uint64_t v34;
  Swift::String v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  Swift::String v39;
  uint64_t v40;
  Swift::String v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;

  v4 = a3 / 3600.0;
  if (a3 / 3600.0 <= -9.22337204e18)
  {
    __break(1u);
    goto LABEL_33;
  }
  if (v4 >= 9.22337204e18)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  v7 = fmod(a3 / 60.0, 60.0);
  if (v7 <= -9.22337204e18)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v7 >= 9.22337204e18)
  {
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v8 = fmod(a3, 60.0);
  if ((~*(_QWORD *)&v8 & 0x7FF0000000000000) == 0)
    goto LABEL_36;
  if ((*(_QWORD *)&v4 & 0x7FF0000000000000) == 0x7FF0000000000000
    || (*(_QWORD *)&v7 & 0x7FF0000000000000) == 0x7FF0000000000000)
  {
    goto LABEL_36;
  }
  if (v8 <= -9.22337204e18)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  if (v8 < 9.22337204e18)
  {
    v10 = (uint64_t)v4;
    v11 = (uint64_t)v7;
    v12 = (uint64_t)v8;
    v13 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    if ((a2 & 1) != 0)
    {
      if ((a1 & 1) != 0)
      {
        if (v11 > 0)
        {
          v14 = 0xD000000000000035;
          v43 = 0xE000000000000000;
          v15 = "AX_PLAY_BUTTON_PLAYING_REMAINING_TIME_MINUTES_SECONDS";
LABEL_19:
          v16 = (unint64_t)(v15 - 32) | 0x8000000000000000;
          v17._countAndFlagsBits = 0;
          v17._object = (void *)0xE000000000000000;
          v18 = 0;
          v19 = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v14, (Swift::String_optional)0, (NSBundle)v13, v17, *(Swift::String *)(&v43 - 1));
          countAndFlagsBits = v19._countAndFlagsBits;
          object = v19._object;

          v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8E10);
          v23 = swift_allocObject(v22, 112, 7);
          *(_OWORD *)(v23 + 16) = xmmword_2EA080;
          *(_QWORD *)(v23 + 56) = &type metadata for Int;
          *(_QWORD *)(v23 + 64) = &protocol witness table for Int;
          *(_QWORD *)(v23 + 32) = v11;
          *(_QWORD *)(v23 + 96) = &type metadata for Int;
          *(_QWORD *)(v23 + 104) = &protocol witness table for Int;
          *(_QWORD *)(v23 + 72) = v12;
LABEL_31:
          String.init(format:_:)(countAndFlagsBits, object, v23);
          swift_bridgeObjectRelease();
          return;
        }
        v31 = 0xD00000000000002DLL;
        v45 = 0xE000000000000000;
        v32 = 0x800000000030C270;
        goto LABEL_27;
      }
      if (v10 > 0)
      {
        v24 = 0xD000000000000033;
        v44 = 0xE000000000000000;
        v25 = "AX_PLAY_BUTTON_PLAYING_REMAINING_TIME_HOURS_MINUTES";
LABEL_24:
        v26 = (unint64_t)(v25 - 32) | 0x8000000000000000;
        v27._countAndFlagsBits = 0;
        v27._object = (void *)0xE000000000000000;
        v28 = 0;
        v29 = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v24, (Swift::String_optional)0, (NSBundle)v13, v27, *(Swift::String *)(&v44 - 1));
        countAndFlagsBits = v29._countAndFlagsBits;
        object = v29._object;

        v30 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8E10);
        v23 = swift_allocObject(v30, 112, 7);
        *(_OWORD *)(v23 + 16) = xmmword_2EA080;
        *(_QWORD *)(v23 + 56) = &type metadata for Int;
        *(_QWORD *)(v23 + 64) = &protocol witness table for Int;
        *(_QWORD *)(v23 + 32) = v10;
        *(_QWORD *)(v23 + 96) = &type metadata for Int;
        *(_QWORD *)(v23 + 104) = &protocol witness table for Int;
        *(_QWORD *)(v23 + 72) = v11;
        goto LABEL_31;
      }
      v37 = 0xD00000000000002DLL;
      v46 = 0xE000000000000000;
      v38 = 0x800000000030C200;
    }
    else
    {
      if ((a1 & 1) != 0)
      {
        if (v11 > 0)
        {
          v14 = 0xD000000000000032;
          v43 = 0xE000000000000000;
          v15 = "AX_PLAY_BUTTON_PLAY_REMAINING_TIME_MINUTES_SECONDS";
          goto LABEL_19;
        }
        v45 = 0xE000000000000000;
        v32 = 0x800000000030C190;
        v31 = 0xD00000000000002ALL;
LABEL_27:
        v33._countAndFlagsBits = 0;
        v33._object = (void *)0xE000000000000000;
        v34 = 0;
        v35 = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v31, (Swift::String_optional)0, (NSBundle)v13, v33, *(Swift::String *)(&v45 - 1));
        countAndFlagsBits = v35._countAndFlagsBits;
        object = v35._object;

        v36 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8E10);
        v23 = swift_allocObject(v36, 72, 7);
        *(_OWORD *)(v23 + 16) = xmmword_2EA0D0;
        *(_QWORD *)(v23 + 56) = &type metadata for Int;
        *(_QWORD *)(v23 + 64) = &protocol witness table for Int;
        *(_QWORD *)(v23 + 32) = v12;
        goto LABEL_31;
      }
      if (v10 > 0)
      {
        v24 = 0xD000000000000030;
        v44 = 0xE000000000000000;
        v25 = "AX_PLAY_BUTTON_PLAY_REMAINING_TIME_HOURS_MINUTES";
        goto LABEL_24;
      }
      v46 = 0xE000000000000000;
      v38 = 0x800000000030C120;
      v37 = 0xD00000000000002ALL;
    }
    v39._countAndFlagsBits = 0;
    v39._object = (void *)0xE000000000000000;
    v40 = 0;
    v41 = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v37, (Swift::String_optional)0, (NSBundle)v13, v39, *(Swift::String *)(&v46 - 1));
    countAndFlagsBits = v41._countAndFlagsBits;
    object = v41._object;

    v42 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8E10);
    v23 = swift_allocObject(v42, 72, 7);
    *(_OWORD *)(v23 + 16) = xmmword_2EA0D0;
    *(_QWORD *)(v23 + 56) = &type metadata for Int;
    *(_QWORD *)(v23 + 64) = &protocol witness table for Int;
    *(_QWORD *)(v23 + 32) = v11;
    goto LABEL_31;
  }
LABEL_38:
  __break(1u);
}

uint64_t sub_6F604(__int16 a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(char *, uint64_t, uint64_t);
  char v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  unint64_t v25;
  unint64_t v26;
  id v27;
  Swift::String v28;
  Swift::String v29;
  uint64_t countAndFlagsBits;
  char v31;
  long double v32;
  char v33;
  uint64_t v34;
  Swift::String v35;
  uint64_t v36;
  Swift::String v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v41;
  _QWORD v42[2];
  Swift::String v43;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3D80);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)v42 - v8;
  sub_267BC(a2, (uint64_t)v42 - v8, &qword_3B3D80);
  v10 = type metadata accessor for PlayButtonTimeFormatHelper(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  if (v12(v9, 1, v10) == 1)
  {
    sub_1459C((uint64_t)v9, &qword_3B3D80);
    v13 = 0;
  }
  else
  {
    v14 = PlayButtonTimeFormatHelper.formatStyle.getter();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v10);
    v13 = static PlayButtonTimeFormatHelper.FormatStyle.== infix(_:_:)(v14, 0);
  }
  sub_267BC(a2, (uint64_t)v7, &qword_3B3D80);
  v15 = ((uint64_t (*)(char *, uint64_t, uint64_t))v12)(v7, 1, v10);
  if ((_DWORD)v15 == 1)
  {
    sub_1459C((uint64_t)v7, &qword_3B3D80);
LABEL_11:
    v27 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v43._object = (void *)0xE000000000000000;
    v28._object = (void *)0x800000000030C080;
    v28._countAndFlagsBits = 0xD000000000000013;
    v29._countAndFlagsBits = 0;
    v29._object = (void *)0xE000000000000000;
    v43._countAndFlagsBits = 0;
    countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v28, (Swift::String_optional)0, (NSBundle)v27, v29, v43)._countAndFlagsBits;

    return countAndFlagsBits;
  }
  v16 = PlayButtonTimeFormatHelper.timeLeft.getter(v15);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v7, v10);
  v17 = (id)AXDurationStringForDurationWithSeconds(v13 & 1, v16);
  if (!v17)
    goto LABEL_11;
  v18 = v17;
  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
  v21 = v20;

  if (a1 < 0)
  {
    swift_bridgeObjectRelease();
    v31 = v13 & 1;
    v32 = v16;
    v33 = 1;
LABEL_14:
    sub_6F19C(v31, v33, v32);
    return v34;
  }
  if (!(_BYTE)a1)
  {
    swift_bridgeObjectRelease();
    v31 = v13 & 1;
    v32 = v16;
    v33 = 0;
    goto LABEL_14;
  }
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8730);
  if (a1 == 1)
  {
    v23 = swift_allocObject(v22, 64, 7);
    *(_OWORD *)(v23 + 16) = xmmword_2EA080;
    v24 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v41 = 0xE000000000000000;
    v25 = 0x800000000030C0C0;
    v26 = 0xD000000000000013;
  }
  else
  {
    v23 = swift_allocObject(v22, 64, 7);
    *(_OWORD *)(v23 + 16) = xmmword_2EA080;
    v24 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v26 = 0xD000000000000015;
    v41 = 0xE000000000000000;
    v25 = 0x800000000030C0A0;
  }
  v35._countAndFlagsBits = 0;
  v35._object = (void *)0xE000000000000000;
  v36 = 0;
  v37 = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v26, (Swift::String_optional)0, (NSBundle)v24, v35, *(Swift::String *)(&v41 - 1));

  *(Swift::String *)(v23 + 32) = v37;
  *(_QWORD *)(v23 + 48) = v19;
  *(_QWORD *)(v23 + 56) = v21;
  v42[1] = v23;
  v38 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3BC430);
  v39 = sub_707E4();
  countAndFlagsBits = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v38, v39);
  swift_bridgeObjectRelease();
  return countAndFlagsBits;
}

uint64_t sub_6F9C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t ObjectType;
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  char v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[2];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[24];

  v5 = v2 + OBJC_IVAR____TtC8ShelfKit19PlayButtonPresenter_delegate;
  swift_beginAccess(v2 + OBJC_IVAR____TtC8ShelfKit19PlayButtonPresenter_delegate, v26, 1, 0);
  *(_QWORD *)(v5 + 8) = a2;
  v6 = swift_unknownObjectWeakAssign(v5, a1);
  result = swift_unknownObjectWeakLoadStrong(v6);
  if (result)
  {
    v8 = result;
    v9 = *(_QWORD *)(v5 + 8);
    ObjectType = swift_getObjectType(result);
    KeyPath = swift_getKeyPath(&unk_2EEB60);
    v12 = swift_getKeyPath(&unk_2EEB88);
    static Published.subscript.getter(v22, v2, KeyPath, v12);
    swift_release(KeyPath);
    swift_release(v12);
    v13 = v23;
    v14 = v25;
    v15 = v22[0];
    v16 = BYTE2(v22[0]);
    v17 = HIDWORD(v22[0]);
    v18 = v22[1];
    v19 = v23;
    v20 = v24;
    v21 = v25;
    (*(void (**)(__int16 *, uint64_t, uint64_t))(v9 + 8))(&v15, ObjectType, v9);
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease(v13);
    return swift_unknownObjectRelease(v8);
  }
  return result;
}

uint64_t sub_6FADC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_BYTE *)(a1 + 24);
  swift_retain(*(_QWORD *)a1);
  sub_6BCB8(v2, v3, v5);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t sub_6FB38(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_BYTE *)(a1 + 24);
  swift_release(*(_QWORD *)a1);
  sub_6FB94(v2, v3, v4);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_6FB94(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255)
    return sub_6FBAC(result, a2, a3 & 1);
  return result;
}

uint64_t sub_6FBAC(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease(a2);
  return result;
}

uint64_t sub_6FBBC()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_6FBE0()
{
  uint64_t v0;
  int v1;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  v1 = *(unsigned __int8 *)(v0 + 48);
  if (v1 != 255)
    sub_6FBAC(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), v1 & 1);
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, 88, 7);
}

uint64_t sub_6FC2C(uint64_t a1)
{
  uint64_t v1;

  return sub_6D9C8(a1, *(_QWORD *)(v1 + 16), (uint64_t *)(v1 + 24));
}

uint64_t sub_6FC38(uint64_t a1)
{
  swift_unknownObjectWeakDestroy(a1);
  return a1;
}

unint64_t sub_6FC60()
{
  unint64_t result;

  result = qword_3B3C90;
  if (!qword_3B3C90)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for PlayButtonPresenter.Theme);
    atomic_store(result, (unint64_t *)&qword_3B3C90);
  }
  return result;
}

unint64_t sub_6FCA8()
{
  unint64_t result;

  result = qword_3B3C98;
  if (!qword_3B3C98)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for PlayButtonPresenter.State.Symbol);
    atomic_store(result, (unint64_t *)&qword_3B3C98);
  }
  return result;
}

uint64_t sub_6FCF4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char v6[24];

  v3 = *a1 + OBJC_IVAR____TtC8ShelfKit19PlayButtonPresenter_delegate;
  swift_beginAccess(v3, v6, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v3);
  v5 = *(_QWORD *)(v3 + 8);
  *a2 = result;
  a2[1] = v5;
  return result;
}

uint64_t sub_6FD50()
{
  return type metadata accessor for PlayButtonPresenter(0);
}

uint64_t type metadata accessor for PlayButtonPresenter(uint64_t a1)
{
  uint64_t result;

  result = qword_3B3CC8;
  if (!qword_3B3CC8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PlayButtonPresenter);
  return result;
}

void sub_6FD94(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[5];

  sub_6FE40();
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = &unk_2EEDA8;
    v4[2] = &unk_2EEDC0;
    v4[3] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[4] = &unk_2EEDD8;
    swift_updateClassMetadata2(a1, 256, 5, v4, a1 + 80);
  }
}

uint64_t method lookup function for PlayButtonPresenter(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for PlayButtonPresenter);
}

uint64_t dispatch thunk of PlayButtonPresenter.__allocating_init(data:asPartOf:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

void sub_6FE40()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_3B3CD8)
  {
    v0 = type metadata accessor for Published(0, &type metadata for PlayButtonPresenter.State);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_3B3CD8);
  }
}

uint64_t storeEnumTagSinglePayload for PlayButtonPresenter.Theme(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_6FEE0 + 4 * byte_2EEB45[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_6FF14 + 4 * byte_2EEB40[v4]))();
}

uint64_t sub_6FF14(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_6FF1C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x6FF24);
  return result;
}

uint64_t sub_6FF30(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x6FF38);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_6FF3C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_6FF44(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PlayButtonPresenter.Theme()
{
  return &type metadata for PlayButtonPresenter.Theme;
}

uint64_t destroy for PlayButtonPresenter.Data(uint64_t a1)
{
  int v2;

  swift_release(*(_QWORD *)a1);
  v2 = *(unsigned __int8 *)(a1 + 24);
  if (v2 != 255)
    sub_6FBAC(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), v2 & 1);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PlayButtonPresenter.Data(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  v5 = *((unsigned __int8 *)a2 + 24);
  swift_retain(v4);
  if (v5 == 255)
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
    *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
  }
  else
  {
    v6 = v5 & 1;
    v7 = a2[1];
    v8 = a2[2];
    sub_6BCD0(v7, v8, v6);
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v8;
    *(_BYTE *)(a1 + 24) = v6;
  }
  *(_BYTE *)(a1 + 25) = *((_BYTE *)a2 + 25);
  *(_QWORD *)(a1 + 32) = a2[4];
  *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
  v9 = a2[7];
  *(_QWORD *)(a1 + 48) = a2[6];
  *(_QWORD *)(a1 + 56) = v9;
  swift_bridgeObjectRetain(v9);
  return a1;
}

uint64_t *assignWithCopy for PlayButtonPresenter.Data(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  __int128 *v7;
  int v8;
  char v9;
  __int128 v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  v6 = (__int128 *)(a1 + 1);
  v7 = (__int128 *)(a2 + 1);
  v8 = *((unsigned __int8 *)a2 + 24);
  if (*((unsigned __int8 *)a1 + 24) == 255)
  {
    if (v8 == 255)
    {
      v10 = *v7;
      *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
      *v6 = v10;
    }
    else
    {
      v17 = v8 & 1;
      v18 = a2[1];
      v19 = a2[2];
      sub_6BCD0(v18, v19, v8 & 1);
      a1[1] = v18;
      a1[2] = v19;
      *((_BYTE *)a1 + 24) = v17;
    }
  }
  else if (v8 == 255)
  {
    sub_70178((uint64_t)(a1 + 1));
    v9 = *((_BYTE *)a2 + 24);
    *v6 = *v7;
    *((_BYTE *)a1 + 24) = v9;
  }
  else
  {
    v11 = v8 & 1;
    v12 = a2[1];
    v13 = a2[2];
    sub_6BCD0(v12, v13, v8 & 1);
    v14 = a1[1];
    v15 = a1[2];
    v16 = *((_BYTE *)a1 + 24);
    a1[1] = v12;
    a1[2] = v13;
    *((_BYTE *)a1 + 24) = v11;
    sub_6FBAC(v14, v15, v16);
  }
  *((_BYTE *)a1 + 25) = *((_BYTE *)a2 + 25);
  v20 = a2[4];
  *((_BYTE *)a1 + 40) = *((_BYTE *)a2 + 40);
  a1[4] = v20;
  a1[6] = a2[6];
  v21 = a2[7];
  a1[7] = v21;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_70178(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for EpisodeStateIdentifier - 1) + 8))();
  return a1;
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t *assignWithTake for PlayButtonPresenter.Data(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _OWORD *v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  v5 = a2 + 1;
  v6 = *((unsigned __int8 *)a1 + 24);
  if (v6 != 255)
  {
    v7 = *((unsigned __int8 *)a2 + 24);
    if (v7 != 255)
    {
      v8 = a1[1];
      v9 = a1[2];
      *(_OWORD *)(a1 + 1) = *v5;
      *((_BYTE *)a1 + 24) = v7 & 1;
      sub_6FBAC(v8, v9, v6 & 1);
      goto LABEL_6;
    }
    sub_70178((uint64_t)(a1 + 1));
  }
  *(_OWORD *)(a1 + 1) = *v5;
  *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
LABEL_6:
  *((_BYTE *)a1 + 25) = *((_BYTE *)a2 + 25);
  a1[4] = a2[4];
  *((_BYTE *)a1 + 40) = *((_BYTE *)a2 + 40);
  v10 = a2[7];
  a1[6] = a2[6];
  a1[7] = v10;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PlayButtonPresenter.Data(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PlayButtonPresenter.Data(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PlayButtonPresenter.Data()
{
  return &type metadata for PlayButtonPresenter.Data;
}

uint64_t destroy for PlayButtonPresenter.State(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 32));
}

uint64_t initializeWithCopy for PlayButtonPresenter.State(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t assignWithCopy for PlayButtonPresenter.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for PlayButtonPresenter.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for PlayButtonPresenter.State(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PlayButtonPresenter.State(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PlayButtonPresenter.State()
{
  return &type metadata for PlayButtonPresenter.State;
}

uint64_t storeEnumTagSinglePayload for PlayButtonPresenter.State.Symbol(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_70580 + 4 * byte_2EEB4F[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_705B4 + 4 * byte_2EEB4A[v4]))();
}

uint64_t sub_705B4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_705BC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x705C4);
  return result;
}

uint64_t sub_705D0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x705D8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_705DC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_705E4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PlayButtonPresenter.State.Symbol()
{
  return &type metadata for PlayButtonPresenter.State.Symbol;
}

uint64_t getEnumTagSinglePayload for PlayButtonPresenter.State.Icon(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;

  if (!a2)
    return 0;
  if (a2 < 0x1FFF)
    goto LABEL_17;
  if (a2 + 57345 <= 0xFFFEFFFF)
    v2 = 2;
  else
    v2 = 4;
  if (a2 + 57345 < 0xFF0000)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 16)) - 57345;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
      return (*a1 | (v4 << 16)) - 57345;
    }
    v4 = *((unsigned __int8 *)a1 + 2);
    if (*((_BYTE *)a1 + 2))
      return (*a1 | (v4 << 16)) - 57345;
  }
LABEL_17:
  v6 = ((*a1 >> 15) | (2 * ((*a1 >> 3) & 0xFC0 | (*a1 >> 2)))) ^ 0x1FFF;
  if (v6 >> 1 >= 0xFFF)
    v6 = -1;
  return v6 + 1;
}

uint64_t storeEnumTagSinglePayload for PlayButtonPresenter.State.Icon(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  uint64_t v5;

  if (a3 + 57345 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 57345 < 0xFF0000)
    v4 = 1;
  else
    v4 = v3;
  if (a3 >= 0x1FFF)
    v5 = v4;
  else
    v5 = 0;
  if (a2 <= 0x1FFE)
    return ((uint64_t (*)(void))((char *)&loc_70708 + 4 * byte_2EEB59[v5]))();
  *a1 = a2 - 0x1FFF;
  return ((uint64_t (*)(void))((char *)sub_70740 + 4 * byte_2EEB54[v5]))();
}

uint64_t sub_70740(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_70748(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x70750);
  return result;
}

uint64_t sub_70770(uint64_t result, int a2)
{
  unsigned int v2;

  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x70778);
  v2 = ((-a2 >> 1) & 0xFFF) - (a2 << 12);
  *(_WORD *)result = (8 * v2) & 0xFE00 | (4 * (v2 & 0x3F));
  return result;
}

uint64_t sub_7077C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_70784(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_70790(unsigned __int16 *a1)
{
  return *a1 >> 15;
}

_WORD *sub_7079C(_WORD *result)
{
  *result &= ~0x8000u;
  return result;
}

_WORD *sub_707AC(_WORD *result, __int16 a2)
{
  *result = *result & 0x103 | (a2 << 15);
  return result;
}

ValueMetadata *type metadata accessor for PlayButtonPresenter.State.Icon()
{
  return &type metadata for PlayButtonPresenter.State.Icon;
}

ValueMetadata *type metadata accessor for PlayButtonPresenter.Data.ActionWrapper()
{
  return &type metadata for PlayButtonPresenter.Data.ActionWrapper;
}

unint64_t sub_707E4()
{
  unint64_t result;

  result = qword_3B3030;
  if (!qword_3B3030)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_3BC430);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A]);
    atomic_store(result, (unint64_t *)&qword_3B3030);
  }
  return result;
}

uint64_t dispatch thunk of HighlightsProviderProtocol.pageHighlightShelfPublisherForURL(pageURL:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t sub_70838@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for BaseObjectGraph(0);
  result = BaseObjectGraph.__allocating_init(name:_:)(0x7974706D45, 0xE500000000000000, &_swiftEmptyArrayStorage);
  *a1 = result;
  return result;
}

unint64_t sub_70888()
{
  unint64_t result;

  result = qword_3B3DA0;
  if (!qword_3B3DA0)
  {
    result = swift_getWitnessTable(&unk_2EEEAC);
    atomic_store(result, (unint64_t *)&qword_3B3DA0);
  }
  return result;
}

uint64_t sub_708CC(uint64_t *a1)
{
  unint64_t v1;
  uint64_t v3;

  v3 = *a1;
  v1 = sub_70888();
  swift_retain(v3);
  return EnvironmentValues.subscript.setter(&v3, &type metadata for ObjectGraphEnvironmentKey, &type metadata for ObjectGraphEnvironmentKey, v1);
}

uint64_t (*EnvironmentValues.graph.modify(uint64_t a1))(_QWORD *, char)
{
  uint64_t v1;
  unint64_t v3;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = sub_70888();
  *(_QWORD *)(a1 + 24) = v3;
  EnvironmentValues.subscript.getter(&type metadata for ObjectGraphEnvironmentKey, &type metadata for ObjectGraphEnvironmentKey, v3);
  return sub_70978;
}

uint64_t _s7SwiftUI17EnvironmentValuesV8ShelfKitE5graph9JetEngine15BaseObjectGraphCvg_0()
{
  unint64_t v0;
  uint64_t v2;

  v0 = sub_70888();
  EnvironmentValues.subscript.getter(&type metadata for ObjectGraphEnvironmentKey, &type metadata for ObjectGraphEnvironmentKey, v0);
  return v2;
}

uint64_t _s7SwiftUI17EnvironmentValuesV8ShelfKitE5graph9JetEngine15BaseObjectGraphCvs_0(uint64_t a1)
{
  unint64_t v1;
  uint64_t v3;

  v3 = a1;
  v1 = sub_70888();
  return EnvironmentValues.subscript.setter(&v3, &type metadata for ObjectGraphEnvironmentKey, &type metadata for ObjectGraphEnvironmentKey, v1);
}

uint64_t sub_709EC(_QWORD *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  a1[1] = v3;
  v4 = a1[3];
  if ((a2 & 1) == 0)
    return EnvironmentValues.subscript.setter(a1 + 1, &type metadata for ObjectGraphEnvironmentKey, &type metadata for ObjectGraphEnvironmentKey, a1[3]);
  swift_retain(v3);
  EnvironmentValues.subscript.setter(a1 + 1, &type metadata for ObjectGraphEnvironmentKey, &type metadata for ObjectGraphEnvironmentKey, v4);
  return swift_release(*a1);
}

uint64_t sub_70A6C@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v2;
  uint64_t result;
  uint64_t v4;

  v2 = sub_70888();
  result = EnvironmentValues.subscript.getter(&type metadata for ObjectGraphEnvironmentKey, &type metadata for ObjectGraphEnvironmentKey, v2);
  *a1 = v4;
  return result;
}

ValueMetadata *type metadata accessor for ObjectGraphEnvironmentKey()
{
  return &type metadata for ObjectGraphEnvironmentKey;
}

BOOL InformationViewStyle.isScrollEnabledUnderneathInfo.getter()
{
  _QWORD *v0;
  unint64_t v1;
  BOOL v2;
  _BOOL8 result;

  v1 = v0[2];
  result = 0;
  if (v1 >> 61)
  {
    if (v1 >> 61 != 5)
      return 1;
    v2 = v1 == 0xA000000000000000 && v0[1] == 0;
    if (!v2 || *v0 != 4)
      return 1;
  }
  return result;
}

uint64_t destroy for InformationViewStyle(uint64_t *a1)
{
  return sub_6AC00(*a1, a1[1], a1[2]);
}

uint64_t *_s8ShelfKit20InformationViewStyleOwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  sub_6AA9C(*a2, v4, v5);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  return a1;
}

uint64_t *assignWithCopy for InformationViewStyle(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  sub_6AA9C(*a2, v4, v5);
  v6 = *a1;
  v7 = a1[1];
  v8 = a1[2];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  sub_6AC00(v6, v7, v8);
  return a1;
}

uint64_t *assignWithTake for InformationViewStyle(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *a1;
  v6 = a1[1];
  v5 = a1[2];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = v3;
  sub_6AC00(v4, v6, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for InformationViewStyle(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7B && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 123);
  v3 = (((*(_QWORD *)(a1 + 16) >> 57) >> 4) | (8
                                                           * ((*(_QWORD *)(a1 + 16) >> 57) & 8 | *(_QWORD *)(a1 + 16) & 7))) ^ 0x7F;
  if (v3 >= 0x7A)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for InformationViewStyle(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x7A)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 123;
    if (a3 >= 0x7B)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0x7B)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
    {
      v3 = (-a2 >> 3) & 0xF | (16 * (-a2 & 0x7F));
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t sub_70CB4(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 16) >> 61;
  if (v1 <= 4)
    return v1;
  else
    return (*(_DWORD *)a1 + 5);
}

uint64_t sub_70CD0(uint64_t result)
{
  *(_QWORD *)(result + 16) &= 0x1FFFFFFFFFFFFFFFuLL;
  return result;
}

uint64_t sub_70CE0(uint64_t result, uint64_t a2)
{
  if (a2 < 5)
  {
    *(_QWORD *)(result + 16) = *(_QWORD *)(result + 16) & 0xFFFFFFFFFFFFFF8 | (a2 << 61);
  }
  else
  {
    *(_QWORD *)result = (a2 - 5);
    *(_OWORD *)(result + 8) = xmmword_2EEF60;
  }
  return result;
}

ValueMetadata *type metadata accessor for InformationViewStyle()
{
  return &type metadata for InformationViewStyle;
}

uint64_t LibraryEpisodeContextAction.episodeUuid.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit27LibraryEpisodeContextAction_episodeUuid);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit27LibraryEpisodeContextAction_episodeUuid + 8));
  return v1;
}

uint64_t LibraryEpisodeContextAction.stationUuid.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit27LibraryEpisodeContextAction_stationUuid);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit27LibraryEpisodeContextAction_stationUuid + 8));
  return v1;
}

uint64_t LibraryEpisodeContextAction.__allocating_init(episodeUuid:stationUuid:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;

  v5 = v4;
  v30 = a3;
  v31 = a4;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for ActionMetrics(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v16);
  v18 = (char *)&v30 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  v20 = (_QWORD *)(v19 + OBJC_IVAR____TtC8ShelfKit27LibraryEpisodeContextAction_episodeUuid);
  *v20 = a1;
  v20[1] = a2;
  v21 = (_QWORD *)(v19 + OBJC_IVAR____TtC8ShelfKit27LibraryEpisodeContextAction_stationUuid);
  v22 = v31;
  *v21 = v30;
  v21[1] = v22;
  v23 = type metadata accessor for ImpressionMetrics(0);
  v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v18, 1, 1, v23);
  v25 = static ActionMetrics.notInstrumented.getter(v24);
  UUID.init()(v25);
  v26 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
  v28 = v27;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  *(_QWORD *)(v19 + 16) = v26;
  *(_QWORD *)(v19 + 24) = v28;
  *(_QWORD *)(v19 + 32) = 0;
  *(_QWORD *)(v19 + 40) = 0;
  *(_BYTE *)(v19 + 48) = 32;
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v19 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v15, v12);
  sub_23AB8((uint64_t)v18, v19 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics);
  return v19;
}

uint64_t LibraryEpisodeContextAction.init(episodeUuid:stationUuid:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;

  v5 = v4;
  v29 = a3;
  v30 = a4;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for ActionMetrics(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v16);
  v18 = (char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = (_QWORD *)(v5 + OBJC_IVAR____TtC8ShelfKit27LibraryEpisodeContextAction_episodeUuid);
  *v19 = a1;
  v19[1] = a2;
  v20 = (_QWORD *)(v5 + OBJC_IVAR____TtC8ShelfKit27LibraryEpisodeContextAction_stationUuid);
  v21 = v30;
  *v20 = v29;
  v20[1] = v21;
  v22 = type metadata accessor for ImpressionMetrics(0);
  v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v18, 1, 1, v22);
  v24 = static ActionMetrics.notInstrumented.getter(v23);
  UUID.init()(v24);
  v25 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
  v27 = v26;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  *(_QWORD *)(v5 + 16) = v25;
  *(_QWORD *)(v5 + 24) = v27;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = 0;
  *(_BYTE *)(v5 + 48) = 32;
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v5 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v15, v12);
  sub_23AB8((uint64_t)v18, v5 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics);
  return v5;
}

void LibraryEpisodeContextAction.init(deserializing:)()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000002DLL, 0x800000000030C2D0, "ShelfKit/LibraryEpisodeContextAction.swift", 42, 2, 26, 0);
  __break(1u);
}

void LibraryEpisodeContextAction.init(deserializing:using:)()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000033, 0x800000000030A500, "ShelfKit/LibraryEpisodeContextAction.swift", 42, 2, 30, 0);
  __break(1u);
}

void LibraryEpisodeContextAction.init(uniqueId:title:presentationStyle:actionMetrics:impressionMetrics:)()
{
  _swift_stdlib_reportUnimplementedInitializer("ShelfKit.LibraryEpisodeContextAction", 36, "init(uniqueId:title:presentationStyle:actionMetrics:impressionMetrics:)", 71, 0);
  __break(1u);
}

uint64_t sub_711F8()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit27LibraryEpisodeContextAction_episodeUuid + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(v0
                                             + OBJC_IVAR____TtC8ShelfKit27LibraryEpisodeContextAction_stationUuid
                                             + 8));
}

uint64_t LibraryEpisodeContextAction.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics;
  v2 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_23B00(v0 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t LibraryEpisodeContextAction.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics;
  v2 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_23B00(v0 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_71360()
{
  return type metadata accessor for LibraryEpisodeContextAction(0);
}

uint64_t type metadata accessor for LibraryEpisodeContextAction(uint64_t a1)
{
  uint64_t result;

  result = qword_3B3DD0;
  if (!qword_3B3DD0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LibraryEpisodeContextAction);
  return result;
}

uint64_t sub_713A4(uint64_t a1)
{
  _QWORD v2[2];

  v2[0] = &unk_2EEFB0;
  v2[1] = &unk_2EEFC8;
  return swift_updateClassMetadata2(a1, 256, 2, v2, a1 + 160);
}

uint64_t method lookup function for LibraryEpisodeContextAction(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for LibraryEpisodeContextAction);
}

uint64_t dispatch thunk of LibraryEpisodeContextAction.__allocating_init(episodeUuid:stationUuid:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 176))();
}

uint64_t dispatch thunk of LibraryEpisodeContextAction.__allocating_init(deserializing:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 184))();
}

uint64_t FreezableContentSubject.__allocating_init(notificationCenter:)(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char v14;

  v3 = type metadata accessor for NSNotificationCenter.Publisher(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = swift_allocObject(v1, 32, 7);
  v14 = 1;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3EB8);
  swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  v9 = CurrentValueSubject.init(_:)(&v14);
  *(_QWORD *)(v7 + 16) = v9;
  NSNotificationCenter.publisher(for:object:)(MTApplicationWillResignActiveNotification, 0);
  v10 = sub_726D8(&qword_3B3EC0, 255, (void (*)(uint64_t))&type metadata accessor for NSNotificationCenter.Publisher, (uint64_t)&protocol conformance descriptor for NSNotificationCenter.Publisher);
  swift_retain(v9);
  v11 = Publisher<>.sink(receiveValue:)(sub_72438, v9, v3, v10);
  swift_release(v9);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);

  *(_QWORD *)(v7 + 24) = v11;
  return v7;
}

uint64_t FreezableContentSubject.init(notificationCenter:)(void *a1)
{
  uint64_t v2;

  v2 = sub_72300();

  return v2;
}

uint64_t sub_71580(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  void *v20;
  uint64_t v22;
  uint64_t v23;
  _QWORD aBlock[5];
  uint64_t v25;

  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (void *)objc_opt_self(NSThread);
  swift_retain_n(a2, 2);
  if (objc_msgSend(v11, "isMainThread"))
  {
    LOBYTE(aBlock[0]) = 1;
    CurrentValueSubject.send(_:)();
  }
  else
  {
    v12 = sub_676C8();
    v23 = static OS_dispatch_queue.main.getter(v12);
    v13 = swift_allocObject(&unk_37B6D8, 32, 7);
    *(_QWORD *)(v13 + 16) = sub_72810;
    *(_QWORD *)(v13 + 24) = a2;
    aBlock[4] = sub_72838;
    v25 = v13;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_2C9F4;
    aBlock[3] = &block_descriptor_40;
    v14 = _Block_copy(aBlock);
    v15 = v25;
    swift_retain(a2);
    v16 = swift_release(v15);
    static DispatchQoS.unspecified.getter(v16);
    aBlock[0] = _swiftEmptyArrayStorage;
    v17 = sub_726D8((unint64_t *)&qword_3B4420, 255, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8720);
    v19 = sub_724B4();
    dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v18, v19, v3, v17);
    v20 = (void *)v23;
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v6, v14);
    _Block_release(v14);

    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  return swift_release_n(a2, 2);
}

uint64_t FreezableContentSubject.deinit()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return v0;
}

uint64_t FreezableContentSubject.__deallocating_deinit()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocClassInstance(v0, 32, 7);
}

Swift::Void __swiftcall FreezableContentSubject.freeze()()
{
  FreezableContentSubject.send(_:)(ShelfKit_FreezableContentSubject_State_frozen);
}

Swift::Void __swiftcall FreezableContentSubject.send(_:)(ShelfKit::FreezableContentSubject::State a1)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD aBlock[5];
  uint64_t v28;

  v2 = a1 & 1;
  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(v1 + 16);
  v12 = swift_allocObject(&unk_37B468, 25, 7);
  *(_QWORD *)(v12 + 16) = v11;
  *(_BYTE *)(v12 + 24) = v2;
  v13 = (void *)objc_opt_self(NSThread);
  swift_retain_n(v11, 2);
  if (objc_msgSend(v13, "isMainThread"))
  {
    LOBYTE(aBlock[0]) = v2;
    CurrentValueSubject.send(_:)();
  }
  else
  {
    v14 = sub_676C8();
    v26 = static OS_dispatch_queue.main.getter(v14);
    v15 = swift_allocObject(&unk_37B490, 32, 7);
    *(_QWORD *)(v15 + 16) = sub_72464;
    *(_QWORD *)(v15 + 24) = v12;
    aBlock[4] = sub_3B570;
    v28 = v15;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_2C9F4;
    aBlock[3] = &block_descriptor_2;
    v16 = _Block_copy(aBlock);
    v17 = v28;
    swift_retain(v12);
    v18 = swift_release(v17);
    static DispatchQoS.unspecified.getter(v18);
    aBlock[0] = _swiftEmptyArrayStorage;
    v19 = sub_726D8((unint64_t *)&qword_3B4420, 255, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v25 = v7;
    v20 = v4;
    v21 = v19;
    v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8720);
    v23 = sub_724B4();
    dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v22, v23, v3, v21);
    v24 = (void *)v26;
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v6, v16);
    _Block_release(v16);

    (*(void (**)(char *, uint64_t))(v20 + 8))(v6, v3);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v25);
  }
  swift_release(v11);
  swift_release(v12);
}

Swift::Void __swiftcall FreezableContentSubject.unfreeze()()
{
  FreezableContentSubject.send(_:)(ShelfKit_FreezableContentSubject_State_unfrozen);
}

uint64_t FreezableContentSubject.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  char *v23;
  void *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  void *v35;
  const void *v36;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD aBlock[5];
  uint64_t v47;

  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v44 = *(_QWORD *)(v7 - 8);
  v45 = v7;
  __chkstk_darwin(v7);
  v41 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v42 = *(_QWORD *)(v9 - 8);
  v43 = v9;
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(a2 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  v15 = __chkstk_darwin(v10);
  v16 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v18 = (char *)&v38 - v17;
  v19 = *(_QWORD *)(v3 + 16);
  v20 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v20((char *)&v38 - v17, a1, a2);
  v20(v16, (uint64_t)v18, a2);
  v21 = *(unsigned __int8 *)(v13 + 80);
  v22 = (v21 + 40) & ~v21;
  v23 = (char *)swift_allocObject(&unk_37B4E0, v22 + v14, v21 | 7);
  *((_QWORD *)v23 + 2) = a2;
  *((_QWORD *)v23 + 3) = a3;
  *((_QWORD *)v23 + 4) = v19;
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(&v23[v22], v18, a2);
  v24 = (void *)objc_opt_self(NSThread);
  swift_retain_n(v19, 2);
  if (objc_msgSend(v24, "isMainThread"))
  {
    CurrentValueSubject.receive<A>(subscriber:)(v16);
  }
  else
  {
    v25 = sub_676C8();
    v40 = static OS_dispatch_queue.main.getter(v25);
    v26 = swift_allocObject(&unk_37B508, 32, 7);
    *(_QWORD *)(v26 + 16) = sub_7256C;
    *(_QWORD *)(v26 + 24) = v23;
    aBlock[4] = sub_72838;
    v47 = v26;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_2C9F4;
    aBlock[3] = &block_descriptor_13_0;
    v39 = _Block_copy(aBlock);
    v27 = v47;
    swift_retain(v23);
    v28 = swift_release(v27);
    v29 = v12;
    static DispatchQoS.unspecified.getter(v28);
    aBlock[0] = _swiftEmptyArrayStorage;
    v30 = sub_726D8((unint64_t *)&qword_3B4420, 255, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v31 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8720);
    v32 = sub_724B4();
    v33 = v41;
    v34 = v45;
    dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v31, v32, v45, v30);
    v36 = v39;
    v35 = (void *)v40;
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v29, v33, v39);
    _Block_release(v36);

    (*(void (**)(char *, uint64_t))(v44 + 8))(v33, v34);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v29, v43);
  }
  swift_release(v19);
  swift_release(v23);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, a2);
}

uint64_t sub_71DBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return FreezableContentSubject.receive<A>(subscriber:)(a1, a2, a3);
}

uint64_t FreezableContentSubject.send(completion:)(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void *v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  uint64_t v27;
  uint64_t v28;
  _QWORD aBlock[5];
  uint64_t v30;

  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(v1 + 16);
  v12 = swift_allocObject(&unk_37B558, 25, 7);
  *(_QWORD *)(v12 + 16) = v11;
  v13 = a1 & 1;
  *(_BYTE *)(v12 + 24) = v13;
  v14 = (void *)objc_opt_self(NSThread);
  swift_retain_n(v11, 2);
  if (objc_msgSend(v14, "isMainThread"))
  {
    LOBYTE(aBlock[0]) = v13;
    CurrentValueSubject.send(completion:)(aBlock);
  }
  else
  {
    v15 = sub_676C8();
    v28 = static OS_dispatch_queue.main.getter(v15);
    v16 = swift_allocObject(&unk_37B580, 32, 7);
    *(_QWORD *)(v16 + 16) = sub_725A8;
    *(_QWORD *)(v16 + 24) = v12;
    aBlock[4] = sub_72838;
    v30 = v16;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_2C9F4;
    aBlock[3] = &block_descriptor_23;
    v17 = _Block_copy(aBlock);
    v27 = v4;
    v18 = v17;
    v19 = v30;
    swift_retain(v12);
    v20 = swift_release(v19);
    static DispatchQoS.unspecified.getter(v20);
    aBlock[0] = _swiftEmptyArrayStorage;
    v21 = v7;
    v22 = sub_726D8((unint64_t *)&qword_3B4420, 255, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v23 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8720);
    v24 = sub_724B4();
    dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v23, v24, v3, v22);
    v25 = (void *)v28;
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v6, v18);
    _Block_release(v18);

    (*(void (**)(char *, uint64_t))(v27 + 8))(v6, v3);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v21);
  }
  swift_release(v11);
  return swift_release(v12);
}

uint64_t FreezableContentSubject.send(subscription:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v26;
  uint64_t v27;
  _QWORD aBlock[5];
  uint64_t v29;
  _QWORD v30[5];
  __int128 v31[2];

  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(v1 + 16);
  sub_150C8(a1, (uint64_t)v31);
  sub_150C8((uint64_t)v31, (uint64_t)v30);
  v12 = swift_allocObject(&unk_37B5D0, 64, 7);
  *(_QWORD *)(v12 + 16) = v11;
  sub_F4D8(v31, v12 + 24);
  v13 = (void *)objc_opt_self(NSThread);
  swift_retain_n(v11, 2);
  if (objc_msgSend(v13, "isMainThread"))
  {
    CurrentValueSubject.send(subscription:)(v30);
  }
  else
  {
    v14 = sub_676C8();
    v15 = static OS_dispatch_queue.main.getter(v14);
    v27 = v4;
    v16 = (void *)v15;
    v17 = swift_allocObject(&unk_37B5F8, 32, 7);
    *(_QWORD *)(v17 + 16) = sub_72630;
    *(_QWORD *)(v17 + 24) = v12;
    aBlock[4] = sub_72838;
    v29 = v17;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_2C9F4;
    aBlock[3] = &block_descriptor_33;
    v18 = _Block_copy(aBlock);
    v26 = v7;
    v19 = v18;
    v20 = v29;
    swift_retain(v12);
    v21 = swift_release(v20);
    static DispatchQoS.unspecified.getter(v21);
    aBlock[0] = _swiftEmptyArrayStorage;
    v22 = sub_726D8((unint64_t *)&qword_3B4420, 255, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v23 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8720);
    v24 = sub_724B4();
    dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v23, v24, v3, v22);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v6, v19);
    _Block_release(v19);

    (*(void (**)(char *, uint64_t))(v27 + 8))(v6, v3);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v26);
  }
  swift_release(v11);
  swift_release(v12);
  return __swift_destroy_boxed_opaque_existential_1(v30);
}

void sub_722EC(ShelfKit::FreezableContentSubject::State *a1)
{
  FreezableContentSubject.send(_:)(*a1);
}

uint64_t sub_722F4(char *a1)
{
  return FreezableContentSubject.send(completion:)(*a1);
}

uint64_t sub_72300()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  char v12;

  v1 = v0;
  v2 = type metadata accessor for NSNotificationCenter.Publisher(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = 1;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3EB8);
  swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  v7 = CurrentValueSubject.init(_:)(&v12);
  *(_QWORD *)(v0 + 16) = v7;
  NSNotificationCenter.publisher(for:object:)(MTApplicationWillResignActiveNotification, 0);
  v8 = sub_726D8(&qword_3B3EC0, 255, (void (*)(uint64_t))&type metadata accessor for NSNotificationCenter.Publisher, (uint64_t)&protocol conformance descriptor for NSNotificationCenter.Publisher);
  swift_retain(v7);
  v9 = Publisher<>.sink(receiveValue:)(sub_72438, v7, v2, v8);
  swift_release(v7);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  *(_QWORD *)(v1 + 24) = v9;
  return v1;
}

uint64_t sub_72438(uint64_t a1)
{
  uint64_t v1;

  return sub_71580(a1, v1);
}

uint64_t sub_72440()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 25, 7);
}

uint64_t sub_72464()
{
  uint64_t v0;
  char v2;

  v2 = *(_BYTE *)(v0 + 24);
  return CurrentValueSubject.send(_:)(&v2);
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t block_destroy_helper_2(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_724B4()
{
  unint64_t result;

  result = qword_3B4430;
  if (!qword_3B4430)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_3B8720);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A]);
    atomic_store(result, (unint64_t *)&qword_3B4430);
  }
  return result;
}

uint64_t sub_72500()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_7256C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80);
  return CurrentValueSubject.receive<A>(subscriber:)(v0 + ((v1 + 40) & ~v1));
}

uint64_t sub_725A8()
{
  uint64_t v0;
  char v2;

  v2 = *(_BYTE *)(v0 + 24);
  return CurrentValueSubject.send(completion:)(&v2);
}

uint64_t sub_725E0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_72604()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  __swift_destroy_boxed_opaque_existential_1((_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_72630()
{
  uint64_t v0;

  return CurrentValueSubject.send(subscription:)(v0 + 24);
}

unint64_t sub_7265C()
{
  unint64_t result;

  result = qword_3B3EC8;
  if (!qword_3B3EC8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for FreezableContentSubject.State);
    atomic_store(result, (unint64_t *)&qword_3B3EC8);
  }
  return result;
}

void *sub_726A0()
{
  return &protocol witness table for Never;
}

uint64_t sub_726AC(uint64_t a1, uint64_t a2)
{
  return sub_726D8(&qword_3B3ED0, a2, (void (*)(uint64_t))type metadata accessor for FreezableContentSubject, (uint64_t)&protocol conformance descriptor for FreezableContentSubject);
}

uint64_t sub_726D8(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result;

  result = *a1;
  if (!result)
  {
    a3(a2);
    result = swift_getWitnessTable(a4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for FreezableContentSubject()
{
  return objc_opt_self(_TtC8ShelfKit23FreezableContentSubject);
}

uint64_t method lookup function for FreezableContentSubject(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for FreezableContentSubject);
}

uint64_t storeEnumTagSinglePayload for FreezableContentSubject.State(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_72790 + 4 * byte_2EEFE5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_727C4 + 4 * byte_2EEFE0[v4]))();
}

uint64_t sub_727C4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_727CC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x727D4);
  return result;
}

uint64_t sub_727E0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x727E8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_727EC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_727F4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FreezableContentSubject.State()
{
  return &type metadata for FreezableContentSubject.State;
}

uint64_t sub_72810()
{
  char v1;

  v1 = 1;
  return CurrentValueSubject.send(_:)(&v1);
}

void sub_72870()
{
  qword_3B3F80 = (uint64_t)&off_373598;
}

uint64_t static LibraryMenuActionType.defaultEnabledValues.getter()
{
  _BYTE v1[24];

  if (qword_3B0078 != -1)
    swift_once(&qword_3B0078, sub_72870);
  swift_beginAccess(&qword_3B3F80, v1, 0, 0);
  return swift_bridgeObjectRetain(qword_3B3F80);
}

uint64_t static LibraryMenuActionType.defaultEnabledValues.setter(uint64_t a1)
{
  _BYTE v3[24];

  if (qword_3B0078 != -1)
    swift_once(&qword_3B0078, sub_72870);
  swift_beginAccess(&qword_3B3F80, v3, 1, 0);
  qword_3B3F80 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static LibraryMenuActionType.defaultEnabledValues.modify(uint64_t a1))(_QWORD)
{
  if (qword_3B0078 != -1)
    swift_once(&qword_3B0078, sub_72870);
  swift_beginAccess(&qword_3B3F80, a1, 33, 0);
  return j__swift_endAccess;
}

ShelfKit::LibraryMenuActionType_optional __swiftcall LibraryMenuActionType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  ShelfKit::LibraryMenuActionType_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_3735C0, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 7;
  if (v5 < 7)
    v7 = v5;
  *v4 = v7;
  return result;
}

_UNKNOWN **static LibraryMenuActionType.allCases.getter()
{
  return &off_373688;
}

uint64_t LibraryMenuActionType.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_72A60 + 4 * asc_2EF130[*v0]))(0x73776F6873, 0xE500000000000000);
}

uint64_t sub_72A60()
{
  return 0x736C656E6E616863;
}

uint64_t sub_72A78()
{
  return 0x6B72616D6B6F6F62;
}

uint64_t sub_72A94()
{
  return 0x64616F6C6E776F64;
}

uint64_t sub_72AC0()
{
  return 0x796C746E65636572;
}

void sub_72AF8(char *a1)
{
  sub_1E10CC(*a1);
}

void sub_72B04()
{
  char *v0;

  sub_2D9770(0, *v0);
}

void sub_72B10()
{
  __asm { BR              X10 }
}

uint64_t sub_72B48(uint64_t a1)
{
  String.hash(into:)(a1, 0x736C656E6E616863, 0xE800000000000000);
  return swift_bridgeObjectRelease(0xE800000000000000);
}

void sub_72BF4(uint64_t a1)
{
  char *v1;

  sub_2D9770(a1, *v1);
}

ShelfKit::LibraryMenuActionType_optional sub_72BFC(Swift::String *a1)
{
  return LibraryMenuActionType.init(rawValue:)(*a1);
}

uint64_t sub_72C08()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_72C34 + 4 * byte_2EF13E[*v0]))();
}

void sub_72C34(_QWORD *a1@<X8>)
{
  *a1 = 0x736C656E6E616863;
  a1[1] = 0xE800000000000000;
}

void sub_72C50(_QWORD *a1@<X8>)
{
  *a1 = 0x6B72616D6B6F6F62;
  a1[1] = 0xE900000000000073;
}

void sub_72C70(_QWORD *a1@<X8>)
{
  *a1 = 0x64616F6C6E776F64;
  a1[1] = 0xEA00000000006465;
}

void sub_72CA0(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "recentlyAdded");
  *(_WORD *)(a1 + 14) = -4864;
}

void sub_72CDC(_QWORD *a1@<X8>)
{
  *a1 = &off_373688;
}

void StoreTab.identifier.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

ShelfKit::LibraryMenuAction __swiftcall LibraryMenuAction.init(type:isEnabled:)(ShelfKit::LibraryMenuActionType type, Swift::Bool isEnabled)
{
  _BYTE *v2;
  ShelfKit::LibraryMenuAction result;

  *v2 = *(_BYTE *)type;
  v2[1] = isEnabled;
  result.type = type;
  return result;
}

unint64_t sub_72D0C()
{
  unint64_t result;

  result = qword_3B3F88;
  if (!qword_3B3F88)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for LibraryMenuActionType);
    atomic_store(result, (unint64_t *)&qword_3B3F88);
  }
  return result;
}

unint64_t sub_72D54()
{
  unint64_t result;

  result = qword_3B3F90;
  if (!qword_3B3F90)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_3B3F98);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A]);
    atomic_store(result, (unint64_t *)&qword_3B3F90);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for LibraryMenuActionType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_72DEC + 4 * byte_2EF14A[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_72E20 + 4 * byte_2EF145[v4]))();
}

uint64_t sub_72E20(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_72E28(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x72E30);
  return result;
}

uint64_t sub_72E3C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x72E44);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_72E48(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_72E50(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LibraryMenuActionType()
{
  return &type metadata for LibraryMenuActionType;
}

uint64_t storeEnumTagSinglePayload for LibraryMenuAction(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65281 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65281 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_72EB8 + 4 * byte_2EF154[v4]))();
  *a1 = a2 - 255;
  return ((uint64_t (*)(void))((char *)sub_72EEC + 4 * byte_2EF14F[v4]))();
}

uint64_t sub_72EEC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_72EF4(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x72EFCLL);
  return result;
}

uint64_t sub_72F08(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x72F10);
  *(_BYTE *)(result + 1) = a2 + 1;
  return result;
}

uint64_t sub_72F14(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_72F1C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LibraryMenuAction()
{
  return &type metadata for LibraryMenuAction;
}

uint64_t RecommendationsMetadataProvider.metadata.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B35D8);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(v0 + 16);
  v17 = v5;
  v6 = qword_3B0080;
  swift_retain(v5);
  if (v6 != -1)
    swift_once(&qword_3B0080, sub_73178);
  v7 = qword_3B3FA0;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B35F8);
  v9 = sub_32914(&qword_3B3600, &qword_3B35F8, (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
  v10 = Publisher.emitSignpostEvent(log:name:)(v7, "metadata", 8, 2, v8, v9);
  swift_release(v5);
  v17 = v10;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3608);
  v12 = sub_32914(&qword_3B3610, &qword_3B3608, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.compactMap<A>(_:)(sub_730F4, 0, v11, &type metadata for RecommendationsMetadata, v12);
  swift_release(v10);
  v13 = sub_32914(&qword_3B3618, &qword_3B35D8, (uint64_t)&protocol conformance descriptor for Publishers.CompactMap<A, B>);
  v14 = Publisher.eraseToAnyPublisher()(v1, v13);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return v14;
}

uint64_t static RecommendationsMetadataProvider.metadataListLimit.getter()
{
  return 50;
}

uint64_t sub_730F4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *a1;
  v2 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  v6 = a1[4];
  v7 = a1[5];
  v8 = a1[6];
  v9 = a1[7];
  v10 = a1[8];
  v11 = a1[9];
  v12 = a1[10];
  v13 = a1[11];
  v14 = a1[12];
  *a2 = *a1;
  a2[1] = v2;
  a2[2] = v4;
  a2[3] = v5;
  a2[4] = v6;
  a2[5] = v7;
  a2[6] = v8;
  a2[7] = v9;
  a2[8] = v10;
  a2[9] = v11;
  a2[10] = v12;
  a2[11] = v13;
  a2[12] = v14;
  return sub_75138(v3, v2, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14);
}

Swift::Void __swiftcall RecommendationsMetadataProvider.refreshMetadata()()
{
  CurrentValueSubject.send(_:)();
}

uint64_t sub_73178()
{
  uint64_t v0;
  uint64_t result;

  sub_327F8(0, (unint64_t *)&qword_3B0CF0, OS_os_log_ptr);
  v0 = static OS_os_log.podcastsSubsystem.getter();
  result = OS_os_log.init(subsystem:category:)(v0);
  qword_3B3FA0 = result;
  return result;
}

uint64_t sub_731D4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char IsManaged;
  uint64_t result;

  v2 = AnalyticsUserIdentifier.clientId.getter();
  v4 = v3;
  v5 = AnalyticsUserIdentifier.userId.getter();
  v7 = v6;
  v8 = AnalyticsUserIdentifier.userAllowsPersonalization.getter();
  IsManaged = AnalyticsUserIdentifier.userIsManagedAccount.getter();
  result = AnalyticsUserIdentifier.userUnder13YearsOld.getter();
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 32) = v8 & 1;
  *(_BYTE *)(a1 + 33) = IsManaged & 1;
  *(_BYTE *)(a1 + 34) = result & 1;
  return result;
}

uint64_t sub_73258()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  _QWORD *v15;

  v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_327F8(0, (unint64_t *)&qword_3B8710, OS_dispatch_queue_ptr);
  static DispatchQoS.userInitiated.getter();
  v15 = _swiftEmptyArrayStorage;
  v10 = sub_F1C0(&qword_3B20B8, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B20C0);
  v12 = sub_32914((unint64_t *)&qword_3B20C8, &qword_3B20C0, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v15, v11, v12, v4, v10);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v0);
  result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000030, 0x800000000030C520, v9, v6, v3, 0);
  qword_3B3FA8 = result;
  return result;
}

uint64_t sub_7342C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;

  v1 = *v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4220);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (void *)Bag.amsBag.getter(v4);
  v8 = objc_msgSend(v7, "doubleForKey:", kBagKeyListenNowStoreShelvesThrottleInterval);
  swift_unknownObjectRelease(v7);
  if (qword_3B0088 != -1)
    swift_once(&qword_3B0088, sub_73258);
  v9 = objc_msgSend(v8, "asyncValuePromiseOnQueue:", qword_3B3FA8);

  __swift_instantiateConcreteTypeFromMangledName(&qword_3B4228);
  v10 = v9;
  v11 = Promise<A>.init(_:)();
  v12 = Promise.optionalPublisher.getter();
  swift_release(v11);
  v20 = v12;
  v13 = swift_allocObject(&unk_37B9B0, 24, 7);
  *(_QWORD *)(v13 + 16) = v1;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4230);
  v15 = sub_32914(&qword_3B4238, &qword_3B4230, (uint64_t)&protocol conformance descriptor for Future<A, B>);
  Publisher.map<A>(_:)(sub_75130, v13, v14, &type metadata for Double, v15);
  swift_release(v13);
  swift_release(v20);
  v16 = sub_32914(&qword_3B4240, &qword_3B4220, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v17 = Publisher.eraseToAnyPublisher()(v2, v16);

  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  return v17;
}

uint64_t sub_73630@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  char v15;

  v4 = type metadata accessor for OSSignpostID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *a1;
  v10 = static os_signpost_type_t.event.getter(v6);
  if (qword_3B0080 != -1)
    swift_once(&qword_3B0080, sub_73178);
  v11 = qword_3B3FA0;
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)(v10, &dword_0, v11, "Interval loaded", 15, 2, v8);
  result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  if (v9
    && (v14 = 0, v15 = 1, result = static Double._conditionallyBridgeFromObjectiveC(_:result:)(v9, &v14), v15 != 1))
  {
    v13 = v14;
  }
  else
  {
    v13 = 0x40E5180000000000;
  }
  *a2 = v13;
  return result;
}

uint64_t sub_73764()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v1 = type metadata accessor for ObserverQueue(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit31RecommendationsMetadataProvider_libraryDataProvider + 8);
  ObjectType = swift_getObjectType();
  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 208))(ObjectType, v4);
  swift_storeEnumTagMultiPayload(v3, v1, 2);
  v7 = sub_833EC((uint64_t)v3);
  swift_release(v6);
  sub_750E4((uint64_t)v3);
  v15 = v7;
  if (qword_3B0080 != -1)
    swift_once(&qword_3B0080, sub_73178);
  v8 = qword_3B3FA0;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3388);
  v10 = sub_32914(&qword_3B3398, &qword_3B3388, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v11 = Publisher.emitSignpostEvent(log:name:)(v8, "subscribedChannelsPublisher", 27, 2, v9, v10);
  swift_release(v7);
  v15 = v11;
  v12 = Publisher.eraseToAnyPublisher()(v9, v10);
  swift_release(v11);
  return v12;
}

uint64_t RecommendationsMetadataProvider.__allocating_init(asPartOf:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  v3 = sub_74DC8(a1);
  swift_release(a1);
  return v3;
}

uint64_t RecommendationsMetadataProvider.init(asPartOf:)(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_74DC8(a1);
  swift_release(a1);
  return v2;
}

uint64_t sub_7394C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  os_unfair_lock_s *v44;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  id v60;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2B18);
  __chkstk_darwin(v2);
  v55 = (char *)&v46 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B40A0);
  v5 = *(_QWORD *)(v4 - 8);
  v48 = v4;
  v49 = v5;
  __chkstk_darwin(v4);
  v7 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B40A8);
  v9 = *(_QWORD *)(v8 - 8);
  v50 = v8;
  v51 = v9;
  __chkstk_darwin(v8);
  v11 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B40B0);
  v13 = *(_QWORD *)(v12 - 8);
  v53 = v12;
  v54 = v13;
  __chkstk_darwin(v12);
  v47 = (char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B40B8);
  v16 = *(_QWORD *)(v15 - 8);
  v56 = v15;
  v57 = v16;
  __chkstk_darwin(v15);
  v52 = (char *)&v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = (id)sub_7342C();
  v59 = *(_QWORD *)(v0 + 24);
  swift_retain(v59);
  v58 = sub_73764();
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B40C0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4098);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3388);
  v21 = sub_32914(&qword_3B40C8, &qword_3B40C0, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v22 = sub_32914(&qword_3B40D0, &qword_3B4098, (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
  v23 = sub_32914(&qword_3B3398, &qword_3B3388, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publishers.CombineLatest3.init(_:_:_:)(&v60, &v59, &v58, v18, v19, v20, v21, v22, v23);
  v24 = swift_allocObject(&unk_37B938, 32, 7);
  *(_QWORD *)(v24 + 16) = sub_75054;
  *(_QWORD *)(v24 + 24) = v1;
  swift_retain(v1);
  v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B40D8);
  v26 = sub_32914(&qword_3B40E0, &qword_3B40A0, (uint64_t)&protocol conformance descriptor for Publishers.CombineLatest3<A, B, C>);
  v27 = v48;
  Publisher.map<A>(_:)(sub_75080, v24, v48, v25, v26);
  swift_release(v24);
  (*(void (**)(char *, uint64_t))(v49 + 8))(v7, v27);
  v28 = sub_32914(&qword_3B40E8, &qword_3B40A8, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v29 = sub_32914(&qword_3B40F0, &qword_3B40D8, (uint64_t)&protocol conformance descriptor for Publishers.SwitchToLatest<A, B>);
  v30 = v47;
  v31 = v50;
  Publisher<>.switchToLatest()(v50, v28, v29);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v11, v31);
  v32 = sub_327F8(0, (unint64_t *)&qword_3B8710, OS_dispatch_queue_ptr);
  v60 = (id)static OS_dispatch_queue.main.getter(v32);
  v33 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  v34 = (uint64_t)v55;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v55, 1, 1, v33);
  v35 = sub_32914(&qword_3B40F8, &qword_3B40B0, (uint64_t)&protocol conformance descriptor for Publishers.SwitchToLatest<A, B>);
  v36 = sub_436CC();
  v38 = v52;
  v37 = v53;
  Publisher.receive<A>(on:options:)(&v60, v34, v53, v32, v35, v36);
  sub_1459C(v34, &qword_3B2B18);

  (*(void (**)(char *, uint64_t))(v54 + 8))(v30, v37);
  v39 = *(_QWORD *)(v1 + 16);
  v40 = swift_allocObject(&unk_37B960, 32, 7);
  *(_QWORD *)(v40 + 16) = sub_750A8;
  *(_QWORD *)(v40 + 24) = v39;
  v41 = sub_32914(&qword_3B4100, &qword_3B40B8, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  swift_retain(v39);
  v42 = v56;
  v43 = Publisher<>.sink(receiveValue:)(sub_750B0, v40, v56, v41);
  swift_release(v40);
  (*(void (**)(char *, uint64_t))(v57 + 8))(v38, v42);
  v44 = (os_unfair_lock_s *)(*(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit31RecommendationsMetadataProvider_subscriptions)
                           + 24);
  os_unfair_lock_lock(v44);
  sub_635EC();
  os_unfair_lock_unlock(v44);
  return swift_release(v43);
}

uint64_t sub_73E38@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v32 = a1;
  v34 = a2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4108);
  __chkstk_darwin(v4);
  v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4110);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4118);
  v33 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_327F8(0, &qword_3B4120, NSTimer_ptr);
  v14 = (void *)objc_opt_self(NSRunLoop);
  v15 = objc_msgSend(v14, "mainRunLoop", v32);
  v16 = type metadata accessor for NSRunLoop.SchedulerOptions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v6, 1, 1, v16);
  v17 = static NSTimer.publish(every:tolerance:on:in:options:)(0, 1, v15, NSRunLoopCommonModes, v6, a3);

  sub_1459C((uint64_t)v6, &qword_3B4108);
  v35 = v17;
  v18 = type metadata accessor for NSTimer.TimerPublisher(0);
  v19 = sub_F1C0(&qword_3B4128, (void (*)(uint64_t))&type metadata accessor for NSTimer.TimerPublisher, (uint64_t)&protocol conformance descriptor for NSTimer.TimerPublisher);
  v20 = ConnectablePublisher.autoconnect()(v18, v19);
  swift_release(v17);
  v35 = v20;
  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4130);
  v22 = type metadata accessor for Date(0);
  v23 = swift_allocObject(v21, ((*(unsigned __int8 *)(*(_QWORD *)(v22 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v22 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v22 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v22 - 8) + 80) | 7);
  *(_OWORD *)(v23 + 16) = xmmword_2EA0D0;
  static Date.now.getter();
  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4138);
  v25 = sub_32914(&qword_3B4140, &qword_3B4138, (uint64_t)&protocol conformance descriptor for Publishers.Autoconnect<A>);
  Publisher.prepend(_:)(v23, v24, v25);
  swift_release(v20);
  swift_bridgeObjectRelease();
  v26 = swift_allocObject(&unk_37B988, 24, 7);
  swift_weakInit(v26 + 16);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3620);
  v28 = sub_32914(&qword_3B4148, &qword_3B4110, (uint64_t)&protocol conformance descriptor for Publishers.Concatenate<A, B>);
  Publisher.map<A>(_:)(sub_750DC, v26, v7, v27, v28);
  swift_release(v26);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v29 = sub_32914(&qword_3B4150, &qword_3B4118, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v30 = sub_32914(&qword_3B3630, &qword_3B3620, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher<>.switchToLatest()(v11, v29, v30);
  return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v13, v11);
}

uint64_t sub_741CC@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t Strong;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  _BYTE v13[35];
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _BYTE v22[24];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4158);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v13[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  a1 += 16;
  swift_beginAccess(a1, v22, 0, 0);
  Strong = swift_weakLoadStrong(a1);
  if (Strong)
  {
    v9 = Strong;
    v10 = sub_742F8();
    result = swift_release(v9);
  }
  else
  {
    memset(v13, 0, sizeof(v13));
    v14 = _swiftEmptyArrayStorage;
    v15 = _swiftEmptyArrayStorage;
    v16 = _swiftEmptyArrayStorage;
    v17 = _swiftEmptyArrayStorage;
    v18 = _swiftEmptyArrayStorage;
    v19 = _swiftEmptyArrayStorage;
    v20 = _swiftEmptyArrayStorage;
    v21 = _swiftEmptyArrayStorage;
    Just.init(_:)(v13, &type metadata for RecommendationsMetadata);
    v12 = sub_32914(&qword_3B4160, &qword_3B4158, (uint64_t)&protocol conformance descriptor for Just<A>);
    v10 = Publisher.eraseToAnyPublisher()(v4, v12);
    result = (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
  }
  *a2 = v10;
  return result;
}

uint64_t sub_742F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (**v4)(_QWORD, _QWORD);
  uint64_t ObjectType;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v46 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4168);
  v44 = *(_QWORD *)(v46 - 8);
  __chkstk_darwin(v46);
  v41 = (char *)&v37 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4170);
  v45 = *(_QWORD *)(v48 - 8);
  __chkstk_darwin(v48);
  v42 = (char *)&v37 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4178);
  v47 = *(_QWORD *)(v49 - 8);
  __chkstk_darwin(v49);
  v43 = (char *)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = sub_74B3C();
  v4 = *(uint64_t (***)(_QWORD, _QWORD))(v0
                                                 + OBJC_IVAR____TtC8ShelfKit31RecommendationsMetadataProvider_libraryDataProvider
                                                 + 8);
  ObjectType = swift_getObjectType();
  v6 = v4[12](ObjectType, v4);
  v53 = v6;
  if (qword_3B0080 != -1)
    swift_once(&qword_3B0080, sub_73178);
  v7 = qword_3B3FA0;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4180);
  v40 = v8;
  v39 = sub_32914(&qword_3B4188, &qword_3B4180, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v9 = Publisher.emitSignpostEvent(log:name:)(v7, "categoriesRecommendationsMetadataPublisher", 42, 2, v8, v39);
  swift_release(v6);
  v53 = v9;
  v10 = v4[13](ObjectType, v4);
  v52 = v10;
  v11 = qword_3B3FA0;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4190);
  v38 = v12;
  v37 = sub_32914(&qword_3B4198, &qword_3B4190, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v13 = Publisher.emitSignpostEvent(log:name:)(v11, "channelsRecommendationsMetadataPublisher", 40, 2, v12, v37);
  swift_release(v10);
  v52 = v13;
  v14 = v4[14](ObjectType, v4);
  v51 = v14;
  v15 = qword_3B3FA0;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B41A0);
  v17 = sub_32914(&qword_3B41A8, &qword_3B41A0, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v18 = Publisher.emitSignpostEvent(log:name:)(v15, "episodesRecommendationsMetadataPublisher", 40, 2, v16, v17);
  swift_release(v14);
  v51 = v18;
  v19 = v4[15](ObjectType, v4);
  v50 = v19;
  v20 = qword_3B3FA0;
  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B41B0);
  v22 = sub_32914(&qword_3B41B8, &qword_3B41B0, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v23 = Publisher.emitSignpostEvent(log:name:)(v20, "showsRecommendationsMetadataPublisher", 37, 2, v21, v22);
  swift_release(v19);
  v50 = v23;
  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B41C0);
  v25 = sub_32914(&qword_3B41C8, &qword_3B41C0, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v26 = v41;
  Publishers.PFCombineLatest5.init(_:_:_:_:_:)(&v54, &v53, &v52, &v51, &v50, v24, v40, v38, v16, v21, v25, v39, v37, v17, v22);
  v27 = sub_32914(&qword_3B41D0, &qword_3B4168, (uint64_t)&protocol conformance descriptor for Publishers.PFCombineLatest5<A, B, C, D, E>);
  v28 = v42;
  v29 = v46;
  Publisher.map<A>(_:)(sub_74970, 0, v46, &type metadata for RecommendationsMetadata, v27);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v26, v29);
  v30 = sub_32914(&qword_3B41D8, &qword_3B4170, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v31 = v43;
  v32 = v48;
  Publisher.first()(v48, v30);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v28, v32);
  v33 = sub_32914(&qword_3B41E0, &qword_3B4178, (uint64_t)&protocol conformance descriptor for Publishers.First<A>);
  v34 = v49;
  v35 = Publisher.eraseToAnyPublisher()(v49, v33);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v31, v34);
  return v35;
}

uint64_t sub_747CC()
{
  return CurrentValueSubject.send(_:)();
}

uint64_t sub_74818(uint64_t *a1, void (*a2)(uint64_t *))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = a1[3];
  v3 = a1[5];
  v4 = a1[6];
  v5 = a1[7];
  v6 = a1[8];
  v7 = a1[9];
  v8 = a1[10];
  v9 = a1[11];
  v10 = a1[12];
  v11 = 256;
  if (!*((_BYTE *)a1 + 33))
    v11 = 0;
  v12 = v11 | *((unsigned __int8 *)a1 + 32);
  v13 = 0x10000;
  if (!*((_BYTE *)a1 + 34))
    v13 = 0;
  v18 = *a1;
  v19 = *(_OWORD *)(a1 + 1);
  v16 = v2;
  v20 = v2;
  v21 = v12 | v13;
  v22 = v3;
  v23 = v4;
  v24 = v5;
  v25 = v6;
  v26 = v7;
  v27 = v8;
  v14 = v19;
  v28 = v9;
  v29 = v10;
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v19);
  a2(&v18);
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v16);
  return swift_bridgeObjectRelease(v14);
}

uint64_t sub_74970@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_BYTE *)(a1 + 32);
  v4 = *(_BYTE *)(a1 + 33);
  v5 = *(_BYTE *)(a1 + 34);
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(_QWORD *)(a1 + 48);
  v8 = *(_QWORD *)(a1 + 56);
  v9 = *(_QWORD *)(a1 + 64);
  v10 = *(_QWORD *)(a1 + 72);
  v11 = *(_QWORD *)(a1 + 80);
  v12 = *(_QWORD *)(a1 + 88);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)a2 = *(_QWORD *)a1;
  v14 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 8) = v14;
  *(_QWORD *)(a2 + 24) = v2;
  *(_BYTE *)(a2 + 32) = v3;
  *(_BYTE *)(a2 + 33) = v4;
  *(_BYTE *)(a2 + 34) = v5;
  *(_QWORD *)(a2 + 40) = v6;
  *(_QWORD *)(a2 + 48) = v7;
  *(_QWORD *)(a2 + 56) = v8;
  *(_QWORD *)(a2 + 64) = v9;
  *(_QWORD *)(a2 + 72) = v10;
  *(_QWORD *)(a2 + 80) = v11;
  v15 = v14;
  *(_QWORD *)(a2 + 88) = v12;
  *(_QWORD *)(a2 + 96) = v13;
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  return swift_bridgeObjectRetain(v15);
}

uint64_t RecommendationsMetadataProvider.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  v1 = v0 + OBJC_IVAR____TtC8ShelfKit31RecommendationsMetadataProvider_bag;
  v2 = type metadata accessor for Bag(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_unknownObjectRelease(*(_QWORD *)(v0
                                       + OBJC_IVAR____TtC8ShelfKit31RecommendationsMetadataProvider_libraryDataProvider));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit31RecommendationsMetadataProvider_subscriptions));
  return v0;
}

uint64_t RecommendationsMetadataProvider.__deallocating_deinit()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  swift_release(v0[2]);
  swift_release(v0[3]);
  v1 = (char *)v0 + OBJC_IVAR____TtC8ShelfKit31RecommendationsMetadataProvider_bag;
  v2 = type metadata accessor for Bag(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_unknownObjectRelease(*(_QWORD *)((char *)v0
                                       + OBJC_IVAR____TtC8ShelfKit31RecommendationsMetadataProvider_libraryDataProvider));
  swift_release(*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC8ShelfKit31RecommendationsMetadataProvider_subscriptions));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_74B3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD v22[3];

  v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B41E8);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B41F0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_3B41F8);
  type metadata accessor for AnalyticsIdentifierManager(0);
  v8 = (void *)static AnalyticsIdentifierManager.sharedInstance.getter();
  v9 = dispatch thunk of AnalyticsIdentifierManager.identifierPromise.getter();

  v10 = Promise<A>.init(_:)(v9);
  v11 = Promise.publisher.getter(v10);
  swift_release(v10);
  *(_QWORD *)&v22[0] = v11;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4200);
  v13 = sub_32914(&qword_3B4208, &qword_3B4200, (uint64_t)&protocol conformance descriptor for Future<A, B>);
  Publisher.map<A>(_:)(sub_731D4, 0, v12, &type metadata for RecommendationsMetadata.Analytics, v13);
  swift_release(v11);
  v14 = sub_32914(&qword_3B4210, &qword_3B41E8, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  memset(v22, 0, 35);
  Publisher.replaceError(with:)(v22, v0, v14);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  if (qword_3B0080 != -1)
    swift_once(&qword_3B0080, sub_73178);
  v15 = qword_3B3FA0;
  v16 = sub_32914(&qword_3B4218, &qword_3B41F0, (uint64_t)&protocol conformance descriptor for Publishers.ReplaceError<A>);
  v17 = Publisher.emitSignpostEvent(log:name:)(v15, "analyticsRecommendationsMetadataPublisher", 41, 2, v4, v16);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  *(_QWORD *)&v22[0] = v17;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B41C0);
  v19 = sub_32914(&qword_3B41C8, &qword_3B41C0, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v20 = Publisher.eraseToAnyPublisher()(v18, v19);
  swift_release(v17);
  return v20;
}

uint64_t sub_74DC8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v18[6];
  uint64_t v19;

  v2 = v1;
  v4 = type metadata accessor for Bag(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (_QWORD *)((char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = 0;
  memset(v18, 0, sizeof(v18));
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B35F8);
  swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  *(_QWORD *)(v1 + 16) = CurrentValueSubject.init(_:)(v18);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4098);
  v10 = swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  *(_QWORD *)(v1 + 24) = CurrentValueSubject.init(_:)(v10);
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
    && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
  {
    v11 = (void *)sub_B3484((uint64_t)_swiftEmptyArrayStorage);
  }
  else
  {
    v11 = &_swiftEmptySetSingleton;
  }
  v12 = OBJC_IVAR____TtC8ShelfKit31RecommendationsMetadataProvider_subscriptions;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3748);
  v14 = swift_allocObject(v13, 28, 7);
  *(_DWORD *)(v14 + 24) = 0;
  *(_QWORD *)(v14 + 16) = v11;
  *(_QWORD *)(v2 + v12) = v14;
  v15 = type metadata accessor for BaseObjectGraph(0);
  inject<A, B>(_:from:)(v7, v4, a1, v4, v15);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v5 + 32))(v2 + OBJC_IVAR____TtC8ShelfKit31RecommendationsMetadataProvider_bag, v7, v4);
  v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3BF760);
  BaseObjectGraph.inject<A>(_:)(v18, v16, v16);
  *(_OWORD *)(v2 + OBJC_IVAR____TtC8ShelfKit31RecommendationsMetadataProvider_libraryDataProvider) = v18[0];
  sub_7394C();
  return v2;
}

uint64_t sub_74F7C()
{
  return type metadata accessor for RecommendationsMetadataProvider(0);
}

uint64_t type metadata accessor for RecommendationsMetadataProvider(uint64_t a1)
{
  uint64_t result;

  result = qword_3B3FF0;
  if (!qword_3B3FF0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RecommendationsMetadataProvider);
  return result;
}

uint64_t sub_74FC0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  result = type metadata accessor for Bag(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    v4[3] = &unk_2EF310;
    v4[4] = (char *)&value witness table for Builtin.NativeObject + 64;
    result = swift_updateClassMetadata2(a1, 256, 5, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for RecommendationsMetadataProvider(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for RecommendationsMetadataProvider);
}

uint64_t sub_75054@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  uint64_t v2;

  return sub_73E38(v2, a1, a2);
}

uint64_t sub_7505C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_75080(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, double))(v1 + 16))(*(_QWORD *)(a1 + 8), *(double *)a1);
}

uint64_t sub_750A8()
{
  return sub_747CC();
}

uint64_t sub_750B0(uint64_t *a1)
{
  uint64_t v1;

  return sub_74818(a1, *(void (**)(uint64_t *))(v1 + 16));
}

uint64_t sub_750B8()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_750DC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_741CC(v1, a1);
}

uint64_t sub_750E4(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ObserverQueue(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_75120()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_75130@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_73630(a1, a2);
}

uint64_t sub_75138(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t result;

  if (a6)
  {
    swift_bridgeObjectRetain(a4);
    swift_bridgeObjectRetain(a6);
    swift_bridgeObjectRetain(a7);
    swift_bridgeObjectRetain(a8);
    swift_bridgeObjectRetain(a9);
    swift_bridgeObjectRetain(a10);
    swift_bridgeObjectRetain(a11);
    swift_bridgeObjectRetain(a12);
    swift_bridgeObjectRetain(a13);
    return swift_bridgeObjectRetain(a2);
  }
  return result;
}

uint64_t EpisodeStateController.stateMachine(for:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = type metadata accessor for LibraryEpisodeLockup(0);
  v3 = swift_dynamicCastClass(a1, v2);
  if (!v3)
    return dispatch thunk of EpisodeStateController.stateMachine(for:)(*(_QWORD *)(a1 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup_adamId), 0, 0);
  v4 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8ShelfKit20LibraryEpisodeLockup_uuid);
  v5 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8ShelfKit20LibraryEpisodeLockup_uuid + 8);
  swift_retain(a1);
  swift_bridgeObjectRetain(v5);
  v6 = dispatch thunk of EpisodeStateController.stateMachine(for:)(v4, v5, 1);
  swift_release(a1);
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t EpisodeOfferAction.contentId.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit18EpisodeOfferAction_contentId);
}

uint64_t EpisodeOfferAction.episodeOffer.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1E3E8(v1 + OBJC_IVAR____TtC8ShelfKit18EpisodeOfferAction_episodeOffer, a1);
}

uint64_t EpisodeOfferAction.__allocating_init(deserializing:using:)(char *a1, uint64_t a2)
{
  uint64_t v2;

  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  return EpisodeOfferAction.init(deserializing:using:)(a1, a2);
}

uint64_t EpisodeOfferAction.init(deserializing:using:)(char *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  void (*v36)(uint64_t, uint64_t);
  char *v37;
  void (*v38)(char *, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  void (*v48)(uint64_t, uint64_t);
  char *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;

  v3 = v2;
  v56 = a2;
  v53 = *v3;
  v55 = type metadata accessor for JSONContext(0);
  v5 = *(_QWORD *)(v55 - 8);
  v6 = __chkstk_darwin(v55);
  v49 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v9 = (char *)&v46 - v8;
  v10 = type metadata accessor for EpisodeOffer(0);
  __chkstk_darwin(v10);
  v52 = (uint64_t *)((char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = type metadata accessor for JSONObject(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v47 = (char *)&v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v46 - v17;
  __chkstk_darwin(v16);
  v20 = (char *)&v46 - v19;
  swift_retain(v3);
  v54 = a1;
  v21 = JSONObject.subscript.getter(0x49746E65746E6F63, 0xE900000000000064);
  v22 = JSONObject.string.getter(v21);
  if (v23)
  {
    v50 = v13;
    v24 = v51;
    v25 = static AdamID.parse(_:)(v22, v23);
    if (v24)
    {
      v26 = swift_bridgeObjectRelease();
      v27 = static AdamID.empty.getter(v26);
      swift_errorRelease(v24);
    }
    else
    {
      v27 = v25;
      swift_bridgeObjectRelease();
    }
    v36 = *(void (**)(uint64_t, uint64_t))(v50 + 8);
    v46 = v12;
    v48 = v36;
    v36((uint64_t)v20, v12);
    *(uint64_t *)((char *)v3 + OBJC_IVAR____TtC8ShelfKit18EpisodeOfferAction_contentId) = v27;
    v37 = v54;
    JSONObject.subscript.getter(0x4F65646F73697065, 0xEC00000072656666);
    v51 = v5;
    v38 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v39 = v56;
    v40 = v55;
    v38(v9, v56, v55);
    v41 = v52;
    EpisodeOffer.init(deserializing:using:)((uint64_t)v18, (uint64_t)v9, v52);
    sub_1E4B0((uint64_t)v41, (uint64_t)v3 + OBJC_IVAR____TtC8ShelfKit18EpisodeOfferAction_episodeOffer);
    swift_release(v3);
    v43 = v46;
    v44 = v47;
    (*(void (**)(char *, char *, uint64_t))(v50 + 16))(v47, v37, v46);
    v45 = (uint64_t)v49;
    v38(v49, v39, v40);
    v29 = Action.init(deserializing:using:)(v44, v45);
    (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v39, v40);
    v48((uint64_t)v37, v43);
  }
  else
  {
    v28 = *(void (**)(char *, uint64_t))(v13 + 8);
    v28(v20, v12);
    v29 = type metadata accessor for JSONError(0);
    v30 = sub_1E468();
    swift_allocError(v29, v30, 0, 0);
    v32 = v31;
    v33 = *v3;
    swift_release(v3);
    *v32 = 0x49746E65746E6F63;
    v32[1] = 0xE900000000000064;
    v32[2] = v33;
    v34 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v29 - 8) + 104))(v32, enum case for JSONError.missingProperty(_:), v29);
    swift_willThrow(v34);
    v35 = v54;
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v56, v55);
    v28(v35, v12);
    swift_deallocPartialClassInstance(v3, v53, *(unsigned int *)(*v3 + 48), *(unsigned __int16 *)(*v3 + 52));
  }
  return v29;
}

void EpisodeOfferAction.init(uniqueId:title:presentationStyle:actionMetrics:impressionMetrics:)()
{
  _swift_stdlib_reportUnimplementedInitializer("ShelfKit.EpisodeOfferAction", 27, "init(uniqueId:title:presentationStyle:actionMetrics:impressionMetrics:)", 71, 0);
  __break(1u);
}

uint64_t sub_75744()
{
  uint64_t v0;

  return sub_1E42C(v0 + OBJC_IVAR____TtC8ShelfKit18EpisodeOfferAction_episodeOffer);
}

uint64_t EpisodeOfferAction.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics;
  v2 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_23B00(v0 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics);
  sub_1E42C(v0 + OBJC_IVAR____TtC8ShelfKit18EpisodeOfferAction_episodeOffer);
  return v0;
}

uint64_t EpisodeOfferAction.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics;
  v2 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_23B00(v0 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics);
  sub_1E42C(v0 + OBJC_IVAR____TtC8ShelfKit18EpisodeOfferAction_episodeOffer);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_75858()
{
  return type metadata accessor for EpisodeOfferAction(0);
}

uint64_t type metadata accessor for EpisodeOfferAction(uint64_t a1)
{
  uint64_t result;

  result = qword_3B4270;
  if (!qword_3B4270)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for EpisodeOfferAction);
  return result;
}

uint64_t sub_7589C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  result = type metadata accessor for EpisodeOffer(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 160);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_75918@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = *a1 + OBJC_IVAR____TtC8ShelfKit24WebAuthenticationSession_authorizationURL;
  swift_beginAccess(v3, v6, 0, 0);
  v4 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, v3, v4);
}

uint64_t sub_75980(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE v11[24];

  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v11[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  v8 = *a2 + OBJC_IVAR____TtC8ShelfKit24WebAuthenticationSession_authorizationURL;
  swift_beginAccess(v8, v11, 33, 0);
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v5 + 40))(v8, v7, v4);
  return swift_endAccess(v11);
}

uint64_t sub_75A44@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = v1 + OBJC_IVAR____TtC8ShelfKit24WebAuthenticationSession_authorizationURL;
  swift_beginAccess(v3, v6, 0, 0);
  v4 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_75AA8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = v1 + OBJC_IVAR____TtC8ShelfKit24WebAuthenticationSession_authorizationURL;
  swift_beginAccess(v3, v6, 33, 0);
  v4 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
  return swift_endAccess(v6);
}

uint64_t (*sub_75B14(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC8ShelfKit24WebAuthenticationSession_authorizationURL, a1, 33, 0);
  return j__swift_endAccess;
}

id WebAuthenticationSession.__allocating_init(authorizationURL:window:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  objc_super v13;

  v5 = (char *)objc_allocWithZone(v2);
  *(_QWORD *)&v5[OBJC_IVAR____TtC8ShelfKit24WebAuthenticationSession_authenticationSession] = 0;
  v6 = &v5[OBJC_IVAR____TtC8ShelfKit24WebAuthenticationSession_startCompletion];
  *(_QWORD *)v6 = 0;
  *((_QWORD *)v6 + 1) = 0;
  v7 = &v5[OBJC_IVAR____TtC8ShelfKit24WebAuthenticationSession_callbackURLScheme];
  *(_QWORD *)v7 = 0x7374736163646F70;
  *((_QWORD *)v7 + 1) = 0xE800000000000000;
  v8 = &v5[OBJC_IVAR____TtC8ShelfKit24WebAuthenticationSession_authorizationURL];
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v8, a1, v9);
  *(_QWORD *)&v5[OBJC_IVAR____TtC8ShelfKit24WebAuthenticationSession_window] = a2;
  v13.receiver = v5;
  v13.super_class = v2;
  v11 = objc_msgSendSuper2(&v13, "init");
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a1, v9);
  return v11;
}

id WebAuthenticationSession.init(authorizationURL:window:)(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  objc_super v12;

  *(_QWORD *)&v2[OBJC_IVAR____TtC8ShelfKit24WebAuthenticationSession_authenticationSession] = 0;
  v5 = &v2[OBJC_IVAR____TtC8ShelfKit24WebAuthenticationSession_startCompletion];
  *(_QWORD *)v5 = 0;
  *((_QWORD *)v5 + 1) = 0;
  v6 = &v2[OBJC_IVAR____TtC8ShelfKit24WebAuthenticationSession_callbackURLScheme];
  *(_QWORD *)v6 = 0x7374736163646F70;
  *((_QWORD *)v6 + 1) = 0xE800000000000000;
  v7 = &v2[OBJC_IVAR____TtC8ShelfKit24WebAuthenticationSession_authorizationURL];
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v7, a1, v8);
  *(_QWORD *)&v2[OBJC_IVAR____TtC8ShelfKit24WebAuthenticationSession_window] = a2;
  v12.receiver = v2;
  v12.super_class = (Class)type metadata accessor for WebAuthenticationSession(0);
  v10 = objc_msgSendSuper2(&v12, "init");
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, v8);
  return v10;
}

uint64_t type metadata accessor for WebAuthenticationSession(uint64_t a1)
{
  uint64_t result;

  result = qword_3B4408;
  if (!qword_3B4408)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for WebAuthenticationSession);
  return result;
}

id sub_75D70(void (*a1)(uint64_t, uint64_t), uint64_t a2)
{
  char *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  __n128 v19;
  uint64_t v20;
  _QWORD *v21;
  id v22;
  char *v23;
  NSURL *v24;
  void *v25;
  void *v26;
  NSString v27;
  void *v28;
  id v29;
  const void *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  void *v35;
  id v36;
  id v37;
  char *v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  char *v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  void (*v57)(uint64_t, uint64_t);
  char *v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD aBlock[5];
  _QWORD *v62;
  char v63[24];

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
  __chkstk_darwin(v5);
  v55 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Logger(0);
  v59 = *(_QWORD *)(v7 - 8);
  v60 = v7;
  v8 = __chkstk_darwin(v7);
  v58 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v54 = (char *)&v54 - v10;
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = &v2[OBJC_IVAR____TtC8ShelfKit24WebAuthenticationSession_startCompletion];
  v17 = *(_QWORD *)&v2[OBJC_IVAR____TtC8ShelfKit24WebAuthenticationSession_startCompletion];
  v16 = *(_QWORD *)&v2[OBJC_IVAR____TtC8ShelfKit24WebAuthenticationSession_startCompletion + 8];
  *(_QWORD *)v15 = a1;
  *((_QWORD *)v15 + 1) = a2;
  swift_retain(a2);
  sub_327A0(v17, v16);
  v18 = &v2[OBJC_IVAR____TtC8ShelfKit24WebAuthenticationSession_authorizationURL];
  v19 = swift_beginAccess(&v2[OBJC_IVAR____TtC8ShelfKit24WebAuthenticationSession_authorizationURL], v63, 0, 0);
  (*(void (**)(char *, char *, uint64_t, __n128))(v12 + 16))(v14, v18, v11, v19);
  v20 = *(_QWORD *)&v2[OBJC_IVAR____TtC8ShelfKit24WebAuthenticationSession_callbackURLScheme + 8];
  v21 = (_QWORD *)swift_allocObject(&unk_37BA00, 40, 7);
  v57 = a1;
  v21[2] = a1;
  v21[3] = a2;
  v21[4] = v2;
  v22 = objc_allocWithZone((Class)ASWebAuthenticationSession);
  v56 = a2;
  swift_retain(a2);
  swift_bridgeObjectRetain(v20);
  v23 = v2;
  URL._bridgeToObjectiveC()(v24);
  v26 = v25;
  v27 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  aBlock[4] = sub_765D8;
  v62 = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_76B24;
  aBlock[3] = &block_descriptor_3;
  v28 = _Block_copy(aBlock);
  v29 = objc_msgSend(v22, "initWithURL:callbackURLScheme:completionHandler:", v26, v27, v28);
  v30 = v28;
  v31 = v11;
  _Block_release(v30);

  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  swift_release(v62);
  v32 = OBJC_IVAR____TtC8ShelfKit24WebAuthenticationSession_authenticationSession;
  v33 = *(void **)&v23[OBJC_IVAR____TtC8ShelfKit24WebAuthenticationSession_authenticationSession];
  *(_QWORD *)&v23[OBJC_IVAR____TtC8ShelfKit24WebAuthenticationSession_authenticationSession] = v29;

  v34 = *(id *)&v23[v32];
  if (!v34
    || (objc_msgSend(v34, "setPresentationContextProvider:", v23), (v34 = *(id *)&v23[v32]) == 0)
    || (v34 = objc_msgSend(v34, "setPrefersEphemeralWebBrowserSession:", 1), (v35 = *(void **)&v23[v32]) == 0))
  {
LABEL_6:
    v38 = v58;
    v39 = static Logger.purchases.getter(v34);
    v40 = Logger.logObject.getter(v39);
    v41 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v40, v41))
    {
      v42 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v42 = 0;
      _os_log_impl(&dword_0, v40, v41, "Starting the ASWebAuthenticationSession", v42, 2u);
      swift_slowDealloc(v42, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v59 + 8))(v38, v60);
    return objc_msgSend(*(id *)&v23[v32], "start");
  }
  v36 = v35;
  v37 = objc_msgSend(v36, "canStart");
  if ((v37 & 1) != 0)
  {

    goto LABEL_6;
  }
  v44 = v54;
  v45 = static Logger.purchases.getter(v37);
  v46 = Logger.logObject.getter(v45);
  v47 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v46, v47))
  {
    v48 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v48 = 0;
    _os_log_impl(&dword_0, v46, v47, "Cannot start the ASWebAuthenticationSession.", v48, 2u);
    swift_slowDealloc(v48, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v59 + 8))(v44, v60);
  v49 = (uint64_t)v55;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v55, 1, 1, v31);
  v50 = type metadata accessor for OAuthSessionError(0);
  v51 = sub_F1C0((unint64_t *)&qword_3B4378, (void (*)(uint64_t))&type metadata accessor for OAuthSessionError, (uint64_t)&protocol conformance descriptor for OAuthSessionError);
  v52 = swift_allocError(v50, v51, 0, 0);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v50 - 8) + 104))(v53, enum case for OAuthSessionError.cannotStart(_:), v50);
  v57(v49, v52);
  swift_errorRelease(v52);

  return (id)sub_2828C(v49);
}

uint64_t sub_7622C(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t), uint64_t a4, void *a5)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  void *v32;
  void *v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t);
  _QWORD aBlock[5];
  uint64_t v49;

  v41 = a5;
  v46 = a4;
  v47 = a3;
  v45 = a1;
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v44 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v42 = *(_QWORD *)(v9 - 8);
  v43 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Logger(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = static Logger.purchases.getter(v14);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v20 = 0;
    _os_log_impl(&dword_0, v18, v19, "Callback in ASWebAuthenticationSession called.", v20, 2u);
    swift_slowDealloc(v20, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  if (a2)
  {
    type metadata accessor for Code(0);
    v22 = v21;
    aBlock[0] = 1;
    swift_errorRetain(a2);
    v23 = sub_F1C0(&qword_3B07B0, type metadata accessor for Code, (uint64_t)&unk_2E9D70);
    if ((static _ErrorCodeProtocol.~= infix(_:_:)(aBlock, a2, v22, v23) & 1) != 0)
    {
      v24 = type metadata accessor for OAuthSessionError(0);
      v25 = sub_F1C0((unint64_t *)&qword_3B4378, (void (*)(uint64_t))&type metadata accessor for OAuthSessionError, (uint64_t)&protocol conformance descriptor for OAuthSessionError);
      v26 = swift_allocError(v24, v25, 0, 0);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v24 - 8) + 104))(v27, enum case for OAuthSessionError.userCancelledLogin(_:), v24);
      v47(v45, v26);
      swift_errorRelease(v26);
      return swift_errorRelease(a2);
    }
    swift_errorRelease(a2);
  }
  v47(v45, a2);
  v29 = sub_676C8();
  v30 = (void *)static OS_dispatch_queue.main.getter(v29);
  v31 = swift_allocObject(&unk_37BAD8, 24, 7);
  v32 = v41;
  *(_QWORD *)(v31 + 16) = v41;
  aBlock[4] = sub_77428;
  v49 = v31;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_2C9F4;
  aBlock[3] = &block_descriptor_17;
  v33 = _Block_copy(aBlock);
  v34 = v49;
  v35 = v32;
  v36 = swift_release(v34);
  static DispatchQoS.unspecified.getter(v36);
  aBlock[0] = _swiftEmptyArrayStorage;
  v37 = sub_F1C0((unint64_t *)&qword_3B4420, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v38 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8720);
  v39 = sub_724B4();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v38, v39, v6, v37);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v8, v33);
  _Block_release(v33);

  (*(void (**)(char *, uint64_t))(v44 + 8))(v8, v6);
  return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v11, v43);
}

uint64_t sub_765D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_7622C(a1, a2, *(void (**)(uint64_t, uint64_t))(v2 + 16), *(_QWORD *)(v2 + 24), *(void **)(v2 + 32));
}

uint64_t sub_765E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t *v14;
  void (*v15)(char *, _QWORD);
  uint64_t v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;

  v3 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v33 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (uint64_t *)(v1 + OBJC_IVAR____TtC8ShelfKit24WebAuthenticationSession_startCompletion);
  v15 = *(void (**)(char *, _QWORD))(v1 + OBJC_IVAR____TtC8ShelfKit24WebAuthenticationSession_startCompletion);
  if (v15)
  {
    v16 = v14[1];
    v17 = *(void **)(v1 + OBJC_IVAR____TtC8ShelfKit24WebAuthenticationSession_authenticationSession);
    if (v17)
    {
      sub_76C34((uint64_t)v15, v14[1]);
      v18 = v17;
      objc_msgSend(v18, "cancel");
      v19 = type metadata accessor for URL(0);
      v20 = *(_QWORD *)(v19 - 8);
      (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v13, a1, v19);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v13, 0, 1, v19);
      v15(v13, 0);
      sub_2828C((uint64_t)v13);
      v21 = *v14;
      v22 = v14[1];
      *v14 = 0;
      v14[1] = 0;
      sub_327A0(v21, v22);

      return sub_327A0((uint64_t)v15, v16);
    }
    else
    {
      v28 = swift_retain(v14[1]);
      v29 = static Logger.purchases.getter(v28);
      v30 = Logger.logObject.getter(v29);
      v31 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v30, v31))
      {
        v32 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v32 = 0;
        _os_log_impl(&dword_0, v30, v31, "Resume called but there is no active authentication session.", v32, 2u);
        swift_slowDealloc(v32, -1, -1);
      }
      sub_327A0((uint64_t)v15, v16);

      return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v9, v3);
    }
  }
  else
  {
    v24 = static Logger.purchases.getter(v11);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, (os_log_type_t)v26))
    {
      v27 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v27 = 0;
      _os_log_impl(&dword_0, v25, (os_log_type_t)v26, "Resume called but there is no completion block to resume with.", v27, 2u);
      swift_slowDealloc(v27, -1, -1);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  }
}

uint64_t sub_7688C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v10;

  v1 = type metadata accessor for Logger(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = static Logger.purchases.getter(objc_msgSend(*(id *)(v0
                                                         + OBJC_IVAR____TtC8ShelfKit24WebAuthenticationSession_authenticationSession), "cancel"));
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl(&dword_0, v6, v7, "Canceled ASWebAuthenticationSession.", v8, 2u);
    swift_slowDealloc(v8, -1, -1);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
}

id sub_76990()
{
  return (id)sub_77130();
}

id LibraryTabElementGroupManager.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), "init");
}

void WebAuthenticationSession.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("ShelfKit.WebAuthenticationSession", 33, "init()", 6, 0);
  __break(1u);
}

id WebAuthenticationSession.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for WebAuthenticationSession(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_76B24(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, void *);
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v15;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
  __chkstk_darwin(v6);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(void (**)(char *, void *))(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  if (a2)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)(a2);
    v11 = type metadata accessor for URL(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v8, 0, 1, v11);
  }
  else
  {
    v12 = type metadata accessor for URL(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v8, 1, 1, v12);
  }
  swift_retain(v9);
  v13 = a3;
  v10(v8, a3);
  swift_release(v9);

  return sub_2828C((uint64_t)v8);
}

uint64_t block_copy_helper_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t block_destroy_helper_3(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_76C34(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_retain(a2);
  return result;
}

uint64_t sub_76C44(char *a1, void (*a2)(uint64_t *), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t (**v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  char *v20;
  __n128 v21;
  uint64_t v22;
  _QWORD *v23;
  id v24;
  char *v25;
  NSURL *v26;
  void *v27;
  void *v28;
  NSString v29;
  uint64_t v30;
  void *v31;
  id v32;
  uint64_t v33;
  void *v34;
  id v35;
  void *v36;
  id v37;
  id v38;
  char *v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  char *v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  void (*v57)(uint64_t *);
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD aBlock[5];
  _QWORD *v63;
  char v64[24];

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
  __chkstk_darwin(v6);
  v56 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Logger(0);
  v60 = *(_QWORD *)(v8 - 8);
  v61 = v8;
  v9 = __chkstk_darwin(v8);
  v59 = (char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v55 = (char *)&v55 - v11;
  v12 = type metadata accessor for URL(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v55 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = swift_allocObject(&unk_37BA60, 32, 7);
  v57 = a2;
  v58 = a3;
  *(_QWORD *)(v16 + 16) = a2;
  *(_QWORD *)(v16 + 24) = a3;
  v17 = (uint64_t (**)(uint64_t, uint64_t))&a1[OBJC_IVAR____TtC8ShelfKit24WebAuthenticationSession_startCompletion];
  v18 = *(_QWORD *)&a1[OBJC_IVAR____TtC8ShelfKit24WebAuthenticationSession_startCompletion];
  v19 = *(_QWORD *)&a1[OBJC_IVAR____TtC8ShelfKit24WebAuthenticationSession_startCompletion + 8];
  *v17 = sub_773CC;
  v17[1] = (uint64_t (*)(uint64_t, uint64_t))v16;
  swift_retain(a3);
  swift_retain(v16);
  sub_327A0(v18, v19);
  v20 = &a1[OBJC_IVAR____TtC8ShelfKit24WebAuthenticationSession_authorizationURL];
  v21 = swift_beginAccess(&a1[OBJC_IVAR____TtC8ShelfKit24WebAuthenticationSession_authorizationURL], v64, 0, 0);
  (*(void (**)(char *, char *, uint64_t, __n128))(v13 + 16))(v15, v20, v12, v21);
  v22 = *(_QWORD *)&a1[OBJC_IVAR____TtC8ShelfKit24WebAuthenticationSession_callbackURLScheme + 8];
  v23 = (_QWORD *)swift_allocObject(&unk_37BA88, 40, 7);
  v23[2] = sub_773CC;
  v23[3] = v16;
  v23[4] = a1;
  v24 = objc_allocWithZone((Class)ASWebAuthenticationSession);
  swift_retain(v16);
  swift_bridgeObjectRetain(v22);
  v25 = a1;
  URL._bridgeToObjectiveC()(v26);
  v28 = v27;
  v29 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  aBlock[4] = sub_77454;
  v63 = v23;
  v30 = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_76B24;
  aBlock[3] = &block_descriptor_11;
  v31 = _Block_copy(aBlock);
  v32 = objc_msgSend(v24, "initWithURL:callbackURLScheme:completionHandler:", v28, v29, v31);
  _Block_release(v31);

  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  swift_release(v63);
  v33 = OBJC_IVAR____TtC8ShelfKit24WebAuthenticationSession_authenticationSession;
  v34 = *(void **)&v25[OBJC_IVAR____TtC8ShelfKit24WebAuthenticationSession_authenticationSession];
  *(_QWORD *)&v25[OBJC_IVAR____TtC8ShelfKit24WebAuthenticationSession_authenticationSession] = v32;

  v35 = *(id *)&v25[v33];
  if (!v35)
    goto LABEL_6;
  objc_msgSend(v35, "setPresentationContextProvider:", v25);
  v35 = *(id *)&v25[v33];
  if (!v35)
    goto LABEL_6;
  v35 = objc_msgSend(v35, "setPrefersEphemeralWebBrowserSession:", 1);
  v36 = *(void **)&v25[v33];
  if (!v36)
    goto LABEL_6;
  v37 = v36;
  v38 = objc_msgSend(v37, "canStart");
  if ((_DWORD)v38)
  {

LABEL_6:
    v39 = v59;
    v40 = static Logger.purchases.getter(v35);
    v41 = Logger.logObject.getter(v40);
    v42 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v41, v42))
    {
      v43 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v43 = 0;
      _os_log_impl(&dword_0, v41, v42, "Starting the ASWebAuthenticationSession", v43, 2u);
      swift_slowDealloc(v43, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v60 + 8))(v39, v61);
    objc_msgSend(*(id *)&v25[v33], "start");
    return swift_release(v16);
  }
  v45 = v55;
  v46 = static Logger.purchases.getter(v38);
  v47 = Logger.logObject.getter(v46);
  v48 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v47, v48))
  {
    v49 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v49 = 0;
    _os_log_impl(&dword_0, v47, v48, "Cannot start the ASWebAuthenticationSession.", v49, 2u);
    swift_slowDealloc(v49, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v60 + 8))(v45, v61);
  v50 = (uint64_t)v56;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v56, 1, 1, v30);
  v51 = type metadata accessor for OAuthSessionError(0);
  v52 = sub_F1C0((unint64_t *)&qword_3B4378, (void (*)(uint64_t))&type metadata accessor for OAuthSessionError, (uint64_t)&protocol conformance descriptor for OAuthSessionError);
  v53 = swift_allocError(v51, v52, 0, 0);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v51 - 8) + 104))(v54, enum case for OAuthSessionError.cannotStart(_:), v51);
  sub_2969DC(v50, v53, v57);
  swift_errorRelease(v53);

  sub_2828C(v50);
  return swift_release(v16);
}

uint64_t sub_77130()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v12;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = static Logger.purchases.getter(v4);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl(&dword_0, v8, v9, "Displaying ASWebAuthenticationSession.", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  return *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit24WebAuthenticationSession_window);
}

uint64_t sub_77238()
{
  return type metadata accessor for WebAuthenticationSession(0);
}

uint64_t sub_77240(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  result = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_2EF3B0;
    v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[3] = &unk_2EF3C8;
    v4[4] = &unk_2EF3E0;
    result = swift_updateClassMetadata2(a1, 256, 5, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for WebAuthenticationSession(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for WebAuthenticationSession);
}

uint64_t dispatch thunk of WebAuthenticationSession.authorizationURL.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))&stru_68.segname[swift_isaMask & *v0])();
}

uint64_t dispatch thunk of WebAuthenticationSession.authorizationURL.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))&stru_68.segname[(swift_isaMask & *v0) + 8])();
}

uint64_t dispatch thunk of WebAuthenticationSession.authorizationURL.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))&stru_68.segname[(swift_isaMask & *v0) + 16])();
}

uint64_t dispatch thunk of WebAuthenticationSession.start(completion:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))&stru_B8.segname[swift_isaMask & *v0])();
}

uint64_t dispatch thunk of WebAuthenticationSession.resume(redirectURL:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))&stru_B8.segname[(swift_isaMask & *v0) + 8])();
}

uint64_t dispatch thunk of WebAuthenticationSession.cancel()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))&stru_B8.segname[(swift_isaMask & *v0) + 16])();
}

uint64_t dispatch thunk of WebAuthenticationSession.presentationAnchor(for:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_B8.size + (swift_isaMask & *v0)))();
}

uint64_t sub_773A8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_773CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_2969DC(a1, a2, *(void (**)(uint64_t *))(v2 + 16));
}

uint64_t objectdestroyTm_0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_77404()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_77428()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (uint64_t *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC8ShelfKit24WebAuthenticationSession_startCompletion);
  v2 = *v1;
  v3 = v1[1];
  *v1 = 0;
  v1[1] = 0;
  return sub_327A0(v2, v3);
}

_QWORD *sub_77458(uint64_t a1)
{
  int64_t v1;
  char *v3;
  char v4;
  id v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  void *object;
  unint64_t v10;
  char v11;
  uint64_t v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t countAndFlagsBits;
  Swift::String v21;
  Swift::String v22;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_180864(0, v1, 0);
    v3 = (char *)(a1 + 32);
    do
    {
      v4 = *v3;
      v5 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      if ((v4 & 1) != 0)
      {
        v21._object = (void *)0xEC00000073747361;
        v6._countAndFlagsBits = 0xD000000000000013;
        v6._object = (void *)0x800000000030C990;
        v7._countAndFlagsBits = 0;
        v7._object = (void *)0xE000000000000000;
        v21._countAndFlagsBits = 0x63646F50206C6C41;
        v8 = NSLocalizedString(_:tableName:bundle:value:comment:)(v6, (Swift::String_optional)0, (NSBundle)v5, v7, v21);
        countAndFlagsBits = v8._countAndFlagsBits;
        object = v8._object;

        v10 = 0xE500000000000000;
        v11 = _stringCompareWithSmolCheck(_:_:expecting:)(0x65726F7473, 0xE500000000000000, 0x7972617262696CLL, 0xE700000000000000, 0);
        swift_bridgeObjectRelease();
        v12 = 0x65726F7473;
      }
      else
      {
        v13._countAndFlagsBits = 0xD000000000000015;
        v22._object = (void *)0xEC00000079726172;
        v13._object = (void *)0x800000000030C9B0;
        v14._countAndFlagsBits = 0;
        v14._object = (void *)0xE000000000000000;
        v22._countAndFlagsBits = 0x62694C2072756F59;
        v15 = NSLocalizedString(_:tableName:bundle:value:comment:)(v13, (Swift::String_optional)0, (NSBundle)v5, v14, v22);
        countAndFlagsBits = v15._countAndFlagsBits;
        object = v15._object;
        v10 = 0xE700000000000000;
        swift_bridgeObjectRelease();

        v11 = 1;
        v12 = 0x7972617262696CLL;
      }
      v17 = _swiftEmptyArrayStorage[2];
      v16 = _swiftEmptyArrayStorage[3];
      if (v17 >= v16 >> 1)
        sub_180864(v16 > 1, v17 + 1, 1);
      _swiftEmptyArrayStorage[2] = v17 + 1;
      v18 = &_swiftEmptyArrayStorage[5 * v17];
      v18[4] = v12;
      v18[5] = v10;
      v18[6] = countAndFlagsBits;
      v18[7] = object;
      *((_BYTE *)v18 + 64) = v11 & 1;
      ++v3;
      --v1;
    }
    while (v1);
  }
  return _swiftEmptyArrayStorage;
}

uint64_t SearchPresenter.pageContent.getter()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + 128));
}

uint64_t Review.response.getter()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + 136));
}

uint64_t sub_776AC()
{
  uint64_t v0;
  _QWORD *boxed_opaque_existential_2Tm;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[5];

  v0 = type metadata accessor for Podcasts(0);
  v11[3] = v0;
  v11[4] = sub_F1C0((unint64_t *)&qword_3B33B8, (void (*)(uint64_t))&type metadata accessor for Podcasts, (uint64_t)&protocol conformance descriptor for Podcasts);
  boxed_opaque_existential_2Tm = __swift_allocate_boxed_opaque_existential_2Tm(v11);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v0 - 8) + 104))(boxed_opaque_existential_2Tm, enum case for Podcasts.profilePictureAllTabs(_:), v0);
  LOBYTE(v0) = isFeatureEnabled(_:)(v11);
  __swift_destroy_boxed_opaque_existential_1(v11);
  if ((v0 & 1) != 0)
  {
    v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8800);
    v3 = type metadata accessor for HeaderButtonItem(0);
    v4 = *(_QWORD *)(v3 - 8);
    v5 = *(_QWORD *)(v4 + 72);
    v6 = *(unsigned __int8 *)(v4 + 80);
    v7 = (v6 + 32) & ~v6;
    v8 = swift_allocObject(v2, v7 + v5, v6 | 7);
    *(_OWORD *)(v8 + 16) = xmmword_2EA0D0;
    *(_BYTE *)(v8 + v7) = 1;
    swift_storeEnumTagMultiPayload(v8 + v7, v3, 9);
    v11[0] = v8;
  }
  else
  {
    v11[0] = _swiftEmptyArrayStorage;
  }
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8780);
  swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  return CurrentValueSubject.init(_:)(v11);
}

uint64_t Review.moreAction.getter()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + 144));
}

uint64_t SearchPresenter.pageExtensions.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 152);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 152);
  }
  else
  {
    v3 = v0;
    v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BC590);
    v5 = swift_allocObject(v4, 40, 7);
    *(_OWORD *)(v5 + 16) = xmmword_2EF430;
    v6 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit15SearchPresenter_searchExtension);
    *(_QWORD *)(v5 + 32) = v6;
    v8 = v5;
    specialized Array._endMutation()(v5);
    v2 = v8;
    *(_QWORD *)(v3 + 152) = v8;
    swift_retain(v6);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRelease();
    v1 = 0;
  }
  swift_bridgeObjectRetain(v1);
  return v2;
}

uint64_t SearchPresenter.pageExtensions.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 152);
  *(_QWORD *)(v1 + 152) = a1;
  return swift_bridgeObjectRelease(v2);
}

uint64_t (*SearchPresenter.pageExtensions.modify(uint64_t *a1))(uint64_t *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = SearchPresenter.pageExtensions.getter();
  return sub_778D8;
}

uint64_t sub_778D8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v1 = a1[1];
  v3 = *(_QWORD *)(v1 + 152);
  *(_QWORD *)(v1 + 152) = v2;
  return swift_bridgeObjectRelease(v3);
}

uint64_t SearchPresenter.__allocating_init(asPartOf:with:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  SearchPresenter.init(asPartOf:with:)(a1);
  return v3;
}

uint64_t SearchPresenter.init(asPartOf:with:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t ShelvesController;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t countAndFlagsBits;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v63;
  Swift::String v64;
  uint64_t v65;
  unint64_t v66;
  Swift::String v67;

  v2 = v1;
  v4 = type metadata accessor for ExtendedLaunchStatus(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for PageContent(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for SearchContent(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v63 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v2 + 24) = 0;
  swift_storeEnumTagMultiPayload(v13, v14, 5);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4440);
  swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
  *(_QWORD *)(v2 + 112) = CurrentValueSubject.init(_:)(v13);
  *v10 = 0;
  swift_storeEnumTagMultiPayload(v10, v8, 0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B27B0);
  swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
  *(_QWORD *)(v2 + 120) = CurrentValueSubject.init(_:)(v10);
  *v10 = 0;
  swift_storeEnumTagMultiPayload(v10, v8, 0);
  swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
  *(_QWORD *)(v2 + 128) = CurrentValueSubject.init(_:)(v10);
  v17 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v67._object = (void *)0xE600000000000000;
  v18._countAndFlagsBits = 0x45535F454C544954;
  v18._object = (void *)0xEC00000048435241;
  v19._countAndFlagsBits = 0;
  v19._object = (void *)0xE000000000000000;
  v67._countAndFlagsBits = 0x686372616553;
  v20 = NSLocalizedString(_:tableName:bundle:value:comment:)(v18, (Swift::String_optional)0, (NSBundle)v17, v19, v67);

  v64 = v20;
  LODWORD(v65) = 0;
  BYTE4(v65) = 3;
  v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8770);
  swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
  *(_QWORD *)(v2 + 136) = CurrentValueSubject.init(_:)(&v64);
  *(_QWORD *)(v2 + 144) = sub_776AC();
  *(_QWORD *)(v2 + 152) = 0;
  *(_QWORD *)(v2 + 160) = 0;
  *(_QWORD *)(v2 + 168) = 0;
  *(_BYTE *)(v2 + 176) = 0;
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for ExtendedLaunchStatus.loading(_:), v4);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4448);
  swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
  *(_QWORD *)(v2 + 184) = CurrentValueSubject.init(_:)(v7);
  v23 = v2 + OBJC_IVAR____TtC8ShelfKit15SearchPresenter_interactionContextPage;
  v24 = type metadata accessor for InteractionContext.Page(0);
  swift_storeEnumTagMultiPayload(v23, v24, 15);
  v25 = OBJC_IVAR____TtC8ShelfKit15SearchPresenter_filters;
  v64._countAndFlagsBits = (uint64_t)_swiftEmptyArrayStorage;
  v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4450);
  swift_allocObject(v26, *(unsigned int *)(v26 + 48), *(unsigned __int16 *)(v26 + 52));
  *(_QWORD *)(v2 + v25) = CurrentValueSubject.init(_:)(&v64);
  v27 = OBJC_IVAR____TtC8ShelfKit15SearchPresenter_selectedFilter;
  v64._countAndFlagsBits = 0;
  v64._object = (void *)0xE000000000000000;
  v65 = 0;
  v66 = 0xE000000000000000;
  v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4458);
  swift_allocObject(v28, *(unsigned int *)(v28 + 48), *(unsigned __int16 *)(v28 + 52));
  *(_QWORD *)(v2 + v27) = CurrentValueSubject.init(_:)(&v64);
  v29 = OBJC_IVAR____TtC8ShelfKit15SearchPresenter_filteringEnabled;
  LOBYTE(v64._countAndFlagsBits) = 0;
  v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B20D0);
  swift_allocObject(v30, *(unsigned int *)(v30 + 48), *(unsigned __int16 *)(v30 + 52));
  *(_QWORD *)(v2 + v29) = CurrentValueSubject.init(_:)(&v64);
  v31 = v2 + OBJC_IVAR____TtC8ShelfKit15SearchPresenter_nextPage;
  v32 = type metadata accessor for JSONObject(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v31, 1, 1, v32);
  *(_BYTE *)(v2 + OBJC_IVAR____TtC8ShelfKit15SearchPresenter_isPreparingFilterSelection) = 0;
  *(_BYTE *)(v2 + OBJC_IVAR____TtC8ShelfKit15SearchPresenter_isPreparingNextPage) = 0;
  v33 = OBJC_IVAR____TtC8ShelfKit15SearchPresenter_searchExtension;
  if (qword_3B0198 != -1)
    swift_once(&qword_3B0198, sub_1960D4);
  v34 = swift_bridgeObjectRetain(off_3BF280[0]);
  v35 = sub_77458(v34);
  swift_bridgeObjectRelease();
  v36 = type metadata accessor for SearchExtension();
  v37 = swift_allocObject(v36, 65, 7);
  v38 = sub_11E824((uint64_t)v35, 0, v37);
  swift_release(v37);
  *(_QWORD *)(v2 + v33) = v38;
  *(_QWORD *)(v2 + OBJC_IVAR____TtC8ShelfKit15SearchPresenter_subscriptions) = _swiftEmptyArrayStorage;
  v39 = OBJC_IVAR____TtC8ShelfKit15SearchPresenter_scrollToTop;
  LOBYTE(v64._countAndFlagsBits) = 0;
  swift_allocObject(v30, *(unsigned int *)(v30 + 48), *(unsigned __int16 *)(v30 + 52));
  *(_QWORD *)(v2 + v39) = CurrentValueSubject.init(_:)(&v64);
  v40 = OBJC_IVAR____TtC8ShelfKit15SearchPresenter_showingLanding;
  LOBYTE(v64._countAndFlagsBits) = 1;
  swift_allocObject(v30, *(unsigned int *)(v30 + 48), *(unsigned __int16 *)(v30 + 52));
  *(_QWORD *)(v2 + v40) = CurrentValueSubject.init(_:)(&v64);
  v41 = OBJC_IVAR____TtC8ShelfKit15SearchPresenter_hasRecentlySearchedItems;
  LOBYTE(v64._countAndFlagsBits) = 0;
  swift_allocObject(v30, *(unsigned int *)(v30 + 48), *(unsigned __int16 *)(v30 + 52));
  *(_QWORD *)(v2 + v41) = CurrentValueSubject.init(_:)(&v64);
  *(_BYTE *)(v2 + OBJC_IVAR____TtC8ShelfKit15SearchPresenter_scope) = 1;
  v42 = OBJC_IVAR____TtC8ShelfKit15SearchPresenter_showsHeaders;
  sub_327F8(0, &qword_3B4490, UITraitCollection_ptr);
  *(_BYTE *)(v2 + v42) = static UITraitCollection.interfaceIdiomIsMac.getter() & 1;
  *(_BYTE *)(v2 + OBJC_IVAR____TtC8ShelfKit15SearchPresenter_userHitSearch) = 0;
  *(_BYTE *)(v2 + OBJC_IVAR____TtC8ShelfKit15SearchPresenter_userSelectedHint) = 0;
  v43 = (_QWORD *)(v2 + OBJC_IVAR____TtC8ShelfKit15SearchPresenter_previousTerm);
  *v43 = 0;
  v43[1] = 0xE000000000000000;
  v44 = OBJC_IVAR____TtC8ShelfKit15SearchPresenter_isNetworkReachable;
  LOBYTE(v64._countAndFlagsBits) = 1;
  swift_allocObject(v30, *(unsigned int *)(v30 + 48), *(unsigned __int16 *)(v30 + 52));
  *(_QWORD *)(v2 + v44) = CurrentValueSubject.init(_:)(&v64);
  *(_QWORD *)(v2 + 16) = a1;
  v45 = type metadata accessor for RecentlySearchedStorage();
  swift_retain(a1);
  BaseObjectGraph.injectIfAvailable<A>(_:)(v45, v45);
  *(_QWORD *)(v2 + 32) = v64._countAndFlagsBits;
  v46 = type metadata accessor for SearchFiltersSource(0);
  BaseObjectGraph.injectIfAvailable<A>(_:)(v46, v46);
  *(_QWORD *)(v2 + 48) = v64._countAndFlagsBits;
  v47 = type metadata accessor for MetricsController(0);
  BaseObjectGraph.injectIfAvailable<A>(_:)(v47, v47);
  v48 = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(v2 + 24) = v64._countAndFlagsBits;
  swift_release(v48);
  v49 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BE9F0);
  BaseObjectGraph.inject<A>(_:)(&v64, v49, v49);
  sub_F4D8((__int128 *)&v64._countAndFlagsBits, v2 + 56);
  v50 = type metadata accessor for RecommendationsMetadataProvider(0);
  BaseObjectGraph.injectIfAvailable<A>(_:)(v50, v50);
  *(_QWORD *)(v2 + 96) = v64._countAndFlagsBits;
  v51 = type metadata accessor for SearchController(0);
  swift_allocObject(v51, *(unsigned int *)(v51 + 48), *(unsigned __int16 *)(v51 + 52));
  swift_retain(a1);
  v52 = sub_28FEBC();
  swift_release(a1);
  *(_QWORD *)(v2 + 40) = v52;
  ShelvesController = type metadata accessor for ProgressivelyLoadShelvesController();
  v54 = (_QWORD *)swift_allocObject(ShelvesController, 88, 7);
  v54[7] = _swiftEmptyArrayStorage;
  v54[8] = _swiftEmptyArrayStorage;
  v54[9] = &_swiftEmptyDictionarySingleton;
  v64._countAndFlagsBits = 0;
  v55 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2990);
  swift_allocObject(v55, *(unsigned int *)(v55 + 48), *(unsigned __int16 *)(v55 + 52));
  swift_retain(a1);
  v54[10] = CurrentValueSubject.init(_:)(&v64);
  v56 = type metadata accessor for BaseObjectGraph(0);
  inject<A, B>(_:from:)(&v64, v49, a1, v49, v56);
  sub_F4D8((__int128 *)&v64._countAndFlagsBits, (uint64_t)(v54 + 2));
  swift_release(a1);
  *(_QWORD *)(v2 + OBJC_IVAR____TtC8ShelfKit15SearchPresenter_shelfController) = v54;
  type metadata accessor for NetworkObserver();
  v57 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B44B8);
  swift_retain(a1);
  BaseObjectGraph.inject<A>(_:)(&v64, v57, v57);
  countAndFlagsBits = v64._countAndFlagsBits;
  swift_getObjectType();
  v59 = sub_2BA0CC(countAndFlagsBits);
  swift_release(a1);
  *(_QWORD *)(v2 + OBJC_IVAR____TtC8ShelfKit15SearchPresenter_networkObserver) = v59;
  if (objc_msgSend((id)objc_opt_self(PFClientUtil), "supportsLocalLibrary"))
  {
    v60 = type metadata accessor for AddFavoriteCategoriesSearchTipProvider();
    swift_allocObject(v60, 64, 7);
    v61 = AddFavoriteCategoriesSearchTipProvider.init(asPartOf:)(a1);
  }
  else
  {
    swift_release(a1);
    v61 = 0;
  }
  *(_QWORD *)(v2 + 104) = v61;
  return v2;
}

BOOL SearchPresenter.animateSectionChanges.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  unint64_t v4;
  BOOL v5;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit15SearchPresenter_searchExtension) + 24);
  v2 = swift_retain(v1);
  CurrentValueSubject.value.getter(&v8, v2);
  swift_release(v1);
  if (!v9)
    return 0;
  v3 = v12;
  if ((v9 & 0x2000000000000000) != 0)
    v4 = HIBYTE(v9) & 0xF;
  else
    v4 = v8 & 0xFFFFFFFFFFFFLL;
  sub_80030(v8, v9, v10, v11);
  if (v4)
    v5 = 0;
  else
    v5 = v3 == 0;
  return v5 || v3 == 3;
}

uint64_t SearchPresenter.hasLoadedContent.getter()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + 184));
}

id SearchPresenter.dependenciesDidChange(_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  uint64_t v9;

  v2 = v1[2];
  v1[2] = a1;
  swift_retain(a1);
  swift_release(v2);
  v3 = type metadata accessor for MetricsController(0);
  BaseObjectGraph.injectIfAvailable<A>(_:)(v3, v3);
  v4 = v1[3];
  v1[3] = v9;
  swift_release(v4);
  v5 = *(_QWORD *)(v1[5] + 16);
  v6 = v5 + *(_QWORD *)(class metadata base offset for ManagedBuffer + *(_QWORD *)v5 + 16);
  v7 = (os_unfair_lock_s *)(v5 + ((*(unsigned int *)(*(_QWORD *)v5 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v7);
  sub_28D5E0(v6);
  os_unfair_lock_unlock(v7);
  return objc_msgSend((id)objc_opt_self(PFClientUtil), "supportsLocalLibrary");
}

uint64_t SearchPresenter.interactionContextPage.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_14510(v1 + OBJC_IVAR____TtC8ShelfKit15SearchPresenter_interactionContextPage, a1, (uint64_t (*)(_QWORD))&type metadata accessor for InteractionContext.Page);
}

uint64_t SearchPresenter.filters.getter()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit15SearchPresenter_filters));
}

uint64_t SearchPresenter.selectedFilter.getter()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit15SearchPresenter_selectedFilter));
}

uint64_t SearchPresenter.filteringEnabled.getter()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit15SearchPresenter_filteringEnabled));
}

uint64_t SearchPresenter.isPreparingNextPage.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;
  _BYTE v3[24];

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC8ShelfKit15SearchPresenter_isPreparingNextPage);
  swift_beginAccess(v0 + OBJC_IVAR____TtC8ShelfKit15SearchPresenter_isPreparingNextPage, v3, 0, 0);
  return *v1;
}

uint64_t SearchPresenter.scrollToTop.getter()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit15SearchPresenter_scrollToTop));
}

uint64_t SearchPresenter.showsHeaders.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;
  _BYTE v3[24];

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC8ShelfKit15SearchPresenter_showsHeaders);
  swift_beginAccess(v0 + OBJC_IVAR____TtC8ShelfKit15SearchPresenter_showsHeaders, v3, 0, 0);
  return *v1;
}

uint64_t SearchPresenter.showsHeaders.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;
  _BYTE v5[24];

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC8ShelfKit15SearchPresenter_showsHeaders);
  result = swift_beginAccess(v3, v5, 1, 0);
  *v3 = a1;
  return result;
}

uint64_t (*SearchPresenter.showsHeaders.modify(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC8ShelfKit15SearchPresenter_showsHeaders, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t SearchPresenter.userHitSearch.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;
  _BYTE v3[24];

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC8ShelfKit15SearchPresenter_userHitSearch);
  swift_beginAccess(v0 + OBJC_IVAR____TtC8ShelfKit15SearchPresenter_userHitSearch, v3, 0, 0);
  return *v1;
}

uint64_t SearchPresenter.userHitSearch.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;
  _BYTE v5[24];

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC8ShelfKit15SearchPresenter_userHitSearch);
  result = swift_beginAccess(v3, v5, 1, 0);
  *v3 = a1;
  return result;
}

uint64_t (*SearchPresenter.userHitSearch.modify(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC8ShelfKit15SearchPresenter_userHitSearch, a1, 33, 0);
  return j__swift_endAccess;
}

Swift::Void __swiftcall SearchPresenter.viewDidLoad()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  _QWORD *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  char *v163;
  char *v164;
  char *v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  _QWORD *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  char *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  unint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  char *v224;
  uint64_t v225;
  char *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  _QWORD *v234;
  _QWORD *v235;
  uint64_t v236;
  uint64_t v237;
  char *v238;
  uint64_t v239;
  uint64_t v240;
  char *v241;
  char *v242;
  uint64_t v243;
  uint64_t v244;
  char *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  char *v250;
  uint64_t v251;
  char *v252;
  uint64_t v253;
  char *v254;
  uint64_t v255;
  char *v256;
  uint64_t v257;
  uint64_t v258;
  char *v259;
  char *v260;
  unint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  char *v267;
  char *v268;
  uint64_t v269;
  char *v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  char *v274;
  uint64_t v275;
  uint64_t v276;
  char *v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  char *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  char *v285;
  uint64_t v286;
  uint64_t v287;
  char *v288;
  uint64_t v289;
  uint64_t v290;
  char *v291;
  uint64_t v292;
  uint64_t v293;
  char *v294;
  uint64_t v295;
  uint64_t v296;
  char *v297;
  uint64_t v298;
  uint64_t v299;
  char *v300;
  uint64_t v301;
  uint64_t v302;
  char *v303;
  char *v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  char *v309;
  uint64_t v310;
  uint64_t v311;
  char *v312;
  uint64_t v313;
  uint64_t v314;
  char *v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  unint64_t v319;
  _QWORD *v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  char *v326;
  uint64_t v327;
  char *v328;
  _QWORD *v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  _OWORD v334[2];
  char v335;
  uint64_t v336;

  v1 = v0;
  v314 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B20F8);
  v313 = *(_QWORD *)(v314 - 8);
  __chkstk_darwin(v314);
  v312 = (char *)&v238 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v317 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B44C8);
  v316 = *(_QWORD *)(v317 - 8);
  __chkstk_darwin(v317);
  v315 = (char *)&v238 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v306 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(0);
  v305 = *(_QWORD *)(v306 - 8);
  __chkstk_darwin(v306);
  v303 = (char *)&v238 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v290 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B44D0);
  v289 = *(_QWORD *)(v290 - 8);
  __chkstk_darwin(v290);
  v288 = (char *)&v238 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v293 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B44D8);
  v292 = *(_QWORD *)(v293 - 8);
  __chkstk_darwin(v293);
  v291 = (char *)&v238 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v296 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B44E0);
  v295 = *(_QWORD *)(v296 - 8);
  __chkstk_darwin(v296);
  v294 = (char *)&v238 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v299 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B44E8);
  v298 = *(_QWORD *)(v299 - 8);
  __chkstk_darwin(v299);
  v297 = (char *)&v238 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v302 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B44F0);
  v301 = *(_QWORD *)(v302 - 8);
  __chkstk_darwin(v302);
  v300 = (char *)&v238 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v308 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B44F8);
  v307 = *(_QWORD *)(v308 - 8);
  __chkstk_darwin(v308);
  v304 = (char *)&v238 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v311 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4500);
  v310 = *(_QWORD *)(v311 - 8);
  __chkstk_darwin(v311);
  v309 = (char *)&v238 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v282 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4508);
  __chkstk_darwin(v282);
  v281 = (char *)&v238 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v287 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4510);
  v286 = *(_QWORD *)(v287 - 8);
  __chkstk_darwin(v287);
  v285 = (char *)&v238 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v271 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4518);
  v269 = *(_QWORD *)(v271 - 8);
  __chkstk_darwin(v271);
  v267 = (char *)&v238 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v273 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4520);
  v272 = *(_QWORD *)(v273 - 8);
  __chkstk_darwin(v273);
  v270 = (char *)&v238 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v276 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4528);
  v275 = *(_QWORD *)(v276 - 8);
  __chkstk_darwin(v276);
  v274 = (char *)&v238 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v279 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4530);
  v278 = *(_QWORD *)(v279 - 8);
  __chkstk_darwin(v279);
  v277 = (char *)&v238 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v244 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4538);
  v243 = *(_QWORD *)(v244 - 8);
  __chkstk_darwin(v244);
  v242 = (char *)&v238 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v247 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4540);
  v246 = *(_QWORD *)(v247 - 8);
  __chkstk_darwin(v247);
  v245 = (char *)&v238 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2B18);
  __chkstk_darwin(v20);
  v328 = (char *)&v238 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v327 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4548);
  __chkstk_darwin(v327);
  v326 = (char *)&v238 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v318 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4550);
  v251 = *(_QWORD *)(v318 - 8);
  __chkstk_darwin(v318);
  v250 = (char *)&v238 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v323 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4558);
  v255 = *(_QWORD *)(v323 - 8);
  __chkstk_darwin(v323);
  v254 = (char *)&v238 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v258 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4560);
  v257 = *(_QWORD *)(v258 - 8);
  __chkstk_darwin(v258);
  v256 = (char *)&v238 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v240 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4568);
  v239 = *(_QWORD *)(v240 - 8);
  __chkstk_darwin(v240);
  v238 = (char *)&v238 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v249 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4570);
  v248 = *(_QWORD *)(v249 - 8);
  __chkstk_darwin(v249);
  v241 = (char *)&v238 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v325 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4578);
  __chkstk_darwin(v325);
  v29 = (char *)&v238 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v280 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4580);
  v319 = *(_QWORD *)(v280 - 8);
  __chkstk_darwin(v280);
  v252 = (char *)&v238 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v320 = (_QWORD *)__swift_instantiateConcreteTypeFromMangledName(&qword_3B4588);
  v324 = *(v320 - 1);
  __chkstk_darwin(v320);
  v259 = (char *)&v238 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4590);
  v33 = *(_QWORD *)(v32 - 8);
  v321 = v32;
  v322 = v33;
  __chkstk_darwin(v32);
  v260 = (char *)&v238 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v329 = *(_QWORD **)(v0 + OBJC_IVAR____TtC8ShelfKit15SearchPresenter_searchExtension);
  v35 = v329[5];
  LOBYTE(v334[0]) = 1;
  swift_retain(v35);
  CurrentValueSubject.value.setter(v334);
  swift_release(v35);
  *(_QWORD *)&v334[0] = *(_QWORD *)(v1 + 112);
  v36 = *(_QWORD *)&v334[0];
  v37 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit15SearchPresenter_filters);
  v38 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit15SearchPresenter_selectedFilter);
  v39 = swift_allocObject(&unk_37BB28, 32, 7);
  *(_QWORD *)(v39 + 16) = v37;
  *(_QWORD *)(v39 + 24) = v38;
  swift_retain(v36);
  swift_retain(v37);
  swift_retain(v38);
  v40 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4440);
  v41 = sub_32914(&qword_3B4598, &qword_3B4440, (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
  v42 = Publisher<>.sink(receiveValue:)(sub_80064, v39, v40, v41);
  swift_release(v39);
  swift_release(*(_QWORD *)&v334[0]);
  v43 = v1 + OBJC_IVAR____TtC8ShelfKit15SearchPresenter_subscriptions;
  swift_beginAccess(v1 + OBJC_IVAR____TtC8ShelfKit15SearchPresenter_subscriptions, v334, 33, 0);
  v44 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2088);
  v45 = sub_32914(&qword_3B2090, &qword_3B2088, (uint64_t)&protocol conformance descriptor for [A]);
  v332 = v44;
  v333 = v43;
  v331 = v45;
  AnyCancellable.store<A>(in:)(v43, v44, v45);
  swift_endAccess(v334);
  swift_release(v42);
  *(_QWORD *)&v334[0] = v36;
  v266 = v38;
  v336 = v38;
  v284 = v36;
  swift_retain(v36);
  v46 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4458);
  v47 = sub_32914(&qword_3B45A0, &qword_3B4458, (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
  v48 = sub_8006C();
  v263 = v46;
  v262 = v47;
  v261 = v48;
  Publisher<>.removeDuplicates()(v46, v47, v48);
  v49 = sub_32914(&qword_3B45B0, &qword_3B4578, (uint64_t)&protocol conformance descriptor for Publishers.RemoveDuplicates<A>);
  v50 = v252;
  v268 = v29;
  v283 = v40;
  v264 = v49;
  Publishers.CombineLatest.init(_:_:)(v334, v29, v40, v325, v41, v49);
  v51 = swift_allocObject(&unk_37BB50, 24, 7);
  swift_weakInit(v51 + 16);
  v52 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit15SearchPresenter_shelfController);
  v53 = *(_QWORD *)(v1 + 48);
  v54 = v1;
  v55 = (_QWORD *)swift_allocObject(&unk_37BB78, 40, 7);
  v55[2] = v53;
  v55[3] = v51;
  v55[4] = v52;
  v56 = swift_allocObject(&unk_37BBA0, 32, 7);
  *(_QWORD *)(v56 + 16) = sub_800D8;
  *(_QWORD *)(v56 + 24) = v55;
  v265 = v53;
  swift_retain(v53);
  swift_retain(v52);
  v57 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B45B8);
  v58 = sub_32914(&qword_3B45C0, &qword_3B4580, (uint64_t)&protocol conformance descriptor for Publishers.CombineLatest<A, B>);
  v59 = v259;
  v60 = v280;
  Publisher.map<A>(_:)(sub_800E4, v56, v280, v57, v58);
  swift_release(v56);
  (*(void (**)(char *, uint64_t))(v319 + 8))(v50, v60);
  v61 = sub_32914(&qword_3B45C8, &qword_3B4588, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v62 = sub_32914(&qword_3B45D0, &qword_3B45B8, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v63 = v260;
  v64 = v320;
  Publisher<>.switchToLatest()(v320, v61, v62);
  (*(void (**)(char *, _QWORD *))(v324 + 8))(v59, v64);
  v65 = sub_32914(&qword_3B45D8, &qword_3B4590, (uint64_t)&protocol conformance descriptor for Publishers.SwitchToLatest<A, B>);
  v66 = v321;
  v324 = Publisher.eraseToAnyPublisher()(v321, v65);
  (*(void (**)(char *, uint64_t))(v322 + 8))(v63, v66);
  v330 = v54;
  v67 = *(_QWORD *)(v54 + 32);
  v253 = v57;
  v252 = (char *)v62;
  if (v67)
  {
    v68 = *(_QWORD *)(v67 + 88);
    swift_retain(v67);
    swift_retain(v68);
    v69 = sub_2ACC8();
    swift_release(v68);
    *(_QWORD *)&v334[0] = v69;
    v70 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4610);
    v71 = sub_32914(&qword_3B4620, &qword_3B4610, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
    v72 = sub_16138(&qword_3B4710, (uint64_t *)&unk_3B1E68, (void (*)(void))sub_313B0, (uint64_t)&protocol conformance descriptor for <A> [A]);
    v73 = v241;
    Publisher<>.removeDuplicates()(v70, v71, v72);
    swift_release(v69);
    v74 = sub_32914(&qword_3B4718, &qword_3B4570, (uint64_t)&protocol conformance descriptor for Publishers.RemoveDuplicates<A>);
    v75 = v249;
    v76 = Publisher.eraseToAnyPublisher()(v249, v74);
    swift_release(v67);
    (*(void (**)(char *, uint64_t))(v248 + 8))(v73, v75);
  }
  else
  {
    *(_QWORD *)&v334[0] = _swiftEmptyArrayStorage;
    v77 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B1E68);
    v78 = v238;
    Just.init(_:)(v334, v77);
    v79 = sub_32914(&qword_3B45E0, &qword_3B4568, (uint64_t)&protocol conformance descriptor for Just<A>);
    v80 = v240;
    v76 = Publisher.eraseToAnyPublisher()(v240, v79);
    (*(void (**)(char *, uint64_t))(v239 + 8))(v78, v80);
  }
  *(_QWORD *)&v334[0] = v329[3];
  v81 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B45E8);
  v82 = sub_32914(&qword_3B45F0, &qword_3B45E8, (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
  v83 = sub_16138(&qword_3B45F8, &qword_3B4600, (void (*)(void))sub_80138, (uint64_t)&protocol conformance descriptor for <A> A?);
  v84 = v326;
  v260 = (char *)v81;
  v259 = (char *)v82;
  v249 = v83;
  Publisher<>.removeDuplicates()(v81, v82, v83);
  *(_QWORD *)&v334[0] = v76;
  v280 = v76;
  swift_retain(v76);
  v85 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4610);
  v86 = sub_32914(&qword_3B4618, &qword_3B4548, (uint64_t)&protocol conformance descriptor for Publishers.RemoveDuplicates<A>);
  v87 = sub_32914(&qword_3B4620, &qword_3B4610, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v88 = v250;
  v248 = v86;
  Publishers.CombineLatest.init(_:_:)(v84, v334, v327, v85, v86, v87);
  v89 = sub_327F8(0, (unint64_t *)&qword_3B8710, OS_dispatch_queue_ptr);
  *(_QWORD *)&v334[0] = static OS_dispatch_queue.main.getter(v89);
  v90 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  v91 = (uint64_t)v328;
  v320 = *(_QWORD **)(*(_QWORD *)(v90 - 8) + 56);
  v321 = v90;
  ((void (*)(char *, uint64_t, uint64_t))v320)(v328, 1, 1);
  v92 = sub_32914(&qword_3B4628, &qword_3B4550, (uint64_t)&protocol conformance descriptor for Publishers.CombineLatest<A, B>);
  v93 = sub_436CC();
  v94 = v254;
  v95 = v318;
  v322 = v89;
  v319 = v93;
  Publisher.receive<A>(on:options:)(v334, v91, v318, v89, v92, v93);
  sub_1459C(v91, &qword_3B2B18);

  (*(void (**)(char *, uint64_t))(v251 + 8))(v88, v95);
  v96 = swift_allocObject(&unk_37BB50, 24, 7);
  v97 = v330;
  swift_weakInit(v96 + 16);
  v98 = *(_QWORD *)(v97 + OBJC_IVAR____TtC8ShelfKit15SearchPresenter_showingLanding);
  v99 = swift_allocObject(&unk_37BBC8, 32, 7);
  *(_QWORD *)(v99 + 16) = v96;
  *(_QWORD *)(v99 + 24) = v98;
  v100 = swift_allocObject(&unk_37BBF0, 32, 7);
  *(_QWORD *)(v100 + 16) = sub_80180;
  *(_QWORD *)(v100 + 24) = v99;
  v101 = sub_32914(&qword_3B4630, &qword_3B4558, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  swift_retain(v98);
  v102 = v256;
  v103 = v323;
  Publisher.map<A>(_:)(sub_801AC, v100, v323, &type metadata for Bool, v101);
  swift_release(v100);
  (*(void (**)(char *, uint64_t))(v255 + 8))(v94, v103);
  v104 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B20D0);
  v105 = sub_32914(&qword_3B4638, &qword_3B4560, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v106 = sub_32914(&qword_3B4640, &qword_3B20D0, (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
  v107 = v98;
  v108 = v258;
  v323 = v104;
  v109 = Publisher.subscribe<A>(_:)(v98, v258, v104, v105, v106);
  (*(void (**)(char *, uint64_t))(v257 + 8))(v102, v108);
  v110 = v333;
  swift_beginAccess(v333, v334, 33, 0);
  v111 = v331;
  v112 = v332;
  AnyCancellable.store<A>(in:)(v110, v332, v331);
  swift_endAccess(v334);
  swift_release(v109);
  *(_QWORD *)&v334[0] = *(_QWORD *)(v97 + 120);
  v113 = *(_QWORD *)&v334[0];
  v114 = swift_allocObject(&unk_37BB50, 24, 7);
  swift_weakInit(v114 + 16);
  swift_retain(v113);
  v115 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B27B0);
  v116 = sub_32914(&qword_3B27C0, &qword_3B27B0, (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
  v117 = Publisher<>.sink(receiveValue:)(sub_801DC, v114, v115, v116);
  swift_release(v114);
  swift_release(*(_QWORD *)&v334[0]);
  swift_beginAccess(v110, v334, 33, 0);
  AnyCancellable.store<A>(in:)(v110, v112, v111);
  swift_endAccess(v334);
  swift_release(v117);
  v118 = *(_QWORD *)(v97 + 104);
  *(_QWORD *)&v334[0] = v113;
  if (v118)
  {
    swift_retain(v118);
    *(_QWORD *)&v334[0] = Publisher.eraseToAnyPublisher()(v115, v116);
    v119 = AddFavoriteCategoriesSearchTipProvider.addFavoriteCategoriesSearchTipShelf.getter();
    v336 = v119;
    v120 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B35B8);
    v121 = sub_32914(&qword_3B35C0, &qword_3B35B8, (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
    v122 = Publisher.eraseToAnyPublisher()(v120, v121);
    swift_release(v119);
    v336 = v122;
    v123 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B36F0);
    v124 = sub_32914(&qword_3B36F8, &qword_3B36F0, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
    v125 = v242;
    v126 = v253;
    v127 = v252;
    Publishers.CombineLatest.init(_:_:)(v334, &v336, v253, v123, v252, v124);
    v128 = type metadata accessor for PageContent(0);
    v129 = sub_32914(&qword_3B4700, &qword_3B4538, (uint64_t)&protocol conformance descriptor for Publishers.CombineLatest<A, B>);
    v130 = v245;
    v131 = v244;
    Publisher.map<A>(_:)(sub_7BCE0, 0, v244, v128, v129);
    (*(void (**)(char *, uint64_t))(v243 + 8))(v125, v131);
    v132 = sub_32914(&qword_3B4708, &qword_3B4540, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
    v133 = v247;
    v134 = Publisher.eraseToAnyPublisher()(v247, v132);
    swift_release(v118);
    (*(void (**)(char *, uint64_t))(v246 + 8))(v130, v133);
  }
  else
  {
    v134 = Publisher.eraseToAnyPublisher()(v115, v116);
    v126 = v253;
    v127 = v252;
  }
  v258 = v134;
  v318 = v107;
  *(_QWORD *)&v334[0] = v107;
  v257 = sub_32914(&qword_3B2138, &qword_3B20D0, (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
  v135 = v267;
  Publisher<>.removeDuplicates()(v323, v257, &protocol witness table for Bool);
  v136 = swift_allocObject(&unk_37BC18, 32, 7);
  v137 = v324;
  *(_QWORD *)(v136 + 16) = v134;
  *(_QWORD *)(v136 + 24) = v137;
  v138 = sub_32914(&qword_3B4648, &qword_3B4518, (uint64_t)&protocol conformance descriptor for Publishers.RemoveDuplicates<A>);
  swift_retain(v137);
  swift_retain(v134);
  v139 = v270;
  v140 = v271;
  Publisher.map<A>(_:)(sub_80214, v136, v271, v126, v138);
  swift_release(v136);
  (*(void (**)(char *, uint64_t))(v269 + 8))(v135, v140);
  v141 = sub_32914(&qword_3B4650, &qword_3B4520, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v142 = v274;
  v143 = v273;
  Publisher<>.switchToLatest()(v273, v141, v127);
  v144 = (*(uint64_t (**)(char *, uint64_t))(v272 + 8))(v139, v143);
  v145 = v322;
  *(_QWORD *)&v334[0] = static OS_dispatch_queue.main.getter(v144);
  v146 = (uint64_t)v328;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v320)(v328, 1, 1, v321);
  v147 = sub_32914(&qword_3B4658, &qword_3B4528, (uint64_t)&protocol conformance descriptor for Publishers.SwitchToLatest<A, B>);
  v148 = v277;
  v149 = v276;
  Publisher.receive<A>(on:options:)(v334, v146, v276, v145, v147, v319);
  sub_1459C(v146, &qword_3B2B18);

  (*(void (**)(char *, uint64_t))(v275 + 8))(v142, v149);
  v150 = swift_allocObject(&unk_37BB50, 24, 7);
  v151 = v330;
  swift_weakInit(v150 + 16);
  v152 = sub_32914(&qword_3B4660, &qword_3B4530, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v153 = v279;
  v154 = Publisher<>.sink(receiveValue:)(sub_80234, v150, v279, v152);
  swift_release(v150);
  (*(void (**)(char *, uint64_t))(v278 + 8))(v148, v153);
  v155 = v333;
  swift_beginAccess(v333, v334, 33, 0);
  AnyCancellable.store<A>(in:)(v155, v332, v331);
  swift_endAccess(v334);
  swift_release(v154);
  v156 = swift_allocObject(&unk_37BC40, 48, 7);
  *(_OWORD *)(v156 + 16) = 0u;
  *(_OWORD *)(v156 + 32) = 0u;
  *(_QWORD *)&v334[0] = v266;
  v157 = v268;
  Publisher<>.removeDuplicates()(v263, v262, v261);
  v158 = v329;
  *(_QWORD *)&v334[0] = v329[4];
  v159 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4668);
  v277 = (char *)v159;
  v160 = sub_32914(&qword_3B4670, &qword_3B4668, (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
  v278 = v160;
  v161 = sub_16138(&qword_3B4678, &qword_3B4680, (void (*)(void))sub_8026C, (uint64_t)&protocol conformance descriptor for <A> A?);
  v162 = v281;
  Publisher<>.removeDuplicates()(v159, v160, v161);
  *(_QWORD *)&v334[0] = v158[3];
  v163 = v326;
  v164 = v260;
  v165 = v259;
  Publisher<>.removeDuplicates()(v260, v259, v249);
  v166 = sub_32914(&qword_3B4690, &qword_3B4508, (uint64_t)&protocol conformance descriptor for Publishers.RemoveDuplicates<A>);
  v167 = v285;
  Publishers.CombineLatest3.init(_:_:_:)(v157, v162, v163, v325, v282, v327, v264, v166, v248);
  v168 = swift_allocObject(&unk_37BB50, 24, 7);
  swift_weakInit(v168 + 16);
  v169 = *(_QWORD *)(v151 + OBJC_IVAR____TtC8ShelfKit15SearchPresenter_isNetworkReachable);
  v170 = (_QWORD *)swift_allocObject(&unk_37BC68, 56, 7);
  v279 = v156;
  v171 = v265;
  v170[2] = v156;
  v170[3] = v171;
  v170[4] = v168;
  v170[5] = v169;
  v327 = v169;
  v172 = v318;
  v170[6] = v318;
  v173 = swift_allocObject(&unk_37BC90, 32, 7);
  *(_QWORD *)(v173 + 16) = sub_802F4;
  *(_QWORD *)(v173 + 24) = v170;
  v174 = sub_32914(&qword_3B4698, &qword_3B4510, (uint64_t)&protocol conformance descriptor for Publishers.CombineLatest3<A, B, C>);
  swift_retain(v171);
  swift_retain(v172);
  swift_retain(v169);
  swift_retain(v156);
  v175 = v287;
  v176 = Publisher<>.sink(receiveValue:)(sub_80324, v173, v287, v174);
  swift_release(v173);
  (*(void (**)(char *, uint64_t))(v286 + 8))(v167, v175);
  v177 = v333;
  swift_beginAccess(v333, v334, 33, 0);
  AnyCancellable.store<A>(in:)(v177, v332, v331);
  swift_endAccess(v334);
  swift_release(v176);
  v178 = v158[4];
  *(_QWORD *)&v334[0] = v158[3];
  v336 = v178;
  swift_retain(*(_QWORD *)&v334[0]);
  swift_retain(v178);
  v179 = v288;
  Publishers.CombineLatest.init(_:_:)(v334, &v336, v164, v277, v165, v278);
  v180 = swift_allocObject(&unk_37BB50, 24, 7);
  v181 = v330;
  swift_weakInit(v180 + 16);
  v182 = swift_allocObject(&unk_37BCB8, 32, 7);
  *(_QWORD *)(v182 + 16) = sub_80358;
  *(_QWORD *)(v182 + 24) = v180;
  v183 = sub_32914(&qword_3B46A0, &qword_3B44D0, (uint64_t)&protocol conformance descriptor for Publishers.CombineLatest<A, B>);
  v184 = v291;
  v185 = v290;
  Publisher.map<A>(_:)(sub_80360, v182, v290, &type metadata for SearchContentRequest, v183);
  swift_release(v182);
  (*(void (**)(char *, uint64_t))(v289 + 8))(v179, v185);
  memset(v334, 0, sizeof(v334));
  v335 = 0x80;
  v186 = sub_32914(&qword_3B46A8, &qword_3B44D8, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v187 = v294;
  v188 = v293;
  Publisher.scan<A>(_:_:)(v334, sub_7D1DC, 0, v293, &type metadata for SearchContentRequest, v186);
  v189 = (*(uint64_t (**)(char *, uint64_t))(v292 + 8))(v184, v188);
  v190 = v303;
  v191 = OS_dispatch_queue.SchedulerTimeType.Stride.init(floatLiteral:)(v189, 0.2);
  v192 = v322;
  *(_QWORD *)&v334[0] = static OS_dispatch_queue.main.getter(v191);
  v193 = (uint64_t)v328;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v320)(v328, 1, 1, v321);
  v194 = sub_32914(&qword_3B46B0, &qword_3B44E0, (uint64_t)&protocol conformance descriptor for Publishers.Scan<A, B>);
  v195 = v297;
  v196 = v296;
  Publisher.debounce<A>(for:scheduler:options:)(v190, v334, v193, v296, v192, v194, v319);
  sub_1459C(v193, &qword_3B2B18);

  (*(void (**)(char *, uint64_t))(v305 + 8))(v190, v306);
  (*(void (**)(char *, uint64_t))(v295 + 8))(v187, v196);
  v197 = sub_32914(&qword_3B46B8, &qword_3B44E8, (uint64_t)&protocol conformance descriptor for Publishers.Debounce<A, B>);
  v198 = sub_803A0();
  v199 = v300;
  v200 = v299;
  Publisher<>.removeDuplicates()(v299, v197, v198);
  (*(void (**)(char *, uint64_t))(v298 + 8))(v195, v200);
  v201 = *(_QWORD *)(v181 + 40);
  swift_retain(v201);
  v202 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B46C8);
  v203 = sub_32914(&qword_3B46D0, &qword_3B44F0, (uint64_t)&protocol conformance descriptor for Publishers.RemoveDuplicates<A>);
  v204 = v304;
  v205 = v302;
  Publisher.map<A>(_:)(sub_803E4, v201, v302, v202, v203);
  swift_release(v201);
  (*(void (**)(char *, uint64_t))(v301 + 8))(v199, v205);
  v206 = sub_32914(&qword_3B46D8, &qword_3B44F8, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v207 = sub_32914(&qword_3B46E0, &qword_3B46C8, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v208 = v309;
  v209 = v308;
  Publisher<>.switchToLatest()(v308, v206, v207);
  (*(void (**)(char *, uint64_t))(v307 + 8))(v204, v209);
  v210 = sub_32914(&qword_3B46E8, &qword_3B4500, (uint64_t)&protocol conformance descriptor for Publishers.SwitchToLatest<A, B>);
  v211 = sub_32914(&qword_3B46F0, &qword_3B4440, (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
  v212 = v311;
  v213 = Publisher.subscribe<A>(_:)(v284, v311, v283, v210, v211);
  (*(void (**)(char *, uint64_t))(v310 + 8))(v208, v212);
  v214 = v333;
  swift_beginAccess(v333, v334, 33, 0);
  v216 = v331;
  v215 = v332;
  AnyCancellable.store<A>(in:)(v214, v332, v331);
  swift_endAccess(v334);
  swift_release(v213);
  *(_QWORD *)&v334[0] = *(_QWORD *)(v181 + OBJC_IVAR____TtC8ShelfKit15SearchPresenter_networkObserver);
  v217 = *(_QWORD *)&v334[0];
  v218 = sub_3289C();
  v219 = Publisher.eraseToAnyPublisher()(&type metadata for NetworkObserver.NetworkObserverPublisher, v218);
  *(_QWORD *)&v334[0] = v219;
  v220 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2118);
  v221 = swift_allocObject(v220, 33, 7);
  *(_OWORD *)(v221 + 16) = xmmword_2EA0D0;
  *(_BYTE *)(v221 + 32) = objc_msgSend((id)objc_opt_self(IMNetworkObserver), "isLikelyToReachRemoteServerWithReachabilityFlags:", objc_msgSend(*(id *)(v217 + 16), "networkReachabilityFlags"));
  v222 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2120);
  v223 = sub_32914(&qword_3B2128, &qword_3B2120, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v224 = v312;
  Publisher.prepend(_:)(v221, v222, v223);
  swift_release(v219);
  swift_bridgeObjectRelease();
  v225 = sub_32914(&qword_3B2150, &qword_3B20F8, (uint64_t)&protocol conformance descriptor for Publishers.Concatenate<A, B>);
  v226 = v315;
  v227 = v314;
  Publisher<>.removeDuplicates()(v314, v225, &protocol witness table for Bool);
  (*(void (**)(char *, uint64_t))(v313 + 8))(v224, v227);
  v228 = swift_allocObject(&unk_37BB50, 24, 7);
  swift_weakInit(v228 + 16);
  v229 = sub_32914(&qword_3B46F8, &qword_3B44C8, (uint64_t)&protocol conformance descriptor for Publishers.RemoveDuplicates<A>);
  v230 = v317;
  v231 = Publisher<>.sink(receiveValue:)(sub_8041C, v228, v317, v229);
  swift_release(v228);
  (*(void (**)(char *, uint64_t))(v316 + 8))(v226, v230);
  swift_beginAccess(v214, v334, 33, 0);
  AnyCancellable.store<A>(in:)(v214, v215, v216);
  swift_endAccess(v334);
  swift_release(v231);
  v232 = v327;
  *(_QWORD *)&v334[0] = v327;
  v233 = *(_QWORD *)(v181 + OBJC_IVAR____TtC8ShelfKit15SearchPresenter_hasRecentlySearchedItems);
  v234 = (_QWORD *)swift_allocObject(&unk_37BCE0, 40, 7);
  v235 = v329;
  v234[2] = v233;
  v234[3] = v235;
  v236 = v318;
  v234[4] = v318;
  swift_retain(v236);
  swift_retain(v232);
  swift_retain(v235);
  swift_retain(v233);
  v237 = Publisher<>.sink(receiveValue:)(sub_8045C, v234, v323, v257);
  swift_release(v234);
  swift_release(*(_QWORD *)&v334[0]);
  swift_beginAccess(v214, v334, 33, 0);
  AnyCancellable.store<A>(in:)(v214, v215, v216);
  swift_endAccess(v334);
  swift_release(v279);
  swift_release(v237);
  swift_release(v324);
  swift_release(v258);
  swift_release(v280);
}

uint64_t sub_7A6C4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t (*v8)(_QWORD);
  uint64_t result;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  void (*v17)(_QWORD **, _QWORD);
  _QWORD *v18;
  uint64_t (*v19)(uint64_t);
  uint64_t v20;
  _BYTE v21[16];
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;

  v2 = type metadata accessor for GroupedSearchResultsPage(0);
  __chkstk_darwin(v2);
  v4 = &v21[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for SearchContent(0);
  __chkstk_darwin(v5);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_14510(a1, (uint64_t)v7, v8);
  result = swift_getEnumCaseMultiPayload(v7, v5);
  if ((_DWORD)result != 5)
  {
    if ((_DWORD)result == 4)
    {
      sub_3C56C((uint64_t)v7, (uint64_t)v4, type metadata accessor for GroupedSearchResultsPage);
      v10 = swift_bridgeObjectRetain(*(_QWORD *)&v4[*(int *)(v2 + 20)]);
      v11 = sub_80CD8(v10);
      swift_bridgeObjectRelease();
      v22 = v11;
      v12 = CurrentValueSubject.value.setter(&v22);
      CurrentValueSubject.value.getter(&v22, v12);
      if (v22[2])
      {
        v14 = (_QWORD *)v22[4];
        v13 = v22[5];
        v16 = v22[6];
        v15 = v22[7];
        swift_bridgeObjectRetain(v13);
        swift_bridgeObjectRetain(v15);
      }
      else
      {
        v14 = 0;
        v16 = 0;
        v13 = 0xE000000000000000;
        v15 = 0xE000000000000000;
      }
      swift_bridgeObjectRelease();
      v22 = v14;
      v23 = v13;
      v24 = v16;
      v25 = v15;
      CurrentValueSubject.value.setter(&v22);
      v19 = type metadata accessor for GroupedSearchResultsPage;
      v20 = (uint64_t)v4;
    }
    else
    {
      v17 = (void (*)(_QWORD **, _QWORD))CurrentValueSubject.value.modify(&v22);
      *v18 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRelease();
      v17(&v22, 0);
      v22 = 0;
      v23 = 0xE000000000000000;
      v24 = 0;
      v25 = 0xE000000000000000;
      CurrentValueSubject.value.setter(&v22);
      v19 = type metadata accessor for SearchContent;
      v20 = (uint64_t)v7;
    }
    return sub_145D8(v20, v19);
  }
  return result;
}

void sub_7A8B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t (*v22)(_QWORD);
  char *v23;
  _QWORD v24[2];
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v24[1] = a8;
  v40 = a6;
  v35 = a5;
  v36 = a4;
  v42 = a3;
  v43 = a2;
  v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2998);
  v28 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v27 = (char *)v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4A78);
  v31 = *(_QWORD *)(v10 - 8);
  v32 = v10;
  __chkstk_darwin(v10);
  v30 = (char *)v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for GroupedSearchResultsPage(0);
  v25 = *(_QWORD *)(v12 - 8);
  v13 = *(_QWORD *)(v25 + 64);
  v14 = __chkstk_darwin(v12);
  v26 = (char *)v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v34 = (char *)v24 - v15;
  v33 = type metadata accessor for ModernPage(0);
  v16 = __chkstk_darwin(v33);
  v17 = __chkstk_darwin(v16);
  __chkstk_darwin(v17);
  v41 = type metadata accessor for PageContent(0);
  __chkstk_darwin(v41);
  v39 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4A80);
  v37 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39);
  v38 = (char *)v24 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for SearchContent(0);
  __chkstk_darwin(v19);
  v21 = (char *)v24 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_14510(a1, (uint64_t)v21, v22);
  v23 = (char *)sub_7AB44 + 4 * byte_2EF458[swift_getEnumCaseMultiPayload(v21, v19)];
  __asm { BR              X10 }
}

uint64_t sub_7AB44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_OWORD *)(v2 - 144) = *(_OWORD *)v1;
  v3 = *(_QWORD *)(v1 + 16);
  if (*(_QWORD *)(v2 - 168))
    SearchFiltersSource.update(filter:)((Swift::String_optional)0);
  *(_OWORD *)v0 = *(_OWORD *)(v2 - 144);
  *(_QWORD *)(v0 + 16) = v3;
  v4 = *(_QWORD *)(v2 - 160);
  swift_storeEnumTagMultiPayload(v0, v4, 1);
  v5 = *(_QWORD *)(v2 - 144);
  swift_errorRetain(v5);
  swift_retain(v3);
  v6 = *(_QWORD *)(v2 - 184);
  Just.init(_:)(v0, v4);
  v7 = sub_32914(&qword_3B4A88, &qword_3B4A80, (uint64_t)&protocol conformance descriptor for Just<A>);
  v8 = *(_QWORD *)(v2 - 176);
  v9 = Publisher.eraseToAnyPublisher()(v8, v7);
  swift_release(v3);
  swift_errorRelease(v5);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 192) + 8))(v6, v8);
  return v9;
}

uint64_t sub_7B36C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v19[3];

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4720);
  __chkstk_darwin(v4);
  v6 = (char *)&v19[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_BYTE *)(v2 + OBJC_IVAR____TtC8ShelfKit15SearchPresenter_isPreparingFilterSelection) = 1;
  v7 = type metadata accessor for JSONObject(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v8 = v2 + OBJC_IVAR____TtC8ShelfKit15SearchPresenter_nextPage;
  swift_beginAccess(v2 + OBJC_IVAR____TtC8ShelfKit15SearchPresenter_nextPage, v19, 33, 0);
  sub_80980((uint64_t)v6, v8);
  swift_endAccess(v19);
  v9 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8ShelfKit15SearchPresenter_shelfController);
  sub_41408();
  v19[0] = 0;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2990);
  swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
  v11 = CurrentValueSubject.init(_:)(v19);
  v12 = *(_QWORD *)(v9 + 80);
  *(_QWORD *)(v9 + 80) = v11;
  swift_release(v12);
  LOBYTE(v19[0]) = 0;
  CurrentValueSubject.value.setter(v19);
  v13 = *(_QWORD *)(v2 + 16);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = swift_retain(v13);
  sub_415B0(v15, v14);
  swift_release(v13);
  v16 = a1 + OBJC_IVAR____TtC8ShelfKit4Page_nextPage;
  swift_beginAccess(v8, v19, 33, 0);
  sub_809C8(v16, v8);
  return swift_endAccess(v19);
}

uint64_t sub_7B504@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;

  v10 = type metadata accessor for ModernPage(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *a1;
  v14 = swift_bridgeObjectRetain(a3);
  v24 = static MetricsPageType.searchResults.getter(v14);
  v25 = v15;
  swift_bridgeObjectRetain(a3);
  v16._countAndFlagsBits = 95;
  v16._object = (void *)0xE100000000000000;
  String.append(_:)(v16);
  v17._countAndFlagsBits = a2;
  v17._object = a3;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  PageID.init(with:)(v24, v25);
  swift_bridgeObjectRelease();
  v18 = a4 + *(int *)(type metadata accessor for GroupedSearchResultsPage(0) + 24);
  v19 = &v12[*(int *)(v10 + 20)];
  v20 = type metadata accessor for PageMetrics(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v19, v18, v20);
  *(_QWORD *)&v12[*(int *)(v10 + 24)] = v13;
  __swift_instantiateConcreteTypeFromMangledName(&qword_3B89B0);
  sub_14510((uint64_t)v12, a5, type metadata accessor for ModernPage);
  v21 = swift_bridgeObjectRetain(v13);
  static PageRenderContentTypes.unspecified.getter(v21);
  v22 = type metadata accessor for PageContent(0);
  swift_storeEnumTagMultiPayload(a5, v22, 3);
  return sub_145D8((uint64_t)v12, type metadata accessor for ModernPage);
}

BOOL sub_7B684(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 v7;
  uint64_t v8;
  uint64_t Strong;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  char v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  _BYTE v39[24];
  _BYTE v40[31];
  BOOL v41;
  _BYTE v42[24];
  _BYTE v43[24];
  _BYTE v44[24];
  _QWORD v45[3];
  _QWORD v46[3];
  _BYTE v47[24];

  v5 = *a1;
  v4 = a1[1];
  v6 = a3 + 16;
  if (v4 && *((_BYTE *)a1 + 32) != 3)
  {
    v8 = HIBYTE(v4) & 0xF;
    if ((v4 & 0x2000000000000000) == 0)
      v8 = v5 & 0xFFFFFFFFFFFFLL;
    if (v8)
      v7 = 0;
    else
      v7 = *(_QWORD *)(a2 + 16) == 0;
  }
  else
  {
    v7 = 1;
  }
  swift_beginAccess(a3 + 16, v47, 0, 0);
  Strong = swift_weakLoadStrong(v6);
  if (Strong)
  {
    v10 = Strong;
    CurrentValueSubject.value.getter(v46, Strong);
    v11 = LOBYTE(v46[0]) | v7;
    if (v4)
    {
      v12 = *(_QWORD *)(v10 + OBJC_IVAR____TtC8ShelfKit15SearchPresenter_previousTerm);
      v13 = *(_QWORD *)(v10 + OBJC_IVAR____TtC8ShelfKit15SearchPresenter_previousTerm + 8);
      swift_bridgeObjectRetain(v4);
      if (v5 == v12 && v4 == v13)
      {
        swift_bridgeObjectRelease();
        if (v11)
          goto LABEL_20;
        goto LABEL_22;
      }
      v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v4, v12, v13, 0);
      swift_bridgeObjectRelease();
      if (!v11)
      {
        if ((v15 & 1) != 0)
          goto LABEL_22;
LABEL_19:
        if ((*(_BYTE *)(v10 + OBJC_IVAR____TtC8ShelfKit15SearchPresenter_userSelectedHint) & 1) == 0)
          goto LABEL_20;
LABEL_22:
        swift_beginAccess(v6, v40, 0, 0);
        v16 = swift_weakLoadStrong(v6);
        if (v16)
        {
          v17 = v16;
          v18 = (_BYTE *)(v16 + OBJC_IVAR____TtC8ShelfKit15SearchPresenter_userHitSearch);
          swift_beginAccess(v16 + OBJC_IVAR____TtC8ShelfKit15SearchPresenter_userHitSearch, v39, 1, 0);
          *v18 = 1;
          swift_release(v17);
        }
        swift_beginAccess(v6, &v38, 0, 0);
        v19 = swift_weakLoadStrong(v6);
        swift_release(v10);
        if (v19)
        {
          v20 = (_QWORD *)(v19 + OBJC_IVAR____TtC8ShelfKit15SearchPresenter_previousTerm);
          *v20 = 0;
          v20[1] = 0xE000000000000000;
          swift_release(v19);
          swift_bridgeObjectRelease();
        }
        goto LABEL_26;
      }
    }
    else if (!(LOBYTE(v46[0]) | v7))
    {
      goto LABEL_19;
    }
LABEL_20:
    swift_release(v10);
  }
LABEL_26:
  swift_beginAccess(v6, v46, 0, 0);
  v21 = swift_weakLoadStrong(v6);
  if (v21)
  {
    v22 = v21;
    v23 = *(_QWORD *)(v21 + OBJC_IVAR____TtC8ShelfKit15SearchPresenter_hasRecentlySearchedItems);
    swift_retain(v23);
    swift_release(v22);
    v45[0] = a2;
    v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B1E68);
    v25 = sub_32914(&qword_3B2068, (uint64_t *)&unk_3B1E68, (uint64_t)&protocol conformance descriptor for [A]);
    LOBYTE(v45[0]) = Collection.isNotEmpty.getter(v24, v25) & 1;
    CurrentValueSubject.value.setter(v45);
    swift_release(v23);
  }
  swift_beginAccess(v6, v45, 0, 0);
  v26 = swift_weakLoadStrong(v6);
  if (v26)
  {
    v27 = v26;
    v28 = *(_QWORD *)(v26 + OBJC_IVAR____TtC8ShelfKit15SearchPresenter_showingLanding);
    swift_retain(v28);
    swift_release(v27);
    v44[0] = v7;
    CurrentValueSubject.value.setter(v44);
    swift_release(v28);
  }
  swift_beginAccess(v6, v44, 0, 0);
  v29 = swift_weakLoadStrong(v6);
  if (v29)
  {
    *(_BYTE *)(v29 + OBJC_IVAR____TtC8ShelfKit15SearchPresenter_userSelectedHint) = 0;
    swift_release(v29);
  }
  if (v4)
  {
    swift_beginAccess(v6, v43, 0, 0);
    v30 = swift_weakLoadStrong(v6);
    if (v30)
    {
      v31 = v30;
      v32 = (_QWORD *)(v30 + OBJC_IVAR____TtC8ShelfKit15SearchPresenter_previousTerm);
      *v32 = v5;
      v32[1] = v4;
      swift_bridgeObjectRetain(v4);
      swift_release(v31);
      swift_bridgeObjectRelease();
    }
    swift_beginAccess(v6, v42, 0, 0);
    v33 = swift_weakLoadStrong(v6);
    if (v33)
    {
      v34 = v33;
      v35 = *(_QWORD *)(v33 + OBJC_IVAR____TtC8ShelfKit15SearchPresenter_searchExtension);
      swift_retain(v35);
      swift_release(v34);
      v36 = *(_QWORD *)(v35 + 56);
      swift_retain(v36);
      swift_release(v35);
      v41 = v7;
      CurrentValueSubject.value.setter(&v41);
      swift_release(v36);
    }
  }
  return v7;
}

void sub_7BA58(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t (*v6)(_QWORD);
  char *v7;
  uint64_t v8;

  v2 = type metadata accessor for ExtendedLaunchStatus(0);
  __chkstk_darwin(v2);
  v3 = type metadata accessor for PageContent(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_14510(a1, (uint64_t)v5, v6);
  v7 = (char *)sub_7BB2C + 4 * byte_2EF45E[swift_getEnumCaseMultiPayload(v5, v3)];
  __asm { BR              X10 }
}

uint64_t sub_7BB2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  sub_145D8(v3, type metadata accessor for PageContent);
  swift_beginAccess(v1, v5 - 88, 0, 0);
  result = swift_weakLoadStrong(v1);
  if (result)
  {
    v7 = result;
    v8 = *(_QWORD *)(result + 184);
    swift_retain(v8);
    swift_release(v7);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 104))(v2, enum case for ExtendedLaunchStatus.contentError(_:), v0);
    CurrentValueSubject.send(_:)();
    swift_release(v8);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v2, v0);
  }
  return result;
}

uint64_t sub_7BCE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4A08);
  return PageContent.addShelfToTop(_:)(a1 + *(int *)(v4 + 48), a2);
}

uint64_t sub_7BD1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  _BYTE v6[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v6, 0, 0);
  result = swift_weakLoadStrong(v2);
  if (result)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 128);
    swift_retain(v5);
    swift_release(v4);
    CurrentValueSubject.send(_:)();
    return swift_release(v5);
  }
  return result;
}

uint64_t sub_7BD98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  Swift::String v38;
  Swift::Int v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD v48[4];
  uint64_t v49;
  int v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  char v63[8];
  char v64[12];

  v59 = a3;
  v60 = a2;
  v61 = a1;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2820);
  __chkstk_darwin(v13);
  v54 = (char *)v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for ActionMetrics(0);
  __chkstk_darwin(v15);
  v51 = (char *)v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = type metadata accessor for EmptyAction(0);
  v53 = *(_QWORD *)(v55 - 8);
  __chkstk_darwin(v55);
  v52 = (char *)v48 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = type metadata accessor for MetricsData(0);
  v48[3] = *(_QWORD *)(v49 - 8);
  __chkstk_darwin(v49);
  v48[2] = (char *)v48 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4A58);
  __chkstk_darwin(v19);
  v48[1] = (char *)v48 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = *(_QWORD *)a5;
  v22 = *(void **)(a5 + 8);
  v50 = *(unsigned __int8 *)(a5 + 32);
  v23 = *(_QWORD *)(a6 + 8);
  v56 = *(unsigned __int8 *)(a6 + 32);
  v58 = a7 + 2;
  swift_beginAccess(a7 + 2, v64, 0, 0);
  v25 = a7[2];
  v24 = a7[3];
  v26 = a7[4];
  v27 = a7[5];
  v57 = v23;
  if (!v24)
  {
    sub_80030(v25, 0, v26, v27);
    sub_80030(0, 0xE000000000000000, 0, 0xE000000000000000);
LABEL_13:
    v29 = a4;
    goto LABEL_14;
  }
  if ((v25 || v24 != 0xE000000000000000)
    && (_stringCompareWithSmolCheck(_:_:expecting:)(v25, v24, 0, 0xE000000000000000, 0) & 1) == 0)
  {
    sub_80B2C(v25, v24, v26, v27);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  if (!v26 && v27 == 0xE000000000000000)
  {
    sub_80B2C(v25, v24, 0, 0xE000000000000000);
    swift_bridgeObjectRelease();
    v28 = swift_bridgeObjectRelease();
    v29 = a4;
    v30 = v22;
    if (!a8)
      goto LABEL_35;
LABEL_26:
    if (v30)
    {
      swift_bridgeObjectRetain(v30);
      v38._countAndFlagsBits = v21;
      v38._object = v30;
      v39 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_373700, v38);
      v28 = swift_bridgeObjectRelease();
      if (!v39)
        goto LABEL_33;
      if (v39 == 1)
      {
LABEL_32:
        v40 = static MetricsTargetID.applePodcasts.getter();
LABEL_34:
        SearchFiltersSource.update(scope:)(*(Swift::String_optional *)&v40);
        swift_bridgeObjectRelease();
        goto LABEL_35;
      }
    }
    if (qword_3B0190 != -1)
      v28 = swift_once(&qword_3B0190, sub_196060);
    if ((byte_3BF278 & 1) != 0)
      goto LABEL_32;
LABEL_33:
    v40 = static MetricsTargetID.yourLibrary.getter(v28);
    goto LABEL_34;
  }
  v31 = _stringCompareWithSmolCheck(_:_:expecting:)(v26, v27, 0, 0xE000000000000000, 0);
  sub_80B2C(v25, v24, v26, v27);
  swift_bridgeObjectRelease();
  v28 = swift_bridgeObjectRelease();
  v29 = a4;
  if ((v31 & 1) != 0)
    goto LABEL_22;
LABEL_14:
  swift_beginAccess(v58, v63, 0, 0);
  v33 = a7[2];
  v32 = a7[3];
  v34 = a7[4];
  v35 = a7[5];
  if (!v32)
  {
    v37 = v60;
    swift_bridgeObjectRetain(v60);
    swift_bridgeObjectRetain(v29);
    sub_80030(v33, 0, v34, v35);
    sub_80030(v61, v37, v59, v29);
    v28 = 0;
LABEL_22:
    v30 = v22;
    if (a8)
      goto LABEL_26;
    goto LABEL_35;
  }
  if (v33 == v61 && v32 == v60
    || (v36 = _stringCompareWithSmolCheck(_:_:expecting:)(a7[2], v32, v61, v60, 0), v28 = 0, (v36 & 1) != 0))
  {
    if (v34 == v59 && v35 == v29)
      v28 = 1;
    else
      v28 = _stringCompareWithSmolCheck(_:_:expecting:)(v34, v35, v59, v29, 0);
  }
  v30 = v22;
  if (a8)
    goto LABEL_26;
LABEL_35:
  if (v57)
    __asm { BR              X9 }
  swift_beginAccess(v58, &v62, 1, 0);
  v42 = a7[2];
  v43 = a7[3];
  v44 = a7[4];
  v45 = a7[5];
  v46 = v60;
  a7[2] = v61;
  a7[3] = v46;
  a7[4] = v59;
  a7[5] = v29;
  sub_80030(v42, v43, v44, v45);
  swift_bridgeObjectRetain(v46);
  return swift_bridgeObjectRetain(v29);
}

uint64_t sub_7CA68@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;

  v29 = a1;
  v1 = type metadata accessor for ScalarDictionary(0);
  __chkstk_darwin(v1);
  v28 = (char *)&v26 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for MetricsData.Configuration(0);
  v26 = *(_QWORD *)(v3 - 8);
  v27 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
  __chkstk_darwin(v6);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0930);
  v10 = type metadata accessor for MetricsData(0);
  v11 = swift_allocObject(v9, ((*(unsigned __int8 *)(*(_QWORD *)(v10 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v10 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v10 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v10 - 8) + 80) | 7);
  *(_OWORD *)(v11 + 16) = xmmword_2EA0D0;
  v12 = static MetricsTargetID.cancel.getter();
  v14 = v13;
  v15 = static MetricsTargetType.button.getter(v12, v13);
  v17 = v16;
  v18 = static MetricsActionType.dismiss.getter();
  v20 = v19;
  v21 = type metadata accessor for URL(0);
  v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v8, 1, 1, v21);
  static MetricsData.Configuration.podcasts.getter(v22);
  static MetricsData.clickData(targetID:targetType:actionType:actionContext:actionResult:actionURL:fields:configuration:)(v12, v14, v15, v17, v18, v20, 0, 0, 0, 0, v8, &_swiftEmptyDictionarySingleton, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v26 + 8))(v5, v27);
  v23 = sub_1459C((uint64_t)v8, &qword_3B4370);
  v24 = v28;
  ScalarDictionary.init()(v23);
  return ActionMetrics.init(data:custom:)(v11, v24);
}

uint64_t sub_7CC88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  Swift::String v10;
  Swift::Int v11;
  int v12;
  uint64_t Strong;
  int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31[4];
  char v32;
  _QWORD v33[4];
  char v34;
  _BYTE v35[24];
  _BYTE v36[24];
  _BYTE v37[24];
  _BYTE v38[48];

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v26 = *(_QWORD *)(a1 + 24);
  v25 = *(_BYTE *)(a1 + 32);
  v8 = *(_QWORD *)a2;
  v7 = *(void **)(a2 + 8);
  v28 = *(_QWORD *)(a2 + 24);
  v29 = *(_QWORD *)(a2 + 16);
  v9 = a3 + 16;
  v27 = *(_BYTE *)(a2 + 32);
  if (!v7)
    goto LABEL_5;
  swift_bridgeObjectRetain(v7);
  v10._countAndFlagsBits = v8;
  v10._object = v7;
  v11 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_373700, v10);
  swift_bridgeObjectRelease();
  if (!v11)
  {
    v12 = 0;
    goto LABEL_9;
  }
  if (v11 != 1)
  {
LABEL_5:
    if (qword_3B0190 != -1)
      swift_once(&qword_3B0190, sub_196060);
    v12 = byte_3BF278;
    goto LABEL_9;
  }
  v12 = 1;
LABEL_9:
  swift_beginAccess(v9, v37, 0, 0);
  Strong = swift_weakLoadStrong(v9);
  if (!Strong)
    goto LABEL_27;
  v14 = *(unsigned __int8 *)(Strong + OBJC_IVAR____TtC8ShelfKit15SearchPresenter_scope);
  swift_release(Strong);
  if (v12)
    v15 = 0x65726F7473;
  else
    v15 = 0x7972617262696CLL;
  if (v12)
    v16 = 0xE500000000000000;
  else
    v16 = 0xE700000000000000;
  if (v14)
    v17 = 0x65726F7473;
  else
    v17 = 0x7972617262696CLL;
  if (v14)
    v18 = 0xE500000000000000;
  else
    v18 = 0xE700000000000000;
  if (v15 == v17 && v16 == v18)
  {
    swift_bridgeObjectRelease_n(v16, 2);
    goto LABEL_32;
  }
  v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, v17, v18, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v20 & 1) == 0)
  {
LABEL_27:
    swift_beginAccess(v9, v36, 0, 0);
    v21 = swift_weakLoadStrong(v9);
    if (v21)
    {
      v22 = v21;
      sub_7CEF4(v12);
      swift_release(v22);
    }
    swift_beginAccess(v9, v35, 0, 0);
    v23 = swift_weakLoadStrong(v9);
    if (v23)
    {
      *(_BYTE *)(v23 + OBJC_IVAR____TtC8ShelfKit15SearchPresenter_scope) = v12;
      swift_release(v23);
    }
  }
LABEL_32:
  v33[0] = v4;
  v33[1] = v5;
  v33[2] = v6;
  v33[3] = v26;
  v34 = v25;
  v31[0] = v8;
  v31[1] = (uint64_t)v7;
  v31[2] = v29;
  v31[3] = v28;
  v32 = v27;
  sub_80B2C(v4, v5, v6, v26);
  sub_80B2C(v8, (uint64_t)v7, v29, v28);
  sub_176308((uint64_t)v33, v31, (uint64_t)v38);
  return sub_80AAC((uint64_t)v38, a4);
}

uint64_t sub_7CEF4(int a1)
{
  char v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char isUniquelyReferenced_nonNull_native;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE v39[12];
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  _OWORD v45[2];
  __int128 v46;
  __int128 v47;

  v40 = a1;
  v1 = a1 & 1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2820);
  __chkstk_darwin(v2);
  v4 = &v39[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for ClickLocationElement(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v39[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for ActionMetrics(0);
  __chkstk_darwin(v9);
  v11 = &v39[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for EmptyAction(0);
  v41 = *(_QWORD *)(v12 - 8);
  v42 = v12;
  __chkstk_darwin(v12);
  v14 = &v39[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_7F128(v1, (uint64_t)v11);
  v15 = EmptyAction.init(actionMetrics:)(v11);
  v16 = static MetricsField<>.name.getter(v15);
  v18 = v17;
  v19 = SearchScope.title.getter(v1);
  *((_QWORD *)&v47 + 1) = &type metadata for String;
  *(_QWORD *)&v46 = v19;
  *((_QWORD *)&v46 + 1) = v20;
  sub_1F460(&v46, v45);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  v44 = &_swiftEmptyDictionarySingleton;
  sub_1E640(v45, v16, v18, isUniquelyReferenced_nonNull_native);
  v22 = v44;
  swift_bridgeObjectRelease();
  v23 = swift_bridgeObjectRelease();
  v24 = static MetricsField<>.locationType.getter(v23);
  v26 = v25;
  v27 = static MetricsTargetType.button.getter(v24, v25);
  *((_QWORD *)&v47 + 1) = &type metadata for String;
  *(_QWORD *)&v46 = v27;
  *((_QWORD *)&v46 + 1) = v28;
  sub_1F460(&v46, v45);
  v29 = swift_isUniquelyReferenced_nonNull_native(v22);
  v44 = v22;
  sub_1E640(v45, v24, v26, v29);
  v30 = v44;
  swift_bridgeObjectRelease();
  v31 = swift_bridgeObjectRelease();
  if ((v40 & 1) != 0)
    v32 = static MetricsTargetID.applePodcasts.getter(v31);
  else
    v32 = static MetricsTargetID.yourLibrary.getter(v31);
  v34 = v32;
  v35 = v33;
  v36 = SearchScope.index.getter(v1);
  ClickLocationElement.init(id:uniqueID:parentUniqueID:position:fields:)(v34, v35, 0, 0, 0, 0, v36, v30);
  v46 = 0u;
  v47 = 0u;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 16))(v4, v8, v5);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
  v37 = sub_7FD90((uint64_t)v14, (uint64_t)&v46, 0, (uint64_t)v4, v43);
  swift_release(v37);
  sub_1459C((uint64_t)v4, &qword_3B2820);
  sub_1459C((uint64_t)&v46, (uint64_t *)&unk_3BC540);
  (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v41 + 8))(v14, v42);
}

uint64_t sub_7D1DC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v4 = *((_BYTE *)a1 + 32);
  v5 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(unsigned __int8 *)(a2 + 32);
  if ((v4 & 0xC0) != 0x40)
    goto LABEL_5;
  v11 = *a1;
  v10 = a1[1];
  v13 = a1[2];
  v12 = a1[3];
  if (v9 >> 6 == 1)
  {
    v26 = a1[3];
    v15 = v11 == v5 && v10 == v6;
    if (!v15 && (_stringCompareWithSmolCheck(_:_:expecting:)(v11, v10, v5, v6, 0) & 1) == 0)
      goto LABEL_29;
    v24 = v13;
    v25 = v11;
    if ((v4 & 1) != 0)
      v16 = 0x65726F7473;
    else
      v16 = 0x7972617262696CLL;
    if ((v4 & 1) != 0)
      v17 = 0xE500000000000000;
    else
      v17 = 0xE700000000000000;
    if ((v9 & 1) != 0)
      v18 = 0x65726F7473;
    else
      v18 = 0x7972617262696CLL;
    if ((v9 & 1) != 0)
      v19 = 0xE500000000000000;
    else
      v19 = 0xE700000000000000;
    if (v16 == v18 && v17 == v19)
    {
      swift_bridgeObjectRelease_n(v17, 2);
      v13 = v24;
      v11 = v25;
    }
    else
    {
      v23 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v17, v18, v19, 0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v13 = v24;
      v11 = v25;
      if ((v23 & 1) == 0)
      {
LABEL_29:
        swift_bridgeObjectRetain(v8);
        goto LABEL_34;
      }
    }
    v8 = v26;
    v22 = v26;
    goto LABEL_37;
  }
  if (!(v9 >> 6) && (a1[4] & 1) != 0)
  {
    if (v11 == v5 && v10 == v6
      || (v27 = a1[3],
          v21 = _stringCompareWithSmolCheck(_:_:expecting:)(*a1, v10, v5, v6, 0),
          v12 = v27,
          (v21 & 1) != 0))
    {
      v22 = v12;
      v8 = v12;
LABEL_37:
      swift_bridgeObjectRetain(v22);
      result = swift_bridgeObjectRetain(v10);
      v5 = v11;
      v6 = v10;
      v7 = v13;
      LOBYTE(v9) = v4;
      goto LABEL_6;
    }
LABEL_34:
    result = swift_bridgeObjectRetain(v6);
    goto LABEL_6;
  }
LABEL_5:
  result = sub_80AE8(*(_QWORD *)a2, *(_QWORD *)(a2 + 8), v7, v8, v9);
LABEL_6:
  *(_QWORD *)a3 = v5;
  *(_QWORD *)(a3 + 8) = v6;
  *(_QWORD *)(a3 + 16) = v7;
  *(_QWORD *)(a3 + 24) = v8;
  *(_BYTE *)(a3 + 32) = v9;
  return result;
}

uint64_t sub_7D3B4(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  id v45;
  id v46;
  id v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56[2];
  uint64_t v57;
  char v58[24];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2B18);
  __chkstk_darwin(v4);
  v6 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4A10);
  v54 = *(_QWORD *)(v7 - 8);
  v55 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4A18);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for PageContent(0);
  __chkstk_darwin(v14);
  v16 = (char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *a1;
  a2 += 16;
  swift_beginAccess(a2, v58, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (result)
  {
    v19 = result;
    LOBYTE(v56[0]) = v17;
    CurrentValueSubject.value.setter(v56);
    if (v17)
    {
      *v16 = 1;
      swift_storeEnumTagMultiPayload(v16, v14, 0);
      CurrentValueSubject.send(_:)();
      sub_145D8((uint64_t)v16, type metadata accessor for PageContent);
      v57 = sub_7D8EC();
      sub_150C8(v19 + 56, (uint64_t)v56);
      v20 = swift_allocObject(&unk_37BE18, 56, 7);
      v21 = sub_F4D8(v56, v20 + 16);
      v51 = static Subscribers.Demand.unlimited.getter(v21);
      v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3620);
      v53 = v11;
      v23 = v22;
      v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4A20);
      v52 = v10;
      v25 = v24;
      v26 = sub_32914(&qword_3B3630, &qword_3B3620, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
      v27 = sub_32914(&qword_3BEB60, &qword_3B4A20, (uint64_t)&protocol conformance descriptor for Future<A, B>);
      Publisher<>.flatMap<A>(maxPublishers:_:)(v51, sub_80A9C, v20, v23, v25, v26, v27);
      swift_release(v20);
      swift_release(v57);
      v28 = sub_327F8(0, (unint64_t *)&qword_3B8710, OS_dispatch_queue_ptr);
      *(_QWORD *)&v56[0] = static OS_dispatch_queue.main.getter(v28);
      v29 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v6, 1, 1, v29);
      v30 = sub_32914(&qword_3B4A28, &qword_3B4A10, (uint64_t)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
      v31 = sub_436CC();
      v32 = v55;
      Publisher.receive<A>(on:options:)(v56, v6, v55, v28, v30, v31);
      sub_1459C((uint64_t)v6, &qword_3B2B18);

      (*(void (**)(char *, uint64_t))(v54 + 8))(v9, v32);
      v33 = *(_QWORD *)(v19 + 120);
      v34 = sub_32914(&qword_3B4A30, &qword_3B4A18, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
      swift_retain(v33);
      v35 = v52;
      v36 = Publisher<>.sink(receiveValue:)(sub_80AA4, v33, v52, v34);
      swift_release(v33);
      (*(void (**)(char *, uint64_t))(v53 + 8))(v13, v35);
      v37 = v19 + OBJC_IVAR____TtC8ShelfKit15SearchPresenter_subscriptions;
      swift_beginAccess(v19 + OBJC_IVAR____TtC8ShelfKit15SearchPresenter_subscriptions, v56, 33, 0);
      v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2088);
      v39 = sub_32914(&qword_3B2090, &qword_3B2088, (uint64_t)&protocol conformance descriptor for [A]);
      AnyCancellable.store<A>(in:)(v37, v38, v39);
      swift_endAccess(v56);
      swift_release(v19);
      v40 = v36;
    }
    else
    {
      v41 = objc_msgSend((id)objc_opt_self(IMNetworkObserver), "sharedInstance");
      v42 = type metadata accessor for NetworkObserver();
      v43 = (_QWORD *)swift_allocObject(v42, 80, 7);
      v44 = sub_2BA108(v41, v43);
      LOBYTE(v56[0]) = 1;
      v45 = objc_msgSend(objc_allocWithZone((Class)ASKAirplaneModeInquiry), "init");
      v46 = objc_msgSend(objc_allocWithZone((Class)ASKCellularDataInquiry), "init");
      v47 = objc_allocWithZone((Class)type metadata accessor for ErrorPresenter());
      v48 = ErrorPresenter.init(networkObserver:reachabilityType:airplaneModeInquiry:cellularDataInquiry:)((uint64_t)v44, v56, v45, v46);
      ErrorPresenter.update()();
      ErrorPresenter.title.getter();
      *(_QWORD *)v16 = v49;
      *((_QWORD *)v16 + 1) = v50;
      *((_QWORD *)v16 + 2) = 0x8000000000000000;
      swift_storeEnumTagMultiPayload(v16, v14, 2);
      CurrentValueSubject.send(_:)();

      sub_145D8((uint64_t)v16, type metadata accessor for PageContent);
      v40 = v19;
    }
    return swift_release(v40);
  }
  return result;
}

uint64_t sub_7D8EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4A38);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4A40);
  v35 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B35D8);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(v0 + 96);
  if (v12)
  {
    v37 = *(_QWORD *)(v12 + 16);
    v13 = v37;
    v14 = qword_3B0080;
    swift_retain(v12);
    swift_retain(v13);
    if (v14 != -1)
      swift_once(&qword_3B0080, sub_73178);
    v15 = qword_3B3FA0;
    v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B35F8);
    v17 = sub_32914(&qword_3B3600, &qword_3B35F8, (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
    v18 = Publisher.emitSignpostEvent(log:name:)(v15, "metadata", 8, 2, v16, v17);
    swift_release(v13);
    v37 = v18;
    v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3608);
    v20 = sub_32914(&qword_3B3610, &qword_3B3608, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
    Publisher.compactMap<A>(_:)(sub_730F4, 0, v19, &type metadata for RecommendationsMetadata, v20);
    swift_release(v18);
    v21 = sub_32914(&qword_3B3618, &qword_3B35D8, (uint64_t)&protocol conformance descriptor for Publishers.CompactMap<A, B>);
    v22 = Publisher.eraseToAnyPublisher()(v8, v21);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    swift_release(v12);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_3B41F8);
    type metadata accessor for AnalyticsIdentifierManager(0);
    v23 = (void *)static AnalyticsIdentifierManager.sharedInstance.getter();
    v24 = dispatch thunk of AnalyticsIdentifierManager.identifierPromise.getter();

    v25 = Promise<A>.init(_:)(v24);
    v26 = Promise.publisher.getter(v25);
    swift_release(v25);
    v37 = v26;
    v27 = objc_allocWithZone((Class)type metadata accessor for AnalyticsUserIdentifier(0));
    v28 = (void *)AnalyticsUserIdentifier.init(clientId:userId:userAllowsPersonalization:userUnder13YearsOld:userIsManagedAccount:)(0, 0, 0, 0, 0, 0, 0);
    v36 = v28;
    v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4200);
    v30 = sub_32914(&qword_3B4208, &qword_3B4200, (uint64_t)&protocol conformance descriptor for Future<A, B>);
    Publisher.replaceError(with:)(&v36, v29, v30);
    swift_release(v26);

    v31 = sub_32914(&qword_3B4A48, &qword_3B4A38, (uint64_t)&protocol conformance descriptor for Publishers.ReplaceError<A>);
    Publisher.map<A>(_:)(sub_7FD08, 0, v1, &type metadata for RecommendationsMetadata, v31);
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    v32 = sub_32914(&qword_3B4A50, &qword_3B4A40, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
    v22 = Publisher.eraseToAnyPublisher()(v5, v32);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v7, v5);
  }
  return v22;
}

uint64_t sub_7DCB0@<X0>(__int128 *a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  char v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v17 = *a1;
  v5 = *((_QWORD *)a1 + 2);
  v6 = *((_QWORD *)a1 + 3);
  v7 = *((_BYTE *)a1 + 32);
  v8 = *((_BYTE *)a1 + 33);
  v9 = *((_BYTE *)a1 + 34);
  v10 = a2[3];
  v11 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v10);
  v18 = v17;
  v19 = v5;
  v20 = v6;
  v21 = v7;
  v22 = v8;
  v23 = v9;
  v12 = *(__int128 *)((char *)a1 + 56);
  v24 = *(__int128 *)((char *)a1 + 40);
  v25 = v12;
  v13 = *(__int128 *)((char *)a1 + 88);
  v26 = *(__int128 *)((char *)a1 + 72);
  v27 = v13;
  v14 = (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v11 + 184))(&v18, v10, v11);
  v15 = Promise.optionalPublisher.getter();
  result = swift_release(v14);
  *a3 = v15;
  return result;
}

uint64_t sub_7DD80(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t);
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v2 = type metadata accessor for ModernPage(0);
  __chkstk_darwin(v2);
  v4 = &v21[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = type metadata accessor for PageContent(0);
  v6 = __chkstk_darwin(v5);
  v8 = &v21[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = *a1;
  if (*a1)
  {
    v10 = swift_retain(*a1);
    static PageID.searchLanding.getter(v10);
    v11 = v9 + OBJC_IVAR____TtC8ShelfKit4Page_pageMetrics;
    swift_beginAccess(v9 + OBJC_IVAR____TtC8ShelfKit4Page_pageMetrics, v21, 0, 0);
    v12 = &v4[*(int *)(v2 + 20)];
    v13 = type metadata accessor for PageMetrics(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v12, v11, v13);
    *(_QWORD *)&v4[*(int *)(v2 + 24)] = Page.modernShelves.getter();
    __swift_instantiateConcreteTypeFromMangledName(&qword_3B89B0);
    v14 = sub_14510((uint64_t)v4, (uint64_t)v8, type metadata accessor for ModernPage);
    static PageRenderContentTypes.unspecified.getter(v14);
    swift_storeEnumTagMultiPayload(v8, v5, 3);
    CurrentValueSubject.send(_:)();
    swift_release(v9);
    sub_145D8((uint64_t)v8, type metadata accessor for PageContent);
    v15 = (uint64_t)v4;
    v16 = type metadata accessor for ModernPage;
  }
  else
  {
    v17 = static PageID.searchLanding.getter(v6);
    static PageMetrics.notInstrumented.getter(v17);
    *(_QWORD *)&v4[*(int *)(v2 + 24)] = _swiftEmptyArrayStorage;
    __swift_instantiateConcreteTypeFromMangledName(&qword_3B89B0);
    v18 = sub_14510((uint64_t)v4, (uint64_t)v8, type metadata accessor for ModernPage);
    static PageRenderContentTypes.unspecified.getter(v18);
    swift_storeEnumTagMultiPayload(v8, v5, 3);
    sub_145D8((uint64_t)v4, type metadata accessor for ModernPage);
    CurrentValueSubject.send(_:)();
    v16 = type metadata accessor for PageContent;
    v15 = (uint64_t)v8;
  }
  return sub_145D8(v15, v16);
}

uint64_t sub_7DFA8(unsigned __int8 *a1)
{
  int v1;
  _QWORD *v2;
  int v3;
  BOOL v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;

  v1 = *a1;
  v2 = CurrentValueSubject.value.getter(&v17, a1);
  if (v17 == 1 && (v2 = CurrentValueSubject.value.getter(&v12, v2), v13))
  {
    v3 = v16;
    v2 = (_QWORD *)sub_80030(v12, v13, v14, v15);
    v4 = v3 == 0;
  }
  else
  {
    v4 = 0;
  }
  CurrentValueSubject.value.getter(&v12, v2);
  if ((v12 & 1) != 0 || v4)
  {
    if (v1)
      v5 = 0x65726F7473;
    else
      v5 = 0x7972617262696CLL;
    if (v1)
      v6 = 0xE500000000000000;
    else
      v6 = 0xE700000000000000;
    v7 = SearchScope.title.getter(v1);
    v9 = v8;
    if ((v1 & 1) != 0)
      v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x65726F7473, 0xE500000000000000, 0x7972617262696CLL, 0xE700000000000000, 0);
    else
      v10 = 1;
    swift_bridgeObjectRelease();
    v12 = v5;
    v13 = v6;
    v14 = v7;
    v15 = v9;
    v16 = v10 & 1;
    CurrentValueSubject.value.setter(&v12);
  }
  LOBYTE(v12) = v1;
  return CurrentValueSubject.value.setter(&v12);
}

uint64_t sub_7E114()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  _QWORD v43[2];
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  void (*v50)(_QWORD *, _QWORD, uint64_t);
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  _QWORD v59[5];
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v1 = type metadata accessor for ScalarDictionary(0);
  __chkstk_darwin(v1);
  v49 = (char *)v43 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for ImpressionMetrics.ID(0);
  __chkstk_darwin(v3);
  v58 = (char *)v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = type metadata accessor for ImpressionMetrics(0);
  v47 = *(_QWORD *)(v48 - 8);
  __chkstk_darwin(v48);
  v46 = (char *)v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for MetricsAdHocImpression(0);
  v53 = *(_QWORD *)(v6 - 8);
  result = __chkstk_darwin(v6);
  v9 = (_QWORD *)((char *)v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = *(_QWORD *)(v0 + 24);
  if (v10)
  {
    v11 = swift_retain(v10);
    v12 = CurrentValueSubject.value.getter(v59, v11);
    if (LOBYTE(v59[0]) == 1)
    {
      CurrentValueSubject.value.getter(v59, v12);
      v52 = *(_QWORD *)(v59[0] + 16);
      if (v52)
      {
        v13 = 0;
        v51 = enum case for MetricsAdHocImpression.searchFilter(_:);
        v50 = *(void (**)(_QWORD *, _QWORD, uint64_t))(v53 + 104);
        v43[1] = v59[0];
        v14 = (uint64_t *)(v59[0] + 56);
        v45 = v6;
        v44 = v10;
        do
        {
          v15 = *(v14 - 2);
          v16 = *(v14 - 1);
          v17 = *v14;
          *v9 = *(v14 - 3);
          v9[1] = v15;
          v9[2] = v16;
          v9[3] = v17;
          v50(v9, v51, v6);
          v18 = *(_QWORD *)(v10 + 16);
          if (v18)
          {
            swift_bridgeObjectRetain_n(v15, 2);
            swift_bridgeObjectRetain_n(v17, 2);
            v19 = swift_retain(v18);
            v57 = v17;
            v20 = MetricsAdHocImpression.metricsId.getter(v19);
            v22 = ImpressionMetrics.ID.init(parent:element:index:)(0, 0, v20, v21, v13);
            v54 = MetricsAdHocImpression.impressionType.getter(v22);
            v24 = v23;
            v25 = MetricsAdHocImpression.metricsName.getter();
            v55 = v18;
            v27 = v26;
            v28 = MetricsAdHocImpression.channelAdamId.getter();
            v30 = v29;
            v31 = MetricsAdHocImpression.eligibilityType.getter();
            v56 = v15;
            v59[0] = v54;
            v59[1] = v24;
            v59[2] = v25;
            v59[3] = v27;
            v59[4] = v13;
            v60 = 0;
            v61 = v28;
            v62 = v30;
            v63 = v31;
            v64 = v32;
            ImpressionFields.metricsFields.getter();
            v34 = v33;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v35 = swift_bridgeObjectRelease();
            v36 = v49;
            ScalarDictionary.init()(v35);
            v37 = sub_C97A8((uint64_t)_swiftEmptyArrayStorage);
            v38 = sub_C97A8((uint64_t)_swiftEmptyArrayStorage);
            v39 = v46;
            v40 = v36;
            v6 = v45;
            ImpressionMetrics.init(id:fields:custom:commonFields:clickLocationFields:)(v58, v34, v40, v37, v38);
            v41 = v55;
            DynamicImpressionsCalculator.addElement(_:in:at:)(v39, v13, 0.0, 0.0, 50.0, 50.0);
            swift_release(v41);
            v42 = v39;
            v10 = v44;
            (*(void (**)(char *, uint64_t))(v47 + 8))(v42, v48);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          else
          {
            swift_bridgeObjectRetain(v15);
            swift_bridgeObjectRetain(v17);
          }
          ++v13;
          v14 += 4;
          (*(void (**)(_QWORD *, uint64_t))(v53 + 8))(v9, v6);
        }
        while (v52 != v13);
      }
      swift_release(v10);
      return swift_bridgeObjectRelease();
    }
    else
    {
      return swift_release(v10);
    }
  }
  return result;
}

Swift::Void __swiftcall SearchPresenter.viewDidAppear()()
{
  uint64_t v0;
  _QWORD *v1;
  void (*v2)(uint64_t);
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v1 = (_QWORD *)v0;
  v3 = (_QWORD *)(v0 + 160);
  v2 = *(void (**)(uint64_t))(v0 + 160);
  *(_BYTE *)(v0 + 176) = 1;
  if (v2)
  {
    v4 = *(_QWORD *)(v0 + 168);
    v5 = swift_retain(v1[21]);
    v2(v5);
    sub_327A0((uint64_t)v2, v4);
    v6 = v1[20];
  }
  else
  {
    v6 = 0;
  }
  v7 = v1[21];
  *v3 = 0;
  v3[1] = 0;
  sub_327A0(v6, v7);
  v8 = v1[4];
  if (v8)
  {
    v9 = *(_QWORD *)(*(_QWORD *)(v8 + 88) + 24);
    v10 = 1;
    swift_retain(v9);
    CurrentValueSubject.value.setter(&v10);
    swift_release(v9);
  }
}

Swift::Void __swiftcall SearchPresenter.viewDidDisappear()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;

  v1 = v0;
  *(_BYTE *)(v0 + 176) = 0;
  v2 = *(_QWORD *)(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit15SearchPresenter_searchExtension) + 24);
  v3 = swift_retain(v2);
  CurrentValueSubject.value.getter(&v9, v3);
  swift_release(v2);
  if (v10)
  {
    v4 = v13;
    v5 = sub_80030(v9, v10, v11, v12);
    if (!v4)
    {
      CurrentValueSubject.value.getter(&v9, v5);
      if (v9 == 1)
      {
        v6 = *(_QWORD *)(v1 + 32);
        if (v6)
        {
          if (*(_BYTE *)(*(_QWORD *)(v6 + 88) + 32) == 1)
          {
            LOBYTE(v9) = 0;
            CurrentValueSubject.value.setter(&v9);
          }
        }
      }
    }
  }
  v7 = *(_QWORD *)(v1 + 32);
  if (v7)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(v7 + 88) + 24);
    LOBYTE(v9) = 0;
    swift_retain(v8);
    CurrentValueSubject.value.setter(&v9);
    swift_release(v8);
  }
}

Swift::Bool __swiftcall SearchPresenter.shouldPrepareNextPage()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  _BYTE v9[31];

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4720);
  __chkstk_darwin(v1);
  v3 = &v9[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = v0 + OBJC_IVAR____TtC8ShelfKit15SearchPresenter_nextPage;
  swift_beginAccess(v0 + OBJC_IVAR____TtC8ShelfKit15SearchPresenter_nextPage, &v9[8], 0, 0);
  sub_267BC(v4, (uint64_t)v3, &qword_3B4720);
  v5 = type metadata accessor for JSONObject(0);
  LODWORD(v4) = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v3, 1, v5);
  v6 = sub_1459C((uint64_t)v3, &qword_3B4720);
  if ((_DWORD)v4 == 1)
  {
    v7 = 0;
  }
  else
  {
    CurrentValueSubject.value.getter(&v9[7], v6);
    v7 = v9[7] ^ 1;
  }
  return v7 & 1;
}

Swift::Void __swiftcall SearchPresenter.prepareNextPage()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  char v33[24];
  char v34[24];
  _BYTE v35[48];

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4720);
  __chkstk_darwin(v2);
  v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for JSONObject(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (uint64_t)v1 + OBJC_IVAR____TtC8ShelfKit15SearchPresenter_nextPage;
  swift_beginAccess((char *)v1 + OBJC_IVAR____TtC8ShelfKit15SearchPresenter_nextPage, v34, 0, 0);
  sub_267BC(v9, (uint64_t)v4, &qword_3B4720);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_1459C((uint64_t)v4, &qword_3B4720);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
    v10 = (char *)v1 + OBJC_IVAR____TtC8ShelfKit15SearchPresenter_isPreparingNextPage;
    swift_beginAccess((char *)v1 + OBJC_IVAR____TtC8ShelfKit15SearchPresenter_isPreparingNextPage, v33, 1, 0);
    *v10 = 1;
    v11 = *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC8ShelfKit15SearchPresenter_selectedFilter);
    CurrentValueSubject.value.getter(&v29, v12);
    v28 = v29;
    v26 = v31;
    v27 = v30;
    v13 = *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC8ShelfKit15SearchPresenter_searchExtension);
    v14 = *(_QWORD *)(v13 + 24);
    v15 = swift_retain(v14);
    CurrentValueSubject.value.getter(&v29, v15);
    swift_release(v14);
    sub_80468((uint64_t)&v29, (uint64_t)v35);
    v16 = v1[10];
    v17 = v1[11];
    __swift_project_boxed_opaque_existential_1(v1 + 7, v16);
    v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 144))(v8, v16, v17);
    v19 = swift_allocObject(&unk_37BB50, 24, 7);
    swift_weakInit(v19 + 16);
    v20 = swift_allocObject(&unk_37BD08, 112, 7);
    *(_OWORD *)(v20 + 16) = v28;
    v21 = v26;
    *(_QWORD *)(v20 + 32) = v27;
    *(_QWORD *)(v20 + 40) = v21;
    *(_QWORD *)(v20 + 48) = v11;
    sub_80468((uint64_t)v35, v20 + 56);
    *(_QWORD *)(v20 + 96) = v13;
    *(_QWORD *)(v20 + 104) = v19;
    v22 = swift_allocObject(&unk_37BB50, 24, 7);
    swift_weakInit(v22 + 16);
    v23 = sub_327F8(0, (unint64_t *)&qword_3B8710, OS_dispatch_queue_ptr);
    swift_retain(v11);
    swift_retain(v13);
    v24 = swift_retain(v22);
    v25 = static OS_dispatch_queue.main.getter(v24);
    v31 = v23;
    v32 = &protocol witness table for OS_dispatch_queue;
    *(_QWORD *)&v29 = v25;
    Promise.then(perform:orCatchError:on:)(sub_80508, v20, sub_8053C, v22, &v29);
    swift_release(v18);
    swift_release(v20);
    swift_release(v22);
    __swift_destroy_boxed_opaque_existential_1(&v29);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_release(v22);
  }
}

uint64_t sub_7EA7C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8, uint64_t a9)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t Strong;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t result;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned __int8 v48;
  _BYTE v49[24];
  _QWORD v50[4];
  unsigned __int8 v51;
  _QWORD v52[4];
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v15 = sub_80468((uint64_t)a7, (uint64_t)v52);
  v39 = v52[2];
  v40 = v52[0];
  v41 = v52[3];
  v42 = v52[1];
  v16 = a9 + 16;
  v38 = *a1;
  CurrentValueSubject.value.getter(&v53, v15);
  v17 = v55;
  v18 = v56;
  if ((v53 != a2 || v54 != a3) && (_stringCompareWithSmolCheck(_:_:expecting:)(a2, a3, v53, v54, 0) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_25;
  }
  if (v17 == a4 && v18 == a5)
  {
    swift_bridgeObjectRelease();
    v19 = swift_bridgeObjectRelease();
  }
  else
  {
    v20 = _stringCompareWithSmolCheck(_:_:expecting:)(a4, a5, v17, v18, 0);
    swift_bridgeObjectRelease();
    v19 = swift_bridgeObjectRelease();
    if ((v20 & 1) == 0)
      goto LABEL_25;
  }
  CurrentValueSubject.value.getter(v50, v19);
  v22 = v50[0];
  v21 = v50[1];
  v24 = v50[2];
  v23 = v50[3];
  v25 = v51;
  sub_80468((uint64_t)a7, (uint64_t)&v53);
  if (!v54)
  {
    if (!v21)
    {
LABEL_20:
      swift_beginAccess(v16, v49, 0, 0);
      Strong = swift_weakLoadStrong(v16);
      if (Strong)
      {
        v29 = Strong;
        v30 = *(_QWORD *)(Strong + 16);
        v31 = *(_QWORD *)(v38 + 16);
        v32 = swift_retain(v30);
        sub_415B0(v32, v31);
        swift_release(v30);
        v33 = v38 + OBJC_IVAR____TtC8ShelfKit4Page_nextPage;
        v34 = v29 + OBJC_IVAR____TtC8ShelfKit15SearchPresenter_nextPage;
        swift_beginAccess(v29 + OBJC_IVAR____TtC8ShelfKit15SearchPresenter_nextPage, v50, 33, 0);
        sub_809C8(v33, v34);
        swift_endAccess(v50);
        swift_release(v29);
      }
      goto LABEL_25;
    }
LABEL_23:
    sub_80030(v40, v42, v39, v41);
    sub_80030(v22, v21, v24, v23);
    goto LABEL_25;
  }
  sub_80468((uint64_t)a7, (uint64_t)&v44);
  if (!v21)
  {
    swift_bridgeObjectRetain_n(v42, 2);
    swift_bridgeObjectRetain_n(v41, 2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_23;
  }
  v27 = v46;
  v26 = v47;
  v43 = v48;
  if ((v44 != v22 || v21 != v45) && (_stringCompareWithSmolCheck(_:_:expecting:)(v44, v45, v22, v21, 0) & 1) == 0
    || (v27 != v24 || v23 != v26) && (_stringCompareWithSmolCheck(_:_:expecting:)(v27, v26, v24, v23, 0) & 1) == 0)
  {
    sub_80A10(a7);
    sub_80A10(a7);
    sub_80030(v22, v21, v24, v23);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_80A44(a7);
    goto LABEL_25;
  }
  sub_80A10(a7);
  sub_80A10(a7);
  sub_80030(v22, v21, v24, v23);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_80A44(a7);
  if (v43 == v25)
    goto LABEL_20;
LABEL_25:
  swift_beginAccess(v16, v50, 0, 0);
  result = swift_weakLoadStrong(v16);
  if (result)
  {
    v36 = result;
    v37 = (_BYTE *)(result + OBJC_IVAR____TtC8ShelfKit15SearchPresenter_isPreparingNextPage);
    swift_beginAccess(result + OBJC_IVAR____TtC8ShelfKit15SearchPresenter_isPreparingNextPage, &v44, 1, 0);
    *v37 = 0;
    return swift_release(v36);
  }
  return result;
}

uint64_t sub_7EE3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint8_t *v17;
  char *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint8_t *v22;
  uint64_t Strong;
  uint64_t v24;
  _BYTE *v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE v34[24];
  char v35[24];
  char v36[24];
  uint64_t v37;
  uint64_t v38;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4720);
  __chkstk_darwin(v4);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Logger(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a2 + 16;
  static Logger.navigation.getter(v9);
  swift_errorRetain(a1);
  v13 = swift_errorRetain(a1);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v33 = v7;
    v16 = swift_slowAlloc(12, -1);
    v32 = v8;
    v17 = (uint8_t *)v16;
    v31 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v17 = 138412290;
    swift_errorRetain(a1);
    v18 = v6;
    v19 = _swift_stdlib_bridgeErrorToNSError(a1);
    v37 = v19;
    v7 = v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38);
    v20 = v31;
    *v31 = v19;
    v6 = v18;
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl(&dword_0, v14, v15, "Could not load next page of shelves, reason: %@", v17, 0xCu);
    v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8E70);
    swift_arrayDestroy(v20, 1, v21);
    swift_slowDealloc(v20, -1, -1);
    v22 = v17;
    v8 = v32;
    swift_slowDealloc(v22, -1, -1);
  }
  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }

  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  swift_beginAccess(v12, &v37, 0, 0);
  Strong = swift_weakLoadStrong(v12);
  if (Strong)
  {
    v24 = Strong;
    v25 = (_BYTE *)(Strong + OBJC_IVAR____TtC8ShelfKit15SearchPresenter_isPreparingNextPage);
    swift_beginAccess(Strong + OBJC_IVAR____TtC8ShelfKit15SearchPresenter_isPreparingNextPage, v36, 1, 0);
    *v25 = 0;
    swift_release(v24);
  }
  swift_beginAccess(v12, v35, 0, 0);
  result = swift_weakLoadStrong(v12);
  if (result)
  {
    v27 = result;
    v28 = type metadata accessor for JSONObject(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v6, 1, 1, v28);
    v29 = v27 + OBJC_IVAR____TtC8ShelfKit15SearchPresenter_nextPage;
    swift_beginAccess(v27 + OBJC_IVAR____TtC8ShelfKit15SearchPresenter_nextPage, v34, 33, 0);
    sub_80980((uint64_t)v6, v29);
    swift_endAccess(v34);
    return swift_release(v27);
  }
  return result;
}

uint64_t sub_7F128@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;

  v33 = a2;
  v3 = type metadata accessor for ScalarDictionary(0);
  __chkstk_darwin(v3);
  v32 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for MetricsData.Configuration(0);
  v30 = *(_QWORD *)(v5 - 8);
  v31 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
  __chkstk_darwin(v8);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0930);
  v12 = type metadata accessor for MetricsData(0);
  v13 = swift_allocObject(v11, ((*(unsigned __int8 *)(*(_QWORD *)(v12 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v12 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v12 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v12 - 8) + 80) | 7);
  v14 = v13;
  *(_OWORD *)(v13 + 16) = xmmword_2EA0D0;
  if ((a1 & 1) != 0)
    v15 = static MetricsTargetID.applePodcasts.getter();
  else
    v15 = static MetricsTargetID.yourLibrary.getter(v13);
  v17 = v15;
  v18 = v16;
  v19 = static MetricsTargetType.button.getter(v15, v16);
  v21 = v20;
  v22 = static MetricsActionType.navigate.getter();
  v24 = v23;
  v25 = type metadata accessor for URL(0);
  v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v10, 1, 1, v25);
  static MetricsData.Configuration.podcasts.getter(v26);
  static MetricsData.clickData(targetID:targetType:actionType:actionContext:actionResult:actionURL:fields:configuration:)(v17, v18, v19, v21, v22, v24, 0, 0, 0, 0, v10, &_swiftEmptyDictionarySingleton, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v30 + 8))(v7, v31);
  v27 = sub_1459C((uint64_t)v10, &qword_3B4370);
  v28 = v32;
  ScalarDictionary.init()(v27);
  return ActionMetrics.init(data:custom:)(v14, v28);
}

_QWORD *SearchPresenter.deinit()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  swift_release(v0[6]);
  __swift_destroy_boxed_opaque_existential_1(v0 + 7);
  swift_release(v0[12]);
  swift_release(v0[13]);
  swift_release(v0[14]);
  swift_release(v0[15]);
  swift_release(v0[16]);
  swift_release(v0[17]);
  swift_release(v0[18]);
  swift_bridgeObjectRelease();
  sub_327A0(v0[20], v0[21]);
  swift_release(v0[23]);
  sub_145D8((uint64_t)v0 + OBJC_IVAR____TtC8ShelfKit15SearchPresenter_interactionContextPage, (uint64_t (*)(_QWORD))&type metadata accessor for InteractionContext.Page);
  swift_release(*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC8ShelfKit15SearchPresenter_filters));
  swift_release(*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC8ShelfKit15SearchPresenter_selectedFilter));
  swift_release(*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC8ShelfKit15SearchPresenter_filteringEnabled));
  swift_release(*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC8ShelfKit15SearchPresenter_shelfController));
  sub_1459C((uint64_t)v0 + OBJC_IVAR____TtC8ShelfKit15SearchPresenter_nextPage, &qword_3B4720);
  swift_release(*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC8ShelfKit15SearchPresenter_searchExtension));
  swift_bridgeObjectRelease();
  swift_release(*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC8ShelfKit15SearchPresenter_scrollToTop));
  swift_release(*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC8ShelfKit15SearchPresenter_showingLanding));
  swift_release(*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC8ShelfKit15SearchPresenter_hasRecentlySearchedItems));
  swift_bridgeObjectRelease();
  swift_release(*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC8ShelfKit15SearchPresenter_networkObserver));
  swift_release(*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC8ShelfKit15SearchPresenter_isNetworkReachable));
  return v0;
}

uint64_t SearchPresenter.__deallocating_deinit()
{
  uint64_t v0;

  SearchPresenter.deinit();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_7F510@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return sub_14510(*v1 + OBJC_IVAR____TtC8ShelfKit15SearchPresenter_interactionContextPage, a1, (uint64_t (*)(_QWORD))&type metadata accessor for InteractionContext.Page);
}

Swift::Bool __swiftcall SearchPresenter.shouldScrollToTop(_:)(Swift::Bool a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char v10;
  void (*v11)(char *, uint64_t);
  uint64_t v13;

  v2 = type metadata accessor for ExtendedLaunchStatus(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4);
  v9 = (char *)&v13 - v8;
  CurrentValueSubject.value.getter((uint64_t *)((char *)&v13 - v8), v7);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for ExtendedLaunchStatus.finishedLoading(_:), v2);
  v10 = static ExtendedLaunchStatus.== infix(_:_:)(v9, v6);
  v11 = *(void (**)(char *, uint64_t))(v3 + 8);
  v11(v6, v2);
  v11(v9, v2);
  return v10 & ~a1 & 1;
}

Swift::Void __swiftcall SearchPresenter.handleNavigationPop(willScrollToTop:)(Swift::Bool willScrollToTop)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  if (!willScrollToTop)
  {
    v2 = *(_QWORD *)(*(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit15SearchPresenter_searchExtension) + 24);
    v3 = swift_retain(v2);
    CurrentValueSubject.value.getter(&v8, v3);
    v4 = v9;
    if (v9)
    {
      v5 = v10;
      v6 = v11;
      v7 = v8;
      swift_bridgeObjectRetain(v9);
      swift_bridgeObjectRetain(v6);
      sub_80030(v7, v4, v5, v6);
    }
    else
    {
      v7 = 0;
      v5 = 0;
      v4 = 0xE000000000000000;
      v6 = 0xE000000000000000;
    }
    v8 = v7;
    v9 = v4;
    v10 = v5;
    v11 = v6;
    v12 = 0;
    CurrentValueSubject.value.setter(&v8);
    swift_release(v2);
  }
}

uint64_t sub_7F6F4(int a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int v10;
  void (*v11)(char *, uint64_t);
  uint64_t v13;

  v2 = type metadata accessor for ExtendedLaunchStatus(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4);
  v9 = (char *)&v13 - v8;
  CurrentValueSubject.value.getter((uint64_t *)((char *)&v13 - v8), v7);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for ExtendedLaunchStatus.finishedLoading(_:), v2);
  v10 = static ExtendedLaunchStatus.== infix(_:_:)(v9, v6);
  v11 = *(void (**)(char *, uint64_t))(v3 + 8);
  v11(v6, v2);
  v11(v9, v2);
  return v10 & ~a1 & 1;
}

void sub_7F7D8(Swift::Bool a1)
{
  SearchPresenter.handleNavigationPop(willScrollToTop:)(a1);
}

uint64_t SearchPresenter.perform(searchAction:sender:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v3 = type metadata accessor for SearchAction(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = __chkstk_darwin(v3);
  __chkstk_darwin(v6);
  v8 = (char *)&v22 - v7;
  v9 = swift_allocObject(&unk_37BB50, 24, 7);
  swift_weakInit(v9 + 16);
  v10 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit15SearchPresenter_searchExtension);
  v11 = *(_QWORD *)(v1 + 40);
  sub_14510(a1, (uint64_t)v8, type metadata accessor for SearchAction);
  v23 = (uint64_t)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_14510((uint64_t)v8, v23, type metadata accessor for SearchAction);
  v12 = *(unsigned __int8 *)(v4 + 80);
  v13 = (v12 + 16) & ~v12;
  v14 = (v5 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  v15 = (v14 + 15) & 0xFFFFFFFFFFFFFFF8;
  v16 = (v15 + 15) & 0xFFFFFFFFFFFFFFF8;
  v17 = swift_allocObject(&unk_37BD30, v16 + 8, v12 | 7);
  sub_3C56C((uint64_t)v8, v17 + v13, type metadata accessor for SearchAction);
  *(_QWORD *)(v17 + v14) = v10;
  *(_QWORD *)(v17 + v15) = v11;
  *(_QWORD *)(v17 + v16) = v9;
  if (*(_BYTE *)(v1 + 176) == 1)
  {
    swift_retain(v9);
    swift_retain(v11);
    swift_retain(v10);
    v18 = v23;
    sub_7F9E0(v23, v10, v11, v9);
    swift_release(v9);
    swift_release(v17);
    return sub_145D8(v18, type metadata accessor for SearchAction);
  }
  else
  {
    swift_retain(v11);
    swift_retain(v10);
    sub_145D8(v23, type metadata accessor for SearchAction);
    v20 = *(_QWORD *)(v1 + 160);
    v21 = *(_QWORD *)(v1 + 168);
    *(_QWORD *)(v1 + 160) = sub_80654;
    *(_QWORD *)(v1 + 168) = v17;
    return sub_327A0(v20, v21);
  }
}

uint64_t sub_7F9E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  os_unfair_lock_s *v16;
  uint64_t Strong;
  id v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  char v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v29;
  char v30;
  void *v31;
  _BYTE v33[32];
  __int128 v34;
  Swift::String v35;
  char v36;
  Swift::String v37;

  if (*(_BYTE *)a1)
  {
    if (*(_BYTE *)a1 != 1)
    {
      swift_bridgeObjectRelease();
      goto LABEL_14;
    }
    v7 = 0xE500000000000000;
    v8 = 0x73746E6968;
  }
  else
  {
    v7 = 0xE800000000000000;
    v8 = 0x6C616E7265747865;
  }
  v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v8, v7, 0x616D6D6F4379656BLL, 0xEA0000000000646ELL, 0);
  swift_bridgeObjectRelease();
  if ((v9 & 1) != 0)
  {
LABEL_14:
    v31 = *(void **)(a1 + 16);
    *(_QWORD *)&v34 = *(_QWORD *)(a1 + 8);
    *((_QWORD *)&v34 + 1) = v31;
    v35._countAndFlagsBits = v34;
    v35._object = v31;
    v36 = 1;
    swift_bridgeObjectRetain_n(v31, 2);
    return CurrentValueSubject.value.setter(&v34);
  }
  v10 = type metadata accessor for SearchAction(0);
  v11 = a1 + *(int *)(v10 + 28);
  if ((*(_BYTE *)(v11 + 8) & 1) == 0)
  {
    v12 = a4 + 16;
    v13 = *(_QWORD *)v11;
    v14 = *(_QWORD *)(a3 + 16);
    v15 = v14 + *(_QWORD *)(class metadata base offset for ManagedBuffer + *(_QWORD *)v14 + 16);
    v16 = (os_unfair_lock_s *)(v14 + ((*(unsigned int *)(*(_QWORD *)v14 + 48) + 3) & 0x1FFFFFFFCLL));
    os_unfair_lock_lock(v16);
    sub_28D6EC(v15, v13);
    os_unfair_lock_unlock(v16);
    swift_beginAccess(v12, v33, 0, 0);
    Strong = swift_weakLoadStrong(v12);
    if (Strong)
    {
      *(_BYTE *)(Strong + OBJC_IVAR____TtC8ShelfKit15SearchPresenter_userSelectedHint) = 1;
      swift_release(Strong);
    }
  }
  v18 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v37._object = (void *)0xEC00000073747361;
  v19._object = (void *)0x800000000030C990;
  v19._countAndFlagsBits = 0xD000000000000013;
  v20._countAndFlagsBits = 0;
  v20._object = (void *)0xE000000000000000;
  v37._countAndFlagsBits = 0x63646F50206C6C41;
  v21 = NSLocalizedString(_:tableName:bundle:value:comment:)(v19, (Swift::String_optional)0, (NSBundle)v18, v20, v37);

  v22 = _stringCompareWithSmolCheck(_:_:expecting:)(0x65726F7473, 0xE500000000000000, 0x7972617262696CLL, 0xE700000000000000, 0);
  v34 = xmmword_2EF440;
  v35 = v21;
  v36 = v22 & 1;
  CurrentValueSubject.value.setter(&v34);
  v24 = *(_QWORD *)(a1 + 8);
  v23 = *(void **)(a1 + 16);
  v25 = swift_bridgeObjectRetain(v23);
  CurrentValueSubject.value.getter(&v34, v25);
  v26 = (void *)*((_QWORD *)&v34 + 1);
  if (*((_QWORD *)&v34 + 1))
  {
    countAndFlagsBits = v35._countAndFlagsBits;
    object = v35._object;
    v29 = v34;
    swift_bridgeObjectRetain(*((_QWORD *)&v34 + 1));
    sub_80030(v29, (uint64_t)v26, countAndFlagsBits, (uint64_t)object);
    if (*(_BYTE *)(a1 + *(int *)(v10 + 32)))
      v30 = 0;
    else
      v30 = 2;
  }
  else
  {
    if (*(_BYTE *)(a1 + *(int *)(v10 + 32)))
      v30 = 0;
    else
      v30 = 2;
    swift_bridgeObjectRetain(v23);
    v29 = v24;
    v26 = v23;
  }
  *(_QWORD *)&v34 = v24;
  *((_QWORD *)&v34 + 1) = v23;
  v35._countAndFlagsBits = v29;
  v35._object = v26;
  v36 = v30;
  return CurrentValueSubject.value.setter(&v34);
}

uint64_t sub_7FCE8(uint64_t a1)
{
  return SearchPresenter.perform(searchAction:sender:)(a1);
}

uint64_t sub_7FD08@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char IsManaged;
  uint64_t result;

  v2 = AnalyticsUserIdentifier.clientId.getter();
  v4 = v3;
  v5 = AnalyticsUserIdentifier.userAllowsPersonalization.getter();
  IsManaged = AnalyticsUserIdentifier.userIsManagedAccount.getter();
  result = AnalyticsUserIdentifier.userUnder13YearsOld.getter();
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = v5 & 1;
  *(_BYTE *)(a1 + 33) = IsManaged & 1;
  *(_BYTE *)(a1 + 34) = result & 1;
  *(_QWORD *)(a1 + 40) = &_swiftEmptyArrayStorage;
  *(_QWORD *)(a1 + 48) = &_swiftEmptyArrayStorage;
  *(_QWORD *)(a1 + 56) = &_swiftEmptyArrayStorage;
  *(_QWORD *)(a1 + 64) = &_swiftEmptyArrayStorage;
  *(_QWORD *)(a1 + 72) = &_swiftEmptyArrayStorage;
  *(_QWORD *)(a1 + 80) = &_swiftEmptyArrayStorage;
  *(_QWORD *)(a1 + 88) = &_swiftEmptyArrayStorage;
  *(_QWORD *)(a1 + 96) = &_swiftEmptyArrayStorage;
  return result;
}

uint64_t sub_7FD90(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _QWORD *boxed_opaque_existential_2Tm;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  id v34;
  _QWORD v35[6];
  _QWORD v36[5];

  v33 = a2;
  v34 = a3;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2820);
  __chkstk_darwin(v8);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ClickLocationElement(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  v14 = __chkstk_darwin(v11);
  v15 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v17 = (char *)&v32 - v16;
  v18 = type metadata accessor for EmptyAction(0);
  v36[3] = v18;
  v36[4] = &protocol witness table for EmptyAction;
  boxed_opaque_existential_2Tm = __swift_allocate_boxed_opaque_existential_2Tm(v36);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(boxed_opaque_existential_2Tm, a1, v18);
  v20 = *(_QWORD *)(a5 + 16);
  sub_267BC(a4, (uint64_t)v10, &qword_3B2820);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    swift_retain(v20);
    sub_1459C((uint64_t)v10, &qword_3B2820);
  }
  else
  {
    v21 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
    v21(v17, v10, v11);
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v17, v11);
    v22 = *(unsigned __int8 *)(v12 + 80);
    v23 = (v22 + 16) & ~v22;
    v24 = swift_allocObject(&unk_37BE40, v23 + v13, v22 | 7);
    v21((char *)(v24 + v23), v15, v11);
    swift_retain_n(v20, 2);
    v25 = BaseObjectGraph.transformingMetricsFieldsContext(with:)(sub_3C658, v24);
    swift_release_n(v20, 2);
    swift_release(v24);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v17, v11);
    v20 = v25;
  }
  type metadata accessor for ActionRunnerOptions(0);
  v26 = swift_retain(v20);
  v27 = BaseObjectGraph.__allocating_init(_:)(v26);
  sub_267BC(v33, (uint64_t)v35, (uint64_t *)&unk_3BC540);
  v35[4] = v34;
  v28 = v34;
  v29 = _s8ShelfKit19ActionRunnerOptionsC04withC6OriginyACXDAA0cG0VSgF_0((uint64_t)v35);
  sub_1459C((uint64_t)v35, &qword_3B18E8);
  swift_release(v27);
  sub_150C8((uint64_t)v36, (uint64_t)v35);
  v35[5] = v29;
  v30 = ActionPerformer.callAsFunction()();
  swift_release(v20);
  sub_23740(v35);
  __swift_destroy_boxed_opaque_existential_1(v36);
  return v30;
}

uint64_t sub_80030(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    return swift_bridgeObjectRelease(a4);
  }
  return result;
}

uint64_t sub_80064(uint64_t a1)
{
  return sub_7A6C4(a1);
}

unint64_t sub_8006C()
{
  unint64_t result;

  result = qword_3B45A8;
  if (!qword_3B45A8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SearchFacetFilter);
    atomic_store(result, (unint64_t *)&qword_3B45A8);
  }
  return result;
}

uint64_t sub_800B0()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_800D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;

  sub_7A8B0(a1, a2, a3, a4, a5, v5[2], v5[3], v5[4]);
}

uint64_t sub_800E4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t (*v5)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v6;
  uint64_t result;

  v5 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(v2 + 16);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4A70);
  result = v5(a1, *(_QWORD *)(a1 + *(int *)(v6 + 48)), *(_QWORD *)(a1 + *(int *)(v6 + 48) + 8), *(_QWORD *)(a1 + *(int *)(v6 + 48) + 16), *(_QWORD *)(a1 + *(int *)(v6 + 48) + 24));
  *a2 = result;
  return result;
}

unint64_t sub_80138()
{
  unint64_t result;

  result = qword_3B4608;
  if (!qword_3B4608)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SearchExtensionTerm);
    atomic_store(result, (unint64_t *)&qword_3B4608);
  }
  return result;
}

BOOL sub_80180(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_7B684(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_80188()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_801AC@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, _QWORD))(v2 + 16))(a1, *(_QWORD *)(a1 + 40));
  *a2 = result & 1;
  return result;
}

void sub_801DC(uint64_t a1)
{
  sub_7BA58(a1);
}

uint64_t objectdestroyTm_1()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_80214@<X0>(_BYTE *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  v3 = (uint64_t *)(v2 + 16);
  if (!*a1)
    v3 = (uint64_t *)(v2 + 24);
  v4 = *v3;
  *a2 = *v3;
  return swift_retain(v4);
}

uint64_t sub_80234(uint64_t a1)
{
  uint64_t v1;

  return sub_7BD1C(a1, v1);
}

uint64_t sub_8023C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  if (v1)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  }
  return swift_deallocObject(v0, 48, 7);
}

unint64_t sub_8026C()
{
  unint64_t result;

  result = qword_3B4688;
  if (!qword_3B4688)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SearchExtensionScope);
    atomic_store(result, (unint64_t *)&qword_3B4688);
  }
  return result;
}

uint64_t sub_802B0()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  swift_release(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_802F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  return sub_7BD98(a1, a2, a3, a4, a5, a6, *(_QWORD **)(v6 + 16), *(_QWORD *)(v6 + 24));
}

uint64_t sub_80324(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD *, _QWORD *))(v1 + 16))(*a1, a1[1], a1[2], a1[3], a1 + 4, a1 + 9);
}

uint64_t sub_80358@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return sub_7CC88(a1, a2, v3, a3);
}

uint64_t sub_80360@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD v5[5];

  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v2 + 16))(v5, a1, a1 + 40);
  return sub_80AAC((uint64_t)v5, a2);
}

unint64_t sub_803A0()
{
  unint64_t result;

  result = qword_3B46C0;
  if (!qword_3B46C0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SearchContentRequest);
    atomic_store(result, (unint64_t *)&qword_3B46C0);
  }
  return result;
}

uint64_t sub_803E4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  _BYTE v4[40];

  sub_80AAC(a1, (uint64_t)v4);
  result = SearchController.publisher(for:)((uint64_t)v4);
  *a2 = result;
  return result;
}

uint64_t sub_8041C(unsigned __int8 *a1)
{
  uint64_t v1;

  return sub_7D3B4(a1, v1);
}

uint64_t objectdestroy_5Tm()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[4]);
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_8045C(unsigned __int8 *a1)
{
  return sub_7DFA8(a1);
}

uint64_t sub_80468(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4600);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_804B0()
{
  _QWORD *v0;
  uint64_t v1;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_release(v0[6]);
  v1 = v0[8];
  if (v1)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(v0[10]);
  }
  swift_release(v0[12]);
  swift_release(v0[13]);
  return swift_deallocObject(v0, 112, 7);
}

uint64_t sub_80508(uint64_t *a1)
{
  uint64_t *v1;

  return sub_7EA7C(a1, v1[2], v1[3], v1[4], v1[5], v1[6], v1 + 7, v1[12], v1[13]);
}

uint64_t sub_8053C(uint64_t a1)
{
  uint64_t v1;

  return sub_7EE3C(a1, v1);
}

uint64_t sub_80544()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = type metadata accessor for SearchAction(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  swift_bridgeObjectRelease();
  v7 = v0 + v4 + *(int *)(v1 + 24);
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  v10 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v11 = (v10 + 15) & 0xFFFFFFFFFFFFFFF8;
  v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF8;
  v13 = v6 + *(int *)(v1 + 36);
  v14 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  swift_release(*(_QWORD *)(v0 + v10));
  swift_release(*(_QWORD *)(v0 + v11));
  swift_release(*(_QWORD *)(v0 + v12));
  return swift_deallocObject(v0, v12 + 8, v3 | 7);
}

uint64_t sub_80654()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for SearchAction(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_7F9E0(v0 + v2, *(_QWORD *)(v0 + v3), *(_QWORD *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0 + ((((v3 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_806AC(uint64_t a1)
{
  uint64_t result;

  result = sub_F1C0(&qword_3B47E8, (void (*)(uint64_t))type metadata accessor for SearchPresenter, (uint64_t)&protocol conformance descriptor for SearchPresenter);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for SearchPresenter(uint64_t a1)
{
  uint64_t result;

  result = qword_3B4858;
  if (!qword_3B4858)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SearchPresenter);
  return result;
}

unint64_t sub_80728()
{
  unint64_t result;

  result = qword_3B47F0;
  if (!qword_3B47F0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SearchFacetFilter);
    atomic_store(result, (unint64_t *)&qword_3B47F0);
  }
  return result;
}

uint64_t sub_8076C()
{
  return sub_F1C0(&qword_3B4828, (void (*)(uint64_t))type metadata accessor for SearchPresenter, (uint64_t)&protocol conformance descriptor for SearchPresenter);
}

uint64_t sub_80798@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = SearchPresenter.pageExtensions.getter();
  *a1 = result;
  return result;
}

uint64_t sub_807C0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *(_QWORD *)(*(_QWORD *)a2 + 152);
  *(_QWORD *)(*(_QWORD *)a2 + 152) = v2;
  swift_bridgeObjectRetain(v2);
  return swift_bridgeObjectRelease(v3);
}

uint64_t sub_807F0()
{
  return type metadata accessor for SearchPresenter(0);
}

void sub_807F8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[37];

  v6[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v6[1] = &unk_2EF638;
  v6[2] = &unk_2EF638;
  v6[3] = (char *)&value witness table for Builtin.NativeObject + 64;
  v6[4] = &unk_2EF638;
  v6[5] = &unk_2EF650;
  v6[6] = &unk_2EF638;
  v6[7] = &unk_2EF638;
  v6[8] = (char *)&value witness table for Builtin.NativeObject + 64;
  v6[9] = (char *)&value witness table for Builtin.NativeObject + 64;
  v6[10] = (char *)&value witness table for Builtin.NativeObject + 64;
  v6[11] = (char *)&value witness table for Builtin.NativeObject + 64;
  v6[12] = (char *)&value witness table for Builtin.NativeObject + 64;
  v6[13] = &unk_2EF638;
  v6[14] = &unk_2EF668;
  v6[15] = &unk_2EF680;
  v6[16] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2 = type metadata accessor for InteractionContext.Page(319);
  if (v3 <= 0x3F)
  {
    v6[17] = *(_QWORD *)(v2 - 8) + 64;
    v6[18] = (char *)&value witness table for Builtin.NativeObject + 64;
    v6[19] = (char *)&value witness table for Builtin.NativeObject + 64;
    v6[20] = (char *)&value witness table for Builtin.NativeObject + 64;
    v6[21] = (char *)&value witness table for Builtin.NativeObject + 64;
    sub_8092C(319);
    if (v5 <= 0x3F)
    {
      v6[22] = *(_QWORD *)(v4 - 8) + 64;
      v6[23] = &unk_2EF680;
      v6[24] = &unk_2EF680;
      v6[25] = (char *)&value witness table for Builtin.NativeObject + 64;
      v6[26] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v6[27] = (char *)&value witness table for Builtin.NativeObject + 64;
      v6[28] = (char *)&value witness table for Builtin.NativeObject + 64;
      v6[29] = (char *)&value witness table for Builtin.NativeObject + 64;
      v6[30] = &unk_2EF680;
      v6[31] = &unk_2EF680;
      v6[32] = &unk_2EF680;
      v6[33] = &unk_2EF680;
      v6[34] = &unk_2EF698;
      v6[35] = (char *)&value witness table for Builtin.NativeObject + 64;
      v6[36] = (char *)&value witness table for Builtin.NativeObject + 64;
      swift_updateClassMetadata2(a1, 256, 37, v6, a1 + 80);
    }
  }
}

uint64_t method lookup function for SearchPresenter(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for SearchPresenter);
}

uint64_t dispatch thunk of SearchPresenter.__allocating_init(asPartOf:with:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 376))();
}

void sub_8092C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_3B4868)
  {
    v2 = type metadata accessor for JSONObject(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_3B4868);
  }
}

uint64_t sub_80980(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4720);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_809C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4720);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t *sub_80A10(uint64_t *a1)
{
  sub_80B2C(*a1, a1[1], a1[2], a1[3]);
  return a1;
}

uint64_t *sub_80A44(uint64_t *a1)
{
  sub_80030(*a1, a1[1], a1[2], a1[3]);
  return a1;
}

uint64_t sub_80A78()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1((_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_80A9C@<X0>(__int128 *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_7DCB0(a1, (_QWORD *)(v2 + 16), a2);
}

uint64_t sub_80AA4(_QWORD *a1)
{
  return sub_7DD80(a1);
}

uint64_t sub_80AAC(uint64_t a1, uint64_t a2)
{
  __swift_memcpy33_8(a2, a1);
  return a2;
}

uint64_t sub_80AE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  uint64_t result;

  if (a5 >> 6)
  {
    if (a5 >> 6 != 1)
      return result;
    swift_bridgeObjectRetain(a4);
  }
  return swift_bridgeObjectRetain(a2);
}

uint64_t sub_80B2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain(a2);
    return swift_bridgeObjectRetain(a4);
  }
  return result;
}

uint64_t sub_80B5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for ClickLocationElement(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_80BBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = type metadata accessor for GroupedSearchResultsPage(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 48) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v7 = v0 + v4;
  v8 = type metadata accessor for PageID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  swift_bridgeObjectRelease();
  v9 = v7 + *(int *)(v1 + 24);
  v10 = type metadata accessor for PageMetrics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_80C78@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for GroupedSearchResultsPage(0) - 8) + 80);
  return sub_7B504(a1, *(_QWORD *)(v2 + 16), *(void **)(v2 + 24), v2 + ((v5 + 48) & ~v5), a2);
}

_QWORD *sub_80CD8(uint64_t a1)
{
  int64_t v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_180880(0, v1, 0);
    v3 = (uint64_t *)(a1 + 56);
    do
    {
      v4 = *(v3 - 3);
      v5 = *(v3 - 2);
      v7 = *(v3 - 1);
      v6 = *v3;
      v8 = _swiftEmptyArrayStorage[2];
      v9 = _swiftEmptyArrayStorage[3];
      swift_bridgeObjectRetain(v5);
      swift_bridgeObjectRetain(v6);
      if (v8 >= v9 >> 1)
        sub_180880(v9 > 1, v8 + 1, 1);
      v3 += 5;
      _swiftEmptyArrayStorage[2] = v8 + 1;
      v10 = &_swiftEmptyArrayStorage[4 * v8];
      v10[4] = v4;
      v10[5] = v5;
      v10[6] = v7;
      v10[7] = v6;
      --v1;
    }
    while (v1);
  }
  return _swiftEmptyArrayStorage;
}

_QWORD *GroupedSearchResultsPage.searchFacetFilters.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = type metadata accessor for GroupedSearchResultsPage(0);
  v2 = swift_bridgeObjectRetain(*(_QWORD *)(v0 + *(int *)(v1 + 20)));
  v3 = sub_80CD8(v2);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t GroupedSearchResultsPage.result(for:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v20;

  v8 = result;
  if (!result && a2 == 0xE000000000000000
    || (result = _stringCompareWithSmolCheck(_:_:expecting:)(result, a2, 0, 0xE000000000000000, 0),
        (result & 1) != 0))
  {
    if (!a3 && a4 == 0xE000000000000000
      || (result = _stringCompareWithSmolCheck(_:_:expecting:)(a3, a4, 0, 0xE000000000000000, 0), (result & 1) != 0))
    {
      *(_QWORD *)(a5 + 32) = 0;
      *(_OWORD *)a5 = 0u;
      *(_OWORD *)(a5 + 16) = 0u;
      return result;
    }
  }
  v20 = a5;
  result = type metadata accessor for GroupedSearchResultsPage(0);
  v10 = *(_QWORD *)(v5 + *(int *)(result + 20));
  v11 = *(_QWORD *)(v10 + 16);
  if (!v11)
  {
LABEL_22:
    *(_QWORD *)(v20 + 32) = 0;
    *(_OWORD *)v20 = 0u;
    *(_OWORD *)(v20 + 16) = 0u;
    return result;
  }
  v12 = (uint64_t *)(v10 + 64);
  while (1)
  {
    v14 = *(v12 - 4);
    v13 = *(v12 - 3);
    v16 = *(v12 - 2);
    v15 = *(v12 - 1);
    v17 = *v12;
    if (v14 != v8 || v13 != a2)
    {
      result = _stringCompareWithSmolCheck(_:_:expecting:)(*(v12 - 4), *(v12 - 3), v8, a2, 0);
      if ((result & 1) == 0)
        goto LABEL_10;
    }
    if (v16 == a3 && v15 == a4)
      break;
    result = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v15, a3, a4, 0);
    if ((result & 1) != 0)
      goto LABEL_24;
LABEL_10:
    v12 += 5;
    if (!--v11)
      goto LABEL_22;
  }
  v16 = a3;
  v15 = a4;
LABEL_24:
  *(_QWORD *)v20 = v14;
  *(_QWORD *)(v20 + 8) = v13;
  *(_QWORD *)(v20 + 16) = v16;
  *(_QWORD *)(v20 + 24) = v15;
  *(_QWORD *)(v20 + 32) = v17;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v15);
  return swift_retain(v17);
}

uint64_t static SearchFacetFilter.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v12;
  uint64_t result;

  if (a1 == a5 && a2 == a6
    || (v12 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a5, a6, 0), result = 0, (v12 & 1) != 0))
  {
    if (a3 == a7 && a4 == a8)
      return 1;
    else
      return _stringCompareWithSmolCheck(_:_:expecting:)(a3, a4, a7, a8, 0);
  }
  return result;
}

uint64_t GroupedSearchResultsPage.Result.ID.rawValue.getter(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain(a2);
  return a1;
}

uint64_t SearchFacetFilter.title.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_bridgeObjectRetain(a4);
  return a3;
}

uint64_t SearchFacetFilter.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  swift_bridgeObjectRetain(a3);
  String.hash(into:)(a1, a2, a3);
  swift_bridgeObjectRelease(a3);
  swift_bridgeObjectRetain(a5);
  String.hash(into:)(a1, a4, a5);
  return swift_bridgeObjectRelease(a5);
}

Swift::Int SearchFacetFilter.hashValue.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v9[9];

  Hasher.init(_seed:)(v9);
  swift_bridgeObjectRetain(a2);
  String.hash(into:)(v9, a1, a2);
  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRetain(a4);
  String.hash(into:)(v9, a3, a4);
  swift_bridgeObjectRelease(a4);
  return Hasher._finalize()();
}

uint64_t sub_811CC@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain(v2);
}

Swift::Int sub_811D8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  v1 = *v0;
  v2 = v0[1];
  v4 = v0[2];
  v3 = v0[3];
  Hasher.init(_seed:)(v6);
  swift_bridgeObjectRetain(v2);
  String.hash(into:)(v6, v1, v2);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(v6, v4, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_8125C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *v1;
  v4 = v1[1];
  v6 = v1[2];
  v5 = v1[3];
  swift_bridgeObjectRetain(v4);
  String.hash(into:)(a1, v3, v4);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(a1, v6, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_812CC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  v1 = *v0;
  v2 = v0[1];
  v4 = v0[2];
  v3 = v0[3];
  Hasher.init(_seed:)(v6);
  swift_bridgeObjectRetain(v2);
  String.hash(into:)(v6, v1, v2);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(v6, v4, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_8134C(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  char v12;
  uint64_t result;

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v7 = a1[3];
  v8 = a2[1];
  v9 = a2[2];
  v10 = a2[3];
  v11 = v4 == *a2 && v5 == v8;
  if (v11 || (v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v8, 0), result = 0, (v12 & 1) != 0))
  {
    if (v6 == v9 && v7 == v10)
      return 1;
    else
      return _stringCompareWithSmolCheck(_:_:expecting:)(v6, v7, v9, v10, 0);
  }
  return result;
}

uint64_t static SearchFacetFilter.empty.getter()
{
  return 0;
}

uint64_t GroupedSearchResultsPage.Result.searchFacetFilter.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[3];
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  return v1;
}

void *sub_81438()
{
  return &protocol witness table for String;
}

unint64_t sub_81448(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_81474();
  result = sub_814B8();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_81474()
{
  unint64_t result;

  result = qword_3B4A98;
  if (!qword_3B4A98)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SearchFacetFilter);
    atomic_store(result, (unint64_t *)&qword_3B4A98);
  }
  return result;
}

unint64_t sub_814B8()
{
  unint64_t result;

  result = qword_3B4AA0;
  if (!qword_3B4AA0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SearchFacetFilter);
    atomic_store(result, (unint64_t *)&qword_3B4AA0);
  }
  return result;
}

ValueMetadata *type metadata accessor for SearchFacetFilter()
{
  return &type metadata for SearchFacetFilter;
}

uint64_t FetchShowLatestCatalogEpisodesIntentImplementation.perform(_:objectGraph:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
  *(_QWORD *)(v1 + 64) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4AB0);
  *(_QWORD *)(v1 + 72) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4AB8);
  *(_QWORD *)(v1 + 80) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4AC0);
  *(_QWORD *)(v1 + 88) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4AC8);
  *(_QWORD *)(v1 + 96) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for MediaRequest.RequestType(0);
  *(_QWORD *)(v1 + 104) = v8;
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v1 + 112) = v9;
  *(_QWORD *)(v1 + 120) = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for MediaRequest.Params(0);
  *(_QWORD *)(v1 + 128) = v10;
  v11 = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v1 + 136) = v11;
  *(_QWORD *)(v1 + 144) = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4AD0);
  *(_QWORD *)(v1 + 152) = v12;
  v13 = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v1 + 160) = v13;
  *(_QWORD *)(v1 + 168) = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_OWORD *)(v1 + 176) = *(_OWORD *)a1;
  *(_QWORD *)(v1 + 192) = *(_QWORD *)(a1 + 16);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4AD8);
  v15 = (_QWORD *)swift_task_alloc(async function pointer to BaseObjectGraph.inject<A>(_:)[1]);
  *(_QWORD *)(v1 + 200) = v15;
  *v15 = v1;
  v15[1] = sub_816C8;
  return BaseObjectGraph.inject<A>(_:)(v1 + 16, v14, v14);
}

uint64_t sub_816C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 200);
  *(_QWORD *)(*(_QWORD *)v1 + 208) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_81C20;
  else
    v3 = sub_8172C;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_8172C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v1 = v0[24];
  v2 = v0[22];
  v47 = v0[23];
  v3 = v0[14];
  v4 = v0[15];
  v46 = v4;
  v5 = v0[12];
  v6 = v0[13];
  v7 = v0[10];
  v8 = v0[11];
  v42 = v0[9];
  v43 = v0[8];
  v44 = v8;
  v48 = v0[5];
  v49 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v48);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 104))(v4, enum case for MediaRequest.RequestType.catalog(_:), v6);
  v9 = enum case for MediaRequest.ContentType.podcast(_:);
  v10 = type metadata accessor for MediaRequest.ContentType(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 104);
  v45 = v5;
  v12(v5, v9, v10);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56))(v5, 0, 1, v10);
  v13 = type metadata accessor for MediaRequest.ViewType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v8, 1, 1, v13);
  v14 = enum case for MediaRequest.Relationship.episodes(_:);
  v15 = type metadata accessor for MediaRequest.Relationship(0);
  v16 = *(_QWORD *)(v15 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 104))(v7, v14, v15);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(v7, 0, 1, v15);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4AE0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4AE8);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(_QWORD *)(v19 + 72);
  v21 = *(unsigned __int8 *)(v19 + 80);
  v22 = (v21 + 32) & ~v21;
  v23 = swift_allocObject(v17, v22 + v20, v21 | 7);
  *(_OWORD *)(v23 + 16) = xmmword_2EA0D0;
  v24 = v23 + v22;
  v25 = *(int *)(v18 + 48);
  v12(v24, enum case for MediaRequest.ContentType.podcastEpisode(_:), v10);
  *(_QWORD *)(v24 + v25) = v1;
  swift_bridgeObjectRetain(v1);
  v41 = sub_180404(v23);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8730);
  v27 = swift_allocObject(v26, 48, 7);
  *(_OWORD *)(v27 + 16) = xmmword_2EA0D0;
  v0[7] = v2;
  v28 = sub_144B4();
  *(_QWORD *)(v27 + 32) = BinaryInteger.description.getter(&type metadata for UInt64, v28);
  *(_QWORD *)(v27 + 40) = v29;
  v30 = type metadata accessor for MediaRequest.URLFragment(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v42, 1, 1, v30);
  v31 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v43, 1, 1, v31);
  v32 = sub_18024C((uint64_t)_swiftEmptyArrayStorage);
  v33 = sub_18024C((uint64_t)_swiftEmptyArrayStorage);
  v34 = sub_180270((uint64_t)_swiftEmptyArrayStorage);
  v35 = sub_180404((uint64_t)_swiftEmptyArrayStorage);
  v36 = sub_1805C4((uint64_t)_swiftEmptyArrayStorage);
  v37 = sub_1805E8((uint64_t)_swiftEmptyArrayStorage);
  MediaRequest.Params.init(requestType:requestContentType:viewType:directFetch:relationshipIncludes:relationshipRelates:relationshipLimit:include:omit:typedIncludes:typedExtends:fields:withTypes:identifiers:fragment:limit:filters:meta:offset:requestAllPages:hostUrl:countryCode:isImplicitActionRequest:searchTerm:queryContentTypes:triggerBy:includeEntitlementsOverride:)(v46, v45, v44, v7, v32, v33, v34, _swiftEmptyArrayStorage, _swiftEmptyArrayStorage, v35, v41, _swiftEmptyArrayStorage, _swiftEmptyArrayStorage, v27, v42, v47, 0, v36, v37,
    0,
    1,
    v43,
    0,
    0,
    0,
    0,
    0,
    _swiftEmptyArrayStorage,
    0,
    0,
    2);
  v38 = type metadata accessor for ServerPodcastEpisode(0);
  v39 = (_QWORD *)swift_task_alloc(async function pointer to MediaRequestControllerProtocol.performRecursivelyWithParsing<A>(params:resultType:account:)[1]);
  v0[27] = v39;
  *v39 = v0;
  v39[1] = sub_81AC8;
  return MediaRequestControllerProtocol.performRecursivelyWithParsing<A>(params:resultType:account:)(v0[21], v0[18], v38, 0, v48, v38, v49);
}

uint64_t sub_81AC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 216);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 136);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 144);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 128);
  *(_QWORD *)(*(_QWORD *)v1 + 224) = v0;
  swift_task_dealloc(v2);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  if (v0)
    v6 = sub_81CB8;
  else
    v6 = sub_81B4C;
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_81B4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *(_QWORD *)(v0 + 160);
  v1 = *(_QWORD *)(v0 + 168);
  v4 = *(_QWORD *)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 152);
  v5 = *(_QWORD *)(v0 + 120);
  v7 = *(_QWORD *)(v0 + 88);
  v6 = *(_QWORD *)(v0 + 96);
  v8 = *(_QWORD *)(v0 + 80);
  v10 = *(_QWORD *)(v0 + 72);
  v11 = *(_QWORD *)(v0 + 64);
  v12 = MediaAPIResponse.objects.getter(v3);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  __swift_destroy_boxed_opaque_existential_1((_QWORD *)(v0 + 16));
  swift_task_dealloc(v1);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v12);
}

uint64_t sub_81C20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 120);
  v4 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 96);
  v6 = *(_QWORD *)(v0 + 72);
  v5 = *(_QWORD *)(v0 + 80);
  v7 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 168));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_81CB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  __swift_destroy_boxed_opaque_existential_1((_QWORD *)(v0 + 16));
  v1 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 120);
  v4 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 96);
  v6 = *(_QWORD *)(v0 + 72);
  v5 = *(_QWORD *)(v0 + 80);
  v7 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 168));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_81D58(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;

  *(_QWORD *)(v2 + 16) = a1;
  v4 = (_QWORD *)swift_task_alloc(dword_3B4AAC);
  *(_QWORD *)(v2 + 24) = v4;
  *v4 = v2;
  v4[1] = sub_81DB0;
  return FetchShowLatestCatalogEpisodesIntentImplementation.perform(_:objectGraph:)(a2);
}

uint64_t sub_81DB0(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 24);
  v6 = *v2;
  swift_task_dealloc(v5);
  if (!v1)
    **(_QWORD **)(v4 + 16) = a1;
  return (*(uint64_t (**)(void))(v6 + 8))();
}

unint64_t sub_81E10()
{
  unint64_t result;

  result = qword_3B4AF0;
  if (!qword_3B4AF0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for FetchShowLatestCatalogEpisodesIntent);
    atomic_store(result, (unint64_t *)&qword_3B4AF0);
  }
  return result;
}

ValueMetadata *type metadata accessor for FetchShowLatestCatalogEpisodesIntentImplementation()
{
  return &type metadata for FetchShowLatestCatalogEpisodesIntentImplementation;
}

void *ModernPagePresenter.pageExtensions.getter()
{
  return &_swiftEmptyArrayStorage;
}

uint64_t ShowListProvider.__allocating_init(asPartOf:kind:pageSize:)(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;

  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  v7 = sub_86848(a1, a2, a3);
  swift_release(a1);
  return v7;
}

uint64_t ShowListProvider.$state.getter()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  swift_beginAccess(v0 + OBJC_IVAR____TtC8ShelfKit16ShowListProvider__state, v3, 33, 0);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B27A8);
  Published.projectedValue.getter(v1);
  return swift_endAccess(v3);
}

Swift::Void __swiftcall ShowListProvider.start()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  id v34;
  uint64_t KeyPath;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t ObjectType;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t (*v96)(uint64_t, uint64_t);
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  int v141;
  char *v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  void (*v151)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v152;
  char *v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  id v161;
  char *v162;
  char *v163;
  char *v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  __int128 v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;

  v182 = *v0;
  v169 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(0);
  v168 = *(_QWORD *)(v169 - 8);
  __chkstk_darwin(v169);
  v165 = (char *)&v133 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v166 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4B20);
  v167 = *(_QWORD *)(v166 - 8);
  __chkstk_darwin(v166);
  v163 = (char *)&v133 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4B28);
  v4 = *(_QWORD *)(v3 - 8);
  v171 = v3;
  v172 = v4;
  __chkstk_darwin(v3);
  v164 = (char *)&v133 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4B30);
  v7 = *(_QWORD *)(v6 - 8);
  v173 = v6;
  v174 = v7;
  __chkstk_darwin(v6);
  v170 = (char *)&v133 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v156 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4B38);
  v157 = *(_QWORD *)(v156 - 8);
  __chkstk_darwin(v156);
  v153 = (char *)&v133 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v158 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4B40);
  v159 = *(_QWORD *)(v158 - 8);
  __chkstk_darwin(v158);
  v154 = (char *)&v133 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v145 = type metadata accessor for ObserverQueue(0);
  __chkstk_darwin(v145);
  v144 = (char *)&v133 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v147 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4B48);
  v148 = *(_QWORD *)(v147 - 8);
  __chkstk_darwin(v147);
  v146 = (char *)&v133 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v155 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4B50);
  v181 = *(_QWORD *)(v155 - 8);
  v13 = __chkstk_darwin(v155);
  v180 = (char *)&v133 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v176 = (char *)&v133 - v15;
  v175 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2790);
  v143 = *(_QWORD *)(v175 - 8);
  v16 = __chkstk_darwin(v175);
  v142 = (char *)&v133 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v140 = (char *)&v133 - v18;
  v136 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4B58);
  v137 = *(_QWORD *)(v136 - 8);
  __chkstk_darwin(v136);
  v134 = (char *)&v133 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v138 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4B60);
  v139 = *(_QWORD *)(v138 - 8);
  __chkstk_darwin(v138);
  v135 = (char *)&v133 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2B18);
  __chkstk_darwin(v21);
  v177 = (char *)&v133 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4B68);
  v24 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v26 = (char *)&v133 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4B70);
  v28 = *(_QWORD *)(v27 - 8);
  v178 = v27;
  v179 = v28;
  v29 = __chkstk_darwin(v27);
  v31 = (char *)&v133 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  v33 = (char *)&v133 - v32;
  v34 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "_applePodcastsFoundationSharedUserDefaults");
  KeyPath = swift_getKeyPath(&unk_2EF898);
  _KeyValueCodingAndObservingPublishing<>.publisher<A>(for:options:)(KeyPath, 5);
  swift_release(KeyPath);
  v36 = sub_676C8();
  v149 = v36;
  *(_QWORD *)&v184 = ((uint64_t (*)(void))static OS_dispatch_queue.main.getter)();
  v152 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  v151 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v152 - 8) + 56);
  v37 = (uint64_t)v177;
  v151(v177, 1, 1, v152);
  v38 = sub_32914(&qword_3B4B78, &qword_3B4B68, (uint64_t)&protocol conformance descriptor for NSObject.KeyValueObservingPublisher<A, B>);
  v150 = sub_F1C0((unint64_t *)&qword_3B2B60, (void (*)(uint64_t))sub_676C8, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  v162 = v33;
  Publisher.receive<A>(on:options:)(&v184, v37, v23, v36, v38, v150);
  sub_1459C(v37, &qword_3B2B18);

  (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v23);
  v39 = swift_allocObject(&unk_37C070, 24, 7);
  *(_QWORD *)(v39 + 16) = v34;
  v40 = sub_86B54();
  v161 = v34;
  v41 = NSUserDefaults.queryPublisher<A>(_:)(sub_86B2C, v39, &type metadata for ShowsSortType, v40);
  swift_release(v39);
  v42 = v178;
  (*(void (**)(char *, char *, uint64_t))(v179 + 16))(v31, v33, v178);
  v160 = v41;
  *(_QWORD *)&v184 = v41;
  swift_retain(v41);
  v43 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4B88);
  v44 = sub_32914(&qword_3B4B90, &qword_3B4B70, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v45 = sub_32914(&qword_3B4B98, &qword_3B4B88, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v46 = v134;
  Publishers.CombineLatest.init(_:_:)(v31, &v184, v42, v43, v44, v45);
  v47 = v183;
  LODWORD(v43) = *(unsigned __int8 *)(v183 + OBJC_IVAR____TtC8ShelfKit16ShowListProvider_kind);
  v48 = swift_allocObject(&unk_37C098, 17, 7);
  *(_BYTE *)(v48 + 16) = v43;
  LOBYTE(v33) = v43;
  v141 = v43;
  v49 = swift_allocObject(&unk_37C0C0, 32, 7);
  *(_QWORD *)(v49 + 16) = sub_86BA8;
  *(_QWORD *)(v49 + 24) = v48;
  v50 = sub_32914(&qword_3B4BA0, &qword_3B4B58, (uint64_t)&protocol conformance descriptor for Publishers.CombineLatest<A, B>);
  v51 = v135;
  v52 = v136;
  Publisher.map<A>(_:)(sub_86BD8, v49, v136, &type metadata for ShowListProvider.State, v50);
  swift_release(v49);
  (*(void (**)(char *, uint64_t))(v137 + 8))(v46, v52);
  v53 = v47 + OBJC_IVAR____TtC8ShelfKit16ShowListProvider__state;
  v54 = v47;
  swift_beginAccess(v47 + OBJC_IVAR____TtC8ShelfKit16ShowListProvider__state, &v184, 33, 0);
  v55 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B27A8);
  v56 = v140;
  Published.projectedValue.getter(v55);
  swift_endAccess(&v184);
  v57 = sub_32914(&qword_3B4BA8, &qword_3B4B60, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v58 = v138;
  Publisher<>.assign(to:)(v56, v138, v57);
  (*(void (**)(char *, uint64_t))(v139 + 8))(v51, v58);
  v59 = v143;
  v60 = v142;
  v61 = v175;
  (*(void (**)(char *, char *, uint64_t))(v143 + 16))(v142, v56, v175);
  swift_beginAccess(v53, &v184, 33, 0);
  Published.projectedValue.setter(v60, v55);
  swift_endAccess(&v184);
  v143 = *(_QWORD *)(v59 + 8);
  ((void (*)(char *, uint64_t))v143)(v56, v61);
  v62 = v54 + OBJC_IVAR____TtC8ShelfKit16ShowListProvider_libraryDataProvider;
  v63 = *(_QWORD *)(v54 + OBJC_IVAR____TtC8ShelfKit16ShowListProvider_libraryDataProvider);
  v64 = *(_QWORD *)(v62 + 8);
  ObjectType = swift_getObjectType();
  v66 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v64 + 240))(1, 1, ObjectType, v64);
  v67 = (uint64_t)v144;
  swift_storeEnumTagMultiPayload(v144, v145, 2);
  v68 = sub_830E4(v67);
  swift_release(v66);
  sub_145D8(v67, type metadata accessor for ObserverQueue);
  *(_QWORD *)&v184 = v68;
  v69 = swift_allocObject(&unk_37C0E8, 17, 7);
  *(_BYTE *)(v69 + 16) = (_BYTE)v33;
  v70 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4BB8);
  v71 = sub_32914(&qword_3B4BC0, &qword_3B4BB8, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v72 = v146;
  Publisher.map<A>(_:)(sub_86C14, v69, v70, &type metadata for Bool, v71);
  swift_release(v69);
  swift_release(v184);
  v73 = sub_32914(&qword_3B4BC8, &qword_3B4B48, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v74 = v176;
  v75 = v147;
  Publisher<>.removeDuplicates()(v147, v73, &protocol witness table for Bool);
  (*(void (**)(char *, uint64_t))(v148 + 8))(v72, v75);
  swift_beginAccess(v53, &v184, 33, 0);
  Published.projectedValue.getter(v55);
  swift_endAccess(&v184);
  v76 = sub_32914(&qword_3B27B8, &qword_3B2790, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
  v77 = sub_86C30();
  v78 = v153;
  v79 = v175;
  Publisher<>.removeDuplicates()(v175, v76, v77);
  ((void (*)(char *, uint64_t))v143)(v56, v79);
  v80 = v183;
  v81 = *(_QWORD *)(v183 + OBJC_IVAR____TtC8ShelfKit16ShowListProvider_pageSize);
  v82 = (_QWORD *)swift_allocObject(&unk_37C110, 48, 7);
  v82[2] = v63;
  v82[3] = v64;
  v83 = v182;
  v82[4] = v81;
  v82[5] = v83;
  swift_unknownObjectRetain(v63);
  v84 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2600);
  v148 = v84;
  v85 = sub_32914(&qword_3B4BE0, &qword_3B4B38, (uint64_t)&protocol conformance descriptor for Publishers.RemoveDuplicates<A>);
  v86 = v154;
  v87 = v156;
  Publisher.map<A>(_:)(sub_86C98, v82, v156, v84, v85);
  swift_release(v82);
  (*(void (**)(char *, uint64_t))(v157 + 8))(v78, v87);
  v88 = sub_32914(&qword_3B4BE8, &qword_3B4B40, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v89 = sub_32914((unint64_t *)&qword_3B25F8, &qword_3B2600, (uint64_t)&protocol conformance descriptor for AnyPaginatedPublisher<A, B>);
  v90 = v158;
  v91 = Publisher<>.paginatedSwitchToLatest()(v158, v88, v89);
  (*(void (**)(char *, uint64_t))(v159 + 8))(v86, v90);
  v92 = v155;
  (*(void (**)(char *, char *, uint64_t))(v181 + 16))(v180, v74, v155);
  *(_QWORD *)&v184 = v91;
  v93 = v91;
  v175 = v91;
  v94 = *(_QWORD *)(v80 + OBJC_IVAR____TtC8ShelfKit16ShowListProvider_libraryObserverProvider + 24);
  v95 = *(_QWORD *)(v80 + OBJC_IVAR____TtC8ShelfKit16ShowListProvider_libraryObserverProvider + 32);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v80 + OBJC_IVAR____TtC8ShelfKit16ShowListProvider_libraryObserverProvider), v94);
  v96 = *(uint64_t (**)(uint64_t, uint64_t))(v95 + 8);
  swift_retain(v93);
  v187 = v96(v94, v95);
  v186 = AddFavoriteCategoriesSearchTipProvider.addFavoriteCategoriesSearchTipShelf.getter();
  v185 = *(_QWORD *)(v80 + OBJC_IVAR____TtC8ShelfKit16ShowListProvider_interfaceMode);
  swift_retain(v185);
  v97 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3628);
  v98 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B35B8);
  v99 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4C08);
  v100 = sub_32914(&qword_3B4C10, &qword_3B4B50, (uint64_t)&protocol conformance descriptor for Publishers.RemoveDuplicates<A>);
  v101 = sub_32914(&qword_3B4C18, &qword_3B2600, (uint64_t)&protocol conformance descriptor for AnyPaginatedPublisher<A, B>);
  v102 = sub_32914(&qword_3B3638, &qword_3B3628, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v103 = sub_32914(&qword_3B35C0, &qword_3B35B8, (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
  v104 = sub_32914(&qword_3B4C20, &qword_3B4C08, (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
  v132 = v100;
  v105 = v163;
  Publishers.PFCombineLatest5.init(_:_:_:_:_:)(v180, &v184, &v187, &v186, &v185, v92, v148, v97, v98, v99, v132, v101, v102, v103, v104);
  v106 = v165;
  v107 = static OS_dispatch_queue.SchedulerTimeType.Stride.nanoseconds(_:)(1);
  v108 = v149;
  *(_QWORD *)&v184 = static OS_dispatch_queue.main.getter(v107);
  v109 = (uint64_t)v177;
  v151(v177, 1, 1, v152);
  v110 = sub_32914(&qword_3B4C28, &qword_3B4B20, (uint64_t)&protocol conformance descriptor for Publishers.PFCombineLatest5<A, B, C, D, E>);
  v111 = v164;
  v112 = v166;
  Publisher.debounce<A>(for:scheduler:options:)(v106, &v184, v109, v166, v108, v110, v150);
  sub_1459C(v109, &qword_3B2B18);

  (*(void (**)(char *, uint64_t))(v168 + 8))(v106, v169);
  (*(void (**)(char *, uint64_t))(v167 + 8))(v105, v112);
  v113 = v183;
  sub_150C8(v183 + OBJC_IVAR____TtC8ShelfKit16ShowListProvider_libraryActionController, (uint64_t)&v184);
  v114 = swift_allocObject(&unk_37C138, 72, 7);
  *(_BYTE *)(v114 + 16) = v141;
  sub_F4D8(&v184, v114 + 24);
  *(_QWORD *)(v114 + 64) = v182;
  v115 = swift_allocObject(&unk_37C160, 32, 7);
  *(_QWORD *)(v115 + 16) = sub_86CC8;
  *(_QWORD *)(v115 + 24) = v114;
  v116 = type metadata accessor for PageContent(0);
  v117 = sub_32914(&qword_3B4C38, &qword_3B4B28, (uint64_t)&protocol conformance descriptor for Publishers.Debounce<A, B>);
  v118 = v170;
  v119 = v171;
  Publisher.map<A>(_:)(sub_86D00, v115, v171, v116, v117);
  swift_release(v115);
  (*(void (**)(char *, uint64_t))(v172 + 8))(v111, v119);
  v120 = *(_QWORD *)(v113 + OBJC_IVAR____TtC8ShelfKit16ShowListProvider_pageContent);
  v121 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B27B0);
  v122 = sub_32914(&qword_3B4C40, &qword_3B4B30, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v123 = sub_32914((unint64_t *)&unk_3B87F0, &qword_3B27B0, (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
  v124 = v120;
  v125 = v173;
  v126 = Publisher.subscribe<A>(_:)(v124, v173, v121, v122, v123);
  (*(void (**)(char *, uint64_t))(v174 + 8))(v118, v125);
  v127 = v113 + OBJC_IVAR____TtC8ShelfKit16ShowListProvider_subscriptions;
  swift_beginAccess(v113 + OBJC_IVAR____TtC8ShelfKit16ShowListProvider_subscriptions, &v184, 33, 0);
  v128 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2088);
  v129 = sub_32914(&qword_3B2090, &qword_3B2088, (uint64_t)&protocol conformance descriptor for [A]);
  AnyCancellable.store<A>(in:)(v127, v128, v129);
  swift_endAccess(&v184);

  swift_release(v160);
  swift_release(v126);
  (*(void (**)(char *, uint64_t))(v181 + 8))(v176, v92);
  (*(void (**)(char *, uint64_t))(v179 + 8))(v162, v178);
  v130 = (uint64_t *)(v113 + OBJC_IVAR____TtC8ShelfKit16ShowListProvider_paginatedPublisher);
  swift_beginAccess(v113 + OBJC_IVAR____TtC8ShelfKit16ShowListProvider_paginatedPublisher, &v184, 1, 0);
  v131 = *v130;
  *v130 = v175;
  swift_release(v131);
}

Swift::Void __swiftcall ShowListProvider.transition(to:)(ShelfKit::InterfaceMode to)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit16ShowListProvider_interfaceMode);
  swift_retain(v2);
  CurrentValueSubject.send(_:)();
  swift_release(v2);
}

uint64_t ShowListProvider.state.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_2EF8C0);
  v4 = swift_getKeyPath(&unk_2EF8E8);
  static Published.subscript.getter(a1, v1, KeyPath, v4);
  swift_release(KeyPath);
  return swift_release(v4);
}

uint64_t sub_830E4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v2 = type metadata accessor for ObserverQueue(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(v2);
  v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4EB8);
  v33 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4EC0);
  v10 = *(_QWORD *)(v9 - 8);
  v34 = v9;
  v35 = v10;
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = Promise.publisher.getter(v11);
  sub_14510(a1, (uint64_t)v5, type metadata accessor for ObserverQueue);
  v14 = *(unsigned __int8 *)(v3 + 80);
  v15 = (v14 + 16) & ~v14;
  v16 = swift_allocObject(&unk_37C2C8, v15 + v4, v14 | 7);
  v17 = sub_3C56C((uint64_t)v5, v16 + v15, type metadata accessor for ObserverQueue);
  v18 = static Subscribers.Demand.unlimited.getter(v17);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4EC8);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4BB8);
  v21 = sub_32914(&qword_3B4ED0, &qword_3B4EC8, (uint64_t)&protocol conformance descriptor for Future<A, B>);
  v22 = sub_32914(&qword_3B4BC0, &qword_3B4BB8, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.flatMap<A>(maxPublishers:_:)(v18, sub_87314, v16, v19, v20, v21, v22);
  swift_release(v16);
  swift_release(v36);
  v23 = sub_32914(&qword_3B4ED8, &qword_3B4EB8, (uint64_t)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
  v24 = Publisher.bufferedMulticast()(v6, v23);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v8, v6);
  v36 = v24;
  v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4EE0);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4EE8);
  v27 = sub_32914(&qword_3B4EF0, &qword_3B4EE0, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v28 = sub_32914(&qword_3B4EF8, &qword_3B4EE8, (uint64_t)&protocol conformance descriptor for Just<A>);
  Publisher.catch<A>(_:)(sub_86678, 0, v25, v26, v27, v28);
  swift_release(v24);
  v29 = sub_32914(&qword_3B4F00, &qword_3B4EC0, (uint64_t)&protocol conformance descriptor for Publishers.Catch<A, B>);
  v30 = v34;
  v31 = Publisher.eraseToAnyPublisher()(v34, v29);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v13, v30);
  return v31;
}

uint64_t sub_833EC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v2 = type metadata accessor for ObserverQueue(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(v2);
  v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4DE8);
  v33 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4DF0);
  v10 = *(_QWORD *)(v9 - 8);
  v34 = v9;
  v35 = v10;
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = Promise.publisher.getter(v11);
  sub_14510(a1, (uint64_t)v5, type metadata accessor for ObserverQueue);
  v14 = *(unsigned __int8 *)(v3 + 80);
  v15 = (v14 + 16) & ~v14;
  v16 = swift_allocObject(&unk_37C278, v15 + v4, v14 | 7);
  v17 = sub_3C56C((uint64_t)v5, v16 + v15, type metadata accessor for ObserverQueue);
  v18 = static Subscribers.Demand.unlimited.getter(v17);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4DF8);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3388);
  v21 = sub_32914(&qword_3B4E00, &qword_3B4DF8, (uint64_t)&protocol conformance descriptor for Future<A, B>);
  v22 = sub_32914(&qword_3B3398, &qword_3B3388, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.flatMap<A>(maxPublishers:_:)(v18, sub_870D8, v16, v19, v20, v21, v22);
  swift_release(v16);
  swift_release(v36);
  v23 = sub_32914(&qword_3B4E08, &qword_3B4DE8, (uint64_t)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
  v24 = Publisher.bufferedMulticast()(v6, v23);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v8, v6);
  v36 = v24;
  v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4E10);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4E18);
  v27 = sub_32914(&qword_3B4E20, &qword_3B4E10, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v28 = sub_32914(&qword_3B4E28, &qword_3B4E18, (uint64_t)&protocol conformance descriptor for Just<A>);
  Publisher.catch<A>(_:)(sub_866A4, 0, v25, v26, v27, v28);
  swift_release(v24);
  v29 = sub_32914(&qword_3B4E30, &qword_3B4DF0, (uint64_t)&protocol conformance descriptor for Publishers.Catch<A, B>);
  v30 = v34;
  v31 = Publisher.eraseToAnyPublisher()(v34, v29);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v13, v30);
  return v31;
}

uint64_t sub_836F4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v2 = type metadata accessor for ObserverQueue(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(v2);
  v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4D58);
  v33 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4D60);
  v10 = *(_QWORD *)(v9 - 8);
  v34 = v9;
  v35 = v10;
  __chkstk_darwin(v9);
  v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = Promise.publisher.getter(v13);
  sub_14510(a1, (uint64_t)v5, type metadata accessor for ObserverQueue);
  v14 = *(unsigned __int8 *)(v3 + 80);
  v15 = (v14 + 16) & ~v14;
  v16 = swift_allocObject(&unk_37C250, v15 + v4, v14 | 7);
  v17 = sub_3C56C((uint64_t)v5, v16 + v15, type metadata accessor for ObserverQueue);
  v18 = static Subscribers.Demand.unlimited.getter(v17);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4D70);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4D78);
  v21 = sub_32914(&qword_3B4D80, &qword_3B4D70, (uint64_t)&protocol conformance descriptor for Future<A, B>);
  v22 = sub_32914(&qword_3B4D88, &qword_3B4D78, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.flatMap<A>(maxPublishers:_:)(v18, sub_870C8, v16, v19, v20, v21, v22);
  swift_release(v16);
  swift_release(v36);
  v23 = sub_32914(&qword_3B4D90, &qword_3B4D58, (uint64_t)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
  v24 = Publisher.bufferedMulticast()(v6, v23);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v8, v6);
  v36 = v24;
  v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4D98);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4DA0);
  v27 = sub_32914(&qword_3B4DA8, &qword_3B4D98, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v28 = sub_32914(&qword_3B4DB0, &qword_3B4DA0, (uint64_t)&protocol conformance descriptor for Just<A>);
  Publisher.catch<A>(_:)(sub_866B0, 0, v25, v26, v27, v28);
  swift_release(v24);
  v29 = sub_32914(&qword_3B4DB8, &qword_3B4D60, (uint64_t)&protocol conformance descriptor for Publishers.Catch<A, B>);
  v30 = v34;
  v31 = Publisher.eraseToAnyPublisher()(v34, v29);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v12, v30);
  return v31;
}

uint64_t sub_839FC()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for ModernShelf(0);
  __swift_allocate_value_buffer(v0, qword_3B4B00);
  v1 = __swift_project_value_buffer(v0, (uint64_t)qword_3B4B00);
  return sub_83A44(v1);
}

uint64_t sub_83A44@<X0>(uint64_t a1@<X8>)
{
  int *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  void *v13;
  id v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  id v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  Swift::String v25;
  Swift::String v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *boxed_opaque_existential_2Tm;
  uint64_t v34;
  void (*v35)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v43;
  uint64_t KeyPath;
  void (*v45)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  Swift::String v55;
  Swift::String v56;

  v50 = a1;
  v1 = (int *)type metadata accessor for ModernShelf(0);
  __chkstk_darwin(v1);
  v3 = (uint64_t *)((char *)&v43 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
  __chkstk_darwin(v4);
  v48 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0C38);
  __chkstk_darwin(v6);
  v47 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v8);
  v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = (char *)type metadata accessor for ToggleCellModel(0);
  __chkstk_darwin(v49);
  v12 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_2EF898);
  v13 = (void *)objc_opt_self(NSBundle);
  v14 = objc_msgSend(v13, "mainBundle");
  v15._countAndFlagsBits = 0xD00000000000001ELL;
  v55._object = (void *)0xE000000000000000;
  v15._object = (void *)0x800000000030CA80;
  v16._countAndFlagsBits = 0;
  v16._object = (void *)0xE000000000000000;
  v55._countAndFlagsBits = 0;
  v17 = NSLocalizedString(_:tableName:bundle:value:comment:)(v15, (Swift::String_optional)0, (NSBundle)v14, v16, v55);

  v18 = objc_msgSend(v13, "mainBundle");
  v56._object = (void *)0xE000000000000000;
  v19._object = (void *)0x800000000030CAA0;
  v19._countAndFlagsBits = 0xD000000000000019;
  v20._countAndFlagsBits = 0;
  v20._object = (void *)0xE000000000000000;
  v56._countAndFlagsBits = 0;
  v21 = NSLocalizedString(_:tableName:bundle:value:comment:)(v19, (Swift::String_optional)0, (NSBundle)v18, v20, v56);

  v22 = type metadata accessor for ImpressionMetrics(0);
  v45 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56);
  v46 = v22;
  v45(v10, 1, 1, v22);
  *(_QWORD *)&v51 = 0;
  *((_QWORD *)&v51 + 1) = 0xE000000000000000;
  v23 = KeyPath;
  v54 = KeyPath;
  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4E78);
  _print_unlocked<A, B>(_:_:)(&v54, &v51, v24, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v25._countAndFlagsBits = 45;
  v25._object = (void *)0xE100000000000000;
  String.append(_:)(v25);
  String.append(_:)(v17);
  v26._countAndFlagsBits = 45;
  v26._object = (void *)0xE100000000000000;
  String.append(_:)(v26);
  String.append(_:)(v21);
  v27 = *((_QWORD *)&v51 + 1);
  *(_QWORD *)v12 = v51;
  *((_QWORD *)v12 + 1) = v27;
  *((_QWORD *)v12 + 2) = v23;
  *(Swift::String *)(v12 + 24) = v17;
  *(Swift::String *)(v12 + 40) = v21;
  v28 = (uint64_t)v49;
  sub_15BD4((uint64_t)v10, (uint64_t)&v12[*((int *)v49 + 8)], (uint64_t *)&unk_3B8790);
  v29 = type metadata accessor for Header(0);
  v30 = (uint64_t)v47;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v47, 1, 1, v29);
  v31 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8750);
  v32 = swift_allocObject(v31, 72, 7);
  *(_OWORD *)(v32 + 16) = xmmword_2EA0D0;
  *(_QWORD *)(v32 + 56) = v28;
  *(_QWORD *)(v32 + 64) = sub_F1C0(&qword_3B4E80, (void (*)(uint64_t))type metadata accessor for ToggleCellModel, (uint64_t)&protocol conformance descriptor for ToggleCellModel);
  boxed_opaque_existential_2Tm = __swift_allocate_boxed_opaque_existential_2Tm((_QWORD *)(v32 + 32));
  sub_14510((uint64_t)v12, (uint64_t)boxed_opaque_existential_2Tm, type metadata accessor for ToggleCellModel);
  v34 = type metadata accessor for URL(0);
  v35 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56);
  v36 = (uint64_t)v48;
  v35(v48, 1, 1, v34);
  v53 = 0;
  v51 = 0u;
  v52 = 0u;
  v49 = v10;
  v45(v10, 1, 1, v46);
  v37 = v1[8];
  *((_BYTE *)v3 + v37) = 3;
  v38 = (uint64_t)v3 + v1[9];
  v35((char *)v38, 1, 1, v34);
  *v3 = 0x656C67676F54;
  v3[1] = 0xE600000000000000;
  sub_15BD4(v30, (uint64_t)v3 + v1[5], &qword_3B0C38);
  v39 = (char *)v3 + v1[6];
  *(_WORD *)v39 = 50;
  *((_WORD *)v39 + 3) = 256;
  *(_DWORD *)(v39 + 2) = 0;
  *((_QWORD *)v39 + 1) = 1;
  *(_QWORD *)((char *)v3 + v1[7]) = v32;
  sub_15B8C(v36, v38);
  *((_BYTE *)v3 + v1[10]) = 1;
  *((_BYTE *)v3 + v1[11]) = 0;
  v40 = (uint64_t)v3 + v1[12];
  if (*((_QWORD *)&v52 + 1))
  {
    sub_F4D8(&v51, v40);
  }
  else
  {
    v41 = (unint64_t)v52;
    *(_OWORD *)v40 = v51;
    *(_OWORD *)(v40 + 16) = v41;
    *(_QWORD *)(v40 + 32) = v53;
  }
  sub_15BD4((uint64_t)v49, (uint64_t)v3 + v1[13], (uint64_t *)&unk_3B8790);
  *((_BYTE *)v3 + v37) = 3;
  sub_3C56C((uint64_t)v3, v50, type metadata accessor for ModernShelf);
  return sub_145D8((uint64_t)v12, type metadata accessor for ToggleCellModel);
}

uint64_t sub_83F48@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_2EF8C0);
  v5 = swift_getKeyPath(&unk_2EF8E8);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(KeyPath);
  result = swift_release(v5);
  *a2 = v7;
  return result;
}

uint64_t sub_83FC4(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  char v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_2EF8C0);
  v5 = swift_getKeyPath(&unk_2EF8E8);
  v7 = v2;
  swift_retain(v3);
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

uint64_t ShowListProvider.state.setter(char *a1)
{
  uint64_t v1;
  char v2;
  uint64_t KeyPath;
  uint64_t v4;
  char v6;

  v2 = *a1;
  KeyPath = swift_getKeyPath(&unk_2EF8C0);
  v4 = swift_getKeyPath(&unk_2EF8E8);
  v6 = v2;
  swift_retain(v1);
  return static Published.subscript.setter(&v6, v1, KeyPath, v4);
}

void (*ShowListProvider.state.modify(_QWORD *a1))(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t KeyPath;
  uint64_t v5;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  KeyPath = swift_getKeyPath(&unk_2EF8C0);
  v3[4] = KeyPath;
  v5 = swift_getKeyPath(&unk_2EF8E8);
  v3[5] = v5;
  v3[6] = static Published.subscript.modify(v3, v1, KeyPath, v5);
  return sub_84118;
}

void sub_84118(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (void *)*a1;
  v2 = *(_QWORD *)(*a1 + 40);
  v3 = *(_QWORD *)(*a1 + 32);
  (*(void (**)(_QWORD, _QWORD))(*a1 + 48))(*a1, 0);
  swift_release(v2);
  swift_release(v3);
  free(v1);
}

uint64_t sub_84164(_QWORD *a1)
{
  uint64_t v1;
  _BYTE v3[24];

  swift_beginAccess(*a1 + OBJC_IVAR____TtC8ShelfKit16ShowListProvider__state, v3, 33, 0);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B27A8);
  Published.projectedValue.getter(v1);
  return swift_endAccess(v3);
}

uint64_t sub_841C8(_BYTE *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  void (*v11)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2790);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = &v16[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v6);
  v10 = &v16[-v9 - 8];
  v11 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v5 + 16);
  v11(&v16[-v9 - 8], a1, v4);
  v12 = *a2;
  v11(v8, v10, v4);
  swift_beginAccess(v12 + OBJC_IVAR____TtC8ShelfKit16ShowListProvider__state, v16, 33, 0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B27A8);
  Published.projectedValue.setter(v8, v13);
  swift_endAccess(v16);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v10, v4);
}

uint64_t ShowListProvider.$state.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE v10[24];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2790);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = &v10[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  swift_beginAccess(v1 + OBJC_IVAR____TtC8ShelfKit16ShowListProvider__state, v10, 33, 0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B27A8);
  Published.projectedValue.setter(v6, v7);
  swift_endAccess(v10);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
}

void (*ShowListProvider.$state.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2790);
  v3[10] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[11] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[12] = malloc(v6);
  v3[13] = malloc(v6);
  v7 = malloc(v6);
  v8 = OBJC_IVAR____TtC8ShelfKit16ShowListProvider__state;
  v3[14] = v7;
  v3[15] = v8;
  swift_beginAccess(v1 + v8, v3, 33, 0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B27A8);
  v3[16] = v9;
  Published.projectedValue.getter(v9);
  swift_endAccess(v3);
  return sub_84474;
}

void sub_84474(uint64_t a1, char a2)
{
  _QWORD *v3;
  void (*v4)(_QWORD, _QWORD, _QWORD);
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(void *, uint64_t);

  v3 = *(_QWORD **)a1;
  v4 = *(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)a1 + 88) + 16);
  v4(*(_QWORD *)(*(_QWORD *)a1 + 104), v3[14], v3[10]);
  v5 = v3[15];
  v6 = v3[16];
  v7 = (void *)v3[13];
  v8 = (void *)v3[14];
  v10 = v3[11];
  v9 = (void *)v3[12];
  v11 = v3[9];
  v12 = v3[10];
  v13 = v11 + v5;
  if ((a2 & 1) != 0)
  {
    v4(v3[12], v3[13], v3[10]);
    swift_beginAccess(v13, v3 + 3, 33, 0);
    Published.projectedValue.setter(v9, v6);
    swift_endAccess(v3 + 3);
    v14 = *(void (**)(void *, uint64_t))(v10 + 8);
    v14(v7, v12);
  }
  else
  {
    swift_beginAccess(v11 + v5, v3 + 6, 33, 0);
    Published.projectedValue.setter(v7, v6);
    swift_endAccess(v3 + 6);
    v14 = *(void (**)(void *, uint64_t))(v10 + 8);
  }
  v14(v8, v12);
  free(v8);
  free(v7);
  free(v9);
  free(v3);
}

uint64_t ShowListProvider.paginatedPublisher.getter()
{
  uint64_t v0;
  _QWORD *v1;
  _BYTE v3[24];

  v1 = (_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit16ShowListProvider_paginatedPublisher);
  swift_beginAccess(v0 + OBJC_IVAR____TtC8ShelfKit16ShowListProvider_paginatedPublisher, v3, 0, 0);
  return swift_retain(*v1);
}

uint64_t ShowListProvider.paginatedPublisher.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC8ShelfKit16ShowListProvider_paginatedPublisher);
  swift_beginAccess(v3, v6, 1, 0);
  v4 = *v3;
  *v3 = a1;
  return swift_release(v4);
}

uint64_t (*ShowListProvider.paginatedPublisher.modify(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC8ShelfKit16ShowListProvider_paginatedPublisher, a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t ShowListProvider.pageContent.getter()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit16ShowListProvider_pageContent));
}

uint64_t ShowListProvider.kind.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8ShelfKit16ShowListProvider_kind);
}

uint64_t ShowListProvider.init(asPartOf:kind:pageSize:)(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v4;

  v4 = sub_86848(a1, a2, a3);
  swift_release(a1);
  return v4;
}

void sub_846B8(unsigned __int8 *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD v14[32];

  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B35D0);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)sub_84778 + 4 * byte_2EF860[*a1 >> 6];
  v14[8] = a5;
  v14[7] = v11;
  v14[6] = (char *)v14 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14[5] = a4;
  v14[4] = a2;
  v14[3] = a3;
  __asm { BR              X10 }
}

uint64_t sub_84778()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  __int16 v3;
  int v4;
  __int16 v5;
  __int16 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;

  *(_QWORD *)(v1 - 336) = 0;
  *(_QWORD *)(v1 - 320) = swift_getObjectType();
  ShowsSortType.showLockupStyle.getter(v0);
  v2 = *(_BYTE *)(v1 - 176);
  v3 = *(_WORD *)(v1 - 175);
  v4 = *(_DWORD *)(v1 - 173);
  v5 = *(_WORD *)(v1 - 169);
  v6 = *(_WORD *)(v1 - 163);
  v7 = *(_QWORD *)(v1 - 160);
  v8 = *(_QWORD *)(v1 - 152);
  *(_QWORD *)(v1 - 328) = v7;
  v9 = *(_QWORD *)(v1 - 144);
  v10 = *(_QWORD *)(v1 - 136);
  v12 = *(_QWORD *)(v1 - 128);
  v11 = *(_QWORD *)(v1 - 120);
  v13 = *(_QWORD *)(v1 - 112);
  v14 = *(_QWORD *)(v1 - 104);
  v15 = *(_BYTE *)(v1 - 96);
  *(_BYTE *)(v1 - 264) = v2;
  *(_WORD *)(v1 - 263) = v3;
  *(_WORD *)(v1 - 257) = v5;
  *(_DWORD *)(v1 - 261) = v4;
  *(_DWORD *)(v1 - 255) = *(_DWORD *)(v1 - 167);
  *(_WORD *)(v1 - 251) = v6;
  *(_QWORD *)(v1 - 248) = v7;
  *(_QWORD *)(v1 - 240) = v8;
  *(_QWORD *)(v1 - 232) = v9;
  *(_QWORD *)(v1 - 224) = v10;
  *(_QWORD *)(v1 - 216) = v12;
  *(_QWORD *)(v1 - 208) = v11;
  *(_QWORD *)(v1 - 200) = v13;
  *(_QWORD *)(v1 - 192) = v14;
  *(_BYTE *)(v1 - 184) = v15;
  v16 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v1 - 304) + 184))(*(_QWORD *)(v1 - 336), 1, v0, v1 - 264, *(_QWORD *)(v1 - 312), *(_QWORD *)(v1 - 320));
  sub_87180(*(_QWORD *)(v1 - 328), v8, v9, v10, v12, v11, v13, v14, v15);
  *(_QWORD *)(v1 - 176) = v16;
  v17 = swift_allocObject(&unk_37C2A0, 24, 7);
  *(_QWORD *)(v17 + 16) = *(_QWORD *)(v1 - 296);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4E98);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4E60);
  v20 = sub_32914(&qword_3B4EA0, &qword_3B4E98, (uint64_t)&protocol conformance descriptor for AnyPaginatedPublisher<A, B>);
  v21 = ((uint64_t (*)(uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t, uint64_t))PaginatedPublisher.paginatedMap<A>(_:))(sub_87250, v17, v18, v19, v20);
  swift_release(v17);
  swift_release(*(_QWORD *)(v1 - 176));
  *(_QWORD *)(v1 - 176) = v21;
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4EA8);
  v23 = swift_allocObject(v22, ((*(unsigned __int8 *)(*(_QWORD *)(v19 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v19 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v19 - 8) + 80) | 7);
  *(_OWORD *)(v23 + 16) = xmmword_2EA0D0;
  v24 = type metadata accessor for ModernShelf(0);
  v25 = *(_QWORD *)(v1 - 288);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v25, 1, 2, v24);
  ((void (*)(uint64_t, uint64_t, _QWORD, _QWORD))FRPOutput.init(content:hasMore:totalCount:))(v25, 1, 0, *(_QWORD *)(v1 - 280));
  v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2600);
  v27 = sub_32914((unint64_t *)&qword_3B25F8, &qword_3B2600, (uint64_t)&protocol conformance descriptor for AnyPaginatedPublisher<A, B>);
  v28 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))PaginatedPublisher.paginatedPrepend(_:))(v23, v26, v27);
  swift_release(v21);
  result = swift_bridgeObjectRelease(v23);
  **(_QWORD **)(v1 - 272) = v28;
  return result;
}

uint64_t sub_84A4C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[4];

  v5[2] = a2;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4EB0);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B35D0);
  return FRPOutput.map<A>(_:)(sub_87258, v5, v2, v3);
}

uint64_t sub_84AB8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  int *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;

  v34 = a2;
  v3 = (int *)type metadata accessor for ModernShelf(0);
  v33 = *((_QWORD *)v3 - 1);
  __chkstk_darwin(v3);
  v5 = (uint64_t *)((char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v6);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
  __chkstk_darwin(v9);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0C38);
  __chkstk_darwin(v12);
  v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *a1;
  v16 = type metadata accessor for Header(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v14, 1, 1, v16);
  v32 = sub_2454F0(v15);
  v17 = type metadata accessor for URL(0);
  v18 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56);
  v19 = v18(v11, 1, 1, v17);
  v37 = 0;
  v35 = 0u;
  v36 = 0u;
  v20 = static MetricsTargetType.swoosh.getter(v19);
  v22 = v21;
  static ImpressionMetrics.shelf(id:idType:uniqueID:impressionType:name:)(0x73776F6853, 0xE500000000000000, 0, 0, 0xD00000000000001ELL, 0x800000000030B0F0, v20, v21, 0, 0);
  swift_bridgeObjectRelease(v22);
  v23 = type metadata accessor for ImpressionMetrics(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v8, 0, 1, v23);
  v24 = v3[8];
  *((_BYTE *)v5 + v24) = 3;
  v25 = (uint64_t)v5 + v3[9];
  v18((char *)v25, 1, 1, v17);
  *v5 = 0xD00000000000001ELL;
  v5[1] = 0x800000000030B0F0;
  sub_15BD4((uint64_t)v14, (uint64_t)v5 + v3[5], &qword_3B0C38);
  v26 = (char *)v5 + v3[6];
  *(_WORD *)v26 = 24;
  *((_WORD *)v26 + 3) = 256;
  *(_DWORD *)(v26 + 2) = 0;
  *((_QWORD *)v26 + 1) = 1;
  *(_QWORD *)((char *)v5 + v3[7]) = v32;
  sub_15B8C((uint64_t)v11, v25);
  *((_BYTE *)v5 + v3[10]) = 1;
  *((_BYTE *)v5 + v3[11]) = 0;
  v27 = (uint64_t)v5 + v3[12];
  if (*((_QWORD *)&v36 + 1))
  {
    sub_F4D8(&v35, v27);
  }
  else
  {
    v28 = (unint64_t)v36;
    *(_OWORD *)v27 = v35;
    *(_OWORD *)(v27 + 16) = v28;
    *(_QWORD *)(v27 + 32) = v37;
  }
  sub_15BD4((uint64_t)v8, (uint64_t)v5 + v3[13], (uint64_t *)&unk_3B8790);
  *((_BYTE *)v5 + v24) = 3;
  v29 = v34;
  sub_3C56C((uint64_t)v5, v34, type metadata accessor for ModernShelf);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, int *))(v33 + 56))(v29, 0, 2, v3);
}

uint64_t sub_84DE4@<X0>(char a1@<W0>, uint64_t a2@<X2>, char a3@<W4>, int a4@<W5>, uint64_t a5@<X7>, uint64_t a6@<X8>)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char v15;
  _QWORD v17[2];

  v17[1] = a5;
  v10 = a3 & 1;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B35D0);
  __chkstk_darwin(v11);
  v13 = (char *)v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4E60);
  FRPOutput.content.getter(v14);
  v15 = FRPOutput.hasMore.getter(v14);
  sub_84EDC(a1, v15 & 1, a4, a2, v10, a6);
  return sub_1459C((uint64_t)v13, &qword_3B35D0);
}

uint64_t sub_84EDC@<X0>(char a1@<W0>, int a2@<W2>, int a3@<W3>, uint64_t a4@<X5>, int a5@<W7>, uint64_t a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int (*v36)(char *, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  unint64_t v55;
  unint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int (*v69)(uint64_t, uint64_t, uint64_t);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  int v74;
  int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;

  v74 = a5;
  v75 = a2;
  v78 = a4;
  v76 = a3;
  v8 = type metadata accessor for ModernPage(0);
  __chkstk_darwin(v8);
  v77 = (uint64_t)&v69 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8660);
  v11 = __chkstk_darwin(v10);
  v71 = (uint64_t)&v69 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v14 = (char *)&v69 - v13;
  v15 = type metadata accessor for ModernShelf(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v70 = (uint64_t)&v69 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v17);
  v72 = (uint64_t)&v69 - v20;
  v21 = __chkstk_darwin(v19);
  v73 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))((char *)&v69 - v22);
  v23 = __chkstk_darwin(v21);
  v25 = (char *)&v69 - v24;
  v26 = __chkstk_darwin(v23);
  v28 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))((char *)&v69 - v27);
  v29 = __chkstk_darwin(v26);
  v31 = (char *)&v69 - v30;
  __chkstk_darwin(v29);
  v79 = (uint64_t)&v69 - v32;
  v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B35D0);
  if ((Loadable.notLoaded.getter() & 1) != 0)
  {
    *(_BYTE *)a6 = 1;
    v34 = type metadata accessor for PageContent(0);
    return swift_storeEnumTagMultiPayload(a6, v34, 0);
  }
  Loadable.item.getter(v33);
  v36 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
  if (v36(v14, 1, v15) == 1)
  {
    sub_1459C((uint64_t)v14, &qword_3B8660);
LABEL_13:
    *(_QWORD *)a6 = v78;
    v46 = type metadata accessor for PageContent(0);
    *(_QWORD *)(a6 + 8) = 0;
    *(_QWORD *)(a6 + 16) = 0;
    return swift_storeEnumTagMultiPayload(a6, v46, 2);
  }
  v69 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v36;
  v37 = (uint64_t)v14;
  v38 = v79;
  sub_3C56C(v37, v79, type metadata accessor for ModernShelf);
  v80 = *(_QWORD *)(v38 + *(int *)(v15 + 28));
  v39 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4E68);
  v40 = sub_32914(&qword_3B4E70, &qword_3B4E68, (uint64_t)&protocol conformance descriptor for [A]);
  if ((Collection.isNotEmpty.getter(v39, v40) & 1) == 0)
  {
    sub_145D8(v38, type metadata accessor for ModernShelf);
    goto LABEL_13;
  }
  if ((a1 & 1) != 0)
  {
    v41 = v76;
    if (qword_3B0090 != -1)
      swift_once(&qword_3B0090, sub_839FC);
    v42 = __swift_project_value_buffer(v15, (uint64_t)qword_3B4B00);
    sub_14510(v42, (uint64_t)v31, type metadata accessor for ModernShelf);
    v43 = (_QWORD *)sub_10CD4(0, 1, 1, (unint64_t)_swiftEmptyArrayStorage);
    v45 = v43[2];
    v44 = v43[3];
    if (v45 >= v44 >> 1)
      v43 = (_QWORD *)sub_10CD4(v44 > 1, v45 + 1, 1, (unint64_t)v43);
    v43[2] = v45 + 1;
    sub_3C56C((uint64_t)v31, (uint64_t)v43+ ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80))+ *(_QWORD *)(v16 + 72) * v45, type metadata accessor for ModernShelf);
  }
  else
  {
    v43 = _swiftEmptyArrayStorage;
    v41 = v76;
  }
  if (v41 == 9)
  {
    sub_85668(v28);
    if ((swift_isUniquelyReferenced_nonNull_native(v43) & 1) == 0)
      v43 = (_QWORD *)sub_10CD4(0, v43[2] + 1, 1, (unint64_t)v43);
    v48 = v43[2];
    v47 = v43[3];
    if (v48 >= v47 >> 1)
      v43 = (_QWORD *)sub_10CD4(v47 > 1, v48 + 1, 1, (unint64_t)v43);
    v43[2] = v48 + 1;
    sub_3C56C((uint64_t)v28, (uint64_t)v43+ ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80))+ *(_QWORD *)(v16 + 72) * v48, type metadata accessor for ModernShelf);
  }
  sub_14510(v79, (uint64_t)v25, type metadata accessor for ModernShelf);
  if ((swift_isUniquelyReferenced_nonNull_native(v43) & 1) == 0)
    v43 = (_QWORD *)sub_10CD4(0, v43[2] + 1, 1, (unint64_t)v43);
  v50 = v43[2];
  v49 = v43[3];
  if (v50 >= v49 >> 1)
    v43 = (_QWORD *)sub_10CD4(v49 > 1, v50 + 1, 1, (unint64_t)v43);
  v43[2] = v50 + 1;
  v51 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v52 = *(_QWORD *)(v16 + 72);
  v53 = sub_3C56C((uint64_t)v25, (uint64_t)v43 + v51 + v52 * v50, type metadata accessor for ModernShelf);
  if ((v75 & 1) != 0)
  {
    v54 = v73;
    static ModernShelf.loadingShelf(id:)(0x53676E6964616F6CLL, 0xEE004449666C6568, v73);
    v56 = v43[2];
    v55 = v43[3];
    if (v56 >= v55 >> 1)
      v43 = (_QWORD *)sub_10CD4(v55 > 1, v56 + 1, 1, (unint64_t)v43);
    v43[2] = v56 + 1;
    v53 = sub_3C56C((uint64_t)v54, (uint64_t)v43 + v51 + v56 * v52, type metadata accessor for ModernShelf);
  }
  if ((static Podcasts.isRecentlyUnfollowedEnabled()(v53) & 1) != 0)
  {
    if ((v74 & 1) != 0)
    {
      swift_bridgeObjectRelease(0xE700000000000000);
      if (v41 == 9)
        goto LABEL_42;
      v58 = v78;
      if (v78 <= 0)
        goto LABEL_42;
    }
    else
    {
      v57 = _stringCompareWithSmolCheck(_:_:expecting:)(0x726142626174, 0xE600000000000000, 0x72616265646973, 0xE700000000000000, 0);
      swift_bridgeObjectRelease(0xE600000000000000);
      if (v41 == 9)
        goto LABEL_42;
      if ((v57 & 1) == 0)
        goto LABEL_42;
      v58 = v78;
      if (v78 < 1)
        goto LABEL_42;
    }
    type metadata accessor for RecentlyUnfollowedLinkProvider();
    v59 = v58;
    v60 = v71;
    sub_154A0(v59, v71);
    if (v69(v60, 1, v15) == 1)
    {
      sub_1459C(v60, &qword_3B8660);
    }
    else
    {
      v61 = v60;
      v62 = v72;
      sub_3C56C(v61, v72, type metadata accessor for ModernShelf);
      v63 = v70;
      sub_14510(v62, v70, type metadata accessor for ModernShelf);
      v65 = v43[2];
      v64 = v43[3];
      if (v65 >= v64 >> 1)
        v43 = (_QWORD *)sub_10CD4(v64 > 1, v65 + 1, 1, (unint64_t)v43);
      v43[2] = v65 + 1;
      sub_3C56C(v63, (uint64_t)v43 + v51 + v65 * v52, type metadata accessor for ModernShelf);
      sub_145D8(v72, type metadata accessor for ModernShelf);
    }
  }
LABEL_42:
  v66 = v77;
  sub_8592C(v41, (uint64_t)v43, v77);
  swift_bridgeObjectRelease(v43);
  __swift_instantiateConcreteTypeFromMangledName(&qword_3B89B0);
  v67 = sub_14510(v66, a6, type metadata accessor for ModernPage);
  static PageRenderContentTypes.unspecified.getter(v67);
  v68 = type metadata accessor for PageContent(0);
  swift_storeEnumTagMultiPayload(a6, v68, 3);
  sub_145D8(v66, type metadata accessor for ModernPage);
  return sub_145D8(v79, type metadata accessor for ModernShelf);
}

uint64_t sub_85668@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::String *v7;
  uint64_t v8;
  char *v9;
  id v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *boxed_opaque_existential_2Tm;
  uint64_t v21;
  _QWORD *v22;
  _OWORD v23[2];
  uint64_t v24;
  Swift::String v25;

  v22 = a1;
  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v1);
  v3 = (char *)&v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Information(0);
  v5 = __chkstk_darwin(v4);
  v7 = (Swift::String *)((char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v5);
  v9 = (char *)&v21 - v8;
  v10 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v25._countAndFlagsBits = 0xD000000000000045;
  v25._object = (void *)0x800000000030CAE0;
  v11._object = (void *)0x800000000030CAC0;
  v11._countAndFlagsBits = 0xD00000000000001FLL;
  v12._countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  v13 = NSLocalizedString(_:tableName:bundle:value:comment:)(v11, (Swift::String_optional)0, (NSBundle)v10, v12, v25);

  v14 = type metadata accessor for ImpressionMetrics(0);
  memset(v23, 0, sizeof(v23));
  v24 = 0;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v3, 1, 1, v14);
  *v7 = v13;
  v7[1] = v13;
  v7[2]._countAndFlagsBits = 0;
  v7[2]._object = 0;
  v7[3]._countAndFlagsBits = 0;
  v7[3]._object = (void *)0xE000000000000000;
  sub_87138((uint64_t)v23, (uint64_t)&v7[4]);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4E88);
  v16 = swift_allocObject(v15, 24, 7);
  *(_DWORD *)(v16 + 20) = 0;
  *(_BYTE *)(v16 + 16) = 1;
  swift_bridgeObjectRetain_n(v13._object, 2);
  sub_1459C((uint64_t)v23, &qword_3B0C50);
  v7[6]._object = (void *)v16;
  sub_15BD4((uint64_t)v3, (uint64_t)v7 + *(int *)(v4 + 40), (uint64_t *)&unk_3B8790);
  sub_3C56C((uint64_t)v7, (uint64_t)v9, type metadata accessor for Information);
  LOWORD(v23[0]) = 14;
  *(_DWORD *)((char *)v23 + 2) = 0;
  WORD3(v23[0]) = 256;
  *((_QWORD *)&v23[0] + 1) = 1;
  v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8750);
  v18 = swift_allocObject(v17, 72, 7);
  *(_OWORD *)(v18 + 16) = xmmword_2EA0D0;
  *(_QWORD *)(v18 + 56) = v4;
  *(_QWORD *)(v18 + 64) = sub_F1C0(&qword_3B4E90, (void (*)(uint64_t))type metadata accessor for Information, (uint64_t)&protocol conformance descriptor for Information);
  boxed_opaque_existential_2Tm = __swift_allocate_boxed_opaque_existential_2Tm((_QWORD *)(v18 + 32));
  sub_14510((uint64_t)v9, (uint64_t)boxed_opaque_existential_2Tm, type metadata accessor for Information);
  ModernShelf.init(id:title:itemPresentation:items:)(v13._countAndFlagsBits, (uint64_t)v13._object, 0, 0, (unsigned __int8 *)v23, v18, v22);
  return sub_145D8((uint64_t)v9, type metadata accessor for Information);
}

uint64_t sub_8592C@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  Swift::String v29;
  Swift::String v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  Swift::String v42;
  Swift::String v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t result;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  void *v65;
  Swift::String v66;
  Swift::String v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t v86;

  v78 = a3;
  v5 = type metadata accessor for ScalarDictionary(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v71 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v71 - v10;
  v12 = type metadata accessor for PageMetrics(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v71 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for PageID(0);
  v17 = __chkstk_darwin(v16);
  v20 = (char *)&v71 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 == 2)
  {
    v73 = v18;
    v74 = v17;
    v34 = ((uint64_t (*)(void))static MetricsPageType.room.getter)();
    v77 = v12;
    v35 = v34;
    v37 = v36;
    v38 = ((uint64_t (*)(void))static MetricsPageID.recentlyUpdated.getter)();
    v75 = v13;
    v76 = a2;
    v39 = v38;
    v41 = v40;
    v80 = v35;
    v81 = v37;
    v42._countAndFlagsBits = 95;
    v42._object = (void *)0xE100000000000000;
    String.append(_:)(v42);
    v43._countAndFlagsBits = v39;
    v43._object = v41;
    String.append(_:)(v43);
    swift_bridgeObjectRelease(v41);
    v44 = PageID.init(with:)(v80, v81);
    v32 = static MetricsPageID.recentlyUpdated.getter(v44);
    goto LABEL_5;
  }
  if (a1 == 8)
  {
    v73 = v18;
    v74 = v17;
    v21 = static MetricsPageType.room.getter(v17);
    v77 = v12;
    v22 = v21;
    v24 = v23;
    v25 = ((uint64_t (*)(void))static MetricsPageID.shows.getter)();
    v75 = v13;
    v76 = a2;
    v26 = v25;
    v28 = v27;
    v80 = v22;
    v81 = v24;
    v29._countAndFlagsBits = 95;
    v29._object = (void *)0xE100000000000000;
    String.append(_:)(v29);
    v30._countAndFlagsBits = v26;
    v30._object = v28;
    String.append(_:)(v30);
    swift_bridgeObjectRelease(v28);
    v31 = PageID.init(with:)(v80, v81);
    v32 = static MetricsPageID.shows.getter(v31);
LABEL_5:
    v45 = v32;
    v46 = v33;
    v47 = static MetricsPageType.room.getter(v32);
    v80 = v45;
    v81 = v46;
    v82 = v47;
    v83 = v48;
    v84 = 0;
    v85 = 0;
    v86 = 0;
    ScalarDictionary.init()(v47);
    v72 = sub_C97A8((uint64_t)_swiftEmptyArrayStorage);
    v49 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B89A0);
    v50 = type metadata accessor for PageMetrics.Instruction(0);
    v51 = swift_allocObject(v49, ((*(unsigned __int8 *)(*(_QWORD *)(v50 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v50 - 8) + 80))+ 2 * *(_QWORD *)(*(_QWORD *)(v50 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v50 - 8) + 80) | 7);
    *(_OWORD *)(v51 + 16) = xmmword_2EA080;
    v79 = 0;
    PageMetrics.Instruction.init(eventType:)(&v79);
    v79 = 1;
    PageMetrics.Instruction.init(eventType:)(&v79);
    v52 = MetricsPageFields.metricsFields.getter();
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v11, v5);
    PageMetrics.init(instructions:pageFields:custom:clickLocationFields:)(v51, v52, v9, v72);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
    v53 = v81;
    v54 = v84;
    v55 = v86;
    swift_bridgeObjectRelease(v83);
    swift_bridgeObjectRelease(v53);
    swift_bridgeObjectRelease(v54);
    swift_bridgeObjectRelease(v55);
    v56 = v78;
    (*(void (**)(uint64_t, char *, uint64_t))(v73 + 32))(v78, v20, v74);
    v57 = type metadata accessor for ModernPage(0);
    (*(void (**)(uint64_t, char *, uint64_t))(v75 + 32))(v56 + *(int *)(v57 + 20), v15, v77);
    v58 = v76;
    *(_QWORD *)(v56 + *(int *)(v57 + 24)) = v76;
    return swift_bridgeObjectRetain(v58);
  }
  v60 = static MetricsPageType.room.getter(v17);
  v62 = v61;
  v63 = static MetricsPageID.unknown.getter();
  v65 = v64;
  v80 = v60;
  v81 = v62;
  v66._countAndFlagsBits = 95;
  v66._object = (void *)0xE100000000000000;
  String.append(_:)(v66);
  v67._countAndFlagsBits = v63;
  v67._object = v65;
  String.append(_:)(v67);
  swift_bridgeObjectRelease(v65);
  v68 = v78;
  PageID.init(with:)(v80, v81);
  v69 = type metadata accessor for ModernPage(0);
  v70 = swift_bridgeObjectRetain(a2);
  result = static PageMetrics.notInstrumented.getter(v70);
  *(_QWORD *)(v68 + *(int *)(v69 + 24)) = a2;
  return result;
}

unint64_t static ShowListProvider.showsShelfID.getter()
{
  return 0xD00000000000001ELL;
}

uint64_t ShowListProvider.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC8ShelfKit16ShowListProvider__state;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B27A8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit16ShowListProvider_paginatedPublisher));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit16ShowListProvider_pageContent));
  __swift_destroy_boxed_opaque_existential_1((_QWORD *)(v0
                                                      + OBJC_IVAR____TtC8ShelfKit16ShowListProvider_libraryActionController));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit16ShowListProvider_libraryDataProvider));
  __swift_destroy_boxed_opaque_existential_1((_QWORD *)(v0
                                                      + OBJC_IVAR____TtC8ShelfKit16ShowListProvider_libraryObserverProvider));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit16ShowListProvider_interfaceMode));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit16ShowListProvider_recentlyUnfollowedTipProvider));
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t ShowListProvider.__deallocating_deinit()
{
  uint64_t v0;

  ShowListProvider.deinit();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_85DFC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v27;
  uint64_t v28;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2B18);
  __chkstk_darwin(v3);
  v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4F08);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ObserverQueue(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = v1;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4F10);
  v14 = sub_32914(&qword_3B4F18, &qword_3B4F10, (uint64_t)&unk_2FCAB0);
  v15 = Publisher.bufferedMulticast()(v13, v14);
  sub_14510(a1, (uint64_t)v12, type metadata accessor for ObserverQueue);
  if (swift_getEnumCaseMultiPayload(v12, v10) == 3)
  {
    v28 = v15;
    v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4BB8);
    v17 = sub_32914(&qword_3B4BC0, &qword_3B4BB8, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
    v18 = Publisher.eraseToAnyPublisher()(v16, v17);
    swift_release(v15);
  }
  else
  {
    sub_145D8((uint64_t)v12, type metadata accessor for ObserverQueue);
    v28 = v15;
    sub_1BA1F0();
    v27 = v19;
    v20 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v5, 1, 1, v20);
    v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4BB8);
    v22 = sub_676C8();
    v23 = sub_32914(&qword_3B4BC0, &qword_3B4BB8, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
    v24 = sub_F1C0((unint64_t *)&qword_3B2B60, (void (*)(uint64_t))sub_676C8, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
    Publisher.receive<A>(on:options:)(&v27, v5, v21, v22, v23, v24);
    sub_1459C((uint64_t)v5, &qword_3B2B18);

    v25 = sub_32914(&qword_3B4F20, &qword_3B4F08, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
    v18 = Publisher.eraseToAnyPublisher()(v6, v25);
    swift_release(v15);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  return v18;
}

uint64_t sub_860D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v27;
  uint64_t v28;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2B18);
  __chkstk_darwin(v3);
  v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4E38);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ObserverQueue(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = v1;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4E40);
  v14 = sub_32914(&qword_3B4E48, &qword_3B4E40, (uint64_t)&unk_2FCAB0);
  v15 = Publisher.bufferedMulticast()(v13, v14);
  sub_14510(a1, (uint64_t)v12, type metadata accessor for ObserverQueue);
  if (swift_getEnumCaseMultiPayload(v12, v10) == 3)
  {
    v28 = v15;
    v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3388);
    v17 = sub_32914(&qword_3B3398, &qword_3B3388, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
    v18 = Publisher.eraseToAnyPublisher()(v16, v17);
    swift_release(v15);
  }
  else
  {
    sub_145D8((uint64_t)v12, type metadata accessor for ObserverQueue);
    v28 = v15;
    sub_1BA1F0();
    v27 = v19;
    v20 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v5, 1, 1, v20);
    v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3388);
    v22 = sub_676C8();
    v23 = sub_32914(&qword_3B3398, &qword_3B3388, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
    v24 = sub_F1C0((unint64_t *)&qword_3B2B60, (void (*)(uint64_t))sub_676C8, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
    Publisher.receive<A>(on:options:)(&v27, v5, v21, v22, v23, v24);
    sub_1459C((uint64_t)v5, &qword_3B2B18);

    v25 = sub_32914(&qword_3B4E50, &qword_3B4E38, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
    v18 = Publisher.eraseToAnyPublisher()(v6, v25);
    swift_release(v15);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  return v18;
}

uint64_t sub_863A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v27;
  uint64_t v28;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2B18);
  __chkstk_darwin(v3);
  v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4DC8);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ObserverQueue(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = v1;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4DD0);
  v14 = sub_32914(&qword_3B4DD8, &qword_3B4DD0, (uint64_t)&unk_2FCAB0);
  v15 = Publisher.bufferedMulticast()(v13, v14);
  sub_14510(a1, (uint64_t)v12, type metadata accessor for ObserverQueue);
  if (swift_getEnumCaseMultiPayload(v12, v10) == 3)
  {
    v28 = v15;
    v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4D78);
    v17 = sub_32914(&qword_3B4D88, &qword_3B4D78, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
    v18 = Publisher.eraseToAnyPublisher()(v16, v17);
    swift_release(v15);
  }
  else
  {
    sub_145D8((uint64_t)v12, type metadata accessor for ObserverQueue);
    v28 = v15;
    sub_1BA1F0();
    v27 = v19;
    v20 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v5, 1, 1, v20);
    v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4D78);
    v22 = sub_676C8();
    v23 = sub_32914(&qword_3B4D88, &qword_3B4D78, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
    v24 = sub_F1C0((unint64_t *)&qword_3B2B60, (void (*)(uint64_t))sub_676C8, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
    Publisher.receive<A>(on:options:)(&v27, v5, v21, v22, v23, v24);
    sub_1459C((uint64_t)v5, &qword_3B2B18);

    v25 = sub_32914(&qword_3B4DE0, &qword_3B4DC8, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
    v18 = Publisher.eraseToAnyPublisher()(v6, v25);
    swift_release(v15);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  return v18;
}

uint64_t sub_86678()
{
  uint64_t v1;

  v1 = 0;
  return Just.init(_:)(&v1, &type metadata for UInt);
}

uint64_t sub_866A4(uint64_t a1)
{
  return sub_866BC(a1, &qword_3B09E8);
}

uint64_t sub_866B0(uint64_t a1)
{
  return sub_866BC(a1, &qword_3B4DC0);
}

uint64_t sub_866BC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v4;

  v4 = _swiftEmptyArrayStorage;
  v2 = __swift_instantiateConcreteTypeFromMangledName(a2);
  return Just.init(_:)(&v4, v2);
}

void _s8ShelfKit16ShowListProviderC5StateO2eeoiySbAE_AEtFZ_0(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_86738(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  char v9;

  if (v1 > 0x3F)
    return 0;
  v2 = ShowsSortType.rawValue.getter(a1);
  v4 = v3;
  v5 = ShowsSortType.rawValue.getter(v1);
  if (v2 == v5 && v4 == v6)
  {
    swift_bridgeObjectRelease_n(v4, 2);
    return 1;
  }
  else
  {
    v8 = v6;
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, v4, v5, v6, 0);
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(v8);
    return v9 & 1;
  }
}

uint64_t sub_86848(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v26;
  char v27;
  __int128 v28[3];

  v4 = v3;
  v8 = type metadata accessor for PageContent(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v4 + OBJC_IVAR____TtC8ShelfKit16ShowListProvider_paginatedPublisher) = 0;
  v11 = OBJC_IVAR____TtC8ShelfKit16ShowListProvider_pageContent;
  *v10 = 0;
  swift_storeEnumTagMultiPayload(v10, v12, 0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B27B0);
  swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  *(_QWORD *)(v4 + v11) = CurrentValueSubject.init(_:)(v10);
  v14 = OBJC_IVAR____TtC8ShelfKit16ShowListProvider_interfaceMode;
  LOBYTE(v28[0]) = 0;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4C08);
  swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
  *(_QWORD *)(v4 + v14) = CurrentValueSubject.init(_:)(v28);
  *(_QWORD *)(v4 + OBJC_IVAR____TtC8ShelfKit16ShowListProvider_subscriptions) = _swiftEmptyArrayStorage;
  *(_BYTE *)(v4 + OBJC_IVAR____TtC8ShelfKit16ShowListProvider_kind) = a2;
  *(_QWORD *)(v4 + OBJC_IVAR____TtC8ShelfKit16ShowListProvider_pageSize) = a3;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BC3F0);
  BaseObjectGraph.inject<A>(_:)(v28, v16, v16);
  sub_F4D8(v28, v4 + OBJC_IVAR____TtC8ShelfKit16ShowListProvider_libraryActionController);
  v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3BF760);
  BaseObjectGraph.inject<A>(_:)(v28, v17, v17);
  *(_OWORD *)(v4 + OBJC_IVAR____TtC8ShelfKit16ShowListProvider_libraryDataProvider) = v28[0];
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4F28);
  BaseObjectGraph.inject<A>(_:)(v28, v18, v18);
  sub_F4D8(v28, v4 + OBJC_IVAR____TtC8ShelfKit16ShowListProvider_libraryObserverProvider);
  v19 = type metadata accessor for RecentlyUnfollowedTipProvider();
  swift_allocObject(v19, 80, 7);
  v20 = swift_retain(a1);
  *(_QWORD *)(v4 + OBJC_IVAR____TtC8ShelfKit16ShowListProvider_recentlyUnfollowedTipProvider) = RecentlyUnfollowedTipProvider.init(asPartOf:)(v20);
  v21 = *(_QWORD *)(v4 + OBJC_IVAR____TtC8ShelfKit16ShowListProvider_libraryActionController + 24);
  v22 = *(_QWORD *)(v4 + OBJC_IVAR____TtC8ShelfKit16ShowListProvider_libraryActionController + 32);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v4 + OBJC_IVAR____TtC8ShelfKit16ShowListProvider_libraryActionController), v21);
  v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 200))(v21, v22);
  if (a2 == 8)
  {
    v24 = v23;
  }
  else if (a2 == 9)
  {
    v24 = -64;
  }
  else
  {
    v24 = a2 | 0x80;
  }
  swift_beginAccess(v4 + OBJC_IVAR____TtC8ShelfKit16ShowListProvider__state, v28, 33, 0);
  v27 = v24;
  Published.init(initialValue:)(&v27, &type metadata for ShowListProvider.State);
  swift_endAccess(v28);
  return v4;
}

const char *keypath_get_selector_showListShowsAllShows()
{
  return "showListShowsAllShows";
}

id sub_86AC4@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "showListShowsAllShows");
  *a2 = (_BYTE)result;
  return result;
}

id sub_86AF4(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "setShowListShowsAllShows:", *a1);
}

uint64_t sub_86B08()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_86B2C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = NSUserDefaults.showListSortType.getter();
  *a1 = result;
  return result;
}

unint64_t sub_86B54()
{
  unint64_t result;

  result = qword_3B4B80;
  if (!qword_3B4B80)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ShowsSortType);
    atomic_store(result, (unint64_t *)&qword_3B4B80);
  }
  return result;
}

uint64_t sub_86B98()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_86BA8@<X0>(uint64_t result@<X0>, char a2@<W1>, char *a3@<X8>)
{
  uint64_t v3;
  int v4;
  char v5;
  char v6;
  char v7;

  v4 = *(unsigned __int8 *)(v3 + 16);
  v5 = v4 | 0x80;
  v6 = a2 | 0x40;
  if ((result & 1) == 0)
    v6 = a2;
  if (v4 == 8)
    v5 = v6;
  if (v4 == 9)
    v7 = -64;
  else
    v7 = v5;
  *a3 = v7;
  return result;
}

uint64_t sub_86BD8(unsigned __int8 *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v1 + 16))(*a1, a1[1]);
}

uint64_t sub_86C04()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

_QWORD *sub_86C14@<X0>(_QWORD *result@<X0>, BOOL *a2@<X8>)
{
  uint64_t v2;
  BOOL v4;

  v4 = *(_BYTE *)(v2 + 16) == 8 && *result != 0;
  *a2 = v4;
  return result;
}

unint64_t sub_86C30()
{
  unint64_t result;

  result = qword_3B4BD0;
  if (!qword_3B4BD0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ShowListProvider.State);
    atomic_store(result, (unint64_t *)&qword_3B4BD0);
  }
  return result;
}

uint64_t sub_86C74()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 48, 7);
}

void sub_86C98(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  sub_846B8(a1, v2[3], v2[4], v2[5], a2);
}

uint64_t sub_86CA4()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1((_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_86CC8@<X0>(char a1@<W0>, uint64_t a2@<X2>, char a3@<W4>, uint64_t a4@<X8>)
{
  uint64_t v4;

  return sub_84DE4(a1, a2, a3 & 1, *(unsigned __int8 *)(v4 + 16), *(_QWORD *)(v4 + 64), a4);
}

uint64_t sub_86CDC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_86D00(unsigned __int8 *a1)
{
  uint64_t v1;
  uint64_t (*v3)(uint64_t, unsigned __int8 *, _QWORD, unsigned __int8 *, _QWORD);
  uint64_t v4;
  int *v5;

  v3 = *(uint64_t (**)(uint64_t, unsigned __int8 *, _QWORD, unsigned __int8 *, _QWORD))(v1 + 16);
  v4 = *a1;
  v5 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_3B4E58);
  return v3(v4, &a1[v5[12]], *(_QWORD *)&a1[v5[16]], &a1[v5[20]], a1[v5[24]]);
}

uint64_t sub_86D80()
{
  return type metadata accessor for ShowListProvider(0);
}

uint64_t type metadata accessor for ShowListProvider(uint64_t a1)
{
  uint64_t result;

  result = qword_3B4C78;
  if (!qword_3B4C78)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ShowListProvider);
  return result;
}

void sub_86DC4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[11];

  sub_86E9C();
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = &unk_2EF968;
    v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[3] = &unk_2EF980;
    v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[5] = &unk_2EF998;
    v4[6] = &unk_2EF9B0;
    v4[7] = &unk_2EF998;
    v4[8] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[9] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[10] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_updateClassMetadata2(a1, 256, 11, v4, a1 + 80);
  }
}

uint64_t method lookup function for ShowListProvider(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for ShowListProvider);
}

uint64_t dispatch thunk of ShowListProvider.__allocating_init(asPartOf:kind:pageSize:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 168))();
}

void sub_86E9C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_3B4C88)
  {
    v0 = type metadata accessor for Published(0, &type metadata for ShowListProvider.State);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_3B4C88);
  }
}

uint64_t getEnumTagSinglePayload for ShowListProvider.State(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;

  if (!a2)
    return 0;
  if (a2 < 0x1D)
    goto LABEL_17;
  if (a2 + 227 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 227) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 227;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 227;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 227;
  }
LABEL_17:
  v6 = ((*a1 >> 1) & 0x1C | (*a1 >> 6)) ^ 0x1F;
  if (v6 >= 0x1C)
    v6 = -1;
  return v6 + 1;
}

uint64_t storeEnumTagSinglePayload for ShowListProvider.State(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 227 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 227) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0x1D)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0x1C)
    return ((uint64_t (*)(void))((char *)&loc_86FDC + 4 * byte_2EF86D[v4]))();
  *a1 = a2 - 29;
  return ((uint64_t (*)(void))((char *)sub_87010 + 4 * byte_2EF868[v4]))();
}

uint64_t sub_87010(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_87018(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x87020);
  return result;
}

uint64_t sub_87038(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x87040);
  *(_BYTE *)result = 8 * (((-a2 >> 2) & 7) - 8 * a2);
  return result;
}

uint64_t sub_87044(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_8704C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_87058(unsigned __int8 *a1)
{
  unsigned int v1;
  unsigned int v2;
  unsigned int v3;

  v1 = *a1;
  v2 = v1 >> 6;
  v3 = (v1 & 7) + 3;
  if (v2 == 3)
    return v3;
  else
    return v2;
}

_BYTE *sub_87074(_BYTE *result)
{
  *result &= 0x3Fu;
  return result;
}

_BYTE *sub_87084(_BYTE *result, unsigned int a2)
{
  if (a2 < 3)
    *result = *result & 7 | ((_BYTE)a2 << 6);
  else
    *result = (a2 + 5) & 7 | 0xC0;
  return result;
}

ValueMetadata *type metadata accessor for ShowListProvider.State()
{
  return &type metadata for ShowListProvider.State;
}

uint64_t sub_870C8@<X0>(uint64_t *a1@<X8>)
{
  return sub_870E4(sub_863A4, a1);
}

uint64_t sub_870D8@<X0>(uint64_t *a1@<X8>)
{
  return sub_870E4(sub_860D0, a1);
}

uint64_t sub_870E4@<X0>(uint64_t (*a1)(uint64_t)@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ObserverQueue(0) - 8) + 80);
  result = a1(v2 + ((v5 + 16) & ~v5));
  *a2 = result;
  return result;
}

uint64_t sub_87138(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0C50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_87180(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  if (a9 != 255)
    return sub_87198(result, a2, a3, a4, a5, a6, a7, a8, a9);
  return result;
}

uint64_t sub_87198(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  switch(a9)
  {
    case 0:
      goto LABEL_3;
    case 1:
    case 2:
    case 3:
    case 6:
    case 8:
      result = a2;
      goto LABEL_3;
    case 4:
      swift_bridgeObjectRelease(a2);
      swift_bridgeObjectRelease(a4);
      swift_bridgeObjectRelease(a8);
      result = a6;
LABEL_3:
      result = swift_bridgeObjectRelease(result);
      break;
    case 7:
      swift_bridgeObjectRelease(a2);
      result = sub_4357C(a3, a4);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_87240()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_87250(uint64_t a1)
{
  uint64_t v1;

  return sub_84A4C(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_87258@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_84AB8(a1, a2);
}

uint64_t objectdestroy_29Tm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id *v6;
  int EnumCaseMultiPayload;
  char *v8;
  uint64_t v9;

  v1 = type metadata accessor for ObserverQueue(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (id *)(v0 + v4);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v0 + v4, v1);
  if (EnumCaseMultiPayload == 1)
  {

  }
  else if (!EnumCaseMultiPayload)
  {
    swift_bridgeObjectRelease();
    v8 = (char *)v6 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B4D68) + 48);
    v9 = type metadata accessor for DispatchQoS(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  }
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_87314@<X0>(uint64_t *a1@<X8>)
{
  return sub_870E4(sub_85DFC, a1);
}

void *HeaderFooterShelves.headerShelf.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 16);
  v2 = v1;
  return v1;
}

uint64_t HeaderFooterShelves.__allocating_init(headerShelf:footerShelves:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_allocObject(v2, 32, 7);
  *(_QWORD *)(result + 16) = a1;
  *(_QWORD *)(result + 24) = a2;
  return result;
}

uint64_t HeaderFooterShelves.init(headerShelf:footerShelves:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return v2;
}

uint64_t HeaderFooterShelves.__allocating_init(deserializing:using:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  void (*v30)(char *);
  char *v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t);
  char *v43;
  char *v44;
  uint64_t v45;
  _QWORD *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v48 = a2;
  v51 = type metadata accessor for JSONContext(0);
  v50 = *(_QWORD *)(v51 - 8);
  v3 = __chkstk_darwin(v51);
  v47 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v44 = (char *)&v41 - v5;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4F30);
  __chkstk_darwin(v6);
  v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for JSONObject(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v41 - v14;
  v16 = type metadata accessor for JSONArray(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v43 = (char *)&v41 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v21 = (char *)&v41 - v20;
  v49 = a1;
  v22 = JSONObject.subscript.getter(0x68537265746F6F66, 0xED00007365766C65);
  JSONObject.array.getter(v22);
  v23 = *(void (**)(char *, uint64_t))(v10 + 8);
  v23(v15, v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v8, 1, v16) == 1)
  {
    sub_877A4((uint64_t)v8);
    v24 = type metadata accessor for JSONError(0);
    v25 = sub_F1C0((unint64_t *)&qword_3B0CB0, (void (*)(uint64_t))&type metadata accessor for JSONError, (uint64_t)&protocol conformance descriptor for JSONError);
    swift_allocError(v24, v25, 0, 0);
    strcpy(v26, "footerShelves");
    *((_WORD *)v26 + 7) = -4864;
    *((_QWORD *)v26 + 2) = v45;
    v27 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(*(_QWORD *)(v24 - 8) + 104))(v26, enum case for JSONError.missingProperty(_:), v24);
    swift_willThrow(v27);
    (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v48, v51);
    return ((uint64_t (*)(uint64_t, uint64_t))v23)(v49, v9);
  }
  else
  {
    v42 = (void (*)(uint64_t, uint64_t))v23;
    v45 = v9;
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v21, v8, v16);
    v29 = type metadata accessor for Shelf(0);
    JSONObject.subscript.getter(0x6853726564616568, 0xEB00000000666C65);
    v30 = *(void (**)(char *))(v50 + 16);
    v31 = v44;
    v32 = v48;
    v30(v44);
    v44 = (char *)v29;
    v33 = v46;
    v34 = Shelf.__allocating_init(deserializing:using:)(v13, v31);
    if (v33)
    {
      swift_errorRelease(v33);
      v46 = 0;
    }
    else
    {
      v46 = v34;
    }
    v35 = v43;
    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v43, v21, v16);
    v36 = v47;
    v37 = v51;
    ((void (*)(char *, uint64_t, uint64_t))v30)(v47, v32, v51);
    v38 = sub_F1C0((unint64_t *)&qword_3B0AE0, (void (*)(uint64_t))type metadata accessor for Shelf, (uint64_t)&protocol conformance descriptor for Shelf);
    v39 = Array<A>.init(tryDeserializing:using:)(v35, v36, v44, v38);
    (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v32, v37);
    v42(v49, v45);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v21, v16);
    v40 = type metadata accessor for HeaderFooterShelves();
    result = swift_allocObject(v40, 32, 7);
    *(_QWORD *)(result + 16) = v46;
    *(_QWORD *)(result + 24) = v39;
  }
  return result;
}

uint64_t sub_877A4(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4F30);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for HeaderFooterShelves()
{
  return objc_opt_self(_TtC8ShelfKit19HeaderFooterShelves);
}

uint64_t HeaderFooterShelves.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return v0;
}

uint64_t HeaderFooterShelves.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t sub_87854@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t result;

  result = HeaderFooterShelves.__allocating_init(deserializing:using:)(a1, a2);
  if (!v3)
    *a3 = result;
  return result;
}

uint64_t method lookup function for HeaderFooterShelves(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for HeaderFooterShelves);
}

uint64_t StoreLibraryMultiplexingImageProvider.init(asPartOf:)(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_878F4();
  swift_release(a1);
  return v2;
}

uint64_t sub_878B8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = sub_878F4();
  result = swift_release(a1);
  *a2 = v4;
  return result;
}

uint64_t sub_878F4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *boxed_opaque_existential_2Tm;
  uint64_t v10;
  _QWORD v13[5];
  _QWORD v14[5];
  _QWORD v15[5];
  _QWORD v16[5];
  _QWORD v17[5];

  v0 = type metadata accessor for AssetCaches(0);
  __chkstk_darwin(v0);
  v2 = (_QWORD *)((char *)&v13[-1] - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  v3 = type metadata accessor for StoreImageProvider(0);
  v17[3] = v3;
  v17[4] = sub_F1C0((unint64_t *)&unk_3BF720, (void (*)(uint64_t))type metadata accessor for StoreImageProvider, (uint64_t)&protocol conformance descriptor for StoreImageProvider);
  __swift_allocate_boxed_opaque_existential_2Tm(v17);
  v4 = sub_F1C0(&qword_3B4FE8, (void (*)(uint64_t))type metadata accessor for StoreImageProvider, (uint64_t)&protocol conformance descriptor for StoreImageProvider);
  BaseObjectGraph.inject<A>(_:)(v3, v3, v4);
  v5 = type metadata accessor for LibraryImageProvider(0);
  v16[3] = v5;
  v16[4] = &protocol witness table for LibraryImageProvider;
  __swift_allocate_boxed_opaque_existential_2Tm(v16);
  v6 = sub_F1C0(&qword_3B4FF0, (void (*)(uint64_t))&type metadata accessor for LibraryImageProvider, (uint64_t)&protocol conformance descriptor for LibraryImageProvider);
  BaseObjectGraph.inject<A>(_:)(v5, v5, v6);
  v7 = type metadata accessor for ArtworkLoader();
  v15[3] = v7;
  v15[4] = sub_F1C0(&qword_3B4FF8, (void (*)(uint64_t))type metadata accessor for ArtworkLoader, (uint64_t)&protocol conformance descriptor for ArtworkLoader);
  BaseObjectGraph.inject<A>(_:)(v15, v7, v7);
  v8 = type metadata accessor for CompositeImageProvider(0);
  v14[3] = v8;
  v14[4] = sub_F1C0(&qword_3B5000, (void (*)(uint64_t))type metadata accessor for CompositeImageProvider, (uint64_t)&protocol conformance descriptor for CompositeImageProvider);
  boxed_opaque_existential_2Tm = __swift_allocate_boxed_opaque_existential_2Tm(v14);
  BaseObjectGraph.inject<A>(_:)(boxed_opaque_existential_2Tm, v8, v8);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B5008);
  BaseObjectGraph.inject<A>(_:)(v13, v10, v10);
  BaseObjectGraph.inject<A>(_:)(v2, v0, v0);
  return dispatch thunk of StoreLibraryMultiplexingImageProvider.__allocating_init(storeProvider:libraryProvider:artworkLoaderProvider:compositeProvider:sizeBucketingStrategy:caches:)(v17, v16, v15, v14, v13, v2);
}

void static UpNextScoringWeightsManager.recalculateUpNext()()
{
  id v0;
  id v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;
  _QWORD v6[5];
  uint64_t v7;

  v0 = objc_msgSend((id)objc_opt_self(MTDB), "sharedInstance");
  v1 = objc_msgSend(v0, "privateQueueContext");

  v2 = swift_allocObject(&unk_37C330, 24, 7);
  *(_QWORD *)(v2 + 16) = v1;
  v6[4] = sub_884FC;
  v7 = v2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 1107296256;
  v6[2] = sub_2C9F4;
  v6[3] = &block_descriptor_4;
  v3 = _Block_copy(v6);
  v4 = v7;
  v5 = v1;
  swift_release(v4);
  objc_msgSend(v5, "performBlock:", v3);
  _Block_release(v3);

}

void static UpNextScoringWeightsManager.resetToDefaultValues()()
{
  id v0;

  v0 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "_applePodcastsFoundationSharedUserDefaults");
  objc_msgSend(v0, "setBool:forKey:", 1, kMTUpNextScoreUsesRemotelyConfiguredValues);

  sub_88208();
}

void sub_87C58(void *a1)
{
  uint64_t v2;
  id v3;
  NSString v4;
  id v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char **v12;
  _UNKNOWN **v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  id v18;
  id v19;
  void *v20;
  id v21;
  NSString v22;
  id v23;
  uint64_t v24;
  id v25;

  v2 = type metadata accessor for Logger(0);
  __chkstk_darwin(v2);
  static String._unconditionallyBridgeFromObjectiveC(_:)(kMTPodcastEntityName);
  v3 = objc_allocWithZone((Class)NSFetchRequest);
  v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v25 = objc_msgSend(v3, "initWithEntityName:", v4);

  v5 = objc_msgSend((id)objc_opt_self(MTPodcast), "predicateForSubscribedPodcasts");
  objc_msgSend(v25, "setPredicate:", v5);

  v6 = sub_8852C();
  v7 = NSManagedObjectContext.fetch<A>(_:)(v25, v6);
  v8 = v7;
  if (!((unint64_t)v7 >> 62))
  {
    v9 = *(_QWORD *)((char *)&dword_10 + (v7 & 0xFFFFFFFFFFFFF8));
    if (v9)
      goto LABEL_3;
LABEL_20:
    swift_bridgeObjectRelease();
    objc_msgSend(a1, "saveInCurrentBlock");

    return;
  }
  if (v7 < 0)
    v24 = v7;
  else
    v24 = v7 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v7);
  v9 = _CocoaArrayWrapper.endIndex.getter(v24);
  swift_bridgeObjectRelease();
  if (!v9)
    goto LABEL_20;
LABEL_3:
  if (v9 >= 1)
  {
    v10 = 0;
    v11 = v8 & 0xC000000000000001;
    v12 = &selRef__tabBarController_sidebar_visibilityDidChangeForTabs_;
    v13 = &_sSo17_UITabSidebarItemC5UIKitE12_accessoriesSayAC15UICellAccessoryVGvg_ptr;
    do
    {
      if (v11)
        v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v10, v8);
      else
        v14 = *(id *)(v8 + 8 * v10 + 32);
      v15 = v14;
      v16 = objc_msgSend(v14, v12[75]);
      if (v16)
      {
        v17 = v16;
        v18 = objc_msgSend((id)objc_opt_self(v13[354]), "upNextForPodcastUuid:ctx:", v16, a1);

        if (v18)
        {
          v19 = objc_msgSend(v18, "upNextScore");
          if (v19)
          {
            v20 = v19;
            v21 = objc_msgSend(v18, "episodeUuid");
            static String._unconditionallyBridgeFromObjectiveC(_:)(v21);

            v22 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
            v23 = objc_msgSend(a1, "episodeForUuid:", v22);

            if (v23)
            {
              objc_msgSend(v23, "setListenNowEpisode:", 1);
              objc_msgSend(v20, "combinedScore");
              objc_msgSend(v23, "setUpNextScore:");

              v20 = v23;
            }

            v11 = v8 & 0xC000000000000001;
            v12 = &selRef__tabBarController_sidebar_visibilityDidChangeForTabs_;
            v13 = &_sSo17_UITabSidebarItemC5UIKitE12_accessoriesSayAC15UICellAccessoryVGvg_ptr;
          }

        }
      }
      ++v10;

    }
    while (v9 != v10);
    goto LABEL_20;
  }
  __break(1u);
}

void sub_88124(double *a1)
{
  void *v2;
  id v3;
  id v4;
  id v5;

  v2 = (void *)objc_opt_self(NSUserDefaults);
  v3 = objc_msgSend(v2, "_applePodcastsFoundationSharedUserDefaults");
  objc_msgSend(v3, "setDouble:forKey:", kMTUpNextScoreDefaultModifiedDateWeight, a1[4]);

  v4 = objc_msgSend(v2, "_applePodcastsFoundationSharedUserDefaults");
  objc_msgSend(v4, "setDouble:forKey:", kMTUpNextScoreDefaultPercentEpsTotalPlayedWeight, a1[3]);

  v5 = objc_msgSend(v2, "_applePodcastsFoundationSharedUserDefaults");
  objc_msgSend(v5, "setDouble:forKey:", kMTUpNextScoreDefaultPercentEpsFromShowPlayedWeight, a1[2]);

}

void sub_88208()
{
  void *v0;
  id v1;
  double v2;
  double v3;
  id v4;
  id v5;
  double v6;
  double v7;
  id v8;
  id v9;
  double v10;
  double v11;
  id v12;

  v0 = (void *)objc_opt_self(NSUserDefaults);
  v1 = objc_msgSend(v0, "_applePodcastsFoundationSharedUserDefaults");
  objc_msgSend(v1, "doubleForKey:", kMTUpNextScoreDefaultModifiedDateWeight);
  v3 = v2;

  v4 = objc_msgSend(v0, "_applePodcastsFoundationSharedUserDefaults");
  objc_msgSend(v4, "setDouble:forKey:", kMTUpNextScoreModifiedDateWeight, v3);

  v5 = objc_msgSend(v0, "_applePodcastsFoundationSharedUserDefaults");
  objc_msgSend(v5, "doubleForKey:", kMTUpNextScoreDefaultPercentEpsFromShowPlayedWeight);
  v7 = v6;

  v8 = objc_msgSend(v0, "_applePodcastsFoundationSharedUserDefaults");
  objc_msgSend(v8, "setDouble:forKey:", kMTUpNextScorePercentEpsFromShowPlayedWeight, v7);

  v9 = objc_msgSend(v0, "_applePodcastsFoundationSharedUserDefaults");
  objc_msgSend(v9, "doubleForKey:", kMTUpNextScoreDefaultPercentEpsTotalPlayedWeight);
  v11 = v10;

  v12 = objc_msgSend(v0, "_applePodcastsFoundationSharedUserDefaults");
  objc_msgSend(v12, "setDouble:forKey:", kMTUpNextScorePercentEpsTotalPlayedWeight, v11);

}

void _s8ShelfKit27UpNextScoringWeightsManagerO013updateDefaultF04withyAA0cdeF0C_tFZ_0(double *a1)
{
  id v1;
  unsigned int v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  _QWORD v9[5];
  uint64_t v10;

  sub_88124(a1);
  v1 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "_applePodcastsFoundationSharedUserDefaults");
  v2 = objc_msgSend(v1, "BOOLForKey:", kMTUpNextScoreUsesRemotelyConfiguredValues);

  if (v2)
  {
    sub_88208();
    v3 = objc_msgSend((id)objc_opt_self(MTDB), "sharedInstance");
    v4 = objc_msgSend(v3, "privateQueueContext");

    v5 = swift_allocObject(&unk_37C3A0, 24, 7);
    *(_QWORD *)(v5 + 16) = v4;
    v9[4] = sub_88570;
    v10 = v5;
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 1107296256;
    v9[2] = sub_2C9F4;
    v9[3] = &block_descriptor_7;
    v6 = _Block_copy(v9);
    v7 = v10;
    v8 = v4;
    swift_release(v7);
    objc_msgSend(v8, "performBlock:", v6);
    _Block_release(v6);

  }
}

uint64_t sub_884D8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_884FC()
{
  uint64_t v0;

  sub_87C58(*(void **)(v0 + 16));
}

uint64_t block_copy_helper_4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t block_destroy_helper_4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

ValueMetadata *type metadata accessor for UpNextScoringWeightsManager()
{
  return &type metadata for UpNextScoringWeightsManager;
}

unint64_t sub_8852C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_3BF7D0;
  if (!qword_3BF7D0)
  {
    v1 = objc_opt_self(MTPodcast);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_3BF7D0);
  }
  return result;
}

uint64_t LibraryDataProviderProtocol.episodeListPublisher(settings:pageSize:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  void *v9;
  uint64_t v10;

  v8 = sub_676C8();
  v9 = (void *)static OS_dispatch_queue.main.getter(v8);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t, uint64_t))(a4 + 336))(a1, a2, v9, a3, a4);

  return v10;
}

unint64_t ShowInfo.asDictionary.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t inited;
  uint64_t v9;

  v2 = *v0;
  v1 = v0[1];
  v4 = v0[2];
  v3 = v0[3];
  v5 = v0[4];
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B5020);
  inited = swift_initStackObject(v6, &v9);
  *(_OWORD *)(inited + 16) = xmmword_2EFAE0;
  *(_QWORD *)(inited + 32) = 0x64496D616461;
  *(_QWORD *)(inited + 40) = 0xE600000000000000;
  *(_QWORD *)(inited + 48) = v2;
  *(_QWORD *)(inited + 56) = v1;
  *(_QWORD *)(inited + 72) = &type metadata for String;
  strcpy((char *)(inited + 80), "deviceShowId");
  *(_BYTE *)(inited + 93) = 0;
  *(_WORD *)(inited + 94) = -5120;
  *(_QWORD *)(inited + 96) = v4;
  *(_QWORD *)(inited + 104) = v3;
  *(_QWORD *)(inited + 120) = &type metadata for String;
  *(_QWORD *)(inited + 128) = 0x6954776F6C6C6F66;
  *(_QWORD *)(inited + 136) = 0xEA0000000000656DLL;
  *(_QWORD *)(inited + 168) = &type metadata for Double;
  *(_QWORD *)(inited + 144) = v5;
  swift_bridgeObjectRetain(v1);
  swift_bridgeObjectRetain(v3);
  return sub_287F38(inited);
}

void __swiftcall ShowInfo.init(adamId:deviceShowId:followTime:)(ShelfKit::ShowInfo *__return_ptr retstr, Swift::String adamId, Swift::String deviceShowId, Swift::Double followTime)
{
  retstr->adamId = adamId;
  retstr->deviceShowId = deviceShowId;
  retstr->followTime = followTime;
}

uint64_t ShowInfo.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v4 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(a1, v4, v3);
  return swift_bridgeObjectRelease(v3);
}

uint64_t static ShowInfo.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  if (v4 == v6 && v5 == v7)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v6, v7, 0);
}

Swift::Int ShowInfo.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[9];

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  Hasher.init(_seed:)(v4);
  swift_bridgeObjectRetain(v2);
  String.hash(into:)(v4, v1, v2);
  swift_bridgeObjectRelease(v2);
  return Hasher._finalize()();
}

Swift::Int sub_887D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[9];

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  Hasher.init(_seed:)(v4);
  swift_bridgeObjectRetain(v2);
  String.hash(into:)(v4, v1, v2);
  swift_bridgeObjectRelease(v2);
  return Hasher._finalize()();
}

uint64_t LibraryDataProviderProtocol.fetchShowCountObserver()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a2 + 240))(2, 1, a1, a2);
}

uint64_t ShowLockupStyle.LockupStyleOptions.followedSerialShowFallbackStyle.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 3);
}

uint64_t ShowLockupStyle.LockupStyleOptions.unfollowedShowStyle.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 4);
}

uint64_t ShowLockupStyle.LockupStyleOptions.unfollowedShowFallbackStyle.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 5);
}

ShelfKit::ShowLockupStyle::LockupStyleOptions __swiftcall ShowLockupStyle.LockupStyleOptions.init(followedEpisodicShowStyle:followedEpisodicShowFallbackStyle:followedSerialShowStyle:followedSerialShowFallbackStyle:unfollowedShowStyle:unfollowedShowFallbackStyle:)(ShelfKit::ShowLockupStyleType followedEpisodicShowStyle, ShelfKit::ShowLockupStyleType_optional followedEpisodicShowFallbackStyle, ShelfKit::ShowLockupStyleType_optional followedSerialShowStyle, ShelfKit::ShowLockupStyleType_optional followedSerialShowFallbackStyle, ShelfKit::ShowLockupStyleType_optional unfollowedShowStyle, ShelfKit::ShowLockupStyleType_optional unfollowedShowFallbackStyle)
{
  uint64_t v6;
  ShelfKit::ShowLockupStyle::LockupStyleOptions result;

  *(_BYTE *)v6 = followedEpisodicShowStyle;
  *(ShelfKit::ShowLockupStyleType_optional *)(v6 + 1) = followedEpisodicShowFallbackStyle;
  *(ShelfKit::ShowLockupStyleType_optional *)(v6 + 2) = followedSerialShowStyle;
  *(ShelfKit::ShowLockupStyleType_optional *)(v6 + 3) = followedSerialShowFallbackStyle;
  *(ShelfKit::ShowLockupStyleType_optional *)(v6 + 4) = unfollowedShowStyle;
  *(ShelfKit::ShowLockupStyleType_optional *)(v6 + 5) = unfollowedShowFallbackStyle;
  result.followedEpisodicShowStyle = followedEpisodicShowStyle;
  return result;
}

void ShowLockupStyle.title.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;

  v2 = *(_DWORD *)(v1 + 3);
  *(_WORD *)(a1 + 4) = *(_WORD *)(v1 + 7);
  *(_DWORD *)a1 = v2;
}

void ShowLockupStyle.subline.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int16 v2;

  v2 = *(_WORD *)(v1 + 13);
  *(_DWORD *)a1 = *(_DWORD *)(v1 + 9);
  *(_WORD *)(a1 + 4) = v2;
}

uint64_t ShowLockupStyle.groupedEpisodesListType.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_88BF4(v1 + 16, a1);
}

double ShowLockupStyle.init(includesOfferButton:defaultSubtitle:unfollowedSubtitle:groupedEpisodesListType:)@<D0>(char a1@<W0>, unsigned __int8 a2@<W1>, unsigned __int8 a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v9;
  char v10;
  unsigned __int8 v11;
  __int128 v12;
  double result;
  __int128 v14;
  _OWORD v15[2];
  __int128 v16;
  __int128 v17;
  char v18;

  v9 = a3;
  sub_88C3C(a4, (uint64_t)v15);
  v10 = v18;
  if (v9 == 16)
    v11 = a2;
  else
    v11 = a3;
  *(_BYTE *)a5 = a1;
  *(_BYTE *)(a5 + 1) = a2;
  *(_BYTE *)(a5 + 2) = v11;
  *(_WORD *)(a5 + 7) = 0;
  *(_DWORD *)(a5 + 3) = 16;
  *(_BYTE *)(a5 + 9) = a2;
  *(_WORD *)(a5 + 10) = 4112;
  *(_BYTE *)(a5 + 12) = 16;
  *(_BYTE *)(a5 + 13) = a3;
  *(_BYTE *)(a5 + 14) = 16;
  v12 = v15[1];
  *(_OWORD *)(a5 + 16) = v15[0];
  *(_OWORD *)(a5 + 32) = v12;
  result = *(double *)&v16;
  v14 = v17;
  *(_OWORD *)(a5 + 48) = v16;
  *(_OWORD *)(a5 + 64) = v14;
  *(_BYTE *)(a5 + 80) = v10;
  return result;
}

double ShowLockupStyle.init(includesOfferButton:title:subline:groupedEpisodesListType:)@<D0>(char a1@<W0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  char v9;
  int v10;
  __int16 v11;
  int v12;
  char v13;
  uint8x8_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  __int128 v17;
  double result;
  __int128 v19;
  _OWORD v20[2];
  __int128 v21;
  __int128 v22;
  char v23;

  sub_88C3C(a4, (uint64_t)v20);
  v9 = v23;
  v10 = *a2;
  v11 = *((_WORD *)a2 + 2);
  v12 = *(unsigned __int8 *)(a3 + 4);
  v13 = *(_BYTE *)(a3 + 5);
  *(_BYTE *)a5 = a1;
  *(_WORD *)(a5 + 7) = v11;
  *(_DWORD *)(a5 + 3) = v10;
  v14.i32[0] = *(_DWORD *)a3;
  v15 = vmovl_u8(v14).u8[0];
  if (v12 == 16)
    v16 = v15;
  else
    v16 = v12;
  *(_BYTE *)(a5 + 1) = v15;
  *(_BYTE *)(a5 + 2) = v16;
  *(_DWORD *)(a5 + 9) = v14.i32[0];
  *(_BYTE *)(a5 + 13) = v12;
  *(_BYTE *)(a5 + 14) = v13;
  v17 = v20[1];
  *(_OWORD *)(a5 + 16) = v20[0];
  *(_OWORD *)(a5 + 32) = v17;
  result = *(double *)&v21;
  v19 = v22;
  *(_OWORD *)(a5 + 48) = v21;
  *(_OWORD *)(a5 + 64) = v19;
  *(_BYTE *)(a5 + 80) = v9;
  return result;
}

void static StationListOptions.excludeArtwork.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void static StationListOptions.excludeEpisodes.getter(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

void static StationListOptions.excludeShows.getter(_QWORD *a1@<X8>)
{
  *a1 = 4;
}

void sub_88A10()
{
  qword_3B5010 = 6;
}

_QWORD *static StationListOptions.artworkList.getter@<X0>(_QWORD *a1@<X8>)
{
  return sub_88AA0(&qword_3B0098, &qword_3B5010, a1);
}

void sub_88A50()
{
  qword_3B5018 = 7;
}

_QWORD *static StationListOptions.list.getter@<X0>(_QWORD *a1@<X8>)
{
  return sub_88AA0(&qword_3B00A0, &qword_3B5018, a1);
}

_QWORD *sub_88AA0@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  if (*result != -1)
    result = (_QWORD *)swift_once();
  *a3 = *a2;
  return result;
}

uint64_t _s8ShelfKit15ShowLockupStyleV0dE7OptionsV2eeoiySbAE_AEtFZ_0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t result;

  if (*a1 != *a2)
    return 0;
  v2 = a1[1];
  v3 = a1[2];
  v4 = a1[3];
  v5 = a1[4];
  v6 = a1[5];
  v7 = a2[1];
  v8 = a2[2];
  v9 = a2[3];
  v10 = a2[4];
  v11 = a2[5];
  if (v2 == 16)
  {
    if (v7 != 16)
      return 0;
  }
  else
  {
    result = 0;
    if (v7 == 16 || v2 != v7)
      return result;
  }
  if (v3 == 16)
  {
    if (v8 != 16)
      return 0;
  }
  else
  {
    result = 0;
    if (v8 == 16 || v3 != v8)
      return result;
  }
  if (v4 == 16)
  {
    if (v9 != 16)
      return 0;
  }
  else
  {
    result = 0;
    if (v9 == 16 || v4 != v9)
      return result;
  }
  if (v5 == 16)
  {
    if (v10 != 16)
      return 0;
LABEL_22:
    if (v6 == 16)
    {
      if (v11 == 16)
        return 1;
    }
    else if (v11 != 16 && v6 == v11)
    {
      return 1;
    }
    return 0;
  }
  result = 0;
  if (v10 != 16 && v5 == v10)
    goto LABEL_22;
  return result;
}

uint64_t sub_88BF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B5028);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_88C3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B5028);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

BOOL _s8ShelfKit15ShowLockupStyleV2eeoiySbAC_ACtFZ_0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint8x8_t v2;
  uint8x8_t v3;
  _BOOL8 result;
  unint64_t v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int8x16_t v30;
  uint64x2_t v31;
  int16x8_t v32;
  unsigned __int8 v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned __int8 v64;
  _QWORD v65[8];
  char v66;

  result = 0;
  if (((*a1 ^ *a2) & 1) == 0 && a1[1] == a2[1] && a1[2] == a2[2])
  {
    v6 = *(unsigned int *)(a1 + 3) | ((unint64_t)*(unsigned __int16 *)(a1 + 7) << 32);
    v2.i32[0] = *(_DWORD *)(a1 + 9);
    v7 = a1[13];
    v8 = a1[14];
    v10 = *((_QWORD *)a1 + 2);
    v9 = *((_QWORD *)a1 + 3);
    v12 = *((_QWORD *)a1 + 4);
    v11 = *((_QWORD *)a1 + 5);
    v14 = *((_QWORD *)a1 + 6);
    v13 = *((_QWORD *)a1 + 7);
    v16 = *((_QWORD *)a1 + 8);
    v15 = *((_QWORD *)a1 + 9);
    v17 = a1[80];
    v18 = *(unsigned int *)(a2 + 3) | ((unint64_t)*(unsigned __int16 *)(a2 + 7) << 32);
    v3.i32[0] = *(_DWORD *)(a2 + 9);
    v19 = a2[13];
    v20 = a2[14];
    v22 = *((_QWORD *)a2 + 2);
    v21 = *((_QWORD *)a2 + 3);
    v24 = *((_QWORD *)a2 + 4);
    v23 = *((_QWORD *)a2 + 5);
    v26 = *((_QWORD *)a2 + 6);
    v25 = *((_QWORD *)a2 + 7);
    v28 = *((_QWORD *)a2 + 8);
    v27 = *((_QWORD *)a2 + 9);
    v29 = a2[80];
    if (v6 == 16)
    {
      v43 = v29;
      v35 = v22;
      v36 = v21;
      v37 = v24;
      v38 = v23;
      v39 = v26;
      v40 = v25;
      v41 = v28;
      v42 = v27;
      v46 = v17;
      v44 = v10;
      v45 = v9;
      if (v18 != 16)
        return 0;
    }
    else
    {
      LODWORD(v47) = v6;
      WORD2(v47) = WORD2(v6);
      if (v18 == 16)
        return 0;
      v43 = v29;
      v35 = v22;
      v36 = v21;
      v37 = v24;
      v38 = v23;
      v39 = v26;
      v40 = v25;
      v41 = v28;
      v42 = v27;
      v46 = v17;
      v44 = v10;
      v45 = v9;
      v30.i64[0] = 0xFFFFFFFFFFFFLL;
      v30.i64[1] = 0xFFFFFFFFFFFFLL;
      v31 = (uint64x2_t)vandq_s8((int8x16_t)vdupq_n_s64(v18), v30);
      v32 = (int16x8_t)vshlq_u64(v31, (uint64x2_t)xmmword_2EFAF0);
      LOBYTE(v65[0]) = v18;
      *(int32x2_t *)v31.i8 = vmovn_s64((int64x2_t)vshlq_u64(v31, (uint64x2_t)xmmword_2EFB00));
      *(int32x2_t *)v32.i8 = vmovn_s64((int64x2_t)v32);
      v32.i16[1] = v32.i16[2];
      v32.i16[2] = v31.i16[0];
      v32.i16[3] = v31.i16[2];
      *(_DWORD *)((char *)v65 + 1) = vmovn_s16(v32).u32[0];
      BYTE5(v65[0]) = BYTE5(v18);
      if ((_s8ShelfKit15ShowLockupStyleV0dE7OptionsV2eeoiySbAE_AEtFZ_0((unsigned __int8 *)&v47, (unsigned __int8 *)v65) & 1) == 0)
        return 0;
    }
    LODWORD(v47) = vmovn_s16((int16x8_t)vmovl_u8(v2)).u32[0];
    BYTE4(v47) = v7;
    BYTE5(v47) = v8;
    LODWORD(v65[0]) = vmovn_s16((int16x8_t)vmovl_u8(v3)).u32[0];
    BYTE4(v65[0]) = v19;
    BYTE5(v65[0]) = v20;
    if ((_s8ShelfKit15ShowLockupStyleV0dE7OptionsV2eeoiySbAE_AEtFZ_0((unsigned __int8 *)&v47, (unsigned __int8 *)v65) & 1) == 0)
      return 0;
    if (v46 == 255)
    {
      v33 = v43;
      if (v43 == 255)
        return 1;
    }
    else
    {
      v33 = v43;
      if (v43 != 255)
      {
        v65[0] = v44;
        v65[1] = v45;
        v65[2] = v12;
        v65[3] = v11;
        v65[4] = v14;
        v65[5] = v13;
        v65[6] = v16;
        v65[7] = v15;
        v66 = v46;
        v47 = v35;
        v48 = v36;
        v49 = v37;
        v50 = v38;
        v51 = v39;
        v52 = v40;
        v53 = v41;
        v54 = v42;
        v55 = v43;
        sub_89F58(v44, v45, v12, v11, v14, v13, v16, v15, v46);
        sub_89F58(v35, v36, v37, v38, v39, v40, v41, v42, v43);
        static EpisodeListType.== infix(_:_:)(v65, &v47);
        sub_87180(v35, v36, v37, v38, v39, v40, v41, v42, v43);
        sub_87180(v44, v45, v12, v11, v14, v13, v16, v15, v46);
        return (v34 & 1) != 0;
      }
    }
    v47 = v44;
    v48 = v45;
    v49 = v12;
    v50 = v11;
    v51 = v14;
    v52 = v13;
    v53 = v16;
    v54 = v15;
    v55 = v46;
    v56 = v35;
    v57 = v36;
    v58 = v37;
    v59 = v38;
    v60 = v39;
    v61 = v40;
    v62 = v41;
    v63 = v42;
    v64 = v33;
    sub_89F58(v44, v45, v12, v11, v14, v13, v16, v15, v46);
    sub_89F58(v35, v36, v37, v38, v39, v40, v41, v42, v33);
    sub_89F70((uint64_t)&v47);
    return 0;
  }
  return result;
}

unint64_t sub_89038()
{
  unint64_t result;

  result = qword_3B5030;
  if (!qword_3B5030)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for FetchEntityError.ErrorKind);
    atomic_store(result, (unint64_t *)&qword_3B5030);
  }
  return result;
}

unint64_t sub_89080()
{
  unint64_t result;

  result = qword_3B5038;
  if (!qword_3B5038)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for FetchEntityError.ErrorDomain);
    atomic_store(result, (unint64_t *)&qword_3B5038);
  }
  return result;
}

unint64_t sub_890C8()
{
  unint64_t result;

  result = qword_3B5040;
  if (!qword_3B5040)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ShowInfo);
    atomic_store(result, (unint64_t *)&qword_3B5040);
  }
  return result;
}

unint64_t sub_89110()
{
  unint64_t result;

  result = qword_3B5048;
  if (!qword_3B5048)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ShowLockupStyleType);
    atomic_store(result, (unint64_t *)&qword_3B5048);
  }
  return result;
}

unint64_t sub_89158()
{
  unint64_t result;

  result = qword_3B5050;
  if (!qword_3B5050)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for StationListOptions);
    atomic_store(result, (unint64_t *)&qword_3B5050);
  }
  return result;
}

unint64_t sub_891A0()
{
  unint64_t result;

  result = qword_3B5058;
  if (!qword_3B5058)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for StationListOptions);
    atomic_store(result, (unint64_t *)&qword_3B5058);
  }
  return result;
}

unint64_t sub_891E8()
{
  unint64_t result;

  result = qword_3B5060;
  if (!qword_3B5060)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for StationListOptions);
    atomic_store(result, (unint64_t *)&qword_3B5060);
  }
  return result;
}

unint64_t sub_89230()
{
  unint64_t result;

  result = qword_3B5068;
  if (!qword_3B5068)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for StationListOptions);
    atomic_store(result, (unint64_t *)&qword_3B5068);
  }
  return result;
}

ValueMetadata *type metadata accessor for FetchEntityError()
{
  return &type metadata for FetchEntityError;
}

uint64_t storeEnumTagSinglePayload for FetchEntityError.ErrorKind(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_892D0 + 4 * byte_2EFB15[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_89304 + 4 * byte_2EFB10[v4]))();
}

uint64_t sub_89304(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_8930C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x89314);
  return result;
}

uint64_t sub_89320(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x89328);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_8932C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_89334(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FetchEntityError.ErrorKind()
{
  return &type metadata for FetchEntityError.ErrorKind;
}

uint64_t storeEnumTagSinglePayload for FetchEntityError.ErrorDomain(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_89390 + 4 * byte_2EFB1A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_893B0 + 4 * byte_2EFB1F[v4]))();
}

_BYTE *sub_89390(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_893B0(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_893B8(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_893C0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_893C8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_893D0(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for FetchEntityError.ErrorDomain()
{
  return &type metadata for FetchEntityError.ErrorDomain;
}

_QWORD *initializeWithCopy for ShowInfo(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

_QWORD *assignWithCopy for ShowInfo(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  return a1;
}

_QWORD *assignWithTake for ShowInfo(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  v6 = a2[3];
  v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  return a1;
}

uint64_t getEnumTagSinglePayload for GroupedSearchResultsPage.Result(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GroupedSearchResultsPage.Result(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ShowInfo()
{
  return &type metadata for ShowInfo;
}

uint64_t dispatch thunk of LibraryDataProviderProtocol.playbackController.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of LibraryRemovalControllerProtocol.removeAllDownloadsFromAllShowsSheetAction()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of LibraryDataProviderProtocol.episodeDownloadStateController.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of LibraryRemovalControllerProtocol.deleteAllRecentlyUnfollowedShowsSheetAction()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of LibraryDataProviderProtocol.reviewController.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of LibraryDataProviderProtocol.episodePlayStateController.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t dispatch thunk of LibraryDataProviderProtocol.handleEventsForBackgroundURLSession(identifier:handler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 88))();
}

uint64_t dispatch thunk of LibraryDataProviderProtocol.categoriesRecommendationsMetadataPublisher()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 96))();
}

uint64_t dispatch thunk of LibraryDataProviderProtocol.channelsRecommendationsMetadataPublisher()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 104))();
}

uint64_t dispatch thunk of LibraryDataProviderProtocol.episodesRecommendationsMetadataPublisher()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 112))();
}

uint64_t dispatch thunk of LibraryDataProviderProtocol.showsRecommendationsMetadataPublisher()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 120))();
}

uint64_t dispatch thunk of LibraryDataProviderProtocol.fetchEpisode(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 136))();
}

uint64_t dispatch thunk of LibraryDataProviderProtocol.fetchEpisodeBlocking(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 144))();
}

