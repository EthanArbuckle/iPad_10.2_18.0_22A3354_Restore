uint64_t dispatch thunk of LibraryDataProviderProtocol.fetchEpisodeLockups(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 160))();
}

uint64_t dispatch thunk of LibraryDataProviderProtocol.fetchShowLockups(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 168))();
}

uint64_t dispatch thunk of LibraryDataProviderProtocol.fetchChannelLockups(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 176))();
}

uint64_t dispatch thunk of LibraryDataProviderProtocol.showsPaginatedPublisher(listType:sortBy:lockupStyle:pageSize:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(a7 + 184))(a1, a2 & 1);
}

uint64_t dispatch thunk of LibraryDataProviderProtocol.unlimitedShowsPublisher<A>(listType:sortBy:transform:updateRequiredComparator:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(a10 + 192))(a1, a2 & 1);
}

uint64_t dispatch thunk of LibraryDataProviderProtocol.fetchStationsObserver(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 200))();
}

uint64_t dispatch thunk of LibraryDataProviderProtocol.fetchChannelsObserver()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 208))();
}

uint64_t dispatch thunk of LibraryDataProviderProtocol.fetchChannelDetailBlocking(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 216))();
}

uint64_t dispatch thunk of LibraryDataProviderProtocol.channelSubscribedPublisher(channelAdamId:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(a4 + 224))(a1, a2 & 1);
}

uint64_t dispatch thunk of LibraryDataProviderProtocol.libraryChannelsPaginatedPublisher(sortBy:pageSize:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 232))();
}

uint64_t dispatch thunk of LibraryDataProviderProtocol.fetchShowCountObserver(listType:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(a4 + 240))(a1, a2 & 1);
}

uint64_t dispatch thunk of LibraryDataProviderProtocol.fetchStationCountObserver()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 248))();
}

uint64_t dispatch thunk of LibraryDataProviderProtocol.fetchDownloadCountObserver()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 256))();
}

uint64_t dispatch thunk of LibraryActionControllerProtocol.delete(station:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 264))();
}

uint64_t dispatch thunk of LibraryDataProviderProtocol.fetchEpisodeCountObserver(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;
  uint64_t (*v4)(_OWORD *);
  __int128 v5;
  __int128 v6;
  _OWORD v8[4];
  char v9;

  v3 = *(_BYTE *)(a1 + 64);
  v4 = *(uint64_t (**)(_OWORD *))(a3 + 272);
  v5 = *(_OWORD *)(a1 + 16);
  v8[0] = *(_OWORD *)a1;
  v8[1] = v5;
  v6 = *(_OWORD *)(a1 + 48);
  v8[2] = *(_OWORD *)(a1 + 32);
  v8[3] = v6;
  v9 = v3;
  return v4(v8);
}

{
  return (*(uint64_t (**)(void))(a3 + 280))();
}

uint64_t dispatch thunk of LibraryDataProviderProtocol.fetchSmartPlayEpisodeForPodcastBlocking(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 288))();
}

uint64_t dispatch thunk of LibraryDataProviderProtocol.fetchPodcastDetailBlocking(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 296))();
}

uint64_t dispatch thunk of LibraryDataProviderProtocol.fetchPodcastDetailBlocking(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 304))();
}

uint64_t dispatch thunk of LibraryDataProviderProtocol.fetchShowEpisodeCountHeaderData(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 312))();
}

uint64_t dispatch thunk of LibraryDataProviderProtocol.showDetailPublisher(uuid:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 320))();
}

uint64_t dispatch thunk of LibraryDataProviderProtocol.allAvailableEpisodeUserFiltersPublisher(forShow:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 328))();
}

uint64_t dispatch thunk of LibraryActionControllerProtocol.download(episode:isFromSaving:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 336))();
}

uint64_t dispatch thunk of LibraryActionControllerProtocol.download(episodes:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 344))();
}

uint64_t dispatch thunk of LibraryDataProviderProtocol.seeAllEpisodesSettingsPublisher(uuid:filterPublisher:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 352))();
}

uint64_t dispatch thunk of LibraryDataProviderProtocol.seeAllEpisodesShelfPublisher(settings:pageSize:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 360))();
}

uint64_t dispatch thunk of LibraryDataProviderProtocol.episodeListSettingsPublisher(listType:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;
  uint64_t (*v4)(_OWORD *);
  __int128 v5;
  __int128 v6;
  _OWORD v8[4];
  char v9;

  v3 = *(_BYTE *)(a1 + 64);
  v4 = *(uint64_t (**)(_OWORD *))(a3 + 368);
  v5 = *(_OWORD *)(a1 + 16);
  v8[0] = *(_OWORD *)a1;
  v8[1] = v5;
  v6 = *(_OWORD *)(a1 + 48);
  v8[2] = *(_OWORD *)(a1 + 32);
  v8[3] = v6;
  v9 = v3;
  return v4(v8);
}

uint64_t dispatch thunk of LibraryDataProviderProtocol.episodeListShelfPublisher(episodeSettingsPublisher:pageSize:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 376))();
}

uint64_t dispatch thunk of LibraryActionControllerProtocol.resumeOrPauseEpisodeDownload(withUuid:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 384))();
}

uint64_t dispatch thunk of LibraryDataProviderProtocol.fetchStationDetailObserver(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 392))();
}

uint64_t dispatch thunk of LibraryDataProviderProtocol.stationDetailPublisher(uuid:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 400))();
}

uint64_t dispatch thunk of LibraryActionControllerProtocol.reportBrowse(params:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 408))();
}

uint64_t dispatch thunk of LibraryDataProviderProtocol.fetchGroupedSearchResults(term:facets:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 416))();
}

uint64_t dispatch thunk of LibraryDataProviderProtocol.fetchImageDownloadObserver()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 424))();
}

uint64_t dispatch thunk of LibraryDataProviderProtocol.hasFollowedShows()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 432))();
}

uint64_t dispatch thunk of LibraryDataProviderProtocol.addApplicationBackgroundDependencies(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 440))();
}

uint64_t getEnumTagSinglePayload for ShowLockupStyleType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF1)
    goto LABEL_17;
  if (a2 + 15 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 15) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 15;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 15;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 15;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x10;
  v8 = v6 - 16;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ShowLockupStyleType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 15 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 15) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF1)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF0)
    return ((uint64_t (*)(void))((char *)&loc_89874 + 4 * byte_2EFB29[v4]))();
  *a1 = a2 + 15;
  return ((uint64_t (*)(void))((char *)sub_898A8 + 4 * byte_2EFB24[v4]))();
}

uint64_t sub_898A8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_898B0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x898B8);
  return result;
}

uint64_t sub_898C4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x898CCLL);
  *(_BYTE *)result = a2 + 15;
  return result;
}

uint64_t sub_898D0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_898D8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ShowLockupStyleType()
{
  return &type metadata for ShowLockupStyleType;
}

uint64_t sub_898F4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  switch(a9)
  {
    case 0:
      goto LABEL_3;
    case 1:
    case 2:
    case 3:
    case 6:
    case 8:
      result = a2;
      goto LABEL_3;
    case 4:
      swift_bridgeObjectRetain(a6);
      swift_bridgeObjectRetain(a8);
      swift_bridgeObjectRetain(a2);
      result = a4;
LABEL_3:
      result = swift_bridgeObjectRetain(result);
      break;
    case 7:
      swift_bridgeObjectRetain(a2);
      result = sub_43568(a3, a4);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t destroy for ShowLockupStyle(uint64_t result)
{
  int v1;

  v1 = *(unsigned __int8 *)(result + 80);
  if (v1 != 255)
    return sub_87198(*(_QWORD *)(result + 16), *(_QWORD *)(result + 24), *(_QWORD *)(result + 32), *(_QWORD *)(result + 40), *(_QWORD *)(result + 48), *(_QWORD *)(result + 56), *(_QWORD *)(result + 64), *(_QWORD *)(result + 72), v1);
  return result;
}

uint64_t initializeWithCopy for ShowLockupStyle(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  *(_DWORD *)(a1 + 3) = *(_DWORD *)(a2 + 3);
  *(_WORD *)(a1 + 7) = *(_WORD *)(a2 + 7);
  *(_DWORD *)(a1 + 9) = *(_DWORD *)(a2 + 9);
  *(_WORD *)(a1 + 13) = *(_WORD *)(a2 + 13);
  v3 = *(unsigned __int8 *)(a2 + 80);
  if (v3 == 255)
  {
    v12 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v12;
    *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
    v13 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 32) = v13;
  }
  else
  {
    v4 = *(_QWORD *)(a2 + 16);
    v5 = *(_QWORD *)(a2 + 24);
    v6 = *(_QWORD *)(a2 + 32);
    v7 = *(_QWORD *)(a2 + 40);
    v8 = *(_QWORD *)(a2 + 48);
    v9 = *(_QWORD *)(a2 + 56);
    v10 = *(_QWORD *)(a2 + 64);
    v11 = *(_QWORD *)(a2 + 72);
    sub_898F4(v4, v5, v6, v7, v8, v9, v10, v11, v3);
    *(_QWORD *)(a1 + 16) = v4;
    *(_QWORD *)(a1 + 24) = v5;
    *(_QWORD *)(a1 + 32) = v6;
    *(_QWORD *)(a1 + 40) = v7;
    *(_QWORD *)(a1 + 48) = v8;
    *(_QWORD *)(a1 + 56) = v9;
    *(_QWORD *)(a1 + 64) = v10;
    *(_QWORD *)(a1 + 72) = v11;
    *(_BYTE *)(a1 + 80) = v3;
  }
  return a1;
}

uint64_t assignWithCopy for ShowLockupStyle(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  v3 = *(_DWORD *)(a2 + 3);
  *(_WORD *)(a1 + 7) = *(_WORD *)(a2 + 7);
  *(_DWORD *)(a1 + 3) = v3;
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  *(_BYTE *)(a1 + 10) = *(_BYTE *)(a2 + 10);
  *(_BYTE *)(a1 + 11) = *(_BYTE *)(a2 + 11);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  *(_BYTE *)(a1 + 13) = *(_BYTE *)(a2 + 13);
  *(_BYTE *)(a1 + 14) = *(_BYTE *)(a2 + 14);
  v4 = a1 + 16;
  v5 = a2 + 16;
  v6 = *(unsigned __int8 *)(a2 + 80);
  if (*(unsigned __int8 *)(a1 + 80) == 255)
  {
    if (v6 == 255)
    {
      *(_OWORD *)v4 = *(_OWORD *)v5;
      v35 = *(_OWORD *)(a2 + 32);
      v36 = *(_OWORD *)(a2 + 48);
      v37 = *(_OWORD *)(a2 + 64);
      *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
      *(_OWORD *)(a1 + 48) = v36;
      *(_OWORD *)(a1 + 64) = v37;
      *(_OWORD *)(a1 + 32) = v35;
    }
    else
    {
      v24 = *(_QWORD *)(a2 + 16);
      v25 = *(_QWORD *)(a2 + 24);
      v26 = *(_QWORD *)(a2 + 32);
      v27 = *(_QWORD *)(a2 + 40);
      v28 = *(_QWORD *)(a2 + 48);
      v29 = *(_QWORD *)(a2 + 56);
      v30 = *(_QWORD *)(a2 + 64);
      v31 = *(_QWORD *)(a2 + 72);
      sub_898F4(v24, v25, v26, v27, v28, v29, v30, v31, v6);
      *(_QWORD *)(a1 + 16) = v24;
      *(_QWORD *)(a1 + 24) = v25;
      *(_QWORD *)(a1 + 32) = v26;
      *(_QWORD *)(a1 + 40) = v27;
      *(_QWORD *)(a1 + 48) = v28;
      *(_QWORD *)(a1 + 56) = v29;
      *(_QWORD *)(a1 + 64) = v30;
      *(_QWORD *)(a1 + 72) = v31;
      *(_BYTE *)(a1 + 80) = v6;
    }
  }
  else if (v6 == 255)
  {
    sub_89CA0(a1 + 16);
    *(_OWORD *)v4 = *(_OWORD *)v5;
    v33 = *(_OWORD *)(v5 + 32);
    v32 = *(_OWORD *)(v5 + 48);
    v34 = *(_OWORD *)(v5 + 16);
    *(_BYTE *)(v4 + 64) = *(_BYTE *)(v5 + 64);
    *(_OWORD *)(v4 + 32) = v33;
    *(_OWORD *)(v4 + 48) = v32;
    *(_OWORD *)(v4 + 16) = v34;
  }
  else
  {
    v7 = *(_QWORD *)(a2 + 16);
    v8 = *(_QWORD *)(a2 + 24);
    v9 = *(_QWORD *)(a2 + 32);
    v10 = *(_QWORD *)(a2 + 40);
    v11 = *(_QWORD *)(a2 + 48);
    v12 = *(_QWORD *)(a2 + 56);
    v13 = *(_QWORD *)(a2 + 64);
    v14 = *(_QWORD *)(a2 + 72);
    sub_898F4(v7, v8, v9, v10, v11, v12, v13, v14, v6);
    v15 = *(_QWORD *)(a1 + 16);
    v16 = *(_QWORD *)(a1 + 24);
    v17 = *(_QWORD *)(a1 + 32);
    v18 = *(_QWORD *)(a1 + 40);
    v19 = *(_QWORD *)(a1 + 48);
    v20 = *(_QWORD *)(a1 + 56);
    v21 = *(_QWORD *)(a1 + 64);
    v22 = *(_QWORD *)(a1 + 72);
    v23 = *(_BYTE *)(a1 + 80);
    *(_QWORD *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 24) = v8;
    *(_QWORD *)(a1 + 32) = v9;
    *(_QWORD *)(a1 + 40) = v10;
    *(_QWORD *)(a1 + 48) = v11;
    *(_QWORD *)(a1 + 56) = v12;
    *(_QWORD *)(a1 + 64) = v13;
    *(_QWORD *)(a1 + 72) = v14;
    *(_BYTE *)(a1 + 80) = v6;
    sub_87198(v15, v16, v17, v18, v19, v20, v21, v22, v23);
  }
  return a1;
}

uint64_t sub_89CA0(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for EpisodeListType - 1) + 8))();
  return a1;
}

__n128 __swift_memcpy81_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for ShowLockupStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  *(_DWORD *)(a1 + 3) = *(_DWORD *)(a2 + 3);
  *(_WORD *)(a1 + 7) = *(_WORD *)(a2 + 7);
  *(_DWORD *)(a1 + 9) = *(_DWORD *)(a2 + 9);
  *(_WORD *)(a1 + 13) = *(_WORD *)(a2 + 13);
  v3 = a1 + 16;
  v4 = a2 + 16;
  v5 = *(unsigned __int8 *)(a1 + 80);
  if (v5 == 255)
    goto LABEL_5;
  v6 = *(unsigned __int8 *)(a2 + 80);
  if (v6 == 255)
  {
    sub_89CA0(a1 + 16);
LABEL_5:
    v17 = *(_OWORD *)(v4 + 48);
    *(_OWORD *)(v3 + 32) = *(_OWORD *)(v4 + 32);
    *(_OWORD *)(v3 + 48) = v17;
    *(_BYTE *)(v3 + 64) = *(_BYTE *)(v4 + 64);
    v18 = *(_OWORD *)(v4 + 16);
    *(_OWORD *)v3 = *(_OWORD *)v4;
    *(_OWORD *)(v3 + 16) = v18;
    return a1;
  }
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 56);
  v13 = *(_QWORD *)(a1 + 64);
  v14 = *(_QWORD *)(a1 + 72);
  v15 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v15;
  v16 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v16;
  *(_BYTE *)(a1 + 80) = v6;
  sub_87198(v7, v8, v9, v10, v11, v12, v13, v14, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for ShowLockupStyle(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[81])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ShowLockupStyle(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 80) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 81) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 81) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for ShowLockupStyle()
{
  return &type metadata for ShowLockupStyle;
}

uint64_t __swift_memcpy6_1(uint64_t result, int *a2)
{
  int v2;

  v2 = *a2;
  *(_WORD *)(result + 4) = *((_WORD *)a2 + 2);
  *(_DWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for ShowLockupStyle.LockupStyleOptions(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xF1 && a1[6])
    return (*(_DWORD *)a1 + 241);
  v3 = *a1;
  v4 = v3 >= 0x10;
  v5 = v3 - 16;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ShowLockupStyle.LockupStyleOptions(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF0)
  {
    *(_WORD *)(result + 4) = 0;
    *(_DWORD *)result = a2 - 241;
    if (a3 >= 0xF1)
      *(_BYTE *)(result + 6) = 1;
  }
  else
  {
    if (a3 >= 0xF1)
      *(_BYTE *)(result + 6) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 15;
  }
  return result;
}

ValueMetadata *type metadata accessor for ShowLockupStyle.LockupStyleOptions()
{
  return &type metadata for ShowLockupStyle.LockupStyleOptions;
}

ValueMetadata *type metadata accessor for StationListOptions()
{
  return &type metadata for StationListOptions;
}

uint64_t dispatch thunk of ReviewControllerProtocol.fetchExistingReview(forAdamId:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 8))();
}

uint64_t dispatch thunk of ReviewControllerProtocol.saveReview(forAdamId:review:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 16))();
}

uint64_t sub_89F58(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  if (a9 != 255)
    return sub_898F4(result, a2, a3, a4, a5, a6, a7, a8, a9);
  return result;
}

uint64_t sub_89F70(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;

  v2 = *(_QWORD *)(a1 + 72);
  v3 = *(_QWORD *)(a1 + 80);
  v4 = *(_QWORD *)(a1 + 88);
  v5 = *(_QWORD *)(a1 + 96);
  v6 = *(_QWORD *)(a1 + 104);
  v7 = *(_QWORD *)(a1 + 112);
  v8 = *(_QWORD *)(a1 + 120);
  v9 = *(_QWORD *)(a1 + 128);
  v10 = *(_BYTE *)(a1 + 136);
  sub_87180(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_BYTE *)(a1 + 64));
  sub_87180(v2, v3, v4, v5, v6, v7, v8, v9, v10);
  return a1;
}

uint64_t LoadingPagePresenter.__allocating_init(asPartOf:pageURL:isIncomingURL:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v7;

  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  v7 = sub_8A36C(a1, a2, a3);
  swift_release(a1);
  return v7;
}

uint64_t LoadingPagePresenter.init(asPartOf:pageURL:isIncomingURL:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4;

  v4 = sub_8A36C(a1, a2, a3);
  swift_release(a1);
  return v4;
}

Swift::Void __swiftcall LoadingPagePresenter.update(ignoringCache:)(Swift::Bool ignoringCache)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD v8[5];

  v2 = v1;
  if ((HomePageProvider.episodeOrderingFrozen.getter() & 1) == 0)
  {
    sub_D28C(1);
    v3 = v1[15];
    v4 = v1[16];
    __swift_project_boxed_opaque_existential_1(v1 + 12, v3);
    v5 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v4 + 16))((uint64_t)v1 + qword_3B5070, *((unsigned __int8 *)v1 + qword_3B5078), v3, v4);
    v6 = sub_676C8();
    v7 = swift_retain_n(v2, 2);
    v8[3] = v6;
    v8[4] = &protocol witness table for OS_dispatch_queue;
    v8[0] = static OS_dispatch_queue.main.getter(v7);
    Promise.then(perform:orCatchError:on:)(sub_8A444, v2, sub_8A44C, v2, v8);
    swift_release(v5);
    swift_release_n(v2, 2);
    __swift_destroy_boxed_opaque_existential_1(v8);
  }
}

uint64_t sub_8A190(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _OWORD v7[2];

  v3 = *a2;
  v4 = FlowTransitionSource.view.getter();
  if (v4)
  {
    v5 = v4;
    memset(v7, 0, sizeof(v7));
    (*(void (**)(uint64_t, _OWORD *, _QWORD))(*(_QWORD *)(*(_QWORD *)(v3 + 296) + 8) + 16))(a1, v7, *(_QWORD *)(v3 + 288));
    swift_unknownObjectRelease(v5);
    sub_298FC((uint64_t)v7);
  }
  return sub_D28C(0);
}

uint64_t sub_8A210(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *a2;
  sub_D28C(0);
  result = FlowTransitionSource.view.getter();
  if (result)
  {
    v5 = result;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 296) + 8) + 8) + 24))(a1, *(_QWORD *)(v3 + 288));
    return swift_unknownObjectRelease(v5);
  }
  return result;
}

void LoadingPagePresenter.__allocating_init()()
{
  _swift_stdlib_reportUnimplementedInitializer("ShelfKit.LoadingPagePresenter", 29, "init()", 6, 0);
  __break(1u);
}

void LoadingPagePresenter.init()()
{
  LoadingPagePresenter.__allocating_init()();
}

uint64_t sub_8A2B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  __swift_destroy_boxed_opaque_existential_1((_QWORD *)(v0 + 96));
  v1 = v0 + qword_3B5070;
  v2 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
}

uint64_t LoadingPagePresenter.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = BasePresenter.deinit();
  __swift_destroy_boxed_opaque_existential_1((_QWORD *)(v0 + 96));
  v1 = v0 + qword_3B5070;
  v2 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t LoadingPagePresenter.__deallocating_deinit()
{
  uint64_t v0;

  v0 = LoadingPagePresenter.deinit();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_8A36C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13[2];

  v4 = v3;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BE9F0);
  swift_retain(v3);
  BaseObjectGraph.inject<A>(_:)(v13, v7, v7);
  sub_F4D8(v13, v3 + 96);
  v8 = v3 + qword_3B5070;
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v8, a2, v9);
  *(_BYTE *)(v4 + qword_3B5078) = a3;
  swift_release(v4);
  v11 = BasePresenter.init()();
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a2, v9);
  return v11;
}

uint64_t sub_8A444(uint64_t a1)
{
  uint64_t *v1;

  return sub_8A190(a1, v1);
}

uint64_t sub_8A44C(uint64_t a1)
{
  uint64_t *v1;

  return sub_8A210(a1, v1);
}

uint64_t sub_8A454(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = "(";
  result = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = &unk_2F0100;
    result = swift_initClassMetadata2(a1, 0, 3, v4, a1 + 304);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for LoadingPagePresenter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LoadingPagePresenter);
}

uint64_t method lookup function for LoadingPagePresenter(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for LoadingPagePresenter);
}

uint64_t dispatch thunk of LoadingPagePresenter.__allocating_init(asPartOf:pageURL:isIncomingURL:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 328))();
}

unint64_t static FindShowEpisodesIntent.kind.getter()
{
  return 0xD000000000000016;
}

id FindShowEpisodesIntent.showIdentifier.getter()
{
  uint64_t v0;
  id v1;

  v1 = *(id *)v0;
  sub_8A554(*(id *)v0, *(id *)(v0 + 8), *(_BYTE *)(v0 + 16));
  return v1;
}

id sub_8A554(id result, id a2, char a3)
{
  if (a3 == 2)
    return result;
  if (a3 == 1)
    return (id)swift_bridgeObjectRetain(a2);
  return result;
}

void *FindShowEpisodesIntent.predicate.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 24);
  v2 = v1;
  return v1;
}

uint64_t FindShowEpisodesIntent.sortDescriptors.getter()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 48));
}

uint64_t FindShowEpisodesIntent.init(showIdentifier:predicate:limit:sortDescriptors:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  *(_QWORD *)a8 = result;
  *(_QWORD *)(a8 + 8) = a2;
  *(_BYTE *)(a8 + 16) = a3;
  *(_QWORD *)(a8 + 24) = a4;
  *(_QWORD *)(a8 + 32) = a5;
  *(_BYTE *)(a8 + 40) = a6 & 1;
  *(_QWORD *)(a8 + 48) = a7;
  return result;
}

void sub_8A5C0(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000016;
  a1[1] = 0x80000000002F0100;
}

uint64_t destroy for FindShowEpisodesIntent(uint64_t a1)
{
  sub_8A618(*(void **)a1, *(id *)(a1 + 8), *(_BYTE *)(a1 + 16));

  return swift_bridgeObjectRelease();
}

void sub_8A618(void *a1, id a2, char a3)
{
  if (a3 == 2)
  {

  }
  else if (a3 == 1)
  {
    swift_bridgeObjectRelease(a2);
  }
}

uint64_t initializeWithCopy for FindShowEpisodesIntent(uint64_t a1, uint64_t a2)
{
  id v4;
  void *v5;
  char v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;

  v4 = *(id *)a2;
  v5 = *(void **)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  sub_8A554(*(id *)a2, v5, v6);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  v7 = *(void **)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v9;
  v10 = v7;
  swift_bridgeObjectRetain(v9);
  return a1;
}

uint64_t assignWithCopy for FindShowEpisodesIntent(uint64_t a1, uint64_t a2)
{
  id v4;
  void *v5;
  char v6;
  void *v7;
  void *v8;
  char v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *(id *)a2;
  v5 = *(void **)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  sub_8A554(*(id *)a2, v5, v6);
  v7 = *(void **)a1;
  v8 = *(void **)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  v9 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v6;
  sub_8A618(v7, v8, v9);
  v10 = *(void **)(a1 + 24);
  v11 = *(void **)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v11;
  v12 = v11;

  v13 = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v13;
  v14 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy56_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for FindShowEpisodesIntent(uint64_t a1, uint64_t a2)
{
  char v4;
  void *v5;
  void *v6;
  char v7;
  void *v8;

  v4 = *(_BYTE *)(a2 + 16);
  v5 = *(void **)a1;
  v6 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v7 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v4;
  sub_8A618(v5, v6, v7);
  v8 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);

  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for FindShowEpisodesIntent(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 56))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for FindShowEpisodesIntent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 56) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for FindShowEpisodesIntent()
{
  return &type metadata for FindShowEpisodesIntent;
}

uint64_t Date.yearString.getter()
{
  Class isa;
  id v1;
  uint64_t v2;

  isa = Date._bridgeToObjectiveC()().super.isa;
  v1 = -[objc_class yearString](isa, "yearString");

  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  return v2;
}

uint64_t Date.yearNumeric.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;

  v1 = type metadata accessor for Calendar.Component(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Calendar(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Calendar.current.getter(v7);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for Calendar.Component.year(_:), v1);
  v10 = Calendar.component(_:from:)(v4, v0);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  return v10;
}

ShelfKit::CategoryListPresenter::Configuration __swiftcall CategoryListPresenter.Configuration.init(showPageHeader:)(ShelfKit::CategoryListPresenter::Configuration showPageHeader)
{
  ShelfKit::CategoryListPresenter::Configuration *v1;

  v1->showPageHeader = showPageHeader.showPageHeader;
  return showPageHeader;
}

uint64_t ChannelListPresenter.__allocating_init(asPartOf:with:)(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = swift_allocObject(v2, 32, 7);
  ChannelListPresenter.init(asPartOf:with:)(a1, a2);
  return v5;
}

uint64_t ChannelListPresenter.init(asPartOf:with:)(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v15;
  int v16;
  char v17;
  Swift::String v18;

  v3 = v2;
  v5 = *a2;
  v15._countAndFlagsBits = 0;
  v15._object = 0;
  v16 = 0;
  v17 = 5;
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8770);
  swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  *(_QWORD *)(v2 + 24) = CurrentValueSubject.init(_:)(&v15);
  v7 = type metadata accessor for ChannelListProvider();
  swift_allocObject(v7, 96, 7);
  v8 = swift_retain(a1);
  v9 = sub_24E75C(v8);
  swift_release(a1);
  *(_QWORD *)(v3 + 16) = v9;
  if (v5 == 1)
  {
    v10 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v18._object = (void *)0xE000000000000000;
    v11._countAndFlagsBits = 0x48435F454C544954;
    v11._object = (void *)0xEE00534C454E4E41;
    v12._countAndFlagsBits = 0;
    v12._object = (void *)0xE000000000000000;
    v18._countAndFlagsBits = 0;
    v13 = NSLocalizedString(_:tableName:bundle:value:comment:)(v11, (Swift::String_optional)0, (NSBundle)v10, v12, v18);

    v15 = v13;
    v16 = 0;
    v17 = 3;
    CurrentValueSubject.value.setter(&v15);
  }
  swift_release(a1);
  return v3;
}

uint64_t HttpTemplateSubstitutions.successAction.getter()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + 24));
}

uint64_t ChannelListPresenter.pageContent.getter()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(*(_QWORD *)(v0 + 16) + 72));
}

Swift::Void __swiftcall ChannelListPresenter.viewDidLoad()()
{
  ChannelListProvider.loadPageContent()();
}

uint64_t ChannelListPresenter.interactionContextPage.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = type metadata accessor for InteractionContext.Page(0);
  return swift_storeEnumTagMultiPayload(a1, v2, 8);
}

uint64_t sub_8AC14(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v4;
  unsigned __int8 v6;

  v6 = *a2;
  v4 = swift_allocObject(v2, 32, 7);
  ChannelListPresenter.init(asPartOf:with:)(a1, &v6);
  return v4;
}

uint64_t ChannelListPresenter.paginatedPublisher.getter()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + 16);
  swift_beginAccess(v1 + 80, v3, 0, 0);
  return swift_retain(*(_QWORD *)(v1 + 80));
}

uint64_t sub_8ACA4@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = *(_QWORD *)(v1 + 16);
  swift_beginAccess(v3 + 80, v6, 0, 0);
  v4 = *(_QWORD *)(v3 + 80);
  *a1 = v4;
  return swift_retain(v4);
}

uint64_t sub_8ACEC(uint64_t a1)
{
  uint64_t result;

  result = sub_8AD64(&qword_3B51C0, (uint64_t)&protocol conformance descriptor for ChannelListPresenter);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for ChannelListPresenter()
{
  return objc_opt_self(_TtC8ShelfKit20ChannelListPresenter);
}

uint64_t sub_8AD40()
{
  return sub_8AD64(&qword_3B51C8, (uint64_t)&protocol conformance descriptor for ChannelListPresenter);
}

uint64_t sub_8AD64(unint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  if (!result)
  {
    type metadata accessor for ChannelListPresenter();
    result = swift_getWitnessTable(a2);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_8ADA4()
{
  unint64_t result;

  result = qword_3B25F8;
  if (!qword_3B25F8)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_3B2600);
    result = swift_getWitnessTable(&protocol conformance descriptor for AnyPaginatedPublisher<A, B>);
    atomic_store(result, (unint64_t *)&qword_3B25F8);
  }
  return result;
}

uint64_t method lookup function for ChannelListPresenter(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for ChannelListPresenter);
}

uint64_t getEnumTagSinglePayload for ChannelListPresenter.Configuration(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ChannelListPresenter.Configuration(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_8AEE8 + 4 * byte_2F01B5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_8AF1C + 4 * byte_2F01B0[v4]))();
}

uint64_t sub_8AF1C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_8AF24(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x8AF2CLL);
  return result;
}

uint64_t sub_8AF38(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x8AF40);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_8AF44(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_8AF4C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ChannelListPresenter.Configuration()
{
  return &type metadata for ChannelListPresenter.Configuration;
}

unint64_t static SharedWithYouShelfIntent.kind.getter()
{
  return 0xD000000000000018;
}

uint64_t TabMenu.Section.items.getter()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 8));
}

uint64_t static HighlightsPageIntent.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if ((sub_12FE8(*(_QWORD **)a1, *(_QWORD **)a2) & 1) != 0)
    return sub_130AC(v2, v3);
  else
    return 0;
}

void sub_8AFD4(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000018;
  a1[1] = 0x80000000002F02F0;
}

uint64_t sub_8AFF4(char *a1, char *a2)
{
  return sub_1E363C(*a1, *a2);
}

Swift::Int sub_8B000()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  if (v1)
    v2 = 0x656372756F736572;
  else
    v2 = 0x6867696C68676968;
  if (v1)
    v3 = 0xEC000000736C7255;
  else
    v3 = 0xEC00000073644974;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_8B090(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0x656372756F736572;
  else
    v2 = 0x6867696C68676968;
  if (*v1)
    v3 = 0xEC000000736C7255;
  else
    v3 = 0xEC00000073644974;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_8B0FC()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  if (v1)
    v2 = 0x656372756F736572;
  else
    v2 = 0x6867696C68676968;
  if (v1)
    v3 = 0xEC000000736C7255;
  else
    v3 = 0xEC00000073644974;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_8B188@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;
  char v7;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_3737B8, v3);
  result = swift_bridgeObjectRelease(v4);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

void sub_8B1E4(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x6867696C68676968;
  if (*v1)
    v2 = 0x656372756F736572;
  v3 = 0xEC00000073644974;
  if (*v1)
    v3 = 0xEC000000736C7255;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_8B234()
{
  _BYTE *v0;

  if (*v0)
    return 0x656372756F736572;
  else
    return 0x6867696C68676968;
}

uint64_t sub_8B280@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  void *object;
  Swift::String v3;
  Swift::Int v5;
  uint64_t result;
  char v7;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_3737B8, v3);
  result = swift_bridgeObjectRelease(object);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

uint64_t sub_8B2E0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_8B4CC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_8B308(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_8B4CC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t SharedWithYouShelfIntent.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  char v14;
  uint64_t v15;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B52A0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v13 = v1[1];
  v9 = a1[3];
  v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  v11 = sub_8B4CC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SharedWithYouShelfIntent.CodingKeys, &type metadata for SharedWithYouShelfIntent.CodingKeys, v11, v9, v10);
  v15 = v8;
  v14 = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3BC430);
  sub_8B71C(&qword_3B52B0, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v15);
  if (!v2)
  {
    v15 = v13;
    v14 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_3B52B8);
    sub_8B77C(&qword_3B52C0, &qword_3B52C8, (uint64_t)&protocol conformance descriptor for URL, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v15);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_8B4CC()
{
  unint64_t result;

  result = qword_3B52A8;
  if (!qword_3B52A8)
  {
    result = swift_getWitnessTable(&unk_2F05A0);
    atomic_store(result, (unint64_t *)&qword_3B52A8);
  }
  return result;
}

uint64_t SharedWithYouShelfIntent.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  char v18;
  uint64_t v19;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B52D0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  v11 = sub_8B4CC();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SharedWithYouShelfIntent.CodingKeys, &type metadata for SharedWithYouShelfIntent.CodingKeys, v11, v9, v10);
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1(a1);
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3BC430);
  v18 = 0;
  sub_8B71C(&qword_3B52D8, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v19, v12);
  v13 = v19;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B52B8);
  v18 = 1;
  sub_8B77C(&qword_3B52E0, &qword_3B52E8, (uint64_t)&protocol conformance descriptor for URL, (uint64_t)&protocol conformance descriptor for <A> [A]);
  swift_bridgeObjectRetain(v13);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v19, v14);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v15 = v19;
  *a2 = v13;
  a2[1] = v15;
  swift_bridgeObjectRetain(v15);
  __swift_destroy_boxed_opaque_existential_1(a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_8B71C(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_3BC430);
    result = swift_getWitnessTable(a3);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_8B77C(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_3B52B8);
    sub_F1C0(a2, (void (*)(uint64_t))&type metadata accessor for URL, a3);
    result = swift_getWitnessTable(a4);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_8B804()
{
  unint64_t result;

  result = qword_3B52F0;
  if (!qword_3B52F0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SharedWithYouShelfIntent);
    atomic_store(result, (unint64_t *)&qword_3B52F0);
  }
  return result;
}

unint64_t sub_8B84C()
{
  unint64_t result;

  result = qword_3B52F8;
  if (!qword_3B52F8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SharedWithYouShelfIntent);
    atomic_store(result, (unint64_t *)&qword_3B52F8);
  }
  return result;
}

uint64_t sub_8B890()
{
  return sub_F1C0((unint64_t *)&qword_3B0AE0, (void (*)(uint64_t))type metadata accessor for Shelf, (uint64_t)&protocol conformance descriptor for Shelf);
}

uint64_t sub_8B8BC@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return SharedWithYouShelfIntent.init(from:)(a1, a2);
}

uint64_t sub_8B8D0(_QWORD *a1)
{
  return SharedWithYouShelfIntent.encode(to:)(a1);
}

uint64_t sub_8B8E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_8BC84();
  return CustomJSValueConvertible<>.jsRepresentation(in:)(a1, a2, a3, v6);
}

uint64_t sub_8B940@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  return sub_44680(a1, a2, a3);
}

uint64_t destroy for RecommendationsMetadata.Categories(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  return swift_bridgeObjectRelease(a1[1]);
}

uint64_t *_s8ShelfKit23RecommendationsMetadataV10CategoriesVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t *assignWithCopy for SharedWithYouShelfIntent(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

_QWORD *assignWithTake for SharedWithYouShelfIntent(_QWORD *a1, _OWORD *a2)
{
  uint64_t v4;

  swift_bridgeObjectRelease(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for SharedWithYouShelfIntent(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SharedWithYouShelfIntent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SharedWithYouShelfIntent()
{
  return &type metadata for SharedWithYouShelfIntent;
}

uint64_t storeEnumTagSinglePayload for SharedWithYouShelfIntent.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_8BB2C + 4 * byte_2F0305[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_8BB60 + 4 * asc_2F0300[v4]))();
}

uint64_t sub_8BB60(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_8BB68(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x8BB70);
  return result;
}

uint64_t sub_8BB7C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x8BB84);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_8BB88(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_8BB90(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SharedWithYouShelfIntent.CodingKeys()
{
  return &type metadata for SharedWithYouShelfIntent.CodingKeys;
}

unint64_t sub_8BBB0()
{
  unint64_t result;

  result = qword_3B5300;
  if (!qword_3B5300)
  {
    result = swift_getWitnessTable(&unk_2F0578);
    atomic_store(result, (unint64_t *)&qword_3B5300);
  }
  return result;
}

unint64_t sub_8BBF8()
{
  unint64_t result;

  result = qword_3B5308;
  if (!qword_3B5308)
  {
    result = swift_getWitnessTable(&unk_2F04B0);
    atomic_store(result, (unint64_t *)&qword_3B5308);
  }
  return result;
}

unint64_t sub_8BC40()
{
  unint64_t result;

  result = qword_3B5310;
  if (!qword_3B5310)
  {
    result = swift_getWitnessTable(&unk_2F04D8);
    atomic_store(result, (unint64_t *)&qword_3B5310);
  }
  return result;
}

unint64_t sub_8BC84()
{
  unint64_t result;

  result = qword_3B5318;
  if (!qword_3B5318)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SharedWithYouShelfIntent);
    atomic_store(result, (unint64_t *)&qword_3B5318);
  }
  return result;
}

unint64_t static EpisodeUpsellShelfIntent.kind.getter()
{
  return 0xD000000000000018;
}

void sub_8BCE4(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000018;
  a1[1] = 0x80000000002F05E0;
}

uint64_t sub_8BD04@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_373808, v3);
  result = swift_bridgeObjectRelease(v4);
  *a2 = v5 != 0;
  return result;
}

uint64_t sub_8BD54@<X0>(Swift::String string@<0:X0, 8:X1>, BOOL *a2@<X8>)
{
  void *object;
  Swift::String v3;
  Swift::Int v5;
  uint64_t result;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_373840, v3);
  result = swift_bridgeObjectRelease(object);
  *a2 = v5 != 0;
  return result;
}

uint64_t sub_8BDA8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_8BEF4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_8BDD0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_8BEF4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t EpisodeUpsellShelfIntent.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B5320);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = a1[3];
  v9 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v8);
  v10 = sub_8BEF4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for EpisodeUpsellShelfIntent.CodingKeys, &type metadata for EpisodeUpsellShelfIntent.CodingKeys, v10, v8, v9);
  v13 = v7;
  sub_13E9C();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v13);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_8BEF4()
{
  unint64_t result;

  result = qword_3B5328;
  if (!qword_3B5328)
  {
    result = swift_getWitnessTable(&unk_2F088C);
    atomic_store(result, (unint64_t *)&qword_3B5328);
  }
  return result;
}

uint64_t EpisodeUpsellShelfIntent.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B5330);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  v11 = sub_8BEF4();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for EpisodeUpsellShelfIntent.CodingKeys, &type metadata for EpisodeUpsellShelfIntent.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    sub_14088();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v14, &type metadata for AdamID);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v14;
  }
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

unint64_t sub_8C058()
{
  unint64_t result;

  result = qword_3B5338;
  if (!qword_3B5338)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for EpisodeUpsellShelfIntent);
    atomic_store(result, (unint64_t *)&qword_3B5338);
  }
  return result;
}

unint64_t sub_8C0A0()
{
  unint64_t result;

  result = qword_3B5340;
  if (!qword_3B5340)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for EpisodeUpsellShelfIntent);
    atomic_store(result, (unint64_t *)&qword_3B5340);
  }
  return result;
}

unint64_t sub_8C0E8()
{
  unint64_t result;

  result = qword_3B0AE0;
  if (!qword_3B0AE0)
  {
    type metadata accessor for Shelf(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for Shelf);
    atomic_store(result, (unint64_t *)&qword_3B0AE0);
  }
  return result;
}

uint64_t sub_8C130@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return EpisodeUpsellShelfIntent.init(from:)(a1, a2);
}

uint64_t sub_8C144(_QWORD *a1)
{
  return EpisodeUpsellShelfIntent.encode(to:)(a1);
}

uint64_t sub_8C158(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_8C34C();
  return CustomJSValueConvertible<>.jsRepresentation(in:)(a1, a2, a3, v6);
}

uint64_t sub_8C1B4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return sub_4465C(a1, a2, a3);
}

ValueMetadata *type metadata accessor for EpisodeUpsellShelfIntent()
{
  return &type metadata for EpisodeUpsellShelfIntent;
}

uint64_t storeEnumTagSinglePayload for EpisodeUpsellShelfIntent.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_8C218 + 4 * byte_2F05F0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_8C238 + 4 * byte_2F05F5[v4]))();
}

_BYTE *sub_8C218(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_8C238(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_8C240(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_8C248(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_8C250(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_8C258(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for EpisodeUpsellShelfIntent.CodingKeys()
{
  return &type metadata for EpisodeUpsellShelfIntent.CodingKeys;
}

unint64_t sub_8C278()
{
  unint64_t result;

  result = qword_3B5348;
  if (!qword_3B5348)
  {
    result = swift_getWitnessTable(&unk_2F0864);
    atomic_store(result, (unint64_t *)&qword_3B5348);
  }
  return result;
}

unint64_t sub_8C2C0()
{
  unint64_t result;

  result = qword_3B5350;
  if (!qword_3B5350)
  {
    result = swift_getWitnessTable(&unk_2F079C);
    atomic_store(result, (unint64_t *)&qword_3B5350);
  }
  return result;
}

unint64_t sub_8C308()
{
  unint64_t result;

  result = qword_3B5358;
  if (!qword_3B5358)
  {
    result = swift_getWitnessTable(&unk_2F07C4);
    atomic_store(result, (unint64_t *)&qword_3B5358);
  }
  return result;
}

unint64_t sub_8C34C()
{
  unint64_t result;

  result = qword_3B5360;
  if (!qword_3B5360)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for EpisodeUpsellShelfIntent);
    atomic_store(result, (unint64_t *)&qword_3B5360);
  }
  return result;
}

uint64_t sub_8C390()
{
  return PageSize.init(width:additionalTextMargin:)(400.0, 0.0);
}

uint64_t sub_8C3A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  v8 = sub_F1C0(&qword_3B5420, (void (*)(uint64_t))&type metadata accessor for PageSize, (uint64_t)&protocol conformance descriptor for PageSize);
  return static EnvironmentKey<>._valuesEqual(_:_:)(a1, a2, a3, a4, v8);
}

uint64_t EnvironmentValues.pageSize.getter()
{
  unint64_t v0;

  v0 = sub_8C43C();
  return EnvironmentValues.subscript.getter(&type metadata for PageSizeEnvironmentKey, &type metadata for PageSizeEnvironmentKey, v0);
}

unint64_t sub_8C43C()
{
  unint64_t result;

  result = qword_3B5368;
  if (!qword_3B5368)
  {
    result = swift_getWitnessTable(&unk_2F0998);
    atomic_store(result, (unint64_t *)&qword_3B5368);
  }
  return result;
}

uint64_t sub_8C480()
{
  unint64_t v0;

  v0 = sub_8C43C();
  return EnvironmentValues.subscript.getter(&type metadata for PageSizeEnvironmentKey, &type metadata for PageSizeEnvironmentKey, v0);
}

uint64_t sub_8C4BC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  void (*v9)(char *, uint64_t, uint64_t);
  unint64_t v10;
  uint64_t v12;

  v2 = type metadata accessor for PageSize(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v12 - v7;
  v9 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v9((char *)&v12 - v7, a1, v2);
  v9(v6, (uint64_t)v8, v2);
  v10 = sub_8C43C();
  EnvironmentValues.subscript.setter(v6, &type metadata for PageSizeEnvironmentKey, &type metadata for PageSizeEnvironmentKey, v10);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v8, v2);
}

uint64_t EnvironmentValues.pageSize.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  uint64_t v8;

  v2 = type metadata accessor for PageSize(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  v6 = sub_8C43C();
  EnvironmentValues.subscript.setter(v5, &type metadata for PageSizeEnvironmentKey, &type metadata for PageSizeEnvironmentKey, v6);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

void (*EnvironmentValues.pageSize.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  unint64_t v7;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = type metadata accessor for PageSize(0);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  v7 = sub_8C43C();
  v3[6] = v7;
  EnvironmentValues.subscript.getter(&type metadata for PageSizeEnvironmentKey, &type metadata for PageSizeEnvironmentKey, v7);
  return sub_8C6E8;
}

void sub_8C6E8(uint64_t a1, char a2)
{
  _QWORD *v3;
  void (*v4)(_QWORD, _QWORD, _QWORD);
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void *, uint64_t);

  v3 = *(_QWORD **)a1;
  v4 = *(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)a1 + 16) + 16);
  v4(*(_QWORD *)(*(_QWORD *)a1 + 32), v3[5], v3[1]);
  v5 = (void *)v3[5];
  v6 = v3[6];
  v7 = (void *)v3[3];
  v8 = (void *)v3[4];
  v9 = v3[1];
  v10 = v3[2];
  if ((a2 & 1) != 0)
  {
    v4(v3[3], v3[4], v3[1]);
    EnvironmentValues.subscript.setter(v7, &type metadata for PageSizeEnvironmentKey, &type metadata for PageSizeEnvironmentKey, v6);
    v11 = *(void (**)(void *, uint64_t))(v10 + 8);
    v11(v8, v9);
  }
  else
  {
    EnvironmentValues.subscript.setter(v3[4], &type metadata for PageSizeEnvironmentKey, &type metadata for PageSizeEnvironmentKey, v3[6]);
    v11 = *(void (**)(void *, uint64_t))(v10 + 8);
  }
  v11(v5, v9);
  free(v5);
  free(v8);
  free(v7);
  free(v3);
}

uint64_t View.setPageSizeEnvironment(additionalTextMargin:)(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[3];

  v19 = a2;
  v5 = type metadata accessor for PageSize(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v18 - v10;
  v12 = type metadata accessor for PageSizeEnvironmentSetter(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(double *)v14 = a3;
  v20[0] = 0x4079000000000000;
  State.init(wrappedValue:)(v20, &type metadata for CGFloat);
  v15 = v20[2];
  *((_QWORD *)v14 + 1) = v20[1];
  *((_QWORD *)v14 + 2) = v15;
  PageSize.init(width:additionalTextMargin:)(400.0, 0.0);
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v11, v5);
  v16 = State.init(wrappedValue:)(v9, v5);
  (*(void (**)(char *, uint64_t, __n128))(v6 + 8))(v11, v5, v16);
  View.modifier<A>(_:)(v14, a1, v12, v19);
  return sub_8C988((uint64_t)v14);
}

uint64_t type metadata accessor for PageSizeEnvironmentSetter(uint64_t a1)
{
  uint64_t result;

  result = qword_3B53D8;
  if (!qword_3B53D8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PageSizeEnvironmentSetter);
  return result;
}

uint64_t sub_8C988(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for PageSizeEnvironmentSetter(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_8C9C4()
{
  unint64_t v0;

  v0 = sub_8C43C();
  return EnvironmentValues.subscript.getter(&type metadata for PageSizeEnvironmentKey, &type metadata for PageSizeEnvironmentKey, v0);
}

uint64_t sub_8CA04(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = type metadata accessor for PageSizeEnvironmentSetter(255);
  type metadata accessor for ModifiedContent(255, v1, v2);
  sub_F1C0(&qword_3B5370, (void (*)(uint64_t))type metadata accessor for PageSizeEnvironmentSetter, (uint64_t)&unk_2F0948);
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>);
}

uint64_t *sub_8CA84(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  uint64_t v12;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v12 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v12 + ((v4 + 16) & ~(unint64_t)v4));
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v5 = a2[2];
    a1[2] = v5;
    v6 = *(int *)(a3 + 24);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for PageSize(0);
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_retain(v5);
    v10(v7, v8, v9);
    v11 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B5378) + 28);
    v12 = *(_QWORD *)&v8[v11];
    *(_QWORD *)&v7[v11] = v12;
  }
  swift_retain(v12);
  return v3;
}

uint64_t sub_8CB40(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_release(*(_QWORD *)(a1 + 16));
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for PageSize(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = *(_QWORD *)(v4 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B5378) + 28));
  return swift_release(v6);
}

uint64_t sub_8CBA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  v5 = *(int *)(a3 + 24);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = type metadata accessor for PageSize(0);
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_retain(v4);
  v9(v6, v7, v8);
  v10 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B5378) + 28);
  v11 = *(_QWORD *)(v7 + v10);
  *(_QWORD *)(v6 + v10) = v11;
  swift_retain(v11);
  return a1;
}

_QWORD *sub_8CC34(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *a1 = *a2;
  a1[1] = a2[1];
  v6 = a1[2];
  v7 = a2[2];
  a1[2] = v7;
  swift_retain(v7);
  swift_release(v6);
  v8 = *(int *)(a3 + 24);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for PageSize(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  v12 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B5378) + 28);
  v13 = *(_QWORD *)&v9[v12];
  v14 = *(_QWORD *)&v10[v12];
  *(_QWORD *)&v9[v12] = v14;
  swift_retain(v14);
  swift_release(v13);
  return a1;
}

uint64_t sub_8CCE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for PageSize(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B5378);
  *(_QWORD *)(v5 + *(int *)(v8 + 28)) = *(_QWORD *)(v6 + *(int *)(v8 + 28));
  return a1;
}

uint64_t sub_8CD5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release(v6);
  v7 = *(int *)(a3 + 24);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for PageSize(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B5378) + 28);
  v12 = *(_QWORD *)(v8 + v11);
  *(_QWORD *)(v8 + v11) = *(_QWORD *)(v9 + v11);
  swift_release(v12);
  return a1;
}

uint64_t sub_8CDF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_8CDFC);
}

uint64_t sub_8CDFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  int v5;
  uint64_t v9;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B5378);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v9);
  }
}

uint64_t sub_8CE88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_8CE94);
}

uint64_t sub_8CE94(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)(result + 16) = a2;
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B5378);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

void sub_8CF0C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[1] = &unk_2F0910;
  sub_8CF8C(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
  }
}

void sub_8CF8C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_3B53E8)
  {
    v2 = type metadata accessor for PageSize(255);
    v3 = type metadata accessor for State(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_3B53E8);
  }
}

ValueMetadata *type metadata accessor for PageSizeEnvironmentKey()
{
  return &type metadata for PageSizeEnvironmentKey;
}

uint64_t sub_8CFF0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_33E964, 1);
}

uint64_t sub_8D000@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, _QWORD, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t@<X8>);
  void (*v27)(uint64_t@<X8>);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (**v32)(uint64_t@<X8>);
  uint64_t v33;
  uint64_t v34;
  uint64_t (**v35)(double *);
  uint64_t KeyPath;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v3 = v2;
  v51 = a1;
  v53 = a2;
  v4 = type metadata accessor for PageSize(0);
  v54 = *(_QWORD *)(v4 - 8);
  v55 = v4;
  __chkstk_darwin(v4);
  v52 = (uint64_t *)((char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v49 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B5428);
  __chkstk_darwin(v49);
  v7 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CoordinateSpace(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  v11 = __chkstk_darwin(v8);
  v12 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v14 = (char *)&v45 - v13;
  v50 = type metadata accessor for PageSizeEnvironmentSetter(0);
  v15 = *(_QWORD *)(v50 - 8);
  v16 = *(_QWORD *)(v15 + 64);
  __chkstk_darwin(v50);
  v17 = (char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B5430);
  __chkstk_darwin(v48);
  v47 = (uint64_t)&v45 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_8D550(v3, (uint64_t)v17);
  v19 = *(unsigned __int8 *)(v15 + 80);
  v20 = (v19 + 16) & ~v19;
  v21 = swift_allocObject(&unk_37D098, v20 + v16, v19 | 7);
  sub_8D638((uint64_t)v17, v21 + v20);
  v22 = *(void (**)(char *, _QWORD, uint64_t))(v9 + 104);
  v46 = v14;
  v22(v14, enum case for CoordinateSpace.local(_:), v8);
  v23 = swift_allocObject(&unk_37D0C0, 32, 7);
  *(_QWORD *)(v23 + 16) = sub_8D67C;
  *(_QWORD *)(v23 + 24) = v21;
  v24 = swift_retain(v21);
  v25 = static Alignment.center.getter(v24);
  v27 = v26;
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v14, v8);
  v28 = *(unsigned __int8 *)(v9 + 80);
  v29 = (v28 + 16) & ~v28;
  v30 = swift_allocObject(&unk_37D0E8, v29 + v10, v28 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v30 + v29, v12, v8);
  v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B5438);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v7, v51, v31);
  v32 = (void (**)(uint64_t@<X8>))&v7[*(int *)(v49 + 36)];
  *v32 = sub_8D74C;
  v32[1] = (void (*)(uint64_t@<X8>))v30;
  v32[2] = (void (*)(uint64_t@<X8>))v25;
  v32[3] = v27;
  v33 = swift_allocObject(&unk_37D110, 32, 7);
  *(_QWORD *)(v33 + 16) = sub_8D6E4;
  *(_QWORD *)(v33 + 24) = v23;
  v34 = v47;
  sub_267BC((uint64_t)v7, v47, &qword_3B5428);
  v35 = (uint64_t (**)(double *))(v34 + *(int *)(v48 + 36));
  *v35 = sub_8D798;
  v35[1] = (uint64_t (*)(double *))v33;
  sub_1459C((uint64_t)v7, &qword_3B5428);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v46, v8);
  swift_release(v21);
  KeyPath = swift_getKeyPath(&unk_2F09D0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_3B5378);
  v37 = v52;
  State.wrappedValue.getter(v52);
  v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B5440);
  v39 = v53;
  v40 = (uint64_t *)(v53 + *(int *)(v38 + 36));
  v41 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B5448);
  v43 = v54;
  v42 = v55;
  (*(void (**)(char *, _QWORD *, uint64_t))(v54 + 16))((char *)v40 + *(int *)(v41 + 28), v37, v55);
  *v40 = KeyPath;
  sub_267BC(v34, v39, &qword_3B5430);
  (*(void (**)(_QWORD *, uint64_t))(v43 + 8))(v37, v42);
  return sub_1459C(v34, &qword_3B5430);
}

_QWORD *sub_8D3E4(uint64_t a1, double a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *result;
  double v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;

  v4 = type metadata accessor for PageSize(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v18 - v9;
  v11 = *(_QWORD *)(a1 + 8);
  v12 = *(_QWORD *)(a1 + 16);
  v19 = v11;
  v20 = v12;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B5450);
  result = State.wrappedValue.getter(&v21);
  v15 = v21;
  if (v21 != a2)
  {
    v19 = v11;
    v20 = v12;
    v21 = a2;
    State.wrappedValue.setter(&v21, v13, v15);
    PageSize.init(width:additionalTextMargin:)(a2, *(double *)a1);
    type metadata accessor for PageSizeEnvironmentSetter(0);
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v8, v10, v4);
    v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B5378);
    State.wrappedValue.setter(v8, v16, v17);
    return (_QWORD *)(*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  }
  return result;
}

uint64_t sub_8D534()
{
  return static ViewModifier._viewListCount(inputs:body:)();
}

uint64_t sub_8D550(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PageSizeEnvironmentSetter(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_8D594()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = type metadata accessor for PageSizeEnvironmentSetter(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = v0 + v4;
  swift_release(*(_QWORD *)(v0 + v4 + 16));
  v8 = v7 + *(int *)(v1 + 24);
  v9 = type metadata accessor for PageSize(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B5378);
  swift_release(*(_QWORD *)(v8 + *(int *)(v10 + 28)));
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_8D638(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PageSizeEnvironmentSetter(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

_QWORD *sub_8D67C(double a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PageSizeEnvironmentSetter(0) - 8) + 80);
  return sub_8D3E4(v1 + ((v3 + 16) & ~v3), a1);
}

uint64_t sub_8D6C0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_8D6E4(double a1, double a2, double a3, double a4)
{
  uint64_t v4;

  return sub_152C8C(*(uint64_t (**)(double, double))(v4 + 16), a1, a2, a3, a4);
}

uint64_t sub_8D6EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for CoordinateSpace(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_8D74C(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for CoordinateSpace(0) - 8) + 80);
  sub_152F9C(v1 + ((v3 + 16) & ~v3), a1);
}

uint64_t sub_8D798(double *a1)
{
  uint64_t v1;

  return sub_152FE4(a1, *(uint64_t (**)(double, double, double, double))(v1 + 16));
}

unint64_t sub_8D7A4()
{
  unint64_t result;

  result = qword_3B5458;
  if (!qword_3B5458)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_3B5440);
    sub_8D828();
    sub_32914(&qword_3B5498, &qword_3B5448, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>);
    atomic_store(result, (unint64_t *)&qword_3B5458);
  }
  return result;
}

unint64_t sub_8D828()
{
  unint64_t result;

  result = qword_3B5460;
  if (!qword_3B5460)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_3B5430);
    sub_8D8AC();
    sub_32914(&qword_3B5488, &qword_3B5490, (uint64_t)&protocol conformance descriptor for _PreferenceActionModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>);
    atomic_store(result, (unint64_t *)&qword_3B5460);
  }
  return result;
}

unint64_t sub_8D8AC()
{
  unint64_t result;

  result = qword_3B5468;
  if (!qword_3B5468)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_3B5428);
    sub_32914(&qword_3B5470, &qword_3B5438, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    sub_32914(&qword_3B5478, &qword_3B5480, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>);
    atomic_store(result, (unint64_t *)&qword_3B5468);
  }
  return result;
}

uint64_t Review.isExpanded.getter()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 16, v2, 0, 0);
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t Review.isExpanded.setter(char a1)
{
  uint64_t v1;
  uint64_t result;
  _BYTE v4[24];

  result = swift_beginAccess(v1 + 16, v4, 1, 0);
  *(_BYTE *)(v1 + 16) = a1;
  return result;
}

uint64_t (*Showcase.shelfUniqueId.modify(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + 16, a1, 33, 0);
  return j__swift_endAccess;
}

BOOL Review.canToggleExpanded.getter()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 16, v2, 0, 0);
  return (*(_BYTE *)(v0 + 16) & 1) == 0;
}

Swift::Void __swiftcall Review.toggleExpanded()()
{
  uint64_t v0;
  _BYTE v1[24];

  swift_beginAccess(v0 + 16, v1, 1, 0);
  *(_BYTE *)(v0 + 16) = (*(_BYTE *)(v0 + 16) & 1) == 0;
}

Swift::Void __swiftcall Review.collapse()()
{
  uint64_t v0;
  _BYTE v1[24];

  swift_beginAccess(v0 + 16, v1, 1, 0);
  *(_BYTE *)(v0 + 16) = 0;
}

uint64_t Review.shelfUniqueId.getter()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v1 = v0;
  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = v0[4];
  if (v6)
  {
    v7 = v0[3];
  }
  else
  {
    v8 = v0[6];
    if (v8)
    {
      v7 = v0[5];
      v9 = v1[6];
    }
    else
    {
      UUID.init()(0);
      v7 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
      v9 = v10;
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      v8 = 0;
    }
    v1[3] = v7;
    v1[4] = v9;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRelease();
    v6 = 0;
  }
  swift_bridgeObjectRetain(v6);
  return v7;
}

uint64_t Review.shelfUniqueId.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(v2 + 32);
  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = a2;
  return swift_bridgeObjectRelease(v3);
}

uint64_t (*Review.shelfUniqueId.modify(uint64_t *a1))(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;

  a1[2] = v1;
  *a1 = Review.shelfUniqueId.getter();
  a1[1] = v3;
  return sub_8DBD0;
}

uint64_t sub_8DBD0(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[1];
  v1 = a1[2];
  v3 = *a1;
  v4 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)(v1 + 24) = v3;
  *(_QWORD *)(v1 + 32) = v2;
  return swift_bridgeObjectRelease(v4);
}

uint64_t Review.clickAction.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 144);
  if (v3)
  {
    *(_QWORD *)(a1 + 24) = type metadata accessor for Action(0);
    *(_QWORD *)(a1 + 32) = sub_726D8((unint64_t *)&qword_3B28E8, 255, (void (*)(uint64_t))type metadata accessor for Action, (uint64_t)&protocol conformance descriptor for Action);
    *(_QWORD *)a1 = v3;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return swift_retain(v3);
}

uint64_t Showcase.clickSender.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  a1[3] = *v1;
  *a1 = v1;
  return swift_retain(v1);
}

uint64_t Review.__allocating_init(id:title:date:dateText:contents:rating:reviewerName:response:moreAction:topLevelAction:impressionMetrics:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  uint64_t v24;

  v24 = swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
  Review.init(id:title:date:dateText:contents:rating:reviewerName:response:moreAction:topLevelAction:impressionMetrics:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
  return v24;
}

uint64_t Review.init(id:title:date:dateText:contents:rating:reviewerName:response:moreAction:topLevelAction:impressionMetrics:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v47 = a7;
  v48 = a8;
  v49 = a16;
  v45 = a6;
  v46 = a15;
  v43 = a13;
  v44 = a14;
  v41 = a11;
  v42 = a12;
  v39 = a9;
  v40 = a10;
  v38 = type metadata accessor for LazyDate.State(0);
  v22 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38);
  v24 = (char *)&v38 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3D88);
  __chkstk_darwin(v25);
  v27 = (char *)&v38 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_BYTE *)(v16 + 16) = 0;
  *(_QWORD *)(v16 + 24) = 0;
  *(_QWORD *)(v16 + 32) = 0;
  *(_QWORD *)(v16 + 40) = a1;
  *(_QWORD *)(v16 + 48) = a2;
  v28 = a5;
  *(_QWORD *)(v16 + 56) = a3;
  *(_QWORD *)(v16 + 64) = a4;
  sub_267BC(a5, (uint64_t)v27, &qword_3B3D88);
  v29 = type metadata accessor for Date(0);
  v30 = *(_QWORD *)(v29 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v27, 1, v29) == 1)
  {
    sub_1459C(a5, &qword_3B3D88);
    sub_1459C((uint64_t)v27, &qword_3B3D88);
    v31 = 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v24, v27, v29);
    (*(void (**)(char *, _QWORD, uint64_t))(v22 + 104))(v24, enum case for LazyDate.State.valid(_:), v38);
    v31 = LazyDate.init(initialState:)(v24);
    sub_1459C(v28, &qword_3B3D88);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v27, v29);
  }
  v32 = v45;
  *(_QWORD *)(v16 + 72) = v31;
  *(_QWORD *)(v16 + 80) = v32;
  v33 = v48;
  *(_QWORD *)(v16 + 88) = v47;
  *(_QWORD *)(v16 + 96) = v33;
  v34 = v40;
  *(_QWORD *)(v16 + 104) = v39;
  *(_QWORD *)(v16 + 112) = v34;
  v35 = v42;
  *(_QWORD *)(v16 + 120) = v41;
  *(_QWORD *)(v16 + 128) = v35;
  v36 = v44;
  *(_QWORD *)(v16 + 136) = v43;
  *(_QWORD *)(v16 + 144) = v36;
  *(_QWORD *)(v16 + 152) = v46;
  sub_15BD4(v49, v16 + OBJC_IVAR____TtC8ShelfKit6Review_impressionMetrics, (uint64_t *)&unk_3B8790);
  return v16;
}

uint64_t Review.__allocating_init(deserializing:using:)(char *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  Review.init(deserializing:using:)(a1, a2);
  return v5;
}

_QWORD *Review.init(deserializing:using:)(char *a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t Instance15byDeserializing5usingACSg9JetEngine10JSONObjectV_AH11JSONContextVtFZ_0;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  void (*v57)(char *, uint64_t, uint64_t);
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;

  v3 = (_QWORD *)v2;
  v61 = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v5);
  v59 = (char *)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = type metadata accessor for JSONContext(0);
  v58 = *(_QWORD *)(v60 - 8);
  v7 = v58;
  __chkstk_darwin(v60);
  v62 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for JSONObject(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v56 - v14;
  *(_BYTE *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  v16 = JSONObject.subscript.getter(25705, 0xE200000000000000);
  v17 = JSONObject.string.getter(v16);
  v19 = v18;
  v20 = *(void (**)(char *, uint64_t))(v10 + 8);
  v20(v15, v9);
  v3[5] = v17;
  v3[6] = v19;
  v21 = JSONObject.subscript.getter(0x656C746974, 0xE500000000000000);
  v22 = JSONObject.string.getter(v21);
  v24 = v23;
  v20(v15, v9);
  v3[7] = v22;
  v3[8] = v24;
  JSONObject.subscript.getter(1702125924, 0xE400000000000000);
  v57 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v25 = v62;
  v26 = v60;
  v57(v62, v61, v60);
  sub_8E490();
  ExpressibleByJSON.init(tryDeserializing:using:)(v15, v25, &type metadata for LazyDate);
  v3[9] = v63;
  v27 = JSONObject.subscript.getter(0x7478655465746164, 0xE800000000000000);
  v28 = JSONObject.string.getter(v27);
  v30 = v29;
  v20(v15, v9);
  v3[10] = v28;
  v3[11] = v30;
  v31 = JSONObject.subscript.getter(0x73746E65746E6F63, 0xE800000000000000);
  v32 = JSONObject.string.getter(v31);
  v34 = v33;
  v20(v15, v9);
  v3[12] = v32;
  v3[13] = v34;
  v35 = JSONObject.subscript.getter(0x676E69746172, 0xE600000000000000);
  v36 = JSONObject.uint.getter(v35);
  LOBYTE(v34) = v37;
  v20(v13, v9);
  if ((v34 & 1) != 0)
    v38 = 0;
  else
    v38 = v36;
  v3[14] = v38;
  v39 = JSONObject.subscript.getter(0x7265776569766572, 0xEC000000656D614ELL);
  v40 = JSONObject.string.getter(v39);
  v42 = v41;
  v20(v15, v9);
  v3[15] = v40;
  v3[16] = v42;
  v43 = type metadata accessor for Response();
  JSONObject.subscript.getter(0x65736E6F70736572, 0xE800000000000000);
  v45 = v61;
  v44 = v62;
  v46 = v26;
  v47 = v57;
  v57(v62, v61, v46);
  sub_726D8(&qword_3B54A8, v48, (void (*)(uint64_t))type metadata accessor for Response, (uint64_t)&protocol conformance descriptor for Response);
  ExpressibleByJSON.init(tryDeserializing:using:)(v15, v44, v43);
  v3[17] = v63;
  JSONObject.subscript.getter(0x6974634165726F6DLL, 0xEA00000000006E6FLL);
  Instance15byDeserializing5usingACSg9JetEngine10JSONObjectV_AH11JSONContextVtFZ_0 = _s8ShelfKit6ActionC17tryToMakeInstance15byDeserializing5usingACSg9JetEngine10JSONObjectV_AH11JSONContextVtFZ_0((uint64_t)v15, v45);
  v56 = v9;
  v20(v15, v9);
  v3[18] = Instance15byDeserializing5usingACSg9JetEngine10JSONObjectV_AH11JSONContextVtFZ_0;
  JSONObject.subscript.getter(0x6C6576654C706F74, 0xEE006E6F69746341);
  v50 = _s8ShelfKit6ActionC17tryToMakeInstance15byDeserializing5usingACSg9JetEngine10JSONObjectV_AH11JSONContextVtFZ_0((uint64_t)v15, v45);
  v20(v15, v9);
  v3[19] = v50;
  v51 = type metadata accessor for ImpressionMetrics(0);
  JSONObject.subscript.getter(0xD000000000000011, 0x8000000000309180);
  v52 = v62;
  v53 = v60;
  v47(v62, v45, v60);
  v54 = (uint64_t)v59;
  ExpressibleByJSON.init(tryDeserializing:using:)(v15, v52, v51);
  (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v45, v53);
  v20(a1, v56);
  sub_15BD4(v54, (uint64_t)v3 + OBJC_IVAR____TtC8ShelfKit6Review_impressionMetrics, (uint64_t *)&unk_3B8790);
  return v3;
}

unint64_t sub_8E490()
{
  unint64_t result;

  result = qword_3B54A0;
  if (!qword_3B54A0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for LazyDate);
    atomic_store(result, (unint64_t *)&qword_3B54A0);
  }
  return result;
}

uint64_t type metadata accessor for Response()
{
  return objc_opt_self(_TtC8ShelfKit8Response);
}

uint64_t Review.id.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 48));
  return v1;
}

uint64_t Review.date.getter()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + 72));
}

uint64_t Review.rating.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 112);
}

uint64_t Podcast.newEpisodeCount.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 120);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 128));
  return v1;
}

uint64_t Review.topLevelAction.getter()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + 152));
}

uint64_t Review.impressionMetrics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_267BC(v1 + OBJC_IVAR____TtC8ShelfKit6Review_impressionMetrics, a1, (uint64_t *)&unk_3B8790);
}

_QWORD *Review.deinit()
{
  _QWORD *v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release(v0[9]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release(v0[17]);
  swift_release(v0[18]);
  swift_release(v0[19]);
  sub_1459C((uint64_t)v0 + OBJC_IVAR____TtC8ShelfKit6Review_impressionMetrics, (uint64_t *)&unk_3B8790);
  return v0;
}

uint64_t Review.__deallocating_deinit()
{
  return sub_8F284((void (*)(void))Review.deinit);
}

_QWORD *sub_8E618@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  _QWORD *result;

  v8 = swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  result = Review.init(deserializing:using:)(a1, a2);
  if (!v4)
    *a3 = v8;
  return result;
}

uint64_t sub_8E67C()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *v0;
  swift_beginAccess(*v0 + 16, v3, 0, 0);
  return *(unsigned __int8 *)(v1 + 16);
}

BOOL sub_8E6B8()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *v0;
  swift_beginAccess(*v0 + 16, v3, 0, 0);
  return (*(_BYTE *)(v1 + 16) & 1) == 0;
}

uint64_t sub_8E6FC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t result;
  _BYTE v3[24];

  v1 = *v0;
  result = swift_beginAccess(*v0 + 16, v3, 1, 0);
  *(_BYTE *)(v1 + 16) = (*(_BYTE *)(v1 + 16) & 1) == 0;
  return result;
}

uint64_t sub_8E744()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t result;
  _BYTE v3[24];

  v1 = *v0;
  result = swift_beginAccess(*v0 + 16, v3, 1, 0);
  *(_BYTE *)(v1 + 16) = 0;
  return result;
}

uint64_t sub_8E780@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 144);
  if (v3)
  {
    *(_QWORD *)(a1 + 24) = type metadata accessor for Action(0);
    *(_QWORD *)(a1 + 32) = sub_726D8((unint64_t *)&qword_3B28E8, 255, (void (*)(uint64_t))type metadata accessor for Action, (uint64_t)&protocol conformance descriptor for Action);
    *(_QWORD *)a1 = v3;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return swift_retain(v3);
}

uint64_t sub_8E7F8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  a2[3] = a1;
  *a2 = v3;
  return swift_retain(v3);
}

uint64_t sub_8E80C()
{
  return Review.shelfUniqueId.getter();
}

uint64_t sub_8E82C@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return sub_267BC(*v1 + OBJC_IVAR____TtC8ShelfKit6Review_impressionMetrics, a1, (uint64_t *)&unk_3B8790);
}

_QWORD *Response.__allocating_init(id:date:dateText:contents:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v27 = a6;
  v28 = a7;
  v26 = a5;
  v12 = type metadata accessor for LazyDate.State(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3D88);
  __chkstk_darwin(v16);
  v18 = (char *)&v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = (_QWORD *)swift_allocObject(v7, 72, 7);
  v19[2] = a1;
  v19[3] = a2;
  sub_267BC(a3, (uint64_t)v18, &qword_3B3D88);
  v20 = type metadata accessor for Date(0);
  v21 = *(_QWORD *)(v20 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v18, 1, v20) == 1)
  {
    sub_1459C(a3, &qword_3B3D88);
    sub_1459C((uint64_t)v18, &qword_3B3D88);
    v22 = 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v15, v18, v20);
    (*(void (**)(char *, _QWORD, uint64_t))(v13 + 104))(v15, enum case for LazyDate.State.valid(_:), v12);
    v22 = LazyDate.init(initialState:)(v15);
    sub_1459C(a3, &qword_3B3D88);
    (*(void (**)(char *, uint64_t))(v21 + 8))(v18, v20);
  }
  v19[4] = v22;
  v19[5] = a4;
  v23 = v27;
  v19[6] = v26;
  v19[7] = v23;
  v19[8] = v28;
  return v19;
}

_QWORD *Response.init(id:date:dateText:contents:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v26 = a6;
  v27 = a7;
  v25 = a5;
  v12 = type metadata accessor for LazyDate.State(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3D88);
  __chkstk_darwin(v16);
  v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7[2] = a1;
  v7[3] = a2;
  sub_267BC(a3, (uint64_t)v18, &qword_3B3D88);
  v19 = type metadata accessor for Date(0);
  v20 = *(_QWORD *)(v19 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19) == 1)
  {
    sub_1459C(a3, &qword_3B3D88);
    sub_1459C((uint64_t)v18, &qword_3B3D88);
    v21 = 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v15, v18, v19);
    (*(void (**)(char *, _QWORD, uint64_t))(v13 + 104))(v15, enum case for LazyDate.State.valid(_:), v12);
    v21 = LazyDate.init(initialState:)(v15);
    sub_1459C(a3, &qword_3B3D88);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v18, v19);
  }
  v7[4] = v21;
  v7[5] = a4;
  v22 = v26;
  v7[6] = v25;
  v7[7] = v22;
  v7[8] = v27;
  return v7;
}

uint64_t Response.__allocating_init(deserializing:using:)(char *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = swift_allocObject(v2, 72, 7);
  Response.init(deserializing:using:)(a1, a2);
  return v5;
}

_QWORD *Response.init(deserializing:using:)(char *a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v3 = v2;
  v28 = a2;
  v27 = type metadata accessor for JSONContext(0);
  v5 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for JSONObject(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = JSONObject.subscript.getter(25705, 0xE200000000000000);
  v13 = JSONObject.string.getter(v12);
  v15 = v14;
  v16 = *(void (**)(char *, uint64_t))(v9 + 8);
  v16(v11, v8);
  v3[2] = v13;
  v3[3] = v15;
  JSONObject.subscript.getter(1702125924, 0xE400000000000000);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v28, v27);
  sub_8E490();
  ExpressibleByJSON.init(tryDeserializing:using:)(v11, v7, &type metadata for LazyDate);
  v3[4] = v29;
  v17 = JSONObject.subscript.getter(0x7478655465746164, 0xE800000000000000);
  v18 = JSONObject.string.getter(v17);
  v20 = v19;
  v16(v11, v8);
  v3[5] = v18;
  v3[6] = v20;
  v21 = JSONObject.subscript.getter(0x73746E65746E6F63, 0xE800000000000000);
  v22 = JSONObject.string.getter(v21);
  v24 = v23;
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v28, v27);
  v16(a1, v8);
  v16(v11, v8);
  v3[7] = v22;
  v3[8] = v24;
  return v3;
}

_QWORD *Response.deinit()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_release(v0[4]);
  swift_bridgeObjectRelease(v0[6]);
  swift_bridgeObjectRelease(v0[8]);
  return v0;
}

uint64_t Response.__deallocating_deinit()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_release(v0[4]);
  swift_bridgeObjectRelease(v0[6]);
  swift_bridgeObjectRelease(v0[8]);
  return swift_deallocClassInstance(v0, 72, 7);
}

_QWORD *sub_8EE7C@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  _QWORD *result;

  v8 = swift_allocObject(v3, 72, 7);
  result = Response.init(deserializing:using:)(a1, a2);
  if (!v4)
    *a3 = v8;
  return result;
}

uint64_t Ratings.shelfUniqueId.getter()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v1 = v0;
  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = v0[3];
  if (v6)
  {
    v7 = v0[2];
  }
  else
  {
    v8 = v0[5];
    if (v8)
    {
      v7 = v0[4];
      v9 = v1[5];
    }
    else
    {
      UUID.init()(0);
      v7 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
      v9 = v10;
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      v8 = 0;
    }
    v1[2] = v7;
    v1[3] = v9;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRelease();
    v6 = 0;
  }
  swift_bridgeObjectRetain(v6);
  return v7;
}

uint64_t (*Ratings.shelfUniqueId.modify(uint64_t *a1))(uint64_t *)
{
  uint64_t v1;
  uint64_t v3;

  a1[2] = v1;
  *a1 = Ratings.shelfUniqueId.getter();
  a1[1] = v3;
  return sub_8F004;
}

uint64_t Ratings.__allocating_init(productId:ratingAverage:ratingCounts:formattedCount:totalNumberOfRatings:totalNumberOfReviews:reviews:actions:nextPage:impressionMetrics:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v21;
  uint64_t v22;

  v21 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  *(_QWORD *)(v21 + 16) = 0;
  *(_QWORD *)(v21 + 24) = 0;
  *(_QWORD *)(v21 + 32) = a1;
  *(_QWORD *)(v21 + 40) = a2;
  *(float *)(v21 + 48) = a9;
  *(_QWORD *)(v21 + 56) = a3;
  *(_QWORD *)(v21 + 64) = a6;
  *(_QWORD *)(v21 + 72) = a4;
  *(_QWORD *)(v21 + 80) = a5;
  *(_QWORD *)(v21 + 88) = a7;
  *(_QWORD *)(v21 + 96) = a8;
  v22 = v21 + OBJC_IVAR____TtC8ShelfKit7Ratings_nextPage;
  *(_QWORD *)(v21 + 104) = a10;
  sub_15BD4(a11, v22, &qword_3B4720);
  sub_15BD4(a12, v21 + OBJC_IVAR____TtC8ShelfKit7Ratings_impressionMetrics, (uint64_t *)&unk_3B8790);
  return v21;
}

uint64_t Ratings.init(productId:ratingAverage:ratingCounts:formattedCount:totalNumberOfRatings:totalNumberOfReviews:reviews:actions:nextPage:impressionMetrics:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v12 + 16) = 0;
  *(_QWORD *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 32) = a1;
  *(_QWORD *)(v12 + 40) = a2;
  *(float *)(v12 + 48) = a9;
  *(_QWORD *)(v12 + 56) = a3;
  *(_QWORD *)(v12 + 64) = a6;
  *(_QWORD *)(v12 + 72) = a4;
  *(_QWORD *)(v12 + 80) = a5;
  *(_QWORD *)(v12 + 88) = a7;
  *(_QWORD *)(v12 + 96) = a8;
  v13 = v12 + OBJC_IVAR____TtC8ShelfKit7Ratings_nextPage;
  *(_QWORD *)(v12 + 104) = a10;
  sub_15BD4(a11, v13, &qword_3B4720);
  sub_15BD4(a12, v12 + OBJC_IVAR____TtC8ShelfKit7Ratings_impressionMetrics, (uint64_t *)&unk_3B8790);
  return v12;
}

uint64_t Ratings.__allocating_init(deserializing:using:)(uint64_t a1, uint64_t a2)
{
  return sub_8FD28(a1, a2);
}

float Ratings.ratingAverage.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 48);
}

uint64_t Ratings.ratingCounts.getter()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 56));
}

uint64_t Ratings.totalNumberOfRatings.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 64);
}

uint64_t Ratings.totalNumberOfReviews.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 88);
}

uint64_t Ratings.reviews.getter()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 96));
}

uint64_t Ratings.actions.getter()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 104));
}

uint64_t Ratings.nextPage.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_267BC(v1 + OBJC_IVAR____TtC8ShelfKit7Ratings_nextPage, a1, &qword_3B4720);
}

uint64_t Ratings.impressionMetrics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_267BC(v1 + OBJC_IVAR____TtC8ShelfKit7Ratings_impressionMetrics, a1, (uint64_t *)&unk_3B8790);
}

uint64_t Ratings.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1459C(v0 + OBJC_IVAR____TtC8ShelfKit7Ratings_nextPage, &qword_3B4720);
  sub_1459C(v0 + OBJC_IVAR____TtC8ShelfKit7Ratings_impressionMetrics, (uint64_t *)&unk_3B8790);
  return v0;
}

uint64_t Ratings.__deallocating_deinit()
{
  return sub_8F284((void (*)(void))Ratings.deinit);
}

uint64_t sub_8F284(void (*a1)(void))
{
  uint64_t v1;

  a1();
  return swift_deallocClassInstance(v1, *(unsigned int *)(*(_QWORD *)v1 + 48), *(unsigned __int16 *)(*(_QWORD *)v1 + 52));
}

uint64_t sub_8F2A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t result;

  result = sub_8FD28(a1, a2);
  if (!v3)
    *a3 = result;
  return result;
}

uint64_t sub_8F2D0()
{
  return Ratings.shelfUniqueId.getter();
}

uint64_t sub_8F2F0@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return sub_267BC(*v1 + OBJC_IVAR____TtC8ShelfKit7Ratings_impressionMetrics, a1, (uint64_t *)&unk_3B8790);
}

uint64_t TapToRate.__allocating_init(title:rating:rateAction:impressionMetrics:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float a5)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  UUID.init()(v15);
  v16 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
  v18 = v17;
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  *(_QWORD *)(v15 + 16) = v16;
  *(_QWORD *)(v15 + 24) = v18;
  *(_QWORD *)(v15 + 32) = a1;
  *(_QWORD *)(v15 + 40) = a2;
  *(float *)(v15 + 48) = a5;
  *(_BYTE *)(v15 + 52) = 0;
  *(_QWORD *)(v15 + 56) = a3;
  sub_15BD4(a4, v15 + OBJC_IVAR____TtC8ShelfKit9TapToRate_impressionMetrics, (uint64_t *)&unk_3B8790);
  return v15;
}

uint64_t TapToRate.init(title:rating:rateAction:impressionMetrics:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v6 = v5;
  v12 = type metadata accessor for UUID(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init()(v14);
  v17 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
  v19 = v18;
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  *(_QWORD *)(v6 + 16) = v17;
  *(_QWORD *)(v6 + 24) = v19;
  *(_QWORD *)(v6 + 32) = a1;
  *(_QWORD *)(v6 + 40) = a2;
  *(float *)(v6 + 48) = a5;
  *(_BYTE *)(v6 + 52) = 0;
  *(_QWORD *)(v6 + 56) = a3;
  sub_15BD4(a4, v6 + OBJC_IVAR____TtC8ShelfKit9TapToRate_impressionMetrics, (uint64_t *)&unk_3B8790);
  return v6;
}

uint64_t TapToRate.__allocating_init(deserializing:using:)(uint64_t a1, uint64_t a2)
{
  return sub_90508(a1, a2);
}

unint64_t TapToRate.rating.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 48) | ((unint64_t)*(unsigned __int8 *)(v0 + 52) << 32);
}

uint64_t TapToRate.rateAction.getter()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + 56));
}

uint64_t TapToRate.impressionMetrics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_267BC(v1 + OBJC_IVAR____TtC8ShelfKit9TapToRate_impressionMetrics, a1, (uint64_t *)&unk_3B8790);
}

uint64_t TapToRate.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release(*(_QWORD *)(v0 + 56));
  sub_1459C(v0 + OBJC_IVAR____TtC8ShelfKit9TapToRate_impressionMetrics, (uint64_t *)&unk_3B8790);
  return v0;
}

uint64_t TapToRate.__deallocating_deinit()
{
  _QWORD *v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release(v0[7]);
  sub_1459C((uint64_t)v0 + OBJC_IVAR____TtC8ShelfKit9TapToRate_impressionMetrics, (uint64_t *)&unk_3B8790);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_8F608@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t result;

  result = sub_90508(a1, a2);
  if (!v3)
    *a3 = result;
  return result;
}

uint64_t sub_8F630@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return sub_267BC(*v1 + OBJC_IVAR____TtC8ShelfKit9TapToRate_impressionMetrics, a1, (uint64_t *)&unk_3B8790);
}

uint64_t ReviewActions.shelfUniqueId.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 24);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 16);
  }
  else
  {
    v2 = sub_8F6DC(v0);
    *(_QWORD *)(v0 + 16) = v2;
    *(_QWORD *)(v0 + 24) = v3;
    swift_bridgeObjectRetain(v3);
    swift_bridgeObjectRelease();
    v1 = 0;
  }
  swift_bridgeObjectRetain(v1);
  return v2;
}

uint64_t _s8ShelfKit7RatingsC13shelfUniqueIdSSvs_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_bridgeObjectRelease(v3);
}

uint64_t sub_8F6DC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  uint64_t v17;
  uint64_t v19;
  _QWORD v20[2];

  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 32);
  if (v6)
  {
    v8 = *(_QWORD *)(v6 + 16);
    v7 = *(_QWORD *)(v6 + 24);
    swift_bridgeObjectRetain(v7);
    v9 = *(_QWORD *)(a1 + 40);
    if (v9)
    {
LABEL_3:
      v11 = *(_QWORD *)(v9 + 16);
      v10 = *(_QWORD *)(v9 + 24);
      swift_bridgeObjectRetain(v10);
      goto LABEL_6;
    }
  }
  else
  {
    v8 = 0;
    v7 = 0xE000000000000000;
    v9 = *(_QWORD *)(a1 + 40);
    if (v9)
      goto LABEL_3;
  }
  v11 = 0;
  v10 = 0xE000000000000000;
LABEL_6:
  v12 = HIBYTE(v7) & 0xF;
  if ((v7 & 0x2000000000000000) == 0)
    v12 = v8 & 0xFFFFFFFFFFFFLL;
  if (v12)
    goto LABEL_12;
  v13 = HIBYTE(v10) & 0xF;
  if ((v10 & 0x2000000000000000) == 0)
    v13 = v11 & 0xFFFFFFFFFFFFLL;
  if (v13)
  {
LABEL_12:
    strcpy((char *)v20, "reviewActions:");
    HIBYTE(v20[1]) = -18;
    v14._countAndFlagsBits = v8;
    v14._object = (void *)v7;
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain(v20[1]);
    v15._countAndFlagsBits = 58;
    v15._object = (void *)0xE100000000000000;
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain(v20[1]);
    v16._countAndFlagsBits = v11;
    v16._object = (void *)v10;
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v20[0];
  }
  else
  {
    swift_bridgeObjectRelease();
    v19 = swift_bridgeObjectRelease();
    UUID.init()(v19);
    v17 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  return v17;
}

uint64_t (*ReviewActions.shelfUniqueId.modify(uint64_t *a1))(uint64_t *)
{
  uint64_t v1;
  uint64_t v3;

  a1[2] = v1;
  *a1 = ReviewActions.shelfUniqueId.getter();
  a1[1] = v3;
  return sub_8F004;
}

uint64_t sub_8F8C0(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[1];
  v1 = a1[2];
  v3 = *a1;
  v4 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)(v1 + 24) = v2;
  return swift_bridgeObjectRelease(v4);
}

_QWORD *ReviewActions.__allocating_init(writeReview:support:impressionMetrics:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  v7[2] = 0;
  v7[3] = 0;
  v7[4] = a1;
  v7[5] = a2;
  sub_15BD4(a3, (uint64_t)v7 + OBJC_IVAR____TtC8ShelfKit13ReviewActions_impressionMetrics, (uint64_t *)&unk_3B8790);
  return v7;
}

_QWORD *ReviewActions.init(writeReview:support:impressionMetrics:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[2] = 0;
  v3[3] = 0;
  v3[4] = a1;
  v3[5] = a2;
  sub_15BD4(a3, (uint64_t)v3 + OBJC_IVAR____TtC8ShelfKit13ReviewActions_impressionMetrics, (uint64_t *)&unk_3B8790);
  return v3;
}

_QWORD *ReviewActions.__allocating_init(deserializing:using:)(char *a1, uint64_t a2)
{
  return sub_8FAD4(a1, a2);
}

uint64_t RecommendationsUpdatedTipProvider.shouldDisplayRecommendationsUpdatedTipPublisher.getter()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + 32));
}

uint64_t CategoryListPresenter.pageHeader.getter()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + 40));
}

uint64_t ReviewActions.impressionMetrics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_267BC(v1 + OBJC_IVAR____TtC8ShelfKit13ReviewActions_impressionMetrics, a1, (uint64_t *)&unk_3B8790);
}

uint64_t ReviewActions.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40));
  sub_1459C(v0 + OBJC_IVAR____TtC8ShelfKit13ReviewActions_impressionMetrics, (uint64_t *)&unk_3B8790);
  return v0;
}

uint64_t ReviewActions.__deallocating_deinit()
{
  _QWORD *v0;

  swift_bridgeObjectRelease();
  swift_release(v0[4]);
  swift_release(v0[5]);
  sub_1459C((uint64_t)v0 + OBJC_IVAR____TtC8ShelfKit13ReviewActions_impressionMetrics, (uint64_t *)&unk_3B8790);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

_QWORD *sub_8FA5C@<X0>(char *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  _QWORD *result;

  result = sub_8FAD4(a1, a2);
  if (!v3)
    *a3 = result;
  return result;
}

uint64_t sub_8FA84()
{
  return ReviewActions.shelfUniqueId.getter();
}

uint64_t sub_8FAA4@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return sub_267BC(*v1 + OBJC_IVAR____TtC8ShelfKit13ReviewActions_impressionMetrics, a1, (uint64_t *)&unk_3B8790);
}

_QWORD *sub_8FAD4(char *a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t Instance15byDeserializing5usingACSg9JetEngine10JSONObjectV_AH11JSONContextVtFZ_0;
  uint64_t v28;

  v28 = type metadata accessor for JSONContext(0);
  v24 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v6);
  v26 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for JSONObject(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  JSONObject.subscript.getter(0x7665526574697277, 0xEB00000000776569);
  Instance15byDeserializing5usingACSg9JetEngine10JSONObjectV_AH11JSONContextVtFZ_0 = _s8ShelfKit6ActionC17tryToMakeInstance15byDeserializing5usingACSg9JetEngine10JSONObjectV_AH11JSONContextVtFZ_0((uint64_t)v11, a2);
  v12 = *(void (**)(char *, uint64_t))(v9 + 8);
  v12(v11, v8);
  v23 = a1;
  JSONObject.subscript.getter(0x74726F70707573, 0xE700000000000000);
  v25 = _s8ShelfKit6ActionC17tryToMakeInstance15byDeserializing5usingACSg9JetEngine10JSONObjectV_AH11JSONContextVtFZ_0((uint64_t)v11, a2);
  v12(v11, v8);
  v13 = type metadata accessor for ImpressionMetrics(0);
  JSONObject.subscript.getter(0xD000000000000011, 0x8000000000309180);
  v14 = v24;
  v15 = v5;
  v16 = v5;
  v17 = v28;
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v16, a2, v28);
  v18 = (uint64_t)v26;
  ExpressibleByJSON.init(tryDeserializing:using:)(v11, v15, v13);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(a2, v17);
  v12(v23, v8);
  v19 = type metadata accessor for ReviewActions(0);
  v20 = (_QWORD *)swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
  v20[2] = 0;
  v20[3] = 0;
  v21 = v25;
  v20[4] = Instance15byDeserializing5usingACSg9JetEngine10JSONObjectV_AH11JSONContextVtFZ_0;
  v20[5] = v21;
  sub_15BD4(v18, (uint64_t)v20 + OBJC_IVAR____TtC8ShelfKit13ReviewActions_impressionMetrics, (uint64_t *)&unk_3B8790);
  return v20;
}

uint64_t sub_8FD28(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  uint64_t (*v40)(char *, uint64_t, uint64_t);
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  float v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  char v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  char v76;
  char *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  void (*v81)(char *, uint64_t, uint64_t);
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v95;
  char *v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  _QWORD *v103;
  char *v104;
  char *v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;

  v110 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v3);
  v109 = (char *)&v95 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4720);
  __chkstk_darwin(v5);
  v113 = (uint64_t)&v95 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v108 = type metadata accessor for JSONContext(0);
  v111 = *(_QWORD *)(v108 - 8);
  __chkstk_darwin(v108);
  v107 = (char *)&v95 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4F30);
  v9 = __chkstk_darwin(v8);
  v101 = (char *)&v95 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v12 = (char *)&v95 - v11;
  v13 = type metadata accessor for JSONObject(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v105 = (char *)&v95 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v104 = (char *)&v95 - v18;
  v19 = __chkstk_darwin(v17);
  v102 = (char *)&v95 - v20;
  v21 = __chkstk_darwin(v19);
  v98 = (char *)&v95 - v22;
  v23 = __chkstk_darwin(v21);
  v97 = (char *)&v95 - v24;
  v25 = __chkstk_darwin(v23);
  v96 = (char *)&v95 - v26;
  v27 = __chkstk_darwin(v25);
  v29 = (char *)&v95 - v28;
  __chkstk_darwin(v27);
  v31 = (char *)&v95 - v30;
  v32 = type metadata accessor for JSONArray(0);
  v33 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v35 = (char *)&v95 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v112 = a1;
  v36 = JSONObject.subscript.getter(0x736E6F69746361, 0xE700000000000000);
  JSONObject.array.getter(v36);
  v37 = v33;
  v38 = v32;
  v106 = v14;
  v39 = *(void (**)(char *, uint64_t))(v14 + 8);
  v39(v31, v13);
  v40 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v37 + 48);
  v41 = v40(v12, 1, v32);
  v95 = v37;
  if (v41 == 1)
  {
    sub_1459C((uint64_t)v12, &qword_3B4F30);
    v103 = _swiftEmptyArrayStorage;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v35, v12, v32);
    v42 = type metadata accessor for Action(0);
    v43 = __chkstk_darwin(v42);
    v44 = v110;
    *(&v95 - 2) = v43;
    *(&v95 - 1) = v44;
    v45 = v114;
    v103 = (_QWORD *)JSONArray.compactMap<A>(_:)(sub_9105C);
    v114 = v45;
    v38 = v32;
    (*(void (**)(char *, uint64_t))(v37 + 8))(v35, v32);
  }
  v46 = JSONObject.subscript.getter(0x49746375646F7270, 0xE900000000000064);
  v47 = JSONObject.string.getter(v46);
  v99 = v48;
  v100 = v47;
  v39(v29, v13);
  v49 = v96;
  v50 = JSONObject.subscript.getter(0x7641676E69746172, 0xED00006567617265);
  v51 = JSONObject.float.getter(v50);
  v39(v49, v13);
  v52 = v97;
  v53 = JSONObject.subscript.getter(0x6F43676E69746172, 0xEC00000073746E75);
  v54 = (uint64_t)v101;
  JSONObject.array.getter(v53);
  v39(v52, v13);
  if (v40((char *)v54, 1, v38) == 1)
  {
    sub_1459C(v54, &qword_3B4F30);
    v97 = 0;
  }
  else
  {
    v55 = sub_91020();
    v97 = (char *)JSONArray.bridgedPrimitiveValues<A>()(v55);
    (*(void (**)(uint64_t, uint64_t))(v95 + 8))(v54, v38);
  }
  v56 = v110;
  v57 = v98;
  v58 = v112;
  v59 = JSONObject.subscript.getter(0x657474616D726F66, 0xEE00746E756F4364);
  v60 = JSONObject.string.getter(v59);
  v62 = v61;
  v39(v57, v13);
  if (v62)
    v63 = v60;
  else
    v63 = 0;
  v110 = v63;
  v64 = 0xE000000000000000;
  if (v62)
    v64 = v62;
  v101 = (char *)v64;
  if ((v51 & 0x100000000) != 0)
    v65 = 0.0;
  else
    v65 = *(float *)&v51;
  v66 = v102;
  v67 = JSONObject.subscript.getter(0xD000000000000014, 0x800000000030CCE0);
  v68 = JSONObject.int.getter(v67);
  v70 = v69;
  v39(v66, v13);
  if ((v70 & 1) != 0)
    v71 = 0;
  else
    v71 = (char *)v68;
  v102 = v71;
  v72 = v104;
  v73 = JSONObject.subscript.getter(0xD000000000000014, 0x800000000030CD10);
  v74 = JSONObject.int.getter(v73);
  v76 = v75;
  v39(v72, v13);
  if ((v76 & 1) != 0)
    v77 = 0;
  else
    v77 = (char *)v74;
  v104 = v77;
  v78 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B5968);
  v96 = (char *)v39;
  v79 = v105;
  JSONObject.subscript.getter(0x73776569766572, 0xE700000000000000);
  v80 = v13;
  v81 = *(void (**)(char *, uint64_t, uint64_t))(v111 + 16);
  v82 = v107;
  v83 = v108;
  v81(v107, v56, v108);
  sub_90FA0();
  ExpressibleByJSON.init(tryDeserializing:using:)(v79, v82, v78);
  v98 = v115;
  v84 = v113;
  JSONObject.subscript.getter(0x656761507478656ELL, 0xE800000000000000);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v106 + 56))(v84, 0, 1, v80);
  v85 = type metadata accessor for ImpressionMetrics(0);
  JSONObject.subscript.getter(0xD000000000000011, 0x8000000000309180);
  v81(v82, v56, v83);
  v86 = (uint64_t)v109;
  ExpressibleByJSON.init(tryDeserializing:using:)(v79, v82, v85);
  (*(void (**)(uint64_t, uint64_t))(v111 + 8))(v56, v83);
  ((void (*)(uint64_t, uint64_t))v96)(v58, v80);
  v87 = type metadata accessor for Ratings(0);
  v88 = swift_allocObject(v87, *(unsigned int *)(v87 + 48), *(unsigned __int16 *)(v87 + 52));
  *(_QWORD *)(v88 + 16) = 0;
  *(_QWORD *)(v88 + 24) = 0;
  v89 = v99;
  *(_QWORD *)(v88 + 32) = v100;
  *(_QWORD *)(v88 + 40) = v89;
  *(float *)(v88 + 48) = v65;
  v90 = v102;
  *(_QWORD *)(v88 + 56) = v97;
  *(_QWORD *)(v88 + 64) = v90;
  v91 = v101;
  *(_QWORD *)(v88 + 72) = v110;
  *(_QWORD *)(v88 + 80) = v91;
  v92 = v98;
  *(_QWORD *)(v88 + 88) = v104;
  *(_QWORD *)(v88 + 96) = v92;
  v93 = v88 + OBJC_IVAR____TtC8ShelfKit7Ratings_nextPage;
  *(_QWORD *)(v88 + 104) = v103;
  sub_15BD4(v113, v93, &qword_3B4720);
  sub_15BD4(v86, v88 + OBJC_IVAR____TtC8ShelfKit7Ratings_impressionMetrics, (uint64_t *)&unk_3B8790);
  return v88;
}

uint64_t sub_90508(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(uint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;

  v62 = a2;
  v3 = type metadata accessor for UUID(0);
  v59 = *(_QWORD *)(v3 - 8);
  v60 = v3;
  __chkstk_darwin(v3);
  v57 = (char *)&v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v5);
  v58 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for JSONContext(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v56 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v61 = (char *)&v51 - v11;
  v12 = type metadata accessor for JSONObject(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v54 = (char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v51 - v17;
  v19 = __chkstk_darwin(v16);
  v21 = (char *)&v51 - v20;
  __chkstk_darwin(v19);
  v23 = (char *)&v51 - v22;
  v24 = JSONObject.subscript.getter(0x656C746974, 0xE500000000000000);
  v55 = JSONObject.string.getter(v24);
  v63 = v25;
  v26 = *(void (**)(char *, uint64_t))(v13 + 8);
  v27 = v23;
  v28 = v62;
  v26(v27, v12);
  v29 = JSONObject.subscript.getter(0x676E69746172, 0xE600000000000000);
  v53 = JSONObject.float.getter(v29);
  v65 = (void (*)(uint64_t, uint64_t))v26;
  v66 = v12;
  v26(v21, v12);
  v30 = a1;
  JSONObject.subscript.getter(0x6974634165746172, 0xEA00000000006E6FLL);
  v67 = v8;
  v31 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v32 = (uint64_t)v61;
  v33 = v7;
  v31(v61, v28, v7);
  v34 = type metadata accessor for HttpTemplateAction(0);
  swift_allocObject(v34, *(unsigned int *)(v34 + 48), *(unsigned __int16 *)(v34 + 52));
  v35 = v64;
  v36 = HttpTemplateAction.init(deserializing:using:)(v18, v32);
  if (v35)
  {
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v28, v7);
    v65(v30, v66);
  }
  else
  {
    v37 = v36;
    v38 = v28;
    v39 = type metadata accessor for ImpressionMetrics(0);
    v40 = v54;
    v52 = v30;
    JSONObject.subscript.getter(0xD000000000000011, 0x8000000000309180);
    v41 = v56;
    v31(v56, v38, v33);
    v42 = (uint64_t)v58;
    ExpressibleByJSON.init(tryDeserializing:using:)(v40, v41, v39);
    v43 = type metadata accessor for TapToRate(0);
    v28 = swift_allocObject(v43, *(unsigned int *)(v43 + 48), *(unsigned __int16 *)(v43 + 52));
    v44 = v57;
    UUID.init()(v28);
    v45 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
    v47 = v46;
    (*(void (**)(char *, uint64_t))(v59 + 8))(v44, v60);
    *(_QWORD *)(v28 + 16) = v45;
    *(_QWORD *)(v28 + 24) = v47;
    v48 = v63;
    *(_QWORD *)(v28 + 32) = v55;
    *(_QWORD *)(v28 + 40) = v48;
    v49 = v53;
    if ((v53 & 0x100000000) != 0)
      v49 = 0;
    *(_DWORD *)(v28 + 48) = v49;
    *(_BYTE *)(v28 + 52) = 0;
    *(_QWORD *)(v28 + 56) = v37;
    sub_15BD4(v42, v28 + OBJC_IVAR____TtC8ShelfKit9TapToRate_impressionMetrics, (uint64_t *)&unk_3B8790);
    (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v38, v33);
    v65(v52, v66);
  }
  return v28;
}

uint64_t sub_908FC(uint64_t a1)
{
  uint64_t result;

  result = sub_726D8(&qword_3B54B0, 255, (void (*)(uint64_t))type metadata accessor for Review, (uint64_t)&protocol conformance descriptor for Review);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for Review(uint64_t a1)
{
  return sub_1F9D4(a1, qword_3B5508, (uint64_t)&nominal type descriptor for Review);
}

uint64_t sub_90950(uint64_t a1)
{
  uint64_t result;

  result = sub_726D8(&qword_3B54B8, 255, (void (*)(uint64_t))type metadata accessor for Review, (uint64_t)&protocol conformance descriptor for Review);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_90990(uint64_t a1)
{
  uint64_t result;

  result = sub_726D8(&qword_3B54C0, 255, (void (*)(uint64_t))type metadata accessor for Review, (uint64_t)&protocol conformance descriptor for Review);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_909D0(uint64_t a1)
{
  uint64_t result;

  result = sub_726D8(&qword_3B54C8, 255, (void (*)(uint64_t))type metadata accessor for Ratings, (uint64_t)&protocol conformance descriptor for Ratings);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for Ratings(uint64_t a1)
{
  return sub_1F9D4(a1, qword_3B56E0, (uint64_t)&nominal type descriptor for Ratings);
}

uint64_t sub_90A24(uint64_t a1)
{
  uint64_t result;

  result = sub_726D8(&qword_3B54D0, 255, (void (*)(uint64_t))type metadata accessor for TapToRate, (uint64_t)&protocol conformance descriptor for TapToRate);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for TapToRate(uint64_t a1)
{
  return sub_1F9D4(a1, qword_3B57E8, (uint64_t)&nominal type descriptor for TapToRate);
}

uint64_t sub_90A78(uint64_t a1)
{
  uint64_t result;

  result = sub_726D8(&qword_3B54D8, 255, (void (*)(uint64_t))type metadata accessor for ReviewActions, (uint64_t)&protocol conformance descriptor for ReviewActions);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for ReviewActions(uint64_t a1)
{
  return sub_1F9D4(a1, qword_3B58C0, (uint64_t)&nominal type descriptor for ReviewActions);
}

uint64_t sub_90ACC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = Review.shelfUniqueId.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_90AF4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a1;
  v2 = a1[1];
  v4 = *a2;
  v5 = *(_QWORD *)(*a2 + 32);
  *(_QWORD *)(v4 + 24) = v3;
  *(_QWORD *)(v4 + 32) = v2;
  swift_bridgeObjectRetain(v2);
  return swift_bridgeObjectRelease(v5);
}

uint64_t sub_90B24@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = Ratings.shelfUniqueId.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_90B50@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = ReviewActions.shelfUniqueId.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t keypath_set_2Tm(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a1;
  v2 = a1[1];
  v4 = *a2;
  v5 = *(_QWORD *)(*a2 + 24);
  *(_QWORD *)(v4 + 16) = v3;
  *(_QWORD *)(v4 + 24) = v2;
  swift_bridgeObjectRetain(v2);
  return swift_bridgeObjectRelease(v5);
}

uint64_t sub_90BAC()
{
  return type metadata accessor for Review(0);
}

void sub_90BB4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[13];

  v4[0] = &unk_2F0D28;
  v4[1] = &unk_2F0D40;
  v4[2] = &unk_2F0D40;
  v4[3] = &unk_2F0D40;
  v4[4] = &unk_2F0D58;
  v4[5] = &unk_2F0D40;
  v4[6] = &unk_2F0D40;
  v4[7] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[8] = &unk_2F0D40;
  v4[9] = &unk_2F0D58;
  v4[10] = &unk_2F0D58;
  v4[11] = &unk_2F0D58;
  sub_3EE70(319, (unint64_t *)&qword_3B2250, (uint64_t (*)(uint64_t))&type metadata accessor for ImpressionMetrics);
  if (v3 <= 0x3F)
  {
    v4[12] = *(_QWORD *)(v2 - 8) + 64;
    swift_updateClassMetadata2(a1, 256, 13, v4, a1 + 80);
  }
}

uint64_t method lookup function for Review(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for Review);
}

uint64_t dispatch thunk of Review.__allocating_init(id:title:date:dateText:contents:rating:reviewerName:response:moreAction:topLevelAction:impressionMetrics:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 184))();
}

uint64_t dispatch thunk of Showcase.__allocating_init(deserializing:using:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 192))();
}

uint64_t method lookup function for Response(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for Response);
}

uint64_t dispatch thunk of Response.__allocating_init(id:date:dateText:contents:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t sub_90CD4()
{
  return type metadata accessor for Ratings(0);
}

void sub_90CDC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[11];

  v6[0] = &unk_2F0D40;
  v6[1] = &unk_2F0D40;
  v6[2] = (char *)&value witness table for Builtin.Int32 + 64;
  v6[3] = &unk_2F0D58;
  v6[4] = (char *)&value witness table for Builtin.Int64 + 64;
  v6[5] = &unk_2F0E10;
  v6[6] = (char *)&value witness table for Builtin.Int64 + 64;
  v6[7] = &unk_2F0D58;
  v6[8] = &unk_2F0D58;
  sub_3EE70(319, (unint64_t *)&qword_3B4868, (uint64_t (*)(uint64_t))&type metadata accessor for JSONObject);
  if (v3 <= 0x3F)
  {
    v6[9] = *(_QWORD *)(v2 - 8) + 64;
    sub_3EE70(319, (unint64_t *)&qword_3B2250, (uint64_t (*)(uint64_t))&type metadata accessor for ImpressionMetrics);
    if (v5 <= 0x3F)
    {
      v6[10] = *(_QWORD *)(v4 - 8) + 64;
      swift_updateClassMetadata2(a1, 256, 11, v6, a1 + 80);
    }
  }
}

uint64_t method lookup function for Ratings(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for Ratings);
}

uint64_t dispatch thunk of Ratings.__allocating_init(productId:ratingAverage:ratingCounts:formattedCount:totalNumberOfRatings:totalNumberOfReviews:reviews:actions:nextPage:impressionMetrics:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 168))();
}

uint64_t dispatch thunk of Ratings.__allocating_init(deserializing:using:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 176))();
}

uint64_t sub_90E00()
{
  return type metadata accessor for TapToRate(0);
}

void sub_90E08(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = &unk_2F0E10;
  v4[1] = &unk_2F0D40;
  v4[2] = &unk_2F0E68;
  v4[3] = &unk_2F0D58;
  sub_3EE70(319, (unint64_t *)&qword_3B2250, (uint64_t (*)(uint64_t))&type metadata accessor for ImpressionMetrics);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(v2 - 8) + 64;
    swift_updateClassMetadata2(a1, 256, 5, v4, a1 + 80);
  }
}

uint64_t method lookup function for TapToRate(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for TapToRate);
}

uint64_t dispatch thunk of TapToRate.__allocating_init(title:rating:rateAction:impressionMetrics:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of TapToRate.__allocating_init(deserializing:using:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t sub_90ED8()
{
  return type metadata accessor for ReviewActions(0);
}

void sub_90EE0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = &unk_2F0D40;
  v4[1] = &unk_2F0D58;
  v4[2] = &unk_2F0D58;
  sub_3EE70(319, (unint64_t *)&qword_3B2250, (uint64_t (*)(uint64_t))&type metadata accessor for ImpressionMetrics);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(v2 - 8) + 64;
    swift_updateClassMetadata2(a1, 256, 4, v4, a1 + 80);
  }
}

uint64_t method lookup function for ReviewActions(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for ReviewActions);
}

uint64_t dispatch thunk of ReviewActions.__allocating_init(writeReview:support:impressionMetrics:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of ReviewActions.__allocating_init(deserializing:using:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

unint64_t sub_90FA0()
{
  unint64_t result;

  result = qword_3B5970;
  if (!qword_3B5970)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_3B5968);
    sub_726D8(&qword_3B54B8, 255, (void (*)(uint64_t))type metadata accessor for Review, (uint64_t)&protocol conformance descriptor for Review);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A]);
    atomic_store(result, (unint64_t *)&qword_3B5970);
  }
  return result;
}

unint64_t sub_91020()
{
  unint64_t result;
  uint64_t v1;

  result = qword_3C7F30;
  if (!qword_3C7F30)
  {
    v1 = objc_opt_self(NSNumber);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_3C7F30);
  }
  return result;
}

uint64_t sub_9105C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_17AA8C(a1, *(_QWORD *)(v2 + 24), a2);
}

uint64_t dispatch thunk of Response.__allocating_init(deserializing:using:)()
{
  return dispatch thunk of ReviewActions.__allocating_init(deserializing:using:)();
}

uint64_t sub_91098@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v2 = v1;
  v4 = type metadata accessor for EpisodeOffer(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for BookmarkButtonPresenter.Data(0);
  __chkstk_darwin(v8);
  v10 = (uint64_t *)((char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_95CBC(v2, (uint64_t)v10);
  result = swift_getEnumCaseMultiPayload(v10, v8);
  if (!(_DWORD)result)
  {
    v17 = *v10;
    v18 = v10[1];
    v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8730);
    result = swift_allocObject(v19, 48, 7);
    v15 = result;
    v16 = 0;
    *(_OWORD *)(result + 16) = xmmword_2EA0D0;
    *(_QWORD *)(result + 32) = v17;
    *(_QWORD *)(result + 40) = v18;
    goto LABEL_7;
  }
  if ((_DWORD)result == 1)
  {
    sub_1E4B0((uint64_t)v10, (uint64_t)v7);
    v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B5BA8);
    v13 = *(unsigned __int8 *)(v5 + 80);
    v14 = (v13 + 32) & ~v13;
    v15 = swift_allocObject(v12, v14 + *(_QWORD *)(v5 + 72), v13 | 7);
    *(_OWORD *)(v15 + 16) = xmmword_2EA0D0;
    result = sub_1E4B0((uint64_t)v7, v15 + v14);
    v16 = 1;
LABEL_7:
    *(_QWORD *)a1 = v15;
    *(_BYTE *)(a1 + 8) = v16;
    return result;
  }
  v20 = *v10;
  if ((*v10 & 0x8000000000000000) == 0)
  {
    v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B5BA0);
    result = swift_allocObject(v21, 40, 7);
    v15 = result;
    *(_OWORD *)(result + 16) = xmmword_2EA0D0;
    *(_QWORD *)(result + 32) = v20;
    v16 = 2;
    goto LABEL_7;
  }
  __break(1u);
  return result;
}

uint64_t sub_91230(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *a1;
  v2 = a1[1];
  v3 = swift_unknownObjectRetain(*a1);
  sub_921BC(v3, v2);
  return swift_unknownObjectRelease(v1);
}

uint64_t sub_9126C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t Strong;
  uint64_t v4;
  uint64_t v5;
  uint64_t ObjectType;
  unsigned __int8 *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  _BYTE v14[24];
  _BYTE v15[24];
  _BYTE v16[24];

  v1 = v0;
  v2 = v0 + 16;
  swift_beginAccess(v2, v16, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v2);
  if (Strong)
  {
    v4 = Strong;
    v5 = *(_QWORD *)(v1 + 24);
    ObjectType = swift_getObjectType(Strong);
    v7 = (unsigned __int8 *)(v1 + OBJC_IVAR____TtC8ShelfKit23BookmarkButtonPresenter_currentState);
    swift_beginAccess(v1 + OBJC_IVAR____TtC8ShelfKit23BookmarkButtonPresenter_currentState, v15, 0, 0);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v5 + 8))(*v7, ObjectType, v5);
    swift_unknownObjectRelease(v4);
  }
  swift_beginAccess(v1 + 32, v14, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v1 + 32);
  if (result)
  {
    v9 = result;
    v10 = *(_QWORD *)(v1 + 40);
    v11 = swift_getObjectType(result);
    v12 = (unsigned __int8 *)(v1 + OBJC_IVAR____TtC8ShelfKit23BookmarkButtonPresenter_currentState);
    swift_beginAccess(v1 + OBJC_IVAR____TtC8ShelfKit23BookmarkButtonPresenter_currentState, &v13, 0, 0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v10 + 16))(v1, *v12, v11, v10);
    return swift_unknownObjectRelease(v9);
  }
  return result;
}

uint64_t PodcastsTabBarPresenter.view.getter()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 16, v2, 0, 0);
  return swift_unknownObjectWeakLoadStrong(v0 + 16);
}

uint64_t sub_913C4(uint64_t a1, uint64_t a2)
{
  sub_921BC(a1, a2);
  return swift_unknownObjectRelease(a1);
}

void (*sub_913E8(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t Strong;
  uint64_t v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  swift_beginAccess(v1 + 16, v3, 33, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v3[3] = Strong;
  v3[4] = v5;
  return sub_91454;
}

void sub_91454(uint64_t a1, char a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD **)a1;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  *(_QWORD *)(v5 + 24) = *(_QWORD *)(*(_QWORD *)a1 + 32);
  swift_unknownObjectWeakAssign(v5 + 16, v4);
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRelease(v3[3]);
    swift_endAccess(v3);
  }
  else
  {
    swift_endAccess(v3);
    swift_unknownObjectRelease(v4);
    sub_9126C();
  }
  free(v3);
}

uint64_t sub_914CC()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 32, v2, 0, 0);
  return swift_unknownObjectWeakLoadStrong(v0 + 32);
}

uint64_t sub_91510(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v6[24];

  swift_beginAccess(v2 + 32, v6, 1, 0);
  *(_QWORD *)(v2 + 40) = a2;
  swift_unknownObjectWeakAssign(v2 + 32, a1);
  return swift_unknownObjectRelease(a1);
}

void (*sub_91570(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t Strong;
  uint64_t v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  swift_beginAccess(v1 + 32, v3, 33, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1 + 32);
  v5 = *(_QWORD *)(v1 + 40);
  v3[3] = Strong;
  v3[4] = v5;
  return sub_915DC;
}

void sub_915DC(uint64_t a1, char a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD **)a1;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  *(_QWORD *)(v5 + 40) = *(_QWORD *)(*(_QWORD *)a1 + 32);
  swift_unknownObjectWeakAssign(v5 + 32, v4);
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRelease(v3[3]);
    swift_endAccess(v3);
  }
  else
  {
    swift_endAccess(v3);
    swift_unknownObjectRelease(v4);
  }
  free(v3);
}

uint64_t sub_9164C()
{
  uint64_t v0;
  unsigned __int8 *v1;
  _BYTE v3[24];

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC8ShelfKit23BookmarkButtonPresenter_currentState);
  swift_beginAccess(v0 + OBJC_IVAR____TtC8ShelfKit23BookmarkButtonPresenter_currentState, v3, 0, 0);
  return *v1;
}

uint64_t sub_91690(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t Strong;
  uint64_t v6;
  uint64_t v7;
  uint64_t ObjectType;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[24];
  _BYTE v14[24];
  _BYTE v15[24];

  v2 = v1;
  v3 = a1 & 1;
  v4 = (_BYTE *)(v2 + OBJC_IVAR____TtC8ShelfKit23BookmarkButtonPresenter_currentState);
  swift_beginAccess(v2 + OBJC_IVAR____TtC8ShelfKit23BookmarkButtonPresenter_currentState, v15, 1, 0);
  *v4 = v3;
  swift_beginAccess(v2 + 16, v14, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v2 + 16);
  if (Strong)
  {
    v6 = Strong;
    v7 = *(_QWORD *)(v2 + 24);
    ObjectType = swift_getObjectType(Strong);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 8))(v3, ObjectType, v7);
    swift_unknownObjectRelease(v6);
  }
  swift_beginAccess(v2 + 32, v13, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v2 + 32);
  if (result)
  {
    v10 = result;
    v11 = *(_QWORD *)(v2 + 40);
    v12 = swift_getObjectType(result);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 8))(v2, *v4, v12, v11);
    return swift_unknownObjectRelease(v10);
  }
  return result;
}

uint64_t BookmarkButtonPresenter.__allocating_init(data:graph:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  v5 = sub_922E4(a1, a2);
  swift_release(a2);
  return v5;
}

uint64_t BookmarkButtonPresenter.init(data:graph:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_922E4(a1, a2);
  swift_release(a2);
  return v3;
}

uint64_t sub_91814(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t Strong;
  uint64_t v8;
  uint64_t v9;
  uint64_t ObjectType;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[24];
  _BYTE v16[24];
  _BYTE v17[31];
  _QWORD v18[3];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, (char *)v18 + 1, 0, 0);
  result = swift_weakLoadStrong(v2);
  if (result)
  {
    v4 = result;
    dispatch thunk of EpisodeStateMachine.currentState.getter(v18);
    v5 = LOBYTE(v18[0]);
    v6 = (_BYTE *)(v4 + OBJC_IVAR____TtC8ShelfKit23BookmarkButtonPresenter_currentState);
    swift_beginAccess(v4 + OBJC_IVAR____TtC8ShelfKit23BookmarkButtonPresenter_currentState, v17, 1, 0);
    *v6 = v5;
    swift_beginAccess(v4 + 16, v16, 0, 0);
    Strong = swift_unknownObjectWeakLoadStrong(v4 + 16);
    if (Strong)
    {
      v8 = Strong;
      v9 = *(_QWORD *)(v4 + 24);
      ObjectType = swift_getObjectType(Strong);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 8))(v5, ObjectType, v9);
      swift_unknownObjectRelease(v8);
    }
    swift_beginAccess(v4 + 32, v15, 0, 0);
    v11 = swift_unknownObjectWeakLoadStrong(v4 + 32);
    if (v11)
    {
      v12 = v11;
      v13 = *(_QWORD *)(v4 + 40);
      v14 = swift_getObjectType(v11);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 8))(v4, *v6, v14, v13);
      swift_release(v4);
      return swift_unknownObjectRelease(v12);
    }
    else
    {
      return swift_release(v4);
    }
  }
  return result;
}

uint64_t sub_91954()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v31[2];
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  _BYTE v38[8];
  _BYTE v39[24];

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B5978);
  __chkstk_darwin(v6);
  v8 = (char *)v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (_BYTE *)(v0 + OBJC_IVAR____TtC8ShelfKit23BookmarkButtonPresenter_currentState);
  swift_beginAccess(v9, v39, 0, 0);
  if ((*v9 & 1) != 0)
  {
    LOBYTE(v37) = 10;
    v10 = sub_91D44((unsigned __int8 *)&v37);
    static Logger.podcastsStatesCoordination.getter(v10);
    v11 = swift_retain_n(v1, 2);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.default.getter();
    v14 = v13;
    if (os_log_type_enabled(v12, v13))
    {
      v15 = swift_slowAlloc(22, -1);
      v33 = swift_slowAlloc(64, -1);
      v34 = v33;
      *(_DWORD *)v15 = 136315394;
      v32 = v14;
      sub_91098((uint64_t)&v37);
      v35 = v37;
      v36 = v38[0];
      v16 = String.init<A>(describing:)(&v35, &type metadata for BookmarksControllerEpisodeData);
      v37 = sub_69298(v16, v17, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, v38);
      swift_release_n(v1, 2);
      swift_bridgeObjectRelease();
      *(_WORD *)(v15 + 12) = 2080;
      v31[1] = v15 + 14;
      v18 = objc_msgSend((id)objc_opt_self(NSThread), "callStackSymbols");
      v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v18, &type metadata for String);

      v20 = Array.description.getter(v19, &type metadata for String);
      v22 = v21;
      swift_bridgeObjectRelease();
      v37 = sub_69298(v20, v22, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, v38);
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_0, v12, (os_log_type_t)v32, "BookmarkButtonPresenter.performPrimaryAction() - Unbookmarking episodes %s %s", (uint8_t *)v15, 0x16u);
      v23 = v33;
      swift_arrayDestroy(v33, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v23, -1, -1);
      swift_slowDealloc(v15, -1, -1);

    }
    else
    {

      swift_release_n(v1, 2);
    }
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    sub_91098((uint64_t)&v37);
    v35 = v37;
    v36 = v38[0];
    BookmarksController.removeEpisodesFromBookmarks(with:showHUDConfirmation:)((uint64_t)&v35, 0);
    return swift_bridgeObjectRelease();
  }
  else
  {
    LOBYTE(v37) = 11;
    sub_91D44((unsigned __int8 *)&v37);
    v24 = *(_QWORD *)(v1 + 48);
    sub_91098((uint64_t)&v37);
    v25 = v37;
    v26 = v38[0];
    v27 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v8, 1, 1, v27);
    v28 = swift_allocObject(&unk_37D308, 57, 7);
    *(_QWORD *)(v28 + 16) = 0;
    *(_QWORD *)(v28 + 24) = 0;
    *(_QWORD *)(v28 + 32) = v25;
    *(_BYTE *)(v28 + 40) = v26;
    *(_QWORD *)(v28 + 48) = v24;
    *(_BYTE *)(v28 + 56) = 0;
    swift_bridgeObjectRetain(v25);
    swift_retain(v24);
    v29 = sub_92090((uint64_t)v8, (uint64_t)&unk_3B5988, v28);
    swift_bridgeObjectRelease();
    return swift_release(v29);
  }
}

uint64_t sub_91D44(unsigned __int8 *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  int EnumCaseMultiPayload;
  unint64_t v17;
  Swift::String v18;
  uint64_t v20;
  void *v21;
  Swift::String v22;
  uint64_t v23;
  unint64_t v24;
  Swift::String v25;
  int v26;
  char v27;
  uint64_t v28;

  v2 = v1;
  v4 = type metadata accessor for EpisodeOffer(0);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = type metadata accessor for BookmarkButtonPresenter.Data(0);
  __chkstk_darwin(v7);
  v9 = (uint64_t *)((char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v26 = *a1;
  v10 = v2 + 7;
  v11 = v2[10];
  v12 = v2[11];
  __swift_project_boxed_opaque_existential_1(v2 + 7, v11);
  v13 = *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC8ShelfKit23BookmarkButtonPresenter_metricsController);
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 320);
  v15 = swift_retain(v13);
  v14(v15, v11, v12);
  swift_release(v13);
  sub_95CBC((uint64_t)v2 + OBJC_IVAR____TtC8ShelfKit23BookmarkButtonPresenter_data, (uint64_t)v9);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v9, v7);
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      sub_1E4B0((uint64_t)v9, (uint64_t)v6);
      __swift_project_boxed_opaque_existential_1(v10, v2[10]);
      v28 = *v6;
      v17 = sub_144B4();
      v18._countAndFlagsBits = BinaryInteger.description.getter(&type metadata for UInt64, v17);
      LOBYTE(v28) = v26;
      v27 = 1;
      LibraryActionControllerProtocol.makeAndSendMetricsEvent(adamId:actionType:pageType:)(v18, (ShelfKit::MetricsLabel)&v28, (ShelfKit::MetricsPageType)&v27);
      swift_bridgeObjectRelease();
      return sub_145D8((uint64_t)v6, type metadata accessor for EpisodeOffer);
    }
    v23 = *v9;
    __swift_project_boxed_opaque_existential_1(v10, v2[10]);
    v28 = v23;
    v24 = sub_144B4();
    v25._countAndFlagsBits = BinaryInteger.description.getter(&type metadata for UInt64, v24);
    LOBYTE(v28) = v26;
    v27 = 1;
    LibraryActionControllerProtocol.makeAndSendMetricsEvent(adamId:actionType:pageType:)(v25, (ShelfKit::MetricsLabel)&v28, (ShelfKit::MetricsPageType)&v27);
  }
  else
  {
    v20 = *v9;
    v21 = (void *)v9[1];
    __swift_project_boxed_opaque_existential_1(v10, v2[10]);
    LOBYTE(v28) = v26;
    v27 = 1;
    v22._countAndFlagsBits = v20;
    v22._object = v21;
    LibraryActionControllerProtocol.makeAndSendMetricsEvent(episodeUuid:actionType:pageType:)(v22, (ShelfKit::MetricsLabel)&v28, (ShelfKit::MetricsPageType)&v27);
  }
  return swift_bridgeObjectRelease();
}

uint64_t BookmarkButtonPresenter.deinit()
{
  uint64_t v0;

  sub_6FC38(v0 + 16);
  sub_6FC38(v0 + 32);
  swift_release(*(_QWORD *)(v0 + 48));
  __swift_destroy_boxed_opaque_existential_1((_QWORD *)(v0 + 56));
  sub_145D8(v0 + OBJC_IVAR____TtC8ShelfKit23BookmarkButtonPresenter_data, type metadata accessor for BookmarkButtonPresenter.Data);
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit23BookmarkButtonPresenter_stateMachine));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit23BookmarkButtonPresenter_metricsController));
  return v0;
}

uint64_t BookmarkButtonPresenter.__deallocating_deinit()
{
  _QWORD *v0;

  sub_6FC38((uint64_t)(v0 + 2));
  sub_6FC38((uint64_t)(v0 + 4));
  swift_release(v0[6]);
  __swift_destroy_boxed_opaque_existential_1(v0 + 7);
  sub_145D8((uint64_t)v0 + OBJC_IVAR____TtC8ShelfKit23BookmarkButtonPresenter_data, type metadata accessor for BookmarkButtonPresenter.Data);
  swift_release(*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC8ShelfKit23BookmarkButtonPresenter_stateMachine));
  swift_release(*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC8ShelfKit23BookmarkButtonPresenter_metricsController));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_92090(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unsigned __int8 v16;
  _QWORD v18[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) == 1)
  {
    sub_95C7C(a1);
    v8 = 7168;
    v9 = *(_QWORD *)(a3 + 16);
    if (!v9)
    {
LABEL_6:
      v15 = 0;
      return swift_task_create(v8, v15, (char *)&type metadata for () + 8, a2, a3);
    }
  }
  else
  {
    v16 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v8 = v16 | 0x1C00;
    v9 = *(_QWORD *)(a3 + 16);
    if (!v9)
      goto LABEL_6;
  }
  v10 = *(_QWORD *)(a3 + 24);
  ObjectType = swift_getObjectType();
  swift_unknownObjectRetain(v9);
  v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
  v14 = v13;
  swift_unknownObjectRelease(v9);
  if (!(v14 | v12))
    goto LABEL_6;
  v18[0] = 0;
  v18[1] = 0;
  v15 = v18;
  v18[2] = v12;
  v18[3] = v14;
  return swift_task_create(v8, v15, (char *)&type metadata for () + 8, a2, a3);
}

uint64_t sub_921BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t Strong;
  uint64_t v8;
  uint64_t v9;
  uint64_t ObjectType;
  unsigned __int8 *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  _BYTE v18[24];
  _BYTE v19[24];
  _BYTE v20[24];

  v3 = v2;
  swift_beginAccess(v3 + 16, v20, 1, 0);
  *(_QWORD *)(v3 + 24) = a2;
  v6 = swift_unknownObjectWeakAssign(v3 + 16, a1);
  Strong = swift_unknownObjectWeakLoadStrong(v6);
  if (Strong)
  {
    v8 = Strong;
    v9 = *(_QWORD *)(v3 + 24);
    ObjectType = swift_getObjectType(Strong);
    v11 = (unsigned __int8 *)(v3 + OBJC_IVAR____TtC8ShelfKit23BookmarkButtonPresenter_currentState);
    swift_beginAccess(v3 + OBJC_IVAR____TtC8ShelfKit23BookmarkButtonPresenter_currentState, v19, 0, 0);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v9 + 8))(*v11, ObjectType, v9);
    swift_unknownObjectRelease(v8);
  }
  swift_beginAccess(v3 + 32, v18, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v3 + 32);
  if (result)
  {
    v13 = result;
    v14 = *(_QWORD *)(v3 + 40);
    v15 = swift_getObjectType(result);
    v16 = (unsigned __int8 *)(v3 + OBJC_IVAR____TtC8ShelfKit23BookmarkButtonPresenter_currentState);
    swift_beginAccess(v3 + OBJC_IVAR____TtC8ShelfKit23BookmarkButtonPresenter_currentState, &v17, 0, 0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 16))(v3, *v16, v15, v14);
    return swift_unknownObjectRelease(v13);
  }
  return result;
}

uint64_t sub_922E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int EnumCaseMultiPayload;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  __int128 v25[2];

  v3 = v2;
  v6 = type metadata accessor for EpisodeOffer(0);
  __chkstk_darwin(v6);
  v8 = (uint64_t *)((char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = type metadata accessor for BookmarkButtonPresenter.Data(0);
  __chkstk_darwin(v9);
  v11 = (uint64_t *)((char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  *(_QWORD *)(v2 + 24) = 0;
  swift_unknownObjectWeakInit(v2 + 16, 0);
  *(_QWORD *)(v2 + 40) = 0;
  swift_unknownObjectWeakInit(v2 + 32, 0);
  sub_95CBC(a1, v2 + OBJC_IVAR____TtC8ShelfKit23BookmarkButtonPresenter_data);
  v12 = type metadata accessor for BookmarksController();
  v13 = type metadata accessor for BaseObjectGraph(0);
  inject<A, B>(_:from:)(v25, v12, a2, v12, v13);
  *(_QWORD *)(v3 + 48) = *(_QWORD *)&v25[0];
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BC3F0);
  inject<A, B>(_:from:)(v25, v14, a2, v14, v13);
  sub_F4D8(v25, v3 + 56);
  v15 = type metadata accessor for MetricsController(0);
  swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
  v16 = swift_retain(a2);
  *(_QWORD *)(v3 + OBJC_IVAR____TtC8ShelfKit23BookmarkButtonPresenter_metricsController) = MetricsController.init(asPartOf:)(v16);
  v17 = __swift_instantiateConcreteTypeFromMangledName(qword_3B5BB0);
  inject<A, B>(_:from:)(v25, v17, a2, v17, v13);
  v18 = *(_QWORD *)&v25[0];
  sub_95CBC(a1, (uint64_t)v11);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v11, v9);
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      sub_1E4B0((uint64_t)v11, (uint64_t)v8);
      v20 = EpisodeStateController.stateMachine(for:)(*v8);
      sub_145D8((uint64_t)v8, type metadata accessor for EpisodeOffer);
    }
    else
    {
      v20 = EpisodeStateController.stateMachine(for:)(*v11);
    }
  }
  else
  {
    v20 = EpisodeStateController.stateMachine(for:)(*v11, v11[1]);
    swift_bridgeObjectRelease();
  }
  *(_QWORD *)(v3 + OBJC_IVAR____TtC8ShelfKit23BookmarkButtonPresenter_stateMachine) = v20;
  dispatch thunk of EpisodeStateMachine.currentState.getter(v25);
  *(_BYTE *)(v3 + OBJC_IVAR____TtC8ShelfKit23BookmarkButtonPresenter_currentState) = v25[0];
  v21 = swift_allocObject(&unk_37D360, 24, 7);
  swift_weakInit(v21 + 16);
  v22 = swift_retain(v3);
  dispatch thunk of EpisodeStateMachine.addStateTransitionObserver(_:action:)(v22, sub_95D24, v21);
  swift_release(v18);
  swift_release(v3);
  swift_release(v21);
  sub_145D8(a1, type metadata accessor for BookmarkButtonPresenter.Data);
  return v3;
}

uint64_t sub_92598()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_bridgeObjectRelease(v0[4]);
  swift_release(v0[6]);
  return swift_deallocObject(v0, 57, 7);
}

uint64_t sub_925CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_QWORD *)(v1 + 48);
  v8 = *(_BYTE *)(v1 + 56);
  v9 = *(_BYTE *)(v1 + 40);
  v10 = (_QWORD *)swift_task_alloc(dword_3BF2A4);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_43684;
  return sub_196CA0(a1, v4, v5, v6, v9, v7, v8);
}

uint64_t type metadata accessor for BookmarkButtonPresenter.Data(uint64_t a1)
{
  return sub_1F9D4(a1, qword_3B5B68, (uint64_t)&nominal type descriptor for BookmarkButtonPresenter.Data);
}

uint64_t sub_92674@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  char v7[24];

  v3 = *a1;
  v4 = *a1 + 16;
  swift_beginAccess(v4, v7, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v4);
  v6 = *(_QWORD *)(v3 + 24);
  *a2 = result;
  a2[1] = v6;
  return result;
}

uint64_t sub_926D0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  char v7[24];

  v3 = *a1;
  v4 = *a1 + 32;
  swift_beginAccess(v4, v7, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v4);
  v6 = *(_QWORD *)(v3 + 40);
  *a2 = result;
  a2[1] = v6;
  return result;
}

uint64_t sub_92728(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v7[24];

  v2 = *a1;
  v3 = a1[1];
  v4 = *a2;
  v5 = *a2 + 32;
  swift_beginAccess(v5, v7, 1, 0);
  *(_QWORD *)(v4 + 40) = v3;
  return swift_unknownObjectWeakAssign(v5, v2);
}

uint64_t sub_92780@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v3;
  uint64_t result;
  _BYTE v5[24];

  v3 = (_BYTE *)(*a1 + OBJC_IVAR____TtC8ShelfKit23BookmarkButtonPresenter_currentState);
  result = swift_beginAccess(v3, v5, 0, 0);
  *a2 = *v3;
  return result;
}

uint64_t sub_927D0(char *a1)
{
  return sub_91690(*a1);
}

uint64_t dispatch thunk of InterfaceModeAwarePresenter.didTransition(to:)(char a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD))(a3 + 8))(a1 & 1);
}

uint64_t dispatch thunk of BookmarkButtonPresenterDelegate.bookmarkButtonPresenter(_:stateDidChange:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(a4 + 8))(a1, a2 & 1);
}

uint64_t dispatch thunk of BookmarkButtonPresenterDelegate.bookmarkButtonPresenter(_:didWireViewWithInitialState:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(a4 + 16))(a1, a2 & 1);
}

uint64_t sub_92818()
{
  return type metadata accessor for BookmarkButtonPresenter(0);
}

uint64_t type metadata accessor for BookmarkButtonPresenter(uint64_t a1)
{
  return sub_1F9D4(a1, qword_3B59C8, (uint64_t)&nominal type descriptor for BookmarkButtonPresenter);
}

uint64_t sub_92834(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[8];

  v4[0] = &unk_2F0F58;
  v4[1] = &unk_2F0F58;
  v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[3] = &unk_2F0F70;
  result = type metadata accessor for BookmarkButtonPresenter.Data(319);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(result - 8) + 64;
    v4[5] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[6] = &unk_2F0F88;
    v4[7] = (char *)&value witness table for Builtin.NativeObject + 64;
    result = swift_updateClassMetadata2(a1, 256, 8, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for BookmarkButtonPresenter(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for BookmarkButtonPresenter);
}

uint64_t dispatch thunk of BookmarkButtonPresenter.view.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of BookmarkButtonPresenter.delegate.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of BookmarkButtonPresenter.delegate.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of BookmarkButtonPresenter.currentState.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))() & 1;
}

uint64_t dispatch thunk of SeeAllEpisodesPresenter.__allocating_init(asPartOf:with:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 240))();
}

char *initializeBufferWithCopyOfBuffer for BookmarkButtonPresenter.Data(char *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unsigned int (*v24)(_QWORD *, uint64_t, int *);
  uint64_t v25;
  char *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  id *v31;
  int v32;
  id v33;
  id *v34;
  int v35;
  id v36;
  id *v37;
  int v38;
  id v39;
  id *v40;
  int v41;
  id v42;
  id *v43;
  int v44;
  id v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  void (*v58)(char *, _QWORD, uint64_t, int *);
  uint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int (*v80)(char *, uint64_t, uint64_t);
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  void (*v103)(char *, char *, uint64_t);
  uint64_t v104;
  char *v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  char *v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  id *v125;
  int v126;
  id v127;
  id *v128;
  int v129;
  id v130;
  id *v131;
  int v132;
  id v133;
  id *v134;
  int v135;
  id v136;
  id *v137;
  int v138;
  id v139;
  uint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  _QWORD *v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  _QWORD *v150;
  uint64_t v151;
  void (*v152)(char *, _QWORD, uint64_t, int *);
  uint64_t v153;
  char *v154;
  _QWORD *v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  char *v159;
  uint64_t v160;
  char *v161;
  char *v162;
  uint64_t v163;
  char *v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  unsigned int (*v168)(char *, uint64_t, uint64_t);
  uint64_t v169;
  uint64_t v171;
  char *__dst;
  unsigned int (*v173)(_QWORD *, uint64_t, int *);
  int *v174;
  uint64_t v175;
  int *v176;
  char *v177;
  int *v178;
  char *v179;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v13 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = (char *)(v13 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain(v13);
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v14 = a2[2];
      *((_QWORD *)a1 + 2) = v14;
      v15 = type metadata accessor for EpisodeOffer(0);
      v16 = *(int *)(v15 + 24);
      v17 = &a1[v16];
      v18 = (char *)a2 + v16;
      *(_OWORD *)v17 = *(_OWORD *)((char *)a2 + v16);
      v19 = *(_QWORD *)((char *)a2 + v16 + 16);
      *((_QWORD *)v17 + 2) = v19;
      v17[24] = *((_BYTE *)a2 + v16 + 24);
      v177 = &a1[v16];
      v178 = (int *)type metadata accessor for ShowOffer(0);
      v20 = v178[7];
      v21 = &v17[v20];
      v179 = v18;
      v22 = &v18[v20];
      v23 = type metadata accessor for ArtworkModel(0);
      v171 = *(_QWORD *)(v23 - 8);
      v24 = *(unsigned int (**)(_QWORD *, uint64_t, int *))(v171 + 48);
      swift_bridgeObjectRetain(v14);
      v176 = (int *)v23;
      swift_bridgeObjectRetain(v19);
      v173 = v24;
      v174 = (int *)v15;
      v175 = a3;
      if (v24(v22, 1, (int *)v23))
      {
        v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
        memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
        v26 = v177;
      }
      else
      {
        v27 = *((_QWORD *)v22 + 1);
        *(_QWORD *)v21 = *(_QWORD *)v22;
        *((_QWORD *)v21 + 1) = v27;
        v28 = v22[32];
        swift_bridgeObjectRetain(v27);
        if (v28 == 255)
        {
          *((_OWORD *)v21 + 1) = *((_OWORD *)v22 + 1);
          v21[32] = v22[32];
        }
        else
        {
          v30 = *((_QWORD *)v22 + 2);
          v29 = *((_QWORD *)v22 + 3);
          sub_3D464(v30, v29, v28);
          *((_QWORD *)v21 + 2) = v30;
          *((_QWORD *)v21 + 3) = v29;
          v21[32] = v28;
        }
        v26 = v177;
        *(_OWORD *)(v21 + 40) = *(_OWORD *)(v22 + 40);
        v31 = (id *)(v22 + 56);
        v32 = v22[64];
        if (v32 == 255)
        {
          *((_QWORD *)v21 + 7) = *v31;
          v21[64] = v22[64];
        }
        else
        {
          v33 = *v31;
          sub_3D47C(*v31, v22[64]);
          *((_QWORD *)v21 + 7) = v33;
          v21[64] = v32;
        }
        v34 = (id *)(v22 + 72);
        v35 = v22[80];
        if (v35 == 255)
        {
          *((_QWORD *)v21 + 9) = *v34;
          v21[80] = v22[80];
        }
        else
        {
          v36 = *v34;
          sub_3D47C(*v34, v22[80]);
          *((_QWORD *)v21 + 9) = v36;
          v21[80] = v35;
        }
        v37 = (id *)(v22 + 88);
        v38 = v22[96];
        if (v38 == 255)
        {
          *((_QWORD *)v21 + 11) = *v37;
          v21[96] = v22[96];
        }
        else
        {
          v39 = *v37;
          sub_3D47C(*v37, v22[96]);
          *((_QWORD *)v21 + 11) = v39;
          v21[96] = v38;
        }
        v40 = (id *)(v22 + 104);
        v41 = v22[112];
        if (v41 == 255)
        {
          *((_QWORD *)v21 + 13) = *v40;
          v21[112] = v22[112];
        }
        else
        {
          v42 = *v40;
          sub_3D47C(*v40, v22[112]);
          *((_QWORD *)v21 + 13) = v42;
          v21[112] = v41;
        }
        v43 = (id *)(v22 + 120);
        v44 = v22[128];
        if (v44 == 255)
        {
          *((_QWORD *)v21 + 15) = *v43;
          v21[128] = v22[128];
        }
        else
        {
          v45 = *v43;
          sub_3D47C(*v43, v22[128]);
          *((_QWORD *)v21 + 15) = v45;
          v21[128] = v44;
        }
        v21[129] = v22[129];
        v46 = v176[11];
        v47 = &v21[v46];
        v48 = &v22[v46];
        v49 = type metadata accessor for ArtworkCrop(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v49 - 8) + 16))(v47, v48, v49);
        v50 = v176[12];
        v51 = &v21[v50];
        v52 = &v22[v50];
        v53 = *((_QWORD *)v52 + 1);
        *(_QWORD *)v51 = *(_QWORD *)v52;
        *((_QWORD *)v51 + 1) = v53;
        v21[v176[13]] = v22[v176[13]];
        v21[v176[14]] = v22[v176[14]];
        v21[v176[15]] = v22[v176[15]];
        v54 = v176[16];
        v55 = &v21[v54];
        v56 = &v22[v54];
        v57 = *((_QWORD *)v56 + 1);
        *(_QWORD *)v55 = *(_QWORD *)v56;
        *((_QWORD *)v55 + 1) = v57;
        v58 = *(void (**)(char *, _QWORD, uint64_t, int *))(v171 + 56);
        swift_bridgeObjectRetain(v53);
        swift_bridgeObjectRetain(v57);
        v58(v21, 0, 1, v176);
      }
      v59 = v178[8];
      v60 = &v26[v59];
      v61 = &v179[v59];
      v62 = v26;
      v63 = *((_QWORD *)v61 + 1);
      *(_QWORD *)v60 = *(_QWORD *)v61;
      *((_QWORD *)v60 + 1) = v63;
      v64 = v178[9];
      v65 = &v62[v64];
      v66 = &v179[v64];
      v67 = *((_QWORD *)v66 + 1);
      *(_QWORD *)v65 = *(_QWORD *)v66;
      *((_QWORD *)v65 + 1) = v67;
      v62[v178[10]] = v179[v178[10]];
      v68 = v178[11];
      v69 = &v62[v68];
      v70 = &v179[v68];
      v71 = *((_QWORD *)v70 + 1);
      *(_QWORD *)v69 = *(_QWORD *)v70;
      *((_QWORD *)v69 + 1) = v71;
      v72 = v178[12];
      v73 = &v62[v72];
      v74 = &v179[v72];
      v75 = *((_QWORD *)v74 + 1);
      *(_QWORD *)v73 = *(_QWORD *)v74;
      *((_QWORD *)v73 + 1) = v75;
      v76 = v178[13];
      __dst = &v62[v76];
      v77 = &v179[v76];
      v78 = type metadata accessor for URL(0);
      v79 = *(_QWORD *)(v78 - 8);
      v80 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v79 + 48);
      swift_bridgeObjectRetain(v63);
      swift_bridgeObjectRetain(v67);
      swift_bridgeObjectRetain(v71);
      swift_bridgeObjectRetain(v75);
      if (v80(v77, 1, v78))
      {
        v81 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
        memcpy(__dst, v77, *(_QWORD *)(*(_QWORD *)(v81 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v79 + 16))(__dst, v77, v78);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v79 + 56))(__dst, 0, 1, v78);
      }
      v82 = v79;
      v83 = v178[14];
      v84 = &v177[v83];
      v85 = &v179[v83];
      v86 = *((_QWORD *)v85 + 1);
      *(_QWORD *)v84 = *(_QWORD *)v85;
      *((_QWORD *)v84 + 1) = v86;
      v87 = v178[15];
      v88 = &v177[v87];
      v89 = &v179[v87];
      v90 = *((_QWORD *)v89 + 1);
      *(_QWORD *)v88 = *(_QWORD *)v89;
      *((_QWORD *)v88 + 1) = v90;
      v91 = v178[16];
      v92 = &v177[v91];
      v93 = &v179[v91];
      swift_bridgeObjectRetain(v86);
      swift_bridgeObjectRetain(v90);
      if (v80(v93, 1, v78))
      {
        v94 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
        memcpy(v92, v93, *(_QWORD *)(*(_QWORD *)(v94 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v82 + 16))(v92, v93, v78);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v82 + 56))(v92, 0, 1, v78);
      }
      v95 = v178[17];
      v96 = &v177[v95];
      v97 = &v179[v95];
      if (v80(&v179[v95], 1, v78))
      {
        v98 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
        memcpy(v96, v97, *(_QWORD *)(*(_QWORD *)(v98 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v82 + 16))(v96, v97, v78);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v82 + 56))(v96, 0, 1, v78);
      }
      v177[v178[18]] = v179[v178[18]];
      v99 = v174[7];
      v100 = &a1[v99];
      v101 = (char *)a2 + v99;
      if (v80((char *)a2 + v99, 1, v78))
      {
        v102 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
        memcpy(v100, v101, *(_QWORD *)(*(_QWORD *)(v102 - 8) + 64));
        (*(void (**)(char *, char *, uint64_t))(v82 + 16))(&a1[v174[8]], (char *)a2 + v174[8], v78);
      }
      else
      {
        v103 = *(void (**)(char *, char *, uint64_t))(v82 + 16);
        v103(v100, v101, v78);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v82 + 56))(v100, 0, 1, v78);
        v103(&a1[v174[8]], (char *)a2 + v174[8], v78);
      }
      *(_QWORD *)&a1[v174[9]] = *(_QWORD *)((char *)a2 + v174[9]);
      v104 = v174[10];
      v105 = &a1[v104];
      v106 = (_QWORD *)((char *)a2 + v104);
      v107 = v106[1];
      *(_QWORD *)v105 = *v106;
      *((_QWORD *)v105 + 1) = v107;
      v108 = v174[11];
      v109 = &a1[v108];
      v110 = (_QWORD *)((char *)a2 + v108);
      v111 = v110[1];
      *(_QWORD *)v109 = *v110;
      *((_QWORD *)v109 + 1) = v111;
      v112 = v174[12];
      v113 = *(_QWORD *)((char *)a2 + v112);
      *(_QWORD *)&a1[v112] = v113;
      a1[v174[13]] = *((_BYTE *)a2 + v174[13]);
      a1[v174[14]] = *((_BYTE *)a2 + v174[14]);
      v114 = v174[15];
      v115 = &a1[v114];
      v116 = (char *)a2 + v114;
      *(_QWORD *)v115 = *(_QWORD *)v116;
      v115[8] = v116[8];
      v117 = v174[16];
      v118 = &a1[v117];
      v119 = (_QWORD *)((char *)a2 + v117);
      swift_bridgeObjectRetain(v107);
      swift_bridgeObjectRetain(v111);
      swift_retain(v113);
      if (v173(v119, 1, v176))
      {
        v120 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
        memcpy(v118, v119, *(_QWORD *)(*(_QWORD *)(v120 - 8) + 64));
      }
      else
      {
        v121 = v119[1];
        *(_QWORD *)v118 = *v119;
        *((_QWORD *)v118 + 1) = v121;
        v122 = *((unsigned __int8 *)v119 + 32);
        swift_bridgeObjectRetain(v121);
        if (v122 == 255)
        {
          *((_OWORD *)v118 + 1) = *((_OWORD *)v119 + 1);
          v118[32] = *((_BYTE *)v119 + 32);
        }
        else
        {
          v123 = v119[2];
          v124 = v119[3];
          sub_3D464(v123, v124, v122);
          *((_QWORD *)v118 + 2) = v123;
          *((_QWORD *)v118 + 3) = v124;
          v118[32] = v122;
        }
        *(_OWORD *)(v118 + 40) = *(_OWORD *)(v119 + 5);
        v125 = (id *)(v119 + 7);
        v126 = *((unsigned __int8 *)v119 + 64);
        if (v126 == 255)
        {
          *((_QWORD *)v118 + 7) = *v125;
          v118[64] = *((_BYTE *)v119 + 64);
        }
        else
        {
          v127 = *v125;
          sub_3D47C(*v125, *((_BYTE *)v119 + 64));
          *((_QWORD *)v118 + 7) = v127;
          v118[64] = v126;
        }
        v128 = (id *)(v119 + 9);
        v129 = *((unsigned __int8 *)v119 + 80);
        if (v129 == 255)
        {
          *((_QWORD *)v118 + 9) = *v128;
          v118[80] = *((_BYTE *)v119 + 80);
        }
        else
        {
          v130 = *v128;
          sub_3D47C(*v128, *((_BYTE *)v119 + 80));
          *((_QWORD *)v118 + 9) = v130;
          v118[80] = v129;
        }
        v131 = (id *)(v119 + 11);
        v132 = *((unsigned __int8 *)v119 + 96);
        if (v132 == 255)
        {
          *((_QWORD *)v118 + 11) = *v131;
          v118[96] = *((_BYTE *)v119 + 96);
        }
        else
        {
          v133 = *v131;
          sub_3D47C(*v131, *((_BYTE *)v119 + 96));
          *((_QWORD *)v118 + 11) = v133;
          v118[96] = v132;
        }
        v134 = (id *)(v119 + 13);
        v135 = *((unsigned __int8 *)v119 + 112);
        if (v135 == 255)
        {
          *((_QWORD *)v118 + 13) = *v134;
          v118[112] = *((_BYTE *)v119 + 112);
        }
        else
        {
          v136 = *v134;
          sub_3D47C(*v134, *((_BYTE *)v119 + 112));
          *((_QWORD *)v118 + 13) = v136;
          v118[112] = v135;
        }
        v137 = (id *)(v119 + 15);
        v138 = *((unsigned __int8 *)v119 + 128);
        if (v138 == 255)
        {
          *((_QWORD *)v118 + 15) = *v137;
          v118[128] = *((_BYTE *)v119 + 128);
        }
        else
        {
          v139 = *v137;
          sub_3D47C(*v137, *((_BYTE *)v119 + 128));
          *((_QWORD *)v118 + 15) = v139;
          v118[128] = v138;
        }
        v118[129] = *((_BYTE *)v119 + 129);
        v140 = v176[11];
        v141 = &v118[v140];
        v142 = (char *)v119 + v140;
        v143 = type metadata accessor for ArtworkCrop(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v143 - 8) + 16))(v141, v142, v143);
        v144 = v176[12];
        v145 = &v118[v144];
        v146 = (_QWORD *)((char *)v119 + v144);
        v147 = v146[1];
        *(_QWORD *)v145 = *v146;
        *((_QWORD *)v145 + 1) = v147;
        v118[v176[13]] = *((_BYTE *)v119 + v176[13]);
        v118[v176[14]] = *((_BYTE *)v119 + v176[14]);
        v118[v176[15]] = *((_BYTE *)v119 + v176[15]);
        v148 = v176[16];
        v149 = &v118[v148];
        v150 = (_QWORD *)((char *)v119 + v148);
        v151 = v150[1];
        *(_QWORD *)v149 = *v150;
        *((_QWORD *)v149 + 1) = v151;
        v152 = *(void (**)(char *, _QWORD, uint64_t, int *))(v171 + 56);
        swift_bridgeObjectRetain(v147);
        swift_bridgeObjectRetain(v151);
        v152(v118, 0, 1, v176);
      }
      v153 = v174[17];
      v154 = &a1[v153];
      v155 = (_QWORD *)((char *)a2 + v153);
      v156 = v155[1];
      *(_QWORD *)v154 = *v155;
      *((_QWORD *)v154 + 1) = v156;
      v157 = v174[18];
      v158 = &a1[v157];
      v159 = (char *)a2 + v157;
      v158[8] = v159[8];
      *(_QWORD *)v158 = *(_QWORD *)v159;
      v160 = v174[19];
      v161 = &a1[v160];
      v162 = (char *)a2 + v160;
      *(_QWORD *)v161 = *(_QWORD *)v162;
      v161[8] = v162[8];
      a1[v174[20]] = *((_BYTE *)a2 + v174[20]);
      a1[v174[21]] = *((_BYTE *)a2 + v174[21]);
      v163 = v174[22];
      v164 = &a1[v163];
      v165 = (char *)a2 + v163;
      v166 = type metadata accessor for TranscriptRequestInformation(0);
      v167 = *(_QWORD *)(v166 - 8);
      v168 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v167 + 48);
      swift_bridgeObjectRetain(v156);
      if (v168(v165, 1, v166))
      {
        v169 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2C40);
        memcpy(v164, v165, *(_QWORD *)(*(_QWORD *)(v169 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v167 + 16))(v164, v165, v166);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v167 + 56))(v164, 0, 1, v166);
      }
      v10 = a1;
      v11 = v175;
      v12 = 1;
      goto LABEL_65;
    }
    if (!EnumCaseMultiPayload)
    {
      v9 = a2[1];
      *(_QWORD *)a1 = *a2;
      *((_QWORD *)a1 + 1) = v9;
      swift_bridgeObjectRetain(v9);
      v10 = a1;
      v11 = a3;
      v12 = 0;
LABEL_65:
      swift_storeEnumTagMultiPayload(v10, v11, v12);
      return a1;
    }
    memcpy(a1, a2, *(_QWORD *)(v5 + 64));
  }
  return a1;
}

uint64_t destroy for BookmarkButtonPresenter.Data(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int *v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(uint64_t, uint64_t, uint64_t);
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  void (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  result = swift_getEnumCaseMultiPayload(a1, a2);
  if ((_DWORD)result == 1)
  {
    swift_bridgeObjectRelease();
    v4 = (int *)type metadata accessor for EpisodeOffer(0);
    v5 = a1 + v4[6];
    swift_bridgeObjectRelease();
    v6 = (int *)type metadata accessor for ShowOffer(0);
    v7 = v5 + v6[7];
    v8 = type metadata accessor for ArtworkModel(0);
    v9 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
    if (!v9(v7, 1, v8))
    {
      swift_bridgeObjectRelease();
      v10 = *(unsigned __int8 *)(v7 + 32);
      if (v10 != 255)
        sub_3B5BC(*(_QWORD *)(v7 + 16), *(_QWORD *)(v7 + 24), v10);
      v11 = *(unsigned __int8 *)(v7 + 64);
      if (v11 != 255)
        sub_3D624(*(id *)(v7 + 56), v11);
      v12 = *(unsigned __int8 *)(v7 + 80);
      if (v12 != 255)
        sub_3D624(*(id *)(v7 + 72), v12);
      v13 = *(unsigned __int8 *)(v7 + 96);
      if (v13 != 255)
        sub_3D624(*(id *)(v7 + 88), v13);
      v14 = *(unsigned __int8 *)(v7 + 112);
      if (v14 != 255)
        sub_3D624(*(id *)(v7 + 104), v14);
      v15 = *(unsigned __int8 *)(v7 + 128);
      if (v15 != 255)
        sub_3D624(*(id *)(v7 + 120), v15);
      v16 = v7 + *(int *)(v8 + 44);
      v17 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v18 = v5 + v6[13];
    v19 = type metadata accessor for URL(0);
    v20 = *(_QWORD *)(v19 - 8);
    v21 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48);
    if (!v21(v18, 1, v19))
      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v18, v19);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v22 = v5 + v6[16];
    if (!v21(v22, 1, v19))
      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v22, v19);
    v23 = v5 + v6[17];
    if (!v21(v23, 1, v19))
      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v23, v19);
    v24 = a1 + v4[7];
    v25 = v21(v24, 1, v19);
    v26 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
    if (!v25)
      v26(v24, v19);
    v26(a1 + v4[8], v19);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release(*(_QWORD *)(a1 + v4[12]));
    v27 = a1 + v4[16];
    if (!v9(v27, 1, v8))
    {
      swift_bridgeObjectRelease();
      v28 = *(unsigned __int8 *)(v27 + 32);
      if (v28 != 255)
        sub_3B5BC(*(_QWORD *)(v27 + 16), *(_QWORD *)(v27 + 24), v28);
      v29 = *(unsigned __int8 *)(v27 + 64);
      if (v29 != 255)
        sub_3D624(*(id *)(v27 + 56), v29);
      v30 = *(unsigned __int8 *)(v27 + 80);
      if (v30 != 255)
        sub_3D624(*(id *)(v27 + 72), v30);
      v31 = *(unsigned __int8 *)(v27 + 96);
      if (v31 != 255)
        sub_3D624(*(id *)(v27 + 88), v31);
      v32 = *(unsigned __int8 *)(v27 + 112);
      if (v32 != 255)
        sub_3D624(*(id *)(v27 + 104), v32);
      v33 = *(unsigned __int8 *)(v27 + 128);
      if (v33 != 255)
        sub_3D624(*(id *)(v27 + 120), v33);
      v34 = v27 + *(int *)(v8 + 44);
      v35 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 8))(v34, v35);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    v36 = a1 + v4[22];
    v37 = type metadata accessor for TranscriptRequestInformation(0);
    v38 = *(_QWORD *)(v37 - 8);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37);
    if (!(_DWORD)result)
      return (*(uint64_t (**)(uint64_t, uint64_t))(v38 + 8))(v36, v37);
  }
  else if (!(_DWORD)result)
  {
    return swift_bridgeObjectRelease();
  }
  return result;
}

_QWORD *initializeWithCopy for BookmarkButtonPresenter.Data(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unsigned int (*v21)(_QWORD *, uint64_t, int *);
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  id *v27;
  int v28;
  id v29;
  id *v30;
  int v31;
  id v32;
  id *v33;
  int v34;
  id v35;
  id *v36;
  int v37;
  id v38;
  id *v39;
  int v40;
  id v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  void (*v54)(char *, _QWORD, uint64_t, int *);
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int (*v76)(char *, uint64_t, uint64_t);
  unsigned int (*v77)(char *, uint64_t, uint64_t);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  void (*v100)(char *, char *, uint64_t);
  uint64_t v101;
  _QWORD *v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  _QWORD *v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  id *v122;
  int v123;
  id v124;
  id *v125;
  int v126;
  id v127;
  id *v128;
  int v129;
  id v130;
  id *v131;
  int v132;
  id v133;
  id *v134;
  int v135;
  id v136;
  uint64_t v137;
  char *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  _QWORD *v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  _QWORD *v147;
  uint64_t v148;
  void (*v149)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v150;
  _QWORD *v151;
  _QWORD *v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  char *v156;
  uint64_t v157;
  char *v158;
  char *v159;
  uint64_t v160;
  char *v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  unsigned int (*v165)(char *, uint64_t, uint64_t);
  uint64_t v166;
  uint64_t v168;
  char *__dst;
  unsigned int (*v170)(_QWORD *, uint64_t, int *);
  int *v171;
  uint64_t v172;
  _QWORD *v173;
  int *v174;
  int *v175;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 1)
  {
    v172 = a3;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v11 = a2[2];
    a1[2] = v11;
    v12 = type metadata accessor for EpisodeOffer(0);
    v13 = *(int *)(v12 + 24);
    v173 = a1;
    v14 = (char *)a1 + v13;
    v15 = (char *)a2 + v13;
    *(_OWORD *)v14 = *(_OWORD *)((char *)a2 + v13);
    v16 = *(_QWORD *)((char *)a2 + v13 + 16);
    *((_QWORD *)v14 + 2) = v16;
    v14[24] = *((_BYTE *)a2 + v13 + 24);
    v175 = (int *)type metadata accessor for ShowOffer(0);
    v17 = v175[7];
    v18 = &v14[v17];
    v19 = &v15[v17];
    v20 = type metadata accessor for ArtworkModel(0);
    v168 = *(_QWORD *)(v20 - 8);
    v21 = *(unsigned int (**)(_QWORD *, uint64_t, int *))(v168 + 48);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v16);
    v174 = (int *)v20;
    v170 = v21;
    v171 = (int *)v12;
    if (v21(v19, 1, (int *)v20))
    {
      v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      v23 = *((_QWORD *)v19 + 1);
      *(_QWORD *)v18 = *(_QWORD *)v19;
      *((_QWORD *)v18 + 1) = v23;
      v24 = v19[32];
      swift_bridgeObjectRetain(v23);
      if (v24 == 255)
      {
        *((_OWORD *)v18 + 1) = *((_OWORD *)v19 + 1);
        v18[32] = v19[32];
      }
      else
      {
        v26 = *((_QWORD *)v19 + 2);
        v25 = *((_QWORD *)v19 + 3);
        sub_3D464(v26, v25, v24);
        *((_QWORD *)v18 + 2) = v26;
        *((_QWORD *)v18 + 3) = v25;
        v18[32] = v24;
      }
      *(_OWORD *)(v18 + 40) = *(_OWORD *)(v19 + 40);
      v27 = (id *)(v19 + 56);
      v28 = v19[64];
      if (v28 == 255)
      {
        *((_QWORD *)v18 + 7) = *v27;
        v18[64] = v19[64];
      }
      else
      {
        v29 = *v27;
        sub_3D47C(*v27, v19[64]);
        *((_QWORD *)v18 + 7) = v29;
        v18[64] = v28;
      }
      v30 = (id *)(v19 + 72);
      v31 = v19[80];
      if (v31 == 255)
      {
        *((_QWORD *)v18 + 9) = *v30;
        v18[80] = v19[80];
      }
      else
      {
        v32 = *v30;
        sub_3D47C(*v30, v19[80]);
        *((_QWORD *)v18 + 9) = v32;
        v18[80] = v31;
      }
      v33 = (id *)(v19 + 88);
      v34 = v19[96];
      if (v34 == 255)
      {
        *((_QWORD *)v18 + 11) = *v33;
        v18[96] = v19[96];
      }
      else
      {
        v35 = *v33;
        sub_3D47C(*v33, v19[96]);
        *((_QWORD *)v18 + 11) = v35;
        v18[96] = v34;
      }
      v36 = (id *)(v19 + 104);
      v37 = v19[112];
      if (v37 == 255)
      {
        *((_QWORD *)v18 + 13) = *v36;
        v18[112] = v19[112];
      }
      else
      {
        v38 = *v36;
        sub_3D47C(*v36, v19[112]);
        *((_QWORD *)v18 + 13) = v38;
        v18[112] = v37;
      }
      v39 = (id *)(v19 + 120);
      v40 = v19[128];
      if (v40 == 255)
      {
        *((_QWORD *)v18 + 15) = *v39;
        v18[128] = v19[128];
      }
      else
      {
        v41 = *v39;
        sub_3D47C(*v39, v19[128]);
        *((_QWORD *)v18 + 15) = v41;
        v18[128] = v40;
      }
      v18[129] = v19[129];
      v42 = v174[11];
      v43 = &v18[v42];
      v44 = &v19[v42];
      v45 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v45 - 8) + 16))(v43, v44, v45);
      v46 = v174[12];
      v47 = &v18[v46];
      v48 = &v19[v46];
      v49 = *((_QWORD *)v48 + 1);
      *(_QWORD *)v47 = *(_QWORD *)v48;
      *((_QWORD *)v47 + 1) = v49;
      v18[v174[13]] = v19[v174[13]];
      v18[v174[14]] = v19[v174[14]];
      v18[v174[15]] = v19[v174[15]];
      v50 = v174[16];
      v51 = &v18[v50];
      v52 = &v19[v50];
      v53 = *((_QWORD *)v52 + 1);
      *(_QWORD *)v51 = *(_QWORD *)v52;
      *((_QWORD *)v51 + 1) = v53;
      v54 = *(void (**)(char *, _QWORD, uint64_t, int *))(v168 + 56);
      swift_bridgeObjectRetain(v49);
      swift_bridgeObjectRetain(v53);
      v54(v18, 0, 1, v174);
    }
    v55 = v175[8];
    v56 = &v14[v55];
    v57 = &v15[v55];
    v58 = *((_QWORD *)v57 + 1);
    *(_QWORD *)v56 = *(_QWORD *)v57;
    *((_QWORD *)v56 + 1) = v58;
    v59 = v175[9];
    v60 = &v14[v59];
    v61 = &v15[v59];
    v62 = *((_QWORD *)v61 + 1);
    *(_QWORD *)v60 = *(_QWORD *)v61;
    *((_QWORD *)v60 + 1) = v62;
    v14[v175[10]] = v15[v175[10]];
    v63 = v175[11];
    v64 = &v14[v63];
    v65 = &v15[v63];
    v66 = *((_QWORD *)v65 + 1);
    *(_QWORD *)v64 = *(_QWORD *)v65;
    *((_QWORD *)v64 + 1) = v66;
    v67 = v175[12];
    v68 = &v14[v67];
    v69 = &v15[v67];
    v70 = *((_QWORD *)v69 + 1);
    *(_QWORD *)v68 = *(_QWORD *)v69;
    *((_QWORD *)v68 + 1) = v70;
    v71 = v175[13];
    __dst = &v14[v71];
    v72 = &v15[v71];
    v73 = type metadata accessor for URL(0);
    v74 = *(_QWORD *)(v73 - 8);
    v75 = v58;
    v76 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v74 + 48);
    swift_bridgeObjectRetain(v75);
    swift_bridgeObjectRetain(v62);
    swift_bridgeObjectRetain(v66);
    swift_bridgeObjectRetain(v70);
    v77 = v76;
    if (v76(v72, 1, v73))
    {
      v78 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
      memcpy(__dst, v72, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v74 + 16))(__dst, v72, v73);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v74 + 56))(__dst, 0, 1, v73);
    }
    a1 = v173;
    v79 = v74;
    v80 = v175[14];
    v81 = &v14[v80];
    v82 = &v15[v80];
    v83 = *((_QWORD *)v82 + 1);
    *(_QWORD *)v81 = *(_QWORD *)v82;
    *((_QWORD *)v81 + 1) = v83;
    v84 = v175[15];
    v85 = &v14[v84];
    v86 = &v15[v84];
    v87 = *((_QWORD *)v86 + 1);
    *(_QWORD *)v85 = *(_QWORD *)v86;
    *((_QWORD *)v85 + 1) = v87;
    v88 = v175[16];
    v89 = &v14[v88];
    v90 = &v15[v88];
    swift_bridgeObjectRetain(v83);
    swift_bridgeObjectRetain(v87);
    if (v77(v90, 1, v73))
    {
      v91 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
      memcpy(v89, v90, *(_QWORD *)(*(_QWORD *)(v91 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v79 + 16))(v89, v90, v73);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v79 + 56))(v89, 0, 1, v73);
    }
    v92 = v175[17];
    v93 = &v14[v92];
    v94 = &v15[v92];
    if (v77(&v15[v92], 1, v73))
    {
      v95 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
      memcpy(v93, v94, *(_QWORD *)(*(_QWORD *)(v95 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v79 + 16))(v93, v94, v73);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v79 + 56))(v93, 0, 1, v73);
    }
    v14[v175[18]] = v15[v175[18]];
    v96 = v171[7];
    v97 = (char *)v173 + v96;
    v98 = (char *)a2 + v96;
    if (v77((char *)a2 + v96, 1, v73))
    {
      v99 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
      memcpy(v97, v98, *(_QWORD *)(*(_QWORD *)(v99 - 8) + 64));
      (*(void (**)(char *, char *, uint64_t))(v79 + 16))((char *)v173 + v171[8], (char *)a2 + v171[8], v73);
    }
    else
    {
      v100 = *(void (**)(char *, char *, uint64_t))(v79 + 16);
      v100(v97, v98, v73);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v79 + 56))(v97, 0, 1, v73);
      v100((char *)v173 + v171[8], (char *)a2 + v171[8], v73);
    }
    *(_QWORD *)((char *)v173 + v171[9]) = *(_QWORD *)((char *)a2 + v171[9]);
    v101 = v171[10];
    v102 = (_QWORD *)((char *)v173 + v101);
    v103 = (_QWORD *)((char *)a2 + v101);
    v104 = v103[1];
    *v102 = *v103;
    v102[1] = v104;
    v105 = v171[11];
    v106 = (_QWORD *)((char *)v173 + v105);
    v107 = (_QWORD *)((char *)a2 + v105);
    v108 = v107[1];
    *v106 = *v107;
    v106[1] = v108;
    v109 = v171[12];
    v110 = *(_QWORD *)((char *)a2 + v109);
    *(_QWORD *)((char *)v173 + v109) = v110;
    *((_BYTE *)v173 + v171[13]) = *((_BYTE *)a2 + v171[13]);
    *((_BYTE *)v173 + v171[14]) = *((_BYTE *)a2 + v171[14]);
    v111 = v171[15];
    v112 = (char *)v173 + v111;
    v113 = (char *)a2 + v111;
    *(_QWORD *)v112 = *(_QWORD *)v113;
    v112[8] = v113[8];
    v114 = v171[16];
    v115 = (_QWORD *)((char *)v173 + v114);
    v116 = (_QWORD *)((char *)a2 + v114);
    swift_bridgeObjectRetain(v104);
    swift_bridgeObjectRetain(v108);
    swift_retain(v110);
    if (v170(v116, 1, v174))
    {
      v117 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
      memcpy(v115, v116, *(_QWORD *)(*(_QWORD *)(v117 - 8) + 64));
    }
    else
    {
      v118 = v116[1];
      *v115 = *v116;
      v115[1] = v118;
      v119 = *((unsigned __int8 *)v116 + 32);
      swift_bridgeObjectRetain(v118);
      if (v119 == 255)
      {
        *((_OWORD *)v115 + 1) = *((_OWORD *)v116 + 1);
        *((_BYTE *)v115 + 32) = *((_BYTE *)v116 + 32);
      }
      else
      {
        v120 = v116[2];
        v121 = v116[3];
        sub_3D464(v120, v121, v119);
        v115[2] = v120;
        v115[3] = v121;
        *((_BYTE *)v115 + 32) = v119;
      }
      *(_OWORD *)(v115 + 5) = *(_OWORD *)(v116 + 5);
      v122 = (id *)(v116 + 7);
      v123 = *((unsigned __int8 *)v116 + 64);
      if (v123 == 255)
      {
        v115[7] = *v122;
        *((_BYTE *)v115 + 64) = *((_BYTE *)v116 + 64);
      }
      else
      {
        v124 = *v122;
        sub_3D47C(*v122, *((_BYTE *)v116 + 64));
        v115[7] = v124;
        *((_BYTE *)v115 + 64) = v123;
      }
      v125 = (id *)(v116 + 9);
      v126 = *((unsigned __int8 *)v116 + 80);
      if (v126 == 255)
      {
        v115[9] = *v125;
        *((_BYTE *)v115 + 80) = *((_BYTE *)v116 + 80);
      }
      else
      {
        v127 = *v125;
        sub_3D47C(*v125, *((_BYTE *)v116 + 80));
        v115[9] = v127;
        *((_BYTE *)v115 + 80) = v126;
      }
      v128 = (id *)(v116 + 11);
      v129 = *((unsigned __int8 *)v116 + 96);
      if (v129 == 255)
      {
        v115[11] = *v128;
        *((_BYTE *)v115 + 96) = *((_BYTE *)v116 + 96);
      }
      else
      {
        v130 = *v128;
        sub_3D47C(*v128, *((_BYTE *)v116 + 96));
        v115[11] = v130;
        *((_BYTE *)v115 + 96) = v129;
      }
      v131 = (id *)(v116 + 13);
      v132 = *((unsigned __int8 *)v116 + 112);
      if (v132 == 255)
      {
        v115[13] = *v131;
        *((_BYTE *)v115 + 112) = *((_BYTE *)v116 + 112);
      }
      else
      {
        v133 = *v131;
        sub_3D47C(*v131, *((_BYTE *)v116 + 112));
        v115[13] = v133;
        *((_BYTE *)v115 + 112) = v132;
      }
      v134 = (id *)(v116 + 15);
      v135 = *((unsigned __int8 *)v116 + 128);
      if (v135 == 255)
      {
        v115[15] = *v134;
        *((_BYTE *)v115 + 128) = *((_BYTE *)v116 + 128);
      }
      else
      {
        v136 = *v134;
        sub_3D47C(*v134, *((_BYTE *)v116 + 128));
        v115[15] = v136;
        *((_BYTE *)v115 + 128) = v135;
      }
      *((_BYTE *)v115 + 129) = *((_BYTE *)v116 + 129);
      v137 = v174[11];
      v138 = (char *)v115 + v137;
      v139 = (char *)v116 + v137;
      v140 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v140 - 8) + 16))(v138, v139, v140);
      v141 = v174[12];
      v142 = (_QWORD *)((char *)v115 + v141);
      v143 = (_QWORD *)((char *)v116 + v141);
      v144 = v143[1];
      *v142 = *v143;
      v142[1] = v144;
      *((_BYTE *)v115 + v174[13]) = *((_BYTE *)v116 + v174[13]);
      *((_BYTE *)v115 + v174[14]) = *((_BYTE *)v116 + v174[14]);
      *((_BYTE *)v115 + v174[15]) = *((_BYTE *)v116 + v174[15]);
      v145 = v174[16];
      v146 = (_QWORD *)((char *)v115 + v145);
      v147 = (_QWORD *)((char *)v116 + v145);
      v148 = v147[1];
      *v146 = *v147;
      v146[1] = v148;
      v149 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v168 + 56);
      swift_bridgeObjectRetain(v144);
      swift_bridgeObjectRetain(v148);
      v149(v115, 0, 1, v174);
    }
    v150 = v171[17];
    v151 = (_QWORD *)((char *)v173 + v150);
    v152 = (_QWORD *)((char *)a2 + v150);
    v153 = v152[1];
    *v151 = *v152;
    v151[1] = v153;
    v154 = v171[18];
    v155 = (char *)v173 + v154;
    v156 = (char *)a2 + v154;
    v155[8] = v156[8];
    *(_QWORD *)v155 = *(_QWORD *)v156;
    v157 = v171[19];
    v158 = (char *)v173 + v157;
    v159 = (char *)a2 + v157;
    *(_QWORD *)v158 = *(_QWORD *)v159;
    v158[8] = v159[8];
    *((_BYTE *)v173 + v171[20]) = *((_BYTE *)a2 + v171[20]);
    *((_BYTE *)v173 + v171[21]) = *((_BYTE *)a2 + v171[21]);
    v160 = v171[22];
    v161 = (char *)v173 + v160;
    v162 = (char *)a2 + v160;
    v163 = type metadata accessor for TranscriptRequestInformation(0);
    v164 = *(_QWORD *)(v163 - 8);
    v165 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v164 + 48);
    swift_bridgeObjectRetain(v153);
    if (v165(v162, 1, v163))
    {
      v166 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2C40);
      memcpy(v161, v162, *(_QWORD *)(*(_QWORD *)(v166 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v164 + 16))(v161, v162, v163);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v164 + 56))(v161, 0, 1, v163);
    }
    v8 = v173;
    v9 = v172;
    v10 = 1;
    goto LABEL_63;
  }
  if (!EnumCaseMultiPayload)
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    swift_bridgeObjectRetain(v7);
    v8 = a1;
    v9 = a3;
    v10 = 0;
LABEL_63:
    swift_storeEnumTagMultiPayload(v8, v9, v10);
    return a1;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

char *assignWithCopy for BookmarkButtonPresenter.Data(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int *v19;
  unsigned int (*v20)(char *, uint64_t, int *);
  uint64_t v21;
  char *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  id *v28;
  int v29;
  id v30;
  id v31;
  id *v32;
  int v33;
  id v34;
  id v35;
  id *v36;
  int v37;
  id v38;
  id v39;
  id *v40;
  int v41;
  id v42;
  id v43;
  id *v44;
  int v45;
  id v46;
  id v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  void (*v60)(char *, _QWORD, uint64_t, int *);
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int (*v82)(char *, uint64_t, uint64_t);
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  void (*v106)(char *, char *, uint64_t);
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  char v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  __int128 v129;
  id *v130;
  int v131;
  id v132;
  id v133;
  id *v134;
  int v135;
  id v136;
  id v137;
  id *v138;
  int v139;
  id v140;
  id v141;
  id *v142;
  int v143;
  id v144;
  id v145;
  id *v146;
  int v147;
  id v148;
  id v149;
  uint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  char *v160;
  uint64_t v161;
  void (*v162)(char *, _QWORD, uint64_t, int *);
  uint64_t v163;
  char *v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  unsigned int (*v180)(char *, uint64_t, uint64_t);
  uint64_t v181;
  uint64_t v183;
  char *v184;
  unsigned int (*v185)(char *, uint64_t, int *);
  int *v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  int *v190;
  char *v191;
  int *v192;
  char *__dst;
  unsigned int (*__dsta)(char *, uint64_t, uint64_t);

  if (a1 != a2)
  {
    sub_145D8((uint64_t)a1, type metadata accessor for BookmarkButtonPresenter.Data);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 1)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
      v11 = *((_QWORD *)a2 + 2);
      *((_QWORD *)a1 + 2) = v11;
      v12 = type metadata accessor for EpisodeOffer(0);
      v13 = *(int *)(v12 + 24);
      v14 = &a1[v13];
      v15 = &a2[v13];
      *(_QWORD *)v14 = *(_QWORD *)&a2[v13];
      *((_QWORD *)v14 + 1) = *(_QWORD *)&a2[v13 + 8];
      v16 = *(_QWORD *)&a2[v13 + 16];
      *((_QWORD *)v14 + 2) = v16;
      v14[24] = a2[v13 + 24];
      v191 = &a1[v13];
      v192 = (int *)type metadata accessor for ShowOffer(0);
      v17 = v192[7];
      __dst = &v14[v17];
      v18 = &v15[v17];
      v19 = (int *)type metadata accessor for ArtworkModel(0);
      v183 = *((_QWORD *)v19 - 1);
      v20 = *(unsigned int (**)(char *, uint64_t, int *))(v183 + 48);
      swift_bridgeObjectRetain(v11);
      swift_bridgeObjectRetain(v16);
      v185 = v20;
      v189 = a3;
      v190 = v19;
      v186 = (int *)v12;
      if (v20(v18, 1, v19))
      {
        v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
        memcpy(__dst, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
        v22 = v191;
      }
      else
      {
        *(_QWORD *)__dst = *(_QWORD *)v18;
        v23 = *((_QWORD *)v18 + 1);
        *((_QWORD *)__dst + 1) = v23;
        v24 = v18[32];
        swift_bridgeObjectRetain(v23);
        if (v24 == 255)
        {
          v27 = *((_OWORD *)v18 + 1);
          __dst[32] = v18[32];
          *((_OWORD *)__dst + 1) = v27;
        }
        else
        {
          v26 = *((_QWORD *)v18 + 2);
          v25 = *((_QWORD *)v18 + 3);
          sub_3D464(v26, v25, v24);
          *((_QWORD *)__dst + 2) = v26;
          *((_QWORD *)__dst + 3) = v25;
          __dst[32] = v24;
        }
        v22 = v191;
        *((_QWORD *)__dst + 5) = *((_QWORD *)v18 + 5);
        *((_QWORD *)__dst + 6) = *((_QWORD *)v18 + 6);
        v28 = (id *)(v18 + 56);
        v29 = v18[64];
        if (v29 == 255)
        {
          v31 = *v28;
          __dst[64] = v18[64];
          *((_QWORD *)__dst + 7) = v31;
        }
        else
        {
          v30 = *v28;
          sub_3D47C(*v28, v18[64]);
          *((_QWORD *)__dst + 7) = v30;
          __dst[64] = v29;
        }
        v32 = (id *)(v18 + 72);
        v33 = v18[80];
        if (v33 == 255)
        {
          v35 = *v32;
          __dst[80] = v18[80];
          *((_QWORD *)__dst + 9) = v35;
        }
        else
        {
          v34 = *v32;
          sub_3D47C(*v32, v18[80]);
          *((_QWORD *)__dst + 9) = v34;
          __dst[80] = v33;
        }
        v36 = (id *)(v18 + 88);
        v37 = v18[96];
        if (v37 == 255)
        {
          v39 = *v36;
          __dst[96] = v18[96];
          *((_QWORD *)__dst + 11) = v39;
        }
        else
        {
          v38 = *v36;
          sub_3D47C(*v36, v18[96]);
          *((_QWORD *)__dst + 11) = v38;
          __dst[96] = v37;
        }
        v40 = (id *)(v18 + 104);
        v41 = v18[112];
        if (v41 == 255)
        {
          v43 = *v40;
          __dst[112] = v18[112];
          *((_QWORD *)__dst + 13) = v43;
        }
        else
        {
          v42 = *v40;
          sub_3D47C(*v40, v18[112]);
          *((_QWORD *)__dst + 13) = v42;
          __dst[112] = v41;
        }
        v44 = (id *)(v18 + 120);
        v45 = v18[128];
        if (v45 == 255)
        {
          v47 = *v44;
          __dst[128] = v18[128];
          *((_QWORD *)__dst + 15) = v47;
        }
        else
        {
          v46 = *v44;
          sub_3D47C(*v44, v18[128]);
          *((_QWORD *)__dst + 15) = v46;
          __dst[128] = v45;
        }
        __dst[129] = v18[129];
        v48 = v19[11];
        v49 = &__dst[v48];
        v50 = &v18[v48];
        v51 = type metadata accessor for ArtworkCrop(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v51 - 8) + 16))(v49, v50, v51);
        v52 = v19[12];
        v53 = &__dst[v52];
        v54 = &v18[v52];
        *(_QWORD *)v53 = *(_QWORD *)v54;
        v55 = *((_QWORD *)v54 + 1);
        *((_QWORD *)v53 + 1) = v55;
        __dst[v19[13]] = v18[v19[13]];
        __dst[v19[14]] = v18[v19[14]];
        __dst[v19[15]] = v18[v19[15]];
        v56 = v19[16];
        v57 = &__dst[v56];
        v58 = &v18[v56];
        *(_QWORD *)v57 = *(_QWORD *)v58;
        v59 = *((_QWORD *)v58 + 1);
        *((_QWORD *)v57 + 1) = v59;
        v60 = *(void (**)(char *, _QWORD, uint64_t, int *))(v183 + 56);
        swift_bridgeObjectRetain(v55);
        swift_bridgeObjectRetain(v59);
        v60(__dst, 0, 1, v19);
      }
      v61 = v192[8];
      v62 = &v22[v61];
      v63 = &v15[v61];
      *(_QWORD *)v62 = *(_QWORD *)v63;
      v64 = *((_QWORD *)v63 + 1);
      *((_QWORD *)v62 + 1) = v64;
      v65 = v192[9];
      v66 = &v22[v65];
      v67 = &v15[v65];
      *(_QWORD *)v66 = *(_QWORD *)v67;
      v68 = v22;
      v69 = *((_QWORD *)v67 + 1);
      *((_QWORD *)v66 + 1) = v69;
      v68[v192[10]] = v15[v192[10]];
      v70 = v192[11];
      v71 = &v68[v70];
      v72 = &v15[v70];
      *(_QWORD *)v71 = *(_QWORD *)v72;
      v73 = *((_QWORD *)v72 + 1);
      *((_QWORD *)v71 + 1) = v73;
      v74 = v192[12];
      v75 = &v68[v74];
      v76 = &v15[v74];
      *(_QWORD *)v75 = *(_QWORD *)v76;
      v77 = *((_QWORD *)v76 + 1);
      *((_QWORD *)v75 + 1) = v77;
      v78 = v192[13];
      v187 = &v68[v78];
      v184 = v15;
      v79 = &v15[v78];
      v80 = type metadata accessor for URL(0);
      v81 = *(_QWORD *)(v80 - 8);
      v82 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v81 + 48);
      swift_bridgeObjectRetain(v64);
      swift_bridgeObjectRetain(v69);
      swift_bridgeObjectRetain(v73);
      swift_bridgeObjectRetain(v77);
      __dsta = v82;
      v188 = v81;
      if (v82(v79, 1, v80))
      {
        v83 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
        memcpy(v187, v79, *(_QWORD *)(*(_QWORD *)(v83 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v81 + 16))(v187, v79, v80);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v81 + 56))(v187, 0, 1, v80);
      }
      v84 = v192[14];
      v85 = &v191[v84];
      v86 = &v184[v84];
      *(_QWORD *)v85 = *(_QWORD *)v86;
      v87 = *((_QWORD *)v86 + 1);
      *((_QWORD *)v85 + 1) = v87;
      v88 = v192[15];
      v89 = &v191[v88];
      v90 = &v184[v88];
      *(_QWORD *)v89 = *(_QWORD *)v90;
      v91 = *((_QWORD *)v90 + 1);
      *((_QWORD *)v89 + 1) = v91;
      v92 = v192[16];
      v93 = &v191[v92];
      v94 = &v184[v92];
      swift_bridgeObjectRetain(v87);
      swift_bridgeObjectRetain(v91);
      if (v82(v94, 1, v80))
      {
        v95 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
        memcpy(v93, v94, *(_QWORD *)(*(_QWORD *)(v95 - 8) + 64));
        v96 = v188;
      }
      else
      {
        v96 = v188;
        (*(void (**)(char *, char *, uint64_t))(v188 + 16))(v93, v94, v80);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v188 + 56))(v93, 0, 1, v80);
      }
      v97 = v192[17];
      v98 = &v191[v97];
      v99 = &v184[v97];
      if (v82(&v184[v97], 1, v80))
      {
        v100 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
        memcpy(v98, v99, *(_QWORD *)(*(_QWORD *)(v100 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v96 + 16))(v98, v99, v80);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v96 + 56))(v98, 0, 1, v80);
      }
      v191[v192[18]] = v184[v192[18]];
      v101 = v186[7];
      v102 = &a1[v101];
      v103 = &a2[v101];
      if (__dsta(&a2[v101], 1, v80))
      {
        v104 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
        memcpy(v102, v103, *(_QWORD *)(*(_QWORD *)(v104 - 8) + 64));
        (*(void (**)(char *, char *, uint64_t))(v96 + 16))(&a1[v186[8]], &a2[v186[8]], v80);
      }
      else
      {
        v105 = v96;
        v106 = *(void (**)(char *, char *, uint64_t))(v96 + 16);
        v106(v102, v103, v80);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v105 + 56))(v102, 0, 1, v80);
        v106(&a1[v186[8]], &a2[v186[8]], v80);
      }
      *(_QWORD *)&a1[v186[9]] = *(_QWORD *)&a2[v186[9]];
      v107 = v186[10];
      v108 = &a1[v107];
      v109 = &a2[v107];
      *(_QWORD *)v108 = *(_QWORD *)v109;
      v110 = *((_QWORD *)v109 + 1);
      *((_QWORD *)v108 + 1) = v110;
      v111 = v186[11];
      v112 = &a1[v111];
      v113 = &a2[v111];
      *(_QWORD *)v112 = *(_QWORD *)v113;
      v114 = *((_QWORD *)v113 + 1);
      *((_QWORD *)v112 + 1) = v114;
      v115 = v186[12];
      v116 = *(_QWORD *)&a2[v115];
      *(_QWORD *)&a1[v115] = v116;
      a1[v186[13]] = a2[v186[13]];
      a1[v186[14]] = a2[v186[14]];
      v117 = v186[15];
      v118 = &a1[v117];
      v119 = &a2[v117];
      v120 = v119[8];
      *(_QWORD *)v118 = *(_QWORD *)v119;
      v118[8] = v120;
      v121 = v186[16];
      v122 = &a1[v121];
      v123 = &a2[v121];
      swift_bridgeObjectRetain(v110);
      swift_bridgeObjectRetain(v114);
      swift_retain(v116);
      if (v185(v123, 1, v190))
      {
        v124 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
        memcpy(v122, v123, *(_QWORD *)(*(_QWORD *)(v124 - 8) + 64));
      }
      else
      {
        *(_QWORD *)v122 = *(_QWORD *)v123;
        v125 = *((_QWORD *)v123 + 1);
        *((_QWORD *)v122 + 1) = v125;
        v126 = v123[32];
        swift_bridgeObjectRetain(v125);
        if (v126 == 255)
        {
          v129 = *((_OWORD *)v123 + 1);
          v122[32] = v123[32];
          *((_OWORD *)v122 + 1) = v129;
        }
        else
        {
          v127 = *((_QWORD *)v123 + 2);
          v128 = *((_QWORD *)v123 + 3);
          sub_3D464(v127, v128, v126);
          *((_QWORD *)v122 + 2) = v127;
          *((_QWORD *)v122 + 3) = v128;
          v122[32] = v126;
        }
        *((_QWORD *)v122 + 5) = *((_QWORD *)v123 + 5);
        *((_QWORD *)v122 + 6) = *((_QWORD *)v123 + 6);
        v130 = (id *)(v123 + 56);
        v131 = v123[64];
        if (v131 == 255)
        {
          v133 = *v130;
          v122[64] = v123[64];
          *((_QWORD *)v122 + 7) = v133;
        }
        else
        {
          v132 = *v130;
          sub_3D47C(*v130, v123[64]);
          *((_QWORD *)v122 + 7) = v132;
          v122[64] = v131;
        }
        v134 = (id *)(v123 + 72);
        v135 = v123[80];
        if (v135 == 255)
        {
          v137 = *v134;
          v122[80] = v123[80];
          *((_QWORD *)v122 + 9) = v137;
        }
        else
        {
          v136 = *v134;
          sub_3D47C(*v134, v123[80]);
          *((_QWORD *)v122 + 9) = v136;
          v122[80] = v135;
        }
        v138 = (id *)(v123 + 88);
        v139 = v123[96];
        if (v139 == 255)
        {
          v141 = *v138;
          v122[96] = v123[96];
          *((_QWORD *)v122 + 11) = v141;
        }
        else
        {
          v140 = *v138;
          sub_3D47C(*v138, v123[96]);
          *((_QWORD *)v122 + 11) = v140;
          v122[96] = v139;
        }
        v142 = (id *)(v123 + 104);
        v143 = v123[112];
        if (v143 == 255)
        {
          v145 = *v142;
          v122[112] = v123[112];
          *((_QWORD *)v122 + 13) = v145;
        }
        else
        {
          v144 = *v142;
          sub_3D47C(*v142, v123[112]);
          *((_QWORD *)v122 + 13) = v144;
          v122[112] = v143;
        }
        v146 = (id *)(v123 + 120);
        v147 = v123[128];
        if (v147 == 255)
        {
          v149 = *v146;
          v122[128] = v123[128];
          *((_QWORD *)v122 + 15) = v149;
        }
        else
        {
          v148 = *v146;
          sub_3D47C(*v146, v123[128]);
          *((_QWORD *)v122 + 15) = v148;
          v122[128] = v147;
        }
        v122[129] = v123[129];
        v150 = v190[11];
        v151 = &v122[v150];
        v152 = &v123[v150];
        v153 = type metadata accessor for ArtworkCrop(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v153 - 8) + 16))(v151, v152, v153);
        v154 = v190[12];
        v155 = &v122[v154];
        v156 = &v123[v154];
        *(_QWORD *)v155 = *(_QWORD *)v156;
        v157 = *((_QWORD *)v156 + 1);
        *((_QWORD *)v155 + 1) = v157;
        v122[v190[13]] = v123[v190[13]];
        v122[v190[14]] = v123[v190[14]];
        v122[v190[15]] = v123[v190[15]];
        v158 = v190[16];
        v159 = &v122[v158];
        v160 = &v123[v158];
        *(_QWORD *)v159 = *(_QWORD *)v160;
        v161 = *((_QWORD *)v160 + 1);
        *((_QWORD *)v159 + 1) = v161;
        v162 = *(void (**)(char *, _QWORD, uint64_t, int *))(v183 + 56);
        swift_bridgeObjectRetain(v157);
        swift_bridgeObjectRetain(v161);
        v162(v122, 0, 1, v190);
      }
      v163 = v186[17];
      v164 = &a1[v163];
      v165 = &a2[v163];
      *(_QWORD *)v164 = *(_QWORD *)v165;
      v166 = *((_QWORD *)v165 + 1);
      *((_QWORD *)v164 + 1) = v166;
      v167 = v186[18];
      v168 = &a1[v167];
      v169 = &a2[v167];
      v170 = *(_QWORD *)v169;
      v168[8] = v169[8];
      *(_QWORD *)v168 = v170;
      v171 = v186[19];
      v172 = &a1[v171];
      v173 = &a2[v171];
      v174 = *(_QWORD *)v173;
      v172[8] = v173[8];
      *(_QWORD *)v172 = v174;
      a1[v186[20]] = a2[v186[20]];
      a1[v186[21]] = a2[v186[21]];
      v175 = v186[22];
      v176 = &a1[v175];
      v177 = &a2[v175];
      v178 = type metadata accessor for TranscriptRequestInformation(0);
      v179 = *(_QWORD *)(v178 - 8);
      v180 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v179 + 48);
      swift_bridgeObjectRetain(v166);
      if (v180(v177, 1, v178))
      {
        v181 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2C40);
        memcpy(v176, v177, *(_QWORD *)(*(_QWORD *)(v181 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v179 + 16))(v176, v177, v178);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v179 + 56))(v176, 0, 1, v178);
      }
      v9 = v189;
      v8 = a1;
      v10 = 1;
      goto LABEL_64;
    }
    if (!EnumCaseMultiPayload)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v7 = *((_QWORD *)a2 + 1);
      *((_QWORD *)a1 + 1) = v7;
      swift_bridgeObjectRetain(v7);
      v8 = a1;
      v9 = a3;
      v10 = 0;
LABEL_64:
      swift_storeEnumTagMultiPayload(v8, v9, v10);
      return a1;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

char *initializeWithTake for BookmarkButtonPresenter.Data(char *a1, char *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  unsigned int (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int (*v67)(char *, uint64_t, int *);
  uint64_t v68;
  int *v69;
  uint64_t v70;
  char *v71;
  unsigned int (*v72)(char *, uint64_t, uint64_t);
  char *v73;
  uint64_t v74;

  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    v70 = a3;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    v6 = (int *)type metadata accessor for EpisodeOffer(0);
    v7 = v6[6];
    v8 = &a1[v7];
    v9 = &a2[v7];
    *(_QWORD *)v8 = *(_QWORD *)&a2[v7];
    *(_OWORD *)(v8 + 8) = *(_OWORD *)&a2[v7 + 8];
    v8[24] = a2[v7 + 24];
    v10 = (int *)type metadata accessor for ShowOffer(0);
    v11 = v10[7];
    v12 = &v8[v11];
    v13 = &v9[v11];
    v14 = (int *)type metadata accessor for ArtworkModel(0);
    v15 = *((_QWORD *)v14 - 1);
    v67 = *(unsigned int (**)(char *, uint64_t, int *))(v15 + 48);
    v68 = v15;
    v69 = v14;
    if (v67(v13, 1, v14))
    {
      v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      v17 = *((_OWORD *)v13 + 1);
      *(_OWORD *)v12 = *(_OWORD *)v13;
      *((_OWORD *)v12 + 1) = v17;
      v12[32] = v13[32];
      *(_OWORD *)(v12 + 40) = *(_OWORD *)(v13 + 40);
      *((_QWORD *)v12 + 7) = *((_QWORD *)v13 + 7);
      v12[64] = v13[64];
      *(_OWORD *)(v12 + 113) = *(_OWORD *)(v13 + 113);
      *(_OWORD *)(v12 + 104) = *(_OWORD *)(v13 + 104);
      *(_OWORD *)(v12 + 88) = *(_OWORD *)(v13 + 88);
      *(_OWORD *)(v12 + 72) = *(_OWORD *)(v13 + 72);
      v12[129] = v13[129];
      v18 = v14[11];
      v71 = &v13[v18];
      v73 = &v12[v18];
      v19 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v73, v71, v19);
      *(_OWORD *)&v12[v14[12]] = *(_OWORD *)&v13[v14[12]];
      v12[v14[13]] = v13[v14[13]];
      v12[v14[14]] = v13[v14[14]];
      v12[v14[15]] = v13[v14[15]];
      *(_OWORD *)&v12[v14[16]] = *(_OWORD *)&v13[v14[16]];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
    }
    *(_OWORD *)&v8[v10[8]] = *(_OWORD *)&v9[v10[8]];
    *(_OWORD *)&v8[v10[9]] = *(_OWORD *)&v9[v10[9]];
    v8[v10[10]] = v9[v10[10]];
    *(_OWORD *)&v8[v10[11]] = *(_OWORD *)&v9[v10[11]];
    *(_OWORD *)&v8[v10[12]] = *(_OWORD *)&v9[v10[12]];
    v20 = v10[13];
    v21 = &v8[v20];
    v22 = &v9[v20];
    v23 = type metadata accessor for URL(0);
    v24 = *(_QWORD *)(v23 - 8);
    v72 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48);
    v74 = v24;
    if (v72(v22, 1, v23))
    {
      v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v21, v22, v23);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
    }
    *(_OWORD *)&v8[v10[14]] = *(_OWORD *)&v9[v10[14]];
    *(_OWORD *)&v8[v10[15]] = *(_OWORD *)&v9[v10[15]];
    v26 = v10[16];
    v27 = &v8[v26];
    v28 = &v9[v26];
    v29 = v72;
    if (v72(&v9[v26], 1, v23))
    {
      v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v74 + 32))(v27, v28, v23);
      v29 = v72;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v74 + 56))(v27, 0, 1, v23);
    }
    v31 = v10[17];
    v32 = &v8[v31];
    v33 = &v9[v31];
    if (v29(&v9[v31], 1, v23))
    {
      v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
      memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
      v35 = v74;
    }
    else
    {
      v36 = v33;
      v35 = v74;
      (*(void (**)(char *, char *, uint64_t))(v74 + 32))(v32, v36, v23);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v74 + 56))(v32, 0, 1, v23);
    }
    v8[v10[18]] = v9[v10[18]];
    v37 = v6[7];
    v38 = &a1[v37];
    v39 = &a2[v37];
    if (v29(&a2[v37], 1, v23))
    {
      v40 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
      memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
      v41 = *(void (**)(char *, char *, uint64_t))(v35 + 32);
    }
    else
    {
      v41 = *(void (**)(char *, char *, uint64_t))(v35 + 32);
      v41(v38, v39, v23);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v38, 0, 1, v23);
    }
    v41(&a1[v6[8]], &a2[v6[8]], v23);
    *(_QWORD *)&a1[v6[9]] = *(_QWORD *)&a2[v6[9]];
    *(_OWORD *)&a1[v6[10]] = *(_OWORD *)&a2[v6[10]];
    *(_OWORD *)&a1[v6[11]] = *(_OWORD *)&a2[v6[11]];
    *(_QWORD *)&a1[v6[12]] = *(_QWORD *)&a2[v6[12]];
    a1[v6[13]] = a2[v6[13]];
    a1[v6[14]] = a2[v6[14]];
    v42 = v6[15];
    v43 = &a1[v42];
    v44 = &a2[v42];
    *(_QWORD *)v43 = *(_QWORD *)v44;
    v43[8] = v44[8];
    v45 = v6[16];
    v46 = &a1[v45];
    v47 = &a2[v45];
    if (v67(&a2[v45], 1, v69))
    {
      v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
      memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
    }
    else
    {
      v49 = *((_OWORD *)v47 + 1);
      *(_OWORD *)v46 = *(_OWORD *)v47;
      *((_OWORD *)v46 + 1) = v49;
      v46[32] = v47[32];
      *(_OWORD *)(v46 + 40) = *(_OWORD *)(v47 + 40);
      *((_QWORD *)v46 + 7) = *((_QWORD *)v47 + 7);
      v46[64] = v47[64];
      *(_OWORD *)(v46 + 113) = *(_OWORD *)(v47 + 113);
      *(_OWORD *)(v46 + 104) = *(_OWORD *)(v47 + 104);
      *(_OWORD *)(v46 + 88) = *(_OWORD *)(v47 + 88);
      *(_OWORD *)(v46 + 72) = *(_OWORD *)(v47 + 72);
      v46[129] = v47[129];
      v50 = v69[11];
      v51 = &v46[v50];
      v52 = &v47[v50];
      v53 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v53 - 8) + 32))(v51, v52, v53);
      *(_OWORD *)&v46[v69[12]] = *(_OWORD *)&v47[v69[12]];
      v46[v69[13]] = v47[v69[13]];
      v46[v69[14]] = v47[v69[14]];
      v46[v69[15]] = v47[v69[15]];
      *(_OWORD *)&v46[v69[16]] = *(_OWORD *)&v47[v69[16]];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v68 + 56))(v46, 0, 1, v69);
    }
    *(_OWORD *)&a1[v6[17]] = *(_OWORD *)&a2[v6[17]];
    v54 = v6[18];
    v55 = &a1[v54];
    v56 = &a2[v54];
    v55[8] = v56[8];
    *(_QWORD *)v55 = *(_QWORD *)v56;
    v57 = v6[19];
    v58 = &a1[v57];
    v59 = &a2[v57];
    *(_QWORD *)v58 = *(_QWORD *)v59;
    v58[8] = v59[8];
    a1[v6[20]] = a2[v6[20]];
    a1[v6[21]] = a2[v6[21]];
    v60 = v6[22];
    v61 = &a1[v60];
    v62 = &a2[v60];
    v63 = type metadata accessor for TranscriptRequestInformation(0);
    v64 = *(_QWORD *)(v63 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48))(v62, 1, v63))
    {
      v65 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2C40);
      memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v64 + 32))(v61, v62, v63);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v64 + 56))(v61, 0, 1, v63);
    }
    swift_storeEnumTagMultiPayload(a1, v70, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

char *assignWithTake for BookmarkButtonPresenter.Data(char *a1, char *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  unsigned int (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int (*v67)(char *, uint64_t, int *);
  uint64_t v68;
  int *v69;
  uint64_t v70;
  char *v71;
  unsigned int (*v72)(char *, uint64_t, uint64_t);
  char *v73;
  uint64_t v74;

  if (a1 != a2)
  {
    sub_145D8((uint64_t)a1, type metadata accessor for BookmarkButtonPresenter.Data);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      v70 = a3;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      v6 = (int *)type metadata accessor for EpisodeOffer(0);
      v7 = v6[6];
      v8 = &a1[v7];
      v9 = &a2[v7];
      *(_QWORD *)v8 = *(_QWORD *)&a2[v7];
      *(_OWORD *)(v8 + 8) = *(_OWORD *)&a2[v7 + 8];
      v8[24] = a2[v7 + 24];
      v10 = (int *)type metadata accessor for ShowOffer(0);
      v11 = v10[7];
      v12 = &v8[v11];
      v13 = &v9[v11];
      v14 = (int *)type metadata accessor for ArtworkModel(0);
      v15 = *((_QWORD *)v14 - 1);
      v67 = *(unsigned int (**)(char *, uint64_t, int *))(v15 + 48);
      v68 = v15;
      v69 = v14;
      if (v67(v13, 1, v14))
      {
        v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
        memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
      }
      else
      {
        v17 = *((_OWORD *)v13 + 1);
        *(_OWORD *)v12 = *(_OWORD *)v13;
        *((_OWORD *)v12 + 1) = v17;
        v12[32] = v13[32];
        *(_OWORD *)(v12 + 40) = *(_OWORD *)(v13 + 40);
        *((_QWORD *)v12 + 7) = *((_QWORD *)v13 + 7);
        v12[64] = v13[64];
        *(_OWORD *)(v12 + 113) = *(_OWORD *)(v13 + 113);
        *(_OWORD *)(v12 + 104) = *(_OWORD *)(v13 + 104);
        *(_OWORD *)(v12 + 88) = *(_OWORD *)(v13 + 88);
        *(_OWORD *)(v12 + 72) = *(_OWORD *)(v13 + 72);
        v12[129] = v13[129];
        v18 = v14[11];
        v71 = &v13[v18];
        v73 = &v12[v18];
        v19 = type metadata accessor for ArtworkCrop(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v73, v71, v19);
        *(_OWORD *)&v12[v14[12]] = *(_OWORD *)&v13[v14[12]];
        v12[v14[13]] = v13[v14[13]];
        v12[v14[14]] = v13[v14[14]];
        v12[v14[15]] = v13[v14[15]];
        *(_OWORD *)&v12[v14[16]] = *(_OWORD *)&v13[v14[16]];
        (*(void (**)(char *, _QWORD, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
      }
      *(_OWORD *)&v8[v10[8]] = *(_OWORD *)&v9[v10[8]];
      *(_OWORD *)&v8[v10[9]] = *(_OWORD *)&v9[v10[9]];
      v8[v10[10]] = v9[v10[10]];
      *(_OWORD *)&v8[v10[11]] = *(_OWORD *)&v9[v10[11]];
      *(_OWORD *)&v8[v10[12]] = *(_OWORD *)&v9[v10[12]];
      v20 = v10[13];
      v21 = &v8[v20];
      v22 = &v9[v20];
      v23 = type metadata accessor for URL(0);
      v24 = *(_QWORD *)(v23 - 8);
      v72 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48);
      v74 = v24;
      if (v72(v22, 1, v23))
      {
        v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
        memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v21, v22, v23);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
      }
      *(_OWORD *)&v8[v10[14]] = *(_OWORD *)&v9[v10[14]];
      *(_OWORD *)&v8[v10[15]] = *(_OWORD *)&v9[v10[15]];
      v26 = v10[16];
      v27 = &v8[v26];
      v28 = &v9[v26];
      v29 = v72;
      if (v72(&v9[v26], 1, v23))
      {
        v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
        memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v74 + 32))(v27, v28, v23);
        v29 = v72;
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v74 + 56))(v27, 0, 1, v23);
      }
      v31 = v10[17];
      v32 = &v8[v31];
      v33 = &v9[v31];
      if (v29(&v9[v31], 1, v23))
      {
        v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
        memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
        v35 = v74;
      }
      else
      {
        v36 = v33;
        v35 = v74;
        (*(void (**)(char *, char *, uint64_t))(v74 + 32))(v32, v36, v23);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v74 + 56))(v32, 0, 1, v23);
      }
      v8[v10[18]] = v9[v10[18]];
      v37 = v6[7];
      v38 = &a1[v37];
      v39 = &a2[v37];
      if (v29(&a2[v37], 1, v23))
      {
        v40 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
        memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
        v41 = *(void (**)(char *, char *, uint64_t))(v35 + 32);
      }
      else
      {
        v41 = *(void (**)(char *, char *, uint64_t))(v35 + 32);
        v41(v38, v39, v23);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v38, 0, 1, v23);
      }
      v41(&a1[v6[8]], &a2[v6[8]], v23);
      *(_QWORD *)&a1[v6[9]] = *(_QWORD *)&a2[v6[9]];
      *(_OWORD *)&a1[v6[10]] = *(_OWORD *)&a2[v6[10]];
      *(_OWORD *)&a1[v6[11]] = *(_OWORD *)&a2[v6[11]];
      *(_QWORD *)&a1[v6[12]] = *(_QWORD *)&a2[v6[12]];
      a1[v6[13]] = a2[v6[13]];
      a1[v6[14]] = a2[v6[14]];
      v42 = v6[15];
      v43 = &a1[v42];
      v44 = &a2[v42];
      *(_QWORD *)v43 = *(_QWORD *)v44;
      v43[8] = v44[8];
      v45 = v6[16];
      v46 = &a1[v45];
      v47 = &a2[v45];
      if (v67(&a2[v45], 1, v69))
      {
        v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
        memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
      }
      else
      {
        v49 = *((_OWORD *)v47 + 1);
        *(_OWORD *)v46 = *(_OWORD *)v47;
        *((_OWORD *)v46 + 1) = v49;
        v46[32] = v47[32];
        *(_OWORD *)(v46 + 40) = *(_OWORD *)(v47 + 40);
        *((_QWORD *)v46 + 7) = *((_QWORD *)v47 + 7);
        v46[64] = v47[64];
        *(_OWORD *)(v46 + 113) = *(_OWORD *)(v47 + 113);
        *(_OWORD *)(v46 + 104) = *(_OWORD *)(v47 + 104);
        *(_OWORD *)(v46 + 88) = *(_OWORD *)(v47 + 88);
        *(_OWORD *)(v46 + 72) = *(_OWORD *)(v47 + 72);
        v46[129] = v47[129];
        v50 = v69[11];
        v51 = &v46[v50];
        v52 = &v47[v50];
        v53 = type metadata accessor for ArtworkCrop(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v53 - 8) + 32))(v51, v52, v53);
        *(_OWORD *)&v46[v69[12]] = *(_OWORD *)&v47[v69[12]];
        v46[v69[13]] = v47[v69[13]];
        v46[v69[14]] = v47[v69[14]];
        v46[v69[15]] = v47[v69[15]];
        *(_OWORD *)&v46[v69[16]] = *(_OWORD *)&v47[v69[16]];
        (*(void (**)(char *, _QWORD, uint64_t, int *))(v68 + 56))(v46, 0, 1, v69);
      }
      *(_OWORD *)&a1[v6[17]] = *(_OWORD *)&a2[v6[17]];
      v54 = v6[18];
      v55 = &a1[v54];
      v56 = &a2[v54];
      v55[8] = v56[8];
      *(_QWORD *)v55 = *(_QWORD *)v56;
      v57 = v6[19];
      v58 = &a1[v57];
      v59 = &a2[v57];
      *(_QWORD *)v58 = *(_QWORD *)v59;
      v58[8] = v59[8];
      a1[v6[20]] = a2[v6[20]];
      a1[v6[21]] = a2[v6[21]];
      v60 = v6[22];
      v61 = &a1[v60];
      v62 = &a2[v60];
      v63 = type metadata accessor for TranscriptRequestInformation(0);
      v64 = *(_QWORD *)(v63 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48))(v62, 1, v63))
      {
        v65 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2C40);
        memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v64 + 32))(v61, v62, v63);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v64 + 56))(v61, 0, 1, v63);
      }
      swift_storeEnumTagMultiPayload(a1, v70, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_95C00(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = &unk_2F0FA8;
  result = type metadata accessor for EpisodeOffer(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initEnumMetadataMultiPayload(a1, 256, 3, v4);
    return 0;
  }
  return result;
}

uint64_t sub_95C7C(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B5978);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_95CBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BookmarkButtonPresenter.Data(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_95D00()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_95D24(uint64_t a1)
{
  uint64_t v1;

  return sub_91814(a1, v1);
}

uint64_t AtomicCounter.init(initialValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v14;

  v4 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin(a1);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v7 + 8);
  v9 = type metadata accessor for ManagedAtomic(0);
  v10 = swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v8, a2, &protocol requirements base descriptor for AtomicValue, &associated type descriptor for AtomicValue.AtomicRepresentation);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, a2);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v8, a2, AssociatedTypeWitness, &protocol requirements base descriptor for AtomicValue, &associated conformance descriptor for AtomicValue.AtomicValue.AtomicRepresentation: AtomicStorage);
  (*(void (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 16))(v6, AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, a2);
  return v10;
}

uint64_t AtomicCounter.nextValue()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  char *v13;
  uint64_t AssociatedConformanceWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v6 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin(a1);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 16) + 8) + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v10, a2, &protocol requirements base descriptor for ExpressibleByIntegerLiteral, &associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  __chkstk_darwin(AssociatedTypeWitness);
  v13 = (char *)&v19 - v12;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v10, a2, AssociatedTypeWitness, &protocol requirements base descriptor for ExpressibleByIntegerLiteral, &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)(&unk_2F0FF8, 512, AssociatedTypeWitness, AssociatedConformanceWitness);
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v13, a2, v10);
  v15 = swift_getAssociatedTypeWitness(0, *(_QWORD *)(a3 + 8), a2, &protocol requirements base descriptor for AtomicValue, &associated type descriptor for AtomicValue.AtomicRepresentation);
  v16 = (*(uint64_t (**)(void))(*(_QWORD *)a1 + 136))();
  v17 = swift_getAssociatedConformanceWitness(a3, a2, v15, &protocol requirements base descriptor for AtomicInteger, &associated conformance descriptor for AtomicInteger.AtomicValue.AtomicRepresentation: AtomicIntegerStorage);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 16))(v8, v16, 5, v15, v17);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, a2);
}

uint64_t sub_95FFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 24);
}

uint64_t type metadata accessor for AtomicCounter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AtomicCounter);
}

id sub_96010(uint64_t a1, char a2)
{
  void *v2;
  void *v3;
  ShelfKit::InterfaceMode v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int *v13;
  uint64_t v14;
  NSString v15;
  NSString v16;
  Class isa;
  objc_class *v18;
  id v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[4];
  objc_super v29;

  v3 = v2;
  v5 = a2 & 1;
  v6 = type metadata accessor for AutomationSemantics(0);
  v26 = *(_QWORD *)(v6 - 8);
  v27 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_963D4(a1, (uint64_t)v3 + OBJC_IVAR____TtC8ShelfKit10TabElement_tabItem);
  v13 = (int *)type metadata accessor for TabMenu.Item(0);
  v14 = *(_QWORD *)(a1 + v13[7]);
  if ((unint64_t)(v14 - 1) >= 0x11)
  {
    if (v14)
    {
      swift_bridgeObjectRetain();
    }
    else
    {
      UUID.init()(0);
      _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    }
  }
  else
  {
    NavigationTab.stringValue.getter(v14);
  }
  v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v16 = String._bridgeToObjectiveC()();
  isa = TabMenu.Item.tabImage(for:)(v5).super.isa;
  v18 = (objc_class *)type metadata accessor for TabElement(0);
  v29.receiver = v3;
  v29.super_class = v18;
  v19 = objc_msgSendSuper2(&v29, "initWithIdentifier:title:image:", v15, v16, isa);

  v20 = *(unsigned __int8 *)(a1 + v13[9]);
  v21 = v19;
  objc_msgSend(v21, "_setVisible:", v20);
  if ((*(_BYTE *)(a1 + v13[11]) & 1) != 0)
  {
    v22 = -1;
  }
  else if (*(_BYTE *)(a1 + v13[12]))
  {
    v22 = 3;
  }
  else
  {
    v22 = 2;
  }
  objc_msgSend(v21, "_setTabBarPlacement:", v22, v26, v27);
  v23 = TabMenu.Item.accessibilityIdentifier.getter();
  v28[3] = &type metadata for String;
  v28[0] = v23;
  v28[1] = v24;
  static AutomationSemantics.tabBar(tabName:)(v28);
  __swift_destroy_boxed_opaque_existential_1(v28);
  UIAccessibilityIdentification.setAutomationSemantics(_:)(v8, v18);

  (*(void (**)(char *, uint64_t))(v26 + 8))(v8, v27);
  sub_96398(a1);
  return v21;
}

id sub_962A4()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TabElement(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_962E8()
{
  return type metadata accessor for TabElement(0);
}

uint64_t type metadata accessor for TabElement(uint64_t a1)
{
  uint64_t result;

  result = qword_3B5C60;
  if (!qword_3B5C60)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TabElement);
  return result;
}

uint64_t sub_9632C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for TabMenu.Item(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 1, &v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_96398(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for TabMenu.Item(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_963D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TabMenu.Item(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t ActionOrigin.init(sender:view:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;

  result = sub_31BE8(a1, a3);
  *(_QWORD *)(a3 + 32) = a2;
  return result;
}

uint64_t ActionOrigin.sender.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_236BC(v1, a1);
}

void *ActionOrigin.view.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 32);
  v2 = v1;
  return v1;
}

void destroy for ActionOrigin(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24))
    __swift_destroy_boxed_opaque_existential_1((_QWORD *)a1);

}

uint64_t initializeWithCopy for ActionOrigin(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  void *v6;
  id v7;

  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    *(_QWORD *)(a1 + 24) = v4;
    (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1, a2);
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
  }
  v6 = *(void **)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v6;
  v7 = v6;
  return a1;
}

uint64_t assignWithCopy for ActionOrigin(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  void *v6;
  void *v7;
  id v8;

  v4 = *(_QWORD *)(a2 + 24);
  if (!*(_QWORD *)(a1 + 24))
  {
    if (v4)
    {
      *(_QWORD *)(a1 + 24) = v4;
      (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1, a2);
      goto LABEL_8;
    }
LABEL_7:
    v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    goto LABEL_8;
  }
  if (!v4)
  {
    __swift_destroy_boxed_opaque_existential_1((_QWORD *)a1);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_0((_QWORD *)a1, (_QWORD *)a2);
LABEL_8:
  v6 = *(void **)(a1 + 32);
  v7 = *(void **)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v7;
  v8 = v7;

  return a1;
}

_QWORD *__swift_assign_boxed_opaque_existential_0(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v11 = *result;
        v12 = *a2;
        swift_retain(*a2);
        result = (_QWORD *)swift_release(v11);
        *v3 = v12;
      }
      else
      {
        return (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD *, _QWORD))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        v10 = *result;
        if ((v8 & 0x20000) != 0)
        {
          v14 = *a2;
          *v3 = *a2;
          swift_retain(v14);
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (_QWORD *)swift_release(v10);
      }
      else
      {
        (*(void (**)(_BYTE *, _QWORD *, uint64_t))(v6 + 32))(v15, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          v13 = *a2;
          *v3 = *a2;
          swift_retain(v13);
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (_QWORD *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v15, v4);
      }
    }
  }
  return result;
}

uint64_t assignWithTake for ActionOrigin(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  void *v5;

  if (*(_QWORD *)(a1 + 24))
    __swift_destroy_boxed_opaque_existential_1((_QWORD *)a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);

  return a1;
}

uint64_t getEnumTagSinglePayload for ActionOrigin(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ActionOrigin(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ActionOrigin()
{
  return &type metadata for ActionOrigin;
}

uint64_t SearchHint.segue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_267BC(v1 + 48, a1, &qword_3B0C50);
}

uint64_t SearchHint.impressionMetrics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for SearchHint(0);
  return sub_267BC(v1 + *(int *)(v3 + 32), a1, (uint64_t *)&unk_3B8790);
}

uint64_t type metadata accessor for SearchHint(uint64_t a1)
{
  uint64_t result;

  result = qword_3B5CD8;
  if (!qword_3B5CD8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SearchHint);
  return result;
}

uint64_t SearchHint.init(id:term:query:segue:impressionMetrics:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>)
{
  uint64_t v11;

  *a9 = a1;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  a9[4] = a5;
  a9[5] = a6;
  sub_15BD4(a7, (uint64_t)(a9 + 6), &qword_3B0C50);
  v11 = type metadata accessor for SearchHint(0);
  return sub_15BD4(a8, (uint64_t)a9 + *(int *)(v11 + 32), (uint64_t *)&unk_3B8790);
}

uint64_t sub_968FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_267BC(v2 + *(int *)(a1 + 32), a2, (uint64_t *)&unk_3B8790);
}

uint64_t SearchHint.init(deserializing:using:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD v65[5];
  uint64_t v66;

  v62 = a3;
  v66 = a2;
  v4 = type metadata accessor for JSONContext(0);
  v63 = *(_QWORD *)(v4 - 8);
  v64 = v4;
  __chkstk_darwin(v4);
  v61 = (char *)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v6);
  v8 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for JSONObject(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v53 - v15;
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v53 - v18;
  __chkstk_darwin(v17);
  v21 = (char *)&v53 - v20;
  v22 = JSONObject.subscript.getter(25705, 0xE200000000000000);
  v60 = JSONObject.string.getter(v22);
  v24 = v23;
  v25 = *(void (**)(char *, uint64_t))(v10 + 8);
  v25(v21, v9);
  if (v24)
  {
    v59 = v24;
    v26 = JSONObject.subscript.getter(1836213620, 0xE400000000000000);
    v27 = JSONObject.string.getter(v26);
    v29 = v28;
    v25(v19, v9);
    v58 = v29;
    if (v29)
    {
      v57 = v27;
      v30 = JSONObject.subscript.getter(0x7972657571, 0xE500000000000000);
      v31 = JSONObject.string.getter(v30);
      v55 = v32;
      v56 = v31;
      v25(v16, v9);
      JSONObject.subscript.getter(0x6575676573, 0xE500000000000000);
      v33 = v66;
      static AnyActionTypes.tryToMakeInstance(byDeserializing:using:)(v65, v13, v66);
      v25(v13, v9);
      v34 = type metadata accessor for ImpressionMetrics(0);
      JSONObject.subscript.getter(0xD000000000000011, 0x8000000000309180);
      v54 = (void (*)(uint64_t, uint64_t))v25;
      v35 = v63;
      v36 = v64;
      v37 = v61;
      (*(void (**)(char *, uint64_t, uint64_t))(v63 + 16))(v61, v33, v64);
      ExpressibleByJSON.init(tryDeserializing:using:)(v13, v37, v34);
      (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v33, v36);
      v54(a1, v9);
      v38 = v62;
      v39 = v59;
      *v62 = v60;
      v38[1] = v39;
      v40 = v58;
      v38[2] = v57;
      v38[3] = v40;
      v41 = v55;
      v38[4] = v56;
      v38[5] = v41;
      sub_15BD4((uint64_t)v65, (uint64_t)(v38 + 6), &qword_3B0C50);
      v42 = type metadata accessor for SearchHint(0);
      return sub_15BD4((uint64_t)v8, (uint64_t)v38 + *(int *)(v42 + 32), (uint64_t *)&unk_3B8790);
    }
    swift_bridgeObjectRelease();
    v44 = type metadata accessor for JSONError(0);
    v50 = sub_F1C0((unint64_t *)&qword_3B0CB0, (void (*)(uint64_t))&type metadata accessor for JSONError, (uint64_t)&protocol conformance descriptor for JSONError);
    swift_allocError(v44, v50, 0, 0);
    v47 = v51;
    v48 = type metadata accessor for SearchHint(0);
    *v47 = 1836213620;
    v49 = 0xE400000000000000;
  }
  else
  {
    v44 = type metadata accessor for JSONError(0);
    v45 = sub_F1C0((unint64_t *)&qword_3B0CB0, (void (*)(uint64_t))&type metadata accessor for JSONError, (uint64_t)&protocol conformance descriptor for JSONError);
    swift_allocError(v44, v45, 0, 0);
    v47 = v46;
    v48 = type metadata accessor for SearchHint(0);
    *v47 = 25705;
    v49 = 0xE200000000000000;
  }
  v47[1] = v49;
  v47[2] = v48;
  v52 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v44 - 8) + 104))(v47, enum case for JSONError.missingProperty(_:), v44);
  swift_willThrow(v52);
  (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v66, v64);
  return ((uint64_t (*)(uint64_t, uint64_t))v25)(a1, v9);
}

uint64_t sub_96D60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return SearchHint.init(deserializing:using:)(a1, a2, a3);
}

uint64_t SearchHint.clickSender.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  _QWORD *boxed_opaque_existential_2Tm;

  a1[3] = type metadata accessor for SearchHint(0);
  boxed_opaque_existential_2Tm = __swift_allocate_boxed_opaque_existential_2Tm(a1);
  return sub_96DAC(v1, (uint64_t)boxed_opaque_existential_2Tm);
}

uint64_t sub_96DAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SearchHint(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_96DF0()
{
  return sub_F1C0(&qword_3B5C70, (void (*)(uint64_t))type metadata accessor for SearchHint, (uint64_t)&protocol conformance descriptor for SearchHint);
}

uint64_t sub_96E1C(uint64_t a1)
{
  uint64_t result;

  result = sub_F1C0(&qword_3B5C70, (void (*)(uint64_t))type metadata accessor for SearchHint, (uint64_t)&protocol conformance descriptor for SearchHint);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_96E58@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *boxed_opaque_existential_2Tm;

  a2[3] = a1;
  boxed_opaque_existential_2Tm = __swift_allocate_boxed_opaque_existential_2Tm(a2);
  return sub_96DAC(v2, (uint64_t)boxed_opaque_existential_2Tm);
}

uint64_t sub_96E7C(uint64_t a1)
{
  uint64_t result;

  result = sub_F1C0(&qword_3B5C78, (void (*)(uint64_t))type metadata accessor for SearchHint, (uint64_t)&protocol conformance descriptor for SearchHint);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for SearchHint(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  void *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v13 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v13);
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v8;
    v9 = a2[5];
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_QWORD *)(a1 + 40) = v9;
    v10 = a2 + 6;
    v11 = a2[9];
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    if (v11)
    {
      v12 = a2[10];
      *(_QWORD *)(a1 + 72) = v11;
      *(_QWORD *)(a1 + 80) = v12;
      (**(void (***)(uint64_t, uint64_t, uint64_t))(v11 - 8))(a1 + 48, (uint64_t)(a2 + 6), v11);
    }
    else
    {
      v14 = *((_OWORD *)a2 + 4);
      *(_OWORD *)(a1 + 48) = *v10;
      *(_OWORD *)(a1 + 64) = v14;
      *(_QWORD *)(a1 + 80) = a2[10];
    }
    v15 = *(int *)(a3 + 32);
    v16 = (void *)(a1 + v15);
    v17 = (char *)a2 + v15;
    v18 = type metadata accessor for ImpressionMetrics(0);
    v19 = *(_QWORD *)(v18 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
    {
      v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
    }
  }
  return a1;
}

uint64_t destroy for SearchHint(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 72))
    __swift_destroy_boxed_opaque_existential_1((_QWORD *)(a1 + 48));
  v4 = a1 + *(int *)(a2 + 32);
  v5 = type metadata accessor for ImpressionMetrics(0);
  v6 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  return result;
}

uint64_t initializeWithCopy for SearchHint(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  void *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = a2[3];
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = v7;
  v8 = a2[5];
  *(_QWORD *)(a1 + 32) = a2[4];
  *(_QWORD *)(a1 + 40) = v8;
  v9 = a2 + 6;
  v10 = a2[9];
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  if (v10)
  {
    v11 = a2[10];
    *(_QWORD *)(a1 + 72) = v10;
    *(_QWORD *)(a1 + 80) = v11;
    (**(void (***)(uint64_t, _QWORD *, uint64_t))(v10 - 8))(a1 + 48, v9, v10);
  }
  else
  {
    v12 = *((_OWORD *)v9 + 1);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)v9;
    *(_OWORD *)(a1 + 64) = v12;
    *(_QWORD *)(a1 + 80) = v9[4];
  }
  v13 = *(int *)(a3 + 32);
  v14 = (void *)(a1 + v13);
  v15 = (char *)a2 + v13;
  v16 = type metadata accessor for ImpressionMetrics(0);
  v17 = *(_QWORD *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v17 + 16))(v14, v15, v16);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  return a1;
}

uint64_t assignWithCopy for SearchHint(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(void *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(a2 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    if (v9)
    {
      __swift_assign_boxed_opaque_existential_1((_QWORD *)(a1 + 48), (_QWORD *)(a2 + 48));
      goto LABEL_8;
    }
    __swift_destroy_boxed_opaque_existential_1((_QWORD *)(a1 + 48));
  }
  else if (v9)
  {
    *(_QWORD *)(a1 + 72) = v9;
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1 + 48, a2 + 48);
    goto LABEL_8;
  }
  v10 = *(_OWORD *)(a2 + 48);
  v11 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v10;
  *(_OWORD *)(a1 + 64) = v11;
LABEL_8:
  v12 = *(int *)(a3 + 32);
  v13 = (void *)(a1 + v12);
  v14 = (void *)(a2 + v12);
  v15 = type metadata accessor for ImpressionMetrics(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (!v18)
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 24))(v13, v14, v15);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v16 + 8))(v13, v15);
    goto LABEL_13;
  }
  if (v19)
  {
LABEL_13:
    v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v16 + 16))(v13, v14, v15);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

uint64_t initializeWithTake for SearchHint(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  const void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  v6 = *(int *)(a3 + 32);
  v7 = (const void *)(a2 + v6);
  v8 = (void *)(a1 + v6);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v9 = type metadata accessor for ImpressionMetrics(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v7, 1, v9))
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
    memcpy(v8, v7, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v8, v7, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v8, 0, 1, v9);
  }
  return a1;
}

uint64_t assignWithTake for SearchHint(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(void *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 72))
    __swift_destroy_boxed_opaque_existential_1((_QWORD *)(a1 + 48));
  v9 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v9;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v10 = *(int *)(a3 + 32);
  v11 = (void *)(a1 + v10);
  v12 = (void *)(a2 + v10);
  v13 = type metadata accessor for ImpressionMetrics(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (!v17)
    {
      (*(void (**)(void *, void *, uint64_t))(v14 + 40))(v11, v12, v13);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v14 + 8))(v11, v13);
    goto LABEL_8;
  }
  if (v17)
  {
LABEL_8:
    v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v14 + 32))(v11, v12, v13);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for SearchHint(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_975F8);
}

uint64_t sub_975F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 32), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for SearchHint(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_97684);
}

uint64_t sub_97684(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 32), a2, a2, v7);
  }
  return result;
}

void sub_976FC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = &unk_2F1170;
  v4[1] = &unk_2F1170;
  v4[2] = &unk_2F1188;
  v4[3] = &unk_2F11A0;
  sub_34090(319);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
  }
}

uint64_t Locale.paragraphAlignment.getter()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  Swift::Bool v3;

  Locale.identifier.getter();
  v1 = v0;
  v2._countAndFlagsBits = 26746;
  v2._object = (void *)0xE200000000000000;
  v3 = String.hasPrefix(_:)(v2);
  swift_bridgeObjectRelease(v1);
  if (v3)
    return 3;
  else
    return 4;
}

unint64_t static ChannelUpsellInformationIntent.kind.getter()
{
  return 0xD00000000000001ELL;
}

void sub_977EC(_QWORD *a1@<X8>)
{
  *a1 = 0xD00000000000001ELL;
  a1[1] = 0x80000000002F11B0;
}

uint64_t sub_9780C@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_373878, v3);
  result = swift_bridgeObjectRelease(v4);
  *a2 = v5 != 0;
  return result;
}

uint64_t sub_9785C@<X0>(Swift::String string@<0:X0, 8:X1>, BOOL *a2@<X8>)
{
  void *object;
  Swift::String v3;
  Swift::Int v5;
  uint64_t result;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_3738B0, v3);
  result = swift_bridgeObjectRelease(object);
  *a2 = v5 != 0;
  return result;
}

uint64_t sub_978B0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_979FC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_978D8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_979FC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ChannelUpsellInformationIntent.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B5D20);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = a1[3];
  v9 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v8);
  v10 = sub_979FC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ChannelUpsellInformationIntent.CodingKeys, &type metadata for ChannelUpsellInformationIntent.CodingKeys, v10, v8, v9);
  v13 = v7;
  sub_13E9C();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v13);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_979FC()
{
  unint64_t result;

  result = qword_3B5D28;
  if (!qword_3B5D28)
  {
    result = swift_getWitnessTable(&unk_2F1408);
    atomic_store(result, (unint64_t *)&qword_3B5D28);
  }
  return result;
}

unint64_t sub_97A44()
{
  unint64_t result;

  result = qword_3B5D30;
  if (!qword_3B5D30)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ChannelUpsellInformationIntent);
    atomic_store(result, (unint64_t *)&qword_3B5D30);
  }
  return result;
}

unint64_t sub_97A8C()
{
  unint64_t result;

  result = qword_3B5D38;
  if (!qword_3B5D38)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ChannelUpsellInformationIntent);
    atomic_store(result, (unint64_t *)&qword_3B5D38);
  }
  return result;
}

unint64_t sub_97AD4()
{
  unint64_t result;

  result = qword_3B5D40;
  if (!qword_3B5D40)
  {
    type metadata accessor for UpsellInformation(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for UpsellInformation);
    atomic_store(result, (unint64_t *)&qword_3B5D40);
  }
  return result;
}

uint64_t sub_97B1C(_QWORD *a1)
{
  return ChannelUpsellInformationIntent.encode(to:)(a1);
}

uint64_t sub_97B30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_97D10();
  return CustomJSValueConvertible<>.jsRepresentation(in:)(a1, a2, a3, v6);
}

ValueMetadata *type metadata accessor for ChannelUpsellInformationIntent()
{
  return &type metadata for ChannelUpsellInformationIntent;
}

uint64_t storeEnumTagSinglePayload for ChannelUpsellInformationIntent.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_97BDC + 4 * byte_2F11C0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_97BFC + 4 * byte_2F11C5[v4]))();
}

_BYTE *sub_97BDC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_97BFC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_97C04(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_97C0C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_97C14(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_97C1C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ChannelUpsellInformationIntent.CodingKeys()
{
  return &type metadata for ChannelUpsellInformationIntent.CodingKeys;
}

unint64_t sub_97C3C()
{
  unint64_t result;

  result = qword_3B5D48;
  if (!qword_3B5D48)
  {
    result = swift_getWitnessTable(&unk_2F13E0);
    atomic_store(result, (unint64_t *)&qword_3B5D48);
  }
  return result;
}

unint64_t sub_97C84()
{
  unint64_t result;

  result = qword_3B5D50;
  if (!qword_3B5D50)
  {
    result = swift_getWitnessTable(&unk_2F1318);
    atomic_store(result, (unint64_t *)&qword_3B5D50);
  }
  return result;
}

unint64_t sub_97CCC()
{
  unint64_t result;

  result = qword_3B5D58;
  if (!qword_3B5D58)
  {
    result = swift_getWitnessTable(&unk_2F1340);
    atomic_store(result, (unint64_t *)&qword_3B5D58);
  }
  return result;
}

unint64_t sub_97D10()
{
  unint64_t result;

  result = qword_3B5D60;
  if (!qword_3B5D60)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ChannelUpsellInformationIntent);
    atomic_store(result, (unint64_t *)&qword_3B5D60);
  }
  return result;
}

uint64_t HomePagePresenter.pageContent.getter()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(*(_QWORD *)(v0 + 32) + 16));
}

uint64_t sub_97D60()
{
  uint64_t v0;
  _QWORD *v1;
  char v2;
  objc_class *v3;
  uint64_t v4;
  unint64_t v5;
  NSBundle v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  Swift::String v10;
  uint64_t v11;
  unint64_t v13;
  Swift::String v14;
  int v15;
  char v16;
  uint64_t v17;
  uint64_t v18;

  v0 = type metadata accessor for Podcasts(0);
  v17 = v0;
  v18 = sub_F1C0((unint64_t *)&qword_3B33B8, (void (*)(uint64_t))&type metadata accessor for Podcasts, (uint64_t)&protocol conformance descriptor for Podcasts);
  v1 = __swift_allocate_boxed_opaque_existential_2Tm(&v14);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v0 - 8) + 104))(v1, enum case for Podcasts.homeTab(_:), v0);
  v2 = isFeatureEnabled(_:)(&v14);
  __swift_destroy_boxed_opaque_existential_1(&v14);
  v3 = (objc_class *)objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  if ((v2 & 1) != 0)
  {
    v13 = 0xE400000000000000;
    v4 = 0x4F485F454C544954;
    v5 = 0xEA0000000000454DLL;
    v6.super.isa = v3;
    v7 = 0;
    v8 = 0xE000000000000000;
    v9 = 1701670728;
  }
  else
  {
    v13 = 0xE000000000000000;
    v4 = 0x4E5F4E455453494CLL;
    v5 = 0xEA0000000000574FLL;
    v6.super.isa = v3;
    v7 = 0;
    v8 = 0xE000000000000000;
    v9 = 0;
  }
  v10 = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v4, (Swift::String_optional)0, v6, *(Swift::String *)&v7, *(Swift::String *)&v9);

  v14 = v10;
  v15 = 0;
  v16 = 3;
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8770);
  swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
  return CurrentValueSubject.init(_:)(&v14);
}

uint64_t LibraryShowPresenter.headerButtonItems.getter()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + 48));
}

uint64_t LibraryShowPresenter.refreshControls.getter()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + 64));
}

uint64_t ModernStationDetailPresenter.pageContent.getter()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 72, v2, 0, 0);
  return swift_retain(*(_QWORD *)(v0 + 72));
}

_QWORD *HomePagePresenter.__allocating_init(asPartOf:with:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  v3 = sub_9899C(a1);
  swift_release(a1);
  return v3;
}

_QWORD *HomePagePresenter.init(asPartOf:with:)(uint64_t a1)
{
  _QWORD *v2;

  v2 = sub_9899C(a1);
  swift_release(a1);
  return v2;
}

uint64_t sub_97F90(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  os_unfair_lock_s *v19;
  uint64_t v21;
  uint64_t v22;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B5F40);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(a1 + 32);
  v22 = *(_QWORD *)(v12 + 16);
  swift_retain(v22);
  swift_retain(v12);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B27B0);
  v14 = sub_32914(&qword_3B27C0, &qword_3B27B0, (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
  Publisher.first(where:)(sub_98E40, v12, v13, v14);
  swift_release(v12);
  swift_release(v22);
  v15 = swift_allocObject(&unk_37D758, 24, 7);
  swift_weakInit(v15 + 16);
  v16 = swift_allocObject(&unk_37D780, 48, 7);
  *(_QWORD *)(v16 + 16) = a2;
  *(_QWORD *)(v16 + 24) = a3;
  *(_BYTE *)(v16 + 32) = a4;
  *(_QWORD *)(v16 + 40) = v15;
  v17 = sub_32914(&qword_3B5F48, &qword_3B5F40, (uint64_t)&protocol conformance descriptor for Publishers.FirstWhere<A>);
  v18 = Publisher<>.sink(receiveValue:)(sub_98E6C, v16, v8, v17);
  swift_release(v16);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v19 = (os_unfair_lock_s *)(*(_QWORD *)(a1 + 40) + 24);
  os_unfair_lock_lock(v19);
  sub_635EC();
  os_unfair_lock_unlock(v19);
  return swift_release(v18);
}

uint64_t HomePagePresenter.interactionContextPage.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_14510(v1 + OBJC_IVAR____TtC8ShelfKit17HomePagePresenter_interactionContextPage, a1, (uint64_t (*)(_QWORD))&type metadata accessor for InteractionContext.Page);
}

Swift::Void __swiftcall HomePagePresenter.viewDidLoad()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  os_unfair_lock_s *v6;
  uint64_t v7;

  v1 = v0;
  HomePagePresenter.observeFreezableContentState()();
  v7 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 24);
  swift_retain(v7);
  swift_retain(v2);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2770);
  v4 = sub_32914(&qword_3B5D68, &qword_3B2770, (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
  v5 = Publisher<>.sink(receiveValue:)(sub_98CB4, v2, v3, v4);
  swift_release(v2);
  swift_release(v7);
  v6 = (os_unfair_lock_s *)(*(_QWORD *)(v1 + 40) + 24);
  os_unfair_lock_lock(v6);
  sub_635EC();
  os_unfair_lock_unlock(v6);
  swift_release(v5);
}

Swift::Void __swiftcall HomePagePresenter.observeFreezableContentState()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  os_unfair_lock_s *v12;
  _QWORD v13[2];

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B5D70);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13[1] = *(_QWORD *)(v0 + 24);
  v6 = type metadata accessor for FreezableContentSubject();
  v7 = sub_F1C0(&qword_3B3ED0, (void (*)(uint64_t))type metadata accessor for FreezableContentSubject, (uint64_t)&protocol conformance descriptor for FreezableContentSubject);
  v8 = sub_7265C();
  Publisher<>.removeDuplicates()(v6, v7, v8);
  v9 = swift_allocObject(&unk_37D6B8, 24, 7);
  swift_weakInit(v9 + 16);
  v10 = sub_32914(&qword_3B5D78, &qword_3B5D70, (uint64_t)&protocol conformance descriptor for Publishers.RemoveDuplicates<A>);
  v11 = Publisher<>.sink(receiveValue:)(sub_98CF0, v9, v2, v10);
  swift_release(v9);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v12 = (os_unfair_lock_s *)(*(_QWORD *)(v1 + 40) + 24);
  os_unfair_lock_lock(v12);
  sub_635EC();
  os_unfair_lock_unlock(v12);
  swift_release(v11);
}

Swift::Void __swiftcall ModernEpisodesPresenter.viewDidDisappear()()
{
  FreezableContentSubject.send(_:)(ShelfKit_FreezableContentSubject_State_unfrozen);
}

uint64_t sub_983FC(_BYTE *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _BYTE v7[24];
  _BYTE v8[24];

  v2 = a2 + 16;
  if ((*a1 & 1) != 0)
  {
    swift_beginAccess(v2, v8, 0, 0);
    result = swift_weakLoadStrong(v2);
    if (!result)
      return result;
    v4 = result;
    swift_beginAccess(result + 24, v7, 1, 0);
    *(_BYTE *)(v4 + 24) = 0;
  }
  else
  {
    swift_beginAccess(v2, v8, 0, 0);
    result = swift_weakLoadStrong(v2);
    if (!result)
      return result;
    v4 = result;
    swift_beginAccess(result + 24, v7, 1, 0);
    *(_BYTE *)(v4 + 24) = 1;
  }
  v5 = OBJC_IVAR____TtC8ShelfKit16HomePageProvider_upNextEpisodesQueue;
  if (!*(_QWORD *)(v4 + OBJC_IVAR____TtC8ShelfKit16HomePageProvider_upNextEpisodesQueue))
    return swift_release(v4);
  v6 = (_QWORD *)swift_bridgeObjectRetain(*(_QWORD *)(v4
                                                    + OBJC_IVAR____TtC8ShelfKit16HomePageProvider_upNextEpisodesQueue));
  sub_5D954(v6);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v4 + v5) = 0;
  swift_release(v4);
  return swift_bridgeObjectRelease();
}

_QWORD *HomePagePresenter.deinit()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  swift_release(v0[6]);
  swift_release(v0[7]);
  swift_release(v0[8]);
  swift_release(v0[9]);
  sub_145D8((uint64_t)v0 + OBJC_IVAR____TtC8ShelfKit17HomePagePresenter_interactionContextPage, (uint64_t (*)(_QWORD))&type metadata accessor for InteractionContext.Page);
  return v0;
}

uint64_t HomePagePresenter.__deallocating_deinit()
{
  uint64_t v0;

  HomePagePresenter.deinit();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_98578@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return sub_14510(*v1 + OBJC_IVAR____TtC8ShelfKit17HomePagePresenter_interactionContextPage, a1, (uint64_t (*)(_QWORD))&type metadata accessor for InteractionContext.Page);
}

BOOL sub_985AC()
{
  char v0;
  _BYTE v2[8];

  sub_5C9EC((uint64_t)v2);
  v0 = ModernShelfListBuilder.areAnyImportantShelvesStillLoading.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (v0 & 1) == 0;
}

void sub_98614(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  char *v22;
  _QWORD v23[5];
  uint64_t v24;

  v24 = a1;
  v9 = type metadata accessor for ExtendedLaunchStatus(0);
  v23[2] = *(_QWORD *)(v9 - 8);
  v23[3] = v9;
  __chkstk_darwin(v9);
  v23[1] = (char *)v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for PageContent(0);
  __chkstk_darwin(v11);
  v13 = (char *)v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for OSSignpostID(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23[4] = a5 + 16;
  v19 = static os_signpost_type_t.end.getter(v16);
  v20 = sub_1F470();
  v21 = (void *)static OS_os_log.homePageSignpost.getter(v20);
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)(v19, &dword_0, v21, a2, a3, a4, v18);

  (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  sub_14510(v24, (uint64_t)v13, type metadata accessor for PageContent);
  v22 = (char *)sub_98794 + 4 * byte_2F1460[swift_getEnumCaseMultiPayload(v13, v11)];
  __asm { BR              X10 }
}

uint64_t sub_98794()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = v0[2];
  swift_errorRelease(*v0);
  swift_release(v2);
  v3 = *(_QWORD *)(v1 - 144);
  swift_beginAccess(v3, v1 - 104, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    swift_beginAccess(result + 72, v1 - 128, 0, 0);
    v6 = *(_QWORD *)(v5 + 72);
    swift_retain(v6);
    swift_release(v5);
    v8 = *(_QWORD *)(v1 - 168);
    v7 = *(_QWORD *)(v1 - 160);
    v9 = *(_QWORD *)(v1 - 152);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v7 + 104))(v8, enum case for ExtendedLaunchStatus.contentError(_:), v9);
    CurrentValueSubject.send(_:)();
    swift_release(v6);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v8, v9);
  }
  return result;
}

_QWORD *sub_9899C(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;

  v2 = v1;
  v4 = type metadata accessor for OSSignpostID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ExtendedLaunchStatus(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = v4;
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
    && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
  {
    v12 = (void *)sub_B3484((uint64_t)_swiftEmptyArrayStorage);
  }
  else
  {
    v12 = &_swiftEmptySetSingleton;
  }
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3748);
  v14 = swift_allocObject(v13, 28, 7);
  *(_DWORD *)(v14 + 24) = 0;
  *(_QWORD *)(v14 + 16) = v12;
  v2[5] = v14;
  v2[6] = sub_97D60();
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8800);
  v16 = type metadata accessor for HeaderButtonItem(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(_QWORD *)(v17 + 72);
  v19 = *(unsigned __int8 *)(v17 + 80);
  v20 = (v19 + 32) & ~v19;
  v21 = swift_allocObject(v15, v20 + v18, v19 | 7);
  *(_OWORD *)(v21 + 16) = xmmword_2EA0D0;
  *(_BYTE *)(v21 + v20) = 0;
  swift_storeEnumTagMultiPayload(v21 + v20, v16, 9);
  v35 = v21;
  v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8780);
  swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
  v2[7] = CurrentValueSubject.init(_:)(&v35);
  LOBYTE(v35) = 1;
  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2770);
  swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
  v2[8] = CurrentValueSubject.init(_:)(&v35);
  (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for ExtendedLaunchStatus.loading(_:), v8);
  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4448);
  swift_allocObject(v24, *(unsigned int *)(v24 + 48), *(unsigned __int16 *)(v24 + 52));
  v2[9] = CurrentValueSubject.init(_:)(v11);
  v25 = (char *)v2 + OBJC_IVAR____TtC8ShelfKit17HomePagePresenter_interactionContextPage;
  v26 = type metadata accessor for InteractionContext.Page(0);
  v27 = swift_storeEnumTagMultiPayload(v25, v26, 12);
  v28 = static os_signpost_type_t.begin.getter(v27);
  v29 = sub_1F470();
  v30 = (void *)static OS_os_log.homePageSignpost.getter(v29);
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)(v28, &dword_0, v30, "HomePagePresenter.firstLoad", 27, 2, v7);

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v34);
  v2[2] = a1;
  v31 = type metadata accessor for FreezableContentSubject();
  swift_retain(a1);
  BaseObjectGraph.inject<A>(_:)(&v35, v31, v31);
  v2[3] = v35;
  v32 = type metadata accessor for HomePageProvider(0);
  BaseObjectGraph.inject<A>(_:)(&v35, v32, v32);
  v2[4] = v35;
  sub_97F90((uint64_t)v2, (uint64_t)"HomePagePresenter.firstLoad", 27, 2);
  return v2;
}

void sub_98CB4(_BYTE *a1)
{
  if (*a1 == 2)
    FreezableContentSubject.send(_:)(ShelfKit_FreezableContentSubject_State_unfrozen);
}

uint64_t sub_98CCC()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_98CF0(_BYTE *a1)
{
  uint64_t v1;

  return sub_983FC(a1, v1);
}

uint64_t sub_98CF8(uint64_t a1)
{
  uint64_t result;

  result = sub_F1C0(&qword_3B5E40, (void (*)(uint64_t))type metadata accessor for HomePagePresenter, (uint64_t)&protocol conformance descriptor for HomePagePresenter);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for HomePagePresenter(uint64_t a1)
{
  uint64_t result;

  result = qword_3B5E78;
  if (!qword_3B5E78)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for HomePagePresenter);
  return result;
}

uint64_t sub_98D70()
{
  return sub_F1C0(&qword_3B5E48, (void (*)(uint64_t))type metadata accessor for HomePagePresenter, (uint64_t)&protocol conformance descriptor for HomePagePresenter);
}

uint64_t sub_98D9C()
{
  return type metadata accessor for HomePagePresenter(0);
}

uint64_t sub_98DA4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[9];

  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[3] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[4] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[5] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[6] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[7] = (char *)&value witness table for Builtin.NativeObject + 64;
  result = type metadata accessor for InteractionContext.Page(319);
  if (v3 <= 0x3F)
  {
    v4[8] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 9, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for HomePagePresenter(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for HomePagePresenter);
}

uint64_t dispatch thunk of HomePagePresenter.__allocating_init(asPartOf:with:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 152))();
}

BOOL sub_98E40()
{
  return sub_985AC();
}

uint64_t sub_98E48()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

void sub_98E6C(uint64_t a1)
{
  uint64_t v1;

  sub_98614(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(unsigned __int8 *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t Page.modernShelves.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  _QWORD *v34;
  id v35;
  void *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *boxed_opaque_existential_2Tm;
  uint64_t v49;
  void (*v50)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int *v55;
  _QWORD *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  _QWORD *v83;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3B80);
  __chkstk_darwin(v1);
  v3 = (char *)&v64 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v4);
  v71 = (char *)&v64 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
  __chkstk_darwin(v6);
  v8 = (char *)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0C38);
  __chkstk_darwin(v9);
  v68 = (char *)&v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8660);
  __chkstk_darwin(v11);
  v13 = (char *)&v64 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for ModernShelf(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v69 = (char *)&v64 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v64 - v19;
  v21 = __chkstk_darwin(v18);
  v79 = (uint64_t)&v64 - v22;
  __chkstk_darwin(v21);
  v77 = (uint64_t)&v64 - v23;
  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
  __chkstk_darwin(v24);
  v74 = (uint64_t)&v64 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for ArtworkModel(0);
  v72 = *(_QWORD *)(v26 - 8);
  v73 = v26;
  v27 = __chkstk_darwin(v26);
  v67 = (uint64_t)&v64 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v75 = v0;
  v76 = (uint64_t)&v64 - v29;
  v30 = *(_QWORD *)(v0 + 16);
  if ((unint64_t)v30 >> 62)
  {
    if (v30 < 0)
      v63 = *(_QWORD *)(v0 + 16);
    else
      v63 = v30 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n(*(_QWORD *)(v0 + 16), 2);
    result = _CocoaArrayWrapper.endIndex.getter(v63);
    v31 = result;
  }
  else
  {
    v31 = *(_QWORD *)((char *)&dword_10 + (v30 & 0xFFFFFFFFFFFFF8));
    result = swift_bridgeObjectRetain_n(*(_QWORD *)(v0 + 16), 2);
  }
  v78 = v14;
  v66 = v3;
  v65 = v20;
  v70 = v8;
  if (v31)
  {
    if (v31 < 1)
    {
      __break(1u);
      return result;
    }
    v33 = 0;
    v34 = _swiftEmptyArrayStorage;
    do
    {
      if ((v30 & 0xC000000000000001) != 0)
        v35 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v33, v30);
      else
        v35 = *(id *)(v30 + 8 * v33 + 32);
      v36 = v35;
      Shelf.mapToModernShelf()((uint64_t)v13);

      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
      {
        sub_1459C((uint64_t)v13, &qword_3B8660);
      }
      else
      {
        v37 = v77;
        sub_3C56C((uint64_t)v13, v77, type metadata accessor for ModernShelf);
        sub_3C56C(v37, v79, type metadata accessor for ModernShelf);
        if ((swift_isUniquelyReferenced_nonNull_native(v34) & 1) == 0)
          v34 = (_QWORD *)sub_10CD4(0, v34[2] + 1, 1, (unint64_t)v34);
        v39 = v34[2];
        v38 = v34[3];
        if (v39 >= v38 >> 1)
          v34 = (_QWORD *)sub_10CD4(v38 > 1, v39 + 1, 1, (unint64_t)v34);
        v34[2] = v39 + 1;
        sub_3C56C(v79, (uint64_t)v34+ ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80))+ *(_QWORD *)(v15 + 72) * v39, type metadata accessor for ModernShelf);
        v14 = v78;
      }
      ++v33;
    }
    while (v31 != v33);
  }
  else
  {
    v34 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease_n(v30, 2);
  v83 = v34;
  v40 = v74;
  sub_267BC(v75 + OBJC_IVAR____TtC8ShelfKit4Page_uber, v74, &qword_3BEB70);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v72 + 48))(v40, 1, v73) == 1)
  {
    sub_1459C(v40, &qword_3BEB70);
  }
  else
  {
    v41 = v76;
    sub_3C56C(v40, v76, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
    v42 = type metadata accessor for Header(0);
    v43 = (uint64_t)v68;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v68, 1, 1, v42);
    v44 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8750);
    v45 = swift_allocObject(v44, 72, 7);
    *(_OWORD *)(v45 + 16) = xmmword_2EA0D0;
    v46 = v67;
    sub_14510(v41, v67, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
    v47 = type metadata accessor for RoomUber(0);
    *(_QWORD *)(v45 + 56) = v47;
    *(_QWORD *)(v45 + 64) = sub_F1C0(&qword_3B5F50, (void (*)(uint64_t))type metadata accessor for RoomUber, (uint64_t)&protocol conformance descriptor for RoomUber);
    boxed_opaque_existential_2Tm = __swift_allocate_boxed_opaque_existential_2Tm((_QWORD *)(v45 + 32));
    UUID.init()(boxed_opaque_existential_2Tm);
    sub_3C56C(v46, (uint64_t)boxed_opaque_existential_2Tm + *(int *)(v47 + 20), (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
    v49 = type metadata accessor for URL(0);
    v50 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56);
    v51 = (uint64_t)v70;
    v50(v70, 1, 1, v49);
    v52 = type metadata accessor for ImpressionMetrics(0);
    v80 = 0u;
    v81 = 0u;
    v82 = 0;
    v53 = (uint64_t)v71;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 56))(v71, 1, 1, v52);
    v54 = *(int *)(v14 + 32);
    v55 = (int *)v14;
    v56 = v69;
    v69[v54] = 3;
    v57 = (uint64_t)v56 + v55[9];
    v50((char *)v57, 1, 1, v49);
    *v56 = 0x726562556D6F6F52;
    v56[1] = 0xE800000000000000;
    sub_15BD4(v43, (uint64_t)v56 + v55[5], &qword_3B0C38);
    v58 = (char *)v56 + v55[6];
    *(_WORD *)v58 = 31;
    *((_WORD *)v58 + 3) = 256;
    *(_DWORD *)(v58 + 2) = 0;
    *((_QWORD *)v58 + 1) = 1;
    *(_QWORD *)((char *)v56 + v55[7]) = v45;
    sub_15B8C(v51, v57);
    *((_BYTE *)v56 + v55[10]) = 1;
    *((_BYTE *)v56 + v55[11]) = 0;
    v59 = (uint64_t)v56 + v55[12];
    if (*((_QWORD *)&v81 + 1))
    {
      sub_F4D8(&v80, v59);
    }
    else
    {
      v60 = (unint64_t)v81;
      *(_OWORD *)v59 = v80;
      *(_OWORD *)(v59 + 16) = v60;
      *(_QWORD *)(v59 + 32) = v82;
    }
    v61 = (uint64_t)v66;
    v62 = (uint64_t)v65;
    sub_15BD4(v53, (uint64_t)v56 + *(int *)(v78 + 52), (uint64_t *)&unk_3B8790);
    *((_BYTE *)v56 + v54) = 3;
    sub_3C56C((uint64_t)v56, v62, type metadata accessor for ModernShelf);
    sub_14510(v62, v61, type metadata accessor for ModernShelf);
    sub_6A888(0, 0, v61);
    sub_145D8(v62, type metadata accessor for ModernShelf);
    sub_145D8(v76, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
    return (uint64_t)v83;
  }
  return (uint64_t)v34;
}

uint64_t sub_995BC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint8_t *v26;
  uint64_t v27;
  uint8_t *v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v3 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v5);
  v10 = (char *)&v28 - v9;
  result = JSONObject.string.getter(v8);
  if (v12)
  {
    v13 = result;
    v14 = v12;
    if (result == 0xD00000000000001ALL && v12 == 0x800000000030D020
      || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ALL, 0x800000000030D020, result, v12, 0) & 1) != 0
      || v13 == 0xD000000000000011 && v14 == 0x800000000030D040
      || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x800000000030D040, v13, v14, 0) & 1) != 0)
    {
      result = swift_bridgeObjectRelease();
      if ((*a2 & 1) != 0)
        return result;
      v15 = *a2 | 1;
      goto LABEL_10;
    }
    if (v13 == 0xD000000000000022 && v14 == 0x800000000030D060
      || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000022, 0x800000000030D060, v13, v14, 0) & 1) != 0
      || v13 == 0xD000000000000019 && v14 == 0x800000000030D090
      || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000019, 0x800000000030D090, v13, v14, 0) & 1) != 0)
    {
      result = swift_bridgeObjectRelease();
      if ((*a2 & 2) == 0)
      {
        v15 = *a2 | 2;
LABEL_10:
        *a2 = v15;
      }
    }
    else if (v13 == 0x72666552776F6873 && v14 == 0xED00004955687365
           || (_stringCompareWithSmolCheck(_:_:expecting:)(0x72666552776F6873, 0xED00004955687365, v13, v14, 0) & 1) != 0)
    {
      result = swift_bridgeObjectRelease();
      if ((*a2 & 8) == 0)
      {
        v15 = *a2 | 8;
        goto LABEL_10;
      }
    }
    else if (v13 == 0xD000000000000017 && v14 == 0x800000000030D0B0
           || (v16 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000017, 0x800000000030D0B0, v13, v14, 0), (v16 & 1) != 0))
    {
      v17 = swift_bridgeObjectRelease();
      v18 = static Logger.navigation.getter(v17);
      v19 = Logger.logObject.getter(v18);
      v20 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v19, v20))
      {
        v21 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v21 = 0;
        _os_log_impl(&dword_0, v19, v20, "prefersPageHeaderHidden is no longer supported, ignoring", v21, 2u);
        swift_slowDealloc(v21, -1, -1);
      }

      return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v10, v3);
    }
    else
    {
      static Logger.navigation.getter(v16);
      v22 = swift_bridgeObjectRetain(v14);
      v23 = Logger.logObject.getter(v22);
      v24 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v23, v24))
      {
        v25 = (uint8_t *)swift_slowAlloc(12, -1);
        v30 = swift_slowAlloc(32, -1);
        v33 = v30;
        v29 = v25;
        *(_DWORD *)v25 = 136315138;
        v28 = v25 + 4;
        swift_bridgeObjectRetain(v14);
        v31 = sub_69298(v13, v14, &v33);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32);
        swift_bridgeObjectRelease_n(v14, 3);
        v26 = v29;
        _os_log_impl(&dword_0, v23, v24, "Unknown presentation option %s, ignoring", v29, 0xCu);
        v27 = v30;
        swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v27, -1, -1);
        swift_slowDealloc(v26, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v14, 2);
      }
      return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    }
  }
  return result;
}

uint64_t Page.__allocating_init(shelves:title:selectedFilterActionId:filterActions:headerBackgroundColor:headerButtonItems:presentationOptions:pageContext:nextPage:isIncomplete:isExplicit:uber:showAdamId:channelAdamId:mapiInLibrary:pageMetrics:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, char a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v22;

  v22 = swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
  Page.init(shelves:title:selectedFilterActionId:filterActions:headerBackgroundColor:headerButtonItems:presentationOptions:pageContext:nextPage:isIncomplete:isExplicit:uber:showAdamId:channelAdamId:mapiInLibrary:pageMetrics:)(a1, a2, a3, a4, a5, a6, a7 | ((HIDWORD(a7) & 1) << 32), a8, a9, a10, a11, a12, a13, a14, a15, a16 & 1, a17, a18 & 1, a19,
    a20);
  return v22;
}

uint64_t Page.init(shelves:title:selectedFilterActionId:filterActions:headerBackgroundColor:headerButtonItems:presentationOptions:pageContext:nextPage:isIncomplete:isExplicit:uber:showAdamId:channelAdamId:mapiInLibrary:pageMetrics:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, char a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  *(_QWORD *)(v20 + 16) = a1;
  *(_QWORD *)(v20 + 24) = a2;
  *(_QWORD *)(v20 + 32) = a3;
  *(_QWORD *)(v20 + 40) = a4;
  *(_QWORD *)(v20 + 48) = a5;
  *(_QWORD *)(v20 + 56) = a6;
  *(_DWORD *)(v20 + 64) = a7;
  *(_BYTE *)(v20 + 68) = BYTE4(a7) & 1;
  v21 = v20 + OBJC_IVAR____TtC8ShelfKit4Page_pageContext;
  *(_QWORD *)(v20 + 72) = a8;
  *(_QWORD *)(v20 + 80) = a9;
  sub_3C56C(a10, v21, (uint64_t (*)(_QWORD))&type metadata accessor for InteractionContext.Page);
  sub_15BD4(a11, v20 + OBJC_IVAR____TtC8ShelfKit4Page_nextPage, &qword_3B4720);
  *(_BYTE *)(v20 + OBJC_IVAR____TtC8ShelfKit4Page_isIncomplete) = a12;
  *(_BYTE *)(v20 + OBJC_IVAR____TtC8ShelfKit4Page_isExplicit) = a13;
  sub_15BD4(a14, v20 + OBJC_IVAR____TtC8ShelfKit4Page_uber, &qword_3BEB70);
  v22 = v20 + OBJC_IVAR____TtC8ShelfKit4Page_showAdamId;
  *(_QWORD *)v22 = a15;
  *(_BYTE *)(v22 + 8) = a16 & 1;
  v23 = v20 + OBJC_IVAR____TtC8ShelfKit4Page_channelAdamId;
  *(_QWORD *)v23 = a17;
  *(_BYTE *)(v23 + 8) = a18 & 1;
  *(_BYTE *)(v20 + OBJC_IVAR____TtC8ShelfKit4Page_mapiInLibrary) = a19;
  v24 = v20 + OBJC_IVAR____TtC8ShelfKit4Page_pageMetrics;
  v25 = type metadata accessor for PageMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v24, a20, v25);
  return v20;
}

uint64_t Page.__allocating_init(deserializing:using:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  NSObject *v83;
  os_signpost_type_t v84;
  char v85;
  uint8_t *v86;
  os_signpost_id_t v87;
  void (*v88)(char *, char *, uint64_t);
  uint64_t v89;
  uint64_t v90;
  void (*v91)(char *, uint64_t);
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void (*v96)(uint64_t, uint64_t);
  uint64_t v97;
  uint64_t v98;
  unsigned int (*v99)(uint64_t, uint64_t, uint64_t);
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  NSObject *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  char *v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  void (*v145)(char *, uint64_t, uint64_t);
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  const char *v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  uint8_t *v161;
  os_signpost_id_t v162;
  void (*v163)(char *, uint64_t);
  _BOOL8 v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  int v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  char *v197;
  char *v198;
  uint64_t v199;
  char *v200;
  uint64_t v201;
  NSObject *v202;
  char *v203;
  uint64_t v204;
  uint64_t v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  int v209;
  char v210;
  char *v211;
  uint64_t v212;
  char v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  char *v220;
  uint64_t v221;
  NSObject *v222;
  char *v223;
  uint64_t v224;
  uint64_t v225;
  os_signpost_type_t v226;
  uint64_t v227;
  char *v228;
  uint64_t v229;
  uint64_t v230;
  const char *v231;
  uint64_t v232;
  uint64_t v233;
  const char *v234;
  char *v235;
  uint64_t v236;
  uint8_t *v237;
  os_signpost_id_t v238;
  void (*v239)(char *, uint64_t);
  char *v241;
  char *v242;
  uint64_t v243;
  uint8_t *v244;
  os_signpost_id_t v245;
  void (*v246)(char *, uint64_t);
  uint64_t v247;
  uint64_t v248;
  char *v249;
  char *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  char *v255;
  char *v256;
  char *v257;
  char *v258;
  char *v259;
  char *v260;
  char *v261;
  char *v262;
  char *v263;
  uint64_t v264;
  uint64_t v265;
  char *v266;
  unint64_t v267;
  uint64_t v268;
  _QWORD *v269;
  uint64_t v270;
  char *v271;
  uint64_t v272;
  uint64_t v273;
  char *v274;
  char *v275;
  char *v276;
  uint64_t v277;
  uint64_t v278;
  char *v279;
  char *v280;
  void (*v281)(char *, uint64_t);
  uint64_t v282;
  char *v283;
  char *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  void (*v288)(char *, uint64_t, uint64_t);
  uint64_t v289;
  void (*v290)(char *, char *, uint64_t);
  uint64_t v291;
  char *v292;
  uint64_t v293;
  char *v294;
  uint64_t v295;
  uint64_t (*v296)(char *, uint64_t);
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  char v303;
  unsigned int v304;
  unsigned __int8 v305;

  v298 = a2;
  v293 = a1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4720);
  __chkstk_darwin(v2);
  v256 = (char *)&v247 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v254 = type metadata accessor for PageMetrics(0);
  v253 = *(_QWORD *)(v254 - 8);
  v4 = __chkstk_darwin(v254);
  v255 = (char *)&v247 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v276 = (char *)&v247 - v6;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
  v8 = __chkstk_darwin(v7);
  v252 = (uint64_t)&v247 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v286 = (uint64_t)&v247 - v10;
  v11 = type metadata accessor for InteractionContext.Page(0);
  v12 = __chkstk_darwin(v11);
  v251 = (uint64_t)&v247 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v285 = (uint64_t)&v247 - v14;
  v302 = type metadata accessor for JSONContext(0);
  v291 = *(_QWORD *)(v302 - 8);
  v15 = __chkstk_darwin(v302);
  v275 = (char *)&v247 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v292 = (char *)&v247 - v17;
  v265 = type metadata accessor for OSSignpostError(0);
  v18 = *(_QWORD *)(v265 - 8);
  v19 = __chkstk_darwin(v265);
  v250 = (char *)&v247 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v19);
  v249 = (char *)&v247 - v22;
  __chkstk_darwin(v21);
  v258 = (char *)&v247 - v23;
  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4F30);
  v25 = __chkstk_darwin(v24);
  v270 = (uint64_t)&v247 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v288 = (void (*)(char *, uint64_t, uint64_t))((char *)&v247 - v27);
  v301 = type metadata accessor for JSONObject(0);
  v289 = *(_QWORD *)(v301 - 8);
  v28 = __chkstk_darwin(v301);
  v274 = (char *)&v247 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __chkstk_darwin(v28);
  v263 = (char *)&v247 - v31;
  v32 = __chkstk_darwin(v30);
  v273 = (uint64_t)&v247 - v33;
  v34 = __chkstk_darwin(v32);
  v272 = (uint64_t)&v247 - v35;
  v36 = __chkstk_darwin(v34);
  v271 = (char *)&v247 - v37;
  v38 = __chkstk_darwin(v36);
  v284 = (char *)&v247 - v39;
  v40 = __chkstk_darwin(v38);
  v267 = (unint64_t)&v247 - v41;
  v42 = __chkstk_darwin(v40);
  v269 = (uint64_t *)((char *)&v247 - v43);
  v44 = __chkstk_darwin(v42);
  v294 = (char *)&v247 - v45;
  __chkstk_darwin(v44);
  v287 = (uint64_t)&v247 - v46;
  v299 = type metadata accessor for JSONArray(0);
  v295 = *(_QWORD *)(v299 - 8);
  v47 = __chkstk_darwin(v299);
  v257 = (char *)&v247 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = __chkstk_darwin(v47);
  v268 = (uint64_t)&v247 - v50;
  __chkstk_darwin(v49);
  v283 = (char *)&v247 - v51;
  v52 = type metadata accessor for OSSignpostID(0);
  v53 = *(_QWORD *)(v52 - 8);
  v54 = __chkstk_darwin(v52);
  v261 = (char *)&v247 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = __chkstk_darwin(v54);
  v260 = (char *)&v247 - v57;
  v58 = __chkstk_darwin(v56);
  v280 = (char *)&v247 - v59;
  v60 = __chkstk_darwin(v58);
  v62 = (char *)&v247 - v61;
  __chkstk_darwin(v60);
  v64 = (char *)&v247 - v63;
  v65 = type metadata accessor for OSSignposter(0);
  v66 = *(_QWORD *)(v65 - 8);
  v67 = __chkstk_darwin(v65);
  v262 = (char *)&v247 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = __chkstk_darwin(v67);
  v259 = (char *)&v247 - v70;
  v71 = __chkstk_darwin(v69);
  v279 = (char *)&v247 - v72;
  v73 = __chkstk_darwin(v71);
  v75 = (char *)&v247 - v74;
  v76 = __chkstk_darwin(v73);
  v78 = (char *)&v247 - v77;
  v79 = static OSSignposter.js.getter(v76);
  v80 = static OSSignposter.js.getter(v79);
  v81 = OSSignposter.logHandle.getter(v80);
  OSSignpostID.init(log:)(v81);
  v296 = *(uint64_t (**)(char *, uint64_t))(v66 + 8);
  v297 = v65;
  v82 = v296(v75, v65);
  v83 = OSSignposter.logHandle.getter(v82);
  v84 = static os_signpost_type_t.begin.getter(v83);
  v85 = OS_os_log.signpostsEnabled.getter();
  v264 = v18;
  if ((v85 & 1) != 0)
  {
    v290 = *(void (**)(char *, char *, uint64_t))(v53 + 16);
    v290(v62, v64, v52);
    v86 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v86 = 0;
    v87 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_0, v83, v84, v87, "Page.Deserialize", "", v86, 2u);
    swift_slowDealloc(v86, -1, -1);

    (*(void (**)(char *, uint64_t))(v53 + 8))(v62, v52);
    v88 = v290;
  }
  else
  {

    v88 = *(void (**)(char *, char *, uint64_t))(v53 + 16);
  }
  v290 = v88;
  v88(v62, v64, v52);
  v89 = type metadata accessor for OSSignpostIntervalState(0);
  swift_allocObject(v89, *(unsigned int *)(v89 + 48), *(unsigned __int16 *)(v89 + 52));
  v266 = v62;
  v90 = OSSignpostIntervalState.init(id:isOpen:)(v62, 1);
  v91 = *(void (**)(char *, uint64_t))(v53 + 8);
  v282 = v52;
  v281 = v91;
  v91(v64, v52);
  v296(v78, v297);
  v92 = v287;
  v93 = v293;
  v94 = JSONObject.subscript.getter(0x7365766C656873, 0xE700000000000000);
  v95 = (uint64_t)v288;
  JSONObject.array.getter(v94);
  v96 = *(void (**)(uint64_t, uint64_t))(v289 + 8);
  v97 = v301;
  v96(v92, v301);
  v98 = v295;
  v99 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v295 + 48);
  v100 = v299;
  if (v99(v95, 1, v299) == 1)
  {
    v299 = (uint64_t)v96;
    sub_1459C(v95, &qword_3B4F30);
    v101 = type metadata accessor for JSONError(0);
    v102 = sub_F1C0((unint64_t *)&qword_3B0CB0, (void (*)(uint64_t))&type metadata accessor for JSONError, (uint64_t)&protocol conformance descriptor for JSONError);
    v103 = swift_allocError(v101, v102, 0, 0);
    *v104 = 0x7365766C656873;
    v104[1] = 0xE700000000000000;
    v104[2] = v277;
    v105 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v101 - 8) + 104))(v104, enum case for JSONError.missingProperty(_:), v101);
    v106 = swift_willThrow(v105);
    v107 = (uint64_t)v279;
    v108 = static OSSignposter.js.getter(v106);
    v109 = OSSignposter.logHandle.getter(v108);
    v110 = (uint64_t)v280;
    v111 = OSSignpostIntervalState.signpostID.getter();
    v112 = static os_signpost_type_t.end.getter(v111);
    v113 = OS_os_log.signpostsEnabled.getter();
    v114 = v298;
    if ((v113 & 1) != 0)
    {
      v300 = v103;
      v115 = swift_retain(v90);
      v116 = v258;
      checkForErrorAndConsumeState(state:)(v115);
      swift_release(v90);
      v117 = v264;
      v118 = v265;
      v119 = (*(uint64_t (**)(char *, uint64_t))(v264 + 88))(v116, v265);
      v278 = v90;
      if (v119 == enum case for OSSignpostError.doubleEnd(_:))
      {
        v157 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v117 + 8))(v116, v118);
        v157 = "";
      }
      v93 = v293;
      v158 = v266;
      v159 = (uint64_t)v280;
      v160 = v282;
      v290(v266, v280, v282);
      v161 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v161 = 0;
      v162 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl(&dword_0, v109, (os_signpost_type_t)v112, v162, "Page.Deserialize", v157, v161, 2u);
      swift_slowDealloc(v161, -1, -1);

      v163 = v281;
      v281((char *)v159, v160);
      v296(v279, v297);
      v163(v158, v160);
      v90 = v278;
      v96 = (void (*)(uint64_t, uint64_t))v299;
    }
    else
    {

      v281((char *)v110, v282);
      v296((char *)v107, v297);
      v93 = v293;
      v96 = (void (*)(uint64_t, uint64_t))v299;
    }
LABEL_40:
    swift_release(v90);
    (*(void (**)(uint64_t, uint64_t))(v291 + 8))(v114, v302);
    v96(v93, v301);
    return v112;
  }
  v278 = v90;
  v120 = v283;
  v258 = *(char **)(v98 + 32);
  ((void (*)(char *, uint64_t, uint64_t))v258)(v283, v95, v100);
  v121 = v268;
  (*(void (**)(uint64_t, char *, uint64_t))(v98 + 16))(v268, v120, v100);
  v122 = v292;
  v123 = v298;
  v288 = *(void (**)(char *, uint64_t, uint64_t))(v291 + 16);
  v288(v292, v298, v302);
  v124 = type metadata accessor for Shelf(0);
  v125 = sub_F1C0((unint64_t *)&qword_3B0AE0, (void (*)(uint64_t))type metadata accessor for Shelf, (uint64_t)&protocol conformance descriptor for Shelf);
  v126 = v124;
  v127 = v299;
  v287 = Array<A>.init(tryDeserializing:using:)(v121, v122, v126, v125);
  v128 = (uint64_t)v294;
  v129 = JSONObject.subscript.getter(0x656C746974, 0xE500000000000000);
  v268 = JSONObject.string.getter(v129);
  v280 = (char *)v130;
  v96(v128, v97);
  JSONObject.subscript.getter(0xD000000000000013, 0x800000000030CF50);
  v248 = _sSo26ASKPagePresentationOptionsV8ShelfKitE16tryDeserializingAB9JetEngine10JSONObjectV_tcfC_0(v128);
  v131 = JSONObject.subscript.getter(0xD000000000000016, 0x800000000030CF70);
  v247 = JSONObject.string.getter(v131);
  v279 = (char *)v132;
  v96(v128, v97);
  v133 = v269;
  v134 = JSONObject.subscript.getter(0x63417265746C6966, 0xED0000736E6F6974);
  v135 = v270;
  JSONObject.array.getter(v134);
  v96((uint64_t)v133, v97);
  if (v99(v135, 1, v127) == 1)
  {
    sub_1459C(v135, &qword_3B4F30);
    v269 = _swiftEmptyArrayStorage;
  }
  else
  {
    v136 = v257;
    ((void (*)(char *, uint64_t, uint64_t))v258)(v257, v135, v127);
    v137 = type metadata accessor for Action(0);
    __chkstk_darwin(v137);
    v138 = v300;
    v269 = (_QWORD *)JSONArray.compactMap<A>(_:)(sub_9105C);
    v300 = v138;
    (*(void (**)(char *, uint64_t))(v295 + 8))(v136, v127);
  }
  v139 = v267;
  v140 = v123;
  v141 = v294;
  JSONObject.subscript.getter(0xD000000000000015, 0x800000000030CF90);
  v142 = v292;
  v143 = v123;
  v144 = v302;
  v145 = v288;
  v288(v292, v143, v302);
  sub_A0324();
  ExpressibleByJSON.init(tryDeserializing:using:)(v141, v142, &type metadata for HexColor);
  v267 = v304;
  LODWORD(v258) = v305;
  JSONObject.subscript.getter(0xD000000000000011, 0x800000000030AED0);
  v145(v142, v140, v144);
  v146 = type metadata accessor for HeaderButtonItem(0);
  v147 = sub_F1C0(&qword_3B5F60, (void (*)(uint64_t))type metadata accessor for HeaderButtonItem, (uint64_t)&protocol conformance descriptor for HeaderButtonItem);
  v148 = Array<A>.init(tryDeserializing:using:)(v141, v142, v146, v147);
  v149 = JSONObject.subscript.getter(0x6D61644165676170, 0xEA00000000006449);
  v150 = JSONObject.string.getter(v149);
  v152 = v151;
  v270 = v148;
  if (v151)
  {
    v153 = v300;
    v154 = static AdamID.parse(_:)(v150, v151);
    if (v153)
    {
      v155 = swift_bridgeObjectRelease();
      v156 = static AdamID.empty.getter(v155);
      swift_errorRelease(v153);
      v300 = 0;
    }
    else
    {
      v156 = v154;
      v300 = 0;
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    v156 = 0;
  }
  v164 = v152 == 0;
  v165 = v301;
  v96(v139, v301);
  v166 = v294;
  v167 = JSONObject.subscript.getter(0x746E6F4365676170, 0xEB00000000747865);
  v168 = JSONObject.string.getter(v167);
  v170 = v169;
  v96((uint64_t)v166, v165);
  InteractionContext.Page.init(rawString:adamID:)(v168, v170, v156, v164);
  JSONObject.subscript.getter(0x656761507478656ELL, 0xE800000000000000);
  v171 = type metadata accessor for ArtworkModel(0);
  JSONObject.subscript.getter(1919246965, 0xE400000000000000);
  v172 = v292;
  v288(v292, v140, v302);
  v173 = v165;
  sub_F1C0((unint64_t *)&qword_3B2828, (void (*)(uint64_t))&type metadata accessor for ArtworkModel, (uint64_t)&protocol conformance descriptor for ArtworkModel);
  ExpressibleByJSON.init(tryDeserializing:using:)(v166, v172, v171);
  v174 = v271;
  v175 = JSONObject.subscript.getter(0x706D6F636E497369, 0xEC0000006574656CLL);
  LODWORD(v170) = JSONObject.BOOL.getter(v175);
  v96((uint64_t)v174, v165);
  v176 = v272;
  v177 = JSONObject.subscript.getter(0x63696C7078457369, 0xEA00000000007469);
  v178 = JSONObject.BOOL.getter(v177);
  v96(v176, v165);
  v179 = v273;
  v180 = JSONObject.subscript.getter(0x6D616441776F6873, 0xEA00000000006449);
  v181 = JSONObject.string.getter(v180);
  v183 = v182;
  LODWORD(v292) = v170;
  LODWORD(v271) = v178;
  if (v182)
  {
    v184 = v300;
    v185 = static AdamID.parse(_:)(v181, v182);
    if (v184)
    {
      v186 = swift_bridgeObjectRelease();
      v272 = static AdamID.empty.getter(v186);
      swift_errorRelease(v184);
      v300 = 0;
    }
    else
    {
      v272 = v185;
      v300 = 0;
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    v272 = 0;
  }
  v187 = v263;
  v96(v179, v173);
  v188 = JSONObject.subscript.getter(0x416C656E6E616863, 0xED000064496D6164);
  v189 = JSONObject.string.getter(v188);
  v191 = v190;
  if (v190)
  {
    v192 = v300;
    v193 = static AdamID.parse(_:)(v189, v190);
    v194 = v192;
    if (v192)
    {
      v195 = swift_bridgeObjectRelease();
      v273 = static AdamID.empty.getter(v195);
      swift_errorRelease(v192);
      v194 = 0;
    }
    else
    {
      v273 = v193;
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    v273 = 0;
    v194 = v300;
  }
  v96((uint64_t)v187, v173);
  v196 = v274;
  JSONObject.subscript.getter(0x7274654D65676170, 0xEB00000000736369);
  v197 = v275;
  v288(v275, v298, v302);
  v198 = v276;
  PageMetrics.init(deserializing:using:)(v196, v197);
  if (v194)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1459C(v286, &qword_3BEB70);
    v96((uint64_t)v284, v173);
    sub_145D8(v285, (uint64_t (*)(_QWORD))&type metadata accessor for InteractionContext.Page);
    v199 = (*(uint64_t (**)(char *, uint64_t))(v295 + 8))(v283, v299);
    v200 = v262;
    v201 = static OSSignposter.js.getter(v199);
    v202 = OSSignposter.logHandle.getter(v201);
    v203 = v261;
    v90 = v278;
    v204 = OSSignpostIntervalState.signpostID.getter();
    v112 = static os_signpost_type_t.end.getter(v204);
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      v300 = v194;
      v205 = swift_retain(v90);
      v206 = v250;
      checkForErrorAndConsumeState(state:)(v205);
      swift_release(v90);
      v207 = v264;
      v208 = v265;
      v209 = (*(uint64_t (**)(char *, uint64_t))(v264 + 88))(v206, v265);
      LODWORD(v299) = v112;
      if (v209 == enum case for OSSignpostError.doubleEnd(_:))
      {
        v234 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v207 + 8))(v206, v208);
        v234 = "";
      }
      v114 = v298;
      v235 = v266;
      v236 = v282;
      v290(v266, v203, v282);
      v112 = (uint64_t)v203;
      v237 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v237 = 0;
      v238 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl(&dword_0, v202, (os_signpost_type_t)v299, v238, "Page.Deserialize", v234, v237, 2u);
      swift_slowDealloc(v237, -1, -1);

      v239 = v281;
      v281((char *)v112, v236);
      v296(v262, v297);
      v239(v235, v236);
      v90 = v278;
    }
    else
    {

      v281(v203, v282);
      v296(v200, v297);
      v114 = v298;
    }
    goto LABEL_40;
  }
  v300 = 0;
  LODWORD(v275) = v191 == 0;
  v210 = v183 == 0;
  LODWORD(v288) = v271 & 1;
  LODWORD(v292) = v292 & 1;
  v211 = v294;
  v212 = JSONObject.subscript.getter(0x72617262694C6E69, 0xE900000000000079);
  v213 = JSONObject.BOOL.getter(v212);
  v96((uint64_t)v211, v173);
  (*(void (**)(char *, uint64_t))(v295 + 8))(v283, v299);
  v214 = v251;
  sub_3C56C(v285, v251, (uint64_t (*)(_QWORD))&type metadata accessor for InteractionContext.Page);
  v215 = v289;
  v216 = (uint64_t)v256;
  (*(void (**)(char *, char *, uint64_t))(v289 + 32))(v256, v284, v173);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v215 + 56))(v216, 0, 1, v173);
  v217 = v252;
  sub_15BD4(v286, v252, &qword_3BEB70);
  v218 = (uint64_t)v255;
  (*(void (**)(char *, char *, uint64_t))(v253 + 32))(v255, v198, v254);
  v112 = swift_allocObject(v277, *(unsigned int *)(v277 + 48), *(unsigned __int16 *)(v277 + 52));
  v303 = (char)v258;
  v219 = Page.init(shelves:title:selectedFilterActionId:filterActions:headerBackgroundColor:headerButtonItems:presentationOptions:pageContext:nextPage:isIncomplete:isExplicit:uber:showAdamId:channelAdamId:mapiInLibrary:pageMetrics:)(v287, v268, (uint64_t)v280, v247, (uint64_t)v279, (uint64_t)v269, v267 | ((unint64_t)v258 << 32), v270, v248, v214, v216, (char)v292, (char)v288, v217, v272, v210, v273, (char)v275, v213,
           v218);
  v220 = v259;
  v221 = static OSSignposter.js.getter(v219);
  v222 = OSSignposter.logHandle.getter(v221);
  v223 = v260;
  v224 = v278;
  v225 = OSSignpostIntervalState.signpostID.getter();
  v226 = static os_signpost_type_t.end.getter(v225);
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v227 = swift_retain(v224);
    v228 = v249;
    checkForErrorAndConsumeState(state:)(v227);
    swift_release(v224);
    v229 = v264;
    v230 = v265;
    if ((*(unsigned int (**)(char *, uint64_t))(v264 + 88))(v228, v265) == enum case for OSSignpostError.doubleEnd(_:))
    {
      v231 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v229 + 8))(v228, v230);
      v231 = "";
    }
    v233 = v298;
    v241 = v266;
    v242 = v223;
    v243 = v282;
    v290(v266, v242, v282);
    v244 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v244 = 0;
    v245 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_0, v222, v226, v245, "Page.Deserialize", v231, v244, 2u);
    swift_slowDealloc(v244, -1, -1);

    v246 = v281;
    v281(v260, v243);
    v296(v259, v297);
    v246(v241, v243);
    v232 = v293;
    v224 = v278;
  }
  else
  {

    v281(v223, v282);
    v296(v220, v297);
    v232 = v293;
    v233 = v298;
  }
  swift_release(v224);
  (*(void (**)(uint64_t, uint64_t))(v291 + 8))(v233, v302);
  v96(v232, v301);
  return v112;
}

uint64_t Page.uberStyle.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  _QWORD *v13;
  id v14;
  void *v15;
  uint64_t v16;
  unsigned int v17;
  char v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8660);
  __chkstk_darwin(v1);
  v3 = (char *)&v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
  __chkstk_darwin(v4);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_267BC(v0 + OBJC_IVAR____TtC8ShelfKit4Page_uber, (uint64_t)v6, &qword_3BEB70);
  v7 = type metadata accessor for ArtworkModel(0);
  v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7);
  sub_1459C((uint64_t)v6, &qword_3BEB70);
  if (v8 != 1)
    return 4;
  v9 = *(_QWORD *)(v0 + 16);
  if ((unint64_t)v9 >> 62)
  {
    if (v9 < 0)
      v22 = *(_QWORD *)(v0 + 16);
    else
      v22 = v9 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n(v9, 2);
    result = _CocoaArrayWrapper.endIndex.getter(v22);
    v10 = result;
    if (result)
      goto LABEL_4;
    goto LABEL_29;
  }
  v10 = *(_QWORD *)((char *)&dword_10 + (v9 & 0xFFFFFFFFFFFFF8));
  result = swift_bridgeObjectRetain_n(*(_QWORD *)(v0 + 16), 2);
  if (!v10)
  {
LABEL_29:
    v13 = _swiftEmptyArrayStorage;
LABEL_30:
    swift_bridgeObjectRelease_n(v9, 2);
    if (v13[2])
      v21 = *((unsigned __int8 *)v13 + 32);
    else
      v21 = 6;
    swift_bridgeObjectRelease();
    return v21;
  }
LABEL_4:
  if (v10 >= 1)
  {
    v12 = 0;
    v13 = _swiftEmptyArrayStorage;
    while (1)
    {
      if ((v9 & 0xC000000000000001) != 0)
        v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v12);
      else
        v14 = *(id *)(v9 + 8 * v12 + 32);
      v15 = v14;
      Shelf.mapToModernShelf()((uint64_t)v3);
      v16 = type metadata accessor for ModernShelf(0);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 48))(v3, 1, v16) == 1)
      {
        sub_1459C((uint64_t)v3, &qword_3B8660);
      }
      else
      {
        v17 = v3[*(int *)(v16 + 24)];
        if (v17 <= 0x2F)
        {
          if (((1 << v17) & 0x800380000000) != 0)
          {
            v18 = 2;
LABEL_18:
            sub_145D8((uint64_t)v3, type metadata accessor for ModernShelf);

            if ((swift_isUniquelyReferenced_nonNull_native(v13) & 1) == 0)
              v13 = sub_10F34(0, v13[2] + 1, 1, v13);
            v20 = v13[2];
            v19 = v13[3];
            if (v20 >= v19 >> 1)
              v13 = sub_10F34((_QWORD *)(v19 > 1), v20 + 1, 1, v13);
            v13[2] = v20 + 1;
            *((_BYTE *)v13 + v20 + 32) = v18;
            goto LABEL_8;
          }
          if (((1 << v17) & 0x30000000000) != 0)
          {
            v18 = 1;
            goto LABEL_18;
          }
        }
        sub_145D8((uint64_t)v3, type metadata accessor for ModernShelf);
      }

LABEL_8:
      if (v10 == ++v12)
        goto LABEL_30;
    }
  }
  __break(1u);
  return result;
}

unint64_t Page.headerBackgroundColor.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 64) | ((unint64_t)*(unsigned __int8 *)(v0 + 68) << 32);
}

uint64_t Page.headerButtonItems.getter()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 72));
}

uint64_t Page.presentationOptions.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 80);
}

uint64_t Page.pageContext.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_14510(v1 + OBJC_IVAR____TtC8ShelfKit4Page_pageContext, a1, (uint64_t (*)(_QWORD))&type metadata accessor for InteractionContext.Page);
}

uint64_t Page.nextPage.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_267BC(v1 + OBJC_IVAR____TtC8ShelfKit4Page_nextPage, a1, &qword_3B4720);
}

uint64_t Page.isIncomplete.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8ShelfKit4Page_isIncomplete);
}

uint64_t Page.isExplicit.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8ShelfKit4Page_isExplicit);
}

uint64_t Page.uber.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_267BC(v1 + OBJC_IVAR____TtC8ShelfKit4Page_uber, a1, &qword_3BEB70);
}

uint64_t Page.showAdamId.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit4Page_showAdamId);
}

uint64_t Page.channelAdamId.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit4Page_channelAdamId);
}

uint64_t Page.mapiInLibrary.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8ShelfKit4Page_mapiInLibrary);
}

uint64_t Page.pageMetrics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = v1 + OBJC_IVAR____TtC8ShelfKit4Page_pageMetrics;
  swift_beginAccess(v3, v6, 0, 0);
  v4 = type metadata accessor for PageMetrics(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t Page.pageMetrics.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = v1 + OBJC_IVAR____TtC8ShelfKit4Page_pageMetrics;
  swift_beginAccess(v3, v6, 33, 0);
  v4 = type metadata accessor for PageMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
  return swift_endAccess(v6);
}

uint64_t (*Page.pageMetrics.modify(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC8ShelfKit4Page_pageMetrics, a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t Page.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_145D8(v0 + OBJC_IVAR____TtC8ShelfKit4Page_pageContext, (uint64_t (*)(_QWORD))&type metadata accessor for InteractionContext.Page);
  sub_1459C(v0 + OBJC_IVAR____TtC8ShelfKit4Page_nextPage, &qword_3B4720);
  sub_1459C(v0 + OBJC_IVAR____TtC8ShelfKit4Page_uber, &qword_3BEB70);
  v1 = v0 + OBJC_IVAR____TtC8ShelfKit4Page_pageMetrics;
  v2 = type metadata accessor for PageMetrics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t Page.__deallocating_deinit()
{
  uint64_t v0;

  Page.deinit();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_9BB00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t result;

  result = Page.__allocating_init(deserializing:using:)(a1, a2);
  if (!v3)
    *a3 = result;
  return result;
}

uint64_t sub_9BB28@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = *v1 + OBJC_IVAR____TtC8ShelfKit4Page_pageMetrics;
  swift_beginAccess(v3, v6, 0, 0);
  v4 = type metadata accessor for PageMetrics(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

id Page.allShelfContentTypes.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id result;
  uint64_t i;
  uint64_t v5;
  uint64_t j;
  uint64_t v7;
  void *v8;
  objc_class *v9;
  char *v10;
  uint64_t v11;
  objc_super v12;
  Swift::UInt v13;
  void *v14;

  v14 = &_swiftEmptySetSingleton;
  v1 = *(_QWORD *)(v0 + 16);
  if ((unint64_t)v1 >> 62)
  {
    if (v1 < 0)
      v11 = *(_QWORD *)(v0 + 16);
    else
      v11 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v1);
    result = (id)_CocoaArrayWrapper.endIndex.getter(v11);
    v2 = (uint64_t)result;
    if (!result)
      goto LABEL_10;
  }
  else
  {
    v2 = *(_QWORD *)((char *)&dword_10 + (v1 & 0xFFFFFFFFFFFFF8));
    result = (id)swift_bridgeObjectRetain(*(_QWORD *)(v0 + 16));
    if (!v2)
    {
LABEL_10:
      swift_bridgeObjectRelease();
      v8 = v14;
      v9 = (objc_class *)type metadata accessor for ShelfContentTypeSet();
      v10 = (char *)objc_allocWithZone(v9);
      *(_QWORD *)&v10[OBJC_IVAR____TtC8ShelfKit19ShelfContentTypeSet_contents] = v8;
      v12.receiver = v10;
      v12.super_class = v9;
      return objc_msgSendSuper2(&v12, "init");
    }
  }
  if (v2 >= 1)
  {
    if ((v1 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v2; ++i)
      {
        v5 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v1);
        sub_9C17C(&v13, *(_QWORD *)(v5 + OBJC_IVAR____TtC8ShelfKit5Shelf_contentType));
        swift_unknownObjectRelease(v5);
      }
    }
    else
    {
      for (j = 0; j != v2; ++j)
      {
        v7 = *(_QWORD *)(v1 + 8 * j + 32);
        sub_9C17C(&v13, *(_QWORD *)(v7 + OBJC_IVAR____TtC8ShelfKit5Shelf_contentType));
      }
    }
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

uint64_t sub_9BCE4@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  if (result)
    *a2 = result;
  else
    __break(1u);
  return result;
}

void sub_9BCF4(uint8_t *a1, uint32_t a2, NSObject *a3, os_signpost_type_t a4, uint64_t a5, const char *a6, const char *a7)
{
  os_signpost_id_t v13;

  v13 = OSSignpostID.rawValue.getter();
  _os_signpost_emit_with_name_impl(&dword_0, a3, a4, v13, a6, a7, a1, a2);
}

uint64_t sub_9BD74(uint64_t a1, char *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  uint64_t v21;
  void (*v22)(_QWORD, _QWORD, _QWORD);
  uint64_t v23;
  char v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  char isUniquelyReferenced_nonNull_native;
  char *v28;
  uint64_t v29;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;

  v3 = v2;
  v6 = type metadata accessor for MetricsFieldInclusionRequest(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  v11 = *(_QWORD *)(*v3 + 40);
  v13 = sub_F1C0(&qword_3B60B0, v12, (uint64_t)&protocol conformance descriptor for MetricsFieldInclusionRequest);
  swift_bridgeObjectRetain(v10);
  v35 = a2;
  v14 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v13);
  v15 = -1 << *(_BYTE *)(v10 + 32);
  v16 = v14 & ~v15;
  v17 = v10;
  v18 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
  {
    v31 = v3;
    v32 = a1;
    v33 = ~v15;
    v34 = v7;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v21 = v17;
      v22 = v20;
      v20(v9, *(_QWORD *)(v17 + 48) + v19 * v16, v6);
      v23 = sub_F1C0(&qword_3B60B8, (void (*)(uint64_t))&type metadata accessor for MetricsFieldInclusionRequest, (uint64_t)&protocol conformance descriptor for MetricsFieldInclusionRequest);
      v24 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v35, v6, v23);
      v25 = *(void (**)(char *, uint64_t))(v34 + 8);
      v25(v9, v6);
      if ((v24 & 1) != 0)
        break;
      v16 = (v16 + 1) & v33;
      v17 = v21;
      v20 = v22;
      if (((*(_QWORD *)(v18 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
      {
        swift_bridgeObjectRelease(v21);
        v3 = v31;
        a1 = v32;
        v26 = v34;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease(v21);
    v25(v35, v6);
    v22(v32, *(_QWORD *)(*v31 + 48) + v19 * v16, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease(v10);
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v26 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v28 = v35;
    v20(v9, v35, v6);
    v36 = *v3;
    *v3 = 0x8000000000000000;
    sub_9E3F8((uint64_t)v9, v16, isUniquelyReferenced_nonNull_native);
    v29 = *v3;
    *v3 = v36;
    swift_bridgeObjectRelease(v29);
    (*(void (**)(uint64_t, char *, uint64_t))(v26 + 32))(a1, v28, v6);
    return 1;
  }
}

uint64_t sub_9BFD0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  BOOL v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  _QWORD v24[9];

  v7 = *v3;
  Hasher.init(_seed:)(v24);
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v24, a2, a3);
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = v12[1];
    v14 = *v12 == a2 && v13 == a3;
    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v12, v13, a2, a3, 0) & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease(a3);
      swift_bridgeObjectRelease(v7);
      v15 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v16 = v15[1];
      *a1 = *v15;
      a1[1] = v16;
      swift_bridgeObjectRetain(v16);
      return 0;
    }
    v18 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v18;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v19 = (_QWORD *)(v11 + 16 * v10);
      v20 = v19[1];
      v21 = *v19 == a2 && v20 == a3;
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v19, v20, a2, a3, 0) & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease(v7);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v24[0] = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain(a3);
  sub_9E5FC(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  v23 = *v3;
  *v3 = v24[0];
  swift_bridgeObjectRelease(v23);
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_9C17C(Swift::UInt *a1, Swift::UInt a2)
{
  _QWORD *v2;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  _QWORD v13[9];

  v5 = *v2;
  Hasher.init(_seed:)(v13);
  Hasher._combine(_:)(a2);
  v6 = Hasher._finalize()();
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = v6 & ~v7;
  if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    v13[0] = *v2;
    *v2 = 0x8000000000000000;
    sub_9E794(a2, v8, isUniquelyReferenced_nonNull_native);
    *v2 = v13[0];
    swift_bridgeObjectRelease();
    result = 1;
    goto LABEL_8;
  }
  v9 = *(_QWORD *)(v5 + 48);
  if (*(_QWORD *)(v9 + 8 * v8) != a2)
  {
    v10 = ~v7;
    do
    {
      v8 = (v8 + 1) & v10;
      if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
        goto LABEL_7;
    }
    while (*(_QWORD *)(v9 + 8 * v8) != a2);
  }
  result = 0;
  a2 = *(_QWORD *)(*(_QWORD *)(*v2 + 48) + 8 * v8);
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_9C298(uint64_t *a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;

  v3 = v2;
  v6 = *v2;
  v7 = static Hasher._hash(seed:_:)(*(_QWORD *)(v6 + 40), a2);
  v8 = -1 << *(_BYTE *)(v6 + 32);
  v9 = v7 & ~v8;
  if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v14 = *v3;
    *v3 = 0x8000000000000000;
    sub_9E8E0(a2, v9, isUniquelyReferenced_nonNull_native);
    *v3 = v14;
    swift_bridgeObjectRelease();
    result = 1;
    goto LABEL_8;
  }
  v10 = *(_QWORD *)(v6 + 48);
  if (*(_QWORD *)(v10 + 8 * v9) != a2)
  {
    v11 = ~v8;
    do
    {
      v9 = (v9 + 1) & v11;
      if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
        goto LABEL_7;
    }
    while (*(_QWORD *)(v10 + 8 * v9) != a2);
  }
  result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_9C390(Swift::UInt64 *a1, Swift::UInt64 a2)
{
  _QWORD *v2;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  _QWORD v13[9];

  v5 = *v2;
  Hasher.init(_seed:)(v13);
  Hasher._combine(_:)(a2);
  v6 = Hasher._finalize()();
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = v6 & ~v7;
  if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    v13[0] = *v2;
    *v2 = 0x8000000000000000;
    sub_9EA00(a2, v8, isUniquelyReferenced_nonNull_native);
    *v2 = v13[0];
    swift_bridgeObjectRelease();
    result = 1;
    goto LABEL_8;
  }
  v9 = *(_QWORD *)(v5 + 48);
  if (*(_QWORD *)(v9 + 8 * v8) != a2)
  {
    v10 = ~v7;
    do
    {
      v8 = (v8 + 1) & v10;
      if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
        goto LABEL_7;
    }
    while (*(_QWORD *)(v9 + 8 * v8) != a2);
  }
  result = 0;
  a2 = *(_QWORD *)(*(_QWORD *)(*v2 + 48) + 8 * v8);
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_9C4AC(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::Int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v30;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v32;
  uint64_t result;
  Swift::Int v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v40;
  _QWORD v41[9];
  uint64_t v42;

  v3 = v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) == 0)
  {
    v38 = v2;
    Hasher.init(_seed:)(v41);
    v11 = *(void **)(a2 + 32);
    swift_bridgeObjectRetain();
    v12 = objc_msgSend(v11, "identifier");
    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    v15 = v14;

    String.hash(into:)(v41, v13, v15);
    swift_bridgeObjectRelease();
    v16 = Hasher._finalize()();
    v17 = -1 << *(_BYTE *)(v6 + 32);
    v18 = v16 & ~v17;
    if (((*(_QWORD *)(v6 + 56 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) != 0)
    {
      v40 = ~v17;
      while (1)
      {
        v19 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v18);
        v20 = *(void **)(v19 + 32);
        swift_retain();
        v21 = objc_msgSend(v20, "identifier");
        v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
        v24 = v23;

        v25 = objc_msgSend(*(id *)(a2 + 32), "identifier");
        v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
        v28 = v27;

        if (v22 == v26 && v24 == v28)
        {
          swift_release(a2);
          swift_bridgeObjectRelease();
          swift_release(v19);
          swift_bridgeObjectRelease_n(v24, 2);
          goto LABEL_24;
        }
        v30 = _stringCompareWithSmolCheck(_:_:expecting:)(v22, v24, v26, v28, 0);
        swift_release(v19);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v30 & 1) != 0)
          break;
        v18 = (v18 + 1) & v40;
        if (((*(_QWORD *)(v6 + 56 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) == 0)
          goto LABEL_15;
      }
      swift_release(a2);
      swift_bridgeObjectRelease();
LABEL_24:
      *a1 = *(_QWORD *)(*(_QWORD *)(*v38 + 48) + 8 * v18);
      swift_retain();
      return 0;
    }
LABEL_15:
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v38);
    v41[0] = *v38;
    *v38 = 0x8000000000000000;
    v32 = swift_retain();
    sub_9EB4C(v32, v18, isUniquelyReferenced_nonNull_native);
    *v38 = v41[0];
    swift_bridgeObjectRelease();
    *a1 = a2;
    return 1;
  }
  if (v6 < 0)
    v7 = *v2;
  else
    v7 = v6 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  v8 = swift_retain();
  v9 = __CocoaSet.member(for:)(v8, v7);
  swift_release(a2);
  if (!v9)
  {
    result = __CocoaSet.count.getter(v7);
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v34 = sub_9CAA4(v7, result + 1);
    v41[0] = v34;
    v35 = *(_QWORD *)(v34 + 16);
    if (*(_QWORD *)(v34 + 24) <= v35)
    {
      v37 = v35 + 1;
      swift_retain();
      sub_9DCDC(v37);
      v36 = v41[0];
    }
    else
    {
      v36 = v34;
      swift_retain();
    }
    sub_9E298(a2, v36);
    *v3 = v36;
    swift_bridgeObjectRelease();
    *a1 = a2;
    return 1;
  }
  swift_bridgeObjectRelease();
  swift_release(a2);
  v42 = v9;
  v10 = type metadata accessor for Highlight(0);
  swift_unknownObjectRetain(v9);
  swift_dynamicCast(v41, &v42, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
  *a1 = v41[0];
  swift_unknownObjectRelease(v9);
  return 0;
}

uint64_t sub_9C828(Swift::Int *a1, void *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t result;
  Swift::Int v12;
  Swift::Int v13;
  uint64_t v14;
  unint64_t v15;
  id v16;
  char v17;
  uint64_t v18;
  id v19;
  char v20;
  void *v21;
  id v22;
  Swift::Int v23;
  unint64_t v24;
  uint64_t v25;
  id v26;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v28;
  id v29;
  uint64_t v30;
  Swift::Int v31;

  v3 = v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v8 = a2;
    v9 = __CocoaSet.member(for:)(v8, v7);

    if (v9)
    {
      swift_bridgeObjectRelease();

      v30 = v9;
      v10 = sub_91020();
      swift_unknownObjectRetain(v9);
      swift_dynamicCast(&v31, &v30, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
      *a1 = v31;
      swift_unknownObjectRelease(v9);
      return 0;
    }
    result = __CocoaSet.count.getter(v7);
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v23 = sub_9CCE0(v7, result + 1);
    v31 = v23;
    v24 = *(_QWORD *)(v23 + 16);
    if (*(_QWORD *)(v23 + 24) <= v24)
    {
      v28 = v24 + 1;
      v29 = v8;
      sub_9DFFC(v28);
      v25 = v31;
    }
    else
    {
      v25 = v23;
      v26 = v8;
    }
    sub_9E378((uint64_t)v8, v25);
    *v3 = v25;
  }
  else
  {
    v12 = *(_QWORD *)(v6 + 40);
    swift_bridgeObjectRetain();
    v13 = NSObject._rawHashValue(seed:)(v12);
    v14 = -1 << *(_BYTE *)(v6 + 32);
    v15 = v13 & ~v14;
    if (((*(_QWORD *)(v6 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
    {
      sub_91020();
      v16 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v15);
      v17 = static NSObject.== infix(_:_:)(v16, a2);

      if ((v17 & 1) != 0)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        v21 = *(void **)(*(_QWORD *)(*v3 + 48) + 8 * v15);
        *a1 = (Swift::Int)v21;
        v22 = v21;
        return 0;
      }
      v18 = ~v14;
      while (1)
      {
        v15 = (v15 + 1) & v18;
        if (((*(_QWORD *)(v6 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
          break;
        v19 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v15);
        v20 = static NSObject.== infix(_:_:)(v19, a2);

        if ((v20 & 1) != 0)
          goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v31 = *v3;
    *v3 = 0x8000000000000000;
    v8 = a2;
    sub_9ED94((uint64_t)v8, v15, isUniquelyReferenced_nonNull_native);
    *v3 = v31;
  }
  swift_bridgeObjectRelease();
  *a1 = (Swift::Int)v8;
  return 1;
}

Swift::Int sub_9CAA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::Int result;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  BOOL v23;
  uint64_t v24;
  _QWORD v25[9];
  uint64_t v26;
  uint64_t v27;

  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3C7940);
    v4 = static _SetStorage.convert(_:capacity:)(a1, a2);
    v27 = v4;
    v5 = __CocoaSet.makeIterator()(a1);
    v6 = __CocoaSet.Iterator.next()(v5);
    if (v6)
    {
      v7 = v6;
      v8 = type metadata accessor for Highlight(0);
      do
      {
        v25[0] = v7;
        swift_dynamicCast(&v26, v25, (char *)&type metadata for Swift.AnyObject + 8, v8, 7);
        v4 = v27;
        v20 = *(_QWORD *)(v27 + 16);
        if (*(_QWORD *)(v27 + 24) <= v20)
        {
          sub_9DCDC(v20 + 1);
          v4 = v27;
        }
        v9 = v26;
        Hasher.init(_seed:)(v25);
        v10 = objc_msgSend(*(id *)(v9 + 32), "identifier");
        v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
        v13 = v12;

        String.hash(into:)(v25, v11, v13);
        swift_bridgeObjectRelease();
        result = Hasher._finalize()();
        v15 = v4 + 56;
        v16 = -1 << *(_BYTE *)(v4 + 32);
        v17 = result & ~v16;
        v18 = v17 >> 6;
        if (((-1 << v17) & ~*(_QWORD *)(v4 + 56 + 8 * (v17 >> 6))) != 0)
        {
          v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v4 + 56 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v21 = 0;
          v22 = (unint64_t)(63 - v16) >> 6;
          do
          {
            if (++v18 == v22 && (v21 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v23 = v18 == v22;
            if (v18 == v22)
              v18 = 0;
            v21 |= v23;
            v24 = *(_QWORD *)(v15 + 8 * v18);
          }
          while (v24 == -1);
          v19 = __clz(__rbit64(~v24)) + (v18 << 6);
        }
        *(_QWORD *)(v15 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
        *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v19) = v9;
        ++*(_QWORD *)(v4 + 16);
        v7 = __CocoaSet.Iterator.next()(result);
      }
      while (v7);
    }
    swift_release(v5);
  }
  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  return v4;
}

Swift::Int sub_9CCE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  Swift::Int result;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3C7930);
    v4 = static _SetStorage.convert(_:capacity:)(a1, a2);
    v23 = v4;
    v5 = __CocoaSet.makeIterator()(a1);
    v6 = __CocoaSet.Iterator.next()(v5);
    if (v6)
    {
      v7 = v6;
      v8 = sub_91020();
      do
      {
        v21 = v7;
        swift_dynamicCast(&v22, &v21, (char *)&type metadata for Swift.AnyObject + 8, v8, 7);
        v4 = v23;
        v16 = *(_QWORD *)(v23 + 16);
        if (*(_QWORD *)(v23 + 24) <= v16)
        {
          sub_9DFFC(v16 + 1);
          v4 = v23;
        }
        v9 = v22;
        result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v4 + 40));
        v11 = v4 + 56;
        v12 = -1 << *(_BYTE *)(v4 + 32);
        v13 = result & ~v12;
        v14 = v13 >> 6;
        if (((-1 << v13) & ~*(_QWORD *)(v4 + 56 + 8 * (v13 >> 6))) != 0)
        {
          v15 = __clz(__rbit64((-1 << v13) & ~*(_QWORD *)(v4 + 56 + 8 * (v13 >> 6)))) | v13 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v17 = 0;
          v18 = (unint64_t)(63 - v12) >> 6;
          do
          {
            if (++v14 == v18 && (v17 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v19 = v14 == v18;
            if (v14 == v18)
              v14 = 0;
            v17 |= v19;
            v20 = *(_QWORD *)(v11 + 8 * v14);
          }
          while (v20 == -1);
          v15 = __clz(__rbit64(~v20)) + (v14 << 6);
        }
        *(_QWORD *)(v11 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
        *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15) = v9;
        ++*(_QWORD *)(v4 + 16);
        v7 = __CocoaSet.Iterator.next()(result);
      }
      while (v7);
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  return v4;
}

uint64_t sub_9CEC4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, unint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;
  _QWORD *v39;
  uint64_t v40;

  v2 = v1;
  v4 = type metadata accessor for MetricsFieldInclusionRequest(0);
  v40 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&qword_3C7950);
  v8 = static _SetStorage.resize(original:capacity:move:)(v7, a1, 1);
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
    goto LABEL_39;
  v10 = 1 << *(_BYTE *)(v7 + 32);
  v11 = *(_QWORD *)(v7 + 56);
  v39 = (_QWORD *)(v7 + 56);
  if (v10 < 64)
    v12 = ~(-1 << v10);
  else
    v12 = -1;
  v13 = v12 & v11;
  v37 = v2;
  v38 = (unint64_t)(v10 + 63) >> 6;
  v14 = v8 + 56;
  result = swift_retain(v7);
  v16 = 0;
  while (1)
  {
    if (v13)
    {
      v18 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v19 = v18 | (v16 << 6);
      goto LABEL_26;
    }
    v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
      return result;
    }
    if (v20 >= v38)
      goto LABEL_35;
    v21 = v39[v20];
    ++v16;
    if (!v21)
    {
      v16 = v20 + 1;
      if (v20 + 1 >= v38)
        goto LABEL_35;
      v21 = v39[v16];
      if (!v21)
      {
        v16 = v20 + 2;
        if (v20 + 2 >= v38)
          goto LABEL_35;
        v21 = v39[v16];
        if (!v21)
          break;
      }
    }
LABEL_25:
    v13 = (v21 - 1) & v21;
    v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_26:
    v23 = v7;
    v24 = *(_QWORD *)(v7 + 48);
    v25 = *(_QWORD *)(v40 + 72);
    v26 = *(void (**)(char *, unint64_t, uint64_t))(v40 + 32);
    v26(v6, v24 + v25 * v19, v4);
    v27 = *(_QWORD *)(v9 + 40);
    v28 = sub_F1C0(&qword_3B60B0, (void (*)(uint64_t))&type metadata accessor for MetricsFieldInclusionRequest, (uint64_t)&protocol conformance descriptor for MetricsFieldInclusionRequest);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v27, v4, v28);
    v29 = -1 << *(_BYTE *)(v9 + 32);
    v30 = result & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v14 + 8 * (v30 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v14 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_40;
        }
        v34 = v31 == v33;
        if (v31 == v33)
          v31 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v14 + 8 * v31);
      }
      while (v35 == -1);
      v17 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(_QWORD *)(v14 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(_QWORD *)(v9 + 48) + v17 * v25, v6, v4);
    ++*(_QWORD *)(v9 + 16);
    v7 = v23;
  }
  v22 = v20 + 3;
  if (v22 < v38)
  {
    v21 = v39[v22];
    if (!v21)
    {
      while (1)
      {
        v16 = v22 + 1;
        if (__OFADD__(v22, 1))
          goto LABEL_41;
        if (v16 >= v38)
          goto LABEL_35;
        v21 = v39[v16];
        ++v22;
        if (v21)
          goto LABEL_25;
      }
    }
    v16 = v22;
    goto LABEL_25;
  }
LABEL_35:
  swift_release(v7);
  v2 = v37;
  v36 = 1 << *(_BYTE *)(v7 + 32);
  if (v36 > 63)
    bzero(v39, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v39 = -1 << v36;
  *(_QWORD *)(v7 + 16) = 0;
LABEL_39:
  result = swift_release(v7);
  *v2 = v9;
  return result;
}

Swift::Int sub_9D230(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  Swift::Int result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  _QWORD v34[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&qword_3B60A0);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v32 = v2;
    v33 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = v5 + 56;
    result = swift_retain(v3);
    v13 = 0;
    while (1)
    {
      if (v9)
      {
        v16 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v17 = v16 | (v13 << 6);
      }
      else
      {
        v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v18 >= v10)
          goto LABEL_36;
        v19 = v33[v18];
        ++v13;
        if (!v19)
        {
          v13 = v18 + 1;
          if (v18 + 1 >= v10)
            goto LABEL_36;
          v19 = v33[v13];
          if (!v19)
          {
            v13 = v18 + 2;
            if (v18 + 2 >= v10)
              goto LABEL_36;
            v19 = v33[v13];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v10)
              {
LABEL_36:
                swift_release(v3);
                v2 = v32;
                v31 = 1 << *(_BYTE *)(v3 + 32);
                if (v31 > 63)
                  bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v33 = -1 << v31;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v19 = v33[v20];
              if (!v19)
              {
                while (1)
                {
                  v13 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_42;
                  if (v13 >= v10)
                    goto LABEL_36;
                  v19 = v33[v13];
                  ++v20;
                  if (v19)
                    goto LABEL_26;
                }
              }
              v13 = v20;
            }
          }
        }
LABEL_26:
        v9 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      v21 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v17);
      v22 = *v21;
      v23 = v21[1];
      Hasher.init(_seed:)(v34);
      String.hash(into:)(v34, v22, v23);
      result = Hasher._finalize()();
      v24 = -1 << *(_BYTE *)(v6 + 32);
      v25 = result & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v11 + 8 * v26);
        }
        while (v30 == -1);
        v14 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v14);
      *v15 = v22;
      v15[1] = v23;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

Swift::Int sub_9D50C(uint64_t a1)
{
  Swift::Int *v1;
  Swift::Int *v2;
  Swift::Int v3;
  uint64_t v4;
  Swift::Int result;
  Swift::Int v6;
  int64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  Swift::Int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  Swift::UInt v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  Swift::Int *v29;
  uint64_t v30[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&qword_3B60C0);
  result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = result;
  if (*(_QWORD *)(v3 + 16))
  {
    v29 = v2;
    v7 = 0;
    v8 = (_QWORD *)(v3 + 56);
    v9 = 1 << *(_BYTE *)(v3 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v3 + 56);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = result + 56;
    while (1)
    {
      if (v11)
      {
        v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v16 = v15 | (v7 << 6);
      }
      else
      {
        v17 = v7 + 1;
        if (__OFADD__(v7, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v17 >= v12)
          goto LABEL_36;
        v18 = v8[v17];
        ++v7;
        if (!v18)
        {
          v7 = v17 + 1;
          if (v17 + 1 >= v12)
            goto LABEL_36;
          v18 = v8[v7];
          if (!v18)
          {
            v7 = v17 + 2;
            if (v17 + 2 >= v12)
              goto LABEL_36;
            v18 = v8[v7];
            if (!v18)
            {
              v19 = v17 + 3;
              if (v19 >= v12)
              {
LABEL_36:
                v28 = 1 << *(_BYTE *)(v3 + 32);
                if (v28 > 63)
                  bzero((void *)(v3 + 56), ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v8 = -1 << v28;
                v2 = v29;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v18 = v8[v19];
              if (!v18)
              {
                while (1)
                {
                  v7 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_42;
                  if (v7 >= v12)
                    goto LABEL_36;
                  v18 = v8[v7];
                  ++v19;
                  if (v18)
                    goto LABEL_26;
                }
              }
              v7 = v19;
            }
          }
        }
LABEL_26:
        v11 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v7 << 6);
      }
      v20 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v16);
      Hasher.init(_seed:)(v30);
      Hasher._combine(_:)(v20);
      result = Hasher._finalize()();
      v21 = -1 << *(_BYTE *)(v6 + 32);
      v22 = result & ~v21;
      v23 = v22 >> 6;
      if (((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v26 = v23 == v25;
          if (v23 == v25)
            v23 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v13 + 8 * v23);
        }
        while (v27 == -1);
        v14 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v14) = v20;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

uint64_t sub_9D7B4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&qword_3B60A8);
  result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = result;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 0;
    v8 = (uint64_t *)(v3 + 56);
    v9 = 1 << *(_BYTE *)(v3 + 32);
    v28 = -1 << v9;
    v29 = v2;
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v3 + 56);
    v30 = 1 << *(_BYTE *)(v3 + 32);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = result + 56;
    while (1)
    {
      if (v11)
      {
        v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v16 = v15 | (v7 << 6);
      }
      else
      {
        v17 = v7 + 1;
        if (__OFADD__(v7, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v17 >= v12)
          goto LABEL_36;
        v18 = v8[v17];
        ++v7;
        if (!v18)
        {
          v7 = v17 + 1;
          if (v17 + 1 >= v12)
            goto LABEL_36;
          v18 = v8[v7];
          if (!v18)
          {
            v7 = v17 + 2;
            if (v17 + 2 >= v12)
              goto LABEL_36;
            v18 = v8[v7];
            if (!v18)
            {
              v19 = v17 + 3;
              if (v19 >= v12)
              {
LABEL_36:
                if (v30 >= 64)
                  bzero((void *)(v3 + 56), 8 * v12);
                else
                  *v8 = v28;
                v2 = v29;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v18 = v8[v19];
              if (!v18)
              {
                while (1)
                {
                  v7 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_42;
                  if (v7 >= v12)
                    goto LABEL_36;
                  v18 = v8[v7];
                  ++v19;
                  if (v18)
                    goto LABEL_26;
                }
              }
              v7 = v19;
            }
          }
        }
LABEL_26:
        v11 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v7 << 6);
      }
      v20 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v16);
      result = static Hasher._hash(seed:_:)(*(_QWORD *)(v6 + 40), v20);
      v21 = -1 << *(_BYTE *)(v6 + 32);
      v22 = result & ~v21;
      v23 = v22 >> 6;
      if (((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v26 = v23 == v25;
          if (v23 == v25)
            v23 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v13 + 8 * v23);
        }
        while (v27 == -1);
        v14 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v14) = v20;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

Swift::Int sub_9DA34(uint64_t a1)
{
  Swift::Int *v1;
  Swift::Int *v2;
  Swift::Int v3;
  uint64_t v4;
  Swift::Int result;
  Swift::Int v6;
  int64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  Swift::Int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  Swift::UInt64 v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  Swift::Int *v29;
  uint64_t v30[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&qword_3B6098);
  result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = result;
  if (*(_QWORD *)(v3 + 16))
  {
    v29 = v2;
    v7 = 0;
    v8 = (_QWORD *)(v3 + 56);
    v9 = 1 << *(_BYTE *)(v3 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v3 + 56);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = result + 56;
    while (1)
    {
      if (v11)
      {
        v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v16 = v15 | (v7 << 6);
      }
      else
      {
        v17 = v7 + 1;
        if (__OFADD__(v7, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v17 >= v12)
          goto LABEL_36;
        v18 = v8[v17];
        ++v7;
        if (!v18)
        {
          v7 = v17 + 1;
          if (v17 + 1 >= v12)
            goto LABEL_36;
          v18 = v8[v7];
          if (!v18)
          {
            v7 = v17 + 2;
            if (v17 + 2 >= v12)
              goto LABEL_36;
            v18 = v8[v7];
            if (!v18)
            {
              v19 = v17 + 3;
              if (v19 >= v12)
              {
LABEL_36:
                v28 = 1 << *(_BYTE *)(v3 + 32);
                if (v28 > 63)
                  bzero((void *)(v3 + 56), ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v8 = -1 << v28;
                v2 = v29;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v18 = v8[v19];
              if (!v18)
              {
                while (1)
                {
                  v7 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_42;
                  if (v7 >= v12)
                    goto LABEL_36;
                  v18 = v8[v7];
                  ++v19;
                  if (v18)
                    goto LABEL_26;
                }
              }
              v7 = v19;
            }
          }
        }
LABEL_26:
        v11 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v7 << 6);
      }
      v20 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v16);
      Hasher.init(_seed:)(v30);
      Hasher._combine(_:)(v20);
      result = Hasher._finalize()();
      v21 = -1 << *(_BYTE *)(v6 + 32);
      v22 = result & ~v21;
      v23 = v22 >> 6;
      if (((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v26 = v23 == v25;
          if (v23 == v25)
            v23 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v13 + 8 * v23);
        }
        while (v27 == -1);
        v14 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v14) = v20;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

uint64_t sub_9DCDC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  int64_t v33;
  _QWORD *v34;
  _QWORD v35[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3C7940);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v34 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v32 = v2;
    v33 = (unint64_t)(v7 + 63) >> 6;
    v10 = v5 + 56;
    result = swift_retain();
    v12 = 0;
    while (1)
    {
      if (v9)
      {
        v14 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v15 = v14 | (v12 << 6);
      }
      else
      {
        v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v16 >= v33)
          goto LABEL_36;
        v17 = v34[v16];
        ++v12;
        if (!v17)
        {
          v12 = v16 + 1;
          if (v16 + 1 >= v33)
            goto LABEL_36;
          v17 = v34[v12];
          if (!v17)
          {
            v12 = v16 + 2;
            if (v16 + 2 >= v33)
              goto LABEL_36;
            v17 = v34[v12];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v33)
              {
LABEL_36:
                swift_release(v3);
                v2 = v32;
                v31 = 1 << *(_BYTE *)(v3 + 32);
                if (v31 > 63)
                  bzero(v34, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v34 = -1 << v31;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v17 = v34[v18];
              if (!v17)
              {
                while (1)
                {
                  v12 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_42;
                  if (v12 >= v33)
                    goto LABEL_36;
                  v17 = v34[v12];
                  ++v18;
                  if (v17)
                    goto LABEL_26;
                }
              }
              v12 = v18;
            }
          }
        }
LABEL_26:
        v9 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      v19 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v15);
      Hasher.init(_seed:)(v35);
      v20 = objc_msgSend(*(id *)(v19 + 32), "identifier");
      v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
      v23 = v22;

      String.hash(into:)(v35, v21, v23);
      swift_bridgeObjectRelease();
      result = Hasher._finalize()();
      v24 = -1 << *(_BYTE *)(v6 + 32);
      v25 = result & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v10 + 8 * (v25 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v10 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v10 + 8 * v26);
        }
        while (v30 == -1);
        v13 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v13) = v19;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

uint64_t sub_9DFFC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3C7930);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v30 = v2;
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v8 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v9 = ~(-1 << v7);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v3 + 56);
    v11 = (unint64_t)(v7 + 63) >> 6;
    v12 = v5 + 56;
    result = swift_retain();
    v14 = 0;
    while (1)
    {
      if (v10)
      {
        v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v17 = v16 | (v14 << 6);
      }
      else
      {
        v18 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v18 >= v11)
          goto LABEL_36;
        v19 = v8[v18];
        ++v14;
        if (!v19)
        {
          v14 = v18 + 1;
          if (v18 + 1 >= v11)
            goto LABEL_36;
          v19 = v8[v14];
          if (!v19)
          {
            v14 = v18 + 2;
            if (v18 + 2 >= v11)
              goto LABEL_36;
            v19 = v8[v14];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v11)
              {
LABEL_36:
                swift_release();
                v2 = v30;
                v29 = 1 << *(_BYTE *)(v3 + 32);
                if (v29 > 63)
                  bzero((void *)(v3 + 56), ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v8 = -1 << v29;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v19 = v8[v20];
              if (!v19)
              {
                while (1)
                {
                  v14 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_42;
                  if (v14 >= v11)
                    goto LABEL_36;
                  v19 = v8[v14];
                  ++v20;
                  if (v19)
                    goto LABEL_26;
                }
              }
              v14 = v20;
            }
          }
        }
LABEL_26:
        v10 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }
      v21 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v17);
      result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v6 + 40));
      v22 = -1 << *(_BYTE *)(v6 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v12 + 8 * (v23 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v12 + 8 * v24);
        }
        while (v28 == -1);
        v15 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v15) = v21;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release();
  *v2 = v6;
  return result;
}

unint64_t sub_9E298(uint64_t a1, uint64_t a2)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::Int v8;
  unint64_t result;
  _QWORD v10[9];

  Hasher.init(_seed:)(v10);
  v4 = objc_msgSend(*(id *)(a1 + 32), "identifier");
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  String.hash(into:)(v10, v5, v7);
  swift_bridgeObjectRelease(v7);
  v8 = Hasher._finalize()();
  result = _HashTable.nextHole(atOrAfter:)(v8 & ~(-1 << *(_BYTE *)(a2 + 32)), a2 + 56, ~(-1 << *(_BYTE *)(a2 + 32)));
  *(_QWORD *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * result) = a1;
  ++*(_QWORD *)(a2 + 16);
  return result;
}

unint64_t sub_9E378(uint64_t a1, uint64_t a2)
{
  Swift::Int v4;
  unint64_t result;

  v4 = NSObject._rawHashValue(seed:)(*(_QWORD *)(a2 + 40));
  result = _HashTable.nextHole(atOrAfter:)(v4 & ~(-1 << *(_BYTE *)(a2 + 32)), a2 + 56, ~(-1 << *(_BYTE *)(a2 + 32)));
  *(_QWORD *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * result) = a1;
  ++*(_QWORD *)(a2 + 16);
  return result;
}

uint64_t sub_9E3F8(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, unint64_t, uint64_t);
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;

  v30 = a1;
  v6 = type metadata accessor for MetricsFieldInclusionRequest(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*v3 + 16);
  v11 = *(_QWORD *)(*v3 + 24);
  v29 = v3;
  if (v11 > v10 && (a3 & 1) != 0)
    goto LABEL_12;
  v12 = v10 + 1;
  if ((a3 & 1) != 0)
  {
    sub_9CEC4(v12);
  }
  else
  {
    if (v11 > v10)
    {
      sub_2CD76C();
      goto LABEL_12;
    }
    sub_9EF08(v12);
  }
  v13 = *v3;
  v14 = *(_QWORD *)(*v3 + 40);
  v15 = sub_F1C0(&qword_3B60B0, (void (*)(uint64_t))&type metadata accessor for MetricsFieldInclusionRequest, (uint64_t)&protocol conformance descriptor for MetricsFieldInclusionRequest);
  v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v6, v15);
  v17 = -1 << *(_BYTE *)(v13 + 32);
  a2 = v16 & ~v17;
  if (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v18 = ~v17;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v20(v9, *(_QWORD *)(v13 + 48) + v19 * a2, v6);
      v21 = sub_F1C0(&qword_3B60B8, (void (*)(uint64_t))&type metadata accessor for MetricsFieldInclusionRequest, (uint64_t)&protocol conformance descriptor for MetricsFieldInclusionRequest);
      v22 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v30, v6, v21);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v22 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v18;
    }
    while (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v23 = v30;
  v24 = *v29;
  *(_QWORD *)(*v29 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(*(_QWORD *)(v24 + 48) + *(_QWORD *)(v7 + 72) * a2, v23, v6);
  v26 = *(_QWORD *)(v24 + 16);
  v27 = __OFADD__(v26, 1);
  v28 = v26 + 1;
  if (!v27)
  {
    *(_QWORD *)(v24 + 16) = v28;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v6);
  __break(1u);
  return result;
}

uint64_t sub_9E5FC(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD v28[9];

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  v11 = v9 + 1;
  if ((a4 & 1) != 0)
  {
    sub_9D230(v11);
  }
  else
  {
    if (v10 > v9)
    {
      result = (uint64_t)sub_2CD990();
      goto LABEL_22;
    }
    sub_9F230(v11);
  }
  v12 = *v4;
  Hasher.init(_seed:)(v28);
  String.hash(into:)(v28, v8, a2);
  result = Hasher._finalize()();
  v13 = -1 << *(_BYTE *)(v12 + 32);
  a3 = result & ~v13;
  v14 = v12 + 56;
  if (((*(_QWORD *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v15 = *(_QWORD *)(v12 + 48);
    v16 = (_QWORD *)(v15 + 16 * a3);
    v17 = v16[1];
    v18 = *v16 == v8 && v17 == a2;
    if (v18 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(*v16, v17, v8, a2, 0), (result & 1) != 0))
    {
LABEL_21:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
    }
    else
    {
      v19 = ~v13;
      while (1)
      {
        a3 = (a3 + 1) & v19;
        if (((*(_QWORD *)(v14 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v20 = (_QWORD *)(v15 + 16 * a3);
        v21 = v20[1];
        if (*v20 != v8 || v21 != a2)
        {
          result = _stringCompareWithSmolCheck(_:_:expecting:)(*v20, v21, v8, a2, 0);
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v23 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v24 = (uint64_t *)(*(_QWORD *)(v23 + 48) + 16 * a3);
  *v24 = v8;
  v24[1] = a2;
  v25 = *(_QWORD *)(v23 + 16);
  v26 = __OFADD__(v25, 1);
  v27 = v25 + 1;
  if (v26)
    __break(1u);
  else
    *(_QWORD *)(v23 + 16) = v27;
  return result;
}

uint64_t sub_9E794(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  Swift::UInt v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  _QWORD v17[9];

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  v8 = v6 + 1;
  if ((a3 & 1) != 0)
  {
    sub_9D50C(v8);
  }
  else
  {
    if (v7 > v6)
    {
      result = (uint64_t)sub_2CDB40();
      goto LABEL_14;
    }
    sub_9F4DC(v8);
  }
  v9 = *v3;
  Hasher.init(_seed:)(v17);
  Hasher._combine(_:)(v5);
  result = Hasher._finalize()();
  v10 = -1 << *(_BYTE *)(v9 + 32);
  a2 = result & ~v10;
  if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v11 = *(_QWORD *)(v9 + 48);
    if (*(_QWORD *)(v11 + 8 * a2) == v5)
    {
LABEL_13:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for ShelfContentType);
      __break(1u);
    }
    else
    {
      v12 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v12;
        if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if (*(_QWORD *)(v11 + 8 * a2) == v5)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v13 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v13 + 48) + 8 * a2) = v5;
  v14 = *(_QWORD *)(v13 + 16);
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (v15)
    __break(1u);
  else
    *(_QWORD *)(v13 + 16) = v16;
  return result;
}

uint64_t sub_9E8E0(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  v8 = v6 + 1;
  if ((a3 & 1) != 0)
  {
    sub_9D7B4(v8);
  }
  else
  {
    if (v7 > v6)
    {
      result = (uint64_t)sub_2CDCD4();
      goto LABEL_14;
    }
    sub_9F754(v8);
  }
  v9 = *v3;
  result = static Hasher._hash(seed:_:)(*(_QWORD *)(*v3 + 40), v5);
  v10 = -1 << *(_BYTE *)(v9 + 32);
  a2 = result & ~v10;
  if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v11 = *(_QWORD *)(v9 + 48);
    if (*(_QWORD *)(v11 + 8 * a2) == v5)
    {
LABEL_13:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Int64);
      __break(1u);
    }
    else
    {
      v12 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v12;
        if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if (*(_QWORD *)(v11 + 8 * a2) == v5)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v13 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v13 + 48) + 8 * a2) = v5;
  v14 = *(_QWORD *)(v13 + 16);
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (v15)
    __break(1u);
  else
    *(_QWORD *)(v13 + 16) = v16;
  return result;
}

uint64_t sub_9EA00(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  Swift::UInt64 v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  _QWORD v17[9];

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  v8 = v6 + 1;
  if ((a3 & 1) != 0)
  {
    sub_9DA34(v8);
  }
  else
  {
    if (v7 > v6)
    {
      result = (uint64_t)sub_2CDE68();
      goto LABEL_14;
    }
    sub_9F9B4(v8);
  }
  v9 = *v3;
  Hasher.init(_seed:)(v17);
  Hasher._combine(_:)(v5);
  result = Hasher._finalize()();
  v10 = -1 << *(_BYTE *)(v9 + 32);
  a2 = result & ~v10;
  if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v11 = *(_QWORD *)(v9 + 48);
    if (*(_QWORD *)(v11 + 8 * a2) == v5)
    {
LABEL_13:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for AdamID);
      __break(1u);
    }
    else
    {
      v12 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v12;
        if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if (*(_QWORD *)(v11 + 8 * a2) == v5)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v13 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v13 + 48) + 8 * a2) = v5;
  v14 = *(_QWORD *)(v13 + 16);
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (v15)
    __break(1u);
  else
    *(_QWORD *)(v13 + 16) = v16;
  return result;
}

uint64_t sub_9EB4C(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  _QWORD v33[9];

  v32 = result;
  v7 = *(_QWORD *)(*v3 + 16);
  v8 = *(_QWORD *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0)
    goto LABEL_16;
  v9 = v7 + 1;
  if ((a3 & 1) != 0)
  {
    sub_9DCDC(v9);
  }
  else
  {
    if (v8 > v7)
    {
      result = (uint64_t)sub_2CDFFC();
      goto LABEL_16;
    }
    sub_9FC2C(v9);
  }
  v10 = *v3;
  Hasher.init(_seed:)(v33);
  v11 = objc_msgSend(*(id *)(v32 + 32), "identifier");
  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  v4 = v13;

  String.hash(into:)(v33, v12, v4);
  swift_bridgeObjectRelease();
  result = Hasher._finalize()();
  v14 = -1 << *(_BYTE *)(v10 + 32);
  a2 = result & ~v14;
  if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v15 = ~v14;
    v30 = type metadata accessor for Highlight(0);
    do
    {
      v4 = *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * a2);
      v16 = *(void **)(v4 + 32);
      swift_retain();
      v17 = objc_msgSend(v16, "identifier");
      v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
      v5 = v19;

      v20 = objc_msgSend(*(id *)(v32 + 32), "identifier");
      v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
      v23 = v22;

      if (v18 == v21 && v5 == v23)
        goto LABEL_19;
      v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v5, v21, v23, 0);
      swift_release(v4);
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      if ((v25 & 1) != 0)
        goto LABEL_20;
      a2 = (a2 + 1) & v15;
    }
    while (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_16:
  v26 = *v31;
  *(_QWORD *)(*v31 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v26 + 48) + 8 * a2) = v32;
  v27 = *(_QWORD *)(v26 + 16);
  v28 = __OFADD__(v27, 1);
  v29 = v27 + 1;
  if (!v28)
  {
    *(_QWORD *)(v26 + 16) = v29;
    return result;
  }
  __break(1u);
LABEL_19:
  swift_release(v4);
  swift_bridgeObjectRelease_n(v5, 2);
LABEL_20:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v30);
  __break(1u);
  return result;
}

void sub_9ED94(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  uint64_t v12;
  unint64_t v13;
  id v14;
  char v15;
  uint64_t v16;
  id v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v4 = v3;
  v7 = *(_QWORD *)(*v3 + 16);
  v8 = *(_QWORD *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0)
    goto LABEL_14;
  v9 = v7 + 1;
  if ((a3 & 1) != 0)
  {
    sub_9DFFC(v9);
  }
  else
  {
    if (v8 > v7)
    {
      sub_2CE1A4();
      goto LABEL_14;
    }
    sub_9FF20(v9);
  }
  v10 = *v3;
  v11 = NSObject._rawHashValue(seed:)(*(_QWORD *)(*v3 + 40));
  v12 = -1 << *(_BYTE *)(v10 + 32);
  a2 = v11 & ~v12;
  if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v13 = sub_91020();
    v14 = *(id *)(*(_QWORD *)(v10 + 48) + 8 * a2);
    v15 = static NSObject.== infix(_:_:)(v14, a1);

    if ((v15 & 1) != 0)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v13);
      __break(1u);
    }
    else
    {
      v16 = ~v12;
      while (1)
      {
        a2 = (a2 + 1) & v16;
        if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        v17 = *(id *)(*(_QWORD *)(v10 + 48) + 8 * a2);
        v18 = static NSObject.== infix(_:_:)(v17, a1);

        if ((v18 & 1) != 0)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v19 = *v4;
  *(_QWORD *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v19 + 48) + 8 * a2) = a1;
  v20 = *(_QWORD *)(v19 + 16);
  v21 = __OFADD__(v20, 1);
  v22 = v20 + 1;
  if (v21)
    __break(1u);
  else
    *(_QWORD *)(v19 + 16) = v22;
}

uint64_t sub_9EF08(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  int64_t v37;

  v2 = v1;
  v4 = type metadata accessor for MetricsFieldInclusionRequest(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&qword_3C7950);
  v9 = static _SetStorage.resize(original:capacity:move:)(v8, a1, 0);
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
  {
    result = swift_release(v8);
LABEL_37:
    *v2 = v10;
    return result;
  }
  v11 = 1 << *(_BYTE *)(v8 + 32);
  v12 = *(_QWORD *)(v8 + 56);
  v35 = v2;
  v36 = v8 + 56;
  if (v11 < 64)
    v13 = ~(-1 << v11);
  else
    v13 = -1;
  v14 = v13 & v12;
  v37 = (unint64_t)(v11 + 63) >> 6;
  v15 = v9 + 56;
  result = swift_retain(v8);
  v17 = 0;
  while (1)
  {
    if (v14)
    {
      v19 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v20 = v19 | (v17 << 6);
      goto LABEL_26;
    }
    v21 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v21 >= v37)
      goto LABEL_35;
    v22 = *(_QWORD *)(v36 + 8 * v21);
    ++v17;
    if (!v22)
    {
      v17 = v21 + 1;
      if (v21 + 1 >= v37)
        goto LABEL_35;
      v22 = *(_QWORD *)(v36 + 8 * v17);
      if (!v22)
      {
        v17 = v21 + 2;
        if (v21 + 2 >= v37)
          goto LABEL_35;
        v22 = *(_QWORD *)(v36 + 8 * v17);
        if (!v22)
          break;
      }
    }
LABEL_25:
    v14 = (v22 - 1) & v22;
    v20 = __clz(__rbit64(v22)) + (v17 << 6);
LABEL_26:
    v24 = *(_QWORD *)(v5 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v7, *(_QWORD *)(v8 + 48) + v24 * v20, v4);
    v25 = *(_QWORD *)(v10 + 40);
    v26 = sub_F1C0(&qword_3B60B0, (void (*)(uint64_t))&type metadata accessor for MetricsFieldInclusionRequest, (uint64_t)&protocol conformance descriptor for MetricsFieldInclusionRequest);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v25, v4, v26);
    v27 = -1 << *(_BYTE *)(v10 + 32);
    v28 = result & ~v27;
    v29 = v28 >> 6;
    if (((-1 << v28) & ~*(_QWORD *)(v15 + 8 * (v28 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)(v15 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v30 = 0;
      v31 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v32 = v29 == v31;
        if (v29 == v31)
          v29 = 0;
        v30 |= v32;
        v33 = *(_QWORD *)(v15 + 8 * v29);
      }
      while (v33 == -1);
      v18 = __clz(__rbit64(~v33)) + (v29 << 6);
    }
    *(_QWORD *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v5 + 32))(*(_QWORD *)(v10 + 48) + v18 * v24, v7, v4);
    ++*(_QWORD *)(v10 + 16);
  }
  v23 = v21 + 3;
  if (v23 >= v37)
  {
LABEL_35:
    result = swift_release_n(v8, 2);
    v2 = v35;
    goto LABEL_37;
  }
  v22 = *(_QWORD *)(v36 + 8 * v23);
  if (v22)
  {
    v17 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v17 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v17 >= v37)
      goto LABEL_35;
    v22 = *(_QWORD *)(v36 + 8 * v17);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_39:
  __break(1u);
  return result;
}

Swift::Int sub_9F230(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  Swift::Int result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  int64_t v32;
  _QWORD v33[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&qword_3B60A0);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
LABEL_38:
    *v2 = v6;
    return result;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v31 = v2;
  v32 = (unint64_t)(v7 + 63) >> 6;
  v11 = v5 + 56;
  result = swift_retain(v3);
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v17 = v16 | (v13 << 6);
      goto LABEL_27;
    }
    v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v18 >= v32)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v18);
    ++v13;
    if (!v19)
    {
      v13 = v18 + 1;
      if (v18 + 1 >= v32)
        goto LABEL_36;
      v19 = *(_QWORD *)(v8 + 8 * v13);
      if (!v19)
      {
        v13 = v18 + 2;
        if (v18 + 2 >= v32)
          goto LABEL_36;
        v19 = *(_QWORD *)(v8 + 8 * v13);
        if (!v19)
          break;
      }
    }
LABEL_26:
    v10 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_27:
    v21 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v17);
    v22 = *v21;
    v23 = v21[1];
    Hasher.init(_seed:)(v33);
    swift_bridgeObjectRetain(v23);
    String.hash(into:)(v33, v22, v23);
    result = Hasher._finalize()();
    v24 = -1 << *(_BYTE *)(v6 + 32);
    v25 = result & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v26);
      }
      while (v30 == -1);
      v14 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v14);
    *v15 = v22;
    v15[1] = v23;
    ++*(_QWORD *)(v6 + 16);
  }
  v20 = v18 + 3;
  if (v20 >= v32)
  {
LABEL_36:
    result = swift_release_n(v3, 2);
    v2 = v31;
    goto LABEL_38;
  }
  v19 = *(_QWORD *)(v8 + 8 * v20);
  if (v19)
  {
    v13 = v20;
    goto LABEL_26;
  }
  while (1)
  {
    v13 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v13 >= v32)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v13);
    ++v20;
    if (v19)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

Swift::Int sub_9F4DC(uint64_t a1)
{
  Swift::Int *v1;
  Swift::Int *v2;
  Swift::Int v3;
  uint64_t v4;
  Swift::Int result;
  Swift::Int v6;
  int64_t v7;
  Swift::Int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  Swift::Int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  Swift::UInt v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  Swift::Int *v28;
  uint64_t v29[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&qword_3B60C0);
  result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = result;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
LABEL_38:
    *v2 = v6;
    return result;
  }
  v28 = v2;
  v7 = 0;
  v8 = v3 + 56;
  v9 = 1 << *(_BYTE *)(v3 + 32);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v3 + 56);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = result + 56;
  while (1)
  {
    if (v11)
    {
      v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v16 = v15 | (v7 << 6);
      goto LABEL_27;
    }
    v17 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v12)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v17);
    ++v7;
    if (!v18)
    {
      v7 = v17 + 1;
      if (v17 + 1 >= v12)
        goto LABEL_36;
      v18 = *(_QWORD *)(v8 + 8 * v7);
      if (!v18)
      {
        v7 = v17 + 2;
        if (v17 + 2 >= v12)
          goto LABEL_36;
        v18 = *(_QWORD *)(v8 + 8 * v7);
        if (!v18)
          break;
      }
    }
LABEL_26:
    v11 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v7 << 6);
LABEL_27:
    v20 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v16);
    Hasher.init(_seed:)(v29);
    Hasher._combine(_:)(v20);
    result = Hasher._finalize()();
    v21 = -1 << *(_BYTE *)(v6 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v26 = v23 == v25;
        if (v23 == v25)
          v23 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v13 + 8 * v23);
      }
      while (v27 == -1);
      v14 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v14) = v20;
    ++*(_QWORD *)(v6 + 16);
  }
  v19 = v17 + 3;
  if (v19 >= v12)
  {
LABEL_36:
    result = swift_release(v3);
    v2 = v28;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v8 + 8 * v19);
  if (v18)
  {
    v7 = v19;
    goto LABEL_26;
  }
  while (1)
  {
    v7 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v7 >= v12)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v7);
    ++v19;
    if (v18)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_9F754(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t *v28;

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&qword_3B60A8);
  result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = result;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
LABEL_38:
    *v2 = v6;
    return result;
  }
  v28 = v2;
  v7 = 0;
  v8 = v3 + 56;
  v9 = 1 << *(_BYTE *)(v3 + 32);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v3 + 56);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = result + 56;
  while (1)
  {
    if (v11)
    {
      v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v16 = v15 | (v7 << 6);
      goto LABEL_27;
    }
    v17 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v12)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v17);
    ++v7;
    if (!v18)
    {
      v7 = v17 + 1;
      if (v17 + 1 >= v12)
        goto LABEL_36;
      v18 = *(_QWORD *)(v8 + 8 * v7);
      if (!v18)
      {
        v7 = v17 + 2;
        if (v17 + 2 >= v12)
          goto LABEL_36;
        v18 = *(_QWORD *)(v8 + 8 * v7);
        if (!v18)
          break;
      }
    }
LABEL_26:
    v11 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v7 << 6);
LABEL_27:
    v20 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v16);
    result = static Hasher._hash(seed:_:)(*(_QWORD *)(v6 + 40), v20);
    v21 = -1 << *(_BYTE *)(v6 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v26 = v23 == v25;
        if (v23 == v25)
          v23 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v13 + 8 * v23);
      }
      while (v27 == -1);
      v14 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v14) = v20;
    ++*(_QWORD *)(v6 + 16);
  }
  v19 = v17 + 3;
  if (v19 >= v12)
  {
LABEL_36:
    result = swift_release(v3);
    v2 = v28;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v8 + 8 * v19);
  if (v18)
  {
    v7 = v19;
    goto LABEL_26;
  }
  while (1)
  {
    v7 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v7 >= v12)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v7);
    ++v19;
    if (v18)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

Swift::Int sub_9F9B4(uint64_t a1)
{
  Swift::Int *v1;
  Swift::Int *v2;
  Swift::Int v3;
  uint64_t v4;
  Swift::Int result;
  Swift::Int v6;
  int64_t v7;
  Swift::Int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  Swift::Int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  Swift::UInt64 v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  Swift::Int *v28;
  uint64_t v29[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&qword_3B6098);
  result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = result;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
LABEL_38:
    *v2 = v6;
    return result;
  }
  v28 = v2;
  v7 = 0;
  v8 = v3 + 56;
  v9 = 1 << *(_BYTE *)(v3 + 32);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v3 + 56);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = result + 56;
  while (1)
  {
    if (v11)
    {
      v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v16 = v15 | (v7 << 6);
      goto LABEL_27;
    }
    v17 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v12)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v17);
    ++v7;
    if (!v18)
    {
      v7 = v17 + 1;
      if (v17 + 1 >= v12)
        goto LABEL_36;
      v18 = *(_QWORD *)(v8 + 8 * v7);
      if (!v18)
      {
        v7 = v17 + 2;
        if (v17 + 2 >= v12)
          goto LABEL_36;
        v18 = *(_QWORD *)(v8 + 8 * v7);
        if (!v18)
          break;
      }
    }
LABEL_26:
    v11 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v7 << 6);
LABEL_27:
    v20 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v16);
    Hasher.init(_seed:)(v29);
    Hasher._combine(_:)(v20);
    result = Hasher._finalize()();
    v21 = -1 << *(_BYTE *)(v6 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v26 = v23 == v25;
        if (v23 == v25)
          v23 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v13 + 8 * v23);
      }
      while (v27 == -1);
      v14 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v14) = v20;
    ++*(_QWORD *)(v6 + 16);
  }
  v19 = v17 + 3;
  if (v19 >= v12)
  {
LABEL_36:
    result = swift_release(v3);
    v2 = v28;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v8 + 8 * v19);
  if (v18)
  {
    v7 = v19;
    goto LABEL_26;
  }
  while (1)
  {
    v7 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v7 >= v12)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v7);
    ++v19;
    if (v18)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_9FC2C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  int64_t v34;
  _QWORD v35[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3C7940);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
LABEL_38:
    *v2 = v6;
    return result;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v32 = v2;
  v33 = v3 + 56;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v3 + 56);
  v34 = (unint64_t)(v7 + 63) >> 6;
  v10 = v5 + 56;
  result = swift_retain();
  v12 = 0;
  while (1)
  {
    if (v9)
    {
      v14 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v15 = v14 | (v12 << 6);
      goto LABEL_27;
    }
    v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v16 >= v34)
      goto LABEL_36;
    v17 = *(_QWORD *)(v33 + 8 * v16);
    ++v12;
    if (!v17)
    {
      v12 = v16 + 1;
      if (v16 + 1 >= v34)
        goto LABEL_36;
      v17 = *(_QWORD *)(v33 + 8 * v12);
      if (!v17)
      {
        v12 = v16 + 2;
        if (v16 + 2 >= v34)
          goto LABEL_36;
        v17 = *(_QWORD *)(v33 + 8 * v12);
        if (!v17)
          break;
      }
    }
LABEL_26:
    v9 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_27:
    v19 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v15);
    Hasher.init(_seed:)(v35);
    v20 = *(void **)(v19 + 32);
    swift_retain();
    v21 = objc_msgSend(v20, "identifier");
    v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
    v24 = v23;

    String.hash(into:)(v35, v22, v24);
    swift_bridgeObjectRelease();
    result = Hasher._finalize()();
    v25 = -1 << *(_BYTE *)(v6 + 32);
    v26 = result & ~v25;
    v27 = v26 >> 6;
    if (((-1 << v26) & ~*(_QWORD *)(v10 + 8 * (v26 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v10 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v30 = v27 == v29;
        if (v27 == v29)
          v27 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v10 + 8 * v27);
      }
      while (v31 == -1);
      v13 = __clz(__rbit64(~v31)) + (v27 << 6);
    }
    *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v13) = v19;
    ++*(_QWORD *)(v6 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v34)
  {
LABEL_36:
    result = swift_release_n(v3, 2);
    v2 = v32;
    goto LABEL_38;
  }
  v17 = *(_QWORD *)(v33 + 8 * v18);
  if (v17)
  {
    v12 = v18;
    goto LABEL_26;
  }
  while (1)
  {
    v12 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v12 >= v34)
      goto LABEL_36;
    v17 = *(_QWORD *)(v33 + 8 * v12);
    ++v18;
    if (v17)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_9FF20(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  Swift::Int v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3C7930);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release();
LABEL_38:
    *v2 = v6;
    return result;
  }
  v30 = v2;
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v11 = (unint64_t)(v7 + 63) >> 6;
  v12 = v5 + 56;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v17 = v16 | (v14 << 6);
      goto LABEL_27;
    }
    v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v18 >= v11)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v18);
    ++v14;
    if (!v19)
    {
      v14 = v18 + 1;
      if (v18 + 1 >= v11)
        goto LABEL_36;
      v19 = *(_QWORD *)(v8 + 8 * v14);
      if (!v19)
      {
        v14 = v18 + 2;
        if (v18 + 2 >= v11)
          goto LABEL_36;
        v19 = *(_QWORD *)(v8 + 8 * v14);
        if (!v19)
          break;
      }
    }
LABEL_26:
    v10 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v14 << 6);
LABEL_27:
    v21 = *(_QWORD *)(v6 + 40);
    v22 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v17);
    result = NSObject._rawHashValue(seed:)(v21);
    v23 = -1 << *(_BYTE *)(v6 + 32);
    v24 = result & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~*(_QWORD *)(v12 + 8 * (v24 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v12 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v28 = v25 == v27;
        if (v25 == v27)
          v25 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v25);
      }
      while (v29 == -1);
      v15 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v15) = v22;
    ++*(_QWORD *)(v6 + 16);
  }
  v20 = v18 + 3;
  if (v20 >= v11)
  {
LABEL_36:
    result = swift_release_n(v3, 2);
    v2 = v30;
    goto LABEL_38;
  }
  v19 = *(_QWORD *)(v8 + 8 * v20);
  if (v19)
  {
    v14 = v20;
    goto LABEL_26;
  }
  while (1)
  {
    v14 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v14 >= v11)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v14);
    ++v20;
    if (v19)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t _sSo26ASKPagePresentationOptionsV8ShelfKitE16tryDeserializingAB9JetEngine10JSONObjectV_tcfC_0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4F30);
  __chkstk_darwin(v2);
  v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for JSONArray(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = 0;
  JSONObject.array.getter(v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    v10 = type metadata accessor for JSONObject(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(a1, v10);
    sub_1459C((uint64_t)v4, &qword_3B4F30);
  }
  else
  {
    v11 = (*(uint64_t (**)(char *, char *, uint64_t))(v6 + 32))(v9, v4, v5);
    __chkstk_darwin(v11);
    *(&v14 - 2) = (uint64_t)&v15;
    JSONArray.forEach(_:)(sub_A0588);
    v12 = type metadata accessor for JSONObject(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(a1, v12);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
  return v15;
}

unint64_t sub_A0324()
{
  unint64_t result;

  result = qword_3B5F58;
  if (!qword_3B5F58)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for HexColor);
    atomic_store(result, (unint64_t *)&qword_3B5F58);
  }
  return result;
}

uint64_t sub_A0368()
{
  return type metadata accessor for Page(0);
}

uint64_t type metadata accessor for Page(uint64_t a1)
{
  uint64_t result;

  result = qword_3B5F90;
  if (!qword_3B5F90)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for Page);
  return result;
}

void sub_A03AC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[16];

  v10[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v10[1] = &unk_2F1698;
  v10[2] = &unk_2F1698;
  v10[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v10[4] = &unk_2F16B0;
  v10[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v10[6] = (char *)&value witness table for Builtin.Int64 + 64;
  v2 = type metadata accessor for InteractionContext.Page(319);
  if (v3 <= 0x3F)
  {
    v10[7] = *(_QWORD *)(v2 - 8) + 64;
    sub_3EE70(319, (unint64_t *)&qword_3B4868, (uint64_t (*)(uint64_t))&type metadata accessor for JSONObject);
    if (v5 <= 0x3F)
    {
      v10[8] = *(_QWORD *)(v4 - 8) + 64;
      v10[9] = &unk_2F16C8;
      v10[10] = &unk_2F16C8;
      sub_3EE70(319, (unint64_t *)&qword_3B28A0, (uint64_t (*)(uint64_t))&type metadata accessor for ArtworkModel);
      if (v7 <= 0x3F)
      {
        v10[11] = *(_QWORD *)(v6 - 8) + 64;
        v10[12] = &unk_2F16E0;
        v10[13] = &unk_2F16E0;
        v10[14] = &unk_2F16F8;
        v8 = type metadata accessor for PageMetrics(319);
        if (v9 <= 0x3F)
        {
          v10[15] = *(_QWORD *)(v8 - 8) + 64;
          swift_updateClassMetadata2(a1, 256, 16, v10, a1 + 80);
        }
      }
    }
  }
}

uint64_t method lookup function for Page(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for Page);
}

uint64_t dispatch thunk of Page.__allocating_init(shelves:title:selectedFilterActionId:filterActions:headerBackgroundColor:headerButtonItems:presentationOptions:pageContext:nextPage:isIncomplete:isExplicit:uber:showAdamId:channelAdamId:mapiInLibrary:pageMetrics:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v7;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))(v7 + 208))(a1, a2, a3, a4, a5, a6, a7 | ((HIDWORD(a7) & 1) << 32));
}

uint64_t dispatch thunk of Page.__allocating_init(deserializing:using:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 216))();
}

uint64_t sub_A0588(uint64_t a1)
{
  uint64_t v1;

  return sub_995BC(a1, *(uint64_t **)(v1 + 16));
}

uint64_t View.measureLayoutPrefix(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t KeyPath;
  _QWORD v10[2];

  KeyPath = swift_getKeyPath(&unk_2F1710);
  v10[0] = a1;
  v10[1] = a2;
  swift_bridgeObjectRetain(a2);
  View.environment<A>(_:_:)(KeyPath, v10, a3, a4);
  swift_bridgeObjectRelease(a2);
  return swift_release(KeyPath);
}

uint64_t sub_A0630()
{
  unint64_t v0;
  uint64_t v2;

  v0 = sub_A1928();
  EnvironmentValues.subscript.getter(&type metadata for PrefixEnvironmentKey, &type metadata for PrefixEnvironmentKey, v0);
  return v2;
}

double sub_A0668@<D0>(_OWORD *a1@<X8>)
{
  unint64_t v2;
  double result;
  __int128 v4;

  v2 = sub_A1928();
  EnvironmentValues.subscript.getter(&type metadata for PrefixEnvironmentKey, &type metadata for PrefixEnvironmentKey, v2);
  result = *(double *)&v4;
  *a1 = v4;
  return result;
}

uint64_t sub_A06B4(_QWORD *a1)
{
  uint64_t v1;
  unint64_t v2;
  _QWORD v4[2];

  v1 = a1[1];
  v4[0] = *a1;
  v4[1] = v1;
  v2 = sub_A1928();
  swift_bridgeObjectRetain(v1);
  return EnvironmentValues.subscript.setter(v4, &type metadata for PrefixEnvironmentKey, &type metadata for PrefixEnvironmentKey, v2);
}

uint64_t View.measureLayout(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t KeyPath;
  uint64_t v9;
  _QWORD v11[4];
  char v12;
  uint64_t v13;
  char v14;

  KeyPath = swift_getKeyPath(&unk_2F1710);
  v9 = swift_getKeyPath(&unk_2F1738);
  v11[0] = a1;
  v11[1] = a2;
  v11[2] = KeyPath;
  v11[3] = 0;
  v12 = 0;
  v13 = v9;
  v14 = 0;
  View.modifier<A>(_:)(v11, a3, &type metadata for PerfModifier, a4);
  swift_release(v9);
  return swift_release(KeyPath);
}

void sub_A07C0(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t sub_A07C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;

  v8 = sub_A1C58();
  return static EnvironmentKey<>._valuesEqual(_:_:)(a1, a2, a3, a4, v8);
}

uint64_t sub_A0818(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static EnvironmentKey<>._valuesEqual(_:_:)(a1, a2, a3, a4, &protocol witness table for Int);
}

uint64_t sub_A0824()
{
  unint64_t v0;
  uint64_t v2;

  v0 = sub_A18E4();
  EnvironmentValues.subscript.getter(&type metadata for LevelEnvironmentKey, &type metadata for LevelEnvironmentKey, v0);
  return v2;
}

uint64_t sub_A085C@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v2;
  uint64_t result;
  uint64_t v4;

  v2 = sub_A18E4();
  result = EnvironmentValues.subscript.getter(&type metadata for LevelEnvironmentKey, &type metadata for LevelEnvironmentKey, v2);
  *a1 = v4;
  return result;
}

uint64_t sub_A08A8(uint64_t *a1)
{
  unint64_t v1;
  uint64_t v3;

  v3 = *a1;
  v1 = sub_A18E4();
  return EnvironmentValues.subscript.setter(&v3, &type metadata for LevelEnvironmentKey, &type metadata for LevelEnvironmentKey, v1);
}

uint64_t sub_A08F0(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_3B60C8);
  type metadata accessor for ModifiedContent(255, v1, v2);
  sub_32914(&qword_3B60D0, &qword_3B60C8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>);
}

uint64_t sub_A0970(_QWORD *a1)
{
  type metadata accessor for ModifiedContent(255, *a1, &type metadata for PerfModifier);
  sub_A09C4();
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>);
}

unint64_t sub_A09C4()
{
  unint64_t result;

  result = qword_3B60D8;
  if (!qword_3B60D8)
  {
    result = swift_getWitnessTable(&unk_2F1778);
    atomic_store(result, (unint64_t *)&qword_3B60D8);
  }
  return result;
}

uint64_t sub_A0A08(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_bridgeObjectRetain(a2);
  else
    return swift_retain(a1);
}

uint64_t sub_A0A18(uint64_t result, char a2)
{
  if ((a2 & 1) == 0)
    return swift_retain(result);
  return result;
}

uint64_t destroy for PerfModifier(uint64_t a1)
{
  swift_bridgeObjectRelease();
  sub_A0A5C(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  return sub_A0A6C(*(_QWORD *)(a1 + 40), *(_BYTE *)(a1 + 48));
}

uint64_t sub_A0A5C(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease(a2);
  else
    return swift_release(a1);
}

uint64_t sub_A0A6C(uint64_t result, char a2)
{
  if ((a2 & 1) == 0)
    return swift_release(result);
  return result;
}

uint64_t initializeWithCopy for PerfModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  v2 = a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  swift_bridgeObjectRetain(v4);
  sub_A0A08(v5, v6, v7);
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  v8 = *(_QWORD *)(v2 + 40);
  LOBYTE(v2) = *(_BYTE *)(v2 + 48);
  sub_A0A18(v8, v2);
  *(_QWORD *)(a1 + 40) = v8;
  *(_BYTE *)(a1 + 48) = v2;
  return a1;
}

uint64_t assignWithCopy for PerfModifier(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  v2 = a2;
  *(_QWORD *)a1 = *a2;
  v4 = a2[1];
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease();
  v5 = v2[2];
  v6 = v2[3];
  v7 = *((_BYTE *)v2 + 32);
  sub_A0A08(v5, v6, v7);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  sub_A0A5C(v8, v9, v10);
  v11 = v2[5];
  LOBYTE(v2) = *((_BYTE *)v2 + 48);
  sub_A0A18(v11, (char)v2);
  v12 = *(_QWORD *)(a1 + 40);
  v13 = *(_BYTE *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = v11;
  *(_BYTE *)(a1 + 48) = (_BYTE)v2;
  sub_A0A6C(v12, v13);
  return a1;
}

__n128 __swift_memcpy49_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for PerfModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  char v11;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_BYTE *)(a2 + 32);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_BYTE *)(a1 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = v5;
  sub_A0A5C(v6, v7, v8);
  v9 = *(_BYTE *)(a2 + 48);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_BYTE *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = v9;
  sub_A0A6C(v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for PerfModifier(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 49))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PerfModifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 49) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PerfModifier()
{
  return &type metadata for PerfModifier;
}

uint64_t sub_A0CCC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_33EF54, 1);
}

uint64_t sub_A0CDC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t KeyPath;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t *v16;

  v5 = *(_QWORD *)(v2 + 40);
  v6 = *(_BYTE *)(v2 + 48);
  v7 = sub_A1804(*(_QWORD *)v2, *(void **)(v2 + 8), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_BYTE *)(v2 + 32));
  v9 = v8;
  sub_A0A18(v5, v6);
  v10 = sub_269C20(v5, v6);
  sub_A0A6C(v5, v6);
  *a2 = v7;
  a2[1] = v9;
  a2[2] = v10;
  v11 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B60E0) + 44);
  KeyPath = swift_getKeyPath(&unk_2F1738);
  sub_A0A18(v5, v6);
  swift_bridgeObjectRetain(v9);
  v13 = sub_269C20(v5, v6);
  result = sub_A0A6C(v5, v6);
  if (__OFADD__(v13, 1))
  {
    __break(1u);
  }
  else
  {
    v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B60E8);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))((char *)a2 + v11, a1, v15);
    swift_bridgeObjectRelease();
    result = __swift_instantiateConcreteTypeFromMangledName(&qword_3B60F0);
    v16 = (uint64_t *)((char *)a2 + v11 + *(int *)(result + 36));
    *v16 = KeyPath;
    v16[1] = v13 + 1;
  }
  return result;
}

double sub_A0E08(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, Swift::Int a9)
{
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  Swift::String v19;
  Swift::String v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  char v28;
  uint64_t v29;
  double v30;
  unint64_t v31;
  double v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  Swift::String v39;
  Swift::String v40;
  Swift::String v41;
  Swift::String v42;
  Swift::String v43;
  Swift::String v44;
  uint64_t v45;
  Swift::String v46;
  double v47;
  unint64_t v48;
  uint64_t v50;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  void (*v60)(char *, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  double v64;
  unint64_t v65;
  uint64_t v66;
  char v67;
  double v68;
  unint64_t v69;

  v10 = a7;
  v55 = a7;
  v61 = a5;
  v59 = a4;
  v58 = a3;
  v56 = a2;
  v12 = type metadata accessor for LayoutSubview(0);
  v62 = *(_QWORD *)(v12 - 8);
  v63 = v12;
  __chkstk_darwin(v12);
  v14 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Date(0);
  v16 = *(_QWORD *)(v15 - 8);
  v53 = v15;
  __chkstk_darwin(v15);
  v18 = (char *)&v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19._countAndFlagsBits = 32;
  v19._object = (void *)0xE100000000000000;
  v20 = String.init(repeating:count:)(v19, a9);
  countAndFlagsBits = v20._countAndFlagsBits;
  object = v20._object;
  v21 = Date.init()(v20._countAndFlagsBits);
  v22 = Date.timeIntervalSinceReferenceDate.getter(v21);
  v60 = *(void (**)(char *, uint64_t))(v16 + 8);
  v60(v18, v15);
  v57 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B6150);
  v23 = swift_allocObject(v57, 64, 7);
  v54 = xmmword_2EA0D0;
  *(_OWORD *)(v23 + 16) = xmmword_2EA0D0;
  v64 = 0.0;
  v65 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v68 = v64;
  v69 = v65;
  String.append(_:)(v20);
  v24._countAndFlagsBits = 0x202A2A2A2A2A2FLL;
  v24._object = (void *)0xE700000000000000;
  String.append(_:)(v24);
  Double.write<A>(to:)(&v68, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, v22);
  v25._countAndFlagsBits = 32;
  v25._object = (void *)0xE100000000000000;
  String.append(_:)(v25);
  swift_bridgeObjectRetain(a8);
  v26._countAndFlagsBits = v10;
  v26._object = a8;
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  v27._countAndFlagsBits = 0x616854657A697320;
  v27._object = (void *)0xEE00207374694674;
  String.append(_:)(v27);
  v64 = *(double *)&a1;
  v28 = v56 & 1;
  LOBYTE(v65) = v56 & 1;
  v29 = v58;
  v66 = v58;
  LOBYTE(v10) = v59 & 1;
  v67 = v59 & 1;
  _print_unlocked<A, B>(_:_:)(&v64, &v68, &type metadata for ProposedViewSize, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v30 = v68;
  v31 = v69;
  *(_QWORD *)(v23 + 56) = &type metadata for String;
  *(double *)(v23 + 32) = v30;
  *(_QWORD *)(v23 + 40) = v31;
  print(_:separator:terminator:)(v23, 32, 0xE100000000000000, 10, 0xE100000000000000);
  swift_bridgeObjectRelease();
  LayoutSubviews.subscript.getter(0);
  LOBYTE(v64) = v28;
  LOBYTE(v68) = v10;
  v32 = LayoutSubview.sizeThatFits(_:)(a1);
  v34 = v33;
  v35 = (*(uint64_t (**)(char *, uint64_t))(v62 + 8))(v14, v63);
  v36 = Date.init()(v35);
  v37 = Date.timeIntervalSinceReferenceDate.getter(v36);
  v60(v18, v53);
  v38 = swift_allocObject(v57, 64, 7);
  *(_OWORD *)(v38 + 16) = v54;
  v64 = 0.0;
  v65 = 0xE000000000000000;
  _StringGuts.grow(_:)(60);
  v68 = v64;
  v69 = v65;
  v39._countAndFlagsBits = countAndFlagsBits;
  v39._object = object;
  String.append(_:)(v39);
  swift_bridgeObjectRelease();
  v40._countAndFlagsBits = 0x202A2A2A2A2A5CLL;
  v40._object = (void *)0xE700000000000000;
  String.append(_:)(v40);
  Double.write<A>(to:)(&v68, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, v37);
  v41._countAndFlagsBits = 32;
  v41._object = (void *)0xE100000000000000;
  String.append(_:)(v41);
  swift_bridgeObjectRetain(a8);
  v42._countAndFlagsBits = v55;
  v42._object = a8;
  String.append(_:)(v42);
  swift_bridgeObjectRelease();
  v43._countAndFlagsBits = 0x616854657A697320;
  v43._object = (void *)0xEE00207374694674;
  String.append(_:)(v43);
  v64 = *(double *)&a1;
  LOBYTE(v65) = v28;
  v66 = v29;
  v67 = v10;
  _print_unlocked<A, B>(_:_:)(&v64, &v68, &type metadata for ProposedViewSize, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v44._countAndFlagsBits = 0x6E7275746572202CLL;
  v44._object = (void *)0xEC00000020676E69;
  String.append(_:)(v44);
  v64 = v32;
  v65 = v34;
  type metadata accessor for CGSize(0);
  _print_unlocked<A, B>(_:_:)(&v64, &v68, v45, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v46._countAndFlagsBits = 0x206C61746F74202CLL;
  v46._object = (void *)0xEE00203A656D6974;
  String.append(_:)(v46);
  Double.write<A>(to:)(&v68, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, v37 - v22);
  v47 = v68;
  v48 = v69;
  *(_QWORD *)(v38 + 56) = &type metadata for String;
  *(double *)(v38 + 32) = v47;
  *(_QWORD *)(v38 + 40) = v48;
  print(_:separator:terminator:)(v38, 32, 0xE100000000000000, 10, 0xE100000000000000);
  swift_bridgeObjectRelease();
  return v32;
}

uint64_t sub_A12D4(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5, double a6, double a7, double a8, double a9, uint64_t a10, uint64_t a11, void *a12, Swift::Int a13)
{
  uint64_t v14;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  Swift::String v26;
  Swift::String v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  char v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  double v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  uint64_t v44;
  Swift::String v45;
  Swift::String v46;
  Swift::String v47;
  Swift::String v48;
  Swift::String v49;
  Swift::String v50;
  uint64_t v51;
  unint64_t v52;
  _BYTE v54[12];
  int v55;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v58;
  int v59;
  __int128 v60;
  uint64_t v61;
  void (*v62)(_BYTE *, uint64_t);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  unint64_t v73;

  v14 = a11;
  v61 = a11;
  v63 = a5;
  v59 = a4;
  v67 = a3;
  v55 = a2;
  v66 = a1;
  v19 = type metadata accessor for LayoutSubview(0);
  v64 = *(_QWORD *)(v19 - 8);
  v65 = v19;
  __chkstk_darwin(v19);
  v21 = &v54[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v22 = type metadata accessor for Date(0);
  v23 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v25 = &v54[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v26._countAndFlagsBits = 32;
  v26._object = (void *)0xE100000000000000;
  v27 = String.init(repeating:count:)(v26, a13);
  countAndFlagsBits = v27._countAndFlagsBits;
  object = v27._object;
  v28 = Date.init()(v27._countAndFlagsBits);
  v29 = Date.timeIntervalSinceReferenceDate.getter(v28);
  v62 = *(void (**)(_BYTE *, uint64_t))(v23 + 8);
  v62(v25, v22);
  v58 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B6150);
  v30 = swift_allocObject(v58, 64, 7);
  v60 = xmmword_2EA0D0;
  *(_OWORD *)(v30 + 16) = xmmword_2EA0D0;
  v68 = 0;
  v69 = 0xE000000000000000;
  _StringGuts.grow(_:)(31);
  v72 = v68;
  v73 = v69;
  String.append(_:)(v27);
  v31._countAndFlagsBits = 0x202A2A2A2A2A2FLL;
  v31._object = (void *)0xE700000000000000;
  String.append(_:)(v31);
  Double.write<A>(to:)(&v72, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, v29);
  v32._countAndFlagsBits = 32;
  v32._object = (void *)0xE100000000000000;
  String.append(_:)(v32);
  swift_bridgeObjectRetain(a12);
  v33._countAndFlagsBits = v14;
  v33._object = a12;
  String.append(_:)(v33);
  swift_bridgeObjectRelease();
  v34._countAndFlagsBits = 0x75536563616C7020;
  v34._object = (void *)0xEF20737765697662;
  String.append(_:)(v34);
  v68 = v66;
  v35 = v55 & 1;
  LOBYTE(v69) = v55 & 1;
  v70 = v67;
  LOBYTE(v14) = v59 & 1;
  v71 = v59 & 1;
  _print_unlocked<A, B>(_:_:)(&v68, &v72, &type metadata for ProposedViewSize, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v36 = v72;
  v37 = v73;
  *(_QWORD *)(v30 + 56) = &type metadata for String;
  *(_QWORD *)(v30 + 32) = v36;
  *(_QWORD *)(v30 + 40) = v37;
  print(_:separator:terminator:)(v30, 32, 0xE100000000000000, 10, 0xE100000000000000);
  swift_bridgeObjectRelease();
  v38 = LayoutSubviews.subscript.getter(0);
  v39 = static UnitPoint.topLeading.getter(v38);
  LOBYTE(v68) = 0;
  LOBYTE(v72) = 0;
  LayoutSubview.place(at:anchor:proposal:)(*(_QWORD *)&a8, 0, *(_QWORD *)&a9, 0, a6, a7, v39, v40);
  v41 = (*(uint64_t (**)(_BYTE *, uint64_t))(v64 + 8))(v21, v65);
  v42 = Date.init()(v41);
  v43 = Date.timeIntervalSinceReferenceDate.getter(v42);
  v62(v25, v22);
  v44 = swift_allocObject(v58, 64, 7);
  *(_OWORD *)(v44 + 16) = v60;
  v68 = 0;
  v69 = 0xE000000000000000;
  _StringGuts.grow(_:)(47);
  v72 = v68;
  v73 = v69;
  v45._countAndFlagsBits = countAndFlagsBits;
  v45._object = object;
  String.append(_:)(v45);
  swift_bridgeObjectRelease();
  v46._countAndFlagsBits = 0x202A2A2A2A2A5CLL;
  v46._object = (void *)0xE700000000000000;
  String.append(_:)(v46);
  Double.write<A>(to:)(&v72, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, v43);
  v47._countAndFlagsBits = 32;
  v47._object = (void *)0xE100000000000000;
  String.append(_:)(v47);
  swift_bridgeObjectRetain(a12);
  v48._countAndFlagsBits = v61;
  v48._object = a12;
  String.append(_:)(v48);
  swift_bridgeObjectRelease();
  v49._countAndFlagsBits = 0x75536563616C7020;
  v49._object = (void *)0xEF20737765697662;
  String.append(_:)(v49);
  v68 = v66;
  LOBYTE(v69) = v35;
  v70 = v67;
  v71 = v14;
  _print_unlocked<A, B>(_:_:)(&v68, &v72, &type metadata for ProposedViewSize, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v50._countAndFlagsBits = 0x206C61746F74202CLL;
  v50._object = (void *)0xEE00203A656D6974;
  String.append(_:)(v50);
  Double.write<A>(to:)(&v72, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, v43 - v29);
  v51 = v72;
  v52 = v73;
  *(_QWORD *)(v44 + 56) = &type metadata for String;
  *(_QWORD *)(v44 + 32) = v51;
  *(_QWORD *)(v44 + 40) = v52;
  print(_:separator:terminator:)(v44, 32, 0xE100000000000000, 10, 0xE100000000000000);
  return swift_bridgeObjectRelease();
}

double sub_A1794(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  return sub_A0E08(a1, a2 & 1, a3, a4 & 1, a5, a6, *(_QWORD *)v6, *(void **)(v6 + 8), *(_QWORD *)(v6 + 16));
}

uint64_t sub_A17CC(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, double a7, double a8, double a9, double a10)
{
  uint64_t v10;

  return sub_A12D4(a1, a2 & 1, a3, a4 & 1, a5, a7, a8, a9, a10, a6, *(_QWORD *)v10, *(void **)(v10 + 8), *(_QWORD *)(v10 + 16));
}

uint64_t sub_A1804(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, char a5)
{
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t v17;

  v9 = a5 & 1;
  sub_A0A08(a3, a4, a5 & 1);
  v10 = sub_269A44(a3, a4, v9);
  v12 = v11;
  sub_A0A5C(a3, a4, v9);
  if (v12)
  {
    v17 = v10;
    v13._countAndFlagsBits = 10016;
    v13._object = (void *)0xE200000000000000;
    String.append(_:)(v13);
  }
  else
  {
    v17 = 39;
  }
  swift_bridgeObjectRetain(a2);
  v14._countAndFlagsBits = a1;
  v14._object = a2;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = 39;
  v15._object = (void *)0xE100000000000000;
  String.append(_:)(v15);
  return v17;
}

unint64_t sub_A18E4()
{
  unint64_t result;

  result = qword_3B60F8;
  if (!qword_3B60F8)
  {
    result = swift_getWitnessTable(&unk_2F1910);
    atomic_store(result, (unint64_t *)&qword_3B60F8);
  }
  return result;
}

unint64_t sub_A1928()
{
  unint64_t result;

  result = qword_3B6100;
  if (!qword_3B6100)
  {
    result = swift_getWitnessTable(&unk_2F18D8);
    atomic_store(result, (unint64_t *)&qword_3B6100);
  }
  return result;
}

ValueMetadata *type metadata accessor for PrefixEnvironmentKey()
{
  return &type metadata for PrefixEnvironmentKey;
}

ValueMetadata *type metadata accessor for LevelEnvironmentKey()
{
  return &type metadata for LevelEnvironmentKey;
}

_QWORD *sub_A1990(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain(v3);
  return a1;
}

_QWORD *assignWithCopy for PerfLayout(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  return a1;
}

_QWORD *assignWithTake for PerfLayout(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  return a1;
}

uint64_t getEnumTagSinglePayload for PerfLayout(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PerfLayout(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PerfLayout()
{
  return &type metadata for PerfLayout;
}

unint64_t sub_A1AF0()
{
  unint64_t result;

  result = qword_3B6108;
  if (!qword_3B6108)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_3B60E0);
    sub_32914(&qword_3B6110, &qword_3B6118, (uint64_t)&protocol conformance descriptor for _LayoutRoot<A>);
    sub_A1B74();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _VariadicView.Tree<A, B>);
    atomic_store(result, (unint64_t *)&qword_3B6108);
  }
  return result;
}

unint64_t sub_A1B74()
{
  unint64_t result;

  result = qword_3B6120;
  if (!qword_3B6120)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_3B60F0);
    sub_32914(&qword_3B6128, &qword_3B60E8, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    sub_32914(&qword_3B6130, &qword_3B6138, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>);
    atomic_store(result, (unint64_t *)&qword_3B6120);
  }
  return result;
}

unint64_t sub_A1C14()
{
  unint64_t result;

  result = qword_3B6140;
  if (!qword_3B6140)
  {
    result = swift_getWitnessTable(&unk_2F1810);
    atomic_store(result, (unint64_t *)&qword_3B6140);
  }
  return result;
}

unint64_t sub_A1C58()
{
  unint64_t result;

  result = qword_3B6148;
  if (!qword_3B6148)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_3B2420);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?);
    atomic_store(result, (unint64_t *)&qword_3B6148);
  }
  return result;
}

uint64_t LibraryStationEpisodeOfferAction.stationUuid.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit32LibraryStationEpisodeOfferAction_stationUuid);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit32LibraryStationEpisodeOfferAction_stationUuid + 8));
  return v1;
}

uint64_t LibraryStationEpisodeOfferAction.__allocating_init(episodeUuid:stationUuid:contentId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE v34[4];
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v7 = v6;
  v35 = a6;
  v38 = type metadata accessor for UUID(0);
  v36 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38);
  v14 = &v34[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v37 = type metadata accessor for ActionMetrics(0);
  v15 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v17 = &v34[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v18);
  v20 = &v34[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v21 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  v22 = v21;
  v23 = (_QWORD *)(v21 + OBJC_IVAR____TtC8ShelfKit32LibraryStationEpisodeOfferAction_stationUuid);
  *v23 = a3;
  v23[1] = a4;
  v24 = (_QWORD *)(v21 + OBJC_IVAR____TtC8ShelfKit25LibraryEpisodeOfferAction_episodeUuid);
  *v24 = a1;
  v24[1] = a2;
  if ((v35 & 1) != 0 || static AdamID.empty.getter(v21) == a5)
  {
    a5 = 0;
    v25 = 1;
  }
  else
  {
    v25 = 0;
  }
  v26 = v22 + OBJC_IVAR____TtC8ShelfKit25LibraryEpisodeOfferAction_contentId;
  *(_QWORD *)v26 = a5;
  *(_BYTE *)(v26 + 8) = v25;
  v27 = type metadata accessor for ImpressionMetrics(0);
  v28 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v20, 1, 1, v27);
  v29 = static ActionMetrics.notInstrumented.getter(v28);
  UUID.init()(v29);
  v30 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
  v32 = v31;
  (*(void (**)(_BYTE *, uint64_t))(v36 + 8))(v14, v38);
  *(_QWORD *)(v22 + 16) = v30;
  *(_QWORD *)(v22 + 24) = v32;
  *(_QWORD *)(v22 + 32) = 0;
  *(_QWORD *)(v22 + 40) = 0;
  *(_BYTE *)(v22 + 48) = 32;
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v15 + 32))(v22 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v17, v37);
  sub_23AB8((uint64_t)v20, v22 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics);
  return v22;
}

uint64_t LibraryStationEpisodeOfferAction.init(episodeUuid:stationUuid:contentId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v33[4];
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v7 = v6;
  v34 = a6;
  v37 = type metadata accessor for UUID(0);
  v35 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v14 = &v33[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v36 = type metadata accessor for ActionMetrics(0);
  v15 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  v17 = &v33[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v18);
  v20 = &v33[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v21 = (_QWORD *)(v7 + OBJC_IVAR____TtC8ShelfKit32LibraryStationEpisodeOfferAction_stationUuid);
  *v21 = a3;
  v21[1] = a4;
  v22 = (_QWORD *)(v7 + OBJC_IVAR____TtC8ShelfKit25LibraryEpisodeOfferAction_episodeUuid);
  *v22 = a1;
  v22[1] = a2;
  v23 = swift_retain(v7);
  if ((v34 & 1) != 0 || static AdamID.empty.getter(v23) == a5)
  {
    a5 = 0;
    v24 = 1;
  }
  else
  {
    v24 = 0;
  }
  v25 = v7 + OBJC_IVAR____TtC8ShelfKit25LibraryEpisodeOfferAction_contentId;
  *(_QWORD *)v25 = a5;
  *(_BYTE *)(v25 + 8) = v24;
  swift_release(v7);
  v26 = type metadata accessor for ImpressionMetrics(0);
  v27 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v20, 1, 1, v26);
  v28 = static ActionMetrics.notInstrumented.getter(v27);
  UUID.init()(v28);
  v29 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
  v31 = v30;
  (*(void (**)(_BYTE *, uint64_t))(v35 + 8))(v14, v37);
  *(_QWORD *)(v7 + 16) = v29;
  *(_QWORD *)(v7 + 24) = v31;
  *(_QWORD *)(v7 + 32) = 0;
  *(_QWORD *)(v7 + 40) = 0;
  *(_BYTE *)(v7 + 48) = 32;
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v15 + 32))(v7 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v17, v36);
  sub_23AB8((uint64_t)v20, v7 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics);
  return v7;
}

void LibraryStationEpisodeOfferAction.init(deserializing:using:)()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000033, 0x800000000030A500, "ShelfKit/LibraryStationEpisodeOfferAction.swift", 47, 2, 24, 0);
  __break(1u);
}

void LibraryStationEpisodeOfferAction.init(episodeUuid:contentId:)()
{
  _swift_stdlib_reportUnimplementedInitializer("ShelfKit.LibraryStationEpisodeOfferAction", 41, "init(episodeUuid:contentId:)", 28, 0);
  __break(1u);
}

uint64_t sub_A21A4()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0
                                             + OBJC_IVAR____TtC8ShelfKit32LibraryStationEpisodeOfferAction_stationUuid
                                             + 8));
}

uint64_t LibraryStationEpisodeOfferAction.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics;
  v2 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_23B00(v0 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t LibraryStationEpisodeOfferAction.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics;
  v2 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_23B00(v0 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_A22F4()
{
  return type metadata accessor for LibraryStationEpisodeOfferAction(0);
}

uint64_t type metadata accessor for LibraryStationEpisodeOfferAction(uint64_t a1)
{
  uint64_t result;

  result = qword_3B6180;
  if (!qword_3B6180)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LibraryStationEpisodeOfferAction);
  return result;
}

uint64_t sub_A2338(uint64_t a1)
{
  void *v2;

  v2 = &unk_2F1998;
  return swift_updateClassMetadata2(a1, 256, 1, &v2, a1 + 184);
}

uint64_t method lookup function for LibraryStationEpisodeOfferAction(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for LibraryStationEpisodeOfferAction);
}

uint64_t dispatch thunk of LibraryStationEpisodeOfferAction.__allocating_init(episodeUuid:stationUuid:contentId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v6;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(v6 + 192))(a1, a2, a3, a4, a5, a6 & 1);
}

uint64_t ArtworkLoader.load(artwork:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v29[2];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34[5];
  uint64_t v35;

  v2 = type metadata accessor for ArtworkRequest(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(v2);
  v5 = (char *)v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B6270);
  v32 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v7 = (char *)v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B6278);
  v33 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v9 = (char *)v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B6280);
  v11 = swift_allocObject(v10, 44, 7);
  *(_QWORD *)(v11 + 24) = 0;
  *(_QWORD *)(v11 + 32) = 0;
  *(_QWORD *)(v11 + 16) = 0;
  *(_DWORD *)(v11 + 40) = 0;
  v29[1] = a1;
  ArtworkLoader.publisher(for:)(v34);
  v35 = v34[0];
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  v12 = *(unsigned __int8 *)(v3 + 80);
  v13 = (v12 + 24) & ~v12;
  v14 = (v4 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  v15 = swift_allocObject(&unk_37DAF0, v14 + 17, v12 | 7);
  *(_QWORD *)(v15 + 16) = v11;
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(v15 + v13, v5, v2);
  v16 = v15 + v14;
  *(_QWORD *)v16 = "ArtworkLoaderImageProvider";
  *(_QWORD *)(v16 + 8) = 26;
  *(_BYTE *)(v16 + 16) = 2;
  v17 = swift_allocObject(&unk_37DB18, 41, 7);
  *(_QWORD *)(v17 + 16) = v11;
  *(_QWORD *)(v17 + 24) = "ArtworkLoaderImageProvider";
  *(_QWORD *)(v17 + 32) = 26;
  *(_BYTE *)(v17 + 40) = 2;
  v18 = swift_allocObject(&unk_37DB40, 41, 7);
  *(_QWORD *)(v18 + 16) = v11;
  *(_QWORD *)(v18 + 24) = "ArtworkLoaderImageProvider";
  *(_QWORD *)(v18 + 32) = 26;
  *(_BYTE *)(v18 + 40) = 2;
  v19 = swift_allocObject(&unk_37DB68, 41, 7);
  *(_QWORD *)(v19 + 16) = v11;
  *(_QWORD *)(v19 + 24) = "ArtworkLoaderImageProvider";
  *(_QWORD *)(v19 + 32) = 26;
  *(_BYTE *)(v19 + 40) = 2;
  swift_retain_n(v11, 4);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B6288);
  v21 = sub_32914(&qword_3B6290, &qword_3B6288, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)(sub_A282C, v15, sub_A2D90, v17, sub_A324C, v18, sub_A3A14, v19, 0, 0, v20, v21);
  swift_release(v15);
  swift_release(v17);
  swift_release(v18);
  swift_release(v19);
  swift_release(v35);
  ArtworkRequest.trace.getter(v34);
  v22 = sub_32914(&qword_3B6298, &qword_3B6270, (uint64_t)&protocol conformance descriptor for Publishers.HandleEvents<A>);
  v23 = v30;
  v24 = static EmitLifecycle.defaultVerbosity.getter(v30, v22);
  Publisher.emitLifecycle(for:name:definesInterval:context:verbose:)(v34, "ArtworkLoaderImageProvider", 26, 2, 1, 0, 0, v24 & 1, v23, v22);
  sub_A3A24((uint64_t)v34);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v7, v23);
  v25 = sub_32914(&qword_3B62A8, &qword_3B6278, (uint64_t)&protocol conformance descriptor for EmitLifecycle<A>);
  v26 = v31;
  v27 = Publisher.eraseToAnyPublisher()(v31, v25);
  swift_release(v11);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v9, v26);
  return v27;
}

void sub_A273C(uint64_t a1, os_unfair_lock_s *a2, uint64_t (*a3)(char *, uint64_t), const char *a4, uint64_t a5, int a6)
{
  uint64_t v10;
  os_unfair_lock_s *v11;

  v10 = (uint64_t)&a2[4];
  v11 = a2 + 10;
  os_unfair_lock_lock(a2 + 10);
  sub_A2888(v10, a3, a4, a5, a6);
  os_unfair_lock_unlock(v11);
}

uint64_t sub_A27AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for ArtworkRequest(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 17;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

void sub_A282C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for ArtworkRequest(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  sub_A273C(a1, *(os_unfair_lock_s **)(v1 + 16), (uint64_t (*)(char *, uint64_t))(v1 + v4), *(const char **)v5, *(_QWORD *)(v5 + 8), *(unsigned __int8 *)(v5 + 16));
}

uint64_t sub_A2888(uint64_t a1, uint64_t (*a2)(char *, uint64_t), const char *a3, uint64_t a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  objc_class *v28;
  objc_class *v29;
  uint64_t v30;
  uint64_t v31;
  objc_class *v32;
  char v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  Class isa;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t *v48;
  char *v49;
  void (*v50)(char *, char *, uint64_t);
  uint8_t *v51;
  uint64_t v52;
  uint64_t v53;
  os_signpost_id_t v54;
  os_log_t v55;
  uint64_t v56;
  uint8_t *v57;
  void (*v58)(char *, char *, uint64_t);
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  char *v67;
  os_log_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t (*v76)(char *, uint64_t);
  char *v77;
  uint64_t v78;
  uint64_t v79[3];
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  v77 = (char *)a3;
  LODWORD(v75) = a5;
  v76 = a2;
  v74 = type metadata accessor for OSSignpostID(0);
  v5 = *(_QWORD *)(v74 - 8);
  v6 = __chkstk_darwin(v74);
  v8 = (char *)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v64 - v9;
  v11 = type metadata accessor for OSSignposter(0);
  v12 = *(NSObject **)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v64 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v64 - v16;
  v18 = type metadata accessor for UUID(0);
  v19 = *(_QWORD *)(v18 - 8);
  result = __chkstk_darwin(v18);
  v23 = (char *)&v64 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*v21)
  {
    v65 = result;
    v66 = v21;
    v67 = v15;
    v68 = v12;
    v72 = v8;
    v73 = v17;
    v70 = v11;
    v71 = v10;
    v69 = v5;
    v24 = v74;
    ArtworkRequest.trace.getter(v79);
    v25 = v80;
    if (v80)
    {
      v26 = v81;
      __swift_project_boxed_opaque_existential_1(v79, v80);
      v27 = dispatch thunk of Trace.identifier.getter(v25, v26);
      v29 = v28;
      v30 = __swift_destroy_boxed_opaque_existential_1(v79);
    }
    else
    {
      v31 = sub_A3A24((uint64_t)v79);
      UUID.init()(v31);
      v27 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
      v29 = v32;
      v30 = (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v23, v65);
    }
    v33 = v75;
    v34 = static OSSignposter.artwork.getter(v30);
    v35 = v67;
    v36 = static OSSignposter.artwork.getter(v34);
    v37 = OSSignposter.logHandle.getter(v36);
    v38 = v71;
    OSSignpostID.init(log:)(v37);
    isa = v68[1].isa;
    v40 = v70;
    ((void (*)(char *, uint64_t))isa)(v35, v70);
    v41 = swift_bridgeObjectRetain_n(v29, 2);
    v42 = OSSignposter.logHandle.getter(v41);
    LODWORD(v74) = static os_signpost_type_t.begin.getter(v42);
    v43 = OS_os_log.signpostsEnabled.getter();
    v44 = v78;
    v45 = v69;
    v75 = v27;
    v76 = (uint64_t (*)(char *, uint64_t))isa;
    if ((v43 & 1) == 0)
    {
      swift_bridgeObjectRelease_n(v29, 2);

      isa = v29;
      v48 = v66;
      v49 = v72;
      (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v72, v38, v24);
LABEL_15:
      v59 = type metadata accessor for OSSignpostIntervalState(0);
      swift_allocObject(v59, *(unsigned int *)(v59 + 48), *(unsigned __int16 *)(v59 + 52));
      v60 = OSSignpostIntervalState.init(id:isOpen:)(v49, 1);
      v61 = v38;
      v62 = v60;
      (*(void (**)(char *, uint64_t))(v45 + 8))(v61, v24);
      result = v76(v73, v40);
      v63 = v75;
      *v48 = v62;
      v48[1] = v63;
      v48[2] = (uint64_t)isa;
      return result;
    }
    v68 = v42;
    v46 = v72;
    if ((v33 & 1) == 0)
    {
      isa = v29;
      if (v77)
      {
        v47 = v27;
LABEL_14:
        v50 = *(void (**)(char *, char *, uint64_t))(v45 + 16);
        v50(v46, v38, v24);
        v51 = (uint8_t *)swift_slowAlloc(12, -1);
        v52 = swift_slowAlloc(32, -1);
        v79[0] = v52;
        *(_DWORD *)v51 = 136315138;
        swift_bridgeObjectRetain(isa);
        v82 = sub_69298(v47, (unint64_t)isa, v79);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83);
        v53 = swift_bridgeObjectRelease_n(isa, 3);
        v54 = OSSignpostID.rawValue.getter(v53);
        v55 = v68;
        _os_signpost_emit_with_name_impl(&dword_0, v68, (os_signpost_type_t)v74, v54, v77, "[identifier=%{name=identifier}s] ArtworkLoaderImageProviderFetch", v51, 0xCu);
        swift_arrayDestroy(v52, 1, (char *)&type metadata for Any + 8);
        v56 = v52;
        v49 = v72;
        swift_slowDealloc(v56, -1, -1);
        v57 = v51;
        v38 = v71;
        swift_slowDealloc(v57, -1, -1);

        (*(void (**)(char *, uint64_t))(v45 + 8))(v49, v24);
        v58 = v50;
        v48 = v66;
        v40 = v70;
        v58(v49, v38, v24);
        goto LABEL_15;
      }
      goto LABEL_19;
    }
    if ((unint64_t)v77 >> 32)
    {
      __break(1u);
    }
    else
    {
      if (v77 >> 11 == 27)
      {
LABEL_18:
        __break(1u);
LABEL_19:
        result = swift_bridgeObjectRelease_n(isa, 2);
        __break(1u);
        return result;
      }
      if (v77 >> 16 <= 0x10)
      {
        v47 = v27;
        isa = v29;
        v77 = sub_2441C8();
        v78 = v44;
        goto LABEL_14;
      }
    }
    __break(1u);
    goto LABEL_18;
  }
  return result;
}

void sub_A2D04(uint64_t a1, os_unfair_lock_s *a2, const char *a3, uint64_t a4, char a5)
{
  uint64_t *v8;
  os_unfair_lock_s *v9;

  v8 = (uint64_t *)&a2[4];
  v9 = a2 + 10;
  os_unfair_lock_lock(a2 + 10);
  sub_A2DA0(v8, a3, a4, a5);
  os_unfair_lock_unlock(v9);
}

uint64_t sub_A2D6C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 41, 7);
}

void sub_A2D90(uint64_t a1)
{
  uint64_t v1;

  sub_A2D04(a1, *(os_unfair_lock_s **)(v1 + 16), *(const char **)(v1 + 24), *(_QWORD *)(v1 + 32), *(_BYTE *)(v1 + 40));
}

uint64_t sub_A2DA0(uint64_t *a1, const char *a2, uint64_t a3, char a4)
{
  uint64_t v4;
  const char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  os_signpost_id_t v41;
  void (*v42)(uint64_t, uint64_t);
  char *v43;
  unint64_t v44;
  uint64_t v45;
  int v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v54 = a2;
  v52 = type metadata accessor for OSSignpostError(0);
  v7 = *(const char **)(v52 - 8);
  __chkstk_darwin(v52);
  v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for OSSignpostID(0);
  v55 = *(_QWORD *)(v10 - 8);
  v11 = __chkstk_darwin(v10);
  v51 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v14 = (char *)&v43 - v13;
  v15 = type metadata accessor for OSSignposter(0);
  result = __chkstk_darwin(v15);
  v19 = (char *)&v43 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *a1;
  if (*a1)
  {
    v47 = v7;
    v48 = v17;
    v21 = a4;
    v49 = result;
    v50 = v10;
    v53 = v4;
    v22 = a1[2];
    v45 = a1[1];
    static OSSignposter.artwork.getter(result);
    swift_retain_n(v20, 2);
    v23 = swift_bridgeObjectRetain_n(v22, 2);
    v24 = OSSignposter.logHandle.getter(v23);
    v25 = OSSignpostIntervalState.signpostID.getter();
    v46 = static os_signpost_type_t.end.getter(v25);
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {
      swift_bridgeObjectRelease_n(v22, 2);
      swift_release_n(v20, 2);

      (*(void (**)(char *, uint64_t))(v55 + 8))(v14, v50);
      (*(void (**)(char *, uint64_t))(v48 + 8))(v19, v49);
      swift_bridgeObjectRelease();
      result = swift_release(v20);
LABEL_15:
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
      return result;
    }
    v43 = v19;
    v44 = v22;
    if ((v21 & 1) == 0)
    {
      if (v54)
      {
        v26 = v14;
        v27 = v52;
        v28 = v47;
LABEL_11:
        v31 = swift_retain();
        checkForErrorAndConsumeState(state:)(v31);
        swift_release(v20);
        if ((*((unsigned int (**)(char *, uint64_t))v28 + 11))(v9, v27) == enum case for OSSignpostError.doubleEnd(_:))
        {
          v32 = 0;
          v33 = 0;
          v47 = "[Error] Interval already ended";
        }
        else
        {
          (*((void (**)(char *, uint64_t))v28 + 1))(v9, v27);
          v47 = "[identifier=%{name=identifier}s] SUCCESS";
          v33 = 2;
          v32 = 1;
        }
        v34 = v50;
        v35 = v51;
        (*(void (**)(char *, char *, uint64_t))(v55 + 16))(v51, v26, v50);
        v36 = swift_slowAlloc(12, -1);
        v37 = swift_slowAlloc(32, -1);
        v52 = (uint64_t)v26;
        v38 = v37;
        v58 = v37;
        *(_BYTE *)v36 = v33;
        *(_BYTE *)(v36 + 1) = v32;
        *(_WORD *)(v36 + 2) = 2080;
        v39 = v44;
        swift_bridgeObjectRetain(v44);
        v56 = sub_69298(v45, v39, &v58);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, &v57);
        swift_release_n(v20, 2);
        v40 = swift_bridgeObjectRelease_n(v39, 3);
        v41 = OSSignpostID.rawValue.getter(v40);
        _os_signpost_emit_with_name_impl(&dword_0, v24, (os_signpost_type_t)v46, v41, v54, v47, (uint8_t *)v36, 0xCu);
        swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v38, -1, -1);
        swift_slowDealloc(v36, -1, -1);

        v42 = *(void (**)(uint64_t, uint64_t))(v55 + 8);
        v42(v52, v34);
        (*(void (**)(char *, uint64_t))(v48 + 8))(v43, v49);
        swift_bridgeObjectRelease();
        swift_release(v20);
        result = ((uint64_t (*)(char *, uint64_t))v42)(v35, v34);
        goto LABEL_15;
      }
LABEL_20:
      swift_bridgeObjectRelease_n(v44, 2);
      result = swift_release_n(v20, 2);
      __break(1u);
      return result;
    }
    if ((unint64_t)v54 >> 32)
    {
      __break(1u);
    }
    else
    {
      v27 = v52;
      v28 = v47;
      if (v54 >> 11 == 27)
      {
LABEL_19:
        __break(1u);
        goto LABEL_20;
      }
      if (v54 >> 16 <= 0x10)
      {
        v26 = v14;
        v29 = v53;
        v30 = sub_2441C8();
        v53 = v29;
        v54 = v30;
        goto LABEL_11;
      }
    }
    __break(1u);
    goto LABEL_19;
  }
  return result;
}

void sub_A31DC(uint64_t *a1, os_unfair_lock_s *a2, const char *a3, uint64_t a4, unsigned __int8 a5)
{
  uint64_t v8;
  uint64_t v9;
  os_unfair_lock_s *v10;

  v8 = *a1;
  v9 = (uint64_t)&a2[4];
  v10 = a2 + 10;
  os_unfair_lock_lock(a2 + 10);
  sub_A325C(v9, v8, a3, a4, a5);
  os_unfair_lock_unlock(v10);
}

void sub_A324C(uint64_t *a1)
{
  uint64_t v1;

  sub_A31DC(a1, *(os_unfair_lock_s **)(v1 + 16), *(const char **)(v1 + 24), *(_QWORD *)(v1 + 32), *(_BYTE *)(v1 + 40));
}

char *sub_A325C(uint64_t a1, uint64_t a2, const char *a3, uint64_t a4, unsigned __int8 a5)
{
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  char *result;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  char v42;
  char v43;
  _BYTE *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  os_signpost_id_t v49;
  void (*v50)(NSObject *, uint64_t);
  NSObject *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  char v56;
  char v57;
  _BYTE *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  os_signpost_id_t v63;
  uint64_t v64;
  void (*v65)(_BYTE *, uint64_t);
  _QWORD *v66;
  _BYTE v67[12];
  int v68;
  unint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  char *v73;
  _QWORD *v74;
  _BYTE *v75;
  uint64_t v76;
  const char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;

  v78 = (char *)a3;
  v7 = (const char *)type metadata accessor for OSSignpostError(0);
  v76 = *((_QWORD *)v7 - 1);
  v77 = v7;
  v8 = __chkstk_darwin(v7);
  v10 = &v67[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v8);
  v12 = &v67[-v11];
  v13 = type metadata accessor for OSSignpostID(0);
  v79 = *(_QWORD *)(v13 - 8);
  v80 = v13;
  v14 = __chkstk_darwin(v13);
  v16 = &v67[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = __chkstk_darwin(v14);
  v75 = &v67[-v18];
  __chkstk_darwin(v17);
  v20 = &v67[-v19];
  v21 = type metadata accessor for OSSignposter(0);
  v22 = __chkstk_darwin(v21);
  v24 = &v67[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
  result = (char *)__chkstk_darwin(v22);
  v29 = &v67[-v28];
  v30 = *v26;
  if (*v26)
  {
    v72 = v27;
    v73 = result;
    v71 = a5;
    v31 = v26[2];
    v70 = v26[1];
    v74 = v26;
    if (!a2)
      goto LABEL_7;
    static OSSignposter.artwork.getter(result);
    swift_retain_n(v30, 2);
    v32 = swift_bridgeObjectRetain_n(v31, 2);
    v29 = OSSignposter.logHandle.getter(v32);
    v33 = OSSignpostIntervalState.signpostID.getter();
    v12 = (_BYTE *)static os_signpost_type_t.end.getter(v33);
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {
LABEL_11:
      swift_bridgeObjectRelease_n(v31, 2);
      swift_release_n(v30, 2);

      (*(void (**)(NSObject *, uint64_t))(v79 + 8))(v16, v80);
      (*(void (**)(_BYTE *, char *))(v72 + 8))(v24, v73);
LABEL_13:
      swift_bridgeObjectRelease();
      result = (char *)swift_release(v30);
LABEL_30:
      v66 = v74;
      *v74 = 0;
      v66[1] = 0;
      v66[2] = 0;
      return result;
    }
    v68 = (int)v12;
    if ((v71 & 1) == 0)
    {
      if (!v78)
      {
        swift_bridgeObjectRelease_n(v31, 2);
        result = (char *)swift_release_n(v30, 2);
        __break(1u);
LABEL_7:
        static OSSignposter.artwork.getter(result);
        swift_retain_n(v30, 2);
        v34 = swift_bridgeObjectRetain_n(v31, 2);
        v16 = OSSignposter.logHandle.getter(v34);
        v35 = OSSignpostIntervalState.signpostID.getter();
        v24 = (_BYTE *)static os_signpost_type_t.end.getter(v35);
        if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
        {
          swift_bridgeObjectRelease_n(v31, 2);
          swift_release_n(v30, 2);

          (*(void (**)(_BYTE *, uint64_t))(v79 + 8))(v20, v80);
          (*(void (**)(NSObject *, char *))(v72 + 8))(v29, v73);
          goto LABEL_13;
        }
        v69 = v31;
        if ((v71 & 1) == 0)
        {
          v36 = v77;
          v37 = v76;
          if (!v78)
          {
            swift_bridgeObjectRelease_n(v69, 2);
            swift_release_n(v30, 2);
            __break(1u);
            goto LABEL_11;
          }
LABEL_26:
          v54 = swift_retain();
          checkForErrorAndConsumeState(state:)(v54);
          swift_release(v30);
          v55 = (*(uint64_t (**)(_BYTE *, const char *))(v37 + 88))(v12, v36);
          v68 = (int)v24;
          if (v55 == enum case for OSSignpostError.doubleEnd(_:))
          {
            v57 = 0;
            v56 = 0;
            v77 = "[Error] Interval already ended";
          }
          else
          {
            (*(void (**)(_BYTE *, const char *))(v37 + 8))(v12, v36);
            v77 = "[identifier=%{name=identifier}s] EMPTY";
            v56 = 2;
            v57 = 1;
          }
          v58 = v75;
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v79 + 16))(v75, v20, v80);
          v59 = swift_slowAlloc(12, -1);
          v60 = swift_slowAlloc(32, -1);
          v84 = v60;
          *(_BYTE *)v59 = v56;
          *(_BYTE *)(v59 + 1) = v57;
          *(_WORD *)(v59 + 2) = 2080;
          v61 = v69;
          swift_bridgeObjectRetain(v69);
          v82 = sub_69298(v70, v61, &v84);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83);
          swift_release_n(v30, 2);
          v62 = swift_bridgeObjectRelease_n(v61, 3);
          v63 = OSSignpostID.rawValue.getter(v62);
          _os_signpost_emit_with_name_impl(&dword_0, v16, (os_signpost_type_t)v68, v63, v78, v77, (uint8_t *)v59, 0xCu);
          swift_arrayDestroy(v60, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v60, -1, -1);
          swift_slowDealloc(v59, -1, -1);

          v64 = v80;
          v65 = *(void (**)(_BYTE *, uint64_t))(v79 + 8);
          v65(v20, v80);
          (*(void (**)(NSObject *, char *))(v72 + 8))(v29, v73);
          swift_bridgeObjectRelease();
          swift_release(v30);
          result = (char *)((uint64_t (*)(_BYTE *, uint64_t))v65)(v58, v64);
          goto LABEL_30;
        }
        v36 = v77;
        result = v78;
        v37 = v76;
        if (!((unint64_t)v78 >> 32))
        {
          if (v78 >> 11 == 27)
          {
LABEL_37:
            __break(1u);
            return result;
          }
          if (v78 >> 16 <= 0x10)
          {
            v53 = v81;
            v78 = sub_2441C8();
            v81 = v53;
            goto LABEL_26;
          }
          goto LABEL_35;
        }
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
LABEL_18:
      v69 = v31;
      v39 = swift_retain();
      checkForErrorAndConsumeState(state:)(v39);
      swift_release(v30);
      v41 = v76;
      v40 = v77;
      if ((*(unsigned int (**)(_BYTE *, const char *))(v76 + 88))(v10, v77) == enum case for OSSignpostError.doubleEnd(_:))
      {
        v42 = 0;
        v43 = 0;
        v77 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(_BYTE *, const char *))(v41 + 8))(v10, v40);
        v77 = "[identifier=%{name=identifier}s] FAILURE";
        v43 = 2;
        v42 = 1;
      }
      v44 = v75;
      (*(void (**)(_BYTE *, NSObject *, uint64_t))(v79 + 16))(v75, v16, v80);
      v45 = swift_slowAlloc(12, -1);
      v46 = swift_slowAlloc(32, -1);
      v84 = v46;
      *(_BYTE *)v45 = v43;
      *(_BYTE *)(v45 + 1) = v42;
      *(_WORD *)(v45 + 2) = 2080;
      v47 = v69;
      swift_bridgeObjectRetain(v69);
      v82 = sub_69298(v70, v47, &v84);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83);
      swift_release_n(v30, 2);
      v48 = swift_bridgeObjectRelease_n(v47, 3);
      v49 = OSSignpostID.rawValue.getter(v48);
      _os_signpost_emit_with_name_impl(&dword_0, v29, (os_signpost_type_t)v68, v49, v78, v77, (uint8_t *)v45, 0xCu);
      swift_arrayDestroy(v46, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v46, -1, -1);
      swift_slowDealloc(v45, -1, -1);

      v50 = *(void (**)(NSObject *, uint64_t))(v79 + 8);
      v51 = v16;
      v52 = v80;
      v50(v51, v80);
      (*(void (**)(_BYTE *, char *))(v72 + 8))(v24, v73);
      swift_bridgeObjectRelease();
      swift_release(v30);
      result = (char *)((uint64_t (*)(_BYTE *, uint64_t))v50)(v44, v52);
      goto LABEL_30;
    }
    result = v78;
    if ((unint64_t)v78 >> 32)
    {
      __break(1u);
    }
    else
    {
      if (v78 >> 11 == 27)
      {
LABEL_36:
        __break(1u);
        goto LABEL_37;
      }
      if (v78 >> 16 <= 0x10)
      {
        v38 = v81;
        v78 = sub_2441C8();
        v81 = v38;
        goto LABEL_18;
      }
    }
    __break(1u);
    goto LABEL_34;
  }
  return result;
}

void sub_A39AC(os_unfair_lock_s *a1, const char *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  os_unfair_lock_s *v8;

  v7 = (uint64_t *)&a1[4];
  v8 = a1 + 10;
  os_unfair_lock_lock(a1 + 10);
  sub_A3A64(v7, a2, a3, a4);
  os_unfair_lock_unlock(v8);
}

void sub_A3A14()
{
  uint64_t v0;

  sub_A39AC(*(os_unfair_lock_s **)(v0 + 16), *(const char **)(v0 + 24), *(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
}

uint64_t sub_A3A24(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B62A0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_A3A64(uint64_t *a1, const char *a2, uint64_t a3, char a4)
{
  uint64_t v4;
  const char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  os_signpost_id_t v41;
  void (*v42)(uint64_t, uint64_t);
  char *v43;
  unint64_t v44;
  uint64_t v45;
  int v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v54 = a2;
  v52 = type metadata accessor for OSSignpostError(0);
  v7 = *(const char **)(v52 - 8);
  __chkstk_darwin(v52);
  v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for OSSignpostID(0);
  v55 = *(_QWORD *)(v10 - 8);
  v11 = __chkstk_darwin(v10);
  v51 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v14 = (char *)&v43 - v13;
  v15 = type metadata accessor for OSSignposter(0);
  result = __chkstk_darwin(v15);
  v19 = (char *)&v43 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *a1;
  if (*a1)
  {
    v47 = v7;
    v48 = v17;
    v21 = a4;
    v49 = result;
    v50 = v10;
    v53 = v4;
    v22 = a1[2];
    v45 = a1[1];
    static OSSignposter.artwork.getter(result);
    swift_retain_n(v20, 2);
    v23 = swift_bridgeObjectRetain_n(v22, 2);
    v24 = OSSignposter.logHandle.getter(v23);
    v25 = OSSignpostIntervalState.signpostID.getter();
    v46 = static os_signpost_type_t.end.getter(v25);
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {
      swift_bridgeObjectRelease_n(v22, 2);
      swift_release_n(v20, 2);

      (*(void (**)(char *, uint64_t))(v55 + 8))(v14, v50);
      (*(void (**)(char *, uint64_t))(v48 + 8))(v19, v49);
      swift_bridgeObjectRelease();
      result = swift_release(v20);
LABEL_15:
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
      return result;
    }
    v43 = v19;
    v44 = v22;
    if ((v21 & 1) == 0)
    {
      if (v54)
      {
        v26 = v14;
        v27 = v52;
        v28 = v47;
LABEL_11:
        v31 = swift_retain();
        checkForErrorAndConsumeState(state:)(v31);
        swift_release(v20);
        if ((*((unsigned int (**)(char *, uint64_t))v28 + 11))(v9, v27) == enum case for OSSignpostError.doubleEnd(_:))
        {
          v32 = 0;
          v33 = 0;
          v47 = "[Error] Interval already ended";
        }
        else
        {
          (*((void (**)(char *, uint64_t))v28 + 1))(v9, v27);
          v47 = "[identifier=%{name=identifier}s] CANCEL";
          v33 = 2;
          v32 = 1;
        }
        v34 = v50;
        v35 = v51;
        (*(void (**)(char *, char *, uint64_t))(v55 + 16))(v51, v26, v50);
        v36 = swift_slowAlloc(12, -1);
        v37 = swift_slowAlloc(32, -1);
        v52 = (uint64_t)v26;
        v38 = v37;
        v58 = v37;
        *(_BYTE *)v36 = v33;
        *(_BYTE *)(v36 + 1) = v32;
        *(_WORD *)(v36 + 2) = 2080;
        v39 = v44;
        swift_bridgeObjectRetain(v44);
        v56 = sub_69298(v45, v39, &v58);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, &v57);
        swift_release_n(v20, 2);
        v40 = swift_bridgeObjectRelease_n(v39, 3);
        v41 = OSSignpostID.rawValue.getter(v40);
        _os_signpost_emit_with_name_impl(&dword_0, v24, (os_signpost_type_t)v46, v41, v54, v47, (uint8_t *)v36, 0xCu);
        swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v38, -1, -1);
        swift_slowDealloc(v36, -1, -1);

        v42 = *(void (**)(uint64_t, uint64_t))(v55 + 8);
        v42(v52, v34);
        (*(void (**)(char *, uint64_t))(v48 + 8))(v43, v49);
        swift_bridgeObjectRelease();
        swift_release(v20);
        result = ((uint64_t (*)(char *, uint64_t))v42)(v35, v34);
        goto LABEL_15;
      }
LABEL_20:
      swift_bridgeObjectRelease_n(v44, 2);
      result = swift_release_n(v20, 2);
      __break(1u);
      return result;
    }
    if ((unint64_t)v54 >> 32)
    {
      __break(1u);
    }
    else
    {
      v27 = v52;
      v28 = v47;
      if (v54 >> 11 == 27)
      {
LABEL_19:
        __break(1u);
        goto LABEL_20;
      }
      if (v54 >> 16 <= 0x10)
      {
        v26 = v14;
        v29 = v53;
        v30 = sub_2441C8();
        v53 = v29;
        v54 = v30;
        goto LABEL_11;
      }
    }
    __break(1u);
    goto LABEL_19;
  }
  return result;
}

uint64_t ArtworkLoader.prefetch(artwork:)()
{
  uint64_t v0;
  Swift::OpaquePointer v1;
  uint64_t v2;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BC590);
  v1._rawValue = (void *)swift_allocObject(v0, 40, 7);
  *((_OWORD *)v1._rawValue + 1) = xmmword_2EF430;
  v2 = ArtworkRequest.artworkLoaderConfig.getter();
  *((_QWORD *)v1._rawValue + 4) = v2;
  specialized Array._endMutation()(v2);
  ArtworkLoader.prefetchArtwork(using:)(v1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_A3F20(uint64_t a1)
{
  return ArtworkLoader.load(artwork:)(a1);
}

uint64_t sub_A3F40()
{
  uint64_t v0;
  Swift::OpaquePointer v1;
  uint64_t v2;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BC590);
  v1._rawValue = (void *)swift_allocObject(v0, 40, 7);
  *((_OWORD *)v1._rawValue + 1) = xmmword_2EF430;
  v2 = ArtworkRequest.artworkLoaderConfig.getter();
  *((_QWORD *)v1._rawValue + 4) = v2;
  specialized Array._endMutation()(v2);
  ArtworkLoader.prefetchArtwork(using:)(v1);
  return swift_bridgeObjectRelease();
}

_QWORD *sub_A3FD0@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = result[1];
  *a2 = *result;
  a2[1] = v2;
  return result;
}

unint64_t sub_A3FE0()
{
  unint64_t result;

  result = qword_3B62B0;
  if (!qword_3B62B0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for NSUserDefaults.Keys);
    atomic_store(result, (unint64_t *)&qword_3B62B0);
  }
  return result;
}

Swift::Int sub_A4024()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[9];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)(v4);
  swift_bridgeObjectRetain(v2);
  String.hash(into:)(v4, v1, v2);
  swift_bridgeObjectRelease(v2);
  return Hasher._finalize()();
}

uint64_t sub_A407C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v4 = *v1;
  v3 = v1[1];
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(a1, v4, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_A40C0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[9];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)(v4);
  swift_bridgeObjectRetain(v2);
  String.hash(into:)(v4, v1, v2);
  swift_bridgeObjectRelease(v2);
  return Hasher._finalize()();
}

ValueMetadata *type metadata accessor for NSUserDefaults.Keys()
{
  return &type metadata for NSUserDefaults.Keys;
}

uint64_t LibraryPodcastUnfollowAction.podcastUuid.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit28LibraryPodcastUnfollowAction_podcastUuid);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit28LibraryPodcastUnfollowAction_podcastUuid + 8));
  return v1;
}

uint64_t LibraryPodcastUnfollowAction.source.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_A4170(v1 + OBJC_IVAR____TtC8ShelfKit28LibraryPodcastUnfollowAction_source, a1);
}

uint64_t sub_A4170(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B62B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t LibraryPodcastUnfollowAction.__allocating_init(podcastUuid:source:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;

  v4 = v3;
  v28 = a3;
  v29 = a2;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ActionMetrics(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v15);
  v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v19 = (_QWORD *)(v18 + OBJC_IVAR____TtC8ShelfKit28LibraryPodcastUnfollowAction_podcastUuid);
  v20 = v29;
  *v19 = a1;
  v19[1] = v20;
  sub_A4170(a3, v18 + OBJC_IVAR____TtC8ShelfKit28LibraryPodcastUnfollowAction_source);
  v21 = type metadata accessor for ImpressionMetrics(0);
  v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v17, 1, 1, v21);
  v23 = static ActionMetrics.notInstrumented.getter(v22);
  UUID.init()(v23);
  v24 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
  v26 = v25;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  *(_QWORD *)(v18 + 16) = v24;
  *(_QWORD *)(v18 + 24) = v26;
  *(_QWORD *)(v18 + 32) = 0;
  *(_QWORD *)(v18 + 40) = 0;
  *(_BYTE *)(v18 + 48) = 32;
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v18 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v14, v11);
  sub_23AB8((uint64_t)v17, v18 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics);
  sub_1459C(v28, &qword_3B62B8);
  return v18;
}

uint64_t LibraryPodcastUnfollowAction.init(podcastUuid:source:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;

  v4 = v3;
  v27 = a2;
  v28 = a3;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ActionMetrics(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v15);
  v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = (_QWORD *)(v4 + OBJC_IVAR____TtC8ShelfKit28LibraryPodcastUnfollowAction_podcastUuid);
  v19 = v27;
  *v18 = a1;
  v18[1] = v19;
  sub_A4170(a3, v4 + OBJC_IVAR____TtC8ShelfKit28LibraryPodcastUnfollowAction_source);
  v20 = type metadata accessor for ImpressionMetrics(0);
  v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v17, 1, 1, v20);
  v22 = static ActionMetrics.notInstrumented.getter(v21);
  UUID.init()(v22);
  v23 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
  v25 = v24;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  *(_QWORD *)(v4 + 16) = v23;
  *(_QWORD *)(v4 + 24) = v25;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = 0;
  *(_BYTE *)(v4 + 48) = 32;
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v4 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v14, v11);
  sub_23AB8((uint64_t)v17, v4 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics);
  sub_1459C(v28, &qword_3B62B8);
  return v4;
}

void LibraryPodcastUnfollowAction.init(deserializing:using:)()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000033, 0x800000000030A500, "ShelfKit/LibraryPodcastUnfollowAction.swift", 43, 2, 25, 0);
  __break(1u);
}

void LibraryPodcastUnfollowAction.init(uniqueId:title:presentationStyle:actionMetrics:impressionMetrics:)()
{
  _swift_stdlib_reportUnimplementedInitializer("ShelfKit.LibraryPodcastUnfollowAction", 37, "init(uniqueId:title:presentationStyle:actionMetrics:impressionMetrics:)", 71, 0);
  __break(1u);
}

uint64_t sub_A45E8()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return sub_1459C(v0 + OBJC_IVAR____TtC8ShelfKit28LibraryPodcastUnfollowAction_source, &qword_3B62B8);
}

uint64_t LibraryPodcastUnfollowAction.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics;
  v2 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_1459C(v0 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics, (uint64_t *)&unk_3B8790);
  swift_bridgeObjectRelease();
  sub_1459C(v0 + OBJC_IVAR____TtC8ShelfKit28LibraryPodcastUnfollowAction_source, &qword_3B62B8);
  return v0;
}

uint64_t LibraryPodcastUnfollowAction.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics;
  v2 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_1459C(v0 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics, (uint64_t *)&unk_3B8790);
  swift_bridgeObjectRelease();
  sub_1459C(v0 + OBJC_IVAR____TtC8ShelfKit28LibraryPodcastUnfollowAction_source, &qword_3B62B8);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_A4770()
{
  return type metadata accessor for LibraryPodcastUnfollowAction(0);
}

uint64_t type metadata accessor for LibraryPodcastUnfollowAction(uint64_t a1)
{
  uint64_t result;

  result = qword_3B62E8;
  if (!qword_3B62E8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LibraryPodcastUnfollowAction);
  return result;
}

void sub_A47B4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_2F1B10;
  sub_A4840(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 160);
  }
}

uint64_t method lookup function for LibraryPodcastUnfollowAction(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for LibraryPodcastUnfollowAction);
}

uint64_t dispatch thunk of LibraryPodcastUnfollowAction.__allocating_init(podcastUuid:source:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 176))();
}

void sub_A4840(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_3B62F8)
  {
    v2 = type metadata accessor for PresentationSource(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_3B62F8);
  }
}

uint64_t ModernStationDetailPresenter.isEditing.getter()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 16, v2, 0, 0);
  return swift_retain(*(_QWORD *)(v0 + 16));
}

uint64_t ModernStationDetailPresenter.isEditing.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + 16, v5, 1, 0);
  v3 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v1 + 16) = a1;
  return swift_release(v3);
}

uint64_t (*ModernStationDetailPresenter.isEditing.modify(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + 16, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t ModernStationDetailPresenter.reorderingExtension.getter@<X0>(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  void (__swiftcall *v10)();
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = v1;
  v5 = v2[3];
  v4 = v2[4];
  v6 = v2[5];
  v7 = v2[6];
  v8 = (uint64_t (*)(uint64_t, uint64_t))v5;
  v9 = v4;
  v10 = (void (__swiftcall *)())v6;
  v11 = v2[7];
  v12 = v2[8];
  v13 = v7;
  v14 = (uint64_t (*)(uint64_t, uint64_t))v11;
  v15 = v12;
  if (v5 == 1)
  {
    v24 = v2[5];
    v25 = v2[4];
    v23 = v2[6];
    v9 = swift_allocObject(&unk_37DCB8, 24, 7);
    swift_weakInit(v9 + 16);
    v15 = swift_allocObject(&unk_37DCB8, 24, 7);
    swift_weakInit(v15 + 16);
    v21 = v2[4];
    v22 = v2[3];
    v19 = v2[6];
    v20 = v2[5];
    v17 = v2[8];
    v18 = v2[7];
    v8 = sub_A4BE8;
    v2[3] = sub_A4BE8;
    v2[4] = v9;
    v10 = FindOrCreateEpisodeOfferContentIDsIntentsIntentImplementation.init();
    v2[5] = FindOrCreateEpisodeOfferContentIDsIntentsIntentImplementation.init();
    v2[6] = 0;
    v14 = sub_A4C60;
    v2[7] = sub_A4C60;
    v2[8] = v15;
    swift_retain();
    swift_retain();
    sub_3AEF8(v22, v21, v20, v19, v18, v17);
    v7 = v23;
    v6 = v24;
    v4 = v25;
    v13 = 0;
  }
  *a1 = v8;
  a1[1] = (uint64_t (*)(uint64_t, uint64_t))v9;
  a1[2] = (uint64_t (*)(uint64_t, uint64_t))v10;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))v13;
  a1[4] = v14;
  a1[5] = (uint64_t (*)(uint64_t, uint64_t))v15;
  return sub_3AF44(v5, v4, v6, v7, v11, v12);
}

uint64_t sub_A4A98()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_A4ABC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  v6 = a1[4];
  v7 = a1[5];
  v8 = *(_QWORD **)a2;
  v9 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v10 = *(_QWORD *)(*(_QWORD *)a2 + 32);
  v11 = *(_QWORD *)(*(_QWORD *)a2 + 40);
  v12 = *(_QWORD *)(*(_QWORD *)a2 + 48);
  v13 = *(_QWORD *)(*(_QWORD *)a2 + 56);
  v14 = *(_QWORD *)(*(_QWORD *)a2 + 64);
  v8[3] = *a1;
  v8[4] = v3;
  v8[5] = v4;
  v8[6] = v5;
  v8[7] = v6;
  v8[8] = v7;
  sub_3AF54(v2, v3, v4, v5, v6, v7);
  return sub_3AEF8(v9, v10, v11, v12, v13, v14);
}

uint64_t ModernStationDetailPresenter.reorderingExtension.setter(_OWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = v1[3];
  v2 = v1[4];
  v4 = a1[1];
  *(_OWORD *)(v1 + 3) = *a1;
  v5 = v1[5];
  v6 = v1[6];
  v7 = v1[7];
  v8 = v1[8];
  *(_OWORD *)(v1 + 5) = v4;
  *(_OWORD *)(v1 + 7) = a1[2];
  return sub_3AEF8(v3, v2, v5, v6, v7, v8);
}

uint64_t sub_A4B58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  int v6;
  _BYTE v7[24];

  v3 = a3 + 16;
  swift_beginAccess(a3 + 16, v7, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v5 = *(_QWORD *)(result + OBJC_IVAR____TtC8ShelfKit28ModernStationDetailPresenter_station);
    if (*(_BYTE *)(v5 + OBJC_IVAR____TtC8ShelfKit13StationDetail_grouped) == 1)
    {
      swift_release(result);
      return 0;
    }
    else
    {
      v6 = *(unsigned __int8 *)(v5 + OBJC_IVAR____TtC8ShelfKit13StationDetail_sortOrder);
      swift_release(result);
      return v6 == 2;
    }
  }
  return result;
}

uint64_t sub_A4BE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_A4B58(a1, a2, v2);
}

uint64_t sub_A4BF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  _BYTE v8[24];

  v5 = a3 + 16;
  swift_beginAccess(a3 + 16, v8, 0, 0);
  result = swift_weakLoadStrong(v5);
  if (result)
  {
    v7 = result;
    sub_A4C68(a1, a2);
    return swift_release(v7);
  }
  return result;
}

uint64_t sub_A4C60(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_A4BF0(a1, a2, v2);
}

void sub_A4C68(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t ObjectType;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[40];
  _QWORD v21[3];
  uint64_t v22;
  uint64_t v23;

  if ((*(_BYTE *)(*(_QWORD *)(v2 + OBJC_IVAR____TtC8ShelfKit28ModernStationDetailPresenter_station)
                 + OBJC_IVAR____TtC8ShelfKit13StationDetail_grouped) & 1) == 0)
  {
    v3 = v2;
    v4 = *(_QWORD *)(a2 + 16);
    if (v4)
    {
      v5 = a2 + 32;
      swift_bridgeObjectRetain(a2);
      v6 = _swiftEmptyArrayStorage;
      do
      {
        sub_150C8(v5, (uint64_t)v21);
        sub_150C8((uint64_t)v21, (uint64_t)v20);
        v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0A50);
        v8 = type metadata accessor for LibraryEpisodeLockup(0);
        if ((swift_dynamicCast(&v19, v20, v7, v8, 6) & 1) != 0)
        {
          v9 = v19;
          v11 = *(_QWORD *)(v19 + OBJC_IVAR____TtC8ShelfKit20LibraryEpisodeLockup_uuid);
          v10 = *(_QWORD *)(v19 + OBJC_IVAR____TtC8ShelfKit20LibraryEpisodeLockup_uuid + 8);
          swift_bridgeObjectRetain(v10);
          swift_release(v9);
          __swift_destroy_boxed_opaque_existential_1(v21);
          if ((swift_isUniquelyReferenced_nonNull_native(v6) & 1) == 0)
            v6 = sub_10644(0, v6[2] + 1, 1, v6);
          v13 = v6[2];
          v12 = v6[3];
          if (v13 >= v12 >> 1)
            v6 = sub_10644((_QWORD *)(v12 > 1), v13 + 1, 1, v6);
          v6[2] = v13 + 1;
          v14 = &v6[2 * v13];
          v14[4] = v11;
          v14[5] = v10;
        }
        else
        {
          __swift_destroy_boxed_opaque_existential_1(v21);
        }
        v5 += 40;
        --v4;
      }
      while (v4);
      swift_bridgeObjectRelease();
    }
    else
    {
      v6 = _swiftEmptyArrayStorage;
    }
    v15 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8ShelfKit28ModernStationDetailPresenter_libraryDataProvider + 8);
    ObjectType = swift_getObjectType();
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v15 + 16))(v21, ObjectType, v15);
    v17 = v22;
    v18 = v23;
    __swift_project_boxed_opaque_existential_1(v21, v22);
    (*(void (**)(_QWORD, _QWORD, _QWORD *, uint64_t, uint64_t))(v18 + 240))(*(_QWORD *)(v3 + OBJC_IVAR____TtC8ShelfKit28ModernStationDetailPresenter_stationUuid), *(_QWORD *)(v3 + OBJC_IVAR____TtC8ShelfKit28ModernStationDetailPresenter_stationUuid + 8), v6, v17, v18);
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1(v21);
  }
}

void (*ModernStationDetailPresenter.reorderingExtension.modify(uint64_t (***a1)(uint64_t a1, uint64_t a2)))(uint64_t **a1, char a2)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t (**v3)(uint64_t, uint64_t);

  v3 = (uint64_t (**)(uint64_t, uint64_t))malloc(0x38uLL);
  *a1 = v3;
  v3[6] = v1;
  ModernStationDetailPresenter.reorderingExtension.getter(v3);
  return sub_A4EC0;
}

void sub_A4EC0(uint64_t **a1, char a2)
{
  uint64_t *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = *a1;
  v4 = (*a1)[5];
  v5 = (_QWORD *)(*a1)[6];
  v6 = **a1;
  v7 = v3[1];
  v8 = v3[2];
  v9 = v3[3];
  v10 = v3[4];
  v11 = v5[3];
  v12 = v5[4];
  v13 = v5[5];
  v14 = v5[6];
  v15 = v5[7];
  v16 = v5[8];
  v5[3] = v6;
  v5[4] = v7;
  v5[5] = v8;
  v5[6] = v9;
  v5[7] = v10;
  v5[8] = v4;
  if ((a2 & 1) != 0)
  {
    sub_3AF54(v6, v7, v8, v9, v10, v4);
    sub_3AEF8(v11, v12, v13, v14, v15, v16);
    sub_3AF08(*v3, v3[1], v3[2], v3[3], v3[4], v3[5]);
  }
  else
  {
    sub_3AEF8(v11, v12, v13, v14, v15, v16);
  }
  free(v3);
}

uint64_t (*ModernStationDetailPresenter.pageContent.modify(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + 72, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t ModernStationDetailPresenter.headerButtonItems.getter()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 80, v2, 0, 0);
  return swift_retain(*(_QWORD *)(v0 + 80));
}

uint64_t ModernStationDetailPresenter.headerButtonItems.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + 80, v5, 1, 0);
  v3 = *(_QWORD *)(v1 + 80);
  *(_QWORD *)(v1 + 80) = a1;
  return swift_release(v3);
}

uint64_t ModernStationDetailPresenter.appEntityAnnotation.getter()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + 88));
}

uint64_t ModernStationDetailPresenter.pageHeader.getter()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 96, v2, 0, 0);
  return swift_retain(*(_QWORD *)(v0 + 96));
}

uint64_t ModernStationDetailPresenter.pageHeader.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + 96, v5, 1, 0);
  v3 = *(_QWORD *)(v1 + 96);
  *(_QWORD *)(v1 + 96) = a1;
  return swift_release(v3);
}

uint64_t (*ModernStationDetailPresenter.pageHeader.modify(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + 96, a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t ModernStationDetailPresenter.dismiss.getter()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 104, v2, 0, 0);
  return swift_retain(*(_QWORD *)(v0 + 104));
}

uint64_t ModernStationDetailPresenter.dismiss.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + 104, v5, 1, 0);
  v3 = *(_QWORD *)(v1 + 104);
  *(_QWORD *)(v1 + 104) = a1;
  return swift_release(v3);
}

uint64_t (*ModernStationDetailPresenter.dismiss.modify(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + 104, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t ModernStationDetailPresenter.refreshControls.getter()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + 120));
}

uint64_t ModernStationDetailPresenter.paginatedPublisher.getter()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 128, v2, 0, 0);
  return swift_retain(*(_QWORD *)(v0 + 128));
}

uint64_t ModernStationDetailPresenter.paginatedPublisher.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + 128, v5, 1, 0);
  v3 = *(_QWORD *)(v1 + 128);
  *(_QWORD *)(v1 + 128) = a1;
  return swift_release(v3);
}

uint64_t (*ModernStationDetailPresenter.paginatedPublisher.modify(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + 128, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t ModernStationDetailPresenter.interactionContextPage.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  v3 = v1 + OBJC_IVAR____TtC8ShelfKit28ModernStationDetailPresenter_interactionContextPage;
  swift_beginAccess(v3, v5, 0, 0);
  return sub_14510(v3, a1, (uint64_t (*)(_QWORD))&type metadata accessor for InteractionContext.Page);
}

uint64_t ModernStationDetailPresenter.interactionContextPage.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  v3 = v1 + OBJC_IVAR____TtC8ShelfKit28ModernStationDetailPresenter_interactionContextPage;
  swift_beginAccess(v3, v5, 33, 0);
  sub_A5308(a1, v3);
  return swift_endAccess(v5);
}

uint64_t sub_A5308(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for InteractionContext.Page(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*ModernStationDetailPresenter.interactionContextPage.modify(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC8ShelfKit28ModernStationDetailPresenter_interactionContextPage, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t ModernStationDetailPresenter.Configuration.station.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_release(*v1);
  *v1 = a1;
  return result;
}

uint64_t ShowPageHeaderAndFooterShelvesIntent.skipCache.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t ModernStationDetailPresenter.Configuration.isMacIdiom.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 8) = result;
  return result;
}

void (__swiftcall *ModernStationDetailPresenter.Configuration.isMacIdiom.modify())()
{
  return FindOrCreateEpisodeOfferContentIDsIntentsIntentImplementation.init();
}

uint64_t EpisodePageFooterShelvesIntent.init(adamID:isSubscribed:)@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  *(_QWORD *)a3 = result;
  *(_BYTE *)(a3 + 8) = a2;
  return result;
}

uint64_t ModernStationDetailPresenter.__allocating_init(asPartOf:with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  ModernStationDetailPresenter.init(asPartOf:with:)(a1, a2);
  return v5;
}

uint64_t ModernStationDetailPresenter.init(asPartOf:with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v29[2];
  int v30;
  char v31;
  __int128 v32;
  int v33;
  char v34;

  v3 = v2;
  v6 = type metadata accessor for PageContent(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v29[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD **)a2;
  v10 = *(_BYTE *)(a2 + 8);
  LOBYTE(v32) = 0;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B20D0);
  swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
  *(_QWORD *)(v3 + 16) = CurrentValueSubject.init(_:)(&v32);
  *(_QWORD *)(v3 + 24) = 1;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_QWORD *)(v3 + 64) = 0;
  *v8 = 0;
  swift_storeEnumTagMultiPayload(v8, v6, 0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B27B0);
  swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  *(_QWORD *)(v3 + 72) = CurrentValueSubject.init(_:)(v8);
  *(_QWORD *)&v32 = _swiftEmptyArrayStorage;
  v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8780);
  swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  *(_QWORD *)(v3 + 80) = CurrentValueSubject.init(_:)(&v32);
  *(_QWORD *)&v32 = 0;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B63D0);
  swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  *(_QWORD *)(v3 + 88) = CurrentValueSubject.init(_:)(&v32);
  v32 = 0uLL;
  v33 = 0;
  v34 = 5;
  v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8770);
  swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
  *(_QWORD *)(v3 + 96) = CurrentValueSubject.init(_:)(&v32);
  LOBYTE(v32) = 0;
  swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
  *(_QWORD *)(v3 + 104) = CurrentValueSubject.init(_:)(&v32);
  LOBYTE(v32) = 1;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2770);
  swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
  *(_QWORD *)(v3 + 120) = CurrentValueSubject.init(_:)(&v32);
  *(_QWORD *)(v3 + 128) = 0;
  v17 = v3 + OBJC_IVAR____TtC8ShelfKit28ModernStationDetailPresenter_interactionContextPage;
  *(_BYTE *)(v3 + OBJC_IVAR____TtC8ShelfKit28ModernStationDetailPresenter_interactionContextPage) = 2;
  v18 = type metadata accessor for InteractionContext.Page(0);
  swift_storeEnumTagMultiPayload(v17, v18, 4);
  *(_QWORD *)(v3 + OBJC_IVAR____TtC8ShelfKit28ModernStationDetailPresenter_subscriptions) = _swiftEmptyArrayStorage;
  *(_QWORD *)(v3 + OBJC_IVAR____TtC8ShelfKit28ModernStationDetailPresenter_objectGraph) = a1;
  v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3BF760);
  swift_retain();
  BaseObjectGraph.inject<A>(_:)(&v32, v19, v19);
  *(_OWORD *)(v3 + OBJC_IVAR____TtC8ShelfKit28ModernStationDetailPresenter_libraryDataProvider) = v32;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BC3F0);
  BaseObjectGraph.inject<A>(_:)(&v32, v20, v20);
  sub_F4D8(&v32, v3 + OBJC_IVAR____TtC8ShelfKit28ModernStationDetailPresenter_libraryActionController);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BC400);
  BaseObjectGraph.inject<A>(_:)(&v32, v21, v21);
  sub_F4D8(&v32, v3 + OBJC_IVAR____TtC8ShelfKit28ModernStationDetailPresenter_episodeController);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BE9F0);
  BaseObjectGraph.inject<A>(_:)(&v32, v22, v22);
  sub_F4D8(&v32, v3 + OBJC_IVAR____TtC8ShelfKit28ModernStationDetailPresenter_storeDataProvider);
  v23 = v9[3];
  v24 = (_QWORD *)(v3 + OBJC_IVAR____TtC8ShelfKit28ModernStationDetailPresenter_stationUuid);
  *v24 = v9[2];
  v24[1] = v23;
  *(_QWORD *)(v3 + OBJC_IVAR____TtC8ShelfKit28ModernStationDetailPresenter_station) = v9;
  swift_beginAccess(v3 + 96, &v32, 0, 0);
  v25 = *(_QWORD *)(v3 + 96);
  v26 = v9[5];
  v29[0] = v9[4];
  v29[1] = v26;
  v30 = 0;
  v31 = 3;
  swift_bridgeObjectRetain(v23);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain(v26);
  CurrentValueSubject.value.setter(v29);
  swift_release(v9);
  swift_release(v25);
  swift_release(a1);
  *(_BYTE *)(v3 + 112) = v10;
  return v3;
}

uint64_t sub_A57C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD v55[3];
  uint64_t v56[3];

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B6638);
  v49 = *(_QWORD *)(v2 - 8);
  v50 = v2;
  __chkstk_darwin(v2);
  v48 = (char *)&v45 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B6640);
  v52 = *(_QWORD *)(v4 - 8);
  v53 = v4;
  __chkstk_darwin(v4);
  v51 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B6648);
  v45 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = v0 + OBJC_IVAR____TtC8ShelfKit28ModernStationDetailPresenter_libraryDataProvider;
  v11 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit28ModernStationDetailPresenter_libraryDataProvider);
  v10 = *(_QWORD *)(v9 + 8);
  ObjectType = swift_getObjectType();
  v13 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit28ModernStationDetailPresenter_stationUuid);
  v14 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit28ModernStationDetailPresenter_stationUuid + 8);
  v15 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 400);
  v46 = ObjectType;
  v47 = v11;
  v56[0] = v15(v13, v14);
  v16 = swift_allocObject(&unk_37DCB8, 24, 7);
  swift_weakInit(v16 + 16);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B6650);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B6658);
  v19 = sub_32914(&qword_3B6660, &qword_3B6650, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v20 = sub_32914(&qword_3B6668, &qword_3B6658, (uint64_t)&protocol conformance descriptor for Empty<A, B>);
  Publisher.catch<A>(_:)(sub_A8D0C, v16, v17, v18, v19, v20);
  swift_release(v16);
  swift_release(v56[0]);
  v21 = sub_32914(&qword_3B6670, &qword_3B6648, (uint64_t)&protocol conformance descriptor for Publishers.Catch<A, B>);
  v22 = Publisher.bufferedMulticast()(v6, v21);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v8, v6);
  v56[0] = v22;
  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B6678);
  v24 = sub_32914(&qword_3B6680, &qword_3B6678, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v25 = Publisher.eraseToAnyPublisher()(v23, v24);
  swift_release(v22);
  if (qword_3B02D0 != -1)
    swift_once(&qword_3B02D0, sub_2B85D0);
  v26 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 408))(v25, qword_3C6D90, v46, v10);
  swift_beginAccess(v1 + 128, v56, 1, 0);
  v27 = *(_QWORD *)(v1 + 128);
  *(_QWORD *)(v1 + 128) = v26;
  swift_retain();
  swift_release(v27);
  v55[0] = v25;
  v28 = swift_allocObject(&unk_37DCB8, 24, 7);
  swift_weakInit(v28 + 16);
  v29 = Publisher<>.sink(receiveValue:)(sub_A8D14, v28, v23, v24);
  swift_release(v28);
  v30 = v1 + OBJC_IVAR____TtC8ShelfKit28ModernStationDetailPresenter_subscriptions;
  swift_beginAccess(v1 + OBJC_IVAR____TtC8ShelfKit28ModernStationDetailPresenter_subscriptions, v55, 33, 0);
  v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2088);
  v32 = sub_32914(&qword_3B2090, &qword_3B2088, (uint64_t)&protocol conformance descriptor for [A]);
  AnyCancellable.store<A>(in:)(v30, v31, v32);
  swift_endAccess(v55);
  swift_release(v29);
  v54 = v25;
  v55[0] = v26;
  swift_retain();
  swift_retain();
  v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2600);
  v34 = sub_32914(&qword_3B4C18, &qword_3B2600, (uint64_t)&protocol conformance descriptor for AnyPaginatedPublisher<A, B>);
  v35 = v48;
  Publishers.CombineLatest.init(_:_:)(v55, &v54, v33, v23, v34, v24);
  v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B6688);
  v37 = sub_32914(&qword_3B6690, &qword_3B6638, (uint64_t)&protocol conformance descriptor for Publishers.CombineLatest<A, B>);
  v38 = v50;
  v39 = v51;
  Publisher.map<A>(_:)(sub_A66EC, 0, v50, v36, v37);
  (*(void (**)(char *, uint64_t))(v49 + 8))(v35, v38);
  v40 = swift_allocObject(&unk_37DCB8, 24, 7);
  swift_weakInit(v40 + 16);
  v41 = sub_32914(&qword_3B6698, &qword_3B6640, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v42 = v53;
  v43 = Publisher<>.sink(receiveValue:)(sub_A8D1C, v40, v53, v41);
  swift_release(v40);
  (*(void (**)(char *, uint64_t))(v52 + 8))(v39, v42);
  swift_beginAccess(v30, v55, 33, 0);
  AnyCancellable.store<A>(in:)(v30, v31, v32);
  swift_endAccess(v55);
  swift_release(v25);
  swift_release(v26);
  return swift_release(v43);
}

uint64_t sub_A5D14(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Strong;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[24];
  _BYTE v9[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v9, 0, 0);
  Strong = swift_weakLoadStrong(v2);
  if (Strong)
  {
    v4 = Strong;
    swift_beginAccess(Strong + 104, v8, 0, 0);
    v5 = *(_QWORD *)(v4 + 104);
    swift_retain();
    CurrentValueSubject.send(_:)();
    swift_release(v4);
    swift_release(v5);
  }
  v6 = type metadata accessor for StationDetail(0);
  return Empty.init(completeImmediately:)(1, v6, &type metadata for Never, &protocol witness table for Never);
}

uint64_t sub_A5DD0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];
  _BYTE v13[24];

  v4 = type metadata accessor for InteractionContext.Page(0);
  __chkstk_darwin(v4);
  v6 = &v12[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = *a1;
  a2 += 16;
  swift_beginAccess(a2, v13, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (result)
  {
    v9 = result;
    v10 = *(_QWORD *)(result + OBJC_IVAR____TtC8ShelfKit28ModernStationDetailPresenter_station);
    *(_QWORD *)(result + OBJC_IVAR____TtC8ShelfKit28ModernStationDetailPresenter_station) = v7;
    swift_retain_n(v7, 3);
    swift_release(v10);
    sub_A68A4();
    swift_release(v7);
    LOBYTE(v10) = *(_BYTE *)(v7 + OBJC_IVAR____TtC8ShelfKit13StationDetail_hidePlayedEpisodes);
    swift_release(v7);
    *v6 = v10;
    swift_storeEnumTagMultiPayload(v6, v4, 4);
    v11 = v9 + OBJC_IVAR____TtC8ShelfKit28ModernStationDetailPresenter_interactionContextPage;
    swift_beginAccess(v9 + OBJC_IVAR____TtC8ShelfKit28ModernStationDetailPresenter_interactionContextPage, v12, 33, 0);
    sub_A5308((uint64_t)v6, v11);
    swift_endAccess(v12);
    return swift_release(v9);
  }
  return result;
}

uint64_t sub_A5F04@<X0>(_QWORD *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  void *v42;
  void *v43;
  Swift::String v44;
  Swift::String v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  char *v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  char v91;
  unint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  char v99;

  v78 = a1;
  v3 = type metadata accessor for ScalarDictionary(0);
  v82 = *(_QWORD *)(v3 - 8);
  v83 = v3;
  v4 = __chkstk_darwin(v3);
  v80 = (char *)&v73 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v79 = (char *)&v73 - v6;
  v90 = type metadata accessor for PageMetrics(0);
  v88 = *(_QWORD *)(v90 - 8);
  __chkstk_darwin(v90);
  v87 = (char *)&v73 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = type metadata accessor for PageID(0);
  v84 = *(_QWORD *)(v86 - 8);
  __chkstk_darwin(v86);
  v81 = (char *)&v73 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = type metadata accessor for ModernPage(0);
  __chkstk_darwin(v85);
  v89 = (char *)&v73 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = type metadata accessor for ModernShelf(0);
  v10 = *(_QWORD *)(v76 - 8);
  __chkstk_darwin(v76);
  v77 = (uint64_t *)((char *)&v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B35D0);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v73 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v13);
  v18 = (char *)&v73 - v17;
  __chkstk_darwin(v16);
  v20 = (char *)&v73 - v19;
  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4E60);
  FRPOutput.content.getter(v21);
  v22 = Loadable.notLoaded.getter(v12);
  sub_1459C((uint64_t)v20, &qword_3B35D0);
  if ((v22 & 1) != 0)
  {
    *(_BYTE *)a2 = 1;
    v23 = type metadata accessor for PageContent(0);
    swift_storeEnumTagMultiPayload(a2, v23, 0);
    return (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(a2, 0, 1, v23);
  }
  else
  {
    v75 = a2;
    if (FRPOutput.totalCount.getter(v21) < 1)
    {
      if (*(_QWORD *)((char *)v78 + OBJC_IVAR____TtC8ShelfKit13StationDetail_showCount))
      {
        v69 = 0xA000000000000000;
        v70 = 4;
      }
      else
      {
        v70 = swift_retain();
        v69 = 0x2000000000000000;
      }
      v71 = v75;
      *v75 = v70;
      v71[1] = 0;
      v71[2] = v69;
      v72 = type metadata accessor for PageContent(0);
      swift_storeEnumTagMultiPayload(v71, v72, 2);
      return (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v72 - 8) + 56))(v71, 0, 1, v72);
    }
    else
    {
      v99 = 0;
      FRPOutput.content.getter(v21);
      v25 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3BF7B0);
      Loadable.map<A>(_:)(&v92, sub_192A50, 0, v12, v25);
      v26 = v92;
      sub_644D8(v92);
      v27 = sub_10E28(0, 1, 1, _swiftEmptyArrayStorage);
      v29 = v27[2];
      v28 = v27[3];
      v74 = v25;
      if (v29 >= v28 >> 1)
        v27 = sub_10E28((_QWORD *)(v28 > 1), v29 + 1, 1, v27);
      v27[2] = v29 + 1;
      v78 = v27;
      v27[v29 + 4] = v26;
      sub_644D8(v26);
      v30 = sub_10E28(0, 1, 1, _swiftEmptyArrayStorage);
      v32 = v30[2];
      v31 = v30[3];
      if (v32 >= v31 >> 1)
        v30 = sub_10E28((_QWORD *)(v31 > 1), v32 + 1, 1, v30);
      v30[2] = v32 + 1;
      v30[v32 + 4] = v26;
      sub_64510(v26);
      sub_1459C((uint64_t)v18, &qword_3B35D0);
      v33 = FRPOutput.hasMore.getter(v21);
      if ((v33 & 1) != 0)
      {
        v34 = v77;
        static ModernShelf.loadingShelf(id:)(0x5365726F4D736168, 0xEC000000666C6568, v77);
        sub_14510((uint64_t)v34, (uint64_t)v15, type metadata accessor for ModernShelf);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v15, 0, 2, v76);
        Loadable.map<A>(_:)(&v92, sub_192A50, 0, v12, v74);
        v35 = v92;
        sub_644D8(v92);
        if ((swift_isUniquelyReferenced_nonNull_native(v30) & 1) == 0)
          v30 = sub_10E28(0, v30[2] + 1, 1, v30);
        v37 = v30[2];
        v36 = v30[3];
        if (v37 >= v36 >> 1)
          v30 = sub_10E28((_QWORD *)(v36 > 1), v37 + 1, 1, v30);
        v30[2] = v37 + 1;
        v30[v37 + 4] = v35;
        sub_64510(v35);
        sub_1459C((uint64_t)v15, &qword_3B35D0);
        v33 = sub_145D8((uint64_t)v34, type metadata accessor for ModernShelf);
      }
      v38 = static MetricsPageType.room.getter(v33);
      v40 = v39;
      v41 = ((uint64_t (*)(void))static MetricsPageID.station.getter)();
      v43 = v42;
      v92 = v38;
      v93 = v40;
      v44._countAndFlagsBits = 95;
      v44._object = (void *)0xE100000000000000;
      String.append(_:)(v44);
      v45._countAndFlagsBits = v41;
      v45._object = v43;
      String.append(_:)(v45);
      swift_bridgeObjectRelease();
      v46 = v81;
      v47 = PageID.init(with:)(v92, v93);
      v48 = static MetricsPageID.station.getter(v47);
      v50 = v49;
      v51 = static MetricsPageType.room.getter(v48);
      v92 = v48;
      v93 = v50;
      v94 = (_QWORD *)v51;
      v95 = v52;
      v96 = 0;
      v97 = 0;
      v98 = 0;
      v53 = v79;
      ScalarDictionary.init()(v51);
      v54 = sub_C97A8((uint64_t)_swiftEmptyArrayStorage);
      v55 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B89A0);
      v56 = type metadata accessor for PageMetrics.Instruction(0);
      v57 = swift_allocObject(v55, ((*(unsigned __int8 *)(*(_QWORD *)(v56 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v56 - 8) + 80))+ 2 * *(_QWORD *)(*(_QWORD *)(v56 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v56 - 8) + 80) | 7);
      *(_OWORD *)(v57 + 16) = xmmword_2EA080;
      v91 = 0;
      PageMetrics.Instruction.init(eventType:)(&v91);
      v91 = 1;
      PageMetrics.Instruction.init(eventType:)(&v91);
      v58 = MetricsPageFields.metricsFields.getter();
      v60 = v82;
      v59 = v83;
      v61 = v80;
      (*(void (**)(char *, char *, uint64_t))(v82 + 16))(v80, v53, v83);
      v62 = v87;
      PageMetrics.init(instructions:pageFields:custom:clickLocationFields:)(v57, v58, v61, v54);
      (*(void (**)(char *, uint64_t))(v60 + 8))(v53, v59);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      LOBYTE(v92) = v99;
      v93 = v78;
      v94 = v30;
      v63 = ModernShelfListBuilder.buildList()();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v64 = (uint64_t)v89;
      (*(void (**)(char *, char *, uint64_t))(v84 + 32))(v89, v46, v86);
      v65 = v85;
      (*(void (**)(uint64_t, char *, uint64_t))(v88 + 32))(v64 + *(int *)(v85 + 20), v62, v90);
      *(_QWORD *)(v64 + *(int *)(v65 + 24)) = v63;
      __swift_instantiateConcreteTypeFromMangledName(&qword_3B89B0);
      v66 = v75;
      v67 = sub_14510(v64, (uint64_t)v75, type metadata accessor for ModernPage);
      static PageRenderContentTypes.unspecified.getter(v67);
      v68 = type metadata accessor for PageContent(0);
      swift_storeEnumTagMultiPayload(v66, v68, 3);
      sub_145D8(v64, type metadata accessor for ModernPage);
      return (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 56))(v66, 0, 1, v68);
    }
  }
}

uint64_t sub_A66EC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v3;

  v3 = *(_QWORD **)(a1 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B66A0) + 48));
  return sub_A5F04(v3, a2);
}

uint64_t sub_A6728(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v12;
  uint64_t Strong;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[24];
  _BYTE v17[24];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B6688);
  __chkstk_darwin(v4);
  v6 = &v16[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for PageContent(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = &v16[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_267BC(a1, (uint64_t)v6, &qword_3B6688);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
    return sub_1459C((uint64_t)v6, &qword_3B6688);
  v12 = a2 + 16;
  sub_3C56C((uint64_t)v6, (uint64_t)v10, type metadata accessor for PageContent);
  swift_beginAccess(v12, v17, 0, 0);
  Strong = swift_weakLoadStrong(v12);
  if (Strong)
  {
    v14 = Strong;
    swift_beginAccess(Strong + 72, v16, 0, 0);
    v15 = *(_QWORD *)(v14 + 72);
    swift_retain();
    swift_release(v14);
    CurrentValueSubject.send(_:)();
    swift_release(v15);
  }
  return sub_145D8((uint64_t)v10, type metadata accessor for PageContent);
}

uint64_t sub_A68A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  char v23;
  _QWORD v24[3];

  v1 = v0;
  v2 = type metadata accessor for AppEntityVisualState(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for StationEntity(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit28ModernStationDetailPresenter_station);
  v9 = *(_QWORD *)(v8 + 40);
  v19 = *(_QWORD *)(v8 + 32);
  swift_bridgeObjectRetain(v9);
  swift_retain();
  sub_58160((uint64_t)v7);
  swift_release(v8);
  v24[0] = _swiftEmptyArrayStorage;
  v10 = sub_F1C0((unint64_t *)&qword_3B1D18, (void (*)(uint64_t))&type metadata accessor for AppEntityVisualState, (uint64_t)&protocol conformance descriptor for AppEntityVisualState);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B1D20);
  v12 = sub_32914((unint64_t *)&qword_3B1D28, &qword_3B1D20, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(v24, v11, v12, v2, v10);
  v13 = objc_allocWithZone((Class)type metadata accessor for AppEntityViewAnnotation(0));
  v14 = sub_F1C0(&qword_3B3038, (void (*)(uint64_t))&type metadata accessor for StationEntity, (uint64_t)&protocol conformance descriptor for StationEntity);
  v15 = (void *)AppEntityViewAnnotation.init<A>(entity:state:)(v7, v4, v5, v14);
  v24[0] = v15;
  CurrentValueSubject.send(_:)();

  swift_beginAccess(v1 + 96, v24, 0, 0);
  v16 = *(_QWORD *)(v1 + 96);
  v20 = v19;
  v21 = v9;
  v22 = 0;
  v23 = 3;
  swift_retain();
  CurrentValueSubject.send(_:)();
  swift_release(v16);
  sub_A6AB8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_A6AB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (**v5)();
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[3];
  _BYTE v24[24];

  v1 = v0;
  v2 = type metadata accessor for HeaderButtonItem(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (uint64_t (**)())((char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_beginAccess(v0 + 16, v24, 0, 0);
  v6 = *(_QWORD *)(v0 + 16);
  v7 = swift_retain();
  CurrentValueSubject.value.getter(v23, v7);
  swift_release(v6);
  if (LOBYTE(v23[0]) == 1)
  {
    v8 = swift_allocObject(&unk_37DCB8, 24, 7);
    swift_weakInit(v8 + 16);
    *v5 = sub_A8D24;
    v5[1] = (uint64_t (*)())v8;
    swift_storeEnumTagMultiPayload(v5, v2, 4);
    swift_beginAccess(v1 + 80, v23, 0, 0);
    v9 = *(_QWORD *)(v1 + 80);
    v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8800);
    v11 = *(unsigned __int8 *)(v3 + 80);
    v12 = (v11 + 32) & ~v11;
    v13 = swift_allocObject(v10, v12 + *(_QWORD *)(v3 + 72), v11 | 7);
    *(_OWORD *)(v13 + 16) = xmmword_2EA0D0;
    sub_14510((uint64_t)v5, v13 + v12, type metadata accessor for HeaderButtonItem);
    v22 = v13;
    swift_retain();
    CurrentValueSubject.send(_:)();
    swift_bridgeObjectRelease();
    swift_release(v9);
    return sub_145D8((uint64_t)v5, type metadata accessor for HeaderButtonItem);
  }
  else
  {
    swift_beginAccess(v1 + 80, v23, 0, 0);
    v15 = *(_QWORD *)(v1 + 80);
    v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8800);
    v17 = *(unsigned __int8 *)(v3 + 80);
    v18 = (v17 + 32) & ~v17;
    v19 = swift_allocObject(v16, v18 + *(_QWORD *)(v3 + 72), v17 | 7);
    *(_OWORD *)(v19 + 16) = xmmword_2EA0D0;
    v20 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B27F8) + 48);
    swift_retain();
    sub_A6CF4((unint64_t *)(v19 + v18));
    *(_BYTE *)(v19 + v18 + v20) = 2;
    swift_storeEnumTagMultiPayload(v19 + v18, v2, 6);
    v22 = v19;
    CurrentValueSubject.send(_:)();
    swift_bridgeObjectRelease();
    return swift_release(v15);
  }
}

uint64_t sub_A6CF4@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t (*v27)(char *, uint64_t, uint64_t);
  int v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  void (*v64)(uint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t *v69;
  uint64_t v70;
  uint64_t result;
  uint64_t v72;
  _QWORD *v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  unint64_t *v81;
  void (*v82)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  uint64_t v90;

  v81 = a1;
  v90 = type metadata accessor for ActionMenu(0);
  __chkstk_darwin(v90);
  v3 = (unint64_t *)((char *)&v72 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
  v5 = __chkstk_darwin(v4);
  v85 = (uint64_t)&v72 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v89 = (char *)&v72 - v7;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B66A8);
  __chkstk_darwin(v8);
  v10 = (char *)&v72 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ActionMenu.Child(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v72 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v13);
  v78 = (uint64_t)&v72 - v17;
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v72 - v19;
  __chkstk_darwin(v18);
  v22 = (char *)&v72 - v21;
  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0928);
  v24 = *(unsigned __int8 *)(v12 + 80);
  v25 = (v24 + 32) & ~v24;
  v87 = *(_QWORD *)(v12 + 72);
  v76 = v25 + v87;
  v77 = v23;
  v75 = v24 | 7;
  v26 = swift_allocObject(v23, v25 + v87, v24 | 7);
  v74 = xmmword_2EA0D0;
  *(_OWORD *)(v26 + 16) = xmmword_2EA0D0;
  v86 = v25;
  sub_A7328(v26 + v25);
  sub_A7704((uint64_t)v10);
  v27 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  v84 = v11;
  v28 = v27(v10, 1, v11);
  v80 = v15;
  if (v28 == 1)
  {
    sub_1459C((uint64_t)v10, &qword_3B66A8);
    v88 = v26;
  }
  else
  {
    sub_3C56C((uint64_t)v10, (uint64_t)v22, type metadata accessor for ActionMenu.Child);
    sub_14510((uint64_t)v22, (uint64_t)v20, type metadata accessor for ActionMenu.Child);
    v30 = *(_QWORD *)(v26 + 16);
    v29 = *(_QWORD *)(v26 + 24);
    if (v30 >= v29 >> 1)
      v26 = sub_10CAC(v29 > 1, v30 + 1, 1, v26);
    v88 = v26;
    *(_QWORD *)(v26 + 16) = v30 + 1;
    sub_3C56C((uint64_t)v20, v26 + v86 + v30 * v87, type metadata accessor for ActionMenu.Child);
    sub_145D8((uint64_t)v22, type metadata accessor for ActionMenu.Child);
  }
  v31 = type metadata accessor for ArtworkModel(0);
  v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56);
  v33 = (uint64_t)v89;
  v32(v89, 1, 1, v31);
  v79 = v1;
  v34 = sub_A7B04();
  v35 = _s8ShelfKit10ActionMenuV2IDVAEycfC_0();
  v37 = v36;
  v38 = v85;
  sub_267BC(v33, v85, &qword_3BEB70);
  v39 = v90;
  v40 = (uint64_t)v3 + *(int *)(v90 + 28);
  v82 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v32;
  v83 = v31;
  v32((char *)v40, 1, 1, v31);
  v3[4] = 0;
  v73 = v3 + 4;
  *v3 = v35;
  v3[1] = v37;
  v3[2] = 0;
  v3[3] = 0xE000000000000000;
  v3[5] = 0;
  swift_bridgeObjectRetain(v37);
  swift_bridgeObjectRetain(v34);
  sub_3C454(v38, v40, &qword_3BEB70);
  *(unint64_t *)((char *)v3 + *(int *)(v39 + 32)) = (unint64_t)v34;
  v41 = v78;
  sub_3C56C((uint64_t)v3, v78, type metadata accessor for ActionMenu);
  swift_storeEnumTagMultiPayload(v41, v84, 1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1459C(v33, &qword_3BEB70);
  v42 = v88;
  v44 = *(_QWORD *)(v88 + 16);
  v43 = *(_QWORD *)(v88 + 24);
  if (v44 >= v43 >> 1)
    v42 = sub_10CAC(v43 > 1, v44 + 1, 1, v88);
  v88 = v42;
  *(_QWORD *)(v42 + 16) = v44 + 1;
  v45 = v86;
  sub_3C56C(v41, v42 + v86 + v44 * v87, type metadata accessor for ActionMenu.Child);
  v46 = (uint64_t)v89;
  v48 = v82;
  v47 = v83;
  v82((uint64_t)v89, 1, 1, v83);
  v49 = swift_allocObject(v77, v76, v75);
  *(_OWORD *)(v49 + 16) = v74;
  sub_A7E48(v49 + v45);
  v50 = _s8ShelfKit10ActionMenuV2IDVAEycfC_0();
  v52 = v51;
  v53 = v85;
  sub_267BC(v46, v85, &qword_3BEB70);
  v54 = v90;
  v55 = (uint64_t)v3 + *(int *)(v90 + 28);
  v48(v55, 1, 1, v47);
  v56 = v88;
  *v3 = v50;
  v3[1] = v52;
  v3[2] = 0;
  v3[3] = 0xE000000000000000;
  v57 = v73;
  *v73 = 0;
  v57[1] = 0;
  swift_bridgeObjectRetain(v52);
  swift_bridgeObjectRetain(v49);
  sub_3C454(v53, v55, &qword_3BEB70);
  *(unint64_t *)((char *)v3 + *(int *)(v54 + 32)) = v49;
  v58 = (uint64_t)v80;
  sub_3C56C((uint64_t)v3, (uint64_t)v80, type metadata accessor for ActionMenu);
  swift_storeEnumTagMultiPayload(v58, v84, 1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1459C(v46, &qword_3BEB70);
  v60 = *(_QWORD *)(v56 + 16);
  v59 = *(_QWORD *)(v56 + 24);
  if (v60 >= v59 >> 1)
    v56 = sub_10CAC(v59 > 1, v60 + 1, 1, v56);
  *(_QWORD *)(v56 + 16) = v60 + 1;
  sub_3C56C(v58, v56 + v86 + v60 * v87, type metadata accessor for ActionMenu.Child);
  v61 = (uint64_t)v89;
  ArtworkModel.init(glyphName:accessibilityTitle:isCustomSymbol:isMulticolorSymbol:)(0x73697370696C6C65, 0xE800000000000000, 0, 0, 0, 0);
  v62 = v83;
  v63 = v56;
  v64 = v82;
  v82(v61, 0, 1, v83);
  v65 = _s8ShelfKit10ActionMenuV2IDVAEycfC_0();
  v67 = v66;
  v68 = v90;
  v69 = v81;
  v70 = (uint64_t)v81 + *(int *)(v90 + 28);
  v64(v70, 1, 1, v62);
  *v69 = v65;
  v69[1] = v67;
  v69[2] = 0;
  v69[3] = 0xE000000000000000;
  v69[4] = 0;
  v69[5] = 0;
  result = sub_3C454(v61, v70, &qword_3BEB70);
  *(unint64_t *)((char *)v69 + *(int *)(v68 + 32)) = v63;
  return result;
}

uint64_t sub_A7328@<X0>(uint64_t a1@<X8>)
{
  int *v1;
  uint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  id v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  char *v38;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v41;
  uint64_t v42;
  char v43[40];
  _QWORD v44[5];
  Swift::String v45;

  v42 = a1;
  v1 = (int *)type metadata accessor for ActionMenu.Item(0);
  __chkstk_darwin(v1);
  v3 = (unint64_t *)((char *)&v37 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = type metadata accessor for ActionMetrics(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for FlowDestination(0);
  __chkstk_darwin(v7);
  v9 = (uint64_t *)((char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v37 - v14;
  v16 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v45._object = (void *)0xE000000000000000;
  v17._object = (void *)0x800000000030D350;
  v17._countAndFlagsBits = 0xD00000000000001DLL;
  v18._countAndFlagsBits = 0;
  v18._object = (void *)0xE000000000000000;
  v45._countAndFlagsBits = 0;
  v19 = NSLocalizedString(_:tableName:bundle:value:comment:)(v17, (Swift::String_optional)0, (NSBundle)v16, v18, v45);
  object = v19._object;
  countAndFlagsBits = v19._countAndFlagsBits;

  ArtworkModel.init(glyphName:accessibilityTitle:isCustomSymbol:isMulticolorSymbol:)(1918985575, 0xE400000000000000, 0, 0, 0, 0);
  v20 = type metadata accessor for ArtworkModel(0);
  v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56);
  v38 = v15;
  v21(v15, 0, 1, v20);
  v22 = *(_QWORD *)(v41 + OBJC_IVAR____TtC8ShelfKit28ModernStationDetailPresenter_station);
  v23 = *(_QWORD *)(v22 + 24);
  *v9 = *(_QWORD *)(v22 + 16);
  v9[1] = v23;
  swift_storeEnumTagMultiPayload(v9, v7, 14);
  LOBYTE(v44[0]) = 0;
  v43[0] = 0;
  v24 = swift_bridgeObjectRetain(v23);
  static ActionMetrics.notInstrumented.getter(v24);
  v25 = type metadata accessor for FlowAction(0);
  swift_allocObject(v25, *(unsigned int *)(v25 + 48), *(unsigned __int16 *)(v25 + 52));
  v26 = FlowAction.init(_:id:title:presentationContext:animationBehavior:presentationStyle:destinationPageHeader:actionMetrics:)((uint64_t)v9, 0, 0, 0, 0, (char *)v44, 0, 48, v43, (uint64_t)v6);
  v44[3] = v25;
  v44[4] = sub_F1C0((unint64_t *)&qword_3B0C40, (void (*)(uint64_t))type metadata accessor for FlowAction, (uint64_t)&protocol conformance descriptor for Action);
  v44[0] = v26;
  v27 = _s8ShelfKit10ActionMenuV2IDVAEycfC_0();
  v29 = v28;
  sub_267BC((uint64_t)v15, (uint64_t)v13, &qword_3BEB70);
  sub_267BC((uint64_t)v44, (uint64_t)v43, &qword_3B0C50);
  v30 = (uint64_t)v3 + v1[6];
  v21((char *)v30, 1, 1, v20);
  v31 = v1[7];
  *((_BYTE *)v3 + v31) = 2;
  v32 = (uint64_t)v3 + v1[9];
  *(_QWORD *)(v32 + 32) = 0;
  *(_OWORD *)v32 = 0u;
  *(_OWORD *)(v32 + 16) = 0u;
  *v3 = v27;
  v3[1] = v29;
  v33 = (unint64_t)object;
  v3[2] = countAndFlagsBits;
  v3[3] = v33;
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRetain(v33);
  sub_3C454((uint64_t)v13, v30, &qword_3BEB70);
  *((_BYTE *)v3 + v31) = 2;
  *((_BYTE *)v3 + v1[8]) = 1;
  sub_3C454((uint64_t)v43, v32, &qword_3B0C50);
  v34 = v42;
  sub_3C56C((uint64_t)v3, v42, type metadata accessor for ActionMenu.Item);
  v35 = type metadata accessor for ActionMenu.Child(0);
  swift_storeEnumTagMultiPayload(v34, v35, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1459C((uint64_t)v38, &qword_3BEB70);
  return sub_1459C((uint64_t)v44, &qword_3B0C50);
}

uint64_t sub_A7704@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int *v3;
  uint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  id v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *object;
  uint64_t countAndFlagsBits;
  _BYTE v41[40];
  _QWORD v42[5];
  Swift::String v43;

  v3 = (int *)type metadata accessor for ActionMenu.Item(0);
  __chkstk_darwin(v3);
  v5 = (unint64_t *)((char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = type metadata accessor for ActionMetrics(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v37 - v13;
  if (*(_BYTE *)(*(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit28ModernStationDetailPresenter_station)
                + OBJC_IVAR____TtC8ShelfKit13StationDetail_sortOrder) == 2)
  {
    v15 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v43._object = (void *)0x800000000030D330;
    v16._object = (void *)0x800000000030D310;
    v16._countAndFlagsBits = 0xD000000000000010;
    v17._countAndFlagsBits = 0;
    v17._object = (void *)0xE000000000000000;
    v43._countAndFlagsBits = 0xD000000000000010;
    v18 = NSLocalizedString(_:tableName:bundle:value:comment:)(v16, (Swift::String_optional)0, (NSBundle)v15, v17, v43);
    object = v18._object;
    countAndFlagsBits = v18._countAndFlagsBits;

    v19 = type metadata accessor for ArtworkModel(0);
    v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56);
    v20(v14, 1, 1, v19);
    v21 = swift_allocObject(&unk_37DCB8, 24, 7);
    swift_weakInit(v21 + 16);
    v22 = swift_retain();
    static ActionMetrics.notInstrumented.getter(v22);
    v23 = type metadata accessor for ClosureAction(0);
    v38 = a1;
    v24 = v23;
    swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
    v25 = sub_213C1C(0, 0, 32, (uint64_t)v8, (uint64_t)sub_A8F5C, v21);
    swift_release_n(v21, 2);
    v42[3] = v24;
    v42[4] = sub_F1C0(&qword_3B2768, (void (*)(uint64_t))type metadata accessor for ClosureAction, (uint64_t)&protocol conformance descriptor for Action);
    v42[0] = v25;
    v26 = _s8ShelfKit10ActionMenuV2IDVAEycfC_0();
    v28 = v27;
    sub_267BC((uint64_t)v14, (uint64_t)v12, &qword_3BEB70);
    sub_267BC((uint64_t)v42, (uint64_t)v41, &qword_3B0C50);
    v29 = (uint64_t)v5 + v3[6];
    v20((char *)v29, 1, 1, v19);
    v30 = v3[7];
    *((_BYTE *)v5 + v30) = 2;
    v31 = (uint64_t)v5 + v3[9];
    *(_QWORD *)(v31 + 32) = 0;
    *(_OWORD *)v31 = 0u;
    *(_OWORD *)(v31 + 16) = 0u;
    *v5 = v26;
    v5[1] = v28;
    v32 = (unint64_t)object;
    v5[2] = countAndFlagsBits;
    v5[3] = v32;
    swift_bridgeObjectRetain(v28);
    swift_bridgeObjectRetain(v32);
    sub_3C454((uint64_t)v12, v29, &qword_3BEB70);
    *((_BYTE *)v5 + v30) = 2;
    *((_BYTE *)v5 + v3[8]) = 1;
    sub_3C454((uint64_t)v41, v31, &qword_3B0C50);
    v33 = v38;
    sub_3C56C((uint64_t)v5, v38, type metadata accessor for ActionMenu.Item);
    v34 = type metadata accessor for ActionMenu.Child(0);
    swift_storeEnumTagMultiPayload(v33, v34, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1459C((uint64_t)v14, &qword_3BEB70);
    sub_1459C((uint64_t)v42, &qword_3B0C50);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v33, 0, 1, v34);
  }
  else
  {
    v36 = type metadata accessor for ActionMenu.Child(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(a1, 1, 1, v36);
  }
}

_QWORD *sub_A7B04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  _QWORD *inited;
  char v6;
  int64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _BYTE v22[40];

  v1 = v0;
  v2 = OBJC_IVAR____TtC8ShelfKit28ModernStationDetailPresenter_station;
  v3 = *(unsigned __int8 *)(*(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit28ModernStationDetailPresenter_station)
                          + OBJC_IVAR____TtC8ShelfKit13StationDetail_sortOrder);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B09D0);
  inited = (_QWORD *)swift_initStackObject(v4, v22);
  *((_OWORD *)inited + 1) = xmmword_2EFAE0;
  *((_WORD *)inited + 16) = 256;
  *((_BYTE *)inited + 34) = 4;
  if ((*(_BYTE *)(v1 + 112) & 1) != 0
    || (*(_BYTE *)(*(_QWORD *)(v1 + v2) + OBJC_IVAR____TtC8ShelfKit13StationDetail_grouped) & 1) != 0)
  {
    v6 = 1;
    v7 = 3;
  }
  else
  {
    v7 = 4;
    inited = sub_10F40((int *)((char *)&dword_0 + 1), 4, 1, inited);
    v6 = 0;
    inited[2] = 4;
    *((_BYTE *)inited + 35) = 2;
  }
  swift_bridgeObjectRetain(inited);
  sub_18089C(0, v7, 0);
  v8 = *((unsigned __int8 *)inited + 32);
  if (v8 == v3)
  {
    if (v3 == 4)
    {
      LOBYTE(v8) = 5;
    }
    else if (v3 == 1)
    {
      LOBYTE(v8) = 3;
    }
    else
    {
      LOBYTE(v8) = v3;
    }
  }
  v10 = _swiftEmptyArrayStorage[2];
  v9 = _swiftEmptyArrayStorage[3];
  if (v10 >= v9 >> 1)
    sub_18089C(v9 > 1, v10 + 1, 1);
  _swiftEmptyArrayStorage[2] = v10 + 1;
  *((_BYTE *)&_swiftEmptyArrayStorage[4] + v10) = v8;
  v11 = *((unsigned __int8 *)inited + 33);
  if (v11 == v3)
  {
    if (v3 == 4)
    {
      LOBYTE(v11) = 5;
    }
    else if (v3 == 1)
    {
      LOBYTE(v11) = 3;
    }
    else
    {
      LOBYTE(v11) = v3;
    }
  }
  v13 = _swiftEmptyArrayStorage[2];
  v12 = _swiftEmptyArrayStorage[3];
  if (v13 >= v12 >> 1)
    sub_18089C(v12 > 1, v13 + 1, 1);
  _swiftEmptyArrayStorage[2] = v13 + 1;
  *((_BYTE *)&_swiftEmptyArrayStorage[4] + v13) = v11;
  v14 = *((unsigned __int8 *)inited + 34);
  if (v14 == v3)
  {
    if (v3 == 4)
    {
      LOBYTE(v14) = 5;
    }
    else if (v3 == 1)
    {
      LOBYTE(v14) = 3;
    }
    else
    {
      LOBYTE(v14) = v3;
    }
  }
  v16 = _swiftEmptyArrayStorage[2];
  v15 = _swiftEmptyArrayStorage[3];
  if (v16 >= v15 >> 1)
    sub_18089C(v15 > 1, v16 + 1, 1);
  _swiftEmptyArrayStorage[2] = v16 + 1;
  *((_BYTE *)&_swiftEmptyArrayStorage[4] + v16) = v14;
  if ((v6 & 1) == 0)
  {
    v17 = *((unsigned __int8 *)inited + 35);
    if (v17 == v3)
    {
      if (v3 == 4)
      {
        LOBYTE(v17) = 5;
      }
      else if (v3 == 1)
      {
        LOBYTE(v17) = 3;
      }
      else
      {
        LOBYTE(v17) = v3;
      }
    }
    v19 = _swiftEmptyArrayStorage[2];
    v18 = _swiftEmptyArrayStorage[3];
    if (v19 >= v18 >> 1)
      sub_18089C(v18 > 1, v19 + 1, 1);
    _swiftEmptyArrayStorage[2] = v19 + 1;
    *((_BYTE *)&_swiftEmptyArrayStorage[4] + v19) = v17;
  }
  swift_bridgeObjectRelease();
  swift_retain();
  v20 = sub_A8DD0((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release(v1);
  return v20;
}

uint64_t sub_A7E48@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int *v2;
  uint64_t v3;
  unint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int v13;
  id v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v39;
  int v40;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v43;
  uint64_t v44;
  _BYTE v45[40];
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  Swift::String v49;

  v44 = a1;
  v2 = (int *)type metadata accessor for ActionMenu.Item(0);
  __chkstk_darwin(v2);
  v4 = (unint64_t *)((char *)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = type metadata accessor for ActionMetrics(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
  v9 = __chkstk_darwin(v8);
  v43 = (uint64_t)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v12 = (char *)&v39 - v11;
  v13 = *(unsigned __int8 *)(*(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit28ModernStationDetailPresenter_station)
                           + OBJC_IVAR____TtC8ShelfKit13StationDetail_hidePlayedEpisodes);
  v14 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v49._object = (void *)0xE000000000000000;
  v15._object = (void *)0x800000000030D2F0;
  v15._countAndFlagsBits = 0xD000000000000014;
  v16._countAndFlagsBits = 0;
  v16._object = (void *)0xE000000000000000;
  v49._countAndFlagsBits = 0;
  v17 = NSLocalizedString(_:tableName:bundle:value:comment:)(v15, (Swift::String_optional)0, (NSBundle)v14, v16, v49);
  object = v17._object;
  countAndFlagsBits = v17._countAndFlagsBits;

  ArtworkModel.init(glyphName:accessibilityTitle:isCustomSymbol:isMulticolorSymbol:)(0x73616C732E657965, 0xE900000000000068, 0, 0, 0, 0);
  v18 = type metadata accessor for ArtworkModel(0);
  v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56);
  v39 = v12;
  v19(v12, 0, 1, v18);
  v40 = v13 ^ 1;
  v20 = v1 + OBJC_IVAR____TtC8ShelfKit28ModernStationDetailPresenter_libraryActionController;
  v22 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit28ModernStationDetailPresenter_stationUuid);
  v21 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit28ModernStationDetailPresenter_stationUuid + 8);
  sub_150C8(v20, (uint64_t)&v46);
  v23 = swift_allocObject(&unk_37DE18, 73, 7);
  sub_F4D8(&v46, v23 + 16);
  *(_QWORD *)(v23 + 56) = v22;
  *(_QWORD *)(v23 + 64) = v21;
  *(_BYTE *)(v23 + 72) = v13;
  v24 = swift_bridgeObjectRetain(v21);
  static ActionMetrics.notInstrumented.getter(v24);
  v25 = type metadata accessor for ClosureAction(0);
  swift_allocObject(v25, *(unsigned int *)(v25 + 48), *(unsigned __int16 *)(v25 + 52));
  v26 = sub_213C1C(0, 0, 32, (uint64_t)v7, (uint64_t)sub_A8D6C, v23);
  swift_release(v23);
  v47 = v25;
  v48 = sub_F1C0(&qword_3B2768, (void (*)(uint64_t))type metadata accessor for ClosureAction, (uint64_t)&protocol conformance descriptor for Action);
  *(_QWORD *)&v46 = v26;
  v27 = _s8ShelfKit10ActionMenuV2IDVAEycfC_0();
  v29 = v28;
  v30 = (uint64_t)v12;
  v31 = v43;
  sub_267BC(v30, v43, &qword_3BEB70);
  sub_267BC((uint64_t)&v46, (uint64_t)v45, &qword_3B0C50);
  v32 = (uint64_t)v4 + v2[6];
  v19((char *)v32, 1, 1, v18);
  v33 = v2[7];
  *((_BYTE *)v4 + v33) = 2;
  v34 = (uint64_t)v4 + v2[9];
  *(_QWORD *)(v34 + 32) = 0;
  *(_OWORD *)v34 = 0u;
  *(_OWORD *)(v34 + 16) = 0u;
  *v4 = v27;
  v4[1] = v29;
  v35 = (unint64_t)object;
  v4[2] = countAndFlagsBits;
  v4[3] = v35;
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRetain(v35);
  sub_3C454(v31, v32, &qword_3BEB70);
  *((_BYTE *)v4 + v33) = 2;
  *((_BYTE *)v4 + v2[8]) = v40;
  sub_3C454((uint64_t)v45, v34, &qword_3B0C50);
  v36 = v44;
  sub_3C56C((uint64_t)v4, v44, type metadata accessor for ActionMenu.Item);
  v37 = type metadata accessor for ActionMenu.Child(0);
  swift_storeEnumTagMultiPayload(v36, v37, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1459C((uint64_t)v39, &qword_3BEB70);
  return sub_1459C((uint64_t)&v46, &qword_3B0C50);
}

uint64_t sub_A8238(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t Strong;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  _BYTE v9[24];
  _BYTE v10[24];
  _BYTE v11[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v11, 0, 0);
  Strong = swift_weakLoadStrong(v3);
  if (Strong)
  {
    v5 = Strong;
    swift_beginAccess(Strong + 16, v10, 0, 0);
    v6 = *(_QWORD *)(v5 + 16);
    swift_retain();
    swift_release(v5);
    v9[0] = a2;
    CurrentValueSubject.send(_:)();
    swift_release(v6);
  }
  swift_beginAccess(v3, v9, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v8 = result;
    sub_A6AB8();
    return swift_release(v8);
  }
  return result;
}

uint64_t sub_A82FC@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int *v4;
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  int v43;
  void (*v44)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  _BYTE v49[40];
  __int128 v50;
  uint64_t v51;
  uint64_t v52;

  v48 = a2;
  v4 = (int *)type metadata accessor for ActionMenu.Item(0);
  __chkstk_darwin(v4);
  v6 = (unint64_t *)((char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = type metadata accessor for ActionMetrics(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
  v11 = __chkstk_darwin(v10);
  v46 = (uint64_t)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v14 = (char *)&v41 - v13;
  v15 = *a1;
  v16 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8ShelfKit28ModernStationDetailPresenter_station);
  v17 = *(_QWORD *)(v16 + 24);
  v42 = *(_QWORD *)(v16 + 16);
  v18 = *(unsigned __int8 *)(v16 + OBJC_IVAR____TtC8ShelfKit13StationDetail_sortOrder);
  LOBYTE(v50) = v15;
  swift_bridgeObjectRetain(v17);
  StationSortOrder.displayTitle.getter();
  v45 = v19;
  v47 = v20;
  v21 = type metadata accessor for ArtworkModel(0);
  v44 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56);
  v44(v14, 1, 1, v21);
  if ((_DWORD)v15 == 5)
  {
    v22 = 4;
    if ((_DWORD)v18 != 3)
      goto LABEL_9;
  }
  else
  {
    if ((_DWORD)v15 == 3)
    {
      v22 = 1;
      if ((_DWORD)v18 == 3)
        goto LABEL_4;
LABEL_9:
      if ((_DWORD)v18 == 5)
      {
        if (v22 != 4)
          goto LABEL_5;
      }
      else if (v22 != v18)
      {
        goto LABEL_5;
      }
LABEL_11:
      v43 = 0;
      goto LABEL_12;
    }
    v22 = v15;
    if ((_DWORD)v18 != 3)
      goto LABEL_9;
  }
LABEL_4:
  if (v22 == 1)
    goto LABEL_11;
LABEL_5:
  v43 = 1;
LABEL_12:
  v23 = v2 + OBJC_IVAR____TtC8ShelfKit28ModernStationDetailPresenter_libraryActionController;
  v24 = swift_allocObject(&unk_37DCB8, 24, 7);
  swift_weakInit(v24 + 16);
  sub_150C8(v23, (uint64_t)&v50);
  v25 = swift_allocObject(&unk_37DE40, 88, 7);
  *(_BYTE *)(v25 + 16) = v15;
  *(_QWORD *)(v25 + 24) = v24;
  sub_F4D8(&v50, v25 + 32);
  *(_QWORD *)(v25 + 72) = v42;
  *(_QWORD *)(v25 + 80) = v17;
  v26 = swift_retain();
  static ActionMetrics.notInstrumented.getter(v26);
  v27 = type metadata accessor for ClosureAction(0);
  swift_allocObject(v27, *(unsigned int *)(v27 + 48), *(unsigned __int16 *)(v27 + 52));
  v28 = sub_213C1C(0, 0, 32, (uint64_t)v9, (uint64_t)sub_A8F48, v25);
  swift_release(v24);
  swift_release(v25);
  v51 = v27;
  v52 = sub_F1C0(&qword_3B2768, (void (*)(uint64_t))type metadata accessor for ClosureAction, (uint64_t)&protocol conformance descriptor for Action);
  *(_QWORD *)&v50 = v28;
  v29 = _s8ShelfKit10ActionMenuV2IDVAEycfC_0();
  v31 = v30;
  v32 = v46;
  sub_267BC((uint64_t)v14, v46, &qword_3BEB70);
  sub_267BC((uint64_t)&v50, (uint64_t)v49, &qword_3B0C50);
  v33 = (uint64_t)v6 + v4[6];
  v44((char *)v33, 1, 1, v21);
  v34 = v4[7];
  *((_BYTE *)v6 + v34) = 2;
  v35 = (uint64_t)v6 + v4[9];
  *(_QWORD *)(v35 + 32) = 0;
  *(_OWORD *)v35 = 0u;
  *(_OWORD *)(v35 + 16) = 0u;
  *v6 = v29;
  v6[1] = v31;
  v36 = v47;
  v6[2] = v45;
  v6[3] = v36;
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRetain(v36);
  sub_3C454(v32, v33, &qword_3BEB70);
  *((_BYTE *)v6 + v34) = 2;
  *((_BYTE *)v6 + v4[8]) = v43;
  sub_3C454((uint64_t)v49, v35, &qword_3B0C50);
  v37 = (uint64_t)v6;
  v38 = v48;
  sub_3C56C(v37, v48, type metadata accessor for ActionMenu.Item);
  v39 = type metadata accessor for ActionMenu.Child(0);
  swift_storeEnumTagMultiPayload(v38, v39, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1459C((uint64_t)v14, &qword_3BEB70);
  return sub_1459C((uint64_t)&v50, &qword_3B0C50);
}

uint64_t sub_A8718(char a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t Strong;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v16[24];
  _BYTE v17[31];
  char v18;

  if (a1 == 2)
  {
    v9 = a2 + 16;
    swift_beginAccess(a2 + 16, v17, 0, 0);
    Strong = swift_weakLoadStrong(v9);
    if (Strong)
    {
      v11 = Strong;
      swift_beginAccess(Strong + 16, v16, 0, 0);
      v12 = *(_QWORD *)(v11 + 16);
      swift_retain();
      swift_release(v11);
      v18 = 1;
      CurrentValueSubject.send(_:)();
      swift_release(v12);
    }
  }
  v13 = a3[3];
  v14 = a3[4];
  __swift_project_boxed_opaque_existential_1(a3, v13);
  v18 = a1;
  return (*(uint64_t (**)(uint64_t, uint64_t, char *, uint64_t, uint64_t))(v14 + 272))(a4, a5, &v18, v13, v14);
}

_QWORD *ModernStationDetailPresenter.deinit()
{
  _QWORD *v0;

  swift_release(v0[2]);
  sub_3AEF8(v0[3], v0[4], v0[5], v0[6], v0[7], v0[8]);
  swift_release(v0[9]);
  swift_release(v0[10]);
  swift_release(v0[11]);
  swift_release(v0[12]);
  swift_release(v0[13]);
  swift_release(v0[15]);
  swift_release(v0[16]);
  sub_145D8((uint64_t)v0 + OBJC_IVAR____TtC8ShelfKit28ModernStationDetailPresenter_interactionContextPage, (uint64_t (*)(_QWORD))&type metadata accessor for InteractionContext.Page);
  swift_bridgeObjectRelease();
  swift_release(*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC8ShelfKit28ModernStationDetailPresenter_objectGraph));
  swift_unknownObjectRelease(*(_QWORD *)((char *)v0
                                       + OBJC_IVAR____TtC8ShelfKit28ModernStationDetailPresenter_libraryDataProvider));
  __swift_destroy_boxed_opaque_existential_1((_QWORD *)((char *)v0
                                                      + OBJC_IVAR____TtC8ShelfKit28ModernStationDetailPresenter_libraryActionController));
  __swift_destroy_boxed_opaque_existential_1((_QWORD *)((char *)v0
                                                      + OBJC_IVAR____TtC8ShelfKit28ModernStationDetailPresenter_episodeController));
  __swift_destroy_boxed_opaque_existential_1((_QWORD *)((char *)v0
                                                      + OBJC_IVAR____TtC8ShelfKit28ModernStationDetailPresenter_storeDataProvider));
  swift_bridgeObjectRelease();
  swift_release(*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC8ShelfKit28ModernStationDetailPresenter_station));
  return v0;
}

uint64_t ModernStationDetailPresenter.__deallocating_deinit()
{
  uint64_t v0;

  ModernStationDetailPresenter.deinit();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_A8934(uint64_t a1)
{
  uint64_t result;

  result = sub_F1C0(&qword_3B64C0, (void (*)(uint64_t))type metadata accessor for ModernStationDetailPresenter, (uint64_t)&protocol conformance descriptor for ModernStationDetailPresenter);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for ModernStationDetailPresenter(uint64_t a1)
{
  uint64_t result;

  result = qword_3B6520;
  if (!qword_3B6520)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ModernStationDetailPresenter);
  return result;
}

uint64_t sub_A89AC@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  _BYTE v5[24];

  v3 = *v1 + OBJC_IVAR____TtC8ShelfKit28ModernStationDetailPresenter_interactionContextPage;
  swift_beginAccess(v3, v5, 0, 0);
  return sub_14510(v3, a1, (uint64_t (*)(_QWORD))&type metadata accessor for InteractionContext.Page);
}

uint64_t sub_A8A08@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + 128, v5, 0, 0);
  v3 = *(_QWORD *)(v1 + 128);
  *a1 = v3;
  return swift_retain(v3);
}

uint64_t sub_A8A4C()
{
  return sub_F1C0(&qword_3B64F0, (void (*)(uint64_t))type metadata accessor for ModernStationDetailPresenter, (uint64_t)&protocol conformance descriptor for ModernStationDetailPresenter);
}

double sub_A8A78@<D0>(_OWORD *a1@<X8>)
{
  __int128 v2;
  double result;
  _OWORD v4[2];
  __int128 v5;

  ModernStationDetailPresenter.reorderingExtension.getter((uint64_t (**)(uint64_t, uint64_t))v4);
  v2 = v4[1];
  *a1 = v4[0];
  a1[1] = v2;
  result = *(double *)&v5;
  a1[2] = v5;
  return result;
}

uint64_t sub_A8ABC()
{
  return type metadata accessor for ModernStationDetailPresenter(0);
}

uint64_t sub_A8AC4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[19];

  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[1] = &unk_2F1D00;
  v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[3] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[4] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[5] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[6] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[7] = &unk_2F1D18;
  v4[8] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[9] = &unk_2F1D30;
  result = type metadata accessor for InteractionContext.Page(319);
  if (v3 <= 0x3F)
  {
    v4[10] = *(_QWORD *)(result - 8) + 64;
    v4[11] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[12] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[13] = &unk_2F1D48;
    v4[14] = &unk_2F1D60;
    v4[15] = &unk_2F1D60;
    v4[16] = &unk_2F1D60;
    v4[17] = &unk_2F1D48;
    v4[18] = (char *)&value witness table for Builtin.NativeObject + 64;
    return swift_updateClassMetadata2(a1, 256, 19, v4, a1 + 80);
  }
  return result;
}

uint64_t method lookup function for ModernStationDetailPresenter(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for ModernStationDetailPresenter);
}

uint64_t dispatch thunk of ModernStationDetailPresenter.__allocating_init(asPartOf:with:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 232))();
}

uint64_t initializeBufferWithCopyOfBuffer for ModernStationDetailPresenter.Configuration(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  swift_retain(v3);
  return a1;
}

uint64_t *assignWithCopy for ModernStationDetailPresenter.Configuration(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
  return a1;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t *assignWithTake for ModernStationDetailPresenter.Configuration(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for ModernStationDetailPresenter.Configuration(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 9))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ModernStationDetailPresenter.Configuration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 9) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ModernStationDetailPresenter.Configuration()
{
  return &type metadata for ModernStationDetailPresenter.Configuration;
}

uint64_t sub_A8D0C(uint64_t a1)
{
  uint64_t v1;

  return sub_A5D14(a1, v1);
}

uint64_t sub_A8D14(uint64_t *a1)
{
  uint64_t v1;

  return sub_A5DD0(a1, v1);
}

uint64_t sub_A8D1C(uint64_t a1)
{
  uint64_t v1;

  return sub_A6728(a1, v1);
}

uint64_t sub_A8D24()
{
  uint64_t v0;

  return sub_A8238(v0, 0);
}

uint64_t sub_A8D40()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1((_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, 73, 7);
}

uint64_t sub_A8D6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(_BYTE *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 40);
  v5 = *(_QWORD *)(v0 + 48);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 16), v4);
  return (*(uint64_t (**)(uint64_t, uint64_t, BOOL, uint64_t, uint64_t))(v5 + 280))(v1, v2, (v3 & 1) == 0, v4, v5);
}

_QWORD *sub_A8DD0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int64_t v7;
  _QWORD *v8;
  unsigned __int8 *v9;
  unsigned __int8 v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  unsigned __int8 v15;
  _QWORD *v16;

  v3 = type metadata accessor for ActionMenu.Child(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = _swiftEmptyArrayStorage;
  if (v7)
  {
    v14 = v1;
    v16 = _swiftEmptyArrayStorage;
    sub_18073C(0, v7, 0);
    v8 = v16;
    v9 = (unsigned __int8 *)(a1 + 32);
    do
    {
      v10 = *v9++;
      v15 = v10;
      sub_A82FC(&v15, (uint64_t)v6);
      v16 = v8;
      v12 = v8[2];
      v11 = v8[3];
      if (v12 >= v11 >> 1)
      {
        sub_18073C(v11 > 1, v12 + 1, 1);
        v8 = v16;
      }
      v8[2] = v12 + 1;
      sub_3C56C((uint64_t)v6, (uint64_t)v8+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v12, type metadata accessor for ActionMenu.Child);
      --v7;
    }
    while (v7);
  }
  return v8;
}

uint64_t sub_A8F14()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  __swift_destroy_boxed_opaque_existential_1((_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, 88, 7);
}

uint64_t sub_A8F48()
{
  uint64_t v0;

  return sub_A8718(*(_BYTE *)(v0 + 16), *(_QWORD *)(v0 + 24), (_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80));
}

uint64_t sub_A8F5C()
{
  uint64_t v0;

  return sub_A8238(v0, 1);
}

uint64_t PodcastContextAction.adamId.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit20PodcastContextAction_adamId);
}

uint64_t PodcastContextAction.podcastOffer.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_A8FA0(v1 + OBJC_IVAR____TtC8ShelfKit20PodcastContextAction_podcastOffer, a1);
}

uint64_t sub_A8FA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ShowOffer(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t PodcastContextAction.__allocating_init(deserializing:using:)(char *a1, uint64_t a2)
{
  uint64_t v2;

  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  return PodcastContextAction.init(deserializing:using:)(a1, a2);
}

uint64_t PodcastContextAction.init(deserializing:using:)(char *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  void (*v37)(char *, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  void (*v47)(char *, uint64_t);
  char *v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;

  v3 = v2;
  v55 = a2;
  v51 = *v3;
  v54 = type metadata accessor for JSONContext(0);
  v5 = *(_QWORD *)(v54 - 8);
  v6 = __chkstk_darwin(v54);
  v48 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v9 = (char *)&v45 - v8;
  v10 = type metadata accessor for ShowOffer(0);
  __chkstk_darwin(v10);
  v50 = (uint64_t *)((char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = type metadata accessor for JSONObject(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v46 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v45 - v17;
  __chkstk_darwin(v16);
  v20 = (char *)&v45 - v19;
  swift_retain();
  v53 = a1;
  v21 = JSONObject.subscript.getter(0x64496D616461, 0xE600000000000000);
  v22 = JSONObject.string.getter(v21);
  if (v23)
  {
    v52 = v12;
    v24 = v49;
    v25 = static AdamID.parse(_:)(v22, v23);
    if (v24)
    {
      v26 = swift_bridgeObjectRelease();
      v27 = static AdamID.empty.getter(v26);
      swift_errorRelease(v24);
    }
    else
    {
      v27 = v25;
      swift_bridgeObjectRelease();
    }
    v45 = v13;
    v47 = *(void (**)(char *, uint64_t))(v13 + 8);
    v47(v20, v52);
    *(uint64_t *)((char *)v3 + OBJC_IVAR____TtC8ShelfKit20PodcastContextAction_adamId) = v27;
    v36 = v53;
    JSONObject.subscript.getter(0x4F74736163646F70, 0xEC00000072656666);
    v49 = v5;
    v37 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v38 = v55;
    v39 = v54;
    v37(v9, v55, v54);
    v40 = v50;
    ShowOffer.init(deserializing:using:)(v18, (uint64_t)v9, v50);
    sub_A9430((uint64_t)v40, (uint64_t)v3 + OBJC_IVAR____TtC8ShelfKit20PodcastContextAction_podcastOffer);
    swift_release(v3);
    v42 = v46;
    v43 = v52;
    (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v46, v36, v52);
    v44 = (uint64_t)v48;
    v37(v48, v38, v39);
    v29 = Action.init(deserializing:using:)(v42, v44);
    (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v38, v39);
    v47(v36, v43);
  }
  else
  {
    v28 = *(void (**)(char *, uint64_t))(v13 + 8);
    v28(v20, v12);
    v29 = type metadata accessor for JSONError(0);
    v30 = sub_1E468();
    swift_allocError(v29, v30, 0, 0);
    v32 = v31;
    v33 = *v3;
    swift_release(v3);
    *v32 = 0x64496D616461;
    v32[1] = 0xE600000000000000;
    v32[2] = v33;
    v34 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v29 - 8) + 104))(v32, enum case for JSONError.missingProperty(_:), v29);
    swift_willThrow(v34);
    v35 = v53;
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v55, v54);
    v28(v35, v12);
    swift_deallocPartialClassInstance(v3, v51, *(unsigned int *)(*v3 + 48), *(unsigned __int16 *)(*v3 + 52));
  }
  return v29;
}

uint64_t sub_A9430(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ShowOffer(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void PodcastContextAction.init(uniqueId:title:presentationStyle:actionMetrics:impressionMetrics:)()
{
  _swift_stdlib_reportUnimplementedInitializer("ShelfKit.PodcastContextAction", 29, "init(uniqueId:title:presentationStyle:actionMetrics:impressionMetrics:)", 71, 0);
  __break(1u);
}

uint64_t sub_A94A0()
{
  uint64_t v0;

  return sub_A952C(v0 + OBJC_IVAR____TtC8ShelfKit20PodcastContextAction_podcastOffer);
}

uint64_t PodcastContextAction.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics;
  v2 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_23B00(v0 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics);
  sub_A952C(v0 + OBJC_IVAR____TtC8ShelfKit20PodcastContextAction_podcastOffer);
  return v0;
}

uint64_t sub_A952C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ShowOffer(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t PodcastContextAction.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics;
  v2 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_23B00(v0 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics);
  sub_A952C(v0 + OBJC_IVAR____TtC8ShelfKit20PodcastContextAction_podcastOffer);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_A95F0()
{
  return type metadata accessor for PodcastContextAction(0);
}

uint64_t type metadata accessor for PodcastContextAction(uint64_t a1)
{
  uint64_t result;

  result = qword_3B66D8;
  if (!qword_3B66D8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PodcastContextAction);
  return result;
}

uint64_t sub_A9634(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  result = type metadata accessor for ShowOffer(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 160);
    if (!result)
      return 0;
  }
  return result;
}

_QWORD *LongDescription.__allocating_init(title:subtitle:summary:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *result;

  result = (_QWORD *)swift_allocObject(v5, 56, 7);
  result[2] = a1;
  result[3] = a2;
  result[4] = a3;
  result[5] = a4;
  result[6] = a5;
  return result;
}

_QWORD *LongDescription.init(title:subtitle:summary:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[2] = a1;
  v5[3] = a2;
  v5[4] = a3;
  v5[5] = a4;
  v5[6] = a5;
  return v5;
}

_QWORD *LongDescription.__allocating_init(deserializing:using:)(char *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t);
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t);
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v40 = a2;
  v39 = type metadata accessor for JSONContext(0);
  v3 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39);
  v5 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for JSONObject(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v36 - v11;
  v13 = JSONObject.subscript.getter(0x656C746974, 0xE500000000000000);
  v14 = JSONObject.string.getter(v13);
  v16 = v15;
  v17 = *(void (**)(char *, uint64_t))(v7 + 8);
  v17(v12, v6);
  v38 = v16;
  if (v16)
  {
    v18 = type metadata accessor for Paragraph(0);
    v37 = v14;
    JSONObject.subscript.getter(0x7972616D6D7573, 0xE700000000000000);
    v19 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v36 = v3;
    v20 = a1;
    v21 = v39;
    v22 = v40;
    v19(v5, v40, v39);
    sub_F1C0(&qword_3B67B0, (void (*)(uint64_t))type metadata accessor for Paragraph, (uint64_t)&protocol conformance descriptor for Paragraph);
    ExpressibleByJSON.init(tryDeserializing:using:)(v10, v5, v18);
    v23 = v41;
    v24 = JSONObject.subscript.getter(0x656C746974627573, 0xE800000000000000);
    v25 = JSONObject.string.getter(v24);
    v27 = v26;
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v22, v21);
    v17(v20, v6);
    v17(v10, v6);
    v28 = type metadata accessor for LongDescription();
    result = (_QWORD *)swift_allocObject(v28, 56, 7);
    v30 = v38;
    result[2] = v37;
    result[3] = v30;
    result[4] = v25;
    result[5] = v27;
    result[6] = v23;
  }
  else
  {
    v31 = type metadata accessor for JSONError(0);
    v32 = sub_F1C0((unint64_t *)&qword_3B0CB0, (void (*)(uint64_t))&type metadata accessor for JSONError, (uint64_t)&protocol conformance descriptor for JSONError);
    swift_allocError(v31, v32, 0, 0);
    *v33 = 0x656C746974;
    v34 = v37;
    v33[1] = 0xE500000000000000;
    v33[2] = v34;
    v35 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v31 - 8) + 104))(v33, enum case for JSONError.missingProperty(_:), v31);
    swift_willThrow(v35);
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v40, v39);
    return (_QWORD *)((uint64_t (*)(char *, uint64_t))v17)(a1, v6);
  }
  return result;
}

uint64_t type metadata accessor for LongDescription()
{
  return objc_opt_self(_TtC8ShelfKit15LongDescription);
}

_QWORD *LongDescription.deinit()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_release(v0[6]);
  return v0;
}

uint64_t LongDescription.__deallocating_deinit()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_release(v0[6]);
  return swift_deallocClassInstance(v0, 56, 7);
}

_QWORD *sub_A9A6C@<X0>(char *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  _QWORD *result;

  result = LongDescription.__allocating_init(deserializing:using:)(a1, a2);
  if (!v3)
    *a3 = result;
  return result;
}

uint64_t method lookup function for LongDescription(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for LongDescription);
}

uint64_t dispatch thunk of LongDescription.__allocating_init(title:subtitle:summary:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of UpNextScoringWeights.__allocating_init(deserializing:using:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t LibraryObserverProvider.__allocating_init(asPartOf:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v3 = swift_allocObject(v1, 24, 7);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B68D0);
  v5 = type metadata accessor for BaseObjectGraph(0);
  inject<A, B>(_:from:)(&v7, v4, a1, v4, v5);
  swift_release(a1);
  *(_QWORD *)(v3 + 16) = v7;
  return v3;
}

uint64_t LibraryObserverProvider.init(asPartOf:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B68D0);
  v4 = type metadata accessor for BaseObjectGraph(0);
  inject<A, B>(_:from:)(&v6, v3, a1, v3, v4);
  swift_release(a1);
  *(_QWORD *)(v1 + 16) = v6;
  return v1;
}

uint64_t LibraryObserverProvider.deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return v0;
}

uint64_t LibraryObserverProvider.__deallocating_deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t sub_A9BF4()
{
  return LibraryObserverProvider.libraryRecentlyUnfollowedShowsCountPublisher.getter();
}

uint64_t LibraryObserverProvider.libraryRecentlyUnfollowedShowsCountPublisher.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B68D8);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for FetchedResultsCountPublisher(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((static Podcasts.isRecentlyUnfollowedEnabled()(v7) & 1) != 0)
  {
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(kMTPodcastEntityName);
    v12 = v11;
    v13 = objc_msgSend((id)objc_opt_self(MTPodcast), "predicateForRecentlyUnfollowed");
    v14 = objc_msgSend(*(id *)(v0 + 16), "privateQueueContext");
    v15 = sub_676C8();
    v16 = static OS_dispatch_queue.main.getter(v15);
    FetchedResultsCountPublisher.init(identifier:entityName:predicate:managedObjectContext:receiveOn:)(0xD000000000000027, 0x800000000030D3F0, v10, v12, v13, v14, v16);
    v17 = sub_A9DE8();
    v18 = Publisher.eraseToAnyPublisher()(v5, v17);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
  else
  {
    v22 = 0;
    Just.init(_:)(&v22, &type metadata for Int);
    v19 = sub_32914((unint64_t *)&unk_3B68E0, &qword_3B68D8, (uint64_t)&protocol conformance descriptor for Just<A>);
    v18 = Publisher.eraseToAnyPublisher()(v1, v19);
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
  return v18;
}

unint64_t sub_A9DE8()
{
  unint64_t result;

  result = qword_3B68F0;
  if (!qword_3B68F0)
  {
    type metadata accessor for FetchedResultsCountPublisher(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for FetchedResultsCountPublisher);
    atomic_store(result, (unint64_t *)&qword_3B68F0);
  }
  return result;
}

uint64_t sub_A9E30()
{
  return LibraryObserverProvider.libraryChannelCountPublisher.getter();
}

uint64_t LibraryObserverProvider.libraryChannelCountPublisher.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  NSString v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v1 = type metadata accessor for FetchedResultsCountPublisher(0);
  v30 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v3 = (char *)&v29 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B68F8);
  v33 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B6900);
  v34 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "_applePodcastsFoundationSharedUserDefaults");
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(kMTChannelEntityName);
  v11 = v10;
  v12 = objc_msgSend((id)objc_opt_self(MTChannel), "predicateForLibraryChannel");
  v13 = objc_msgSend(*(id *)(v0 + 16), "privateQueueContext");
  v14 = sub_676C8();
  v15 = static OS_dispatch_queue.main.getter(v14);
  FetchedResultsCountPublisher.init(identifier:entityName:predicate:managedObjectContext:receiveOn:)(0xD00000000000001CLL, 0x800000000030D420, v9, v11, v12, v13, v15);
  v16 = swift_allocObject(&unk_37DF30, 24, 7);
  *(_QWORD *)(v16 + 16) = v8;
  v17 = sub_A9DE8();
  v18 = v8;
  Publisher.handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)(0, 0, sub_AA234, v16, 0, 0, 0, 0, 0, 0, v1, v17);
  swift_release(v16);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v3, v1);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B6908);
  v20 = swift_allocObject(v19, 40, 7);
  *(_OWORD *)(v20 + 16) = xmmword_2EA0D0;
  v21 = String._bridgeToObjectiveC()();
  v22 = objc_msgSend(v18, "integerForKey:", v21);

  *(_QWORD *)(v20 + 32) = v22;
  v23 = sub_32914(&qword_3B6910, &qword_3B68F8, (uint64_t)&protocol conformance descriptor for Publishers.HandleEvents<A>);
  v24 = v31;
  Publisher.prepend(_:)(v20, v31, v23);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v33 + 8))(v5, v24);
  v25 = sub_32914(&qword_3B6918, &qword_3B6900, (uint64_t)&protocol conformance descriptor for Publishers.Concatenate<A, B>);
  v26 = v32;
  v27 = Publisher.eraseToAnyPublisher()(v32, v25);

  (*(void (**)(char *, uint64_t))(v34 + 8))(v7, v26);
  return v27;
}

void sub_AA1A0(uint64_t a1, void *a2)
{
  Class isa;
  id v4;

  isa = Int._bridgeToObjectiveC()().super.super.isa;
  v4 = String._bridgeToObjectiveC()();
  objc_msgSend(a2, "setValue:forKey:", isa, v4);

}

uint64_t sub_AA210()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_AA234(uint64_t a1)
{
  uint64_t v1;

  sub_AA1A0(a1, *(void **)(v1 + 16));
}

uint64_t type metadata accessor for LibraryObserverProvider()
{
  return objc_opt_self(_TtC8ShelfKit23LibraryObserverProvider);
}

uint64_t method lookup function for LibraryObserverProvider(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for LibraryObserverProvider);
}

unint64_t sub_AA268()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B69D0);
  v1 = swift_allocObject(v0, 1696, 7);
  *(_OWORD *)(v1 + 16) = xmmword_2F1EE0;
  *(_QWORD *)(v1 + 32) = 0x6E6F69746341;
  *(_QWORD *)(v1 + 40) = 0xE600000000000000;
  v50 = type metadata accessor for Action(0);
  v49 = sub_F1C0((unint64_t *)&qword_3B28E8, (void (*)(uint64_t))type metadata accessor for Action, (uint64_t)&protocol conformance descriptor for Action);
  *(_QWORD *)(v1 + 48) = v50;
  *(_QWORD *)(v1 + 56) = v49;
  *(_QWORD *)(v1 + 64) = 0x7463417472656C41;
  *(_QWORD *)(v1 + 72) = 0xEB000000006E6F69;
  v48 = type metadata accessor for AlertAction(0);
  v47 = sub_F1C0(&qword_3B69D8, (void (*)(uint64_t))type metadata accessor for AlertAction, (uint64_t)&protocol conformance descriptor for Action);
  *(_QWORD *)(v1 + 80) = v48;
  *(_QWORD *)(v1 + 88) = v47;
  *(_QWORD *)(v1 + 96) = 0xD000000000000012;
  *(_QWORD *)(v1 + 104) = 0x800000000030D4B0;
  v46 = type metadata accessor for ChannelOfferAction(0);
  v45 = sub_F1C0(&qword_3B69E0, (void (*)(uint64_t))type metadata accessor for ChannelOfferAction, (uint64_t)&protocol conformance descriptor for Action);
  *(_QWORD *)(v1 + 112) = v46;
  *(_QWORD *)(v1 + 120) = v45;
  *(_QWORD *)(v1 + 128) = 0xD000000000000018;
  *(_QWORD *)(v1 + 136) = 0x800000000030D4D0;
  v44 = type metadata accessor for ChannelPowerSwooshAction(0);
  v43 = sub_F1C0(&qword_3B69E8, (void (*)(uint64_t))type metadata accessor for ChannelPowerSwooshAction, (uint64_t)&protocol conformance descriptor for Action);
  *(_QWORD *)(v1 + 144) = v44;
  *(_QWORD *)(v1 + 152) = v43;
  strcpy((char *)(v1 + 160), "CompoundAction");
  *(_BYTE *)(v1 + 175) = -18;
  v42 = type metadata accessor for CompoundAction(0);
  v41 = sub_F1C0(&qword_3B69F0, (void (*)(uint64_t))type metadata accessor for CompoundAction, (uint64_t)&protocol conformance descriptor for Action);
  *(_QWORD *)(v1 + 176) = v42;
  *(_QWORD *)(v1 + 184) = v41;
  strcpy((char *)(v1 + 192), "DismissAction");
  *(_WORD *)(v1 + 206) = -4864;
  v40 = type metadata accessor for DismissAction(0);
  v39 = sub_F1C0(&qword_3B69F8, (void (*)(uint64_t))type metadata accessor for DismissAction, (uint64_t)&protocol conformance descriptor for Action);
  *(_QWORD *)(v1 + 208) = v40;
  *(_QWORD *)(v1 + 216) = v39;
  *(_QWORD *)(v1 + 224) = 0xD000000000000014;
  *(_QWORD *)(v1 + 232) = 0x800000000030D4F0;
  v36 = type metadata accessor for EpisodeContextAction(0);
  v35 = sub_F1C0(&qword_3B6A00, (void (*)(uint64_t))type metadata accessor for EpisodeContextAction, (uint64_t)&protocol conformance descriptor for Action);
  *(_QWORD *)(v1 + 240) = v36;
  *(_QWORD *)(v1 + 248) = v35;
  *(_QWORD *)(v1 + 256) = 0xD000000000000012;
  *(_QWORD *)(v1 + 264) = 0x800000000030D510;
  v32 = type metadata accessor for EpisodeOfferAction(0);
  v31 = sub_F1C0(&qword_3B6A08, (void (*)(uint64_t))type metadata accessor for EpisodeOfferAction, (uint64_t)&protocol conformance descriptor for Action);
  *(_QWORD *)(v1 + 272) = v32;
  *(_QWORD *)(v1 + 280) = v31;
  *(_QWORD *)(v1 + 288) = 0xD000000000000011;
  *(_QWORD *)(v1 + 296) = 0x800000000030D530;
  v2 = type metadata accessor for ExternalUrlAction(0);
  v37 = sub_F1C0(&qword_3B6A10, (void (*)(uint64_t))type metadata accessor for ExternalUrlAction, (uint64_t)&protocol conformance descriptor for Action);
  v38 = v2;
  *(_QWORD *)(v1 + 304) = v2;
  *(_QWORD *)(v1 + 312) = v37;
  *(_QWORD *)(v1 + 320) = 0xD000000000000011;
  *(_QWORD *)(v1 + 328) = 0x800000000030D550;
  *(_QWORD *)(v1 + 336) = v2;
  *(_QWORD *)(v1 + 344) = v37;
  *(_QWORD *)(v1 + 352) = 0x69746341776F6C46;
  *(_QWORD *)(v1 + 360) = 0xEA00000000006E6FLL;
  v27 = type metadata accessor for FlowAction(0);
  v26 = sub_F1C0((unint64_t *)&qword_3B0C40, (void (*)(uint64_t))type metadata accessor for FlowAction, (uint64_t)&protocol conformance descriptor for Action);
  *(_QWORD *)(v1 + 368) = v27;
  *(_QWORD *)(v1 + 376) = v26;
  *(_QWORD *)(v1 + 384) = 0x6974634170747448;
  *(_QWORD *)(v1 + 392) = 0xEA00000000006E6FLL;
  v3 = type metadata accessor for HttpAction(0);
  v33 = sub_F1C0(&qword_3B6A18, (void (*)(uint64_t))type metadata accessor for HttpAction, (uint64_t)&protocol conformance descriptor for Action);
  v34 = v3;
  *(_QWORD *)(v1 + 400) = v3;
  *(_QWORD *)(v1 + 408) = v33;
  *(_QWORD *)(v1 + 416) = 0x6974634150545448;
  *(_QWORD *)(v1 + 424) = 0xEA00000000006E6FLL;
  *(_QWORD *)(v1 + 432) = v3;
  *(_QWORD *)(v1 + 440) = v33;
  *(_QWORD *)(v1 + 448) = 0xD000000000000012;
  *(_QWORD *)(v1 + 456) = 0x800000000030D570;
  v4 = type metadata accessor for HttpTemplateAction(0);
  v5 = sub_F1C0(&qword_3B6A20, (void (*)(uint64_t))type metadata accessor for HttpTemplateAction, (uint64_t)&protocol conformance descriptor for Action);
  *(_QWORD *)(v1 + 464) = v4;
  *(_QWORD *)(v1 + 472) = v5;
  *(_QWORD *)(v1 + 480) = 0xD000000000000012;
  *(_QWORD *)(v1 + 488) = 0x800000000030D590;
  *(_QWORD *)(v1 + 496) = v4;
  *(_QWORD *)(v1 + 504) = v5;
  *(_QWORD *)(v1 + 512) = 0x746341687475414FLL;
  *(_QWORD *)(v1 + 520) = 0xEB000000006E6F69;
  v15 = type metadata accessor for OAuthAction(0);
  v14 = sub_F1C0(&qword_3B6A28, (void (*)(uint64_t))type metadata accessor for OAuthAction, (uint64_t)&protocol conformance descriptor for Action);
  *(_QWORD *)(v1 + 528) = v15;
  *(_QWORD *)(v1 + 536) = v14;
  *(_QWORD *)(v1 + 544) = 0x6974634179616C50;
  *(_QWORD *)(v1 + 552) = 0xEA00000000006E6FLL;
  v10 = type metadata accessor for PlayAction(0);
  v30 = sub_F1C0(&qword_3B6A30, (void (*)(uint64_t))type metadata accessor for PlayAction, (uint64_t)&protocol conformance descriptor for Action);
  *(_QWORD *)(v1 + 560) = v10;
  *(_QWORD *)(v1 + 568) = v30;
  *(_QWORD *)(v1 + 576) = 0x7565755179616C50;
  *(_QWORD *)(v1 + 584) = 0xEF6E6F6974634165;
  v29 = type metadata accessor for PlayQueueAction(0);
  v28 = sub_F1C0(&qword_3B6A38, (void (*)(uint64_t))type metadata accessor for PlayQueueAction, (uint64_t)&protocol conformance descriptor for Action);
  *(_QWORD *)(v1 + 592) = v29;
  *(_QWORD *)(v1 + 600) = v28;
  *(_QWORD *)(v1 + 608) = 0xD000000000000014;
  *(_QWORD *)(v1 + 616) = 0x800000000030D5B0;
  v25 = type metadata accessor for PodcastContextAction(0);
  v24 = sub_F1C0(&qword_3B6A40, (void (*)(uint64_t))type metadata accessor for PodcastContextAction, (uint64_t)&protocol conformance descriptor for Action);
  *(_QWORD *)(v1 + 624) = v25;
  *(_QWORD *)(v1 + 632) = v24;
  *(_QWORD *)(v1 + 640) = 0xD000000000000012;
  *(_QWORD *)(v1 + 648) = 0x800000000030D5D0;
  v23 = type metadata accessor for PodcastOfferAction(0);
  v22 = sub_F1C0(&qword_3B6A48, (void (*)(uint64_t))type metadata accessor for PodcastOfferAction, (uint64_t)&protocol conformance descriptor for Action);
  *(_QWORD *)(v1 + 656) = v23;
  *(_QWORD *)(v1 + 664) = v22;
  *(_QWORD *)(v1 + 672) = 0xD000000000000011;
  *(_QWORD *)(v1 + 680) = 0x800000000030D5F0;
  v21 = type metadata accessor for PodcastPlayAction(0);
  v20 = sub_F1C0(&qword_3B6A50, (void (*)(uint64_t))type metadata accessor for PodcastPlayAction, (uint64_t)&protocol conformance descriptor for Action);
  *(_QWORD *)(v1 + 688) = v21;
  *(_QWORD *)(v1 + 696) = v20;
  *(_QWORD *)(v1 + 704) = 0xD000000000000017;
  *(_QWORD *)(v1 + 712) = 0x800000000030D610;
  v19 = type metadata accessor for PresentNowPlayingAction(0);
  v18 = sub_F1C0(&qword_3B6A58, (void (*)(uint64_t))type metadata accessor for PresentNowPlayingAction, (uint64_t)&protocol conformance descriptor for Action);
  *(_QWORD *)(v1 + 720) = v19;
  *(_QWORD *)(v1 + 728) = v18;
  strcpy((char *)(v1 + 736), "SearchAction");
  *(_BYTE *)(v1 + 749) = 0;
  *(_WORD *)(v1 + 750) = -5120;
  v17 = type metadata accessor for SearchAction(0);
  v16 = sub_F1C0(&qword_3B6A60, (void (*)(uint64_t))type metadata accessor for SearchAction, (uint64_t)&protocol conformance descriptor for SearchAction);
  *(_QWORD *)(v1 + 752) = v17;
  *(_QWORD *)(v1 + 760) = v16;
  *(_QWORD *)(v1 + 768) = 0xD000000000000010;
  *(_QWORD *)(v1 + 776) = 0x800000000030D630;
  v13 = type metadata accessor for ShareSheetAction(0);
  v12 = sub_F1C0(&qword_3B6A68, (void (*)(uint64_t))type metadata accessor for ShareSheetAction, (uint64_t)&protocol conformance descriptor for ShareSheetAction);
  *(_QWORD *)(v1 + 784) = v13;
  *(_QWORD *)(v1 + 792) = v12;
  *(_QWORD *)(v1 + 800) = 0x7463417465656853;
  *(_QWORD *)(v1 + 808) = 0xEB000000006E6F69;
  v11 = type metadata accessor for SheetAction(0);
  v6 = sub_F1C0(&qword_3B2808, (void (*)(uint64_t))type metadata accessor for SheetAction, (uint64_t)&protocol conformance descriptor for Action);
  *(_QWORD *)(v1 + 816) = v11;
  *(_QWORD *)(v1 + 824) = v6;
  *(_QWORD *)(v1 + 832) = 0x676E616843626154;
  *(_QWORD *)(v1 + 840) = 0xEF6E6F6974634165;
  v7 = type metadata accessor for TabChangeAction(0);
  v8 = sub_F1C0(&qword_3B6A70, (void (*)(uint64_t))type metadata accessor for TabChangeAction, (uint64_t)&protocol conformance descriptor for Action);
  *(_BYTE *)(v1 + 877) = 0;
  *(_WORD *)(v1 + 878) = -5120;
  *(_QWORD *)(v1 + 880) = v50;
  *(_QWORD *)(v1 + 888) = v49;
  *(_QWORD *)(v1 + 912) = v48;
  *(_QWORD *)(v1 + 920) = v47;
  *(_QWORD *)(v1 + 944) = v46;
  *(_QWORD *)(v1 + 952) = v45;
  *(_QWORD *)(v1 + 976) = v44;
  *(_QWORD *)(v1 + 984) = v43;
  *(_QWORD *)(v1 + 992) = 0xD000000000000014;
  *(_QWORD *)(v1 + 1008) = v42;
  *(_QWORD *)(v1 + 1016) = v41;
  *(_QWORD *)(v1 + 1040) = v40;
  *(_QWORD *)(v1 + 1048) = v39;
  *(_QWORD *)(v1 + 1072) = v36;
  *(_QWORD *)(v1 + 1080) = v35;
  *(_QWORD *)(v1 + 1104) = v32;
  *(_QWORD *)(v1 + 1112) = v31;
  *(_QWORD *)(v1 + 1200) = v27;
  *(_QWORD *)(v1 + 1208) = v26;
  *(_QWORD *)(v1 + 1360) = v15;
  *(_QWORD *)(v1 + 1368) = v14;
  *(_QWORD *)(v1 + 1392) = v10;
  strcpy((char *)(v1 + 864), "LegacyAction");
  *(_QWORD *)(v1 + 904) = 0x800000000030D650;
  *(_QWORD *)(v1 + 936) = 0x800000000030D670;
  *(_QWORD *)(v1 + 960) = 0xD00000000000001ELL;
  *(_QWORD *)(v1 + 968) = 0x800000000030D690;
  *(_QWORD *)(v1 + 1000) = 0x800000000030D6B0;
  *(_QWORD *)(v1 + 1024) = 0xD000000000000013;
  *(_QWORD *)(v1 + 848) = v7;
  *(_QWORD *)(v1 + 1032) = 0x800000000030D6D0;
  *(_QWORD *)(v1 + 856) = v8;
  *(_QWORD *)(v1 + 1064) = 0x800000000030D6F0;
  *(_QWORD *)(v1 + 896) = 0xD000000000000011;
  *(_QWORD *)(v1 + 1096) = 0x800000000030D710;
  *(_QWORD *)(v1 + 928) = 0xD000000000000018;
  *(_QWORD *)(v1 + 1128) = 0x800000000030D730;
  *(_QWORD *)(v1 + 1160) = 0x800000000030D750;
  *(_QWORD *)(v1 + 1056) = 0xD00000000000001ALL;
  *(_QWORD *)(v1 + 1088) = 0xD000000000000018;
  *(_QWORD *)(v1 + 1120) = 0xD000000000000017;
  *(_QWORD *)(v1 + 1136) = v38;
  *(_QWORD *)(v1 + 1144) = v37;
  *(_QWORD *)(v1 + 1152) = 0xD000000000000017;
  *(_QWORD *)(v1 + 1168) = v38;
  *(_QWORD *)(v1 + 1176) = v37;
  *(_QWORD *)(v1 + 1184) = 0xD000000000000010;
  *(_QWORD *)(v1 + 1192) = 0x800000000030D770;
  *(_QWORD *)(v1 + 1216) = 0xD000000000000010;
  *(_QWORD *)(v1 + 1224) = 0x800000000030D790;
  *(_QWORD *)(v1 + 1232) = v34;
  *(_QWORD *)(v1 + 1240) = v33;
  *(_QWORD *)(v1 + 1248) = 0xD000000000000010;
  *(_QWORD *)(v1 + 1256) = 0x800000000030D7B0;
  *(_QWORD *)(v1 + 1264) = v34;
  *(_QWORD *)(v1 + 1272) = v33;
  *(_QWORD *)(v1 + 1280) = 0xD000000000000018;
  *(_QWORD *)(v1 + 1288) = 0x800000000030D7D0;
  *(_QWORD *)(v1 + 1296) = v4;
  *(_QWORD *)(v1 + 1304) = v5;
  *(_QWORD *)(v1 + 1312) = 0xD000000000000018;
  *(_QWORD *)(v1 + 1320) = 0x800000000030D7F0;
  *(_QWORD *)(v1 + 1328) = v4;
  *(_QWORD *)(v1 + 1336) = v5;
  *(_QWORD *)(v1 + 1344) = 0xD000000000000011;
  *(_QWORD *)(v1 + 1352) = 0x800000000030D810;
  *(_QWORD *)(v1 + 1376) = 0xD000000000000010;
  *(_QWORD *)(v1 + 1384) = 0x800000000030D830;
  *(_QWORD *)(v1 + 1400) = v30;
  *(_QWORD *)(v1 + 1408) = 0xD000000000000015;
  *(_QWORD *)(v1 + 1416) = 0x800000000030D850;
  *(_QWORD *)(v1 + 1424) = v29;
  *(_QWORD *)(v1 + 1432) = v28;
  *(_QWORD *)(v1 + 1440) = 0xD00000000000001ALL;
  *(_QWORD *)(v1 + 1448) = 0x800000000030D870;
  *(_QWORD *)(v1 + 1456) = v25;
  *(_QWORD *)(v1 + 1464) = v24;
  *(_QWORD *)(v1 + 1472) = 0xD000000000000018;
  *(_QWORD *)(v1 + 1480) = 0x800000000030D890;
  *(_QWORD *)(v1 + 1488) = v23;
  *(_QWORD *)(v1 + 1496) = v22;
  *(_QWORD *)(v1 + 1504) = 0xD000000000000017;
  *(_QWORD *)(v1 + 1512) = 0x800000000030D8B0;
  *(_QWORD *)(v1 + 1520) = v21;
  *(_QWORD *)(v1 + 1528) = v20;
  *(_QWORD *)(v1 + 1536) = 0xD00000000000001DLL;
  *(_QWORD *)(v1 + 1544) = 0x800000000030D8D0;
  *(_QWORD *)(v1 + 1552) = v19;
  *(_QWORD *)(v1 + 1560) = v18;
  *(_QWORD *)(v1 + 1568) = 0xD000000000000012;
  *(_QWORD *)(v1 + 1576) = 0x800000000030D8F0;
  *(_QWORD *)(v1 + 1584) = v17;
  *(_QWORD *)(v1 + 1592) = v16;
  *(_QWORD *)(v1 + 1600) = 0xD000000000000016;
  *(_QWORD *)(v1 + 1608) = 0x800000000030D910;
  *(_QWORD *)(v1 + 1616) = v13;
  *(_QWORD *)(v1 + 1624) = v12;
  *(_QWORD *)(v1 + 1632) = 0xD000000000000011;
  *(_QWORD *)(v1 + 1640) = 0x800000000030D930;
  *(_QWORD *)(v1 + 1648) = v11;
  *(_QWORD *)(v1 + 1656) = v6;
  *(_QWORD *)(v1 + 1664) = 0xD000000000000015;
  *(_QWORD *)(v1 + 1672) = 0x800000000030D950;
  *(_QWORD *)(v1 + 1680) = v7;
  *(_QWORD *)(v1 + 1688) = v8;
  result = sub_2886A8(v1);
  qword_3B69C0 = result;
  return result;
}

uint64_t static ActionKinds.table.getter()
{
  if (qword_3B00A8 != -1)
    swift_once(&qword_3B00A8, sub_AA268);
  return swift_bridgeObjectRetain(qword_3B69C0);
}

unint64_t sub_AAE84()
{
  unint64_t result;

  result = qword_3B69C8;
  if (!qword_3B69C8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ActionKinds);
    atomic_store(result, (unint64_t *)&qword_3B69C8);
  }
  return result;
}

unint64_t sub_AAEC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  if (qword_3B00A8 != -1)
    swift_once(&qword_3B00A8, sub_AA268);
  v0 = qword_3B69C0;
  v1 = swift_bridgeObjectRetain(qword_3B69C0);
  v2 = _defaultActionKindLookup.getter(v1);
  v3 = sub_211F68(v2, v0);
  v4 = sub_211FE4(v3);
  swift_bridgeObjectRelease();
  return v4;
}

_QWORD *sub_AAF50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_210E24(a1, a2, a3);
}

ValueMetadata *type metadata accessor for ActionKinds()
{
  return &type metadata for ActionKinds;
}

void NativeImpressionMetricsItem.assertItemHasNoImpressionMetrics(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  id v4;

  v2 = type metadata accessor for ImpressionMetrics(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 1, v2) != 1)
  {
    v3 = static os_log_type_t.error.getter();
    sub_327F8(0, (unint64_t *)&qword_3B0CF0, OS_os_log_ptr);
    v4 = (id)static OS_os_log.metrics.getter();
    os_log(_:dso:log:_:_:)(v3, &dword_0, v4, "tried to generate impressions but impressions are already there", 63, 2, _swiftEmptyArrayStorage);

  }
}

Swift::String __swiftcall NativeImpressionMetricsItem.generateImpressionId(from:)(Swift::String from)
{
  unint64_t v1;
  uint64_t v2;
  void *v3;
  Swift::String result;
  _QWORD v5[2];
  _QWORD v6[2];
  Swift::String v7;

  v7 = from;
  v6[0] = 32;
  v6[1] = 0xE100000000000000;
  v5[0] = 0;
  v5[1] = 0xE000000000000000;
  v1 = sub_65CC4();
  v2 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(v6, v5, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v1, v1, v1);
  result._object = v3;
  result._countAndFlagsBits = v2;
  return result;
}

void ImpressionFields.metricsFields.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  void *v8;
  char v9;
  _OWORD v10[2];
  __int128 v11;
  void *v12;
  void *v13;

  v2 = *v0;
  v1 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  v5 = *((unsigned __int8 *)v0 + 40);
  v12 = &type metadata for String;
  if (!v4)
    v3 = 0;
  v6 = 0xE000000000000000;
  if (v4)
    v6 = v4;
  *(_QWORD *)&v11 = v3;
  *((_QWORD *)&v11 + 1) = v6;
  sub_1F460(&v11, v10);
  swift_bridgeObjectRetain(v4);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  v13 = &_swiftEmptyDictionarySingleton;
  sub_1D728(v10, 1701667182, 0xE400000000000000, isUniquelyReferenced_nonNull_native);
  v8 = v13;
  swift_bridgeObjectRelease();
  v12 = &type metadata for String;
  *(_QWORD *)&v11 = v2;
  *((_QWORD *)&v11 + 1) = v1;
  sub_1F460(&v11, v10);
  swift_bridgeObjectRetain(v1);
  v9 = swift_isUniquelyReferenced_nonNull_native(v8);
  sub_1D728(v10, 0x6973736572706D69, 0xEE00657079546E6FLL, v9);
  v13 = v8;
  swift_bridgeObjectRelease();
  __asm { BR              X11 }
}

uint64_t sub_AB1DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  id v21;
  uint64_t v22;
  char v23;
  id v24;
  char v25;
  char v26;
  uint64_t v27;
  id v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;

  v38 = v8;
  strcpy((char *)&v37, "editorial_id");
  BYTE13(v37) = 0;
  HIWORD(v37) = -5120;
  sub_1F460(&v37, &v39);
  if (v40)
  {
    sub_1F460(&v39, &v37);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v1);
    sub_1D728(&v37, 0x657079546469, 0xE600000000000000, isUniquelyReferenced_nonNull_native);
    v41 = v1;
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_298FC((uint64_t)&v39);
    sub_1D560(0x657079546469, 0xE600000000000000, &v37);
    sub_298FC((uint64_t)&v37);
  }
  swift_bridgeObjectRetain(v0);
  swift_bridgeObjectRetain_n(v3, 2);
  swift_bridgeObjectRetain(v4);
  v10 = swift_bridgeObjectRetain(v2);
  v12 = ((uint64_t (*)(uint64_t))static MetricsTargetType.bubbleTip.getter)(v10);
  if (v5 == v12 && v3 == v11)
  {
    v13 = v6;
    swift_bridgeObjectRelease_n(v3, 2);
LABEL_8:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v16 = 0xE200000000000000;
    v17 = 12589;
    goto LABEL_9;
  }
  v14 = v7;
  v13 = v6;
  v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v3, v12, v11, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v15 & 1) != 0)
    goto LABEL_8;
  v30 = swift_bridgeObjectRetain(v3);
  v32 = ((uint64_t (*)(uint64_t))static MetricsTargetType.banner.getter)(v30);
  if (v5 == v32 && v3 == v31)
  {
    swift_bridgeObjectRelease_n(v3, 2);
LABEL_21:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v16 = 0xE100000000000000;
    v17 = 48;
    goto LABEL_9;
  }
  v33 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v3, v32, v31, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v33 & 1) != 0)
    goto LABEL_21;
  *(_QWORD *)&v39 = v14;
  v17 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v16 = v34;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_9:
  v40 = v8;
  *(_QWORD *)&v39 = v17;
  *((_QWORD *)&v39 + 1) = v16;
  sub_1F460(&v39, &v37);
  v18 = v41;
  v19 = swift_isUniquelyReferenced_nonNull_native(v41);
  sub_1D728(&v37, 0x6973736572706D69, 0xEF7865646E496E6FLL, v19);
  swift_bridgeObjectRelease();
  if (v2)
  {
    v40 = v8;
    *(_QWORD *)&v39 = v35;
    *((_QWORD *)&v39 + 1) = v2;
    sub_1F460(&v39, &v37);
    swift_bridgeObjectRetain(v2);
    v20 = swift_isUniquelyReferenced_nonNull_native(v18);
    sub_1D728(&v37, 0x416C656E6E616863, 0xED000064496D6164, v20);
    swift_bridgeObjectRelease();
  }
  v21 = objc_msgSend(objc_allocWithZone((Class)NSNull), *(SEL *)(v13 + 368));
  v22 = sub_327F8(0, &qword_3B6A78, NSNull_ptr);
  v40 = v22;
  *(_QWORD *)&v39 = v21;
  sub_1F460(&v39, &v37);
  v23 = swift_isUniquelyReferenced_nonNull_native(v18);
  sub_1D728(&v37, 0x796C696D61467369, 0xE800000000000000, v23);
  swift_bridgeObjectRelease();
  v24 = objc_msgSend(objc_allocWithZone((Class)NSNull), *(SEL *)(v13 + 368));
  v40 = v22;
  *(_QWORD *)&v39 = v24;
  sub_1F460(&v39, &v37);
  v25 = swift_isUniquelyReferenced_nonNull_native(v18);
  sub_1D728(&v37, 0x6E65647574537369, 0xE900000000000074, v25);
  v41 = v18;
  swift_bridgeObjectRelease();
  if (!v0)
  {
    v28 = objc_msgSend(objc_allocWithZone((Class)NSNull), *(SEL *)(v13 + 368));
    v40 = v22;
    *(_QWORD *)&v39 = v28;
    if (v22)
      goto LABEL_13;
LABEL_15:
    swift_bridgeObjectRetain(v0);
    sub_298FC((uint64_t)&v39);
    sub_1D560(0x6C69626967696C65, 0xEF65707954797469, &v37);
    sub_298FC((uint64_t)&v37);
    return v41;
  }
  v38 = v8;
  *(_QWORD *)&v37 = v36;
  *((_QWORD *)&v37 + 1) = v0;
  sub_1F460(&v37, &v39);
  if (!v40)
    goto LABEL_15;
LABEL_13:
  sub_1F460(&v39, &v37);
  swift_bridgeObjectRetain(v0);
  v26 = swift_isUniquelyReferenced_nonNull_native(v18);
  sub_1D728(&v37, 0x6C69626967696C65, 0xEF65707954797469, v26);
  v27 = v18;
  swift_bridgeObjectRelease();
  return v27;
}

uint64_t ImpressionFields.init(type:name:impressionIndex:idType:channelAdamId:eligibilityType:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  char v11;

  v11 = *a6;
  *(_QWORD *)a9 = result;
  *(_QWORD *)(a9 + 8) = a2;
  *(_QWORD *)(a9 + 16) = a3;
  *(_QWORD *)(a9 + 24) = a4;
  *(_QWORD *)(a9 + 32) = a5;
  *(_BYTE *)(a9 + 40) = v11;
  *(_QWORD *)(a9 + 48) = a7;
  *(_QWORD *)(a9 + 56) = a8;
  *(_QWORD *)(a9 + 64) = a10;
  *(_QWORD *)(a9 + 72) = a11;
  return result;
}

uint64_t destroy for ImpressionFields(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[7]);
  return swift_bridgeObjectRelease(a1[9]);
}

uint64_t initializeWithCopy for ImpressionFields(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v5;
  v6 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v6;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

uint64_t assignWithCopy for ImpressionFields(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v8 = *(_QWORD *)(a2 + 56);
  v9 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v10 = *(_QWORD *)(a2 + 72);
  v11 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  return a1;
}

__n128 __swift_memcpy80_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t assignWithTake for ImpressionFields(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 56);
  v9 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 72);
  v11 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v10;
  swift_bridgeObjectRelease(v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for ImpressionFields(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 80))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ImpressionFields(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ImpressionFields()
{
  return &type metadata for ImpressionFields;
}

void sub_ABA0C(_BYTE *a1@<X8>)
{
  static ShelfCell.artworkPosition.getter(a1);
}

uint64_t sub_ABA20@<X0>(uint64_t a1@<X8>)
{
  _BYTE v3[40];

  static ShelfCell.cellShape(presentation:)((uint64_t)v3);
  return sub_ABE2C((uint64_t)v3, a1);
}

double static ShelfCell.cellShape(presentation:)@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 32) = -1;
  return result;
}

double static ShelfCellGridCustomizations.separatorInGridLeadingOffset(presentation:)()
{
  return 0.0;
}

unint64_t sub_ABA78()
{
  unint64_t result;

  result = qword_3B6A80;
  if (!qword_3B6A80)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ShelfArtworkPosition);
    atomic_store(result, (unint64_t *)&qword_3B6A80);
  }
  return result;
}

uint64_t dispatch thunk of static ShelfCell.sectionTopInset(presentation:environment:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of static ShelfCell.sectionBottomInset(presentation:environment:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t dispatch thunk of PresenterProtocol.update(ignoringCache:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t dispatch thunk of static ShelfCellGridCustomizations.rowSpacing(presentation:environment:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t storeEnumTagSinglePayload for ShelfCellEnvironment(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_ABB7C + 4 * byte_2F2015[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_ABBB0 + 4 * asc_2F2010[v4]))();
}

uint64_t sub_ABBB0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_ABBB8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xABBC0);
  return result;
}

uint64_t sub_ABBCC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xABBD4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_ABBD8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_ABBE0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ShelfCellEnvironment()
{
  return &type metadata for ShelfCellEnvironment;
}

uint64_t storeEnumTagSinglePayload for ShelfArtworkPosition(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_ABC48 + 4 * byte_2F201F[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_ABC7C + 4 * byte_2F201A[v4]))();
}

uint64_t sub_ABC7C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_ABC84(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xABC8CLL);
  return result;
}

uint64_t sub_ABC98(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xABCA0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_ABCA4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_ABCAC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ShelfArtworkPosition()
{
  return &type metadata for ShelfArtworkPosition;
}

uint64_t getEnumTagSinglePayload for DownloadButtonPresenter.State(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for DownloadButtonPresenter.State(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = 0;
    *(_BYTE *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 9) = v3;
  return result;
}

uint64_t sub_ABD18(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_ABD34(uint64_t result, int a2)
{
  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    *(_BYTE *)(result + 8) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for ShelfCellRowSpacing()
{
  return &type metadata for ShelfCellRowSpacing;
}

__n128 __swift_memcpy33_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for ShelfCellShape(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ShelfCellShape(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = -(char)a2;
  }
  return result;
}

uint64_t sub_ABE08(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32);
}

uint64_t sub_ABE10(uint64_t result, char a2)
{
  *(_BYTE *)(result + 32) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ShelfCellShape()
{
  return &type metadata for ShelfCellShape;
}

uint64_t sub_ABE2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B6A88);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

id ErrorPresenter.__allocating_init(networkObserver:reachabilityType:airplaneModeInquiry:cellularDataInquiry:)(uint64_t a1, _BYTE *a2, void *a3, void *a4)
{
  objc_class *v4;
  id v9;

  v9 = objc_allocWithZone(v4);
  return ErrorPresenter.init(networkObserver:reachabilityType:airplaneModeInquiry:cellularDataInquiry:)(a1, a2, a3, a4);
}

Swift::Void __swiftcall ErrorPresenter.update()()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  _BYTE *v4;
  int v5;
  _BYTE *v6;
  int v7;
  void *v8;
  _BYTE *v9;
  int v10;
  _BYTE *v11;
  int v12;
  _BYTE *v13;
  int v14;
  uint64_t v15;
  uint64_t Strong;
  uint64_t v17;
  uint64_t v18;
  uint64_t ObjectType;
  uint64_t v20;
  _BYTE v21[24];

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit14ErrorPresenter_networkObserver);
  v2 = (void *)objc_opt_self(IMNetworkObserver);
  v3 = *(void **)(v1 + 16);
  if (objc_msgSend(v2, "isLikelyToReachRemoteServerWithReachabilityFlags:", objc_msgSend(v3, "networkReachabilityFlags")))
  {
    v4 = (_BYTE *)(v0 + OBJC_IVAR____TtC8ShelfKit14ErrorPresenter_reasonForNoInternet);
    swift_beginAccess(v0 + OBJC_IVAR____TtC8ShelfKit14ErrorPresenter_reasonForNoInternet, v21, 1, 0);
    v5 = *v4;
    *v4 = 0;
    if (!v5)
      return;
  }
  else if (objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC8ShelfKit14ErrorPresenter_airplaneModeInquiry), "isEnabled"))
  {
    v6 = (_BYTE *)(v0 + OBJC_IVAR____TtC8ShelfKit14ErrorPresenter_reasonForNoInternet);
    swift_beginAccess(v0 + OBJC_IVAR____TtC8ShelfKit14ErrorPresenter_reasonForNoInternet, v21, 1, 0);
    v7 = *v6;
    *v6 = 2;
    if (v7 == 2)
      return;
  }
  else
  {
    v8 = *(void **)(v0 + OBJC_IVAR____TtC8ShelfKit14ErrorPresenter_cellularDataInquiry);
    if (objc_msgSend(v8, "isSupported")
      && (objc_msgSend(v8, "isEnabledForDevice") & 1) == 0)
    {
      v11 = (_BYTE *)(v0 + OBJC_IVAR____TtC8ShelfKit14ErrorPresenter_reasonForNoInternet);
      swift_beginAccess(v0 + OBJC_IVAR____TtC8ShelfKit14ErrorPresenter_reasonForNoInternet, v21, 1, 0);
      v12 = *v11;
      *v11 = 3;
      if (v12 == 3)
        return;
    }
    else if (objc_msgSend(v8, "isSupported")
           && (objc_msgSend(v3, "networkReachabilityFlags") & 0x40000) != 0
           && (objc_msgSend(v8, "isEnabledForBundle") & 1) == 0)
    {
      v13 = (_BYTE *)(v0 + OBJC_IVAR____TtC8ShelfKit14ErrorPresenter_reasonForNoInternet);
      swift_beginAccess(v0 + OBJC_IVAR____TtC8ShelfKit14ErrorPresenter_reasonForNoInternet, v21, 1, 0);
      v14 = *v13;
      *v13 = 4;
      if (v14 == 4)
        return;
    }
    else
    {
      v9 = (_BYTE *)(v0 + OBJC_IVAR____TtC8ShelfKit14ErrorPresenter_reasonForNoInternet);
      swift_beginAccess(v0 + OBJC_IVAR____TtC8ShelfKit14ErrorPresenter_reasonForNoInternet, v21, 1, 0);
      v10 = *v9;
      *v9 = 1;
      if (v10 == 1)
        return;
    }
  }
  v15 = v0 + OBJC_IVAR____TtC8ShelfKit14ErrorPresenter_view;
  swift_beginAccess(v0 + OBJC_IVAR____TtC8ShelfKit14ErrorPresenter_view, &v20, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v15);
  if (Strong)
  {
    v17 = Strong;
    v18 = *(_QWORD *)(v15 + 8);
    ObjectType = swift_getObjectType(Strong);
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(ObjectType, v18);
    swift_unknownObjectRelease(v17);
  }
}

void ErrorPresenter.title.getter()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v2[24];

  v1 = v0 + OBJC_IVAR____TtC8ShelfKit14ErrorPresenter_reasonForNoInternet;
  swift_beginAccess(v0 + OBJC_IVAR____TtC8ShelfKit14ErrorPresenter_reasonForNoInternet, v2, 0, 0);
  __asm { BR              X10 }
}

uint64_t sub_AC17C()
{
  id v0;
  Swift::String v1;
  Swift::String v2;
  uint64_t countAndFlagsBits;
  Swift::String v5;

  v0 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v5._object = (void *)0xE000000000000000;
  v1._countAndFlagsBits = 0x5F434952454E4547;
  v1._object = (void *)0xED0000524F525245;
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  v5._countAndFlagsBits = 0;
  countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v1, (Swift::String_optional)0, (NSBundle)v0, v2, v5)._countAndFlagsBits;

  return countAndFlagsBits;
}

id ErrorPresenter.init(networkObserver:reachabilityType:airplaneModeInquiry:cellularDataInquiry:)(uint64_t a1, _BYTE *a2, void *a3, void *a4)
{
  _BYTE *v4;
  _BYTE *v5;
  objc_class *ObjectType;
  char *v11;
  id v12;
  id v13;
  id v14;
  id v15;
  char v17[24];
  objc_super v18;

  v5 = v4;
  ObjectType = (objc_class *)swift_getObjectType(v5);
  LOBYTE(a2) = *a2;
  v11 = &v5[OBJC_IVAR____TtC8ShelfKit14ErrorPresenter_view];
  *((_QWORD *)v11 + 1) = 0;
  swift_unknownObjectWeakInit(v11, 0);
  v5[OBJC_IVAR____TtC8ShelfKit14ErrorPresenter_reasonForNoInternet] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC8ShelfKit14ErrorPresenter_error] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC8ShelfKit14ErrorPresenter_networkObserver] = a1;
  v5[OBJC_IVAR____TtC8ShelfKit14ErrorPresenter_reachabilityType] = (_BYTE)a2;
  *(_QWORD *)&v5[OBJC_IVAR____TtC8ShelfKit14ErrorPresenter_airplaneModeInquiry] = a3;
  *(_QWORD *)&v5[OBJC_IVAR____TtC8ShelfKit14ErrorPresenter_cellularDataInquiry] = a4;
  v18.receiver = v5;
  v18.super_class = ObjectType;
  swift_retain(a1);
  v12 = a3;
  v13 = a4;
  v14 = objc_msgSendSuper2(&v18, "init");
  swift_beginAccess(a1 + 24, v17, 1, 0);
  *(_QWORD *)(a1 + 32) = &protocol witness table for ErrorPresenter;
  swift_unknownObjectWeakAssign(a1 + 24, v14);
  v15 = v14;
  objc_msgSend(v12, "setDelegate:", v15);

  swift_release(a1);
  return v15;
}

uint64_t sub_AC3D4(unsigned __int8 *a1)
{
  uint64_t v1;
  int v2;
  _BYTE *v3;
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t ObjectType;
  uint64_t v10;
  _BYTE v11[24];

  v2 = *a1;
  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC8ShelfKit14ErrorPresenter_reasonForNoInternet);
  result = swift_beginAccess(v1 + OBJC_IVAR____TtC8ShelfKit14ErrorPresenter_reasonForNoInternet, v11, 1, 0);
  v5 = *v3;
  *v3 = v2;
  if (v5 != v2)
  {
    v6 = v1 + OBJC_IVAR____TtC8ShelfKit14ErrorPresenter_view;
    swift_beginAccess(v1 + OBJC_IVAR____TtC8ShelfKit14ErrorPresenter_view, &v10, 0, 0);
    result = swift_unknownObjectWeakLoadStrong(v6);
    if (result)
    {
      v7 = result;
      v8 = *(_QWORD *)(v6 + 8);
      ObjectType = swift_getObjectType(result);
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(ObjectType, v8);
      return swift_unknownObjectRelease(v7);
    }
  }
  return result;
}

uint64_t ErrorPresenter.view.getter()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = v0 + OBJC_IVAR____TtC8ShelfKit14ErrorPresenter_view;
  swift_beginAccess(v0 + OBJC_IVAR____TtC8ShelfKit14ErrorPresenter_view, v3, 0, 0);
  return swift_unknownObjectWeakLoadStrong(v1);
}

uint64_t ErrorPresenter.view.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  _BYTE v7[24];

  v5 = v2 + OBJC_IVAR____TtC8ShelfKit14ErrorPresenter_view;
  swift_beginAccess(v5, v7, 1, 0);
  *(_QWORD *)(v5 + 8) = a2;
  swift_unknownObjectWeakAssign(v5, a1);
  return swift_unknownObjectRelease(a1);
}

void (*ErrorPresenter.view.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t Strong;
  uint64_t v7;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC8ShelfKit14ErrorPresenter_view;
  v3[5] = v1;
  v3[6] = v4;
  v5 = v1 + v4;
  swift_beginAccess(v1 + v4, v3, 33, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v5);
  v7 = *(_QWORD *)(v5 + 8);
  v3[3] = Strong;
  v3[4] = v7;
  return sub_AC5A4;
}

void sub_AC5A4(uint64_t a1, char a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD **)a1;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 40) + *(_QWORD *)(*(_QWORD *)a1 + 48);
  *(_QWORD *)(v6 + 8) = v5;
  swift_unknownObjectWeakAssign(v6, v4);
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRelease(v3[3]);
    swift_endAccess(v3);
  }
  else
  {
    swift_endAccess(v3);
    swift_unknownObjectRelease(v4);
  }
  free(v3);
}

uint64_t ErrorPresenter.reasonForNoInternet.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;
  _BYTE v5[24];

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC8ShelfKit14ErrorPresenter_reasonForNoInternet);
  result = swift_beginAccess(v3, v5, 0, 0);
  *a1 = *v3;
  return result;
}

uint64_t ErrorPresenter.reachabilityType.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;
  _BYTE v5[24];

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC8ShelfKit14ErrorPresenter_reachabilityType);
  result = swift_beginAccess(v3, v5, 0, 0);
  *a1 = *v3;
  return result;
}

uint64_t ErrorPresenter.reachabilityType.setter(char *a1)
{
  uint64_t v1;
  char v2;
  _BYTE *v3;
  uint64_t result;
  _BYTE v5[24];

  v2 = *a1;
  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC8ShelfKit14ErrorPresenter_reachabilityType);
  result = swift_beginAccess(v1 + OBJC_IVAR____TtC8ShelfKit14ErrorPresenter_reachabilityType, v5, 1, 0);
  *v3 = v2;
  return result;
}

uint64_t (*ErrorPresenter.reachabilityType.modify(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC8ShelfKit14ErrorPresenter_reachabilityType, a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t ErrorPresenter.message.getter()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  __CFString *v4;
  __CFString *v5;
  Class isa;
  unsigned int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  _QWORD *v10;
  uint64_t ErrorValue;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[8];
  _BYTE v22[24];
  _BYTE v23[24];

  v1 = ASKBuildTypeGetCurrent();
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B6AC8);
  v3 = swift_allocObject(v2, 48, 7);
  *(_OWORD *)(v3 + 16) = xmmword_2EA080;
  *(_QWORD *)(v3 + 32) = CFSTR("debug");
  *(_QWORD *)(v3 + 40) = CFSTR("internal");
  type metadata accessor for BuildType(0);
  v4 = CFSTR("debug");
  v5 = CFSTR("internal");
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v7 = ASKBuildTypeIsAnyOf((uint64_t)v1, isa);

  v8 = 0;
  if (v7)
  {
    v9 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC8ShelfKit14ErrorPresenter_reasonForNoInternet);
    swift_beginAccess(v0 + OBJC_IVAR____TtC8ShelfKit14ErrorPresenter_reasonForNoInternet, v23, 0, 0);
    v8 = 0;
    if (*v9 <= 1u)
    {
      v10 = (_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit14ErrorPresenter_error);
      swift_beginAccess(v0 + OBJC_IVAR____TtC8ShelfKit14ErrorPresenter_error, v22, 0, 0);
      if (*v10)
      {
        ErrorValue = swift_getErrorValue(*v10, v21, &v18);
        v12 = v19;
        v13 = v20;
        v14 = *(_QWORD *)(v19 - 8);
        __chkstk_darwin(ErrorValue);
        v16 = (char *)&v18 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v14 + 16))(v16);
        v8 = Error.localizedDescription.getter(v12, v13);
        (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v12);
      }
      else
      {
        return 0;
      }
    }
  }
  return v8;
}

uint64_t ErrorPresenter.settingsURL.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  unsigned __int8 *v3;
  int v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v9;
  _BYTE v10[24];

  v3 = (unsigned __int8 *)(v1 + OBJC_IVAR____TtC8ShelfKit14ErrorPresenter_reasonForNoInternet);
  swift_beginAccess(v3, v10, 0, 0);
  v4 = *v3;
  if ((v4 - 3) < 2)
  {
    v5 = objc_msgSend((id)objc_opt_self(ASKCellularDataInquiry), "settingsURL");
LABEL_5:
    v6 = v5;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    v7 = type metadata accessor for URL(0);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(a1, 0, 1, v7);
  }
  if (v4 == 2)
  {
    v5 = objc_msgSend((id)objc_opt_self(ASKAirplaneModeInquiry), "settingsURL");
    goto LABEL_5;
  }
  v9 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(a1, 1, 1, v9);
}

uint64_t ErrorPresenter.error.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  _BYTE v4[24];

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC8ShelfKit14ErrorPresenter_error);
  swift_beginAccess(v0 + OBJC_IVAR____TtC8ShelfKit14ErrorPresenter_error, v4, 0, 0);
  v2 = *v1;
  swift_errorRetain(v2);
  return v2;
}

uint64_t ErrorPresenter.error.setter(uint64_t a1)
{
  sub_ACC44(a1);
  return swift_errorRelease(a1);
}

uint64_t (*ErrorPresenter.error.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess(v1 + OBJC_IVAR____TtC8ShelfKit14ErrorPresenter_error, a1, 33, 0);
  return sub_ACAB0;
}

uint64_t sub_ACAB0(uint64_t a1, char a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t ObjectType;

  result = swift_endAccess(a1);
  if ((a2 & 1) == 0)
  {
    v5 = *(_QWORD *)(a1 + 24) + OBJC_IVAR____TtC8ShelfKit14ErrorPresenter_view;
    swift_beginAccess(v5, a1, 0, 0);
    result = swift_unknownObjectWeakLoadStrong(v5);
    if (result)
    {
      v6 = result;
      v7 = *(_QWORD *)(v5 + 8);
      ObjectType = swift_getObjectType(result);
      (*(void (**)(uint64_t, uint64_t))(v7 + 8))(ObjectType, v7);
      return swift_unknownObjectRelease(v6);
    }
  }
  return result;
}

void ErrorPresenter.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("ShelfKit.ErrorPresenter", 23, "init()", 6, 0);
  __break(1u);
}

uint64_t sub_ACC44(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t ObjectType;
  uint64_t v10;
  _BYTE v11[24];

  v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC8ShelfKit14ErrorPresenter_error);
  swift_beginAccess(v1 + OBJC_IVAR____TtC8ShelfKit14ErrorPresenter_error, v11, 1, 0);
  v4 = *v3;
  *v3 = a1;
  swift_errorRetain(a1);
  swift_errorRelease(v4);
  v5 = v1 + OBJC_IVAR____TtC8ShelfKit14ErrorPresenter_view;
  swift_beginAccess(v1 + OBJC_IVAR____TtC8ShelfKit14ErrorPresenter_view, &v10, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v5);
  if (result)
  {
    v7 = result;
    v8 = *(_QWORD *)(v5 + 8);
    ObjectType = swift_getObjectType(result);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(ObjectType, v8);
    return swift_unknownObjectRelease(v7);
  }
  return result;
}

void _s8ShelfKit14ErrorPresenterC28networkReachabilityDidChange2toySo09SCNetworkF5FlagsV_tF_0()
{
  uint64_t v0;
  _BYTE *v1;
  uint64_t v2;
  uint64_t Strong;
  uint64_t v4;
  uint64_t v5;
  uint64_t ObjectType;
  uint64_t v7;
  _BYTE v8[24];

  ErrorPresenter.update()();
  v1 = (_BYTE *)(v0 + OBJC_IVAR____TtC8ShelfKit14ErrorPresenter_reachabilityType);
  swift_beginAccess(v0 + OBJC_IVAR____TtC8ShelfKit14ErrorPresenter_reachabilityType, v8, 0, 0);
  if (*v1 == 1
    && objc_msgSend((id)objc_opt_self(IMNetworkObserver), "isLikelyToReachRemoteServerWithReachabilityFlags:", objc_msgSend(*(id *)(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit14ErrorPresenter_networkObserver) + 16), "networkReachabilityFlags")))
  {
    v2 = v0 + OBJC_IVAR____TtC8ShelfKit14ErrorPresenter_view;
    swift_beginAccess(v0 + OBJC_IVAR____TtC8ShelfKit14ErrorPresenter_view, &v7, 0, 0);
    Strong = swift_unknownObjectWeakLoadStrong(v2);
    if (Strong)
    {
      v4 = Strong;
      v5 = *(_QWORD *)(v2 + 8);
      ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v5 + 16))(ObjectType, v5);
      swift_unknownObjectRelease(v4);
    }
  }
}

unint64_t sub_ACDE0()
{
  unint64_t result;

  result = qword_3B6AD0;
  if (!qword_3B6AD0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ErrorPresenter.ReachabilityType);
    atomic_store(result, (unint64_t *)&qword_3B6AD0);
  }
  return result;
}

unint64_t sub_ACE28()
{
  unint64_t result;

  result = qword_3B6AD8;
  if (!qword_3B6AD8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ErrorPresenter.ReasonForNoInternet);
    atomic_store(result, (unint64_t *)&qword_3B6AD8);
  }
  return result;
}

uint64_t sub_ACE6C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char v6[24];

  v3 = *a1 + OBJC_IVAR____TtC8ShelfKit14ErrorPresenter_view;
  swift_beginAccess(v3, v6, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v3);
  v5 = *(_QWORD *)(v3 + 8);
  *a2 = result;
  a2[1] = v5;
  return result;
}

uint64_t sub_ACEC4(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[24];

  v2 = *a1;
  v3 = a1[1];
  v4 = *a2 + OBJC_IVAR____TtC8ShelfKit14ErrorPresenter_view;
  swift_beginAccess(v4, v6, 1, 0);
  *(_QWORD *)(v4 + 8) = v3;
  return swift_unknownObjectWeakAssign(v4, v2);
}

uint64_t sub_ACF24@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v3;
  uint64_t result;
  _BYTE v5[24];

  v3 = (_BYTE *)(*a1 + OBJC_IVAR____TtC8ShelfKit14ErrorPresenter_reasonForNoInternet);
  result = swift_beginAccess(v3, v5, 0, 0);
  *a2 = *v3;
  return result;
}

uint64_t sub_ACF74(unsigned __int8 *a1)
{
  unsigned __int8 v2;

  v2 = *a1;
  return sub_AC3D4(&v2);
}

uint64_t sub_ACFA8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = (uint64_t *)(*a1 + OBJC_IVAR____TtC8ShelfKit14ErrorPresenter_error);
  swift_beginAccess(v3, v6, 0, 0);
  v4 = *v3;
  *a2 = *v3;
  return swift_errorRetain(v4);
}

uint64_t sub_ACFFC(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  swift_errorRetain(*a1);
  sub_ACC44(v1);
  return swift_errorRelease(v1);
}

uint64_t type metadata accessor for ErrorPresenter()
{
  return objc_opt_self(_TtC8ShelfKit14ErrorPresenter);
}

uint64_t method lookup function for ErrorPresenter(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for ErrorPresenter);
}

uint64_t dispatch thunk of ErrorPresenter.__allocating_init(networkObserver:reachabilityType:airplaneModeInquiry:cellularDataInquiry:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t storeEnumTagSinglePayload for ErrorPresenter.ReachabilityType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_AD0B0 + 4 * byte_2F21A5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_AD0E4 + 4 * asc_2F21A0[v4]))();
}

uint64_t sub_AD0E4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_AD0EC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xAD0F4);
  return result;
}

uint64_t sub_AD100(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xAD108);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_AD10C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_AD114(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ErrorPresenter.ReachabilityType()
{
  return &type metadata for ErrorPresenter.ReachabilityType;
}

uint64_t getEnumTagSinglePayload for ErrorPresenter.ReasonForNoInternet(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ErrorPresenter.ReasonForNoInternet(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_AD20C + 4 * byte_2F21AF[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_AD240 + 4 * byte_2F21AA[v4]))();
}

uint64_t sub_AD240(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_AD248(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xAD250);
  return result;
}

uint64_t sub_AD25C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xAD264);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_AD268(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_AD270(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ErrorPresenter.ReasonForNoInternet()
{
  return &type metadata for ErrorPresenter.ReasonForNoInternet;
}

uint64_t static ClickMetricsEvent.makeClickEvent(targetId:actionType:targetType:channelAdamId:pageId:pageType:sharedPage:location:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, Swift::String a9, unsigned __int8 *a10, char a11, uint64_t a12)
{
  return sub_B2EB8(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

uint64_t static ClickMetricsEvent.makeSearchClickEvent(for:previousFilter:pageType:pageMetrics:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 *a9, uint64_t a10)
{
  return sub_B3FF4(a1, a2, a5, a6, a9, a10);
}

uint64_t MetricsEvent.PageLifecycleInvocationPoint.init(deserializing:using:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = sub_B44F8();
  JSONObject.stringEnumOrNil<A>()(&v17, &type metadata for MetricsEvent.PageLifecycleInvocationPoint, v6);
  v7 = v17;
  if (v17 == 7)
  {
    v8 = type metadata accessor for JSONError(0);
    v9 = sub_F1C0((unint64_t *)&qword_3B0CB0, (void (*)(uint64_t))&type metadata accessor for JSONError, (uint64_t)&protocol conformance descriptor for JSONError);
    swift_allocError(v8, v9, 0, 0);
    *v10 = 1718379891;
    v10[1] = 0xE400000000000000;
    v10[2] = &type metadata for MetricsEvent.PageLifecycleInvocationPoint;
    v10[3] = _swiftEmptyArrayStorage;
    v11 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v10, enum case for JSONError.malformedProperty(_:), v8);
    swift_willThrow(v11);
    v12 = type metadata accessor for JSONContext(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(a2, v12);
    v13 = type metadata accessor for JSONObject(0);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(a1, v13);
  }
  else
  {
    v15 = type metadata accessor for JSONContext(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(a2, v15);
    v16 = type metadata accessor for JSONObject(0);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(a1, v16);
    *a3 = v7;
  }
  return result;
}

ShelfKit::MetricsEvent::PageLifecycleInvocationPoint_optional __swiftcall MetricsEvent.PageLifecycleInvocationPoint.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  ShelfKit::MetricsEvent::PageLifecycleInvocationPoint_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_3738E8, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 7;
  if (v5 < 7)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t MetricsEvent.PageLifecycleInvocationPoint.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_AD4B4 + 4 * byte_2F2310[*v0]))(0x65746E4565676170, 0xE900000000000072);
}

uint64_t sub_AD4B4()
{
  return 0x7469784565676170;
}

uint64_t sub_AD4CC()
{
  return 0x74697845707061;
}

uint64_t sub_AD4E4()
{
  return 0x7265746E45707061;
}

uint64_t sub_AD4FC()
{
  return 0x747475426B636162;
}

uint64_t sub_AD518()
{
  return 0x72656D6974;
}

uint64_t sub_AD52C()
{
  return 0x726576656ELL;
}

void sub_AD540(char *a1)
{
  sub_1E2B1C(*a1);
}

void sub_AD54C()
{
  char *v0;

  sub_2D8FCC(0, *v0);
}

void sub_AD558()
{
  __asm { BR              X10 }
}

uint64_t sub_AD598(uint64_t a1)
{
  String.hash(into:)(a1, 0x7469784565676170, 0xE800000000000000);
  return swift_bridgeObjectRelease(0xE800000000000000);
}

void sub_AD634(uint64_t a1)
{
  char *v1;

  sub_2D8FCC(a1, *v1);
}

ShelfKit::MetricsEvent::PageLifecycleInvocationPoint_optional sub_AD63C(Swift::String *a1)
{
  return MetricsEvent.PageLifecycleInvocationPoint.init(rawValue:)(*a1);
}

uint64_t sub_AD648()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_AD67C + 4 * byte_2F231E[*v0]))();
}

void sub_AD67C(_QWORD *a1@<X8>)
{
  *a1 = 0x7469784565676170;
  a1[1] = 0xE800000000000000;
}

void sub_AD698(_QWORD *a1@<X8>)
{
  *a1 = 0x74697845707061;
  a1[1] = 0xE700000000000000;
}

void sub_AD6B4(_QWORD *a1@<X8>)
{
  *a1 = 0x7265746E45707061;
  a1[1] = 0xE800000000000000;
}

void sub_AD6D0(_QWORD *a1@<X8>)
{
  *a1 = 0x747475426B636162;
  a1[1] = 0xEA00000000006E6FLL;
}

void sub_AD6F0(_QWORD *a1@<X8>)
{
  *a1 = 0x72656D6974;
  a1[1] = 0xE500000000000000;
}

uint64_t sub_AD718@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  return MetricsEvent.PageLifecycleInvocationPoint.init(deserializing:using:)(a1, a2, a3);
}

uint64_t sub_AD72C()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  swift_beginAccess(v0 + 16, v3, 0, 0);
  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain(v1);
  return MetricsData.init(topic:shouldFlush:fields:includingFields:excludingFields:)(0xD000000000000014, 0x800000000030DA90, 0, v1, &_swiftEmptySetSingleton, &_swiftEmptySetSingleton);
}

uint64_t sub_AD7A4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[24];

  v2 = *a1;
  v3 = *a2;
  swift_beginAccess(*a2 + 16, v6, 1, 0);
  v4 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 16) = v2;
  swift_bridgeObjectRetain(v2);
  return swift_bridgeObjectRelease(v4);
}

uint64_t sub_AD800()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 16, v2, 0, 0);
  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 16));
}

uint64_t sub_AD834(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + 16, v5, 1, 0);
  v3 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v1 + 16) = a1;
  return swift_bridgeObjectRelease(v3);
}

uint64_t sub_AD878(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[24];

  v2 = *a1;
  v3 = *a2;
  swift_beginAccess(*a2 + 24, v6, 1, 0);
  v4 = *(_QWORD *)(v3 + 24);
  *(_QWORD *)(v3 + 24) = v2;
  swift_bridgeObjectRetain(v2);
  return swift_bridgeObjectRelease(v4);
}

uint64_t sub_AD8D4()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 24, v2, 0, 0);
  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 24));
}

uint64_t sub_AD908(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + 24, v5, 1, 0);
  v3 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v1 + 24) = a1;
  return swift_bridgeObjectRelease(v3);
}

uint64_t (*LibraryPresenter.headerButtonItems.modify(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + 24, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t PageMetricsEvent.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return v0;
}

uint64_t MetricsEvent.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocClassInstance(v0, 32, 7);
}

void *static MetricsEvent.pageMetricsFields(from:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v11;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4A58);
  __chkstk_darwin(v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_267BC(a1, (uint64_t)v4, &qword_3B4A58);
  v5 = type metadata accessor for PageMetrics(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  if ((_DWORD)v7 == 1)
  {
    sub_1459C((uint64_t)v4, &qword_3B4A58);
    v8 = 0;
  }
  else
  {
    v8 = PageMetrics.pageFields.getter(v7);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
  }
  v9 = _s8ShelfKit12MetricsEventC04pageC6FieldsySDySSypGSgAFFZ_0(v8);
  swift_bridgeObjectRelease();
  return v9;
}

ShelfKit::FollowMetricsEvent::FollowType_optional __swiftcall FollowMetricsEvent.FollowType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  Swift::OpaquePointer v2;

  v2._rawValue = &off_3739B0;
  return (ShelfKit::FollowMetricsEvent::FollowType_optional)sub_AE318(rawValue, v2, v1);
}

uint64_t FollowMetricsEvent.FollowType.rawValue.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x776F6C6C6F666E75;
  if (*v0 != 1)
    v1 = 0x6465776F6C6C6F66;
  if (*v0)
    return v1;
  else
    return 0x776F6C6C6F66;
}

uint64_t sub_ADB38(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1E15FC(*a1, *a2);
}

Swift::Int sub_ADB44()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7);
  v2 = 0xE800000000000000;
  v3 = 0x776F6C6C6F666E75;
  if (v1 != 1)
  {
    v3 = 0x6465776F6C6C6F66;
    v2 = 0xED000073776F6853;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 0x776F6C6C6F66;
  if (v1)
    v5 = v2;
  else
    v5 = 0xE600000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_ADBEC(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0xE800000000000000;
  v3 = 0x776F6C6C6F666E75;
  if (*v1 != 1)
  {
    v3 = 0x6465776F6C6C6F66;
    v2 = 0xED000073776F6853;
  }
  if (*v1)
    v4 = v3;
  else
    v4 = 0x776F6C6C6F66;
  if (*v1)
    v5 = v2;
  else
    v5 = 0xE600000000000000;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_ADC70()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7);
  v2 = 0xE800000000000000;
  v3 = 0x776F6C6C6F666E75;
  if (v1 != 1)
  {
    v3 = 0x6465776F6C6C6F66;
    v2 = 0xED000073776F6853;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 0x776F6C6C6F66;
  if (v1)
    v5 = v2;
  else
    v5 = 0xE600000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

ShelfKit::FollowMetricsEvent::FollowType_optional sub_ADD14(Swift::String *a1)
{
  return FollowMetricsEvent.FollowType.init(rawValue:)(*a1);
}

void sub_ADD20(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE600000000000000;
  v4 = 0xE800000000000000;
  v5 = 0x776F6C6C6F666E75;
  if (v2 != 1)
  {
    v5 = 0x6465776F6C6C6F66;
    v4 = 0xED000073776F6853;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x776F6C6C6F66;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

unint64_t static FollowMetricsEvent.makeData(followType:shows:)(unsigned __int8 *a1, uint64_t a2)
{
  int v2;
  int64_t v3;
  _QWORD *v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t inited;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t result;
  char v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  int v55;
  int64_t v56;
  _BYTE v57[176];
  uint64_t v58;
  uint64_t v59;
  _OWORD v60[2];
  _BYTE v61[176];
  _QWORD *v62;

  v2 = *a1;
  v3 = *(_QWORD *)(a2 + 16);
  v4 = _swiftEmptyArrayStorage;
  if (v3)
  {
    v55 = *a1;
    v62 = _swiftEmptyArrayStorage;
    sub_1808C0(0, v3, 0);
    __swift_instantiateConcreteTypeFromMangledName(&qword_3B1810);
    v6 = (uint64_t *)(a2 + 64);
    while (1)
    {
      v56 = v3;
      v7 = *(v6 - 4);
      v8 = *(v6 - 3);
      v9 = *(v6 - 2);
      v10 = *(v6 - 1);
      v11 = *v6;
      v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B5020);
      inited = swift_initStackObject(v12, v61);
      *(_QWORD *)(inited + 32) = 0x64496D616461;
      v14 = inited + 32;
      *(_OWORD *)(inited + 16) = xmmword_2EFAE0;
      *(_QWORD *)(inited + 72) = &type metadata for String;
      *(_QWORD *)(inited + 40) = 0xE600000000000000;
      *(_QWORD *)(inited + 48) = v7;
      *(_QWORD *)(inited + 56) = v8;
      *(_QWORD *)(inited + 80) = 0x6853656369766564;
      v15 = inited + 80;
      *(_QWORD *)(inited + 120) = &type metadata for String;
      *(_QWORD *)(inited + 88) = 0xEC0000006449776FLL;
      *(_QWORD *)(inited + 96) = v9;
      *(_QWORD *)(inited + 104) = v10;
      *(_QWORD *)(inited + 128) = 0x6954776F6C6C6F66;
      v16 = inited + 128;
      *(_QWORD *)(inited + 136) = 0xEA0000000000656DLL;
      *(_QWORD *)(inited + 168) = &type metadata for Double;
      *(_QWORD *)(inited + 144) = v11;
      v17 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(3);
      swift_bridgeObjectRetain_n(v8, 2);
      swift_bridgeObjectRetain_n(v10, 2);
      swift_retain();
      sub_267BC(v14, (uint64_t)&v58, &qword_3B6B78);
      v19 = v58;
      v18 = v59;
      result = sub_29724(v58, v59);
      if ((v21 & 1) != 0)
        break;
      v22 = v17 + 8;
      *(_QWORD *)((char *)v17 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      v23 = (uint64_t *)(v17[6] + 16 * result);
      *v23 = v19;
      v23[1] = v18;
      result = (unint64_t)sub_1F460(v60, (_OWORD *)(v17[7] + 32 * result));
      v24 = v17[2];
      v25 = __OFADD__(v24, 1);
      v26 = v24 + 1;
      if (v25)
        goto LABEL_22;
      v17[2] = v26;
      sub_267BC(v15, (uint64_t)&v58, &qword_3B6B78);
      v27 = v58;
      v28 = v59;
      result = sub_29724(v58, v59);
      if ((v29 & 1) != 0)
        break;
      *(_QWORD *)((char *)v22 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
      v30 = (uint64_t *)(v17[6] + 16 * result);
      *v30 = v27;
      v30[1] = v28;
      result = (unint64_t)sub_1F460(v60, (_OWORD *)(v17[7] + 32 * result));
      v31 = v17[2];
      v25 = __OFADD__(v31, 1);
      v32 = v31 + 1;
      if (v25)
        goto LABEL_22;
      v17[2] = v32;
      sub_267BC(v16, (uint64_t)&v58, &qword_3B6B78);
      v33 = v58;
      v34 = v59;
      result = sub_29724(v58, v59);
      if ((v35 & 1) != 0)
        break;
      *(_QWORD *)((char *)v22 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
      v36 = (uint64_t *)(v17[6] + 16 * result);
      *v36 = v33;
      v36[1] = v34;
      result = (unint64_t)sub_1F460(v60, (_OWORD *)(v17[7] + 32 * result));
      v37 = v17[2];
      v25 = __OFADD__(v37, 1);
      v38 = v37 + 1;
      if (v25)
        goto LABEL_22;
      v17[2] = v38;
      swift_release(v17);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v4 = v62;
      if ((swift_isUniquelyReferenced_nonNull_native(v62) & 1) == 0)
      {
        sub_1808C0(0, v4[2] + 1, 1);
        v4 = v62;
      }
      v40 = v4[2];
      v39 = v4[3];
      if (v40 >= v39 >> 1)
      {
        sub_1808C0(v39 > 1, v40 + 1, 1);
        v4 = v62;
      }
      v4[2] = v40 + 1;
      v4[v40 + 4] = v17;
      v6 += 5;
      v3 = v56 - 1;
      if (v56 == 1)
      {
        v2 = v55;
        goto LABEL_15;
      }
    }
    __break(1u);
LABEL_22:
    __break(1u);
  }
  else
  {
LABEL_15:
    v41 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B5020);
    v42 = swift_initStackObject(v41, v57);
    v43 = v42;
    *(_OWORD *)(v42 + 16) = xmmword_2EFAE0;
    *(_QWORD *)(v42 + 32) = 0x707954746E657665;
    *(_QWORD *)(v42 + 40) = 0xE900000000000065;
    if (v2)
    {
      if (v2 == 1)
      {
        v44 = 0xE800000000000000;
        v45 = 0x776F6C6C6F666E75;
      }
      else
      {
        v44 = 0xED000073776F6853;
        v45 = 0x6465776F6C6C6F66;
      }
    }
    else
    {
      v44 = 0xE600000000000000;
      v45 = 0x776F6C6C6F66;
    }
    *(_QWORD *)(v42 + 48) = v45;
    *(_QWORD *)(v42 + 56) = v44;
    *(_QWORD *)(v42 + 72) = &type metadata for String;
    *(_QWORD *)(v42 + 80) = 0x6369706F74;
    *(_QWORD *)(v42 + 88) = 0xE500000000000000;
    *(_QWORD *)(v42 + 96) = 0xD000000000000017;
    *(_QWORD *)(v42 + 104) = 0x800000000030DAB0;
    *(_QWORD *)(v42 + 120) = &type metadata for String;
    *(_QWORD *)(v42 + 128) = 0x73776F6873;
    *(_QWORD *)(v42 + 136) = 0xE500000000000000;
    *(_QWORD *)(v42 + 168) = __swift_instantiateConcreteTypeFromMangledName(&qword_3B6B80);
    *(_QWORD *)(v43 + 144) = v4;
    v46 = sub_287F38(v43);
    v47 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B6B88);
    v48 = type metadata accessor for MetricsFieldExclusionRequest(0);
    v49 = *(_QWORD *)(v48 - 8);
    v50 = *(_QWORD *)(v49 + 72);
    v51 = *(unsigned __int8 *)(v49 + 80);
    v52 = (v51 + 32) & ~v51;
    v53 = swift_allocObject(v47, v52 + v50, v51 | 7);
    *(_OWORD *)(v53 + 16) = xmmword_2EA0D0;
    static MetricsFieldExclusionRequest.amsMetricsID.getter();
    v54 = sub_B47B8(v53);
    swift_setDeallocating(v53);
    swift_arrayDestroy(v53 + v52, 1, v48);
    swift_deallocClassInstance(v53, 32, 7);
    return MetricsData.init(topic:shouldFlush:fields:includingFields:excludingFields:)(0xD000000000000014, 0x800000000030DA90, 0, v46, &_swiftEmptySetSingleton, v54);
  }
  return result;
}

ShelfKit::AppEnterMetricsEvent::EnterKind_optional __swiftcall AppEnterMetricsEvent.EnterKind.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  Swift::OpaquePointer v2;

  v2._rawValue = &off_373A18;
  return (ShelfKit::AppEnterMetricsEvent::EnterKind_optional)sub_AE318(rawValue, v2, v1);
}

uint64_t sub_AE318@<X0>(Swift::String string@<0:X0, 8:X1>, Swift::OpaquePointer cases@<0:X2>, char *a3@<X8>)
{
  void *object;
  Swift::String v4;
  unint64_t v7;
  uint64_t result;
  char v9;

  object = string._object;
  v4._countAndFlagsBits = string._countAndFlagsBits;
  v4._object = object;
  v7 = _findStringSwitchCase(cases:string:)(cases, v4);
  result = swift_bridgeObjectRelease(object);
  v9 = 3;
  if (v7 < 3)
    v9 = v7;
  *a3 = v9;
  return result;
}

uint64_t AppEnterMetricsEvent.EnterKind.rawValue.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x746977536B736174;
  if (*v0 != 1)
    v1 = 1802398060;
  if (*v0)
    return v1;
  else
    return 0x68636E75616CLL;
}

uint64_t sub_AE3C0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1E13B8(*a1, *a2);
}

Swift::Int sub_AE3CC()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7);
  v2 = 0xEA00000000006863;
  v3 = 0x746977536B736174;
  if (v1 != 1)
  {
    v3 = 1802398060;
    v2 = 0xE400000000000000;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 0x68636E75616CLL;
  if (v1)
    v5 = v2;
  else
    v5 = 0xE600000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_AE464(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0xEA00000000006863;
  v3 = 0x746977536B736174;
  if (*v1 != 1)
  {
    v3 = 1802398060;
    v2 = 0xE400000000000000;
  }
  if (*v1)
    v4 = v3;
  else
    v4 = 0x68636E75616CLL;
  if (*v1)
    v5 = v2;
  else
    v5 = 0xE600000000000000;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_AE4D8()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7);
  v2 = 0xEA00000000006863;
  v3 = 0x746977536B736174;
  if (v1 != 1)
  {
    v3 = 1802398060;
    v2 = 0xE400000000000000;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 0x68636E75616CLL;
  if (v1)
    v5 = v2;
  else
    v5 = 0xE600000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

ShelfKit::AppEnterMetricsEvent::EnterKind_optional sub_AE56C(Swift::String *a1)
{
  return AppEnterMetricsEvent.EnterKind.init(rawValue:)(*a1);
}

void sub_AE578(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE600000000000000;
  v4 = 0xEA00000000006863;
  v5 = 0x746977536B736174;
  if (v2 != 1)
  {
    v5 = 1802398060;
    v4 = 0xE400000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x68636E75616CLL;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t static AppEnterMetricsEvent.makeData(enterKind:)(unsigned __int8 *a1)
{
  int v1;
  uint64_t v2;
  uint64_t inited;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v18;

  v1 = *a1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B5020);
  inited = swift_initStackObject(v2, &v18);
  v4 = inited;
  *(_OWORD *)(inited + 16) = xmmword_2EFAE0;
  *(_QWORD *)(inited + 32) = 0x707954746E657665;
  *(_QWORD *)(inited + 40) = 0xE900000000000065;
  *(_QWORD *)(inited + 48) = 0x7265746E65;
  *(_QWORD *)(inited + 56) = 0xE500000000000000;
  *(_QWORD *)(inited + 72) = &type metadata for String;
  *(_QWORD *)(inited + 80) = 1701869940;
  v5 = 0xE400000000000000;
  *(_QWORD *)(inited + 88) = 0xE400000000000000;
  if (v1)
  {
    if (v1 == 1)
    {
      v5 = 0xEA00000000006863;
      v6 = 0x746977536B736174;
    }
    else
    {
      v6 = 1802398060;
    }
  }
  else
  {
    v5 = 0xE600000000000000;
    v6 = 0x68636E75616CLL;
  }
  *(_QWORD *)(inited + 96) = v6;
  *(_QWORD *)(inited + 104) = v5;
  *(_QWORD *)(inited + 120) = &type metadata for String;
  *(_QWORD *)(inited + 128) = 0x6175676E614C736FLL;
  *(_QWORD *)(inited + 136) = 0xEB00000000736567;
  v7 = static Locale.preferredLanguages.getter();
  *(_QWORD *)(v4 + 168) = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3BC430);
  *(_QWORD *)(v4 + 144) = v7;
  v8 = sub_287F38(v4);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B6B90);
  v10 = type metadata accessor for MetricsFieldInclusionRequest(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 72);
  v13 = *(unsigned __int8 *)(v11 + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = swift_allocObject(v9, v14 + v12, v13 | 7);
  *(_OWORD *)(v15 + 16) = xmmword_2EA0D0;
  static MetricsFieldInclusionRequest.crossfireReferral.getter(v15);
  v16 = sub_B371C(v15);
  swift_setDeallocating(v15);
  swift_arrayDestroy(v15 + v14, 1, v10);
  swift_deallocClassInstance(v15, 32, 7);
  return MetricsData.init(topic:shouldFlush:fields:includingFields:excludingFields:)(0xD000000000000014, 0x800000000030DA90, 0, v8, v16, &_swiftEmptySetSingleton);
}

ShelfKit::AppExitMetricsEvent::ExitKind_optional __swiftcall AppExitMetricsEvent.ExitKind.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  Swift::Int v5;
  ShelfKit::AppExitMetricsEvent::ExitKind_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_373A80, v3);
  result.value = swift_bridgeObjectRelease(object);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *v4 = v7;
  return result;
}

uint64_t AppExitMetricsEvent.ExitKind.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0x746977536B736174;
  else
    return 1953068401;
}

uint64_t sub_AE868(char *a1, char *a2)
{
  return sub_1E155C(*a1, *a2);
}

Swift::Int sub_AE874()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  if (v1)
    v2 = 0x746977536B736174;
  else
    v2 = 1953068401;
  if (v1)
    v3 = 0xEA00000000006863;
  else
    v3 = 0xE400000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_AE8F0(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0x746977536B736174;
  else
    v2 = 1953068401;
  if (*v1)
    v3 = 0xEA00000000006863;
  else
    v3 = 0xE400000000000000;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_AE948()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  if (v1)
    v2 = 0x746977536B736174;
  else
    v2 = 1953068401;
  if (v1)
    v3 = 0xEA00000000006863;
  else
    v3 = 0xE400000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

ShelfKit::AppExitMetricsEvent::ExitKind_optional sub_AE9C0(Swift::String *a1)
{
  return AppExitMetricsEvent.ExitKind.init(rawValue:)(*a1);
}

void sub_AE9CC(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 1953068401;
  if (*v1)
    v2 = 0x746977536B736174;
  v3 = 0xE400000000000000;
  if (*v1)
    v3 = 0xEA00000000006863;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t static AppExitMetricsEvent.makeData(exitKind:)(unsigned __int8 *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  unint64_t v13;
  unint64_t v15;
  _OWORD v16[2];
  __int128 v17;
  void *v18;
  unint64_t v19;

  v2 = type metadata accessor for MetricsActivity.State(0);
  __chkstk_darwin(v2);
  v4 = (unint64_t *)((char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = *a1;
  if (qword_3B0108 != -1)
    swift_once(&qword_3B0108, sub_13CAD4);
  OSAllocatedUnfairLock.current.getter(v4, *(_QWORD *)(qword_3BBC50 + OBJC_IVAR____TtC8ShelfKit15MetricsActivity_state), v2);
  v6 = *(_QWORD *)((char *)v4 + *(int *)(v2 + 28));
  swift_bridgeObjectRetain(v6);
  sub_B4A20((uint64_t)v4);
  if (!v6)
    v6 = sub_287F38((uint64_t)_swiftEmptyArrayStorage);
  v19 = v6;
  sub_1D560(0x6F43646572616873, 0xED0000746E65746ELL, &v17);
  sub_1459C((uint64_t)&v17, (uint64_t *)&unk_3BC540);
  v18 = &type metadata for String;
  *(_QWORD *)&v17 = 1953069157;
  *((_QWORD *)&v17 + 1) = 0xE400000000000000;
  sub_1F460(&v17, v16);
  v7 = v19;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v19);
  v15 = v7;
  sub_1D728(v16, 0x707954746E657665, 0xE900000000000065, isUniquelyReferenced_nonNull_native);
  v9 = v15;
  swift_bridgeObjectRelease();
  v10 = 0x746977536B736174;
  if (!v5)
    v10 = 1953068401;
  v11 = 0xEA00000000006863;
  v18 = &type metadata for String;
  if (!v5)
    v11 = 0xE400000000000000;
  *(_QWORD *)&v17 = v10;
  *((_QWORD *)&v17 + 1) = v11;
  sub_1F460(&v17, v16);
  v12 = swift_isUniquelyReferenced_nonNull_native(v9);
  v15 = v9;
  sub_1D728(v16, 1701869940, 0xE400000000000000, v12);
  v13 = v15;
  swift_bridgeObjectRelease();
  return MetricsData.init(topic:shouldFlush:fields:includingFields:excludingFields:)(0xD000000000000014, 0x800000000030DA90, 1, v13, &_swiftEmptySetSingleton, &_swiftEmptySetSingleton);
}

uint64_t static WelcomeSheetMetricsEvent.makeData()()
{
  uint64_t v0;
  uint64_t inited;
  unint64_t v2;
  uint64_t v4;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B5020);
  inited = swift_initStackObject(v0, &v4);
  *(_OWORD *)(inited + 16) = xmmword_2F27E0;
  *(_QWORD *)(inited + 32) = 0x707954746E657665;
  *(_QWORD *)(inited + 40) = 0xE900000000000065;
  *(_QWORD *)(inited + 48) = 0x6B63696C63;
  *(_QWORD *)(inited + 56) = 0xE500000000000000;
  *(_QWORD *)(inited + 72) = &type metadata for String;
  *(_QWORD *)(inited + 80) = 0x79546E6F69746361;
  *(_QWORD *)(inited + 88) = 0xEA00000000006570;
  *(_QWORD *)(inited + 96) = 0x657461676976616ELL;
  *(_QWORD *)(inited + 104) = 0xE800000000000000;
  *(_QWORD *)(inited + 120) = &type metadata for String;
  *(_QWORD *)(inited + 128) = 0x6449746567726174;
  *(_QWORD *)(inited + 136) = 0xE800000000000000;
  *(_QWORD *)(inited + 144) = 0x65756E69746E6F63;
  *(_QWORD *)(inited + 152) = 0xE800000000000000;
  *(_QWORD *)(inited + 168) = &type metadata for String;
  *(_QWORD *)(inited + 176) = 0x7954746567726174;
  *(_QWORD *)(inited + 184) = 0xEA00000000006570;
  *(_QWORD *)(inited + 192) = 0x6E6F74747562;
  *(_QWORD *)(inited + 200) = 0xE600000000000000;
  *(_QWORD *)(inited + 216) = &type metadata for String;
  *(_QWORD *)(inited + 224) = 0x644965676170;
  *(_QWORD *)(inited + 232) = 0xE600000000000000;
  strcpy((char *)(inited + 240), "WelcomeSheet");
  *(_BYTE *)(inited + 253) = 0;
  *(_WORD *)(inited + 254) = -5120;
  *(_QWORD *)(inited + 264) = &type metadata for String;
  *(_QWORD *)(inited + 272) = 0x6570795465676170;
  *(_QWORD *)(inited + 280) = 0xE800000000000000;
  *(_QWORD *)(inited + 288) = 0x656D6F636C6557;
  *(_QWORD *)(inited + 296) = 0xE700000000000000;
  *(_QWORD *)(inited + 312) = &type metadata for String;
  *(_QWORD *)(inited + 320) = 1701273968;
  *(_QWORD *)(inited + 360) = &type metadata for String;
  *(_QWORD *)(inited + 328) = 0xE400000000000000;
  *(_QWORD *)(inited + 336) = 0xD000000000000014;
  *(_QWORD *)(inited + 344) = 0x800000000030DAD0;
  v2 = sub_287F38(inited);
  return MetricsData.init(topic:shouldFlush:fields:includingFields:excludingFields:)(0xD000000000000014, 0x800000000030DA90, 0, v2, &_swiftEmptySetSingleton, &_swiftEmptySetSingleton);
}

uint64_t sub_AEE1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE v11[24];

  v1 = type metadata accessor for MetricsFieldInclusionRequest(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v5 = &v11[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = __chkstk_darwin(v3);
  v8 = &v11[-v7 - 8];
  static MetricsFieldInclusionRequest.impressionsSnapshot.getter(v6);
  swift_beginAccess(v0 + 104, v11, 33, 0);
  sub_9BD74((uint64_t)v8, v5);
  (*(void (**)(_BYTE *, uint64_t))(v2 + 8))(v8, v1);
  return swift_endAccess(v11);
}

uint64_t static ClickMetricsEvent.tabClickEvent(named:at:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  char isUniquelyReferenced_nonNull_native;
  void *v10;
  char v11;
  void *v12;
  char v13;
  void *v14;
  char v15;
  void *v16;
  char v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v45;
  char v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  _OWORD v52[2];
  __int128 v53;
  void *v54;

  v47 = a4;
  v48 = a5;
  v49 = a1;
  v50 = a2;
  v6 = type metadata accessor for MetricsActivity.State(0);
  __chkstk_darwin(v6);
  v8 = (uint64_t *)((char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v54 = &type metadata for String;
  *(_QWORD *)&v53 = 0x7463656C6573;
  *((_QWORD *)&v53 + 1) = 0xE600000000000000;
  sub_1F460(&v53, v52);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  v51 = &_swiftEmptyDictionarySingleton;
  sub_1D728(v52, 0x79546E6F69746361, 0xEA00000000006570, isUniquelyReferenced_nonNull_native);
  v10 = v51;
  swift_bridgeObjectRelease();
  v54 = &type metadata for Int;
  *(_QWORD *)&v53 = a3;
  sub_1F460(&v53, v52);
  v11 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  v51 = &_swiftEmptyDictionarySingleton;
  sub_1D728(v52, 0xD000000000000010, 0x800000000030DAF0, v11);
  v12 = v51;
  swift_bridgeObjectRelease();
  v54 = &type metadata for String;
  *(_QWORD *)&v53 = 6447476;
  *((_QWORD *)&v53 + 1) = 0xE300000000000000;
  sub_1F460(&v53, v52);
  v13 = swift_isUniquelyReferenced_nonNull_native(v12);
  v51 = v12;
  sub_1D728(v52, 0x6E6F697461636F6CLL, 0xEC00000065707954, v13);
  v14 = v51;
  swift_bridgeObjectRelease();
  v54 = &type metadata for Int;
  *(_QWORD *)&v53 = 0;
  sub_1F460(&v53, v52);
  v15 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  v51 = &_swiftEmptyDictionarySingleton;
  sub_1D728(v52, 0xD000000000000010, 0x800000000030DAF0, v15);
  v16 = v51;
  swift_bridgeObjectRelease();
  v54 = &type metadata for String;
  *(_QWORD *)&v53 = 0x726142626174;
  *((_QWORD *)&v53 + 1) = 0xE600000000000000;
  sub_1F460(&v53, v52);
  v17 = swift_isUniquelyReferenced_nonNull_native(v16);
  v51 = v16;
  sub_1D728(v52, 0x6E6F697461636F6CLL, 0xEC00000065707954, v17);
  v18 = v51;
  swift_bridgeObjectRelease();
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0A70);
  v20 = swift_allocObject(v19, 48, 7);
  *(_OWORD *)(v20 + 16) = xmmword_2EA080;
  *(_QWORD *)(v20 + 32) = v14;
  *(_QWORD *)(v20 + 40) = v18;
  v54 = (void *)__swift_instantiateConcreteTypeFromMangledName(&qword_3B6B80);
  *(_QWORD *)&v53 = v20;
  sub_1F460(&v53, v52);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v18);
  v21 = swift_isUniquelyReferenced_nonNull_native(v10);
  v51 = v10;
  sub_1D728(v52, 0x6E6F697461636F6CLL, 0xE800000000000000, v21);
  v22 = (uint64_t)v51;
  swift_bridgeObjectRelease();
  if (qword_3B0108 != -1)
    swift_once(&qword_3B0108, sub_13CAD4);
  OSAllocatedUnfairLock.current.getter(v8, *(_QWORD *)(qword_3BBC50 + OBJC_IVAR____TtC8ShelfKit15MetricsActivity_state), v6);
  v23 = *(_QWORD *)((char *)v8 + *(int *)(v6 + 28));
  swift_bridgeObjectRetain(v23);
  sub_B4A20((uint64_t)v8);
  v24 = _s8ShelfKit12MetricsEventC04pageC6FieldsySDySSypGSgAFFZ_0(v23);
  if (v24)
  {
    v25 = (uint64_t)v24;
    swift_bridgeObjectRelease();
    v26 = swift_isUniquelyReferenced_nonNull_native(v22);
    *(_QWORD *)&v53 = v22;
    sub_B2918(v25, (uint64_t)sub_B28D8, 0, v26, (uint64_t *)&v53);
    v27 = v50;
LABEL_5:
    v22 = v53;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  v27 = v50;
  if (!v23)
  {
    v45 = _s8ShelfKit12MetricsEventC014tabLandingPageC04fromSDySSypGSS_tFZ_0(v47, v48);
    v46 = swift_isUniquelyReferenced_nonNull_native(v22);
    *(_QWORD *)&v53 = v22;
    sub_B2918((uint64_t)v45, (uint64_t)sub_B28D8, 0, v46, (uint64_t *)&v53);
    goto LABEL_5;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_8:
  swift_bridgeObjectRelease();
  v28 = 0x6573776F7242;
  v29 = v49;
  if (v49 == 0x676F6C61746143 && v27 == 0xE700000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)(v49, v27, 0x676F6C61746143, 0xE700000000000000, 0) & 1) != 0)
  {
    v27 = 0xE600000000000000;
  }
  else
  {
    swift_bridgeObjectRetain(v27);
    v28 = v29;
  }
  v30 = static MetricsTargetType.tab.getter();
  v32 = v31;
  v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B6B90);
  v34 = type metadata accessor for MetricsFieldInclusionRequest(0);
  v35 = *(_QWORD *)(v34 - 8);
  v36 = *(_QWORD *)(v35 + 72);
  v37 = *(unsigned __int8 *)(v35 + 80);
  v38 = (v37 + 32) & ~v37;
  v39 = swift_allocObject(v33, v38 + v36, v37 | 7);
  *(_OWORD *)(v39 + 16) = xmmword_2EA0D0;
  static MetricsFieldInclusionRequest.crossfireReferral.getter(v39);
  v40 = sub_B371C(v39);
  swift_setDeallocating(v39);
  swift_arrayDestroy(v39 + v38, 1, v34);
  swift_deallocClassInstance(v39, 32, 7);
  v41 = type metadata accessor for ClickMetricsEvent();
  v42 = swift_allocObject(v41, 112, 7);
  v43 = sub_B2DBC(0, 0, 0, 0, 2, 2, v30, v32, v28, v27, (uint64_t)v40, v22, v42);
  swift_release(v42);
  return v43;
}

uint64_t ClickMetricsEvent.__allocating_init(actionResult:eligibilityType:isFamily:isStudent:targetType:targetId:including:eventFields:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v19 = type metadata accessor for ClickMetricsEvent();
  v20 = swift_allocObject(v19, 112, 7);
  v21 = sub_B2DBC(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, v20);
  swift_release(v20);
  return v21;
}

uint64_t static ClickMetricsEvent.moreButtonClickEvent()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  char v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  void *v29;
  _OWORD v30[2];
  __int128 v31;
  void *v32;

  v0 = type metadata accessor for MetricsActivity.State(0);
  __chkstk_darwin(v0);
  v2 = (uint64_t *)((char *)&v28 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  v32 = &type metadata for String;
  *(_QWORD *)&v31 = 0x7470697263736564;
  *((_QWORD *)&v31 + 1) = 0xEB000000006E6F69;
  sub_1F460(&v31, v30);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  v29 = &_swiftEmptyDictionarySingleton;
  sub_1D728(v30, 0x79546E6F69746361, 0xEA00000000006570, isUniquelyReferenced_nonNull_native);
  v4 = (uint64_t)v29;
  swift_bridgeObjectRelease();
  if (qword_3B0108 != -1)
    swift_once(&qword_3B0108, sub_13CAD4);
  OSAllocatedUnfairLock.current.getter(v2, *(_QWORD *)(qword_3BBC50 + OBJC_IVAR____TtC8ShelfKit15MetricsActivity_state), v0);
  v5 = *(_QWORD *)((char *)v2 + *(int *)(v0 + 28));
  swift_bridgeObjectRetain(v5);
  sub_B4A20((uint64_t)v2);
  v6 = _s8ShelfKit12MetricsEventC04pageC6FieldsySDySSypGSgAFFZ_0(v5);
  swift_bridgeObjectRelease();
  if (v6)
  {
    v7 = swift_isUniquelyReferenced_nonNull_native(v4);
    *(_QWORD *)&v31 = v4;
    sub_B2918((uint64_t)v6, (uint64_t)sub_B28D8, 0, v7, (uint64_t *)&v31);
    v4 = v31;
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(v4 + 16)
    && (v8 = sub_29724(0x644965676170, 0xE600000000000000), (v9 & 1) != 0)
    && (sub_1FB98(*(_QWORD *)(v4 + 56) + 32 * v8, (uint64_t)&v31),
        swift_dynamicCast(v30, &v31, (char *)&type metadata for Any + 8, &type metadata for String, 6)))
  {
    v11 = *((_QWORD *)&v30[0] + 1);
    v10 = *(_QWORD *)&v30[0];
  }
  else
  {
    v10 = 0;
    v11 = 0xE000000000000000;
  }
  v12 = static MetricsTargetType.description.getter();
  v14 = v13;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B6B90);
  v16 = type metadata accessor for MetricsFieldInclusionRequest(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(_QWORD *)(v17 + 72);
  v19 = *(unsigned __int8 *)(v17 + 80);
  v20 = (v19 + 32) & ~v19;
  v21 = swift_allocObject(v15, v20 + v18, v19 | 7);
  *(_OWORD *)(v21 + 16) = xmmword_2EA0D0;
  v22 = swift_bridgeObjectRetain(v4);
  static MetricsFieldInclusionRequest.crossfireReferral.getter(v22);
  v23 = sub_B371C(v21);
  swift_setDeallocating(v21);
  swift_arrayDestroy(v21 + v20, 1, v16);
  swift_deallocClassInstance(v21, 32, 7);
  v24 = type metadata accessor for ClickMetricsEvent();
  v25 = swift_allocObject(v24, 112, 7);
  v26 = sub_B2DBC(0, 0, 0, 0, 2, 2, v12, v14, v10, v11, (uint64_t)v23, v4, v25);
  swift_bridgeObjectRelease();
  swift_release(v25);
  return v26;
}

uint64_t static ClickMetricsEvent.upsellPlanClickEvent(pageType:actionType:pageDetails:pageId:targetId:pageUrl:channelAdamId:)(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  int v18;
  char isUniquelyReferenced_nonNull_native;
  char v20;
  uint64_t v21;
  void *v22;
  char v23;
  uint64_t v24;
  void *v25;
  char v26;
  void *v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  char v35;
  uint64_t v36;
  Swift::String v37;
  Swift::String v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _OWORD v56[2];
  __int128 v57;
  void *v58;
  void *v59;

  v18 = *a1;
  v58 = &type metadata for String;
  *(_QWORD *)&v57 = a2;
  *((_QWORD *)&v57 + 1) = a3;
  sub_1F460(&v57, v56);
  swift_bridgeObjectRetain(a3);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  sub_1D728(v56, 0x79546E6F69746361, 0xEA00000000006570, isUniquelyReferenced_nonNull_native);
  v59 = &_swiftEmptyDictionarySingleton;
  swift_bridgeObjectRelease();
  sub_267BC(a4, (uint64_t)&v57, (uint64_t *)&unk_3BC540);
  if (v58)
  {
    sub_1F460(&v57, v56);
    v20 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
    sub_1D728(v56, 0x6174654465676170, 0xEB00000000736C69, v20);
    v59 = &_swiftEmptyDictionarySingleton;
    swift_bridgeObjectRelease();
    v21 = a12;
    if (a6)
      goto LABEL_3;
  }
  else
  {
    sub_1459C((uint64_t)&v57, (uint64_t *)&unk_3BC540);
    sub_1D560(0x6174654465676170, 0xEB00000000736C69, v56);
    sub_1459C((uint64_t)v56, (uint64_t *)&unk_3BC540);
    v21 = a12;
    if (a6)
    {
LABEL_3:
      v58 = &type metadata for String;
      *(_QWORD *)&v57 = a5;
      *((_QWORD *)&v57 + 1) = a6;
      sub_1F460(&v57, v56);
      swift_bridgeObjectRetain(a6);
      v22 = v59;
      v23 = swift_isUniquelyReferenced_nonNull_native(v59);
      sub_1D728(v56, 0x644965676170, 0xE600000000000000, v23);
      v59 = v22;
      swift_bridgeObjectRelease();
      v24 = a10;
      if (v21)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  sub_1D560(0x644965676170, 0xE600000000000000, &v57);
  sub_1459C((uint64_t)&v57, (uint64_t *)&unk_3BC540);
  v24 = a10;
  if (v21)
  {
LABEL_4:
    v58 = &type metadata for String;
    *(_QWORD *)&v57 = a11;
    *((_QWORD *)&v57 + 1) = v21;
    sub_1F460(&v57, v56);
    swift_bridgeObjectRetain(v21);
    v25 = v59;
    v26 = swift_isUniquelyReferenced_nonNull_native(v59);
    sub_1D728(v56, 0x416C656E6E616863, 0xED000064496D6164, v26);
    v59 = v25;
    swift_bridgeObjectRelease();
    if (v24)
      goto LABEL_5;
LABEL_10:
    sub_1D560(0x6C725565676170, 0xE700000000000000, &v57);
    v29 = sub_1459C((uint64_t)&v57, (uint64_t *)&unk_3BC540);
    if (v18 == 19)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_9:
  sub_1D560(0x416C656E6E616863, 0xED000064496D6164, &v57);
  sub_1459C((uint64_t)&v57, (uint64_t *)&unk_3BC540);
  if (!v24)
    goto LABEL_10;
LABEL_5:
  v58 = &type metadata for String;
  *(_QWORD *)&v57 = a9;
  *((_QWORD *)&v57 + 1) = v24;
  sub_1F460(&v57, v56);
  swift_bridgeObjectRetain(v24);
  v27 = v59;
  v28 = swift_isUniquelyReferenced_nonNull_native(v59);
  sub_1D728(v56, 0x6C725565676170, 0xE700000000000000, v28);
  v59 = v27;
  v29 = swift_bridgeObjectRelease();
  if (v18 == 19)
  {
LABEL_6:
    v31 = (uint64_t)v59;
    goto LABEL_13;
  }
LABEL_11:
  LOBYTE(v57) = v18;
  v32 = MetricsPageType.rawValue.getter();
  v58 = &type metadata for String;
  *(_QWORD *)&v57 = v32;
  *((_QWORD *)&v57 + 1) = v33;
  sub_1F460(&v57, v56);
  v34 = v59;
  v35 = swift_isUniquelyReferenced_nonNull_native(v59);
  sub_1D728(v56, 0x6570795465676170, 0xE800000000000000, v35);
  v31 = (uint64_t)v34;
  v59 = v34;
  v29 = swift_bridgeObjectRelease();
  if (a6)
  {
    LOBYTE(v57) = v18;
    *(_QWORD *)&v57 = MetricsPageType.rawValue.getter();
    *((_QWORD *)&v57 + 1) = v36;
    v37._countAndFlagsBits = 95;
    v37._object = (void *)0xE100000000000000;
    String.append(_:)(v37);
    v38._countAndFlagsBits = a5;
    v38._object = a6;
    String.append(_:)(v38);
    v58 = &type metadata for String;
    sub_1F460(&v57, v56);
    v39 = swift_isUniquelyReferenced_nonNull_native(v34);
    sub_1D728(v56, 1701273968, 0xE400000000000000, v39);
    v59 = v34;
    v29 = swift_bridgeObjectRelease();
  }
LABEL_13:
  v40 = static MetricsTargetType.button.getter(v29, v30);
  v42 = v41;
  v43 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B6B90);
  v44 = type metadata accessor for MetricsFieldInclusionRequest(0);
  v45 = *(_QWORD *)(v44 - 8);
  v46 = *(_QWORD *)(v45 + 72);
  v47 = *(unsigned __int8 *)(v45 + 80);
  v48 = (v47 + 32) & ~v47;
  v49 = swift_allocObject(v43, v48 + v46, v47 | 7);
  *(_OWORD *)(v49 + 16) = xmmword_2EA0D0;
  v50 = swift_bridgeObjectRetain(a8);
  static MetricsFieldInclusionRequest.crossfireReferral.getter(v50);
  v51 = sub_B371C(v49);
  swift_setDeallocating(v49);
  swift_arrayDestroy(v49 + v48, 1, v44);
  swift_deallocClassInstance(v49, 32, 7);
  v52 = type metadata accessor for ClickMetricsEvent();
  v53 = swift_allocObject(v52, 112, 7);
  v54 = sub_B2DBC(0, 0, 0, 0, 2, 2, v40, v42, a7, a8, (uint64_t)v51, v31, v53);
  swift_release(v53);
  return v54;
}

uint64_t static ClickMetricsEvent.upsellDismissClickEvent(pageType:pageDetails:pageId:pageUrl:channelAdamId:targetId:)(unsigned __int8 *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  int v16;
  char isUniquelyReferenced_nonNull_native;
  char v18;
  void *v19;
  char v20;
  void *v21;
  char v22;
  void *v23;
  char v24;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  char v30;
  uint64_t v31;
  Swift::String v32;
  Swift::String v33;
  char v34;
  char v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _OWORD v61[2];
  __int128 v62;
  void *v63;
  void *v64;

  v16 = *a1;
  v63 = &type metadata for String;
  *(_QWORD *)&v62 = 0x7373696D736964;
  *((_QWORD *)&v62 + 1) = 0xE700000000000000;
  sub_1F460(&v62, v61);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  sub_1D728(v61, 0x79546E6F69746361, 0xEA00000000006570, isUniquelyReferenced_nonNull_native);
  v64 = &_swiftEmptyDictionarySingleton;
  swift_bridgeObjectRelease();
  sub_267BC(a2, (uint64_t)&v62, (uint64_t *)&unk_3BC540);
  if (v63)
  {
    sub_1F460(&v62, v61);
    v18 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
    sub_1D728(v61, 0x6174654465676170, 0xEB00000000736C69, v18);
    v64 = &_swiftEmptyDictionarySingleton;
    swift_bridgeObjectRelease();
    if (a4)
      goto LABEL_3;
LABEL_6:
    sub_1D560(0x644965676170, 0xE600000000000000, &v62);
    sub_1459C((uint64_t)&v62, (uint64_t *)&unk_3BC540);
    if (a8)
      goto LABEL_4;
    goto LABEL_7;
  }
  sub_1459C((uint64_t)&v62, (uint64_t *)&unk_3BC540);
  sub_1D560(0x6174654465676170, 0xEB00000000736C69, v61);
  sub_1459C((uint64_t)v61, (uint64_t *)&unk_3BC540);
  if (!a4)
    goto LABEL_6;
LABEL_3:
  v63 = &type metadata for String;
  *(_QWORD *)&v62 = a3;
  *((_QWORD *)&v62 + 1) = a4;
  sub_1F460(&v62, v61);
  swift_bridgeObjectRetain(a4);
  v19 = v64;
  v20 = swift_isUniquelyReferenced_nonNull_native(v64);
  sub_1D728(v61, 0x644965676170, 0xE600000000000000, v20);
  v64 = v19;
  swift_bridgeObjectRelease();
  if (a8)
  {
LABEL_4:
    v63 = &type metadata for String;
    *(_QWORD *)&v62 = a7;
    *((_QWORD *)&v62 + 1) = a8;
    sub_1F460(&v62, v61);
    swift_bridgeObjectRetain(a8);
    v21 = v64;
    v22 = swift_isUniquelyReferenced_nonNull_native(v64);
    sub_1D728(v61, 0x416C656E6E616863, 0xED000064496D6164, v22);
    v64 = v21;
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
LABEL_7:
  sub_1D560(0x416C656E6E616863, 0xED000064496D6164, &v62);
  sub_1459C((uint64_t)&v62, (uint64_t *)&unk_3BC540);
LABEL_8:
  if (a6)
  {
    v63 = &type metadata for String;
    *(_QWORD *)&v62 = a5;
    *((_QWORD *)&v62 + 1) = a6;
    sub_1F460(&v62, v61);
    swift_bridgeObjectRetain(a6);
    v23 = v64;
    v24 = swift_isUniquelyReferenced_nonNull_native(v64);
    sub_1D728(v61, 0x6C725565676170, 0xE700000000000000, v24);
    v64 = v23;
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1D560(0x6C725565676170, 0xE700000000000000, &v62);
    sub_1459C((uint64_t)&v62, (uint64_t *)&unk_3BC540);
  }
  if (v16 == 19)
  {
    v26 = v64;
  }
  else
  {
    LOBYTE(v62) = v16;
    v27 = MetricsPageType.rawValue.getter();
    v63 = &type metadata for String;
    *(_QWORD *)&v62 = v27;
    *((_QWORD *)&v62 + 1) = v28;
    sub_1F460(&v62, v61);
    v29 = v64;
    v30 = swift_isUniquelyReferenced_nonNull_native(v64);
    sub_1D728(v61, 0x6570795465676170, 0xE800000000000000, v30);
    v26 = v29;
    swift_bridgeObjectRelease();
    if (a4)
    {
      LOBYTE(v62) = v16;
      *(_QWORD *)&v62 = MetricsPageType.rawValue.getter();
      *((_QWORD *)&v62 + 1) = v31;
      v32._countAndFlagsBits = 95;
      v32._object = (void *)0xE100000000000000;
      String.append(_:)(v32);
      v33._countAndFlagsBits = a3;
      v33._object = a4;
      String.append(_:)(v33);
      v63 = &type metadata for String;
      sub_1F460(&v62, v61);
      v34 = swift_isUniquelyReferenced_nonNull_native(v29);
      sub_1D728(v61, 1701273968, 0xE400000000000000, v34);
      v64 = v29;
      swift_bridgeObjectRelease();
    }
  }
  v63 = &type metadata for String;
  *(_QWORD *)&v62 = 0x6E6F74747562;
  *((_QWORD *)&v62 + 1) = 0xE600000000000000;
  sub_1F460(&v62, v61);
  v35 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  sub_1D728(v61, 0x6E6F697461636F6CLL, 0xEC00000065707954, v35);
  swift_bridgeObjectRelease();
  v63 = &type metadata for String;
  *(_QWORD *)&v62 = 0x7373696D736964;
  *((_QWORD *)&v62 + 1) = 0xE700000000000000;
  sub_1F460(&v62, v61);
  v36 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  sub_1D728(v61, 1701667182, 0xE400000000000000, v36);
  swift_bridgeObjectRelease();
  v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0A70);
  v38 = swift_allocObject(v37, 40, 7);
  *(_OWORD *)(v38 + 16) = xmmword_2EA0D0;
  *(_QWORD *)(v38 + 32) = &_swiftEmptyDictionarySingleton;
  v63 = (void *)__swift_instantiateConcreteTypeFromMangledName(&qword_3B6B80);
  *(_QWORD *)&v62 = v38;
  sub_1F460(&v62, v61);
  v39 = swift_isUniquelyReferenced_nonNull_native(v26);
  sub_1D728(v61, 0x6E6F697461636F6CLL, 0xE800000000000000, v39);
  v40 = (uint64_t)v26;
  v64 = v26;
  v41 = swift_bridgeObjectRelease();
  v43 = static MetricsTargetType.button.getter(v41, v42);
  v45 = v44;
  if (a10)
  {
    v46 = a10;
  }
  else
  {
    a9 = 0;
    v46 = 0xE000000000000000;
  }
  v47 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B6B90);
  v48 = type metadata accessor for MetricsFieldInclusionRequest(0);
  v49 = *(_QWORD *)(v48 - 8);
  v50 = *(_QWORD *)(v49 + 72);
  v51 = *(unsigned __int8 *)(v49 + 80);
  v52 = (v51 + 32) & ~v51;
  v53 = swift_allocObject(v47, v52 + v50, v51 | 7);
  *(_OWORD *)(v53 + 16) = xmmword_2EA0D0;
  v54 = swift_bridgeObjectRetain(a10);
  static MetricsFieldInclusionRequest.crossfireReferral.getter(v54);
  v55 = sub_B371C(v53);
  swift_setDeallocating(v53);
  swift_arrayDestroy(v53 + v52, 1, v48);
  swift_deallocClassInstance(v53, 32, 7);
  v56 = type metadata accessor for ClickMetricsEvent();
  v57 = swift_allocObject(v56, 112, 7);
  v58 = sub_B2DBC(0, 0, 0, 0, 2, 2, v43, v45, a9, v46, (uint64_t)v55, v40, v57);
  swift_release(v57);
  return v58;
}

uint64_t static ClickMetricsEvent.makeTranscriptSearchClickEvent(adamId:)(uint64_t a1, uint64_t a2)
{
  char isUniquelyReferenced_nonNull_native;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD v24[2];
  __int128 v25;
  void *v26;

  if (a2)
  {
    v26 = &type metadata for String;
    *(_QWORD *)&v25 = a1;
    *((_QWORD *)&v25 + 1) = a2;
    sub_1F460(&v25, v24);
    swift_bridgeObjectRetain(a2);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
    sub_1D728(v24, 0x644965676170, 0xE600000000000000, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
  }
  v26 = &type metadata for String;
  *(_QWORD *)&v25 = 0x697263736E617254;
  *((_QWORD *)&v25 + 1) = 0xEA00000000007470;
  sub_1F460(&v25, v24);
  v4 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  sub_1D728(v24, 0x6570795465676170, 0xE800000000000000, v4);
  swift_bridgeObjectRelease();
  v26 = &type metadata for String;
  *(_QWORD *)&v25 = 0x7463656C6573;
  *((_QWORD *)&v25 + 1) = 0xE600000000000000;
  sub_1F460(&v25, v24);
  v5 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  sub_1D728(v24, 0x79546E6F69746361, 0xEA00000000006570, v5);
  swift_bridgeObjectRelease();
  v26 = &type metadata for String;
  *(_QWORD *)&v25 = 0x6B63696C63;
  *((_QWORD *)&v25 + 1) = 0xE500000000000000;
  sub_1F460(&v25, v24);
  v6 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  sub_1D728(v24, 0x707954746E657665, 0xE900000000000065, v6);
  v7 = swift_bridgeObjectRelease();
  v9 = static MetricsTargetType.button.getter(v7, v8);
  v11 = v10;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B6B90);
  v13 = type metadata accessor for MetricsFieldInclusionRequest(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = swift_allocObject(v12, v17 + v15, v16 | 7);
  *(_OWORD *)(v18 + 16) = xmmword_2EA0D0;
  static MetricsFieldInclusionRequest.crossfireReferral.getter(v18);
  v19 = sub_B371C(v18);
  swift_setDeallocating(v18);
  swift_arrayDestroy(v18 + v17, 1, v13);
  swift_deallocClassInstance(v18, 32, 7);
  v20 = type metadata accessor for ClickMetricsEvent();
  v21 = swift_allocObject(v20, 112, 7);
  v22 = sub_B2DBC(0, 0, 0, 0, 2, 2, v9, v11, 0xD000000000000010, 0x800000000030DB10, (uint64_t)v19, (uint64_t)&_swiftEmptyDictionarySingleton, v21);
  swift_release(v21);
  return v22;
}

uint64_t static ClickMetricsEvent.makeBackClickEvent()()
{
  char isUniquelyReferenced_nonNull_native;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD v19[2];
  __int128 v20;
  void *v21;

  v21 = &type metadata for String;
  *(_QWORD *)&v20 = 1801675106;
  *((_QWORD *)&v20 + 1) = 0xE400000000000000;
  sub_1F460(&v20, v19);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  sub_1D728(v19, 0x79546E6F69746361, 0xEA00000000006570, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  v21 = &type metadata for String;
  *(_QWORD *)&v20 = 0x6B63696C63;
  *((_QWORD *)&v20 + 1) = 0xE500000000000000;
  sub_1F460(&v20, v19);
  v1 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  sub_1D728(v19, 0x707954746E657665, 0xE900000000000065, v1);
  v2 = swift_bridgeObjectRelease();
  v4 = static MetricsTargetType.button.getter(v2, v3);
  v6 = v5;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B6B90);
  v8 = type metadata accessor for MetricsFieldInclusionRequest(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 72);
  v11 = *(unsigned __int8 *)(v9 + 80);
  v12 = (v11 + 32) & ~v11;
  v13 = swift_allocObject(v7, v12 + v10, v11 | 7);
  *(_OWORD *)(v13 + 16) = xmmword_2EA0D0;
  static MetricsFieldInclusionRequest.impressionsSnapshot.getter(v13);
  v14 = sub_B371C(v13);
  swift_setDeallocating(v13);
  swift_arrayDestroy(v13 + v12, 1, v8);
  swift_deallocClassInstance(v13, 32, 7);
  v15 = type metadata accessor for ClickMetricsEvent();
  v16 = swift_allocObject(v15, 112, 7);
  v17 = sub_B2DBC(0, 0, 0, 0, 2, 2, v4, v6, 0x776F4E20746F4ELL, 0xE700000000000000, (uint64_t)v14, (uint64_t)&_swiftEmptyDictionarySingleton, v16);
  swift_release(v16);
  return v17;
}

uint64_t static ClickMetricsEvent.makeTranscriptFooterButtonClickEvent(isOn:)(char a1)
{
  char isUniquelyReferenced_nonNull_native;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD v22[2];
  __int128 v23;
  void *v24;

  v24 = &type metadata for String;
  *(_QWORD *)&v23 = 0x657461676976616ELL;
  *((_QWORD *)&v23 + 1) = 0xE800000000000000;
  sub_1F460(&v23, v22);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  sub_1D728(v22, 0x79546E6F69746361, 0xEA00000000006570, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  v24 = &type metadata for String;
  *(_QWORD *)&v23 = 0x6B63696C63;
  *((_QWORD *)&v23 + 1) = 0xE500000000000000;
  sub_1F460(&v23, v22);
  v3 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  sub_1D728(v22, 0x707954746E657665, 0xE900000000000065, v3);
  v4 = swift_bridgeObjectRelease();
  v6 = static MetricsTargetType.button.getter(v4, v5);
  v8 = v7;
  if ((a1 & 1) != 0)
    v9 = 0x6E617254776F6873;
  else
    v9 = 0x6E61725465646968;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B6B90);
  v11 = type metadata accessor for MetricsFieldInclusionRequest(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 72);
  v14 = *(unsigned __int8 *)(v12 + 80);
  v15 = (v14 + 32) & ~v14;
  v16 = swift_allocObject(v10, v15 + v13, v14 | 7);
  *(_OWORD *)(v16 + 16) = xmmword_2EA0D0;
  static MetricsFieldInclusionRequest.crossfireReferral.getter(v16);
  v17 = sub_B371C(v16);
  swift_setDeallocating(v16);
  swift_arrayDestroy(v16 + v15, 1, v11);
  swift_deallocClassInstance(v16, 32, 7);
  v18 = type metadata accessor for ClickMetricsEvent();
  v19 = swift_allocObject(v18, 112, 7);
  v20 = sub_B2DBC(0, 0, 0, 0, 2, 2, v6, v8, v9, 0xEE00747069726373, (uint64_t)v17, (uint64_t)&_swiftEmptyDictionarySingleton, v19);
  swift_release(v19);
  return v20;
}

uint64_t static ClickMetricsEvent.makeQueueFooterButtonClickEvent(isOn:)(char a1)
{
  char isUniquelyReferenced_nonNull_native;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD v22[2];
  __int128 v23;
  void *v24;

  v24 = &type metadata for String;
  *(_QWORD *)&v23 = 0x657461676976616ELL;
  *((_QWORD *)&v23 + 1) = 0xE800000000000000;
  sub_1F460(&v23, v22);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  sub_1D728(v22, 0x79546E6F69746361, 0xEA00000000006570, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  v24 = &type metadata for String;
  *(_QWORD *)&v23 = 0x6B63696C63;
  *((_QWORD *)&v23 + 1) = 0xE500000000000000;
  sub_1F460(&v23, v22);
  v3 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  sub_1D728(v22, 0x707954746E657665, 0xE900000000000065, v3);
  v4 = swift_bridgeObjectRelease();
  v6 = static MetricsTargetType.button.getter(v4, v5);
  v8 = v7;
  if ((a1 & 1) != 0)
    v9 = 0x75657551776F6873;
  else
    v9 = 0x7565755165646968;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B6B90);
  v11 = type metadata accessor for MetricsFieldInclusionRequest(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 72);
  v14 = *(unsigned __int8 *)(v12 + 80);
  v15 = (v14 + 32) & ~v14;
  v16 = swift_allocObject(v10, v15 + v13, v14 | 7);
  *(_OWORD *)(v16 + 16) = xmmword_2EA0D0;
  static MetricsFieldInclusionRequest.crossfireReferral.getter(v16);
  v17 = sub_B371C(v16);
  swift_setDeallocating(v16);
  swift_arrayDestroy(v16 + v15, 1, v11);
  swift_deallocClassInstance(v16, 32, 7);
  v18 = type metadata accessor for ClickMetricsEvent();
  v19 = swift_allocObject(v18, 112, 7);
  v20 = sub_B2DBC(0, 0, 0, 0, 2, 2, v6, v8, v9, 0xE900000000000065, (uint64_t)v17, (uint64_t)&_swiftEmptyDictionarySingleton, v19);
  swift_release(v19);
  return v20;
}

uint64_t static ClickMetricsEvent.makeSearchContextMenuClickEvent(for:metricsFields:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char isUniquelyReferenced_nonNull_native;
  void *v7;
  char v8;
  _QWORD *v9;
  char v10;
  unint64_t v11;
  char v12;
  char v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v39;
  char v40;
  _QWORD *v41;
  _OWORD v42[2];
  __int128 v43;
  __int128 v44;
  void *v45;

  *((_QWORD *)&v44 + 1) = &type metadata for String;
  *(_QWORD *)&v43 = 0x68536E6F69746361;
  *((_QWORD *)&v43 + 1) = 0xEB00000000746565;
  sub_1F460(&v43, v42);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  v45 = &_swiftEmptyDictionarySingleton;
  sub_1D728(v42, 0x79546E6F69746361, 0xEA00000000006570, isUniquelyReferenced_nonNull_native);
  v7 = v45;
  swift_bridgeObjectRelease();
  *((_QWORD *)&v44 + 1) = &type metadata for String;
  *(_QWORD *)&v43 = 0x6E6F74747562;
  *((_QWORD *)&v43 + 1) = 0xE600000000000000;
  sub_1F460(&v43, v42);
  v8 = swift_isUniquelyReferenced_nonNull_native(v7);
  v45 = v7;
  sub_1D728(v42, 0x7954746567726174, 0xEA00000000006570, v8);
  v9 = v45;
  swift_bridgeObjectRelease();
  *((_QWORD *)&v44 + 1) = &type metadata for String;
  strcpy((char *)&v43, "SearchResults");
  HIWORD(v43) = -4864;
  sub_1F460(&v43, v42);
  v10 = swift_isUniquelyReferenced_nonNull_native(v9);
  v41 = v9;
  sub_1D728(v42, 0x6570795465676170, 0xE800000000000000, v10);
  v45 = v9;
  swift_bridgeObjectRelease();
  if (!a3)
  {
    sub_1D560(0x737265746C6966, 0xE700000000000000, v42);
    sub_1459C((uint64_t)v42, (uint64_t *)&unk_3BC540);
    goto LABEL_13;
  }
  if (!*(_QWORD *)(a3 + 16) || (v11 = sub_29724(0x737265746C6966, 0xE700000000000000), (v12 & 1) == 0))
  {
    sub_1D560(0x737265746C6966, 0xE700000000000000, v42);
    sub_1459C((uint64_t)v42, (uint64_t *)&unk_3BC540);
    if (*(_QWORD *)(a3 + 16))
      goto LABEL_7;
LABEL_13:
    v43 = 0u;
    v44 = 0u;
    goto LABEL_14;
  }
  sub_1FB98(*(_QWORD *)(a3 + 56) + 32 * v11, (uint64_t)&v43);
  sub_1F460(&v43, v42);
  v13 = swift_isUniquelyReferenced_nonNull_native(v9);
  v41 = v9;
  sub_1D728(v42, 0x737265746C6966, 0xE700000000000000, v13);
  v45 = v9;
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(a3 + 16))
    goto LABEL_13;
LABEL_7:
  v14 = sub_29724(0x737265746C6966, 0xE700000000000000);
  if ((v15 & 1) == 0)
    goto LABEL_13;
  sub_1FB98(*(_QWORD *)(a3 + 56) + 32 * v14, (uint64_t)v42);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0A78);
  if ((swift_dynamicCast(&v41, v42, (char *)&type metadata for Any + 8, v16, 6) & 1) == 0)
    goto LABEL_13;
  v17 = v41;
  if (v41[2] && (v18 = sub_29724(0xD000000000000013, 0x800000000030DB30), (v19 & 1) != 0))
  {
    sub_1FB98(v17[7] + 32 * v18, (uint64_t)&v43);
  }
  else
  {
    v43 = 0u;
    v44 = 0u;
  }
  swift_bridgeObjectRelease();
  if (*((_QWORD *)&v44 + 1))
  {
    sub_1F460(&v43, v42);
    v39 = v45;
    v40 = swift_isUniquelyReferenced_nonNull_native(v45);
    v41 = v39;
    sub_1D728(v42, 0x644965676170, 0xE600000000000000, v40);
    v22 = (uint64_t)v41;
    v45 = v41;
    v20 = swift_bridgeObjectRelease();
    goto LABEL_15;
  }
LABEL_14:
  sub_1459C((uint64_t)&v43, (uint64_t *)&unk_3BC540);
  sub_1D560(0x644965676170, 0xE600000000000000, v42);
  v20 = sub_1459C((uint64_t)v42, (uint64_t *)&unk_3BC540);
  v22 = (uint64_t)v45;
LABEL_15:
  v23 = static MetricsTargetType.button.getter(v20, v21);
  v25 = v24;
  v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B6B90);
  v27 = type metadata accessor for MetricsFieldInclusionRequest(0);
  v28 = *(_QWORD *)(v27 - 8);
  v29 = *(_QWORD *)(v28 + 72);
  v30 = *(unsigned __int8 *)(v28 + 80);
  v31 = (v30 + 32) & ~v30;
  v32 = swift_allocObject(v26, v31 + v29, v30 | 7);
  *(_OWORD *)(v32 + 16) = xmmword_2EA0D0;
  v33 = swift_bridgeObjectRetain(a2);
  static MetricsFieldInclusionRequest.crossfireReferral.getter(v33);
  v34 = sub_B371C(v32);
  swift_setDeallocating(v32);
  swift_arrayDestroy(v32 + v31, 1, v27);
  swift_deallocClassInstance(v32, 32, 7);
  v35 = type metadata accessor for ClickMetricsEvent();
  v36 = swift_allocObject(v35, 112, 7);
  v37 = sub_B2DBC(0, 0, 0, 0, 2, 2, v23, v25, a1, a2, (uint64_t)v34, v22, v36);
  swift_release(v36);
  return v37;
}

uint64_t static ClickMetricsEvent.makePlayerContextMenuClickEvent(for:)(uint64_t a1, uint64_t a2)
{
  char isUniquelyReferenced_nonNull_native;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD v25[2];
  __int128 v26;
  void *v27;

  v27 = &type metadata for String;
  *(_QWORD *)&v26 = 0x68536E6F69746361;
  *((_QWORD *)&v26 + 1) = 0xEB00000000746565;
  sub_1F460(&v26, v25);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  sub_1D728(v25, 0x79546E6F69746361, 0xEA00000000006570, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  v27 = &type metadata for String;
  *(_QWORD *)&v26 = 0x6E6F74747562;
  *((_QWORD *)&v26 + 1) = 0xE600000000000000;
  sub_1F460(&v26, v25);
  v5 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  sub_1D728(v25, 0x7954746567726174, 0xEA00000000006570, v5);
  swift_bridgeObjectRelease();
  v27 = &type metadata for String;
  *(_QWORD *)&v26 = 0x6979616C50776F4ELL;
  *((_QWORD *)&v26 + 1) = 0xEA0000000000676ELL;
  sub_1F460(&v26, v25);
  v6 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  sub_1D728(v25, 0x6570795465676170, 0xE800000000000000, v6);
  v7 = swift_bridgeObjectRelease();
  v9 = static MetricsTargetType.button.getter(v7, v8);
  v11 = v10;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B6B90);
  v13 = type metadata accessor for MetricsFieldInclusionRequest(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = swift_allocObject(v12, v17 + v15, v16 | 7);
  *(_OWORD *)(v18 + 16) = xmmword_2EA0D0;
  v19 = swift_bridgeObjectRetain(a2);
  static MetricsFieldInclusionRequest.crossfireReferral.getter(v19);
  v20 = sub_B371C(v18);
  swift_setDeallocating(v18);
  swift_arrayDestroy(v18 + v17, 1, v13);
  swift_deallocClassInstance(v18, 32, 7);
  v21 = type metadata accessor for ClickMetricsEvent();
  v22 = swift_allocObject(v21, 112, 7);
  v23 = sub_B2DBC(0, 0, 0, 0, 2, 2, v9, v11, a1, a2, (uint64_t)v20, (uint64_t)&_swiftEmptyDictionarySingleton, v22);
  swift_release(v22);
  return v23;
}

uint64_t static ClickMetricsEvent.makeTranscriptTextClickEvent(for:)(uint64_t a1, uint64_t a2)
{
  char isUniquelyReferenced_nonNull_native;
  char v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD v25[2];
  __int128 v26;
  void *v27;

  v27 = &type metadata for String;
  *(_QWORD *)&v26 = 2036427888;
  *((_QWORD *)&v26 + 1) = 0xE400000000000000;
  sub_1F460(&v26, v25);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  sub_1D728(v25, 0x79546E6F69746361, 0xEA00000000006570, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  v27 = &type metadata for String;
  strcpy((char *)&v26, "transcriptText");
  HIBYTE(v26) = -18;
  sub_1F460(&v26, v25);
  v5 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  sub_1D728(v25, 0x7954746567726174, 0xEA00000000006570, v5);
  swift_bridgeObjectRelease();
  v27 = &type metadata for String;
  *(_QWORD *)&v26 = 0x6B63696C63;
  *((_QWORD *)&v26 + 1) = 0xE500000000000000;
  sub_1F460(&v26, v25);
  v6 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  sub_1D728(v25, 0x707954746E657665, 0xE900000000000065, v6);
  swift_bridgeObjectRelease();
  v27 = &type metadata for String;
  strcpy((char *)&v26, "NowPlaying");
  BYTE11(v26) = 0;
  HIDWORD(v26) = -369098752;
  sub_1F460(&v26, v25);
  v7 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  sub_1D728(v25, 0x6570795465676170, 0xE800000000000000, v7);
  v8 = swift_bridgeObjectRelease();
  v9 = static MetricsTargetType.transcriptText.getter(v8);
  v11 = v10;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B6B90);
  v13 = type metadata accessor for MetricsFieldInclusionRequest(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = swift_allocObject(v12, v17 + v15, v16 | 7);
  *(_OWORD *)(v18 + 16) = xmmword_2EA0D0;
  v19 = swift_bridgeObjectRetain(a2);
  static MetricsFieldInclusionRequest.crossfireReferral.getter(v19);
  v20 = sub_B371C(v18);
  swift_setDeallocating(v18);
  swift_arrayDestroy(v18 + v17, 1, v13);
  swift_deallocClassInstance(v18, 32, 7);
  v21 = type metadata accessor for ClickMetricsEvent();
  v22 = swift_allocObject(v21, 112, 7);
  v23 = sub_B2DBC(0, 0, 0, 0, 2, 2, v9, v11, a1, a2, (uint64_t)v20, (uint64_t)&_swiftEmptyDictionarySingleton, v22);
  swift_release(v22);
  return v23;
}

uint64_t static ClickMetricsEvent.makeErrorRetryEvent()()
{
  char isUniquelyReferenced_nonNull_native;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD v19[2];
  __int128 v20;
  void *v21;

  v21 = &type metadata for String;
  *(_QWORD *)&v20 = 0x7972746572;
  *((_QWORD *)&v20 + 1) = 0xE500000000000000;
  sub_1F460(&v20, v19);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  sub_1D728(v19, 0x79546E6F69746361, 0xEA00000000006570, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  v21 = &type metadata for String;
  *(_QWORD *)&v20 = 0x726F727245;
  *((_QWORD *)&v20 + 1) = 0xE500000000000000;
  sub_1F460(&v20, v19);
  v1 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  sub_1D728(v19, 1701273968, 0xE400000000000000, v1);
  v2 = swift_bridgeObjectRelease();
  v4 = static MetricsTargetType.button.getter(v2, v3);
  v6 = v5;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B6B90);
  v8 = type metadata accessor for MetricsFieldInclusionRequest(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 72);
  v11 = *(unsigned __int8 *)(v9 + 80);
  v12 = (v11 + 32) & ~v11;
  v13 = swift_allocObject(v7, v12 + v10, v11 | 7);
  *(_OWORD *)(v13 + 16) = xmmword_2EA0D0;
  static MetricsFieldInclusionRequest.crossfireReferral.getter(v13);
  v14 = sub_B371C(v13);
  swift_setDeallocating(v13);
  swift_arrayDestroy(v13 + v12, 1, v8);
  swift_deallocClassInstance(v13, 32, 7);
  v15 = type metadata accessor for ClickMetricsEvent();
  v16 = swift_allocObject(v15, 112, 7);
  v17 = sub_B2DBC(0, 0, 0, 0, 2, 2, v4, v6, 0x7972746552, 0xE500000000000000, (uint64_t)v14, (uint64_t)&_swiftEmptyDictionarySingleton, v16);
  swift_release(v16);
  return v17;
}

uint64_t sub_B1A70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  id v10;
  int v11;
  id v12;
  uint64_t v13;
  char v14;
  int v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  __int128 v29;
  void *v30;
  __int128 v31;
  void *v32;
  _BYTE v33[24];
  uint64_t v34;

  v1 = v0;
  swift_beginAccess(v0 + 16, v33, 0, 0);
  v2 = *(_QWORD *)(v0 + 16);
  v34 = v2;
  v3 = *(_QWORD *)(v1 + 40);
  if (v3)
  {
    v4 = *(_QWORD *)(v1 + 32);
    v32 = &type metadata for String;
    *(_QWORD *)&v31 = v4;
    *((_QWORD *)&v31 + 1) = v3;
    sub_1F460(&v31, &v29);
    swift_bridgeObjectRetain(v2);
    swift_bridgeObjectRetain(v3);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v2);
    sub_1D728(&v29, 0x65526E6F69746361, 0xEC000000746C7573, isUniquelyReferenced_nonNull_native);
    v34 = v2;
    swift_bridgeObjectRelease();
    v6 = *(_QWORD *)(v1 + 56);
    if (v6)
      goto LABEL_3;
LABEL_6:
    v10 = objc_msgSend(objc_allocWithZone((Class)NSNull), "init");
    v32 = (void *)sub_327F8(0, &qword_3B6A78, NSNull_ptr);
    *(_QWORD *)&v31 = v10;
    if (v32)
      goto LABEL_4;
    goto LABEL_7;
  }
  swift_bridgeObjectRetain(v2);
  sub_1D560(0x65526E6F69746361, 0xEC000000746C7573, &v31);
  sub_1459C((uint64_t)&v31, (uint64_t *)&unk_3BC540);
  v6 = *(_QWORD *)(v1 + 56);
  if (!v6)
    goto LABEL_6;
LABEL_3:
  v7 = *(_QWORD *)(v1 + 48);
  v30 = &type metadata for String;
  *(_QWORD *)&v29 = v7;
  *((_QWORD *)&v29 + 1) = v6;
  sub_1F460(&v29, &v31);
  if (v32)
  {
LABEL_4:
    sub_1F460(&v31, &v29);
    swift_bridgeObjectRetain(v6);
    v8 = v34;
    v9 = swift_isUniquelyReferenced_nonNull_native(v34);
    sub_1D728(&v29, 0x6C69626967696C65, 0xEF65707954797469, v9);
    v34 = v8;
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
LABEL_7:
  swift_bridgeObjectRetain(v6);
  sub_1459C((uint64_t)&v31, (uint64_t *)&unk_3BC540);
  sub_1D560(0x6C69626967696C65, 0xEF65707954797469, &v29);
  sub_1459C((uint64_t)&v29, (uint64_t *)&unk_3BC540);
LABEL_8:
  v11 = *(unsigned __int8 *)(v1 + 64);
  if (v11 == 2)
  {
    v12 = objc_msgSend(objc_allocWithZone((Class)NSNull), "init");
    v32 = (void *)sub_327F8(0, &qword_3B6A78, NSNull_ptr);
    *(_QWORD *)&v31 = v12;
    if (v32)
    {
LABEL_10:
      sub_1F460(&v31, &v29);
      v13 = v34;
      v14 = swift_isUniquelyReferenced_nonNull_native(v34);
      sub_1D728(&v29, 0x796C696D61467369, 0xE800000000000000, v14);
      v34 = v13;
      swift_bridgeObjectRelease();
      goto LABEL_13;
    }
  }
  else
  {
    v30 = &type metadata for Bool;
    LOBYTE(v29) = v11 & 1;
    sub_1F460(&v29, &v31);
    if (v32)
      goto LABEL_10;
  }
  sub_1459C((uint64_t)&v31, (uint64_t *)&unk_3BC540);
  sub_1D560(0x796C696D61467369, 0xE800000000000000, &v29);
  sub_1459C((uint64_t)&v29, (uint64_t *)&unk_3BC540);
LABEL_13:
  v15 = *(unsigned __int8 *)(v1 + 65);
  if (v15 == 2)
  {
    v16 = objc_msgSend(objc_allocWithZone((Class)NSNull), "init");
    v17 = sub_327F8(0, &qword_3B6A78, NSNull_ptr);
    v32 = (void *)v17;
    *(_QWORD *)&v31 = v16;
  }
  else
  {
    v30 = &type metadata for Bool;
    LOBYTE(v29) = v15 & 1;
    sub_1F460(&v29, &v31);
    v17 = (uint64_t)v32;
  }
  if (v17)
  {
    sub_1F460(&v31, &v29);
    v18 = v34;
    v19 = swift_isUniquelyReferenced_nonNull_native(v34);
    sub_1D728(&v29, 0x6E65647574537369, 0xE900000000000074, v19);
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1459C((uint64_t)&v31, (uint64_t *)&unk_3BC540);
    sub_1D560(0x6E65647574537369, 0xE900000000000074, &v29);
    sub_1459C((uint64_t)&v29, (uint64_t *)&unk_3BC540);
    v18 = v34;
  }
  v32 = &type metadata for String;
  *(_QWORD *)&v31 = 0x6B63696C63;
  *((_QWORD *)&v31 + 1) = 0xE500000000000000;
  sub_1F460(&v31, &v29);
  v20 = swift_isUniquelyReferenced_nonNull_native(v18);
  sub_1D728(&v29, 0x707954746E657665, 0xE900000000000065, v20);
  swift_bridgeObjectRelease();
  v21 = *(_QWORD *)(v1 + 88);
  v22 = *(_QWORD *)(v1 + 96);
  v32 = &type metadata for String;
  *(_QWORD *)&v31 = v21;
  *((_QWORD *)&v31 + 1) = v22;
  sub_1F460(&v31, &v29);
  swift_bridgeObjectRetain(v22);
  v23 = swift_isUniquelyReferenced_nonNull_native(v18);
  sub_1D728(&v29, 0x7954746567726174, 0xEA00000000006570, v23);
  v34 = v18;
  swift_bridgeObjectRelease();
  v24 = *(_QWORD *)(v1 + 80);
  if (v24)
  {
    v25 = *(_QWORD *)(v1 + 72);
    v32 = &type metadata for String;
    *(_QWORD *)&v31 = v25;
    *((_QWORD *)&v31 + 1) = v24;
    sub_1F460(&v31, &v29);
    swift_bridgeObjectRetain(v24);
    v26 = swift_isUniquelyReferenced_nonNull_native(v18);
    sub_1D728(&v29, 0x6449746567726174, 0xE800000000000000, v26);
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1D560(0x6449746567726174, 0xE800000000000000, &v31);
    sub_1459C((uint64_t)&v31, (uint64_t *)&unk_3BC540);
    v18 = v34;
  }
  swift_beginAccess(v1 + 104, &v31, 0, 0);
  v27 = *(_QWORD *)(v1 + 104);
  swift_bridgeObjectRetain(v27);
  return MetricsData.init(topic:shouldFlush:fields:includingFields:excludingFields:)(0xD000000000000014, 0x800000000030DA90, 0, v18, v27, &_swiftEmptySetSingleton);
}

uint64_t ClickMetricsEvent.__allocating_init(actionResult:eligibilityType:isFamily:isStudent:targetTypeRaw:targetId:including:eventFields:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v20;
  uint64_t v21;

  v20 = swift_allocObject(v12, 112, 7);
  v21 = sub_B2DBC(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, v20);
  swift_release(v20);
  return v21;
}

uint64_t ClickMetricsEvent.init(actionResult:eligibilityType:isFamily:isStudent:targetTypeRaw:targetId:including:eventFields:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v12 = sub_B2DBC(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, v14, v15);
  swift_release(v11);
  return v12;
}

void ClickMetricsEvent.__allocating_init(eventFields:invocationPoints:)()
{
  _swift_stdlib_reportUnimplementedInitializer("ShelfKit.ClickMetricsEvent", 26, "init(eventFields:invocationPoints:)", 35, 0);
  __break(1u);
}

void ClickMetricsEvent.init(eventFields:invocationPoints:)(uint64_t a1, uint64_t a2)
{
  sub_B2884(a1, a2, (uint64_t)"ShelfKit.ClickMetricsEvent", 26);
}

uint64_t sub_B21D4()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[7]);
  swift_bridgeObjectRelease(v0[10]);
  swift_bridgeObjectRelease(v0[12]);
  return swift_bridgeObjectRelease(v0[13]);
}

_QWORD *ClickMetricsEvent.deinit()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[2]);
  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[7]);
  swift_bridgeObjectRelease(v0[10]);
  swift_bridgeObjectRelease(v0[12]);
  swift_bridgeObjectRelease(v0[13]);
  return v0;
}

uint64_t ClickMetricsEvent.__deallocating_deinit()
{
  uint64_t v0;

  ClickMetricsEvent.deinit();
  return swift_deallocClassInstance(v0, 112, 7);
}

uint64_t LegacyMetricsPageEnterGate.hasAppeared.getter()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 32, v2, 0, 0);
  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t sub_B22A4(char a1)
{
  uint64_t v1;
  uint64_t result;
  _BYTE v4[24];

  result = swift_beginAccess(v1 + 32, v4, 1, 0);
  *(_BYTE *)(v1 + 32) = a1;
  return result;
}

uint64_t (*sub_B22E0(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + 32, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t sub_B231C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char isUniquelyReferenced_nonNull_native;
  int v5;
  id v6;
  char v7;
  _QWORD v9[3];
  _OWORD v10[2];
  __int128 v11;
  void *v12;
  _BYTE v13[24];

  v1 = v0;
  swift_beginAccess(v0 + 16, v13, 0, 0);
  v2 = *(_QWORD *)(v0 + 16);
  v12 = &type metadata for String;
  *(_QWORD *)&v11 = 1701273968;
  *((_QWORD *)&v11 + 1) = 0xE400000000000000;
  sub_1F460(&v11, v10);
  v3 = swift_bridgeObjectRetain(v2);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v3);
  v9[0] = v2;
  sub_1D728(v10, 0x707954746E657665, 0xE900000000000065, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  swift_beginAccess(v1 + 32, v9, 0, 0);
  v5 = *(unsigned __int8 *)(v1 + 32);
  if (v5 != 2)
  {
    v6 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithBool:", v5 & 1);
    v12 = (void *)sub_327F8(0, (unint64_t *)&qword_3C7F30, NSNumber_ptr);
    *(_QWORD *)&v11 = v6;
    sub_1F460(&v11, v10);
    v7 = swift_isUniquelyReferenced_nonNull_native(v2);
    sub_1D728(v10, 0x6E6F737265507369, 0xEE0064657A696C61, v7);
    swift_bridgeObjectRelease();
  }
  return MetricsData.init(topic:shouldFlush:fields:includingFields:excludingFields:)(0xD000000000000014, 0x800000000030DA90, 0, v2, &_swiftEmptySetSingleton, &_swiftEmptySetSingleton);
}

uint64_t PageMetricsEvent.__allocating_init(error:pageUrl:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;

  v7 = swift_allocObject(v3, 34, 7);
  v8 = sub_B4D5C(a1, a2, a3, v7);
  swift_release(v7);
  swift_errorRelease(a1);
  return v8;
}

uint64_t PageMetricsEvent.init(error:pageUrl:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;

  v5 = sub_B4D5C(a1, a2, a3, v3);
  swift_release(v3);
  swift_errorRelease(a1);
  return v5;
}

uint64_t PageMetricsEvent.__allocating_init(searchTerm:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = swift_allocObject(v2, 34, 7);
  PageMetricsEvent.init(searchTerm:)(a1, a2);
  return v5;
}

uint64_t PageMetricsEvent.init(searchTerm:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t inited;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _BYTE v12[64];
  _BYTE v13[280];

  *(_WORD *)(v2 + 32) = 2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B5020);
  inited = swift_initStackObject(v5, v13);
  *(_OWORD *)(inited + 16) = xmmword_2F27F0;
  *(_QWORD *)(inited + 32) = 1701273968;
  *(_QWORD *)(inited + 40) = 0xE400000000000000;
  strcpy((char *)(inited + 48), "Search_hints");
  *(_BYTE *)(inited + 61) = 0;
  *(_WORD *)(inited + 62) = -5120;
  *(_QWORD *)(inited + 72) = &type metadata for String;
  *(_QWORD *)(inited + 80) = 0x6570795465676170;
  *(_QWORD *)(inited + 88) = 0xE800000000000000;
  *(_QWORD *)(inited + 96) = 0x686372616553;
  *(_QWORD *)(inited + 104) = 0xE600000000000000;
  *(_QWORD *)(inited + 120) = &type metadata for String;
  *(_QWORD *)(inited + 128) = 0x644965676170;
  *(_QWORD *)(inited + 136) = 0xE600000000000000;
  *(_QWORD *)(inited + 144) = 0x73746E6968;
  *(_QWORD *)(inited + 152) = 0xE500000000000000;
  *(_QWORD *)(inited + 168) = &type metadata for String;
  *(_QWORD *)(inited + 176) = 1836213620;
  *(_QWORD *)(inited + 184) = 0xE400000000000000;
  *(_QWORD *)(inited + 192) = a1;
  *(_QWORD *)(inited + 200) = a2;
  *(_QWORD *)(inited + 216) = &type metadata for String;
  *(_QWORD *)(inited + 224) = 0x737265746C6966;
  *(_QWORD *)(inited + 232) = 0xE700000000000000;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B6B98);
  v8 = swift_initStackObject(v7, v12);
  *(_OWORD *)(v8 + 16) = xmmword_2EA0D0;
  *(_QWORD *)(v8 + 32) = 0xD000000000000011;
  *(_QWORD *)(v8 + 40) = 0x800000000030DBA0;
  *(_QWORD *)(v8 + 48) = static MetricsTargetID.applePodcasts.getter(v8);
  *(_QWORD *)(v8 + 56) = v9;
  v10 = sub_2886B4(v8);
  *(_QWORD *)(inited + 264) = __swift_instantiateConcreteTypeFromMangledName(&qword_3B6BA0);
  *(_QWORD *)(inited + 240) = v10;
  *(_QWORD *)(v2 + 16) = sub_287F38(inited);
  *(_QWORD *)(v2 + 24) = _swiftEmptyArrayStorage;
  return v2;
}

uint64_t sub_B2754()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  char v3;
  uint64_t v5;
  _BYTE v6[24];
  __int128 v7;
  __int128 v8;

  swift_beginAccess(v0 + 16, v6, 0, 0);
  v1 = *(_QWORD *)(v0 + 16);
  if (!*(_QWORD *)(v1 + 16))
  {
    v7 = 0u;
    v8 = 0u;
LABEL_11:
    sub_1459C((uint64_t)&v7, (uint64_t *)&unk_3BC540);
    return 0;
  }
  swift_bridgeObjectRetain(v1);
  v2 = sub_29724(0x6C725565676170, 0xE700000000000000);
  if ((v3 & 1) != 0)
  {
    sub_1FB98(*(_QWORD *)(v1 + 56) + 32 * v2, (uint64_t)&v7);
  }
  else
  {
    v7 = 0u;
    v8 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v8 + 1))
    goto LABEL_11;
  if (swift_dynamicCast(&v5, &v7, (char *)&type metadata for Any + 8, &type metadata for String, 6))
    return v5;
  else
    return 0;
}

void PageMetricsEvent.__allocating_init(eventFields:invocationPoints:)()
{
  _swift_stdlib_reportUnimplementedInitializer("ShelfKit.PageMetricsEvent", 25, "init(eventFields:invocationPoints:)", 35, 0);
  __break(1u);
}

void PageMetricsEvent.init(eventFields:invocationPoints:)(uint64_t a1, uint64_t a2)
{
  sub_B2884(a1, a2, (uint64_t)"ShelfKit.PageMetricsEvent", 25);
}

void sub_B2884(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _swift_stdlib_reportUnimplementedInitializer(a3, a4, "init(eventFields:invocationPoints:)", 35, 0);
  __break(1u);
}

uint64_t PageMetricsEvent.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocClassInstance(v0, 34, 7);
}

uint64_t sub_B28D8@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v4 = *a1;
  v3 = a1[1];
  sub_1FB98((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
  *a2 = v4;
  a2[1] = v3;
  return swift_bridgeObjectRetain(v3);
}

uint64_t sub_B2918(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  _BOOL8 v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  char v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t result;
  _QWORD v32[4];
  _OWORD v33[2];
  _OWORD v34[2];
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v8 = -1 << *(_BYTE *)(a1 + 32);
  v9 = ~v8;
  v10 = *(_QWORD *)(a1 + 64);
  v11 = -v8;
  v37 = a1;
  v38 = a1 + 64;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  else
    v12 = -1;
  v39 = v9;
  v40 = 0;
  v41 = v12 & v10;
  v42 = a2;
  v43 = a3;
  swift_bridgeObjectRetain(a1);
  swift_retain(a3);
  sub_124728(&v35);
  v13 = *((_QWORD *)&v35 + 1);
  if (!*((_QWORD *)&v35 + 1))
  {
LABEL_19:
    swift_release(a3);
    swift_bridgeObjectRelease();
    sub_15498(v37);
    return swift_release(v43);
  }
  while (1)
  {
    v16 = v35;
    sub_1F460(&v36, v34);
    v17 = *a5;
    v19 = sub_29724(v16, v13);
    v20 = *(_QWORD *)(v17 + 16);
    v21 = (v18 & 1) == 0;
    v22 = v20 + v21;
    if (__OFADD__(v20, v21))
      break;
    v23 = v18;
    if (*(_QWORD *)(v17 + 24) >= v22)
    {
      if ((a4 & 1) != 0)
      {
        if ((v18 & 1) != 0)
          goto LABEL_6;
      }
      else
      {
        sub_23199C();
        if ((v23 & 1) != 0)
          goto LABEL_6;
      }
    }
    else
    {
      sub_22E384(v22, a4 & 1);
      v24 = sub_29724(v16, v13);
      if ((v23 & 1) != (v25 & 1))
        goto LABEL_22;
      v19 = v24;
      if ((v23 & 1) != 0)
      {
LABEL_6:
        v14 = 32 * v19;
        sub_1FB98(*(_QWORD *)(*a5 + 56) + v14, (uint64_t)v32);
        sub_1FB98((uint64_t)v32, (uint64_t)v33);
        __swift_destroy_boxed_opaque_existential_1(v32);
        __swift_destroy_boxed_opaque_existential_1(v34);
        swift_bridgeObjectRelease();
        v15 = (_QWORD *)(*(_QWORD *)(*a5 + 56) + v14);
        __swift_destroy_boxed_opaque_existential_1(v15);
        sub_1F460(v33, v15);
        goto LABEL_7;
      }
    }
    v26 = (_QWORD *)*a5;
    *(_QWORD *)(*a5 + 8 * (v19 >> 6) + 64) |= 1 << v19;
    v27 = (uint64_t *)(v26[6] + 16 * v19);
    *v27 = v16;
    v27[1] = v13;
    sub_1F460(v34, (_OWORD *)(v26[7] + 32 * v19));
    v28 = v26[2];
    v29 = __OFADD__(v28, 1);
    v30 = v28 + 1;
    if (v29)
      goto LABEL_21;
    v26[2] = v30;
LABEL_7:
    sub_124728(&v35);
    v13 = *((_QWORD *)&v35 + 1);
    a4 = 1;
    if (!*((_QWORD *)&v35 + 1))
      goto LABEL_19;
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

Swift::Int sub_B2B78(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::UInt v7;
  Swift::Int result;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  _QWORD v19[9];

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_3B60C0);
    v3 = static _SetStorage.allocate(capacity:)(v1);
    v4 = 0;
    v5 = v3 + 56;
    v6 = a1 + 32;
    while (1)
    {
      v7 = *(_QWORD *)(v6 + 8 * v4);
      Hasher.init(_seed:)(v19);
      Hasher._combine(_:)(v7);
      result = Hasher._finalize()();
      v9 = -1 << *(_BYTE *)(v3 + 32);
      v10 = result & ~v9;
      v11 = v10 >> 6;
      v12 = *(_QWORD *)(v5 + 8 * (v10 >> 6));
      v13 = 1 << v10;
      v14 = *(_QWORD *)(v3 + 48);
      if (((1 << v10) & v12) != 0)
      {
        if (*(_QWORD *)(v14 + 8 * v10) == v7)
          goto LABEL_3;
        v15 = ~v9;
        while (1)
        {
          v10 = (v10 + 1) & v15;
          v11 = v10 >> 6;
          v12 = *(_QWORD *)(v5 + 8 * (v10 >> 6));
          v13 = 1 << v10;
          if ((v12 & (1 << v10)) == 0)
            break;
          if (*(_QWORD *)(v14 + 8 * v10) == v7)
            goto LABEL_3;
        }
      }
      *(_QWORD *)(v5 + 8 * v11) = v13 | v12;
      *(_QWORD *)(v14 + 8 * v10) = v7;
      v16 = *(_QWORD *)(v3 + 16);
      v17 = __OFADD__(v16, 1);
      v18 = v16 + 1;
      if (v17)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v18;
LABEL_3:
      if (++v4 == v1)
        return v3;
    }
  }
  return (Swift::Int)&_swiftEmptySetSingleton;
}

uint64_t sub_B2CB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;

  v4 = type metadata accessor for MetricsFieldInclusionRequest(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v16 - v9;
  v17 = a2;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11)
  {
    v12 = a1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v13 = *(_QWORD *)(v5 + 72);
    v14 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    do
    {
      v14(v8, v12, v4);
      sub_9BD74((uint64_t)v10, v8);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
      v12 += v13;
      --v11;
    }
    while (v11);
    return v17;
  }
  return a2;
}

uint64_t sub_B2DBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  *(_QWORD *)(a13 + 32) = a1;
  *(_QWORD *)(a13 + 40) = a2;
  *(_QWORD *)(a13 + 48) = a3;
  *(_QWORD *)(a13 + 56) = a4;
  *(_BYTE *)(a13 + 64) = a5;
  *(_BYTE *)(a13 + 65) = a6;
  *(_QWORD *)(a13 + 88) = a7;
  *(_QWORD *)(a13 + 96) = a8;
  *(_QWORD *)(a13 + 72) = a9;
  *(_QWORD *)(a13 + 80) = a10;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B6B90);
  v14 = type metadata accessor for MetricsFieldInclusionRequest(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_QWORD *)(v15 + 72);
  v17 = *(unsigned __int8 *)(v15 + 80);
  v18 = (v17 + 32) & ~v17;
  v19 = swift_allocObject(v13, v18 + v16, v17 | 7);
  *(_OWORD *)(v19 + 16) = xmmword_2EA0D0;
  v20 = swift_retain(a13);
  static MetricsFieldInclusionRequest.clickLocation.getter(v20);
  v21 = sub_B2CB8(v19, a11);
  swift_setDeallocating(v19);
  swift_arrayDestroy(v19 + v18, 1, v14);
  swift_deallocClassInstance(v19, 32, 7);
  *(_QWORD *)(a13 + 104) = v21;
  *(_QWORD *)(a13 + 16) = a12;
  *(_QWORD *)(a13 + 24) = _swiftEmptyArrayStorage;
  return a13;
}

uint64_t sub_B2EB8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, Swift::String a9, unsigned __int8 *a10, char a11, uint64_t a12)
{
  int v17;
  char isUniquelyReferenced_nonNull_native;
  char v19;
  char v20;
  uint64_t v21;
  void *v22;
  void *v23;
  char v24;
  unint64_t v25;
  void *v26;
  char v27;
  unint64_t v28;
  void *v29;
  Swift::String v30;
  void *v31;
  char v32;
  void *v33;
  char v34;
  uint64_t v35;
  _QWORD *v36;
  void *v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v55;
  Swift::String v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  Swift::String v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  void *v72;
  _BYTE v73[144];

  v17 = *a10;
  sub_B5B2C(a12, (uint64_t)v73);
  *((_QWORD *)&v65 + 1) = &type metadata for String;
  v64._countAndFlagsBits = a3;
  v64._object = a4;
  sub_1F460(&v64, &v56);
  swift_bridgeObjectRetain(a4);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  sub_1D728(&v56, 0x79546E6F69746361, 0xEA00000000006570, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease(0x8000000000000000);
  *((_QWORD *)&v65 + 1) = &type metadata for String;
  v64._countAndFlagsBits = 0x6B63696C63;
  v64._object = (void *)0xE500000000000000;
  sub_1F460(&v64, &v56);
  v19 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  *(_QWORD *)&v55 = &_swiftEmptyDictionarySingleton;
  sub_1D728(&v56, 0x707954746E657665, 0xE900000000000065, v19);
  v72 = &_swiftEmptyDictionarySingleton;
  swift_bridgeObjectRelease(0x8000000000000000);
  if (a9._object)
  {
    *((_QWORD *)&v65 + 1) = &type metadata for String;
    v64 = a9;
    sub_1F460(&v64, &v56);
    swift_bridgeObjectRetain(a9._object);
    v20 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
    *(_QWORD *)&v55 = &_swiftEmptyDictionarySingleton;
    sub_1D728(&v56, 0x644965676170, 0xE600000000000000, v20);
    v72 = &_swiftEmptyDictionarySingleton;
    swift_bridgeObjectRelease(0x8000000000000000);
    if (v17 == 19)
      goto LABEL_4;
    goto LABEL_3;
  }
  sub_1D560(0x644965676170, 0xE600000000000000, &v64);
  sub_1459C((uint64_t)&v64, (uint64_t *)&unk_3BC540);
  if (v17 != 19)
  {
LABEL_3:
    LOBYTE(v64._countAndFlagsBits) = v17;
    v21 = MetricsPageType.rawValue.getter();
    *((_QWORD *)&v65 + 1) = &type metadata for String;
    v64._countAndFlagsBits = v21;
    v64._object = v22;
    sub_1F460(&v64, &v56);
    v23 = v72;
    v24 = swift_isUniquelyReferenced_nonNull_native(v72);
    *(_QWORD *)&v55 = v23;
    sub_1D728(&v56, 0x6570795465676170, 0xE800000000000000, v24);
    v72 = v23;
    swift_bridgeObjectRelease(0x8000000000000000);
  }
LABEL_4:
  if (a8)
  {
    v64._countAndFlagsBits = a7;
    v64._object = (void *)a8;
    v25 = sub_B5B74();
    swift_bridgeObjectRetain(a8);
    if ((Collection.isNotEmpty.getter(&type metadata for String, v25) & 1) != 0)
    {
      *((_QWORD *)&v65 + 1) = &type metadata for String;
      v64._countAndFlagsBits = a7;
      v64._object = (void *)a8;
      sub_1F460(&v64, &v56);
      v26 = v72;
      v27 = swift_isUniquelyReferenced_nonNull_native(v72);
      *(_QWORD *)&v55 = v26;
      sub_1D728(&v56, 0x416C656E6E616863, 0xED000064496D6164, v27);
      v72 = v26;
      v28 = 0x8000000000000000;
    }
    else
    {
      v28 = a8;
    }
    swift_bridgeObjectRelease(v28);
  }
  if (a9._object && v17 != 19)
  {
    LOBYTE(v64._countAndFlagsBits) = v17;
    v64._countAndFlagsBits = MetricsPageType.rawValue.getter();
    v64._object = v29;
    v30._countAndFlagsBits = 95;
    v30._object = (void *)0xE100000000000000;
    String.append(_:)(v30);
    String.append(_:)(a9);
    *((_QWORD *)&v65 + 1) = &type metadata for String;
    sub_1F460(&v64, &v56);
    v31 = v72;
    v32 = swift_isUniquelyReferenced_nonNull_native(v72);
    *(_QWORD *)&v55 = v31;
    sub_1D728(&v56, 1701273968, 0xE400000000000000, v32);
    v72 = v31;
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  if ((a11 & 1) != 0)
  {
    *((_QWORD *)&v65 + 1) = &type metadata for Bool;
    LOBYTE(v64._countAndFlagsBits) = 1;
    sub_1F460(&v64, &v56);
    v33 = v72;
    v34 = swift_isUniquelyReferenced_nonNull_native(v72);
    *(_QWORD *)&v55 = v33;
    sub_1D728(&v56, 0x6F43646572616873, 0xED0000746E65746ELL, v34);
    v72 = v33;
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  sub_B5B2C((uint64_t)v73, (uint64_t)&v64);
  if (sub_28F78((uint64_t)&v64) == 1)
  {
    v35 = (uint64_t)v72;
  }
  else
  {
    v60 = v68;
    v61 = v69;
    v62 = v70;
    v63 = v71;
    v56 = v64;
    v57 = v65;
    v58 = v66;
    v59 = v67;
    v36 = ChildAndParentLocation.fields.getter();
    *((_QWORD *)&v57 + 1) = __swift_instantiateConcreteTypeFromMangledName(&qword_3B6B80);
    v56._countAndFlagsBits = (uint64_t)v36;
    sub_1F460(&v56, &v55);
    v37 = v72;
    v38 = swift_isUniquelyReferenced_nonNull_native(v72);
    sub_1D728(&v55, 0x6E6F697461636F6CLL, 0xE800000000000000, v38);
    v35 = (uint64_t)v37;
    v72 = v37;
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  v39 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B6B90);
  v40 = type metadata accessor for MetricsFieldInclusionRequest(0);
  v41 = *(_QWORD *)(v40 - 8);
  v42 = *(_QWORD *)(v41 + 72);
  v43 = *(unsigned __int8 *)(v41 + 80);
  v44 = (v43 + 32) & ~v43;
  v45 = swift_allocObject(v39, v44 + v42, v43 | 7);
  *(_OWORD *)(v45 + 16) = xmmword_2EA0D0;
  swift_bridgeObjectRetain(a6);
  v46 = swift_bridgeObjectRetain(a2);
  static MetricsFieldInclusionRequest.crossfireReferral.getter(v46);
  v47 = sub_B371C(v45);
  swift_setDeallocating(v45);
  swift_arrayDestroy(v45 + v44, 1, v40);
  swift_deallocClassInstance(v45, 32, 7);
  v48 = type metadata accessor for ClickMetricsEvent();
  v49 = swift_allocObject(v48, 112, 7);
  v50 = sub_B2DBC(0, 0, 0, 0, 2, 2, a5, a6, a1, a2, (uint64_t)v47, v35, v49);
  swift_release(v49);
  return v50;
}

uint64_t sub_B3484(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v1 = result;
  v2 = (unint64_t)result >> 62;
  if ((unint64_t)result >> 62)
  {
    if (result < 0)
      v6 = result;
    else
      v6 = result & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(result);
    v3 = _CocoaArrayWrapper.endIndex.getter(v6);
    result = swift_bridgeObjectRelease(v1);
    if (v3)
    {
LABEL_3:
      __swift_instantiateConcreteTypeFromMangledName(&qword_3B6F28);
      result = static _SetStorage.allocate(capacity:)(v3);
      v4 = (_QWORD *)result;
      v24 = v1;
      if (!v2)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else
  {
    v3 = *(_QWORD *)((char *)&dword_10 + (result & 0xFFFFFFFFFFFFF8));
    if (v3)
      goto LABEL_3;
  }
  v4 = &_swiftEmptySetSingleton;
  v24 = v1;
  if (!v2)
  {
LABEL_4:
    v5 = *(_QWORD *)((char *)&dword_10 + (v1 & 0xFFFFFFFFFFFFF8));
    if (!v5)
      return (uint64_t)v4;
    goto LABEL_15;
  }
LABEL_11:
  if (v1 < 0)
    v7 = v1;
  else
    v7 = v1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v1);
  v5 = _CocoaArrayWrapper.endIndex.getter(v7);
  result = swift_bridgeObjectRelease(v1);
  if (!v5)
    return (uint64_t)v4;
LABEL_15:
  v8 = 0;
  v9 = (char *)(v4 + 7);
  v23 = v5;
  while ((v24 & 0xC000000000000001) != 0)
  {
    result = specialized _ArrayBuffer._getElementSlowPath(_:)(v8, v24);
    v10 = __OFADD__(v8++, 1);
    if (v10)
      goto LABEL_32;
LABEL_24:
    v25 = result;
    v27 = result;
    v11 = v4[5];
    v12 = type metadata accessor for AnyCancellable(0);
    v13 = sub_F1C0(&qword_3B6F30, (void (*)(uint64_t))&type metadata accessor for AnyCancellable, (uint64_t)&protocol conformance descriptor for AnyCancellable);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v12, v13);
    v14 = -1 << *((_BYTE *)v4 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    v17 = *(_QWORD *)&v9[8 * (v15 >> 6)];
    v18 = 1 << v15;
    if (((1 << v15) & v17) != 0)
    {
      v19 = ~v14;
      v20 = sub_F1C0(&qword_3B6F38, (void (*)(uint64_t))&type metadata accessor for AnyCancellable, (uint64_t)&protocol conformance descriptor for AnyCancellable);
      do
      {
        v26 = *(_QWORD *)(v4[6] + 8 * v15);
        result = dispatch thunk of static Equatable.== infix(_:_:)(&v26, &v27, v12, v20);
        if ((result & 1) != 0)
        {
          result = swift_release(v25);
          v5 = v23;
          goto LABEL_17;
        }
        v15 = (v15 + 1) & v19;
        v16 = v15 >> 6;
        v17 = *(_QWORD *)&v9[8 * (v15 >> 6)];
        v18 = 1 << v15;
      }
      while ((v17 & (1 << v15)) != 0);
      v5 = v23;
    }
    *(_QWORD *)&v9[8 * v16] = v18 | v17;
    *(_QWORD *)(v4[6] + 8 * v15) = v25;
    v21 = v4[2];
    v10 = __OFADD__(v21, 1);
    v22 = v21 + 1;
    if (v10)
      goto LABEL_33;
    v4[2] = v22;
LABEL_17:
    if (v8 == v5)
      return (uint64_t)v4;
  }
  if (v8 >= *(_QWORD *)((char *)&dword_10 + (v24 & 0xFFFFFFFFFFFFFF8)))
    goto LABEL_34;
  result = swift_retain(*(_QWORD *)(v24 + 32 + 8 * v8));
  v10 = __OFADD__(v8++, 1);
  if (!v10)
    goto LABEL_24;
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
  return result;
}

void *sub_B371C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  void *result;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;

  v2 = type metadata accessor for MetricsFieldInclusionRequest(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v30 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_3C7950);
    v10 = static _SetStorage.allocate(capacity:)(v9);
    v11 = 0;
    v12 = *(unsigned __int8 *)(v3 + 80);
    v31 = v9;
    v32 = a1 + ((v12 + 32) & ~v12);
    v13 = *(_QWORD *)(v3 + 72);
    v34 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v35 = v10 + 56;
    while (1)
    {
      v33 = v11;
      v34(v8, v32 + v13 * v11, v2);
      v14 = *(_QWORD *)(v10 + 40);
      v15 = sub_F1C0(&qword_3B60B0, (void (*)(uint64_t))&type metadata accessor for MetricsFieldInclusionRequest, (uint64_t)&protocol conformance descriptor for MetricsFieldInclusionRequest);
      v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v2, v15);
      v17 = ~(-1 << *(_BYTE *)(v10 + 32));
      v18 = v16 & v17;
      v19 = (v16 & (unint64_t)v17) >> 6;
      v20 = *(_QWORD *)(v35 + 8 * v19);
      v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        do
        {
          v34(v6, *(_QWORD *)(v10 + 48) + v18 * v13, v2);
          v22 = sub_F1C0(&qword_3B60B8, (void (*)(uint64_t))&type metadata accessor for MetricsFieldInclusionRequest, (uint64_t)&protocol conformance descriptor for MetricsFieldInclusionRequest);
          v23 = dispatch thunk of static Equatable.== infix(_:_:)(v6, v8, v2, v22);
          v24 = v3;
          v25 = *(void (**)(char *, uint64_t))(v3 + 8);
          v25(v6, v2);
          if ((v23 & 1) != 0)
          {
            v25(v8, v2);
            v3 = v24;
            v9 = v31;
            goto LABEL_4;
          }
          v18 = (v18 + 1) & v17;
          v19 = v18 >> 6;
          v20 = *(_QWORD *)(v35 + 8 * (v18 >> 6));
          v21 = 1 << v18;
          v3 = v24;
        }
        while ((v20 & (1 << v18)) != 0);
        v9 = v31;
      }
      *(_QWORD *)(v35 + 8 * v19) = v21 | v20;
      result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v10 + 48) + v18 * v13, v8, v2);
      v27 = *(_QWORD *)(v10 + 16);
      v28 = __OFADD__(v27, 1);
      v29 = v27 + 1;
      if (v28)
        break;
      *(_QWORD *)(v10 + 16) = v29;
LABEL_4:
      v11 = v33 + 1;
      if (v33 + 1 == v9)
        return (void *)v10;
    }
    __break(1u);
  }
  else
  {
    return &_swiftEmptySetSingleton;
  }
  return result;
}

void *sub_B3984(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  void *result;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;

  v2 = type metadata accessor for PageMetrics.InvocationPoint(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v30 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_3B6F10);
    v10 = static _SetStorage.allocate(capacity:)(v9);
    v11 = 0;
    v12 = *(unsigned __int8 *)(v3 + 80);
    v31 = v9;
    v32 = a1 + ((v12 + 32) & ~v12);
    v13 = *(_QWORD *)(v3 + 72);
    v34 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v35 = v10 + 56;
    while (1)
    {
      v33 = v11;
      v34(v8, v32 + v13 * v11, v2);
      v14 = *(_QWORD *)(v10 + 40);
      v15 = sub_F1C0(&qword_3B6F18, (void (*)(uint64_t))&type metadata accessor for PageMetrics.InvocationPoint, (uint64_t)&protocol conformance descriptor for PageMetrics.InvocationPoint);
      v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v2, v15);
      v17 = ~(-1 << *(_BYTE *)(v10 + 32));
      v18 = v16 & v17;
      v19 = (v16 & (unint64_t)v17) >> 6;
      v20 = *(_QWORD *)(v35 + 8 * v19);
      v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        do
        {
          v34(v6, *(_QWORD *)(v10 + 48) + v18 * v13, v2);
          v22 = sub_F1C0(&qword_3B6F20, (void (*)(uint64_t))&type metadata accessor for PageMetrics.InvocationPoint, (uint64_t)&protocol conformance descriptor for PageMetrics.InvocationPoint);
          v23 = dispatch thunk of static Equatable.== infix(_:_:)(v6, v8, v2, v22);
          v24 = v3;
          v25 = *(void (**)(char *, uint64_t))(v3 + 8);
          v25(v6, v2);
          if ((v23 & 1) != 0)
          {
            v25(v8, v2);
            v3 = v24;
            v9 = v31;
            goto LABEL_4;
          }
          v18 = (v18 + 1) & v17;
          v19 = v18 >> 6;
          v20 = *(_QWORD *)(v35 + 8 * (v18 >> 6));
          v21 = 1 << v18;
          v3 = v24;
        }
        while ((v20 & (1 << v18)) != 0);
        v9 = v31;
      }
      *(_QWORD *)(v35 + 8 * v19) = v21 | v20;
      result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v10 + 48) + v18 * v13, v8, v2);
      v27 = *(_QWORD *)(v10 + 16);
      v28 = __OFADD__(v27, 1);
      v29 = v27 + 1;
      if (v28)
        break;
      *(_QWORD *)(v10 + 16) = v29;
LABEL_4:
      v11 = v33 + 1;
      if (v33 + 1 == v9)
        return (void *)v10;
    }
    __break(1u);
  }
  else
  {
    return &_swiftEmptySetSingleton;
  }
  return result;
}

void *_s8ShelfKit12MetricsEventC04pageC6FieldsySDySSypGSgAFFZ_0(uint64_t a1)
{
  unint64_t v2;
  char v3;
  unint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  void *v12;
  unint64_t v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  Swift::String v17;
  Swift::String v18;
  __int128 v19;
  char isUniquelyReferenced_nonNull_native;
  char v21;
  char v22;
  char v23;
  char v24;
  void *v25;
  uint64_t v27;
  _OWORD v28[2];
  __int128 v29;
  void *v30;

  if (!a1)
    return 0;
  if (*(_QWORD *)(a1 + 16)
    && (v2 = sub_29724(0x6C725565676170, 0xE700000000000000), (v3 & 1) != 0)
    && (sub_1FB98(*(_QWORD *)(a1 + 56) + 32 * v2, (uint64_t)&v29),
        swift_dynamicCast(v28, &v29, (char *)&type metadata for Any + 8, &type metadata for String, 6)))
  {
    v4 = *((_QWORD *)&v28[0] + 1);
    v27 = *(_QWORD *)&v28[0];
    if (!*(_QWORD *)(a1 + 16))
      goto LABEL_12;
  }
  else
  {
    v27 = 0;
    v4 = 0xE000000000000000;
    if (!*(_QWORD *)(a1 + 16))
      goto LABEL_12;
  }
  v5 = sub_29724(0x6174654465676170, 0xEB00000000736C69);
  if ((v6 & 1) == 0
    || (sub_1FB98(*(_QWORD *)(a1 + 56) + 32 * v5, (uint64_t)&v29),
        v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0A78),
        !swift_dynamicCast(v28, &v29, (char *)&type metadata for Any + 8, v7, 6)))
  {
LABEL_12:
    v8 = sub_287F38((uint64_t)_swiftEmptyArrayStorage);
    if (!*(_QWORD *)(a1 + 16))
      goto LABEL_16;
    goto LABEL_13;
  }
  v8 = *(_QWORD *)&v28[0];
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_16;
LABEL_13:
  v9 = sub_29724(0x644965676170, 0xE600000000000000);
  if ((v10 & 1) != 0)
  {
    sub_1FB98(*(_QWORD *)(a1 + 56) + 32 * v9, (uint64_t)&v29);
    if (swift_dynamicCast(v28, &v29, (char *)&type metadata for Any + 8, &type metadata for String, 6))
    {
      v12 = (void *)*((_QWORD *)&v28[0] + 1);
      v11 = *(_QWORD *)&v28[0];
      goto LABEL_17;
    }
  }
LABEL_16:
  v11 = 0;
  v12 = (void *)0xE000000000000000;
LABEL_17:
  if (*(_QWORD *)(a1 + 16)
    && (v13 = sub_29724(0x6570795465676170, 0xE800000000000000), (v14 & 1) != 0)
    && (sub_1FB98(*(_QWORD *)(a1 + 56) + 32 * v13, (uint64_t)&v29),
        swift_dynamicCast(v28, &v29, (char *)&type metadata for Any + 8, &type metadata for String, 6)))
  {
    v15 = *((_QWORD *)&v28[0] + 1);
    v16 = *(_QWORD *)&v28[0];
  }
  else
  {
    v16 = 0;
    v15 = 0xE000000000000000;
  }
  *(_QWORD *)&v29 = v16;
  *((_QWORD *)&v29 + 1) = v15;
  swift_bridgeObjectRetain(v15);
  v17._countAndFlagsBits = 95;
  v17._object = (void *)0xE100000000000000;
  String.append(_:)(v17);
  v18._countAndFlagsBits = v11;
  v18._object = v12;
  String.append(_:)(v18);
  v19 = v29;
  v30 = &type metadata for String;
  *(_QWORD *)&v29 = v27;
  *((_QWORD *)&v29 + 1) = v4;
  sub_1F460(&v29, v28);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  sub_1D728(v28, 0x6C725565676170, 0xE700000000000000, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  v30 = (void *)__swift_instantiateConcreteTypeFromMangledName(&qword_3B0A78);
  *(_QWORD *)&v29 = v8;
  sub_1F460(&v29, v28);
  v21 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  sub_1D728(v28, 0x6174654465676170, 0xEB00000000736C69, v21);
  swift_bridgeObjectRelease();
  v30 = &type metadata for String;
  *(_QWORD *)&v29 = v11;
  *((_QWORD *)&v29 + 1) = v12;
  sub_1F460(&v29, v28);
  v22 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  sub_1D728(v28, 0x644965676170, 0xE600000000000000, v22);
  swift_bridgeObjectRelease();
  v30 = &type metadata for String;
  *(_QWORD *)&v29 = v16;
  *((_QWORD *)&v29 + 1) = v15;
  sub_1F460(&v29, v28);
  v23 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  sub_1D728(v28, 0x6570795465676170, 0xE800000000000000, v23);
  swift_bridgeObjectRelease();
  v30 = &type metadata for String;
  v29 = v19;
  sub_1F460(&v29, v28);
  v24 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  sub_1D728(v28, 1701273968, 0xE400000000000000, v24);
  v25 = &_swiftEmptyDictionarySingleton;
  swift_bridgeObjectRelease();
  return v25;
}

uint64_t sub_B3FF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int v15;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  uint64_t v18;
  uint64_t inited;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  unint64_t v30;
  char v31;
  char v32;
  Swift::String v33;
  Swift::String v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v52;
  uint64_t v53;
  _OWORD v54[2];
  _BYTE v55[64];
  __int128 v56;
  void *v57;
  __int128 v58;
  void *v59;

  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4A58);
  __chkstk_darwin(v12);
  v14 = (char *)&v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *a5;
  v59 = &type metadata for String;
  *(_QWORD *)&v58 = 0x657461676976616ELL;
  *((_QWORD *)&v58 + 1) = 0xE800000000000000;
  sub_1F460(&v58, &v56);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  *(_QWORD *)&v54[0] = &_swiftEmptyDictionarySingleton;
  sub_1D728(&v56, 0x79546E6F69746361, 0xEA00000000006570, isUniquelyReferenced_nonNull_native);
  v17 = *(_QWORD *)&v54[0];
  swift_bridgeObjectRelease();
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B6F60);
  inited = swift_initStackObject(v18, v55);
  v52 = xmmword_2EA0D0;
  *(_OWORD *)(inited + 16) = xmmword_2EA0D0;
  *(_QWORD *)(inited + 32) = 0xD000000000000013;
  *(_QWORD *)(inited + 40) = 0x800000000030DB30;
  *(_QWORD *)(inited + 48) = a3;
  *(_QWORD *)(inited + 56) = a4;
  swift_bridgeObjectRetain(a4);
  v20 = sub_288078(inited);
  v59 = (void *)__swift_instantiateConcreteTypeFromMangledName(&qword_3B6F68);
  *(_QWORD *)&v58 = v20;
  sub_1F460(&v58, &v56);
  v21 = swift_isUniquelyReferenced_nonNull_native(v17);
  *(_QWORD *)&v54[0] = v17;
  sub_1D728(&v56, 0x737265746C6966, 0xE700000000000000, v21);
  v22 = *(_QWORD *)&v54[0];
  swift_bridgeObjectRelease();
  if (v15 != 19)
  {
    LOBYTE(v58) = v15;
    v23 = MetricsPageType.rawValue.getter();
    v59 = &type metadata for String;
    *(_QWORD *)&v58 = v23;
    *((_QWORD *)&v58 + 1) = v24;
    sub_1F460(&v58, &v56);
    v25 = swift_isUniquelyReferenced_nonNull_native(v22);
    *(_QWORD *)&v54[0] = v22;
    sub_1D728(&v56, 0x6570795465676170, 0xE800000000000000, v25);
    v22 = *(_QWORD *)&v54[0];
    swift_bridgeObjectRelease();
  }
  sub_267BC(a6, (uint64_t)v14, &qword_3B4A58);
  v26 = type metadata accessor for PageMetrics(0);
  v27 = *(_QWORD *)(v26 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v14, 1, v26) == 1)
  {
    sub_1459C((uint64_t)v14, &qword_3B4A58);
    v28 = 0;
  }
  else
  {
    v28 = PageMetrics.pageFields.getter();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v14, v26);
  }
  v29 = _s8ShelfKit12MetricsEventC04pageC6FieldsySDySSypGSgAFFZ_0(v28);
  v30 = swift_bridgeObjectRelease();
  if (v29)
  {
    v31 = swift_isUniquelyReferenced_nonNull_native(v22);
    *(_QWORD *)&v58 = v22;
    sub_B2918((uint64_t)v29, (uint64_t)sub_B28D8, 0, v31, (uint64_t *)&v58);
    v22 = v58;
    v30 = swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(v22 + 16))
  {
    v30 = sub_29724(0x644965676170, 0xE600000000000000);
    if ((v32 & 1) != 0)
    {
      sub_1FB98(*(_QWORD *)(v22 + 56) + 32 * v30, (uint64_t)&v56);
      sub_1F460(&v56, &v58);
      if (v15 != 19)
      {
        LOBYTE(v56) = v15;
        v33._countAndFlagsBits = MetricsPageType.rawValue.getter();
        *(_QWORD *)&v56 = 0;
        *((_QWORD *)&v56 + 1) = 0xE000000000000000;
        String.append(_:)(v33);
        swift_bridgeObjectRelease();
        v34._countAndFlagsBits = 95;
        v34._object = (void *)0xE100000000000000;
        String.append(_:)(v34);
        _print_unlocked<A, B>(_:_:)(&v58, &v56, (char *)&type metadata for Any + 8, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
        v57 = &type metadata for String;
        sub_1F460(&v56, v54);
        v35 = swift_isUniquelyReferenced_nonNull_native(v22);
        v53 = v22;
        sub_1D728(v54, 1701273968, 0xE400000000000000, v35);
        v22 = v53;
        swift_bridgeObjectRelease();
      }
      v30 = __swift_destroy_boxed_opaque_existential_1(&v58);
    }
  }
  v36 = static MetricsTargetType.filter.getter(v30);
  v38 = v37;
  v39 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B6B90);
  v40 = type metadata accessor for MetricsFieldInclusionRequest(0);
  v41 = *(_QWORD *)(v40 - 8);
  v42 = *(_QWORD *)(v41 + 72);
  v43 = *(unsigned __int8 *)(v41 + 80);
  v44 = (v43 + 32) & ~v43;
  v45 = swift_allocObject(v39, v44 + v42, v43 | 7);
  *(_OWORD *)(v45 + 16) = v52;
  swift_bridgeObjectRetain(a2);
  v46 = swift_bridgeObjectRetain(v22);
  static MetricsFieldInclusionRequest.crossfireReferral.getter(v46);
  v47 = sub_B371C(v45);
  swift_setDeallocating(v45);
  swift_arrayDestroy(v45 + v44, 1, v40);
  swift_deallocClassInstance(v45, 32, 7);
  v48 = type metadata accessor for ClickMetricsEvent();
  v49 = swift_allocObject(v48, 112, 7);
  v50 = sub_B2DBC(0, 0, 0, 0, 2, 2, v36, v38, a1, a2, (uint64_t)v47, v22, v49);
  swift_bridgeObjectRelease();
  swift_release(v49);
  return v50;
}

unint64_t sub_B44F8()
{
  unint64_t result;

  result = qword_3B6B70;
  if (!qword_3B6B70)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MetricsEvent.PageLifecycleInvocationPoint);
    atomic_store(result, (unint64_t *)&qword_3B6B70);
  }
  return result;
}

uint64_t sub_B453C(uint64_t result, char a2)
{
  double v2;

  if ((a2 & 1) != 0 || *(double *)&result <= 0.0)
  {
    *(double *)&result = 0.0;
    return result;
  }
  v2 = *(double *)&result * 1000.0;
  if ((~COERCE__INT64(*(double *)&result * 1000.0) & 0x7FF0000000000000) != 0)
  {
    if (v2 > -9.22337204e18)
    {
      if (v2 < 9.22337204e18)
      {
        *(double *)&result = COERCE_DOUBLE(objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithLongLong:", (uint64_t)v2));
        return result;
      }
      goto LABEL_10;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_10:
  __break(1u);
  return result;
}

void *_s8ShelfKit12MetricsEventC014tabLandingPageC04fromSDySSypGSS_tFZ_0(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  char v6;
  char v7;
  _OWORD v9[2];
  __int128 v10;
  void *v11;

  v4 = 0x6573776F7242;
  String.append(_:)(*(Swift::String *)&a1);
  if (a1 == 0x676F6C61746143 && a2 == 0xE700000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, 0x676F6C61746143, 0xE700000000000000, 0) & 1) != 0)
  {
    a2 = 0xE600000000000000;
  }
  else
  {
    swift_bridgeObjectRetain(a2);
    v4 = a1;
  }
  v11 = &type metadata for String;
  *(_QWORD *)&v10 = v4;
  *((_QWORD *)&v10 + 1) = a2;
  sub_1F460(&v10, v9);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  sub_1D728(v9, 0x644965676170, 0xE600000000000000, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  v11 = &type metadata for String;
  *(_QWORD *)&v10 = 0x676E69646E614CLL;
  *((_QWORD *)&v10 + 1) = 0xE700000000000000;
  sub_1F460(&v10, v9);
  v6 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  sub_1D728(v9, 0x6570795465676170, 0xE800000000000000, v6);
  swift_bridgeObjectRelease();
  v11 = &type metadata for String;
  *(_QWORD *)&v10 = 0x5F676E69646E614CLL;
  *((_QWORD *)&v10 + 1) = 0xE800000000000000;
  sub_1F460(&v10, v9);
  v7 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  sub_1D728(v9, 1701273968, 0xE400000000000000, v7);
  swift_bridgeObjectRelease();
  return &_swiftEmptyDictionarySingleton;
}

void *sub_B47B8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  void *result;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;

  v2 = type metadata accessor for MetricsFieldExclusionRequest(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v30 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_3B6F48);
    v10 = static _SetStorage.allocate(capacity:)(v9);
    v11 = 0;
    v12 = *(unsigned __int8 *)(v3 + 80);
    v31 = v9;
    v32 = a1 + ((v12 + 32) & ~v12);
    v13 = *(_QWORD *)(v3 + 72);
    v34 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v35 = v10 + 56;
    while (1)
    {
      v33 = v11;
      v34(v8, v32 + v13 * v11, v2);
      v14 = *(_QWORD *)(v10 + 40);
      v15 = sub_F1C0(&qword_3B6F50, (void (*)(uint64_t))&type metadata accessor for MetricsFieldExclusionRequest, (uint64_t)&protocol conformance descriptor for MetricsFieldExclusionRequest);
      v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v2, v15);
      v17 = ~(-1 << *(_BYTE *)(v10 + 32));
      v18 = v16 & v17;
      v19 = (v16 & (unint64_t)v17) >> 6;
      v20 = *(_QWORD *)(v35 + 8 * v19);
      v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        do
        {
          v34(v6, *(_QWORD *)(v10 + 48) + v18 * v13, v2);
          v22 = sub_F1C0(&qword_3B6F58, (void (*)(uint64_t))&type metadata accessor for MetricsFieldExclusionRequest, (uint64_t)&protocol conformance descriptor for MetricsFieldExclusionRequest);
          v23 = dispatch thunk of static Equatable.== infix(_:_:)(v6, v8, v2, v22);
          v24 = v3;
          v25 = *(void (**)(char *, uint64_t))(v3 + 8);
          v25(v6, v2);
          if ((v23 & 1) != 0)
          {
            v25(v8, v2);
            v3 = v24;
            v9 = v31;
            goto LABEL_4;
          }
          v18 = (v18 + 1) & v17;
          v19 = v18 >> 6;
          v20 = *(_QWORD *)(v35 + 8 * (v18 >> 6));
          v21 = 1 << v18;
          v3 = v24;
        }
        while ((v20 & (1 << v18)) != 0);
        v9 = v31;
      }
      *(_QWORD *)(v35 + 8 * v19) = v21 | v20;
      result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v10 + 48) + v18 * v13, v8, v2);
      v27 = *(_QWORD *)(v10 + 16);
      v28 = __OFADD__(v27, 1);
      v29 = v27 + 1;
      if (v28)
        break;
      *(_QWORD *)(v10 + 16) = v29;
LABEL_4:
      v11 = v33 + 1;
      if (v33 + 1 == v9)
        return (void *)v10;
    }
    __break(1u);
  }
  else
  {
    return &_swiftEmptySetSingleton;
  }
  return result;
}

uint64_t sub_B4A20(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for MetricsActivity.State(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for ClickMetricsEvent()
{
  return objc_opt_self(_TtC8ShelfKit17ClickMetricsEvent);
}

uint64_t _s8ShelfKit17ClickMetricsEventC019upsellBannerDismisscE08targetId011channelAdamJ08pageTypeACSSSg_AHSStFZ_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char isUniquelyReferenced_nonNull_native;
  void *v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _OWORD v35[2];
  __int128 v36;
  void *v37;
  void *v38;

  v37 = &type metadata for String;
  *(_QWORD *)&v36 = a5;
  *((_QWORD *)&v36 + 1) = a6;
  sub_1F460(&v36, v35);
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  v38 = &_swiftEmptyDictionarySingleton;
  sub_1D728(v35, 0x6570795465676170, 0xE800000000000000, isUniquelyReferenced_nonNull_native);
  v11 = v38;
  swift_bridgeObjectRelease();
  v37 = &type metadata for String;
  *(_QWORD *)&v36 = 0x7373696D736964;
  *((_QWORD *)&v36 + 1) = 0xE700000000000000;
  sub_1F460(&v36, v35);
  v12 = swift_isUniquelyReferenced_nonNull_native(v11);
  sub_1D728(v35, 0x79546E6F69746361, 0xEA00000000006570, v12);
  v38 = v11;
  swift_bridgeObjectRelease();
  if (a4)
  {
    v37 = &type metadata for String;
    *(_QWORD *)&v36 = a3;
    *((_QWORD *)&v36 + 1) = a4;
    sub_1F460(&v36, v35);
    swift_bridgeObjectRetain();
    v13 = swift_isUniquelyReferenced_nonNull_native(v11);
    sub_1D728(v35, 0x416C656E6E616863, 0xED000064496D6164, v13);
    v14 = (uint64_t)v11;
    v38 = v11;
    v15 = swift_bridgeObjectRelease();
  }
  else
  {
    sub_1D560(0x416C656E6E616863, 0xED000064496D6164, &v36);
    v15 = sub_1459C((uint64_t)&v36, (uint64_t *)&unk_3BC540);
    v14 = (uint64_t)v38;
  }
  v17 = static MetricsTargetType.button.getter(v15, v16);
  v19 = v18;
  if (a2)
    v20 = a1;
  else
    v20 = 0;
  if (a2)
    v21 = a2;
  else
    v21 = 0xE000000000000000;
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B6B90);
  v23 = type metadata accessor for MetricsFieldInclusionRequest(0);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = *(_QWORD *)(v24 + 72);
  v26 = *(unsigned __int8 *)(v24 + 80);
  v27 = (v26 + 32) & ~v26;
  v28 = swift_allocObject(v22, v27 + v25, v26 | 7);
  *(_OWORD *)(v28 + 16) = xmmword_2EA0D0;
  v29 = swift_bridgeObjectRetain();
  static MetricsFieldInclusionRequest.crossfireReferral.getter(v29);
  v30 = sub_B371C(v28);
  swift_setDeallocating(v28);
  swift_arrayDestroy(v28 + v27, 1, v23);
  swift_deallocClassInstance(v28, 32, 7);
  v31 = type metadata accessor for ClickMetricsEvent();
  v32 = swift_allocObject(v31, 112, 7);
  v33 = sub_B2DBC(0, 0, 0, 0, 2, 2, v17, v19, v20, v21, (uint64_t)v30, v14, v32);
  swift_release(v32);
  return v33;
}

uint64_t sub_B4D5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char isUniquelyReferenced_nonNull_native;
  void *v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  char v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  void *v21;
  _QWORD v23[3];
  char v24[8];
  _QWORD v25[3];
  char v26[8];
  void *v27;
  _OWORD v28[2];
  __int128 v29;
  void *v30;
  void *v31;

  *(_BYTE *)(a4 + 32) = 2;
  v30 = &type metadata for String;
  *(_QWORD *)&v29 = 0x726F727245;
  *((_QWORD *)&v29 + 1) = 0xE500000000000000;
  sub_1F460(&v29, v28);
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  v31 = &_swiftEmptyDictionarySingleton;
  sub_1D728(v28, 1701273968, 0xE400000000000000, isUniquelyReferenced_nonNull_native);
  v9 = v31;
  swift_bridgeObjectRelease();
  v30 = &type metadata for String;
  strcpy((char *)&v29, "PodcastsError");
  HIWORD(v29) = -4864;
  sub_1F460(&v29, v28);
  v10 = swift_isUniquelyReferenced_nonNull_native(v9);
  v27 = v9;
  sub_1D728(v28, 0x6570795465676170, 0xE800000000000000, v10);
  v31 = v9;
  swift_bridgeObjectRelease();
  if (!a3)
  {
    sub_1D560(0x6C725565676170, 0xE700000000000000, &v29);
    sub_1459C((uint64_t)&v29, (uint64_t *)&unk_3BC540);
    if (a1)
      goto LABEL_3;
LABEL_5:
    v21 = v31;
    goto LABEL_6;
  }
  v30 = &type metadata for String;
  *(_QWORD *)&v29 = a2;
  *((_QWORD *)&v29 + 1) = a3;
  sub_1F460(&v29, v28);
  v11 = swift_isUniquelyReferenced_nonNull_native(v9);
  v27 = v9;
  sub_1D728(v28, 0x6C725565676170, 0xE700000000000000, v11);
  v31 = v9;
  swift_bridgeObjectRelease();
  if (!a1)
    goto LABEL_5;
LABEL_3:
  swift_getErrorValue(a1, v26, v25);
  *(_QWORD *)&v29 = swift_getDynamicType(v25[0], v25[1], 1);
  *((_QWORD *)&v29 + 1) = v25[2];
  swift_errorRetain(a1);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B6F40);
  v13 = String.init<A>(describing:)(&v29, v12);
  v30 = &type metadata for String;
  *(_QWORD *)&v29 = v13;
  *((_QWORD *)&v29 + 1) = v14;
  sub_1F460(&v29, v28);
  v15 = v31;
  v16 = swift_isUniquelyReferenced_nonNull_native(v31);
  v27 = v15;
  sub_1D728(v28, 0x707954726F727265, 0xE900000000000065, v16);
  v17 = v27;
  swift_bridgeObjectRelease();
  swift_getErrorValue(a1, v24, v23);
  v18 = Error.localizedDescription.getter(v23[1], v23[2]);
  v30 = &type metadata for String;
  *(_QWORD *)&v29 = v18;
  *((_QWORD *)&v29 + 1) = v19;
  sub_1F460(&v29, v28);
  v20 = swift_isUniquelyReferenced_nonNull_native(v17);
  v27 = v17;
  sub_1D728(v28, 0xD000000000000010, 0x800000000030DCF0, v20);
  v21 = v27;
  swift_bridgeObjectRelease();
  swift_errorRelease(a1);
LABEL_6:
  *(_BYTE *)(a4 + 33) = 0;
  *(_QWORD *)(a4 + 16) = v21;
  *(_QWORD *)(a4 + 24) = _swiftEmptyArrayStorage;
  return a4;
}

unint64_t sub_B504C()
{
  unint64_t result;

  result = qword_3B6BA8;
  if (!qword_3B6BA8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MetricsEvent.PageLifecycleInvocationPoint);
    atomic_store(result, (unint64_t *)&qword_3B6BA8);
  }
  return result;
}

unint64_t sub_B5094()
{
  unint64_t result;

  result = qword_3B6BB0;
  if (!qword_3B6BB0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for FollowMetricsEvent.FollowType);
    atomic_store(result, (unint64_t *)&qword_3B6BB0);
  }
  return result;
}

unint64_t sub_B50DC()
{
  unint64_t result;

  result = qword_3B6BB8;
  if (!qword_3B6BB8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AppEnterMetricsEvent.EnterKind);
    atomic_store(result, (unint64_t *)&qword_3B6BB8);
  }
  return result;
}

unint64_t sub_B5124()
{
  unint64_t result;

  result = qword_3B6BC0;
  if (!qword_3B6BC0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AppExitMetricsEvent.ExitKind);
    atomic_store(result, (unint64_t *)&qword_3B6BC0);
  }
  return result;
}

uint64_t sub_B5168@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = *a1;
  swift_beginAccess(*a1 + 16, v6, 0, 0);
  v4 = *(_QWORD *)(v3 + 16);
  *a2 = v4;
  return swift_bridgeObjectRetain(v4);
}

uint64_t sub_B51B4@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = *a1;
  swift_beginAccess(*a1 + 24, v6, 0, 0);
  v4 = *(_QWORD *)(v3 + 24);
  *a2 = v4;
  return swift_bridgeObjectRetain(v4);
}

uint64_t sub_B5200@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  _BYTE v5[24];

  v3 = *a1;
  result = swift_beginAccess(*a1 + 32, v5, 0, 0);
  *a2 = *(_BYTE *)(v3 + 32);
  return result;
}

uint64_t sub_B5244(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t result;
  _BYTE v5[24];

  v2 = *a1;
  v3 = *a2;
  result = swift_beginAccess(*a2 + 32, v5, 1, 0);
  *(_BYTE *)(v3 + 32) = v2;
  return result;
}

uint64_t type metadata accessor for MetricsEvent()
{
  return objc_opt_self(_TtC8ShelfKit12MetricsEvent);
}

uint64_t method lookup function for MetricsEvent(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for MetricsEvent);
}

uint64_t dispatch thunk of MetricsEvent.metricsData.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of PresentedEpisodeUpsellBannersProvider.$episodeStoreTrackIdsForPresentedBanners.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of MetricsEvent.invocationPoints.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of Action.actionMetrics.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of MetricsEvent.__allocating_init(eventFields:invocationPoints:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t storeEnumTagSinglePayload for MetricsEvent.PageLifecycleInvocationPoint(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_B5334 + 4 * byte_2F232A[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_B5368 + 4 * byte_2F2325[v4]))();
}

uint64_t sub_B5368(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_B5370(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xB5378);
  return result;
}

uint64_t sub_B5384(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xB538CLL);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_B5390(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_B5398(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MetricsEvent.PageLifecycleInvocationPoint()
{
  return &type metadata for MetricsEvent.PageLifecycleInvocationPoint;
}

ValueMetadata *type metadata accessor for FollowMetricsEvent()
{
  return &type metadata for FollowMetricsEvent;
}

ValueMetadata *type metadata accessor for FollowMetricsEvent.FollowType()
{
  return &type metadata for FollowMetricsEvent.FollowType;
}

ValueMetadata *type metadata accessor for AppEnterMetricsEvent()
{
  return &type metadata for AppEnterMetricsEvent;
}

uint64_t _s8ShelfKit18FollowMetricsEventO10FollowTypeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_B5438 + 4 * byte_2F2334[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_B546C + 4 * byte_2F232F[v4]))();
}

uint64_t sub_B546C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_B5474(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xB547CLL);
  return result;
}

uint64_t sub_B5488(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xB5490);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_B5494(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_B549C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AppEnterMetricsEvent.EnterKind()
{
  return &type metadata for AppEnterMetricsEvent.EnterKind;
}

ValueMetadata *type metadata accessor for AppExitMetricsEvent()
{
  return &type metadata for AppExitMetricsEvent;
}

uint64_t storeEnumTagSinglePayload for AppExitMetricsEvent.ExitKind(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_B5514 + 4 * byte_2F233E[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_B5548 + 4 * byte_2F2339[v4]))();
}

uint64_t sub_B5548(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_B5550(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xB5558);
  return result;
}

uint64_t sub_B5564(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xB556CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_B5570(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_B5578(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AppExitMetricsEvent.ExitKind()
{
  return &type metadata for AppExitMetricsEvent.ExitKind;
}

ValueMetadata *type metadata accessor for WelcomeSheetMetricsEvent()
{
  return &type metadata for WelcomeSheetMetricsEvent;
}

uint64_t method lookup function for ClickMetricsEvent(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for ClickMetricsEvent);
}

uint64_t dispatch thunk of ClickMetricsEvent.__allocating_init(actionResult:eligibilityType:isFamily:isStudent:targetTypeRaw:targetId:including:eventFields:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 248))();
}

uint64_t type metadata accessor for PageMetricsEvent()
{
  return objc_opt_self(_TtC8ShelfKit16PageMetricsEvent);
}

uint64_t method lookup function for PageMetricsEvent(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for PageMetricsEvent);
}

uint64_t dispatch thunk of PageMetricsEvent.isPersonalized.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of PodcastOfferAction.displaySuccessHUD.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of LibraryShowProvider.__allocating_init(asPartOf:showUUID:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 200))();
}

uint64_t dispatch thunk of PageMetricsEvent.__allocating_init(searchTerm:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 208))();
}

uint64_t dispatch thunk of PageMetricsEvent.pageUrl.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

Swift::Int sub_B5630(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int result;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[9];

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_3B60A0);
    v3 = static _SetStorage.allocate(capacity:)(v1);
    v4 = 0;
    v5 = v3 + 56;
    v27 = a1 + 32;
    while (1)
    {
      v6 = (uint64_t *)(v27 + 16 * v4);
      v8 = *v6;
      v7 = v6[1];
      Hasher.init(_seed:)(v28);
      swift_bridgeObjectRetain(v7);
      String.hash(into:)(v28, v8, v7);
      result = Hasher._finalize()();
      v10 = -1 << *(_BYTE *)(v3 + 32);
      v11 = result & ~v10;
      v12 = v11 >> 6;
      v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
      v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        v15 = *(_QWORD *)(v3 + 48);
        v16 = (_QWORD *)(v15 + 16 * v11);
        v17 = v16[1];
        v18 = *v16 == v8 && v17 == v7;
        if (v18 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(*v16, v17, v8, v7, 0), (result & 1) != 0))
        {
LABEL_3:
          swift_bridgeObjectRelease(v7);
          goto LABEL_4;
        }
        v19 = ~v10;
        while (1)
        {
          v11 = (v11 + 1) & v19;
          v12 = v11 >> 6;
          v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
          v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0)
            break;
          v20 = (_QWORD *)(v15 + 16 * v11);
          v21 = v20[1];
          if (*v20 != v8 || v21 != v7)
          {
            result = _stringCompareWithSmolCheck(_:_:expecting:)(*v20, v21, v8, v7, 0);
            if ((result & 1) == 0)
              continue;
          }
          goto LABEL_3;
        }
      }
      *(_QWORD *)(v5 + 8 * v12) = v14 | v13;
      v23 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v11);
      *v23 = v8;
      v23[1] = v7;
      v24 = *(_QWORD *)(v3 + 16);
      v25 = __OFADD__(v24, 1);
      v26 = v24 + 1;
      if (v25)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v26;
LABEL_4:
      if (++v4 == v1)
        return v3;
    }
  }
  return (Swift::Int)&_swiftEmptySetSingleton;
}

void sub_B57D0(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  char v20;
  uint64_t v21;
  id v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Swift::Int v27;
  id v28;
  Swift::Int v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  char v36;
  uint64_t v37;
  id v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v2 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v6 = a1;
    else
      v6 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v3 = _CocoaArrayWrapper.endIndex.getter(v6);
    swift_bridgeObjectRelease();
    if (v3)
    {
LABEL_3:
      __swift_instantiateConcreteTypeFromMangledName(&qword_3B6F08);
      v4 = (_QWORD *)static _SetStorage.allocate(capacity:)(v3);
      if (!v2)
        goto LABEL_4;
LABEL_11:
      if (a1 < 0)
        v7 = a1;
      else
        v7 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
      v5 = _CocoaArrayWrapper.endIndex.getter(v7);
      swift_bridgeObjectRelease();
      if (!v5)
        return;
      goto LABEL_15;
    }
  }
  else
  {
    v3 = *(_QWORD *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8));
    if (v3)
      goto LABEL_3;
  }
  v4 = &_swiftEmptySetSingleton;
  if (v2)
    goto LABEL_11;
LABEL_4:
  v5 = *(_QWORD *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8));
  if (!v5)
    return;
LABEL_15:
  v8 = (char *)(v4 + 7);
  v44 = v5;
  if ((a1 & 0xC000000000000001) != 0)
  {
    v9 = 0;
    while (1)
    {
      while (1)
      {
        v10 = specialized _ArrayBuffer._getElementSlowPath(_:)(v9);
        v11 = __OFADD__(v9++, 1);
        if (v11)
        {
          __break(1u);
          goto LABEL_42;
        }
        v12 = v10;
        v13 = NSObject._rawHashValue(seed:)(v4[5]);
        v14 = -1 << *((_BYTE *)v4 + 32);
        v15 = v13 & ~v14;
        v16 = v15 >> 6;
        v17 = *(_QWORD *)&v8[8 * (v15 >> 6)];
        v18 = 1 << v15;
        if (((1 << v15) & v17) != 0)
          break;
LABEL_26:
        *(_QWORD *)&v8[8 * v16] = v18 | v17;
        *(_QWORD *)(v4[6] + 8 * v15) = v12;
        v24 = v4[2];
        v11 = __OFADD__(v24, 1);
        v25 = v24 + 1;
        if (v11)
          goto LABEL_43;
        v4[2] = v25;
        if (v9 == v5)
          return;
      }
      sub_327F8(0, (unint64_t *)&qword_3BF7D0, MTPodcast_ptr);
      v19 = *(id *)(v4[6] + 8 * v15);
      v20 = static NSObject.== infix(_:_:)(v19, v12);

      if ((v20 & 1) == 0)
      {
        v21 = ~v14;
        while (1)
        {
          v15 = (v15 + 1) & v21;
          v16 = v15 >> 6;
          v17 = *(_QWORD *)&v8[8 * (v15 >> 6)];
          v18 = 1 << v15;
          if ((v17 & (1 << v15)) == 0)
            break;
          v22 = *(id *)(v4[6] + 8 * v15);
          v23 = static NSObject.== infix(_:_:)(v22, v12);

          if ((v23 & 1) != 0)
            goto LABEL_17;
        }
        v5 = v44;
        goto LABEL_26;
      }
LABEL_17:
      swift_unknownObjectRelease(v12);
      v5 = v44;
      if (v9 == v44)
        return;
    }
  }
  v26 = 0;
  v42 = a1 + 32;
  v43 = *(_QWORD *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8));
  while (v26 != v43)
  {
    v27 = v4[5];
    v28 = *(id *)(v42 + 8 * v26);
    v29 = NSObject._rawHashValue(seed:)(v27);
    v30 = -1 << *((_BYTE *)v4 + 32);
    v31 = v29 & ~v30;
    v32 = v31 >> 6;
    v33 = *(_QWORD *)&v8[8 * (v31 >> 6)];
    v34 = 1 << v31;
    if (((1 << v31) & v33) != 0)
    {
      sub_327F8(0, (unint64_t *)&qword_3BF7D0, MTPodcast_ptr);
      v35 = *(id *)(v4[6] + 8 * v31);
      v36 = static NSObject.== infix(_:_:)(v35, v28);

      if ((v36 & 1) != 0)
      {
LABEL_30:

        goto LABEL_31;
      }
      v37 = ~v30;
      while (1)
      {
        v31 = (v31 + 1) & v37;
        v32 = v31 >> 6;
        v33 = *(_QWORD *)&v8[8 * (v31 >> 6)];
        v34 = 1 << v31;
        if ((v33 & (1 << v31)) == 0)
          break;
        v38 = *(id *)(v4[6] + 8 * v31);
        v39 = static NSObject.== infix(_:_:)(v38, v28);

        if ((v39 & 1) != 0)
          goto LABEL_30;
      }
    }
    *(_QWORD *)&v8[8 * v32] = v34 | v33;
    *(_QWORD *)(v4[6] + 8 * v31) = v28;
    v40 = v4[2];
    v11 = __OFADD__(v40, 1);
    v41 = v40 + 1;
    if (v11)
      goto LABEL_44;
    v4[2] = v41;
LABEL_31:
    if (++v26 == v44)
      return;
  }
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
}

uint64_t sub_B5B2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B1808);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_B5B74()
{
  unint64_t result;

  result = qword_3B6F70;
  if (!qword_3B6F70)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String);
    atomic_store(result, (unint64_t *)&qword_3B6F70);
  }
  return result;
}

uint64_t static FlowDestination.page(_:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = (char *)a2 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B6F78) + 48);
  *a2 = a1;
  v5 = type metadata accessor for URL(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = type metadata accessor for FlowDestination(0);
  swift_storeEnumTagMultiPayload(a2, v6, 3);
  return swift_retain();
}

{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = (char *)a2 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B6F78) + 48);
  *a2 = 0;
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v4, a1, v5);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
  v7 = type metadata accessor for FlowDestination(0);
  return swift_storeEnumTagMultiPayload(a2, v7, 3);
}

uint64_t type metadata accessor for FlowDestination(uint64_t a1)
{
  uint64_t result;

  result = qword_3B7018;
  if (!qword_3B7018)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for FlowDestination);
  return result;
}

ShelfKit::FlowPresentationContext __swiftcall FlowDestination.preferredPresentationContext(for:)(UITraitCollection a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int EnumCaseMultiPayload;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v3 = v2;
  v4 = v1;
  v5 = type metadata accessor for FlowDestination(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_B5E70(v3, (uint64_t)v7);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v7, v5);
  switch(EnumCaseMultiPayload)
  {
    case 1:
      *v4 = 12;
      LOBYTE(EnumCaseMultiPayload) = sub_1459C((uint64_t)v7, &qword_3B4370);
      return (char)EnumCaseMultiPayload;
    case 2:
      v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B6F80);
      sub_1459C((uint64_t)&v7[*(int *)(v10 + 48)], &qword_3BEB70);
      v11 = type metadata accessor for URL(0);
      LOBYTE(EnumCaseMultiPayload) = (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v7, v11);
      goto LABEL_8;
    case 6:
      LOBYTE(EnumCaseMultiPayload) = sub_B5EB4((uint64_t)v7);
      goto LABEL_8;
    case 14:
      v12 = sub_B5EB4((uint64_t)v7);
      LOBYTE(EnumCaseMultiPayload) = UITraitCollection.interfaceIdiomIsMac.getter(v12);
      if ((EnumCaseMultiPayload & 1) != 0)
        v9 = 5;
      else
        v9 = 6;
      goto LABEL_12;
    case 24:
    case 25:
      LOBYTE(EnumCaseMultiPayload) = sub_1459C((uint64_t)v7, &qword_3B4370);
      goto LABEL_3;
    case 33:
    case 42:
LABEL_8:
      v9 = 4;
      goto LABEL_12;
    case 50:
LABEL_3:
      v9 = 6;
LABEL_12:
      *v4 = v9;
      break;
    default:
      *v4 = 2;
      LOBYTE(EnumCaseMultiPayload) = sub_B5EB4((uint64_t)v7);
      break;
  }
  return (char)EnumCaseMultiPayload;
}

uint64_t sub_B5E70(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FlowDestination(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_B5EB4(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for FlowDestination(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

Swift::Bool __swiftcall FlowDestination.requiresNavigationController(for:)(UITraitCollection a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  int v5;
  Swift::Bool result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = type metadata accessor for FlowDestination(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_B5E70(v1, (uint64_t)v4);
  v5 = swift_getEnumCaseMultiPayload(v4, v2) - 2;
  result = 0;
  switch(v5)
  {
    case 0:
      v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B6F80);
      sub_1459C((uint64_t)&v4[*(int *)(v7 + 48)], &qword_3BEB70);
      goto LABEL_4;
    case 4:
    case 20:
    case 25:
    case 26:
      sub_B5EB4((uint64_t)v4);
      result = 0;
      break;
    case 16:
LABEL_4:
      v8 = type metadata accessor for URL(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v4, v8);
      result = 0;
      break;
    case 46:
      return result;
    default:
      sub_B5EB4((uint64_t)v4);
      result = 1;
      break;
  }
  return result;
}

uint64_t FlowDestination.representsTheSameContent(other:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  int *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int (*v44)(uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;
  void (*v59)(char *, char *, uint64_t);
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(char *, char *, uint64_t);
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  char v76;
  void (*v77)(char *, char *, uint64_t);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  unint64_t v84;
  void (*v85)(char *, uint64_t);
  void (*v86)(char *, uint64_t);
  char *v88;
  char *v89;
  char *v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;

  v101 = a1;
  v100 = type metadata accessor for TranscriptRequestInformation(0);
  v97 = *(_QWORD *)(v100 - 8);
  v2 = __chkstk_darwin(v100);
  v90 = (char *)&v88 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __chkstk_darwin(v2);
  v89 = (char *)&v88 - v5;
  v6 = __chkstk_darwin(v4);
  v92 = (char *)&v88 - v7;
  __chkstk_darwin(v6);
  v93 = (char *)&v88 - v8;
  v99 = type metadata accessor for URL(0);
  v96 = *(_QWORD *)(v99 - 8);
  __chkstk_darwin(v99);
  v88 = (char *)&v88 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B6F88);
  __chkstk_darwin(v95);
  v98 = (uint64_t)&v88 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for FlowDestination(0);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v88 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v17 = (char **)((char *)&v88 - v16);
  v18 = __chkstk_darwin(v15);
  v20 = (char **)((char *)&v88 - v19);
  v21 = __chkstk_darwin(v18);
  v23 = (uint64_t *)((char *)&v88 - v22);
  __chkstk_darwin(v21);
  v25 = (uint64_t *)((char *)&v88 - v24);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B6F90);
  __chkstk_darwin(v26);
  v28 = (char *)&v88 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
  v30 = __chkstk_darwin(v29);
  v91 = (uint64_t)&v88 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __chkstk_darwin(v30);
  v34 = (char *)&v88 - v33;
  __chkstk_darwin(v32);
  v94 = (uint64_t)&v88 - v35;
  v36 = &v28[*(int *)(v26 + 48)];
  sub_B5E70(v1, (uint64_t)v28);
  sub_B5E70(v101, (uint64_t)v36);
  switch(swift_getEnumCaseMultiPayload(v28, v11))
  {
    case 3u:
      sub_B5E70((uint64_t)v28, (uint64_t)v20);
      swift_release(*v20);
      v37 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B6F78) + 48);
      v38 = (uint64_t)v20 + *v37;
      if (swift_getEnumCaseMultiPayload(v36, v11) != 3)
        goto LABEL_7;
      goto LABEL_3;
    case 4u:
      sub_B5E70((uint64_t)v28, (uint64_t)v17);
      swift_release(*v17);
      v37 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B6F78) + 48);
      v38 = (uint64_t)v17 + *v37;
      if (swift_getEnumCaseMultiPayload(v36, v11) != 4)
      {
LABEL_7:
        sub_1459C(v38, &qword_3B4370);
        goto LABEL_28;
      }
LABEL_3:
      swift_release(*(_QWORD *)v36);
      v39 = (uint64_t)&v36[*v37];
      v40 = v94;
      sub_B683C(v38, v94);
      sub_B683C(v39, (uint64_t)v34);
      sub_B5EB4((uint64_t)v28);
      v41 = v98;
      v42 = v98 + *(int *)(v95 + 48);
      sub_282CC(v40, v98);
      sub_282CC((uint64_t)v34, v42);
      v43 = v96;
      v44 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v96 + 48);
      v45 = v99;
      if (v44(v41, 1, v99) == 1)
      {
        sub_1459C((uint64_t)v34, &qword_3B4370);
        sub_1459C(v40, &qword_3B4370);
        if (v44(v42, 1, v45) == 1)
        {
          sub_1459C(v41, &qword_3B4370);
          v46 = 1;
          return v46 & 1;
        }
        goto LABEL_24;
      }
      v73 = v91;
      sub_282CC(v41, v91);
      if (v44(v42, 1, v45) == 1)
      {
        sub_1459C((uint64_t)v34, &qword_3B4370);
        sub_1459C(v40, &qword_3B4370);
        (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v73, v45);
LABEL_24:
        v74 = &qword_3B6F88;
        v75 = v41;
        goto LABEL_29;
      }
      v83 = v88;
      (*(void (**)(char *, uint64_t, uint64_t))(v43 + 32))(v88, v42, v45);
      v84 = sub_B6884();
      v46 = dispatch thunk of static Equatable.== infix(_:_:)(v73, v83, v45, v84);
      v85 = *(void (**)(char *, uint64_t))(v43 + 8);
      v85(v83, v45);
      sub_1459C((uint64_t)v34, &qword_3B4370);
      sub_1459C(v40, &qword_3B4370);
      v85((char *)v73, v45);
      sub_1459C(v41, &qword_3B4370);
      return v46 & 1;
    case 9u:
      sub_B5E70((uint64_t)v28, (uint64_t)v25);
      v47 = *v25;
      v48 = v25[1];
      swift_bridgeObjectRelease();
      if (swift_getEnumCaseMultiPayload(v36, v11) != 9)
      {
        swift_bridgeObjectRelease();
        goto LABEL_28;
      }
      v50 = *(_QWORD *)v36;
      v49 = *((_QWORD *)v36 + 1);
      swift_bridgeObjectRelease();
      if (v47 == v50 && v48 == v49)
        v46 = 1;
      else
        v46 = _stringCompareWithSmolCheck(_:_:expecting:)(v47, v48, v50, v49, 0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_42;
    case 0x10u:
      sub_B5E70((uint64_t)v28, (uint64_t)v23);
      v51 = *v23;
      if (swift_getEnumCaseMultiPayload(v36, v11) != 16)
      {
        swift_release(v51);
        goto LABEL_28;
      }
      v52 = *(_QWORD *)v36;
      v53 = *(_QWORD *)(v51 + 32);
      v54 = *(_QWORD *)(v51 + 40);
      v55 = *(_QWORD *)(*(_QWORD *)v36 + 32);
      v56 = *(_QWORD *)(*(_QWORD *)v36 + 40);
      if (v53 == v55 && v54 == v56)
        v46 = 1;
      else
        v46 = _stringCompareWithSmolCheck(_:_:expecting:)(v53, v54, v55, v56, 0);
      swift_release(v51);
      swift_release(v52);
      goto LABEL_42;
    case 0x1Du:
      sub_B5E70((uint64_t)v28, (uint64_t)v14);
      if (swift_getEnumCaseMultiPayload(v36, v11) != 29)
      {
        (*(void (**)(char *, uint64_t))(v97 + 8))(v14, v100);
LABEL_28:
        v74 = &qword_3B6F90;
        v75 = (uint64_t)v28;
LABEL_29:
        sub_1459C(v75, v74);
        v46 = 0;
        return v46 & 1;
      }
      v58 = v97;
      v59 = *(void (**)(char *, char *, uint64_t))(v97 + 32);
      v60 = v93;
      v61 = v100;
      v59(v93, v14, v100);
      v62 = v92;
      v63 = ((uint64_t (*)(char *, char *, uint64_t))v59)(v92, v36, v61);
      v64 = TranscriptRequestInformation.episodeAdamId.getter(v63);
      v66 = v65;
      v68 = TranscriptRequestInformation.episodeAdamId.getter(v64);
      if (v64 == v68 && v66 == v67)
      {
        swift_bridgeObjectRelease_n(v66, 2);
        v69 = *(void (**)(char *, char *, uint64_t))(v58 + 16);
        v70 = v89;
        v69(v89, v60, v61);
        v71 = v90;
        v72 = ((uint64_t (*)(char *, char *, uint64_t))v69)(v90, v62, v61);
      }
      else
      {
        v76 = _stringCompareWithSmolCheck(_:_:expecting:)(v64, v66, v68, v67, 0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v77 = *(void (**)(char *, char *, uint64_t))(v58 + 16);
        v70 = v89;
        v77(v89, v60, v61);
        v71 = v90;
        v72 = ((uint64_t (*)(char *, char *, uint64_t))v77)(v90, v62, v61);
        v46 = 0;
        if ((v76 & 1) == 0)
          goto LABEL_41;
      }
      v78 = TranscriptRequestInformation.ttmlIdentifier.getter(v72);
      v80 = v79;
      v82 = TranscriptRequestInformation.ttmlIdentifier.getter(v78);
      if (v78 == v82 && v80 == v81)
        v46 = 1;
      else
        v46 = _stringCompareWithSmolCheck(_:_:expecting:)(v78, v80, v82, v81, 0);
      v60 = v93;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_41:
      v86 = *(void (**)(char *, uint64_t))(v58 + 8);
      v86(v71, v61);
      v86(v70, v61);
      v86(v62, v61);
      v86(v60, v61);
LABEL_42:
      sub_B5EB4((uint64_t)v28);
      return v46 & 1;
    default:
      goto LABEL_28;
  }
}

uint64_t sub_B683C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_B6884()
{
  unint64_t result;

  result = qword_3B0B08;
  if (!qword_3B0B08)
  {
    type metadata accessor for URL(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for URL);
    atomic_store(result, (unint64_t *)&qword_3B0B08);
  }
  return result;
}

uint64_t FlowDestination.pageDestinationURL.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  v2 = v1;
  v4 = type metadata accessor for FlowDestination(0);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_B5E70(v2, (uint64_t)v6);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v6, v4);
  if (EnumCaseMultiPayload == 5 || EnumCaseMultiPayload == 4 || EnumCaseMultiPayload == 3)
  {
    swift_release(*v6);
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B6F78);
    return sub_B683C((uint64_t)v6 + *(int *)(v8 + 48), a1);
  }
  else
  {
    v10 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(a1, 1, 1, v10);
    return sub_B5EB4((uint64_t)v6);
  }
}

uint64_t FlowDestination.pageDestinationPage.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = type metadata accessor for FlowDestination(0);
  __chkstk_darwin(v1);
  v3 = (uint64_t *)((char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_B5E70(v0, (uint64_t)v3);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v3, v1);
  if (EnumCaseMultiPayload == 5 || EnumCaseMultiPayload == 4 || EnumCaseMultiPayload == 3)
  {
    v5 = *v3;
    v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B6F78);
    sub_1459C((uint64_t)v3 + *(int *)(v6 + 48), &qword_3B4370);
  }
  else
  {
    sub_B5EB4((uint64_t)v3);
    return 0;
  }
  return v5;
}

uint64_t *initializeBufferWithCopyOfBuffer for FlowDestination(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  int *v87;
  uint64_t v88;
  unsigned int (*v89)(_QWORD *, uint64_t, int *);
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  id *v104;
  int v105;
  id v106;
  id *v107;
  int v108;
  id v109;
  id *v110;
  int v111;
  id v112;
  id *v113;
  int v114;
  id v115;
  id *v116;
  int v117;
  id v118;
  id *v119;
  int v120;
  id v121;
  id *v122;
  int v123;
  id v124;
  id *v125;
  int v126;
  id v127;
  id *v128;
  int v129;
  id v130;
  id *v131;
  int v132;
  id v133;
  uint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  _QWORD *v144;
  uint64_t v145;
  void (*v146)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v147;
  char *v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  char *v157;
  uint64_t v158;
  void (*v159)(char *, _QWORD, uint64_t, int *);
  uint64_t v160;
  char *v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  unsigned int (*v179)(char *, uint64_t, uint64_t);
  uint64_t v180;
  uint64_t v181;
  char *v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  char *v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  char *v199;
  uint64_t v200;
  void (*v201)(char *, char *, uint64_t);
  uint64_t v202;
  _QWORD *v203;
  _QWORD *v204;
  uint64_t v205;
  uint64_t v206;
  _QWORD *v207;
  _QWORD *v208;
  uint64_t v209;
  uint64_t v210;
  char *v211;
  char *v212;
  uint64_t v213;
  _QWORD *v214;
  _QWORD *v215;
  uint64_t v216;
  uint64_t v217;
  int v218;
  uint64_t v219;
  uint64_t v220;
  id *v221;
  int v222;
  id v223;
  id *v224;
  int v225;
  id v226;
  id *v227;
  int v228;
  id v229;
  id *v230;
  int v231;
  id v232;
  id *v233;
  int v234;
  id v235;
  uint64_t v236;
  char *v237;
  char *v238;
  uint64_t v239;
  uint64_t v240;
  _QWORD *v241;
  _QWORD *v242;
  uint64_t v243;
  uint64_t v244;
  _QWORD *v245;
  _QWORD *v246;
  uint64_t v247;
  void (*v248)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v249;
  _QWORD *v250;
  _QWORD *v251;
  uint64_t v252;
  uint64_t v253;
  char *v254;
  char *v255;
  uint64_t v256;
  char *v257;
  char *v258;
  uint64_t v259;
  char *v260;
  char *v261;
  uint64_t v262;
  uint64_t v263;
  unsigned int (*v264)(char *, uint64_t, uint64_t);
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  char *__dst;
  unsigned int (*v269)(_QWORD *, uint64_t, int *);
  int *v270;
  int *v271;
  int *v272;
  char *v273;
  uint64_t v274;
  char *v275;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        v8 = type metadata accessor for URL(0);
        (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
        v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B6F98);
        *((_BYTE *)a1 + *(int *)(v9 + 48)) = *((_BYTE *)a2 + *(int *)(v9 + 48));
        swift_storeEnumTagMultiPayload(a1, a3, 0);
        break;
      case 1u:
        v12 = type metadata accessor for URL(0);
        v13 = *(_QWORD *)(v12 - 8);
        if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v13 + 48))(a2, 1, v12))
        {
          v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
        }
        else
        {
          (*(void (**)(uint64_t *, _QWORD *, uint64_t))(v13 + 16))(a1, a2, v12);
          (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v13 + 56))(a1, 0, 1, v12);
        }
        swift_storeEnumTagMultiPayload(a1, a3, 1);
        break;
      case 2u:
        v15 = type metadata accessor for URL(0);
        (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(a1, a2, v15);
        v16 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B6F80) + 48);
        v17 = (uint64_t *)((char *)a1 + v16);
        v18 = (_QWORD *)((char *)a2 + v16);
        v19 = (int *)type metadata accessor for ArtworkModel(0);
        v20 = *((_QWORD *)v19 - 1);
        if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v20 + 48))(v18, 1, v19))
        {
          v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
          memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
        }
        else
        {
          v96 = v18[1];
          *v17 = *v18;
          v17[1] = v96;
          v97 = *((unsigned __int8 *)v18 + 32);
          swift_bridgeObjectRetain(v96);
          if (v97 == 255)
          {
            *((_OWORD *)v17 + 1) = *((_OWORD *)v18 + 1);
            *((_BYTE *)v17 + 32) = *((_BYTE *)v18 + 32);
          }
          else
          {
            v98 = v18[2];
            v99 = v18[3];
            sub_3D464(v98, v99, v97);
            v17[2] = v98;
            v17[3] = v99;
            *((_BYTE *)v17 + 32) = v97;
          }
          *(_OWORD *)(v17 + 5) = *(_OWORD *)(v18 + 5);
          v104 = (id *)(v18 + 7);
          v105 = *((unsigned __int8 *)v18 + 64);
          if (v105 == 255)
          {
            v17[7] = *v104;
            *((_BYTE *)v17 + 64) = *((_BYTE *)v18 + 64);
          }
          else
          {
            v106 = *v104;
            sub_3D47C(*v104, *((_BYTE *)v18 + 64));
            v17[7] = v106;
            *((_BYTE *)v17 + 64) = v105;
          }
          v110 = (id *)(v18 + 9);
          v111 = *((unsigned __int8 *)v18 + 80);
          if (v111 == 255)
          {
            v17[9] = *v110;
            *((_BYTE *)v17 + 80) = *((_BYTE *)v18 + 80);
          }
          else
          {
            v112 = *v110;
            sub_3D47C(*v110, *((_BYTE *)v18 + 80));
            v17[9] = v112;
            *((_BYTE *)v17 + 80) = v111;
          }
          v116 = (id *)(v18 + 11);
          v117 = *((unsigned __int8 *)v18 + 96);
          if (v117 == 255)
          {
            v17[11] = *v116;
            *((_BYTE *)v17 + 96) = *((_BYTE *)v18 + 96);
          }
          else
          {
            v118 = *v116;
            sub_3D47C(*v116, *((_BYTE *)v18 + 96));
            v17[11] = v118;
            *((_BYTE *)v17 + 96) = v117;
          }
          v122 = (id *)(v18 + 13);
          v123 = *((unsigned __int8 *)v18 + 112);
          if (v123 == 255)
          {
            v17[13] = *v122;
            *((_BYTE *)v17 + 112) = *((_BYTE *)v18 + 112);
          }
          else
          {
            v124 = *v122;
            sub_3D47C(*v122, *((_BYTE *)v18 + 112));
            v17[13] = v124;
            *((_BYTE *)v17 + 112) = v123;
          }
          v128 = (id *)(v18 + 15);
          v129 = *((unsigned __int8 *)v18 + 128);
          if (v129 == 255)
          {
            v17[15] = *v128;
            *((_BYTE *)v17 + 128) = *((_BYTE *)v18 + 128);
          }
          else
          {
            v130 = *v128;
            sub_3D47C(*v128, *((_BYTE *)v18 + 128));
            v17[15] = v130;
            *((_BYTE *)v17 + 128) = v129;
          }
          *((_BYTE *)v17 + 129) = *((_BYTE *)v18 + 129);
          v134 = v19[11];
          v135 = (char *)v17 + v134;
          v136 = (char *)v18 + v134;
          v137 = type metadata accessor for ArtworkCrop(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v137 - 8) + 16))(v135, v136, v137);
          v138 = v19[12];
          v139 = (_QWORD *)((char *)v17 + v138);
          v140 = (_QWORD *)((char *)v18 + v138);
          v141 = v140[1];
          *v139 = *v140;
          v139[1] = v141;
          *((_BYTE *)v17 + v19[13]) = *((_BYTE *)v18 + v19[13]);
          *((_BYTE *)v17 + v19[14]) = *((_BYTE *)v18 + v19[14]);
          *((_BYTE *)v17 + v19[15]) = *((_BYTE *)v18 + v19[15]);
          v142 = v19[16];
          v143 = (_QWORD *)((char *)v17 + v142);
          v144 = (_QWORD *)((char *)v18 + v142);
          v145 = v144[1];
          *v143 = *v144;
          v143[1] = v145;
          v146 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v20 + 56);
          swift_bridgeObjectRetain(v141);
          swift_bridgeObjectRetain(v145);
          v146(v17, 0, 1, v19);
        }
        swift_storeEnumTagMultiPayload(a1, a3, 2);
        break;
      case 3u:
        *a1 = *a2;
        swift_retain();
        v22 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B6F78) + 48);
        v23 = (char *)a1 + v22;
        v24 = (char *)a2 + v22;
        v25 = type metadata accessor for URL(0);
        v26 = *(_QWORD *)(v25 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
        {
          v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
          memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v23, v24, v25);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
        }
        swift_storeEnumTagMultiPayload(a1, a3, 3);
        break;
      case 4u:
        *a1 = *a2;
        swift_retain();
        v28 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B6F78) + 48);
        v29 = (char *)a1 + v28;
        v30 = (char *)a2 + v28;
        v31 = type metadata accessor for URL(0);
        v32 = *(_QWORD *)(v31 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
        {
          v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
          memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v29, v30, v31);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
        }
        swift_storeEnumTagMultiPayload(a1, a3, 4);
        break;
      case 5u:
        *a1 = *a2;
        swift_retain();
        v34 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B6F78) + 48);
        v35 = (char *)a1 + v34;
        v36 = (char *)a2 + v34;
        v37 = type metadata accessor for URL(0);
        v38 = *(_QWORD *)(v37 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
        {
          v39 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
          memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v35, v36, v37);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
        }
        swift_storeEnumTagMultiPayload(a1, a3, 5);
        break;
      case 6u:
        v40 = (void *)*a2;
        *a1 = *a2;
        v41 = v40;
        swift_storeEnumTagMultiPayload(a1, a3, 6);
        break;
      case 7u:
        v42 = a2[1];
        *a1 = *a2;
        a1[1] = v42;
        a1[2] = a2[2];
        *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
        v43 = a2[4];
        v44 = *((_BYTE *)a2 + 40);
        swift_bridgeObjectRetain(v42);
        sub_43568(v43, v44);
        a1[4] = v43;
        *((_BYTE *)a1 + 40) = v44;
        swift_storeEnumTagMultiPayload(a1, a3, 7);
        break;
      case 8u:
        v45 = *a2;
        v46 = a2[1];
        v47 = a2[2];
        v48 = a2[3];
        v49 = a2[4];
        v50 = a2[5];
        v52 = a2[6];
        v51 = a2[7];
        v274 = v51;
        v53 = *((_BYTE *)a2 + 64);
        sub_898F4(v45, v46, v47, v48, v49, v50, v52, v51, v53);
        *a1 = v45;
        a1[1] = v46;
        a1[2] = v47;
        a1[3] = v48;
        a1[4] = v49;
        a1[5] = v50;
        a1[6] = v52;
        a1[7] = v274;
        *((_BYTE *)a1 + 64) = v53;
        swift_storeEnumTagMultiPayload(a1, a3, 8);
        break;
      case 9u:
        v54 = a2[1];
        *a1 = *a2;
        a1[1] = v54;
        v55 = a2[3];
        a1[2] = a2[2];
        a1[3] = v55;
        a1[4] = a2[4];
        *((_BYTE *)a1 + 40) = *((_BYTE *)a2 + 40);
        a1[6] = a2[6];
        *((_BYTE *)a1 + 56) = *((_BYTE *)a2 + 56);
        swift_bridgeObjectRetain(v54);
        swift_bridgeObjectRetain(v55);
        swift_storeEnumTagMultiPayload(a1, a3, 9);
        break;
      case 0xAu:
        *a1 = *a2;
        swift_retain();
        swift_storeEnumTagMultiPayload(a1, a3, 10);
        break;
      case 0xBu:
        v56 = a2[1];
        *a1 = *a2;
        a1[1] = v56;
        swift_bridgeObjectRetain(v56);
        swift_storeEnumTagMultiPayload(a1, a3, 11);
        break;
      case 0xCu:
        v57 = a2[1];
        *a1 = *a2;
        a1[1] = v57;
        swift_bridgeObjectRetain(v57);
        swift_storeEnumTagMultiPayload(a1, a3, 12);
        break;
      case 0xDu:
        *a1 = *a2;
        swift_retain();
        swift_storeEnumTagMultiPayload(a1, a3, 13);
        break;
      case 0xEu:
        v58 = a2[1];
        *a1 = *a2;
        a1[1] = v58;
        swift_bridgeObjectRetain(v58);
        swift_storeEnumTagMultiPayload(a1, a3, 14);
        break;
      case 0xFu:
        v59 = a2[1];
        *a1 = *a2;
        a1[1] = v59;
        v60 = a2[3];
        a1[2] = a2[2];
        a1[3] = v60;
        v61 = a2[5];
        a1[4] = a2[4];
        a1[5] = v61;
        v62 = a2[6];
        v63 = a2[7];
        a1[6] = v62;
        a1[7] = v63;
        swift_bridgeObjectRetain(v59);
        swift_bridgeObjectRetain(v60);
        swift_bridgeObjectRetain(v61);
        swift_bridgeObjectRetain(v63);
        swift_storeEnumTagMultiPayload(a1, a3, 15);
        break;
      case 0x10u:
        *a1 = *a2;
        swift_retain();
        swift_storeEnumTagMultiPayload(a1, a3, 16);
        break;
      case 0x11u:
        v64 = a2[1];
        *a1 = *a2;
        a1[1] = v64;
        swift_bridgeObjectRetain(v64);
        swift_storeEnumTagMultiPayload(a1, a3, 17);
        break;
      case 0x12u:
        v65 = type metadata accessor for URL(0);
        (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v65 - 8) + 16))(a1, a2, v65);
        swift_storeEnumTagMultiPayload(a1, a3, 18);
        break;
      case 0x13u:
        v66 = a2[1];
        *a1 = *a2;
        a1[1] = v66;
        swift_bridgeObjectRetain(v66);
        swift_storeEnumTagMultiPayload(a1, a3, 19);
        break;
      case 0x15u:
        *a1 = *a2;
        swift_retain();
        swift_storeEnumTagMultiPayload(a1, a3, 21);
        break;
      case 0x16u:
        v67 = (void *)*a2;
        *a1 = *a2;
        v68 = v67;
        swift_storeEnumTagMultiPayload(a1, a3, 22);
        break;
      case 0x17u:
        *a1 = *a2;
        swift_retain();
        swift_storeEnumTagMultiPayload(a1, a3, 23);
        break;
      case 0x18u:
        v69 = type metadata accessor for URL(0);
        v70 = *(_QWORD *)(v69 - 8);
        if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v70 + 48))(a2, 1, v69))
        {
          v71 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
        }
        else
        {
          (*(void (**)(uint64_t *, _QWORD *, uint64_t))(v70 + 16))(a1, a2, v69);
          (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v70 + 56))(a1, 0, 1, v69);
        }
        swift_storeEnumTagMultiPayload(a1, a3, 24);
        break;
      case 0x19u:
        v72 = type metadata accessor for URL(0);
        v73 = *(_QWORD *)(v72 - 8);
        if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v73 + 48))(a2, 1, v72))
        {
          v74 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v74 - 8) + 64));
        }
        else
        {
          (*(void (**)(uint64_t *, _QWORD *, uint64_t))(v73 + 16))(a1, a2, v72);
          (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v73 + 56))(a1, 0, 1, v72);
        }
        swift_storeEnumTagMultiPayload(a1, a3, 25);
        break;
      case 0x1Au:
        *a1 = *a2;
        swift_retain();
        swift_storeEnumTagMultiPayload(a1, a3, 26);
        break;
      case 0x1Bu:
        v75 = (void *)*a2;
        *a1 = *a2;
        v76 = v75;
        swift_storeEnumTagMultiPayload(a1, a3, 27);
        break;
      case 0x1Cu:
        v77 = *a2;
        *a1 = *a2;
        swift_bridgeObjectRetain(v77);
        swift_storeEnumTagMultiPayload(a1, a3, 28);
        break;
      case 0x1Du:
        v78 = type metadata accessor for TranscriptRequestInformation(0);
        (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v78 - 8) + 16))(a1, a2, v78);
        swift_storeEnumTagMultiPayload(a1, a3, 29);
        break;
      case 0x1Eu:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        v79 = a2[2];
        a1[2] = v79;
        v270 = (int *)type metadata accessor for EpisodeOffer(0);
        v80 = v270[6];
        v81 = (char *)a1 + v80;
        v82 = (char *)a2 + v80;
        *(_OWORD *)v81 = *(_OWORD *)((char *)a2 + v80);
        v83 = *(_QWORD *)((char *)a2 + v80 + 16);
        *((_QWORD *)v81 + 2) = v83;
        v81[24] = *((_BYTE *)a2 + v80 + 24);
        v272 = (int *)type metadata accessor for ShowOffer(0);
        v273 = v82;
        v84 = v272[7];
        v275 = v81;
        v85 = &v81[v84];
        v86 = &v82[v84];
        v87 = (int *)type metadata accessor for ArtworkModel(0);
        v88 = *((_QWORD *)v87 - 1);
        v89 = *(unsigned int (**)(_QWORD *, uint64_t, int *))(v88 + 48);
        swift_bridgeObjectRetain(v79);
        swift_bridgeObjectRetain(v83);
        v269 = v89;
        v271 = v87;
        v266 = v88;
        if (v89(v86, 1, v87))
        {
          v90 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
          memcpy(v85, v86, *(_QWORD *)(*(_QWORD *)(v90 - 8) + 64));
        }
        else
        {
          v100 = *((_QWORD *)v86 + 1);
          *(_QWORD *)v85 = *(_QWORD *)v86;
          *((_QWORD *)v85 + 1) = v100;
          v101 = v86[32];
          swift_bridgeObjectRetain(v100);
          if (v101 == 255)
          {
            *((_OWORD *)v85 + 1) = *((_OWORD *)v86 + 1);
            v85[32] = v86[32];
          }
          else
          {
            v103 = *((_QWORD *)v86 + 2);
            v102 = *((_QWORD *)v86 + 3);
            sub_3D464(v103, v102, v101);
            *((_QWORD *)v85 + 2) = v103;
            *((_QWORD *)v85 + 3) = v102;
            v85[32] = v101;
          }
          *(_OWORD *)(v85 + 40) = *(_OWORD *)(v86 + 40);
          v107 = (id *)(v86 + 56);
          v108 = v86[64];
          if (v108 == 255)
          {
            *((_QWORD *)v85 + 7) = *v107;
            v85[64] = v86[64];
          }
          else
          {
            v109 = *v107;
            sub_3D47C(*v107, v86[64]);
            *((_QWORD *)v85 + 7) = v109;
            v85[64] = v108;
          }
          v113 = (id *)(v86 + 72);
          v114 = v86[80];
          if (v114 == 255)
          {
            *((_QWORD *)v85 + 9) = *v113;
            v85[80] = v86[80];
          }
          else
          {
            v115 = *v113;
            sub_3D47C(*v113, v86[80]);
            *((_QWORD *)v85 + 9) = v115;
            v85[80] = v114;
          }
          v119 = (id *)(v86 + 88);
          v120 = v86[96];
          if (v120 == 255)
          {
            *((_QWORD *)v85 + 11) = *v119;
            v85[96] = v86[96];
          }
          else
          {
            v121 = *v119;
            sub_3D47C(*v119, v86[96]);
            *((_QWORD *)v85 + 11) = v121;
            v85[96] = v120;
          }
          v125 = (id *)(v86 + 104);
          v126 = v86[112];
          if (v126 == 255)
          {
            *((_QWORD *)v85 + 13) = *v125;
            v85[112] = v86[112];
          }
          else
          {
            v127 = *v125;
            sub_3D47C(*v125, v86[112]);
            *((_QWORD *)v85 + 13) = v127;
            v85[112] = v126;
          }
          v131 = (id *)(v86 + 120);
          v132 = v86[128];
          if (v132 == 255)
          {
            *((_QWORD *)v85 + 15) = *v131;
            v85[128] = v86[128];
          }
          else
          {
            v133 = *v131;
            sub_3D47C(*v131, v86[128]);
            *((_QWORD *)v85 + 15) = v133;
            v85[128] = v132;
          }
          v85[129] = v86[129];
          v147 = v87[11];
          v148 = &v85[v147];
          v149 = &v86[v147];
          v150 = type metadata accessor for ArtworkCrop(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v150 - 8) + 16))(v148, v149, v150);
          v151 = v87[12];
          v152 = &v85[v151];
          v153 = &v86[v151];
          v154 = *((_QWORD *)v153 + 1);
          *(_QWORD *)v152 = *(_QWORD *)v153;
          *((_QWORD *)v152 + 1) = v154;
          v85[v87[13]] = v86[v87[13]];
          v85[v87[14]] = v86[v87[14]];
          v85[v87[15]] = v86[v87[15]];
          v155 = v87[16];
          v156 = &v85[v155];
          v157 = &v86[v155];
          v158 = *((_QWORD *)v157 + 1);
          *(_QWORD *)v156 = *(_QWORD *)v157;
          *((_QWORD *)v156 + 1) = v158;
          v159 = *(void (**)(char *, _QWORD, uint64_t, int *))(v88 + 56);
          swift_bridgeObjectRetain(v154);
          swift_bridgeObjectRetain(v158);
          v159(v85, 0, 1, v87);
        }
        v160 = v272[8];
        v161 = &v275[v160];
        v162 = &v273[v160];
        v163 = *((_QWORD *)v162 + 1);
        *(_QWORD *)v161 = *(_QWORD *)v162;
        *((_QWORD *)v161 + 1) = v163;
        v164 = v272[9];
        v165 = &v275[v164];
        v166 = &v273[v164];
        v167 = *((_QWORD *)v166 + 1);
        *(_QWORD *)v165 = *(_QWORD *)v166;
        *((_QWORD *)v165 + 1) = v167;
        v275[v272[10]] = v273[v272[10]];
        v168 = v272[11];
        v169 = &v275[v168];
        v170 = &v273[v168];
        v171 = *((_QWORD *)v170 + 1);
        *(_QWORD *)v169 = *(_QWORD *)v170;
        *((_QWORD *)v169 + 1) = v171;
        v172 = v272[12];
        v173 = &v275[v172];
        v174 = &v273[v172];
        v175 = *((_QWORD *)v174 + 1);
        *(_QWORD *)v173 = *(_QWORD *)v174;
        *((_QWORD *)v173 + 1) = v175;
        v176 = v272[13];
        __dst = &v275[v176];
        v177 = &v273[v176];
        v178 = type metadata accessor for URL(0);
        v267 = *(_QWORD *)(v178 - 8);
        v179 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v267 + 48);
        swift_bridgeObjectRetain(v163);
        swift_bridgeObjectRetain(v167);
        swift_bridgeObjectRetain(v171);
        swift_bridgeObjectRetain(v175);
        if (v179(v177, 1, v178))
        {
          v180 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
          memcpy(__dst, v177, *(_QWORD *)(*(_QWORD *)(v180 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v267 + 16))(__dst, v177, v178);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v267 + 56))(__dst, 0, 1, v178);
        }
        v181 = v272[14];
        v182 = &v275[v181];
        v183 = &v273[v181];
        v184 = *((_QWORD *)v183 + 1);
        *(_QWORD *)v182 = *(_QWORD *)v183;
        *((_QWORD *)v182 + 1) = v184;
        v185 = v272[15];
        v186 = &v275[v185];
        v187 = &v273[v185];
        v188 = *((_QWORD *)v187 + 1);
        *(_QWORD *)v186 = *(_QWORD *)v187;
        *((_QWORD *)v186 + 1) = v188;
        v189 = v272[16];
        v190 = &v275[v189];
        v191 = &v273[v189];
        swift_bridgeObjectRetain(v184);
        swift_bridgeObjectRetain(v188);
        if (v179(v191, 1, v178))
        {
          v192 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
          memcpy(v190, v191, *(_QWORD *)(*(_QWORD *)(v192 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v267 + 16))(v190, v191, v178);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v267 + 56))(v190, 0, 1, v178);
        }
        v193 = v272[17];
        v194 = &v275[v193];
        v195 = &v273[v193];
        if (v179(&v273[v193], 1, v178))
        {
          v196 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
          memcpy(v194, v195, *(_QWORD *)(*(_QWORD *)(v196 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v267 + 16))(v194, v195, v178);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v267 + 56))(v194, 0, 1, v178);
        }
        v275[v272[18]] = v273[v272[18]];
        v197 = v270[7];
        v198 = (char *)a1 + v197;
        v199 = (char *)a2 + v197;
        if (v179((char *)a2 + v197, 1, v178))
        {
          v200 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
          memcpy(v198, v199, *(_QWORD *)(*(_QWORD *)(v200 - 8) + 64));
          (*(void (**)(char *, char *, uint64_t))(v267 + 16))((char *)a1 + v270[8], (char *)a2 + v270[8], v178);
        }
        else
        {
          v201 = *(void (**)(char *, char *, uint64_t))(v267 + 16);
          v201(v198, v199, v178);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v267 + 56))(v198, 0, 1, v178);
          v201((char *)a1 + v270[8], (char *)a2 + v270[8], v178);
        }
        *(uint64_t *)((char *)a1 + v270[9]) = *(_QWORD *)((char *)a2 + v270[9]);
        v202 = v270[10];
        v203 = (uint64_t *)((char *)a1 + v202);
        v204 = (_QWORD *)((char *)a2 + v202);
        v205 = v204[1];
        *v203 = *v204;
        v203[1] = v205;
        v206 = v270[11];
        v207 = (uint64_t *)((char *)a1 + v206);
        v208 = (_QWORD *)((char *)a2 + v206);
        v209 = v208[1];
        *v207 = *v208;
        v207[1] = v209;
        *(uint64_t *)((char *)a1 + v270[12]) = *(_QWORD *)((char *)a2 + v270[12]);
        *((_BYTE *)a1 + v270[13]) = *((_BYTE *)a2 + v270[13]);
        *((_BYTE *)a1 + v270[14]) = *((_BYTE *)a2 + v270[14]);
        v210 = v270[15];
        v211 = (char *)a1 + v210;
        v212 = (char *)a2 + v210;
        *(_QWORD *)v211 = *(_QWORD *)v212;
        v211[8] = v212[8];
        v213 = v270[16];
        v214 = (uint64_t *)((char *)a1 + v213);
        v215 = (_QWORD *)((char *)a2 + v213);
        swift_bridgeObjectRetain(v205);
        swift_bridgeObjectRetain(v209);
        swift_retain();
        if (v269(v215, 1, v271))
        {
          v216 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
          memcpy(v214, v215, *(_QWORD *)(*(_QWORD *)(v216 - 8) + 64));
        }
        else
        {
          v217 = v215[1];
          *v214 = *v215;
          v214[1] = v217;
          v218 = *((unsigned __int8 *)v215 + 32);
          swift_bridgeObjectRetain(v217);
          if (v218 == 255)
          {
            *((_OWORD *)v214 + 1) = *((_OWORD *)v215 + 1);
            *((_BYTE *)v214 + 32) = *((_BYTE *)v215 + 32);
          }
          else
          {
            v219 = v215[2];
            v220 = v215[3];
            sub_3D464(v219, v220, v218);
            v214[2] = v219;
            v214[3] = v220;
            *((_BYTE *)v214 + 32) = v218;
          }
          *(_OWORD *)(v214 + 5) = *(_OWORD *)(v215 + 5);
          v221 = (id *)(v215 + 7);
          v222 = *((unsigned __int8 *)v215 + 64);
          if (v222 == 255)
          {
            v214[7] = *v221;
            *((_BYTE *)v214 + 64) = *((_BYTE *)v215 + 64);
          }
          else
          {
            v223 = *v221;
            sub_3D47C(*v221, *((_BYTE *)v215 + 64));
            v214[7] = v223;
            *((_BYTE *)v214 + 64) = v222;
          }
          v224 = (id *)(v215 + 9);
          v225 = *((unsigned __int8 *)v215 + 80);
          if (v225 == 255)
          {
            v214[9] = *v224;
            *((_BYTE *)v214 + 80) = *((_BYTE *)v215 + 80);
          }
          else
          {
            v226 = *v224;
            sub_3D47C(*v224, *((_BYTE *)v215 + 80));
            v214[9] = v226;
            *((_BYTE *)v214 + 80) = v225;
          }
          v227 = (id *)(v215 + 11);
          v228 = *((unsigned __int8 *)v215 + 96);
          if (v228 == 255)
          {
            v214[11] = *v227;
            *((_BYTE *)v214 + 96) = *((_BYTE *)v215 + 96);
          }
          else
          {
            v229 = *v227;
            sub_3D47C(*v227, *((_BYTE *)v215 + 96));
            v214[11] = v229;
            *((_BYTE *)v214 + 96) = v228;
          }
          v230 = (id *)(v215 + 13);
          v231 = *((unsigned __int8 *)v215 + 112);
          if (v231 == 255)
          {
            v214[13] = *v230;
            *((_BYTE *)v214 + 112) = *((_BYTE *)v215 + 112);
          }
          else
          {
            v232 = *v230;
            sub_3D47C(*v230, *((_BYTE *)v215 + 112));
            v214[13] = v232;
            *((_BYTE *)v214 + 112) = v231;
          }
          v233 = (id *)(v215 + 15);
          v234 = *((unsigned __int8 *)v215 + 128);
          if (v234 == 255)
          {
            v214[15] = *v233;
            *((_BYTE *)v214 + 128) = *((_BYTE *)v215 + 128);
          }
          else
          {
            v235 = *v233;
            sub_3D47C(*v233, *((_BYTE *)v215 + 128));
            v214[15] = v235;
            *((_BYTE *)v214 + 128) = v234;
          }
          *((_BYTE *)v214 + 129) = *((_BYTE *)v215 + 129);
          v236 = v271[11];
          v237 = (char *)v214 + v236;
          v238 = (char *)v215 + v236;
          v239 = type metadata accessor for ArtworkCrop(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v239 - 8) + 16))(v237, v238, v239);
          v240 = v271[12];
          v241 = (_QWORD *)((char *)v214 + v240);
          v242 = (_QWORD *)((char *)v215 + v240);
          v243 = v242[1];
          *v241 = *v242;
          v241[1] = v243;
          *((_BYTE *)v214 + v271[13]) = *((_BYTE *)v215 + v271[13]);
          *((_BYTE *)v214 + v271[14]) = *((_BYTE *)v215 + v271[14]);
          *((_BYTE *)v214 + v271[15]) = *((_BYTE *)v215 + v271[15]);
          v244 = v271[16];
          v245 = (_QWORD *)((char *)v214 + v244);
          v246 = (_QWORD *)((char *)v215 + v244);
          v247 = v246[1];
          *v245 = *v246;
          v245[1] = v247;
          v248 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v266 + 56);
          swift_bridgeObjectRetain(v243);
          swift_bridgeObjectRetain(v247);
          v248(v214, 0, 1, v271);
        }
        v249 = v270[17];
        v250 = (uint64_t *)((char *)a1 + v249);
        v251 = (_QWORD *)((char *)a2 + v249);
        v252 = v251[1];
        *v250 = *v251;
        v250[1] = v252;
        v253 = v270[18];
        v254 = (char *)a1 + v253;
        v255 = (char *)a2 + v253;
        v254[8] = v255[8];
        *(_QWORD *)v254 = *(_QWORD *)v255;
        v256 = v270[19];
        v257 = (char *)a1 + v256;
        v258 = (char *)a2 + v256;
        *(_QWORD *)v257 = *(_QWORD *)v258;
        v257[8] = v258[8];
        *((_BYTE *)a1 + v270[20]) = *((_BYTE *)a2 + v270[20]);
        *((_BYTE *)a1 + v270[21]) = *((_BYTE *)a2 + v270[21]);
        v259 = v270[22];
        v260 = (char *)a1 + v259;
        v261 = (char *)a2 + v259;
        v262 = type metadata accessor for TranscriptRequestInformation(0);
        v263 = *(_QWORD *)(v262 - 8);
        v264 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v263 + 48);
        swift_bridgeObjectRetain(v252);
        if (v264(v261, 1, v262))
        {
          v265 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2C40);
          memcpy(v260, v261, *(_QWORD *)(*(_QWORD *)(v265 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v263 + 16))(v260, v261, v262);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v263 + 56))(v260, 0, 1, v262);
        }
        swift_storeEnumTagMultiPayload(a1, a3, 30);
        break;
      case 0x1Fu:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        v91 = a2[2];
        a1[2] = v91;
        swift_bridgeObjectRetain(v91);
        swift_storeEnumTagMultiPayload(a1, a3, 31);
        break;
      case 0x20u:
        *a1 = *a2;
        v92 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B6FA0) + 48);
        v93 = (char *)a1 + v92;
        v94 = (char *)a2 + v92;
        v95 = type metadata accessor for URL(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v95 - 8) + 16))(v93, v94, v95);
        swift_storeEnumTagMultiPayload(a1, a3, 32);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(v5 + 64));
        break;
    }
  }
  return a1;
}

void destroy for FlowDestination(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(_QWORD *, uint64_t);
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  char *v23;
  int *v24;
  char *v25;
  uint64_t v26;
  unsigned int (*v27)(char *, uint64_t, uint64_t);
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int (*v39)(char *, uint64_t, uint64_t);
  char *v40;
  char *v41;
  char *v42;
  unsigned int v43;
  void (*v44)(char *, uint64_t);
  char *v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  char *v52;
  uint64_t v53;

  v2 = a1;
  switch(swift_getEnumCaseMultiPayload(a1, a2))
  {
    case 0u:
    case 0x12u:
      goto LABEL_69;
    case 1u:
    case 0x18u:
    case 0x19u:
      goto LABEL_6;
    case 2u:
      v10 = type metadata accessor for URL(0);
      (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v2, v10);
      v11 = (char *)v2 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B6F80) + 48);
      v12 = type metadata accessor for ArtworkModel(0);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v11, 1, v12))
        return;
      swift_bridgeObjectRelease();
      v13 = v11[32];
      if (v13 != 255)
        sub_3B5BC(*((_QWORD *)v11 + 2), *((_QWORD *)v11 + 3), v13);
      v14 = v11[64];
      if (v14 != 255)
        sub_3D624(*((id *)v11 + 7), v14);
      v15 = v11[80];
      if (v15 != 255)
        sub_3D624(*((id *)v11 + 9), v15);
      v16 = v11[96];
      if (v16 != 255)
        sub_3D624(*((id *)v11 + 11), v16);
      v17 = v11[112];
      if (v17 != 255)
        sub_3D624(*((id *)v11 + 13), v17);
      v18 = v11[128];
      if (v18 != 255)
        sub_3D624(*((id *)v11 + 15), v18);
      v19 = &v11[*(int *)(v12 + 44)];
      v20 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v19, v20);
      swift_bridgeObjectRelease();
      goto LABEL_4;
    case 3u:
    case 4u:
    case 5u:
      swift_release(*v2);
      v2 = (_QWORD *)((char *)v2 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B6F78) + 48));
LABEL_6:
      v4 = type metadata accessor for URL(0);
      goto LABEL_7;
    case 6u:
    case 0x16u:
    case 0x1Bu:

      return;
    case 7u:
      swift_bridgeObjectRelease();
      sub_4357C(v2[4], *((_BYTE *)v2 + 40));
      return;
    case 8u:
      sub_87198(*v2, v2[1], v2[2], v2[3], v2[4], v2[5], v2[6], v2[7], *((_BYTE *)v2 + 64));
      return;
    case 9u:
      swift_bridgeObjectRelease();
      goto LABEL_4;
    case 0xAu:
    case 0xDu:
    case 0x10u:
    case 0x15u:
    case 0x17u:
      v3 = *v2;
      goto LABEL_3;
    case 0xBu:
    case 0xCu:
    case 0xEu:
    case 0x11u:
    case 0x13u:
    case 0x1Cu:
    case 0x1Fu:
      goto LABEL_4;
    case 0xFu:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_4:
      swift_bridgeObjectRelease();
      return;
    case 0x1Au:
      v3 = *v2 & 0x3FFFFFFFFFFFFFFFLL;
LABEL_3:
      swift_release(v3);
      return;
    case 0x1Du:
      v21 = type metadata accessor for TranscriptRequestInformation(0);
      goto LABEL_70;
    case 0x1Eu:
      swift_bridgeObjectRelease();
      v22 = (int *)type metadata accessor for EpisodeOffer(0);
      v23 = (char *)v2 + v22[6];
      swift_bridgeObjectRelease();
      v24 = (int *)type metadata accessor for ShowOffer(0);
      v25 = &v23[v24[7]];
      v26 = type metadata accessor for ArtworkModel(0);
      v27 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 48);
      if (!v27(v25, 1, v26))
      {
        swift_bridgeObjectRelease();
        v28 = v25[32];
        if (v28 != 255)
          sub_3B5BC(*((_QWORD *)v25 + 2), *((_QWORD *)v25 + 3), v28);
        v29 = v25[64];
        if (v29 != 255)
          sub_3D624(*((id *)v25 + 7), v29);
        v30 = v25[80];
        if (v30 != 255)
          sub_3D624(*((id *)v25 + 9), v30);
        v31 = v25[96];
        if (v31 != 255)
          sub_3D624(*((id *)v25 + 11), v31);
        v32 = v25[112];
        if (v32 != 255)
          sub_3D624(*((id *)v25 + 13), v32);
        v33 = v25[128];
        if (v33 != 255)
          sub_3D624(*((id *)v25 + 15), v33);
        v34 = &v25[*(int *)(v26 + 44)];
        v35 = type metadata accessor for ArtworkCrop(0);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v35 - 8) + 8))(v34, v35);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v36 = &v23[v24[13]];
      v37 = type metadata accessor for URL(0);
      v38 = *(_QWORD *)(v37 - 8);
      v39 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48);
      if (!v39(v36, 1, v37))
        (*(void (**)(char *, uint64_t))(v38 + 8))(v36, v37);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v40 = &v23[v24[16]];
      if (!v39(v40, 1, v37))
        (*(void (**)(char *, uint64_t))(v38 + 8))(v40, v37);
      v41 = &v23[v24[17]];
      if (!v39(v41, 1, v37))
        (*(void (**)(char *, uint64_t))(v38 + 8))(v41, v37);
      v42 = (char *)v2 + v22[7];
      v43 = v39(v42, 1, v37);
      v44 = *(void (**)(char *, uint64_t))(v38 + 8);
      if (!v43)
        v44(v42, v37);
      v44((char *)v2 + v22[8], v37);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release(*(_QWORD *)((char *)v2 + v22[12]));
      v45 = (char *)v2 + v22[16];
      if (!v27(v45, 1, v26))
      {
        swift_bridgeObjectRelease();
        v46 = v45[32];
        if (v46 != 255)
          sub_3B5BC(*((_QWORD *)v45 + 2), *((_QWORD *)v45 + 3), v46);
        v47 = v45[64];
        if (v47 != 255)
          sub_3D624(*((id *)v45 + 7), v47);
        v48 = v45[80];
        if (v48 != 255)
          sub_3D624(*((id *)v45 + 9), v48);
        v49 = v45[96];
        if (v49 != 255)
          sub_3D624(*((id *)v45 + 11), v49);
        v50 = v45[112];
        if (v50 != 255)
          sub_3D624(*((id *)v45 + 13), v50);
        v51 = v45[128];
        if (v51 != 255)
          sub_3D624(*((id *)v45 + 15), v51);
        v52 = &v45[*(int *)(v26 + 44)];
        v53 = type metadata accessor for ArtworkCrop(0);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v53 - 8) + 8))(v52, v53);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      v2 = (_QWORD *)((char *)v2 + v22[22]);
      v4 = type metadata accessor for TranscriptRequestInformation(0);
LABEL_7:
      v5 = v4;
      v6 = *(_QWORD *)(v4 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v6 + 48))(v2, 1, v4))
        return;
      v7 = *(void (**)(_QWORD *, uint64_t))(v6 + 8);
      v8 = v2;
      v9 = v5;
      goto LABEL_71;
    case 0x20u:
      v2 = (_QWORD *)((char *)v2 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B6FA0) + 48));
LABEL_69:
      v21 = type metadata accessor for URL(0);
LABEL_70:
      v9 = v21;
      v7 = *(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v21 - 8) + 8);
      v8 = v2;
LABEL_71:
      v7(v8, v9);
      break;
    default:
      return;
  }
}

uint64_t *initializeWithCopy for FlowDestination(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  unsigned int (*v87)(_QWORD *, uint64_t, int *);
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  id *v102;
  int v103;
  id v104;
  id *v105;
  int v106;
  id v107;
  id *v108;
  int v109;
  id v110;
  id *v111;
  int v112;
  id v113;
  id *v114;
  int v115;
  id v116;
  id *v117;
  int v118;
  id v119;
  id *v120;
  int v121;
  id v122;
  id *v123;
  int v124;
  id v125;
  id *v126;
  int v127;
  id v128;
  id *v129;
  int v130;
  id v131;
  uint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  _QWORD *v138;
  uint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  _QWORD *v142;
  uint64_t v143;
  void (*v144)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v145;
  char *v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  char *v155;
  uint64_t v156;
  void (*v157)(char *, _QWORD, uint64_t, int *);
  uint64_t v158;
  char *v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unsigned int (*v179)(char *, uint64_t, uint64_t);
  unsigned int (*v180)(char *, uint64_t, uint64_t);
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  char *v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  char *v197;
  uint64_t v198;
  uint64_t v199;
  char *v200;
  char *v201;
  uint64_t v202;
  void (*v203)(char *, char *, uint64_t);
  uint64_t v204;
  _QWORD *v205;
  _QWORD *v206;
  uint64_t v207;
  uint64_t v208;
  _QWORD *v209;
  _QWORD *v210;
  uint64_t v211;
  uint64_t v212;
  char *v213;
  char *v214;
  uint64_t v215;
  _QWORD *v216;
  _QWORD *v217;
  uint64_t v218;
  uint64_t v219;
  int v220;
  uint64_t v221;
  uint64_t v222;
  id *v223;
  int v224;
  id v225;
  id *v226;
  int v227;
  id v228;
  id *v229;
  int v230;
  id v231;
  id *v232;
  int v233;
  id v234;
  id *v235;
  int v236;
  id v237;
  uint64_t v238;
  char *v239;
  char *v240;
  uint64_t v241;
  uint64_t v242;
  _QWORD *v243;
  _QWORD *v244;
  uint64_t v245;
  uint64_t v246;
  _QWORD *v247;
  _QWORD *v248;
  uint64_t v249;
  void (*v250)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v251;
  _QWORD *v252;
  _QWORD *v253;
  uint64_t v254;
  uint64_t v255;
  char *v256;
  char *v257;
  uint64_t v258;
  char *v259;
  char *v260;
  uint64_t v261;
  char *v262;
  char *v263;
  uint64_t v264;
  uint64_t v265;
  unsigned int (*v266)(char *, uint64_t, uint64_t);
  uint64_t v267;
  uint64_t v269;
  char *__dst;
  unsigned int (*v271)(_QWORD *, uint64_t, int *);
  int *v272;
  int *v273;
  uint64_t v274;
  uint64_t v275;
  int *v276;
  char *v277;

  switch(swift_getEnumCaseMultiPayload(a2, a3))
  {
    case 0u:
      v6 = type metadata accessor for URL(0);
      (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
      v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B6F98);
      *((_BYTE *)a1 + *(int *)(v7 + 48)) = *((_BYTE *)a2 + *(int *)(v7 + 48));
      v8 = a1;
      v9 = a3;
      v10 = 0;
      goto LABEL_131;
    case 1u:
      v11 = type metadata accessor for URL(0);
      v12 = *(_QWORD *)(v11 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v12 + 48))(a2, 1, v11))
      {
        v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, _QWORD *, uint64_t))(v12 + 16))(a1, a2, v11);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v12 + 56))(a1, 0, 1, v11);
      }
      v8 = a1;
      v9 = a3;
      v10 = 1;
      goto LABEL_131;
    case 2u:
      v14 = type metadata accessor for URL(0);
      (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(a1, a2, v14);
      v15 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B6F80) + 48);
      v16 = (uint64_t *)((char *)a1 + v15);
      v17 = (_QWORD *)((char *)a2 + v15);
      v18 = (int *)type metadata accessor for ArtworkModel(0);
      v19 = *((_QWORD *)v18 - 1);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v19 + 48))(v17, 1, v18))
      {
        v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
        memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      }
      else
      {
        v94 = v17[1];
        *v16 = *v17;
        v16[1] = v94;
        v95 = *((unsigned __int8 *)v17 + 32);
        swift_bridgeObjectRetain(v94);
        if (v95 == 255)
        {
          *((_OWORD *)v16 + 1) = *((_OWORD *)v17 + 1);
          *((_BYTE *)v16 + 32) = *((_BYTE *)v17 + 32);
        }
        else
        {
          v96 = v17[2];
          v97 = v17[3];
          sub_3D464(v96, v97, v95);
          v16[2] = v96;
          v16[3] = v97;
          *((_BYTE *)v16 + 32) = v95;
        }
        *(_OWORD *)(v16 + 5) = *(_OWORD *)(v17 + 5);
        v102 = (id *)(v17 + 7);
        v103 = *((unsigned __int8 *)v17 + 64);
        if (v103 == 255)
        {
          v16[7] = *v102;
          *((_BYTE *)v16 + 64) = *((_BYTE *)v17 + 64);
        }
        else
        {
          v104 = *v102;
          sub_3D47C(*v102, *((_BYTE *)v17 + 64));
          v16[7] = v104;
          *((_BYTE *)v16 + 64) = v103;
        }
        v108 = (id *)(v17 + 9);
        v109 = *((unsigned __int8 *)v17 + 80);
        if (v109 == 255)
        {
          v16[9] = *v108;
          *((_BYTE *)v16 + 80) = *((_BYTE *)v17 + 80);
        }
        else
        {
          v110 = *v108;
          sub_3D47C(*v108, *((_BYTE *)v17 + 80));
          v16[9] = v110;
          *((_BYTE *)v16 + 80) = v109;
        }
        v114 = (id *)(v17 + 11);
        v115 = *((unsigned __int8 *)v17 + 96);
        if (v115 == 255)
        {
          v16[11] = *v114;
          *((_BYTE *)v16 + 96) = *((_BYTE *)v17 + 96);
        }
        else
        {
          v116 = *v114;
          sub_3D47C(*v114, *((_BYTE *)v17 + 96));
          v16[11] = v116;
          *((_BYTE *)v16 + 96) = v115;
        }
        v120 = (id *)(v17 + 13);
        v121 = *((unsigned __int8 *)v17 + 112);
        if (v121 == 255)
        {
          v16[13] = *v120;
          *((_BYTE *)v16 + 112) = *((_BYTE *)v17 + 112);
        }
        else
        {
          v122 = *v120;
          sub_3D47C(*v120, *((_BYTE *)v17 + 112));
          v16[13] = v122;
          *((_BYTE *)v16 + 112) = v121;
        }
        v126 = (id *)(v17 + 15);
        v127 = *((unsigned __int8 *)v17 + 128);
        if (v127 == 255)
        {
          v16[15] = *v126;
          *((_BYTE *)v16 + 128) = *((_BYTE *)v17 + 128);
        }
        else
        {
          v128 = *v126;
          sub_3D47C(*v126, *((_BYTE *)v17 + 128));
          v16[15] = v128;
          *((_BYTE *)v16 + 128) = v127;
        }
        *((_BYTE *)v16 + 129) = *((_BYTE *)v17 + 129);
        v132 = v18[11];
        v133 = (char *)v16 + v132;
        v134 = (char *)v17 + v132;
        v135 = type metadata accessor for ArtworkCrop(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v135 - 8) + 16))(v133, v134, v135);
        v136 = v18[12];
        v137 = (_QWORD *)((char *)v16 + v136);
        v138 = (_QWORD *)((char *)v17 + v136);
        v139 = v138[1];
        *v137 = *v138;
        v137[1] = v139;
        *((_BYTE *)v16 + v18[13]) = *((_BYTE *)v17 + v18[13]);
        *((_BYTE *)v16 + v18[14]) = *((_BYTE *)v17 + v18[14]);
        *((_BYTE *)v16 + v18[15]) = *((_BYTE *)v17 + v18[15]);
        v140 = v18[16];
        v141 = (_QWORD *)((char *)v16 + v140);
        v142 = (_QWORD *)((char *)v17 + v140);
        v143 = v142[1];
        *v141 = *v142;
        v141[1] = v143;
        v144 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v19 + 56);
        swift_bridgeObjectRetain(v139);
        swift_bridgeObjectRetain(v143);
        v144(v16, 0, 1, v18);
      }
      v8 = a1;
      v9 = a3;
      v10 = 2;
      goto LABEL_131;
    case 3u:
      *a1 = *a2;
      swift_retain();
      v21 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B6F78) + 48);
      v22 = (char *)a1 + v21;
      v23 = (char *)a2 + v21;
      v24 = type metadata accessor for URL(0);
      v25 = *(_QWORD *)(v24 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
      {
        v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
        memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v22, v23, v24);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
      }
      v8 = a1;
      v9 = a3;
      v10 = 3;
      goto LABEL_131;
    case 4u:
      *a1 = *a2;
      swift_retain();
      v27 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B6F78) + 48);
      v28 = (char *)a1 + v27;
      v29 = (char *)a2 + v27;
      v30 = type metadata accessor for URL(0);
      v31 = *(_QWORD *)(v30 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
      {
        v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
        memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v28, v29, v30);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
      }
      v8 = a1;
      v9 = a3;
      v10 = 4;
      goto LABEL_131;
    case 5u:
      *a1 = *a2;
      swift_retain();
      v33 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B6F78) + 48);
      v34 = (char *)a1 + v33;
      v35 = (char *)a2 + v33;
      v36 = type metadata accessor for URL(0);
      v37 = *(_QWORD *)(v36 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36))
      {
        v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
        memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v34, v35, v36);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
      }
      v8 = a1;
      v9 = a3;
      v10 = 5;
      goto LABEL_131;
    case 6u:
      v39 = (void *)*a2;
      *a1 = *a2;
      v40 = v39;
      v8 = a1;
      v9 = a3;
      v10 = 6;
      goto LABEL_131;
    case 7u:
      v41 = a2[1];
      *a1 = *a2;
      a1[1] = v41;
      a1[2] = a2[2];
      *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
      v42 = a2[4];
      v43 = *((_BYTE *)a2 + 40);
      swift_bridgeObjectRetain(v41);
      sub_43568(v42, v43);
      a1[4] = v42;
      *((_BYTE *)a1 + 40) = v43;
      v8 = a1;
      v9 = a3;
      v10 = 7;
      goto LABEL_131;
    case 8u:
      v44 = *a2;
      v45 = a2[1];
      v46 = a2[2];
      v47 = a2[3];
      v274 = a3;
      v48 = a2[4];
      v49 = a2[5];
      v51 = a2[6];
      v50 = a2[7];
      v52 = *((_BYTE *)a2 + 64);
      sub_898F4(v44, v45, v46, v47, v48, v49, v51, v50, v52);
      *a1 = v44;
      a1[1] = v45;
      a1[2] = v46;
      a1[3] = v47;
      a1[4] = v48;
      a1[5] = v49;
      a1[6] = v51;
      a1[7] = v50;
      *((_BYTE *)a1 + 64) = v52;
      v8 = a1;
      v9 = v274;
      v10 = 8;
      goto LABEL_131;
    case 9u:
      v53 = a2[1];
      *a1 = *a2;
      a1[1] = v53;
      v54 = a2[3];
      a1[2] = a2[2];
      a1[3] = v54;
      a1[4] = a2[4];
      *((_BYTE *)a1 + 40) = *((_BYTE *)a2 + 40);
      a1[6] = a2[6];
      *((_BYTE *)a1 + 56) = *((_BYTE *)a2 + 56);
      swift_bridgeObjectRetain(v53);
      swift_bridgeObjectRetain(v54);
      v8 = a1;
      v9 = a3;
      v10 = 9;
      goto LABEL_131;
    case 0xAu:
      *a1 = *a2;
      swift_retain();
      v8 = a1;
      v9 = a3;
      v10 = 10;
      goto LABEL_131;
    case 0xBu:
      v55 = a2[1];
      *a1 = *a2;
      a1[1] = v55;
      swift_bridgeObjectRetain(v55);
      v8 = a1;
      v9 = a3;
      v10 = 11;
      goto LABEL_131;
    case 0xCu:
      v56 = a2[1];
      *a1 = *a2;
      a1[1] = v56;
      swift_bridgeObjectRetain(v56);
      v8 = a1;
      v9 = a3;
      v10 = 12;
      goto LABEL_131;
    case 0xDu:
      *a1 = *a2;
      swift_retain();
      v8 = a1;
      v9 = a3;
      v10 = 13;
      goto LABEL_131;
    case 0xEu:
      v57 = a2[1];
      *a1 = *a2;
      a1[1] = v57;
      swift_bridgeObjectRetain(v57);
      v8 = a1;
      v9 = a3;
      v10 = 14;
      goto LABEL_131;
    case 0xFu:
      v58 = a2[1];
      *a1 = *a2;
      a1[1] = v58;
      v59 = a2[3];
      a1[2] = a2[2];
      a1[3] = v59;
      v60 = a2[5];
      a1[4] = a2[4];
      a1[5] = v60;
      v61 = a2[6];
      v62 = a2[7];
      a1[6] = v61;
      a1[7] = v62;
      swift_bridgeObjectRetain(v58);
      swift_bridgeObjectRetain(v59);
      swift_bridgeObjectRetain(v60);
      swift_bridgeObjectRetain(v62);
      v8 = a1;
      v9 = a3;
      v10 = 15;
      goto LABEL_131;
    case 0x10u:
      *a1 = *a2;
      swift_retain();
      v8 = a1;
      v9 = a3;
      v10 = 16;
      goto LABEL_131;
    case 0x11u:
      v63 = a2[1];
      *a1 = *a2;
      a1[1] = v63;
      swift_bridgeObjectRetain(v63);
      v8 = a1;
      v9 = a3;
      v10 = 17;
      goto LABEL_131;
    case 0x12u:
      v64 = type metadata accessor for URL(0);
      (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v64 - 8) + 16))(a1, a2, v64);
      v8 = a1;
      v9 = a3;
      v10 = 18;
      goto LABEL_131;
    case 0x13u:
      v65 = a2[1];
      *a1 = *a2;
      a1[1] = v65;
      swift_bridgeObjectRetain(v65);
      v8 = a1;
      v9 = a3;
      v10 = 19;
      goto LABEL_131;
    case 0x15u:
      *a1 = *a2;
      swift_retain();
      v8 = a1;
      v9 = a3;
      v10 = 21;
      goto LABEL_131;
    case 0x16u:
      v66 = (void *)*a2;
      *a1 = *a2;
      v67 = v66;
      v8 = a1;
      v9 = a3;
      v10 = 22;
      goto LABEL_131;
    case 0x17u:
      *a1 = *a2;
      swift_retain();
      v8 = a1;
      v9 = a3;
      v10 = 23;
      goto LABEL_131;
    case 0x18u:
      v68 = type metadata accessor for URL(0);
      v69 = *(_QWORD *)(v68 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v69 + 48))(a2, 1, v68))
      {
        v70 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, _QWORD *, uint64_t))(v69 + 16))(a1, a2, v68);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v69 + 56))(a1, 0, 1, v68);
      }
      v8 = a1;
      v9 = a3;
      v10 = 24;
      goto LABEL_131;
    case 0x19u:
      v71 = type metadata accessor for URL(0);
      v72 = *(_QWORD *)(v71 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v72 + 48))(a2, 1, v71))
      {
        v73 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v73 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, _QWORD *, uint64_t))(v72 + 16))(a1, a2, v71);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v72 + 56))(a1, 0, 1, v71);
      }
      v8 = a1;
      v9 = a3;
      v10 = 25;
      goto LABEL_131;
    case 0x1Au:
      *a1 = *a2;
      swift_retain();
      v8 = a1;
      v9 = a3;
      v10 = 26;
      goto LABEL_131;
    case 0x1Bu:
      v74 = (void *)*a2;
      *a1 = *a2;
      v75 = v74;
      v8 = a1;
      v9 = a3;
      v10 = 27;
      goto LABEL_131;
    case 0x1Cu:
      v76 = *a2;
      *a1 = *a2;
      swift_bridgeObjectRetain(v76);
      v8 = a1;
      v9 = a3;
      v10 = 28;
      goto LABEL_131;
    case 0x1Du:
      v77 = type metadata accessor for TranscriptRequestInformation(0);
      (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v77 - 8) + 16))(a1, a2, v77);
      v8 = a1;
      v9 = a3;
      v10 = 29;
      goto LABEL_131;
    case 0x1Eu:
      v275 = a3;
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v78 = a2[2];
      a1[2] = v78;
      v79 = type metadata accessor for EpisodeOffer(0);
      v80 = *(int *)(v79 + 24);
      v81 = (char *)a1 + v80;
      v82 = (char *)a2 + v80;
      *(_OWORD *)v81 = *(_OWORD *)((char *)a2 + v80);
      v83 = *(_QWORD *)((char *)a2 + v80 + 16);
      *((_QWORD *)v81 + 2) = v83;
      v81[24] = *((_BYTE *)a2 + v80 + 24);
      v276 = (int *)type metadata accessor for ShowOffer(0);
      v277 = v81;
      v84 = v276[7];
      v85 = &v81[v84];
      v86 = &v82[v84];
      v273 = (int *)type metadata accessor for ArtworkModel(0);
      v269 = *((_QWORD *)v273 - 1);
      v87 = *(unsigned int (**)(_QWORD *, uint64_t, int *))(v269 + 48);
      swift_bridgeObjectRetain(v78);
      swift_bridgeObjectRetain(v83);
      v271 = v87;
      v272 = (int *)v79;
      if (v87(v86, 1, v273))
      {
        v88 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
        memcpy(v85, v86, *(_QWORD *)(*(_QWORD *)(v88 - 8) + 64));
      }
      else
      {
        v98 = *((_QWORD *)v86 + 1);
        *(_QWORD *)v85 = *(_QWORD *)v86;
        *((_QWORD *)v85 + 1) = v98;
        v99 = v86[32];
        swift_bridgeObjectRetain(v98);
        if (v99 == 255)
        {
          *((_OWORD *)v85 + 1) = *((_OWORD *)v86 + 1);
          v85[32] = v86[32];
        }
        else
        {
          v100 = *((_QWORD *)v86 + 2);
          v101 = *((_QWORD *)v86 + 3);
          sub_3D464(v100, v101, v99);
          *((_QWORD *)v85 + 2) = v100;
          *((_QWORD *)v85 + 3) = v101;
          v85[32] = v99;
        }
        *(_OWORD *)(v85 + 40) = *(_OWORD *)(v86 + 40);
        v105 = (id *)(v86 + 56);
        v106 = v86[64];
        if (v106 == 255)
        {
          *((_QWORD *)v85 + 7) = *v105;
          v85[64] = v86[64];
        }
        else
        {
          v107 = *v105;
          sub_3D47C(*v105, v86[64]);
          *((_QWORD *)v85 + 7) = v107;
          v85[64] = v106;
        }
        v111 = (id *)(v86 + 72);
        v112 = v86[80];
        if (v112 == 255)
        {
          *((_QWORD *)v85 + 9) = *v111;
          v85[80] = v86[80];
        }
        else
        {
          v113 = *v111;
          sub_3D47C(*v111, v86[80]);
          *((_QWORD *)v85 + 9) = v113;
          v85[80] = v112;
        }
        v117 = (id *)(v86 + 88);
        v118 = v86[96];
        if (v118 == 255)
        {
          *((_QWORD *)v85 + 11) = *v117;
          v85[96] = v86[96];
        }
        else
        {
          v119 = *v117;
          sub_3D47C(*v117, v86[96]);
          *((_QWORD *)v85 + 11) = v119;
          v85[96] = v118;
        }
        v123 = (id *)(v86 + 104);
        v124 = v86[112];
        if (v124 == 255)
        {
          *((_QWORD *)v85 + 13) = *v123;
          v85[112] = v86[112];
        }
        else
        {
          v125 = *v123;
          sub_3D47C(*v123, v86[112]);
          *((_QWORD *)v85 + 13) = v125;
          v85[112] = v124;
        }
        v129 = (id *)(v86 + 120);
        v130 = v86[128];
        if (v130 == 255)
        {
          *((_QWORD *)v85 + 15) = *v129;
          v85[128] = v86[128];
        }
        else
        {
          v131 = *v129;
          sub_3D47C(*v129, v86[128]);
          *((_QWORD *)v85 + 15) = v131;
          v85[128] = v130;
        }
        v85[129] = v86[129];
        v145 = v273[11];
        v146 = &v85[v145];
        v147 = &v86[v145];
        v148 = type metadata accessor for ArtworkCrop(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v148 - 8) + 16))(v146, v147, v148);
        v149 = v273[12];
        v150 = &v85[v149];
        v151 = &v86[v149];
        v152 = *((_QWORD *)v151 + 1);
        *(_QWORD *)v150 = *(_QWORD *)v151;
        *((_QWORD *)v150 + 1) = v152;
        v85[v273[13]] = v86[v273[13]];
        v85[v273[14]] = v86[v273[14]];
        v85[v273[15]] = v86[v273[15]];
        v153 = v273[16];
        v154 = &v85[v153];
        v155 = &v86[v153];
        v156 = *((_QWORD *)v155 + 1);
        *(_QWORD *)v154 = *(_QWORD *)v155;
        *((_QWORD *)v154 + 1) = v156;
        v157 = *(void (**)(char *, _QWORD, uint64_t, int *))(v269 + 56);
        swift_bridgeObjectRetain(v152);
        swift_bridgeObjectRetain(v156);
        v157(v85, 0, 1, v273);
      }
      v158 = v276[8];
      v159 = &v81[v158];
      v160 = &v82[v158];
      v161 = *((_QWORD *)v160 + 1);
      *(_QWORD *)v159 = *(_QWORD *)v160;
      *((_QWORD *)v159 + 1) = v161;
      v162 = v276[9];
      v163 = &v81[v162];
      v164 = &v82[v162];
      v165 = *((_QWORD *)v164 + 1);
      *(_QWORD *)v163 = *(_QWORD *)v164;
      *((_QWORD *)v163 + 1) = v165;
      v81[v276[10]] = v82[v276[10]];
      v166 = v276[11];
      v167 = &v81[v166];
      v168 = &v82[v166];
      v169 = *((_QWORD *)v168 + 1);
      *(_QWORD *)v167 = *(_QWORD *)v168;
      *((_QWORD *)v167 + 1) = v169;
      v170 = v276[12];
      v171 = &v277[v170];
      v172 = &v82[v170];
      v173 = *((_QWORD *)v172 + 1);
      *(_QWORD *)v171 = *(_QWORD *)v172;
      *((_QWORD *)v171 + 1) = v173;
      v174 = v276[13];
      __dst = &v277[v174];
      v175 = &v82[v174];
      v176 = type metadata accessor for URL(0);
      v177 = *(_QWORD *)(v176 - 8);
      v178 = v161;
      v179 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v177 + 48);
      swift_bridgeObjectRetain(v178);
      swift_bridgeObjectRetain(v165);
      swift_bridgeObjectRetain(v169);
      swift_bridgeObjectRetain(v173);
      v180 = v179;
      if (v179(v175, 1, v176))
      {
        v181 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
        memcpy(__dst, v175, *(_QWORD *)(*(_QWORD *)(v181 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v177 + 16))(__dst, v175, v176);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v177 + 56))(__dst, 0, 1, v176);
      }
      v182 = v177;
      v183 = v276[14];
      v184 = &v277[v183];
      v185 = &v82[v183];
      v186 = *((_QWORD *)v185 + 1);
      *(_QWORD *)v184 = *(_QWORD *)v185;
      *((_QWORD *)v184 + 1) = v186;
      v187 = v276[15];
      v188 = &v277[v187];
      v189 = &v82[v187];
      v190 = *((_QWORD *)v189 + 1);
      *(_QWORD *)v188 = *(_QWORD *)v189;
      *((_QWORD *)v188 + 1) = v190;
      v191 = v276[16];
      v192 = &v277[v191];
      v193 = &v82[v191];
      swift_bridgeObjectRetain(v186);
      swift_bridgeObjectRetain(v190);
      if (v180(v193, 1, v176))
      {
        v194 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
        memcpy(v192, v193, *(_QWORD *)(*(_QWORD *)(v194 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v182 + 16))(v192, v193, v176);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v182 + 56))(v192, 0, 1, v176);
      }
      v195 = v276[17];
      v196 = &v277[v195];
      v197 = &v82[v195];
      if (v180(&v82[v195], 1, v176))
      {
        v198 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
        memcpy(v196, v197, *(_QWORD *)(*(_QWORD *)(v198 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v182 + 16))(v196, v197, v176);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v182 + 56))(v196, 0, 1, v176);
      }
      v277[v276[18]] = v82[v276[18]];
      v199 = v272[7];
      v200 = (char *)a1 + v199;
      v201 = (char *)a2 + v199;
      if (v180((char *)a2 + v199, 1, v176))
      {
        v202 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
        memcpy(v200, v201, *(_QWORD *)(*(_QWORD *)(v202 - 8) + 64));
        (*(void (**)(char *, char *, uint64_t))(v182 + 16))((char *)a1 + v272[8], (char *)a2 + v272[8], v176);
      }
      else
      {
        v203 = *(void (**)(char *, char *, uint64_t))(v182 + 16);
        v203(v200, v201, v176);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v182 + 56))(v200, 0, 1, v176);
        v203((char *)a1 + v272[8], (char *)a2 + v272[8], v176);
      }
      *(uint64_t *)((char *)a1 + v272[9]) = *(_QWORD *)((char *)a2 + v272[9]);
      v204 = v272[10];
      v205 = (uint64_t *)((char *)a1 + v204);
      v206 = (_QWORD *)((char *)a2 + v204);
      v207 = v206[1];
      *v205 = *v206;
      v205[1] = v207;
      v208 = v272[11];
      v209 = (uint64_t *)((char *)a1 + v208);
      v210 = (_QWORD *)((char *)a2 + v208);
      v211 = v210[1];
      *v209 = *v210;
      v209[1] = v211;
      *(uint64_t *)((char *)a1 + v272[12]) = *(_QWORD *)((char *)a2 + v272[12]);
      *((_BYTE *)a1 + v272[13]) = *((_BYTE *)a2 + v272[13]);
      *((_BYTE *)a1 + v272[14]) = *((_BYTE *)a2 + v272[14]);
      v212 = v272[15];
      v213 = (char *)a1 + v212;
      v214 = (char *)a2 + v212;
      *(_QWORD *)v213 = *(_QWORD *)v214;
      v213[8] = v214[8];
      v215 = v272[16];
      v216 = (uint64_t *)((char *)a1 + v215);
      v217 = (_QWORD *)((char *)a2 + v215);
      swift_bridgeObjectRetain(v207);
      swift_bridgeObjectRetain(v211);
      swift_retain();
      if (v271(v217, 1, v273))
      {
        v218 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
        memcpy(v216, v217, *(_QWORD *)(*(_QWORD *)(v218 - 8) + 64));
      }
      else
      {
        v219 = v217[1];
        *v216 = *v217;
        v216[1] = v219;
        v220 = *((unsigned __int8 *)v217 + 32);
        swift_bridgeObjectRetain(v219);
        if (v220 == 255)
        {
          *((_OWORD *)v216 + 1) = *((_OWORD *)v217 + 1);
          *((_BYTE *)v216 + 32) = *((_BYTE *)v217 + 32);
        }
        else
        {
          v221 = v217[2];
          v222 = v217[3];
          sub_3D464(v221, v222, v220);
          v216[2] = v221;
          v216[3] = v222;
          *((_BYTE *)v216 + 32) = v220;
        }
        *(_OWORD *)(v216 + 5) = *(_OWORD *)(v217 + 5);
        v223 = (id *)(v217 + 7);
        v224 = *((unsigned __int8 *)v217 + 64);
        if (v224 == 255)
        {
          v216[7] = *v223;
          *((_BYTE *)v216 + 64) = *((_BYTE *)v217 + 64);
        }
        else
        {
          v225 = *v223;
          sub_3D47C(*v223, *((_BYTE *)v217 + 64));
          v216[7] = v225;
          *((_BYTE *)v216 + 64) = v224;
        }
        v226 = (id *)(v217 + 9);
        v227 = *((unsigned __int8 *)v217 + 80);
        if (v227 == 255)
        {
          v216[9] = *v226;
          *((_BYTE *)v216 + 80) = *((_BYTE *)v217 + 80);
        }
        else
        {
          v228 = *v226;
          sub_3D47C(*v226, *((_BYTE *)v217 + 80));
          v216[9] = v228;
          *((_BYTE *)v216 + 80) = v227;
        }
        v229 = (id *)(v217 + 11);
        v230 = *((unsigned __int8 *)v217 + 96);
        if (v230 == 255)
        {
          v216[11] = *v229;
          *((_BYTE *)v216 + 96) = *((_BYTE *)v217 + 96);
        }
        else
        {
          v231 = *v229;
          sub_3D47C(*v229, *((_BYTE *)v217 + 96));
          v216[11] = v231;
          *((_BYTE *)v216 + 96) = v230;
        }
        v232 = (id *)(v217 + 13);
        v233 = *((unsigned __int8 *)v217 + 112);
        if (v233 == 255)
        {
          v216[13] = *v232;
          *((_BYTE *)v216 + 112) = *((_BYTE *)v217 + 112);
        }
        else
        {
          v234 = *v232;
          sub_3D47C(*v232, *((_BYTE *)v217 + 112));
          v216[13] = v234;
          *((_BYTE *)v216 + 112) = v233;
        }
        v235 = (id *)(v217 + 15);
        v236 = *((unsigned __int8 *)v217 + 128);
        if (v236 == 255)
        {
          v216[15] = *v235;
          *((_BYTE *)v216 + 128) = *((_BYTE *)v217 + 128);
        }
        else
        {
          v237 = *v235;
          sub_3D47C(*v235, *((_BYTE *)v217 + 128));
          v216[15] = v237;
          *((_BYTE *)v216 + 128) = v236;
        }
        *((_BYTE *)v216 + 129) = *((_BYTE *)v217 + 129);
        v238 = v273[11];
        v239 = (char *)v216 + v238;
        v240 = (char *)v217 + v238;
        v241 = type metadata accessor for ArtworkCrop(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v241 - 8) + 16))(v239, v240, v241);
        v242 = v273[12];
        v243 = (_QWORD *)((char *)v216 + v242);
        v244 = (_QWORD *)((char *)v217 + v242);
        v245 = v244[1];
        *v243 = *v244;
        v243[1] = v245;
        *((_BYTE *)v216 + v273[13]) = *((_BYTE *)v217 + v273[13]);
        *((_BYTE *)v216 + v273[14]) = *((_BYTE *)v217 + v273[14]);
        *((_BYTE *)v216 + v273[15]) = *((_BYTE *)v217 + v273[15]);
        v246 = v273[16];
        v247 = (_QWORD *)((char *)v216 + v246);
        v248 = (_QWORD *)((char *)v217 + v246);
        v249 = v248[1];
        *v247 = *v248;
        v247[1] = v249;
        v250 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v269 + 56);
        swift_bridgeObjectRetain(v245);
        swift_bridgeObjectRetain(v249);
        v250(v216, 0, 1, v273);
      }
      v251 = v272[17];
      v252 = (uint64_t *)((char *)a1 + v251);
      v253 = (_QWORD *)((char *)a2 + v251);
      v254 = v253[1];
      *v252 = *v253;
      v252[1] = v254;
      v255 = v272[18];
      v256 = (char *)a1 + v255;
      v257 = (char *)a2 + v255;
      v256[8] = v257[8];
      *(_QWORD *)v256 = *(_QWORD *)v257;
      v258 = v272[19];
      v259 = (char *)a1 + v258;
      v260 = (char *)a2 + v258;
      *(_QWORD *)v259 = *(_QWORD *)v260;
      v259[8] = v260[8];
      *((_BYTE *)a1 + v272[20]) = *((_BYTE *)a2 + v272[20]);
      *((_BYTE *)a1 + v272[21]) = *((_BYTE *)a2 + v272[21]);
      v261 = v272[22];
      v262 = (char *)a1 + v261;
      v263 = (char *)a2 + v261;
      v264 = type metadata accessor for TranscriptRequestInformation(0);
      v265 = *(_QWORD *)(v264 - 8);
      v266 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v265 + 48);
      swift_bridgeObjectRetain(v254);
      if (v266(v263, 1, v264))
      {
        v267 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2C40);
        memcpy(v262, v263, *(_QWORD *)(*(_QWORD *)(v267 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v265 + 16))(v262, v263, v264);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v265 + 56))(v262, 0, 1, v264);
      }
      v8 = a1;
      v9 = v275;
      v10 = 30;
      goto LABEL_131;
    case 0x1Fu:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v89 = a2[2];
      a1[2] = v89;
      swift_bridgeObjectRetain(v89);
      v8 = a1;
      v9 = a3;
      v10 = 31;
      goto LABEL_131;
    case 0x20u:
      *a1 = *a2;
      v90 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B6FA0) + 48);
      v91 = (char *)a1 + v90;
      v92 = (char *)a2 + v90;
      v93 = type metadata accessor for URL(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v93 - 8) + 16))(v91, v92, v93);
      v8 = a1;
      v9 = a3;
      v10 = 32;
LABEL_131:
      swift_storeEnumTagMultiPayload(v8, v9, v10);
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

uint64_t *assignWithCopy for FlowDestination(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  unsigned int (*v90)(_QWORD *, uint64_t, int *);
  uint64_t v91;
  _BYTE *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  __int128 v106;
  id *v107;
  int v108;
  id v109;
  id v110;
  id *v111;
  int v112;
  id v113;
  id v114;
  id *v115;
  int v116;
  id v117;
  id v118;
  id *v119;
  int v120;
  id v121;
  id v122;
  id *v123;
  int v124;
  id v125;
  id v126;
  uint64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  _QWORD *v136;
  _QWORD *v137;
  uint64_t v138;
  void (*v139)(_QWORD *, _QWORD, uint64_t, int *);
  __int128 v140;
  id *v141;
  int v142;
  id v143;
  id v144;
  id *v145;
  int v146;
  id v147;
  id v148;
  id *v149;
  int v150;
  id v151;
  id v152;
  id *v153;
  int v154;
  id v155;
  id v156;
  id *v157;
  int v158;
  id v159;
  id v160;
  int *v161;
  uint64_t v162;
  char *v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  char *v172;
  uint64_t v173;
  void (*v174)(char *, _QWORD, uint64_t, int *);
  uint64_t v175;
  char *v176;
  _QWORD *v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  _QWORD *v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  _QWORD *v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  _QWORD *v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unsigned int (*v196)(char *, uint64_t, uint64_t);
  unsigned int (*v197)(char *, uint64_t, uint64_t);
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  _QWORD *v202;
  uint64_t v203;
  uint64_t v204;
  char *v205;
  _QWORD *v206;
  uint64_t v207;
  uint64_t v208;
  char *v209;
  char *v210;
  uint64_t v211;
  uint64_t v212;
  char *v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  char *v217;
  char *v218;
  uint64_t v219;
  void (*v220)(char *, char *, uint64_t);
  uint64_t v221;
  _QWORD *v222;
  _QWORD *v223;
  uint64_t v224;
  uint64_t v225;
  _QWORD *v226;
  _QWORD *v227;
  uint64_t v228;
  uint64_t v229;
  char *v230;
  char *v231;
  char v232;
  uint64_t v233;
  _QWORD *v234;
  _QWORD *v235;
  uint64_t v236;
  uint64_t v237;
  int v238;
  uint64_t v239;
  uint64_t v240;
  __int128 v241;
  id *v242;
  int v243;
  id v244;
  id v245;
  id *v246;
  int v247;
  id v248;
  id v249;
  id *v250;
  int v251;
  id v252;
  id v253;
  id *v254;
  int v255;
  id v256;
  id v257;
  id *v258;
  int v259;
  id v260;
  id v261;
  uint64_t v262;
  char *v263;
  char *v264;
  uint64_t v265;
  uint64_t v266;
  _QWORD *v267;
  _QWORD *v268;
  uint64_t v269;
  uint64_t v270;
  _QWORD *v271;
  _QWORD *v272;
  uint64_t v273;
  void (*v274)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v275;
  _QWORD *v276;
  _QWORD *v277;
  uint64_t v278;
  uint64_t v279;
  char *v280;
  char *v281;
  uint64_t v282;
  uint64_t v283;
  char *v284;
  char *v285;
  uint64_t v286;
  uint64_t v287;
  char *v288;
  char *v289;
  uint64_t v290;
  uint64_t v291;
  unsigned int (*v292)(char *, uint64_t, uint64_t);
  uint64_t v293;
  uint64_t v295;
  _BYTE *__dst;
  char *__dsta;
  unsigned int (*v298)(_QWORD *, uint64_t, int *);
  int *v299;
  int *v300;
  uint64_t v301;
  uint64_t v302;
  int *v303;
  char *v304;

  if (a1 != a2)
  {
    sub_B5EB4((uint64_t)a1);
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        v6 = type metadata accessor for URL(0);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
        v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B6F98);
        *((_BYTE *)a1 + *(int *)(v7 + 48)) = *((_BYTE *)a2 + *(int *)(v7 + 48));
        v8 = a1;
        v9 = a3;
        v10 = 0;
        goto LABEL_132;
      case 1u:
        v11 = type metadata accessor for URL(0);
        v12 = *(_QWORD *)(v11 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v12 + 48))(a2, 1, v11))
        {
          v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v12 + 16))(a1, a2, v11);
          (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v12 + 56))(a1, 0, 1, v11);
        }
        v8 = a1;
        v9 = a3;
        v10 = 1;
        goto LABEL_132;
      case 2u:
        v14 = type metadata accessor for URL(0);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(a1, a2, v14);
        v15 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B6F80) + 48);
        v16 = (uint64_t *)((char *)a1 + v15);
        v17 = (uint64_t *)((char *)a2 + v15);
        v18 = (int *)type metadata accessor for ArtworkModel(0);
        v19 = *((_QWORD *)v18 - 1);
        if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v19 + 48))(v17, 1, v18))
        {
          v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
          memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
        }
        else
        {
          *v16 = *v17;
          v98 = v17[1];
          v16[1] = v98;
          v99 = *((unsigned __int8 *)v17 + 32);
          swift_bridgeObjectRetain(v98);
          if (v99 == 255)
          {
            v106 = *((_OWORD *)v17 + 1);
            *((_BYTE *)v16 + 32) = *((_BYTE *)v17 + 32);
            *((_OWORD *)v16 + 1) = v106;
          }
          else
          {
            v100 = v17[2];
            v101 = v17[3];
            sub_3D464(v100, v101, v99);
            v16[2] = v100;
            v16[3] = v101;
            *((_BYTE *)v16 + 32) = v99;
          }
          v16[5] = v17[5];
          v16[6] = v17[6];
          v107 = (id *)(v17 + 7);
          v108 = *((unsigned __int8 *)v17 + 64);
          if (v108 == 255)
          {
            v110 = *v107;
            *((_BYTE *)v16 + 64) = *((_BYTE *)v17 + 64);
            v16[7] = v110;
          }
          else
          {
            v109 = *v107;
            sub_3D47C(*v107, *((_BYTE *)v17 + 64));
            v16[7] = v109;
            *((_BYTE *)v16 + 64) = v108;
          }
          v111 = (id *)(v17 + 9);
          v112 = *((unsigned __int8 *)v17 + 80);
          if (v112 == 255)
          {
            v114 = *v111;
            *((_BYTE *)v16 + 80) = *((_BYTE *)v17 + 80);
            v16[9] = v114;
          }
          else
          {
            v113 = *v111;
            sub_3D47C(*v111, *((_BYTE *)v17 + 80));
            v16[9] = v113;
            *((_BYTE *)v16 + 80) = v112;
          }
          v115 = (id *)(v17 + 11);
          v116 = *((unsigned __int8 *)v17 + 96);
          if (v116 == 255)
          {
            v118 = *v115;
            *((_BYTE *)v16 + 96) = *((_BYTE *)v17 + 96);
            v16[11] = v118;
          }
          else
          {
            v117 = *v115;
            sub_3D47C(*v115, *((_BYTE *)v17 + 96));
            v16[11] = v117;
            *((_BYTE *)v16 + 96) = v116;
          }
          v119 = (id *)(v17 + 13);
          v120 = *((unsigned __int8 *)v17 + 112);
          if (v120 == 255)
          {
            v122 = *v119;
            *((_BYTE *)v16 + 112) = *((_BYTE *)v17 + 112);
            v16[13] = v122;
          }
          else
          {
            v121 = *v119;
            sub_3D47C(*v119, *((_BYTE *)v17 + 112));
            v16[13] = v121;
            *((_BYTE *)v16 + 112) = v120;
          }
          v123 = (id *)(v17 + 15);
          v124 = *((unsigned __int8 *)v17 + 128);
          if (v124 == 255)
          {
            v126 = *v123;
            *((_BYTE *)v16 + 128) = *((_BYTE *)v17 + 128);
            v16[15] = v126;
          }
          else
          {
            v125 = *v123;
            sub_3D47C(*v123, *((_BYTE *)v17 + 128));
            v16[15] = v125;
            *((_BYTE *)v16 + 128) = v124;
          }
          *((_BYTE *)v16 + 129) = *((_BYTE *)v17 + 129);
          v127 = v18[11];
          v128 = (char *)v16 + v127;
          v129 = (char *)v17 + v127;
          v130 = type metadata accessor for ArtworkCrop(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v130 - 8) + 16))(v128, v129, v130);
          v131 = v18[12];
          v132 = (_QWORD *)((char *)v16 + v131);
          v133 = (_QWORD *)((char *)v17 + v131);
          *v132 = *v133;
          v134 = v133[1];
          v132[1] = v134;
          *((_BYTE *)v16 + v18[13]) = *((_BYTE *)v17 + v18[13]);
          *((_BYTE *)v16 + v18[14]) = *((_BYTE *)v17 + v18[14]);
          *((_BYTE *)v16 + v18[15]) = *((_BYTE *)v17 + v18[15]);
          v135 = v18[16];
          v136 = (_QWORD *)((char *)v16 + v135);
          v137 = (_QWORD *)((char *)v17 + v135);
          *v136 = *v137;
          v138 = v137[1];
          v136[1] = v138;
          v139 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v19 + 56);
          swift_bridgeObjectRetain(v134);
          swift_bridgeObjectRetain(v138);
          v139(v16, 0, 1, v18);
        }
        v8 = a1;
        v9 = a3;
        v10 = 2;
        goto LABEL_132;
      case 3u:
        *a1 = *a2;
        swift_retain();
        v21 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B6F78) + 48);
        v22 = (char *)a1 + v21;
        v23 = (char *)a2 + v21;
        v24 = type metadata accessor for URL(0);
        v25 = *(_QWORD *)(v24 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
        {
          v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
          memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v22, v23, v24);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
        }
        v8 = a1;
        v9 = a3;
        v10 = 3;
        goto LABEL_132;
      case 4u:
        *a1 = *a2;
        swift_retain();
        v27 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B6F78) + 48);
        v28 = (char *)a1 + v27;
        v29 = (char *)a2 + v27;
        v30 = type metadata accessor for URL(0);
        v31 = *(_QWORD *)(v30 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
        {
          v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
          memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v28, v29, v30);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
        }
        v8 = a1;
        v9 = a3;
        v10 = 4;
        goto LABEL_132;
      case 5u:
        *a1 = *a2;
        swift_retain();
        v33 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B6F78) + 48);
        v34 = (char *)a1 + v33;
        v35 = (char *)a2 + v33;
        v36 = type metadata accessor for URL(0);
        v37 = *(_QWORD *)(v36 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36))
        {
          v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
          memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v34, v35, v36);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
        }
        v8 = a1;
        v9 = a3;
        v10 = 5;
        goto LABEL_132;
      case 6u:
        v39 = (void *)*a2;
        *a1 = *a2;
        v40 = v39;
        v8 = a1;
        v9 = a3;
        v10 = 6;
        goto LABEL_132;
      case 7u:
        *a1 = *a2;
        v41 = a2[1];
        a1[1] = v41;
        v42 = a2[2];
        *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
        a1[2] = v42;
        v43 = a2[4];
        v44 = *((_BYTE *)a2 + 40);
        swift_bridgeObjectRetain(v41);
        sub_43568(v43, v44);
        a1[4] = v43;
        *((_BYTE *)a1 + 40) = v44;
        v8 = a1;
        v9 = a3;
        v10 = 7;
        goto LABEL_132;
      case 8u:
        v45 = *a2;
        v46 = a2[1];
        v47 = a2[2];
        v48 = a2[3];
        v49 = a2[4];
        v50 = a2[5];
        v301 = a3;
        v52 = a2[6];
        v51 = a2[7];
        v53 = *((_BYTE *)a2 + 64);
        sub_898F4(v45, v46, v47, v48, v49, v50, v52, v51, v53);
        *a1 = v45;
        a1[1] = v46;
        a1[2] = v47;
        a1[3] = v48;
        a1[4] = v49;
        a1[5] = v50;
        a1[6] = v52;
        a1[7] = v51;
        *((_BYTE *)a1 + 64) = v53;
        v8 = a1;
        v9 = v301;
        v10 = 8;
        goto LABEL_132;
      case 9u:
        *a1 = *a2;
        v54 = a2[1];
        a1[1] = v54;
        a1[2] = a2[2];
        v55 = a2[3];
        a1[3] = v55;
        v56 = a2[4];
        *((_BYTE *)a1 + 40) = *((_BYTE *)a2 + 40);
        a1[4] = v56;
        v57 = a2[6];
        *((_BYTE *)a1 + 56) = *((_BYTE *)a2 + 56);
        a1[6] = v57;
        swift_bridgeObjectRetain(v54);
        swift_bridgeObjectRetain(v55);
        v8 = a1;
        v9 = a3;
        v10 = 9;
        goto LABEL_132;
      case 0xAu:
        *a1 = *a2;
        swift_retain();
        v8 = a1;
        v9 = a3;
        v10 = 10;
        goto LABEL_132;
      case 0xBu:
        *a1 = *a2;
        v58 = a2[1];
        a1[1] = v58;
        swift_bridgeObjectRetain(v58);
        v8 = a1;
        v9 = a3;
        v10 = 11;
        goto LABEL_132;
      case 0xCu:
        *a1 = *a2;
        v59 = a2[1];
        a1[1] = v59;
        swift_bridgeObjectRetain(v59);
        v8 = a1;
        v9 = a3;
        v10 = 12;
        goto LABEL_132;
      case 0xDu:
        *a1 = *a2;
        swift_retain();
        v8 = a1;
        v9 = a3;
        v10 = 13;
        goto LABEL_132;
      case 0xEu:
        *a1 = *a2;
        v60 = a2[1];
        a1[1] = v60;
        swift_bridgeObjectRetain(v60);
        v8 = a1;
        v9 = a3;
        v10 = 14;
        goto LABEL_132;
      case 0xFu:
        *a1 = *a2;
        v61 = a2[1];
        a1[1] = v61;
        a1[2] = a2[2];
        v62 = a2[3];
        a1[3] = v62;
        a1[4] = a2[4];
        v63 = a2[5];
        a1[5] = v63;
        a1[6] = a2[6];
        v64 = a2[7];
        a1[7] = v64;
        swift_bridgeObjectRetain(v61);
        swift_bridgeObjectRetain(v62);
        swift_bridgeObjectRetain(v63);
        swift_bridgeObjectRetain(v64);
        v8 = a1;
        v9 = a3;
        v10 = 15;
        goto LABEL_132;
      case 0x10u:
        *a1 = *a2;
        swift_retain();
        v8 = a1;
        v9 = a3;
        v10 = 16;
        goto LABEL_132;
      case 0x11u:
        *a1 = *a2;
        v65 = a2[1];
        a1[1] = v65;
        swift_bridgeObjectRetain(v65);
        v8 = a1;
        v9 = a3;
        v10 = 17;
        goto LABEL_132;
      case 0x12u:
        v66 = type metadata accessor for URL(0);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v66 - 8) + 16))(a1, a2, v66);
        v8 = a1;
        v9 = a3;
        v10 = 18;
        goto LABEL_132;
      case 0x13u:
        *a1 = *a2;
        v67 = a2[1];
        a1[1] = v67;
        swift_bridgeObjectRetain(v67);
        v8 = a1;
        v9 = a3;
        v10 = 19;
        goto LABEL_132;
      case 0x15u:
        *a1 = *a2;
        swift_retain();
        v8 = a1;
        v9 = a3;
        v10 = 21;
        goto LABEL_132;
      case 0x16u:
        v68 = (void *)*a2;
        *a1 = *a2;
        v69 = v68;
        v8 = a1;
        v9 = a3;
        v10 = 22;
        goto LABEL_132;
      case 0x17u:
        *a1 = *a2;
        swift_retain();
        v8 = a1;
        v9 = a3;
        v10 = 23;
        goto LABEL_132;
      case 0x18u:
        v70 = type metadata accessor for URL(0);
        v71 = *(_QWORD *)(v70 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v71 + 48))(a2, 1, v70))
        {
          v72 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v71 + 16))(a1, a2, v70);
          (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v71 + 56))(a1, 0, 1, v70);
        }
        v8 = a1;
        v9 = a3;
        v10 = 24;
        goto LABEL_132;
      case 0x19u:
        v73 = type metadata accessor for URL(0);
        v74 = *(_QWORD *)(v73 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v74 + 48))(a2, 1, v73))
        {
          v75 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v74 + 16))(a1, a2, v73);
          (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v74 + 56))(a1, 0, 1, v73);
        }
        v8 = a1;
        v9 = a3;
        v10 = 25;
        goto LABEL_132;
      case 0x1Au:
        *a1 = *a2;
        swift_retain();
        v8 = a1;
        v9 = a3;
        v10 = 26;
        goto LABEL_132;
      case 0x1Bu:
        v76 = (void *)*a2;
        *a1 = *a2;
        v77 = v76;
        v8 = a1;
        v9 = a3;
        v10 = 27;
        goto LABEL_132;
      case 0x1Cu:
        v78 = *a2;
        *a1 = *a2;
        swift_bridgeObjectRetain(v78);
        v8 = a1;
        v9 = a3;
        v10 = 28;
        goto LABEL_132;
      case 0x1Du:
        v79 = type metadata accessor for TranscriptRequestInformation(0);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v79 - 8) + 16))(a1, a2, v79);
        v8 = a1;
        v9 = a3;
        v10 = 29;
        goto LABEL_132;
      case 0x1Eu:
        *a1 = *a2;
        a1[1] = a2[1];
        v80 = a2[2];
        a1[2] = v80;
        v81 = type metadata accessor for EpisodeOffer(0);
        v82 = *(int *)(v81 + 24);
        v83 = (char *)a1 + v82;
        v84 = (char *)a2 + v82;
        *(_QWORD *)v83 = *(uint64_t *)((char *)a2 + v82);
        *((_QWORD *)v83 + 1) = *(uint64_t *)((char *)a2 + v82 + 8);
        v85 = *(uint64_t *)((char *)a2 + v82 + 16);
        *((_QWORD *)v83 + 2) = v85;
        v83[24] = *((_BYTE *)a2 + v82 + 24);
        v303 = (int *)type metadata accessor for ShowOffer(0);
        v304 = v83;
        v86 = v303[7];
        v87 = &v83[v86];
        __dst = v84;
        v88 = &v84[v86];
        v89 = type metadata accessor for ArtworkModel(0);
        v295 = *(_QWORD *)(v89 - 8);
        v90 = *(unsigned int (**)(_QWORD *, uint64_t, int *))(v295 + 48);
        swift_bridgeObjectRetain(v80);
        swift_bridgeObjectRetain(v85);
        v298 = v90;
        v300 = (int *)v89;
        v302 = a3;
        v299 = (int *)v81;
        if (v90(v88, 1, (int *)v89))
        {
          v91 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
          memcpy(v87, v88, *(_QWORD *)(*(_QWORD *)(v91 - 8) + 64));
          v92 = __dst;
        }
        else
        {
          *(_QWORD *)v87 = *(_QWORD *)v88;
          v102 = *((_QWORD *)v88 + 1);
          *((_QWORD *)v87 + 1) = v102;
          v103 = v88[32];
          swift_bridgeObjectRetain(v102);
          if (v103 == 255)
          {
            v140 = *((_OWORD *)v88 + 1);
            v87[32] = v88[32];
            *((_OWORD *)v87 + 1) = v140;
          }
          else
          {
            v104 = *((_QWORD *)v88 + 2);
            v105 = *((_QWORD *)v88 + 3);
            sub_3D464(v104, v105, v103);
            *((_QWORD *)v87 + 2) = v104;
            *((_QWORD *)v87 + 3) = v105;
            v87[32] = v103;
          }
          *((_QWORD *)v87 + 5) = *((_QWORD *)v88 + 5);
          *((_QWORD *)v87 + 6) = *((_QWORD *)v88 + 6);
          v141 = (id *)(v88 + 56);
          v142 = v88[64];
          if (v142 == 255)
          {
            v144 = *v141;
            v87[64] = v88[64];
            *((_QWORD *)v87 + 7) = v144;
          }
          else
          {
            v143 = *v141;
            sub_3D47C(*v141, v88[64]);
            *((_QWORD *)v87 + 7) = v143;
            v87[64] = v142;
          }
          v145 = (id *)(v88 + 72);
          v146 = v88[80];
          if (v146 == 255)
          {
            v148 = *v145;
            v87[80] = v88[80];
            *((_QWORD *)v87 + 9) = v148;
          }
          else
          {
            v147 = *v145;
            sub_3D47C(*v145, v88[80]);
            *((_QWORD *)v87 + 9) = v147;
            v87[80] = v146;
          }
          v149 = (id *)(v88 + 88);
          v150 = v88[96];
          if (v150 == 255)
          {
            v152 = *v149;
            v87[96] = v88[96];
            *((_QWORD *)v87 + 11) = v152;
          }
          else
          {
            v151 = *v149;
            sub_3D47C(*v149, v88[96]);
            *((_QWORD *)v87 + 11) = v151;
            v87[96] = v150;
          }
          v153 = (id *)(v88 + 104);
          v154 = v88[112];
          if (v154 == 255)
          {
            v156 = *v153;
            v87[112] = v88[112];
            *((_QWORD *)v87 + 13) = v156;
          }
          else
          {
            v155 = *v153;
            sub_3D47C(*v153, v88[112]);
            *((_QWORD *)v87 + 13) = v155;
            v87[112] = v154;
          }
          v157 = (id *)(v88 + 120);
          v158 = v88[128];
          if (v158 == 255)
          {
            v160 = *v157;
            v87[128] = v88[128];
            *((_QWORD *)v87 + 15) = v160;
          }
          else
          {
            v159 = *v157;
            sub_3D47C(*v157, v88[128]);
            *((_QWORD *)v87 + 15) = v159;
            v87[128] = v158;
          }
          v161 = (int *)v89;
          v92 = __dst;
          v87[129] = v88[129];
          v162 = v161[11];
          v163 = &v87[v162];
          v164 = &v88[v162];
          v165 = type metadata accessor for ArtworkCrop(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v165 - 8) + 16))(v163, v164, v165);
          v166 = v161[12];
          v167 = &v87[v166];
          v168 = &v88[v166];
          *(_QWORD *)v167 = *(_QWORD *)v168;
          v169 = *((_QWORD *)v168 + 1);
          *((_QWORD *)v167 + 1) = v169;
          v87[v161[13]] = v88[v161[13]];
          v87[v161[14]] = v88[v161[14]];
          v87[v161[15]] = v88[v161[15]];
          v170 = v161[16];
          v171 = &v87[v170];
          v172 = &v88[v170];
          *(_QWORD *)v171 = *(_QWORD *)v172;
          v173 = *((_QWORD *)v172 + 1);
          *((_QWORD *)v171 + 1) = v173;
          v174 = *(void (**)(char *, _QWORD, uint64_t, int *))(v295 + 56);
          swift_bridgeObjectRetain(v169);
          swift_bridgeObjectRetain(v173);
          v174(v87, 0, 1, v161);
        }
        v175 = v303[8];
        v176 = &v304[v175];
        v177 = &v92[v175];
        *(_QWORD *)v176 = *v177;
        v178 = v177[1];
        *((_QWORD *)v176 + 1) = v178;
        v179 = v303[9];
        v180 = &v304[v179];
        v181 = &v92[v179];
        *(_QWORD *)v180 = *v181;
        v182 = v181[1];
        *((_QWORD *)v180 + 1) = v182;
        v304[v303[10]] = v92[v303[10]];
        v183 = v303[11];
        v184 = &v304[v183];
        v185 = &v92[v183];
        *(_QWORD *)v184 = *v185;
        v186 = v185[1];
        *((_QWORD *)v184 + 1) = v186;
        v187 = v303[12];
        v188 = &v304[v187];
        v189 = &v92[v187];
        *(_QWORD *)v188 = *v189;
        v190 = v189[1];
        *((_QWORD *)v188 + 1) = v190;
        v191 = v303[13];
        __dsta = &v304[v191];
        v192 = &v92[v191];
        v193 = type metadata accessor for URL(0);
        v194 = *(_QWORD *)(v193 - 8);
        v195 = v178;
        v196 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v194 + 48);
        swift_bridgeObjectRetain(v195);
        swift_bridgeObjectRetain(v182);
        swift_bridgeObjectRetain(v186);
        swift_bridgeObjectRetain(v190);
        v197 = v196;
        if (v196(v192, 1, v193))
        {
          v198 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
          memcpy(__dsta, v192, *(_QWORD *)(*(_QWORD *)(v198 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v194 + 16))(__dsta, v192, v193);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v194 + 56))(__dsta, 0, 1, v193);
        }
        v199 = v194;
        v200 = v303[14];
        v201 = &v304[v200];
        v202 = &v92[v200];
        *(_QWORD *)v201 = *v202;
        v203 = v202[1];
        *((_QWORD *)v201 + 1) = v203;
        v204 = v303[15];
        v205 = &v304[v204];
        v206 = &v92[v204];
        *(_QWORD *)v205 = *v206;
        v207 = v206[1];
        *((_QWORD *)v205 + 1) = v207;
        v208 = v303[16];
        v209 = &v304[v208];
        v210 = &v92[v208];
        swift_bridgeObjectRetain(v203);
        swift_bridgeObjectRetain(v207);
        if (v197(v210, 1, v193))
        {
          v211 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
          memcpy(v209, v210, *(_QWORD *)(*(_QWORD *)(v211 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v199 + 16))(v209, v210, v193);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v199 + 56))(v209, 0, 1, v193);
        }
        v212 = v303[17];
        v213 = &v304[v212];
        v214 = &v92[v212];
        if (v197(&v92[v212], 1, v193))
        {
          v215 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
          memcpy(v213, v214, *(_QWORD *)(*(_QWORD *)(v215 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v199 + 16))(v213, v214, v193);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v199 + 56))(v213, 0, 1, v193);
        }
        v304[v303[18]] = v92[v303[18]];
        v216 = v299[7];
        v217 = (char *)a1 + v216;
        v218 = (char *)a2 + v216;
        if (v197((char *)a2 + v216, 1, v193))
        {
          v219 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
          memcpy(v217, v218, *(_QWORD *)(*(_QWORD *)(v219 - 8) + 64));
          (*(void (**)(char *, char *, uint64_t))(v199 + 16))((char *)a1 + v299[8], (char *)a2 + v299[8], v193);
        }
        else
        {
          v220 = *(void (**)(char *, char *, uint64_t))(v199 + 16);
          v220(v217, v218, v193);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v199 + 56))(v217, 0, 1, v193);
          v220((char *)a1 + v299[8], (char *)a2 + v299[8], v193);
        }
        *(uint64_t *)((char *)a1 + v299[9]) = *(uint64_t *)((char *)a2 + v299[9]);
        v221 = v299[10];
        v222 = (uint64_t *)((char *)a1 + v221);
        v223 = (uint64_t *)((char *)a2 + v221);
        *v222 = *v223;
        v224 = v223[1];
        v222[1] = v224;
        v225 = v299[11];
        v226 = (uint64_t *)((char *)a1 + v225);
        v227 = (uint64_t *)((char *)a2 + v225);
        *v226 = *v227;
        v228 = v227[1];
        v226[1] = v228;
        *(uint64_t *)((char *)a1 + v299[12]) = *(uint64_t *)((char *)a2 + v299[12]);
        *((_BYTE *)a1 + v299[13]) = *((_BYTE *)a2 + v299[13]);
        *((_BYTE *)a1 + v299[14]) = *((_BYTE *)a2 + v299[14]);
        v229 = v299[15];
        v230 = (char *)a1 + v229;
        v231 = (char *)a2 + v229;
        v232 = v231[8];
        *(_QWORD *)v230 = *(_QWORD *)v231;
        v230[8] = v232;
        v233 = v299[16];
        v234 = (uint64_t *)((char *)a1 + v233);
        v235 = (uint64_t *)((char *)a2 + v233);
        swift_bridgeObjectRetain(v224);
        swift_bridgeObjectRetain(v228);
        swift_retain();
        if (v298(v235, 1, v300))
        {
          v236 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
          memcpy(v234, v235, *(_QWORD *)(*(_QWORD *)(v236 - 8) + 64));
        }
        else
        {
          *v234 = *v235;
          v237 = v235[1];
          v234[1] = v237;
          v238 = *((unsigned __int8 *)v235 + 32);
          swift_bridgeObjectRetain(v237);
          if (v238 == 255)
          {
            v241 = *((_OWORD *)v235 + 1);
            *((_BYTE *)v234 + 32) = *((_BYTE *)v235 + 32);
            *((_OWORD *)v234 + 1) = v241;
          }
          else
          {
            v239 = v235[2];
            v240 = v235[3];
            sub_3D464(v239, v240, v238);
            v234[2] = v239;
            v234[3] = v240;
            *((_BYTE *)v234 + 32) = v238;
          }
          v234[5] = v235[5];
          v234[6] = v235[6];
          v242 = (id *)(v235 + 7);
          v243 = *((unsigned __int8 *)v235 + 64);
          if (v243 == 255)
          {
            v245 = *v242;
            *((_BYTE *)v234 + 64) = *((_BYTE *)v235 + 64);
            v234[7] = v245;
          }
          else
          {
            v244 = *v242;
            sub_3D47C(*v242, *((_BYTE *)v235 + 64));
            v234[7] = v244;
            *((_BYTE *)v234 + 64) = v243;
          }
          v246 = (id *)(v235 + 9);
          v247 = *((unsigned __int8 *)v235 + 80);
          if (v247 == 255)
          {
            v249 = *v246;
            *((_BYTE *)v234 + 80) = *((_BYTE *)v235 + 80);
            v234[9] = v249;
          }
          else
          {
            v248 = *v246;
            sub_3D47C(*v246, *((_BYTE *)v235 + 80));
            v234[9] = v248;
            *((_BYTE *)v234 + 80) = v247;
          }
          v250 = (id *)(v235 + 11);
          v251 = *((unsigned __int8 *)v235 + 96);
          if (v251 == 255)
          {
            v253 = *v250;
            *((_BYTE *)v234 + 96) = *((_BYTE *)v235 + 96);
            v234[11] = v253;
          }
          else
          {
            v252 = *v250;
            sub_3D47C(*v250, *((_BYTE *)v235 + 96));
            v234[11] = v252;
            *((_BYTE *)v234 + 96) = v251;
          }
          v254 = (id *)(v235 + 13);
          v255 = *((unsigned __int8 *)v235 + 112);
          if (v255 == 255)
          {
            v257 = *v254;
            *((_BYTE *)v234 + 112) = *((_BYTE *)v235 + 112);
            v234[13] = v257;
          }
          else
          {
            v256 = *v254;
            sub_3D47C(*v254, *((_BYTE *)v235 + 112));
            v234[13] = v256;
            *((_BYTE *)v234 + 112) = v255;
          }
          v258 = (id *)(v235 + 15);
          v259 = *((unsigned __int8 *)v235 + 128);
          if (v259 == 255)
          {
            v261 = *v258;
            *((_BYTE *)v234 + 128) = *((_BYTE *)v235 + 128);
            v234[15] = v261;
          }
          else
          {
            v260 = *v258;
            sub_3D47C(*v258, *((_BYTE *)v235 + 128));
            v234[15] = v260;
            *((_BYTE *)v234 + 128) = v259;
          }
          *((_BYTE *)v234 + 129) = *((_BYTE *)v235 + 129);
          v262 = v300[11];
          v263 = (char *)v234 + v262;
          v264 = (char *)v235 + v262;
          v265 = type metadata accessor for ArtworkCrop(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v265 - 8) + 16))(v263, v264, v265);
          v266 = v300[12];
          v267 = (_QWORD *)((char *)v234 + v266);
          v268 = (_QWORD *)((char *)v235 + v266);
          *v267 = *v268;
          v269 = v268[1];
          v267[1] = v269;
          *((_BYTE *)v234 + v300[13]) = *((_BYTE *)v235 + v300[13]);
          *((_BYTE *)v234 + v300[14]) = *((_BYTE *)v235 + v300[14]);
          *((_BYTE *)v234 + v300[15]) = *((_BYTE *)v235 + v300[15]);
          v270 = v300[16];
          v271 = (_QWORD *)((char *)v234 + v270);
          v272 = (_QWORD *)((char *)v235 + v270);
          *v271 = *v272;
          v273 = v272[1];
          v271[1] = v273;
          v274 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v295 + 56);
          swift_bridgeObjectRetain(v269);
          swift_bridgeObjectRetain(v273);
          v274(v234, 0, 1, v300);
        }
        v275 = v299[17];
        v276 = (uint64_t *)((char *)a1 + v275);
        v277 = (uint64_t *)((char *)a2 + v275);
        *v276 = *v277;
        v278 = v277[1];
        v276[1] = v278;
        v279 = v299[18];
        v280 = (char *)a1 + v279;
        v281 = (char *)a2 + v279;
        v282 = *(_QWORD *)v281;
        v280[8] = v281[8];
        *(_QWORD *)v280 = v282;
        v283 = v299[19];
        v284 = (char *)a1 + v283;
        v285 = (char *)a2 + v283;
        v286 = *(_QWORD *)v285;
        v284[8] = v285[8];
        *(_QWORD *)v284 = v286;
        *((_BYTE *)a1 + v299[20]) = *((_BYTE *)a2 + v299[20]);
        *((_BYTE *)a1 + v299[21]) = *((_BYTE *)a2 + v299[21]);
        v287 = v299[22];
        v288 = (char *)a1 + v287;
        v289 = (char *)a2 + v287;
        v290 = type metadata accessor for TranscriptRequestInformation(0);
        v291 = *(_QWORD *)(v290 - 8);
        v292 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v291 + 48);
        swift_bridgeObjectRetain(v278);
        if (v292(v289, 1, v290))
        {
          v293 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2C40);
          memcpy(v288, v289, *(_QWORD *)(*(_QWORD *)(v293 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v291 + 16))(v288, v289, v290);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v291 + 56))(v288, 0, 1, v290);
        }
        v8 = a1;
        v9 = v302;
        v10 = 30;
        goto LABEL_132;
      case 0x1Fu:
        *a1 = *a2;
        a1[1] = a2[1];
        v93 = a2[2];
        a1[2] = v93;
        swift_bridgeObjectRetain(v93);
        v8 = a1;
        v9 = a3;
        v10 = 31;
        goto LABEL_132;
      case 0x20u:
        *a1 = *a2;
        v94 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B6FA0) + 48);
        v95 = (char *)a1 + v94;
        v96 = (char *)a2 + v94;
        v97 = type metadata accessor for URL(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v97 - 8) + 16))(v95, v96, v97);
        v8 = a1;
        v9 = a3;
        v10 = 32;
LABEL_132:
        swift_storeEnumTagMultiPayload(v8, v9, v10);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

_QWORD *initializeWithTake for FlowDestination(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  int *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  int *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  void (*v88)(char *, char *, uint64_t);
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  _OWORD *v93;
  _OWORD *v94;
  uint64_t v95;
  __int128 v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unsigned int (*v114)(char *, uint64_t, int *);
  uint64_t v115;
  uint64_t v116;
  int *v117;
  char *v118;
  char *v119;
  unsigned int (*v120)(char *, uint64_t, uint64_t);

  switch(swift_getEnumCaseMultiPayload(a2, a3))
  {
    case 0u:
      v6 = type metadata accessor for URL(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B6F98);
      *((_BYTE *)a1 + *(int *)(v7 + 48)) = *((_BYTE *)a2 + *(int *)(v7 + 48));
      v8 = a1;
      v9 = a3;
      v10 = 0;
      goto LABEL_57;
    case 1u:
      v11 = type metadata accessor for URL(0);
      v12 = *(_QWORD *)(v11 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v12 + 48))(a2, 1, v11))
      {
        v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v12 + 32))(a1, a2, v11);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v12 + 56))(a1, 0, 1, v11);
      }
      v8 = a1;
      v9 = a3;
      v10 = 1;
      goto LABEL_57;
    case 2u:
      v14 = type metadata accessor for URL(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(a1, a2, v14);
      v15 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B6F80) + 48);
      v16 = (_OWORD *)((char *)a1 + v15);
      v17 = (_OWORD *)((char *)a2 + v15);
      v18 = (int *)type metadata accessor for ArtworkModel(0);
      v19 = *((_QWORD *)v18 - 1);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v19 + 48))(v17, 1, v18))
      {
        v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
        memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      }
      else
      {
        v62 = v17[1];
        *v16 = *v17;
        v16[1] = v62;
        *((_BYTE *)v16 + 32) = *((_BYTE *)v17 + 32);
        *(_OWORD *)((char *)v16 + 40) = *(_OWORD *)((char *)v17 + 40);
        *((_QWORD *)v16 + 7) = *((_QWORD *)v17 + 7);
        *((_BYTE *)v16 + 64) = *((_BYTE *)v17 + 64);
        *(_OWORD *)((char *)v16 + 113) = *(_OWORD *)((char *)v17 + 113);
        *(_OWORD *)((char *)v16 + 104) = *(_OWORD *)((char *)v17 + 104);
        *(_OWORD *)((char *)v16 + 88) = *(_OWORD *)((char *)v17 + 88);
        *(_OWORD *)((char *)v16 + 72) = *(_OWORD *)((char *)v17 + 72);
        *((_BYTE *)v16 + 129) = *((_BYTE *)v17 + 129);
        v63 = v18[11];
        v64 = (char *)v16 + v63;
        v65 = (char *)v17 + v63;
        v66 = type metadata accessor for ArtworkCrop(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v66 - 8) + 32))(v64, v65, v66);
        *(_OWORD *)((char *)v16 + v18[12]) = *(_OWORD *)((char *)v17 + v18[12]);
        *((_BYTE *)v16 + v18[13]) = *((_BYTE *)v17 + v18[13]);
        *((_BYTE *)v16 + v18[14]) = *((_BYTE *)v17 + v18[14]);
        *((_BYTE *)v16 + v18[15]) = *((_BYTE *)v17 + v18[15]);
        *(_OWORD *)((char *)v16 + v18[16]) = *(_OWORD *)((char *)v17 + v18[16]);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v19 + 56))(v16, 0, 1, v18);
      }
      v8 = a1;
      v9 = a3;
      v10 = 2;
      goto LABEL_57;
    case 3u:
      *a1 = *a2;
      v21 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B6F78) + 48);
      v22 = (char *)a1 + v21;
      v23 = (char *)a2 + v21;
      v24 = type metadata accessor for URL(0);
      v25 = *(_QWORD *)(v24 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
      {
        v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
        memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v22, v23, v24);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
      }
      v8 = a1;
      v9 = a3;
      v10 = 3;
      goto LABEL_57;
    case 4u:
      *a1 = *a2;
      v27 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B6F78) + 48);
      v28 = (char *)a1 + v27;
      v29 = (char *)a2 + v27;
      v30 = type metadata accessor for URL(0);
      v31 = *(_QWORD *)(v30 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
      {
        v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
        memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v28, v29, v30);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
      }
      v8 = a1;
      v9 = a3;
      v10 = 4;
      goto LABEL_57;
    case 5u:
      *a1 = *a2;
      v33 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B6F78) + 48);
      v34 = (char *)a1 + v33;
      v35 = (char *)a2 + v33;
      v36 = type metadata accessor for URL(0);
      v37 = *(_QWORD *)(v36 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36))
      {
        v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
        memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v34, v35, v36);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
      }
      v8 = a1;
      v9 = a3;
      v10 = 5;
      goto LABEL_57;
    case 0x12u:
      v39 = type metadata accessor for URL(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v39 - 8) + 32))(a1, a2, v39);
      v8 = a1;
      v9 = a3;
      v10 = 18;
      goto LABEL_57;
    case 0x18u:
      v40 = type metadata accessor for URL(0);
      v41 = *(_QWORD *)(v40 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v41 + 48))(a2, 1, v40))
      {
        v42 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v41 + 32))(a1, a2, v40);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v41 + 56))(a1, 0, 1, v40);
      }
      v8 = a1;
      v9 = a3;
      v10 = 24;
      goto LABEL_57;
    case 0x19u:
      v43 = type metadata accessor for URL(0);
      v44 = *(_QWORD *)(v43 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v44 + 48))(a2, 1, v43))
      {
        v45 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v44 + 32))(a1, a2, v43);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v44 + 56))(a1, 0, 1, v43);
      }
      v8 = a1;
      v9 = a3;
      v10 = 25;
      goto LABEL_57;
    case 0x1Du:
      v46 = type metadata accessor for TranscriptRequestInformation(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v46 - 8) + 32))(a1, a2, v46);
      v8 = a1;
      v9 = a3;
      v10 = 29;
      goto LABEL_57;
    case 0x1Eu:
      v115 = a3;
      *a1 = *a2;
      *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
      v47 = (int *)type metadata accessor for EpisodeOffer(0);
      v48 = v47[6];
      v49 = (char *)a1 + v48;
      v50 = (char *)a2 + v48;
      *(_QWORD *)v49 = *(_QWORD *)((char *)a2 + v48);
      *(_OWORD *)(v49 + 8) = *(_OWORD *)((char *)a2 + v48 + 8);
      v49[24] = *((_BYTE *)a2 + v48 + 24);
      v51 = (int *)type metadata accessor for ShowOffer(0);
      v52 = v51[7];
      v53 = &v49[v52];
      v54 = &v50[v52];
      v55 = (int *)type metadata accessor for ArtworkModel(0);
      v56 = *((_QWORD *)v55 - 1);
      v114 = *(unsigned int (**)(char *, uint64_t, int *))(v56 + 48);
      v116 = v56;
      v117 = v55;
      if (v114(v54, 1, v55))
      {
        v57 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
        memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
      }
      else
      {
        v67 = *((_OWORD *)v54 + 1);
        *(_OWORD *)v53 = *(_OWORD *)v54;
        *((_OWORD *)v53 + 1) = v67;
        v53[32] = v54[32];
        *(_OWORD *)(v53 + 40) = *(_OWORD *)(v54 + 40);
        *((_QWORD *)v53 + 7) = *((_QWORD *)v54 + 7);
        v53[64] = v54[64];
        *(_OWORD *)(v53 + 113) = *(_OWORD *)(v54 + 113);
        *(_OWORD *)(v53 + 104) = *(_OWORD *)(v54 + 104);
        *(_OWORD *)(v53 + 88) = *(_OWORD *)(v54 + 88);
        *(_OWORD *)(v53 + 72) = *(_OWORD *)(v54 + 72);
        v53[129] = v54[129];
        v68 = v55[11];
        v118 = &v54[v68];
        v119 = &v53[v68];
        v69 = type metadata accessor for ArtworkCrop(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v69 - 8) + 32))(v119, v118, v69);
        *(_OWORD *)&v53[v55[12]] = *(_OWORD *)&v54[v55[12]];
        v53[v55[13]] = v54[v55[13]];
        v53[v55[14]] = v54[v55[14]];
        v53[v55[15]] = v54[v55[15]];
        *(_OWORD *)&v53[v55[16]] = *(_OWORD *)&v54[v55[16]];
        (*(void (**)(char *, _QWORD, uint64_t, int *))(v56 + 56))(v53, 0, 1, v55);
      }
      *(_OWORD *)&v49[v51[8]] = *(_OWORD *)&v50[v51[8]];
      *(_OWORD *)&v49[v51[9]] = *(_OWORD *)&v50[v51[9]];
      v49[v51[10]] = v50[v51[10]];
      *(_OWORD *)&v49[v51[11]] = *(_OWORD *)&v50[v51[11]];
      *(_OWORD *)&v49[v51[12]] = *(_OWORD *)&v50[v51[12]];
      v70 = v51[13];
      v71 = &v49[v70];
      v72 = &v50[v70];
      v73 = type metadata accessor for URL(0);
      v74 = *(_QWORD *)(v73 - 8);
      v120 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v74 + 48);
      if (v120(v72, 1, v73))
      {
        v75 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
        memcpy(v71, v72, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v74 + 32))(v71, v72, v73);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v74 + 56))(v71, 0, 1, v73);
      }
      *(_OWORD *)&v49[v51[14]] = *(_OWORD *)&v50[v51[14]];
      *(_OWORD *)&v49[v51[15]] = *(_OWORD *)&v50[v51[15]];
      v76 = v51[16];
      v77 = &v49[v76];
      v78 = &v50[v76];
      if (v120(&v50[v76], 1, v73))
      {
        v79 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
        memcpy(v77, v78, *(_QWORD *)(*(_QWORD *)(v79 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v74 + 32))(v77, v78, v73);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v74 + 56))(v77, 0, 1, v73);
      }
      v80 = v51[17];
      v81 = &v49[v80];
      v82 = &v50[v80];
      if (v120(&v50[v80], 1, v73))
      {
        v83 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
        memcpy(v81, v82, *(_QWORD *)(*(_QWORD *)(v83 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v74 + 32))(v81, v82, v73);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v74 + 56))(v81, 0, 1, v73);
      }
      v49[v51[18]] = v50[v51[18]];
      v84 = v47[7];
      v85 = (char *)a1 + v84;
      v86 = (char *)a2 + v84;
      if (v120((char *)a2 + v84, 1, v73))
      {
        v87 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
        memcpy(v85, v86, *(_QWORD *)(*(_QWORD *)(v87 - 8) + 64));
        v88 = *(void (**)(char *, char *, uint64_t))(v74 + 32);
      }
      else
      {
        v88 = *(void (**)(char *, char *, uint64_t))(v74 + 32);
        v88(v85, v86, v73);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v74 + 56))(v85, 0, 1, v73);
      }
      v88((char *)a1 + v47[8], (char *)a2 + v47[8], v73);
      *(_QWORD *)((char *)a1 + v47[9]) = *(_QWORD *)((char *)a2 + v47[9]);
      *(_OWORD *)((char *)a1 + v47[10]) = *(_OWORD *)((char *)a2 + v47[10]);
      *(_OWORD *)((char *)a1 + v47[11]) = *(_OWORD *)((char *)a2 + v47[11]);
      *(_QWORD *)((char *)a1 + v47[12]) = *(_QWORD *)((char *)a2 + v47[12]);
      *((_BYTE *)a1 + v47[13]) = *((_BYTE *)a2 + v47[13]);
      *((_BYTE *)a1 + v47[14]) = *((_BYTE *)a2 + v47[14]);
      v89 = v47[15];
      v90 = (char *)a1 + v89;
      v91 = (char *)a2 + v89;
      *(_QWORD *)v90 = *(_QWORD *)v91;
      v90[8] = v91[8];
      v92 = v47[16];
      v93 = (_OWORD *)((char *)a1 + v92);
      v94 = (_OWORD *)((char *)a2 + v92);
      if (v114((char *)a2 + v92, 1, v117))
      {
        v95 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
        memcpy(v93, v94, *(_QWORD *)(*(_QWORD *)(v95 - 8) + 64));
      }
      else
      {
        v96 = v94[1];
        *v93 = *v94;
        v93[1] = v96;
        *((_BYTE *)v93 + 32) = *((_BYTE *)v94 + 32);
        *(_OWORD *)((char *)v93 + 40) = *(_OWORD *)((char *)v94 + 40);
        *((_QWORD *)v93 + 7) = *((_QWORD *)v94 + 7);
        *((_BYTE *)v93 + 64) = *((_BYTE *)v94 + 64);
        *(_OWORD *)((char *)v93 + 113) = *(_OWORD *)((char *)v94 + 113);
        *(_OWORD *)((char *)v93 + 104) = *(_OWORD *)((char *)v94 + 104);
        *(_OWORD *)((char *)v93 + 88) = *(_OWORD *)((char *)v94 + 88);
        *(_OWORD *)((char *)v93 + 72) = *(_OWORD *)((char *)v94 + 72);
        *((_BYTE *)v93 + 129) = *((_BYTE *)v94 + 129);
        v97 = v117[11];
        v98 = (char *)v93 + v97;
        v99 = (char *)v94 + v97;
        v100 = type metadata accessor for ArtworkCrop(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v100 - 8) + 32))(v98, v99, v100);
        *(_OWORD *)((char *)v93 + v117[12]) = *(_OWORD *)((char *)v94 + v117[12]);
        *((_BYTE *)v93 + v117[13]) = *((_BYTE *)v94 + v117[13]);
        *((_BYTE *)v93 + v117[14]) = *((_BYTE *)v94 + v117[14]);
        *((_BYTE *)v93 + v117[15]) = *((_BYTE *)v94 + v117[15]);
        *(_OWORD *)((char *)v93 + v117[16]) = *(_OWORD *)((char *)v94 + v117[16]);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v116 + 56))(v93, 0, 1, v117);
      }
      *(_OWORD *)((char *)a1 + v47[17]) = *(_OWORD *)((char *)a2 + v47[17]);
      v101 = v47[18];
      v102 = (char *)a1 + v101;
      v103 = (char *)a2 + v101;
      v102[8] = v103[8];
      *(_QWORD *)v102 = *(_QWORD *)v103;
      v104 = v47[19];
      v105 = (char *)a1 + v104;
      v106 = (char *)a2 + v104;
      *(_QWORD *)v105 = *(_QWORD *)v106;
      v105[8] = v106[8];
      *((_BYTE *)a1 + v47[20]) = *((_BYTE *)a2 + v47[20]);
      *((_BYTE *)a1 + v47[21]) = *((_BYTE *)a2 + v47[21]);
      v107 = v47[22];
      v108 = (char *)a1 + v107;
      v109 = (char *)a2 + v107;
      v110 = type metadata accessor for TranscriptRequestInformation(0);
      v111 = *(_QWORD *)(v110 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v111 + 48))(v109, 1, v110))
      {
        v112 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2C40);
        memcpy(v108, v109, *(_QWORD *)(*(_QWORD *)(v112 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v111 + 32))(v108, v109, v110);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v111 + 56))(v108, 0, 1, v110);
      }
      v8 = a1;
      v9 = v115;
      v10 = 30;
      goto LABEL_57;
    case 0x20u:
      *a1 = *a2;
      v58 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B6FA0) + 48);
      v59 = (char *)a1 + v58;
      v60 = (char *)a2 + v58;
      v61 = type metadata accessor for URL(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v61 - 8) + 32))(v59, v60, v61);
      v8 = a1;
      v9 = a3;
      v10 = 32;
LABEL_57:
      swift_storeEnumTagMultiPayload(v8, v9, v10);
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

_QWORD *assignWithTake for FlowDestination(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  int *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  int *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  void (*v88)(char *, char *, uint64_t);
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  _OWORD *v93;
  _OWORD *v94;
  uint64_t v95;
  __int128 v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unsigned int (*v114)(char *, uint64_t, int *);
  int *v115;
  int *v116;
  char *__dst;
  char *v118;
  uint64_t v119;
  char *v120;
  unsigned int (*v121)(char *, uint64_t, uint64_t);

  if (a1 != a2)
  {
    sub_B5EB4((uint64_t)a1);
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        v6 = type metadata accessor for URL(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
        v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B6F98);
        *((_BYTE *)a1 + *(int *)(v7 + 48)) = *((_BYTE *)a2 + *(int *)(v7 + 48));
        v8 = a1;
        v9 = a3;
        v10 = 0;
        goto LABEL_58;
      case 1u:
        v11 = type metadata accessor for URL(0);
        v12 = *(_QWORD *)(v11 - 8);
        if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v12 + 48))(a2, 1, v11))
        {
          v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v12 + 32))(a1, a2, v11);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v12 + 56))(a1, 0, 1, v11);
        }
        v8 = a1;
        v9 = a3;
        v10 = 1;
        goto LABEL_58;
      case 2u:
        v14 = type metadata accessor for URL(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(a1, a2, v14);
        v15 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B6F80) + 48);
        v16 = (_OWORD *)((char *)a1 + v15);
        v17 = (_OWORD *)((char *)a2 + v15);
        v18 = (int *)type metadata accessor for ArtworkModel(0);
        v19 = *((_QWORD *)v18 - 1);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v19 + 48))(v17, 1, v18))
        {
          v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
          memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
        }
        else
        {
          v61 = v17[1];
          *v16 = *v17;
          v16[1] = v61;
          *((_BYTE *)v16 + 32) = *((_BYTE *)v17 + 32);
          *(_OWORD *)((char *)v16 + 40) = *(_OWORD *)((char *)v17 + 40);
          *((_QWORD *)v16 + 7) = *((_QWORD *)v17 + 7);
          *((_BYTE *)v16 + 64) = *((_BYTE *)v17 + 64);
          *(_OWORD *)((char *)v16 + 113) = *(_OWORD *)((char *)v17 + 113);
          *(_OWORD *)((char *)v16 + 104) = *(_OWORD *)((char *)v17 + 104);
          *(_OWORD *)((char *)v16 + 88) = *(_OWORD *)((char *)v17 + 88);
          *(_OWORD *)((char *)v16 + 72) = *(_OWORD *)((char *)v17 + 72);
          *((_BYTE *)v16 + 129) = *((_BYTE *)v17 + 129);
          v62 = v18[11];
          v63 = (char *)v16 + v62;
          v64 = (char *)v17 + v62;
          v65 = type metadata accessor for ArtworkCrop(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v65 - 8) + 32))(v63, v64, v65);
          *(_OWORD *)((char *)v16 + v18[12]) = *(_OWORD *)((char *)v17 + v18[12]);
          *((_BYTE *)v16 + v18[13]) = *((_BYTE *)v17 + v18[13]);
          *((_BYTE *)v16 + v18[14]) = *((_BYTE *)v17 + v18[14]);
          *((_BYTE *)v16 + v18[15]) = *((_BYTE *)v17 + v18[15]);
          *(_OWORD *)((char *)v16 + v18[16]) = *(_OWORD *)((char *)v17 + v18[16]);
          (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v19 + 56))(v16, 0, 1, v18);
        }
        v8 = a1;
        v9 = a3;
        v10 = 2;
        goto LABEL_58;
      case 3u:
        *a1 = *a2;
        v21 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B6F78) + 48);
        v22 = (char *)a1 + v21;
        v23 = (char *)a2 + v21;
        v24 = type metadata accessor for URL(0);
        v25 = *(_QWORD *)(v24 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
        {
          v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
          memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v22, v23, v24);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
        }
        v8 = a1;
        v9 = a3;
        v10 = 3;
        goto LABEL_58;
      case 4u:
        *a1 = *a2;
        v27 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B6F78) + 48);
        v28 = (char *)a1 + v27;
        v29 = (char *)a2 + v27;
        v30 = type metadata accessor for URL(0);
        v31 = *(_QWORD *)(v30 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
        {
          v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
          memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v28, v29, v30);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
        }
        v8 = a1;
        v9 = a3;
        v10 = 4;
        goto LABEL_58;
      case 5u:
        *a1 = *a2;
        v33 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B6F78) + 48);
        v34 = (char *)a1 + v33;
        v35 = (char *)a2 + v33;
        v36 = type metadata accessor for URL(0);
        v37 = *(_QWORD *)(v36 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36))
        {
          v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
          memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v34, v35, v36);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
        }
        v8 = a1;
        v9 = a3;
        v10 = 5;
        goto LABEL_58;
      case 0x12u:
        v39 = type metadata accessor for URL(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v39 - 8) + 32))(a1, a2, v39);
        v8 = a1;
        v9 = a3;
        v10 = 18;
        goto LABEL_58;
      case 0x18u:
        v40 = type metadata accessor for URL(0);
        v41 = *(_QWORD *)(v40 - 8);
        if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v41 + 48))(a2, 1, v40))
        {
          v42 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v41 + 32))(a1, a2, v40);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v41 + 56))(a1, 0, 1, v40);
        }
        v8 = a1;
        v9 = a3;
        v10 = 24;
        goto LABEL_58;
      case 0x19u:
        v43 = type metadata accessor for URL(0);
        v44 = *(_QWORD *)(v43 - 8);
        if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v44 + 48))(a2, 1, v43))
        {
          v45 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v44 + 32))(a1, a2, v43);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v44 + 56))(a1, 0, 1, v43);
        }
        v8 = a1;
        v9 = a3;
        v10 = 25;
        goto LABEL_58;
      case 0x1Du:
        v46 = type metadata accessor for TranscriptRequestInformation(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v46 - 8) + 32))(a1, a2, v46);
        v8 = a1;
        v9 = a3;
        v10 = 29;
        goto LABEL_58;
      case 0x1Eu:
        *a1 = *a2;
        *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
        v115 = (int *)type metadata accessor for EpisodeOffer(0);
        v47 = v115[6];
        v48 = (char *)a1 + v47;
        v49 = (char *)a2 + v47;
        *(_QWORD *)v48 = *(_QWORD *)((char *)a2 + v47);
        *(_OWORD *)(v48 + 8) = *(_OWORD *)((char *)a2 + v47 + 8);
        v48[24] = *((_BYTE *)a2 + v47 + 24);
        v50 = (int *)type metadata accessor for ShowOffer(0);
        v51 = v50[7];
        v52 = &v48[v51];
        v53 = &v49[v51];
        v54 = (int *)type metadata accessor for ArtworkModel(0);
        v55 = *((_QWORD *)v54 - 1);
        v114 = *(unsigned int (**)(char *, uint64_t, int *))(v55 + 48);
        v116 = v54;
        if (v114(v53, 1, v54))
        {
          v56 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
          memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
        }
        else
        {
          v66 = *((_OWORD *)v53 + 1);
          *(_OWORD *)v52 = *(_OWORD *)v53;
          *((_OWORD *)v52 + 1) = v66;
          v52[32] = v53[32];
          *(_OWORD *)(v52 + 40) = *(_OWORD *)(v53 + 40);
          *((_QWORD *)v52 + 7) = *((_QWORD *)v53 + 7);
          v52[64] = v53[64];
          *(_OWORD *)(v52 + 113) = *(_OWORD *)(v53 + 113);
          *(_OWORD *)(v52 + 104) = *(_OWORD *)(v53 + 104);
          *(_OWORD *)(v52 + 88) = *(_OWORD *)(v53 + 88);
          *(_OWORD *)(v52 + 72) = *(_OWORD *)(v53 + 72);
          v52[129] = v53[129];
          v67 = v54[11];
          v118 = &v53[v67];
          v120 = &v52[v67];
          v68 = type metadata accessor for ArtworkCrop(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v68 - 8) + 32))(v120, v118, v68);
          *(_OWORD *)&v52[v54[12]] = *(_OWORD *)&v53[v54[12]];
          v52[v54[13]] = v53[v54[13]];
          v52[v54[14]] = v53[v54[14]];
          v52[v54[15]] = v53[v54[15]];
          *(_OWORD *)&v52[v54[16]] = *(_OWORD *)&v53[v54[16]];
          (*(void (**)(char *, _QWORD, uint64_t, int *))(v55 + 56))(v52, 0, 1, v54);
        }
        *(_OWORD *)&v48[v50[8]] = *(_OWORD *)&v49[v50[8]];
        *(_OWORD *)&v48[v50[9]] = *(_OWORD *)&v49[v50[9]];
        v48[v50[10]] = v49[v50[10]];
        *(_OWORD *)&v48[v50[11]] = *(_OWORD *)&v49[v50[11]];
        *(_OWORD *)&v48[v50[12]] = *(_OWORD *)&v49[v50[12]];
        v69 = v50[13];
        __dst = &v48[v69];
        v70 = &v49[v69];
        v71 = type metadata accessor for URL(0);
        v72 = *(_QWORD *)(v71 - 8);
        v121 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v72 + 48);
        v119 = v72;
        if (v121(v70, 1, v71))
        {
          v73 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
          memcpy(__dst, v70, *(_QWORD *)(*(_QWORD *)(v73 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v72 + 32))(__dst, v70, v71);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v72 + 56))(__dst, 0, 1, v71);
        }
        *(_OWORD *)&v48[v50[14]] = *(_OWORD *)&v49[v50[14]];
        *(_OWORD *)&v48[v50[15]] = *(_OWORD *)&v49[v50[15]];
        v74 = v50[16];
        v75 = &v48[v74];
        v76 = &v49[v74];
        if (v121(&v49[v74], 1, v71))
        {
          v77 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
          memcpy(v75, v76, *(_QWORD *)(*(_QWORD *)(v77 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v119 + 32))(v75, v76, v71);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v119 + 56))(v75, 0, 1, v71);
        }
        v78 = v50[17];
        v79 = &v48[v78];
        v80 = &v49[v78];
        if (v121(&v49[v78], 1, v71))
        {
          v81 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
          memcpy(v79, v80, *(_QWORD *)(*(_QWORD *)(v81 - 8) + 64));
          v82 = v119;
        }
        else
        {
          v83 = v80;
          v82 = v119;
          (*(void (**)(char *, char *, uint64_t))(v119 + 32))(v79, v83, v71);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v119 + 56))(v79, 0, 1, v71);
        }
        v48[v50[18]] = v49[v50[18]];
        v84 = v115[7];
        v85 = (char *)a1 + v84;
        v86 = (char *)a2 + v84;
        if (v121((char *)a2 + v84, 1, v71))
        {
          v87 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
          memcpy(v85, v86, *(_QWORD *)(*(_QWORD *)(v87 - 8) + 64));
          v88 = *(void (**)(char *, char *, uint64_t))(v82 + 32);
        }
        else
        {
          v88 = *(void (**)(char *, char *, uint64_t))(v82 + 32);
          v88(v85, v86, v71);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v82 + 56))(v85, 0, 1, v71);
        }
        v88((char *)a1 + v115[8], (char *)a2 + v115[8], v71);
        *(_QWORD *)((char *)a1 + v115[9]) = *(_QWORD *)((char *)a2 + v115[9]);
        *(_OWORD *)((char *)a1 + v115[10]) = *(_OWORD *)((char *)a2 + v115[10]);
        *(_OWORD *)((char *)a1 + v115[11]) = *(_OWORD *)((char *)a2 + v115[11]);
        *(_QWORD *)((char *)a1 + v115[12]) = *(_QWORD *)((char *)a2 + v115[12]);
        *((_BYTE *)a1 + v115[13]) = *((_BYTE *)a2 + v115[13]);
        *((_BYTE *)a1 + v115[14]) = *((_BYTE *)a2 + v115[14]);
        v89 = v115[15];
        v90 = (char *)a1 + v89;
        v91 = (char *)a2 + v89;
        *(_QWORD *)v90 = *(_QWORD *)v91;
        v90[8] = v91[8];
        v92 = v115[16];
        v93 = (_OWORD *)((char *)a1 + v92);
        v94 = (_OWORD *)((char *)a2 + v92);
        if (v114((char *)a2 + v92, 1, v116))
        {
          v95 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
          memcpy(v93, v94, *(_QWORD *)(*(_QWORD *)(v95 - 8) + 64));
        }
        else
        {
          v96 = v94[1];
          *v93 = *v94;
          v93[1] = v96;
          *((_BYTE *)v93 + 32) = *((_BYTE *)v94 + 32);
          *(_OWORD *)((char *)v93 + 40) = *(_OWORD *)((char *)v94 + 40);
          *((_QWORD *)v93 + 7) = *((_QWORD *)v94 + 7);
          *((_BYTE *)v93 + 64) = *((_BYTE *)v94 + 64);
          *(_OWORD *)((char *)v93 + 113) = *(_OWORD *)((char *)v94 + 113);
          *(_OWORD *)((char *)v93 + 104) = *(_OWORD *)((char *)v94 + 104);
          *(_OWORD *)((char *)v93 + 88) = *(_OWORD *)((char *)v94 + 88);
          *(_OWORD *)((char *)v93 + 72) = *(_OWORD *)((char *)v94 + 72);
          *((_BYTE *)v93 + 129) = *((_BYTE *)v94 + 129);
          v97 = v116[11];
          v98 = (char *)v93 + v97;
          v99 = (char *)v94 + v97;
          v100 = type metadata accessor for ArtworkCrop(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v100 - 8) + 32))(v98, v99, v100);
          *(_OWORD *)((char *)v93 + v116[12]) = *(_OWORD *)((char *)v94 + v116[12]);
          *((_BYTE *)v93 + v116[13]) = *((_BYTE *)v94 + v116[13]);
          *((_BYTE *)v93 + v116[14]) = *((_BYTE *)v94 + v116[14]);
          *((_BYTE *)v93 + v116[15]) = *((_BYTE *)v94 + v116[15]);
          *(_OWORD *)((char *)v93 + v116[16]) = *(_OWORD *)((char *)v94 + v116[16]);
          (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v55 + 56))(v93, 0, 1, v116);
        }
        *(_OWORD *)((char *)a1 + v115[17]) = *(_OWORD *)((char *)a2 + v115[17]);
        v101 = v115[18];
        v102 = (char *)a1 + v101;
        v103 = (char *)a2 + v101;
        v102[8] = v103[8];
        *(_QWORD *)v102 = *(_QWORD *)v103;
        v104 = v115[19];
        v105 = (char *)a1 + v104;
        v106 = (char *)a2 + v104;
        *(_QWORD *)v105 = *(_QWORD *)v106;
        v105[8] = v106[8];
        *((_BYTE *)a1 + v115[20]) = *((_BYTE *)a2 + v115[20]);
        *((_BYTE *)a1 + v115[21]) = *((_BYTE *)a2 + v115[21]);
        v107 = v115[22];
        v108 = (char *)a1 + v107;
        v109 = (char *)a2 + v107;
        v110 = type metadata accessor for TranscriptRequestInformation(0);
        v111 = *(_QWORD *)(v110 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v111 + 48))(v109, 1, v110))
        {
          v112 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2C40);
          memcpy(v108, v109, *(_QWORD *)(*(_QWORD *)(v112 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v111 + 32))(v108, v109, v110);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v111 + 56))(v108, 0, 1, v110);
        }
        v8 = a1;
        v9 = a3;
        v10 = 30;
        goto LABEL_58;
      case 0x20u:
        *a1 = *a2;
        v57 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B6FA0) + 48);
        v58 = (char *)a1 + v57;
        v59 = (char *)a2 + v57;
        v60 = type metadata accessor for URL(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v60 - 8) + 32))(v58, v59, v60);
        v8 = a1;
        v9 = a3;
        v10 = 32;
LABEL_58:
        swift_storeEnumTagMultiPayload(v8, v9, v10);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

void sub_BCC08(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE v14[32];
  _BYTE v15[32];
  _BYTE v16[32];
  _BYTE v17[32];
  _BYTE v18[32];
  _BYTE v19[32];
  _QWORD v20[33];

  v2 = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(v2 - 8) + 64;
    swift_getTupleTypeLayout2(v19, v4, &unk_2F2A40);
    v20[0] = v19;
    sub_3EE70(319, (unint64_t *)&qword_3B1C30, (uint64_t (*)(uint64_t))&type metadata accessor for URL);
    if (v6 <= 0x3F)
    {
      v7 = *(_QWORD *)(v5 - 8) + 64;
      v20[1] = v7;
      sub_3EE70(319, (unint64_t *)&qword_3B28A0, (uint64_t (*)(uint64_t))&type metadata accessor for ArtworkModel);
      if (v9 <= 0x3F)
      {
        swift_getTupleTypeLayout2(v18, v4, *(_QWORD *)(v8 - 8) + 64);
        v20[2] = v18;
        swift_getTupleTypeLayout2(v17, &unk_2F2A58, v7);
        v20[3] = v17;
        swift_getTupleTypeLayout2(v16, &unk_2F2A58, v7);
        v20[4] = v16;
        swift_getTupleTypeLayout2(v15, &unk_2F2A58, v7);
        v20[5] = v15;
        v20[6] = (char *)&value witness table for Builtin.UnknownObject + 64;
        v20[7] = &unk_2F2A70;
        v20[8] = &unk_2F2A88;
        v20[9] = &unk_2F2AA0;
        v20[10] = (char *)&value witness table for Builtin.NativeObject + 64;
        v20[11] = &unk_2F2AB8;
        v20[12] = &unk_2F2AD0;
        v20[13] = (char *)&value witness table for Builtin.NativeObject + 64;
        v20[14] = &unk_2F2AB8;
        v20[15] = &unk_2F2AE8;
        v20[16] = (char *)&value witness table for Builtin.NativeObject + 64;
        v20[17] = &unk_2F2AB8;
        v20[18] = v4;
        v20[19] = &unk_2F2AB8;
        v20[20] = (char *)&value witness table for Builtin.Int64 + 64;
        v20[21] = (char *)&value witness table for Builtin.NativeObject + 64;
        v20[22] = (char *)&value witness table for Builtin.UnknownObject + 64;
        v20[23] = (char *)&value witness table for Builtin.NativeObject + 64;
        v20[24] = v7;
        v20[25] = v7;
        v20[26] = &unk_2F2B00;
        v20[27] = (char *)&value witness table for Builtin.UnknownObject + 64;
        v20[28] = (char *)&value witness table for Builtin.BridgeObject + 64;
        v10 = type metadata accessor for TranscriptRequestInformation(319);
        if (v11 <= 0x3F)
        {
          v20[29] = *(_QWORD *)(v10 - 8) + 64;
          v12 = type metadata accessor for EpisodeOffer(319);
          if (v13 <= 0x3F)
          {
            v20[30] = *(_QWORD *)(v12 - 8) + 64;
            v20[31] = &unk_2F2B18;
            swift_getTupleTypeLayout2(v14, (char *)&value witness table for Builtin.Int64 + 64, v4);
            v20[32] = v14;
            swift_initEnumMetadataMultiPayload(a1, 256, 33, v20);
          }
        }
      }
    }
  }
}

uint64_t UnbookmarkEpisodeIntentImplementation.perform(_:objectGraph:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v2[13] = a1;
  v2[14] = a2;
  v3 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType(0);
  v2[15] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[16] = v4;
  v2[17] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UnbookmarkEpisodeIntent(0);
  v2[18] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[19] = v6;
  v7 = *(_QWORD *)(v6 + 64);
  v2[20] = v7;
  v2[21] = swift_task_alloc((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for TaskPriority(0);
  v2[22] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v2[23] = v9;
  v2[24] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B68D0);
  v11 = (_QWORD *)swift_task_alloc(async function pointer to BaseObjectGraph.inject<A>(_:)[1]);
  v2[25] = v11;
  *v11 = v2;
  v11[1] = sub_BCF30;
  return BaseObjectGraph.inject<A>(_:)(v2 + 12, v10, v10);
}

uint64_t sub_BCF30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 200);
  *(_QWORD *)(*(_QWORD *)v1 + 208) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_BD3B8;
  else
    v3 = sub_BCF94;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_BCF94()
{
  _QWORD *v0;
  uint64_t ObjectType;
  _QWORD *v2;

  v0[27] = v0[12];
  ObjectType = swift_getObjectType();
  static Task<>.currentPriority.getter();
  v2 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to NSManagedObjectContextProvider.managedObjectContext(for:)
                                  + 1));
  v0[28] = v2;
  *v2 = v0;
  v2[1] = sub_BD014;
  return NSManagedObjectContextProvider.managedObjectContext(for:)(v0[24], ObjectType);
}

uint64_t sub_BD014(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 216);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 224);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 184);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 192);
  v6 = *(_QWORD *)(*(_QWORD *)v1 + 176);
  *(_QWORD *)(*(_QWORD *)v1 + 232) = a1;
  swift_task_dealloc(v2);
  swift_unknownObjectRelease(v3);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  return swift_task_switch(sub_BD098, 0, 0);
}

uint64_t sub_BD098()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7060);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to BaseObjectGraph.inject<A>(_:)[1]);
  *(_QWORD *)(v0 + 240) = v2;
  *v2 = v0;
  v2[1] = sub_BD110;
  return BaseObjectGraph.inject<A>(_:)(v0 + 16, v1, v1);
}

uint64_t sub_BD110()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 240);
  *(_QWORD *)(*(_QWORD *)v1 + 248) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_BD40C;
  else
    v3 = sub_BD174;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_BD174()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  _QWORD *v13;
  uint64_t v15;
  uint64_t v16;

  v1 = *(void **)(v0 + 232);
  v3 = *(_QWORD *)(v0 + 160);
  v2 = *(_QWORD *)(v0 + 168);
  v4 = *(_QWORD *)(v0 + 144);
  v5 = *(_QWORD *)(v0 + 152);
  v6 = *(_QWORD *)(v0 + 128);
  v15 = *(_QWORD *)(v0 + 120);
  v16 = *(_QWORD *)(v0 + 136);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 16))(v2, *(_QWORD *)(v0 + 104), v4);
  sub_150C8(v0 + 16, v0 + 56);
  v7 = *(unsigned __int8 *)(v5 + 80);
  v8 = (v7 + 24) & ~v7;
  v9 = (v3 + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = swift_allocObject(&unk_37E7E8, v9 + 40, v7 | 7);
  *(_QWORD *)(v0 + 256) = v10;
  *(_QWORD *)(v10 + 16) = v1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v10 + v8, v2, v4);
  sub_F4D8((__int128 *)(v0 + 56), v10 + v9);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v6 + 104))(v16, enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:), v15);
  v11 = async function pointer to NSManagedObjectContext.perform<A>(schedule:_:)[1];
  v12 = v1;
  v13 = (_QWORD *)swift_task_alloc(v11);
  *(_QWORD *)(v0 + 264) = v13;
  *v13 = v0;
  v13[1] = sub_BD2B4;
  return NSManagedObjectContext.perform<A>(schedule:_:)();
}

uint64_t sub_BD2B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 256);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 264);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 128);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 136);
  v6 = *(_QWORD *)(*(_QWORD *)v1 + 120);
  *(_QWORD *)(*(_QWORD *)v1 + 272) = v0;
  swift_task_dealloc(v2);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  swift_release(v3);
  if (v0)
    v7 = sub_BD468;
  else
    v7 = sub_BD348;
  return swift_task_switch(v7, 0, 0);
}

uint64_t sub_BD348()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 136);

  __swift_destroy_boxed_opaque_existential_1((_QWORD *)(v0 + 16));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_BD3B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 168);
  v2 = *(_QWORD *)(v0 + 136);
  swift_task_dealloc(*(_QWORD *)(v0 + 192));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_BD40C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 168);
  v2 = *(_QWORD *)(v0 + 136);
  swift_task_dealloc(*(_QWORD *)(v0 + 192));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_BD468()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  __swift_destroy_boxed_opaque_existential_1((_QWORD *)(v0 + 16));
  v1 = *(_QWORD *)(v0 + 168);
  v2 = *(_QWORD *)(v0 + 136);
  swift_task_dealloc(*(_QWORD *)(v0 + 192));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_BD4D4(void *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v6 = UnbookmarkEpisodeIntent.episodeIdentifiers.getter();
  v7 = NSManagedObjectContext.episodes(for:sortDescriptors:limit:)(v6, _swiftEmptyArrayStorage, 0, 1);
  result = swift_bridgeObjectRelease();
  if (!v3)
  {
    sub_BD69C(v7, a3, a1);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_BD560()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for UnbookmarkEpisodeIntent(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  __swift_destroy_boxed_opaque_existential_1((_QWORD *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 40, v5);
}

uint64_t sub_BD5F0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(type metadata accessor for UnbookmarkEpisodeIntent(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return sub_BD4D4(*(void **)(v0 + 16), v0 + v2, (_QWORD *)(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8)));
}

unint64_t sub_BD654()
{
  unint64_t result;

  result = qword_3B7068[0];
  if (!qword_3B7068[0])
  {
    type metadata accessor for UnbookmarkEpisodeIntent(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for UnbookmarkEpisodeIntent);
    atomic_store(result, qword_3B7068);
  }
  return result;
}

id sub_BD69C(uint64_t a1, _QWORD *a2, void *a3)
{
  uint64_t v6;
  id result;
  int v8;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (!((unint64_t)a1 >> 62))
  {
    v6 = *(_QWORD *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8));
    result = (id)swift_bridgeObjectRetain(a1);
    if (v6)
      goto LABEL_3;
    return (id)swift_bridgeObjectRelease();
  }
  if (a1 < 0)
    v14 = a1;
  else
    v14 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  result = (id)_CocoaArrayWrapper.endIndex.getter(v14);
  v6 = (uint64_t)result;
  if (!result)
    return (id)swift_bridgeObjectRelease();
LABEL_3:
  if (v6 < 1)
  {
    __break(1u);
  }
  else
  {
    v8 = 0;
    v9 = 0;
    do
    {
      if ((a1 & 0xC000000000000001) != 0)
        v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v9, a1);
      else
        v10 = *(id *)(a1 + 8 * v9 + 32);
      v11 = v10;
      ++v9;
      v8 |= objc_msgSend(v10, "isBookmarked");
      v12 = a2[3];
      v13 = a2[4];
      __swift_project_boxed_opaque_existential_1(a2, v12);
      dispatch thunk of PodcastsStateCoordinatorProtocol.unsafeRemoveEpisodeFromBookmarksIfNeeded(episode:from:)(v11, 3, v12, v13);

    }
    while (v6 != v9);
    result = (id)swift_bridgeObjectRelease();
    if ((v8 & 1) != 0)
      return objc_msgSend(a3, "saveInCurrentBlock");
  }
  return result;
}

uint64_t sub_BD810(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;

  *(_QWORD *)(v3 + 16) = a1;
  v6 = (_QWORD *)swift_task_alloc(dword_3B7054);
  *(_QWORD *)(v3 + 24) = v6;
  *v6 = v3;
  v6[1] = sub_BD868;
  return UnbookmarkEpisodeIntentImplementation.perform(_:objectGraph:)(a2, a3);
}

uint64_t sub_BD868(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 24);
  v6 = *v2;
  swift_task_dealloc(v5);
  if (!v1)
    **(_BYTE **)(v4 + 16) = a1 & 1;
  return (*(uint64_t (**)(void))(v6 + 8))();
}

ValueMetadata *type metadata accessor for UnbookmarkEpisodeIntentImplementation()
{
  return &type metadata for UnbookmarkEpisodeIntentImplementation;
}

uint64_t sub_BD8D8()
{
  uint64_t v0;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7090);
  __swift_allocate_value_buffer(v0, qword_3F3588);
  __swift_project_value_buffer(v0, (uint64_t)qword_3F3588);
  return JSONContext.Property.init(_:)(0xD000000000000016, 0x800000000030DD30, &type metadata for ShelfContentType);
}

uint64_t sub_BD944()
{
  uint64_t v0;
  uint64_t v1;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7080);
  __swift_allocate_value_buffer(v0, qword_3F35A0);
  __swift_project_value_buffer(v0, (uint64_t)qword_3F35A0);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7088);
  return JSONContext.Property.init(_:)(0xD000000000000010, 0x800000000030DD10, v1);
}

id ASKBagContract.__allocating_init(_:)(uint64_t a1)
{
  objc_class *v1;
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  objc_super v9;

  v3 = (char *)objc_allocWithZone(v1);
  v4 = &v3[OBJC_IVAR____TtC8ShelfKit14ASKBagContract_bag];
  v5 = type metadata accessor for Bag(0);
  v6 = *(_QWORD *)(v5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v4, a1, v5);
  v9.receiver = v3;
  v9.super_class = v1;
  v7 = objc_msgSendSuper2(&v9, "init");
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
  return v7;
}

id ASKBagContract.init(_:)(uint64_t a1)
{
  char *v1;
  objc_class *ObjectType;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  objc_super v9;

  ObjectType = (objc_class *)swift_getObjectType(v1);
  v4 = &v1[OBJC_IVAR____TtC8ShelfKit14ASKBagContract_bag];
  v5 = type metadata accessor for Bag(0);
  v6 = *(_QWORD *)(v5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v4, a1, v5);
  v9.receiver = v1;
  v9.super_class = ObjectType;
  v7 = objc_msgSendSuper2(&v9, "init");
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
  return v7;
}

uint64_t ASKBagContract.amsBag.getter()
{
  return Bag.amsBag.getter();
}

uint64_t ASKBagContract.appScriptURL.getter()
{
  return sub_BE220(&kBagKeyAppScriptURL);
}

uint64_t ASKBagContract.language.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(char *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[2];

  v0 = type metadata accessor for Locale(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v6 = (char *)v20 - v5;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B70A8);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  Bag.subscript.getter(kBagKeyLanguage);
  Bag.Value.currentOrNil()(v7);
  v11 = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  if (v20[1])
    return v20[0];
  v13 = static Locale.current.getter(v11);
  v12 = Locale.languageCode.getter(v13);
  v15 = v14;
  v16 = *(uint64_t (**)(char *, uint64_t))(v1 + 8);
  v17 = v16(v6, v0);
  if (!v15)
  {
    v18 = static Locale.current.getter(v17);
    v12 = Locale.identifier.getter(v18);
    v16(v4, v0);
  }
  return v12;
}

uint64_t ASKBagContract.fetchTimeout.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;

  v0 = type metadata accessor for JSONTimeUnit(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = kBagKeyFetchTimeout;
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for JSONTimeUnit.seconds(_:), v0);
  Bag.subscript.getter(v4, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

double static ASKBagContract.defaultFetchTimeout.getter()
{
  return 20.0;
}

uint64_t ASKBagContract.searchUrl.getter()
{
  return sub_BE220(&kBagKeySearch);
}

uint64_t ASKBagContract.searchHintsUrl.getter()
{
  return sub_BE220(&kBagKeySearchHints);
}

uint64_t ASKBagContract.metricsConfiguration.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  _QWORD v5[2];

  v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B70B0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  Bag.subscript.getter(kBagKeyMetrics);
  Bag.Value.currentOrNil()(v0);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v5[1];
}

double ASKBagContract.sessionDurationLog.getter()
{
  return sub_BDF10(&kBagKeyMetricsSessionDurationLog, (uint64_t)sub_BDE30);
}

void sub_BDE30(_QWORD *a1@<X8>)
{
  *a1 = 0x404E000000000000;
}

double ASKBagContract.samplingPercentageUsersLog.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v5;
  double v6;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B70B8);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  Bag.subscript.getter(kBagKeyMetricsSamplingPercentageUsersLog);
  Bag.Value.current(or:)(&v6, sub_BDEF0, 0, v0);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v6;
}

void sub_BDEF0(_QWORD *a1@<X8>)
{
  *a1 = 0x3FF0000000000000;
}

double ASKBagContract.impressionableThreshold.getter()
{
  return sub_BDF10(&kBagKeyMetricsImpressionableThreshold, (uint64_t)sub_BDEF0);
}

double sub_BDF10(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v14;
  double v15;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B70B8);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for JSONTimeUnit(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *a1;
  (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for JSONTimeUnit.milliseconds(_:), v8);
  Bag.subscript.getter(v12, v11);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  Bag.Value.current(or:)(&v15, a2, 0, v4);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v15;
}

uint64_t ASKBagContract.viewPodcastDirectoryUrl.getter()
{
  return sub_BE220(&kBagKeyViewPodcastDirectoryURL);
}

uint64_t ASKBagContract.viewPodcastUrl.getter()
{
  return sub_BE220(&kBagKeyViewPodcastURL);
}

uint64_t ASKBagContract.topChartsUrl.getter()
{
  return sub_BE220(&kBagKeyTopChartsURL);
}

uint64_t ASKBagContract.libraryLinkUrl.getter()
{
  return sub_BE220(&kBagKeyLibraryLinkURL);
}

uint64_t ASKBagContract.showSearchTranscriptMessage.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v5;
  uint64_t v6;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B70C0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  Bag.subscript.getter(kBagKeyShowSearchTranscriptMessage);
  Bag.Value.current(or:)(&v6, sub_BE128, 0, v0);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v6;
}

void sub_BE128(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t ASKBagContract.followedShowsMetricsCadence.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v5;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B70A8);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  Bag.subscript.getter(kBagKeyFollowedShowsMetricsCadence);
  Bag.Value.currentOrNil()(v0);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v5;
}

uint64_t ASKBagContract.userRateUrl.getter()
{
  return sub_BE220(&kBagKeyUserRateURL);
}

uint64_t ASKBagContract.writeReviewUrl.getter()
{
  return sub_BE220(&kBagKeyWriteReviewURL);
}

uint64_t ASKBagContract.iForgotURL.getter()
{
  return sub_BE220(&kBagKeyiForgotUrl);
}

uint64_t ASKBagContract.accountUrl.getter()
{
  return sub_BE220(&kBagKeyAccountURL);
}

uint64_t ASKBagContract.addFundsUrl.getter()
{
  return sub_BE220(&kBagKeyAddFundsURL);
}

uint64_t ASKBagContract.manageSubscriptionsUrl.getter()
{
  return sub_BE220(&kBagKeyManageSubscriptionsURL);
}

uint64_t sub_BE220(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B70A0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  Bag.subscript.getter(*a1);
  Bag.Value.currentOrNil()(v2);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

void ASKBagContract.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("ShelfKit.ASKBagContract", 23, "init()", 6, 0);
  __break(1u);
}

uint64_t sub_BE35C()
{
  return type metadata accessor for ASKBagContract(0);
}

uint64_t type metadata accessor for ASKBagContract(uint64_t a1)
{
  uint64_t result;

  result = qword_3B70F0;
  if (!qword_3B70F0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ASKBagContract);
  return result;
}

uint64_t sub_BE3A0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for Bag(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 1, &v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for ASKBagContract(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for ASKBagContract);
}

void HighlightItem.type.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 32);
}

uint64_t HighlightItem.adamId.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 40);
}

uint64_t HighlightItem.icon.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_BE440(v1 + OBJC_IVAR____TtC8ShelfKit13HighlightItem_icon, a1);
}

uint64_t sub_BE440(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ArtworkModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t HighlightItem.title.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit13HighlightItem_title);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit13HighlightItem_title + 8));
  return v1;
}

uint64_t HighlightItem.subtitles.getter()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit13HighlightItem_subtitles));
}

uint64_t HighlightItem.clickAction.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_267BC(v1 + OBJC_IVAR____TtC8ShelfKit13HighlightItem_clickAction, a1, &qword_3B0C50);
}

uint64_t HighlightItem.playAction.getter()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit13HighlightItem_playAction));
}

uint64_t HighlightItem.impressionMetrics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_267BC(v1 + OBJC_IVAR____TtC8ShelfKit13HighlightItem_impressionMetrics, a1, (uint64_t *)&unk_3B8790);
}

uint64_t HighlightItem.shelfUniqueId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit13HighlightItem_shelfUniqueId);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit13HighlightItem_shelfUniqueId + 8));
  return v1;
}

uint64_t HighlightItem.__allocating_init(highlightIdentifier:type:adamId:icon:title:subtitles:playAction:clickAction:impressionMetrics:)(uint64_t a1, uint64_t a2, _BYTE *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v18;

  swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
  v18 = sub_BEB34(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
  swift_release(a9);
  return v18;
}

uint64_t HighlightItem.init(highlightIdentifier:type:adamId:icon:title:subtitles:playAction:clickAction:impressionMetrics:)(uint64_t a1, uint64_t a2, _BYTE *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;

  v11 = sub_BEB34(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
  swift_release(a9);
  return v11;
}

uint64_t HighlightItem.__allocating_init(deserializing:using:)(char *a1, uint64_t a2)
{
  return sub_BECE4(a1, a2);
}

void *HighlightItem.impressionableActions.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit13HighlightItem_playAction);
  if (v1)
  {
    v2 = swift_retain_n(v1, 2);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v2);
    v4 = *(_QWORD *)((char *)&dword_10 + ((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8));
    v3 = *(_QWORD *)((char *)&dword_18 + ((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8));
    if (v4 >= v3 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v3 > 1, v4 + 1, 1);
    v5 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v4, v1);
    specialized Array._endMutation()(v5);
  }
  swift_release(v1);
  return &_swiftEmptyArrayStorage;
}

uint64_t HighlightItem.highlight.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC8ShelfKit13HighlightItem_highlight);
  swift_beginAccess(v3, v6, 1, 0);
  v4 = *v3;
  *v3 = a1;
  return swift_release(v4);
}

uint64_t (*HighlightItem.highlight.modify(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC8ShelfKit13HighlightItem_highlight, a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t _s8ShelfKit13HighlightItemC9highlightAA0C0CSgvg_0()
{
  uint64_t v0;
  _QWORD *v1;
  _BYTE v3[24];

  v1 = (_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit13HighlightItem_highlight);
  swift_beginAccess(v0 + OBJC_IVAR____TtC8ShelfKit13HighlightItem_highlight, v3, 0, 0);
  return swift_retain(*v1);
}

uint64_t HighlightItem.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  sub_3E4A4(v0 + OBJC_IVAR____TtC8ShelfKit13HighlightItem_icon);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1459C(v0 + OBJC_IVAR____TtC8ShelfKit13HighlightItem_clickAction, &qword_3B0C50);
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit13HighlightItem_playAction));
  sub_1459C(v0 + OBJC_IVAR____TtC8ShelfKit13HighlightItem_impressionMetrics, (uint64_t *)&unk_3B8790);
  swift_bridgeObjectRelease();
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit13HighlightItem_highlight));
  return v0;
}

uint64_t HighlightItem.__deallocating_deinit()
{
  uint64_t v0;

  HighlightItem.deinit();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_BE8DC@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t result;

  result = sub_BECE4(a1, a2);
  if (!v3)
    *a3 = result;
  return result;
}

uint64_t sub_BE904@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return sub_267BC(*v1 + OBJC_IVAR____TtC8ShelfKit13HighlightItem_impressionMetrics, a1, (uint64_t *)&unk_3B8790);
}

uint64_t sub_BE934()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(*v0 + OBJC_IVAR____TtC8ShelfKit13HighlightItem_shelfUniqueId);
  v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

void *sub_BE970()
{
  return HighlightItem.impressionableActions.getter();
}

uint64_t sub_BE990()
{
  _QWORD *v0;
  _QWORD *v1;
  _BYTE v3[24];

  v1 = (_QWORD *)(*v0 + OBJC_IVAR____TtC8ShelfKit13HighlightItem_highlight);
  swift_beginAccess(v1, v3, 0, 0);
  return swift_retain(*v1);
}

uint64_t HighlightItem.subtitle.getter()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;

  swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit13HighlightItem_subtitles));
  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3BC430);
  v2 = sub_707E4();
  v3 = BidirectionalCollection<>.joined(separator:)(10, 0xE100000000000000, v1, v2);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t HighlightItem.artwork.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  sub_BE440(v1 + OBJC_IVAR____TtC8ShelfKit13HighlightItem_icon, a1);
  v3 = type metadata accessor for ArtworkModel(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(a1, 0, 1, v3);
}

uint64_t sub_BEAB0@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;

  sub_BE440(*v1 + OBJC_IVAR____TtC8ShelfKit13HighlightItem_icon, a1);
  v3 = type metadata accessor for ArtworkModel(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(a1, 0, 1, v3);
}

uint64_t sub_BEB04@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return sub_267BC(*v1 + OBJC_IVAR____TtC8ShelfKit13HighlightItem_clickAction, a1, &qword_3B0C50);
}

uint64_t sub_BEB34(uint64_t a1, uint64_t a2, _BYTE *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v12 = v11;
  v35 = a7;
  v36 = a8;
  v37 = a11;
  v33 = a6;
  v34 = a10;
  v18 = type metadata accessor for UUID(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v32 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(v20) = *a3;
  *(_QWORD *)(v11 + OBJC_IVAR____TtC8ShelfKit13HighlightItem_highlight) = 0;
  *(_QWORD *)(v11 + 16) = a1;
  *(_QWORD *)(v11 + 24) = a2;
  *(_BYTE *)(v11 + 32) = v20;
  *(_QWORD *)(v11 + 40) = a4;
  sub_BE440(a5, v11 + OBJC_IVAR____TtC8ShelfKit13HighlightItem_icon);
  v22 = (_QWORD *)(v11 + OBJC_IVAR____TtC8ShelfKit13HighlightItem_title);
  v23 = v34;
  v24 = v35;
  *v22 = v33;
  v22[1] = v24;
  *(_QWORD *)(v11 + OBJC_IVAR____TtC8ShelfKit13HighlightItem_subtitles) = v36;
  sub_267BC(v23, v11 + OBJC_IVAR____TtC8ShelfKit13HighlightItem_clickAction, &qword_3B0C50);
  *(_QWORD *)(v11 + OBJC_IVAR____TtC8ShelfKit13HighlightItem_playAction) = a9;
  v25 = v37;
  sub_267BC(v37, v11 + OBJC_IVAR____TtC8ShelfKit13HighlightItem_impressionMetrics, (uint64_t *)&unk_3B8790);
  v26 = swift_retain(a9);
  UUID.init()(v26);
  v27 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
  v29 = v28;
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  sub_1459C(v25, (uint64_t *)&unk_3B8790);
  sub_1459C(v23, &qword_3B0C50);
  sub_3E4A4(a5);
  v30 = (uint64_t *)(v12 + OBJC_IVAR____TtC8ShelfKit13HighlightItem_shelfUniqueId);
  *v30 = v27;
  v30[1] = v29;
  return v12;
}

uint64_t sub_BECE4(char *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t);
  unint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t);
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  void (*v72)(char *, uint64_t, uint64_t);
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  _QWORD *v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t Instance15byDeserializing5usingACSg9JetEngine10JSONObjectV_AH11JSONContextVtFZ_0;
  uint64_t v110;
  void (*v111)(uint64_t, uint64_t);
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  void (*v127)(char *, uint64_t, uint64_t);
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  char *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  void (*v144)(char *, uint64_t);
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  __int128 v148;
  __int128 v149;
  uint64_t v150;
  char v151;

  v146 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  v4 = __chkstk_darwin(v3);
  v129 = (uint64_t)&v126 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v130 = (char *)&v126 - v6;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4F30);
  __chkstk_darwin(v7);
  v133 = (char *)&v126 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v147 = type metadata accessor for JSONContext(0);
  v145 = *(_QWORD *)(v147 - 8);
  __chkstk_darwin(v147);
  v140 = (char *)&v126 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
  __chkstk_darwin(v10);
  v138 = (char *)&v126 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for ArtworkModel(0);
  v136 = *(_QWORD *)(v12 - 8);
  v137 = v12;
  v13 = __chkstk_darwin(v12);
  v131 = (uint64_t)&v126 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v135 = (uint64_t)&v126 - v15;
  v16 = type metadata accessor for JSONObject(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v132 = (char *)&v126 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v18);
  v134 = (uint64_t)&v126 - v21;
  v22 = __chkstk_darwin(v20);
  v139 = (char *)&v126 - v23;
  v24 = __chkstk_darwin(v22);
  v26 = (char *)&v126 - v25;
  v27 = __chkstk_darwin(v24);
  v29 = (char *)&v126 - v28;
  __chkstk_darwin(v27);
  v31 = (char *)&v126 - v30;
  v32 = a1;
  v33 = JSONObject.subscript.getter(0xD000000000000013, 0x800000000030DDC0);
  v128 = JSONObject.string.getter(v33);
  v35 = v34;
  v36 = *(void (**)(char *, uint64_t))(v17 + 8);
  v36(v31, v16);
  if (!v35)
  {
    v43 = type metadata accessor for JSONError(0);
    v49 = sub_F1C0((unint64_t *)&qword_3B0CB0, (void (*)(uint64_t))&type metadata accessor for JSONError, (uint64_t)&protocol conformance descriptor for JSONError);
    swift_allocError(v43, v49, 0, 0);
    v51 = v50;
    v52 = type metadata accessor for HighlightItem(0);
    *v51 = 0xD000000000000013;
    v51[1] = 0x800000000030DDC0;
    v51[2] = v52;
    v53 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v43 - 8) + 104))(v51, enum case for JSONError.missingProperty(_:), v43);
    swift_willThrow(v53);
    (*(void (**)(uint64_t, uint64_t))(v145 + 8))(v146, v147);
    v54 = v32;
    v55 = v16;
LABEL_5:
    v36(v54, v55);
    return v43;
  }
  v141 = v35;
  v142 = v16;
  v144 = v36;
  JSONObject.subscript.getter(1701869940, 0xE400000000000000);
  v37 = sub_BFAF4();
  v38 = v143;
  JSONObject.stringEnum<A>()(&v148, &type metadata for HighlightType, v37);
  v39 = v32;
  if (v38)
  {
    swift_bridgeObjectRelease();
    swift_errorRelease(v38);
    v40 = v29;
    v41 = v142;
    v42 = v144;
    v144(v40, v142);
    v43 = type metadata accessor for JSONError(0);
    v44 = sub_F1C0((unint64_t *)&qword_3B0CB0, (void (*)(uint64_t))&type metadata accessor for JSONError, (uint64_t)&protocol conformance descriptor for JSONError);
    swift_allocError(v43, v44, 0, 0);
    v46 = v45;
    v47 = type metadata accessor for HighlightItem(0);
    *v46 = 1701869940;
    v46[1] = 0xE400000000000000;
    v46[2] = v47;
    v48 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v43 - 8) + 104))(v46, enum case for JSONError.missingProperty(_:), v43);
    swift_willThrow(v48);
    (*(void (**)(uint64_t, uint64_t))(v145 + 8))(v146, v147);
    v42(v32, v41);
    return v43;
  }
  v57 = v142;
  v36 = v144;
  v144(v29, v142);
  v58 = v148;
  v59 = JSONObject.subscript.getter(0x64496D616461, 0xE600000000000000);
  v60 = JSONObject.string.getter(v59);
  if (!v61)
  {
    v36(v26, v57);
    swift_bridgeObjectRelease();
    v64 = v39;
    v43 = type metadata accessor for JSONError(0);
    v65 = sub_F1C0((unint64_t *)&qword_3B0CB0, (void (*)(uint64_t))&type metadata accessor for JSONError, (uint64_t)&protocol conformance descriptor for JSONError);
    swift_allocError(v43, v65, 0, 0);
    v67 = v66;
    v68 = type metadata accessor for HighlightItem(0);
    *v67 = 0x64496D616461;
    v67[1] = 0xE600000000000000;
    v67[2] = v68;
    v69 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v43 - 8) + 104))(v67, enum case for JSONError.missingProperty(_:), v43);
    swift_willThrow(v69);
    (*(void (**)(uint64_t, uint64_t))(v145 + 8))(v146, v147);
    v54 = v64;
    v55 = v57;
    goto LABEL_5;
  }
  v62 = static AdamID.parse(_:)(v60, v61);
  v63 = v145;
  LODWORD(v143) = v58;
  v126 = v62;
  swift_bridgeObjectRelease();
  v70 = v147;
  v144(v26, v57);
  v71 = v139;
  JSONObject.subscript.getter(1852793705, 0xE400000000000000);
  v72 = *(void (**)(char *, uint64_t, uint64_t))(v63 + 16);
  v73 = v140;
  v74 = v63;
  v75 = v146;
  v127 = v72;
  v72(v140, v146, v70);
  sub_F1C0((unint64_t *)&qword_3B2828, (void (*)(uint64_t))&type metadata accessor for ArtworkModel, (uint64_t)&protocol conformance descriptor for ArtworkModel);
  v76 = (uint64_t)v138;
  v77 = v71;
  v78 = v137;
  ExpressibleByJSON.init(tryDeserializing:using:)(v77, v73, v137);
  v79 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v136 + 48))(v76, 1, v78);
  v80 = v57;
  if (v79 == 1)
  {
    v81 = v70;
    swift_bridgeObjectRelease();
    sub_1459C(v76, &qword_3BEB70);
    v82 = v39;
    v43 = type metadata accessor for JSONError(0);
    v83 = sub_F1C0((unint64_t *)&qword_3B0CB0, (void (*)(uint64_t))&type metadata accessor for JSONError, (uint64_t)&protocol conformance descriptor for JSONError);
    swift_allocError(v43, v83, 0, 0);
    v85 = v84;
    v86 = type metadata accessor for HighlightItem(0);
    *v85 = 1852793705;
    v85[1] = 0xE400000000000000;
    v85[2] = v86;
    v87 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v43 - 8) + 104))(v85, enum case for JSONError.missingProperty(_:), v43);
    swift_willThrow(v87);
    (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v75, v81);
    v144(v82, v80);
    return v43;
  }
  v88 = v135;
  sub_14614(v76, v135);
  v89 = v134;
  v90 = JSONObject.subscript.getter(0x656C746974, 0xE500000000000000);
  v91 = JSONObject.string.getter(v90);
  v93 = v92;
  v144((char *)v89, v57);
  if (!v93)
  {
    swift_bridgeObjectRelease();
    v99 = v39;
    v43 = type metadata accessor for JSONError(0);
    v100 = sub_F1C0((unint64_t *)&qword_3B0CB0, (void (*)(uint64_t))&type metadata accessor for JSONError, (uint64_t)&protocol conformance descriptor for JSONError);
    swift_allocError(v43, v100, 0, 0);
    v102 = v101;
    v103 = type metadata accessor for HighlightItem(0);
    *v102 = 0x656C746974;
    v102[1] = 0xE500000000000000;
    v102[2] = v103;
    v104 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v43 - 8) + 104))(v102, enum case for JSONError.missingProperty(_:), v43);
    swift_willThrow(v104);
    (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v146, v147);
    v144(v99, v57);
    v105 = v88;
LABEL_21:
    sub_3E4A4(v105);
    return v43;
  }
  v137 = v91;
  v138 = v39;
  v94 = v132;
  v95 = JSONObject.subscript.getter(0x656C746974627573, 0xE900000000000073);
  v96 = (uint64_t)v133;
  JSONObject.array.getter(v95);
  v144(v94, v80);
  v97 = type metadata accessor for JSONArray(0);
  v98 = *(_QWORD *)(v97 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v98 + 48))(v96, 1, v97) == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1459C(v96, &qword_3B4F30);
LABEL_20:
    v43 = type metadata accessor for JSONError(0);
    v116 = sub_F1C0((unint64_t *)&qword_3B0CB0, (void (*)(uint64_t))&type metadata accessor for JSONError, (uint64_t)&protocol conformance descriptor for JSONError);
    swift_allocError(v43, v116, 0, 0);
    v118 = v117;
    v119 = type metadata accessor for HighlightItem(0);
    *v118 = 0x656C746974627573;
    v118[1] = 0xE900000000000073;
    v118[2] = v119;
    v120 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v43 - 8) + 104))(v118, enum case for JSONError.missingProperty(_:), v43);
    swift_willThrow(v120);
    (*(void (**)(uint64_t, uint64_t))(v145 + 8))(v146, v147);
    v144(v138, v142);
    v105 = v135;
    goto LABEL_21;
  }
  v106 = JSONArray.bridgedPrimitiveValues<A>()(&type metadata for String);
  (*(void (**)(uint64_t, uint64_t))(v98 + 8))(v96, v97);
  if (!v106)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  v136 = v106;
  v107 = (uint64_t)v139;
  JSONObject.subscript.getter(0x7463416B63696C63, 0xEB000000006E6F69);
  v108 = v146;
  Instance15byDeserializing5usingACSg9JetEngine10JSONObjectV_AH11JSONContextVtFZ_0 = _s8ShelfKit6ActionC17tryToMakeInstance15byDeserializing5usingACSg9JetEngine10JSONObjectV_AH11JSONContextVtFZ_0(v107, v146);
  v110 = v142;
  v111 = (void (*)(uint64_t, uint64_t))v144;
  v144((char *)v107, v142);
  JSONObject.subscript.getter(0x6974634179616C70, 0xEA00000000006E6FLL);
  v134 = _s8ShelfKit6ActionC17tryToMakeInstance15byDeserializing5usingACSg9JetEngine10JSONObjectV_AH11JSONContextVtFZ_0(v107, v108);
  v111(v107, v110);
  v112 = type metadata accessor for ImpressionMetrics(0);
  JSONObject.subscript.getter(0xD000000000000011, 0x8000000000309180);
  v113 = v140;
  v127(v140, v108, v147);
  v114 = (uint64_t)v130;
  ExpressibleByJSON.init(tryDeserializing:using:)(v107, v113, v112);
  v151 = v143;
  v115 = v135;
  sub_BE440(v135, v131);
  if (Instance15byDeserializing5usingACSg9JetEngine10JSONObjectV_AH11JSONContextVtFZ_0)
  {
    *((_QWORD *)&v149 + 1) = type metadata accessor for Action(0);
    v150 = sub_F1C0((unint64_t *)&qword_3B28E8, (void (*)(uint64_t))type metadata accessor for Action, (uint64_t)&protocol conformance descriptor for Action);
    *(_QWORD *)&v148 = Instance15byDeserializing5usingACSg9JetEngine10JSONObjectV_AH11JSONContextVtFZ_0;
  }
  else
  {
    v150 = 0;
    v148 = 0u;
    v149 = 0u;
  }
  v121 = v136;
  v122 = v129;
  sub_267BC(v114, v129, (uint64_t *)&unk_3B8790);
  v123 = type metadata accessor for HighlightItem(0);
  swift_allocObject(v123, *(unsigned int *)(v123 + 48), *(unsigned __int16 *)(v123 + 52));
  v125 = v122;
  v124 = v134;
  v43 = sub_BEB34(v128, v141, &v151, v126, v131, v137, v93, v121, v134, (uint64_t)&v148, v125);
  swift_release(v124);
  (*(void (**)(uint64_t, uint64_t))(v145 + 8))(v108, v147);
  v144(v138, v142);
  sub_1459C(v114, (uint64_t *)&unk_3B8790);
  sub_3E4A4(v115);
  return v43;
}

uint64_t sub_BF93C(uint64_t a1)
{
  uint64_t result;

  result = sub_F1C0(&qword_3B7100, (void (*)(uint64_t))type metadata accessor for HighlightItem, (uint64_t)&protocol conformance descriptor for HighlightItem);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for HighlightItem(uint64_t a1)
{
  uint64_t result;

  result = qword_3B7138;
  if (!qword_3B7138)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for HighlightItem);
  return result;
}

uint64_t sub_BF9B4(uint64_t a1)
{
  uint64_t result;

  result = sub_F1C0(&qword_3B7108, (void (*)(uint64_t))type metadata accessor for HighlightItem, (uint64_t)&protocol conformance descriptor for HighlightItem);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_BF9F0()
{
  return type metadata accessor for HighlightItem(0);
}

void sub_BF9F8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[11];

  v6[0] = &unk_2F2DC8;
  v6[1] = &unk_2F2DE0;
  v6[2] = (char *)&value witness table for Builtin.Int64 + 64;
  v2 = type metadata accessor for ArtworkModel(319);
  if (v3 <= 0x3F)
  {
    v6[3] = *(_QWORD *)(v2 - 8) + 64;
    v6[4] = &unk_2F2DC8;
    v6[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v6[6] = &unk_2F2DF8;
    v6[7] = &unk_2F2E10;
    sub_34090(319);
    if (v5 <= 0x3F)
    {
      v6[8] = *(_QWORD *)(v4 - 8) + 64;
      v6[9] = &unk_2F2DC8;
      v6[10] = &unk_2F2E10;
      swift_updateClassMetadata2(a1, 256, 11, v6, a1 + 80);
    }
  }
}

uint64_t method lookup function for HighlightItem(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for HighlightItem);
}

uint64_t dispatch thunk of HighlightItem.__allocating_init(highlightIdentifier:type:adamId:icon:title:subtitles:playAction:clickAction:impressionMetrics:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 168))();
}

unint64_t sub_BFAF4()
{
  unint64_t result;

  result = qword_3B7218;
  if (!qword_3B7218)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for HighlightType);
    atomic_store(result, (unint64_t *)&qword_3B7218);
  }
  return result;
}

uint64_t SearchHintsPage.pageMetrics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SearchHintsPage(0) + 24);
  v4 = type metadata accessor for PageMetrics(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for SearchHintsPage(uint64_t a1)
{
  uint64_t result;

  result = qword_3B7278;
  if (!qword_3B7278)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SearchHintsPage);
  return result;
}

uint64_t SearchHintsPage.init(hints:shelves:pageMetrics:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  char *v5;
  uint64_t v6;

  *a4 = a1;
  a4[1] = a2;
  v5 = (char *)a4 + *(int *)(type metadata accessor for SearchHintsPage(0) + 24);
  v6 = type metadata accessor for PageMetrics(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(v5, a3, v6);
}

uint64_t sub_BFC10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 24);
  v5 = type metadata accessor for PageMetrics(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t SearchHintsPage.init(deserializing:using:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  _QWORD *v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;

  v41 = a3;
  v5 = type metadata accessor for PageMetrics(0);
  v39 = *(_QWORD *)(v5 - 8);
  v40 = v5;
  __chkstk_darwin(v5);
  v45 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for JSONContext(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v44 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v42 = (char *)&v38 - v12;
  __chkstk_darwin(v11);
  v14 = (char *)&v38 - v13;
  v15 = type metadata accessor for JSONObject(0);
  v47 = *(_QWORD *)(v15 - 8);
  v48 = v15;
  v16 = __chkstk_darwin(v15);
  v43 = (char *)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v38 - v19;
  __chkstk_darwin(v18);
  v22 = (char *)&v38 - v21;
  v23 = a1;
  JSONObject.subscript.getter(0x73746E6968, 0xE500000000000000);
  v49 = v8;
  v24 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v24(v14, a2, v7);
  v25 = type metadata accessor for SearchHint(0);
  v26 = sub_F1C0(&qword_3B5C78, (void (*)(uint64_t))type metadata accessor for SearchHint, (uint64_t)&protocol conformance descriptor for SearchHint);
  v27 = v46;
  v28 = Array<A>.init(deserializing:using:)(v22, v14, v25, v26);
  if (v27)
  {
    (*(void (**)(uint64_t, uint64_t))(v49 + 8))(a2, v7);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v47 + 8))(v23, v48);
  }
  else
  {
    v46 = v28;
    v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0AD8);
    JSONObject.subscript.getter(0x7365766C656873, 0xE700000000000000);
    v30 = v42;
    v24(v42, a2, v7);
    sub_14160();
    ExpressibleByJSON.init(tryDeserializing:using:)(v20, v30, v29);
    if (v50)
      v31 = v50;
    else
      v31 = _swiftEmptyArrayStorage;
    v32 = v43;
    JSONObject.subscript.getter(0x7274654D65676170, 0xEB00000000736369);
    v33 = v44;
    v24(v44, a2, v7);
    v34 = v45;
    PageMetrics.init(deserializing:using:)(v32, v33);
    (*(void (**)(uint64_t, uint64_t))(v49 + 8))(a2, v7);
    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v23, v48);
    v35 = v41;
    *v41 = v46;
    v35[1] = (uint64_t)v31;
    v36 = type metadata accessor for SearchHintsPage(0);
    return (*(uint64_t (**)(char *, char *, uint64_t))(v39 + 32))((char *)v35 + *(int *)(v36 + 24), v34, v40);
  }
}

uint64_t sub_BFFB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return SearchHintsPage.init(deserializing:using:)(a1, a2, a3);
}

uint64_t *initializeBufferWithCopyOfBuffer for SearchHintsPage(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain(v4);
  }
  else
  {
    v5 = a1;
    v6 = a2[1];
    a1[1] = v6;
    v7 = *(int *)(a3 + 24);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for PageMetrics(0);
    v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    swift_bridgeObjectRetain(v4);
    swift_bridgeObjectRetain(v6);
    v11(v8, v9, v10);
  }
  return v5;
}

uint64_t destroy for SearchHintsPage(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*a1);
  swift_bridgeObjectRelease(a1[1]);
  v4 = (char *)a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for PageMetrics(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t *initializeWithCopy for SearchHintsPage(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);

  v4 = *a2;
  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for PageMetrics(0);
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  v10(v7, v8, v9);
  return a1;
}

uint64_t *assignWithCopy for SearchHintsPage(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a2[1];
  v9 = a1[1];
  a1[1] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = *(int *)(a3 + 24);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for PageMetrics(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

_OWORD *initializeWithTake for SearchHintsPage(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 24);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for PageMetrics(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t *assignWithTake for SearchHintsPage(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  v7 = a1[1];
  a1[1] = a2[1];
  swift_bridgeObjectRelease(v7);
  v8 = *(int *)(a3 + 24);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for PageMetrics(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for SearchHintsPage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_C02BC);
}

uint64_t sub_C02BC(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for PageMetrics(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 24)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for SearchHintsPage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_C0344);
}

char *sub_C0344(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for PageMetrics(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 24)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_C03B8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  result = type metadata accessor for PageMetrics(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t static ShelfSwiftUICell.modelType.getter(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a2, a1, &protocol requirements base descriptor for ShelfSwiftUICell, &associated type descriptor for ShelfSwiftUICell.ModelType);
  swift_getAssociatedConformanceWitness(a2, a1, AssociatedTypeWitness, &protocol requirements base descriptor for ShelfSwiftUICell, &associated conformance descriptor for ShelfSwiftUICell.ShelfSwiftUICell.ModelType: ModernShelfItem);
  return AssociatedTypeWitness;
}

void sub_C0498(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::String v6;
  uint64_t MetatypeMetadata;
  Swift::String v8;
  Swift::String v9;
  uint64_t AssociatedTypeWitness;
  Swift::String v11;
  Swift::String v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  v14 = 0;
  v15 = 0xE000000000000000;
  _StringGuts.grow(_:)(52);
  v6._object = (void *)0x800000000030DE00;
  v6._countAndFlagsBits = 0xD00000000000001ALL;
  String.append(_:)(v6);
  MetatypeMetadata = swift_getMetatypeMetadata(a2);
  v8._countAndFlagsBits = _typeName(_:qualified:)(MetatypeMetadata, 0);
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 0x7374636570786520;
  v9._object = (void *)0xE900000000000020;
  String.append(_:)(v9);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a3, a2);
  v11._countAndFlagsBits = _typeName(_:qualified:)(AssociatedTypeWitness, 0);
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 0x766965636572202CLL;
  v12._object = (void *)0xEB00000000206465;
  String.append(_:)(v12);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0A50);
  _print_unlocked<A, B>(_:_:)(a1, &v14, v13, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v14, v15, "ShelfKit/ShelfSwiftUICell.swift", 31, 2, 48, 0);
  __break(1u);
}

uint64_t ShelfSwiftUICell.init(presentation:model:)@<X0>(char *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _BYTE v37[2];
  int v38;
  char v39;
  char v40;
  uint64_t v41;

  v33 = a5;
  v34 = a3;
  v35 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a4, a3);
  v8 = type metadata accessor for Optional(0, AssociatedTypeWitness);
  v29 = *(_QWORD *)(v8 - 8);
  v30 = v8;
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v28 - v10;
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v13 = __chkstk_darwin(v9);
  v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v28 - v16;
  v18 = *a1;
  v19 = a1[6];
  v20 = *(unsigned int *)(a1 + 2);
  v21 = a1[7];
  v31 = a1[1];
  v32 = v21;
  v22 = *((_QWORD *)a1 + 1);
  v36 = a2;
  sub_150C8((uint64_t)a2, (uint64_t)v37);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0A50);
  v24 = swift_dynamicCast(v11, v37, v23, AssociatedTypeWitness, 6);
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56);
  if ((v24 & 1) == 0)
  {
    v25(v11, 1, 1, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v11, v30);
    sub_C0498((uint64_t)v36, v34, v35);
  }
  v26 = v20 | (v19 << 32);
  v25(v11, 0, 1, AssociatedTypeWitness);
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v17, v11, AssociatedTypeWitness);
  v37[0] = v18;
  v37[1] = v31;
  v39 = BYTE4(v26);
  v38 = v26;
  v40 = v32;
  v41 = v22;
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v17, AssociatedTypeWitness);
  (*(void (**)(_BYTE *, char *, uint64_t))(v35 + 40))(v37, v15, v34);
  __swift_destroy_boxed_opaque_existential_1(v36);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v17, AssociatedTypeWitness);
}

uint64_t static ShelfSwiftUICell.interactionContextView(presentation:model:)(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  void (*v21)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[2];
  int v32;
  char v33;
  char v34;
  uint64_t v35;

  v29 = a4;
  v30 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a4, a3);
  v7 = type metadata accessor for Optional(0, AssociatedTypeWitness);
  v25 = *(_QWORD *)(v7 - 8);
  v26 = v7;
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v25 - v9;
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(v8);
  v13 = (char *)&v25 - v12;
  v14 = *a1;
  v15 = a1[1];
  v16 = a1[6];
  v17 = *(unsigned int *)(a1 + 2);
  v28 = a1[7];
  v18 = *((_QWORD *)a1 + 1);
  v27 = a2;
  sub_150C8(a2, (uint64_t)v31);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0A50);
  v20 = swift_dynamicCast(v10, v31, v19, AssociatedTypeWitness, 6);
  v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
  if (!v20)
  {
    v21(v10, 1, 1, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v25 + 8))(v10, v26);
    sub_C0498(v27, v30, v29);
  }
  v22 = v17 | (v16 << 32);
  v21(v10, 0, 1, AssociatedTypeWitness);
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v10, AssociatedTypeWitness);
  v31[0] = v14;
  v31[1] = v15;
  v33 = BYTE4(v22);
  v32 = v22;
  v34 = v28;
  v35 = v18;
  v23 = (*(uint64_t (**)(_BYTE *, char *, uint64_t))(v29 + 48))(v31, v13, v30);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
  return v23;
}

uint64_t dispatch thunk of Observer.didChange.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

uint64_t dispatch thunk of LibraryActionControllerProtocol.unsubscribe(podcast:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 48))();
}

unint64_t static FetchMoreOfPageIntent.kind.getter()
{
  return 0xD000000000000015;
}

uint64_t _CachableValueContainer.object.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for JSONObject(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t FetchMoreOfPageIntent.init(token:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = type metadata accessor for JSONObject(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
}

uint64_t sub_C0A94()
{
  return 0x6E656B6F74;
}

uint64_t sub_C0AA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x6E656B6F74 && a2 == 0xE500000000000000)
  {
    result = swift_bridgeObjectRelease(0xE500000000000000);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E656B6F74, 0xE500000000000000, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_C0B34(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_C0CB4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_C0B5C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_C0CB4();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_C0B84(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000015;
  a1[1] = 0x80000000002F2ED0;
}

uint64_t FetchMoreOfPageIntent.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B72B8);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v8);
  v10 = sub_C0CB4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for FetchMoreOfPageIntent.CodingKeys, &type metadata for FetchMoreOfPageIntent.CodingKeys, v10, v8, v9);
  type metadata accessor for JSONObject(0);
  sub_F1C0(&qword_3B72C8, (void (*)(uint64_t))&type metadata accessor for JSONObject, (uint64_t)&protocol conformance descriptor for JSONObject);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v2);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_C0CB4()
{
  unint64_t result;

  result = qword_3B72C0;
  if (!qword_3B72C0)
  {
    result = swift_getWitnessTable(&unk_2F30C4);
    atomic_store(result, (unint64_t *)&qword_3B72C0);
  }
  return result;
}

uint64_t sub_C0CF8()
{
  return sub_F1C0(&qword_3B72D0, (void (*)(uint64_t))type metadata accessor for FetchMoreOfPageIntent, (uint64_t)&protocol conformance descriptor for FetchMoreOfPageIntent);
}

uint64_t type metadata accessor for FetchMoreOfPageIntent(uint64_t a1)
{
  uint64_t result;

  result = qword_3B7338;
  if (!qword_3B7338)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for FetchMoreOfPageIntent);
  return result;
}

uint64_t sub_C0D60()
{
  return sub_F1C0(&qword_3B72D8, (void (*)(uint64_t))type metadata accessor for FetchMoreOfPageIntent, (uint64_t)&protocol conformance descriptor for FetchMoreOfPageIntent);
}

uint64_t sub_C0D8C()
{
  return sub_F1C0((unint64_t *)&qword_3B1B78, (void (*)(uint64_t))type metadata accessor for Page, (uint64_t)&protocol conformance descriptor for Page);
}

uint64_t sub_C0DB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_F1C0(&qword_3B7388, (void (*)(uint64_t))type metadata accessor for FetchMoreOfPageIntent, (uint64_t)&protocol conformance descriptor for FetchMoreOfPageIntent);
  return CustomJSValueConvertible<>.jsRepresentation(in:)(a1, a2, a3, v6);
}

uint64_t initializeBufferWithCopyOfBuffer for FetchMoreOfPageIntent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for JSONObject(0);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t destroy for FetchMoreOfPageIntent(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for JSONObject(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t initializeWithCopy for FetchMoreOfPageIntent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for JSONObject(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for FetchMoreOfPageIntent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for JSONObject(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for FetchMoreOfPageIntent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for JSONObject(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for FetchMoreOfPageIntent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for JSONObject(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for FetchMoreOfPageIntent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_C0FB8);
}

uint64_t sub_C0FB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for JSONObject(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for FetchMoreOfPageIntent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_C1000);
}

uint64_t sub_C1000(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for JSONObject(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_C1040(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for JSONObject(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FetchMoreOfPageIntent.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_C10E8 + 4 * asc_2F2EE0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_C1108 + 4 * byte_2F2EE5[v4]))();
}

_BYTE *sub_C10E8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_C1108(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_C1110(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_C1118(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_C1120(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_C1128(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for FetchMoreOfPageIntent.CodingKeys()
{
  return &type metadata for FetchMoreOfPageIntent.CodingKeys;
}

unint64_t sub_C1148()
{
  unint64_t result;

  result = qword_3B7370;
  if (!qword_3B7370)
  {
    result = swift_getWitnessTable(&unk_2F309C);
    atomic_store(result, (unint64_t *)&qword_3B7370);
  }
  return result;
}

unint64_t sub_C1190()
{
  unint64_t result;

  result = qword_3B7378;
  if (!qword_3B7378)
  {
    result = swift_getWitnessTable(&unk_2F300C);
    atomic_store(result, (unint64_t *)&qword_3B7378);
  }
  return result;
}

unint64_t sub_C11D8()
{
  unint64_t result;

  result = qword_3B7380;
  if (!qword_3B7380)
  {
    result = swift_getWitnessTable(&unk_2F3034);
    atomic_store(result, (unint64_t *)&qword_3B7380);
  }
  return result;
}

uint64_t ChannelPresenter.pageContent.getter()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 160, v2, 0, 0);
  return swift_retain(*(_QWORD *)(v0 + 160));
}

uint64_t ChannelPresenter.pageContent.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + 160, v5, 1, 0);
  v3 = *(_QWORD *)(v1 + 160);
  *(_QWORD *)(v1 + 160) = a1;
  return swift_release(v3);
}

uint64_t (*ChannelPresenter.pageContent.modify(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + 160, a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t ChannelPresenter.headerButtonItems.getter()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 168, v2, 0, 0);
  return swift_retain(*(_QWORD *)(v0 + 168));
}

uint64_t ChannelPresenter.headerButtonItems.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + 168, v5, 1, 0);
  v3 = *(_QWORD *)(v1 + 168);
  *(_QWORD *)(v1 + 168) = a1;
  return swift_release(v3);
}

uint64_t (*ChannelPresenter.headerButtonItems.modify(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + 168, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t SeeAllEpisodesPresenter.pageContent.getter()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + 176));
}

uint64_t sub_C138C()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_2F32E0);
  v2 = swift_getKeyPath(&unk_2F3308);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

uint64_t ChannelPresenter.interactionContextPage.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_14510(v1 + OBJC_IVAR____TtC8ShelfKit16ChannelPresenter_interactionContextPage, a1, (uint64_t (*)(_QWORD))&type metadata accessor for InteractionContext.Page);
}

uint64_t ChannelPresenter.__allocating_init(asPartOf:with:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  ChannelPresenter.init(asPartOf:with:)(a1, a2);
  return v5;
}

uint64_t ChannelPresenter.init(asPartOf:with:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  int *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t, uint64_t, int *);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void *v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned __int8 v65;
  uint64_t v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  __int128 v84;
  void (*v85)(uint64_t, uint64_t, uint64_t, int *);
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v113;
  uint64_t v114;
  Class v115;
  uint64_t v116;
  unint64_t v117;
  void (*v118)(void);
  _QWORD *v119;
  void (*v120)(uint64_t, uint64_t, uint64_t, int *);
  uint64_t v121;
  uint64_t v122;
  char *v123;
  _BYTE *v124;
  char *v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char v144[8];
  __int128 v145;
  __int128 v146;
  uint64_t v147;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2B18);
  __chkstk_darwin(v6);
  v139 = (char *)&v113 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7390);
  v134 = *(_QWORD *)(v8 - 8);
  v135 = v8;
  __chkstk_darwin(v8);
  v133 = (char *)&v113 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7398);
  v137 = *(_QWORD *)(v10 - 8);
  v138 = v10;
  __chkstk_darwin(v10);
  v136 = (char *)&v113 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B73A0);
  v141 = *(_QWORD *)(v12 - 8);
  v142 = v12;
  __chkstk_darwin(v12);
  v140 = (char *)&v113 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v128 = type metadata accessor for ModernShelf(0);
  v143 = *(_QWORD *)(v128 - 8);
  __chkstk_darwin(v128);
  v127 = (char *)&v113 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
  __chkstk_darwin(v15);
  v125 = (char *)&v113 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0C38);
  __chkstk_darwin(v17);
  v123 = (char *)&v113 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8660);
  __chkstk_darwin(v19);
  v126 = (uint64_t)&v113 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v21);
  v130 = (uint64_t)&v113 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
  v24 = __chkstk_darwin(v23);
  v121 = (uint64_t)&v113 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v129 = (char *)&v113 - v26;
  v131 = type metadata accessor for InteractionContext.Page(0);
  __chkstk_darwin(v131);
  v28 = (char *)&v113 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B73A8);
  v30 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v32 = (char *)&v113 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = type metadata accessor for PageContent(0);
  __chkstk_darwin(v33);
  v35 = (char *)&v113 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = *a2;
  *(_QWORD *)(v3 + 144) = _swiftEmptyArrayStorage;
  *(_QWORD *)(v3 + 152) = _swiftEmptyArrayStorage;
  v132 = v3 + 152;
  *v35 = 0;
  swift_storeEnumTagMultiPayload(v35, v37, 0);
  v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B27B0);
  swift_allocObject(v38, *(unsigned int *)(v38 + 48), *(unsigned __int16 *)(v38 + 52));
  v124 = v35;
  v39 = v35;
  v40 = (int *)v128;
  *(_QWORD *)(v3 + 160) = CurrentValueSubject.init(_:)(v39);
  v122 = v3 + 160;
  *(_QWORD *)&v145 = _swiftEmptyArrayStorage;
  v41 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8780);
  swift_allocObject(v41, *(unsigned int *)(v41 + 48), *(unsigned __int16 *)(v41 + 52));
  *(_QWORD *)(v3 + 168) = CurrentValueSubject.init(_:)(&v145);
  v145 = 0uLL;
  LODWORD(v146) = 0;
  BYTE4(v146) = 5;
  v42 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8770);
  swift_allocObject(v42, *(unsigned int *)(v42 + 48), *(unsigned __int16 *)(v42 + 52));
  *(_QWORD *)(v3 + 176) = CurrentValueSubject.init(_:)(&v145);
  v43 = v3 + OBJC_IVAR____TtC8ShelfKit16ChannelPresenter__storePage;
  v44 = type metadata accessor for Page(0);
  Loadable.init()(&v145, v44);
  v45 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B73B8);
  Published.init(initialValue:)(&v145, v45);
  (*(void (**)(uint64_t, char *, uint64_t))(v30 + 32))(v43, v32, v29);
  v46 = *(void (**)(uint64_t, uint64_t, uint64_t, int *))(v143 + 56);
  v46(v3 + OBJC_IVAR____TtC8ShelfKit16ChannelPresenter_headerShelf, 1, 1, v40);
  v46(v3 + OBJC_IVAR____TtC8ShelfKit16ChannelPresenter_storeErrorShelf, 1, 1, v40);
  v47 = OBJC_IVAR____TtC8ShelfKit16ChannelPresenter_storeShelves;
  v48 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3BF7B0);
  Loadable.init()(&v145, v48);
  *(_QWORD *)(v3 + v47) = v145;
  v46(v3 + OBJC_IVAR____TtC8ShelfKit16ChannelPresenter_highlightShelf, 1, 1, v40);
  Loadable.init()((_QWORD *)(v3 + OBJC_IVAR____TtC8ShelfKit16ChannelPresenter_myShowsShelf), v40);
  *(_QWORD *)(v3 + 16) = a1;
  v49 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3BF760);
  swift_retain();
  BaseObjectGraph.inject<A>(_:)(&v145, v49, v49);
  *(_OWORD *)(v3 + 24) = v145;
  v50 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BE9F0);
  BaseObjectGraph.inject<A>(_:)(&v145, v50, v50);
  sub_F4D8(&v145, v3 + 40);
  v51 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B73E8);
  BaseObjectGraph.inject<A>(_:)(&v145, v51, v51);
  v52 = (_QWORD *)(v3 + 104);
  sub_F4D8(&v145, v3 + 104);
  v53 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BAFB0);
  v143 = a1;
  BaseObjectGraph.inject<A>(_:)(&v145, v53, v53);
  *(_OWORD *)(v3 + 88) = v145;
  *(_QWORD *)(v3 + 80) = v36;
  *(_QWORD *)v28 = *(_QWORD *)(v36 + 16);
  v28[8] = 0;
  swift_storeEnumTagMultiPayload(v28, v131, 0);
  sub_3C56C((uint64_t)v28, v3 + OBJC_IVAR____TtC8ShelfKit16ChannelPresenter_interactionContextPage, (uint64_t (*)(_QWORD))&type metadata accessor for InteractionContext.Page);
  v54 = *(_QWORD *)(v3 + 80);
  v55 = *(_QWORD *)(v54 + 32);
  if (v55)
    v56 = *(_QWORD *)(v54 + 24);
  else
    v56 = 0;
  v57 = 0xE000000000000000;
  if (v55)
    v57 = *(_QWORD *)(v54 + 32);
  *(_QWORD *)&v145 = v56;
  *((_QWORD *)&v145 + 1) = v57;
  LODWORD(v146) = 2;
  BYTE4(v146) = 2;
  swift_bridgeObjectRetain(v55);
  v131 = v36;
  swift_retain();
  CurrentValueSubject.value.setter(&v145);
  v58 = *(_QWORD *)(v54 + OBJC_IVAR____TtC8ShelfKit13ChannelDetail_availableShowCount);
  if (v58 < 1)
  {
    if (*(uint64_t *)(v54 + OBJC_IVAR____TtC8ShelfKit13ChannelDetail_showCount) <= 1)
      goto LABEL_16;
  }
  else if (v58 <= 1)
  {
    goto LABEL_16;
  }
  v119 = (_QWORD *)(v3 + 104);
  v120 = v46;
  v59 = 0xE000000000000000;
  if (v55)
    v59 = v55;
  v117 = v59;
  v116 = *(_QWORD *)(v54 + 40);
  v114 = *(_QWORD *)(v54 + 48);
  sub_267BC(v54 + OBJC_IVAR____TtC8ShelfKit13ChannelDetail_uberArtwork, (uint64_t)v129, &qword_3BEB70);
  v60 = *(void **)(v54 + OBJC_IVAR____TtC8ShelfKit13ChannelDetail_backgroundColor);
  v61 = *(_BYTE *)(v54 + OBJC_IVAR____TtC8ShelfKit13ChannelDetail_backgroundColor + 8);
  LOBYTE(v145) = 0;
  v62 = v121;
  sub_267BC(v54 + OBJC_IVAR____TtC8ShelfKit13ChannelDetail_logoArtwork, v121, &qword_3BEB70);
  v63 = type metadata accessor for HeaderModel.PrimaryArtwork(0);
  v64 = swift_allocObject(v63, *(unsigned int *)(v63 + 48), *(unsigned __int16 *)(v63 + 52));
  *(_BYTE *)(v64 + 16) = 1;
  sub_15BD4(v62, v64 + OBJC_IVAR____TtCO8ShelfKit11HeaderModel14PrimaryArtwork_artwork, &qword_3BEB70);
  v113 = v56;
  v65 = *(_BYTE *)(v54 + 56);
  v121 = type metadata accessor for ImpressionMetrics(0);
  v118 = *(void (**)(void))(*(_QWORD *)(v121 - 8) + 56);
  v66 = v130;
  v118();
  v115 = (Class)type metadata accessor for ChannelHeader(0);
  v67 = objc_allocWithZone(v115);
  v68 = v114;
  swift_bridgeObjectRetain(v114);
  swift_bridgeObjectRetain(v55);
  sub_C5CB0(v60, v61);
  v69 = v66;
  v70 = (char *)sub_1B7B70(v113, v117, v116, v68, 0, 0, 0, 0, (uint64_t)v129, v60, v61, (char *)&v145, v64, v65, 0, 0, 0, v66);
  v129 = v70;
  swift_release(v64);
  sub_C5CC4(v60, v61);
  v71 = type metadata accessor for Header(0);
  v72 = (uint64_t)v123;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v71 - 8) + 56))(v123, 1, 1, v71);
  v73 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8750);
  v74 = swift_allocObject(v73, 72, 7);
  *(_OWORD *)(v74 + 16) = xmmword_2EA0D0;
  *(_QWORD *)(v74 + 56) = v115;
  *(_QWORD *)(v74 + 64) = sub_F1C0(&qword_3B7408, (void (*)(uint64_t))type metadata accessor for ChannelHeader, (uint64_t)&protocol conformance descriptor for ChannelHeader);
  *(_QWORD *)(v74 + 32) = v70;
  v75 = type metadata accessor for URL(0);
  v76 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v75 - 8) + 56);
  v77 = (uint64_t)v125;
  v76(v125, 1, 1, v75);
  v147 = 0;
  v145 = 0u;
  v146 = 0u;
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v118)(v69, 1, 1, v121);
  v78 = v40[8];
  v79 = (uint64_t)v127;
  v127[v78] = 3;
  v80 = v79 + v40[9];
  v76((char *)v80, 1, 1, v75);
  strcpy((char *)v79, "channelHeader");
  *(_WORD *)(v79 + 14) = -4864;
  sub_15BD4(v72, v79 + v40[5], &qword_3B0C38);
  v81 = v79 + v40[6];
  *(_WORD *)v81 = 47;
  *(_WORD *)(v81 + 6) = 256;
  *(_DWORD *)(v81 + 2) = 0;
  *(_QWORD *)(v81 + 8) = 1;
  *(_QWORD *)(v79 + v40[7]) = v74;
  v82 = v129;
  sub_3C454(v77, v80, &qword_3B4370);
  *(_BYTE *)(v79 + v40[10]) = 1;
  *(_BYTE *)(v79 + v40[11]) = 0;
  v83 = v79 + v40[12];
  if (*((_QWORD *)&v146 + 1))
  {
    sub_F4D8(&v145, v83);
  }
  else
  {
    v84 = (unint64_t)v146;
    *(_OWORD *)v83 = v145;
    *(_OWORD *)(v83 + 16) = v84;
    *(_QWORD *)(v83 + 32) = v147;
  }
  v85 = v120;
  sub_15BD4(v130, v79 + v40[13], (uint64_t *)&unk_3B8790);
  *(_BYTE *)(v79 + v78) = 3;
  v86 = v126;
  sub_3C56C(v79, v126, type metadata accessor for ModernShelf);
  v85(v86, 0, 1, v40);
  v87 = v3 + OBJC_IVAR____TtC8ShelfKit16ChannelPresenter_headerShelf;
  swift_beginAccess(v3 + OBJC_IVAR____TtC8ShelfKit16ChannelPresenter_headerShelf, &v145, 33, 0);
  sub_3C454(v86, v87, &qword_3B8660);
  swift_endAccess(&v145);
  swift_beginAccess(v122, v144, 0, 0);
  v88 = *(_QWORD *)(v3 + 160);
  swift_retain();
  v89 = (uint64_t)v124;
  sub_C42C4((uint64_t)v124);
  CurrentValueSubject.value.setter(v89);

  swift_release(v88);
  v52 = v119;
LABEL_16:
  v90 = *(_QWORD *)(v3 + 128);
  v91 = *(_QWORD *)(v3 + 136);
  __swift_project_boxed_opaque_existential_1(v52, v90);
  v92 = v133;
  dispatch thunk of PurchaseControllerProtocol.recentlyEntitledProductsPublisher.getter(v90, v91);
  v93 = sub_32914(&qword_3B73F0, &qword_3B7390, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
  v94 = v135;
  v95 = v136;
  Publisher.dropFirst(_:)(1, v135, v93);
  (*(void (**)(char *, uint64_t))(v134 + 8))(v92, v94);
  v96 = sub_327F8(0, (unint64_t *)&qword_3B8710, OS_dispatch_queue_ptr);
  *(_QWORD *)&v145 = static OS_dispatch_queue.main.getter(v96);
  v97 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  v98 = (uint64_t)v139;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v97 - 8) + 56))(v139, 1, 1, v97);
  v99 = sub_32914(&qword_3B73F8, &qword_3B7398, (uint64_t)&protocol conformance descriptor for Publishers.Drop<A>);
  v100 = sub_436CC();
  v101 = v140;
  v102 = v138;
  Publisher.receive<A>(on:options:)(&v145, v98, v138, v96, v99, v100);
  sub_1459C(v98, &qword_3B2B18);

  (*(void (**)(char *, uint64_t))(v137 + 8))(v95, v102);
  v103 = swift_allocObject(&unk_37EB38, 24, 7);
  swift_weakInit(v103 + 16);
  v104 = swift_allocObject(&unk_37EB60, 32, 7);
  v105 = v131;
  *(_QWORD *)(v104 + 16) = v103;
  *(_QWORD *)(v104 + 24) = v105;
  v106 = sub_32914(&qword_3B7400, &qword_3B73A0, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v107 = v142;
  v108 = Publisher<>.sink(receiveValue:)(sub_C5BB4, v104, v142, v106);
  swift_release(v104);
  (*(void (**)(char *, uint64_t))(v141 + 8))(v101, v107);
  v109 = v132;
  swift_beginAccess(v132, &v145, 33, 0);
  v110 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2088);
  v111 = sub_32914(&qword_3B2090, &qword_3B2088, (uint64_t)&protocol conformance descriptor for [A]);
  AnyCancellable.store<A>(in:)(v109, v110, v111);
  swift_endAccess(&v145);
  swift_release(v108);
  swift_release(v143);
  return v3;
}

uint64_t sub_C2224(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t Strong;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t result;
  char *v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56[3];

  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v52 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)&v46 - v10;
  v12 = *a1;
  v13 = a2 + 16;
  v14 = sub_327F8(0, (unint64_t *)&qword_3B0CF0, OS_os_log_ptr);
  ((void (*)(void))static OS_os_log.purchases.getter)();
  swift_bridgeObjectRetain_n(v12, 2);
  v15 = swift_retain_n(a2, 2);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, (os_log_type_t)v17))
  {
    v47 = v17;
    v48 = v7;
    v49 = v14;
    v50 = a3;
    v51 = v6;
    v18 = swift_slowAlloc(22, -1);
    v46 = swift_slowAlloc(64, -1);
    v56[0] = v46;
    *(_DWORD *)v18 = 136315394;
    v54 = v12;
    v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B76D8);
    v20 = sub_32914(&qword_3B76E0, &qword_3B76D8, (uint64_t)&protocol conformance descriptor for Set<A>);
    v21 = sub_65CC4();
    v22 = v20;
    v13 = a2 + 16;
    v23 = Sequence<>.joined(separator:)(44, 0xE100000000000000, v19, v22, v21);
    v54 = sub_69298(v23, v24, v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55);
    swift_bridgeObjectRelease_n(v12, 2);
    swift_bridgeObjectRelease();
    *(_WORD *)(v18 + 12) = 2080;
    swift_beginAccess(a2 + 16, &v54, 0, 0);
    Strong = swift_weakLoadStrong(a2 + 16);
    if (Strong)
    {
      v26 = Strong;
      v27 = *(_QWORD *)(Strong + 80);
      swift_retain();
      swift_release(v26);
      v28 = *(_QWORD *)(v27 + 16);
      swift_release(v27);
      v53 = v28;
      v29 = sub_144B4();
      Strong = BinaryInteger.description.getter(&type metadata for UInt64, v29);
      v31 = v30;
    }
    else
    {
      v31 = 0xE000000000000000;
    }
    v33 = v48;
    v53 = sub_69298(Strong, v31, v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54);
    swift_release_n(a2, 2);
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v16, (os_log_type_t)v47, "ChannelPresenter got purchase list %s and we're displaying channel %s", (uint8_t *)v18, 0x16u);
    v34 = v46;
    swift_arrayDestroy(v46, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v34, -1, -1);
    swift_slowDealloc(v18, -1, -1);

    v32 = *(void (**)(char *, uint64_t))(v33 + 8);
    v6 = v51;
    v32(v11, v51);
    a3 = v50;
  }
  else
  {

    swift_release_n(a2, 2);
    swift_bridgeObjectRelease_n(v12, 2);
    v32 = *(void (**)(char *, uint64_t))(v7 + 8);
    v32(v11, v6);
  }
  v56[0] = *(_QWORD *)(a3 + 16);
  v35 = sub_144B4();
  v36 = BinaryInteger.description.getter(&type metadata for UInt64, v35);
  v38 = sub_1F770C(v36, v37, v12);
  result = swift_bridgeObjectRelease();
  if ((v38 & 1) != 0)
  {
    v40 = v52;
    v41 = static OS_os_log.purchases.getter(result);
    v42 = Logger.logObject.getter(v41);
    v43 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v42, v43))
    {
      v44 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v44 = 0;
      _os_log_impl(&dword_0, v42, v43, "StorePresenter product displayed was purchased, reloading", v44, 2u);
      swift_slowDealloc(v44, -1, -1);
    }

    v32(v40, v6);
    swift_beginAccess(v13, v56, 0, 0);
    result = swift_weakLoadStrong(v13);
    if (result)
    {
      v45 = result;
      sub_C2670(1);
      return swift_release(v45);
    }
  }
  return result;
}

uint64_t sub_C2670(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[5];

  v2 = v1;
  KeyPath = swift_getKeyPath(&unk_2F32E0);
  v5 = swift_getKeyPath(&unk_2F3308);
  v15[0] = 0;
  swift_retain();
  static Published.subscript.setter(v15, v2, KeyPath, v5);
  v6 = v2[8];
  v7 = v2[9];
  __swift_project_boxed_opaque_existential_1(v2 + 5, v6);
  v8 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(v7 + 32))(*(_QWORD *)(v2[10] + 16), a1, v6, v7);
  v9 = swift_allocObject(&unk_37EB38, 24, 7);
  swift_weakInit(v9 + 16);
  v10 = swift_allocObject(&unk_37EB38, 24, 7);
  swift_weakInit(v10 + 16);
  v11 = sub_327F8(0, (unint64_t *)&qword_3B8710, OS_dispatch_queue_ptr);
  v12 = swift_retain();
  v13 = static OS_dispatch_queue.main.getter(v12);
  v15[3] = v11;
  v15[4] = &protocol witness table for OS_dispatch_queue;
  v15[0] = v13;
  Promise.then(perform:orCatchError:on:)(sub_C5FC8, v9, sub_C5FD0, v10, v15);
  swift_release(v8);
  swift_release(v9);
  swift_release(v10);
  __swift_destroy_boxed_opaque_existential_1(v15);
  return swift_release(v10);
}

Swift::Void __swiftcall ChannelPresenter.viewDidLoad()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t KeyPath;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t ObjectType;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void (*v96)(char *, uint64_t);
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void (*v112)(char *, uint64_t);
  char *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  id v128;
  __int128 v129;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2B18);
  __chkstk_darwin(v1);
  v122 = (char *)&v93 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3368);
  v4 = *(_QWORD *)(v3 - 8);
  v124 = v3;
  v125 = v4;
  __chkstk_darwin(v3);
  v123 = (char *)&v93 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7410);
  v7 = *(_QWORD *)(v6 - 8);
  v120 = v6;
  v121 = v7;
  __chkstk_darwin(v6);
  v119 = (char *)&v93 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7418);
  v10 = *(_QWORD *)(v9 - 8);
  v117 = v9;
  v118 = v10;
  __chkstk_darwin(v9);
  v116 = (char *)&v93 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7420);
  v13 = *(_QWORD *)(v12 - 8);
  v114 = v12;
  v115 = v13;
  __chkstk_darwin(v12);
  v113 = (char *)&v93 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7428);
  v105 = *(_QWORD *)(v104 - 8);
  __chkstk_darwin(v104);
  v100 = (char *)&v93 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v107 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7430);
  v111 = *(_QWORD *)(v107 - 8);
  __chkstk_darwin(v107);
  v101 = (char *)&v93 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7438);
  v110 = *(_QWORD *)(v109 - 8);
  __chkstk_darwin(v109);
  v102 = (char *)&v93 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7440);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v93 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7448);
  v23 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v25 = (char *)&v93 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_C341C();
  v26 = v0 + OBJC_IVAR____TtC8ShelfKit16ChannelPresenter__storePage;
  v27 = v0;
  swift_beginAccess(v0 + OBJC_IVAR____TtC8ShelfKit16ChannelPresenter__storePage, &v129, 33, 0);
  v127 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B73A8);
  Published.projectedValue.getter(v127);
  swift_endAccess(&v129);
  v28 = type metadata accessor for Page(0);
  v95 = v28;
  v126 = sub_32914(&qword_3B7450, &qword_3B7440, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
  Publisher.compactMap<A>(_:)(sub_C3698, 0, v18, v28, v126);
  v29 = *(void (**)(char *, uint64_t))(v19 + 8);
  v29(v21, v18);
  v112 = v29;
  v30 = swift_allocObject(&unk_37EB38, 24, 7);
  v94 = v27;
  swift_weakInit(v30 + 16);
  v31 = sub_32914(&qword_3B7458, &qword_3B7448, (uint64_t)&protocol conformance descriptor for Publishers.CompactMap<A, B>);
  v32 = Publisher<>.sink(receiveValue:)(sub_C5CD8, v30, v22, v31);
  swift_release(v30);
  v96 = *(void (**)(char *, uint64_t))(v23 + 8);
  v96(v25, v22);
  v33 = v27 + 144;
  v97 = v27 + 144;
  swift_beginAccess(v27 + 144, &v129, 33, 0);
  v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2088);
  v99 = v34;
  v98 = sub_32914(&qword_3B2090, &qword_3B2088, (uint64_t)&protocol conformance descriptor for [A]);
  AnyCancellable.store<A>(in:)(v33, v34, v98);
  swift_endAccess(&v129);
  swift_release(v32);
  v106 = v26;
  swift_beginAccess(v26, &v129, 33, 0);
  v103 = v21;
  Published.projectedValue.getter(v127);
  swift_endAccess(&v129);
  v108 = v18;
  Publisher.compactMap<A>(_:)(sub_C3698, 0, v18, v95, v126);
  v29(v21, v18);
  v35 = v94;
  v36 = *(_QWORD *)(v94 + 16);
  sub_150C8(v94 + 40, (uint64_t)&v129);
  v37 = swift_allocObject(&unk_37EB88, 64, 7);
  sub_F4D8(&v129, v37 + 16);
  *(_QWORD *)(v37 + 56) = v36;
  swift_retain();
  v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2970);
  v39 = v100;
  Publishers.CompactMap.map<A>(_:)(sub_C5D0C, v37, v22, v38);
  swift_release(v37);
  v96(v25, v22);
  v40 = sub_32914(&qword_3B7460, &qword_3B7428, (uint64_t)&protocol conformance descriptor for Publishers.CompactMap<A, B>);
  v41 = sub_32914(&qword_3B2978, &qword_3B2970, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v42 = v101;
  v43 = v104;
  Publisher<>.switchToLatest()(v104, v40, v41);
  (*(void (**)(char *, uint64_t))(v105 + 8))(v39, v43);
  v44 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7468);
  v45 = sub_32914(&qword_3B7470, &qword_3B7430, (uint64_t)&protocol conformance descriptor for Publishers.SwitchToLatest<A, B>);
  v46 = v102;
  v47 = v107;
  Publisher.map<A>(_:)(sub_C3824, 0, v107, v44, v45);
  (*(void (**)(char *, uint64_t))(v111 + 8))(v42, v47);
  v48 = sub_32914(&qword_3B7478, &qword_3B7438, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v49 = v109;
  v50 = Publisher.eraseToAnyPublisher()(v109, v48);
  (*(void (**)(char *, uint64_t))(v110 + 8))(v46, v49);
  *(_QWORD *)&v129 = v50;
  v51 = v50;
  v111 = v50;
  v52 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7480);
  v53 = type metadata accessor for ModernShelf(0);
  v54 = sub_32914(&qword_3B7488, &qword_3B7480, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v55 = v113;
  Publisher.compactMap<A>(_:)(sub_C3B7C, 0, v52, v53, v54);
  v56 = swift_allocObject(&unk_37EB38, 24, 7);
  swift_weakInit(v56 + 16);
  v57 = sub_32914(&qword_3B7490, &qword_3B7420, (uint64_t)&protocol conformance descriptor for Publishers.CompactMap<A, B>);
  v58 = v114;
  v59 = Publisher<>.sink(receiveValue:)(sub_C5D18, v56, v114, v57);
  swift_release(v56);
  (*(void (**)(char *, uint64_t))(v115 + 8))(v55, v58);
  v60 = v97;
  swift_beginAccess(v97, &v129, 33, 0);
  v61 = v99;
  v62 = v98;
  AnyCancellable.store<A>(in:)(v60, v99, v98);
  swift_endAccess(&v129);
  swift_release(v59);
  *(_QWORD *)&v129 = v51;
  KeyPath = swift_getKeyPath(&unk_2F3120);
  v64 = v116;
  Publisher.map<A>(_:)(KeyPath, v52, v54);
  swift_release(KeyPath);
  v65 = swift_allocObject(&unk_37EB38, 24, 7);
  swift_weakInit(v65 + 16);
  v66 = sub_32914(&qword_3B7498, &qword_3B7418, (uint64_t)&protocol conformance descriptor for Publishers.MapKeyPath<A, B>);
  v67 = v117;
  v68 = Publisher<>.sink(receiveValue:)(sub_C5D38, v65, v117, v66);
  swift_release(v65);
  (*(void (**)(char *, uint64_t))(v118 + 8))(v64, v67);
  swift_beginAccess(v60, &v129, 33, 0);
  v69 = v62;
  AnyCancellable.store<A>(in:)(v60, v61, v62);
  swift_endAccess(&v129);
  swift_release(v68);
  swift_beginAccess(v106, &v129, 33, 0);
  v70 = v103;
  Published.projectedValue.getter(v127);
  swift_endAccess(&v129);
  v71 = v35;
  swift_retain();
  v72 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8660);
  v73 = v119;
  v74 = v35;
  v75 = v108;
  Publisher.map<A>(_:)(sub_C5D40, v74, v108, v72, v126);
  swift_release(v71);
  v112(v70, v75);
  v76 = swift_allocObject(&unk_37EB38, 24, 7);
  swift_weakInit(v76 + 16);
  v77 = sub_32914(&qword_3B74A0, &qword_3B7410, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v78 = v120;
  v79 = Publisher<>.sink(receiveValue:)(sub_C5D48, v76, v120, v77);
  swift_release(v76);
  (*(void (**)(char *, uint64_t))(v121 + 8))(v73, v78);
  swift_beginAccess(v60, &v129, 33, 0);
  AnyCancellable.store<A>(in:)(v60, v61, v69);
  swift_endAccess(&v129);
  swift_release(v79);
  v80 = *(_QWORD *)(v71 + 96);
  ObjectType = swift_getObjectType();
  *(_QWORD *)&v129 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v80 + 24))(*(_QWORD *)(*(_QWORD *)(v71 + 80) + 16), ObjectType, v80);
  v82 = sub_327F8(0, (unint64_t *)&qword_3B8710, OS_dispatch_queue_ptr);
  v128 = (id)static OS_dispatch_queue.main.getter(v82);
  v83 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  v84 = (uint64_t)v122;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v83 - 8) + 56))(v122, 1, 1, v83);
  v85 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3370);
  v86 = sub_32914(&qword_3BEA40, &qword_3B3370, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v87 = sub_436CC();
  v88 = v123;
  Publisher.receive<A>(on:options:)(&v128, v84, v85, v82, v86, v87);
  sub_1459C(v84, &qword_3B2B18);

  swift_release(v129);
  v89 = swift_allocObject(&unk_37EB38, 24, 7);
  swift_weakInit(v89 + 16);
  v90 = sub_32914(&qword_3B3378, &qword_3B3368, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v91 = v124;
  v92 = Publisher<>.sink(receiveValue:)(sub_C5D50, v89, v124, v90);
  swift_release(v89);
  (*(void (**)(char *, uint64_t))(v125 + 8))(v88, v91);
  swift_beginAccess(v60, &v129, 33, 0);
  AnyCancellable.store<A>(in:)(v60, v61, v69);
  swift_endAccess(&v129);
  swift_release(v92);
  sub_C2670(0);
  swift_release(v111);
}

uint64_t sub_C341C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t ObjectType;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v23[9];
  char v24;
  int v25;
  char v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  char v31;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B76C0);
  v3 = *(_QWORD *)(v2 - 8);
  result = __chkstk_darwin(v2);
  v6 = &v23[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v7 = *(_QWORD *)(v0 + 80);
  v8 = *(_QWORD *)(v7 + OBJC_IVAR____TtC8ShelfKit13ChannelDetail_availableShowCount);
  if (v8 < 1)
  {
    if (*(uint64_t *)(v7 + OBJC_IVAR____TtC8ShelfKit13ChannelDetail_showCount) <= 1)
      return result;
  }
  else if (v8 <= 1)
  {
    return result;
  }
  v9 = *(_QWORD *)(v0 + 32);
  ObjectType = swift_getObjectType();
  v11 = *(_QWORD *)(v7 + 16);
  *(_WORD *)v23 = 1024;
  v23[2] = 4;
  *(_WORD *)&v23[7] = 4112;
  *(_DWORD *)&v23[3] = 269488141;
  v24 = 4;
  v25 = 269488144;
  v26 = 16;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = -1;
  v12 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _BYTE *, uint64_t, uint64_t, uint64_t))(v9 + 184))(v11, 0, 4, v23, 100, ObjectType, v9);
  *(_QWORD *)v23 = v12;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4E98);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B09F8);
  v15 = sub_32914(&qword_3B76C8, &qword_3B4E98, (uint64_t)&protocol conformance descriptor for AnyPaginatedPublisher<A, B>);
  Publisher.map<A>(_:)(sub_C57A0, 0, v13, v14, v15);
  swift_release(v12);
  v16 = swift_allocObject(&unk_37EB38, 24, 7);
  swift_weakInit(v16 + 16);
  v17 = sub_32914(&qword_3B76D0, &qword_3B76C0, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v18 = Publisher<>.sink(receiveValue:)(sub_C6004, v16, v2, v17);
  swift_release(v16);
  (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v6, v2);
  v19 = v1 + 144;
  swift_beginAccess(v19, v23, 33, 0);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2088);
  v21 = sub_32914(&qword_3B2090, &qword_3B2088, (uint64_t)&protocol conformance descriptor for [A]);
  AnyCancellable.store<A>(in:)(v19, v20, v21);
  swift_endAccess(v23);
  return swift_release(v18);
}

uint64_t sub_C369C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[24];
  _BYTE v9[24];

  v2 = *a1;
  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v9, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    swift_beginAccess(result + 168, v8, 0, 0);
    v6 = *(_QWORD *)(v5 + 168);
    swift_retain(v6);
    swift_release(v5);
    v7 = *(_QWORD *)(v2 + 72);
    swift_bridgeObjectRetain(v7);
    CurrentValueSubject.value.setter(&v7);
    return swift_release(v6);
  }
  return result;
}

uint64_t sub_C3734(unint64_t *a1)
{
  uint64_t KeyPath;
  unint64_t v3;
  unint64_t v5;

  KeyPath = swift_getKeyPath(&unk_2F3328);
  v3 = *a1;
  v5 = v3;
  sub_C5FD8(v3);
  swift_getAtKeyPath(&v5, KeyPath);
  sub_C5FF4(v3);
  return swift_release(KeyPath);
}

uint64_t sub_C37A4@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v5 = a1[3];
  v6 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v5);
  v7 = Page.modernShelves.getter();
  v8 = StoreDataProvider.progressivelyLoadShelfItemsPublisher(objectGraph:shelves:)(a2, v7, v5, v6);
  result = swift_bridgeObjectRelease();
  *a3 = v8;
  return result;
}

uint64_t sub_C3824@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t result;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v4 = type metadata accessor for ModernShelf(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v29 - v9;
  v11 = *a1;
  v12 = *(_QWORD *)(v11 + 16);
  if (v12)
  {
    v30 = v11 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    sub_14510(v30, (uint64_t)&v29 - v9, type metadata accessor for ModernShelf);
    v13 = ModernShelf.ItemKind.rawValue.getter(v10[*(int *)(v4 + 24)]);
    if (v13 == 0x486C656E6E616863 && v14 == 0xED00007265646165)
    {
      swift_bridgeObjectRelease();
      sub_14510((uint64_t)v10, (uint64_t)v8, type metadata accessor for ModernShelf);
      goto LABEL_11;
    }
    v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v13, v14, 0x486C656E6E616863, 0xED00007265646165, 0);
    swift_bridgeObjectRelease();
    sub_14510((uint64_t)v10, (uint64_t)v8, type metadata accessor for ModernShelf);
    if ((v16 & 1) != 0)
    {
LABEL_11:
      sub_145D8((uint64_t)v8, type metadata accessor for ModernShelf);
      goto LABEL_12;
    }
    v17 = ModernShelf.ItemKind.rawValue.getter(v8[*(int *)(v4 + 24)]);
    if (v17 == 0xD000000000000011 && v18 == 0x8000000000309590)
    {
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }
    v27 = _stringCompareWithSmolCheck(_:_:expecting:)(v17, v18, 0xD000000000000011, 0x8000000000309590, 0);
    swift_bridgeObjectRelease();
    sub_145D8((uint64_t)v8, type metadata accessor for ModernShelf);
    if ((v27 & 1) != 0)
    {
LABEL_12:
      sub_14510((uint64_t)v10, a2, type metadata accessor for ModernShelf);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(a2, 0, 1, v4);
      if (*(_QWORD *)(v11 + 16) < v12)
      {
        __break(1u);
      }
      else
      {
        v19 = type metadata accessor for __ContiguousArrayStorageBase(0);
        v20 = swift_bridgeObjectRetain();
        v21 = swift_unknownObjectRetain_n(v20, 2);
        v22 = (_QWORD *)swift_dynamicCastClass(v21, v19);
        if (!v22)
        {
          swift_bridgeObjectRelease();
          v22 = _swiftEmptyArrayStorage;
        }
        v23 = v22[2];
        swift_release(v22);
        if (v23 == v12 - 1)
        {
          v24 = (_QWORD *)swift_dynamicCastClass(v11, v19);
          if (!v24)
          {
            swift_bridgeObjectRelease();
            v24 = _swiftEmptyArrayStorage;
          }
          goto LABEL_18;
        }
      }
      swift_bridgeObjectRelease();
      v24 = sub_1FBA0C(v11, v30, 1, (2 * v12) | 1);
LABEL_18:
      swift_bridgeObjectRelease();
      v25 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B7468) + 48);
      result = sub_145D8((uint64_t)v10, type metadata accessor for ModernShelf);
      *(_QWORD *)(a2 + v25) = v24;
      return result;
    }
    sub_145D8((uint64_t)v10, type metadata accessor for ModernShelf);
  }
  v28 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B7468) + 48);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(a2, 1, 1, v4);
  *(_QWORD *)(a2 + v28) = v11;
  return swift_bridgeObjectRetain();
}

uint64_t sub_C3B7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7468);
  __chkstk_darwin(v4);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_267BC(a1, (uint64_t)v6, &qword_3B8660);
  return sub_15BD4((uint64_t)v6, a2, &qword_3B8660);
}

uint64_t sub_C3C08(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _BYTE v12[24];
  _BYTE v13[24];

  v4 = type metadata accessor for PageContent(0);
  __chkstk_darwin(v4);
  v6 = &v12[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = *a1;
  a2 += 16;
  swift_beginAccess(a2, v13, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (result)
  {
    v9 = result;
    v10 = *(_QWORD *)(result + OBJC_IVAR____TtC8ShelfKit16ChannelPresenter_storeShelves);
    *(_QWORD *)(result + OBJC_IVAR____TtC8ShelfKit16ChannelPresenter_storeShelves) = v7;
    swift_bridgeObjectRetain();
    sub_64510(v10);
    swift_beginAccess(v9 + 160, v12, 0, 0);
    v11 = *(_QWORD *)(v9 + 160);
    swift_retain();
    sub_C42C4((uint64_t)v6);
    CurrentValueSubject.value.setter(v6);
    swift_release(v9);
    return swift_release(v11);
  }
  return result;
}

uint64_t sub_C3D00@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  _QWORD v12[2];

  v4 = type metadata accessor for ErrorModel(0);
  __chkstk_darwin(v4);
  v6 = (_QWORD *)((char *)v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12[1] = *a1;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B73B8);
  if ((Loadable.failed.getter(v7) & 1) != 0)
  {
    v8 = swift_allocObject(&unk_37EB38, 24, 7);
    swift_weakInit(v8 + 16);
    swift_retain();
    static ErrorModel.offline(_:)((uint64_t)sub_C5FE8, v8, v6);
    swift_release_n(v8, 2);
    static ModernShelf.errorShelf(id:_:)(0x685320726F727245, 0xEB00000000666C65, (uint64_t)v6, a2);
    sub_145D8((uint64_t)v6, type metadata accessor for ErrorModel);
    v9 = type metadata accessor for ModernShelf(0);
    return (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(a2, 0, 1, v9);
  }
  else
  {
    v11 = type metadata accessor for ModernShelf(0);
    return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(a2, 1, 1, v11);
  }
}

uint64_t sub_C3E50(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  _BYTE v4[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v4, 0, 0);
  result = swift_weakLoadStrong(v1);
  if (result)
  {
    v3 = result;
    sub_C2670(0);
    return swift_release(v3);
  }
  return result;
}

uint64_t sub_C3EA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[24];
  _BYTE v15[24];

  v4 = type metadata accessor for PageContent(0);
  __chkstk_darwin(v4);
  v6 = &v14[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8660);
  __chkstk_darwin(v7);
  v9 = &v14[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  a2 += 16;
  swift_beginAccess(a2, v15, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (result)
  {
    v11 = result;
    sub_267BC(a1, (uint64_t)v9, &qword_3B8660);
    v12 = v11 + OBJC_IVAR____TtC8ShelfKit16ChannelPresenter_storeErrorShelf;
    swift_beginAccess(v11 + OBJC_IVAR____TtC8ShelfKit16ChannelPresenter_storeErrorShelf, v14, 33, 0);
    sub_C600C((uint64_t)v9, v12, &qword_3B8660);
    swift_endAccess(v14);
    swift_beginAccess(v11 + 160, v14, 0, 0);
    v13 = *(_QWORD *)(v11 + 160);
    swift_retain();
    sub_C42C4((uint64_t)v6);
    CurrentValueSubject.value.setter(v6);
    swift_release(v13);
    sub_1459C((uint64_t)v9, &qword_3B8660);
    return swift_release(v11);
  }
  return result;
}

uint64_t sub_C4018(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[24];
  _BYTE v18[24];

  v6 = type metadata accessor for PageContent(0);
  __chkstk_darwin(v6);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8660);
  __chkstk_darwin(v9);
  v11 = &v17[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  a2 += 16;
  swift_beginAccess(a2, v18, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (result)
  {
    v13 = result;
    sub_14510(a1, (uint64_t)v11, type metadata accessor for ModernShelf);
    v14 = type metadata accessor for ModernShelf(0);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v11, 0, 1, v14);
    v15 = v13 + *a3;
    swift_beginAccess(v15, v17, 33, 0);
    sub_C600C((uint64_t)v11, v15, &qword_3B8660);
    swift_endAccess(v17);
    swift_beginAccess(v13 + 160, v17, 0, 0);
    v16 = *(_QWORD *)(v13 + 160);
    swift_retain();
    sub_C42C4((uint64_t)v8);
    CurrentValueSubject.value.setter(v8);
    swift_release(v16);
    sub_1459C((uint64_t)v11, &qword_3B8660);
    return swift_release(v13);
  }
  return result;
}

uint64_t sub_C41B0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[24];

  v2 = *a1;
  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v9, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    KeyPath = swift_getKeyPath(&unk_2F32E0);
    v7 = swift_getKeyPath(&unk_2F3308);
    v8 = v2;
    swift_retain(v2);
    return static Published.subscript.setter(&v8, v5, KeyPath, v7);
  }
  return result;
}

uint64_t sub_C4244(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v8, 0, 0);
  result = swift_weakLoadStrong(v2);
  if (result)
  {
    v4 = result;
    KeyPath = swift_getKeyPath(&unk_2F32E0);
    v6 = swift_getKeyPath(&unk_2F3308);
    v7 = 1;
    return static Published.subscript.setter(&v7, v4, KeyPath, v6);
  }
  return result;
}

uint64_t sub_C42C4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  unsigned int v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unsigned int (*v44)(uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unsigned int (*v54)(char *, uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unsigned int v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  unsigned int (*v82)(char *, uint64_t, uint64_t);
  Swift::String v83;
  unint64_t v84;
  Swift::String v85;
  char *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t inited;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unsigned __int8 v98;
  unsigned int (*v99)(char *, uint64_t, uint64_t);
  char *v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  char *v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  unsigned int (*v140)(char *, uint64_t, uint64_t);
  char v141[24];
  uint64_t v142;
  unsigned int (*v143)(char *, uint64_t, uint64_t);
  _QWORD *v144;
  uint64_t v145;
  unint64_t v146;
  char v147;
  uint64_t v148;
  char v149[8];
  uint64_t v150;
  char v151[8];
  char v152[8];
  char v153[8];
  char v154;

  v139 = a1;
  v131 = type metadata accessor for ScalarDictionary(0);
  v130 = *(_QWORD *)(v131 - 8);
  v2 = __chkstk_darwin(v131);
  v129 = (char *)&v117 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v128 = (char *)&v117 - v4;
  v138 = type metadata accessor for PageMetrics(0);
  v136 = *(_QWORD *)(v138 - 8);
  __chkstk_darwin(v138);
  v135 = (char *)&v117 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v134 = type metadata accessor for PageID(0);
  v132 = *(_QWORD *)(v134 - 8);
  __chkstk_darwin(v134);
  v7 = (char *)&v117 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v133 = type metadata accessor for ModernPage(0);
  __chkstk_darwin(v133);
  v137 = (char *)&v117 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B35D0);
  v10 = __chkstk_darwin(v9);
  v125 = (uint64_t)&v117 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v120 = (uint64_t)&v117 - v13;
  v14 = __chkstk_darwin(v12);
  v122 = (uint64_t)&v117 - v15;
  __chkstk_darwin(v14);
  v17 = (char *)&v117 - v16;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8660);
  v19 = __chkstk_darwin(v18);
  v127 = (char *)&v117 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v19);
  v23 = (char *)&v117 - v22;
  __chkstk_darwin(v21);
  v25 = (char *)&v117 - v24;
  v26 = type metadata accessor for ModernShelf(0);
  v27 = *(_QWORD *)(v26 - 8);
  v28 = __chkstk_darwin(v26);
  v123 = (uint64_t)&v117 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __chkstk_darwin(v28);
  v121 = (uint64_t)&v117 - v31;
  __chkstk_darwin(v30);
  v33 = (char *)&v117 - v32;
  v154 = 1;
  v34 = v1 + OBJC_IVAR____TtC8ShelfKit16ChannelPresenter_headerShelf;
  swift_beginAccess(v1 + OBJC_IVAR____TtC8ShelfKit16ChannelPresenter_headerShelf, v153, 0, 0);
  v126 = v34;
  sub_267BC(v34, (uint64_t)v25, &qword_3B8660);
  v140 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48);
  v35 = v140(v25, 1, v26);
  v124 = v9;
  if (v35 == 1)
  {
    sub_1459C((uint64_t)v25, &qword_3B8660);
    v36 = _swiftEmptyArrayStorage;
    v37 = v7;
    v38 = v1;
  }
  else
  {
    v118 = v1;
    v119 = v7;
    sub_3C56C((uint64_t)v25, (uint64_t)v33, type metadata accessor for ModernShelf);
    sub_14510((uint64_t)v33, (uint64_t)v17, type metadata accessor for ModernShelf);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v17, 0, 2, v26);
    v39 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3BF7B0);
    Loadable.map<A>(_:)(&v142, sub_192A50, 0, v9, v39);
    v40 = v142;
    sub_644D8(v142);
    v36 = sub_10E28(0, 1, 1, _swiftEmptyArrayStorage);
    v42 = v36[2];
    v41 = v36[3];
    if (v42 >= v41 >> 1)
      v36 = sub_10E28((_QWORD *)(v41 > 1), v42 + 1, 1, v36);
    v36[2] = v42 + 1;
    v36[v42 + 4] = v40;
    sub_64510(v40);
    sub_1459C((uint64_t)v17, &qword_3B35D0);
    sub_145D8((uint64_t)v33, type metadata accessor for ModernShelf);
    v37 = v119;
    v38 = v118;
  }
  v43 = v38 + OBJC_IVAR____TtC8ShelfKit16ChannelPresenter_highlightShelf;
  swift_beginAccess(v38 + OBJC_IVAR____TtC8ShelfKit16ChannelPresenter_highlightShelf, v152, 0, 0);
  sub_267BC(v43, (uint64_t)v23, &qword_3B8660);
  v44 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v140;
  if (v140(v23, 1, v26) == 1)
  {
    sub_1459C((uint64_t)v23, &qword_3B8660);
    v45 = v124;
  }
  else
  {
    v46 = v121;
    sub_3C56C((uint64_t)v23, v121, type metadata accessor for ModernShelf);
    v47 = v46;
    v48 = v122;
    sub_14510(v47, v122, type metadata accessor for ModernShelf);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v27 + 56))(v48, 0, 2, v26);
    v49 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3BF7B0);
    v45 = v124;
    Loadable.map<A>(_:)(&v142, sub_192A50, 0, v124, v49);
    v50 = v142;
    sub_644D8(v142);
    if ((swift_isUniquelyReferenced_nonNull_native(v36) & 1) == 0)
      v36 = sub_10E28(0, v36[2] + 1, 1, v36);
    v52 = v36[2];
    v51 = v36[3];
    if (v52 >= v51 >> 1)
      v36 = sub_10E28((_QWORD *)(v51 > 1), v52 + 1, 1, v36);
    v36[2] = v52 + 1;
    v36[v52 + 4] = v50;
    sub_64510(v50);
    sub_1459C(v122, &qword_3B35D0);
    sub_145D8(v121, type metadata accessor for ModernShelf);
    v44 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v140;
  }
  v53 = v126;
  if (v44(v126, 1, v26))
  {
    v54 = (unsigned int (*)(char *, uint64_t, uint64_t))_swiftEmptyArrayStorage;
    v55 = (uint64_t)v127;
    goto LABEL_30;
  }
  v122 = v27;
  v56 = ModernShelf.ItemKind.rawValue.getter(*(_BYTE *)(v53 + *(int *)(v26 + 24)));
  if (v56 == 0x486C656E6E616863 && v57 == 0xED00007265646165)
  {
    swift_bridgeObjectRelease();
    v55 = (uint64_t)v127;
LABEL_19:
    v59 = v38 + OBJC_IVAR____TtC8ShelfKit16ChannelPresenter_myShowsShelf;
    swift_beginAccess(v38 + OBJC_IVAR____TtC8ShelfKit16ChannelPresenter_myShowsShelf, v141, 0, 0);
    sub_267BC(v59, v120, &qword_3B35D0);
    v60 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3BF7B0);
    Loadable.map<A>(_:)(&v142, sub_192A50, 0, v45, v60);
    v61 = v142;
    sub_644D8(v142);
    v54 = (unsigned int (*)(char *, uint64_t, uint64_t))_swiftEmptyArrayStorage;
    if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
      v54 = (unsigned int (*)(char *, uint64_t, uint64_t))sub_10E28(0, _swiftEmptyArrayStorage[2] + 1, 1, _swiftEmptyArrayStorage);
    v63 = *((_QWORD *)v54 + 2);
    v62 = *((_QWORD *)v54 + 3);
    if (v63 >= v62 >> 1)
      v54 = (unsigned int (*)(char *, uint64_t, uint64_t))sub_10E28((_QWORD *)(v62 > 1), v63 + 1, 1, v54);
    *((_QWORD *)v54 + 2) = v63 + 1;
    *((_QWORD *)v54 + v63 + 4) = v61;
    sub_644D8(v61);
    if ((swift_isUniquelyReferenced_nonNull_native(v36) & 1) == 0)
      v36 = sub_10E28(0, v36[2] + 1, 1, v36);
    v65 = v36[2];
    v64 = v36[3];
    if (v65 >= v64 >> 1)
      v36 = sub_10E28((_QWORD *)(v64 > 1), v65 + 1, 1, v36);
    v36[2] = v65 + 1;
    v36[v65 + 4] = v61;
    sub_64510(v61);
    sub_1459C(v120, &qword_3B35D0);
    v27 = v122;
    goto LABEL_29;
  }
  v58 = _stringCompareWithSmolCheck(_:_:expecting:)(v56, v57, 0x486C656E6E616863, 0xED00007265646165, 0);
  swift_bridgeObjectRelease();
  v55 = (uint64_t)v127;
  v27 = v122;
  if ((v58 & 1) != 0)
    goto LABEL_19;
  v54 = (unsigned int (*)(char *, uint64_t, uint64_t))_swiftEmptyArrayStorage;
LABEL_29:
  v44 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v140;
LABEL_30:
  v66 = v38 + OBJC_IVAR____TtC8ShelfKit16ChannelPresenter_storeErrorShelf;
  swift_beginAccess(v38 + OBJC_IVAR____TtC8ShelfKit16ChannelPresenter_storeErrorShelf, v151, 0, 0);
  sub_267BC(v66, v55, &qword_3B8660);
  v67 = v44(v55, 1, v26);
  v140 = v54;
  if (v67 == 1)
  {
    sub_1459C(v55, &qword_3B8660);
    v68 = *(_QWORD *)(v38 + OBJC_IVAR____TtC8ShelfKit16ChannelPresenter_storeShelves);
    sub_644D8(v68);
    sub_644D8(v68);
    if ((swift_isUniquelyReferenced_nonNull_native(v36) & 1) == 0)
      v36 = sub_10E28(0, v36[2] + 1, 1, v36);
    v70 = v36[2];
    v69 = v36[3];
    if (v70 >= v69 >> 1)
      v36 = sub_10E28((_QWORD *)(v69 > 1), v70 + 1, 1, v36);
    v36[2] = v70 + 1;
    v36[v70 + 4] = v68;
    v71 = sub_64510(v68);
  }
  else
  {
    v72 = v123;
    sub_3C56C(v55, v123, type metadata accessor for ModernShelf);
    v73 = v72;
    v74 = v125;
    sub_14510(v73, v125, type metadata accessor for ModernShelf);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v27 + 56))(v74, 0, 2, v26);
    v75 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3BF7B0);
    Loadable.map<A>(_:)(&v142, sub_192A50, 0, v45, v75);
    v76 = v142;
    sub_644D8(v142);
    if ((swift_isUniquelyReferenced_nonNull_native(v36) & 1) == 0)
      v36 = sub_10E28(0, v36[2] + 1, 1, v36);
    v78 = v36[2];
    v77 = v36[3];
    if (v78 >= v77 >> 1)
      v36 = sub_10E28((_QWORD *)(v77 > 1), v78 + 1, 1, v36);
    v36[2] = v78 + 1;
    v36[v78 + 4] = v76;
    sub_64510(v76);
    sub_1459C(v125, &qword_3B35D0);
    v71 = sub_145D8(v123, type metadata accessor for ModernShelf);
  }
  v79 = static MetricsPageType.channel.getter(v71);
  v80 = *(uint64_t **)(v38 + 80);
  v81 = v80[2];
  v142 = v79;
  v143 = v82;
  v83._countAndFlagsBits = 95;
  v83._object = (void *)0xE100000000000000;
  String.append(_:)(v83);
  v150 = v81;
  v84 = sub_144B4();
  v85._countAndFlagsBits = BinaryInteger.description.getter(&type metadata for UInt64, v84);
  String.append(_:)(v85);
  swift_bridgeObjectRelease();
  v86 = v37;
  v87 = PageID.init(with:)(v142, v143);
  v88 = v80[2];
  v89 = static MetricsPageType.channel.getter(v87);
  v91 = v90;
  v92 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B6F60);
  inited = swift_initStackObject(v92, v149);
  *(_OWORD *)(inited + 16) = xmmword_2EA0D0;
  *(_QWORD *)(inited + 32) = 0x656C746974;
  *(_QWORD *)(inited + 40) = 0xE500000000000000;
  v94 = v80[4];
  if (v94)
  {
    v95 = v80[3];
    v96 = v80[4];
  }
  else
  {
    v95 = 0;
    v96 = 0xE000000000000000;
  }
  *(_QWORD *)(inited + 48) = v95;
  *(_QWORD *)(inited + 56) = v96;
  swift_bridgeObjectRetain(v94);
  v97 = sub_288078(inited);
  swift_getObjectType();
  v98 = HighlightsProviderProtocol.isSharedContent(_:)(v80[2], 0);
  v142 = v88;
  v142 = BinaryInteger.description.getter(&type metadata for UInt64, v84);
  v143 = v99;
  v144 = (_QWORD *)v89;
  v145 = v91;
  v146 = v97;
  v147 = v98 & 1;
  v148 = 0;
  v100 = v128;
  ScalarDictionary.init()(v142);
  v101 = sub_C97A8((uint64_t)_swiftEmptyArrayStorage);
  v102 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B89A0);
  v103 = type metadata accessor for PageMetrics.Instruction(0);
  v104 = swift_allocObject(v102, ((*(unsigned __int8 *)(*(_QWORD *)(v103 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v103 - 8) + 80))+ 2 * *(_QWORD *)(*(_QWORD *)(v103 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v103 - 8) + 80) | 7);
  *(_OWORD *)(v104 + 16) = xmmword_2EA080;
  LOBYTE(v150) = 0;
  PageMetrics.Instruction.init(eventType:)(&v150);
  LOBYTE(v150) = 1;
  PageMetrics.Instruction.init(eventType:)(&v150);
  v105 = MetricsPageFields.metricsFields.getter();
  v106 = v130;
  v107 = v129;
  v108 = v131;
  (*(void (**)(char *, char *, uint64_t))(v130 + 16))(v129, v100, v131);
  v109 = v135;
  PageMetrics.init(instructions:pageFields:custom:clickLocationFields:)(v104, v105, v107, v101);
  (*(void (**)(char *, uint64_t))(v106 + 8))(v100, v108);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  LOBYTE(v142) = v154;
  v143 = v140;
  v144 = v36;
  v110 = ModernShelfListBuilder.buildList()();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v111 = (uint64_t)v137;
  (*(void (**)(char *, char *, uint64_t))(v132 + 32))(v137, v86, v134);
  v112 = v133;
  (*(void (**)(uint64_t, char *, uint64_t))(v136 + 32))(v111 + *(int *)(v133 + 20), v109, v138);
  *(_QWORD *)(v111 + *(int *)(v112 + 24)) = v110;
  __swift_instantiateConcreteTypeFromMangledName(&qword_3B89B0);
  v113 = v139;
  v114 = sub_14510(v111, v139, type metadata accessor for ModernPage);
  static PageRenderContentTypes.unspecified.getter(v114);
  v115 = type metadata accessor for PageContent(0);
  swift_storeEnumTagMultiPayload(v113, v115, 3);
  return sub_145D8(v111, type metadata accessor for ModernPage);
}

uint64_t sub_C516C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  id v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  Swift::String v63;

  v53 = a1;
  v1 = type metadata accessor for PageContent(0);
  __chkstk_darwin(v1);
  v57 = (uint64_t)&v52 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B35D0);
  __chkstk_darwin(v3);
  v56 = (uint64_t)&v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v5);
  v7 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
  __chkstk_darwin(v8);
  v59 = (uint64_t)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
  __chkstk_darwin(v10);
  v12 = (char *)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3740);
  __chkstk_darwin(v13);
  v15 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3BF7E0);
  __chkstk_darwin(v16);
  v18 = (char *)&v52 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0C38);
  __chkstk_darwin(v19);
  v21 = (char *)&v52 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = (int *)type metadata accessor for ModernShelf(0);
  v54 = *((_QWORD *)v22 - 1);
  v23 = __chkstk_darwin(v22);
  v25 = (uint64_t *)((char *)&v52 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v23);
  v55 = (uint64_t)&v52 - v26;
  v27 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v63._object = (void *)0xE000000000000000;
  v28._countAndFlagsBits = 0x53574F48535F594DLL;
  v28._object = (void *)0xE800000000000000;
  v29._countAndFlagsBits = 0;
  v29._object = (void *)0xE000000000000000;
  v63._countAndFlagsBits = 0;
  v30 = NSLocalizedString(_:tableName:bundle:value:comment:)(v28, (Swift::String_optional)0, (NSBundle)v27, v29, v63);

  v31 = type metadata accessor for ActionMenu(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v18, 1, 1, v31);
  v32 = type metadata accessor for Header.PrimaryAction(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v15, 1, 1, v32);
  v33 = type metadata accessor for ArtworkModel(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v12, 1, 1, v33);
  swift_bridgeObjectRetain();
  Header.init(title:subtitle:subtitleSymbolName:displaySubtitleAsEyebrow:hasColoredBackground:titleContextMenu:primaryAction:secondaryButtons:artwork:)(v30._countAndFlagsBits, (uint64_t)v30._object, 0, 0, 0, 0, 0, 0, (uint64_t)v21, (uint64_t)v18, (uint64_t)v15, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)v12);
  v53 = sub_2456F8(v53);
  v34 = type metadata accessor for URL(0);
  v35 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56);
  v36 = v35(v59, 1, 1, v34);
  v62 = 0;
  v60 = 0u;
  v61 = 0u;
  v37 = static MetricsTargetType.swoosh.getter(v36);
  static ImpressionMetrics.shelf(id:idType:uniqueID:impressionType:name:)(0x73776F6853794DLL, 0xE700000000000000, 0, 0, 0xD000000000000021, 0x800000000030DF00, v37, v38, v30._countAndFlagsBits, v30._object);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v39 = type metadata accessor for ImpressionMetrics(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v7, 0, 1, v39);
  v40 = v22[8];
  *((_BYTE *)v25 + v40) = 3;
  v41 = (uint64_t)v25 + v22[9];
  v35(v41, 1, 1, v34);
  *v25 = 0xD000000000000021;
  v25[1] = 0x800000000030DF00;
  sub_15BD4((uint64_t)v21, (uint64_t)v25 + v22[5], &qword_3B0C38);
  v42 = (char *)v25 + v22[6];
  *(_WORD *)v42 = 280;
  *((_WORD *)v42 + 3) = 256;
  *(_DWORD *)(v42 + 2) = 0;
  *((_QWORD *)v42 + 1) = 1;
  *(_QWORD *)((char *)v25 + v22[7]) = v53;
  sub_3C454(v59, v41, &qword_3B4370);
  *((_BYTE *)v25 + v22[10]) = 1;
  *((_BYTE *)v25 + v22[11]) = 0;
  v43 = (uint64_t)v25 + v22[12];
  if (*((_QWORD *)&v61 + 1))
  {
    sub_F4D8(&v60, v43);
  }
  else
  {
    v44 = (unint64_t)v61;
    *(_OWORD *)v43 = v60;
    *(_OWORD *)(v43 + 16) = v44;
    *(_QWORD *)(v43 + 32) = v62;
  }
  sub_15BD4((uint64_t)v7, (uint64_t)v25 + v22[13], (uint64_t *)&unk_3B8790);
  *((_BYTE *)v25 + v40) = 3;
  v45 = v55;
  sub_3C56C((uint64_t)v25, v55, type metadata accessor for ModernShelf);
  v46 = v56;
  sub_14510(v45, v56, type metadata accessor for ModernShelf);
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v54 + 56))(v46, 0, 2, v22);
  v47 = v58;
  v48 = v58 + OBJC_IVAR____TtC8ShelfKit16ChannelPresenter_myShowsShelf;
  swift_beginAccess(v58 + OBJC_IVAR____TtC8ShelfKit16ChannelPresenter_myShowsShelf, &v60, 33, 0);
  sub_C600C(v46, v48, &qword_3B35D0);
  swift_endAccess(&v60);
  swift_beginAccess(v47 + 160, &v60, 0, 0);
  v49 = *(_QWORD *)(v47 + 160);
  swift_retain();
  v50 = v57;
  sub_C42C4(v57);
  CurrentValueSubject.value.setter(v50);
  swift_release(v49);
  sub_1459C(v46, &qword_3B35D0);
  return sub_145D8(v45, type metadata accessor for ModernShelf);
}

uint64_t sub_C57A0@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4EB0);
  result = FRPOutput.content.getter(v2);
  if (!((unint64_t)v12 >> 62))
  {
    v4 = *(_QWORD *)((char *)&dword_10 + (v12 & 0xFFFFFFFFFFFFF8));
    if (v4)
      goto LABEL_3;
LABEL_18:
    result = swift_bridgeObjectRelease();
    *a1 = _swiftEmptyArrayStorage;
    return result;
  }
  if (v12 < 0)
    v11 = v12;
  else
    v11 = v12 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  v4 = _CocoaArrayWrapper.endIndex.getter(v11);
  result = swift_bridgeObjectRelease();
  if (!v4)
    goto LABEL_18;
LABEL_3:
  if (v4 >= 1)
  {
    for (i = 0; i != v4; ++i)
    {
      if ((v12 & 0xC000000000000001) != 0)
      {
        v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(i);
        v7 = v6;
      }
      else
      {
        v7 = *(_QWORD *)(v12 + 8 * i + 32);
        v6 = swift_retain();
      }
      v8 = *(unsigned __int8 *)(v7 + OBJC_IVAR____TtC8ShelfKit17LibraryShowLockup_isSubscribed);
      if (v8 == 2 || (v8 & 1) == 0)
      {
        swift_release(v7);
      }
      else
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v6);
        v9 = _swiftEmptyArrayStorage[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v9);
        v10 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v9, v7);
        specialized ContiguousArray._endMutation()(v10);
      }
    }
    goto LABEL_18;
  }
  __break(1u);
  return result;
}

uint64_t sub_C5918(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[24];

  v2 = *a1;
  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v10, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    if ((unint64_t)v2 >> 62)
    {
      if (v2 < 0)
        v7 = v2;
      else
        v7 = v2 & 0xFFFFFFFFFFFFFF8;
      v8 = type metadata accessor for LegacyLockup(0);
      swift_bridgeObjectRetain();
      v9 = _bridgeCocoaArray<A>(_:)(v7, v8);
      swift_bridgeObjectRelease();
      v2 = v9;
    }
    else
    {
      v6 = swift_bridgeObjectRetain();
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v6);
      type metadata accessor for LegacyLockup(0);
    }
    sub_C516C(v2);
    swift_release(v5);
    return swift_bridgeObjectRelease();
  }
  return result;
}

_QWORD *ChannelPresenter.deinit()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  swift_release(v0[2]);
  swift_unknownObjectRelease(v0[3]);
  __swift_destroy_boxed_opaque_existential_1(v0 + 5);
  swift_release(v0[10]);
  swift_unknownObjectRelease(v0[11]);
  __swift_destroy_boxed_opaque_existential_1(v0 + 13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release(v0[20]);
  swift_release(v0[21]);
  swift_release(v0[22]);
  v1 = (char *)v0 + OBJC_IVAR____TtC8ShelfKit16ChannelPresenter__storePage;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B73A8);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_1459C((uint64_t)v0 + OBJC_IVAR____TtC8ShelfKit16ChannelPresenter_headerShelf, &qword_3B8660);
  sub_1459C((uint64_t)v0 + OBJC_IVAR____TtC8ShelfKit16ChannelPresenter_storeErrorShelf, &qword_3B8660);
  sub_64510(*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC8ShelfKit16ChannelPresenter_storeShelves));
  sub_1459C((uint64_t)v0 + OBJC_IVAR____TtC8ShelfKit16ChannelPresenter_highlightShelf, &qword_3B8660);
  sub_145D8((uint64_t)v0 + OBJC_IVAR____TtC8ShelfKit16ChannelPresenter_interactionContextPage, (uint64_t (*)(_QWORD))&type metadata accessor for InteractionContext.Page);
  sub_1459C((uint64_t)v0 + OBJC_IVAR____TtC8ShelfKit16ChannelPresenter_myShowsShelf, &qword_3B35D0);
  return v0;
}

uint64_t ChannelPresenter.__deallocating_deinit()
{
  uint64_t v0;

  ChannelPresenter.deinit();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_C5B30@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return sub_14510(*v1 + OBJC_IVAR____TtC8ShelfKit16ChannelPresenter_interactionContextPage, a1, (uint64_t (*)(_QWORD))&type metadata accessor for InteractionContext.Page);
}

uint64_t sub_C5B64()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_C5B88()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_C5BB4(uint64_t *a1)
{
  uint64_t v1;

  return sub_C2224(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_C5BBC@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_2F32E0);
  v5 = swift_getKeyPath(&unk_2F3308);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(KeyPath);
  result = swift_release(v5);
  *a2 = v7;
  return result;
}

uint64_t sub_C5C38(unint64_t *a1, uint64_t *a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  unint64_t v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_2F32E0);
  v5 = swift_getKeyPath(&unk_2F3308);
  v7 = v2;
  sub_C5FD8(v2);
  swift_retain();
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

id sub_C5CB0(id result, char a2)
{
  if (a2 != -1)
    return sub_3D47C(result, a2);
  return result;
}

void sub_C5CC4(id a1, char a2)
{
  if (a2 != -1)
    sub_3D624(a1, a2);
}

uint64_t sub_C5CD8(uint64_t *a1)
{
  uint64_t v1;

  return sub_C369C(a1, v1);
}

uint64_t sub_C5CE0()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1((_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_C5D0C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_C37A4((_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 56), a1);
}

uint64_t sub_C5D18(uint64_t a1)
{
  uint64_t v1;

  return sub_C4018(a1, v1, &OBJC_IVAR____TtC8ShelfKit16ChannelPresenter_headerShelf);
}

uint64_t sub_C5D38(uint64_t *a1)
{
  uint64_t v1;

  return sub_C3C08(a1, v1);
}

uint64_t sub_C5D40@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_C3D00(a1, a2);
}

uint64_t sub_C5D48(uint64_t a1)
{
  uint64_t v1;

  return sub_C3EA8(a1, v1);
}

uint64_t sub_C5D50(uint64_t a1)
{
  uint64_t v1;

  return sub_C4018(a1, v1, &OBJC_IVAR____TtC8ShelfKit16ChannelPresenter_highlightShelf);
}

uint64_t sub_C5D70(uint64_t a1)
{
  uint64_t result;

  result = sub_F1C0(&qword_3B7568, (void (*)(uint64_t))type metadata accessor for ChannelPresenter, (uint64_t)&protocol conformance descriptor for ChannelPresenter);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for ChannelPresenter(uint64_t a1)
{
  uint64_t result;

  result = qword_3B75A0;
  if (!qword_3B75A0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ChannelPresenter);
  return result;
}

uint64_t sub_C5DE8()
{
  return sub_F1C0(&qword_3B7570, (void (*)(uint64_t))type metadata accessor for ChannelPresenter, (uint64_t)&protocol conformance descriptor for ChannelPresenter);
}

uint64_t sub_C5E14()
{
  return type metadata accessor for ChannelPresenter(0);
}

void sub_C5E1C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[12];
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v10[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v10[1] = &unk_2F3288;
  v10[2] = &unk_2F32A0;
  v10[3] = (char *)&value witness table for Builtin.NativeObject + 64;
  v10[4] = &unk_2F3288;
  v10[5] = &unk_2F32A0;
  v10[6] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v10[7] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v10[8] = (char *)&value witness table for Builtin.NativeObject + 64;
  v10[9] = (char *)&value witness table for Builtin.NativeObject + 64;
  v10[10] = (char *)&value witness table for Builtin.NativeObject + 64;
  sub_C5F58(319);
  if (v3 <= 0x3F)
  {
    v10[11] = *(_QWORD *)(v2 - 8) + 64;
    sub_6409C(319, (unint64_t *)&qword_3B3460, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    if (v5 <= 0x3F)
    {
      v11 = *(_QWORD *)(v4 - 8) + 64;
      v12 = v11;
      v13 = &unk_2F32B8;
      v14 = v11;
      v6 = type metadata accessor for InteractionContext.Page(319);
      if (v7 <= 0x3F)
      {
        v15 = *(_QWORD *)(v6 - 8) + 64;
        sub_6409C(319, (unint64_t *)&unk_3B75B8, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Loadable);
        if (v9 <= 0x3F)
        {
          v16 = *(_QWORD *)(v8 - 8) + 64;
          swift_updateClassMetadata2(a1, 256, 18, v10, a1 + 80);
        }
      }
    }
  }
}

uint64_t method lookup function for ChannelPresenter(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for ChannelPresenter);
}

uint64_t dispatch thunk of LibraryPodcastOfferAction.__allocating_init(podcast:displaySuccessHUD:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 224))();
}

void sub_C5F58(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_3B75B0)
  {
    v2 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_3B73B8);
    v3 = type metadata accessor for Published(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_3B75B0);
  }
}

ValueMetadata *type metadata accessor for ChannelPresenter.Configuration()
{
  return &type metadata for ChannelPresenter.Configuration;
}

uint64_t sub_C5FC8(uint64_t *a1)
{
  uint64_t v1;

  return sub_C41B0(a1, v1);
}

uint64_t sub_C5FD0(uint64_t a1)
{
  uint64_t v1;

  return sub_C4244(a1, v1);
}

unint64_t sub_C5FD8(unint64_t result)
{
  if (result >= 2)
    return swift_retain(result);
  return result;
}

uint64_t sub_C5FE8()
{
  uint64_t v0;

  return sub_C3E50(v0);
}

unint64_t sub_C5FF4(unint64_t result)
{
  if (result >= 2)
    return swift_release(result);
  return result;
}

uint64_t sub_C6004(uint64_t *a1)
{
  uint64_t v1;

  return sub_C5918(a1, v1);
}

uint64_t sub_C600C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 24))(a2, a1, v5);
  return a2;
}

uint64_t MetricsController.process(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  char *v42;
  void (*v43)(char *, uint64_t, uint64_t);
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t, uint64_t);
  char *v49;
  void (*v50)(char *, char *, uint64_t);
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  char *v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t (*v94)(char *, uint64_t);
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t (*v109)(char *, uint64_t);
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  char *v117;
  uint64_t v118;
  char *v119;
  char *v120;
  char *v121;
  uint64_t v122;
  _QWORD aBlock[5];
  uint64_t v124;

  v111 = a1;
  v101 = type metadata accessor for DispatchWorkItemFlags(0);
  v100 = *(_QWORD *)(v101 - 8);
  __chkstk_darwin(v101);
  v99 = (char *)&v96 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = type metadata accessor for DispatchQoS(0);
  v97 = *(_QWORD *)(v98 - 8);
  __chkstk_darwin(v98);
  v96 = (char *)&v96 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for MetricsData(0);
  v5 = *(_QWORD *)(v4 - 8);
  v113 = v4;
  v114 = v5;
  v6 = __chkstk_darwin(v4);
  v120 = (char *)&v96 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v110 = v7;
  __chkstk_darwin(v6);
  v116 = (char *)&v96 - v8;
  v112 = type metadata accessor for MetricsPipeline(0);
  v118 = *(_QWORD *)(v112 - 8);
  v9 = __chkstk_darwin(v112);
  v117 = (char *)&v96 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v108 = v10;
  __chkstk_darwin(v9);
  v107 = (char *)&v96 - v11;
  v109 = (uint64_t (*)(char *, uint64_t))__swift_instantiateConcreteTypeFromMangledName(&qword_3B76E8);
  v105 = *((_QWORD *)v109 - 1);
  __chkstk_darwin(v109);
  v13 = (char *)&v96 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for MetricsActivity.State(0);
  __chkstk_darwin(v14);
  v16 = (char **)((char *)&v96 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v104 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B76F0);
  v103 = *(_QWORD *)(v104 - 8);
  __chkstk_darwin(v104);
  v18 = (char *)&v96 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for MetricsFieldsContext(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = __chkstk_darwin(v19);
  v121 = (char *)&v96 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v21);
  v115 = (char *)&v96 - v24;
  v25 = __chkstk_darwin(v23);
  v27 = (char *)&v96 - v26;
  v28 = __chkstk_darwin(v25);
  v30 = (char *)&v96 - v29;
  v106 = v31;
  __chkstk_darwin(v28);
  v119 = (char *)&v96 - v32;
  aBlock[0] = *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit17MetricsController_pageContextTracker);
  v33 = swift_retain(aBlock[0]);
  static MetricsFieldsContext.Property<A>.pageContextTracker.getter(v33);
  v34 = type metadata accessor for PageContextTracker(0);
  MetricsFieldsContext.addingValue<A>(_:forProperty:)(aBlock, v18, v34);
  (*(void (**)(char *, uint64_t))(v103 + 8))(v18, v104);
  swift_release(aBlock[0]);
  v104 = v1;
  OSAllocatedUnfairLock.current.getter(v16, *(_QWORD *)(*(_QWORD *)(v1 + 24) + OBJC_IVAR____TtC8ShelfKit15MetricsActivity_state), v14);
  v35 = *(_QWORD *)((char *)v16 + *(int *)(v14 + 28));
  swift_bridgeObjectRetain(v35);
  v36 = sub_B4A20((uint64_t)v16);
  aBlock[0] = v35;
  static MetricsFieldsContext.Property<A>.pageFields.getter(v36);
  v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0A78);
  MetricsFieldsContext.addingValue<A>(_:forProperty:)(aBlock, v13, v37);
  (*(void (**)(char *, uint64_t (*)(char *, uint64_t)))(v105 + 8))(v13, v109);
  swift_bridgeObjectRelease();
  v38 = v20;
  v39 = *(void (**)(char *, uint64_t))(v20 + 8);
  v122 = v19;
  v39(v27, v19);
  LOBYTE(aBlock[0]) = 0;
  if (qword_3B0048 != -1)
    swift_once(&qword_3B0048, sub_43AB0);
  v40 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2BC0);
  v41 = __swift_project_value_buffer(v40, (uint64_t)qword_3B2B90);
  v42 = v119;
  MetricsFieldsContext.addingValue<A>(_:forProperty:)(aBlock, v41, &type metadata for Bool);
  v109 = (uint64_t (*)(char *, uint64_t))v39;
  v39(v30, v122);
  v43 = *(void (**)(char *, uint64_t, uint64_t))(v118 + 16);
  v44 = v107;
  v45 = v112;
  v43(v107, v104 + OBJC_IVAR____TtC8ShelfKit17MetricsController_pipeline, v112);
  v47 = v113;
  v46 = v114;
  v48 = *(void (**)(char *, uint64_t, uint64_t))(v114 + 16);
  v49 = v116;
  v48(v116, v111, v113);
  v102 = v38;
  v50 = *(void (**)(char *, char *, uint64_t))(v38 + 16);
  v51 = v115;
  v52 = v42;
  v53 = v122;
  v50(v115, v52, v122);
  v43(v117, (uint64_t)v44, v45);
  v48(v120, (uint64_t)v49, v47);
  v50(v121, v51, v53);
  v54 = v118;
  v55 = *(unsigned __int8 *)(v118 + 80);
  v56 = (v55 + 16) & ~v55;
  v57 = *(unsigned __int8 *)(v46 + 80);
  v58 = (v108 + v57 + v56) & ~v57;
  v59 = v102;
  v60 = *(unsigned __int8 *)(v102 + 80);
  v61 = (v110 + v60 + v58) & ~v60;
  v62 = swift_allocObject(&unk_37EC60, v61 + v106, v55 | v57 | v60 | 7);
  v63 = v62 + v56;
  v64 = v45;
  (*(void (**)(uint64_t, char *, uint64_t))(v54 + 32))(v63, v44, v45);
  v65 = v62 + v58;
  v66 = v46;
  (*(void (**)(uint64_t, char *, uint64_t))(v46 + 32))(v65, v116, v47);
  (*(void (**)(uint64_t, char *, uint64_t))(v59 + 32))(v62 + v61, v115, v122);
  v67 = objc_msgSend((id)objc_opt_self(NSThread), "isMainThread");
  v68 = v47;
  v70 = v120;
  v69 = v121;
  v71 = v64;
  v72 = v117;
  if (v67)
  {
    v73 = v66;
    v74 = MetricsPipeline.process(_:using:)(v120, v121);
    swift_release(v62);
    v62 = v74;
  }
  else
  {
    v75 = sub_676C8();
    v116 = (char *)static OS_dispatch_queue.main.getter(v75);
    v76 = swift_allocObject(&unk_37EC88, 32, 7);
    *(_QWORD *)(v76 + 16) = sub_C76C0;
    *(_QWORD *)(v76 + 24) = v62;
    aBlock[4] = sub_327F0;
    v124 = v76;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_2C9F4;
    aBlock[3] = &block_descriptor_5;
    v115 = (char *)_Block_copy(aBlock);
    v77 = v124;
    swift_retain(v62);
    v78 = swift_release(v77);
    v79 = v96;
    static DispatchQoS.unspecified.getter(v78);
    aBlock[0] = _swiftEmptyArrayStorage;
    v80 = sub_F1C0((unint64_t *)&qword_3B4420, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v81 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8720);
    v82 = sub_724B4();
    v83 = v54;
    v84 = v99;
    v85 = v72;
    v86 = v101;
    v87 = v80;
    v71 = v64;
    dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v81, v82, v101, v87);
    v88 = v115;
    v89 = v116;
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v79, v84, v115);
    _Block_release(v88);

    v90 = v84;
    v54 = v83;
    v69 = v121;
    v91 = v86;
    v72 = v85;
    v68 = v47;
    v73 = v114;
    (*(void (**)(char *, uint64_t))(v100 + 8))(v90, v91);
    v92 = v79;
    v70 = v120;
    (*(void (**)(char *, uint64_t))(v97 + 8))(v92, v98);
  }
  swift_release(v62);
  (*(void (**)(char *, uint64_t))(v54 + 8))(v72, v71);
  (*(void (**)(char *, uint64_t))(v73 + 8))(v70, v68);
  v93 = v122;
  v94 = v109;
  v109(v69, v122);
  return v94(v119, v93);
}

void MetricsController.addAdHocImpression(_:in:at:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  double v6;
  double v7;
  double v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[4];
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD v58[6];

  sub_C98F4(a2, (uint64_t)v58);
  v6 = *(double *)v58;
  v7 = *(double *)&v58[1];
  v8 = *(double *)&v58[2];
  v9 = *(double *)&v58[3];
  v10 = type metadata accessor for ScalarDictionary(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for ImpressionMetrics.ID(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for ImpressionMetrics(0);
  __chkstk_darwin(v16);
  v20 = (char *)&v45 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = *(_QWORD *)(v3 + 16);
  if (v21)
  {
    v49 = v18;
    v50 = v17;
    v48 = v21;
    v22 = swift_retain();
    v23 = MetricsAdHocImpression.metricsId.getter(v22);
    v25 = ImpressionMetrics.ID.init(parent:element:index:)(0, 0, v23, v24, a3);
    v26 = MetricsAdHocImpression.impressionType.getter(v25);
    v28 = v27;
    v29 = MetricsAdHocImpression.metricsName.getter();
    v47 = a2;
    v31 = v30;
    v32 = v20;
    v33 = MetricsAdHocImpression.channelAdamId.getter();
    v46 = v15;
    v35 = v34;
    v36 = MetricsAdHocImpression.eligibilityType.getter();
    v45 = v12;
    v51[0] = v26;
    v51[1] = v28;
    v51[2] = v29;
    v51[3] = v31;
    v52 = a3;
    v53 = 0;
    v54 = v33;
    v55 = v35;
    v56 = v36;
    v57 = v37;
    ImpressionFields.metricsFields.getter();
    v39 = v38;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v40 = swift_bridgeObjectRelease();
    v41 = v45;
    ScalarDictionary.init()(v40);
    v42 = sub_C97A8((uint64_t)_swiftEmptyArrayStorage);
    v43 = sub_C97A8((uint64_t)_swiftEmptyArrayStorage);
    ImpressionMetrics.init(id:fields:custom:commonFields:clickLocationFields:)(v46, v39, v41, v42, v43);
    sub_C98F4(v47, (uint64_t)v51);
    if ((v52 & 1) != 0)
    {
      v6 = 0.0;
      v8 = 50.0;
      v7 = 0.0;
      v9 = 50.0;
    }
    v44 = v48;
    DynamicImpressionsCalculator.addElement(_:in:at:)(v32, a3, v6, v7, v8, v9);
    swift_release(v44);
    (*(void (**)(char *, uint64_t))(v49 + 8))(v32, v50);
  }
}

uint64_t MetricsController.__allocating_init(asPartOf:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  MetricsController.init(asPartOf:)(a1);
  return v3;
}

uint64_t MetricsController.init(asPartOf:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  void *v32;

  v2 = v1;
  v4 = type metadata accessor for MetricsPipeline(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (uint64_t *)((char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7718);
  __chkstk_darwin(v8);
  v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for MetricsFieldsContext(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit17MetricsController_pageEnterGate) = 0;
  v15 = v1 + OBJC_IVAR____TtC8ShelfKit17MetricsController_pageMetrics;
  v16 = type metadata accessor for PageMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 1, 1, v16);
  v17 = type metadata accessor for DynamicImpressionsCalculator(0);
  BaseObjectGraph.injectIfAvailable<A>(_:)(v17, v17);
  *(_QWORD *)(v2 + 16) = v32;
  v18 = type metadata accessor for MetricsActivity();
  BaseObjectGraph.injectIfAvailable<A>(_:)(v18, v18);
  v19 = v32;
  if (!v32)
  {
    if (qword_3B0108 != -1)
      swift_once(&qword_3B0108, sub_13CAD4);
    v19 = (id)qword_3BBC50;
  }
  *(_QWORD *)(v2 + 24) = v19;
  BaseObjectGraph.injectIfAvailable<A>(_:)(v11, v11);
  v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11);
  if ((_DWORD)v20 == 1)
  {
    MetricsFieldsContext.init()(v20);
    sub_1459C((uint64_t)v10, &qword_3B7718);
    (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v2 + OBJC_IVAR____TtC8ShelfKit17MetricsController_metricsFieldsContext, v14, v11);
  }
  else
  {
    v21 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
    v21(v14, v10, v11);
    v21((char *)(v2 + OBJC_IVAR____TtC8ShelfKit17MetricsController_metricsFieldsContext), v14, v11);
  }
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7728);
  v23 = swift_allocObject(v22, 36, 7);
  *(_QWORD *)(v23 + 16) = 0;
  *(_QWORD *)(v23 + 24) = 0;
  *(_DWORD *)(v23 + 32) = 0;
  *(_QWORD *)(v2 + OBJC_IVAR____TtC8ShelfKit17MetricsController_pageContext) = v23;
  v24 = type metadata accessor for PageContextTracker(0);
  BaseObjectGraph.injectIfAvailable<A>(_:)(v24, v24);
  v25 = (uint64_t)v32;
  if (!v32)
    v25 = static PageContextTracker.shared.getter();
  *(_QWORD *)(v2 + OBJC_IVAR____TtC8ShelfKit17MetricsController_pageContextTracker) = v25;
  BaseObjectGraph.inject<A>(_:)(v7, v4, v4);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v5 + 32))(v2 + OBJC_IVAR____TtC8ShelfKit17MetricsController_pipeline, v7, v4);
  v26 = type metadata accessor for MetricsPageEnterGate();
  v27 = swift_allocObject(v26, 35, 7);
  *(_QWORD *)(v27 + 24) = 0;
  v28 = swift_unknownObjectWeakInit(v27 + 16, 0);
  *(_WORD *)(v27 + 32) = 0;
  *(_BYTE *)(v27 + 34) = 0;
  *(_QWORD *)(v27 + 24) = &protocol witness table for MetricsController;
  swift_unknownObjectWeakAssign(v28, v2);
  swift_release(a1);
  v29 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8ShelfKit17MetricsController_pageEnterGate);
  *(_QWORD *)(v2 + OBJC_IVAR____TtC8ShelfKit17MetricsController_pageEnterGate) = v27;
  swift_release(v29);
  return v2;
}

uint64_t MetricsController.pageMetrics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  v3 = v1 + OBJC_IVAR____TtC8ShelfKit17MetricsController_pageMetrics;
  swift_beginAccess(v3, v5, 0, 0);
  return sub_267BC(v3, a1, &qword_3B4A58);
}

uint64_t sub_C6EA8(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE v10[24];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4A58);
  __chkstk_darwin(v4);
  v6 = &v10[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_267BC(a1, (uint64_t)v6, &qword_3B4A58);
  v7 = *a2 + OBJC_IVAR____TtC8ShelfKit17MetricsController_pageMetrics;
  swift_beginAccess(v7, v10, 33, 0);
  sub_C993C((uint64_t)v6, v7);
  swift_endAccess(v10);
  sub_C6FE0();
  return sub_1459C((uint64_t)v6, &qword_3B4A58);
}

uint64_t MetricsController.pageMetrics.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  v3 = v1 + OBJC_IVAR____TtC8ShelfKit17MetricsController_pageMetrics;
  swift_beginAccess(v1 + OBJC_IVAR____TtC8ShelfKit17MetricsController_pageMetrics, v5, 33, 0);
  sub_C993C(a1, v3);
  swift_endAccess(v5);
  sub_C6FE0();
  return sub_1459C(a1, &qword_3B4A58);
}

void sub_C6FE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, unint64_t, uint64_t);
  uint64_t v34;
  char v35;
  void (*v36)(char *, uint64_t);
  char v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(char *, unint64_t, uint64_t);
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char v53[24];
  char v54[32];

  v1 = type metadata accessor for PageMetrics.InvocationPoint(0);
  v52 = *(_QWORD *)(v1 - 8);
  v2 = __chkstk_darwin(v1);
  v4 = (char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v51 = (char *)&v38 - v5;
  v6 = type metadata accessor for PageMetrics.Instruction(0);
  v50 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v49 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4A58);
  __chkstk_darwin(v8);
  v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for PageMetrics(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = v0 + OBJC_IVAR____TtC8ShelfKit17MetricsController_pageMetrics;
  swift_beginAccess(v0 + OBJC_IVAR____TtC8ShelfKit17MetricsController_pageMetrics, v54, 0, 0);
  sub_267BC(v15, (uint64_t)v10, &qword_3B4A58);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    sub_1459C((uint64_t)v10, &qword_3B4A58);
    v16 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit17MetricsController_pageEnterGate);
    if (v16)
    {
      swift_beginAccess(v16 + 34, v53, 1, 0);
      *(_BYTE *)(v16 + 34) = 0;
      return;
    }
    __break(1u);
    goto LABEL_21;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v10, v11);
  v17 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit17MetricsController_pageEnterGate);
  if (!v17)
  {
LABEL_21:
    __break(1u);
    return;
  }
  v18 = swift_retain();
  v19 = PageMetrics.instructions.getter(v18);
  v43 = *(_QWORD *)(v19 + 16);
  if (v43)
  {
    v39 = v17;
    v40 = v14;
    v41 = v12;
    v42 = v11;
    v46 = v19 + ((*(unsigned __int8 *)(v50 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80));
    v20 = *(_QWORD *)(v50 + 72);
    v44 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v50 + 16);
    v45 = v20;
    v38 = v19;
    swift_bridgeObjectRetain();
    v21 = 0;
    v22 = v51;
    v23 = v49;
    v47 = v6;
    while (1)
    {
      v48 = v21;
      v24 = v44(v23, v46 + v45 * v21, v6);
      v25 = PageMetrics.Instruction.invocationPoints.getter(v24);
      static PageMetrics.InvocationPoint.pageEnter.getter(v25);
      if (*(_QWORD *)(v25 + 16))
      {
        v26 = *(_QWORD *)(v25 + 40);
        v27 = sub_F1C0(&qword_3B6F18, (void (*)(uint64_t))&type metadata accessor for PageMetrics.InvocationPoint, (uint64_t)&protocol conformance descriptor for PageMetrics.InvocationPoint);
        v28 = dispatch thunk of Hashable._rawHashValue(seed:)(v26, v1, v27);
        v29 = -1 << *(_BYTE *)(v25 + 32);
        v30 = v28 & ~v29;
        if (((*(_QWORD *)(v25 + 56 + ((v30 >> 3) & 0xFFFFFFFFFFFFF8)) >> v30) & 1) != 0)
          break;
      }
LABEL_7:
      v21 = v48 + 1;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v52 + 8))(v22, v1);
      v23 = v49;
      v6 = v47;
      (*(void (**)(char *, uint64_t))(v50 + 8))(v49, v47);
      if (v21 == v43)
      {
        swift_bridgeObjectRelease_n(v38, 2);
        v37 = 0;
        goto LABEL_15;
      }
    }
    v31 = ~v29;
    v32 = *(_QWORD *)(v52 + 72);
    v33 = *(void (**)(char *, unint64_t, uint64_t))(v52 + 16);
    while (1)
    {
      v33(v4, *(_QWORD *)(v25 + 48) + v32 * v30, v1);
      v34 = sub_F1C0(&qword_3B6F20, (void (*)(uint64_t))&type metadata accessor for PageMetrics.InvocationPoint, (uint64_t)&protocol conformance descriptor for PageMetrics.InvocationPoint);
      v35 = dispatch thunk of static Equatable.== infix(_:_:)(v4, v22, v1, v34);
      v36 = *(void (**)(char *, uint64_t))(v52 + 8);
      v36(v4, v1);
      if ((v35 & 1) != 0)
        break;
      v30 = (v30 + 1) & v31;
      v22 = v51;
      if (((*(_QWORD *)(v25 + 56 + ((v30 >> 3) & 0xFFFFFFFFFFFFF8)) >> v30) & 1) == 0)
        goto LABEL_7;
    }
    swift_bridgeObjectRelease();
    v36(v51, v1);
    (*(void (**)(char *, uint64_t))(v50 + 8))(v49, v47);
    swift_bridgeObjectRelease_n(v38, 2);
    v37 = 1;
LABEL_15:
    v12 = v41;
    v11 = v42;
    v17 = v39;
    v14 = v40;
  }
  else
  {
    swift_bridgeObjectRelease();
    v37 = 0;
  }
  MetricsPageEnterGate.hasPageMetrics.setter(v37);
  swift_release(v17);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

void (*MetricsController.pageMetrics.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess(v1 + OBJC_IVAR____TtC8ShelfKit17MetricsController_pageMetrics, a1, 33, 0);
  return sub_C747C;
}

void sub_C747C(uint64_t a1, char a2)
{
  swift_endAccess(a1);
  if ((a2 & 1) == 0)
    sub_C6FE0();
}

Swift::Void __swiftcall MetricsController.reset()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v10[24];

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4A58);
  __chkstk_darwin(v1);
  v3 = &v10[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v4 = type metadata accessor for PageMetrics(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = v0 + OBJC_IVAR____TtC8ShelfKit17MetricsController_pageMetrics;
  swift_beginAccess(v0 + OBJC_IVAR____TtC8ShelfKit17MetricsController_pageMetrics, v10, 33, 0);
  sub_C993C((uint64_t)v3, v5);
  swift_endAccess(v10);
  sub_C6FE0();
  sub_1459C((uint64_t)v3, &qword_3B4A58);
  v6 = OBJC_IVAR____TtC8ShelfKit17MetricsController_pageEnterGate;
  v7 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit17MetricsController_pageEnterGate);
  if (v7)
  {
    swift_beginAccess(v7 + 32, v10, 1, 0);
    *(_BYTE *)(v7 + 32) = 0;
    v8 = *(_QWORD *)(v0 + v6);
    if (v8)
    {
      swift_retain();
      MetricsPageEnterGate.hasExitedWhileAppeared.setter(0);
      swift_release(v8);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_C75C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = type metadata accessor for MetricsPipeline(0);
  v1 = *(_QWORD *)(v17 - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 16) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);
  v16 = type metadata accessor for MetricsData(0);
  v5 = *(_QWORD *)(v16 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v3 + v4 + v6) & ~v6;
  v8 = *(_QWORD *)(v5 + 64);
  v9 = type metadata accessor for MetricsFieldsContext(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (v7 + v8 + v11) & ~v11;
  v15 = v12 + *(_QWORD *)(v10 + 64);
  v13 = v2 | v6 | v11 | 7;
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v0 + v3, v17);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v0 + v7, v16);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v0 + v12, v9);
  return swift_deallocObject(v0, v15, v13);
}

uint64_t sub_C76C0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(type metadata accessor for MetricsPipeline(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 64);
  v4 = *(_QWORD *)(type metadata accessor for MetricsData(0) - 8);
  v5 = (v2 + v3 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MetricsFieldsContext(0) - 8) + 80);
  v8 = MetricsPipeline.process(_:using:)(v0 + v5, v0 + ((v5 + v6 + v7) & ~v7));
  return swift_release(v8);
}

uint64_t MetricsController.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  swift_release(*(_QWORD *)(v0 + 16));

  v1 = v0 + OBJC_IVAR____TtC8ShelfKit17MetricsController_metricsFieldsContext;
  v2 = type metadata accessor for MetricsFieldsContext(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit17MetricsController_pageEnterGate));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit17MetricsController_pageContext));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit17MetricsController_pageContextTracker));
  v3 = v0 + OBJC_IVAR____TtC8ShelfKit17MetricsController_pipeline;
  v4 = type metadata accessor for MetricsPipeline(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  sub_1459C(v0 + OBJC_IVAR____TtC8ShelfKit17MetricsController_pageMetrics, &qword_3B4A58);
  return v0;
}

uint64_t MetricsController.__deallocating_deinit()
{
  uint64_t v0;

  MetricsController.deinit();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

Swift::Void __swiftcall MetricsController.observe(lifecycleEvent:)(ShelfKit::StoreViewControllerLifecycleEvent lifecycleEvent)
{
  uint64_t v2;

  v2 = type metadata accessor for PageMetrics.InvocationPoint(0);
  __chkstk_darwin(v2);
  __asm { BR              X10 }
}

uint64_t sub_C78AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (*(_QWORD *)(v0 + 16))
    ((void (*)(uint64_t))DynamicImpressionsCalculator.isVisible.setter)(1);
  v1 = PageContextTracker.value.getter();
  v3 = v2;
  v4 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit17MetricsController_pageContext);
  os_unfair_lock_lock((os_unfair_lock_t)(v4 + 32));
  swift_bridgeObjectRelease();
  *(_QWORD *)(v4 + 16) = v1;
  *(_QWORD *)(v4 + 24) = v3;
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 32));
  return swift_bridgeObjectRelease();
}

uint64_t sub_C7BC0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  swift_bridgeObjectRelease(a1[1]);
  *a1 = a2;
  a1[1] = a3;
  return swift_bridgeObjectRetain(a3);
}

uint64_t MetricsController.sendEvents(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  os_unfair_lock_s *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  __n128 v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  id v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  char *v102;
  uint64_t v103;
  id v104;
  NSString v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t (*v113)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  void **aBlock;
  uint64_t v147;
  void *v148;
  void *v149;
  void *v150;
  uint64_t v151;
  void **v152;
  uint64_t v153;

  v2 = v1;
  v140 = a1;
  v125 = type metadata accessor for DispatchWorkItemFlags(0);
  v124 = *(_QWORD *)(v125 - 8);
  __chkstk_darwin(v125);
  v123 = (char *)&v108 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v122 = type metadata accessor for DispatchQoS(0);
  v121 = *(_QWORD *)(v122 - 8);
  __chkstk_darwin(v122);
  v120 = (char *)&v108 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v119 = type metadata accessor for DispatchQoS.QoSClass(0);
  v118 = *(_QWORD *)(v119 - 8);
  __chkstk_darwin(v119);
  v117 = (char *)&v108 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v144 = type metadata accessor for MetricsPipeline(0);
  v129 = *(_QWORD *)(v144 - 8);
  __chkstk_darwin(v144);
  v138 = v6;
  v143 = (char *)&v108 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v134 = type metadata accessor for MetricsActivity.State(0);
  __chkstk_darwin(v134);
  v135 = (uint64_t *)((char *)&v108 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7738);
  __chkstk_darwin(v8);
  v136 = (char *)&v108 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v133 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B76E8);
  v132 = *(_QWORD *)(v133 - 8);
  __chkstk_darwin(v133);
  v131 = (char *)&v108 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v128 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B76F0);
  v127 = *(_QWORD *)(v128 - 8);
  __chkstk_darwin(v128);
  v126 = (char *)&v108 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v145 = type metadata accessor for MetricsFieldsContext(0);
  v137 = *(_QWORD *)(v145 - 8);
  v12 = *(_QWORD *)(v137 + 64);
  v13 = __chkstk_darwin(v145);
  v142 = (char *)&v108 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v13);
  v130 = (char *)&v108 - v15;
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v108 - v17;
  __chkstk_darwin(v16);
  v20 = (char *)&v108 - v19;
  v141 = type metadata accessor for PageMetrics.InvocationPoint(0);
  v21 = *(_QWORD *)(v141 - 8);
  v22 = *(_QWORD *)(v21 + 64);
  v23 = __chkstk_darwin(v141);
  __chkstk_darwin(v23);
  v25 = (char *)&v108 - v24;
  v139 = v2;
  v26 = v2 + OBJC_IVAR____TtC8ShelfKit17MetricsController_pageMetrics;
  swift_beginAccess(v2 + OBJC_IVAR____TtC8ShelfKit17MetricsController_pageMetrics, &aBlock, 32, 0);
  v27 = type metadata accessor for PageMetrics(0);
  v28 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 48);
  v29 = v28(v26, 1, v27);
  if ((_DWORD)v29)
    return swift_endAccess(&aBlock);
  v113 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, __n128))v28;
  v114 = v27;
  v109 = v18;
  v110 = v22;
  v111 = (char *)&v108 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = v21;
  v112 = v12;
  v116 = v20;
  v108 = PageMetrics.instructions.getter(v29);
  v31 = swift_endAccess(&aBlock);
  static PageMetrics.InvocationPoint.pageEnter.getter(v31);
  v32 = sub_F1C0(&qword_3B7740, (void (*)(uint64_t))&type metadata accessor for PageMetrics.InvocationPoint, (uint64_t)&protocol conformance descriptor for PageMetrics.InvocationPoint);
  v33 = v141;
  dispatch thunk of RawRepresentable.rawValue.getter(&aBlock, v141, v32);
  dispatch thunk of RawRepresentable.rawValue.getter(&v152, v33, v32);
  v34 = v26;
  if (aBlock == v152 && v147 == v153)
  {
    swift_bridgeObjectRelease_n(v147, 2);
    (*(void (**)(char *, uint64_t))(v115 + 8))(v25, v33);
    v35 = v137;
    v36 = v131;
LABEL_7:
    v39 = *(_QWORD *)(v139 + 24);
    v40 = swift_beginAccess(v34, &aBlock, 32, 0);
    v41 = v113(v34, 1, v114, v40);
    v42 = 0;
    if (!(_DWORD)v41)
      v42 = PageMetrics.pageFields.getter(v41);
    swift_endAccess(&aBlock);
    v43 = *(_QWORD *)(v39 + OBJC_IVAR____TtC8ShelfKit15MetricsActivity_state);
    v44 = v43 + *(_QWORD *)(class metadata base offset for ManagedBuffer + *(_QWORD *)v43 + 16);
    v45 = (os_unfair_lock_s *)(v43 + ((*(unsigned int *)(*(_QWORD *)v43 + 48) + 3) & 0x1FFFFFFFCLL));
    os_unfair_lock_lock(v45);
    sub_13D0C4(v44, v42);
    os_unfair_lock_unlock(v45);
    v38 = swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  v37 = _stringCompareWithSmolCheck(_:_:expecting:)(aBlock, v147, v152, v153, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v38 = (*(uint64_t (**)(char *, uint64_t))(v115 + 8))(v25, v33);
  v35 = v137;
  v36 = v131;
  if ((v37 & 1) != 0)
    goto LABEL_7;
LABEL_10:
  v46 = v34;
  v47 = v139;
  v48 = PageContextTracker.copy()(v38);
  v49 = *(_QWORD *)(v47 + OBJC_IVAR____TtC8ShelfKit17MetricsController_pageContext);
  v50 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7748);
  v51 = OSAllocatedUnfairLock.current.getter(&aBlock, v49, v50);
  if (v147)
  {
    PageContextTracker.push(_:)(aBlock);
    v51 = (_QWORD *)swift_bridgeObjectRelease();
  }
  v52 = v130;
  v53 = v128;
  aBlock = (void **)v48;
  v54 = v126;
  static MetricsFieldsContext.Property<A>.pageContextTracker.getter(v51);
  v55 = type metadata accessor for PageContextTracker(0);
  MetricsFieldsContext.addingValue<A>(_:forProperty:)(&aBlock, v54, v55);
  (*(void (**)(char *, uint64_t))(v127 + 8))(v54, v53);
  v56 = swift_beginAccess(v46, &aBlock, 32, 0);
  v57 = v113(v46, 1, v114, v56);
  v58 = 0;
  v59 = v143;
  v60 = (uint64_t)v136;
  if (!(_DWORD)v57)
    v58 = PageMetrics.pageFields.getter(v57);
  v131 = (char *)v48;
  v61 = swift_endAccess(&aBlock);
  aBlock = (void **)v58;
  static MetricsFieldsContext.Property<A>.pageFields.getter(v61);
  v62 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0A78);
  v63 = v36;
  v64 = v109;
  MetricsFieldsContext.addingValue<A>(_:forProperty:)(&aBlock, v63, v62);
  (*(void (**)(char *, uint64_t))(v132 + 8))(v63, v133);
  swift_bridgeObjectRelease();
  v65 = v145;
  v137 = *(_QWORD *)(v35 + 8);
  ((void (*)(char *, uint64_t))v137)(v52, v145);
  v133 = *(_QWORD *)(v47 + 24);
  v67 = v134;
  v66 = v135;
  OSAllocatedUnfairLock.current.getter(v135, *(_QWORD *)(v133 + OBJC_IVAR____TtC8ShelfKit15MetricsActivity_state), v134);
  v68 = (uint64_t)v66 + *(int *)(v67 + 24);
  v69 = v35;
  sub_267BC(v68, v60, &qword_3B7738);
  sub_B4A20((uint64_t)v66);
  v70 = type metadata accessor for MetricsActivity.PageReferrer(0);
  LOBYTE(v66) = (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v70 - 8) + 48))(v60, 1, v70) != 1;
  sub_1459C(v60, &qword_3B7738);
  LOBYTE(aBlock) = (_BYTE)v66;
  if (qword_3B0048 != -1)
    swift_once(&qword_3B0048, sub_43AB0);
  v71 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2BC0);
  v72 = __swift_project_value_buffer(v71, (uint64_t)qword_3B2B90);
  v73 = v116;
  MetricsFieldsContext.addingValue<A>(_:forProperty:)(&aBlock, v72, &type metadata for Bool);
  ((void (*)(char *, uint64_t))v137)(v64, v65);
  v74 = v47 + OBJC_IVAR____TtC8ShelfKit17MetricsController_pipeline;
  v75 = v115;
  v76 = v111;
  v77 = v141;
  (*(void (**)(char *, uint64_t, uint64_t))(v115 + 16))(v111, v140, v141);
  v78 = v129;
  (*(void (**)(char *, uint64_t, uint64_t))(v129 + 16))(v59, v74, v144);
  (*(void (**)(char *, char *, uint64_t))(v69 + 16))(v142, v73, v65);
  v79 = *(unsigned __int8 *)(v75 + 80);
  v80 = (v79 + 24) & ~v79;
  v81 = (v110 + v80 + 7) & 0xFFFFFFFFFFFFFFF8;
  v82 = *(unsigned __int8 *)(v78 + 80);
  v83 = (v82 + v81 + 8) & ~v82;
  v84 = *(unsigned __int8 *)(v69 + 80);
  v85 = v78;
  v86 = (v138 + v84 + v83) & ~v84;
  v87 = swift_allocObject(&unk_37ECD8, v86 + v112, v79 | v82 | v84 | 7);
  *(_QWORD *)(v87 + 16) = v108;
  (*(void (**)(uint64_t, char *, uint64_t))(v75 + 32))(v87 + v80, v76, v77);
  v88 = (void *)v133;
  *(_QWORD *)(v87 + v81) = v133;
  (*(void (**)(uint64_t, char *, uint64_t))(v85 + 32))(v87 + v83, v143, v144);
  v89 = v145;
  (*(void (**)(uint64_t, char *, uint64_t))(v69 + 32))(v87 + v86, v142, v145);
  v90 = v88;
  if (ASKBuildTypeIsUnitTesting())
  {
    sub_676C8();
    v91 = v118;
    v92 = v117;
    v93 = v119;
    (*(void (**)(char *, _QWORD, uint64_t))(v118 + 104))(v117, enum case for DispatchQoS.QoSClass.default(_:), v119);
    v94 = (void *)static OS_dispatch_queue.global(qos:)(v92);
    (*(void (**)(char *, uint64_t))(v91 + 8))(v92, v93);
    v95 = swift_allocObject(&unk_37ED28, 32, 7);
    *(_QWORD *)(v95 + 16) = sub_C9AA0;
    *(_QWORD *)(v95 + 24) = v87;
    v150 = sub_C9B6C;
    v151 = v95;
    aBlock = _NSConcreteStackBlock;
    v147 = 1107296256;
    v148 = sub_2C9F4;
    v149 = &block_descriptor_15_0;
    v96 = _Block_copy(&aBlock);
    v97 = swift_retain();
    v98 = v120;
    static DispatchQoS.unspecified.getter(v97);
    v152 = (void **)_swiftEmptyArrayStorage;
    v99 = sub_F1C0((unint64_t *)&qword_3B4420, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v100 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8720);
    v101 = sub_724B4();
    v102 = v123;
    v103 = v125;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v152, v100, v101, v125, v99);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v98, v102, v96);
    _Block_release(v96);
    swift_release(v87);
    swift_release(v131);

    (*(void (**)(char *, uint64_t))(v124 + 8))(v102, v103);
    (*(void (**)(char *, uint64_t))(v121 + 8))(v98, v122);
    ((void (*)(char *, uint64_t))v137)(v116, v89);
    return swift_release(v151);
  }
  else
  {
    v104 = objc_msgSend((id)objc_opt_self(NSProcessInfo), "processInfo");
    v105 = String._bridgeToObjectiveC()();
    v150 = sub_C9AA0;
    v151 = v87;
    aBlock = _NSConcreteStackBlock;
    v147 = 1107296256;
    v148 = sub_C9768;
    v149 = &block_descriptor_9;
    v106 = _Block_copy(&aBlock);
    v107 = v151;
    swift_retain();
    swift_release(v107);
    objc_msgSend(v104, "performExpiringActivityWithReason:usingBlock:", v105, v106);
    swift_release(v131);
    _Block_release(v106);
    swift_release(v87);

    return ((uint64_t (*)(char *, uint64_t))v137)(v116, v89);
  }
}

void sub_C886C(ShelfKit::StoreViewControllerLifecycleEvent a1)
{
  MetricsController.observe(lifecycleEvent:)(a1);
}

void sub_C888C(int a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t);
  char *v41;
  void (*v42)(uint64_t, char *, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  void (*v58)(char *, uint64_t);
  uint64_t v59;
  void (*v60)(uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char v70;
  _QWORD *v71;
  int v72;
  uint64_t v73;
  char *v74;
  __n128 v75;
  void (*v76)(void ***, _QWORD);
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  dispatch_group_t v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  NSObject *v97;
  id v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  char *v104;
  uint64_t v105;
  void *v106;
  uint64_t v107;
  dispatch_group_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  void (*v134)(char *, uint64_t);
  void (*v135)(uint64_t, char *, uint64_t);
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  dispatch_group_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  char *v154;
  void **v155;
  uint64_t v156;
  void **aBlock;
  uint64_t v158;
  uint64_t (*v159)(uint64_t);
  void *v160;
  uint64_t (*v161)();
  uint64_t v162;

  v130 = a6;
  v129 = a5;
  v131 = a4;
  v147 = a3;
  v109 = a2;
  LODWORD(v154) = a1;
  v128 = type metadata accessor for DispatchWorkItemFlags(0);
  v127 = *(_QWORD *)(v128 - 8);
  __chkstk_darwin(v128);
  v126 = (char *)&v109 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v125 = type metadata accessor for DispatchQoS(0);
  v124 = *(_QWORD *)(v125 - 8);
  __chkstk_darwin(v125);
  v123 = (char *)&v109 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v141 = type metadata accessor for MetricsFieldsContext(0);
  v122 = *(_QWORD *)(v141 - 8);
  __chkstk_darwin(v141);
  v153 = v8;
  v144 = (char *)&v109 - ((unint64_t)(v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v143 = type metadata accessor for MetricsPipeline(0);
  v121 = *(_QWORD *)(v143 - 8);
  v9 = *(_QWORD *)(v121 + 64);
  __chkstk_darwin(v143);
  v142 = (char *)&v109 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v113 = type metadata accessor for MetricsFieldInclusionRequest(0);
  v112 = *(_QWORD *)(v113 - 8);
  v10 = __chkstk_darwin(v113);
  v111 = (char *)&v109 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v13 = (char *)&v109 - v12;
  v14 = type metadata accessor for MetricsActivity.State(0);
  __chkstk_darwin(v14);
  v16 = (uint64_t *)((char *)&v109 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = type metadata accessor for PageMetrics.InvocationPoint(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(_QWORD *)(v18 + 64);
  v20 = __chkstk_darwin(v17);
  v21 = __chkstk_darwin(v20);
  v23 = (char *)&v109 - v22;
  __chkstk_darwin(v21);
  v25 = (char *)&v109 - v24;
  v26 = type metadata accessor for PageMetrics.Instruction(0);
  v27 = __chkstk_darwin(v26);
  v28 = __chkstk_darwin(v27);
  if ((v154 & 1) != 0)
    return;
  v150 = (char *)&v109 - v29;
  v151 = v17;
  v148 = v31;
  v139 = v30;
  v145 = v28;
  v154 = v25;
  v120 = v23;
  v146 = (char *)&v109 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v152 = v18;
  v115 = v16;
  v116 = v14;
  v110 = v13;
  v140 = dispatch_group_create();
  v138 = *(_QWORD *)(v109 + 16);
  if (!v138)
    goto LABEL_23;
  v114 = OBJC_IVAR____TtC8ShelfKit15MetricsActivity_state;
  v137 = v109 + ((*(unsigned __int8 *)(v139 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v139 + 80));
  v136 = *(_QWORD *)(v139 + 72);
  v135 = *(void (**)(uint64_t, char *, uint64_t))(v139 + 16);
  v119 = v9 + 7;
  v118 = v153 + 7;
  v117 = v19 + 7;
  swift_bridgeObjectRetain();
  v32 = 0;
  v34 = v146;
  v33 = v147;
  v35 = v152;
  v36 = v120;
  v37 = v154;
  v38 = v145;
  v39 = v148;
  do
  {
    v149 = v32;
    v41 = v150;
    v42 = v135;
    v43 = ((uint64_t (*)(char *, uint64_t, uint64_t))v135)(v150, v137 + v136 * v32, v38);
    v44 = *(_QWORD *)(PageMetrics.Instruction.invocationPoints.getter(v43) + 16);
    swift_bridgeObjectRelease();
    v42(v39, v41, v38);
    v153 = *(char **)(v35 + 16);
    v45 = ((uint64_t (*)(char *, uint64_t, uint64_t))v153)(v37, v33, v151);
    if (v44)
    {
      v46 = PageMetrics.Instruction.invocationPoints.getter(v45);
      v47 = v46;
      v48 = v151;
      if (!*(_QWORD *)(v46 + 16)
        || (v49 = *(_QWORD *)(v46 + 40),
            v50 = sub_F1C0(&qword_3B6F18, (void (*)(uint64_t))&type metadata accessor for PageMetrics.InvocationPoint, (uint64_t)&protocol conformance descriptor for PageMetrics.InvocationPoint), v51 = dispatch thunk of Hashable._rawHashValue(seed:)(v49, v48, v50), v52 = -1 << *(_BYTE *)(v47 + 32), v53 = v51 & ~v52, ((*(_QWORD *)(v47 + 56 + ((v53 >> 3) & 0xFFFFFFFFFFFFF8)) >> v53) & 1) == 0))
      {
LABEL_4:
        swift_bridgeObjectRelease();
        v37 = v154;
        (*(void (**)(char *, uint64_t))(v35 + 8))(v154, v48);
        v40 = *(void (**)(uint64_t, uint64_t))(v139 + 8);
        v39 = v148;
        v38 = v145;
        v40(v148, v145);
        v40((uint64_t)v150, v38);
        goto LABEL_5;
      }
      v54 = ~v52;
      v55 = *(_QWORD *)(v35 + 72);
      while (1)
      {
        ((void (*)(char *, unint64_t, uint64_t))v153)(v36, *(_QWORD *)(v47 + 48) + v55 * v53, v48);
        v56 = sub_F1C0(&qword_3B6F20, (void (*)(uint64_t))&type metadata accessor for PageMetrics.InvocationPoint, (uint64_t)&protocol conformance descriptor for PageMetrics.InvocationPoint);
        v57 = dispatch thunk of static Equatable.== infix(_:_:)(v36, v154, v48, v56);
        v58 = *(void (**)(char *, uint64_t))(v35 + 8);
        v58(v36, v48);
        if ((v57 & 1) != 0)
          break;
        v53 = (v53 + 1) & v54;
        v35 = v152;
        if (((*(_QWORD *)(v47 + 56 + ((v53 >> 3) & 0xFFFFFFFFFFFFF8)) >> v53) & 1) == 0)
          goto LABEL_4;
      }
      swift_bridgeObjectRelease();
      v34 = v146;
      v33 = v147;
      v37 = v154;
      v38 = v145;
    }
    else
    {
      v58 = *(void (**)(char *, uint64_t))(v35 + 8);
    }
    v59 = v151;
    v58(v37, v151);
    v60 = *(void (**)(uint64_t, uint64_t))(v139 + 8);
    v60(v148, v38);
    v61 = type metadata accessor for MetricsData(0);
    v62 = swift_allocBox(v61);
    v64 = v63;
    v65 = PageMetrics.Instruction.data.getter();
    static PageMetrics.InvocationPoint.pageEnter.getter(v65);
    v66 = sub_F1C0(&qword_3B7740, (void (*)(uint64_t))&type metadata accessor for PageMetrics.InvocationPoint, (uint64_t)&protocol conformance descriptor for PageMetrics.InvocationPoint);
    v67 = v33;
    dispatch thunk of RawRepresentable.rawValue.getter(&aBlock, v59, v66);
    dispatch thunk of RawRepresentable.rawValue.getter(&v155, v59, v66);
    v134 = (void (*)(char *, uint64_t))v60;
    v133 = v62;
    if (aBlock == v155 && v158 == v156)
    {
      swift_bridgeObjectRelease_n(v158, 2);
      v58(v34, v151);
      v68 = v141;
LABEL_19:
      v71 = v115;
      OSAllocatedUnfairLock.current.getter(v115, *(_QWORD *)&v131[v114], v116);
      v72 = *((unsigned __int8 *)v71 + 8);
      v73 = sub_B4A20((uint64_t)v71);
      if (v72 == 1)
      {
        v74 = v111;
        static MetricsFieldInclusionRequest.crossfireReferral.getter(v73);
        v75 = swift_beginAccess(v64, &v155, 33, 0);
        v76 = (void (*)(void ***, _QWORD))MetricsData.includingFields.modify(&aBlock, v75);
        v77 = (uint64_t)v110;
        sub_9BD74((uint64_t)v110, v74);
        v76(&aBlock, 0);
        swift_endAccess(&v155);
        (*(void (**)(uint64_t, uint64_t))(v112 + 8))(v77, v113);
      }
      goto LABEL_21;
    }
    v69 = v34;
    v70 = _stringCompareWithSmolCheck(_:_:expecting:)(aBlock, v158, v155, v156, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v58(v69, v151);
    v68 = v141;
    if ((v70 & 1) != 0)
      goto LABEL_19;
LABEL_21:
    dispatch_group_enter(v140);
    v78 = sub_676C8();
    v132 = static OS_dispatch_queue.main.getter(v78);
    v79 = v121;
    (*(void (**)(char *, uint64_t, uint64_t))(v121 + 16))(v142, v129, v143);
    v80 = v122;
    (*(void (**)(char *, uint64_t, uint64_t))(v122 + 16))(v144, v130, v68);
    v36 = v120;
    ((void (*)(char *, uint64_t, uint64_t))v153)(v120, v67, v151);
    v81 = *(unsigned __int8 *)(v79 + 80);
    v82 = (v81 + 16) & ~v81;
    v83 = (v119 + v82) & 0xFFFFFFFFFFFFFFF8;
    v84 = *(unsigned __int8 *)(v80 + 80);
    v85 = (v84 + v83 + 8) & ~v84;
    v86 = (unint64_t)&v118[v85] & 0xFFFFFFFFFFFFFFF8;
    v87 = *(unsigned __int8 *)(v152 + 80);
    v88 = (v87 + v86 + 8) & ~v87;
    v89 = (v117 + v88) & 0xFFFFFFFFFFFFFFF8;
    v90 = swift_allocObject(&unk_37EDA8, v89 + 8, v81 | v84 | v87 | 7);
    (*(void (**)(uint64_t, char *, uint64_t))(v79 + 32))(v90 + v82, v142, v143);
    v91 = v133;
    *(_QWORD *)(v90 + v83) = v133;
    v92 = v131;
    (*(void (**)(uint64_t, char *, uint64_t))(v80 + 32))(v90 + v85, v144, v141);
    v93 = v140;
    *(_QWORD *)(v90 + v86) = v140;
    v94 = v152;
    (*(void (**)(uint64_t, char *, uint64_t))(v152 + 32))(v90 + v88, v36, v151);
    *(_QWORD *)(v90 + v89) = v92;
    v161 = sub_C9E9C;
    v162 = v90;
    aBlock = _NSConcreteStackBlock;
    v158 = 1107296256;
    v159 = sub_2C9F4;
    v160 = &block_descriptor_22_0;
    v95 = _Block_copy(&aBlock);
    v96 = v162;
    swift_retain();
    v97 = v93;
    v98 = v92;
    v99 = swift_release(v96);
    v100 = v123;
    static DispatchQoS.unspecified.getter(v99);
    aBlock = (void **)_swiftEmptyArrayStorage;
    v101 = sub_F1C0((unint64_t *)&qword_3B4420, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v102 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8720);
    v103 = sub_724B4();
    v104 = v126;
    v105 = v128;
    dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v102, v103, v128, v101);
    v106 = (void *)v132;
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v100, v104, v95);
    _Block_release(v95);

    v107 = v105;
    v35 = v94;
    (*(void (**)(char *, uint64_t))(v127 + 8))(v104, v107);
    (*(void (**)(char *, uint64_t))(v124 + 8))(v100, v125);
    v38 = v145;
    v134(v150, v145);
    swift_release(v91);
    v37 = v154;
    v39 = v148;
LABEL_5:
    v32 = v149 + 1;
    v34 = v146;
    v33 = v147;
  }
  while (v149 + 1 != v138);
  swift_bridgeObjectRelease();
LABEL_23:
  v108 = v140;
  OS_dispatch_group.wait()();

}

uint64_t sub_C936C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, void *a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  unint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  _QWORD v33[5];
  char v34[24];

  v31 = a4;
  v32 = a6;
  v30 = a5;
  v8 = type metadata accessor for PageMetrics.InvocationPoint(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for MetricsData(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = swift_projectBox(a2);
  v17 = swift_beginAccess(v16, v34, 0, 0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v13 + 16))(v15, v16, v12, v17);
  v18 = MetricsPipeline.process(_:using:)(v15, a3);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v30, v8);
  v19 = *(unsigned __int8 *)(v9 + 80);
  v20 = (v19 + 24) & ~v19;
  v21 = (v10 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  v22 = swift_allocObject(&unk_37EDF8, v21 + 8, v19 | 7);
  v23 = v31;
  *(_QWORD *)(v22 + 16) = v31;
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v22 + v20, v11, v8);
  v24 = v32;
  *(_QWORD *)(v22 + v21) = v32;
  v25 = sub_676C8();
  v26 = v23;
  v27 = static OS_dispatch_queue.main.getter(v24);
  v33[3] = v25;
  v33[4] = &protocol witness table for OS_dispatch_queue;
  v33[0] = v27;
  Promise.always(on:perform:)(v33, sub_C9FEC, v22);
  swift_release(v18);
  swift_release(v22);
  return __swift_destroy_boxed_opaque_existential_1(v33);
}

void sub_C9544(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  os_unfair_lock_s *v19;
  _BYTE v20[16];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v6 = type metadata accessor for MetricsActivity.State(0);
  __chkstk_darwin(v6);
  v8 = &v20[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for PageMetrics.InvocationPoint(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v20[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  dispatch_group_leave(a2);
  static PageMetrics.InvocationPoint.pageEnter.getter(v13);
  v14 = sub_F1C0(&qword_3B7740, (void (*)(uint64_t))&type metadata accessor for PageMetrics.InvocationPoint, (uint64_t)&protocol conformance descriptor for PageMetrics.InvocationPoint);
  dispatch thunk of RawRepresentable.rawValue.getter(&v23, v9, v14);
  dispatch thunk of RawRepresentable.rawValue.getter(&v21, v9, v14);
  if (v23 == v21 && v24 == v22)
  {
    swift_bridgeObjectRelease_n(v24, 2);
    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v12, v9);
  }
  else
  {
    v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v23, v24, v21, v22, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v12, v9);
    if ((v15 & 1) == 0)
      return;
  }
  v16 = *(_QWORD *)(a4 + OBJC_IVAR____TtC8ShelfKit15MetricsActivity_state);
  OSAllocatedUnfairLock.current.getter(v8, v16, v6);
  v17 = v8[8];
  sub_B4A20((uint64_t)v8);
  if (v17 == 1)
  {
    v18 = v16 + *(_QWORD *)(class metadata base offset for ManagedBuffer + *(_QWORD *)v16 + 16);
    v19 = (os_unfair_lock_s *)(v16 + ((*(unsigned int *)(*(_QWORD *)v16 + 48) + 3) & 0x1FFFFFFFCLL));
    os_unfair_lock_lock(v19);
    sub_13CCCC(v18, 0);
    os_unfair_lock_unlock(v19);
    os_unfair_lock_lock(v19);
    sub_13CB9C(v18);
    os_unfair_lock_unlock(v19);
  }
}

uint64_t sub_C9768(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t);

  v4 = *(void (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v4(a2);
  return swift_release(v3);
}

unint64_t sub_C97A8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_3B1810);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_267BC(v7, (uint64_t)&v16, &qword_3B6B78);
    v8 = v16;
    v9 = v17;
    result = sub_211DC0(v16, v17);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v8;
    v12[1] = v9;
    result = (unint64_t)sub_1F460(&v18, (_OWORD *)(v4[7] + 32 * result));
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v7 += 48;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t block_copy_helper_5(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t block_destroy_helper_5(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_C98F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7710);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_C993C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4A58);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_C9984()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = type metadata accessor for PageMetrics.InvocationPoint(0);
  v1 = *(_QWORD *)(v18 - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 24) & ~v2;
  v4 = (*(_QWORD *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v15 = v4;
  v17 = type metadata accessor for MetricsPipeline(0);
  v5 = *(_QWORD *)(v17 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v4 + v6 + 8) & ~v6;
  v8 = *(_QWORD *)(v5 + 64);
  v9 = type metadata accessor for MetricsFieldsContext(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (v7 + v8 + v11) & ~v11;
  v16 = v12 + *(_QWORD *)(v10 + 64);
  v13 = v2 | v6 | v11 | 7;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v0 + v3, v18);

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v0 + v7, v17);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v0 + v12, v9);
  return swift_deallocObject(v0, v16, v13);
}

void sub_C9AA0(int a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)(type metadata accessor for PageMetrics.InvocationPoint(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = *(_QWORD *)(type metadata accessor for MetricsPipeline(0) - 8);
  v7 = (v5 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MetricsFieldsContext(0) - 8) + 80);
  sub_C888C(a1, *(_QWORD *)(v1 + 16), v1 + v4, *(char **)(v1 + v5), v1 + v7, v1 + ((v7 + v8 + v9) & ~v9));
}

uint64_t sub_C9B48()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_C9B6C()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 16))(0);
}

uint64_t sub_C9B90@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _BYTE v5[24];

  v3 = *a1 + OBJC_IVAR____TtC8ShelfKit17MetricsController_pageMetrics;
  swift_beginAccess(v3, v5, 0, 0);
  return sub_267BC(v3, a2, &qword_3B4A58);
}

uint64_t sub_C9BF0()
{
  return type metadata accessor for MetricsController(0);
}

uint64_t type metadata accessor for MetricsController(uint64_t a1)
{
  uint64_t result;

  result = qword_3B7778;
  if (!qword_3B7778)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MetricsController);
  return result;
}

void sub_C9C34(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[8];

  v8[0] = &unk_2F33E8;
  v8[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v2 = type metadata accessor for MetricsFieldsContext(319);
  if (v3 <= 0x3F)
  {
    v8[2] = *(_QWORD *)(v2 - 8) + 64;
    v8[3] = &unk_2F33E8;
    v8[4] = (char *)&value witness table for Builtin.NativeObject + 64;
    v8[5] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4 = type metadata accessor for MetricsPipeline(319);
    if (v5 <= 0x3F)
    {
      v8[6] = *(_QWORD *)(v4 - 8) + 64;
      sub_C9D10(319);
      if (v7 <= 0x3F)
      {
        v8[7] = *(_QWORD *)(v6 - 8) + 64;
        swift_updateClassMetadata2(a1, 256, 8, v8, a1 + 80);
      }
    }
  }
}

uint64_t method lookup function for MetricsController(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for MetricsController);
}

uint64_t dispatch thunk of MetricsController.__allocating_init(asPartOf:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 144))();
}

void sub_C9D10(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_3B7788)
  {
    v2 = type metadata accessor for PageMetrics(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_3B7788);
  }
}

uint64_t sub_C9D64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = type metadata accessor for MetricsPipeline(0);
  v1 = *(_QWORD *)(v19 - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 16) & ~v2;
  v4 = (*(_QWORD *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v15 = v4;
  v18 = type metadata accessor for MetricsFieldsContext(0);
  v5 = *(_QWORD *)(v18 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v4 + v6 + 8) & ~v6;
  v8 = (*(_QWORD *)(v5 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  v9 = type metadata accessor for PageMetrics.InvocationPoint(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (v11 + v8 + 8) & ~v11;
  v16 = v9;
  v17 = v2 | v6 | v11 | 7;
  v13 = (*(_QWORD *)(v10 + 64) + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v0 + v3, v19);
  swift_release(*(_QWORD *)(v0 + v15));
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v0 + v7, v18);

  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v0 + v12, v16);
  return swift_deallocObject(v0, v13 + 8, v17);
}

uint64_t sub_C9E9C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v1 = *(_QWORD *)(type metadata accessor for MetricsPipeline(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  v4 = *(_QWORD *)(type metadata accessor for MetricsFieldsContext(0) - 8);
  v5 = (v3 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = (*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = *(_QWORD *)(type metadata accessor for PageMetrics.InvocationPoint(0) - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + v6 + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  return sub_C936C(v0 + v2, *(_QWORD *)(v0 + v3), v0 + v5, *(void **)(v0 + v6), v0 + v8, *(void **)(v0 + ((*(_QWORD *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_C9F5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for PageMetrics.InvocationPoint(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6 + 8, v5);
}

void sub_C9FEC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(type metadata accessor for PageMetrics.InvocationPoint(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  sub_C9544(a1, *(NSObject **)(v1 + 16), v1 + v4, *(_QWORD *)(v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t FilterAction.title.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  if (v1)
    v2 = *(_QWORD *)(*(_QWORD *)v0 + 32);
  else
    v2 = 0;
  swift_bridgeObjectRetain(v1);
  return v2;
}

uint64_t FilterAction.hash(into:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = *(_QWORD *)(v3 + 24);
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

uint64_t static FilterAction.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *a1;
  v3 = *a2;
  v4 = *(_QWORD *)(*a1 + 16);
  v5 = *(_QWORD *)(v2 + 24);
  v6 = *(_QWORD *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 24);
  if (v4 == v6 && v5 == v7)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v6, v7, 0);
}

Swift::Int FilterAction.hashValue.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_CA170@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 24);
  *a1 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  a1[1] = v2;
  return swift_bridgeObjectRetain(v2);
}

Swift::Int sub_CA180()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

unint64_t sub_CA1D8(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_CA204();
  result = sub_CA248();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_CA204()
{
  unint64_t result;

  result = qword_3B7840;
  if (!qword_3B7840)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for FilterAction);
    atomic_store(result, (unint64_t *)&qword_3B7840);
  }
  return result;
}

unint64_t sub_CA248()
{
  unint64_t result;

  result = qword_3B7848;
  if (!qword_3B7848)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for FilterAction);
    atomic_store(result, (unint64_t *)&qword_3B7848);
  }
  return result;
}

unint64_t sub_CA290()
{
  unint64_t result;

  result = qword_3B7850;
  if (!qword_3B7850)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for FilterAction);
    atomic_store(result, (unint64_t *)&qword_3B7850);
  }
  return result;
}

ValueMetadata *type metadata accessor for FilterAction()
{
  return &type metadata for FilterAction;
}

uint64_t LibraryFollowAction.podcastUuid.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit19LibraryFollowAction_podcastUuid);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit19LibraryFollowAction_podcastUuid + 8));
  return v1;
}

uint64_t LibraryFollowAction.displaySuccessHUD.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8ShelfKit19LibraryFollowAction_displaySuccessHUD);
}

uint64_t LibraryFollowAction.__allocating_init(podcastUuid:displaySuccessHUD:)(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v27[12];
  int v28;

  v4 = v3;
  v28 = a3;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = &v27[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = type metadata accessor for ActionMetrics(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = &v27[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v15);
  v17 = &v27[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v18 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v19 = (_QWORD *)(v18 + OBJC_IVAR____TtC8ShelfKit19LibraryFollowAction_podcastUuid);
  *v19 = a1;
  v19[1] = a2;
  *(_BYTE *)(v18 + OBJC_IVAR____TtC8ShelfKit19LibraryFollowAction_displaySuccessHUD) = v28;
  v20 = type metadata accessor for ImpressionMetrics(0);
  v21 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v17, 1, 1, v20);
  v22 = static ActionMetrics.notInstrumented.getter(v21);
  UUID.init()(v22);
  v23 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
  v25 = v24;
  (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v7);
  *(_QWORD *)(v18 + 16) = v23;
  *(_QWORD *)(v18 + 24) = v25;
  *(_QWORD *)(v18 + 32) = 0;
  *(_QWORD *)(v18 + 40) = 0;
  *(_BYTE *)(v18 + 48) = 32;
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v12 + 32))(v18 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v14, v11);
  sub_23AB8((uint64_t)v17, v18 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics);
  return v18;
}

uint64_t LibraryFollowAction.init(podcastUuid:displaySuccessHUD:)(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v26[12];
  int v27;

  v4 = v3;
  v27 = a3;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = &v26[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = type metadata accessor for ActionMetrics(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = &v26[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v15);
  v17 = &v26[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v18 = (_QWORD *)(v4 + OBJC_IVAR____TtC8ShelfKit19LibraryFollowAction_podcastUuid);
  *v18 = a1;
  v18[1] = a2;
  *(_BYTE *)(v4 + OBJC_IVAR____TtC8ShelfKit19LibraryFollowAction_displaySuccessHUD) = v27;
  v19 = type metadata accessor for ImpressionMetrics(0);
  v20 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v17, 1, 1, v19);
  v21 = static ActionMetrics.notInstrumented.getter(v20);
  UUID.init()(v21);
  v22 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
  v24 = v23;
  (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v7);
  *(_QWORD *)(v4 + 16) = v22;
  *(_QWORD *)(v4 + 24) = v24;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = 0;
  *(_BYTE *)(v4 + 48) = 32;
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v12 + 32))(v4 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v14, v11);
  sub_23AB8((uint64_t)v17, v4 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics);
  return v4;
}

void LibraryFollowAction.init(deserializing:using:)()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000033, 0x800000000030A500, "ShelfKit/LibraryFollowAction.swift", 34, 2, 25, 0);
  __break(1u);
}

void LibraryFollowAction.init(uniqueId:title:presentationStyle:actionMetrics:impressionMetrics:)()
{
  _swift_stdlib_reportUnimplementedInitializer("ShelfKit.LibraryFollowAction", 28, "init(uniqueId:title:presentationStyle:actionMetrics:impressionMetrics:)", 71, 0);
  __break(1u);
}

uint64_t sub_CA72C()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit19LibraryFollowAction_podcastUuid + 8));
}

uint64_t LibraryFollowAction.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics;
  v2 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_23B00(v0 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t LibraryFollowAction.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics;
  v2 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_23B00(v0 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics);
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_CA84C()
{
  return type metadata accessor for LibraryFollowAction(0);
}

uint64_t type metadata accessor for LibraryFollowAction(uint64_t a1)
{
  uint64_t result;

  result = qword_3B7880;
  if (!qword_3B7880)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LibraryFollowAction);
  return result;
}

uint64_t sub_CA890(uint64_t a1)
{
  _QWORD v2[2];

  v2[0] = &unk_2F3518;
  v2[1] = &unk_2F3530;
  return swift_updateClassMetadata2(a1, 256, 2, v2, a1 + 160);
}

uint64_t method lookup function for LibraryFollowAction(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for LibraryFollowAction);
}

uint64_t FindOrCreateEpisodeOfferContentIDsIntentsIntentImplementation.perform(_:objectGraph:)(uint64_t *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v3 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType(0);
  v1[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v1[5] = v4;
  v1[6] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for TaskPriority(0);
  v1[7] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v1[8] = v6;
  v7 = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *a1;
  v1[9] = v7;
  v1[10] = v8;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B68D0);
  v10 = (_QWORD *)swift_task_alloc(async function pointer to BaseObjectGraph.inject<A>(_:)[1]);
  v1[11] = v10;
  *v10 = v1;
  v10[1] = sub_CA9B4;
  return BaseObjectGraph.inject<A>(_:)(v1 + 2, v9, v9);
}

uint64_t sub_CA9B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  *(_QWORD *)(*(_QWORD *)v1 + 96) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_CACE0;
  else
    v3 = sub_CAA18;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_CAA18()
{
  _QWORD *v0;
  uint64_t ObjectType;
  _QWORD *v2;

  v0[13] = v0[2];
  ObjectType = swift_getObjectType();
  j___sScTss5NeverORszABRs_rlE15currentPriorityScPvgZ();
  v2 = (_QWORD *)swift_task_alloc(async function pointer to NSManagedObjectContextProvider.managedObjectContext(for:)[1]);
  v0[14] = v2;
  *v2 = v0;
  v2[1] = sub_CAA98;
  return NSManagedObjectContextProvider.managedObjectContext(for:)(v0[9], ObjectType);
}

uint64_t sub_CAA98(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 104);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 112);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 64);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 72);
  v6 = *(_QWORD *)(*(_QWORD *)v1 + 56);
  *(_QWORD *)(*(_QWORD *)v1 + 120) = a1;
  swift_task_dealloc(v2);
  swift_unknownObjectRelease(v3);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  return swift_task_switch(sub_CAB1C, 0, 0);
}

uint64_t sub_CAB1C()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  _QWORD *v9;
  uint64_t v10;

  v1 = (void *)v0[15];
  v2 = v0[10];
  v4 = v0[5];
  v3 = v0[6];
  v5 = v0[4];
  v6 = swift_allocObject(&unk_37EF10, 32, 7);
  v0[16] = v6;
  *(_QWORD *)(v6 + 16) = v2;
  *(_QWORD *)(v6 + 24) = v1;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 104))(v3, enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:), v5);
  v7 = async function pointer to NSManagedObjectContext.perform<A>(schedule:_:)[1];
  swift_bridgeObjectRetain();
  v8 = v1;
  v9 = (_QWORD *)swift_task_alloc(v7);
  v0[17] = v9;
  v10 = __swift_instantiateConcreteTypeFromMangledName(qword_3B7970);
  *v9 = v0;
  v9[1] = sub_CAC08;
  return NSManagedObjectContext.perform<A>(schedule:_:)(v0 + 3, v0[6], sub_CAEEC, v6, v10);
}

uint64_t sub_CAC08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 128);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  v4 = *(_QWORD *)(*(_QWORD *)v0 + 32);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 136));
  swift_release(v1);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  return swift_task_switch(sub_CAC84, 0, 0);
}

uint64_t sub_CAC84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 48);

  v3 = *(_QWORD *)(v0 + 24);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v3);
}

uint64_t sub_CACE0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_CAD20@<X0>(void *a1@<X1>, _QWORD *a2@<X8>)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  id v9;
  id v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;

  v3 = a1;
  v4 = swift_bridgeObjectRetain();
  v5 = (uint64_t)sub_CAFB4(v4, v3);
  swift_bridgeObjectRelease();

  if (!((unint64_t)v5 >> 62))
  {
    v6 = *(_QWORD *)((char *)&dword_10 + (v5 & 0xFFFFFFFFFFFFF8));
    if (v6)
      goto LABEL_3;
LABEL_16:
    result = swift_bridgeObjectRelease();
LABEL_17:
    *a2 = _swiftEmptyArrayStorage;
    return result;
  }
  if (v5 < 0)
    v14 = v5;
  else
    v14 = v5 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  v6 = _CocoaArrayWrapper.endIndex.getter(v14);
  swift_bridgeObjectRelease();
  if (!v6)
    goto LABEL_16;
LABEL_3:
  result = sub_1808DC(0, v6 & ~(v6 >> 63), 0);
  if ((v6 & 0x8000000000000000) == 0)
  {
    v15 = a2;
    v8 = 0;
    do
    {
      if ((v5 & 0xC000000000000001) != 0)
        v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8);
      else
        v9 = *(id *)(v5 + 8 * v8 + 32);
      v10 = v9;
      v12 = _swiftEmptyArrayStorage[2];
      v11 = _swiftEmptyArrayStorage[3];
      if (v12 >= v11 >> 1)
        sub_1808DC(v11 > 1, v12 + 1, 1);
      ++v8;
      _swiftEmptyArrayStorage[2] = v12 + 1;
      v13 = &_swiftEmptyArrayStorage[3 * v12];
      v13[4] = v10;
      v13[5] = 0;
      *((_BYTE *)v13 + 48) = 2;
    }
    while (v6 != v8);
    result = swift_bridgeObjectRelease();
    a2 = v15;
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t sub_CAEC0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_CAEEC@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_CAD20(*(void **)(v1 + 24), a1);
}

unint64_t sub_CAF08()
{
  unint64_t result;

  result = qword_3C78E0;
  if (!qword_3C78E0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for FindOrCreateEpisodeOfferContentIDsIntent);
    atomic_store(result, (unint64_t *)&qword_3C78E0);
  }
  return result;
}

uint64_t sub_CAF4C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v4;

  *(_QWORD *)(v2 + 16) = a1;
  v4 = (_QWORD *)swift_task_alloc(dword_3B7964);
  *(_QWORD *)(v2 + 24) = v4;
  *v4 = v2;
  v4[1] = sub_81DB0;
  return FindOrCreateEpisodeOfferContentIDsIntentsIntentImplementation.perform(_:objectGraph:)(a2);
}

ValueMetadata *type metadata accessor for FindOrCreateEpisodeOfferContentIDsIntentsIntentImplementation()
{
  return &type metadata for FindOrCreateEpisodeOfferContentIDsIntentsIntentImplementation;
}

_QWORD *sub_CAFB4(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  _QWORD *v42;
  int *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  char *v76;
  _QWORD *v77;
  int *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD aBlock[5];
  uint64_t v84;
  void *v85;
  _QWORD *v86;

  v75 = a2;
  v57 = type metadata accessor for UTType(0);
  v56 = *(_QWORD *)(v57 - 8);
  __chkstk_darwin(v57);
  v55 = (char *)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = (int *)type metadata accessor for EpisodeOffer(0);
  v5 = *((_QWORD *)v78 - 1);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v78);
  v74 = (uint64_t)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a1 + 16);
  result = _swiftEmptyArrayStorage;
  if (v7)
  {
    v54 = v2;
    v86 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v7);
    v9 = *(unsigned __int8 *)(v5 + 80);
    result = (_QWORD *)type metadata accessor for CoreDataFetcher(0);
    v77 = result;
    v64 = *(_QWORD *)(v5 + 72);
    v72 = v9 | 7;
    v73 = (v9 + 24) & ~v9;
    v71 = (v6 + v73 + 7) & 0xFFFFFFFFFFFFFFF8;
    v70 = (v71 + 15) & 0xFFFFFFFFFFFFFFF8;
    v69 = (v70 + 15) & 0xFFFFFFFFFFFFFFF8;
    v68 = (v69 + 15) & 0xFFFFFFFFFFFFFFF8;
    v67 = (v68 + 23) & 0xFFFFFFFFFFFFFFF8;
    v66 = (v67 + 23) & 0xFFFFFFFFFFFFFFF8;
    v65 = v66 + 8;
    v10 = (_QWORD *)(((v9 + 32) & ~v9) + a1 + 16);
    while (1)
    {
      v25 = v10 - 2;
      v24 = *(v10 - 2);
      if (v24 < 0)
        break;
      v26 = *(v10 - 1);
      v79 = v7;
      v80 = v26;
      v81 = *v10;
      v27 = v81;
      v82 = v10;
      v28 = (char *)v10 + v78[10];
      v29 = *((_QWORD *)v28 - 2);
      v30 = *((_QWORD *)v28 - 1);
      v76 = (char *)v10 + v78[12];
      v31 = *((_QWORD *)v76 - 2);
      v85 = 0;
      v32 = v74;
      sub_1E3E8((uint64_t)(v10 - 2), v74);
      v33 = swift_allocObject(&unk_37EF58, v65, v72);
      *(_QWORD *)(v33 + 16) = v77;
      sub_1E4B0(v32, v33 + v73);
      v34 = v75;
      *(_QWORD *)(v33 + v71) = v75;
      *(_QWORD *)(v33 + v70) = &v85;
      *(_QWORD *)(v33 + v69) = v24;
      v35 = (_QWORD *)(v33 + v68);
      *v35 = v80;
      v35[1] = v27;
      v36 = (_QWORD *)(v33 + v67);
      *v36 = v29;
      v36[1] = v30;
      *(_QWORD *)(v33 + v66) = v31;
      v37 = swift_allocObject(&unk_37EF80, 32, 7);
      *(_QWORD *)(v37 + 16) = sub_CBA18;
      *(_QWORD *)(v37 + 24) = v33;
      aBlock[4] = sub_327F0;
      v84 = v37;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_D4A2C;
      aBlock[3] = &block_descriptor_6;
      v38 = _Block_copy(aBlock);
      v39 = v84;
      swift_retain();
      swift_bridgeObjectRetain();
      v40 = v34;
      swift_retain();
      swift_bridgeObjectRetain();
      swift_release(v39);
      objc_msgSend(v40, "performBlockAndWait:", v38);
      _Block_release(v38);
      LOBYTE(v34) = swift_isEscapingClosureAtFileLocation(v37, "", 121, 53, 32, 1);
      result = (_QWORD *)swift_release(v37);
      if ((v34 & 1) != 0)
        goto LABEL_18;
      v19 = v85;
      result = (_QWORD *)swift_release(v33);
      if (!v19)
      {
        v41 = *v25;
        if (*v25 < 0)
          goto LABEL_19;
        v42 = v82;
        v62 = *(v82 - 1);
        v61 = *v82;
        v60 = *((_QWORD *)v28 - 2);
        v59 = *((_QWORD *)v28 - 1);
        v43 = v78;
        v44 = (char *)v82 + v78[11];
        v45 = *((_QWORD *)v44 - 2);
        v46 = *((_QWORD *)v44 - 1);
        v47 = (char *)v82 + v78[15];
        v80 = *((_QWORD *)v47 - 2);
        v63 = *(v47 - 8);
        v76 = (char *)*((_QWORD *)v76 - 2);
        v48 = URL.absoluteString.getter(result);
        v81 = v49;
        v50 = *((unsigned __int8 *)v42 + v43[13] - 16);
        if ((v50 - 2) < 2)
        {
          v11 = 0;
          v12 = 0xE000000000000000;
        }
        else
        {
          v58 = v48;
          v51 = v55;
          if (v50)
            v52 = static UTType.movie.getter();
          else
            v52 = static UTType.audio.getter();
          v11 = UTType.identifier.getter(v52);
          v12 = v53;
          (*(void (**)(char *, uint64_t))(v56 + 8))(v51, v57);
          v48 = v58;
        }
        LOBYTE(v85) = 0;
        v13 = __chkstk_darwin(v48);
        *(&v54 - 20) = (uint64_t)v77;
        *(&v54 - 19) = (uint64_t)v25;
        *(&v54 - 18) = (uint64_t)v40;
        *(&v54 - 17) = (uint64_t)&v85;
        v14 = v59;
        *(&v54 - 16) = v60;
        *(&v54 - 15) = v14;
        v15 = v62;
        *(&v54 - 14) = (uint64_t)v76;
        *(&v54 - 13) = v15;
        *(&v54 - 12) = v61;
        *(&v54 - 11) = v11;
        *(&v54 - 10) = v12;
        *(&v54 - 9) = v41;
        v16 = v80;
        v17 = v81;
        *(&v54 - 8) = v13;
        *(&v54 - 7) = v17;
        *(&v54 - 6) = v45;
        *(&v54 - 5) = v46;
        *(&v54 - 4) = v45;
        *(&v54 - 3) = v46;
        *(&v54 - 2) = v16;
        *((_BYTE *)&v54 - 8) = v63;
        v18 = sub_CBB2C();
        NSManagedObjectContext.performAndWait<A>(_:)(aBlock, sub_CBAD8, &v54 - 22, v18);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v19 = (void *)aBlock[0];
      }
      v20 = objc_msgSend(v19, "objectID");

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v21);
      v22 = v86[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v22);
      v23 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v22, v20);
      result = (_QWORD *)specialized ContiguousArray._endMutation()(v23);
      v10 = (_QWORD *)((char *)v82 + v64);
      v7 = v79 - 1;
      if (v79 == 1)
        return v86;
    }
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
  }
  return result;
}

uint64_t sub_CB584()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int *v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(unint64_t, uint64_t, uint64_t);
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  void (*v24)(uint64_t, uint64_t);
  unint64_t v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unsigned int (*v40)(unint64_t, uint64_t, uint64_t);
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;

  v1 = (int *)type metadata accessor for EpisodeOffer(0);
  v2 = *((_QWORD *)v1 - 1);
  v41 = *(_QWORD *)(v2 + 64);
  v42 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v43 = *(unsigned __int8 *)(v2 + 80);
  v3 = v0 + v42;
  swift_bridgeObjectRelease();
  v4 = v0 + v42 + v1[6];
  swift_bridgeObjectRelease();
  v5 = (int *)type metadata accessor for ShowOffer(0);
  v6 = v4 + v5[7];
  v7 = type metadata accessor for ArtworkModel(0);
  v40 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48);
  if (!v40(v6, 1, v7))
  {
    swift_bridgeObjectRelease();
    v8 = *(unsigned __int8 *)(v6 + 32);
    if (v8 != 255)
      sub_3B5BC(*(_QWORD *)(v6 + 16), *(_QWORD *)(v6 + 24), v8);
    v9 = *(unsigned __int8 *)(v6 + 64);
    if (v9 != 255)
      sub_3D624(*(id *)(v6 + 56), v9);
    v10 = *(unsigned __int8 *)(v6 + 80);
    if (v10 != 255)
      sub_3D624(*(id *)(v6 + 72), v10);
    v11 = *(unsigned __int8 *)(v6 + 96);
    if (v11 != 255)
      sub_3D624(*(id *)(v6 + 88), v11);
    v12 = *(unsigned __int8 *)(v6 + 112);
    if (v12 != 255)
      sub_3D624(*(id *)(v6 + 104), v12);
    v13 = *(unsigned __int8 *)(v6 + 128);
    if (v13 != 255)
      sub_3D624(*(id *)(v6 + 120), v13);
    v14 = v6 + *(int *)(v7 + 44);
    v15 = type metadata accessor for ArtworkCrop(0);
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v16 = v4 + v5[13];
  v17 = type metadata accessor for URL(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v18 + 48);
  if (!v19(v16, 1, v17))
    (*(void (**)(unint64_t, uint64_t))(v18 + 8))(v16, v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v20 = v4 + v5[16];
  if (!v19(v20, 1, v17))
    (*(void (**)(unint64_t, uint64_t))(v18 + 8))(v20, v17);
  v21 = v4 + v5[17];
  if (!v19(v21, 1, v17))
    (*(void (**)(unint64_t, uint64_t))(v18 + 8))(v21, v17);
  v22 = v3 + v1[7];
  v23 = v19(v22, 1, v17);
  v24 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
  if (!v23)
    v24(v22, v17);
  v24(v3 + v1[8], v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release(*(_QWORD *)(v3 + v1[12]));
  v25 = v3 + v1[16];
  if (!v40(v25, 1, v7))
  {
    swift_bridgeObjectRelease();
    v26 = *(unsigned __int8 *)(v25 + 32);
    if (v26 != 255)
      sub_3B5BC(*(_QWORD *)(v25 + 16), *(_QWORD *)(v25 + 24), v26);
    v27 = *(unsigned __int8 *)(v25 + 64);
    if (v27 != 255)
      sub_3D624(*(id *)(v25 + 56), v27);
    v28 = *(unsigned __int8 *)(v25 + 80);
    if (v28 != 255)
      sub_3D624(*(id *)(v25 + 72), v28);
    v29 = *(unsigned __int8 *)(v25 + 96);
    if (v29 != 255)
      sub_3D624(*(id *)(v25 + 88), v29);
    v30 = *(unsigned __int8 *)(v25 + 112);
    if (v30 != 255)
      sub_3D624(*(id *)(v25 + 104), v30);
    v31 = *(unsigned __int8 *)(v25 + 128);
    if (v31 != 255)
      sub_3D624(*(id *)(v25 + 120), v31);
    v32 = v25 + *(int *)(v7 + 44);
    v33 = type metadata accessor for ArtworkCrop(0);
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 8))(v32, v33);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  v34 = v3 + v1[22];
  v35 = type metadata accessor for TranscriptRequestInformation(0);
  v36 = *(_QWORD *)(v35 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v34, v35);
  v37 = (v41 + v42 + 7) & 0xFFFFFFFFFFFFFFF8;
  v38 = (((((((((v37 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
       + 23) & 0xFFFFFFFFFFFFFFF8;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release(*(_QWORD *)(v0 + v38));
  return swift_deallocObject(v0, v38 + 8, v43 | 7);
}

void sub_CBA18()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v1 = *(_QWORD *)(type metadata accessor for EpisodeOffer(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  v4 = (v3 + 15) & 0xFFFFFFFFFFFFFFF8;
  v5 = (v4 + 15) & 0xFFFFFFFFFFFFFFF8;
  v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8;
  sub_D4F1C(*(_QWORD *)(v0 + 16), v0 + v2, *(void **)(v0 + v3), *(void ***)(v0 + v4), *(_QWORD *)(v0 + v5), *(_QWORD *)(v0 + v6), *(_QWORD *)(v0 + v6 + 8), *(_QWORD *)(v0 + ((v6 + 23) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0 + ((v6 + 23) & 0xFFFFFFFFFFFFFFF8) + 8), *(_QWORD *)(v0 + ((((v6 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_CBAB0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t block_copy_helper_6(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t block_destroy_helper_6(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_CBAD8(_QWORD *a1@<X8>)
{
  uint64_t v1;

  sub_D6298(*(_QWORD *)(v1 + 24), *(void **)(v1 + 32), *(_BYTE **)(v1 + 40), *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 72), a1, *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 88), *(_QWORD *)(v1 + 96), *(_QWORD *)(v1 + 104), *(_QWORD *)(v1 + 112), *(_QWORD *)(v1 + 120), *(_QWORD *)(v1 + 128), *(_QWORD *)(v1 + 136), *(_QWORD *)(v1 + 144), *(void **)(v1 + 152), *(double *)(v1 + 160), *(_BYTE *)(v1 + 168));
}

unint64_t sub_CBB2C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_3B7988;
  if (!qword_3B7988)
  {
    v1 = objc_opt_self(MTEpisode);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_3B7988);
  }
  return result;
}

_QWORD *sub_CBB68(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;

  v1 = a1;
  if (a1 >> 62)
    goto LABEL_15;
  v2 = *(_QWORD *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8));
  while (1)
  {
    if (!v2)
      return _swiftEmptyArrayStorage;
    result = (_QWORD *)sub_1807B0(0, v2 & ~(v2 >> 63), 0);
    if (v2 < 0)
      break;
    v4 = 0;
    v15 = v1 & 0xC000000000000001;
    v5 = v1;
    while (v2 != v4)
    {
      if (v15)
      {
        v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(v4, v1);
      }
      else
      {
        v6 = *(_QWORD *)(v1 + 8 * v4 + 32);
        swift_retain(v6);
      }
      v7 = sub_144B4();
      v8 = BinaryInteger.description.getter(&type metadata for UInt64, v7);
      v10 = v9;
      swift_release(v6);
      v12 = _swiftEmptyArrayStorage[2];
      v11 = _swiftEmptyArrayStorage[3];
      if (v12 >= v11 >> 1)
        sub_1807B0(v11 > 1, v12 + 1, 1);
      ++v4;
      _swiftEmptyArrayStorage[2] = v12 + 1;
      v13 = &_swiftEmptyArrayStorage[2 * v12];
      v13[4] = v8;
      v13[5] = v10;
      v1 = v5;
      if (v2 == v4)
        return _swiftEmptyArrayStorage;
    }
    __break(1u);
LABEL_15:
    if (v1 < 0)
      v14 = v1;
    else
      v14 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v14);
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t sub_CBD00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50[2];
  uint64_t v51;

  v49 = a6;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2B18);
  __chkstk_darwin(v11);
  v44 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B79B0);
  v42 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v15 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B79B8);
  v17 = *(_QWORD *)(v16 - 8);
  v45 = v16;
  v46 = v17;
  __chkstk_darwin(v16);
  v19 = (char *)&v42 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B79C0);
  v21 = *(_QWORD *)(v20 - 8);
  v47 = v20;
  v48 = v21;
  __chkstk_darwin(v20);
  v43 = (char *)&v42 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = *(_QWORD *)(a1 + 88);
  swift_retain(v23);
  v24 = sub_2ACC8();
  swift_release(v23);
  v51 = v24;
  sub_150C8(a4, (uint64_t)v50);
  v25 = (_QWORD *)swift_allocObject(&unk_37EFF8, 80, 7);
  v25[2] = a5;
  sub_F4D8(v50, (uint64_t)(v25 + 3));
  v25[8] = a2;
  v25[9] = a3;
  swift_retain(a5);
  swift_unknownObjectRetain(a2);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4610);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3388);
  v28 = sub_32914(&qword_3B4620, &qword_3B4610, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.map<A>(_:)(sub_CD6BC, v25, v26, v27, v28);
  swift_release(v25);
  swift_release(v51);
  v29 = sub_32914(&qword_3B79C8, &qword_3B79B0, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v30 = sub_32914(&qword_3B3398, &qword_3B3388, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher<>.switchToLatest()(v13, v29, v30);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v15, v13);
  v31 = sub_676C8();
  *(_QWORD *)&v50[0] = static OS_dispatch_queue.main.getter(v31);
  v32 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  v33 = (uint64_t)v44;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v44, 1, 1, v32);
  v34 = sub_32914(&qword_3B79D0, &qword_3B79B8, (uint64_t)&protocol conformance descriptor for Publishers.SwitchToLatest<A, B>);
  v35 = sub_F1C0((unint64_t *)&qword_3B2B60, (void (*)(uint64_t))sub_676C8, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  v36 = v43;
  v37 = v45;
  Publisher.receive<A>(on:options:)(v50, v33, v45, v31, v34, v35);
  sub_CD6CC(v33);

  (*(void (**)(char *, uint64_t))(v46 + 8))(v19, v37);
  v38 = type metadata accessor for ModernPage(0);
  v39 = sub_32914(&qword_3B79D8, &qword_3B79C0, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v40 = v47;
  Publisher.map<A>(_:)(sub_D071C, 0, v47, v38, v39);
  return (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v36, v40);
}

uint64_t sub_CC0C0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t (*v20)(char *, uint64_t);
  _QWORD *v21;
  char *v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  char v27;
  uint64_t v28;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  unsigned __int8 v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v42;
  char v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  unsigned __int8 v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v68;
  char v69;
  unint64_t v70;
  unint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  unsigned __int8 v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v91;
  char v92;
  _QWORD *v93;
  unint64_t v94;
  unint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  _QWORD *v107;
  _QWORD *v108;
  char *v109;
  _QWORD *v110;
  unint64_t v111;
  unint64_t v112;
  _QWORD *v113;
  char v114;
  uint64_t v115;
  char v116;
  _QWORD *v117;
  _QWORD *v118;
  _QWORD *v119;
  unsigned __int8 v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char v128;
  char v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  unint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  _QWORD *v143;
  _QWORD *v144;
  _QWORD *v145;
  _QWORD *v146;
  _QWORD *v147;
  unsigned __int8 v148;
  char v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char v156;
  char v157;
  char v158;
  unint64_t v159;
  unint64_t v160;
  _QWORD *v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  _QWORD *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  _QWORD *v170;
  unint64_t v171;
  unint64_t v172;
  _QWORD *v173;
  _QWORD *v174;
  _QWORD *v175;
  unsigned __int8 v176;
  char v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  char v184;
  char v185;
  _QWORD *v186;
  unint64_t v187;
  unint64_t v188;
  _QWORD *v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  _QWORD *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  unint64_t v199;
  _QWORD *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  char *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  char *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t result;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  _QWORD *v237;
  _QWORD *v238;
  _QWORD *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t (*v243)(char *, uint64_t);
  uint64_t v244;
  char *v245;
  uint64_t v246;
  char *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t *v252;
  _QWORD *v253;
  _QWORD *v254;
  char *v255;
  uint64_t v256;
  uint64_t v257;
  __int128 v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  _QWORD *v264;

  v242 = a5;
  v241 = a4;
  v240 = a3;
  v244 = a2;
  v252 = a6;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B79F0);
  v248 = *(_QWORD *)(v7 - 8);
  v249 = v7;
  __chkstk_darwin(v7);
  v245 = (char *)&v236 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B79F8);
  v250 = *(_QWORD *)(v9 - 8);
  v251 = v9;
  __chkstk_darwin(v9);
  v247 = (char *)&v236 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for JSONContext(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v236 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v13);
  v18 = (char *)&v236 - v17;
  v19 = *a1;
  JSONContext.init()(v16);
  v255 = v18;
  JSONContext.withActionKinds()((uint64_t)v18);
  v20 = *(uint64_t (**)(char *, uint64_t))(v12 + 8);
  v246 = v11;
  v243 = v20;
  v20(v15, v11);
  v21 = *(_QWORD **)(v19 + 16);
  v256 = v19;
  v253 = v21;
  if (v21)
  {
    v22 = (char *)(v19 + 32);
    swift_bridgeObjectRetain(v19);
    v23 = _swiftEmptyArrayStorage;
    do
    {
      if (v22[1] == 1)
      {
        v27 = *v22;
        v258 = *(_OWORD *)(v22 + 8);
        v28 = *((_QWORD *)v22 + 3);
        swift_bridgeObjectRetain(v28);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v23);
        v264 = v23;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_1807DC(0, v23[2] + 1, 1);
          v23 = v264;
        }
        v25 = v23[2];
        v24 = v23[3];
        if (v25 >= v24 >> 1)
        {
          sub_1807DC(v24 > 1, v25 + 1, 1);
          v23 = v264;
        }
        v23[2] = v25 + 1;
        v26 = &v23[4 * v25];
        *((_BYTE *)v26 + 32) = v27;
        *((_BYTE *)v26 + 33) = 1;
        *(_OWORD *)(v26 + 5) = v258;
        v26[7] = v28;
      }
      v22 += 32;
      v21 = (_QWORD *)((char *)v21 - 1);
    }
    while (v21);
    swift_bridgeObjectRelease();
  }
  else
  {
    v23 = _swiftEmptyArrayStorage;
  }
  v30 = (_QWORD *)v23[2];
  v257 = (uint64_t)v23;
  v254 = v30;
  if (!v30)
  {
    v32 = _swiftEmptyArrayStorage;
    v49 = _swiftEmptyArrayStorage[2];
    if (v49)
      goto LABEL_29;
    goto LABEL_39;
  }
  v31 = v23 + 4;
  swift_retain(v23);
  v32 = _swiftEmptyArrayStorage;
  v33 = v30;
  do
  {
    v34 = *(_BYTE *)v31;
    v35 = *((_BYTE *)v31 + 1);
    v37 = v31[1];
    v36 = v31[2];
    v38 = v31[3];
    v39 = ModernShelf.ItemKind.rawValue.getter(*(_BYTE *)v31);
    if (v39 == 0x7045686372616573 && v40 == 0xED000065646F7369)
    {
      swift_bridgeObjectRetain(v38);
      swift_bridgeObjectRelease();
    }
    else
    {
      v42 = _stringCompareWithSmolCheck(_:_:expecting:)(v39, v40, 0x7045686372616573, 0xED000065646F7369, 0);
      swift_bridgeObjectRetain(v38);
      swift_bridgeObjectRelease();
      if ((v42 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        goto LABEL_15;
      }
    }
    *(_QWORD *)&v258 = v36;
    v43 = swift_isUniquelyReferenced_nonNull_native(v32);
    v264 = v32;
    v44 = v35;
    if ((v43 & 1) == 0)
    {
      sub_1807DC(0, v32[2] + 1, 1);
      v32 = v264;
    }
    v46 = v32[2];
    v45 = v32[3];
    if (v46 >= v45 >> 1)
    {
      sub_1807DC(v45 > 1, v46 + 1, 1);
      v32 = v264;
    }
    v32[2] = v46 + 1;
    v47 = &v32[4 * v46];
    *((_BYTE *)v47 + 32) = v34;
    *((_BYTE *)v47 + 33) = v44;
    v48 = v258;
    v47[5] = v37;
    v47[6] = v48;
    v47[7] = v38;
LABEL_15:
    v31 += 4;
    v33 = (_QWORD *)((char *)v33 - 1);
  }
  while (v33);
  v23 = (_QWORD *)v257;
  swift_release(v257);
  v30 = v254;
  v49 = v32[2];
  if (!v49)
  {
LABEL_39:
    v51 = _swiftEmptyArrayStorage;
    goto LABEL_40;
  }
LABEL_29:
  swift_retain(v32);
  v50 = v32 + 7;
  v51 = _swiftEmptyArrayStorage;
  do
  {
    v53 = *v50;
    if (*v50)
    {
      v54 = *(v50 - 1);
      swift_bridgeObjectRetain(*v50);
      if ((swift_isUniquelyReferenced_nonNull_native(v51) & 1) == 0)
        v51 = sub_10644(0, v51[2] + 1, 1, v51);
      v56 = v51[2];
      v55 = v51[3];
      if (v56 >= v55 >> 1)
        v51 = sub_10644((_QWORD *)(v55 > 1), v56 + 1, 1, v51);
      v51[2] = v56 + 1;
      v52 = &v51[2 * v56];
      v52[4] = v54;
      v52[5] = v53;
    }
    v50 += 4;
    --v49;
  }
  while (v49);
  swift_release(v32);
LABEL_40:
  v239 = v51;
  swift_release(v32);
  if (!v30)
  {
    v58 = _swiftEmptyArrayStorage;
    v73 = _swiftEmptyArrayStorage[2];
    if (v73)
      goto LABEL_57;
    goto LABEL_67;
  }
  v57 = v23 + 4;
  swift_retain(v23);
  v58 = _swiftEmptyArrayStorage;
  v59 = v30;
  while (2)
  {
    v60 = *(_BYTE *)v57;
    v61 = *((_BYTE *)v57 + 1);
    v62 = v57[1];
    v63 = v57[2];
    v64 = v57[3];
    v65 = ModernShelf.ItemKind.rawValue.getter(*(_BYTE *)v57);
    if (v65 == 0x6853686372616573 && v66 == 0xEA0000000000776FLL)
    {
      swift_bridgeObjectRetain(v64);
      swift_bridgeObjectRelease();
      goto LABEL_51;
    }
    v68 = _stringCompareWithSmolCheck(_:_:expecting:)(v65, v66, 0x6853686372616573, 0xEA0000000000776FLL, 0);
    swift_bridgeObjectRetain(v64);
    swift_bridgeObjectRelease();
    if ((v68 & 1) != 0)
    {
LABEL_51:
      v69 = swift_isUniquelyReferenced_nonNull_native(v58);
      v264 = v58;
      if ((v69 & 1) == 0)
      {
        sub_1807DC(0, v58[2] + 1, 1);
        v58 = v264;
      }
      v71 = v58[2];
      v70 = v58[3];
      if (v71 >= v70 >> 1)
      {
        sub_1807DC(v70 > 1, v71 + 1, 1);
        v58 = v264;
      }
      v58[2] = v71 + 1;
      v72 = &v58[4 * v71];
      *((_BYTE *)v72 + 32) = v60;
      *((_BYTE *)v72 + 33) = v61;
      v72[5] = v62;
      v72[6] = v63;
      v72[7] = v64;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    v57 += 4;
    v59 = (_QWORD *)((char *)v59 - 1);
    if (v59)
      continue;
    break;
  }
  v23 = (_QWORD *)v257;
  swift_release(v257);
  v30 = v254;
  v73 = v58[2];
  if (!v73)
  {
LABEL_67:
    v75 = _swiftEmptyArrayStorage;
    goto LABEL_68;
  }
LABEL_57:
  swift_retain(v58);
  v74 = v58 + 7;
  v75 = _swiftEmptyArrayStorage;
  do
  {
    v77 = *v74;
    if (*v74)
    {
      v78 = *(v74 - 1);
      swift_bridgeObjectRetain(*v74);
      if ((swift_isUniquelyReferenced_nonNull_native(v75) & 1) == 0)
        v75 = sub_10644(0, v75[2] + 1, 1, v75);
      v80 = v75[2];
      v79 = v75[3];
      if (v80 >= v79 >> 1)
        v75 = sub_10644((_QWORD *)(v79 > 1), v80 + 1, 1, v75);
      v75[2] = v80 + 1;
      v76 = &v75[2 * v80];
      v76[4] = v78;
      v76[5] = v77;
    }
    v74 += 4;
    --v73;
  }
  while (v73);
  swift_release(v58);
LABEL_68:
  v238 = v75;
  swift_release(v58);
  if (!v30)
  {
    swift_release(v23);
    v82 = _swiftEmptyArrayStorage;
    v98 = _swiftEmptyArrayStorage[2];
    if (v98)
      goto LABEL_85;
    goto LABEL_93;
  }
  v81 = v23 + 4;
  v82 = _swiftEmptyArrayStorage;
  while (2)
  {
    v83 = *(_BYTE *)v81;
    v84 = *((_BYTE *)v81 + 1);
    v86 = v81[1];
    v85 = v81[2];
    v87 = v81[3];
    v88 = ModernShelf.ItemKind.rawValue.getter(*(_BYTE *)v81);
    if (v88 == 0x6843686372616573 && v89 == 0xED00006C656E6E61)
    {
      swift_bridgeObjectRetain(v87);
      swift_bridgeObjectRelease();
      goto LABEL_79;
    }
    v91 = _stringCompareWithSmolCheck(_:_:expecting:)(v88, v89, 0x6843686372616573, 0xED00006C656E6E61, 0);
    swift_bridgeObjectRetain(v87);
    swift_bridgeObjectRelease();
    if ((v91 & 1) != 0)
    {
LABEL_79:
      *(_QWORD *)&v258 = v85;
      v92 = swift_isUniquelyReferenced_nonNull_native(v82);
      v264 = v82;
      v93 = v30;
      if ((v92 & 1) == 0)
      {
        sub_1807DC(0, v82[2] + 1, 1);
        v82 = v264;
      }
      v95 = v82[2];
      v94 = v82[3];
      if (v95 >= v94 >> 1)
      {
        sub_1807DC(v94 > 1, v95 + 1, 1);
        v82 = v264;
      }
      v82[2] = v95 + 1;
      v96 = &v82[4 * v95];
      *((_BYTE *)v96 + 32) = v83;
      *((_BYTE *)v96 + 33) = v84;
      v97 = v258;
      v96[5] = v86;
      v96[6] = v97;
      v96[7] = v87;
      v30 = v93;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    v81 += 4;
    v30 = (_QWORD *)((char *)v30 - 1);
    if (v30)
      continue;
    break;
  }
  swift_release(v257);
  v98 = v82[2];
  if (!v98)
  {
LABEL_93:
    v100 = _swiftEmptyArrayStorage;
    goto LABEL_94;
  }
LABEL_85:
  v99 = sub_144B4();
  swift_retain(v82);
  v100 = _swiftEmptyArrayStorage;
  v101 = 5;
  do
  {
    v264 = (_QWORD *)v82[v101];
    v102 = BinaryInteger.description.getter(&type metadata for UInt64, v99);
    v104 = v103;
    if ((swift_isUniquelyReferenced_nonNull_native(v100) & 1) == 0)
      v100 = sub_10644(0, v100[2] + 1, 1, v100);
    v106 = v100[2];
    v105 = v100[3];
    if (v106 >= v105 >> 1)
      v100 = sub_10644((_QWORD *)(v105 > 1), v106 + 1, 1, v100);
    v100[2] = v106 + 1;
    v107 = &v100[2 * v106];
    v107[4] = v102;
    v107[5] = v104;
    v101 += 4;
    --v98;
  }
  while (v98);
  swift_release(v82);
LABEL_94:
  swift_release(v82);
  v108 = v253;
  if (v253)
  {
    v109 = (char *)(v256 + 32);
    swift_bridgeObjectRetain(v256);
    v110 = _swiftEmptyArrayStorage;
    do
    {
      if ((v109[1] & 1) == 0)
      {
        v114 = *v109;
        v258 = *(_OWORD *)(v109 + 8);
        v115 = *((_QWORD *)v109 + 3);
        swift_bridgeObjectRetain(v115);
        v116 = swift_isUniquelyReferenced_nonNull_native(v110);
        v264 = v110;
        if ((v116 & 1) == 0)
        {
          sub_1807DC(0, v110[2] + 1, 1);
          v110 = v264;
        }
        v112 = v110[2];
        v111 = v110[3];
        if (v112 >= v111 >> 1)
        {
          sub_1807DC(v111 > 1, v112 + 1, 1);
          v110 = v264;
        }
        v110[2] = v112 + 1;
        v113 = &v110[4 * v112];
        *((_BYTE *)v113 + 32) = v114;
        *((_BYTE *)v113 + 33) = 0;
        *(_OWORD *)(v113 + 5) = v258;
        v113[7] = v115;
      }
      v109 += 32;
      v108 = (_QWORD *)((char *)v108 - 1);
    }
    while (v108);
    swift_bridgeObjectRelease();
  }
  else
  {
    v110 = _swiftEmptyArrayStorage;
  }
  v237 = v100;
  v117 = (_QWORD *)v110[2];
  v257 = (uint64_t)v110;
  v253 = v117;
  if (!v117)
  {
    v119 = _swiftEmptyArrayStorage;
    v134 = _swiftEmptyArrayStorage[2];
    if (v134)
      goto LABEL_122;
    goto LABEL_130;
  }
  v118 = v110 + 4;
  swift_retain(v110);
  v119 = _swiftEmptyArrayStorage;
  while (2)
  {
    v120 = *(_BYTE *)v118;
    v121 = *((unsigned __int8 *)v118 + 1);
    v123 = v118[1];
    v122 = v118[2];
    v124 = v118[3];
    v125 = ModernShelf.ItemKind.rawValue.getter(*(_BYTE *)v118);
    if (v125 == 0x7045686372616573 && v126 == 0xED000065646F7369)
    {
      swift_bridgeObjectRetain(v124);
      swift_bridgeObjectRelease();
      goto LABEL_116;
    }
    v128 = _stringCompareWithSmolCheck(_:_:expecting:)(v125, v126, 0x7045686372616573, 0xED000065646F7369, 0);
    swift_bridgeObjectRetain(v124);
    swift_bridgeObjectRelease();
    if ((v128 & 1) != 0)
    {
LABEL_116:
      LODWORD(v258) = v121;
      v129 = swift_isUniquelyReferenced_nonNull_native(v119);
      v264 = v119;
      v130 = v122;
      if ((v129 & 1) == 0)
      {
        sub_1807DC(0, v119[2] + 1, 1);
        v119 = v264;
      }
      v132 = v119[2];
      v131 = v119[3];
      if (v132 >= v131 >> 1)
      {
        sub_1807DC(v131 > 1, v132 + 1, 1);
        v119 = v264;
      }
      v119[2] = v132 + 1;
      v133 = &v119[4 * v132];
      *((_BYTE *)v133 + 32) = v120;
      *((_BYTE *)v133 + 33) = v258;
      v133[5] = v123;
      v133[6] = v130;
      v133[7] = v124;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    v118 += 4;
    v117 = (_QWORD *)((char *)v117 - 1);
    if (v117)
      continue;
    break;
  }
  v110 = (_QWORD *)v257;
  swift_release(v257);
  v134 = v119[2];
  if (!v134)
  {
LABEL_130:
    v136 = _swiftEmptyArrayStorage;
    goto LABEL_131;
  }
LABEL_122:
  v135 = sub_144B4();
  swift_retain(v119);
  v136 = _swiftEmptyArrayStorage;
  v137 = 5;
  do
  {
    v264 = (_QWORD *)v119[v137];
    v138 = BinaryInteger.description.getter(&type metadata for UInt64, v135);
    v140 = v139;
    if ((swift_isUniquelyReferenced_nonNull_native(v136) & 1) == 0)
      v136 = sub_10644(0, v136[2] + 1, 1, v136);
    v142 = v136[2];
    v141 = v136[3];
    if (v142 >= v141 >> 1)
      v136 = sub_10644((_QWORD *)(v141 > 1), v142 + 1, 1, v136);
    v136[2] = v142 + 1;
    v143 = &v136[2 * v142];
    v143[4] = v138;
    v143[5] = v140;
    v137 += 4;
    --v134;
  }
  while (v134);
  swift_release(v119);
  v110 = (_QWORD *)v257;
LABEL_131:
  swift_release(v119);
  v144 = v253;
  v254 = v136;
  if (!v253)
  {
    v146 = _swiftEmptyArrayStorage;
    v163 = _swiftEmptyArrayStorage[2];
    if (v163)
      goto LABEL_148;
    goto LABEL_157;
  }
  v145 = v110 + 4;
  swift_retain(v110);
  v146 = _swiftEmptyArrayStorage;
  v147 = v144;
  while (2)
  {
    v148 = *(_BYTE *)v145;
    v149 = *((_BYTE *)v145 + 1);
    v151 = v145[1];
    v150 = v145[2];
    v152 = v145[3];
    v153 = ModernShelf.ItemKind.rawValue.getter(*(_BYTE *)v145);
    if (v153 == 0x6853686372616573 && v154 == 0xEA0000000000776FLL)
    {
      swift_bridgeObjectRetain(v152);
      swift_bridgeObjectRelease();
      goto LABEL_142;
    }
    v156 = _stringCompareWithSmolCheck(_:_:expecting:)(v153, v154, 0x6853686372616573, 0xEA0000000000776FLL, 0);
    swift_bridgeObjectRetain(v152);
    swift_bridgeObjectRelease();
    if ((v156 & 1) != 0)
    {
LABEL_142:
      *(_QWORD *)&v258 = v150;
      v157 = swift_isUniquelyReferenced_nonNull_native(v146);
      v264 = v146;
      v158 = v149;
      if ((v157 & 1) == 0)
      {
        sub_1807DC(0, v146[2] + 1, 1);
        v146 = v264;
      }
      v160 = v146[2];
      v159 = v146[3];
      if (v160 >= v159 >> 1)
      {
        sub_1807DC(v159 > 1, v160 + 1, 1);
        v146 = v264;
      }
      v146[2] = v160 + 1;
      v161 = &v146[4 * v160];
      *((_BYTE *)v161 + 32) = v148;
      *((_BYTE *)v161 + 33) = v158;
      v162 = v258;
      v161[5] = v151;
      v161[6] = v162;
      v161[7] = v152;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    v145 += 4;
    v147 = (_QWORD *)((char *)v147 - 1);
    if (v147)
      continue;
    break;
  }
  v110 = (_QWORD *)v257;
  swift_release(v257);
  v144 = v253;
  v136 = v254;
  v163 = v146[2];
  if (!v163)
  {
LABEL_157:
    v253 = _swiftEmptyArrayStorage;
    goto LABEL_158;
  }
LABEL_148:
  v164 = sub_144B4();
  swift_retain(v146);
  v165 = _swiftEmptyArrayStorage;
  v166 = 5;
  do
  {
    v264 = (_QWORD *)v146[v166];
    v167 = BinaryInteger.description.getter(&type metadata for UInt64, v164);
    v169 = v168;
    if ((swift_isUniquelyReferenced_nonNull_native(v165) & 1) != 0)
      v170 = v165;
    else
      v170 = sub_10644(0, v165[2] + 1, 1, v165);
    v172 = v170[2];
    v171 = v170[3];
    if (v172 >= v171 >> 1)
      v170 = sub_10644((_QWORD *)(v171 > 1), v172 + 1, 1, v170);
    v170[2] = v172 + 1;
    v173 = &v170[2 * v172];
    v173[4] = v167;
    v173[5] = v169;
    v166 += 4;
    --v163;
    v165 = v170;
  }
  while (v163);
  v253 = v170;
  swift_release(v146);
  v110 = (_QWORD *)v257;
LABEL_158:
  swift_release(v146);
  if (!v144)
  {
    swift_release(v110);
    v175 = _swiftEmptyArrayStorage;
    v191 = _swiftEmptyArrayStorage[2];
    if (v191)
      goto LABEL_175;
    goto LABEL_183;
  }
  v174 = v110 + 4;
  v175 = _swiftEmptyArrayStorage;
  while (2)
  {
    v176 = *(_BYTE *)v174;
    v177 = *((_BYTE *)v174 + 1);
    v179 = v174[1];
    v178 = v174[2];
    v180 = v174[3];
    v181 = ModernShelf.ItemKind.rawValue.getter(*(_BYTE *)v174);
    if (v181 == 0x6843686372616573 && v182 == 0xED00006C656E6E61)
    {
      swift_bridgeObjectRetain(v180);
      swift_bridgeObjectRelease();
      goto LABEL_169;
    }
    v184 = _stringCompareWithSmolCheck(_:_:expecting:)(v181, v182, 0x6843686372616573, 0xED00006C656E6E61, 0);
    swift_bridgeObjectRetain(v180);
    swift_bridgeObjectRelease();
    if ((v184 & 1) != 0)
    {
LABEL_169:
      *(_QWORD *)&v258 = v178;
      v185 = swift_isUniquelyReferenced_nonNull_native(v175);
      v264 = v175;
      v186 = v144;
      if ((v185 & 1) == 0)
      {
        sub_1807DC(0, v175[2] + 1, 1);
        v175 = v264;
      }
      v188 = v175[2];
      v187 = v175[3];
      if (v188 >= v187 >> 1)
      {
        sub_1807DC(v187 > 1, v188 + 1, 1);
        v175 = v264;
      }
      v175[2] = v188 + 1;
      v189 = &v175[4 * v188];
      *((_BYTE *)v189 + 32) = v176;
      *((_BYTE *)v189 + 33) = v177;
      v190 = v258;
      v189[5] = v179;
      v189[6] = v190;
      v189[7] = v180;
      v144 = v186;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    v174 += 4;
    v144 = (_QWORD *)((char *)v144 - 1);
    if (v144)
      continue;
    break;
  }
  swift_release(v257);
  v136 = v254;
  v191 = v175[2];
  if (!v191)
  {
LABEL_183:
    v193 = _swiftEmptyArrayStorage;
    goto LABEL_184;
  }
LABEL_175:
  v192 = sub_144B4();
  swift_retain(v175);
  v193 = _swiftEmptyArrayStorage;
  v194 = 5;
  do
  {
    v264 = (_QWORD *)v175[v194];
    v195 = BinaryInteger.description.getter(&type metadata for UInt64, v192);
    v197 = v196;
    if ((swift_isUniquelyReferenced_nonNull_native(v193) & 1) == 0)
      v193 = sub_10644(0, v193[2] + 1, 1, v193);
    v199 = v193[2];
    v198 = v193[3];
    if (v199 >= v198 >> 1)
      v193 = sub_10644((_QWORD *)(v198 > 1), v199 + 1, 1, v193);
    v193[2] = v199 + 1;
    v200 = &v193[2 * v199];
    v200[4] = v195;
    v200[5] = v197;
    v194 += 4;
    --v191;
  }
  while (v191);
  swift_release(v175);
  v136 = v254;
LABEL_184:
  v201 = swift_release(v175);
  __chkstk_darwin(v201);
  v202 = v244;
  v203 = sub_CD758((uint64_t)v136, sub_D1168, (uint64_t)&v235, v244);
  v204 = swift_bridgeObjectRelease();
  v264 = (_QWORD *)v203;
  __chkstk_darwin(v204);
  v205 = sub_CDB44((uint64_t)v253, sub_D1170, (uint64_t)&v235, v202);
  v206 = swift_bridgeObjectRelease();
  v263 = v205;
  __chkstk_darwin(v206);
  v207 = sub_CDF28((uint64_t)v193, sub_D1178, (uint64_t)&v235, v202);
  v208 = swift_bridgeObjectRelease();
  v262 = v207;
  __chkstk_darwin(v208);
  v209 = sub_CE708((uint64_t)v239, sub_CF388, 0, sub_D1180, (uint64_t (*)(uint64_t))&v235, v202);
  v210 = swift_bridgeObjectRelease();
  v261 = v209;
  __chkstk_darwin(v210);
  v211 = sub_CEAFC((uint64_t)v238, sub_CF468, 0, sub_D1188, (uint64_t (*)(uint64_t))&v235, v202);
  v212 = swift_bridgeObjectRelease();
  v260 = v211;
  __chkstk_darwin(v212);
  v213 = sub_CE314((uint64_t)v237, (uint64_t (*)(uint64_t))sub_CD70C, 0, sub_D1190, (uint64_t (*)(uint64_t))&v235, v202);
  swift_bridgeObjectRelease();
  v259 = v213;
  *(_QWORD *)&v258 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7A00);
  v257 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3388);
  v214 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7A08);
  v215 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7A10);
  v216 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7A18);
  v217 = sub_32914(&qword_3B7A20, &qword_3B7A00, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v218 = sub_32914(&qword_3B3398, &qword_3B3388, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v219 = sub_32914(&qword_3B7A28, &qword_3B7A08, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v220 = sub_32914(&qword_3B7A30, &qword_3B7A10, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v221 = sub_32914(&qword_3B7A38, &qword_3B7A18, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v234 = v217;
  v222 = v245;
  Publishers.PFCombineLatest6.init(_:_:_:_:_:_:)(&v264, &v263, &v262, &v261, &v260, &v259, v258, v257, v214, v215, v216, v214, v234, v218, v219, v220, v221, v219);
  v223 = swift_allocObject(&unk_37F020, 32, 7);
  v224 = v256;
  *(_QWORD *)(v223 + 16) = v202;
  *(_QWORD *)(v223 + 24) = v224;
  v225 = swift_allocObject(&unk_37F048, 32, 7);
  *(_QWORD *)(v225 + 16) = sub_D11C4;
  *(_QWORD *)(v225 + 24) = v223;
  swift_bridgeObjectRetain(v224);
  swift_retain(v202);
  v226 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B09E8);
  v227 = sub_32914(&qword_3B7A40, &qword_3B79F0, (uint64_t)&protocol conformance descriptor for Publishers.PFCombineLatest6<A, B, C, D, E, F>);
  v228 = v247;
  v229 = v249;
  Publisher.map<A>(_:)(sub_D11F0, v225, v249, v226, v227);
  swift_release(v225);
  (*(void (**)(char *, uint64_t))(v248 + 8))(v222, v229);
  v230 = sub_32914(&qword_3B7A48, &qword_3B79F8, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v231 = v251;
  v232 = Publisher.eraseToAnyPublisher()(v251, v230);
  (*(void (**)(char *, uint64_t))(v250 + 8))(v228, v231);
  result = v243(v255, v246);
  *v252 = v232;
  return result;
}

uint64_t sub_CD688()
{
  _QWORD *v0;

  swift_release(v0[2]);
  __swift_destroy_boxed_opaque_existential_1(v0 + 3);
  swift_unknownObjectRelease(v0[8]);
  return swift_deallocObject(v0, 80, 7);
}

uint64_t sub_CD6BC@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;

  return sub_CC0C0(a1, v2[2], (uint64_t)(v2 + 3), v2[8], v2[9], a2);
}

uint64_t sub_CD6CC(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2B18);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_CD70C()
{
  unint64_t v0;

  v0 = sub_144B4();
  return BinaryInteger.description.getter(&type metadata for UInt64, v0);
}

uint64_t sub_CD758(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t (*v38)(uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;

  v37 = a3;
  v38 = a2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7BD8);
  v39 = *(_QWORD *)(v6 - 8);
  v40 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7BE0);
  v41 = *(_QWORD *)(v9 - 8);
  v42 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7BE8);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = (_QWORD *)a1;
  v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3BC430);
  v17 = sub_32914((unint64_t *)&qword_3B8E30, (uint64_t *)&unk_3BC430, (uint64_t)&protocol conformance descriptor for [A]);
  if ((Collection.isNotEmpty.getter(v16, v17) & 1) == 0)
  {
    v44 = _swiftEmptyArrayStorage;
    v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0A28);
LABEL_8:
    Just.init(_:)(&v44, v34);
    v35 = sub_32914(&qword_3B7BF0, &qword_3B7BE8, (uint64_t)&protocol conformance descriptor for Just<A>);
    v33 = Publisher.eraseToAnyPublisher()(v12, v35);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    return v33;
  }
  swift_retain(a4);
  v18 = sub_D19E8(a1, a4, type metadata accessor for LegacyEpisodeLockup);
  swift_release(a4);
  v44 = v18;
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0A28);
  v20 = sub_32914(&qword_3B7BF8, &qword_3B0A28, (uint64_t)&protocol conformance descriptor for [A]);
  if ((Collection.isNotEmpty.getter(v19, v20) & 1) == 0)
  {
    swift_bridgeObjectRetain(a1);
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_4;
    goto LABEL_7;
  }
  v21 = sub_CBB68((unint64_t)v18);
  v22 = swift_bridgeObjectRetain(a1);
  v23 = sub_D1714(v22, (uint64_t)v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  a1 = v23;
  if (!*(_QWORD *)(v23 + 16))
  {
LABEL_7:
    swift_bridgeObjectRelease();
    v44 = v18;
    v34 = v19;
    goto LABEL_8;
  }
LABEL_4:
  v44 = v18;
  Just.init(_:)(&v44, v19);
  v24 = sub_32914(&qword_3B7BF0, &qword_3B7BE8, (uint64_t)&protocol conformance descriptor for Just<A>);
  v25 = Publisher.makeOptional.getter(v12, v24);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  v44 = (_QWORD *)v25;
  v26 = v38(a1);
  swift_bridgeObjectRelease();
  v43 = v26;
  v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7C00);
  v28 = sub_32914(&qword_3B7C08, &qword_3B7C00, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publishers.CombineLatest.init(_:_:)(&v44, &v43, v27, v27, v28, v28);
  v29 = sub_32914(&qword_3B7C10, &qword_3B7BD8, (uint64_t)&protocol conformance descriptor for Publishers.CombineLatest<A, B>);
  v30 = v40;
  Publisher.map<A>(_:)(sub_D16D0, 0, v40, v19, v29);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v8, v30);
  v31 = sub_32914(&qword_3B7C18, &qword_3B7BE0, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v32 = v42;
  v33 = Publisher.eraseToAnyPublisher()(v42, v31);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v11, v32);
  return v33;
}

uint64_t sub_CDB44(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t (*v38)(uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;

  v37 = a3;
  v38 = a2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7B88);
  v39 = *(_QWORD *)(v6 - 8);
  v40 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7B90);
  v41 = *(_QWORD *)(v9 - 8);
  v42 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4E18);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = (_QWORD *)a1;
  v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3BC430);
  v17 = sub_32914((unint64_t *)&qword_3B8E30, (uint64_t *)&unk_3BC430, (uint64_t)&protocol conformance descriptor for [A]);
  if ((Collection.isNotEmpty.getter(v16, v17) & 1) == 0)
  {
    v44 = _swiftEmptyArrayStorage;
    v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B09E8);
LABEL_8:
    Just.init(_:)(&v44, v34);
    v35 = sub_32914(&qword_3B4E28, &qword_3B4E18, (uint64_t)&protocol conformance descriptor for Just<A>);
    v33 = Publisher.eraseToAnyPublisher()(v12, v35);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    return v33;
  }
  swift_retain(a4);
  v18 = sub_D1874(a1, a4);
  swift_release(a4);
  v44 = v18;
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B09E8);
  v20 = sub_32914(&qword_3B79E0, &qword_3B09E8, (uint64_t)&protocol conformance descriptor for [A]);
  if ((Collection.isNotEmpty.getter(v19, v20) & 1) == 0)
  {
    swift_bridgeObjectRetain(a1);
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_4;
    goto LABEL_7;
  }
  v21 = sub_CBB68((unint64_t)v18);
  v22 = swift_bridgeObjectRetain(a1);
  v23 = sub_D1714(v22, (uint64_t)v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  a1 = v23;
  if (!*(_QWORD *)(v23 + 16))
  {
LABEL_7:
    swift_bridgeObjectRelease();
    v44 = v18;
    v34 = v19;
    goto LABEL_8;
  }
LABEL_4:
  v44 = v18;
  Just.init(_:)(&v44, v19);
  v24 = sub_32914(&qword_3B4E28, &qword_3B4E18, (uint64_t)&protocol conformance descriptor for Just<A>);
  v25 = Publisher.makeOptional.getter(v12, v24);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  v44 = (_QWORD *)v25;
  v26 = v38(a1);
  swift_bridgeObjectRelease();
  v43 = v26;
  v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7B98);
  v28 = sub_32914(&qword_3B7BA0, &qword_3B7B98, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publishers.CombineLatest.init(_:_:)(&v44, &v43, v27, v27, v28, v28);
  v29 = sub_32914(&qword_3B7BA8, &qword_3B7B88, (uint64_t)&protocol conformance descriptor for Publishers.CombineLatest<A, B>);
  v30 = v40;
  Publisher.map<A>(_:)(sub_D168C, 0, v40, v19, v29);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v8, v30);
  v31 = sub_32914(&qword_3B7BB0, &qword_3B7B90, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v32 = v42;
  v33 = Publisher.eraseToAnyPublisher()(v42, v31);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v11, v32);
  return v33;
}

uint64_t sub_CDF28(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t (*v38)(uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;

  v37 = a3;
  v38 = a2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7B20);
  v39 = *(_QWORD *)(v6 - 8);
  v40 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7B28);
  v41 = *(_QWORD *)(v9 - 8);
  v42 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7B30);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = (_QWORD *)a1;
  v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3BC430);
  v17 = sub_32914((unint64_t *)&qword_3B8E30, (uint64_t *)&unk_3BC430, (uint64_t)&protocol conformance descriptor for [A]);
  if ((Collection.isNotEmpty.getter(v16, v17) & 1) == 0)
  {
    v44 = _swiftEmptyArrayStorage;
    v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0A18);
LABEL_8:
    Just.init(_:)(&v44, v34);
    v35 = sub_32914(&qword_3B7B38, &qword_3B7B30, (uint64_t)&protocol conformance descriptor for Just<A>);
    v33 = Publisher.eraseToAnyPublisher()(v12, v35);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    return v33;
  }
  swift_retain(a4);
  v18 = sub_D19E8(a1, a4, type metadata accessor for LegacyChannelLockup);
  swift_release(a4);
  v44 = v18;
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0A18);
  v20 = sub_32914(&qword_3B7B40, &qword_3B0A18, (uint64_t)&protocol conformance descriptor for [A]);
  if ((Collection.isNotEmpty.getter(v19, v20) & 1) == 0)
  {
    swift_bridgeObjectRetain(a1);
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_4;
    goto LABEL_7;
  }
  v21 = sub_CBB68((unint64_t)v18);
  v22 = swift_bridgeObjectRetain(a1);
  v23 = sub_D1714(v22, (uint64_t)v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  a1 = v23;
  if (!*(_QWORD *)(v23 + 16))
  {
LABEL_7:
    swift_bridgeObjectRelease();
    v44 = v18;
    v34 = v19;
    goto LABEL_8;
  }
LABEL_4:
  v44 = v18;
  Just.init(_:)(&v44, v19);
  v24 = sub_32914(&qword_3B7B38, &qword_3B7B30, (uint64_t)&protocol conformance descriptor for Just<A>);
  v25 = Publisher.makeOptional.getter(v12, v24);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  v44 = (_QWORD *)v25;
  v26 = v38(a1);
  swift_bridgeObjectRelease();
  v43 = v26;
  v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7B48);
  v28 = sub_32914(&qword_3B7B50, &qword_3B7B48, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publishers.CombineLatest.init(_:_:)(&v44, &v43, v27, v27, v28, v28);
  v29 = sub_32914(&qword_3B7B58, &qword_3B7B20, (uint64_t)&protocol conformance descriptor for Publishers.CombineLatest<A, B>);
  v30 = v40;
  Publisher.map<A>(_:)(sub_D1648, 0, v40, v19, v29);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v8, v30);
  v31 = sub_32914(&qword_3B7B60, &qword_3B7B28, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v32 = v42;
  v33 = Publisher.eraseToAnyPublisher()(v42, v31);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v11, v32);
  return v33;
}

uint64_t sub_CE314(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v39[3])(uint64_t);
  uint64_t (*v40)(uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;

  v39[2] = a5;
  v40 = a4;
  v39[0] = a2;
  v39[1] = a3;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7B20);
  v41 = *(_QWORD *)(v8 - 8);
  v42 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7B28);
  v43 = *(_QWORD *)(v11 - 8);
  v44 = v11;
  __chkstk_darwin(v11);
  v13 = (char *)v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7B30);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = (_QWORD *)a1;
  v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3BC430);
  v19 = sub_32914((unint64_t *)&qword_3B8E30, (uint64_t *)&unk_3BC430, (uint64_t)&protocol conformance descriptor for [A]);
  if ((Collection.isNotEmpty.getter(v18, v19) & 1) == 0)
  {
    v46 = _swiftEmptyArrayStorage;
    v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0A18);
LABEL_8:
    Just.init(_:)(&v46, v36);
    v37 = sub_32914(&qword_3B7B38, &qword_3B7B30, (uint64_t)&protocol conformance descriptor for Just<A>);
    v35 = Publisher.eraseToAnyPublisher()(v14, v37);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    return v35;
  }
  swift_retain(a6);
  v20 = sub_D19E8(a1, a6, type metadata accessor for LegacyChannelLockup);
  swift_release(a6);
  v46 = v20;
  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0A18);
  v22 = sub_32914(&qword_3B7B40, &qword_3B0A18, (uint64_t)&protocol conformance descriptor for [A]);
  if ((Collection.isNotEmpty.getter(v21, v22) & 1) == 0)
  {
    swift_bridgeObjectRetain(a1);
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_4;
    goto LABEL_7;
  }
  v23 = sub_D1B88((unint64_t)v20, v39[0]);
  v24 = swift_bridgeObjectRetain(a1);
  v25 = sub_D1714(v24, (uint64_t)v23);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  a1 = v25;
  if (!*(_QWORD *)(v25 + 16))
  {
LABEL_7:
    swift_bridgeObjectRelease();
    v46 = v20;
    v36 = v21;
    goto LABEL_8;
  }
LABEL_4:
  v46 = v20;
  Just.init(_:)(&v46, v21);
  v26 = sub_32914(&qword_3B7B38, &qword_3B7B30, (uint64_t)&protocol conformance descriptor for Just<A>);
  v27 = Publisher.makeOptional.getter(v14, v26);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  v46 = (_QWORD *)v27;
  v28 = v40(a1);
  swift_bridgeObjectRelease();
  v45 = v28;
  v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7B48);
  v30 = sub_32914(&qword_3B7B50, &qword_3B7B48, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publishers.CombineLatest.init(_:_:)(&v46, &v45, v29, v29, v30, v30);
  v31 = sub_32914(&qword_3B7B58, &qword_3B7B20, (uint64_t)&protocol conformance descriptor for Publishers.CombineLatest<A, B>);
  v32 = v42;
  Publisher.map<A>(_:)(sub_D1648, 0, v42, v21, v31);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v10, v32);
  v33 = sub_32914(&qword_3B7B60, &qword_3B7B28, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v34 = v44;
  v35 = Publisher.eraseToAnyPublisher()(v44, v33);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v13, v34);
  return v35;
}

uint64_t sub_CE708(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v39[3])(uint64_t);
  uint64_t (*v40)(uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;

  v39[2] = a5;
  v40 = a4;
  v39[0] = a2;
  v39[1] = a3;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7AC8);
  v41 = *(_QWORD *)(v8 - 8);
  v42 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7AD0);
  v43 = *(_QWORD *)(v11 - 8);
  v44 = v11;
  __chkstk_darwin(v11);
  v13 = (char *)v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7AD8);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = (_QWORD *)a1;
  v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3BC430);
  v19 = sub_32914((unint64_t *)&qword_3B8E30, (uint64_t *)&unk_3BC430, (uint64_t)&protocol conformance descriptor for [A]);
  if ((Collection.isNotEmpty.getter(v18, v19) & 1) == 0)
  {
    v46 = _swiftEmptyArrayStorage;
    v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0A08);
LABEL_8:
    Just.init(_:)(&v46, v36);
    v37 = sub_32914(&qword_3B7AE0, &qword_3B7AD8, (uint64_t)&protocol conformance descriptor for Just<A>);
    v35 = Publisher.eraseToAnyPublisher()(v14, v37);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    return v35;
  }
  swift_retain(a6);
  v20 = sub_D19E8(a1, a6, type metadata accessor for LibraryEpisodeLockup);
  swift_release(a6);
  v46 = v20;
  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0A08);
  v22 = sub_32914(&qword_3BF800, &qword_3B0A08, (uint64_t)&protocol conformance descriptor for [A]);
  if ((Collection.isNotEmpty.getter(v21, v22) & 1) == 0)
  {
    swift_bridgeObjectRetain(a1);
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_4;
    goto LABEL_7;
  }
  v23 = sub_D1B88((unint64_t)v20, v39[0]);
  v24 = swift_bridgeObjectRetain(a1);
  v25 = sub_D1714(v24, (uint64_t)v23);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  a1 = v25;
  if (!*(_QWORD *)(v25 + 16))
  {
LABEL_7:
    swift_bridgeObjectRelease();
    v46 = v20;
    v36 = v21;
    goto LABEL_8;
  }
LABEL_4:
  v46 = v20;
  Just.init(_:)(&v46, v21);
  v26 = sub_32914(&qword_3B7AE0, &qword_3B7AD8, (uint64_t)&protocol conformance descriptor for Just<A>);
  v27 = Publisher.makeOptional.getter(v14, v26);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  v46 = (_QWORD *)v27;
  v28 = v40(a1);
  swift_bridgeObjectRelease();
  v45 = v28;
  v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7AE8);
  v30 = sub_32914(&qword_3B7AF0, &qword_3B7AE8, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publishers.CombineLatest.init(_:_:)(&v46, &v45, v29, v29, v30, v30);
  v31 = sub_32914(&qword_3B7AF8, &qword_3B7AC8, (uint64_t)&protocol conformance descriptor for Publishers.CombineLatest<A, B>);
  v32 = v42;
  Publisher.map<A>(_:)(sub_D1604, 0, v42, v21, v31);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v10, v32);
  v33 = sub_32914(&qword_3B7B00, &qword_3B7AD0, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v34 = v44;
  v35 = Publisher.eraseToAnyPublisher()(v44, v33);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v13, v34);
  return v35;
}

uint64_t sub_CEAFC(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v39[3])(uint64_t);
  uint64_t (*v40)(uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;

  v39[2] = a5;
  v40 = a4;
  v39[0] = a2;
  v39[1] = a3;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7A60);
  v41 = *(_QWORD *)(v8 - 8);
  v42 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7A68);
  v43 = *(_QWORD *)(v11 - 8);
  v44 = v11;
  __chkstk_darwin(v11);
  v13 = (char *)v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7A70);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = (_QWORD *)a1;
  v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3BC430);
  v19 = sub_32914((unint64_t *)&qword_3B8E30, (uint64_t *)&unk_3BC430, (uint64_t)&protocol conformance descriptor for [A]);
  if ((Collection.isNotEmpty.getter(v18, v19) & 1) == 0)
  {
    v46 = _swiftEmptyArrayStorage;
    v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B09F8);
LABEL_8:
    Just.init(_:)(&v46, v36);
    v37 = sub_32914(&qword_3B7A78, &qword_3B7A70, (uint64_t)&protocol conformance descriptor for Just<A>);
    v35 = Publisher.eraseToAnyPublisher()(v14, v37);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    return v35;
  }
  swift_retain(a6);
  v20 = sub_D19E8(a1, a6, type metadata accessor for LibraryShowLockup);
  swift_release(a6);
  v46 = v20;
  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B09F8);
  v22 = sub_32914(&qword_3B7A80, &qword_3B09F8, (uint64_t)&protocol conformance descriptor for [A]);
  if ((Collection.isNotEmpty.getter(v21, v22) & 1) == 0)
  {
    swift_bridgeObjectRetain(a1);
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_4;
    goto LABEL_7;
  }
  v23 = sub_D1B88((unint64_t)v20, v39[0]);
  v24 = swift_bridgeObjectRetain(a1);
  v25 = sub_D1714(v24, (uint64_t)v23);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  a1 = v25;
  if (!*(_QWORD *)(v25 + 16))
  {
LABEL_7:
    swift_bridgeObjectRelease();
    v46 = v20;
    v36 = v21;
    goto LABEL_8;
  }
LABEL_4:
  v46 = v20;
  Just.init(_:)(&v46, v21);
  v26 = sub_32914(&qword_3B7A78, &qword_3B7A70, (uint64_t)&protocol conformance descriptor for Just<A>);
  v27 = Publisher.makeOptional.getter(v14, v26);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  v46 = (_QWORD *)v27;
  v28 = v40(a1);
  swift_bridgeObjectRelease();
  v45 = v28;
  v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7A88);
  v30 = sub_32914(&qword_3B7A90, &qword_3B7A88, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publishers.CombineLatest.init(_:_:)(&v46, &v45, v29, v29, v30, v30);
  v31 = sub_32914(&qword_3B7A98, &qword_3B7A60, (uint64_t)&protocol conformance descriptor for Publishers.CombineLatest<A, B>);
  v32 = v42;
  Publisher.map<A>(_:)(sub_D15C0, 0, v42, v21, v31);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v10, v32);
  v33 = sub_32914(&qword_3B7AA0, &qword_3B7A68, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v34 = v44;
  v35 = Publisher.eraseToAnyPublisher()(v44, v33);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v13, v34);
  return v35;
}

_QWORD *sub_CEEF0(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(BOOL, uint64_t, uint64_t, _QWORD *), void (*a5)(uint64_t))
{
  uint64_t v9;
  uint64_t inited;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t i;
  uint64_t v18;
  uint64_t v19;
  _BYTE v21[48];

  v9 = __swift_instantiateConcreteTypeFromMangledName(a3);
  inited = swift_initStackObject(v9, v21);
  *(_OWORD *)(inited + 16) = xmmword_2EA080;
  *(_QWORD *)(inited + 32) = a2;
  *(_QWORD *)(inited + 40) = a1;
  if (a2)
  {
    swift_bridgeObjectRetain(a1);
    swift_bridgeObjectRetain_n(a2, 2);
    v11 = (_QWORD *)a4(0, 1, 1, _swiftEmptyArrayStorage);
    v13 = v11[2];
    v12 = v11[3];
    if (v13 >= v12 >> 1)
      v11 = (_QWORD *)a4(v12 > 1, v13 + 1, 1, v11);
    v11[2] = v13 + 1;
    v11[v13 + 4] = a2;
  }
  else
  {
    swift_bridgeObjectRetain(a1);
    v11 = _swiftEmptyArrayStorage;
  }
  if (a1)
  {
    swift_bridgeObjectRetain(a1);
    if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0)
      v11 = (_QWORD *)a4(0, v11[2] + 1, 1, v11);
    v15 = v11[2];
    v14 = v11[3];
    if (v15 >= v14 >> 1)
      v11 = (_QWORD *)a4(v14 > 1, v15 + 1, 1, v11);
    v11[2] = v15 + 1;
    v11[v15 + 4] = a1;
  }
  swift_release(inited);
  v16 = v11[2];
  if (v16)
  {
    swift_bridgeObjectRetain(v11);
    for (i = 0; i != v16; ++i)
    {
      v18 = v11[i + 4];
      v19 = swift_bridgeObjectRetain(v18);
      a5(v19);
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

uint64_t sub_CF0AC(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  Swift::OpaquePointer v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[2];

  v5._rawValue = (void *)swift_bridgeObjectRetain(a1);
  FetchSearchEpisodeLockupsIntent.init(ids:)(v5);
  v15[0] = v15[1];
  v6 = a2[3];
  v7 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v6);
  v8 = sub_D27E8();
  v9 = dispatch thunk of IntentDispatcher.dispatch<A>(intent:jsonContext:)(v15, a3, &type metadata for FetchSearchEpisodeLockupsIntent, v8, v6, v7);
  v10 = Promise.publisher.getter(v9);
  swift_release(v9);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7C30);
  v12 = sub_32914(&qword_3B7C38, &qword_3B7C30, (uint64_t)&protocol conformance descriptor for Future<A, B>);
  v13 = Publisher.makeOptional.getter(v11, v12);
  swift_bridgeObjectRelease();
  swift_release(v10);
  return v13;
}

uint64_t sub_CF1A0(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  Swift::OpaquePointer v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[2];

  v5._rawValue = (void *)swift_bridgeObjectRetain(a1);
  FetchSearchEpisodeLockupsIntent.init(ids:)(v5);
  v15[0] = v15[1];
  v6 = a2[3];
  v7 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v6);
  v8 = sub_D27A4();
  v9 = dispatch thunk of IntentDispatcher.dispatch<A>(intent:jsonContext:)(v15, a3, &type metadata for FetchSearchShowLockupsIntent, v8, v6, v7);
  v10 = Promise.publisher.getter(v9);
  swift_release(v9);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7BC8);
  v12 = sub_32914(&qword_3B7BD0, &qword_3B7BC8, (uint64_t)&protocol conformance descriptor for Future<A, B>);
  v13 = Publisher.makeOptional.getter(v11, v12);
  swift_bridgeObjectRelease();
  swift_release(v10);
  return v13;
}

uint64_t sub_CF294(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  Swift::OpaquePointer v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[2];

  v5._rawValue = (void *)swift_bridgeObjectRetain(a1);
  FetchSearchEpisodeLockupsIntent.init(ids:)(v5);
  v15[0] = v15[1];
  v6 = a2[3];
  v7 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v6);
  v8 = sub_D2760();
  v9 = dispatch thunk of IntentDispatcher.dispatch<A>(intent:jsonContext:)(v15, a3, &type metadata for FetchSearchChannelLockupsIntent, v8, v6, v7);
  v10 = Promise.publisher.getter(v9);
  swift_release(v9);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7B78);
  v12 = sub_32914(&qword_3B7B80, &qword_3B7B78, (uint64_t)&protocol conformance descriptor for Future<A, B>);
  v13 = Publisher.makeOptional.getter(v11, v12);
  swift_bridgeObjectRelease();
  swift_release(v10);
  return v13;
}

uint64_t sub_CF388(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8ShelfKit20LibraryEpisodeLockup_uuid);
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + OBJC_IVAR____TtC8ShelfKit20LibraryEpisodeLockup_uuid + 8));
  return v1;
}

uint64_t sub_CF3C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t ObjectType;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  ObjectType = swift_getObjectType();
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 160))(a1, ObjectType, a3);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7B10);
  v7 = sub_32914(&qword_3B7B18, &qword_3B7B10, (uint64_t)&protocol conformance descriptor for Future<A, B>);
  v8 = Publisher.makeOptional.getter(v6, v7);
  swift_release(v10);
  return v8;
}

uint64_t sub_CF468(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8ShelfKit17LibraryShowLockup_uuid);
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + OBJC_IVAR____TtC8ShelfKit17LibraryShowLockup_uuid + 8));
  return v1;
}

uint64_t sub_CF4A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t ObjectType;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  ObjectType = swift_getObjectType();
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 168))(a1, ObjectType, a3);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7AB8);
  v7 = sub_32914(&qword_3B7AC0, &qword_3B7AB8, (uint64_t)&protocol conformance descriptor for Future<A, B>);
  v8 = Publisher.makeOptional.getter(v6, v7);
  swift_release(v10);
  return v8;
}

uint64_t sub_CF548(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t ObjectType;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    sub_180848(0, v4, 0);
    v6 = (_QWORD *)(a1 + 40);
    do
    {
      v8 = *(v6 - 1);
      v7 = *v6;
      swift_bridgeObjectRetain(*v6);
      v9 = static AdamID.parse(_:)(v8, v7);
      swift_bridgeObjectRelease();
      v11 = _swiftEmptyArrayStorage[2];
      v10 = _swiftEmptyArrayStorage[3];
      if (v11 >= v10 >> 1)
        sub_180848(v10 > 1, v11 + 1, 1);
      v6 += 2;
      _swiftEmptyArrayStorage[2] = v11 + 1;
      _swiftEmptyArrayStorage[v11 + 4] = v9;
      --v4;
    }
    while (v4);
  }
  ObjectType = swift_getObjectType();
  v13 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(a3 + 176))(_swiftEmptyArrayStorage, ObjectType, a3);
  swift_bridgeObjectRelease();
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7A50);
  v15 = sub_32914(&qword_3B7A58, &qword_3B7A50, (uint64_t)&protocol conformance descriptor for Future<A, B>);
  v16 = Publisher.makeOptional.getter(v14, v15);
  swift_release(v13);
  return v16;
}

unint64_t sub_CF6DC(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t i;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  os_unfair_lock_s *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v79;
  unint64_t v81;
  _QWORD *v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;

  v14 = a1;
  if (a1 >> 62)
  {
LABEL_48:
    if (v14 < 0)
      v63 = v14;
    else
      v63 = v14 & 0xFFFFFFFFFFFFFF8;
    v64 = type metadata accessor for LegacyLockup(0);
    swift_bridgeObjectRetain(v14);
    v65 = _bridgeCocoaArray<A>(_:)(v63, v64);
    swift_bridgeObjectRelease();
    v14 = v65;
  }
  else
  {
    v15 = swift_bridgeObjectRetain(a1);
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v15);
    type metadata accessor for LegacyLockup(0);
  }
  v84 = v14;
  v85 = a2;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v66 = a3;
    else
      v66 = a3 & 0xFFFFFFFFFFFFFF8;
    v67 = type metadata accessor for LegacyLockup(0);
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a3);
    v68 = _bridgeCocoaArray<A>(_:)(v66, v67);
    swift_bridgeObjectRelease();
    a3 = v68;
  }
  else
  {
    swift_bridgeObjectRetain(a2);
    v16 = swift_bridgeObjectRetain(a3);
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v16);
    type metadata accessor for LegacyLockup(0);
  }
  v86 = a3;
  if ((unint64_t)a4 >> 62)
  {
    if (a4 < 0)
      v69 = a4;
    else
      v69 = a4 & 0xFFFFFFFFFFFFFF8;
    v70 = type metadata accessor for LegacyLockup(0);
    swift_bridgeObjectRetain(a4);
    v71 = _bridgeCocoaArray<A>(_:)(v69, v70);
    swift_bridgeObjectRelease();
    a4 = v71;
  }
  else
  {
    v17 = swift_bridgeObjectRetain(a4);
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v17);
    type metadata accessor for LegacyLockup(0);
  }
  v87 = a4;
  if ((unint64_t)a5 >> 62)
  {
    if (a5 < 0)
      v72 = a5;
    else
      v72 = a5 & 0xFFFFFFFFFFFFFF8;
    v73 = type metadata accessor for LegacyLockup(0);
    swift_bridgeObjectRetain(a5);
    v74 = _bridgeCocoaArray<A>(_:)(v72, v73);
    swift_bridgeObjectRelease();
    a5 = v74;
  }
  else
  {
    v18 = swift_bridgeObjectRetain(a5);
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v18);
    type metadata accessor for LegacyLockup(0);
  }
  v88 = a5;
  if ((unint64_t)a6 >> 62)
  {
    if (a6 < 0)
      v75 = a6;
    else
      v75 = a6 & 0xFFFFFFFFFFFFFF8;
    v76 = type metadata accessor for LegacyLockup(0);
    swift_bridgeObjectRetain(a6);
    v77 = _bridgeCocoaArray<A>(_:)(v75, v76);
    swift_bridgeObjectRelease();
    a6 = v77;
  }
  else
  {
    v19 = swift_bridgeObjectRetain(a6);
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v19);
    type metadata accessor for LegacyLockup(0);
  }
  v89 = a6;
  v20 = sub_1107C(0, 1, 1, _swiftEmptyArrayStorage);
  v22 = v20[2];
  v21 = v20[3];
  v23 = v22 + 1;
  swift_bridgeObjectRetain(v14);
  if (v22 >= v21 >> 1)
    v20 = sub_1107C((_QWORD *)(v21 > 1), v22 + 1, 1, v20);
  v20[2] = v23;
  v20[v22 + 4] = v14;
  v24 = v85;
  v25 = v20[3];
  v26 = v22 + 2;
  swift_bridgeObjectRetain(v85);
  if ((uint64_t)(v22 + 2) > (uint64_t)(v25 >> 1))
    v20 = sub_1107C((_QWORD *)(v25 > 1), v22 + 2, 1, v20);
  v20[2] = v26;
  v20[v23 + 4] = v24;
  v27 = v86;
  v28 = v20[3];
  v29 = v22 + 3;
  swift_bridgeObjectRetain(v86);
  if ((uint64_t)(v22 + 3) > (uint64_t)(v28 >> 1))
    v20 = sub_1107C((_QWORD *)(v28 > 1), v22 + 3, 1, v20);
  v20[2] = v29;
  v20[v26 + 4] = v27;
  v30 = v87;
  v31 = v20[3];
  v32 = v22 + 4;
  swift_bridgeObjectRetain(v87);
  if ((uint64_t)(v22 + 4) > (uint64_t)(v31 >> 1))
    v20 = sub_1107C((_QWORD *)(v31 > 1), v22 + 4, 1, v20);
  v20[2] = v32;
  v20[v29 + 4] = v30;
  v33 = v88;
  v34 = v20[3];
  v35 = v22 + 5;
  swift_bridgeObjectRetain(v88);
  if ((uint64_t)(v22 + 5) > (uint64_t)(v34 >> 1))
    v20 = sub_1107C((_QWORD *)(v34 > 1), v22 + 5, 1, v20);
  v20[2] = v35;
  v20[v32 + 4] = v33;
  v36 = v89;
  v37 = v20[3];
  swift_bridgeObjectRetain(v89);
  if ((uint64_t)(v22 + 6) > (uint64_t)(v37 >> 1))
    v20 = sub_1107C((_QWORD *)(v37 > 1), v22 + 6, 1, v20);
  v20[2] = v22 + 6;
  v20[v35 + 4] = v36;
  v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B09E8);
  swift_arrayDestroy(&v84, 6, v38);
  v83 = (unint64_t)_swiftEmptyArrayStorage;
  v14 = v20[2];
  if (v14)
  {
    swift_bridgeObjectRetain(v20);
    for (i = 0; i != v14; ++i)
    {
      v40 = v20[i + 4];
      v41 = swift_bridgeObjectRetain(v40);
      sub_1E3E98(v41);
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  v42 = v83;
  v43 = *(os_unfair_lock_s **)(a7 + 16);
  a6 = (uint64_t)&v43[4];
  a4 = (uint64_t)&v43[6];
  os_unfair_lock_lock(v43 + 6);
  v82 = (_QWORD *)a6;
  a7 = 0;
  sub_2C1B78((_QWORD *)a6);
  os_unfair_lock_unlock((os_unfair_lock_t)a4);
  if (v83 >> 62)
  {
    if ((v83 & 0x8000000000000000) != 0)
      a6 = v83;
    else
      a6 = v83 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n(v83, 2);
    a3 = _CocoaArrayWrapper.endIndex.getter(a6);
    swift_bridgeObjectRelease();
    if (a3)
      goto LABEL_29;
  }
  else
  {
    a3 = *(_QWORD *)((char *)&dword_10 + (v83 & 0xFFFFFFFFFFFFF8));
    swift_bridgeObjectRetain(v83);
    if (a3)
    {
LABEL_29:
      v79 = v83 >> 62;
      a2 = 0;
      v81 = v83;
      while (1)
      {
        a5 = a2 + 1;
        if (__OFADD__(a2, 1))
        {
          __break(1u);
          goto LABEL_48;
        }
        v14 = v42;
        v48 = *(_QWORD *)(v42 + 8 * a2 + 32);
        v49 = *(_QWORD *)(v48 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup_adamId);
        v50 = type metadata accessor for LibraryEpisodeLockup(0);
        v51 = swift_dynamicCastClass(v48, v50);
        if (v51)
        {
          v52 = &OBJC_IVAR____TtC8ShelfKit20LibraryEpisodeLockup_uuid;
        }
        else
        {
          v54 = type metadata accessor for LegacyChannelLockup(0);
          v45 = 0;
          a6 = 0;
          if (swift_dynamicCastClass(v48, v54))
            goto LABEL_37;
          v59 = type metadata accessor for LibraryShowLockup(0);
          v51 = swift_dynamicCastClass(v48, v59);
          if (!v51)
          {
            v60 = type metadata accessor for LegacyEpisodeLockup(0);
            swift_dynamicCastClass(v48, v60);
            v45 = 0;
            a6 = 0;
            goto LABEL_37;
          }
          v52 = &OBJC_IVAR____TtC8ShelfKit17LibraryShowLockup_uuid;
        }
        v53 = (uint64_t *)(v51 + *v52);
        v45 = *v53;
        a6 = v53[1];
        swift_bridgeObjectRetain(a6);
LABEL_37:
        swift_retain(v48);
        if ((AdamID.isEmpty.getter(v49) & 1) != 0)
        {
          if (!a6)
          {
            if (qword_3B0040 != -1)
              swift_once(&qword_3B0040, sub_2C034);
            v55 = type metadata accessor for OSLogger(0);
            __swift_project_value_buffer(v55, (uint64_t)qword_3B1DC8);
            v56 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0B10);
            v57 = type metadata accessor for LogMessage(0);
            v58 = swift_allocObject(v56, ((*(unsigned __int8 *)(*(_QWORD *)(v57 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v57 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v57 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v57 - 8) + 80) | 7);
            *(_OWORD *)(v58 + 16) = xmmword_2EA0D0;
            LogMessage.init(stringLiteral:)(0xD00000000000002ELL, 0x800000000030A380);
            Logger.warning(_:)(v58, v55, &protocol witness table for OSLogger);
            swift_bridgeObjectRelease();
            a6 = 0xE900000000000064;
            v45 = 0x656E696665646E75;
            v14 = v81;
          }
        }
        else
        {
          v83 = v49;
          v44 = sub_144B4();
          v45 = BinaryInteger.description.getter(&type metadata for UInt64, v44);
          v47 = v46;
          swift_bridgeObjectRelease();
          a6 = v47;
        }
        os_unfair_lock_lock((os_unfair_lock_t)a4);
        sub_2C1AD4(v82, v45, a6, v48);
        os_unfair_lock_unlock((os_unfair_lock_t)a4);
        swift_release(v48);
        swift_bridgeObjectRelease();
        ++a2;
        v42 = v14;
        if (a5 == a3)
        {
          swift_bridgeObjectRelease();
          v61 = a8;
          if (v79)
            goto LABEL_73;
LABEL_46:
          v62 = v42 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v42);
          swift_bridgeObjectRetain(v61);
          goto LABEL_74;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  v61 = a8;
  if (!(v83 >> 62))
    goto LABEL_46;
LABEL_73:
  swift_bridgeObjectRetain(v42);
  swift_bridgeObjectRetain(v61);
  v62 = (unint64_t)sub_1FBBD4(v42);
  swift_bridgeObjectRelease();
LABEL_74:
  v83 = v62;
  swift_bridgeObjectRetain(v61);
  sub_D26B8((uint64_t *)&v83, v61);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n(v61, 2);
  return v83;
}

uint64_t sub_CFEFC(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t result;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  char v65[8];
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;

  v4 = *a2;
  v5 = swift_retain(*a1);
  RecentlySearchedStorage.Item.init(_:)(v5, (uint64_t)v65);
  v6 = v68;
  v64 = *(_QWORD *)(a3 + 16);
  if (!v64)
  {
LABEL_21:
    swift_bridgeObjectRelease();
    return 0;
  }
  v58 = v4;
  v7 = 0;
  v8 = v66;
  v62 = v67;
  v57 = a3;
  v9 = (unint64_t *)(a3 + 56);
  v60 = v66;
  while (1)
  {
    v11 = *(v9 - 2);
    v10 = *(v9 - 1);
    v12 = *v9;
    swift_bridgeObjectRetain_n(*v9, 2);
    if ((AdamID.isEmpty.getter(v11) & 1) != 0)
    {
      if (v12)
      {
        v13 = v12;
      }
      else
      {
        if (qword_3B0040 != -1)
          swift_once(&qword_3B0040, sub_2C034);
        v16 = type metadata accessor for OSLogger(0);
        __swift_project_value_buffer(v16, (uint64_t)qword_3B1DC8);
        v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0B10);
        v18 = type metadata accessor for LogMessage(0);
        v19 = swift_allocObject(v17, ((*(unsigned __int8 *)(*(_QWORD *)(v18 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v18 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v18 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v18 - 8) + 80) | 7);
        *(_OWORD *)(v19 + 16) = xmmword_2EA0D0;
        LogMessage.init(stringLiteral:)(0xD00000000000002ELL, 0x800000000030A380);
        Logger.warning(_:)(v19, v16, &protocol witness table for OSLogger);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v10 = 0x656E696665646E75;
        v13 = 0xE900000000000064;
        v8 = v60;
      }
    }
    else
    {
      v69 = v11;
      v14 = sub_144B4();
      v10 = BinaryInteger.description.getter(&type metadata for UInt64, v14);
      v13 = v15;
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRetain(v6);
    if ((AdamID.isEmpty.getter(v8) & 1) != 0)
    {
      v20 = v62;
      v21 = v6;
      if (!v6)
      {
        if (qword_3B0040 != -1)
          swift_once(&qword_3B0040, sub_2C034);
        v22 = type metadata accessor for OSLogger(0);
        __swift_project_value_buffer(v22, (uint64_t)qword_3B1DC8);
        v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0B10);
        v24 = type metadata accessor for LogMessage(0);
        v25 = swift_allocObject(v23, ((*(unsigned __int8 *)(*(_QWORD *)(v24 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v24 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v24 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v24 - 8) + 80) | 7);
        *(_OWORD *)(v25 + 16) = xmmword_2EA0D0;
        LogMessage.init(stringLiteral:)(0xD00000000000002ELL, 0x800000000030A380);
        Logger.warning(_:)(v25, v22, &protocol witness table for OSLogger);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v20 = 0x656E696665646E75;
        v21 = 0xE900000000000064;
        v8 = v60;
      }
      if (v10 != v20)
        goto LABEL_19;
    }
    else
    {
      v69 = v8;
      v26 = sub_144B4();
      v20 = BinaryInteger.description.getter(&type metadata for UInt64, v26);
      v21 = v27;
      swift_bridgeObjectRelease();
      if (v10 != v20)
        goto LABEL_19;
    }
    if (v13 == v21)
    {
      v56 = v7;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_25;
    }
LABEL_19:
    v28 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, v13, v20, v21, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v28 & 1) != 0)
      break;
    v9 += 4;
    if (v64 == ++v7)
      goto LABEL_21;
  }
  v56 = v7;
LABEL_25:
  swift_bridgeObjectRelease();
  v29 = swift_retain(v58);
  RecentlySearchedStorage.Item.init(_:)(v29, (uint64_t)v65);
  v30 = 0;
  v59 = v66;
  v61 = v67;
  v31 = (unint64_t *)(v57 + 56);
  v32 = v68;
  v33 = v66;
  v63 = v68;
  while (2)
  {
    v34 = *(v31 - 2);
    v35 = *(v31 - 1);
    v36 = *v31;
    swift_bridgeObjectRetain_n(*v31, 2);
    if ((AdamID.isEmpty.getter(v34) & 1) != 0)
    {
      if (v36)
      {
        v37 = v36;
      }
      else
      {
        if (qword_3B0040 != -1)
          swift_once(&qword_3B0040, sub_2C034);
        v40 = type metadata accessor for OSLogger(0);
        __swift_project_value_buffer(v40, (uint64_t)qword_3B1DC8);
        v41 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0B10);
        v42 = type metadata accessor for LogMessage(0);
        v43 = swift_allocObject(v41, ((*(unsigned __int8 *)(*(_QWORD *)(v42 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v42 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v42 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v42 - 8) + 80) | 7);
        *(_OWORD *)(v43 + 16) = xmmword_2EA0D0;
        LogMessage.init(stringLiteral:)(0xD00000000000002ELL, 0x800000000030A380);
        Logger.warning(_:)(v43, v40, &protocol witness table for OSLogger);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v35 = 0x656E696665646E75;
        v37 = 0xE900000000000064;
        v33 = v59;
      }
    }
    else
    {
      v69 = v34;
      v38 = sub_144B4();
      v35 = BinaryInteger.description.getter(&type metadata for UInt64, v38);
      v37 = v39;
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRetain(v32);
    v44 = v32;
    if ((AdamID.isEmpty.getter(v33) & 1) != 0)
    {
      v45 = v61;
      v46 = v44;
      if (!v44)
      {
        if (qword_3B0040 != -1)
          swift_once(&qword_3B0040, sub_2C034);
        v47 = type metadata accessor for OSLogger(0);
        __swift_project_value_buffer(v47, (uint64_t)qword_3B1DC8);
        v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0B10);
        v49 = type metadata accessor for LogMessage(0);
        v50 = swift_allocObject(v48, ((*(unsigned __int8 *)(*(_QWORD *)(v49 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v49 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v49 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v49 - 8) + 80) | 7);
        *(_OWORD *)(v50 + 16) = xmmword_2EA0D0;
        LogMessage.init(stringLiteral:)(0xD00000000000002ELL, 0x800000000030A380);
        Logger.warning(_:)(v50, v47, &protocol witness table for OSLogger);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v45 = 0x656E696665646E75;
        v46 = 0xE900000000000064;
        v33 = v59;
      }
      if (v35 != v45)
        goto LABEL_42;
    }
    else
    {
      v69 = v33;
      v51 = sub_144B4();
      v45 = BinaryInteger.description.getter(&type metadata for UInt64, v51);
      v46 = v52;
      swift_bridgeObjectRelease();
      if (v35 != v45)
        goto LABEL_42;
    }
    if (v37 == v46)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_47:
      swift_bridgeObjectRelease();
      return v56 < v30;
    }
LABEL_42:
    v53 = _stringCompareWithSmolCheck(_:_:expecting:)(v35, v37, v45, v46, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    if ((v53 & 1) != 0)
      goto LABEL_47;
    v54 = v30 + 1;
    v32 = v63;
    if (!__OFADD__(v30, 1))
    {
      v31 += 4;
      ++v30;
      if (v54 == v64)
      {
        swift_bridgeObjectRelease();
        return 1;
      }
      continue;
    }
    break;
  }
  __break(1u);
  return result;
}

uint64_t sub_D0658@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  v3 = *a1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B09E8);
  v5 = sub_32914(&qword_3B79E0, &qword_3B09E8, (uint64_t)&protocol conformance descriptor for [A]);
  v6 = Collection.isNotEmpty.getter(v4, v5);
  if ((v6 & 1) != 0)
  {
    v7 = sub_2456F8(v3);
    sub_D0720(v7, a2);
    return swift_bridgeObjectRelease();
  }
  else
  {
    static PageID.searchFocus.getter(v6);
    v9 = type metadata accessor for ModernPage(0);
    result = static PageMetrics.notInstrumented.getter(v9);
    *(_QWORD *)(a2 + *(int *)(v9 + 24)) = _swiftEmptyArrayStorage;
  }
  return result;
}

uint64_t sub_D0720@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t result;
  __int128 v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;

  v43 = a1;
  v44 = a2;
  v2 = type metadata accessor for ScalarDictionary(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v37 - v7;
  v9 = type metadata accessor for PageMetrics(0);
  v41 = *(_QWORD *)(v9 - 8);
  v42 = v9;
  __chkstk_darwin(v9);
  v38 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for PageID(0);
  v39 = *(_QWORD *)(v11 - 8);
  v40 = v11;
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = static PageID.searchFocus.getter(v12);
  v16 = static MetricsPageID.focus.getter(v15);
  v18 = v17;
  v19 = static MetricsPageType.search.getter();
  v46 = v16;
  v47 = v18;
  v48 = v19;
  v49 = v20;
  v50 = 0;
  v51 = 0;
  v52 = 0;
  ScalarDictionary.init()(v19);
  v21 = sub_C97A8((uint64_t)_swiftEmptyArrayStorage);
  v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B89A0);
  v23 = type metadata accessor for PageMetrics.Instruction(0);
  v24 = swift_allocObject(v22, ((*(unsigned __int8 *)(*(_QWORD *)(v23 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v23 - 8) + 80))+ 2 * *(_QWORD *)(*(_QWORD *)(v23 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v23 - 8) + 80) | 7);
  v37 = xmmword_2EA080;
  *(_OWORD *)(v24 + 16) = xmmword_2EA080;
  v45 = 0;
  PageMetrics.Instruction.init(eventType:)(&v45);
  v45 = 1;
  PageMetrics.Instruction.init(eventType:)(&v45);
  v25 = MetricsPageFields.metricsFields.getter();
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v6, v8, v2);
  v26 = v38;
  PageMetrics.init(instructions:pageFields:custom:clickLocationFields:)(v24, v25, v6, v21);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0A48);
  v28 = *(_QWORD *)(type metadata accessor for ModernShelf(0) - 8);
  v29 = *(_QWORD *)(v28 + 72);
  v30 = *(unsigned __int8 *)(v28 + 80);
  v31 = (v30 + 32) & ~v30;
  v32 = swift_allocObject(v27, v31 + 2 * v29, v30 | 7);
  *(_OWORD *)(v32 + 16) = v37;
  v33 = (uint64_t *)(v32 + v31);
  sub_D0A28(v33);
  sub_D0E5C(v43, (uint64_t *)((char *)v33 + v29));
  v34 = v44;
  (*(void (**)(uint64_t, char *, uint64_t))(v39 + 32))(v44, v14, v40);
  v35 = type metadata accessor for ModernPage(0);
  result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v41 + 32))(v34 + *(int *)(v35 + 20), v26, v42);
  *(_QWORD *)(v34 + *(int *)(v35 + 24)) = v32;
  return result;
}

uint64_t sub_D0A00(uint64_t a1)
{
  return sub_D0E00(a1, 0xD000000000000018, 0x800000000030E0E0, &qword_3B7990, (void **)algn_3B7998);
}

uint64_t sub_D0A28@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *boxed_opaque_existential_2Tm;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  uint64_t result;
  uint64_t v34;
  void (*v35)(char *, uint64_t, uint64_t, uint64_t);
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v2);
  v39 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
  __chkstk_darwin(v4);
  v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0C38);
  __chkstk_darwin(v7);
  v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_3B00C0 != -1)
    swift_once(&qword_3B00C0, sub_D0A00);
  v10 = *(_QWORD *)algn_3B7998;
  v38 = qword_3B7990;
  v11 = type metadata accessor for Header(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v9, 1, 1, v11);
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8750);
  v13 = swift_allocObject(v12, 72, 7);
  *(_OWORD *)(v13 + 16) = xmmword_2EA0D0;
  v14 = type metadata accessor for RecentlySearchedHeader(0);
  *(_QWORD *)(v13 + 56) = v14;
  *(_QWORD *)(v13 + 64) = sub_F1C0(&qword_3B79E8, (void (*)(uint64_t))type metadata accessor for RecentlySearchedHeader, (uint64_t)&protocol conformance descriptor for RecentlySearchedHeader);
  boxed_opaque_existential_2Tm = __swift_allocate_boxed_opaque_existential_2Tm((_QWORD *)(v13 + 32));
  v16 = (char *)boxed_opaque_existential_2Tm + *(int *)(v14 + 20);
  v17 = type metadata accessor for ImpressionMetrics(0);
  v35 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56);
  v35(v16, 1, 1, v17);
  *boxed_opaque_existential_2Tm = 0xD000000000000018;
  boxed_opaque_existential_2Tm[1] = 0x800000000030E0C0;
  v18 = type metadata accessor for URL(0);
  v19 = *(_QWORD *)(v18 - 8);
  v36 = v9;
  v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56);
  v20(v6, 1, 1, v18);
  v42 = 0;
  v40 = 0u;
  v41 = 0u;
  v37 = v6;
  v21 = qword_3B7990;
  v22 = *(_QWORD *)algn_3B7998;
  v23 = swift_bridgeObjectRetain();
  v24 = static MetricsTargetType.swoosh.getter(v23);
  v25 = (uint64_t)v39;
  static ImpressionMetrics.shelf(id:idType:uniqueID:impressionType:name:)(0xD000000000000016, 0x8000000000309720, 0, 0, v21, v22, v24, v26, 0xD000000000000011, 0x800000000030E080);
  swift_bridgeObjectRelease();
  v35((char *)v25, 0, 1, v17);
  v27 = (int *)type metadata accessor for ModernShelf(0);
  v28 = v27[8];
  *((_BYTE *)a1 + v28) = 3;
  v29 = (uint64_t)a1 + v27[9];
  v20((char *)v29, 1, 1, v18);
  *a1 = v38;
  a1[1] = v10;
  sub_15BD4((uint64_t)v36, (uint64_t)a1 + v27[5], &qword_3B0C38);
  v30 = (char *)a1 + v27[6];
  *(_WORD *)v30 = 63;
  *((_WORD *)v30 + 3) = 256;
  *(_DWORD *)(v30 + 2) = 0;
  *((_QWORD *)v30 + 1) = 1;
  *(uint64_t *)((char *)a1 + v27[7]) = v13;
  sub_15B8C((uint64_t)v37, v29);
  *((_BYTE *)a1 + v27[10]) = 1;
  *((_BYTE *)a1 + v27[11]) = 0;
  v31 = (uint64_t)a1 + v27[12];
  if (*((_QWORD *)&v41 + 1))
  {
    sub_F4D8(&v40, v31);
  }
  else
  {
    v32 = (unint64_t)v41;
    *(_OWORD *)v31 = v40;
    *(_OWORD *)(v31 + 16) = v32;
    *(_QWORD *)(v31 + 32) = v42;
  }
  result = sub_15BD4(v25, (uint64_t)a1 + v27[13], (uint64_t *)&unk_3B8790);
  *((_BYTE *)a1 + v28) = 3;
  return result;
}

uint64_t sub_D0DD8(uint64_t a1)
{
  return sub_D0E00(a1, 0xD000000000000011, 0x800000000030E0A0, &qword_3B79A0, (void **)algn_3B79A8);
}

uint64_t sub_D0E00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, void **a5)
{
  uint64_t v7;
  Swift::String v8;
  uint64_t result;

  v7 = ShelfIDBuilder.init(named:)(a2, a3);
  v8 = ShelfIDBuilder.build()();
  result = swift_bridgeObjectRelease(v7);
  *a4 = v8._countAndFlagsBits;
  *a5 = v8._object;
  return result;
}

uint64_t sub_D0E5C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, _QWORD, uint64_t, uint64_t);
  int *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t result;
  uint64_t v30;
  char *v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v4);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
  __chkstk_darwin(v7);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0C38);
  __chkstk_darwin(v10);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_3B00C8 != -1)
    swift_once(&qword_3B00C8, sub_D0DD8);
  v13 = qword_3B79A0;
  v14 = *(_QWORD *)algn_3B79A8;
  v15 = type metadata accessor for Header(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v12, 1, 1, v15);
  v16 = type metadata accessor for URL(0);
  v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56);
  v17(v9, 1, 1, v16);
  v34 = 0;
  v32 = 0u;
  v33 = 0u;
  swift_bridgeObjectRetain();
  v18 = swift_bridgeObjectRetain();
  v19 = static MetricsTargetType.swoosh.getter(v18);
  v30 = a1;
  static ImpressionMetrics.shelf(id:idType:uniqueID:impressionType:name:)(0xD000000000000010, 0x800000000030E060, 0, 0, v13, v14, v19, v20, 0xD000000000000011, 0x800000000030E080);
  swift_bridgeObjectRelease();
  v21 = type metadata accessor for ImpressionMetrics(0);
  v22 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56);
  v31 = v6;
  v22(v6, 0, 1, v21);
  v23 = (int *)type metadata accessor for ModernShelf(0);
  v24 = v23[8];
  *((_BYTE *)a2 + v24) = 3;
  v25 = (uint64_t)a2 + v23[9];
  v17((char *)v25, 1, 1, v16);
  *a2 = v13;
  a2[1] = v14;
  sub_15BD4((uint64_t)v12, (uint64_t)a2 + v23[5], &qword_3B0C38);
  v26 = (char *)a2 + v23[6];
  *(_WORD *)v26 = 58;
  *((_WORD *)v26 + 3) = 256;
  *(_DWORD *)(v26 + 2) = 0;
  *((_QWORD *)v26 + 1) = 1;
  *(uint64_t *)((char *)a2 + v23[7]) = v30;
  sub_15B8C((uint64_t)v9, v25);
  *((_BYTE *)a2 + v23[10]) = 1;
  *((_BYTE *)a2 + v23[11]) = 0;
  v27 = (uint64_t)a2 + v23[12];
  if (*((_QWORD *)&v33 + 1))
  {
    sub_F4D8(&v32, v27);
  }
  else
  {
    v28 = (unint64_t)v33;
    *(_OWORD *)v27 = v32;
    *(_OWORD *)(v27 + 16) = v28;
    *(_QWORD *)(v27 + 32) = v34;
  }
  result = sub_15BD4((uint64_t)v31, (uint64_t)a2 + v23[13], (uint64_t *)&unk_3B8790);
  *((_BYTE *)a2 + v24) = 3;
  return result;
}

uint64_t sub_D1168(uint64_t a1)
{
  uint64_t v1;

  return sub_CF0AC(a1, *(_QWORD **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_D1170(uint64_t a1)
{
  uint64_t v1;

  return sub_CF1A0(a1, *(_QWORD **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_D1178(uint64_t a1)
{
  uint64_t v1;

  return sub_CF294(a1, *(_QWORD **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_D1180(uint64_t a1)
{
  uint64_t v1;

  return sub_CF3C4(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_D1188(uint64_t a1)
{
  uint64_t v1;

  return sub_CF4A4(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_D1190(uint64_t a1)
{
  uint64_t v1;

  return sub_CF548(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_D1198()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

unint64_t sub_D11C4(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  return sub_CF6DC(a1, a2, a3, a4, a5, a6, *(_QWORD *)(v6 + 16), *(_QWORD *)(v6 + 24));
}

uint64_t sub_D11CC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_D11F0@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(v2 + 16))(*a1, a1[1], a1[2], a1[3], a1[4], a1[5]);
  *a2 = result;
  return result;
}

uint64_t sub_D1228(uint64_t *a1, uint64_t *__src, unint64_t a3, uint64_t *__dst, uint64_t a5)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;
  uint64_t *v36;
  uint64_t result;
  uint64_t *v38;
  uint64_t *__srca;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t *v45;

  v6 = __dst;
  v8 = __src;
  v9 = (char *)__src - (char *)a1;
  v10 = (char *)__src - (char *)a1 + 7;
  if ((char *)__src - (char *)a1 >= 0)
    v10 = (char *)__src - (char *)a1;
  v11 = v10 >> 3;
  v12 = a3 - (_QWORD)__src;
  v13 = a3 - (_QWORD)__src + 7;
  if ((uint64_t)(a3 - (_QWORD)__src) >= 0)
    v13 = a3 - (_QWORD)__src;
  v14 = v13 >> 3;
  v45 = a1;
  v44 = __dst;
  __srca = a1;
  if (v11 >= v13 >> 3)
  {
    if (v12 >= -7)
    {
      v24 = v5;
      if (__dst != __src || &__src[v14] <= __dst)
      {
        memmove(__dst, __src, 8 * v14);
        a1 = __srca;
      }
      v25 = &v6[v14];
      v43 = v25;
      v45 = v8;
      if (a1 < v8 && v12 >= 8)
      {
        v26 = (uint64_t *)(a3 - 8);
        v27 = v8;
        v38 = v6;
        while (1)
        {
          v29 = (unint64_t)v25;
          v31 = v25 - 1;
          v30 = *(v25 - 1);
          v42 = v30;
          v33 = *--v27;
          v32 = v33;
          v41 = v33;
          swift_retain(v30);
          swift_retain(v33);
          v34 = sub_CFEFC(&v42, &v41, a5);
          if (v24)
            break;
          v35 = v34;
          v36 = v26 + 1;
          swift_release(v30);
          swift_release(v32);
          if ((v35 & 1) != 0)
          {
            if (v36 != v8 || v26 >= v8)
              *v26 = *v27;
            v45 = v27;
            v24 = 0;
            v28 = v38;
            v25 = (uint64_t *)v29;
            if (v27 <= __srca)
              goto LABEL_49;
          }
          else
          {
            v43 = v31;
            if ((unint64_t)v36 < v29 || (unint64_t)v26 >= v29 || v36 != (uint64_t *)v29)
              *v26 = *v31;
            v27 = v8;
            v25 = v31;
            v24 = 0;
            v28 = v38;
            if (v8 <= __srca)
              goto LABEL_49;
          }
          --v26;
          v8 = v27;
          if (v25 <= v28)
            goto LABEL_49;
        }
        swift_release(v30);
        swift_release(v32);
      }
      goto LABEL_49;
    }
  }
  else if (v9 >= -7)
  {
    if (__dst != a1 || &a1[v11] <= __dst)
    {
      memmove(__dst, a1, 8 * v11);
      a1 = __srca;
    }
    v15 = &v6[v11];
    v43 = v15;
    if ((unint64_t)v8 < a3 && v9 >= 8)
    {
      while (1)
      {
        v16 = a1;
        v17 = *v8;
        v42 = v17;
        v18 = v6;
        v41 = *v6;
        v19 = v41;
        swift_retain(v17);
        swift_retain(v19);
        v20 = sub_CFEFC(&v42, &v41, a5);
        if (v5)
          break;
        v21 = v20;
        swift_release(v17);
        swift_release(v19);
        if ((v21 & 1) != 0)
        {
          v22 = v8 + 1;
          v23 = v16;
          if (v16 < v8 || v16 >= v22 || v16 != v8)
            *v16 = *v8;
          v6 = v18;
        }
        else
        {
          v23 = v16;
          if (v16 != v18)
            *v16 = *v18;
          v6 = v18 + 1;
          v44 = v18 + 1;
          v22 = v8;
        }
        a1 = v23 + 1;
        v45 = a1;
        if (v6 < v15)
        {
          v8 = v22;
          if ((unint64_t)v22 < a3)
            continue;
        }
        goto LABEL_49;
      }
      swift_release(v17);
      swift_release(v19);
    }
LABEL_49:
    sub_24B578((void **)&v45, (const void **)&v44, &v43);
    swift_bridgeObjectRelease();
    return 1;
  }
  swift_bridgeObjectRelease();
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

_QWORD *sub_D15C0@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;

  result = sub_CEEF0(*a1, a1[1], &qword_3B7AA8, (uint64_t (*)(BOOL, uint64_t, uint64_t, _QWORD *))sub_11040, (void (*)(uint64_t))sub_1E3E74);
  *a2 = result;
  return result;
}

_QWORD *sub_D1604@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;

  result = sub_CEEF0(*a1, a1[1], &qword_3B7B08, (uint64_t (*)(BOOL, uint64_t, uint64_t, _QWORD *))sub_11054, (void (*)(uint64_t))sub_1E3E80);
  *a2 = result;
  return result;
}

_QWORD *sub_D1648@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;

  result = sub_CEEF0(*a1, a1[1], &qword_3B7B68, (uint64_t (*)(BOOL, uint64_t, uint64_t, _QWORD *))sub_11068, (void (*)(uint64_t))sub_1E3E8C);
  *a2 = result;
  return result;
}

_QWORD *sub_D168C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;

  result = sub_CEEF0(*a1, a1[1], &qword_3B7BB8, (uint64_t (*)(BOOL, uint64_t, uint64_t, _QWORD *))sub_1107C, (void (*)(uint64_t))sub_1E3E98);
  *a2 = result;
  return result;
}

_QWORD *sub_D16D0@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;

  result = sub_CEEF0(*a1, a1[1], &qword_3B7C20, (uint64_t (*)(BOOL, uint64_t, uint64_t, _QWORD *))sub_11090, (void (*)(uint64_t))sub_1E3EA4);
  *a2 = result;
  return result;
}

uint64_t sub_D1714(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;

  v2 = *(_QWORD *)(result + 16);
  if (v2)
  {
    v4 = 0;
    v16 = (uint64_t *)(a2 + 40);
    v17 = result + 32;
    do
    {
      if (v4 <= v2)
        v5 = v2;
      else
        v5 = v4;
      while (1)
      {
        if (v4 == v5)
        {
          __break(1u);
          return result;
        }
        v6 = (uint64_t *)(v17 + 16 * v4);
        v7 = *v6;
        v8 = v6[1];
        ++v4;
        v9 = *(_QWORD *)(a2 + 16);
        if (!v9)
          break;
        v10 = v16;
        while (1)
        {
          result = *(v10 - 1);
          v11 = *v10;
          if (result == v7 && v11 == v8)
            break;
          result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v11, v7, v8, 0);
          if ((result & 1) != 0)
            break;
          v10 += 2;
          if (!--v9)
            goto LABEL_16;
        }
        if (v4 == v2)
          return (uint64_t)_swiftEmptyArrayStorage;
      }
LABEL_16:
      swift_bridgeObjectRetain(v8);
      result = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage);
      if ((result & 1) == 0)
        result = sub_1807B0(0, _swiftEmptyArrayStorage[2] + 1, 1);
      v14 = _swiftEmptyArrayStorage[2];
      v13 = _swiftEmptyArrayStorage[3];
      if (v14 >= v13 >> 1)
        result = sub_1807B0(v13 > 1, v14 + 1, 1);
      _swiftEmptyArrayStorage[2] = v14 + 1;
      v15 = &_swiftEmptyArrayStorage[2 * v14];
      v15[4] = v7;
      v15[5] = v8;
    }
    while (v4 != v2);
  }
  return (uint64_t)_swiftEmptyArrayStorage;
}

_QWORD *sub_D1874(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t *i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;

  result = _swiftEmptyArrayStorage;
  v19 = (unint64_t)_swiftEmptyArrayStorage;
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    v5 = *(_QWORD *)(a2 + 16);
    swift_bridgeObjectRetain(a1);
    for (i = (uint64_t *)(a1 + 40); ; i += 2)
    {
      v8 = *(i - 1);
      v7 = *i;
      swift_bridgeObjectRetain(*i);
      v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7AB0);
      OSAllocatedUnfairLock.current.getter(&v18, v5, v9);
      v10 = v18;
      if (*(_QWORD *)(v18 + 16))
      {
        swift_bridgeObjectRetain(v7);
        v11 = sub_29724(v8, v7);
        if ((v12 & 1) != 0)
        {
          v13 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v11);
          swift_retain(v13);
          swift_bridgeObjectRelease_n(v7, 2);
          v14 = swift_bridgeObjectRelease();
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v14);
          v16 = *(_QWORD *)((char *)&dword_10 + (v19 & 0xFFFFFFFFFFFFFF8));
          v15 = *(_QWORD *)((char *)&dword_18 + (v19 & 0xFFFFFFFFFFFFFF8));
          if (v16 >= v15 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
          v17 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v16, v13);
          specialized Array._endMutation()(v17);
          goto LABEL_5;
        }
        swift_bridgeObjectRelease_n(v7, 2);
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
LABEL_5:
      if (!--v4)
      {
        swift_bridgeObjectRelease();
        return (_QWORD *)v19;
      }
    }
  }
  return result;
}

_QWORD *sub_D19E8(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v7;
  uint64_t *i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;

  result = _swiftEmptyArrayStorage;
  v23 = (unint64_t)_swiftEmptyArrayStorage;
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    v7 = *(_QWORD *)(a2 + 16);
    swift_bridgeObjectRetain(a1);
    for (i = (uint64_t *)(a1 + 40); ; i += 2)
    {
      v10 = *(i - 1);
      v9 = *i;
      swift_bridgeObjectRetain(*i);
      v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7AB0);
      OSAllocatedUnfairLock.current.getter(&v22, v7, v11);
      v12 = v22;
      if (*(_QWORD *)(v22 + 16))
      {
        swift_bridgeObjectRetain(v9);
        v13 = sub_29724(v10, v9);
        if ((v14 & 1) != 0)
        {
          v15 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v13);
          swift_retain(v15);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v16 = a3(0);
          v17 = swift_dynamicCastClass(v15, v16);
          v18 = swift_bridgeObjectRelease();
          if (v17)
          {
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v18);
            v20 = *(_QWORD *)((char *)&dword_10 + (v23 & 0xFFFFFFFFFFFFFF8));
            v19 = *(_QWORD *)((char *)&dword_18 + (v23 & 0xFFFFFFFFFFFFFF8));
            if (v20 >= v19 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
            v21 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v20, v17);
            specialized Array._endMutation()(v21);
          }
          else
          {
            swift_release(v15);
          }
          goto LABEL_5;
        }
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      if (!--v5)
      {
        swift_bridgeObjectRelease();
        return (_QWORD *)v23;
      }
    }
  }
  return result;
}

_QWORD *sub_D1B88(unint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;

  v2 = a1;
  if (a1 >> 62)
    goto LABEL_15;
  v3 = *(_QWORD *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8));
  while (1)
  {
    if (!v3)
      return _swiftEmptyArrayStorage;
    result = (_QWORD *)sub_1807B0(0, v3 & ~(v3 >> 63), 0);
    if (v3 < 0)
      break;
    v5 = 0;
    v15 = v2 & 0xC000000000000001;
    v6 = v2;
    while (v3 != v5)
    {
      if (v15)
      {
        v7 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v2);
      }
      else
      {
        v7 = *(_QWORD *)(v2 + 8 * v5 + 32);
        swift_retain(v7);
      }
      v8 = a2(v7);
      v10 = v9;
      swift_release(v7);
      v12 = _swiftEmptyArrayStorage[2];
      v11 = _swiftEmptyArrayStorage[3];
      if (v12 >= v11 >> 1)
        sub_1807B0(v11 > 1, v12 + 1, 1);
      ++v5;
      _swiftEmptyArrayStorage[2] = v12 + 1;
      v13 = &_swiftEmptyArrayStorage[2 * v12];
      v13[4] = v8;
      v13[5] = v10;
      v2 = v6;
      if (v3 == v5)
        return _swiftEmptyArrayStorage;
    }
    __break(1u);
LABEL_15:
    if (v2 < 0)
      v14 = v2;
    else
      v14 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v2);
    v3 = _CocoaArrayWrapper.endIndex.getter(v14);
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t sub_D1D04(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;

  if (a3 != a2)
  {
    v7 = a3;
    v8 = result;
    v9 = *a4;
    v10 = (uint64_t *)(*a4 + 8 * a3 - 8);
    v15 = result;
LABEL_4:
    v11 = *(_QWORD *)(v9 + 8 * v7);
    v17 = v10;
    while (1)
    {
      v19 = v11;
      v18 = *v10;
      v12 = v18;
      swift_retain(v11);
      swift_retain(v12);
      v13 = sub_CFEFC(&v19, &v18, a5);
      swift_release(v11);
      result = swift_release(v12);
      if (v5)
        break;
      if ((v13 & 1) != 0)
      {
        if (!v9)
        {
          __break(1u);
          return result;
        }
        v14 = *v10;
        v11 = v10[1];
        *v10 = v11;
        v10[1] = v14;
        --v10;
        if (v7 != ++v8)
          continue;
      }
      ++v7;
      v10 = v17 + 1;
      v8 = v15;
      if (v7 != a2)
        goto LABEL_4;
      return result;
    }
  }
  return result;
}

uint64_t sub_D1E04(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  char *v12;
  Swift::Int v13;
  uint64_t v14;
  Swift::Int v15;
  Swift::Int v16;
  Swift::Int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  Swift::Int v22;
  char *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t *v28;
  Swift::Int v29;
  Swift::Int v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  char v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  Swift::Int v89;
  uint64_t v90;
  Swift::Int v91;
  uint64_t *v92;
  uint64_t v93;
  char v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  unint64_t v104;
  char *v105;
  char *v106;
  char *v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  Swift::Int v113;
  Swift::Int v114;
  Swift::Int v115;
  char *v116;
  uint64_t v117;
  uint64_t *__dst;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  int v122[2];
  int v123[2];
  uint64_t *v124;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;

  v3 = v2;
  v5 = a1[1];
  swift_bridgeObjectRetain_n(a2, 3);
  v6 = _minimumMergeRunLength(_:)(v5);
  if (v6 >= v5)
  {
    if (v5 < 0)
      goto LABEL_138;
    if (!v5)
      return swift_bridgeObjectRelease_n(a2, 3);
    swift_bridgeObjectRetain(a2);
    sub_D1D04(0, v5, 1, a1, a2);
    return swift_bridgeObjectRelease_n(a2, 4);
  }
  if (v5 >= 0)
    v7 = v5;
  else
    v7 = v5 + 1;
  if (v5 < -1)
    goto LABEL_147;
  v113 = v6;
  v111 = a1;
  if (v5 < 2)
  {
    v12 = (char *)_swiftEmptyArrayStorage;
    v128 = (uint64_t)_swiftEmptyArrayStorage;
    __dst = (uint64_t *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 32);
    if (v5 != 1)
    {
      v36 = _swiftEmptyArrayStorage[2];
      goto LABEL_102;
    }
  }
  else
  {
    v8 = v7 >> 1;
    v9 = type metadata accessor for LegacyLockup(0);
    v10 = static Array._allocateBufferUninitialized(minimumCapacity:)(v8, v9);
    *(_QWORD *)((char *)&dword_10 + (v10 & 0xFFFFFFFFFFFFFF8)) = v8;
    __dst = (uint64_t *)((v10 & 0xFFFFFFFFFFFFFF8) + 32);
    v128 = v10;
  }
  v13 = 0;
  v14 = *a1;
  v112 = *a1 + 16;
  v110 = *a1 - 8;
  v12 = (char *)_swiftEmptyArrayStorage;
  v15 = v5;
  v115 = v5;
  v117 = *a1;
  while (1)
  {
    v16 = v13;
    v17 = v13 + 1;
    if (v13 + 1 < v15)
    {
      v18 = *(_QWORD *)(v14 + 8 * v17);
      v126 = *(_QWORD *)(v14 + 8 * v13);
      v19 = v126;
      v127 = v18;
      swift_retain(v18);
      swift_retain(v19);
      v20 = sub_CFEFC(&v127, &v126, a2);
      if (v3)
      {
        swift_bridgeObjectRelease();
        swift_release(v18);
        v109 = swift_release(v19);
LABEL_116:
        *(_QWORD *)((char *)&dword_10 + (v128 & 0xFFFFFFFFFFFFF8)) = 0;
        specialized Array._endMutation()(v109);
        swift_bridgeObjectRelease_n(a2, 3);
        return swift_bridgeObjectRelease();
      }
      v21 = v20;
      swift_release(v18);
      swift_release(v19);
      v22 = v16 + 2;
      if (v16 + 2 < v115)
      {
        v23 = v12;
        v24 = (uint64_t *)(v112 + 8 * v16);
        while (1)
        {
          v25 = *v24;
          v126 = *(v24 - 1);
          v26 = v126;
          v127 = v25;
          swift_retain(v25);
          swift_retain(v26);
          v27 = sub_CFEFC(&v127, &v126, a2);
          swift_release(v25);
          swift_release(v26);
          if (((v21 ^ v27) & 1) != 0)
            break;
          ++v24;
          if (v115 == ++v22)
          {
            v22 = v115;
            break;
          }
        }
        v12 = v23;
        v14 = v117;
      }
      if ((v21 & 1) != 0)
      {
        if (v22 < v16)
          goto LABEL_142;
        v17 = v22;
        v15 = v115;
        if (v16 < v22)
        {
          v28 = (uint64_t *)(v110 + 8 * v22);
          v29 = v22;
          v30 = v16;
          v31 = (uint64_t *)(v14 + 8 * v16);
          do
          {
            if (v30 != --v29)
            {
              if (!v14)
                goto LABEL_145;
              v32 = *v31;
              *v31 = *v28;
              *v28 = v32;
            }
            ++v30;
            --v28;
            ++v31;
          }
          while (v30 < v29);
        }
      }
      else
      {
        v15 = v115;
        v17 = v22;
      }
    }
    if (v17 >= v15)
      goto LABEL_40;
    if (__OFSUB__(v17, v16))
      goto LABEL_139;
    if (v17 - v16 >= v113)
    {
LABEL_40:
      if (v17 < v16)
        goto LABEL_137;
      goto LABEL_41;
    }
    if (__OFADD__(v16, v113))
      goto LABEL_140;
    v33 = v16 + v113 >= v15 ? v15 : v16 + v113;
    if (v33 < v16)
      break;
    if (v17 == v33)
      goto LABEL_40;
    v120 = v33;
    *(_QWORD *)v123 = v16;
    v86 = v14;
    v116 = v12;
    v87 = v3;
    v88 = (uint64_t *)(v110 + 8 * v17);
    do
    {
      v89 = v17;
      v90 = *(_QWORD *)(v86 + 8 * v17);
      v91 = *(_QWORD *)v123;
      v92 = v88;
      do
      {
        v126 = *v92;
        v93 = v126;
        v127 = v90;
        swift_retain(v90);
        swift_retain(v93);
        v94 = sub_CFEFC(&v127, &v126, a2);
        if (v87)
        {
          swift_bridgeObjectRelease();
          swift_release(v90);
          v109 = swift_release(v93);
          goto LABEL_116;
        }
        v95 = v94;
        swift_release(v90);
        swift_release(v93);
        if ((v95 & 1) == 0)
          break;
        if (!v86)
          goto LABEL_144;
        v96 = *v92;
        v90 = v92[1];
        *v92 = v90;
        v92[1] = v96;
        --v92;
        ++v91;
      }
      while (v89 != v91);
      v17 = v89 + 1;
      ++v88;
    }
    while (v89 + 1 != v120);
    v17 = v120;
    v3 = 0;
    v12 = v116;
    v14 = v86;
    v16 = *(_QWORD *)v123;
    if (v120 < *(uint64_t *)v123)
      goto LABEL_137;
LABEL_41:
    v114 = v17;
    if ((swift_isUniquelyReferenced_nonNull_native(v12) & 1) == 0)
      v12 = sub_24B480(0, *((_QWORD *)v12 + 2) + 1, 1, v12);
    v35 = *((_QWORD *)v12 + 2);
    v34 = *((_QWORD *)v12 + 3);
    v36 = v35 + 1;
    *(_QWORD *)v122 = v3;
    if (v35 >= v34 >> 1)
      v12 = sub_24B480((char *)(v34 > 1), v35 + 1, 1, v12);
    *((_QWORD *)v12 + 2) = v36;
    v37 = v12 + 32;
    v38 = &v12[16 * v35 + 32];
    *(_QWORD *)v38 = v16;
    *((_QWORD *)v38 + 1) = v17;
    if (v35)
    {
LABEL_46:
      v39 = v36 - 1;
      if (v36 >= 4)
      {
        v44 = &v37[16 * v36];
        v45 = *((_QWORD *)v44 - 8);
        v46 = *((_QWORD *)v44 - 7);
        v50 = __OFSUB__(v46, v45);
        v47 = v46 - v45;
        if (v50)
          goto LABEL_122;
        v49 = *((_QWORD *)v44 - 6);
        v48 = *((_QWORD *)v44 - 5);
        v50 = __OFSUB__(v48, v49);
        v42 = v48 - v49;
        v43 = v50;
        if (v50)
          goto LABEL_123;
        v51 = v36 - 2;
        v52 = &v37[16 * v36 - 32];
        v54 = *(_QWORD *)v52;
        v53 = *((_QWORD *)v52 + 1);
        v50 = __OFSUB__(v53, v54);
        v55 = v53 - v54;
        if (v50)
          goto LABEL_125;
        v50 = __OFADD__(v42, v55);
        v56 = v42 + v55;
        if (v50)
          goto LABEL_128;
        if (v56 >= v47)
        {
          v74 = &v37[16 * v39];
          v76 = *(_QWORD *)v74;
          v75 = *((_QWORD *)v74 + 1);
          v50 = __OFSUB__(v75, v76);
          v77 = v75 - v76;
          if (v50)
            goto LABEL_132;
          v67 = v42 < v77;
        }
        else
        {
LABEL_59:
          if ((v43 & 1) != 0)
            goto LABEL_124;
          v51 = v36 - 2;
          v57 = &v37[16 * v36 - 32];
          v59 = *(_QWORD *)v57;
          v58 = *((_QWORD *)v57 + 1);
          v60 = __OFSUB__(v58, v59);
          v61 = v58 - v59;
          v62 = v60;
          if (v60)
            goto LABEL_127;
          v63 = &v37[16 * v39];
          v65 = *(_QWORD *)v63;
          v64 = *((_QWORD *)v63 + 1);
          v50 = __OFSUB__(v64, v65);
          v66 = v64 - v65;
          if (v50)
            goto LABEL_130;
          if (__OFADD__(v61, v66))
            goto LABEL_131;
          if (v61 + v66 < v42)
            goto LABEL_71;
          v67 = v42 < v66;
        }
        if (v67)
          v39 = v51;
      }
      else
      {
        if (v36 == 3)
        {
          v41 = *((_QWORD *)v12 + 4);
          v40 = *((_QWORD *)v12 + 5);
          v50 = __OFSUB__(v40, v41);
          v42 = v40 - v41;
          v43 = v50;
          goto LABEL_59;
        }
        v68 = *((_QWORD *)v12 + 4);
        v69 = *((_QWORD *)v12 + 5);
        v50 = __OFSUB__(v69, v68);
        v61 = v69 - v68;
        v62 = v50;
LABEL_71:
        if ((v62 & 1) != 0)
          goto LABEL_126;
        v70 = &v37[16 * v39];
        v72 = *(_QWORD *)v70;
        v71 = *((_QWORD *)v70 + 1);
        v50 = __OFSUB__(v71, v72);
        v73 = v71 - v72;
        if (v50)
          goto LABEL_129;
        if (v73 < v61)
          goto LABEL_88;
      }
      v78 = v39 - 1;
      if (v39 - 1 >= v36)
      {
        __break(1u);
LABEL_119:
        __break(1u);
LABEL_120:
        __break(1u);
LABEL_121:
        __break(1u);
LABEL_122:
        __break(1u);
LABEL_123:
        __break(1u);
LABEL_124:
        __break(1u);
LABEL_125:
        __break(1u);
LABEL_126:
        __break(1u);
LABEL_127:
        __break(1u);
LABEL_128:
        __break(1u);
LABEL_129:
        __break(1u);
LABEL_130:
        __break(1u);
LABEL_131:
        __break(1u);
LABEL_132:
        __break(1u);
LABEL_133:
        __break(1u);
LABEL_134:
        __break(1u);
LABEL_135:
        __break(1u);
LABEL_136:
        __break(1u);
LABEL_137:
        __break(1u);
LABEL_138:
        __break(1u);
LABEL_139:
        __break(1u);
LABEL_140:
        __break(1u);
        break;
      }
      if (!v14)
        goto LABEL_143;
      v79 = &v37[16 * v78];
      v80 = *(_QWORD *)v79;
      v81 = v39;
      v82 = &v37[16 * v39];
      v83 = *((_QWORD *)v82 + 1);
      v84 = (uint64_t *)(v14 + 8 * *(_QWORD *)v79);
      v119 = (uint64_t *)(v14 + 8 * *(_QWORD *)v82);
      swift_bridgeObjectRetain(a2);
      sub_D1228(v84, v119, v14 + 8 * v83, __dst, a2);
      if (*(_QWORD *)v122)
        goto LABEL_115;
      if (v83 < v80)
        goto LABEL_119;
      if (v81 > *((_QWORD *)v12 + 2))
        goto LABEL_120;
      *(_QWORD *)v79 = v80;
      v37 = v12 + 32;
      *(_QWORD *)&v12[16 * v78 + 40] = v83;
      v85 = *((_QWORD *)v12 + 2);
      if (v81 >= v85)
        goto LABEL_121;
      v36 = v85 - 1;
      memmove(v82, v82 + 16, 16 * (v85 - 1 - v81));
      *((_QWORD *)v12 + 2) = v85 - 1;
      v14 = v117;
      if (v85 <= 2)
        goto LABEL_88;
      goto LABEL_46;
    }
    v36 = 1;
LABEL_88:
    v13 = v114;
    v15 = v115;
    v3 = *(_QWORD *)v122;
    if (v114 >= v115)
    {
LABEL_102:
      if (v36 >= 2)
      {
        v97 = *v111;
        v121 = *v111;
        do
        {
          v98 = v36 - 2;
          if (v36 < 2)
            goto LABEL_133;
          if (!v97)
            goto LABEL_146;
          v99 = v12;
          v100 = v12 + 32;
          v101 = *(_QWORD *)&v12[16 * v98 + 32];
          v102 = *(_QWORD *)&v100[16 * v36 - 8];
          v124 = (uint64_t *)(v97 + 8 * v101);
          v103 = (uint64_t *)(v97 + 8 * *(_QWORD *)&v100[16 * v36 - 16]);
          v104 = v97 + 8 * v102;
          swift_bridgeObjectRetain(a2);
          sub_D1228(v124, v103, v104, __dst, a2);
          if (v3)
            break;
          if (v102 < v101)
            goto LABEL_134;
          if ((swift_isUniquelyReferenced_nonNull_native(v99) & 1) == 0)
            v99 = sub_24B7BC((uint64_t)v99);
          if (v98 >= *((_QWORD *)v99 + 2))
            goto LABEL_135;
          v105 = v99;
          v106 = v99 + 32;
          v107 = &v99[16 * v98 + 32];
          *(_QWORD *)v107 = v101;
          *((_QWORD *)v107 + 1) = v102;
          v108 = *((_QWORD *)v99 + 2);
          if (v36 > v108)
            goto LABEL_136;
          v12 = v105;
          memmove(&v106[16 * v36 - 16], &v106[16 * v36], 16 * (v108 - v36));
          *((_QWORD *)v12 + 2) = v108 - 1;
          v36 = v108 - 1;
          v97 = v121;
        }
        while (v108 > 2);
      }
LABEL_115:
      v109 = swift_bridgeObjectRelease();
      goto LABEL_116;
    }
  }
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  swift_bridgeObjectRelease_n(a2, 3);
  __break(1u);
LABEL_144:
  swift_bridgeObjectRelease_n(a2, 3);
  __break(1u);
LABEL_145:
  swift_bridgeObjectRelease_n(a2, 3);
  __break(1u);
LABEL_146:
  swift_bridgeObjectRelease_n(a2, 3);
  __break(1u);
LABEL_147:
  swift_bridgeObjectRelease_n(a2, 4);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
  return result;
}

uint64_t sub_D26B8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9[2];

  v4 = *a1;
  swift_bridgeObjectRetain_n(a2, 2);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v4);
  *a1 = v4;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v4 = sub_24B7D0(v4);
    *a1 = v4;
  }
  v6 = *(_QWORD *)(v4 + 16);
  v9[0] = v4 + 32;
  v9[1] = v6;
  swift_bridgeObjectRetain(a2);
  sub_D1E04(v9, a2);
  v7 = swift_bridgeObjectRelease();
  specialized ContiguousArray._endMutation()(v7);
  return swift_bridgeObjectRelease_n(a2, 2);
}

unint64_t sub_D2760()
{
  unint64_t result;

  result = qword_3B7B70;
  if (!qword_3B7B70)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for FetchSearchChannelLockupsIntent);
    atomic_store(result, (unint64_t *)&qword_3B7B70);
  }
  return result;
}

unint64_t sub_D27A4()
{
  unint64_t result;

  result = qword_3B7BC0;
  if (!qword_3B7BC0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for FetchSearchShowLockupsIntent);
    atomic_store(result, (unint64_t *)&qword_3B7BC0);
  }
  return result;
}

unint64_t sub_D27E8()
{
  unint64_t result;

  result = qword_3B7C28;
  if (!qword_3B7C28)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for FetchSearchEpisodeLockupsIntent);
    atomic_store(result, (unint64_t *)&qword_3B7C28);
  }
  return result;
}

uint64_t Showcase.shelfUniqueId.getter()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  swift_beginAccess(v0 + 16, v3, 0, 0);
  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 24));
  return v1;
}

uint64_t Showcase.shelfUniqueId.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  _BYTE v7[24];

  swift_beginAccess(v2 + 16, v7, 1, 0);
  v5 = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_bridgeObjectRelease(v5);
}

uint64_t EditorialCard.artwork.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_267BC(v1 + OBJC_IVAR____TtC8ShelfKit13EditorialCard_artwork, a1, &qword_3BEB70);
}

uint64_t EditorialCard.clickAction.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_267BC(v1 + OBJC_IVAR____TtC8ShelfKit13EditorialCard_clickAction, a1, &qword_3B0C50);
}

uint64_t EditorialCard.impressionMetrics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_267BC(v1 + OBJC_IVAR____TtC8ShelfKit13EditorialCard_impressionMetrics, a1, (uint64_t *)&unk_3B8790);
}

_QWORD *EditorialCard.__allocating_init(caption:title:subtitle:artwork:clickAction:impressionMetrics:shelfUniqueId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  _QWORD *v20;

  v20 = (_QWORD *)swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
  v20[4] = a1;
  v20[5] = a2;
  v20[6] = a3;
  v20[7] = a4;
  v20[8] = a5;
  v20[9] = a6;
  sub_15BD4(a7, (uint64_t)v20 + OBJC_IVAR____TtC8ShelfKit13EditorialCard_artwork, &qword_3BEB70);
  sub_15BD4(a8, (uint64_t)v20 + OBJC_IVAR____TtC8ShelfKit13EditorialCard_clickAction, &qword_3B0C50);
  sub_15BD4(a9, (uint64_t)v20 + OBJC_IVAR____TtC8ShelfKit13EditorialCard_impressionMetrics, (uint64_t *)&unk_3B8790);
  v20[2] = a10;
  v20[3] = a11;
  return v20;
}

_QWORD *EditorialCard.init(caption:title:subtitle:artwork:clickAction:impressionMetrics:shelfUniqueId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  _QWORD *v11;

  v11[4] = a1;
  v11[5] = a2;
  v11[6] = a3;
  v11[7] = a4;
  v11[8] = a5;
  v11[9] = a6;
  sub_15BD4(a7, (uint64_t)v11 + OBJC_IVAR____TtC8ShelfKit13EditorialCard_artwork, &qword_3BEB70);
  sub_15BD4(a8, (uint64_t)v11 + OBJC_IVAR____TtC8ShelfKit13EditorialCard_clickAction, &qword_3B0C50);
  sub_15BD4(a9, (uint64_t)v11 + OBJC_IVAR____TtC8ShelfKit13EditorialCard_impressionMetrics, (uint64_t *)&unk_3B8790);
  v11[2] = a10;
  v11[3] = a11;
  return v11;
}

_QWORD *EditorialCard.__allocating_init(deserializing:using:)(char *a1, uint64_t a2)
{
  return sub_D2DE0(a1, a2);
}

uint64_t EditorialCard.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1459C(v0 + OBJC_IVAR____TtC8ShelfKit13EditorialCard_artwork, &qword_3BEB70);
  sub_1459C(v0 + OBJC_IVAR____TtC8ShelfKit13EditorialCard_clickAction, &qword_3B0C50);
  sub_1459C(v0 + OBJC_IVAR____TtC8ShelfKit13EditorialCard_impressionMetrics, (uint64_t *)&unk_3B8790);
  return v0;
}

uint64_t EditorialCard.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1459C(v0 + OBJC_IVAR____TtC8ShelfKit13EditorialCard_artwork, &qword_3BEB70);
  sub_1459C(v0 + OBJC_IVAR____TtC8ShelfKit13EditorialCard_clickAction, &qword_3B0C50);
  sub_1459C(v0 + OBJC_IVAR____TtC8ShelfKit13EditorialCard_impressionMetrics, (uint64_t *)&unk_3B8790);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

_QWORD *sub_D2BF4@<X0>(char *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  _QWORD *result;

  result = sub_D2DE0(a1, a2);
  if (!v3)
    *a3 = result;
  return result;
}

uint64_t sub_D2C1C@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return sub_267BC(*v1 + OBJC_IVAR____TtC8ShelfKit13EditorialCard_artwork, a1, &qword_3BEB70);
}

uint64_t sub_D2C4C@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return sub_267BC(*v1 + OBJC_IVAR____TtC8ShelfKit13EditorialCard_clickAction, a1, &qword_3B0C50);
}

uint64_t sub_D2C7C@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return sub_267BC(*v1 + OBJC_IVAR____TtC8ShelfKit13EditorialCard_impressionMetrics, a1, (uint64_t *)&unk_3B8790);
}

uint64_t sub_D2CAC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[24];

  v1 = *v0;
  swift_beginAccess(v1 + 16, v4, 0, 0);
  v2 = *(_QWORD *)(v1 + 16);
  swift_bridgeObjectRetain(*(_QWORD *)(v1 + 24));
  return v2;
}

uint64_t Showcase.displayCaption.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD v10[2];

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7C40);
  __chkstk_darwin(v1);
  v3 = (char *)v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(v0 + 32);
  v4 = *(_QWORD *)(v0 + 40);
  if (v4)
  {
    v10[0] = *(_QWORD *)(v0 + 32);
    v10[1] = v4;
    v6 = swift_bridgeObjectRetain();
    static Locale.current.getter(v6);
    v7 = type metadata accessor for Locale(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v3, 0, 1, v7);
    v8 = sub_65CC4();
    v5 = StringProtocol.uppercased(with:)(v3, &type metadata for String, v8);
    sub_1459C((uint64_t)v3, &qword_3B7C40);
    swift_bridgeObjectRelease();
  }
  return v5;
}

_QWORD *sub_D2DE0(char *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t Instance15byDeserializing5usingACSg9JetEngine10JSONObjectV_AH11JSONContextVtFZ_0;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;

  v60 = a2;
  v3 = type metadata accessor for UUID(0);
  v66 = *(_QWORD *)(v3 - 8);
  v67 = v3;
  __chkstk_darwin(v3);
  v65 = (char *)&v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v5);
  v68 = (char *)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for JSONContext(0);
  v69 = *(_QWORD *)(v7 - 8);
  v70 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
  __chkstk_darwin(v10);
  v74 = (uint64_t)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for JSONObject(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v56 - v18;
  v20 = __chkstk_darwin(v17);
  v22 = (char *)&v56 - v21;
  __chkstk_darwin(v20);
  v24 = (char *)&v56 - v23;
  v25 = JSONObject.subscript.getter(0x6E6F6974706163, 0xE700000000000000);
  v26 = JSONObject.string.getter(v25);
  v61 = v27;
  v62 = v26;
  v28 = *(void (**)(char *, uint64_t))(v13 + 8);
  v28(v24, v12);
  v29 = JSONObject.subscript.getter(0x656C746974, 0xE500000000000000);
  v30 = JSONObject.string.getter(v29);
  v58 = v31;
  v59 = v30;
  v28(v22, v12);
  v32 = JSONObject.subscript.getter(0x656C746974627573, 0xE800000000000000);
  v33 = JSONObject.string.getter(v32);
  v56 = v34;
  v57 = v33;
  v28(v19, v12);
  v35 = type metadata accessor for ArtworkModel(0);
  JSONObject.subscript.getter(0x6B726F77747261, 0xE700000000000000);
  v36 = *(void (**)(char *, uint64_t, uint64_t))(v69 + 16);
  v37 = v60;
  v36(v9, v60, v70);
  sub_F1C0((unint64_t *)&qword_3B2828, (void (*)(uint64_t))&type metadata accessor for ArtworkModel, (uint64_t)&protocol conformance descriptor for ArtworkModel);
  v64 = v9;
  ExpressibleByJSON.init(tryDeserializing:using:)(v16, v9, v35);
  v63 = a1;
  JSONObject.subscript.getter(0x7463416B63696C63, 0xEB000000006E6F69);
  v38 = v37;
  Instance15byDeserializing5usingACSg9JetEngine10JSONObjectV_AH11JSONContextVtFZ_0 = _s8ShelfKit6ActionC17tryToMakeInstance15byDeserializing5usingACSg9JetEngine10JSONObjectV_AH11JSONContextVtFZ_0((uint64_t)v16, v37);
  v28(v16, v12);
  if (Instance15byDeserializing5usingACSg9JetEngine10JSONObjectV_AH11JSONContextVtFZ_0)
  {
    *((_QWORD *)&v72 + 1) = type metadata accessor for Action(0);
    v73 = sub_F1C0((unint64_t *)&qword_3B28E8, (void (*)(uint64_t))type metadata accessor for Action, (uint64_t)&protocol conformance descriptor for Action);
    *(_QWORD *)&v71 = Instance15byDeserializing5usingACSg9JetEngine10JSONObjectV_AH11JSONContextVtFZ_0;
  }
  else
  {
    v73 = 0;
    v71 = 0u;
    v72 = 0u;
  }
  v40 = type metadata accessor for ImpressionMetrics(0);
  v41 = v63;
  JSONObject.subscript.getter(0xD000000000000011, 0x8000000000309180);
  v42 = v64;
  v43 = v70;
  v36(v64, v38, v70);
  v44 = (uint64_t)v68;
  v45 = ExpressibleByJSON.init(tryDeserializing:using:)(v16, v42, v40);
  v46 = v65;
  UUID.init()(v45);
  v47 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
  v49 = v48;
  (*(void (**)(char *, uint64_t))(v66 + 8))(v46, v67);
  (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v38, v43);
  v28(v41, v12);
  v50 = type metadata accessor for EditorialCard(0);
  v51 = (_QWORD *)swift_allocObject(v50, *(unsigned int *)(v50 + 48), *(unsigned __int16 *)(v50 + 52));
  v52 = v61;
  v51[4] = v62;
  v51[5] = v52;
  v53 = v58;
  v51[6] = v59;
  v51[7] = v53;
  v54 = v56;
  v51[8] = v57;
  v51[9] = v54;
  sub_15BD4(v74, (uint64_t)v51 + OBJC_IVAR____TtC8ShelfKit13EditorialCard_artwork, &qword_3BEB70);
  sub_15BD4((uint64_t)&v71, (uint64_t)v51 + OBJC_IVAR____TtC8ShelfKit13EditorialCard_clickAction, &qword_3B0C50);
  sub_15BD4(v44, (uint64_t)v51 + OBJC_IVAR____TtC8ShelfKit13EditorialCard_impressionMetrics, (uint64_t *)&unk_3B8790);
  v51[2] = v47;
  v51[3] = v49;
  return v51;
}

uint64_t type metadata accessor for EditorialCard(uint64_t a1)
{
  uint64_t result;

  result = qword_3B7C80;
  if (!qword_3B7C80)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for EditorialCard);
  return result;
}

uint64_t sub_D32F0(uint64_t a1)
{
  uint64_t result;

  result = sub_F1C0(&qword_3B7C48, (void (*)(uint64_t))type metadata accessor for EditorialCard, (uint64_t)&protocol conformance descriptor for EditorialCard);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_D332C(uint64_t a1)
{
  uint64_t result;

  result = sub_F1C0(&qword_3B7C50, (void (*)(uint64_t))type metadata accessor for EditorialCard, (uint64_t)&protocol conformance descriptor for EditorialCard);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_D3368()
{
  return type metadata accessor for EditorialCard(0);
}

void sub_D3370(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[7];

  v6[0] = &unk_2F36E8;
  v6[1] = &unk_2F3700;
  v6[2] = &unk_2F3700;
  v6[3] = &unk_2F3700;
  sub_3EE70(319, (unint64_t *)&qword_3B28A0, (uint64_t (*)(uint64_t))&type metadata accessor for ArtworkModel);
  if (v3 <= 0x3F)
  {
    v6[4] = *(_QWORD *)(v2 - 8) + 64;
    v6[5] = &unk_2F3718;
    sub_3EE70(319, (unint64_t *)&qword_3B2250, (uint64_t (*)(uint64_t))&type metadata accessor for ImpressionMetrics);
    if (v5 <= 0x3F)
    {
      v6[6] = *(_QWORD *)(v4 - 8) + 64;
      swift_updateClassMetadata2(a1, 256, 7, v6, a1 + 80);
    }
  }
}

uint64_t method lookup function for EditorialCard(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for EditorialCard);
}

uint64_t dispatch thunk of EditorialCard.__allocating_init(caption:title:subtitle:artwork:clickAction:impressionMetrics:shelfUniqueId:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t dispatch thunk of EditorialCard.__allocating_init(deserializing:using:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t ActionMenu.init(from:)@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  unint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t *v49;
  _QWORD *v50;

  v48 = a2;
  v3 = type metadata accessor for LegacyActionMenu.Child(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (unint64_t *)((char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v5);
  v9 = (char *)&v41 - v8;
  v10 = type metadata accessor for ActionMenu.Child(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = type metadata accessor for ActionMenu(0);
  __chkstk_darwin(v47);
  v46 = (unint64_t *)((char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
  __chkstk_darwin(v15);
  v17 = (char *)&v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = a1[1];
  if (v18)
  {
    v19 = *a1;
    v43 = a1[1];
    v44 = v19;
  }
  else
  {
    v43 = 0xE000000000000000;
    v44 = 0;
  }
  v20 = type metadata accessor for LegacyActionMenu(0);
  v21 = (uint64_t)a1 + *(int *)(v20 + 24);
  v45 = v17;
  sub_267BC(v21, (uint64_t)v17, &qword_3BEB70);
  v22 = *(int *)(v20 + 28);
  v49 = a1;
  v23 = *(unint64_t *)((char *)a1 + v22);
  v24 = *(_QWORD *)(v23 + 16);
  if (v24)
  {
    v50 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v23);
    sub_18073C(0, v24, 0);
    v25 = *(unsigned __int8 *)(v4 + 80);
    v42 = v23;
    v26 = v23 + ((v25 + 32) & ~v25);
    v27 = *(_QWORD *)(v4 + 72);
    v28 = v50;
    do
    {
      sub_D3A34(v26, (uint64_t)v9);
      sub_D3A34((uint64_t)v9, (uint64_t)v7);
      ActionMenu.Child.init(from:)(v7, (uint64_t)v13);
      sub_145D8((uint64_t)v9, type metadata accessor for LegacyActionMenu.Child);
      if ((swift_isUniquelyReferenced_nonNull_native(v28) & 1) == 0)
      {
        sub_18073C(0, v28[2] + 1, 1);
        v28 = v50;
      }
      v30 = v28[2];
      v29 = v28[3];
      if (v30 >= v29 >> 1)
      {
        sub_18073C(v29 > 1, v30 + 1, 1);
        v28 = v50;
      }
      v28[2] = v30 + 1;
      sub_3C56C((uint64_t)v13, (uint64_t)v28+ ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(_QWORD *)(v11 + 72) * v30, type metadata accessor for ActionMenu.Child);
      v26 += v27;
      --v24;
    }
    while (v24);
    swift_bridgeObjectRelease(v42);
  }
  else
  {
    swift_bridgeObjectRetain(v18);
    v28 = _swiftEmptyArrayStorage;
  }
  v31 = _s8ShelfKit10ActionMenuV2IDVAEycfC_0();
  v33 = v32;
  v35 = v46;
  v34 = v47;
  v36 = (uint64_t)v46 + *(int *)(v47 + 28);
  v37 = type metadata accessor for ArtworkModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v36, 1, 1, v37);
  *v35 = v31;
  v35[1] = v33;
  v38 = (uint64_t)v45;
  v39 = v43;
  v35[2] = v44;
  v35[3] = v39;
  v35[4] = 0;
  v35[5] = 0;
  sub_3C454(v38, v36, &qword_3BEB70);
  *(unint64_t *)((char *)v35 + *(int *)(v34 + 32)) = (unint64_t)v28;
  sub_3C56C((uint64_t)v35, v48, type metadata accessor for ActionMenu);
  return sub_145D8((uint64_t)v49, type metadata accessor for LegacyActionMenu);
}

uint64_t ActionMenu.Child.init(from:)@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  int *v3;
  uint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v28[12];
  int v29;
  unint64_t v30;
  unint64_t *v31;
  uint64_t v32;
  _BYTE v33[40];
  _OWORD v34[2];
  uint64_t v35;

  v32 = a2;
  v3 = (int *)type metadata accessor for ActionMenu.Item(0);
  __chkstk_darwin(v3);
  v5 = (unint64_t *)&v28[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
  __chkstk_darwin(v6);
  v8 = &v28[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for LegacyActionMenu.Child(0);
  v10 = v9;
  v11 = *((unsigned __int8 *)a1 + *(int *)(v9 + 24));
  if ((v11 & 4) != 0)
  {
    v35 = 0;
    memset(v34, 0, sizeof(v34));
    v12 = a1[1];
    if (v12)
      goto LABEL_3;
  }
  else
  {
    sub_150C8((uint64_t)a1 + *(int *)(v9 + 28), (uint64_t)v34);
    v12 = a1[1];
    if (v12)
    {
LABEL_3:
      v30 = *a1;
      v13 = v12;
      goto LABEL_6;
    }
  }
  v30 = 0;
  v13 = 0xE000000000000000;
LABEL_6:
  if ((v11 & 1) != 0)
    v14 = 1;
  else
    v14 = 2;
  v29 = v14;
  v15 = (uint64_t)a1 + *(int *)(v10 + 20);
  swift_bridgeObjectRetain(v12);
  v16 = _s8ShelfKit10ActionMenuV2IDVAEycfC_0();
  v18 = v17;
  sub_267BC(v15, (uint64_t)v8, &qword_3BEB70);
  sub_267BC((uint64_t)v34, (uint64_t)v33, &qword_3B0C50);
  v19 = v3[6];
  v31 = a1;
  v20 = (uint64_t)v8;
  v21 = (uint64_t)v5 + v19;
  v22 = type metadata accessor for ArtworkModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v21, 1, 1, v22);
  v23 = v3[7];
  *((_BYTE *)v5 + v23) = 2;
  v24 = (uint64_t)v5 + v3[9];
  *(_QWORD *)(v24 + 32) = 0;
  *(_OWORD *)v24 = 0u;
  *(_OWORD *)(v24 + 16) = 0u;
  *v5 = v16;
  v5[1] = v18;
  v5[2] = v30;
  v5[3] = v13;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v13);
  sub_3C454(v20, v21, &qword_3BEB70);
  *((_BYTE *)v5 + v23) = v29;
  *((_BYTE *)v5 + v3[8]) = ((v11 >> 1) & 1) == 0;
  sub_3C454((uint64_t)v33, v24, &qword_3B0C50);
  v25 = v32;
  sub_3C56C((uint64_t)v5, v32, type metadata accessor for ActionMenu.Item);
  v26 = type metadata accessor for ActionMenu.Child(0);
  swift_storeEnumTagMultiPayload(v25, v26, 0);
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(v18);
  sub_145D8((uint64_t)v31, type metadata accessor for LegacyActionMenu.Child);
  return sub_D3A78((uint64_t)v34);
}

uint64_t sub_D3A34(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LegacyActionMenu.Child(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_D3A78(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0C50);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

ShelfKit::AccountLink::LinkDisplayType_optional __swiftcall AccountLink.LinkDisplayType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  Swift::Int v5;
  ShelfKit::AccountLink::LinkDisplayType_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_373AD0, v3);
  result.value = swift_bridgeObjectRelease(object);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *v4 = v7;
  return result;
}

uint64_t AccountLink.LinkDisplayType.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0x6E6F69746361;
  else
    return 0x697461676976616ELL;
}

uint64_t sub_D3B54(char *a1, char *a2)
{
  return sub_1E303C(*a1, *a2);
}

Swift::Int sub_D3B60()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  if (v1)
    v2 = 0x6E6F69746361;
  else
    v2 = 0x697461676976616ELL;
  if (v1)
    v3 = 0xE600000000000000;
  else
    v3 = 0xEA00000000006E6FLL;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_D3BE0(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0x6E6F69746361;
  else
    v2 = 0x697461676976616ELL;
  if (*v1)
    v3 = 0xE600000000000000;
  else
    v3 = 0xEA00000000006E6FLL;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_D3C3C()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  if (v1)
    v2 = 0x6E6F69746361;
  else
    v2 = 0x697461676976616ELL;
  if (v1)
    v3 = 0xE600000000000000;
  else
    v3 = 0xEA00000000006E6FLL;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

ShelfKit::AccountLink::LinkDisplayType_optional sub_D3CB8(Swift::String *a1)
{
  return AccountLink.LinkDisplayType.init(rawValue:)(*a1);
}

void sub_D3CC4(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x697461676976616ELL;
  if (*v1)
    v2 = 0x6E6F69746361;
  v3 = 0xEA00000000006E6FLL;
  if (*v1)
    v3 = 0xE600000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t AccountLink.title.getter()
{
  uint64_t (**v0)(void);

  return (*v0)();
}

void AccountLink.displayType.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 24);
}

uint64_t AccountLink.init(autoUpdatingTitle:action:displayType:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, uint64_t a5@<X8>)
{
  char v5;

  v5 = *a4;
  *(_QWORD *)a5 = result;
  *(_QWORD *)(a5 + 8) = a2;
  *(_QWORD *)(a5 + 16) = a3;
  *(_BYTE *)(a5 + 24) = v5;
  return result;
}

unint64_t sub_D3D48()
{
  unint64_t result;

  result = qword_3B7D40;
  if (!qword_3B7D40)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AccountLink.LinkDisplayType);
    atomic_store(result, (unint64_t *)&qword_3B7D40);
  }
  return result;
}

uint64_t destroy for AccountLink(uint64_t a1)
{
  swift_release(*(_QWORD *)(a1 + 8));
  return swift_release(*(_QWORD *)(a1 + 16));
}

uint64_t initializeWithCopy for AccountLink(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  swift_retain(v3);
  swift_retain(v4);
  return a1;
}

uint64_t assignWithCopy for AccountLink(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_retain(v4);
  swift_release(v5);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v7;
  swift_retain(v7);
  swift_release(v6);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

__n128 __swift_memcpy25_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for AccountLink(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release(v4);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release(v5);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccountLink(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 25))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AccountLink(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 25) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AccountLink()
{
  return &type metadata for AccountLink;
}

uint64_t storeEnumTagSinglePayload for AccountLink.LinkDisplayType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_D3FA4 + 4 * byte_2F3735[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_D3FD8 + 4 * byte_2F3730[v4]))();
}

uint64_t sub_D3FD8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_D3FE0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xD3FE8);
  return result;
}

uint64_t sub_D3FF4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xD3FFCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_D4000(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_D4008(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccountLink.LinkDisplayType()
{
  return &type metadata for AccountLink.LinkDisplayType;
}

uint64_t ThinClientTogglePlayedEpisodeHelper.toggle(to:episodeIdentifiers:objectGraph:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3[7] = a2;
  v3[8] = a3;
  v3[6] = a1;
  v4 = type metadata accessor for EpisodePlayState(0);
  v3[9] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[10] = v5;
  v3[11] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7D50);
  v3[12] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ThinClientEpisodeStateRepository(0);
  v8 = (_QWORD *)swift_task_alloc(async function pointer to BaseObjectGraph.inject<A>(_:)[1]);
  v3[13] = v8;
  *v8 = v3;
  v8[1] = sub_D40EC;
  return BaseObjectGraph.inject<A>(_:)(v3 + 2, v7, v7);
}

uint64_t sub_D40EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 104);
  *(_QWORD *)(*(_QWORD *)v1 + 112) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_D4674;
  else
    v3 = sub_D4150;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_D4150()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v0[15] = v0[2];
  v1 = type metadata accessor for PlaybackPositionController(0);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to BaseObjectGraph.inject<A>(_:)[1]);
  v0[16] = v2;
  *v2 = v0;
  v2[1] = sub_D41CC;
  return BaseObjectGraph.inject<A>(_:)(v0 + 3, v1, v1);
}

uint64_t sub_D41CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 128);
  *(_QWORD *)(*(_QWORD *)v1 + 136) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_D46B0;
  else
    v3 = sub_D4230;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_D4230()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v0[18] = v0[3];
  v1 = type metadata accessor for PlaybackController(0);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to BaseObjectGraph.inject<A>(_:)[1]);
  v0[19] = v2;
  *v2 = v0;
  v2[1] = sub_D42AC;
  return BaseObjectGraph.inject<A>(_:)(v0 + 4, v1, v1);
}

uint64_t sub_D42AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 152);
  *(_QWORD *)(*(_QWORD *)v1 + 160) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_D46F4;
  else
    v3 = sub_D4310;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_D4310()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  _QWORD *v20;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 32);
  *(_QWORD *)(v0 + 168) = v2;
  v3 = *(_QWORD *)(v1 + 16);
  if (v3)
  {
    v4 = (_BYTE *)(swift_bridgeObjectRetain() + 48);
    v5 = _swiftEmptyArrayStorage;
    do
    {
      if (!*v4)
      {
        v6 = *((_QWORD *)v4 - 2);
        if ((swift_isUniquelyReferenced_nonNull_native(v5) & 1) == 0)
          v5 = (_QWORD *)sub_10870(0, v5[2] + 1, 1, v5);
        v8 = v5[2];
        v7 = v5[3];
        if (v8 >= v7 >> 1)
          v5 = (_QWORD *)sub_10870(v7 > 1, v8 + 1, 1, v5);
        v5[2] = v8 + 1;
        v5[v8 + 4] = v6;
      }
      v4 += 24;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
  }
  else
  {
    v5 = _swiftEmptyArrayStorage;
  }
  *(_QWORD *)(v0 + 176) = v5;
  *(_QWORD *)(v0 + 40) = v5;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0A90);
  v10 = sub_D47D4();
  if ((Collection.isNotEmpty.getter(v9, v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v0 + 88);
    v12 = *(_QWORD *)(v0 + 96);
    v13 = *(_QWORD *)(v0 + 72);
    v14 = *(_QWORD *)(v0 + 80);
    v15 = *(_QWORD *)(v0 + 48);
    sub_D4820(v15, v12);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56))(v12, 0, 1, v13);
    *(_QWORD *)(v0 + 184) = ThinClientEpisodeStateRepository.updateLocalPlayStates(_:to:)(v5, v12);
    sub_1459C(v12, &qword_3B7D50);
    sub_D4820(v15, v11);
    sub_D4864(v11);
    v17 = v16;
    v18 = dispatch thunk of PlaybackController.queueController.getter();
    PlaybackController.QueueController.updatePlayerIfNeededForMarking(adamIDs:as:)(v5, v17);
    swift_release(v18);
    swift_storeEnumTagMultiPayload(v11, v13, 4);
    v19 = static EpisodePlayState.== infix(_:_:)(v15, v11);
    sub_36668(v11);
    v25 = (char *)&async function pointer to dispatch thunk of PlaybackPositionController.updatePlaybackPosition(adamIDs:completed:position:account:)
        + async function pointer to dispatch thunk of PlaybackPositionController.updatePlaybackPosition(adamIDs:completed:position:account:);
    v20 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of PlaybackPositionController.updatePlaybackPosition(adamIDs:completed:position:account:)
                                     + 1));
    *(_QWORD *)(v0 + 192) = v20;
    *v20 = v0;
    v20[1] = sub_D459C;
    return ((uint64_t (*)(_QWORD *, BOOL, _QWORD, double))v25)(v5, (v19 & 1) == 0, 0, 0.0);
  }
  else
  {
    v22 = *(void **)(v0 + 144);
    v23 = *(_QWORD *)(v0 + 120);
    swift_bridgeObjectRelease();
    swift_release(v2);

    swift_release(v23);
    v24 = *(_QWORD *)(v0 + 88);
    swift_task_dealloc(*(_QWORD *)(v0 + 96));
    swift_task_dealloc(v24);
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
  }
}

uint64_t sub_D459C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 192);
  *(_QWORD *)(*(_QWORD *)v1 + 200) = v0;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease();
  if (v0)
  {
    v3 = sub_D4744;
  }
  else
  {
    swift_bridgeObjectRelease();
    v3 = sub_D4618;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_D4618()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(void **)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 120);
  swift_release(*(_QWORD *)(v0 + 168));

  swift_release(v2);
  v3 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_D4674()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_D46B0()
{
  uint64_t v0;
  uint64_t v1;

  swift_release(*(_QWORD *)(v0 + 120));
  v1 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_D46F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 120);

  swift_release(v1);
  v2 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_D4744()
{
  uint64_t v0;
  uint64_t v1;
  Swift::OpaquePointer v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 200);
  v2._rawValue = *(void **)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 168);
  v4 = *(void **)(v0 + 144);
  v5 = *(_QWORD *)(v0 + 120);
  ThinClientEpisodeStateRepository.restoreLocalPlayStates(to:)(v2);
  swift_errorRelease(v1);
  swift_bridgeObjectRelease(v2._rawValue);
  swift_release(v3);

  swift_release(v5);
  v6 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(1);
}

unint64_t sub_D47D4()
{
  unint64_t result;

  result = qword_3C78D0;
  if (!qword_3C78D0)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_3B0A90);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A]);
    atomic_store(result, (unint64_t *)&qword_3C78D0);
  }
  return result;
}

uint64_t sub_D4820(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for EpisodePlayState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_D4864(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  v2 = type metadata accessor for Logger(0);
  __chkstk_darwin(v2);
  v3 = type metadata accessor for EpisodePlayState(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_D4820(a1, (uint64_t)v5);
  v6 = (char *)sub_D4924 + 4 * byte_2F3850[swift_getEnumCaseMultiPayload(v5, v3)];
  __asm { BR              X10 }
}

uint64_t sub_D4924()
{
  uint64_t v0;

  sub_36668(v0);
  return 1;
}

ValueMetadata *type metadata accessor for ThinClientTogglePlayedEpisodeHelper()
{
  return &type metadata for ThinClientTogglePlayedEpisodeHelper;
}

uint64_t sub_D4A2C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t static CoreDataFetcher.unsafeFindOrCreateStoreEpisode(for:in:)(uint64_t *a1, void *a2)
{
  uint64_t result;

  result = static CoreDataFetcher.unsafeFindEpisode(for:in:)(a1, a2);
  if (!result)
    return sub_D4D10(a1, (uint64_t)a2);
  return result;
}

uint64_t static CoreDataFetcher.unsafeFindEpisode(for:in:)(uint64_t *a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  _QWORD aBlock[5];
  uint64_t v42;
  uint64_t v43;

  v3 = v2;
  v6 = type metadata accessor for EpisodeOffer(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  result = __chkstk_darwin(v6);
  v10 = *a1;
  if (*a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v11 = a1[1];
    v38 = a1[2];
    v39 = v11;
    v34 = v10;
    v12 = (uint64_t *)((char *)a1 + *(int *)(result + 40));
    v13 = *v12;
    v36 = v12[1];
    v37 = v13;
    v35 = *(uint64_t *)((char *)a1 + *(int *)(result + 48));
    v43 = 0;
    v33 = (uint64_t)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_14510((uint64_t)a1, v33, type metadata accessor for EpisodeOffer);
    v14 = *(unsigned __int8 *)(v7 + 80);
    v15 = (v14 + 24) & ~v14;
    v16 = (v8 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
    v17 = (v16 + 15) & 0xFFFFFFFFFFFFFFF8;
    v40 = a2;
    v18 = (v17 + 15) & 0xFFFFFFFFFFFFFFF8;
    v19 = (v18 + 15) & 0xFFFFFFFFFFFFFFF8;
    v20 = (v19 + 23) & 0xFFFFFFFFFFFFFFF8;
    v21 = (v20 + 23) & 0xFFFFFFFFFFFFFFF8;
    v22 = swift_allocObject(&unk_37F2B8, v21 + 8, v14 | 7);
    *(_QWORD *)(v22 + 16) = v3;
    sub_3C56C(v33, v22 + v15, type metadata accessor for EpisodeOffer);
    *(_QWORD *)(v22 + v16) = a2;
    *(_QWORD *)(v22 + v17) = &v43;
    *(_QWORD *)(v22 + v18) = v34;
    v23 = (_QWORD *)(v22 + v19);
    v24 = v38;
    *v23 = v39;
    v23[1] = v24;
    v25 = (_QWORD *)(v22 + v20);
    v26 = v36;
    *v25 = v37;
    v25[1] = v26;
    *(_QWORD *)(v22 + v21) = v35;
    v27 = swift_allocObject(&unk_37F2E0, 32, 7);
    *(_QWORD *)(v27 + 16) = sub_CBA18;
    *(_QWORD *)(v27 + 24) = v22;
    aBlock[4] = sub_3B570;
    v42 = v27;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_D4A2C;
    aBlock[3] = &block_descriptor_7;
    v28 = _Block_copy(aBlock);
    v29 = v42;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v30 = v40;
    swift_release(v29);
    objc_msgSend(v30, "performBlockAndWait:", v28);
    _Block_release(v28);
    LOBYTE(v30) = swift_isEscapingClosureAtFileLocation(v27, "", 121, 53, 32, 1);
    result = swift_release(v27);
    if ((v30 & 1) == 0)
    {
      v31 = v43;
      swift_release(v22);
      return v31;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_D4D10(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;

  v5 = type metadata accessor for UTType(0);
  v6 = *(_QWORD *)(v5 - 8);
  result = __chkstk_darwin(v5);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v42 = *a1;
    v43 = v2;
    v44 = a2;
    v10 = a1[1];
    v40 = a1[2];
    v41 = v10;
    v11 = (int *)type metadata accessor for EpisodeOffer(0);
    v12 = v11[11];
    v13 = (uint64_t *)((char *)a1 + v11[10]);
    v15 = *v13;
    v14 = v13[1];
    v36 = v15;
    v37 = v14;
    v16 = *(uint64_t *)((char *)a1 + v12);
    v17 = *(uint64_t *)((char *)a1 + v12 + 8);
    v18 = (char *)a1 + v11[15];
    v39 = *(_QWORD *)v18;
    v38 = v18[8];
    v35 = *(uint64_t *)((char *)a1 + v11[12]);
    v19 = URL.absoluteString.getter(v11);
    v21 = v20;
    v22 = *((unsigned __int8 *)a1 + v11[13]);
    if ((v22 - 2) >= 2)
    {
      v34 = v19;
      if (v22)
        v25 = static UTType.movie.getter();
      else
        v25 = static UTType.audio.getter();
      v23 = UTType.identifier.getter(v25);
      v24 = v26;
      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
      v19 = v34;
    }
    else
    {
      v23 = 0;
      v24 = 0xE000000000000000;
    }
    v46 = 0;
    v27 = __chkstk_darwin(v19);
    v28 = v44;
    *(&v33 - 20) = v43;
    *(&v33 - 19) = (uint64_t)a1;
    *(&v33 - 18) = v28;
    *(&v33 - 17) = (uint64_t)&v46;
    v29 = v37;
    *(&v33 - 16) = v36;
    *(&v33 - 15) = v29;
    v30 = v41;
    *(&v33 - 14) = v35;
    *(&v33 - 13) = v30;
    *(&v33 - 12) = v40;
    *(&v33 - 11) = v23;
    v31 = v42;
    *(&v33 - 10) = v24;
    *(&v33 - 9) = v31;
    *(&v33 - 8) = v27;
    *(&v33 - 7) = v21;
    *(&v33 - 6) = v16;
    *(&v33 - 5) = v17;
    *(&v33 - 4) = v16;
    *(&v33 - 3) = v17;
    *(&v33 - 2) = v39;
    *((_BYTE *)&v33 - 8) = v38;
    v32 = sub_CBB2C();
    NSManagedObjectContext.performAndWait<A>(_:)(&v45, sub_CBAD8, &v33 - 22, v32);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v45;
  }
  return result;
}

void sub_D4F1C(uint64_t a1, uint64_t a2, void *a3, void **a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3D88);
  __chkstk_darwin(v17);
  v19 = (uint64_t *)((char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v20 = type metadata accessor for EpisodeOffer(0);
  v21 = (void *)sub_D5558((uint64_t *)(a2 + *(int *)(v20 + 24)), a3);
  if (v21)
  {
    v22 = v21;
    v23 = objc_msgSend(v21, "uuid");

    if (v23)
    {
      v32 = a7;
      v33 = a8;
      v31 = a9;
      v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
      v26 = v25;

      if (a10)
      {
        LazyDate.value.getter(v19);
      }
      else
      {
        v27 = type metadata accessor for Date(0);
        (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v19, 1, 1, v27);
      }
      v28 = static CoreDataFetcher.fetchEpisode(contentId:guid:title:pubDate:podcastUuid:with:)(a5, 0, a6, v32, v33, v31, v19, v24, v26, a3);
      swift_bridgeObjectRelease();
      sub_1459C((uint64_t)v19, &qword_3B3D88);
      v29 = *a4;
      *a4 = (void *)v28;

    }
  }
}

uint64_t sub_D509C()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int *v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(unint64_t, uint64_t, uint64_t);
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  void (*v24)(uint64_t, uint64_t);
  unint64_t v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unsigned int (*v40)(unint64_t, uint64_t, uint64_t);
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;

  v1 = (int *)type metadata accessor for EpisodeOffer(0);
  v2 = *((_QWORD *)v1 - 1);
  v41 = *(_QWORD *)(v2 + 64);
  v42 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v43 = *(unsigned __int8 *)(v2 + 80);
  v3 = v0 + v42;
  swift_bridgeObjectRelease();
  v4 = v0 + v42 + v1[6];
  swift_bridgeObjectRelease();
  v5 = (int *)type metadata accessor for ShowOffer(0);
  v6 = v4 + v5[7];
  v7 = type metadata accessor for ArtworkModel(0);
  v40 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48);
  if (!v40(v6, 1, v7))
  {
    swift_bridgeObjectRelease();
    v8 = *(unsigned __int8 *)(v6 + 32);
    if (v8 != 255)
      sub_3B5BC(*(_QWORD *)(v6 + 16), *(_QWORD *)(v6 + 24), v8);
    v9 = *(unsigned __int8 *)(v6 + 64);
    if (v9 != 255)
      sub_3D624(*(id *)(v6 + 56), v9);
    v10 = *(unsigned __int8 *)(v6 + 80);
    if (v10 != 255)
      sub_3D624(*(id *)(v6 + 72), v10);
    v11 = *(unsigned __int8 *)(v6 + 96);
    if (v11 != 255)
      sub_3D624(*(id *)(v6 + 88), v11);
    v12 = *(unsigned __int8 *)(v6 + 112);
    if (v12 != 255)
      sub_3D624(*(id *)(v6 + 104), v12);
    v13 = *(unsigned __int8 *)(v6 + 128);
    if (v13 != 255)
      sub_3D624(*(id *)(v6 + 120), v13);
    v14 = v6 + *(int *)(v7 + 44);
    v15 = type metadata accessor for ArtworkCrop(0);
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v16 = v4 + v5[13];
  v17 = type metadata accessor for URL(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v18 + 48);
  if (!v19(v16, 1, v17))
    (*(void (**)(unint64_t, uint64_t))(v18 + 8))(v16, v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v20 = v4 + v5[16];
  if (!v19(v20, 1, v17))
    (*(void (**)(unint64_t, uint64_t))(v18 + 8))(v20, v17);
  v21 = v4 + v5[17];
  if (!v19(v21, 1, v17))
    (*(void (**)(unint64_t, uint64_t))(v18 + 8))(v21, v17);
  v22 = v3 + v1[7];
  v23 = v19(v22, 1, v17);
  v24 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
  if (!v23)
    v24(v22, v17);
  v24(v3 + v1[8], v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release(*(_QWORD *)(v3 + v1[12]));
  v25 = v3 + v1[16];
  if (!v40(v25, 1, v7))
  {
    swift_bridgeObjectRelease();
    v26 = *(unsigned __int8 *)(v25 + 32);
    if (v26 != 255)
      sub_3B5BC(*(_QWORD *)(v25 + 16), *(_QWORD *)(v25 + 24), v26);
    v27 = *(unsigned __int8 *)(v25 + 64);
    if (v27 != 255)
      sub_3D624(*(id *)(v25 + 56), v27);
    v28 = *(unsigned __int8 *)(v25 + 80);
    if (v28 != 255)
      sub_3D624(*(id *)(v25 + 72), v28);
    v29 = *(unsigned __int8 *)(v25 + 96);
    if (v29 != 255)
      sub_3D624(*(id *)(v25 + 88), v29);
    v30 = *(unsigned __int8 *)(v25 + 112);
    if (v30 != 255)
      sub_3D624(*(id *)(v25 + 104), v30);
    v31 = *(unsigned __int8 *)(v25 + 128);
    if (v31 != 255)
      sub_3D624(*(id *)(v25 + 120), v31);
    v32 = v25 + *(int *)(v7 + 44);
    v33 = type metadata accessor for ArtworkCrop(0);
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 8))(v32, v33);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  v34 = v3 + v1[22];
  v35 = type metadata accessor for TranscriptRequestInformation(0);
  v36 = *(_QWORD *)(v35 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v34, v35);
  v37 = (v41 + v42 + 7) & 0xFFFFFFFFFFFFFFF8;
  v38 = (((((((((v37 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
       + 23) & 0xFFFFFFFFFFFFFFF8;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release(*(_QWORD *)(v0 + v38));
  return swift_deallocObject(v0, v38 + 8, v43 | 7);
}

uint64_t sub_D5530()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t block_copy_helper_7(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t block_destroy_helper_7(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_D5558(uint64_t *a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  _QWORD aBlock[5];
  uint64_t v26;
  uint64_t v27;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
  result = __chkstk_darwin(v6);
  v9 = (char *)&aBlock[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *a1;
  if (*a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v11 = type metadata accessor for ShowOffer(0);
    sub_267BC((uint64_t)a1 + *(int *)(v11 + 52), (uint64_t)v9, &qword_3B4370);
    v12 = type metadata accessor for URL(0);
    v13 = *(_QWORD *)(v12 - 8);
    v14 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v9, 1, v12);
    if ((_DWORD)v14 == 1)
    {
      sub_1459C((uint64_t)v9, &qword_3B4370);
      v15 = 0;
      v16 = 0;
    }
    else
    {
      v15 = URL.absoluteString.getter(v14);
      v16 = v17;
      (*(void (**)(char *, uint64_t))(v13 + 8))(v9, v12);
    }
    v27 = 0;
    v18 = (_QWORD *)swift_allocObject(&unk_37F3A8, 64, 7);
    v18[2] = &v27;
    v18[3] = v3;
    v18[4] = v10;
    v18[5] = v15;
    v18[6] = v16;
    v18[7] = a2;
    v19 = swift_allocObject(&unk_37F3D0, 32, 7);
    *(_QWORD *)(v19 + 16) = sub_D688C;
    *(_QWORD *)(v19 + 24) = v18;
    aBlock[4] = sub_72838;
    v26 = v19;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_D4A2C;
    aBlock[3] = &block_descriptor_23_0;
    v20 = _Block_copy(aBlock);
    v21 = v26;
    v22 = a2;
    swift_retain();
    swift_release(v21);
    objc_msgSend(v22, "performBlockAndWait:", v20);
    _Block_release(v20);
    LOBYTE(v22) = swift_isEscapingClosureAtFileLocation(v19, "", 121, 108, 32, 1);
    result = swift_release(v19);
    if ((v22 & 1) == 0)
    {
      v23 = v27;
      swift_release(v18);
      return v23;
    }
  }
  __break(1u);
  return result;
}

uint64_t static CoreDataFetcher.episodeUuid(for:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  id v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  _QWORD aBlock[5];
  uint64_t v47;
  void *v48;
  _QWORD v49[3];

  v3 = type metadata accessor for EpisodeOffer(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = __chkstk_darwin(v3);
  v7 = (void *)static CoreDataFetcher.contextProvider.getter(v6);
  v8 = objc_msgSend(v7, "mainOrPrivateContext");
  result = swift_unknownObjectRelease(v7);
  v49[0] = 0;
  v49[1] = 0;
  v10 = *a1;
  if (*a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v11 = a1[1];
    v40 = a1[2];
    v41 = v11;
    v39 = v10;
    v12 = (uint64_t *)((char *)a1 + *(int *)(v3 + 40));
    v13 = *v12;
    v43 = v12[1];
    v44 = v13;
    v42 = *(uint64_t *)((char *)a1 + *(int *)(v3 + 48));
    v48 = 0;
    sub_14510((uint64_t)a1, (uint64_t)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for EpisodeOffer);
    v14 = *(unsigned __int8 *)(v4 + 80);
    v15 = (v14 + 16) & ~v14;
    v16 = (v5 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
    v36 = v1;
    v37 = (uint64_t)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
    v17 = v8;
    v45 = v8;
    v18 = (v16 + 15) & 0xFFFFFFFFFFFFFFF8;
    v19 = (v18 + 15) & 0xFFFFFFFFFFFFFFF8;
    v20 = (v19 + 15) & 0xFFFFFFFFFFFFFFF8;
    v21 = (v20 + 15) & 0xFFFFFFFFFFFFFFF8;
    v22 = (v21 + 23) & 0xFFFFFFFFFFFFFFF8;
    v38 = (v22 + 23) & 0xFFFFFFFFFFFFFFF8;
    v23 = (v38 + 15) & 0xFFFFFFFFFFFFFFF8;
    v24 = swift_allocObject(&unk_37F330, v23 + 8, v14 | 7);
    sub_3C56C(v37, v24 + v15, type metadata accessor for EpisodeOffer);
    *(_QWORD *)(v24 + v16) = v36;
    *(_QWORD *)(v24 + v18) = v17;
    *(_QWORD *)(v24 + v19) = &v48;
    v25 = v40;
    *(_QWORD *)(v24 + v20) = v39;
    v26 = (_QWORD *)(v24 + v21);
    v27 = v42;
    *v26 = v41;
    v26[1] = v25;
    v28 = (_QWORD *)(v24 + v22);
    v29 = v43;
    *v28 = v44;
    v28[1] = v29;
    *(_QWORD *)(v24 + v38) = v27;
    *(_QWORD *)(v24 + v23) = v49;
    v30 = swift_allocObject(&unk_37F358, 32, 7);
    *(_QWORD *)(v30 + 16) = sub_D61D8;
    *(_QWORD *)(v30 + 24) = v24;
    aBlock[4] = sub_72838;
    v47 = v30;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_D4A2C;
    aBlock[3] = &block_descriptor_13_1;
    v31 = _Block_copy(aBlock);
    v32 = v47;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v33 = v45;
    swift_release(v32);
    objc_msgSend(v33, "performBlockAndWait:", v31);

    _Block_release(v31);
    LOBYTE(v33) = swift_isEscapingClosureAtFileLocation(v30, "", 121, 77, 32, 1);
    result = swift_release(v30);
    if ((v33 & 1) == 0)
    {
      v34 = v49[0];
      v35 = v48;
      swift_bridgeObjectRetain();

      swift_release(v24);
      swift_bridgeObjectRelease();
      return v34;
    }
  }
  __break(1u);
  return result;
}

void sub_D5A60(uint64_t a1, uint64_t a2, uint64_t a3, id *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t *a11)
{
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  id v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  id v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v49 = a5;
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3D88);
  __chkstk_darwin(v17);
  v19 = (uint64_t *)((char *)&v46 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
  __chkstk_darwin(v20);
  v22 = (char *)&v46 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = (uint64_t *)(a1 + *(int *)(type metadata accessor for EpisodeOffer(0) + 24));
  v24 = *v23;
  if (*v23 < 0)
  {
    __break(1u);
  }
  else
  {
    v46 = a6;
    v47 = a7;
    v48 = a8;
    v25 = type metadata accessor for ShowOffer(0);
    sub_267BC((uint64_t)v23 + *(int *)(v25 + 52), (uint64_t)v22, &qword_3B4370);
    v26 = type metadata accessor for URL(0);
    v27 = *(_QWORD *)(v26 - 8);
    v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v27 + 48))(v22, 1, v26);
    if ((_DWORD)v28 == 1)
    {
      sub_1459C((uint64_t)v22, &qword_3B4370);
      v29 = 0;
      v30 = 0;
    }
    else
    {
      v29 = URL.absoluteString.getter(v28);
      v30 = v31;
      (*(void (**)(char *, uint64_t))(v27 + 8))(v22, v26);
    }
    v32 = (void *)static CoreDataFetcher.fetchPodcast(adamId:feedUrl:with:)(v24, v29, v30, a3);
    swift_bridgeObjectRelease();
    if (v32)
    {
      if ((objc_msgSend(v32, "hidden") & 1) != 0)
      {

      }
      else
      {
        if (a10)
        {
          LazyDate.value.getter(v19);
        }
        else
        {
          v33 = type metadata accessor for Date(0);
          (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v19, 1, 1, v33);
        }
        v34 = objc_msgSend(v32, "uuid");
        if (v34)
        {
          v35 = v34;
          v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
          v38 = v37;

        }
        else
        {
          v36 = 0;
          v38 = 0;
        }
        v39 = static CoreDataFetcher.fetchEpisode(contentId:guid:title:pubDate:podcastUuid:with:)(v49, 0, v46, v47, v48, a9, v19, v36, v38, a3);
        swift_bridgeObjectRelease();
        sub_1459C((uint64_t)v19, &qword_3B3D88);
        v40 = *a4;
        *a4 = (id)v39;

        if (*a4 && (v41 = objc_msgSend(*a4, "uuid")) != 0)
        {
          v42 = v41;
          v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
          v45 = v44;

        }
        else
        {

          v43 = 0;
          v45 = 0;
        }
        *a11 = v43;
        a11[1] = v45;
        swift_bridgeObjectRelease();
      }
    }
  }
}

uint64_t sub_D5D34()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int *v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(unint64_t, uint64_t, uint64_t);
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  void (*v24)(uint64_t, uint64_t);
  unint64_t v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unsigned int (*v40)(unint64_t, uint64_t, uint64_t);
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;

  v1 = (int *)type metadata accessor for EpisodeOffer(0);
  v2 = *((_QWORD *)v1 - 1);
  v41 = *(_QWORD *)(v2 + 64);
  v42 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v43 = *(unsigned __int8 *)(v2 + 80);
  v3 = v0 + v42;
  swift_bridgeObjectRelease();
  v4 = v0 + v42 + v1[6];
  swift_bridgeObjectRelease();
  v5 = (int *)type metadata accessor for ShowOffer(0);
  v6 = v4 + v5[7];
  v7 = type metadata accessor for ArtworkModel(0);
  v40 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48);
  if (!v40(v6, 1, v7))
  {
    swift_bridgeObjectRelease();
    v8 = *(unsigned __int8 *)(v6 + 32);
    if (v8 != 255)
      sub_3B5BC(*(_QWORD *)(v6 + 16), *(_QWORD *)(v6 + 24), v8);
    v9 = *(unsigned __int8 *)(v6 + 64);
    if (v9 != 255)
      sub_3D624(*(id *)(v6 + 56), v9);
    v10 = *(unsigned __int8 *)(v6 + 80);
    if (v10 != 255)
      sub_3D624(*(id *)(v6 + 72), v10);
    v11 = *(unsigned __int8 *)(v6 + 96);
    if (v11 != 255)
      sub_3D624(*(id *)(v6 + 88), v11);
    v12 = *(unsigned __int8 *)(v6 + 112);
    if (v12 != 255)
      sub_3D624(*(id *)(v6 + 104), v12);
    v13 = *(unsigned __int8 *)(v6 + 128);
    if (v13 != 255)
      sub_3D624(*(id *)(v6 + 120), v13);
    v14 = v6 + *(int *)(v7 + 44);
    v15 = type metadata accessor for ArtworkCrop(0);
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v16 = v4 + v5[13];
  v17 = type metadata accessor for URL(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v18 + 48);
  if (!v19(v16, 1, v17))
    (*(void (**)(unint64_t, uint64_t))(v18 + 8))(v16, v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v20 = v4 + v5[16];
  if (!v19(v20, 1, v17))
    (*(void (**)(unint64_t, uint64_t))(v18 + 8))(v20, v17);
  v21 = v4 + v5[17];
  if (!v19(v21, 1, v17))
    (*(void (**)(unint64_t, uint64_t))(v18 + 8))(v21, v17);
  v22 = v3 + v1[7];
  v23 = v19(v22, 1, v17);
  v24 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
  if (!v23)
    v24(v22, v17);
  v24(v3 + v1[8], v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release(*(_QWORD *)(v3 + v1[12]));
  v25 = v3 + v1[16];
  if (!v40(v25, 1, v7))
  {
    swift_bridgeObjectRelease();
    v26 = *(unsigned __int8 *)(v25 + 32);
    if (v26 != 255)
      sub_3B5BC(*(_QWORD *)(v25 + 16), *(_QWORD *)(v25 + 24), v26);
    v27 = *(unsigned __int8 *)(v25 + 64);
    if (v27 != 255)
      sub_3D624(*(id *)(v25 + 56), v27);
    v28 = *(unsigned __int8 *)(v25 + 80);
    if (v28 != 255)
      sub_3D624(*(id *)(v25 + 72), v28);
    v29 = *(unsigned __int8 *)(v25 + 96);
    if (v29 != 255)
      sub_3D624(*(id *)(v25 + 88), v29);
    v30 = *(unsigned __int8 *)(v25 + 112);
    if (v30 != 255)
      sub_3D624(*(id *)(v25 + 104), v30);
    v31 = *(unsigned __int8 *)(v25 + 128);
    if (v31 != 255)
      sub_3D624(*(id *)(v25 + 120), v31);
    v32 = v25 + *(int *)(v7 + 44);
    v33 = type metadata accessor for ArtworkCrop(0);
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 8))(v32, v33);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  v34 = v3 + v1[22];
  v35 = type metadata accessor for TranscriptRequestInformation(0);
  v36 = *(_QWORD *)(v35 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v34, v35);
  v37 = (((v41 + v42 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v38 = (((((((((v37 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
       + 23) & 0xFFFFFFFFFFFFFFF8;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release(*(_QWORD *)(v0 + v38));
  return swift_deallocObject(v0, ((v38 + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v43 | 7);
}

void sub_D61D8()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v1 = *(_QWORD *)(type metadata accessor for EpisodeOffer(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  v4 = (v3 + 15) & 0xFFFFFFFFFFFFFFF8;
  v5 = (v4 + 15) & 0xFFFFFFFFFFFFFFF8;
  v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  sub_D5A60(v0 + v2, *(_QWORD *)(v0 + v3), *(_QWORD *)(v0 + v4), *(id **)(v0 + v5), *(_QWORD *)(v0 + v6), *(_QWORD *)(v0 + v7), *(_QWORD *)(v0 + v7 + 8), *(_QWORD *)(v0 + v8), *(_QWORD *)(v0 + v8 + 8), *(_QWORD *)(v0 + ((v8 + 23) & 0xFFFFFFFFFFFFFFF8)), *(uint64_t **)(v0 + ((((v8 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_D6288()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_D6298(uint64_t a1@<X1>, void *a2@<X2>, _BYTE *a3@<X3>, uint64_t a4@<X6>, uint64_t a5@<X7>, _QWORD *a6@<X8>, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, double a17, char a18)
{
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  NSString v33;
  uint64_t v34;
  uint64_t v35;
  Class isa;
  uint64_t v37;
  NSString v38;
  uint64_t v39;
  void *v40;
  NSString v41;
  NSString v42;
  uint64_t v43;
  void *v44;
  id v45;
  NSString v46;
  NSString v47;
  NSString v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[4];
  uint64_t v52;
  void *v53;
  uint64_t v54;
  void *v55;
  _QWORD *v56;

  v51[0] = a5;
  v56 = a6;
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3D88);
  __chkstk_darwin(v22);
  v24 = (_QWORD *)((char *)v51 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  v25 = type metadata accessor for ShowOffer(0);
  __chkstk_darwin(v25);
  v27 = (_QWORD *)((char *)v51 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  v52 = type metadata accessor for EpisodeOffer(0);
  v28 = *(int *)(v52 + 24);
  v54 = a1;
  sub_14510(a1 + v28, (uint64_t)v27, type metadata accessor for ShowOffer);
  v29 = sub_D5558(v27, a2);
  v53 = a2;
  if (v29)
  {
    v30 = v29;
    v31 = 0;
  }
  else
  {
    v30 = sub_D68D0((uint64_t)v27, a2);
    v31 = v32;
  }
  v51[2] = a11;
  v51[3] = a12;
  v51[1] = a9;
  sub_145D8((uint64_t)v27, type metadata accessor for ShowOffer);
  *a3 = v31 & 1;
  v33 = String._bridgeToObjectiveC()();
  v55 = (void *)v30;
  if (a4)
  {
    LazyDate.value.getter(v24);
    v34 = type metadata accessor for Date(0);
    v35 = *(_QWORD *)(v34 - 8);
    isa = 0;
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v35 + 48))(v24, 1, v34) != 1)
    {
      isa = Date._bridgeToObjectiveC()().super.isa;
      (*(void (**)(_QWORD *, uint64_t))(v35 + 8))(v24, v34);
    }
    v37 = a10;
    if (a7)
      goto LABEL_8;
  }
  else
  {
    v39 = type metadata accessor for Date(0);
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v24, 1, 1, v39);
    isa = 0;
    v37 = a10;
    if (a7)
    {
LABEL_8:
      v38 = String._bridgeToObjectiveC()();
      goto LABEL_11;
    }
  }
  v38 = 0;
LABEL_11:
  v40 = (void *)objc_opt_self(MTEpisode);
  v41 = String._bridgeToObjectiveC()();
  v42 = String._bridgeToObjectiveC()();
  v43 = type metadata accessor for NotificationSettings(0);
  LOBYTE(v50) = static NotificationSettings.canSendNotification()(v43) & 1;
  v49 = v37;
  v44 = v55;
  v45 = objc_msgSend(v40, "insertNewEpisodeInManagedObjectContext:title:podcast:pubDate:byteSize:guid:uti:contentId:enclosureUrl:playStateSource:importSource:canSendNotifications:", v53, v33, v55, isa, 0, v38, v41, v49, v42, 0x300000001, v50);

  v46 = objc_retainAutoreleasedReturnValue((id)NSPersistentStringForMTEpisodePriceType(*(_QWORD *)(v54
                                                                                                 + *(int *)(v52 + 36))));
  if (!v46)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v46 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  v47 = a16;
  objc_msgSend(v45, "setPriceType:", v46, v51[0]);

  if (a14)
    v48 = String._bridgeToObjectiveC()();
  else
    v48 = 0;
  objc_msgSend(v45, "setItemDescription:", v48);

  if (a16)
    v47 = String._bridgeToObjectiveC()();
  objc_msgSend(v45, "setItunesSubtitle:", v47);

  if ((a18 & 1) == 0)
    objc_msgSend(v45, "setDuration:", a17);

  *v56 = v45;
}

id sub_D6648(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19)
{
  NSString v19;
  NSString v20;
  NSString v21;
  NSString v22;
  NSString v23;
  NSString v24;
  NSString v25;
  id v26;
  void *v27;
  id result;
  NSString v29;

  v19 = a17;
  v20 = a15;
  v21 = a13;
  if (a4)
    v29 = String._bridgeToObjectiveC()();
  else
    v29 = 0;
  v22 = String._bridgeToObjectiveC()();
  v23 = String._bridgeToObjectiveC()();
  v24 = String._bridgeToObjectiveC()();
  if (a13)
    v21 = String._bridgeToObjectiveC()();
  if (a15)
    v20 = String._bridgeToObjectiveC()();
  if (a17)
    v19 = String._bridgeToObjectiveC()();
  if (*(_QWORD *)(a19 + *(int *)(type metadata accessor for ShowOffer(0) + 44) + 8))
    v25 = String._bridgeToObjectiveC()();
  else
    v25 = 0;
  v26 = objc_msgSend((id)objc_opt_self(MTPodcast), "insertNewPodcastInManagedObjectContext:subscribed:feedUrl:showType:showTypeInFeed:title:author:provider:imageUrl:description:adamId:displayType:showSpecificUpsellCopy:", a2, 0, v29, a5, v22, v23, v24, v21, v20, v19, a18, v25, 0);

  v27 = *a1;
  *a1 = v26;

  result = *a1;
  if (*a1)
  {
    objc_msgSend(result, "setHidden:", 1);
    result = *a1;
    if (*a1)
    {
      objc_msgSend(result, "setImporting:", 1);
      result = *a1;
      if (*a1)
        return objc_msgSend(result, "setEpisodeLimit:", 0x100000000);
    }
  }
  return result;
}

uint64_t sub_D6860()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));

  return swift_deallocObject(v0, 64, 7);
}

void sub_D688C()
{
  _QWORD *v0;
  void **v1;
  uint64_t v2;
  void *v3;

  v1 = (void **)v0[2];
  v2 = static CoreDataFetcher.fetchPodcast(adamId:feedUrl:with:)(v0[4], v0[5], v0[6], v0[7]);
  v3 = *v1;
  *v1 = (void *)v2;

}

uint64_t sub_D68C0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_D68D0(uint64_t a1, void *a2)
{
  int *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  id v63;
  id v64;
  id v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD aBlock[5];
  uint64_t v82;
  id v83;

  v4 = (int *)type metadata accessor for ShowOffer(0);
  v78 = *((_QWORD *)v4 - 1);
  __chkstk_darwin(v4);
  v79 = v5;
  v6 = (char *)&v66 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7D58);
  __chkstk_darwin(v7);
  v9 = (char *)&v66 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
  __chkstk_darwin(v10);
  v12 = (char *)&v66 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v66 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v80 = (uint64_t)&v66 - v17;
  v18 = type metadata accessor for URL(0);
  v19 = *(_QWORD *)(v18 - 8);
  result = __chkstk_darwin(v18);
  v22 = (char *)&v66 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = *(_QWORD *)a1;
  if ((*(_QWORD *)a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v76 = v6;
  v77 = a2;
  v24 = v23;
  v25 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for FeedURLComposer(0)), "init");
  v26 = a1 + v4[13];
  v75 = v24;
  dispatch thunk of FeedURLComposer.feedURL(forOptionalURL:adamID:)(v26, v24);

  v69 = URL.absoluteString.getter(v27);
  v68 = v28;
  (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v18);
  v29 = *(unsigned __int8 *)(a1 + 24);
  v30 = ShowType.mtPodcastShowType.getter(v29);
  v31 = ShowType.rawValue.getter(v29);
  v32 = (uint64_t *)(a1 + v4[8]);
  v33 = v32[1];
  v73 = v31;
  v74 = v30;
  v72 = v34;
  if (v33)
  {
    v67 = *v32;
    v66 = v33;
  }
  else
  {
    v67 = 0;
    v66 = 0xE000000000000000;
  }
  v35 = *(_QWORD *)(a1 + 8);
  v36 = *(_QWORD *)(a1 + 16);
  v37 = (uint64_t *)(a1 + v4[14]);
  v38 = v37[1];
  v70 = *v37;
  v71 = v35;
  sub_267BC(a1 + v4[7], (uint64_t)v12, &qword_3BEB70);
  v39 = type metadata accessor for ArtworkModel(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 48))(v12, 1, v39) == 1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1459C((uint64_t)v12, &qword_3BEB70);
    v40 = v80;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56))(v80, 1, 1, v18);
  }
  else
  {
    v41 = kMTPreferredArtworkSize;
    v42 = type metadata accessor for CropCode(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v9, 1, 1, v42);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v43 = ArtworkModel.config(_:mode:format:crop:retainAspectRatio:)(1, 4, v9, 0, v41, v41);
    sub_1459C((uint64_t)v9, &qword_3B7D58);
    v44 = sub_145D8((uint64_t)v12, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
    v40 = v80;
    dispatch thunk of ArtworkLoaderConfig.url.getter(v44);
    swift_release(v43);
  }
  sub_267BC(v40, (uint64_t)v16, &qword_3B4370);
  v45 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48))(v16, 1, v18);
  if ((_DWORD)v45 == 1)
  {
    sub_1459C((uint64_t)v16, &qword_3B4370);
    v46 = 0;
    v47 = 0;
  }
  else
  {
    v46 = URL.absoluteString.getter(v45);
    v47 = v48;
    (*(void (**)(char *, uint64_t))(v19 + 8))(v16, v18);
  }
  v83 = 0;
  v49 = (uint64_t)v76;
  sub_14510(a1, (uint64_t)v76, type metadata accessor for ShowOffer);
  v50 = *(unsigned __int8 *)(v78 + 80);
  v51 = (v50 + 160) & ~v50;
  v52 = (_QWORD *)swift_allocObject(&unk_37F420, v51 + v79, v50 | 7);
  v53 = v77;
  v52[2] = &v83;
  v52[3] = v53;
  v54 = v68;
  v52[4] = v69;
  v52[5] = v54;
  v55 = v73;
  v52[6] = v74;
  v52[7] = v55;
  v56 = v71;
  v52[8] = v72;
  v52[9] = v56;
  v57 = v67;
  v52[10] = v36;
  v52[11] = v57;
  v58 = v70;
  v52[12] = v66;
  v52[13] = v58;
  v52[14] = v38;
  v52[15] = v46;
  v52[16] = v47;
  v52[17] = 0;
  v59 = v75;
  v52[18] = 0;
  v52[19] = v59;
  sub_3C56C(v49, (uint64_t)v52 + v51, type metadata accessor for ShowOffer);
  v60 = swift_allocObject(&unk_37F448, 32, 7);
  *(_QWORD *)(v60 + 16) = sub_D716C;
  *(_QWORD *)(v60 + 24) = v52;
  aBlock[4] = sub_72838;
  v82 = v60;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_D4A2C;
  aBlock[3] = &block_descriptor_33_0;
  v61 = _Block_copy(aBlock);
  v62 = v82;
  v63 = v53;
  swift_retain();
  swift_release(v62);
  objc_msgSend(v63, "performBlockAndWait:", v61);
  _Block_release(v61);
  LOBYTE(v61) = swift_isEscapingClosureAtFileLocation(v60, "", 121, 186, 32, 1);
  result = swift_release(v60);
  if ((v61 & 1) != 0)
    goto LABEL_15;
  if (v83)
  {
    v64 = v83;
    sub_1459C(v80, &qword_3B4370);
    v65 = v83;
    swift_release(v52);

    return (uint64_t)v64;
  }
LABEL_16:
  __break(1u);
  return result;
}

uint64_t sub_D6ED0()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;

  v1 = (int *)type metadata accessor for ShowOffer(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 160) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v6 = v0 + v4;
  swift_bridgeObjectRelease();
  v7 = v0 + v4 + v1[7];
  v8 = type metadata accessor for ArtworkModel(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v7, 1, v8))
  {
    swift_bridgeObjectRelease();
    v9 = *(unsigned __int8 *)(v7 + 32);
    if (v9 != 255)
      sub_3B5BC(*(_QWORD *)(v7 + 16), *(_QWORD *)(v7 + 24), v9);
    v10 = *(unsigned __int8 *)(v7 + 64);
    if (v10 != 255)
      sub_3D624(*(id *)(v7 + 56), v10);
    v11 = *(unsigned __int8 *)(v7 + 80);
    if (v11 != 255)
      sub_3D624(*(id *)(v7 + 72), v11);
    v12 = *(unsigned __int8 *)(v7 + 96);
    if (v12 != 255)
      sub_3D624(*(id *)(v7 + 88), v12);
    v13 = *(unsigned __int8 *)(v7 + 112);
    if (v13 != 255)
      sub_3D624(*(id *)(v7 + 104), v13);
    v14 = *(unsigned __int8 *)(v7 + 128);
    if (v14 != 255)
      sub_3D624(*(id *)(v7 + 120), v14);
    v15 = v7 + *(int *)(v8 + 44);
    v16 = type metadata accessor for ArtworkCrop(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v17 = v6 + v1[13];
  v18 = type metadata accessor for URL(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v19 + 48);
  if (!v20(v17, 1, v18))
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v17, v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v21 = v6 + v1[16];
  if (!v20(v21, 1, v18))
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v21, v18);
  v22 = v6 + v1[17];
  if (!v20(v22, 1, v18))
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v22, v18);
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

id sub_D716C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ShowOffer(0) - 8) + 80);
  return sub_D6648(*(void ***)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(void **)(v0 + 112), *(_QWORD *)(v0 + 120), *(void **)(v0 + 128), *(_QWORD *)(v0 + 136), *(void **)(v0 + 144), *(_QWORD *)(v0 + 152), v0 + ((v1 + 160) & ~v1));
}

uint64_t sub_D71D0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t TranscriptRequestInformation.init(deserializing:using:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  void (*v57)(uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(uint64_t, uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD v71[2];
  _QWORD v72[4];
  uint64_t v73;

  v73 = a2;
  v69 = a3;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7D60);
  v5 = __chkstk_darwin(v4);
  v68 = (uint64_t)&v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v70 = (uint64_t *)((char *)&v60 - v7);
  v8 = type metadata accessor for JSONObject(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v60 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v60 - v14;
  v16 = __chkstk_darwin(v13);
  v18 = (char *)&v60 - v17;
  __chkstk_darwin(v16);
  v20 = (char *)&v60 - v19;
  v21 = JSONObject.subscript.getter(0x4165646F73697065, 0xED000064496D6164);
  v22 = JSONObject.string.getter(v21);
  v24 = v23;
  v25 = *(void (**)(char *, uint64_t))(v9 + 8);
  v25(v20, v8);
  if (!v24)
  {
    v40 = type metadata accessor for JSONError(0);
    v41 = sub_F1C0((unint64_t *)&qword_3B0CB0, (void (*)(uint64_t))&type metadata accessor for JSONError, (uint64_t)&protocol conformance descriptor for JSONError);
    swift_allocError(v40, v41, 0, 0);
    v43 = v42;
    v44 = type metadata accessor for TranscriptRequestInformation(0);
    strcpy((char *)v43, "episodeAdamId");
    *(_WORD *)(v43 + 14) = -4864;
    *(_QWORD *)(v43 + 16) = v44;
    v45 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v40 - 8) + 104))(v43, enum case for JSONError.missingProperty(_:), v40);
    v46 = v73;
LABEL_12:
    swift_willThrow(v45);
    v52 = type metadata accessor for JSONContext(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 8))(v46, v52);
    return ((uint64_t (*)(uint64_t, uint64_t))v25)(a1, v8);
  }
  v66 = v22;
  v26 = JSONObject.subscript.getter(0x5465646F73697065, 0xEC000000656C7469);
  v65 = JSONObject.string.getter(v26);
  v28 = v27;
  v25(v18, v8);
  v29 = JSONObject.subscript.getter(0x6E6564496C6D7474, 0xEE00726569666974);
  v30 = JSONObject.string.getter(v29);
  v67 = a1;
  v32 = v31;
  v25(v15, v8);
  v64 = v32;
  if (!v32)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v47 = type metadata accessor for JSONError(0);
    v48 = sub_F1C0((unint64_t *)&qword_3B0CB0, (void (*)(uint64_t))&type metadata accessor for JSONError, (uint64_t)&protocol conformance descriptor for JSONError);
    swift_allocError(v47, v48, 0, 0);
    v50 = v49;
    v51 = type metadata accessor for TranscriptRequestInformation(0);
    strcpy((char *)v50, "ttmlIdentifier");
    *(_BYTE *)(v50 + 15) = -18;
    *(_QWORD *)(v50 + 16) = v51;
    v45 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v47 - 8) + 104))(v50, enum case for JSONError.missingProperty(_:), v47);
    v46 = v73;
    a1 = v67;
    goto LABEL_12;
  }
  v62 = v30;
  v63 = v28;
  v33 = v67;
  v34 = JSONObject.subscript.getter(0xD000000000000018, 0x800000000030E190);
  JSONObject.untyped.getter(v72, v34);
  v61 = (void (*)(uint64_t, uint64_t))v25;
  v25(v12, v8);
  if (v72[3])
  {
    v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7D70);
    v36 = swift_dynamicCast(v71, v72, (char *)&type metadata for Any + 8, v35, 6);
    v37 = v71[0];
    if (!v36)
      v37 = 0;
    v60 = v37;
    if (v36)
      v38 = v71[1];
    else
      v38 = 0;
    v39 = v36 ^ 1;
  }
  else
  {
    sub_1459C((uint64_t)v72, (uint64_t *)&unk_3BC540);
    v60 = 0;
    v38 = 0;
    v39 = 1;
  }
  JSONObject.subscript.getter(0x656372756F73, 0xE600000000000000);
  v54 = type metadata accessor for TranscriptSource(0);
  v55 = sub_F1C0(&qword_3B7D68, (void (*)(uint64_t))&type metadata accessor for TranscriptSource, (uint64_t)&protocol conformance descriptor for TranscriptSource);
  v56 = v70;
  JSONObject.stringEnumOrNil<A>()(v70, v54, v55);
  v57 = v61;
  v61((uint64_t)v18, v8);
  v58 = v68;
  sub_D7738((uint64_t)v56, v68);
  TranscriptRequestInformation.init(episodeAdamId:episodeTitle:ttmlIdentifier:selectedTextTimeInterval:source:)(v66, v24, v65, v63, v62, v64, v60, v38, v39, v58);
  v59 = type metadata accessor for JSONContext(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 8))(v73, v59);
  v57(v33, v8);
  return sub_1459C((uint64_t)v56, &qword_3B7D60);
}

uint64_t sub_D7738(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7D60);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_D7780@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return TranscriptRequestInformation.init(deserializing:using:)(a1, a2, a3);
}

uint64_t sub_D7794@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void (*v6)(_QWORD *, _QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[4];
  uint64_t v12;

  v2 = type metadata accessor for LayoutSubviews(0);
  v3 = sub_D7D3C();
  dispatch thunk of Collection.startIndex.getter(v2);
  dispatch thunk of Collection.endIndex.getter(v11, v2, v3);
  if (v12 == v11[0])
  {
    v4 = type metadata accessor for LayoutSubview(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, 1, 1, v4);
  }
  else
  {
    v6 = (void (*)(_QWORD *, _QWORD))dispatch thunk of Collection.subscript.read(v11, &v12, v2, v3);
    v8 = v7;
    v9 = type metadata accessor for LayoutSubview(0);
    v10 = *(_QWORD *)(v9 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(a1, v8, v9);
    v6(v11, 0);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v10 + 56))(a1, 0, 1, v9);
  }
}

uint64_t View.frame(multiplier:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  return View.frame(widthMultiplier:heightMultiplier:)(a1, a2, a3, a4, a4);
}

uint64_t View.frame(widthMultiplier:heightMultiplier:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  uint64_t v5;
  uint64_t v11;
  unint64_t v12;
  _QWORD v14[4];
  uint64_t v15;
  double v16;
  double v17;

  v11 = swift_allocObject(&unk_37F530, 48, 7);
  *(_QWORD *)(v11 + 16) = a1;
  *(_QWORD *)(v11 + 24) = a2;
  *(double *)(v11 + 32) = a4;
  *(double *)(v11 + 40) = a5;
  v14[2] = a1;
  v14[3] = a2;
  v15 = v5;
  v16 = a4;
  v17 = a5;
  v12 = sub_D7D94();
  sub_26AE84((uint64_t)sub_43E1C, (uint64_t)v14, (uint64_t)&type metadata for FrameMultiplierLayout, a1, v12, a2, a3);
  return swift_release(v11);
}

uint64_t sub_D794C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *a1;
  v2 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_3B7D78);
  v3 = sub_D79E0(&qword_3B7D80, (uint64_t)&protocol conformance descriptor for _LayoutRoot<A>);
  type metadata accessor for _VariadicView.Tree(255, v2, v1, v3);
  sub_D79E0(&qword_3B7D88, (uint64_t)&protocol conformance descriptor for _LayoutRoot<A>);
  return swift_getWitnessTable(&protocol conformance descriptor for <> _VariadicView.Tree<A, B>);
}

uint64_t sub_D79E0(unint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_3B7D78);
    result = swift_getWitnessTable(a2);
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for FrameMultiplierLayout()
{
  return &type metadata for FrameMultiplierLayout;
}

uint64_t sub_D7A34(uint64_t a1, char a2, uint64_t a3, char a4)
{
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE v15[16];

  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2C00);
  __chkstk_darwin(v7);
  v9 = &v15[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for LayoutSubview(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = &v15[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_D7794((uint64_t)v9);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
    return sub_445A4((uint64_t)v9);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v11 + 32))(v13, v9, v10);
  v15[8] = a2 & 1;
  v15[0] = a4 & 1;
  LayoutSubview.sizeThatFits(_:)(a1);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v11 + 8))(v13, v10);
}

uint64_t sub_D7BA0(double a1, double a2, double a3, double a4)
{
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v16;
  double v17;
  double v18;
  _BYTE v19[16];

  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2C00);
  __chkstk_darwin(v8);
  v10 = &v19[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = type metadata accessor for LayoutSubview(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = &v19[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_D7794((uint64_t)v10);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
    return sub_445A4((uint64_t)v10);
  v16 = (*(uint64_t (**)(_BYTE *, _BYTE *, uint64_t))(v12 + 32))(v14, v10, v11);
  v17 = static UnitPoint.topLeading.getter(v16);
  v19[8] = 0;
  v19[0] = 0;
  LayoutSubview.place(at:anchor:proposal:)(*(_QWORD *)&a3, 0, *(_QWORD *)&a4, 0, a1, a2, v17, v18);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v12 + 8))(v14, v11);
}

unint64_t sub_D7CF8()
{
  unint64_t result;

  result = qword_3B7D90;
  if (!qword_3B7D90)
  {
    result = swift_getWitnessTable(&unk_2F38F8);
    atomic_store(result, (unint64_t *)&qword_3B7D90);
  }
  return result;
}

unint64_t sub_D7D3C()
{
  unint64_t result;

  result = qword_3B7D98;
  if (!qword_3B7D98)
  {
    type metadata accessor for LayoutSubviews(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for LayoutSubviews);
    atomic_store(result, (unint64_t *)&qword_3B7D98);
  }
  return result;
}

uint64_t sub_D7D84()
{
  uint64_t v0;

  return swift_deallocObject(v0, 48, 7);
}

unint64_t sub_D7D94()
{
  unint64_t result;

  result = qword_3B7DA0;
  if (!qword_3B7DA0)
  {
    result = swift_getWitnessTable(&unk_2F3948);
    atomic_store(result, (unint64_t *)&qword_3B7DA0);
  }
  return result;
}

uint64_t AMSDialogRequest.shelfUniqueId.getter()
{
  void *v0;
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(v0, "identifier");
  if (!v1)
    return 0;
  v2 = v1;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

uint64_t sub_D7E3C()
{
  id *v0;
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(*v0, "identifier");
  if (!v1)
    return 0;
  v2 = v1;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

unint64_t sub_D7EA0(uint64_t a1)
{
  unint64_t result;

  result = sub_D7EC4();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_D7EC4()
{
  unint64_t result;

  result = qword_3B7DA8;
  if (!qword_3B7DA8)
  {
    sub_D7F0C();
    result = swift_getWitnessTable(&protocol conformance descriptor for AMSDialogRequest);
    atomic_store(result, (unint64_t *)&qword_3B7DA8);
  }
  return result;
}

unint64_t sub_D7F0C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_3B7DB0;
  if (!qword_3B7DB0)
  {
    v1 = objc_opt_self(AMSDialogRequest);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_3B7DB0);
  }
  return result;
}

uint64_t static EpisodeStateMachine<>.playState(episodeLockup:playStateController:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  __chkstk_darwin(a1);
  v5 = (uint64_t *)((char *)&v14 - v4);
  swift_storeEnumTagMultiPayload(a2, v6, 5);
  v7 = type metadata accessor for LibraryEpisodeLockup(0);
  v8 = swift_dynamicCastClass(a1, v7);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + OBJC_IVAR____TtC8ShelfKit20LibraryEpisodeLockup_uuid);
    v10 = *(_QWORD *)(v8 + OBJC_IVAR____TtC8ShelfKit20LibraryEpisodeLockup_uuid + 8);
    swift_retain();
    swift_bridgeObjectRetain();
    v11 = EpisodeStateController.stateMachine(for:)(v9, v10);
    swift_bridgeObjectRelease();
    dispatch thunk of EpisodeStateMachine.currentState.getter(v5);
    swift_release(a1);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup_adamId);
    result = AdamID.isEmpty.getter(v12);
    if ((result & 1) != 0)
      return result;
    v11 = EpisodeStateController.stateMachine(for:)(v12);
    dispatch thunk of EpisodeStateMachine.currentState.getter(v5);
  }
  swift_release(v11);
  sub_36668(a2);
  return sub_36624((uint64_t)v5, a2);
}

uint64_t sub_D8080@<X0>(_QWORD *a1@<X8>)
{
  return sub_D80A8((uint64_t)&unk_2F3BA0, (uint64_t)&unk_2F3BC8, a1);
}

uint64_t sub_D8094@<X0>(_QWORD *a1@<X8>)
{
  return sub_D80A8((uint64_t)&unk_2F3AA8, (uint64_t)&unk_2F3AD0, a1);
}

uint64_t sub_D80A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v7;

  KeyPath = swift_getKeyPath(a1);
  v7 = swift_getKeyPath(a2);
  static Published.subscript.getter(a3, v3, KeyPath, v7);
  swift_release(KeyPath);
  return swift_release(v7);
}

uint64_t LibraryShowProvider.pageContent.getter()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit19LibraryShowProvider_pageContent));
}

uint64_t LibraryShowProvider.interactionContextPage.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t KeyPath;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7DB8);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7DC0);
  __chkstk_darwin(v7);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_2F3A60);
  v11 = swift_getKeyPath(&unk_2F3A88);
  static Published.subscript.getter(&v30, v2, KeyPath, v11);
  swift_release(KeyPath);
  swift_release(v11);
  if (v30)
  {
    v12 = *(_QWORD *)(v30 + 16);
    v13 = *(_BYTE *)(v30 + 24);
    swift_release(v30);
  }
  else
  {
    v12 = 0;
    v13 = 1;
  }
  *(_QWORD *)a1 = v12;
  *(_BYTE *)(a1 + 8) = v13;
  v14 = swift_getKeyPath(&unk_2F3A60);
  v15 = swift_getKeyPath(&unk_2F3A88);
  static Published.subscript.getter(&v30, v2, v14, v15);
  swift_release(v14);
  swift_release(v15);
  v16 = v30;
  if (v30)
  {
    v18 = *(_QWORD *)(v30 + 32);
    v17 = *(_QWORD *)(v30 + 40);
    swift_bridgeObjectRetain();
    swift_release(v16);
  }
  else
  {
    v18 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8ShelfKit19LibraryShowProvider_showUUID);
    v17 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8ShelfKit19LibraryShowProvider_showUUID + 8);
    swift_bridgeObjectRetain();
  }
  v19 = a1 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B7DD0) + 64);
  *(_QWORD *)(a1 + 16) = v18;
  *(_QWORD *)(a1 + 24) = v17;
  v20 = swift_getKeyPath(&unk_2F3AA8);
  v21 = swift_getKeyPath(&unk_2F3AD0);
  static Published.subscript.getter(v6, v2, v20, v21);
  swift_release(v20);
  swift_release(v21);
  Loadable.item.getter(v4);
  sub_1459C((uint64_t)v6, &qword_3B7DB8);
  v22 = type metadata accessor for ShowEpisodesShelvesProvider.Result(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 48))(v9, 1, v22) == 1)
  {
    sub_1459C((uint64_t)v9, &qword_3B7DC0);
    v23 = type metadata accessor for EpisodeListSettings(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v19, 1, 1, v23);
  }
  else
  {
    v24 = &v9[*(int *)(v22 + 20)];
    v25 = type metadata accessor for EpisodeListSettings(0);
    v26 = *(_QWORD *)(v25 - 8);
    (*(void (**)(uint64_t, char *, uint64_t))(v26 + 16))(v19, v24, v25);
    sub_145D8((uint64_t)v9, type metadata accessor for ShowEpisodesShelvesProvider.Result);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v26 + 56))(v19, 0, 1, v25);
  }
  v27 = type metadata accessor for InteractionContext.Page(0);
  return swift_storeEnumTagMultiPayload(a1, v27, 3);
}

uint64_t LibraryShowProvider.showDetail.getter()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_2F3A60);
  v2 = swift_getKeyPath(&unk_2F3A88);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

uint64_t sub_D8468@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_2F3A60);
  v5 = swift_getKeyPath(&unk_2F3A88);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(KeyPath);
  result = swift_release(v5);
  *a2 = v7;
  return result;
}

uint64_t sub_D84E8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_2F3A60);
  v5 = swift_getKeyPath(&unk_2F3A88);
  v7 = v2;
  swift_retain(v2);
  swift_retain(v3);
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

uint64_t LibraryShowProvider.showDetail.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_2F3A60);
  v4 = swift_getKeyPath(&unk_2F3A88);
  v6 = a1;
  swift_retain(v1);
  return static Published.subscript.setter(&v6, v1, KeyPath, v4);
}

void (*LibraryShowProvider.showDetail.modify(_QWORD *a1))(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t KeyPath;
  uint64_t v5;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  KeyPath = swift_getKeyPath(&unk_2F3A60);
  v3[4] = KeyPath;
  v5 = swift_getKeyPath(&unk_2F3A88);
  v3[5] = v5;
  v3[6] = static Published.subscript.modify(v3, v1, KeyPath, v5);
  return sub_84118;
}

uint64_t LibraryShowProvider.$showDetail.getter()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  swift_beginAccess(v0 + OBJC_IVAR____TtC8ShelfKit19LibraryShowProvider__showDetail, v3, 33, 0);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7DE8);
  Published.projectedValue.getter(v1);
  return swift_endAccess(v3);
}

uint64_t sub_D86A8(_QWORD *a1)
{
  uint64_t v1;
  _BYTE v3[24];

  swift_beginAccess(*a1 + OBJC_IVAR____TtC8ShelfKit19LibraryShowProvider__showDetail, v3, 33, 0);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7DE8);
  Published.projectedValue.getter(v1);
  return swift_endAccess(v3);
}

uint64_t sub_D870C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  void (*v11)(_BYTE *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7DF0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = &v16[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v6);
  v10 = &v16[-v9 - 8];
  v11 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16);
  v11(&v16[-v9 - 8], a1, v4);
  v12 = *a2;
  v11(v8, (uint64_t)v10, v4);
  swift_beginAccess(v12 + OBJC_IVAR____TtC8ShelfKit19LibraryShowProvider__showDetail, v16, 33, 0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7DE8);
  Published.projectedValue.setter(v8, v13);
  swift_endAccess(v16);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v10, v4);
}

uint64_t LibraryShowProvider.$showDetail.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE v10[24];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7DF0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = &v10[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  swift_beginAccess(v1 + OBJC_IVAR____TtC8ShelfKit19LibraryShowProvider__showDetail, v10, 33, 0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7DE8);
  Published.projectedValue.setter(v6, v7);
  swift_endAccess(v10);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
}

void (*LibraryShowProvider.$showDetail.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7DF0);
  v3[10] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[11] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[12] = malloc(v6);
  v3[13] = malloc(v6);
  v7 = malloc(v6);
  v8 = OBJC_IVAR____TtC8ShelfKit19LibraryShowProvider__showDetail;
  v3[14] = v7;
  v3[15] = v8;
  swift_beginAccess(v1 + v8, v3, 33, 0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7DE8);
  v3[16] = v9;
  Published.projectedValue.getter(v9);
  swift_endAccess(v3);
  return sub_84474;
}

uint64_t sub_D89B8@<X0>(_QWORD *a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  _BYTE v9[24];

  v3 = (uint64_t *)(*a1 + OBJC_IVAR____TtC8ShelfKit19LibraryShowProvider_showDetailFetchFailedCallback);
  swift_beginAccess(v3, v9, 0, 0);
  v4 = *v3;
  v5 = v3[1];
  if (v4)
  {
    v6 = swift_allocObject(&unk_37F690, 32, 7);
    *(_QWORD *)(v6 + 16) = v4;
    *(_QWORD *)(v6 + 24) = v5;
    v7 = sub_327F0;
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  *a2 = v7;
  a2[1] = (uint64_t (*)())v6;
  return sub_76C34(v4, v5);
}

uint64_t sub_D8A4C(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[24];

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject(&unk_37F668, 32, 7);
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = sub_327F0;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = (uint64_t *)(*a2 + OBJC_IVAR____TtC8ShelfKit19LibraryShowProvider_showDetailFetchFailedCallback);
  swift_beginAccess(v7, v11, 1, 0);
  v8 = *v7;
  v9 = v7[1];
  *v7 = (uint64_t)v6;
  v7[1] = v5;
  sub_76C34(v3, v4);
  return sub_327A0(v8, v9);
}

uint64_t LibraryShowProvider.showDetailFetchFailedCallback.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  _BYTE v4[24];

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC8ShelfKit19LibraryShowProvider_showDetailFetchFailedCallback);
  swift_beginAccess(v0 + OBJC_IVAR____TtC8ShelfKit19LibraryShowProvider_showDetailFetchFailedCallback, v4, 0, 0);
  v2 = *v1;
  sub_76C34(*v1, v1[1]);
  return v2;
}

uint64_t LibraryShowProvider.showDetailFetchFailedCallback.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[24];

  v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC8ShelfKit19LibraryShowProvider_showDetailFetchFailedCallback);
  swift_beginAccess(v5, v9, 1, 0);
  v6 = *v5;
  v7 = v5[1];
  *v5 = a1;
  v5[1] = a2;
  return sub_327A0(v6, v7);
}

uint64_t (*LibraryShowProvider.showDetailFetchFailedCallback.modify(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC8ShelfKit19LibraryShowProvider_showDetailFetchFailedCallback, a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t LibraryShowProvider.__allocating_init(asPartOf:showUUID:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;

  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  v7 = sub_DC570(a1, a2, a3);
  swift_release(a1);
  return v7;
}

uint64_t LibraryShowProvider.init(asPartOf:showUUID:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = sub_DC570(a1, a2, a3);
  swift_release(a1);
  return v4;
}

Swift::Void __swiftcall LibraryShowProvider.loadPageContent()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t ObjectType;
  uint64_t v4;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = v0;
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit19LibraryShowProvider_libraryDataProvider + 8);
  ObjectType = swift_getObjectType();
  v4 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(v2 + 304))(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit19LibraryShowProvider_showUUID), *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit19LibraryShowProvider_showUUID + 8), ObjectType, v2);
  if (v4)
  {
    v5 = v4;
    KeyPath = swift_getKeyPath(&unk_2F3A60);
    v7 = swift_getKeyPath(&unk_2F3A88);
    v14 = v5;
    swift_retain();
    swift_retain();
    static Published.subscript.setter(&v14, v1, KeyPath, v7);
    v8 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit19LibraryShowProvider_graph);
    v9 = type metadata accessor for LocalShowPageFeedUpdater(0);
    swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
    swift_retain();
    swift_retain();
    v10 = sub_28BC50(v5, v8);
    v11 = OBJC_IVAR____TtC8ShelfKit19LibraryShowProvider_localShowPageFeedUpdater;
    v12 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit19LibraryShowProvider_localShowPageFeedUpdater);
    *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit19LibraryShowProvider_localShowPageFeedUpdater) = v10;
    swift_release(v12);
    v13 = *(_QWORD *)(v1 + v11);
    if (v13)
    {
      swift_retain();
      sub_28B4D4();
      swift_release(v13);
      sub_D8DD8(v5);
      sub_D9D44(v5);
      swift_release(v5);
    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t sub_D8DD8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t ObjectType;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t KeyPath;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(char *, char *, uint64_t);
  uint64_t v71;
  char *v72;
  void (*v73)(char *, uint64_t);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  char *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  char *v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  char *v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  id v166;
  uint64_t v167;
  _QWORD v168[2];
  __int128 v169;
  __int128 v170;
  __int128 v171;
  char v172;

  v2 = v1;
  v162 = a1;
  v156 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7FA8);
  v155 = *(_QWORD *)(v156 - 8);
  __chkstk_darwin(v156);
  v153 = (char *)&v126 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v154 = (char *)&v126 - v6;
  v152 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7FB0);
  v151 = *(_QWORD *)(v152 - 8);
  __chkstk_darwin(v152);
  v149 = (char *)&v126 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v150 = (char *)&v126 - v9;
  v147 = type metadata accessor for ObserverQueue(0);
  __chkstk_darwin(v147);
  v148 = (char *)&v126 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2B18);
  __chkstk_darwin(v11);
  v126 = (char *)&v126 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v129 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3368);
  v128 = *(_QWORD *)(v129 - 8);
  __chkstk_darwin(v129);
  v127 = (char *)&v126 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v132 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8028);
  v131 = *(_QWORD *)(v132 - 8);
  __chkstk_darwin(v132);
  v130 = (char *)&v126 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v161 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7FB8);
  v140 = *(_QWORD *)(v161 - 8);
  __chkstk_darwin(v161);
  v160 = (char *)&v126 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v159 = (char *)&v126 - v17;
  v136 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8030);
  __chkstk_darwin(v136);
  v134 = (char *)&v126 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v137 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8038);
  v158 = *(_QWORD *)(v137 - 8);
  __chkstk_darwin(v137);
  v133 = (char *)&v126 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v138 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8040);
  v139 = *(_QWORD *)(v138 - 8);
  __chkstk_darwin(v138);
  v135 = (char *)&v126 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v146 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8048);
  v164 = *(_QWORD *)(v146 - 8);
  __chkstk_darwin(v146);
  v145 = (char *)&v126 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v157 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8660);
  __chkstk_darwin(v157);
  v23 = (char *)&v126 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v26 = (char *)&v126 - v25;
  v27 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit19LibraryShowProvider_libraryDataProvider + 8);
  v163 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit19LibraryShowProvider_libraryDataProvider);
  ObjectType = swift_getObjectType();
  v30 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit19LibraryShowProvider_showUUID);
  v29 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit19LibraryShowProvider_showUUID + 8);
  v165 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 288))(v30, v29, ObjectType, v27);
  sub_DA5FC(a1, 0, v165, (uint64_t)v26);
  v31 = type metadata accessor for ModernShelf(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v26, 0, 1, v31);
  KeyPath = swift_getKeyPath(&unk_2F3BA0);
  v33 = swift_getKeyPath(&unk_2F3BC8);
  sub_267BC((uint64_t)v26, (uint64_t)v23, &qword_3B8660);
  swift_retain();
  static Published.subscript.setter(v23, v2, KeyPath, v33);
  sub_1459C((uint64_t)v26, &qword_3B8660);
  v34 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 320);
  v144 = v30;
  v143 = v29;
  v35 = v163;
  v141 = ObjectType;
  v168[0] = v34(v30, v29, ObjectType, v27);
  v36 = swift_allocObject(&unk_37F6B8, 24, 7);
  swift_weakInit(v36 + 16);
  v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8050);
  v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8058);
  v39 = sub_32914(&qword_3B8060, &qword_3B8050, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v40 = sub_32914(&qword_3B8068, &qword_3B8058, (uint64_t)&protocol conformance descriptor for Empty<A, B>);
  v41 = v145;
  Publisher.catch<A>(_:)(sub_DCEC0, v36, v37, v38, v39, v40);
  swift_release(v36);
  swift_release(v168[0]);
  v42 = sub_32914(&qword_3B8070, &qword_3B8048, (uint64_t)&protocol conformance descriptor for Publishers.Catch<A, B>);
  v43 = v146;
  v44 = Publisher.bufferedMulticast()(v146, v42);
  v45 = v165;
  (*(void (**)(char *, uint64_t))(v164 + 8))(v41, v43);
  v168[0] = v44;
  v46 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8078);
  v47 = sub_32914(&qword_3B8080, &qword_3B8078, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v48 = Publisher.eraseToAnyPublisher()(v46, v47);
  swift_release(v44);
  v49 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8ShelfKit19LibraryShowProvider_graph);
  v142 = v27;
  v50 = v27;
  v51 = v162;
  v52 = (char *)sub_DCEC8(v49, v35, v50, v2 + OBJC_IVAR____TtC8ShelfKit19LibraryShowProvider_storeDataProvider, v162);
  v146 = v53;
  v167 = 0;
  v168[0] = v48;
  v145 = v52;
  v166 = v52;
  v164 = v48;
  swift_retain();
  v54 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8088);
  v55 = sub_32914(&qword_3B8090, &qword_3B8088, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v56 = v134;
  Publisher.replaceError(with:)(&v167, v54, v55);
  v57 = sub_32914(&qword_3B8098, &qword_3B8030, (uint64_t)&protocol conformance descriptor for Publishers.ReplaceError<A>);
  v58 = v133;
  Publishers.CombineLatest.init(_:_:)(v168, v56, v46, v136, v47, v57);
  v59 = swift_allocObject(&unk_37F780, 24, 7);
  *(_QWORD *)(v59 + 16) = v45;
  v60 = swift_allocObject(&unk_37F7A8, 32, 7);
  *(_QWORD *)(v60 + 16) = sub_DD74C;
  *(_QWORD *)(v60 + 24) = v59;
  v61 = sub_32914(&qword_3B80A0, &qword_3B8038, (uint64_t)&protocol conformance descriptor for Publishers.CombineLatest<A, B>);
  swift_retain();
  v62 = v135;
  v63 = v137;
  Publisher.map<A>(_:)(sub_DD790, v60, v137, v157, v61);
  swift_release(v60);
  (*(void (**)(char *, uint64_t))(v158 + 8))(v58, v63);
  v158 = v2;
  v64 = v2 + OBJC_IVAR____TtC8ShelfKit19LibraryShowProvider__headerShelf;
  swift_beginAccess(v2 + OBJC_IVAR____TtC8ShelfKit19LibraryShowProvider__headerShelf, v168, 33, 0);
  v65 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7E18);
  v66 = v159;
  Published.projectedValue.getter(v65);
  swift_endAccess(v168);
  v67 = sub_32914(&qword_3B80A8, &qword_3B8040, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v68 = v138;
  Publisher<>.assign(to:)(v66, v138, v67);
  (*(void (**)(char *, uint64_t))(v139 + 8))(v62, v68);
  v69 = v140;
  v70 = *(void (**)(char *, char *, uint64_t))(v140 + 16);
  v72 = v160;
  v71 = v161;
  v70(v160, v66, v161);
  swift_beginAccess(v64, v168, 33, 0);
  Published.projectedValue.setter(v72, v65);
  swift_endAccess(v168);
  v73 = *(void (**)(char *, uint64_t))(v69 + 8);
  v73(v66, v71);
  if ((*(_BYTE *)(v51 + 24) & 1) == 0)
  {
    v74 = *(_QWORD *)(v51 + 16);
    v75 = v158;
    v76 = *(_QWORD *)(v158 + OBJC_IVAR____TtC8ShelfKit19LibraryShowProvider_highlightsProvider + 8);
    v77 = swift_getObjectType();
    v168[0] = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v76 + 24))(v74, v77, v76);
    v78 = sub_676C8();
    v166 = (id)static OS_dispatch_queue.main.getter(v78);
    v79 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
    v80 = (uint64_t)v126;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v79 - 8) + 56))(v126, 1, 1, v79);
    v81 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3370);
    v82 = sub_32914(&qword_3BEA40, &qword_3B3370, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
    v83 = sub_F1C0((unint64_t *)&qword_3B2B60, (void (*)(uint64_t))sub_676C8, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
    v84 = v127;
    Publisher.receive<A>(on:options:)(&v166, v80, v81, v78, v82, v83);
    sub_1459C(v80, &qword_3B2B18);

    swift_release(v168[0]);
    v85 = sub_32914(&qword_3B3378, &qword_3B3368, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
    v86 = v130;
    v87 = v129;
    Publisher.map<A>(_:)(sub_DACA4, 0, v129, v157, v85);
    (*(void (**)(char *, uint64_t))(v128 + 8))(v84, v87);
    v88 = v75 + OBJC_IVAR____TtC8ShelfKit19LibraryShowProvider__highlightShelf;
    swift_beginAccess(v75 + OBJC_IVAR____TtC8ShelfKit19LibraryShowProvider__highlightShelf, v168, 33, 0);
    v89 = v159;
    Published.projectedValue.getter(v65);
    swift_endAccess(v168);
    v90 = sub_32914(&qword_3B80D0, &qword_3B8028, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
    v91 = v132;
    Publisher<>.assign(to:)(v89, v132, v90);
    (*(void (**)(char *, uint64_t))(v131 + 8))(v86, v91);
    v93 = v160;
    v92 = v161;
    v70(v160, v89, v161);
    swift_beginAccess(v88, v168, 33, 0);
    Published.projectedValue.setter(v93, v65);
    swift_endAccess(v168);
    v73(v89, v92);
    v51 = v162;
  }
  v94 = *(_QWORD *)(v51 + 40);
  v168[0] = *(_QWORD *)(v51 + 32);
  v168[1] = v94;
  v169 = xmmword_2F3A30;
  v170 = 0u;
  v171 = 0u;
  v172 = 3;
  v95 = (*(uint64_t (**)(_QWORD *, uint64_t))(v142 + 272))(v168, v141);
  v96 = (uint64_t)v148;
  swift_storeEnumTagMultiPayload(v148, v147, 2);
  v97 = sub_830E4(v96);
  swift_release(v95);
  sub_145D8(v96, type metadata accessor for ObserverQueue);
  v98 = v158;
  v99 = v164;
  v100 = (void *)ShowEpisodesShelvesProvider.shelvesPublisher(showUUID:showPublisher:)(v144, v143, v164);
  v166 = v100;
  v101 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B80B0);
  v102 = sub_32914(&qword_3B80B8, &qword_3B80B0, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v103 = Publisher.mapToLoadable()(v101, v102);
  swift_release(v100);
  v167 = v103;
  v104 = v98 + OBJC_IVAR____TtC8ShelfKit19LibraryShowProvider__episodeShelfResult;
  swift_beginAccess(v98 + OBJC_IVAR____TtC8ShelfKit19LibraryShowProvider__episodeShelfResult, &v166, 33, 0);
  v105 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7E28);
  v106 = v150;
  Published.projectedValue.getter(v105);
  swift_endAccess(&v166);
  v107 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B80C0);
  v108 = sub_32914(&qword_3B80C8, &qword_3B80C0, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher<>.assign(to:)(v106, v107, v108);
  swift_release(v103);
  v109 = v151;
  v110 = v149;
  v111 = v152;
  (*(void (**)(char *, char *, uint64_t))(v151 + 16))(v149, v106, v152);
  swift_beginAccess(v104, &v166, 33, 0);
  Published.projectedValue.setter(v110, v105);
  swift_endAccess(&v166);
  (*(void (**)(char *, uint64_t))(v109 + 8))(v106, v111);
  v112 = v146;
  v113 = (void *)sub_DACF0(v146, v99, v97);
  v166 = v113;
  v114 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2970);
  v115 = sub_32914(&qword_3B2978, &qword_3B2970, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v116 = Publisher.mapToLoadable()(v114, v115);
  swift_release(v113);
  v167 = v116;
  v117 = v98 + OBJC_IVAR____TtC8ShelfKit19LibraryShowProvider__footerShelves;
  swift_beginAccess(v98 + OBJC_IVAR____TtC8ShelfKit19LibraryShowProvider__footerShelves, &v166, 33, 0);
  v118 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7E38);
  v119 = v154;
  Published.projectedValue.getter(v118);
  swift_endAccess(&v166);
  v120 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3390);
  v121 = sub_32914(&qword_3B33A8, &qword_3B3390, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher<>.assign(to:)(v119, v120, v121);
  swift_release(v116);
  v122 = v155;
  v123 = v153;
  v124 = v156;
  (*(void (**)(char *, char *, uint64_t))(v155 + 16))(v153, v119, v156);
  swift_beginAccess(v117, &v166, 33, 0);
  Published.projectedValue.setter(v123, v118);
  swift_endAccess(&v166);
  (*(void (**)(char *, uint64_t))(v122 + 8))(v119, v124);
  swift_release(v145);
  swift_release(v112);
  swift_release(v97);
  swift_release(v165);
  return swift_release(v164);
}

void sub_D9D44(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD v72[4];

  v2 = v1;
  v71 = a1;
  v3 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(0);
  v66 = *(_QWORD *)(v3 - 8);
  v67 = v3;
  __chkstk_darwin(v3);
  v65 = (char *)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7FA8);
  __chkstk_darwin(v60);
  v6 = (char *)&v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7FB0);
  __chkstk_darwin(v58);
  v8 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7FB8);
  __chkstk_darwin(v57);
  v10 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v54 - v12;
  v56 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7FC0);
  __chkstk_darwin(v56);
  v15 = (char *)&v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7FC8);
  v59 = *(_QWORD *)(v61 - 8);
  __chkstk_darwin(v61);
  v55 = (char *)&v54 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7FD0);
  v63 = *(_QWORD *)(v17 - 8);
  v64 = v17;
  __chkstk_darwin(v17);
  v62 = (char *)&v54 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7FD8);
  v69 = *(_QWORD *)(v19 - 8);
  v70 = v19;
  __chkstk_darwin(v19);
  v68 = (char *)&v54 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit19LibraryShowProvider_localShowPageFeedUpdater);
  if (v21)
  {
    swift_beginAccess(v21 + OBJC_IVAR____TtC8ShelfKit24LocalShowPageFeedUpdater__status, v72, 33, 0);
    swift_retain();
    v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7FE0);
    Published.projectedValue.getter(v22);
    swift_endAccess(v72);
    swift_release(v21);
    swift_beginAccess(v1 + OBJC_IVAR____TtC8ShelfKit19LibraryShowProvider__headerShelf, v72, 33, 0);
    v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7E18);
    Published.projectedValue.getter(v23);
    swift_endAccess(v72);
    swift_beginAccess(v1 + OBJC_IVAR____TtC8ShelfKit19LibraryShowProvider__highlightShelf, v72, 33, 0);
    Published.projectedValue.getter(v23);
    swift_endAccess(v72);
    swift_beginAccess(v1 + OBJC_IVAR____TtC8ShelfKit19LibraryShowProvider__episodeShelfResult, v72, 33, 0);
    v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7E28);
    Published.projectedValue.getter(v24);
    swift_endAccess(v72);
    swift_beginAccess(v1 + OBJC_IVAR____TtC8ShelfKit19LibraryShowProvider__footerShelves, v72, 33, 0);
    v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7E38);
    Published.projectedValue.getter(v25);
    swift_endAccess(v72);
    v26 = sub_32914(&qword_3B7FE8, &qword_3B7FC0, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
    v27 = sub_32914(&qword_3B7FF0, &qword_3B7FB8, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
    v28 = sub_32914(&qword_3B7FF8, &qword_3B7FB0, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
    v29 = sub_32914(&qword_3B8000, &qword_3B7FA8, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
    v53 = v28;
    v30 = v55;
    v31 = Publishers.PFCombineLatest5.init(_:_:_:_:_:)(v15, v13, v10, v8, v6, v56, v57, v57, v58, v60, v26, v27, v27, v53, v29);
    v32 = v65;
    OS_dispatch_queue.SchedulerTimeType.Stride.init(floatLiteral:)(v31, 0.3);
    v33 = sub_676C8();
    v34 = (void *)static OS_dispatch_queue.main.getter(v33);
    v72[0] = v34;
    v35 = sub_32914(&qword_3B8008, &qword_3B7FC8, (uint64_t)&protocol conformance descriptor for Publishers.PFCombineLatest5<A, B, C, D, E>);
    v36 = sub_F1C0((unint64_t *)&qword_3B2B60, (void (*)(uint64_t))sub_676C8, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
    v37 = v61;
    v38 = v62;
    Publisher.throttle<A>(for:scheduler:latest:)(v32, v72, 1, v61, v33, v35, v36);

    (*(void (**)(char *, uint64_t))(v66 + 8))(v32, v67);
    (*(void (**)(char *, uint64_t))(v59 + 8))(v30, v37);
    v39 = swift_allocObject(&unk_37F6B8, 24, 7);
    swift_weakInit(v39 + 16);
    v40 = (_QWORD *)swift_allocObject(&unk_37F6E0, 40, 7);
    v40[2] = v71;
    v40[3] = v2;
    v40[4] = v39;
    v41 = swift_allocObject(&unk_37F708, 32, 7);
    *(_QWORD *)(v41 + 16) = sub_DCDF0;
    *(_QWORD *)(v41 + 24) = v40;
    v42 = type metadata accessor for PageContent(0);
    v43 = sub_32914(&qword_3B8010, &qword_3B7FD0, (uint64_t)&protocol conformance descriptor for Publishers.Throttle<A, B>);
    swift_retain();
    swift_retain();
    v44 = v68;
    v45 = v64;
    Publisher.map<A>(_:)(sub_DCDFC, v41, v64, v42, v43);
    swift_release(v41);
    (*(void (**)(char *, uint64_t))(v63 + 8))(v38, v45);
    v46 = swift_allocObject(&unk_37F6B8, 24, 7);
    swift_weakInit(v46 + 16);
    v47 = sub_32914(&qword_3B8018, &qword_3B7FD8, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
    v48 = v70;
    v49 = Publisher<>.sink(receiveValue:)(sub_DCE60, v46, v70, v47);
    swift_release(v46);
    (*(void (**)(char *, uint64_t))(v69 + 8))(v44, v48);
    v50 = v2 + OBJC_IVAR____TtC8ShelfKit19LibraryShowProvider_subscriptions;
    swift_beginAccess(v50, v72, 33, 0);
    v51 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2088);
    v52 = sub_32914(&qword_3B2090, &qword_3B2088, (uint64_t)&protocol conformance descriptor for [A]);
    AnyCancellable.store<A>(in:)(v50, v51, v52);
    swift_endAccess(v72);
    swift_release(v49);
  }
  else
  {
    __break(1u);
  }
}

uint64_t LibraryShowProvider.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = v0 + OBJC_IVAR____TtC8ShelfKit19LibraryShowProvider__headerShelf;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7E18);
  v3 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8);
  v3(v1, v2);
  v3(v0 + OBJC_IVAR____TtC8ShelfKit19LibraryShowProvider__highlightShelf, v2);
  v4 = v0 + OBJC_IVAR____TtC8ShelfKit19LibraryShowProvider__episodeShelfResult;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7E28);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = v0 + OBJC_IVAR____TtC8ShelfKit19LibraryShowProvider__footerShelves;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7E38);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit19LibraryShowProvider_localShowPageFeedUpdater));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit19LibraryShowProvider_graph));
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit19LibraryShowProvider_highlightsProvider));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit19LibraryShowProvider_libraryDataProvider));
  sub_DCB48((_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit19LibraryShowProvider_showEpisodesShelvesProvider));
  __swift_destroy_boxed_opaque_existential_1((_QWORD *)(v0
                                                      + OBJC_IVAR____TtC8ShelfKit19LibraryShowProvider_storeDataProvider));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit19LibraryShowProvider_pageContent));
  v8 = v0 + OBJC_IVAR____TtC8ShelfKit19LibraryShowProvider__showDetail;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7DE8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  sub_327A0(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit19LibraryShowProvider_showDetailFetchFailedCallback), *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit19LibraryShowProvider_showDetailFetchFailedCallback + 8));
  return v0;
}

uint64_t LibraryShowProvider.__deallocating_deinit()
{
  uint64_t v0;

  LibraryShowProvider.deinit();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_DA5FC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::String v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  Swift::String v28;
  __int128 v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  void (*v38)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  char v72[24];

  v8 = (int *)type metadata accessor for ModernShelf(0);
  __chkstk_darwin(v8);
  v10 = (uint64_t *)((char *)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v11);
  v68 = (uint64_t)&v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
  __chkstk_darwin(v13);
  v15 = (char *)&v61 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0C38);
  __chkstk_darwin(v16);
  v65 = (char *)&v61 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B81E8);
  __chkstk_darwin(v18);
  v20 = (char *)&v61 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v67 = (uint64_t)&v61 - v22;
  v23 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)&v69 = *(_QWORD *)(a1 + 32);
  *((_QWORD *)&v69 + 1) = v23;
  swift_bridgeObjectRetain();
  v24._countAndFlagsBits = 2128928;
  v24._object = (void *)0xE300000000000000;
  String.append(_:)(v24);
  v25 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8ShelfKit13PodcastDetail_episodeToPlay);
  v62 = a4;
  v66 = v15;
  v64 = a2;
  if (v25)
  {
    v27 = *(_QWORD *)(v25 + 64);
    v26 = *(void **)(v25 + 72);
    swift_bridgeObjectRetain();
  }
  else
  {
    v27 = 0;
    v26 = (void *)0xE000000000000000;
  }
  v28._countAndFlagsBits = v27;
  v28._object = v26;
  String.append(_:)(v28);
  swift_bridgeObjectRelease();
  v29 = v69;
  v30 = type metadata accessor for ShowHeaderFactory();
  *(_QWORD *)(swift_initStackObject(v30, v72) + 16) = a1;
  swift_retain();
  v31 = sub_1695DC(v29, *((uint64_t *)&v29 + 1));
  swift_release(a1);
  swift_bridgeObjectRelease();
  if (v25)
  {
    sub_267BC(v25 + OBJC_IVAR____TtC8ShelfKit7Episode_listenNowReason, (uint64_t)v20, &qword_3B81E8);
    v32 = type metadata accessor for EpisodeListenNowReason(0);
    v33 = *(_QWORD *)(v32 - 8);
    v34 = v25;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v20, 1, v32) != 1)
    {
      v35 = v67;
      (*(void (**)(uint64_t, char *, uint64_t))(v33 + 32))(v67, v20, v32);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v33 + 56))(v35, 0, 1, v32);
      swift_retain();
LABEL_13:
      v41 = v64;
      v63 = v25;
      v42 = sub_21B6A0(v35);
      goto LABEL_15;
    }
  }
  else
  {
    v36 = type metadata accessor for EpisodeListenNowReason(0);
    v37 = v31;
    v38 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56);
    swift_retain();
    v38(v20, 1, 1, v36);
    v31 = v37;
    v34 = a3;
  }
  if (a3)
  {
    v39 = a3 + OBJC_IVAR____TtC8ShelfKit7Episode_listenNowReason;
    v35 = v67;
    sub_267BC(v39, v67, &qword_3B81E8);
  }
  else
  {
    v40 = type metadata accessor for EpisodeListenNowReason(0);
    v35 = v67;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v67, 1, 1, v40);
  }
  swift_retain();
  sub_1459C((uint64_t)v20, &qword_3B81E8);
  if (v34)
  {
    v25 = v34;
    goto LABEL_13;
  }
  v63 = 0;
  v42 = 0;
  v41 = v64;
LABEL_15:
  v61 = v42;
  v64 = v31;
  v43 = ShowHeader.merging(with:preferredEpisodeToPlay:)(v41, v42);
  v44 = type metadata accessor for Header(0);
  v45 = (uint64_t)v65;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v65, 1, 1, v44);
  v46 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8750);
  v47 = swift_allocObject(v46, 72, 7);
  *(_OWORD *)(v47 + 16) = xmmword_2EA0D0;
  *(_QWORD *)(v47 + 56) = type metadata accessor for ShowHeader(0);
  *(_QWORD *)(v47 + 64) = sub_F1C0(&qword_3B81F0, (void (*)(uint64_t))type metadata accessor for ShowHeader, (uint64_t)&protocol conformance descriptor for ShowHeader);
  *(_QWORD *)(v47 + 32) = v43;
  v48 = type metadata accessor for URL(0);
  v49 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 56);
  v50 = (uint64_t)v66;
  v49(v66, 1, 1, v48);
  v51 = type metadata accessor for ImpressionMetrics(0);
  v69 = 0u;
  v70 = 0u;
  v71 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 56))(v68, 1, 1, v51);
  v52 = v8[8];
  *((_BYTE *)v10 + v52) = 3;
  v53 = (uint64_t)v10 + v8[9];
  v49((char *)v53, 1, 1, v48);
  *v10 = 1869768008;
  v10[1] = 0xE400000000000000;
  sub_15BD4(v45, (uint64_t)v10 + v8[5], &qword_3B0C38);
  v54 = (char *)v10 + v8[6];
  *(_WORD *)v54 = 40;
  *((_WORD *)v54 + 3) = 256;
  *(_DWORD *)(v54 + 2) = 0;
  *((_QWORD *)v54 + 1) = 1;
  *(_QWORD *)((char *)v10 + v8[7]) = v47;
  swift_retain();
  sub_15B8C(v50, v53);
  *((_BYTE *)v10 + v8[10]) = 1;
  *((_BYTE *)v10 + v8[11]) = 0;
  v55 = (uint64_t)v10 + v8[12];
  if (*((_QWORD *)&v70 + 1))
  {
    sub_F4D8(&v69, v55);
  }
  else
  {
    v56 = (unint64_t)v70;
    *(_OWORD *)v55 = v69;
    *(_OWORD *)(v55 + 16) = v56;
    *(_QWORD *)(v55 + 32) = v71;
  }
  v57 = v61;
  v58 = v62;
  v59 = v67;
  sub_15BD4(v68, (uint64_t)v10 + v8[13], (uint64_t *)&unk_3B8790);
  *((_BYTE *)v10 + v52) = 3;
  sub_3C56C((uint64_t)v10, v58, type metadata accessor for ModernShelf);
  swift_release(v43);
  swift_release(v64);
  swift_release(v57);
  swift_release(v63);
  return sub_1459C(v59, &qword_3B81E8);
}

uint64_t sub_DABC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Strong;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  _BYTE v12[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v12, 0, 0);
  Strong = swift_weakLoadStrong(v2);
  if (Strong)
  {
    v4 = Strong;
    v5 = Strong + OBJC_IVAR____TtC8ShelfKit19LibraryShowProvider_showDetailFetchFailedCallback;
    swift_beginAccess(Strong + OBJC_IVAR____TtC8ShelfKit19LibraryShowProvider_showDetailFetchFailedCallback, &v11, 0, 0);
    v6 = *(void (**)(uint64_t))v5;
    if (*(_QWORD *)v5)
    {
      v7 = *(_QWORD *)(v5 + 8);
      sub_76C34((uint64_t)v6, v7);
      v8 = swift_release(v4);
      v6(v8);
      sub_327A0((uint64_t)v6, v7);
    }
    else
    {
      swift_release(v4);
    }
  }
  v9 = type metadata accessor for PodcastDetail(0);
  return Empty.init(completeImmediately:)(1, v9, &type metadata for Never, &protocol witness table for Never);
}

uint64_t sub_DACA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  sub_14510(a1, a2, type metadata accessor for ModernShelf);
  v3 = type metadata accessor for ModernShelf(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(a2, 0, 1, v3);
}

uint64_t sub_DACF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v29 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B80D8);
  v6 = *(_QWORD *)(v5 - 8);
  v30 = v5;
  v31 = v6;
  __chkstk_darwin(v5);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B80E0);
  v34 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B80E8);
  v35 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = a1;
  swift_retain();
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B36A8);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2970);
  v15 = sub_32914(&qword_3B36B0, &qword_3B36A8, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v16 = sub_32914(&qword_3B2978, &qword_3B2970, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.catch<A>(_:)(sub_DD7B8, a2, v13, v14, v15, v16);
  swift_release(a2);
  v36 = v29;
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4BB8);
  v18 = sub_32914(&qword_3B80F0, &qword_3B80D8, (uint64_t)&protocol conformance descriptor for Publishers.Catch<A, B>);
  v19 = sub_32914(&qword_3B4BC0, &qword_3B4BB8, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v20 = v30;
  Publisher.combineLatest<A>(_:)(&v36, v30, v17, v18, v19);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v8, v20);
  v21 = swift_allocObject(&unk_37F7D0, 32, 7);
  *(_QWORD *)(v21 + 16) = sub_DD7C0;
  *(_QWORD *)(v21 + 24) = 0;
  v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3BF7B0);
  v23 = sub_32914(&qword_3B80F8, &qword_3B80E0, (uint64_t)&protocol conformance descriptor for Publishers.CombineLatest<A, B>);
  v24 = v32;
  Publisher.map<A>(_:)(sub_DD7C4, v21, v32, v22, v23);
  swift_release(v21);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v10, v24);
  v25 = sub_32914(&qword_3B8100, &qword_3B80E8, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v26 = v33;
  v27 = Publisher.eraseToAnyPublisher()(v33, v25);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v12, v26);
  return v27;
}

uint64_t sub_DAFF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Swift::String v27;
  uint64_t v28;
  uint64_t v29;
  Swift::String v30;
  unint64_t v31;
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t inited;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unsigned __int8 v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char v76;
  uint64_t v77;
  char v78[72];

  v59 = a3;
  v62 = type metadata accessor for ScalarDictionary(0);
  v61 = *(_QWORD *)(v62 - 8);
  __chkstk_darwin(v62);
  v60 = (char *)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v59 - v9;
  v65 = type metadata accessor for PageMetrics(0);
  v64 = *(_QWORD *)(v65 - 8);
  __chkstk_darwin(v65);
  v63 = (char *)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = type metadata accessor for PageID(0);
  v12 = *(_QWORD *)(v69 - 8);
  __chkstk_darwin(v69);
  v68 = (char *)&v59 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v59 - v16;
  v18 = *(_QWORD *)(a2 + 16);
  v19 = *(_BYTE *)(a2 + 24);
  v20 = static MetricsPageType.show.getter(v15);
  v22 = v20;
  v23 = v21;
  v66 = a4;
  v67 = a1;
  if ((v19 & 1) != 0)
  {
    v24 = static MetricsPageID.unknown.getter();
    v26 = v25;
    v71 = v22;
    v72 = v23;
    v27._countAndFlagsBits = 95;
    v27._object = (void *)0xE100000000000000;
    String.append(_:)(v27);
    v28 = v24;
    v29 = v26;
  }
  else
  {
    v71 = v20;
    v72 = v21;
    v30._countAndFlagsBits = 95;
    v30._object = (void *)0xE100000000000000;
    String.append(_:)(v30);
    v70 = v18;
    v31 = sub_144B4();
    v28 = BinaryInteger.description.getter(&type metadata for UInt64, v31);
  }
  String.append(_:)(*(Swift::String *)&v28);
  swift_bridgeObjectRelease();
  PageID.init(with:)(v71, v72);
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v68, v17, v69);
  v33 = static MetricsPageType.show.getter(v32);
  v35 = v34;
  v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B6F60);
  inited = swift_initStackObject(v36, v78);
  *(_OWORD *)(inited + 16) = xmmword_2EA0D0;
  *(_QWORD *)(inited + 32) = 0x656C746974;
  *(_QWORD *)(inited + 40) = 0xE500000000000000;
  if (*(_QWORD *)(a2 + 56))
  {
    v38 = *(_QWORD *)(a2 + 48);
    v39 = *(_QWORD *)(a2 + 56);
  }
  else
  {
    v38 = 0;
    v39 = 0xE000000000000000;
  }
  *(_QWORD *)(inited + 48) = v38;
  *(_QWORD *)(inited + 56) = v39;
  swift_bridgeObjectRetain();
  v40 = sub_288078(inited);
  swift_getObjectType();
  v41 = HighlightsProviderProtocol.isSharedContent(_:)(v18, v19);
  if ((v19 & 1) != 0)
  {
    v42 = 0;
    v43 = 0;
  }
  else
  {
    v71 = v18;
    v44 = sub_144B4();
    v42 = BinaryInteger.description.getter(&type metadata for UInt64, v44);
  }
  v71 = v42;
  v72 = v43;
  v73 = v33;
  v74 = v35;
  v75 = v40;
  v76 = v41 & 1;
  v77 = 0;
  ScalarDictionary.init()(v42);
  v45 = sub_C97A8((uint64_t)_swiftEmptyArrayStorage);
  v46 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B89A0);
  v47 = type metadata accessor for PageMetrics.Instruction(0);
  v48 = swift_allocObject(v46, ((*(unsigned __int8 *)(*(_QWORD *)(v47 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v47 - 8) + 80))+ 2 * *(_QWORD *)(*(_QWORD *)(v47 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v47 - 8) + 80) | 7);
  *(_OWORD *)(v48 + 16) = xmmword_2EA080;
  LOBYTE(v70) = 0;
  PageMetrics.Instruction.init(eventType:)(&v70);
  LOBYTE(v70) = 1;
  PageMetrics.Instruction.init(eventType:)(&v70);
  v49 = MetricsPageFields.metricsFields.getter();
  v50 = v61;
  v51 = v60;
  v52 = v62;
  (*(void (**)(char *, char *, uint64_t))(v61 + 16))(v60, v10, v62);
  v53 = v63;
  PageMetrics.init(instructions:pageFields:custom:clickLocationFields:)(v48, v49, v51, v45);
  (*(void (**)(char *, uint64_t))(v50 + 8))(v10, v52);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v54 = v17;
  v55 = v69;
  (*(void (**)(char *, uint64_t))(v12 + 8))(v54, v69);
  v56 = v66;
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v66, v68, v55);
  v57 = type metadata accessor for ModernPage(0);
  (*(void (**)(uint64_t, char *, uint64_t))(v64 + 32))(v56 + *(int *)(v57 + 20), v53, v65);
  *(_QWORD *)(v56 + *(int *)(v57 + 24)) = v67;
  return swift_bridgeObjectRetain();
}

uint64_t sub_DB478@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  unint64_t v32;
  unsigned int (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t result;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *, _QWORD, uint64_t, uint64_t);
  unint64_t v48;
  _QWORD *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t Strong;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _BYTE *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  unint64_t v99[3];

  v90 = a8;
  v91 = a3;
  v95 = a6;
  v96 = a7;
  v92 = a4;
  v93 = a5;
  v12 = type metadata accessor for ErrorModel(0);
  __chkstk_darwin(v12);
  v89 = (uint64_t *)((char *)&v86 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v94 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B35D0);
  __chkstk_darwin(v94);
  v88 = (uint64_t)&v86 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v17 = (char *)&v86 - v16;
  v18 = type metadata accessor for ModernPage(0);
  __chkstk_darwin(v18);
  v97 = (uint64_t)&v86 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8660);
  __chkstk_darwin(v20);
  v22 = (char *)&v86 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v25 = (char *)&v86 - v24;
  v26 = type metadata accessor for ModernShelf(0);
  v27 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v87 = (uint64_t)&v86 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  v31 = (char *)&v86 - v30;
  v32 = *a1;
  sub_267BC(a2, (uint64_t)v25, &qword_3B8660);
  v33 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48);
  if (v33(v25, 1, v26) == 1)
  {
    sub_1459C((uint64_t)v25, &qword_3B8660);
    *a9 = 0;
    v34 = type metadata accessor for PageContent(0);
    return swift_storeEnumTagMultiPayload(a9, v34, 0);
  }
  v86 = a9;
  sub_3C56C((uint64_t)v25, (uint64_t)v31, type metadata accessor for ModernShelf);
  v36 = (v32 >> 57) & 0x78 | v32 & 7;
  if (v36 == 31)
  {
    v98 = 1;
    sub_14510((uint64_t)v31, (uint64_t)v17, type metadata accessor for ModernShelf);
    v47 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56);
    v47(v17, 0, 2, v26);
    v90 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3BF7B0);
    Loadable.map<A>(_:)(v99, sub_192A50, 0, v94, v90);
    v48 = v99[0];
    sub_644D8(v99[0]);
    v49 = sub_10E28(0, 1, 1, _swiftEmptyArrayStorage);
    v51 = v49[2];
    v50 = v49[3];
    if (v51 >= v50 >> 1)
      v49 = sub_10E28((_QWORD *)(v50 > 1), v51 + 1, 1, v49);
    v49[2] = v51 + 1;
    v49[v51 + 4] = v48;
    sub_64510(v48);
    sub_1459C((uint64_t)v17, &qword_3B35D0);
    sub_267BC(v91, (uint64_t)v22, &qword_3B8660);
    if (v33(v22, 1, v26) == 1)
    {
      sub_1459C((uint64_t)v22, &qword_3B8660);
      v52 = v93;
    }
    else
    {
      v59 = v87;
      sub_3C56C((uint64_t)v22, v87, type metadata accessor for ModernShelf);
      v60 = v88;
      sub_14510(v59, v88, type metadata accessor for ModernShelf);
      v47((char *)v60, 0, 2, v26);
      Loadable.map<A>(_:)(v99, sub_192A50, 0, v94, v90);
      v61 = v99[0];
      sub_644D8(v99[0]);
      if ((swift_isUniquelyReferenced_nonNull_native(v49) & 1) == 0)
        v49 = sub_10E28(0, v49[2] + 1, 1, v49);
      v52 = v93;
      v63 = v49[2];
      v62 = v49[3];
      if (v63 >= v62 >> 1)
        v49 = sub_10E28((_QWORD *)(v62 > 1), v63 + 1, 1, v49);
      v49[2] = v63 + 1;
      v49[v63 + 4] = v61;
      sub_64510(v61);
      sub_1459C(v60, &qword_3B35D0);
      sub_145D8(v59, type metadata accessor for ModernShelf);
    }
    v64 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7DB8);
    Loadable.map<A>(_:)(v99, sub_2B2D0, 0, v64, v90);
    v65 = v99[0];
    sub_644D8(v99[0]);
    if ((swift_isUniquelyReferenced_nonNull_native(v49) & 1) == 0)
      v49 = sub_10E28(0, v49[2] + 1, 1, v49);
    v67 = v49[2];
    v66 = v49[3];
    if (v67 >= v66 >> 1)
      v49 = sub_10E28((_QWORD *)(v66 > 1), v67 + 1, 1, v49);
    v49[2] = v67 + 1;
    v49[v67 + 4] = v65;
    sub_64510(v65);
    sub_644D8(v52);
    v69 = v49[2];
    v68 = v49[3];
    if (v69 >= v68 >> 1)
      v49 = sub_10E28((_QWORD *)(v68 > 1), v69 + 1, 1, v49);
    v70 = (uint64_t)v86;
    v49[2] = v69 + 1;
    v49[v69 + 4] = v52;
    LOBYTE(v99[0]) = v98;
    v99[1] = (unint64_t)_swiftEmptyArrayStorage;
    v99[2] = (unint64_t)v49;
    v71 = ModernShelfListBuilder.buildList()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v72 = v97;
    sub_DAFF8(v71, v95, v96, v97);
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&qword_3B89B0);
    v73 = sub_14510(v72, v70, type metadata accessor for ModernPage);
    static PageRenderContentTypes.unspecified.getter(v73);
    v74 = type metadata accessor for PageContent(0);
    swift_storeEnumTagMultiPayload(v70, v74, 3);
    sub_145D8(v72, type metadata accessor for ModernPage);
    v46 = (uint64_t)v31;
    return sub_145D8(v46, type metadata accessor for ModernShelf);
  }
  if (v36 == 95 || v36 == 63)
  {
    v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0A48);
    v38 = *(_QWORD *)(v27 + 72);
    v39 = *(unsigned __int8 *)(v27 + 80);
    v40 = (v39 + 32) & ~v39;
    v41 = swift_allocObject(v37, v40 + 2 * v38, v39 | 7);
    *(_OWORD *)(v41 + 16) = xmmword_2EA080;
    sub_14510((uint64_t)v31, v41 + v40, type metadata accessor for ModernShelf);
    static ModernShelf.loadingShelf(id:)(0x53676E6964616F6CLL, 0xEE004449666C6568, (_QWORD *)(v41 + v40 + v38));
    v42 = v97;
    sub_DAFF8(v41, v95, v96, v97);
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&qword_3B89B0);
    v43 = (uint64_t)v86;
    v44 = sub_14510(v42, (uint64_t)v86, type metadata accessor for ModernPage);
    static PageRenderContentTypes.unspecified.getter(v44);
    v45 = type metadata accessor for PageContent(0);
    swift_storeEnumTagMultiPayload(v43, v45, 3);
    sub_145D8(v42, type metadata accessor for ModernPage);
    v46 = (uint64_t)v31;
    return sub_145D8(v46, type metadata accessor for ModernShelf);
  }
  v53 = v90 + 16;
  swift_beginAccess(v90 + 16, v99, 0, 0);
  Strong = swift_weakLoadStrong(v53);
  v55 = Strong;
  if (!Strong)
  {
    v57 = (uint64_t)v31;
    v58 = FindOrCreateEpisodeOfferContentIDsIntentsIntentImplementation.init();
    goto LABEL_27;
  }
  v56 = *(_QWORD *)(Strong + OBJC_IVAR____TtC8ShelfKit19LibraryShowProvider_localShowPageFeedUpdater);
  swift_retain();
  result = swift_release(v55);
  if (v56)
  {
    v57 = (uint64_t)v31;
    v55 = swift_allocObject(&unk_37F730, 32, 7);
    *(_QWORD *)(v55 + 16) = sub_DCE68;
    *(_QWORD *)(v55 + 24) = v56;
    v58 = sub_DF7D8;
LABEL_27:
    v75 = swift_allocObject(&unk_37F758, 32, 7);
    *(_QWORD *)(v75 + 16) = v58;
    *(_QWORD *)(v75 + 24) = v55;
    v76 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0A48);
    v77 = *(_QWORD *)(v27 + 72);
    v78 = *(unsigned __int8 *)(v27 + 80);
    v79 = (v78 + 32) & ~v78;
    v80 = swift_allocObject(v76, v79 + 2 * v77, v78 | 7);
    *(_OWORD *)(v80 + 16) = xmmword_2EA080;
    sub_14510(v57, v80 + v79, type metadata accessor for ModernShelf);
    v81 = v89;
    static ErrorModel.offline(_:)((uint64_t)sub_DF7D8, v75, v89);
    static ModernShelf.errorShelf(id:_:)(0x685320726F727245, 0xEB00000000666C65, (uint64_t)v81, (_QWORD *)(v80 + v79 + v77));
    sub_145D8((uint64_t)v81, type metadata accessor for ErrorModel);
    v82 = v97;
    sub_DAFF8(v80, v95, v96, v97);
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&qword_3B89B0);
    v83 = (uint64_t)v86;
    v84 = sub_14510(v82, (uint64_t)v86, type metadata accessor for ModernPage);
    static PageRenderContentTypes.unspecified.getter(v84);
    v85 = type metadata accessor for PageContent(0);
    swift_storeEnumTagMultiPayload(v83, v85, 3);
    swift_release(v75);
    sub_145D8(v82, type metadata accessor for ModernPage);
    v46 = v57;
    return sub_145D8(v46, type metadata accessor for ModernShelf);
  }
  __break(1u);
  return result;
}

uint64_t sub_DBD94(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8ShelfKit24LocalShowPageFeedUpdater_internalStatusSubscription);
  if (v1)
  {
    swift_retain();
    AnyCancellable.cancel()();
    swift_release(v1);
  }
  return sub_28B4D4();
}

uint64_t sub_DBDDC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  _BYTE v6[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v6, 0, 0);
  result = swift_weakLoadStrong(v2);
  if (result)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + OBJC_IVAR____TtC8ShelfKit19LibraryShowProvider_pageContent);
    swift_retain(v5);
    swift_release(v4);
    CurrentValueSubject.send(_:)();
    return swift_release(v5);
  }
  return result;
}

uint64_t sub_DBE60@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t *a6@<X8>)
{
  char v10;
  _BYTE *v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  _BYTE v20[24];

  if ((*a1 & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    v11 = (_BYTE *)(a2 + OBJC_IVAR____TtC8ShelfKit13PodcastDetail_displayType);
    swift_beginAccess(a2 + OBJC_IVAR____TtC8ShelfKit13PodcastDetail_displayType, v20, 0, 0);
    if (*v11)
    {
      if (*v11 == 1)
      {
        v12 = 0xE400000000000000;
        v13 = 1684627824;
      }
      else
      {
        v13 = 0x646972627968;
        v12 = 0xE600000000000000;
      }
      v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v13, v12, 1701147238, 0xE400000000000000, 0);
      swift_bridgeObjectRelease();
      v10 = v14 ^ 1;
    }
    else
    {
      swift_bridgeObjectRelease();
      v10 = 0;
    }
  }
  v15 = a3[3];
  v16 = a3[4];
  __swift_project_boxed_opaque_existential_1(a3, v15);
  v17 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))(v16 + 160))(a4, a5 & 1, v10 & 1, v15, v16);
  v18 = Promise.publisher.getter(v17);
  result = swift_release(v17);
  *a6 = v18;
  return result;
}

uint64_t sub_DBF90@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v7[40];

  v3 = *(_QWORD *)(*(_QWORD *)result + 16);
  if (!v3
    || (v4 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8ShelfKit5Shelf_items), !*(_QWORD *)(v4 + 16))
    || (sub_150C8(v4 + 32, (uint64_t)v7),
        v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0948),
        v6 = type metadata accessor for ShowHeader(0),
        result = swift_dynamicCast(a2, v7, v5, v6, 6),
        (result & 1) == 0))
  {
    *a2 = 0;
  }
  return result;
}

void sub_DC01C()
{
  id v0;
  NSURL *v1;
  void *v2;
  void *v3;
  Class isa;

  v0 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
  URL._bridgeToObjectiveC()(v1);
  v3 = v2;
  sub_2887D4((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for OpenExternalURLOptionsKey(0);
  sub_F1C0(&qword_3B07E8, type metadata accessor for OpenExternalURLOptionsKey, (uint64_t)&unk_2E9F44);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v0, "openURL:options:completionHandler:", v3, isa, 0);

}

uint64_t sub_DC0FC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8128);
  v39 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v38 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *a1;
  static Logger.js.getter(v13);
  v14 = swift_errorRetain(v12);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v36 = v8;
    v17 = swift_slowAlloc(12, -1);
    v35 = v9;
    v18 = (uint8_t *)v17;
    v34 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v18 = 138412290;
    v19 = _convertErrorToNSError(_:)(v12);
    v37 = a2;
    v20 = v6;
    v21 = a3;
    v22 = v19;
    v40 = v19;
    v8 = v36;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41);
    v23 = v34;
    *v34 = v22;
    a3 = v21;
    v6 = v20;
    a2 = v37;
    swift_errorRelease(v12);
    _os_log_impl(&dword_0, v15, v16, "LibraryShowPresenter: failed to load store footer: %@", v18, 0xCu);
    v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8E70);
    swift_arrayDestroy(v23, 1, v24);
    swift_slowDealloc(v23, -1, -1);
    v25 = v18;
    v9 = v35;
    swift_slowDealloc(v25, -1, -1);
  }
  else
  {
    swift_errorRelease(v12);
  }

  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v40 = a2;
  v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8078);
  v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3BF7B0);
  v28 = sub_32914(&qword_3B8080, &qword_3B8078, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v29 = v38;
  Publisher.map<A>(_:)(sub_DF540, 0, v26, v27, v28);
  v30 = sub_32914(&qword_3B8130, &qword_3B8128, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v31 = Publisher.eraseToAnyPublisher()(v6, v30);
  result = (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v29, v6);
  *a3 = v31;
  return result;
}

uint64_t sub_DC3C0@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_DC410(a1, (uint64_t)&unk_2F3AA8, (uint64_t)&unk_2F3AD0, a2);
}

uint64_t sub_DC3E4(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_DC474(a1, a2, a3, a4, &qword_3B7DB8, (uint64_t)&unk_2F3AA8, (uint64_t)&unk_2F3AD0);
}

uint64_t sub_DC410@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;

  v6 = *a1;
  KeyPath = swift_getKeyPath(a2);
  v8 = swift_getKeyPath(a3);
  static Published.subscript.getter(a4, v6, KeyPath, v8);
  swift_release(KeyPath);
  return swift_release(v8);
}

uint64_t sub_DC474(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t KeyPath;
  uint64_t v20;
  uint64_t v22;

  v12 = __swift_instantiateConcreteTypeFromMangledName(a5);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v22 - v16;
  sub_267BC(a1, (uint64_t)&v22 - v16, a5);
  v18 = *a2;
  KeyPath = swift_getKeyPath(a6);
  v20 = swift_getKeyPath(a7);
  sub_267BC((uint64_t)v17, (uint64_t)v15, a5);
  swift_retain();
  static Published.subscript.setter(v15, v18, KeyPath, v20);
  return sub_1459C((uint64_t)v17, a5);
}

uint64_t sub_DC570(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t, uint64_t);
  void (*v27)(uint64_t, char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  _BYTE *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76[3];
  uint64_t v77;

  v4 = v3;
  v74 = a2;
  v75 = a3;
  v73 = a1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7DE8);
  v71 = *(_QWORD *)(v5 - 8);
  v72 = v5;
  __chkstk_darwin(v5);
  v70 = (char *)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = type metadata accessor for PageContent(0);
  __chkstk_darwin(v69);
  v68 = (char *)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7E38);
  v66 = *(_QWORD *)(v8 - 8);
  v67 = v8;
  __chkstk_darwin(v8);
  v65 = (char *)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7E28);
  v63 = *(_QWORD *)(v10 - 8);
  v64 = v10;
  __chkstk_darwin(v10);
  v62 = (char *)&v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7DB8);
  v12 = __chkstk_darwin(v61);
  v60 = (uint64_t)&v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v59 = (char *)&v58 - v14;
  v58 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7E18);
  v15 = *(_QWORD *)(v58 - 8);
  __chkstk_darwin(v58);
  v17 = (char *)&v58 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8660);
  v19 = __chkstk_darwin(v18);
  v21 = (char *)&v58 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v23 = (char *)&v58 - v22;
  v24 = v4 + OBJC_IVAR____TtC8ShelfKit19LibraryShowProvider__headerShelf;
  v25 = type metadata accessor for ModernShelf(0);
  v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56);
  v26(v23, 1, 1, v25);
  sub_267BC((uint64_t)v23, (uint64_t)v21, &qword_3B8660);
  Published.init(initialValue:)(v21, v18);
  sub_1459C((uint64_t)v23, &qword_3B8660);
  v27 = *(void (**)(uint64_t, char *, uint64_t))(v15 + 32);
  v28 = v58;
  v27(v24, v17, v58);
  v29 = v4 + OBJC_IVAR____TtC8ShelfKit19LibraryShowProvider__highlightShelf;
  v26(v23, 1, 1, v25);
  sub_267BC((uint64_t)v23, (uint64_t)v21, &qword_3B8660);
  Published.init(initialValue:)(v21, v18);
  sub_1459C((uint64_t)v23, &qword_3B8660);
  v27(v29, v17, v28);
  v30 = v4 + OBJC_IVAR____TtC8ShelfKit19LibraryShowProvider__episodeShelfResult;
  v31 = type metadata accessor for ShowEpisodesShelvesProvider.Result(0);
  v32 = (uint64_t)v59;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v59, 1, 2, v31);
  v33 = v60;
  sub_267BC(v32, v60, &qword_3B7DB8);
  v34 = v62;
  Published.init(initialValue:)(v33, v61);
  sub_1459C(v32, &qword_3B7DB8);
  (*(void (**)(uint64_t, char *, uint64_t))(v63 + 32))(v30, v34, v64);
  v35 = v4 + OBJC_IVAR____TtC8ShelfKit19LibraryShowProvider__footerShelves;
  *(_QWORD *)&v76[0] = 0;
  v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0A38);
  v37 = v65;
  Published.init(initialValue:)(v76, v36);
  (*(void (**)(uint64_t, char *, uint64_t))(v66 + 32))(v35, v37, v67);
  *(_QWORD *)(v4 + OBJC_IVAR____TtC8ShelfKit19LibraryShowProvider_subscriptions) = _swiftEmptyArrayStorage;
  *(_QWORD *)(v4 + OBJC_IVAR____TtC8ShelfKit19LibraryShowProvider_localShowPageFeedUpdater) = 0;
  v38 = OBJC_IVAR____TtC8ShelfKit19LibraryShowProvider_pageContent;
  v40 = v68;
  v39 = v69;
  *v68 = 0;
  swift_storeEnumTagMultiPayload(v40, v39, 0);
  v41 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B27B0);
  swift_allocObject(v41, *(unsigned int *)(v41 + 48), *(unsigned __int16 *)(v41 + 52));
  *(_QWORD *)(v4 + v38) = CurrentValueSubject.init(_:)(v40);
  v42 = v4 + OBJC_IVAR____TtC8ShelfKit19LibraryShowProvider__showDetail;
  *(_QWORD *)&v76[0] = 0;
  v43 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B7EB8);
  v44 = v70;
  Published.init(initialValue:)(v76, v43);
  (*(void (**)(uint64_t, char *, uint64_t))(v71 + 32))(v42, v44, v72);
  v45 = (_QWORD *)(v4 + OBJC_IVAR____TtC8ShelfKit19LibraryShowProvider_showDetailFetchFailedCallback);
  *v45 = 0;
  v45[1] = 0;
  v47 = v73;
  v46 = v74;
  *(_QWORD *)(v4 + OBJC_IVAR____TtC8ShelfKit19LibraryShowProvider_graph) = v73;
  v48 = (_QWORD *)(v4 + OBJC_IVAR____TtC8ShelfKit19LibraryShowProvider_showUUID);
  v49 = v75;
  *v48 = v46;
  v48[1] = v49;
  v50 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BAFB0);
  v51 = type metadata accessor for BaseObjectGraph(0);
  swift_retain();
  inject<A, B>(_:from:)(v76, v50, v47, v50, v51);
  *(_OWORD *)(v4 + OBJC_IVAR____TtC8ShelfKit19LibraryShowProvider_highlightsProvider) = v76[0];
  v52 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3BF760);
  inject<A, B>(_:from:)(v76, v52, v47, v52, v51);
  *(_OWORD *)(v4 + OBJC_IVAR____TtC8ShelfKit19LibraryShowProvider_libraryDataProvider) = v76[0];
  v53 = sub_DF6B0();
  inject<A>(_:from:)(v76, &type metadata for ShowEpisodesShelvesProvider, v47, &type metadata for ShowEpisodesShelvesProvider, v53);
  v54 = v4 + OBJC_IVAR____TtC8ShelfKit19LibraryShowProvider_showEpisodesShelvesProvider;
  v55 = v76[1];
  *(_OWORD *)v54 = v76[0];
  *(_OWORD *)(v54 + 16) = v55;
  *(_OWORD *)(v54 + 32) = v76[2];
  *(_QWORD *)(v54 + 48) = v77;
  v56 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BE9F0);
  inject<A, B>(_:from:)(v76, v56, v47, v56, v51);
  sub_F4D8(v76, v4 + OBJC_IVAR____TtC8ShelfKit19LibraryShowProvider_storeDataProvider);
  return v4;
}

_QWORD *sub_DCB48(_QWORD *a1)
{
  destroy for ShowEpisodesShelvesProvider(a1);
  return a1;
}

uint64_t sub_DCB8C()
{
  return type metadata accessor for LibraryShowProvider(0);
}

uint64_t type metadata accessor for LibraryShowProvider(uint64_t a1)
{
  uint64_t result;

  result = qword_3B7E88;
  if (!qword_3B7E88)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LibraryShowProvider);
  return result;
}

void sub_DCBD0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[15];

  sub_DCD28(319, &qword_3B7E98, &qword_3B8660);
  if (v3 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(v2 - 8) + 64;
    v10[1] = v10[0];
    sub_DCD28(319, &qword_3B7EA0, &qword_3B7DB8);
    if (v5 <= 0x3F)
    {
      v10[2] = *(_QWORD *)(v4 - 8) + 64;
      sub_DCD28(319, &qword_3B7EA8, &qword_3B0A38);
      if (v7 <= 0x3F)
      {
        v10[3] = *(_QWORD *)(v6 - 8) + 64;
        v10[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
        v10[5] = &unk_2F3B28;
        v10[6] = (char *)&value witness table for Builtin.NativeObject + 64;
        v10[7] = &unk_2F3B40;
        v10[8] = &unk_2F3B40;
        v10[9] = &unk_2F3B40;
        v10[10] = &unk_2F3B58;
        v10[11] = &unk_2F3B70;
        v10[12] = (char *)&value witness table for Builtin.NativeObject + 64;
        sub_DCD28(319, &qword_3B7EB0, (uint64_t *)&unk_3B7EB8);
        if (v9 <= 0x3F)
        {
          v10[13] = *(_QWORD *)(v8 - 8) + 64;
          v10[14] = &unk_2F3B88;
          swift_updateClassMetadata2(a1, 256, 15, v10, a1 + 80);
        }
      }
    }
  }
}

uint64_t method lookup function for LibraryShowProvider(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for LibraryShowProvider);
}

void sub_DCD28(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v5 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a3);
    v6 = type metadata accessor for Published(a1, v5);
    if (!v7)
      atomic_store(v6, a2);
  }
}

uint64_t sub_DCD74()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_DCD98()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_DCDBC()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[4]);
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_DCDF0@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, _BYTE *a6@<X8>)
{
  uint64_t *v6;

  return sub_DB478(a1, a2, a3, a4, a5, v6[2], v6[3], v6[4], a6);
}

uint64_t sub_DCDFC(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD);
  int *v4;

  v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(v1 + 16);
  v4 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_3B8020);
  return v3(a1, a1 + v4[12], a1 + v4[16], a1 + v4[20], *(_QWORD *)(a1 + v4[24]));
}

uint64_t sub_DCE60(uint64_t a1)
{
  uint64_t v1;

  return sub_DBDDC(a1, v1);
}

uint64_t sub_DCE68()
{
  uint64_t v0;

  return sub_DBD94(v0);
}

uint64_t sub_DCE70@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_DC410(a1, (uint64_t)&unk_2F3BA0, (uint64_t)&unk_2F3BC8, a2);
}

uint64_t sub_DCE94(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_DC474(a1, a2, a3, a4, &qword_3B8660, (uint64_t)&unk_2F3BA0, (uint64_t)&unk_2F3BC8);
}

uint64_t sub_DCEC0(uint64_t a1)
{
  uint64_t v1;

  return sub_DABC8(a1, v1);
}

uint64_t sub_DCEC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  _BOOL8 v37;
  uint64_t ObjectType;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t KeyPath;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD v71[2];
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __int128 v90[2];
  uint64_t v91;
  char v92[32];

  v87 = a4;
  v72 = a3;
  v71[1] = a2;
  v77 = a1;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8138);
  v88 = *(_QWORD *)(v6 - 8);
  v89 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)v71 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8140);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)v71 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8148);
  v83 = *(_QWORD *)(v13 - 8);
  v84 = v13;
  __chkstk_darwin(v13);
  v80 = (char *)v71 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8150);
  v85 = *(_QWORD *)(v15 - 8);
  v86 = v15;
  __chkstk_darwin(v15);
  v82 = (char *)v71 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8158);
  v79 = *(_QWORD *)(v81 - 8);
  __chkstk_darwin(v81);
  v78 = (char *)v71 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8160);
  v75 = *(_QWORD *)(v76 - 8);
  __chkstk_darwin(v76);
  v74 = (char *)v71 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8168);
  v71[0] = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v21 = (char *)v71 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8170);
  v73 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v24 = (char *)v71 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(a5 + 24) & 1) != 0 || (v25 = *(_QWORD *)(a5 + 16), (AdamID.isEmpty.getter(v25) & 1) != 0))
  {
    v26 = sub_DF5F4();
    *(_QWORD *)&v90[0] = swift_allocError(&type metadata for LibraryShowProvider.AdamIDError, v26, 0, 0);
    v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8180);
    v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2B08);
    Fail.init(error:)(v90, v27, v28, &protocol self-conformance witness table for Error);
    v29 = sub_32914(&qword_3B8188, &qword_3B8140, (uint64_t)&protocol conformance descriptor for Fail<A, B>);
    v30 = Publisher.eraseToAnyPublisher()(v9, v29);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    *(_QWORD *)&v90[0] = swift_allocError(&type metadata for LibraryShowProvider.AdamIDError, v26, 0, 0);
    v31 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3BF7B0);
    Fail.init(error:)(v90, v31, v28, &protocol self-conformance witness table for Error);
    v32 = sub_32914(&qword_3B8190, &qword_3B8138, (uint64_t)&protocol conformance descriptor for Fail<A, B>);
    v33 = v89;
    Publisher.eraseToAnyPublisher()(v89, v32);
    (*(void (**)(char *, uint64_t))(v88 + 8))(v8, v33);
  }
  else
  {
    v34 = (uint64_t *)(a5 + OBJC_IVAR____TtC8ShelfKit13PodcastDetail_channel);
    swift_beginAccess(a5 + OBJC_IVAR____TtC8ShelfKit13PodcastDetail_channel, v92, 0, 0);
    v35 = *v34;
    if (*v34)
      v36 = *(_QWORD *)(v35 + 16);
    else
      v36 = 0;
    v37 = v35 == 0;
    ObjectType = swift_getObjectType();
    v91 = (*(uint64_t (**)(uint64_t, _BOOL8, uint64_t))(v72 + 224))(v36, v37, ObjectType);
    sub_150C8(v87, (uint64_t)v90);
    v39 = swift_allocObject(&unk_37F820, 73, 7);
    *(_QWORD *)(v39 + 16) = a5;
    sub_F4D8(v90, v39 + 24);
    *(_QWORD *)(v39 + 64) = v25;
    *(_BYTE *)(v39 + 72) = 0;
    swift_retain();
    v40 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2120);
    v41 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8198);
    v42 = sub_32914(&qword_3B2128, &qword_3B2120, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
    Publisher.map<A>(_:)(sub_DF664, v39, v40, v41, v42);
    swift_release(v39);
    swift_release(v91);
    v43 = sub_32914(&qword_3B81A0, &qword_3B8168, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
    v44 = sub_32914(&qword_3B81A8, &qword_3B8198, (uint64_t)&protocol conformance descriptor for Future<A, B>);
    Publisher<>.switchToLatest()(v19, v43, v44);
    (*(void (**)(char *, uint64_t))(v71[0] + 8))(v21, v19);
    v45 = sub_32914(&qword_3B81B0, &qword_3B8170, (uint64_t)&protocol conformance descriptor for Publishers.SwitchToLatest<A, B>);
    v46 = Publisher.bufferedMulticast()(v22, v45);
    (*(void (**)(char *, uint64_t))(v73 + 8))(v24, v22);
    *(_QWORD *)&v90[0] = v46;
    v47 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B81B8);
    v48 = sub_32914(&qword_3B81C0, &qword_3B81B8, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
    v49 = Publisher.eraseToAnyPublisher()(v47, v48);
    swift_release(v46);
    *(_QWORD *)&v90[0] = v49;
    v50 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8180);
    v51 = v74;
    Publisher.map<A>(_:)(sub_DBF90, 0, v47, v50, v48);
    v52 = sub_32914(&qword_3B81C8, &qword_3B8160, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
    v53 = v76;
    v30 = Publisher.eraseToAnyPublisher()(v76, v52);
    (*(void (**)(char *, uint64_t))(v75 + 8))(v51, v53);
    *(_QWORD *)&v90[0] = v49;
    KeyPath = swift_getKeyPath(&unk_2F3BE8);
    v55 = v78;
    Publisher.map<A>(_:)(KeyPath, v47, v48);
    swift_release(KeyPath);
    sub_150C8(v87, (uint64_t)v90);
    v56 = swift_allocObject(&unk_37F848, 64, 7);
    sub_F4D8(v90, v56 + 16);
    *(_QWORD *)(v56 + 56) = v77;
    swift_retain();
    v57 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2970);
    v58 = sub_32914(&qword_3B81D0, &qword_3B8158, (uint64_t)&protocol conformance descriptor for Publishers.MapKeyPath<A, B>);
    v60 = v80;
    v59 = v81;
    Publisher.map<A>(_:)(sub_DF6A4, v56, v81, v57, v58);
    swift_release(v56);
    v61 = sub_32914(&qword_3B81D8, &qword_3B8148, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
    v62 = sub_32914(&qword_3B2978, &qword_3B2970, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
    v63 = v82;
    v64 = v84;
    Publisher<>.switchToLatest()(v84, v61, v62);
    (*(void (**)(char *, uint64_t))(v83 + 8))(v60, v64);
    v65 = sub_32914(&qword_3B81E0, &qword_3B8150, (uint64_t)&protocol conformance descriptor for Publishers.SwitchToLatest<A, B>);
    v66 = v86;
    v67 = Publisher.eraseToAnyPublisher()(v86, v65);
    (*(void (**)(char *, uint64_t))(v85 + 8))(v63, v66);
    (*(void (**)(char *, uint64_t))(v79 + 8))(v55, v59);
    *(_QWORD *)&v90[0] = v67;
    v68 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B36A8);
    v69 = sub_32914(&qword_3B36B0, &qword_3B36A8, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
    Publisher.eraseToAnyPublisher()(v68, v69);
    swift_release(v67);
    swift_release(v49);
  }
  return v30;
}

uint64_t sub_DD728()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_DD74C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;

  sub_DA5FC(a1, a2, *(_QWORD *)(v3 + 16), a3);
  v5 = type metadata accessor for ModernShelf(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(a3, 0, 1, v5);
}

uint64_t sub_DD790(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v1 + 16))(*a1, a1[1]);
}

uint64_t sub_DD7B8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_DC0FC(a1, v2, a2);
}

uint64_t sub_DD7C4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, _QWORD))(v2 + 16))(*a1, a1[1]);
  *a2 = result;
  return result;
}

uint64_t sub_DD7F4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  void *v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  Swift::String v51;
  uint64_t v52;
  id v53;
  Swift::String v54;
  Swift::String v55;
  Swift::String v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  Swift::String v71;
  __int128 v72;
  id v73;
  Swift::String v74;
  Swift::String v75;
  Swift::String v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  Swift::String v85;
  __int128 v86;
  id v87;
  Swift::String v88;
  Swift::String v89;
  Swift::String v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  id v97;
  Swift::String v98;
  Swift::String v99;
  Swift::String v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int *v111;
  uint64_t v112;
  uint64_t v113;
  void (*v114)(char *, uint64_t, uint64_t);
  char *v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  Swift::String v127;
  __int128 v128;
  id v129;
  Swift::String v130;
  Swift::String v131;
  Swift::String v132;
  uint64_t v133;
  _OWORD *v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  id v143;
  Swift::String v144;
  Swift::String v145;
  Swift::String v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  void (*v155)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  __int128 v162;
  uint64_t v163;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  _OWORD *v170;
  uint64_t v171;
  char *v172;
  uint64_t v173;
  char *v174;
  unint64_t v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  char *v179;
  char *v180;
  char *v181;
  uint64_t v182;
  char *v183;
  uint64_t v184;
  char *v185;
  uint64_t v186;
  id v187;
  void (*v188)(uint64_t, uint64_t, uint64_t);
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  __int128 v194;
  __int128 v195;
  uint64_t v196;
  char v197[8];
  Swift::String v198;
  Swift::String v199;
  Swift::String v200;
  Swift::String v201;
  Swift::String v202;
  Swift::String v203;

  v184 = type metadata accessor for ModernShelf(0);
  v178 = *(_QWORD *)(v184 - 8);
  __chkstk_darwin(v184);
  v185 = (char *)&v166 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
  __chkstk_darwin(v3);
  v181 = (char *)&v166 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3740);
  __chkstk_darwin(v5);
  v180 = (char *)&v166 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3BF7E0);
  __chkstk_darwin(v7);
  v179 = (char *)&v166 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0C38);
  __chkstk_darwin(v9);
  v182 = (uint64_t)&v166 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
  __chkstk_darwin(v11);
  v183 = (char *)&v166 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v188 = (void (*)(uint64_t, uint64_t, uint64_t))((char *)&v166 - v14);
  v15 = type metadata accessor for URL(0);
  v186 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v172 = (char *)&v166 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v171 = v16;
  __chkstk_darwin(v17);
  v177 = (char *)&v166 - v18;
  v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v19);
  v192 = (uint64_t)&v166 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v191 = type metadata accessor for Information(0);
  v189 = *(_QWORD *)(v191 - 8);
  __chkstk_darwin(v191);
  v173 = (uint64_t)&v166 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v175 = (unint64_t)&v166 - v23;
  __chkstk_darwin(v24);
  v26 = (char *)&v166 - v25;
  __chkstk_darwin(v27);
  v29 = (char *)&v166 - v28;
  __chkstk_darwin(v30);
  v32 = (char *)&v166 - v31;
  __chkstk_darwin(v33);
  v35 = (char *)&v166 - v34;
  v36 = type metadata accessor for ActionMetrics(0);
  __chkstk_darwin(v36);
  v174 = (char *)&v166 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = type metadata accessor for FlowDestination(0);
  __chkstk_darwin(v38);
  v40 = (uint64_t *)((char *)&v166 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0));
  v41 = (_QWORD *)(a1 + OBJC_IVAR____TtC8ShelfKit13PodcastDetail_channel);
  swift_beginAccess(a1 + OBJC_IVAR____TtC8ShelfKit13PodcastDetail_channel, v197, 0, 0);
  v42 = (_QWORD *)*v41;
  v190 = v15;
  v176 = a1;
  if (v42 && (v43 = (void *)v42[4]) != 0)
  {
    v44 = *(_QWORD *)((char *)v42 + OBJC_IVAR____TtC8ShelfKit13ChannelDetail_availableShowCount);
    if (v44 < 1)
      v44 = *(_QWORD *)((char *)v42 + OBJC_IVAR____TtC8ShelfKit13ChannelDetail_showCount);
    v45 = (void *)v42[3];
    if (v44 <= 1)
    {
      strcpy((char *)&v194, "channelTitle.");
      HIWORD(v194) = -4864;
      swift_retain();
      swift_bridgeObjectRetain();
      v85._countAndFlagsBits = (uint64_t)v45;
      v85._object = v43;
      String.append(_:)(v85);
      v187 = v45;
      v86 = v194;
      v87 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v200._object = (void *)0xE000000000000000;
      v88._countAndFlagsBits = 0x5F4C454E4E414843;
      v88._object = (void *)0xED0000454C544954;
      v89._countAndFlagsBits = 0;
      v89._object = (void *)0xE000000000000000;
      v200._countAndFlagsBits = 0;
      v90 = NSLocalizedString(_:tableName:bundle:value:comment:)(v88, (Swift::String_optional)0, (NSBundle)v87, v89, v200);

      v91 = type metadata accessor for ImpressionMetrics(0);
      v194 = 0u;
      v195 = 0u;
      v196 = 0;
      v92 = v192;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v91 - 8) + 56))(v192, 1, 1, v91);
      *(_OWORD *)v32 = v86;
      *((Swift::String *)v32 + 1) = v90;
      *((_QWORD *)v32 + 4) = 0;
      *((_QWORD *)v32 + 5) = 0;
      *((_QWORD *)v32 + 6) = v187;
      *((_QWORD *)v32 + 7) = v43;
      sub_267BC((uint64_t)&v194, (uint64_t)(v32 + 64), &qword_3B0C50);
      v93 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4E88);
      v94 = swift_allocObject(v93, 24, 7);
      *(_DWORD *)(v94 + 20) = 0;
      *(_BYTE *)(v94 + 16) = 0;
      sub_1459C((uint64_t)&v194, &qword_3B0C50);
      *((_QWORD *)v32 + 13) = v94;
      sub_15BD4(v92, (uint64_t)&v32[*(int *)(v191 + 40)], (uint64_t *)&unk_3B8790);
      sub_3C56C((uint64_t)v32, (uint64_t)v29, type metadata accessor for Information);
      v62 = (_QWORD *)sub_110B8(0, 1, 1, (unint64_t)_swiftEmptyArrayStorage);
      v96 = v62[2];
      v95 = v62[3];
      if (v96 >= v95 >> 1)
        v62 = (_QWORD *)sub_110B8(v95 > 1, v96 + 1, 1, (unint64_t)v62);
      v67 = (uint64_t)v188;
      v65 = v189;
      v62[2] = v96 + 1;
      sub_3C56C((uint64_t)v29, (uint64_t)v62+ ((*(unsigned __int8 *)(v65 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v65 + 80))+ *(_QWORD *)(v65 + 72) * v96, type metadata accessor for Information);
      swift_release(v42);
      v66 = v186;
    }
    else
    {
      *v40 = v42;
      swift_storeEnumTagMultiPayload(v40, v38, 10);
      LOBYTE(v194) = 1;
      LOBYTE(v193) = 0;
      swift_retain_n(v42, 2);
      v46 = swift_bridgeObjectRetain();
      v47 = (uint64_t)v174;
      static ActionMetrics.notInstrumented.getter(v46);
      v48 = type metadata accessor for FlowAction(0);
      swift_allocObject(v48, *(unsigned int *)(v48 + 48), *(unsigned __int16 *)(v48 + 52));
      v49 = FlowAction.init(_:id:title:presentationContext:animationBehavior:presentationStyle:destinationPageHeader:actionMetrics:)((uint64_t)v40, 0, 0, (uint64_t)v45, (uint64_t)v43, (char *)&v193, 0, 48, (char *)&v194, v47);
      *(_QWORD *)&v194 = 0x2E6C656E6E616863;
      *((_QWORD *)&v194 + 1) = 0xE800000000000000;
      v193 = v42[2];
      v50 = sub_144B4();
      v51._countAndFlagsBits = BinaryInteger.description.getter(&type metadata for UInt64, v50);
      String.append(_:)(v51);
      swift_bridgeObjectRelease();
      v187 = (id)*((_QWORD *)&v194 + 1);
      v52 = v194;
      v53 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v198._object = (void *)0xE000000000000000;
      v54._countAndFlagsBits = 0x5F4C454E4E414843;
      v54._object = (void *)0xED0000454C544954;
      v55._countAndFlagsBits = 0;
      v55._object = (void *)0xE000000000000000;
      v198._countAndFlagsBits = 0;
      v56 = NSLocalizedString(_:tableName:bundle:value:comment:)(v54, (Swift::String_optional)0, (NSBundle)v53, v55, v198);

      *((_QWORD *)&v195 + 1) = v48;
      v196 = sub_F1C0((unint64_t *)&qword_3B0C40, (void (*)(uint64_t))type metadata accessor for FlowAction, (uint64_t)&protocol conformance descriptor for Action);
      *(_QWORD *)&v194 = v49;
      v57 = type metadata accessor for ImpressionMetrics(0);
      v58 = v192;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 56))(v192, 1, 1, v57);
      *(_QWORD *)v32 = v52;
      v59 = v49;
      *((_QWORD *)v32 + 1) = v187;
      *((Swift::String *)v32 + 1) = v56;
      *((_OWORD *)v32 + 2) = 0u;
      *((_OWORD *)v32 + 3) = 0u;
      sub_267BC((uint64_t)&v194, (uint64_t)(v32 + 64), &qword_3B0C50);
      v60 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4E88);
      v61 = swift_allocObject(v60, 24, 7);
      *(_DWORD *)(v61 + 20) = 0;
      *(_BYTE *)(v61 + 16) = 0;
      swift_retain();
      sub_1459C((uint64_t)&v194, &qword_3B0C50);
      *((_QWORD *)v32 + 13) = v61;
      sub_15BD4(v58, (uint64_t)&v32[*(int *)(v191 + 40)], (uint64_t *)&unk_3B8790);
      sub_3C56C((uint64_t)v32, (uint64_t)v35, type metadata accessor for Information);
      v62 = (_QWORD *)sub_110B8(0, 1, 1, (unint64_t)_swiftEmptyArrayStorage);
      v64 = v62[2];
      v63 = v62[3];
      if (v64 >= v63 >> 1)
        v62 = (_QWORD *)sub_110B8(v63 > 1, v64 + 1, 1, (unint64_t)v62);
      v65 = v189;
      v62[2] = v64 + 1;
      sub_3C56C((uint64_t)v35, (uint64_t)v62+ ((*(unsigned __int8 *)(v65 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v65 + 80))+ *(_QWORD *)(v65 + 72) * v64, type metadata accessor for Information);
      swift_release(v42);
      swift_release(v59);
      v66 = v186;
      v67 = (uint64_t)v188;
    }
  }
  else
  {
    v68 = *(_QWORD *)(a1 + 96);
    if (!v68)
      goto LABEL_16;
    v69 = *(_QWORD *)(a1 + 88);
    v70 = HIBYTE(v68) & 0xF;
    if ((v68 & 0x2000000000000000) == 0)
      v70 = v69 & 0xFFFFFFFFFFFFLL;
    if (v70)
    {
      *(_QWORD *)&v194 = 0x2E726F7461657263;
      *((_QWORD *)&v194 + 1) = 0xE800000000000000;
      swift_bridgeObjectRetain();
      v71._countAndFlagsBits = v69;
      v71._object = (void *)v68;
      String.append(_:)(v71);
      v72 = v194;
      v73 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v199._object = (void *)0xE000000000000000;
      v74._countAndFlagsBits = 0x524F5441455243;
      v74._object = (void *)0xE700000000000000;
      v75._countAndFlagsBits = 0;
      v75._object = (void *)0xE000000000000000;
      v199._countAndFlagsBits = 0;
      v76 = NSLocalizedString(_:tableName:bundle:value:comment:)(v74, (Swift::String_optional)0, (NSBundle)v73, v75, v199);

      v77 = type metadata accessor for ImpressionMetrics(0);
      v194 = 0u;
      v195 = 0u;
      v196 = 0;
      v78 = v192;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v77 - 8) + 56))(v192, 1, 1, v77);
      *(_OWORD *)v32 = v72;
      *((Swift::String *)v32 + 1) = v76;
      *((_QWORD *)v32 + 4) = 0;
      *((_QWORD *)v32 + 5) = 0;
      *((_QWORD *)v32 + 6) = v69;
      *((_QWORD *)v32 + 7) = v68;
      sub_267BC((uint64_t)&v194, (uint64_t)(v32 + 64), &qword_3B0C50);
      v79 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4E88);
      v80 = swift_allocObject(v79, 24, 7);
      *(_DWORD *)(v80 + 20) = 0;
      *(_BYTE *)(v80 + 16) = 0;
      sub_1459C((uint64_t)&v194, &qword_3B0C50);
      *((_QWORD *)v32 + 13) = v80;
      sub_15BD4(v78, (uint64_t)&v32[*(int *)(v191 + 40)], (uint64_t *)&unk_3B8790);
      sub_3C56C((uint64_t)v32, (uint64_t)v26, type metadata accessor for Information);
      v62 = (_QWORD *)sub_110B8(0, 1, 1, (unint64_t)_swiftEmptyArrayStorage);
      v82 = v62[2];
      v81 = v62[3];
      if (v82 >= v81 >> 1)
        v62 = (_QWORD *)sub_110B8(v81 > 1, v82 + 1, 1, (unint64_t)v62);
      v66 = v186;
      v67 = (uint64_t)v188;
      v83 = v189;
      v62[2] = v82 + 1;
      v84 = (uint64_t)v26;
      v65 = v83;
      sub_3C56C(v84, (uint64_t)v62+ ((*(unsigned __int8 *)(v83 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v83 + 80))+ *(_QWORD *)(v83 + 72) * v82, type metadata accessor for Information);
    }
    else
    {
LABEL_16:
      v62 = _swiftEmptyArrayStorage;
      v66 = v186;
      v67 = (uint64_t)v188;
      v65 = v189;
    }
  }
  v187 = (id)objc_opt_self(NSBundle);
  v97 = objc_msgSend(v187, "mainBundle");
  v201._object = (void *)0xE000000000000000;
  v98._countAndFlagsBits = 0x5345444F53495045;
  v98._object = (void *)0xE800000000000000;
  v99._countAndFlagsBits = 0;
  v99._object = (void *)0xE000000000000000;
  v201._countAndFlagsBits = 0;
  v100 = NSLocalizedString(_:tableName:bundle:value:comment:)(v98, (Swift::String_optional)0, (NSBundle)v97, v99, v201);

  v101 = type metadata accessor for ImpressionMetrics(0);
  v194 = 0u;
  v195 = 0u;
  v196 = 0;
  v102 = v192;
  v188 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v101 - 8) + 56);
  v189 = v101;
  v188(v192, 1, 1);
  *(_QWORD *)v32 = 0xD00000000000001CLL;
  *((_QWORD *)v32 + 1) = 0x800000000030E2B0;
  *((_QWORD *)v32 + 4) = 0;
  v170 = v32 + 32;
  *((Swift::String *)v32 + 1) = v100;
  *((_QWORD *)v32 + 5) = 0;
  *((_OWORD *)v32 + 3) = xmmword_2F3A40;
  v169 = v32 + 64;
  sub_267BC((uint64_t)&v194, (uint64_t)(v32 + 64), &qword_3B0C50);
  v168 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4E88);
  v103 = swift_allocObject(v168, 24, 7);
  *(_DWORD *)(v103 + 20) = 0;
  *(_BYTE *)(v103 + 16) = 0;
  sub_1459C((uint64_t)&v194, &qword_3B0C50);
  *((_QWORD *)v32 + 13) = v103;
  sub_15BD4(v102, (uint64_t)&v32[*(int *)(v191 + 40)], (uint64_t *)&unk_3B8790);
  v104 = v175;
  sub_3C56C((uint64_t)v32, v175, type metadata accessor for Information);
  if ((swift_isUniquelyReferenced_nonNull_native(v62) & 1) == 0)
    v62 = (_QWORD *)sub_110B8(0, v62[2] + 1, 1, (unint64_t)v62);
  v105 = v190;
  v107 = v62[2];
  v106 = v62[3];
  if (v107 >= v106 >> 1)
    v62 = (_QWORD *)sub_110B8(v106 > 1, v107 + 1, 1, (unint64_t)v62);
  v62[2] = v107 + 1;
  v108 = (*(unsigned __int8 *)(v65 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v65 + 80);
  v109 = *(_QWORD *)(v65 + 72);
  sub_3C56C(v104, (uint64_t)v62 + v108 + v109 * v107, type metadata accessor for Information);
  v110 = v176;
  sub_267BC(v176 + OBJC_IVAR____TtC8ShelfKit7Podcast_webpageUrl, v67, &qword_3B4370);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v66 + 48))(v67, 1, v105) == 1)
  {
    sub_1459C(v67, &qword_3B4370);
    v111 = (int *)v184;
    v112 = v105;
    v113 = v66;
  }
  else
  {
    v167 = v109;
    v175 = v108;
    v114 = *(void (**)(char *, uint64_t, uint64_t))(v66 + 32);
    v115 = v177;
    v114(v177, v67, v105);
    v116 = *(_QWORD *)(v110 + 48);
    v117 = *(_QWORD *)(v110 + 56);
    v118 = v172;
    (*(void (**)(char *, char *, uint64_t))(v66 + 16))(v172, v115, v105);
    v119 = *(unsigned __int8 *)(v66 + 80);
    v120 = (v119 + 16) & ~v119;
    v121 = swift_allocObject(&unk_37F7F8, v120 + v171, v119 | 7);
    v114((char *)(v121 + v120), (uint64_t)v118, v105);
    v122 = swift_bridgeObjectRetain();
    v123 = (uint64_t)v174;
    static ActionMetrics.notInstrumented.getter(v122);
    v124 = type metadata accessor for ClosureAction(0);
    swift_allocObject(v124, *(unsigned int *)(v124 + 48), *(unsigned __int16 *)(v124 + 52));
    v125 = sub_213C1C(v116, v117, 32, v123, (uint64_t)sub_DF5C8, v121);
    v126 = swift_release(v121);
    *(_QWORD *)&v194 = 0x2E65746973626577;
    *((_QWORD *)&v194 + 1) = 0xE800000000000000;
    v127._countAndFlagsBits = URL.absoluteString.getter(v126);
    String.append(_:)(v127);
    swift_bridgeObjectRelease();
    v128 = v194;
    v129 = objc_msgSend(v187, "mainBundle");
    v202._object = (void *)0xE000000000000000;
    v130._countAndFlagsBits = 0x4245575F574F4853;
    v130._object = (void *)0xEC00000045544953;
    v131._countAndFlagsBits = 0;
    v131._object = (void *)0xE000000000000000;
    v202._countAndFlagsBits = 0;
    v132 = NSLocalizedString(_:tableName:bundle:value:comment:)(v130, (Swift::String_optional)0, (NSBundle)v129, v131, v202);

    *((_QWORD *)&v195 + 1) = v124;
    v196 = sub_F1C0(&qword_3B2768, (void (*)(uint64_t))type metadata accessor for ClosureAction, (uint64_t)&protocol conformance descriptor for Action);
    *(_QWORD *)&v194 = v125;
    v133 = v192;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v188)(v192, 1, 1, v189);
    *(_OWORD *)v32 = v128;
    *((Swift::String *)v32 + 1) = v132;
    v134 = v170;
    *v170 = 0u;
    v134[1] = 0u;
    sub_267BC((uint64_t)&v194, (uint64_t)v169, &qword_3B0C50);
    v135 = swift_allocObject(v168, 24, 7);
    *(_DWORD *)(v135 + 20) = 0;
    *(_BYTE *)(v135 + 16) = 0;
    swift_retain();
    sub_1459C((uint64_t)&v194, &qword_3B0C50);
    *((_QWORD *)v32 + 13) = v135;
    sub_15BD4(v133, (uint64_t)&v32[*(int *)(v191 + 40)], (uint64_t *)&unk_3B8790);
    v136 = v173;
    sub_3C56C((uint64_t)v32, v173, type metadata accessor for Information);
    v138 = v62[2];
    v137 = v62[3];
    if (v138 >= v137 >> 1)
      v62 = (_QWORD *)sub_110B8(v137 > 1, v138 + 1, 1, (unint64_t)v62);
    v111 = (int *)v184;
    v62[2] = v138 + 1;
    sub_3C56C(v136, (uint64_t)v62 + v175 + v138 * v167, type metadata accessor for Information);
    swift_release(v125);
    v113 = v186;
    v112 = v190;
    (*(void (**)(char *, uint64_t))(v186 + 8))(v177, v190);
  }
  v139 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0A48);
  v140 = *(_QWORD *)(v178 + 72);
  v141 = *(unsigned __int8 *)(v178 + 80);
  v191 = (v141 + 32) & ~v141;
  v142 = swift_allocObject(v139, v191 + v140, v141 | 7);
  *(_OWORD *)(v142 + 16) = xmmword_2EA0D0;
  v143 = objc_msgSend(v187, "mainBundle");
  v203._object = (void *)0xE000000000000000;
  v144._object = (void *)0x800000000030E2D0;
  v144._countAndFlagsBits = 0xD000000000000011;
  v145._countAndFlagsBits = 0;
  v145._object = (void *)0xE000000000000000;
  v203._countAndFlagsBits = 0;
  v146 = NSLocalizedString(_:tableName:bundle:value:comment:)(v144, (Swift::String_optional)0, (NSBundle)v143, v145, v203);

  v147 = type metadata accessor for ActionMenu(0);
  v148 = v179;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v147 - 8) + 56))(v179, 1, 1, v147);
  v149 = type metadata accessor for Header.PrimaryAction(0);
  v150 = (uint64_t)v180;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v149 - 8) + 56))(v180, 1, 1, v149);
  v151 = type metadata accessor for ArtworkModel(0);
  v152 = (uint64_t)v181;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v151 - 8) + 56))(v181, 1, 1, v151);
  v165 = (uint64_t)v148;
  v153 = v182;
  Header.init(title:subtitle:subtitleSymbolName:displaySubtitleAsEyebrow:hasColoredBackground:titleContextMenu:primaryAction:secondaryButtons:artwork:)(v146._countAndFlagsBits, (uint64_t)v146._object, 0, 0, 0, 0, 0, 0, v182, v165, v150, (uint64_t)_swiftEmptyArrayStorage, v152);
  v154 = sub_245900((uint64_t)v62);
  swift_bridgeObjectRelease();
  v155 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v113 + 56);
  v156 = (uint64_t)v183;
  v155(v183, 1, 1, v112);
  v196 = 0;
  v194 = 0u;
  v195 = 0u;
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v188)(v192, 1, 1, v189);
  v157 = v111[8];
  v158 = v185;
  v185[v157] = 3;
  v159 = (uint64_t)v158 + v111[9];
  v155((char *)v159, 1, 1, v112);
  *v158 = 0x74616D726F666E69;
  v158[1] = 0xEB000000006E6F69;
  sub_15BD4(v153, (uint64_t)v158 + v111[5], &qword_3B0C38);
  v160 = (char *)v158 + v111[6];
  *(_WORD *)v160 = 13;
  *((_WORD *)v160 + 3) = 256;
  *(_DWORD *)(v160 + 2) = 0;
  *((_QWORD *)v160 + 1) = 1;
  *(_QWORD *)((char *)v158 + v111[7]) = v154;
  sub_15B8C(v156, v159);
  *((_BYTE *)v158 + v111[10]) = 1;
  *((_BYTE *)v158 + v111[11]) = 0;
  v161 = (uint64_t)v158 + v111[12];
  if (*((_QWORD *)&v195 + 1))
  {
    sub_F4D8(&v194, v161);
  }
  else
  {
    v162 = (unint64_t)v195;
    *(_OWORD *)v161 = v194;
    *(_OWORD *)(v161 + 16) = v162;
    *(_QWORD *)(v161 + 32) = v196;
  }
  v163 = v142 + v191;
  sub_15BD4(v192, (uint64_t)v158 + v111[13], (uint64_t *)&unk_3B8790);
  *((_BYTE *)v158 + v157) = 3;
  sub_3C56C((uint64_t)v158, v163, type metadata accessor for ModernShelf);
  return v142;
}

uint64_t sub_DEB9C(unint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t result;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  __int128 *v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  void (*v44)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t *v45;
  uint64_t v46;
  unint64_t *v47;
  char *v48;
  _QWORD *v49;
  uint64_t v50;
  Swift::String v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  unint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  char *v71;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  char *v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  __int128 *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  __int128 *v96;
  uint64_t v97;
  unint64_t i;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  unint64_t v105;
  char v106;
  uint64_t v107;

  v81 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v3);
  v80 = (uint64_t)&v71 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8108);
  __chkstk_darwin(v5);
  v7 = (char *)&v71 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = type metadata accessor for Information(0);
  v97 = *(_QWORD *)(v100 - 8);
  v8 = __chkstk_darwin(v100);
  v10 = (char *)&v71 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v79 = (uint64_t)&v71 - v12;
  __chkstk_darwin(v11);
  v99 = (char **)((char *)&v71 - v13);
  v95 = type metadata accessor for ModernShelf(0);
  v86 = *(_QWORD *)(v95 - 8);
  __chkstk_darwin(v95);
  v15 = (char *)&v71 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8110);
  v93 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v84 = (char *)&v71 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8118);
  v19 = __chkstk_darwin(v18);
  v21 = (unint64_t *)((char *)&v71 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v19);
  v23 = (unint64_t *)((char *)&v71 - v22);
  v24 = *(_QWORD *)(a1 + 16);
  v90 = (__int128 *)&v101;
  v89 = (uint64_t)&v102 + 8;
  v96 = (__int128 *)&v106;
  v72 = v10 + 32;
  v73 = v10;
  v71 = v10 + 64;
  result = swift_bridgeObjectRetain_n(a1, 2);
  v26 = 0;
  v88 = (unint64_t)"showDetailFetchFailedCallback";
  v83 = 0x800000000030E2B0;
  v85 = a1;
  v82 = a1;
  v87 = v24;
  while (1)
  {
    if (v26 == v24)
    {
      v27 = 1;
      v26 = v24;
      goto LABEL_8;
    }
    if (v26 >= v24)
      break;
    v28 = (uint64_t)&v84[*(int *)(v16 + 48)];
    sub_14510(v85+ ((*(unsigned __int8 *)(v86 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v86 + 80))+ *(_QWORD *)(v86 + 72) * v26, v28, type metadata accessor for ModernShelf);
    v29 = (uint64_t)v21 + *(int *)(v16 + 48);
    *v21 = v26;
    sub_3C56C(v28, v29, type metadata accessor for ModernShelf);
    v27 = 0;
    ++v26;
LABEL_8:
    v30 = v93;
    (*(void (**)(unint64_t *, uint64_t, uint64_t, uint64_t))(v93 + 56))(v21, v27, 1, v16);
    sub_15BD4((uint64_t)v21, (uint64_t)v23, &qword_3B8118);
    if ((*(unsigned int (**)(unint64_t *, uint64_t, uint64_t))(v30 + 48))(v23, 1, v16) == 1)
    {
LABEL_40:
      swift_bridgeObjectRelease();
      return v82;
    }
    v92 = *v23;
    sub_3C56C((uint64_t)v23 + *(int *)(v16 + 48), (uint64_t)v15, type metadata accessor for ModernShelf);
    v31 = ModernShelf.ItemKind.rawValue.getter(v15[*(int *)(v95 + 24)]);
    if (v31 == 0x74616D726F666E69 && v32 == 0xEB000000006E6F69)
    {
      swift_bridgeObjectRelease();
      v35 = v100;
LABEL_16:
      v36 = *(_QWORD *)&v15[*(int *)(v95 + 28)];
      v37 = *(_QWORD *)(v36 + 16);
      v91 = v36 + 32;
      v94 = v36;
      result = swift_bridgeObjectRetain();
      v38 = v37;
      v39 = 0;
      for (i = v38; ; v38 = i)
      {
        if (v39 == v38)
        {
          v103 = 0u;
          v104 = 0u;
          v39 = v38;
          v102 = 0u;
        }
        else
        {
          if (v39 >= *(_QWORD *)(v94 + 16))
          {
            __break(1u);
            goto LABEL_42;
          }
          v40 = v90;
          sub_150C8(v91 + 40 * v39, (uint64_t)v90);
          *(_QWORD *)&v102 = v39;
          sub_F4D8(v40, v89);
          ++v39;
          v35 = v100;
        }
        sub_15BD4((uint64_t)&v102, (uint64_t)&v105, &qword_3B8120);
        if (!v107)
        {
          swift_bridgeObjectRelease();
          goto LABEL_3;
        }
        v41 = v105;
        sub_F4D8(v96, (uint64_t)&v102);
        v42 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0A50);
        v43 = swift_dynamicCast(v7, &v102, v42, v35, 6);
        v44 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v97 + 56);
        if ((v43 & 1) != 0)
        {
          v45 = v23;
          v46 = v16;
          v47 = v21;
          v48 = v15;
          v44(v7, 0, 1, v35);
          v49 = v99;
          sub_3C56C((uint64_t)v7, (uint64_t)v99, type metadata accessor for Information);
          v50 = v49[1];
          if (*v49 == 0xD00000000000001CLL && v50 == v83
            || (_stringCompareWithSmolCheck(_:_:expecting:)(*v49, v50, 0xD00000000000001CLL, v88 | 0x8000000000000000, 0) & 1) != 0)
          {
            *(_QWORD *)&v102 = v81;
            v51._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt, &protocol witness table for UInt);
            *(_QWORD *)&v102 = 0xD00000000000001CLL;
            *((_QWORD *)&v102 + 1) = v88 | 0x8000000000000000;
            String.append(_:)(v51);
            swift_bridgeObjectRelease();
            v77 = *((_QWORD *)&v102 + 1);
            v78 = (_QWORD *)v102;
            v52 = v99[3];
            v76 = v99[2];
            v75 = v52;
            *(_QWORD *)&v102 = v81;
            swift_bridgeObjectRetain();
            v53 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt, &protocol witness table for UInt);
            v74 = v54;
            v55 = type metadata accessor for ImpressionMetrics(0);
            v102 = 0u;
            v103 = 0u;
            *(_QWORD *)&v104 = 0;
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 56))(v80, 1, 1, v55);
            v56 = v73;
            v57 = v77;
            *v73 = v78;
            v56[1] = v57;
            v58 = v75;
            v56[2] = v76;
            v56[3] = v58;
            v59 = v72;
            *v72 = 0;
            v59[1] = 0;
            v60 = v74;
            v56[6] = v53;
            v56[7] = v60;
            sub_267BC((uint64_t)&v102, (uint64_t)v71, &qword_3B0C50);
            v61 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4E88);
            v62 = swift_allocObject(v61, 24, 7);
            *(_DWORD *)(v62 + 20) = 0;
            *(_BYTE *)(v62 + 16) = 0;
            sub_1459C((uint64_t)&v102, &qword_3B0C50);
            v56[13] = v62;
            v63 = v100;
            sub_15BD4(v80, (uint64_t)v56 + *(int *)(v100 + 40), (uint64_t *)&unk_3B8790);
            v64 = (uint64_t)v56;
            v65 = v79;
            sub_3C56C(v64, v79, type metadata accessor for Information);
            *((_QWORD *)&v103 + 1) = v63;
            *(_QWORD *)&v104 = sub_F1C0(&qword_3B4E90, (void (*)(uint64_t))type metadata accessor for Information, (uint64_t)&protocol conformance descriptor for Information);
            v66 = __swift_allocate_boxed_opaque_existential_2Tm(&v102);
            sub_14510(v65, (uint64_t)v66, type metadata accessor for Information);
            result = swift_isUniquelyReferenced_nonNull_native(v82);
            if ((result & 1) == 0)
            {
              result = sub_1E51C(v82);
              v82 = result;
            }
            v15 = v48;
            if ((v92 & 0x8000000000000000) != 0)
              goto LABEL_43;
            if (v92 >= *(_QWORD *)(v82 + 16))
              goto LABEL_44;
            v21 = v47;
            v67 = v82
                + ((*(unsigned __int8 *)(v86 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v86 + 80))
                + *(_QWORD *)(v86 + 72) * v92;
            v68 = *(int *)(v95 + 28);
            v78 = *(_QWORD **)(v67 + v68);
            result = swift_isUniquelyReferenced_nonNull_native(v78);
            v69 = v78;
            v77 = v68;
            *(_QWORD *)(v67 + v68) = v78;
            if ((result & 1) != 0)
            {
              v16 = v46;
              if ((v41 & 0x8000000000000000) != 0)
                goto LABEL_39;
            }
            else
            {
              result = (uint64_t)sub_1E530(v69);
              v69 = (_QWORD *)result;
              *(_QWORD *)(v67 + v77) = result;
              v16 = v46;
              if ((v41 & 0x8000000000000000) != 0)
              {
LABEL_39:
                __break(1u);
                goto LABEL_40;
              }
            }
            if (v41 >= v69[2])
              goto LABEL_45;
            v23 = v45;
            v70 = &v69[5 * v41 + 4];
            __swift_destroy_boxed_opaque_existential_1(v70);
            sub_F4D8(&v102, (uint64_t)v70);
            sub_145D8(v79, type metadata accessor for Information);
            result = sub_145D8((uint64_t)v99, type metadata accessor for Information);
            v35 = v100;
          }
          else
          {
            result = sub_145D8((uint64_t)v99, type metadata accessor for Information);
            v15 = v48;
            v21 = v47;
            v16 = v46;
            v23 = v45;
          }
          v24 = v87;
        }
        else
        {
          v44(v7, 1, 1, v35);
          result = sub_1459C((uint64_t)v7, &qword_3B8108);
        }
      }
    }
    v34 = _stringCompareWithSmolCheck(_:_:expecting:)(v31, v32, 0x74616D726F666E69, 0xEB000000006E6F69, 0);
    swift_bridgeObjectRelease();
    v35 = v100;
    if ((v34 & 1) != 0)
      goto LABEL_16;
LABEL_3:
    result = sub_145D8((uint64_t)v15, type metadata accessor for ModernShelf);
  }
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
  return result;
}

uint64_t sub_DF540@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_DD7F4(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_DF568()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_DF5C8()
{
  type metadata accessor for URL(0);
  sub_DC01C();
}

unint64_t sub_DF5F4()
{
  unint64_t result;

  result = qword_3B8178;
  if (!qword_3B8178)
  {
    result = swift_getWitnessTable(&unk_2F3C78);
    atomic_store(result, (unint64_t *)&qword_3B8178);
  }
  return result;
}

uint64_t sub_DF638()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  __swift_destroy_boxed_opaque_existential_1((_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 73, 7);
}

uint64_t sub_DF664@<X0>(_BYTE *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_DBE60(a1, *(_QWORD *)(v2 + 16), (_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 64), *(_BYTE *)(v2 + 72), a2);
}

uint64_t sub_DF678()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1((_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_DF6A4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_41180(a1, (_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 56), a2);
}

unint64_t sub_DF6B0()
{
  unint64_t result;

  result = qword_3B81F8;
  if (!qword_3B81F8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ShowEpisodesShelvesProvider);
    atomic_store(result, (unint64_t *)&qword_3B81F8);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for LibraryShowProvider.AdamIDError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_DF734 + 4 * byte_2F3A50[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_DF754 + 4 * byte_2F3A55[v4]))();
}

_BYTE *sub_DF734(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_DF754(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_DF75C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_DF764(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_DF76C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_DF774(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for LibraryShowProvider.AdamIDError()
{
  return &type metadata for LibraryShowProvider.AdamIDError;
}

unint64_t sub_DF794()
{
  unint64_t result;

  result = qword_3B8200;
  if (!qword_3B8200)
  {
    result = swift_getWitnessTable(&unk_2F3C50);
    atomic_store(result, (unint64_t *)&qword_3B8200);
  }
  return result;
}

BOOL EpisodeHeader.shouldRenderEpisodeArtwork.getter()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *boxed_opaque_existential_2Tm;
  _QWORD v4[5];

  v1 = type metadata accessor for Podcasts(0);
  v4[3] = v1;
  v4[4] = sub_F1C0((unint64_t *)&qword_3B33B8, (void (*)(uint64_t))&type metadata accessor for Podcasts, (uint64_t)&protocol conformance descriptor for Podcasts);
  boxed_opaque_existential_2Tm = __swift_allocate_boxed_opaque_existential_2Tm(v4);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v1 - 8) + 104))(boxed_opaque_existential_2Tm, enum case for Podcasts.episodeArtwork(_:), v1);
  LOBYTE(v1) = isFeatureEnabled(_:)(v4);
  __swift_destroy_boxed_opaque_existential_1(v4);
  return (v1 & 1) != 0 && *(_QWORD *)(v0 + 40) != 0;
}

uint64_t Podcast.addedDate.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 64);
}

uint64_t EpisodeHeader.channelAdamId.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 80);
}

uint64_t EpisodeHeader.mediaType.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 89);
}

uint64_t EpisodeHeader.episodeType.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 90);
}

uint64_t MacSearchPresenter.pageHeader.getter()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + 112));
}

uint64_t EpisodeHeader.seasonNumber.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 136);
}

uint64_t EpisodeHeader.episodeNumber.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 152);
}

uint64_t EpisodeHeader.providerAction.getter()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + 168));
}

uint64_t EpisodeHeader.buttonSubtitle.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 184);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 192));
  return v1;
}

uint64_t EpisodeHeader.isExplicit.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 200);
}

uint64_t EpisodeHeader.showTypeIsSerial.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 201);
}

uint64_t EpisodeHeader.headerButtonItems.getter()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 208));
}

uint64_t EpisodeHeader.hasFreeVersion.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 224);
}

uint64_t EpisodeHeader.subscriptionName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 232);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 240));
  return v1;
}

uint64_t EpisodeHeader.channelName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 248);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 256));
  return v1;
}

uint64_t EpisodeHeader.referenceTime.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 264);
}

uint64_t EpisodeHeader.playerTime.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 280);
}

uint64_t EpisodeHeader.impressionMetrics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_267BC(v1 + OBJC_IVAR____TtC8ShelfKit13EpisodeHeader_impressionMetrics, a1, (uint64_t *)&unk_3B8790);
}

uint64_t EpisodeHeader.__allocating_init(deserializing:using:)(char *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t Instance15byDeserializing5usingACSg9JetEngine10JSONObjectV_AH11JSONContextVtFZ_0;
  void (*v59)(char *, uint64_t);
  uint64_t v60;
  _QWORD *boxed_opaque_existential_2Tm;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  void (*v71)(char *, uint64_t, uint64_t);
  void (*v72)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t (*v90)(uint64_t, uint64_t, uint64_t);
  int v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void (*v100)(uint64_t, uint64_t, uint64_t, uint64_t);
  char v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  uint64_t v113;
  char v114;
  uint64_t v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  int v134;
  unint64_t v135;
  int v136;
  char *v137;
  uint64_t v138;
  char v139;
  uint64_t v140;
  char v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  char v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char v163;
  uint64_t v164;
  char v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  __int128 v181;
  int v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  uint64_t v186;
  uint64_t v187;
  void (*v188)(char *, uint64_t);
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  int v193;
  uint64_t v194;
  int v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  int v202;
  int v203;
  uint64_t v204;
  uint64_t v205;
  _QWORD *v206;
  uint64_t v207;
  _QWORD *v208;
  uint64_t v209;
  char *v210;
  uint64_t v211;
  void (*v212)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  char *v217;
  uint64_t v218;
  char *v219;
  char *v220;
  uint64_t v221;
  uint64_t v222;
  char *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  char *v228;
  char *v229;
  char *v230;
  uint64_t v231;
  void (*v232)(uint64_t, uint64_t, uint64_t);
  uint64_t v233;
  uint64_t v234;
  _QWORD v235[5];
  uint64_t v236;

  v4 = type metadata accessor for UUID(0);
  v221 = *(_QWORD *)(v4 - 8);
  v222 = v4;
  __chkstk_darwin(v4);
  v220 = (char *)&v186 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v6);
  v223 = (char *)&v186 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v226 = type metadata accessor for ArtworkModel(0);
  v216 = *(_QWORD *)(v226 - 8);
  v8 = __chkstk_darwin(v226);
  v232 = (void (*)(uint64_t, uint64_t, uint64_t))((char *)&v186 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = __chkstk_darwin(v8);
  v204 = (uint64_t)&v186 - v11;
  __chkstk_darwin(v10);
  v206 = (uint64_t *)((char *)&v186 - v12);
  v13 = type metadata accessor for JSONContext(0);
  v233 = *(_QWORD *)(v13 - 8);
  v234 = v13;
  v14 = __chkstk_darwin(v13);
  v228 = (char *)&v186 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  v212 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&v186 - v17);
  v18 = __chkstk_darwin(v16);
  v209 = (uint64_t)&v186 - v19;
  __chkstk_darwin(v18);
  v211 = (uint64_t)&v186 - v20;
  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
  v22 = __chkstk_darwin(v21);
  v208 = (uint64_t *)((char *)&v186 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  v24 = __chkstk_darwin(v22);
  v205 = (uint64_t)&v186 - v25;
  v26 = __chkstk_darwin(v24);
  v213 = (uint64_t)&v186 - v27;
  v28 = __chkstk_darwin(v26);
  v214 = (uint64_t)&v186 - v29;
  v30 = __chkstk_darwin(v28);
  v225 = (uint64_t)&v186 - v31;
  __chkstk_darwin(v30);
  v224 = (uint64_t)&v186 - v32;
  v33 = type metadata accessor for JSONObject(0);
  v34 = *(_QWORD *)(v33 - 8);
  v35 = __chkstk_darwin(v33);
  v219 = (char *)&v186 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = __chkstk_darwin(v35);
  v218 = (uint64_t)&v186 - v38;
  v39 = __chkstk_darwin(v37);
  v215 = (uint64_t)&v186 - v40;
  v41 = __chkstk_darwin(v39);
  v217 = (char *)&v186 - v42;
  v43 = __chkstk_darwin(v41);
  v230 = (char *)&v186 - v44;
  v45 = __chkstk_darwin(v43);
  v229 = (char *)&v186 - v46;
  v47 = __chkstk_darwin(v45);
  v49 = (char *)&v186 - v48;
  v50 = __chkstk_darwin(v47);
  v210 = (char *)&v186 - v51;
  v52 = __chkstk_darwin(v50);
  v54 = (char *)&v186 - v53;
  __chkstk_darwin(v52);
  v56 = (char *)&v186 - v55;
  v57 = a1;
  JSONObject.subscript.getter(0xD000000000000013, 0x800000000030E2F0);
  v236 = a2;
  Instance15byDeserializing5usingACSg9JetEngine10JSONObjectV_AH11JSONContextVtFZ_0 = _s8ShelfKit6ActionC17tryToMakeInstance15byDeserializing5usingACSg9JetEngine10JSONObjectV_AH11JSONContextVtFZ_0((uint64_t)v56, a2);
  v59 = *(void (**)(char *, uint64_t))(v34 + 8);
  v59(v56, v33);
  if (!Instance15byDeserializing5usingACSg9JetEngine10JSONObjectV_AH11JSONContextVtFZ_0)
  {
    v67 = type metadata accessor for JSONError(0);
    v68 = sub_F1C0((unint64_t *)&qword_3B0CB0, (void (*)(uint64_t))&type metadata accessor for JSONError, (uint64_t)&protocol conformance descriptor for JSONError);
    swift_allocError(v67, v68, 0, 0);
    *v69 = 0xD000000000000013;
    v69[1] = 0x800000000030E2F0;
    v69[2] = v227;
    v70 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v67 - 8) + 104))(v69, enum case for JSONError.missingProperty(_:), v67);
    swift_willThrow(v70);
    v62 = v57;
LABEL_8:
    (*(void (**)(uint64_t, uint64_t))(v233 + 8))(v236, v234);
    v59(v62, v33);
    return v67;
  }
  v60 = type metadata accessor for Podcasts(0);
  v235[3] = v60;
  v235[4] = sub_F1C0((unint64_t *)&qword_3B33B8, (void (*)(uint64_t))&type metadata accessor for Podcasts, (uint64_t)&protocol conformance descriptor for Podcasts);
  boxed_opaque_existential_2Tm = __swift_allocate_boxed_opaque_existential_2Tm(v235);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v60 - 8) + 104))(boxed_opaque_existential_2Tm, enum case for Podcasts.episodeArtwork(_:), v60);
  LOBYTE(v60) = isFeatureEnabled(_:)(v235);
  __swift_destroy_boxed_opaque_existential_1(v235);
  v207 = Instance15byDeserializing5usingACSg9JetEngine10JSONObjectV_AH11JSONContextVtFZ_0;
  if ((v60 & 1) != 0)
  {
    v62 = v57;
    JSONObject.subscript.getter(0x77747241776F6873, 0xEB000000006B726FLL);
    v63 = v211;
    v232 = *(void (**)(uint64_t, uint64_t, uint64_t))(v233 + 16);
    v232(v211, v236, v234);
    v64 = v224;
    v65 = v231;
    ArtworkModel.init(deserializing:using:)(v54, v63);
    v188 = v59;
    v187 = v33;
    if (v65)
    {
      swift_errorRelease(v65);
      v66 = v216;
      v212 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v216 + 56);
      v212(v64, 1, 1, v226);
    }
    else
    {
      v66 = v216;
      v212 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v216 + 56);
      v212(v64, 0, 1, v226);
    }
    v74 = v64;
    v75 = v209;
    v76 = v225;
    sub_267BC(v64, v225, &qword_3BEB70);
    v77 = type metadata accessor for HeaderModel.PrimaryArtwork(0);
    v78 = *(unsigned int *)(v77 + 48);
    v79 = *(unsigned __int16 *)(v77 + 52);
    v216 = v77;
    v80 = swift_allocObject(v77, v78, v79);
    *(_BYTE *)(v80 + 16) = 0;
    v192 = v80;
    sub_15BD4(v76, v80 + OBJC_IVAR____TtCO8ShelfKit11HeaderModel14PrimaryArtwork_artwork, &qword_3BEB70);
    v81 = v210;
    JSONObject.subscript.getter(0x4165646F73697065, 0xEE006B726F777472);
    v232(v75, v236, v234);
    v82 = v214;
    ArtworkModel.init(deserializing:using:)(v81, v75);
    v88 = v226;
    v212(v82, 0, 1, v226);
    v89 = v213;
    sub_267BC(v74, v213, &qword_3BEB70);
    v90 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v66 + 48);
    v91 = v90(v89, 1, v88);
    v231 = 0;
    if (v91 == 1)
    {
      sub_1459C(v82, &qword_3BEB70);
      sub_1459C(v74, &qword_3BEB70);
      v92 = v89;
    }
    else
    {
      v93 = v89;
      v94 = v206;
      sub_14614(v93, (uint64_t)v206);
      v95 = v208;
      sub_267BC(v82, (uint64_t)v208, &qword_3BEB70);
      if (v90((uint64_t)v95, 1, v88) == 1)
      {
        sub_3E4A4((uint64_t)v94);
        sub_1459C(v82, &qword_3BEB70);
        sub_1459C(v224, &qword_3BEB70);
        sub_1459C((uint64_t)v95, &qword_3BEB70);
        v96 = v205;
        v212(v205, 1, 1, v88);
      }
      else
      {
        v97 = v95[1];
        v98 = v94[1];
        if (*v95 == *v94 && v97 == v98)
        {
          v96 = v205;
          v99 = v224;
          v100 = v212;
          v212(v205, 1, 1, v88);
        }
        else
        {
          v101 = _stringCompareWithSmolCheck(_:_:expecting:)(*v95, v97, *v94, v98, 0);
          v96 = v205;
          v99 = v224;
          v100 = v212;
          if ((v101 & 1) != 0)
          {
            v102 = 1;
          }
          else
          {
            sub_BE440((uint64_t)v208, v205);
            v102 = 0;
          }
          v100(v96, v102, 1, v88);
        }
        sub_3E4A4((uint64_t)v206);
        sub_1459C(v214, &qword_3BEB70);
        sub_1459C(v99, &qword_3BEB70);
        sub_3E4A4((uint64_t)v208);
        if (v90(v96, 1, v88) != 1)
        {
          v177 = v204;
          sub_14614(v96, v204);
          v178 = v177;
          v179 = v225;
          sub_14614(v178, v225);
          v100(v179, 0, 1, v88);
          v180 = swift_allocObject(v216, *(unsigned int *)(v216 + 48), *(unsigned __int16 *)(v216 + 52));
          *(_BYTE *)(v180 + 16) = 0;
          v189 = v180;
          sub_15BD4(v179, v180 + OBJC_IVAR____TtCO8ShelfKit11HeaderModel14PrimaryArtwork_artwork, &qword_3BEB70);
          goto LABEL_26;
        }
      }
      v92 = v96;
    }
    sub_1459C(v92, &qword_3BEB70);
    v189 = 0;
LABEL_26:
    v33 = v187;
    v87 = v228;
    v59 = v188;
    v71 = (void (*)(char *, uint64_t, uint64_t))v232;
    goto LABEL_27;
  }
  v62 = v57;
  JSONObject.subscript.getter(0x77747241776F6873, 0xEB000000006B726FLL);
  v71 = *(void (**)(char *, uint64_t, uint64_t))(v233 + 16);
  v72 = v212;
  v71((char *)v212, v236, v234);
  v73 = v231;
  v67 = (uint64_t)v232;
  ArtworkModel.init(deserializing:using:)(v49, v72);
  if (v73)
  {
    swift_release(v207);
    goto LABEL_8;
  }
  v231 = 0;
  v83 = v67;
  v84 = v225;
  sub_14614(v83, v225);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v216 + 56))(v84, 0, 1, v226);
  v85 = type metadata accessor for HeaderModel.PrimaryArtwork(0);
  v86 = swift_allocObject(v85, *(unsigned int *)(v85 + 48), *(unsigned __int16 *)(v85 + 52));
  *(_BYTE *)(v86 + 16) = 0;
  v192 = v86;
  sub_15BD4(v84, v86 + OBJC_IVAR____TtCO8ShelfKit11HeaderModel14PrimaryArtwork_artwork, &qword_3BEB70);
  v189 = 0;
  v87 = v228;
LABEL_27:
  v103 = v215;
  v104 = JSONObject.subscript.getter(0x656C746974, 0xE500000000000000);
  v105 = JSONObject.string.getter(v104);
  v225 = v106;
  v226 = v105;
  v59(v56, v33);
  JSONObject.subscript.getter(0x44657361656C6572, 0xEB00000000657461);
  v107 = v236;
  v232 = (void (*)(uint64_t, uint64_t, uint64_t))v71;
  v71(v87, v236, v234);
  sub_8E490();
  ExpressibleByJSON.init(tryDeserializing:using:)(v56, v87, &type metadata for LazyDate);
  v224 = v235[0];
  JSONObject.subscript.getter(0x72656469766F7270, 0xEE006E6F69746341);
  v108 = _s8ShelfKit6ActionC17tryToMakeInstance15byDeserializing5usingACSg9JetEngine10JSONObjectV_AH11JSONContextVtFZ_0((uint64_t)v56, v107);
  v59(v56, v33);
  v109 = JSONObject.subscript.getter(0x75536E6F74747562, 0xEE00656C74697462);
  v215 = JSONObject.string.getter(v109);
  v213 = v110;
  v59(v56, v33);
  v111 = JSONObject.subscript.getter(0x6E6F697461727564, 0xE800000000000000);
  v214 = JSONObject.double.getter(v111);
  LODWORD(v212) = v112 & 1;
  v59(v56, v33);
  v113 = JSONObject.subscript.getter(0x754E6E6F73616573, 0xEC0000007265626DLL);
  v211 = JSONObject.int64.getter(v113);
  LODWORD(v210) = v114 & 1;
  v59(v56, v33);
  v115 = JSONObject.subscript.getter(0x4E65646F73697065, 0xED00007265626D75);
  v209 = JSONObject.int64.getter(v115);
  LODWORD(v208) = v116 & 1;
  v59(v56, v33);
  v117 = JSONObject.subscript.getter(1684632949, 0xE400000000000000);
  v206 = (_QWORD *)JSONObject.string.getter(v117);
  v205 = v118;
  v59(v56, v33);
  v119 = JSONObject.subscript.getter(0x64496D616461, 0xE600000000000000);
  v120 = JSONObject.string.getter(v119);
  v122 = v121;
  v216 = v108;
  if (v121)
  {
    v123 = v231;
    v124 = static AdamID.parse(_:)(v120, v121);
    if (v123)
    {
      v125 = swift_bridgeObjectRelease();
      v191 = static AdamID.empty.getter(v125);
      swift_errorRelease(v123);
      v231 = 0;
    }
    else
    {
      v191 = v124;
      v231 = 0;
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    v191 = 0;
  }
  v59(v229, v33);
  v126 = JSONObject.subscript.getter(0x416C656E6E616863, 0xED000064496D6164);
  v127 = JSONObject.string.getter(v126);
  v129 = v128;
  if (v128)
  {
    v130 = v231;
    v131 = static AdamID.parse(_:)(v127, v128);
    if (v130)
    {
      v132 = swift_bridgeObjectRelease();
      v190 = static AdamID.empty.getter(v132);
      swift_errorRelease(v130);
      v231 = 0;
    }
    else
    {
      v231 = 0;
      v190 = v131;
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    v190 = 0;
  }
  LODWORD(v229) = v129 == 0;
  LODWORD(v204) = v122 == 0;
  v59(v230, v33);
  JSONObject.subscript.getter(0x707954616964656DLL, 0xE900000000000065);
  v133 = sub_E25FC();
  JSONObject.stringEnumOrNil<A>()(v235, &type metadata for EpisodeMediaType, v133);
  v59(v56, v33);
  v134 = LOBYTE(v235[0]);
  if (LOBYTE(v235[0]) == 3)
    v134 = 0;
  LODWORD(v230) = v134;
  JSONObject.subscript.getter(0x5465646F73697065, 0xEB00000000657079);
  v135 = sub_E2640();
  JSONObject.stringEnumOrNil<A>()(v235, &type metadata for EpisodeType, v135);
  v59(v56, v33);
  v136 = LOBYTE(v235[0]);
  if (LOBYTE(v235[0]) == 3)
    v136 = 1;
  v203 = v136;
  v137 = v217;
  v138 = JSONObject.subscript.getter(0x63696C7078457369, 0xEA00000000007469);
  v139 = JSONObject.BOOL.getter(v138);
  v59(v137, v33);
  LODWORD(v217) = v139 & 1;
  v140 = JSONObject.subscript.getter(0xD000000000000010, 0x800000000030E310);
  v141 = JSONObject.BOOL.getter(v140);
  v59((char *)v103, v33);
  v202 = v141 & 1;
  JSONObject.subscript.getter(0xD000000000000011, 0x800000000030AED0);
  v142 = v228;
  v232((uint64_t)v228, v236, v234);
  v143 = type metadata accessor for HeaderButtonItem(0);
  v144 = sub_F1C0(&qword_3B5F60, (void (*)(uint64_t))type metadata accessor for HeaderButtonItem, (uint64_t)&protocol conformance descriptor for HeaderButtonItem);
  v201 = Array<A>.init(tryDeserializing:using:)(v56, v142, v143, v144);
  v145 = v218;
  v146 = JSONObject.subscript.getter(0xD000000000000010, 0x800000000030E330);
  v147 = JSONObject.string.getter(v146);
  v149 = v148;
  v59((char *)v145, v33);
  if (v149)
    v150 = v147;
  else
    v150 = 0;
  if (v149)
    v151 = v149;
  else
    v151 = 0xE000000000000000;
  v152 = MTEpisodeEntitlementState.init(_:)(v150, v151);
  if ((v153 & 1) != 0)
    v154 = 0;
  else
    v154 = v152;
  v218 = v154;
  v155 = v219;
  v156 = JSONObject.subscript.getter(0x5665657246736168, 0xEE006E6F69737265);
  v157 = JSONObject.BOOL.getter(v156);
  v59(v155, v33);
  LODWORD(v219) = (v157 == 2) | v157;
  v158 = JSONObject.subscript.getter(0xD000000000000010, 0x800000000030E350);
  v200 = JSONObject.string.getter(v158);
  v199 = v159;
  v59(v56, v33);
  v160 = JSONObject.subscript.getter(0x4E6C656E6E616863, 0xEB00000000656D61);
  v198 = JSONObject.string.getter(v160);
  v197 = v161;
  v59(v56, v33);
  v162 = JSONObject.subscript.getter(0x636E657265666572, 0xED0000656D695465);
  v196 = JSONObject.double.getter(v162);
  v195 = v163 & 1;
  v59(v56, v33);
  v164 = JSONObject.subscript.getter(0x6954726579616C70, 0xEA0000000000656DLL);
  v194 = JSONObject.double.getter(v164);
  v193 = v165 & 1;
  v59(v56, v33);
  v166 = type metadata accessor for ImpressionMetrics(0);
  JSONObject.subscript.getter(0xD000000000000011, 0x8000000000309180);
  v167 = v236;
  v168 = v234;
  v232((uint64_t)v142, v236, v234);
  v169 = v142;
  v170 = (uint64_t)v223;
  v171 = ExpressibleByJSON.init(tryDeserializing:using:)(v56, v169, v166);
  v172 = v220;
  UUID.init()(v171);
  v173 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
  v175 = v174;
  (*(void (**)(char *, uint64_t))(v221 + 8))(v172, v222);
  (*(void (**)(uint64_t, uint64_t))(v233 + 8))(v167, v168);
  v59(v62, v33);
  v67 = swift_allocObject(v227, *(unsigned int *)(v227 + 48), *(unsigned __int16 *)(v227 + 52));
  *((_QWORD *)&v185 + 1) = v197;
  *(_QWORD *)&v185 = v198;
  *((_QWORD *)&v184 + 1) = v199;
  *(_QWORD *)&v184 = v200;
  *((_QWORD *)&v183 + 1) = v207;
  *(_QWORD *)&v183 = v216;
  BYTE2(v182) = v203;
  BYTE1(v182) = (_BYTE)v230;
  LOBYTE(v182) = (_BYTE)v229;
  *((_QWORD *)&v181 + 1) = v205;
  *(_QWORD *)&v181 = v206;
  EpisodeHeader.init(showArtwork:episodeArtwork:title:episodeReleaseDate:duration:seasonNumber:episodeNumber:uuid:adamId:channelAdamId:mediaType:episodeType:providerAction:primaryButtonAction:buttonSubtitle:isExplicit:showTypeIsSerial:headerButtonItems:episodeEntitlementState:hasFreeVersion:susbscriptionName:shelfUniqueId:channelName:referenceTime:playerTime:impressionMetrics:)(v192, v189, v226, v225, v224, v214, (char)v212, v211, (char)v210, v209, (char)v208, v181, v191, v204, v190, v182, v183, v215, v213,
    (char)v217,
    v202,
    v201,
    v218,
    v219 & 1,
    v184,
    v173,
    v175,
    v185,
    v196,
    v195,
    v194,
    v193,
    v170);
  return v67;
}

uint64_t EpisodeHeader.__allocating_init(showArtwork:episodeArtwork:title:episodeReleaseDate:duration:seasonNumber:episodeNumber:uuid:adamId:channelAdamId:mediaType:episodeType:providerAction:primaryButtonAction:buttonSubtitle:isExplicit:showTypeIsSerial:headerButtonItems:episodeEntitlementState:hasFreeVersion:susbscriptionName:shelfUniqueId:channelName:referenceTime:playerTime:impressionMetrics:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, char a9, uint64_t a10, char a11, __int128 a12, uint64_t a13, char a14, uint64_t a15, int a16, __int128 a17, uint64_t a18, uint64_t a19, char a20,char a21,uint64_t a22,uint64_t a23,char a24,__int128 a25,uint64_t a26,uint64_t a27,__int128 a28,uint64_t a29,char a30,uint64_t a31,char a32,uint64_t a33)
{
  uint64_t v33;
  uint64_t v34;
  int v36;
  char v37;

  v37 = a7 & 1;
  v34 = swift_allocObject(v33, *(unsigned int *)(v33 + 48), *(unsigned __int16 *)(v33 + 52));
  *(_WORD *)((char *)&v36 + 1) = *(_WORD *)((char *)&a16 + 1);
  LOBYTE(v36) = a16 & 1;
  EpisodeHeader.init(showArtwork:episodeArtwork:title:episodeReleaseDate:duration:seasonNumber:episodeNumber:uuid:adamId:channelAdamId:mediaType:episodeType:providerAction:primaryButtonAction:buttonSubtitle:isExplicit:showTypeIsSerial:headerButtonItems:episodeEntitlementState:hasFreeVersion:susbscriptionName:shelfUniqueId:channelName:referenceTime:playerTime:impressionMetrics:)(a1, a2, a3, a4, a5, a6, v37, a8, a9 & 1, a10, a11 & 1, a12, a13, a14 & 1, a15, v36, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25,
    a26,
    a27,
    a28,
    a29,
    a30 & 1,
    a31,
    a32 & 1,
    a33);
  return v34;
}

uint64_t EpisodeHeader.init(showArtwork:episodeArtwork:title:episodeReleaseDate:duration:seasonNumber:episodeNumber:uuid:adamId:channelAdamId:mediaType:episodeType:providerAction:primaryButtonAction:buttonSubtitle:isExplicit:showTypeIsSerial:headerButtonItems:episodeEntitlementState:hasFreeVersion:susbscriptionName:shelfUniqueId:channelName:referenceTime:playerTime:impressionMetrics:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, char a9, uint64_t a10, char a11, __int128 a12, uint64_t a13, char a14, uint64_t a15, int a16, __int128 a17, uint64_t a18, uint64_t a19, char a20,char a21,uint64_t a22,uint64_t a23,char a24,__int128 a25,uint64_t a26,uint64_t a27,__int128 a28,uint64_t a29,char a30,uint64_t a31,char a32,uint64_t a33)
{
  uint64_t v33;
  uint64_t v34;

  *(_QWORD *)(v33 + 16) = a26;
  *(_QWORD *)(v33 + 24) = a27;
  *(_QWORD *)(v33 + 32) = a1;
  *(_QWORD *)(v33 + 40) = a2;
  *(_QWORD *)(v33 + 96) = a3;
  *(_QWORD *)(v33 + 104) = a4;
  *(_QWORD *)(v33 + 112) = a5;
  *(_QWORD *)(v33 + 120) = a6;
  *(_BYTE *)(v33 + 128) = a7 & 1;
  *(_QWORD *)(v33 + 136) = a8;
  *(_BYTE *)(v33 + 144) = a9 & 1;
  *(_QWORD *)(v33 + 152) = a10;
  *(_BYTE *)(v33 + 160) = a11 & 1;
  *(_OWORD *)(v33 + 48) = a12;
  *(_QWORD *)(v33 + 64) = a13;
  *(_BYTE *)(v33 + 72) = a14 & 1;
  *(_QWORD *)(v33 + 80) = a15;
  *(_BYTE *)(v33 + 88) = a16 & 1;
  *(_WORD *)(v33 + 89) = *(_WORD *)((char *)&a16 + 1);
  *(_OWORD *)(v33 + 168) = a17;
  *(_QWORD *)(v33 + 184) = a18;
  *(_QWORD *)(v33 + 192) = a19;
  *(_BYTE *)(v33 + 200) = a20;
  *(_BYTE *)(v33 + 201) = a21;
  *(_QWORD *)(v33 + 208) = a22;
  *(_QWORD *)(v33 + 216) = a23;
  *(_BYTE *)(v33 + 224) = a24;
  *(_OWORD *)(v33 + 232) = a25;
  *(_OWORD *)(v33 + 248) = a28;
  *(_QWORD *)(v33 + 264) = a29;
  *(_BYTE *)(v33 + 272) = a30 & 1;
  *(_BYTE *)(v33 + 288) = a32 & 1;
  v34 = v33 + OBJC_IVAR____TtC8ShelfKit13EpisodeHeader_impressionMetrics;
  *(_QWORD *)(v33 + 280) = a31;
  sub_15BD4(a33, v34, (uint64_t *)&unk_3B8790);
  return v33;
}

uint64_t EpisodeHeader.impressionableActions.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BC590);
  v2 = swift_allocObject(v1, 40, 7);
  *(_OWORD *)(v2 + 16) = xmmword_2EF430;
  *(_QWORD *)(v2 + 32) = *(_QWORD *)(v0 + 176);
  v4 = v2;
  specialized Array._endMutation()(v2);
  swift_retain();
  return v4;
}

_QWORD *EpisodeHeader.deinit()
{
  _QWORD *v0;

  swift_bridgeObjectRelease();
  swift_release(v0[4]);
  swift_release(v0[5]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release(v0[14]);
  swift_release(v0[21]);
  swift_release(v0[22]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1459C((uint64_t)v0 + OBJC_IVAR____TtC8ShelfKit13EpisodeHeader_impressionMetrics, (uint64_t *)&unk_3B8790);
  return v0;
}

uint64_t EpisodeHeader.__deallocating_deinit()
{
  uint64_t v0;

  EpisodeHeader.deinit();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_E1338@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t result;

  result = EpisodeHeader.__allocating_init(deserializing:using:)(a1, a2);
  if (!v3)
    *a3 = result;
  return result;
}

uint64_t sub_E1360()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v1 = *v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BC590);
  v3 = swift_allocObject(v2, 40, 7);
  *(_OWORD *)(v3 + 16) = xmmword_2EF430;
  *(_QWORD *)(v3 + 32) = *(_QWORD *)(v1 + 176);
  v5 = v3;
  specialized Array._endMutation()(v3);
  swift_retain();
  return v5;
}

uint64_t sub_E13CC@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return sub_267BC(*v1 + OBJC_IVAR____TtC8ShelfKit13EpisodeHeader_impressionMetrics, a1, (uint64_t *)&unk_3B8790);
}

uint64_t EpisodeHeader.__allocating_init(lockup:headerButtonItems:shelfUniqueId:referenceTime:playerTime:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, int a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *boxed_opaque_existential_2Tm;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  __n128 v47;
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  void (*v70)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  char v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t *v113;
  char v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  __int128 v125;
  int v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  _QWORD *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  char v161[16];
  uint64_t v162;
  uint64_t v163;
  _QWORD v164[5];

  LODWORD(v149) = a8;
  v131 = a7;
  LODWORD(v148) = a6;
  v159 = a5;
  v152 = a4;
  v153 = a3;
  v154 = a2;
  v141 = type metadata accessor for LazyDate.State(0);
  v140 = *(_QWORD *)(v141 - 8);
  __chkstk_darwin(v141);
  v139 = (uint64_t)&v130 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3D88);
  __chkstk_darwin(v10);
  v147 = (uint64_t *)((char *)&v130 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v145 = type metadata accessor for UUID(0);
  v144 = *(_QWORD *)(v145 - 8);
  __chkstk_darwin(v145);
  v143 = (char *)&v130 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v13);
  v160 = (char *)&v130 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v146 = type metadata accessor for ActionMetrics(0);
  v157 = *(_QWORD *)(v146 - 8);
  v15 = __chkstk_darwin(v146);
  v142 = (uint64_t)&v130 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v156 = (uint64_t)&v130 - v17;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0CC8);
  __chkstk_darwin(v18);
  v155 = (uint64_t)&v130 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3C88);
  __chkstk_darwin(v20);
  v22 = (char *)&v130 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for ArtworkModel(0);
  v24 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v26 = (char *)&v130 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
  v28 = __chkstk_darwin(v27);
  v30 = (char *)&v130 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v32 = (char *)&v130 - v31;
  sub_267BC(a1 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup_icon, (uint64_t)&v130 - v31, &qword_3BEB70);
  v33 = type metadata accessor for HeaderModel.PrimaryArtwork(0);
  v34 = swift_allocObject(v33, *(unsigned int *)(v33 + 48), *(unsigned __int16 *)(v33 + 52));
  *(_BYTE *)(v34 + 16) = 1;
  v150 = v34;
  sub_15BD4((uint64_t)v32, v34 + OBJC_IVAR____TtCO8ShelfKit11HeaderModel14PrimaryArtwork_artwork, &qword_3BEB70);
  v35 = type metadata accessor for Podcasts(0);
  v164[3] = v35;
  v164[4] = sub_F1C0((unint64_t *)&qword_3B33B8, (void (*)(uint64_t))&type metadata accessor for Podcasts, (uint64_t)&protocol conformance descriptor for Podcasts);
  boxed_opaque_existential_2Tm = __swift_allocate_boxed_opaque_existential_2Tm(v164);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v35 - 8) + 104))(boxed_opaque_existential_2Tm, enum case for Podcasts.episodeArtwork(_:), v35);
  LOBYTE(v35) = isFeatureEnabled(_:)(v164);
  __swift_destroy_boxed_opaque_existential_1(v164);
  v158 = 0;
  if ((v35 & 1) != 0)
  {
    swift_retain();
    LegacyEpisodeLockup.dedupedEpisodeArtwork.getter((uint64_t)v30);
    swift_release(a1);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v30, 1, v23) == 1)
    {
      sub_1459C((uint64_t)v30, &qword_3BEB70);
      v158 = 0;
    }
    else
    {
      sub_14614((uint64_t)v30, (uint64_t)v26);
      sub_14614((uint64_t)v26, (uint64_t)v32);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v32, 0, 1, v23);
      v37 = swift_allocObject(v33, *(unsigned int *)(v33 + 48), *(unsigned __int16 *)(v33 + 52));
      *(_BYTE *)(v37 + 16) = 1;
      v158 = v37;
      sub_15BD4((uint64_t)v32, v37 + OBJC_IVAR____TtCO8ShelfKit11HeaderModel14PrimaryArtwork_artwork, &qword_3BEB70);
    }
  }
  v38 = a1 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup__playAction;
  swift_beginAccess(a1 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup__playAction, v164, 0, 0);
  sub_267BC(v38, (uint64_t)v22, &qword_3B3C88);
  swift_retain();
  Lazy.wrappedValue.getter(&v163, v20);
  sub_1459C((uint64_t)v22, &qword_3B3C88);
  swift_release(a1);
  v39 = v163;
  v136 = v20;
  v135 = v22;
  if (v163)
  {
    v40 = type metadata accessor for PlayStationAction(0);
    v41 = swift_dynamicCastClass(v39, v40);
    if (v41)
    {
      v155 = *(_QWORD *)(v41 + 32);
      v138 = *(_QWORD *)(v41 + 40);
      v43 = *(_QWORD *)(v41 + OBJC_IVAR____TtC8ShelfKit17PlayStationAction_stationUuid);
      v42 = *(_QWORD *)(v41 + OBJC_IVAR____TtC8ShelfKit17PlayStationAction_stationUuid + 8);
      v44 = *(_QWORD *)(v41 + OBJC_IVAR____TtC8ShelfKit17PlayStationAction_episodeUuid + 8);
      v137 = *(_QWORD *)(v41 + OBJC_IVAR____TtC8ShelfKit17PlayStationAction_episodeUuid);
      v134 = *(_QWORD *)(v41 + OBJC_IVAR____TtC8ShelfKit17PlayStationAction_episodeAdamID);
      v45 = *(_BYTE *)(v41 + OBJC_IVAR____TtC8ShelfKit17PlayStationAction_episodeAdamID + 8);
      v46 = v41 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics;
      v47 = swift_beginAccess(v41 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v161, 0, 0);
      v48 = v156;
      v49 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v157 + 16);
      v50 = v146;
      v49(v156, v46, v146, v47);
      v51 = type metadata accessor for PlayPauseStationAction(0);
      v52 = swift_allocObject(v51, *(unsigned int *)(v51 + 48), *(unsigned __int16 *)(v51 + 52));
      v53 = (_QWORD *)(v52 + OBJC_IVAR____TtC8ShelfKit22PlayPauseStationAction_stationUuid);
      *v53 = v43;
      v53[1] = v42;
      v54 = (_QWORD *)(v52 + OBJC_IVAR____TtC8ShelfKit22PlayPauseStationAction_episodeUuid);
      *v54 = v137;
      v54[1] = v44;
      v55 = v52 + OBJC_IVAR____TtC8ShelfKit22PlayPauseStationAction_episodeAdamID;
      *(_QWORD *)v55 = v134;
      *(_BYTE *)(v55 + 8) = v45;
      v56 = v142;
      ((void (*)(uint64_t, uint64_t, uint64_t))v49)(v142, v48, v50);
      v57 = type metadata accessor for ImpressionMetrics(0);
      v58 = (uint64_t)v160;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 56))(v160, 1, 1, v57);
      swift_bridgeObjectRetain();
      v59 = v138;
      swift_bridgeObjectRetain();
      v60 = swift_bridgeObjectRetain();
      v61 = v143;
      UUID.init()(v60);
      v62 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
      v64 = v63;
      (*(void (**)(char *, uint64_t))(v144 + 8))(v61, v145);
      *(_QWORD *)(v52 + 16) = v62;
      *(_QWORD *)(v52 + 24) = v64;
      *(_QWORD *)(v52 + 32) = v155;
      *(_QWORD *)(v52 + 40) = v59;
      *(_BYTE *)(v52 + 48) = 32;
      v65 = v157;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v157 + 32))(v52 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v56, v50);
      sub_15BD4(v58, v52 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics, (uint64_t *)&unk_3B8790);
      (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v156, v50);
      swift_release(v39);
      goto LABEL_13;
    }
    swift_release(v39);
  }
  v138 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup_adamId);
  v66 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8ShelfKit20LibraryEpisodeLockup_uuid + 8);
  v137 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8ShelfKit20LibraryEpisodeLockup_uuid);
  if (*(_QWORD *)(a1 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_episodeEntitlementState) == 2)
  {
    v67 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8ShelfKit20LibraryEpisodeLockup_channelAdamId);
    v68 = *(_BYTE *)(a1 + OBJC_IVAR____TtC8ShelfKit20LibraryEpisodeLockup_channelAdamId + 8);
  }
  else
  {
    v67 = 0;
    v68 = 1;
  }
  v69 = type metadata accessor for EpisodeListSettings(0);
  v70 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 56);
  v71 = v155;
  v70(v155, 1, 1, v69);
  v72 = swift_bridgeObjectRetain();
  v73 = v156;
  static ActionMetrics.notInstrumented.getter(v72);
  v74 = type metadata accessor for LibraryPlayPauseAction(0);
  v52 = swift_allocObject(v74, *(unsigned int *)(v74 + 48), *(unsigned __int16 *)(v74 + 52));
  v75 = v52 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_settings;
  v70(v52 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_settings, 1, 1, v69);
  *(_BYTE *)(v52 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_sharedContent) = 0;
  v76 = (_QWORD *)(v52 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_episodeUuid);
  *v76 = v137;
  v76[1] = v66;
  v77 = v52 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_episodeAdamId;
  *(_QWORD *)v77 = v138;
  *(_BYTE *)(v77 + 8) = 0;
  v78 = v52 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_channelAdamId;
  *(_QWORD *)v78 = v67;
  *(_BYTE *)(v78 + 8) = v68;
  swift_beginAccess(v75, &v163, 33, 0);
  swift_retain();
  sub_1F418(v71, v75);
  v79 = swift_endAccess(&v163);
  *(_BYTE *)(v52 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_showPlayerIfPlaying) = 2;
  *(_BYTE *)(v52 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_forcePlay) = 2;
  v80 = static MetricsActionType.play.getter(v79);
  v81 = (uint64_t *)(v52 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_playState);
  *v81 = v80;
  v81[1] = v82;
  *(_BYTE *)(v52 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_isSmartPlayButton) = 0;
  *(_BYTE *)(v52 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_isWidgetPlayButton) = 0;
  *(_BYTE *)(v52 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_waitForEngine) = 0;
  v83 = v52 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_timestamp;
  *(_QWORD *)v83 = 0;
  *(_BYTE *)(v83 + 8) = 1;
  *(_BYTE *)(v52 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_shouldPreventQueueing) = 0;
  swift_release(v52);
  v84 = v157;
  v85 = v142;
  v86 = v146;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v157 + 16))(v142, v73, v146);
  v87 = type metadata accessor for ImpressionMetrics(0);
  v88 = (uint64_t)v160;
  v89 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v87 - 8) + 56))(v160, 1, 1, v87);
  v90 = v143;
  UUID.init()(v89);
  v91 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
  v93 = v92;
  (*(void (**)(char *, uint64_t))(v144 + 8))(v90, v145);
  *(_QWORD *)(v52 + 16) = v91;
  *(_QWORD *)(v52 + 24) = v93;
  *(_QWORD *)(v52 + 32) = 0;
  *(_QWORD *)(v52 + 40) = 0;
  *(_BYTE *)(v52 + 48) = 32;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v84 + 32))(v52 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v85, v86);
  sub_15BD4(v88, v52 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics, (uint64_t *)&unk_3B8790);
  (*(void (**)(uint64_t, uint64_t))(v84 + 8))(v73, v86);
  sub_1459C(v155, &qword_3B0CC8);
LABEL_13:
  v94 = v149;
  v95 = v148;
  v96 = v147;
  v97 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup_title);
  v98 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup_lazyReleaseDate);
  v156 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup_title + 8);
  v157 = v97;
  if (v98)
  {
    swift_bridgeObjectRetain();
    swift_retain();
    LazyDate.value.getter(v96);
    swift_release(a1);
  }
  else
  {
    v99 = type metadata accessor for Date(0);
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v99 - 8) + 56))(v96, 1, 1, v99);
    swift_bridgeObjectRetain();
  }
  v100 = v136;
  v101 = (uint64_t)v135;
  v102 = type metadata accessor for Date(0);
  v103 = *(_QWORD *)(v102 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v103 + 48))(v96, 1, v102) == 1)
  {
    sub_1459C((uint64_t)v96, &qword_3B3D88);
    v155 = 0;
  }
  else
  {
    v104 = v139;
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(v103 + 16))(v139, v96, v102);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v140 + 104))(v104, enum case for LazyDate.State.valid(_:), v141);
    v155 = LazyDate.init(initialState:)(v104);
    (*(void (**)(_QWORD *, uint64_t))(v103 + 8))(v96, v102);
  }
  v105 = a1 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_duration;
  v106 = a1 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_seasonNumber;
  v107 = a1 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_episodeNumber;
  v108 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8ShelfKit20LibraryEpisodeLockup_uuid + 8);
  v109 = OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_episodeEntitlementState;
  if (*(_QWORD *)(a1 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_episodeEntitlementState) == 2)
  {
    v148 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8ShelfKit20LibraryEpisodeLockup_channelAdamId);
    v110 = *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC8ShelfKit20LibraryEpisodeLockup_channelAdamId + 8);
  }
  else
  {
    v148 = 0;
    v110 = 1;
  }
  LODWORD(v144) = v110;
  v147 = *(_QWORD **)v105;
  LODWORD(v146) = *(unsigned __int8 *)(v105 + 8);
  v145 = *(_QWORD *)v106;
  LODWORD(v143) = *(unsigned __int8 *)(v106 + 8);
  v142 = *(_QWORD *)v107;
  LODWORD(v141) = *(unsigned __int8 *)(v107 + 8);
  v139 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup_adamId);
  v140 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8ShelfKit20LibraryEpisodeLockup_uuid);
  LODWORD(v138) = *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_mediaType);
  LODWORD(v137) = *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_episodeType);
  v111 = a1 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup__subtitleAction;
  swift_beginAccess(a1 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup__subtitleAction, &v163, 0, 0);
  sub_267BC(v111, v101, &qword_3B3C88);
  swift_retain();
  swift_bridgeObjectRetain();
  Lazy.wrappedValue.getter(&v162, v100);
  sub_1459C(v101, &qword_3B3C88);
  swift_release(a1);
  v112 = (uint64_t *)(a1 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_subscriptionName);
  v113 = (uint64_t *)(a1 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_channelName);
  v149 = v108;
  if ((v95 & 1) != 0)
  {
    v159 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_referenceTime);
    v133 = *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_referenceTime + 8);
  }
  else
  {
    v133 = 0;
  }
  v136 = v162;
  LODWORD(v135) = *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup_isExplicit);
  LODWORD(v134) = *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_showTypeIsSerial);
  v132 = *(_QWORD *)(a1 + v109);
  v114 = *(_BYTE *)(a1 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_hasFreeVersion);
  v116 = *v112;
  v115 = v112[1];
  v117 = *v113;
  v118 = v113[1];
  if ((v94 & 1) != 0)
  {
    v120 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_playerTime);
    v119 = *(_BYTE *)(a1 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_playerTime + 8);
  }
  else
  {
    v119 = 0;
    v120 = v131;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release(a1);
  v121 = type metadata accessor for ImpressionMetrics(0);
  v122 = (uint64_t)v160;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v121 - 8) + 56))(v160, 1, 1, v121);
  v123 = swift_allocObject(v151, *(unsigned int *)(v151 + 48), *(unsigned __int16 *)(v151 + 52));
  *((_QWORD *)&v129 + 1) = v118;
  *(_QWORD *)&v129 = v117;
  *((_QWORD *)&v128 + 1) = v115;
  *(_QWORD *)&v128 = v116;
  *((_QWORD *)&v127 + 1) = v52;
  *(_QWORD *)&v127 = v136;
  BYTE2(v126) = v137;
  BYTE1(v126) = v138;
  LOBYTE(v126) = v144;
  *((_QWORD *)&v125 + 1) = v149;
  *(_QWORD *)&v125 = v140;
  EpisodeHeader.init(showArtwork:episodeArtwork:title:episodeReleaseDate:duration:seasonNumber:episodeNumber:uuid:adamId:channelAdamId:mediaType:episodeType:providerAction:primaryButtonAction:buttonSubtitle:isExplicit:showTypeIsSerial:headerButtonItems:episodeEntitlementState:hasFreeVersion:susbscriptionName:shelfUniqueId:channelName:referenceTime:playerTime:impressionMetrics:)(v150, v158, v157, v156, v155, (uint64_t)v147, v146, v145, (char)v143, v142, v141, v125, v139, 0, v148, v126, v127, 0, 0,
    (char)v135,
    v134,
    v154,
    v132,
    v114,
    v128,
    v153,
    v152,
    v129,
    v159,
    v133,
    v120,
    v119,
    v122);
  return v123;
}

uint64_t EpisodeHeader.entitlementState.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 216);
}

uint64_t EpisodeHeader.listenNowReason.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = type metadata accessor for EpisodeListenNowReason(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t EpisodeHeader.durationOpt.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 120);
}

uint64_t EpisodeHeader.seasonNumberOpt.getter()
{
  uint64_t v0;
  uint64_t result;

  if ((*(_BYTE *)(v0 + 144) & 1) != 0)
    return 0;
  result = *(_QWORD *)(v0 + 136);
  if (result <= 0)
    return 0;
  return result;
}

uint64_t EpisodeHeader.episodeNumberOpt.getter()
{
  uint64_t v0;
  uint64_t result;

  if ((*(_BYTE *)(v0 + 160) & 1) != 0)
    return 0;
  result = *(_QWORD *)(v0 + 152);
  if (result <= 0)
    return 0;
  return result;
}

_QWORD *EpisodeHeader.releaseDate.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v4;

  if (*(_QWORD *)(v1 + 112))
    return LazyDate.value.getter(a1);
  v4 = type metadata accessor for Date(0);
  return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, 1, 1, v4);
}

uint64_t sub_E2498()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 248);
  swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)v0 + 256));
  return v1;
}

uint64_t sub_E24C8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 232);
  swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)v0 + 240));
  return v1;
}

uint64_t sub_E24F8()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)v0 + 216);
}

uint64_t sub_E2504()
{
  uint64_t v0;

  return *(unsigned __int8 *)(*(_QWORD *)v0 + 224);
}

uint64_t sub_E2510()
{
  uint64_t v0;

  return *(unsigned __int8 *)(*(_QWORD *)v0 + 90);
}

uint64_t sub_E251C()
{
  uint64_t v0;

  return *(unsigned __int8 *)(*(_QWORD *)v0 + 89);
}

uint64_t sub_E2528()
{
  uint64_t v0;

  return *(unsigned __int8 *)(*(_QWORD *)v0 + 200);
}

uint64_t sub_E2534()
{
  uint64_t v0;

  return *(unsigned __int8 *)(*(_QWORD *)v0 + 201);
}

uint64_t sub_E2540()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)v0 + 120);
}

uint64_t sub_E2550()
{
  uint64_t v0;
  uint64_t result;

  if ((*(_BYTE *)(*(_QWORD *)v0 + 144) & 1) != 0)
    return 0;
  result = *(_QWORD *)(*(_QWORD *)v0 + 136);
  if (result < 1)
    return 0;
  return result;
}

uint64_t sub_E257C()
{
  uint64_t v0;
  uint64_t result;

  if ((*(_BYTE *)(*(_QWORD *)v0 + 160) & 1) != 0)
    return 0;
  result = *(_QWORD *)(*(_QWORD *)v0 + 152);
  if (result < 1)
    return 0;
  return result;
}

_QWORD *sub_E25A8@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v4;

  if (*(_QWORD *)(*(_QWORD *)v1 + 112))
    return LazyDate.value.getter(a1);
  v4 = type metadata accessor for Date(0);
  return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, 1, 1, v4);
}

unint64_t sub_E25FC()
{
  unint64_t result;

  result = qword_3B8208;
  if (!qword_3B8208)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for EpisodeMediaType);
    atomic_store(result, (unint64_t *)&qword_3B8208);
  }
  return result;
}

unint64_t sub_E2640()
{
  unint64_t result;

  result = qword_3B8210;
  if (!qword_3B8210)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for EpisodeType);
    atomic_store(result, (unint64_t *)&qword_3B8210);
  }
  return result;
}

uint64_t sub_E2684(uint64_t a1)
{
  uint64_t result;

  result = sub_F1C0(&qword_3B8218, (void (*)(uint64_t))type metadata accessor for EpisodeHeader, (uint64_t)&protocol conformance descriptor for EpisodeHeader);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for EpisodeHeader(uint64_t a1)
{
  uint64_t result;

  result = qword_3B8248;
  if (!qword_3B8248)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for EpisodeHeader);
  return result;
}

uint64_t sub_E26FC()
{
  return type metadata accessor for EpisodeHeader(0);
}

void sub_E2704(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[26];

  v4[0] = &unk_2F3F18;
  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[2] = &unk_2F3F30;
  v4[3] = &unk_2F3F48;
  v4[4] = &unk_2F3F60;
  v4[5] = &unk_2F3F60;
  v4[6] = &unk_2F3F78;
  v4[7] = &unk_2F3F78;
  v4[8] = &unk_2F3F48;
  v4[9] = &unk_2F3F30;
  v4[10] = &unk_2F3F60;
  v4[11] = &unk_2F3F60;
  v4[12] = &unk_2F3F60;
  v4[13] = &unk_2F3F30;
  v4[14] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[15] = &unk_2F3F48;
  v4[16] = &unk_2F3F90;
  v4[17] = &unk_2F3F90;
  v4[18] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[19] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[20] = &unk_2F3F90;
  v4[21] = &unk_2F3F48;
  v4[22] = &unk_2F3F48;
  v4[23] = &unk_2F3F60;
  v4[24] = &unk_2F3F60;
  sub_34090(319);
  if (v3 <= 0x3F)
  {
    v4[25] = *(_QWORD *)(v2 - 8) + 64;
    swift_updateClassMetadata2(a1, 256, 26, v4, a1 + 80);
  }
}

uint64_t method lookup function for EpisodeHeader(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for EpisodeHeader);
}

uint64_t dispatch thunk of EpisodeHeader.__allocating_init(deserializing:using:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 288))();
}

uint64_t dispatch thunk of EpisodeHeader.__allocating_init(showArtwork:episodeArtwork:title:episodeReleaseDate:duration:seasonNumber:episodeNumber:uuid:adamId:channelAdamId:mediaType:episodeType:providerAction:primaryButtonAction:buttonSubtitle:isExplicit:showTypeIsSerial:headerButtonItems:episodeEntitlementState:hasFreeVersion:susbscriptionName:shelfUniqueId:channelName:referenceTime:playerTime:impressionMetrics:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  uint64_t v34;

  LOBYTE(a33) = a33 & 1;
  LOBYTE(a9) = a9 & 1;
  LOBYTE(a11) = a11 & 1;
  LOBYTE(a15) = a15 & 1;
  LOBYTE(a17) = a17 & 1;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v34 + 296))(a1, a2, a3, a4, a5, a6, a7 & 1, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34);
}

uint64_t static TextFieldAction.subscribeByURLAction(textFieldContent:okClosure:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  void *v8;
  id v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  id v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  id v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  uint64_t v21;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;

  v5 = v4;
  v8 = (void *)objc_opt_self(NSBundle);
  v9 = objc_msgSend(v8, "mainBundle");
  v25._object = (void *)0xE000000000000000;
  v10._object = (void *)0x800000000030B0B0;
  v10._countAndFlagsBits = 0xD000000000000011;
  v11._countAndFlagsBits = 0;
  v11._object = (void *)0xE000000000000000;
  v25._countAndFlagsBits = 0;
  v12 = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, (Swift::String_optional)0, (NSBundle)v9, v11, v25);

  v13 = objc_msgSend(v8, "mainBundle");
  v26._object = (void *)0xE000000000000000;
  v14._countAndFlagsBits = 0x425F574F4C4C4F46;
  v14._object = (void *)0xED00004E4F545455;
  v15._countAndFlagsBits = 0;
  v15._object = (void *)0xE000000000000000;
  v26._countAndFlagsBits = 0;
  v16 = NSLocalizedString(_:tableName:bundle:value:comment:)(v14, (Swift::String_optional)0, (NSBundle)v13, v15, v26);

  v17 = objc_msgSend(v8, "mainBundle");
  v18._countAndFlagsBits = 0xD000000000000017;
  v27._object = (void *)0xE000000000000000;
  v18._object = (void *)0x800000000030B0D0;
  v19._countAndFlagsBits = 0;
  v19._object = (void *)0xE000000000000000;
  v27._countAndFlagsBits = 0;
  v20 = NSLocalizedString(_:tableName:bundle:value:comment:)(v18, (Swift::String_optional)0, (NSBundle)v17, v19, v27);

  swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  swift_bridgeObjectRetain();
  swift_retain();
  v21 = sub_E3210(v12._countAndFlagsBits, (uint64_t)v12._object, 0, 0, v16._countAndFlagsBits, (uint64_t)v16._object, v20._countAndFlagsBits, (uint64_t)v20._object, a1, a2, 1u, 1, 0x20u, a3, a4);
  swift_release(a4);
  return v21;
}

uint64_t TextFieldAction.__allocating_init(title:message:okButtonTitle:placeholder:textFieldContent:isCancelable:keyboardStyle:presentationStyle:okClosure:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned __int8 a11, char a12, unsigned __int8 a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v18;

  swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
  v18 = sub_E3210(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12 & 1, a13, a14, a15);
  swift_release(a15);
  return v18;
}

uint64_t TextFieldAction.init(title:message:okButtonTitle:placeholder:textFieldContent:isCancelable:keyboardStyle:presentationStyle:okClosure:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int16 a11, unsigned __int8 a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;

  v14 = sub_E3210(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, (unsigned __int16)(a11 & 0x1FF) >> 8, a12, a13, a14);
  swift_release(a14);
  return v14;
}

void TextFieldAction.__allocating_init(deserializing:using:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  v2 = (_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit15TextFieldAction_cancelClosure);
  *v2 = 0;
  v2[1] = 0;
  swift_release(v1);
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000020, 0x800000000030E480, "ShelfKit/TextFieldAlertAction.swift", 35, 2, 46, 0);
  __break(1u);
}

void TextFieldAction.init(deserializing:using:)()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit15TextFieldAction_cancelClosure);
  *v1 = 0;
  v1[1] = 0;
  swift_release(v0);
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000020, 0x800000000030E480, "ShelfKit/TextFieldAlertAction.swift", 35, 2, 46, 0);
  __break(1u);
}

uint64_t TextFieldAction.textFieldPlaceholder.getter()
{
  return sub_1CCE8(&OBJC_IVAR____TtC8ShelfKit15TextFieldAction_textFieldPlaceholder);
}

uint64_t TextFieldAction.textFieldContent.getter()
{
  return sub_1CCE8(&OBJC_IVAR____TtC8ShelfKit15TextFieldAction_textFieldContent);
}

uint64_t TextFieldAction.okButtonTitle.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit15TextFieldAction_okButtonTitle);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit15TextFieldAction_okButtonTitle + 8));
  return v1;
}

uint64_t TextFieldAction.okClosure.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit15TextFieldAction_okClosure);
  swift_retain(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit15TextFieldAction_okClosure + 8));
  return v1;
}

uint64_t sub_E2DE8@<X0>(_QWORD *a1@<X0>, uint64_t (**a2)@<X0>(uint64_t *a1@<X8>)@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)@<X0>(uint64_t *@<X8>);
  _BYTE v9[24];

  v3 = (uint64_t *)(*a1 + OBJC_IVAR____TtC8ShelfKit15TextFieldAction_cancelClosure);
  swift_beginAccess(v3, v9, 0, 0);
  v4 = *v3;
  v5 = v3[1];
  if (v4)
  {
    v6 = swift_allocObject(&unk_37FB28, 32, 7);
    *(_QWORD *)(v6 + 16) = v4;
    *(_QWORD *)(v6 + 24) = v5;
    v7 = sub_E36E8;
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  *a2 = v7;
  a2[1] = (uint64_t (*)@<X0>(uint64_t *@<X8>))v6;
  return sub_76C34(v4, v5);
}

uint64_t sub_E2E7C(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[24];

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject(&unk_37FB00, 32, 7);
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = sub_E36B8;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = (uint64_t *)(*a2 + OBJC_IVAR____TtC8ShelfKit15TextFieldAction_cancelClosure);
  swift_beginAccess(v7, v11, 1, 0);
  v8 = *v7;
  v9 = v7[1];
  *v7 = (uint64_t)v6;
  v7[1] = v5;
  sub_76C34(v3, v4);
  return sub_327A0(v8, v9);
}

uint64_t TextFieldAction.cancelClosure.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  _BYTE v4[24];

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC8ShelfKit15TextFieldAction_cancelClosure);
  swift_beginAccess(v0 + OBJC_IVAR____TtC8ShelfKit15TextFieldAction_cancelClosure, v4, 0, 0);
  v2 = *v1;
  sub_76C34(*v1, v1[1]);
  return v2;
}

uint64_t TextFieldAction.cancelClosure.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[24];

  v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC8ShelfKit15TextFieldAction_cancelClosure);
  swift_beginAccess(v5, v9, 1, 0);
  v6 = *v5;
  v7 = v5[1];
  *v5 = a1;
  v5[1] = a2;
  return sub_327A0(v6, v7);
}

uint64_t (*TextFieldAction.cancelClosure.modify(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC8ShelfKit15TextFieldAction_cancelClosure, a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t TextFieldAction.message.getter()
{
  return sub_1CCE8(&OBJC_IVAR____TtC8ShelfKit15TextFieldAction_message);
}

uint64_t TextFieldAction.isCancelable.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8ShelfKit15TextFieldAction_isCancelable);
}

uint64_t TextFieldAction.keyboardStyle.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8ShelfKit15TextFieldAction_keyboardStyle);
}

void TextFieldAction.init(uniqueId:title:presentationStyle:actionMetrics:impressionMetrics:)()
{
  _swift_stdlib_reportUnimplementedInitializer("ShelfKit.TextFieldAction", 24, "init(uniqueId:title:presentationStyle:actionMetrics:impressionMetrics:)", 71, 0);
  __break(1u);
}

uint64_t sub_E3084()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit15TextFieldAction_okClosure + 8));
  sub_327A0(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit15TextFieldAction_cancelClosure), *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit15TextFieldAction_cancelClosure + 8));
  return swift_bridgeObjectRelease();
}

uint64_t TextFieldAction.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics;
  v2 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_23B00(v0 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit15TextFieldAction_okClosure + 8));
  sub_327A0(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit15TextFieldAction_cancelClosure), *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit15TextFieldAction_cancelClosure + 8));
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t TextFieldAction.__deallocating_deinit()
{
  uint64_t v0;

  TextFieldAction.deinit();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_E3210(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned __int8 a11, char a12, unsigned __int8 a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;

  v16 = v15;
  v52 = a7;
  v53 = a8;
  v58 = a2;
  v56 = a1;
  v57 = a13;
  v54 = a14;
  v48 = a10;
  v49 = a6;
  v46 = a9;
  v47 = a5;
  v50 = a12 & 1;
  v51 = a11;
  v55 = type metadata accessor for UUID(0);
  v19 = *(_QWORD *)(v55 - 8);
  __chkstk_darwin(v55);
  v21 = (char *)&v46 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for ActionMetrics(0);
  v23 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v25 = (char *)&v46 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v26);
  v28 = (char *)&v46 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = (_QWORD *)(v15 + OBJC_IVAR____TtC8ShelfKit15TextFieldAction_cancelClosure);
  *v29 = 0;
  v29[1] = 0;
  v30 = (_QWORD *)(v15 + OBJC_IVAR____TtC8ShelfKit15TextFieldAction_message);
  *v30 = a3;
  v30[1] = a4;
  v31 = (_QWORD *)(v15 + OBJC_IVAR____TtC8ShelfKit15TextFieldAction_okButtonTitle);
  v32 = v49;
  *v31 = v47;
  v31[1] = v32;
  v33 = (_QWORD *)(v15 + OBJC_IVAR____TtC8ShelfKit15TextFieldAction_textFieldPlaceholder);
  v34 = v53;
  *v33 = v52;
  v33[1] = v34;
  v35 = (_QWORD *)(v15 + OBJC_IVAR____TtC8ShelfKit15TextFieldAction_textFieldContent);
  v36 = v48;
  *v35 = v46;
  v35[1] = v36;
  *(_BYTE *)(v15 + OBJC_IVAR____TtC8ShelfKit15TextFieldAction_isCancelable) = v51;
  *(_BYTE *)(v15 + OBJC_IVAR____TtC8ShelfKit15TextFieldAction_keyboardStyle) = v50;
  v37 = (_QWORD *)(v15 + OBJC_IVAR____TtC8ShelfKit15TextFieldAction_okClosure);
  *v37 = v54;
  v37[1] = a15;
  v38 = type metadata accessor for ImpressionMetrics(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v28, 1, 1, v38);
  v39 = swift_retain(a15);
  v40 = static ActionMetrics.notInstrumented.getter(v39);
  UUID.init()(v40);
  v41 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
  v43 = v42;
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v55);
  *(_QWORD *)(v16 + 16) = v41;
  *(_QWORD *)(v16 + 24) = v43;
  v44 = v58;
  *(_QWORD *)(v16 + 32) = v56;
  *(_QWORD *)(v16 + 40) = v44;
  *(_BYTE *)(v16 + 48) = v57;
  (*(void (**)(uint64_t, char *, uint64_t))(v23 + 32))(v16 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v25, v22);
  sub_23AB8((uint64_t)v28, v16 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics);
  return v16;
}

unint64_t sub_E3490()
{
  unint64_t result;

  result = qword_3B83A0;
  if (!qword_3B83A0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for KeyboardStyle);
    atomic_store(result, (unint64_t *)&qword_3B83A0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for KeyboardStyle(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_E3528 + 4 * byte_2F3FAD[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_E355C + 4 * byte_2F3FA8[v4]))();
}

uint64_t sub_E355C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_E3564(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xE356CLL);
  return result;
}

uint64_t sub_E3578(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xE3580);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_E3584(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_E358C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for KeyboardStyle()
{
  return &type metadata for KeyboardStyle;
}

uint64_t sub_E35A8()
{
  return type metadata accessor for TextFieldAction(0);
}

uint64_t type metadata accessor for TextFieldAction(uint64_t a1)
{
  uint64_t result;

  result = qword_3B83D0;
  if (!qword_3B83D0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TextFieldAction);
  return result;
}

uint64_t sub_E35EC(uint64_t a1)
{
  _QWORD v2[8];

  v2[0] = &unk_2F4058;
  v2[1] = &unk_2F4058;
  v2[2] = &unk_2F4070;
  v2[3] = (char *)&value witness table for () + 64;
  v2[4] = &unk_2F4058;
  v2[5] = &unk_2F4058;
  v2[6] = &unk_2F4088;
  v2[7] = &unk_2F4088;
  return swift_updateClassMetadata2(a1, 256, 8, v2, a1 + 160);
}

uint64_t method lookup function for TextFieldAction(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for TextFieldAction);
}

uint64_t dispatch thunk of TextFieldAction.__allocating_init(title:message:okButtonTitle:placeholder:textFieldContent:isCancelable:keyboardStyle:presentationStyle:okClosure:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 224))(a1, a2);
}

uint64_t sub_E3694()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_E36B8()
{
  uint64_t v0;
  uint64_t v2;

  (*(void (**)(uint64_t *__return_ptr))(v0 + 16))(&v2);
  return v2;
}

uint64_t sub_E36E8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = result;
  return result;
}

unint64_t static ManageCategoriesPageIntent.kind.getter()
{
  return 0xD00000000000001ALL;
}

uint64_t sub_E3730(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_E3AE8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_E3758(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_E3AE8();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_E3780(_QWORD *a1@<X8>)
{
  *a1 = 0xD00000000000001ALL;
  a1[1] = 0x80000000002F4090;
}

uint64_t ManageCategoriesPageIntent.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  __int128 *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v17;
  int v18;
  int v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  char v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B84E0);
  v21 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *v2;
  v8 = *((_QWORD *)v2 + 2);
  v7 = *((_QWORD *)v2 + 3);
  v9 = *((_BYTE *)v2 + 32);
  v10 = *((unsigned __int8 *)v2 + 33);
  v18 = *((unsigned __int8 *)v2 + 34);
  v19 = v10;
  v11 = a1[3];
  v12 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v11);
  v13 = sub_E3AE8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ManageCategoriesPageIntent.CodingKeys, &type metadata for ManageCategoriesPageIntent.CodingKeys, v13, v11, v12);
  v22 = v20;
  v23 = v8;
  v24 = v7;
  v25 = v9;
  v26 = v19;
  v27 = v18;
  v14 = *(__int128 *)((char *)v2 + 56);
  v28 = *(__int128 *)((char *)v2 + 40);
  v29 = v14;
  v15 = *(__int128 *)((char *)v2 + 88);
  v30 = *(__int128 *)((char *)v2 + 72);
  v31 = v15;
  sub_26F28();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v22);
  return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v6, v4);
}

uint64_t ManageCategoriesPageIntent.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  char v13;
  char v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _OWORD v21[2];
  char v22;
  char v23;
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B84F0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  v11 = sub_E3AE8();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ManageCategoriesPageIntent.CodingKeys, &type metadata for ManageCategoriesPageIntent.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    sub_26F6C();
    KeyedDecodingContainer.decode<A>(_:forKey:)(v21, &type metadata for RecommendationsMetadata);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v12 = v22;
    v13 = v23;
    v14 = v24;
    v15 = v25;
    v16 = v26;
    v17 = v27;
    v18 = v28;
    v19 = v21[1];
    *(_OWORD *)a2 = v21[0];
    *(_OWORD *)(a2 + 16) = v19;
    *(_BYTE *)(a2 + 32) = v12;
    *(_BYTE *)(a2 + 33) = v13;
    *(_BYTE *)(a2 + 34) = v14;
    *(_OWORD *)(a2 + 40) = v15;
    *(_OWORD *)(a2 + 56) = v16;
    *(_OWORD *)(a2 + 72) = v17;
    *(_OWORD *)(a2 + 88) = v18;
  }
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t sub_E3A50@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ManageCategoriesPageIntent.init(from:)(a1, a2);
}

uint64_t sub_E3A64(_QWORD *a1)
{
  return ManageCategoriesPageIntent.encode(to:)(a1);
}

uint64_t sub_E3A78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_E3D8C();
  return CustomJSValueConvertible<>.jsRepresentation(in:)(a1, a2, a3, v6);
}

uint64_t sub_E3AD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_47C94(a1, a2, a3);
}

unint64_t sub_E3AE8()
{
  unint64_t result;

  result = qword_3B84E8;
  if (!qword_3B84E8)
  {
    result = swift_getWitnessTable(&unk_2F4304);
    atomic_store(result, (unint64_t *)&qword_3B84E8);
  }
  return result;
}

unint64_t sub_E3B30()
{
  unint64_t result;

  result = qword_3B84F8;
  if (!qword_3B84F8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ManageCategoriesPageIntent);
    atomic_store(result, (unint64_t *)&qword_3B84F8);
  }
  return result;
}

unint64_t sub_E3B78()
{
  unint64_t result;

  result = qword_3B8500;
  if (!qword_3B8500)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ManageCategoriesPageIntent);
    atomic_store(result, (unint64_t *)&qword_3B8500);
  }
  return result;
}

unint64_t sub_E3BC0()
{
  unint64_t result;

  result = qword_3B8508;
  if (!qword_3B8508)
  {
    type metadata accessor for ManageCategoriesPage(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for ManageCategoriesPage);
    atomic_store(result, (unint64_t *)&qword_3B8508);
  }
  return result;
}

ValueMetadata *type metadata accessor for ManageCategoriesPageIntent()
{
  return &type metadata for ManageCategoriesPageIntent;
}

uint64_t storeEnumTagSinglePayload for ManageCategoriesPageIntent.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_E3C58 + 4 * byte_2F40A0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_E3C78 + 4 * byte_2F40A5[v4]))();
}

_BYTE *sub_E3C58(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_E3C78(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_E3C80(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_E3C88(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_E3C90(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_E3C98(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ManageCategoriesPageIntent.CodingKeys()
{
  return &type metadata for ManageCategoriesPageIntent.CodingKeys;
}

unint64_t sub_E3CB8()
{
  unint64_t result;

  result = qword_3B8510;
  if (!qword_3B8510)
  {
    result = swift_getWitnessTable(&unk_2F42DC);
    atomic_store(result, (unint64_t *)&qword_3B8510);
  }
  return result;
}

unint64_t sub_E3D00()
{
  unint64_t result;

  result = qword_3B8518;
  if (!qword_3B8518)
  {
    result = swift_getWitnessTable(&unk_2F424C);
    atomic_store(result, (unint64_t *)&qword_3B8518);
  }
  return result;
}

unint64_t sub_E3D48()
{
  unint64_t result;

  result = qword_3B8520;
  if (!qword_3B8520)
  {
    result = swift_getWitnessTable(&unk_2F4274);
    atomic_store(result, (unint64_t *)&qword_3B8520);
  }
  return result;
}

unint64_t sub_E3D8C()
{
  unint64_t result;

  result = qword_3B8528;
  if (!qword_3B8528)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ManageCategoriesPageIntent);
    atomic_store(result, (unint64_t *)&qword_3B8528);
  }
  return result;
}

uint64_t RecommendationsUpdatedTipProvider.__allocating_init(asPartOf:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = swift_allocObject(v1, 64, 7);
  RecommendationsUpdatedTipProvider.init(asPartOf:)(a1);
  return v3;
}

uint64_t AddFavoriteCategoriesSearchTipProvider.addFavoriteCategoriesSearchTipShelf.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8660);
  __chkstk_darwin(v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(v1 + 16);
  if (v5)
  {
    v6 = *(_QWORD *)(v1 + 16);
  }
  else
  {
    v7 = type metadata accessor for ModernShelf(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v4, 1, 1, v7);
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B35B8);
    swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
    v6 = CurrentValueSubject.init(_:)(v4);
    v9 = *(_QWORD *)(v1 + 16);
    *(_QWORD *)(v1 + 16) = v6;
    swift_retain(v6);
    swift_release(v9);
    v5 = 0;
  }
  swift_retain(v5);
  return v6;
}

uint64_t AddFavoriteCategoriesSearchTipProvider.addFavoriteCategoriesSearchTipShelf.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v1 + 16) = a1;
  return swift_release(v2);
}

uint64_t (*AddFavoriteCategoriesSearchTipProvider.addFavoriteCategoriesSearchTipShelf.modify(uint64_t *a1))(uint64_t *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = AddFavoriteCategoriesSearchTipProvider.addFavoriteCategoriesSearchTipShelf.getter();
  return sub_E3F2C;
}

uint64_t sub_E3F2C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v1 = a1[1];
  v3 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v1 + 16) = v2;
  return swift_release(v3);
}

unint64_t static RecommendationsUpdatedTipProvider.recommendationsUpdatedTipSeenUserDefaultKey.getter()
{
  return 0xD00000000000002ALL;
}

_QWORD *RecommendationsUpdatedTipProvider.init(asPartOf:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  os_unfair_lock_s *v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8530);
  v50 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v49 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2B18);
  __chkstk_darwin(v6);
  v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8538);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8540);
  v45 = *(_QWORD *)(v47 - 8);
  __chkstk_darwin(v47);
  v14 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8548);
  v46 = *(_QWORD *)(v48 - 8);
  __chkstk_darwin(v48);
  v16 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v1[2] = 0;
  v1[5] = a1;
  v17 = type metadata accessor for InterestObserverProvider(0);
  swift_retain(a1);
  BaseObjectGraph.inject<A>(_:)(&v54, v17, v17);
  v2[6] = v54;
  v51 = v4;
  v52 = a1;
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
    && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
  {
    v18 = (void *)sub_B3484((uint64_t)_swiftEmptyArrayStorage);
  }
  else
  {
    v18 = &_swiftEmptySetSingleton;
  }
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3748);
  v20 = swift_allocObject(v19, 28, 7);
  *(_DWORD *)(v20 + 24) = 0;
  *(_QWORD *)(v20 + 16) = v18;
  v2[7] = v20;
  v21 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "_applePodcastsFoundationSharedUserDefaults");
  v22 = (void *)NSUserDefaults.BOOLPublisher(forKey:)(0xD00000000000002FLL, 0x800000000030E560);

  v2[3] = v22;
  v54 = v22;
  v23 = swift_retain(v22);
  v53 = InterestObserverProvider.dismissedInlineSelectionModulePublisher.getter(v23);
  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2120);
  v25 = sub_32914(&qword_3B2128, &qword_3B2120, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publishers.CombineLatest.init(_:_:)(&v54, &v53, v24, v24, v25, v25);
  v26 = sub_32914(&qword_3B8550, &qword_3B8538, (uint64_t)&protocol conformance descriptor for Publishers.CombineLatest<A, B>);
  Publisher.map<A>(_:)(sub_E44EC, 0, v9, &type metadata for Bool, v26);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v27 = sub_327F8(0, (unint64_t *)&qword_3B8710, OS_dispatch_queue_ptr);
  v54 = (id)static OS_dispatch_queue.main.getter(v27);
  v28 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v8, 1, 1, v28);
  v29 = sub_32914(&qword_3B8558, &qword_3B8540, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v30 = sub_E50C0((unint64_t *)&qword_3B2B60, (unint64_t *)&qword_3B8710, OS_dispatch_queue_ptr, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  v31 = v47;
  Publisher.receive<A>(on:options:)(&v54, v8, v47, v27, v29, v30);
  sub_1459C((uint64_t)v8, &qword_3B2B18);

  (*(void (**)(char *, uint64_t))(v45 + 8))(v14, v31);
  v32 = sub_32914(&qword_3B8560, &qword_3B8548, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v33 = v48;
  v34 = (void *)Publisher.eraseToAnyPublisher()(v48, v32);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v16, v33);
  v2[4] = v34;
  v54 = v34;
  v35 = swift_allocObject(&unk_37FDF0, 24, 7);
  swift_weakInit(v35 + 16);
  swift_retain(v34);
  v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8660);
  v37 = v49;
  Publisher.map<A>(_:)(sub_E46DC, v35, v24, v36, v25);
  swift_release(v35);
  swift_release(v54);
  v38 = swift_allocObject(&unk_37FDF0, 24, 7);
  swift_weakInit(v38 + 16);
  v39 = sub_32914(&qword_3B8568, &qword_3B8530, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v40 = v51;
  v41 = Publisher<>.sink(receiveValue:)(sub_E4C1C, v38, v51, v39);
  swift_release(v38);
  (*(void (**)(char *, uint64_t))(v50 + 8))(v37, v40);
  v42 = (os_unfair_lock_s *)v2[7];
  swift_retain(v42);
  os_unfair_lock_lock(v42 + 6);
  sub_635EC();
  os_unfair_lock_unlock(v42 + 6);
  swift_release(v41);
  swift_release(v42);
  swift_release(v52);
  return v2;
}

void sub_E44EC(char *a1@<X0>, _BYTE *a2@<X8>)
{
  char v3;
  char v4;
  id v5;
  NSString v6;
  unsigned __int8 v7;
  char v8;

  v3 = *a1;
  v4 = a1[1];
  v5 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "_applePodcastsFoundationSharedUserDefaults");
  v6 = String._bridgeToObjectiveC()();
  v7 = objc_msgSend(v5, "BOOLForKey:", v6);

  if ((v7 & 1) != 0)
    v8 = 0;
  else
    v8 = v4 & ~v3;
  *a2 = v8;
}

uint64_t sub_E4598()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_E45BC@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  int v5;
  uint64_t v6;
  _QWORD *boxed_opaque_existential_2Tm;
  uint64_t v8;
  uint64_t Strong;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD v14[5];

  v5 = *a1;
  v6 = type metadata accessor for Podcasts(0);
  v14[3] = v6;
  v14[4] = sub_F1C0((unint64_t *)&qword_3B33B8, (void (*)(uint64_t))&type metadata accessor for Podcasts, (uint64_t)&protocol conformance descriptor for Podcasts);
  boxed_opaque_existential_2Tm = __swift_allocate_boxed_opaque_existential_2Tm(v14);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(boxed_opaque_existential_2Tm, enum case for Podcasts.ponderosa(_:), v6);
  LOBYTE(v6) = isFeatureEnabled(_:)(v14);
  __swift_destroy_boxed_opaque_existential_1(v14);
  if ((v6 & 1) != 0 && v5)
  {
    v8 = a2 + 16;
    swift_beginAccess(v8, v14, 0, 0);
    Strong = swift_weakLoadStrong(v8);
    if (Strong)
    {
      v10 = Strong;
      sub_E46E4(a3);
      swift_release(v10);
      v11 = type metadata accessor for ModernShelf(0);
      return (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(a3, 0, 1, v11);
    }
  }
  else
  {
    Strong = 0;
  }
  v13 = type metadata accessor for ModernShelf(Strong);
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(a3, 1, 1, v13);
}

uint64_t sub_E46DC@<X0>(unsigned __int8 *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_E45BC(a1, v2, a2);
}

void sub_E46E4(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  void *v5;
  id v6;
  Swift::String v7;
  Swift::String v8;
  void *object;
  id v10;
  Swift::String v11;
  Swift::String v12;
  void *v13;
  id v14;
  NSString v15;
  NSString v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  NSString v23;
  void *v24;
  id v25;
  Swift::String v26;
  Swift::String v27;
  void *v28;
  NSString v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSString v34;
  id v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(char *, uint64_t, uint64_t);
  id v44;
  _QWORD *v45;
  __int16 v46;
  int v47;
  __int16 v48;
  uint64_t v49;
  Swift::String v50;
  Swift::String v51;
  Swift::String v52;

  v45 = a1;
  v1 = type metadata accessor for TipType(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = (void *)objc_opt_self(NSBundle);
  v6 = objc_msgSend(v5, "mainBundle");
  v7._countAndFlagsBits = 0xD000000000000021;
  v50._object = (void *)0x800000000030E6A0;
  v7._object = (void *)0x800000000030E670;
  v8._countAndFlagsBits = 0;
  v8._object = (void *)0xE000000000000000;
  v50._countAndFlagsBits = 0xD000000000000017;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v7, (Swift::String_optional)0, (NSBundle)v6, v8, v50)._object;

  v10 = objc_msgSend(v5, "mainBundle");
  v11._countAndFlagsBits = 0xD000000000000024;
  v51._countAndFlagsBits = 0xD00000000000002BLL;
  v51._object = (void *)0x800000000030E6F0;
  v11._object = (void *)0x800000000030E6C0;
  v12._countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  v13 = NSLocalizedString(_:tableName:bundle:value:comment:)(v11, (Swift::String_optional)0, (NSBundle)v10, v12, v51)._object;

  v14 = objc_allocWithZone((Class)AMSDialogRequest);
  v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v13);
  v17 = objc_msgSend(v14, "initWithTitle:message:", v15, v16);

  v18 = enum case for TipType.recommendationsUpdated(_:);
  v43 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v2 + 104);
  v19 = v43(v4, enum case for TipType.recommendationsUpdated(_:), v1);
  TipType.rawValue.getter(v19);
  v21 = v20;
  v22 = *(void (**)(char *, uint64_t))(v2 + 8);
  v22(v4, v1);
  v23 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v21);
  objc_msgSend(v17, "setIdentifier:", v23);

  objc_msgSend(v17, "setStyle:", 4);
  v24 = (void *)objc_opt_self(AMSDialogAction);
  v44 = objc_msgSend(v24, "actionWithTitle:style:", 0, 2);
  objc_msgSend(v17, "addButtonAction:");
  v25 = objc_msgSend(v5, "mainBundle");
  v52._countAndFlagsBits = 0xD00000000000001ALL;
  v26._countAndFlagsBits = 0xD000000000000020;
  v52._object = (void *)0x800000000030E750;
  v26._object = (void *)0x800000000030E720;
  v27._countAndFlagsBits = 0;
  v27._object = (void *)0xE000000000000000;
  v28 = NSLocalizedString(_:tableName:bundle:value:comment:)(v26, (Swift::String_optional)0, (NSBundle)v25, v27, v52)._object;

  v29 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v28);
  v30 = objc_msgSend(v24, "actionWithTitle:style:", v29, 0);

  v31 = v43(v4, v18, v1);
  TipType.rawValue.getter(v31);
  v33 = v32;
  v22(v4, v1);
  v34 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v33);
  objc_msgSend(v30, "setIdentifier:", v34);

  objc_msgSend(v17, "addButtonAction:", v30);
  v35 = objc_msgSend(v17, "identifier");
  if (v35)
  {
    v36 = v35;
    v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
    v39 = v38;

  }
  else
  {
    v37 = 0;
    v39 = 0xE000000000000000;
  }
  v46 = 53;
  v48 = 256;
  v47 = 0;
  v49 = 1;
  v40 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8750);
  v41 = swift_allocObject(v40, 72, 7);
  *(_OWORD *)(v41 + 16) = xmmword_2EA0D0;
  *(_QWORD *)(v41 + 56) = sub_327F8(0, (unint64_t *)&qword_3B7DB0, AMSDialogRequest_ptr);
  *(_QWORD *)(v41 + 64) = sub_E50C0((unint64_t *)&qword_3B8760, (unint64_t *)&qword_3B7DB0, AMSDialogRequest_ptr, (uint64_t)&protocol conformance descriptor for AMSDialogRequest);
  *(_QWORD *)(v41 + 32) = v17;
  ModernShelf.init(id:title:itemPresentation:items:)(v37, v39, 0, 0, (unsigned __int8 *)&v46, v41, v45);

}

uint64_t sub_E4BA4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  _BYTE v6[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v6, 0, 0);
  result = swift_weakLoadStrong(v2);
  if (result)
  {
    v4 = result;
    v5 = AddFavoriteCategoriesSearchTipProvider.addFavoriteCategoriesSearchTipShelf.getter();
    swift_release(v4);
    CurrentValueSubject.send(_:)();
    return swift_release(v5);
  }
  return result;
}

uint64_t sub_E4C1C(uint64_t a1)
{
  uint64_t v1;

  return sub_E4BA4(a1, v1);
}

_QWORD *RecommendationsUpdatedTipProvider.handle(tipAction:from:)(void *a1, void *a2)
{
  id v4;
  NSString v5;
  _QWORD *result;

  v4 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "_applePodcastsFoundationSharedUserDefaults");
  v5 = String._bridgeToObjectiveC()();
  objc_msgSend(v4, "setBool:forKey:", 1, v5);

  result = objc_msgSend(a1, "style");
  if (result != (_QWORD *)((char *)&dword_0 + 2))
    return sub_E4CE8(a2);
  return result;
}

_QWORD *sub_E4CE8(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[6];

  v2 = type metadata accessor for FlowDestination(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ActionMetrics(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v25 - v10;
  type metadata accessor for ActionRunnerOptions(0);
  v12 = swift_retain();
  v13 = BaseObjectGraph.__allocating_init(_:)(v12);
  v27 = sub_327F8(0, &qword_3B8638, UIViewController_ptr);
  *(_QWORD *)&v26 = a1;
  v14 = objc_msgSend(a1, "view");
  sub_236BC((uint64_t)&v26, (uint64_t)v29);
  v29[4] = v14;
  v15 = v14;
  v16 = _s8ShelfKit19ActionRunnerOptionsC04withC6OriginyACXDAA0cG0VSgF_0((uint64_t)v29);
  sub_1459C((uint64_t)v29, &qword_3B18E8);

  swift_release(v13);
  v17 = sub_1459C((uint64_t)&v26, (uint64_t *)&unk_3BC540);
  static ActionMetrics.notInstrumented.getter(v17);
  v18 = objc_msgSend((id)objc_opt_self(UITraitCollection), "currentTraitCollection");
  v19 = objc_msgSend(v18, "userInterfaceIdiom");

  if (v19)
    v20 = 5;
  else
    v20 = 4;
  swift_storeEnumTagMultiPayload(v4, v2, 51);
  LOBYTE(v29[0]) = v20;
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v11, v5);
  LOBYTE(v26) = 0;
  v21 = type metadata accessor for FlowAction(0);
  swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
  v22 = FlowAction.init(_:id:title:presentationContext:animationBehavior:presentationStyle:destinationPageHeader:actionMetrics:)((uint64_t)v4, 0, 0, 0, 0, (char *)v29, 0, 48, (char *)&v26, (uint64_t)v9);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
  v27 = v21;
  v28 = sub_F1C0((unint64_t *)&qword_3B0C40, (void (*)(uint64_t))type metadata accessor for FlowAction, (uint64_t)&protocol conformance descriptor for Action);
  *(_QWORD *)&v26 = v22;
  sub_F4D8(&v26, (uint64_t)v29);
  v29[5] = v16;
  swift_retain();
  v23 = ActionPerformer.callAsFunction()();
  swift_release(v16);
  swift_release(v23);
  return sub_23740(v29);
}

_QWORD *AddFavoriteCategoriesSearchTipProvider.deinit()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  swift_release(v0[6]);
  swift_release(v0[7]);
  return v0;
}

uint64_t AddFavoriteCategoriesSearchTipProvider.__deallocating_deinit()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  swift_release(v0[6]);
  swift_release(v0[7]);
  return swift_deallocClassInstance(v0, 64, 7);
}

uint64_t sub_E5034@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = AddFavoriteCategoriesSearchTipProvider.addFavoriteCategoriesSearchTipShelf.getter();
  *a1 = result;
  return result;
}

uint64_t sub_E505C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *(_QWORD *)(*(_QWORD *)a2 + 16);
  *(_QWORD *)(*(_QWORD *)a2 + 16) = v2;
  swift_retain(v2);
  return swift_release(v3);
}

uint64_t type metadata accessor for RecommendationsUpdatedTipProvider()
{
  return objc_opt_self(_TtC8ShelfKit33RecommendationsUpdatedTipProvider);
}

uint64_t method lookup function for RecommendationsUpdatedTipProvider(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for RecommendationsUpdatedTipProvider);
}

uint64_t dispatch thunk of AddFavoriteCategoriesSearchTipProvider.__allocating_init(asPartOf:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t sub_E50C0(unint64_t *a1, unint64_t *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t result;

  result = *a1;
  if (!result)
  {
    sub_327F8(255, a2, a3);
    result = swift_getWitnessTable(a4);
    atomic_store(result, a1);
  }
  return result;
}

id UnifiedMessagingProvider.__allocating_init(placement:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  id v5;

  v5 = objc_allocWithZone(v2);
  return UnifiedMessagingProvider.init(placement:)(a1, a2);
}

uint64_t UnifiedMessagingProvider.bannerShelfPublisher.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[2];

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8640);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = OBJC_IVAR____TtC8ShelfKit24UnifiedMessagingProvider____lazy_storage___bannerShelfPublisher;
  v7 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit24UnifiedMessagingProvider____lazy_storage___bannerShelfPublisher);
  if (v7)
  {
    v8 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit24UnifiedMessagingProvider____lazy_storage___bannerShelfPublisher);
  }
  else
  {
    v9 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit24UnifiedMessagingProvider_amsDialogRequestSubject);
    v16[1] = v9;
    swift_retain(v9);
    v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8658);
    v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8660);
    v12 = sub_32914(&qword_3B8668, &qword_3B8658, (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
    Publisher.map<A>(_:)(sub_E56E0, 0, v10, v11, v12);
    swift_release(v9);
    v13 = sub_32914(&qword_3B8670, &qword_3B8640, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
    v8 = Publisher.eraseToAnyPublisher()(v2, v13);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    v14 = *(_QWORD *)(v1 + v6);
    *(_QWORD *)(v1 + v6) = v8;
    swift_retain(v8);
    swift_release(v14);
    v7 = 0;
  }
  swift_retain(v7);
  return v8;
}

id UnifiedMessagingProvider.init(placement:)(uint64_t a1, uint64_t a2)
{
  char *v2;
  objc_class *ObjectType;
  uint64_t v6;
  id v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  id v13;
  void *v14;
  uint64_t v15;
  objc_super v17;
  uint64_t v18;

  ObjectType = (objc_class *)swift_getObjectType();
  v6 = OBJC_IVAR____TtC8ShelfKit24UnifiedMessagingProvider_engagement;
  v7 = objc_allocWithZone((Class)AMSEngagement);
  v8 = v2;
  *(_QWORD *)&v2[v6] = objc_msgSend(v7, "init");
  v9 = OBJC_IVAR____TtC8ShelfKit24UnifiedMessagingProvider_amsDialogRequestSubject;
  v18 = 0;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8658);
  swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
  *(_QWORD *)&v8[v9] = CurrentValueSubject.init(_:)(&v18);
  *(_QWORD *)&v8[OBJC_IVAR____TtC8ShelfKit24UnifiedMessagingProvider____lazy_storage___bannerShelfPublisher] = 0;
  v11 = &v8[OBJC_IVAR____TtC8ShelfKit24UnifiedMessagingProvider_placement];
  *(_QWORD *)v11 = a1;
  *((_QWORD *)v11 + 1) = a2;

  v17.receiver = v8;
  v17.super_class = ObjectType;
  v12 = objc_msgSendSuper2(&v17, "init");
  type metadata accessor for DeferredLaunchTaskCoordinator(0);
  v13 = v12;
  v14 = (void *)static DeferredLaunchTaskCoordinator.shared.getter();
  v15 = swift_allocObject(&unk_37FE28, 24, 7);
  swift_unknownObjectWeakInit(v15 + 16, v13);
  swift_retain(v15);
  dispatch thunk of DeferredLaunchTaskCoordinator.deferred(on:perform:)(0, sub_E5A8C, v15);

  swift_release_n(v15, 2);
  return v13;
}

void sub_E5418(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  NSString v7;
  NSString v8;
  uint64_t v9;
  _BYTE v10[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v10, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = (void *)Strong;
    sub_E54FC();

  }
  swift_beginAccess(v1, &v9, 0, 0);
  v4 = swift_unknownObjectWeakLoadStrong(v1);
  if (v4)
  {
    v5 = (void *)v4;
    v6 = *(void **)(v4 + OBJC_IVAR____TtC8ShelfKit24UnifiedMessagingProvider_engagement);
    v7 = String._bridgeToObjectiveC()();
    v8 = String._bridgeToObjectiveC()();
    objc_msgSend(v6, "addObserver:placement:serviceType:", v5, v7, v8);

  }
}

void sub_E54FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t inited;
  uint64_t v3;
  Swift::Int v4;
  id v5;
  NSString v6;
  Class isa;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  _QWORD v12[5];
  uint64_t v13;
  _BYTE v14[48];

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8730);
  inited = swift_initStackObject(v1, v14);
  *(_OWORD *)(inited + 16) = xmmword_2EA0D0;
  v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit24UnifiedMessagingProvider_placement + 8);
  *(_QWORD *)(inited + 32) = *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit24UnifiedMessagingProvider_placement);
  *(_QWORD *)(inited + 40) = v3;
  swift_bridgeObjectRetain(v3);
  v4 = sub_B5630(inited);
  swift_setDeallocating(inited);
  swift_arrayDestroy(inited + 32, 1, &type metadata for String);
  v5 = objc_allocWithZone((Class)AMSEngagementMessageEvent);
  v6 = String._bridgeToObjectiveC()();
  isa = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v4);
  v8 = objc_msgSend(v5, "initWithServiceType:placements:", v6, isa);

  v9 = objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC8ShelfKit24UnifiedMessagingProvider_engagement), "enqueueMessageEvent:", v8);
  v10 = swift_allocObject(&unk_37FE28, 24, 7);
  swift_unknownObjectWeakInit(v10 + 16, v0);
  v12[4] = sub_E663C;
  v13 = v10;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1107296256;
  v12[2] = sub_E60F4;
  v12[3] = &block_descriptor_8;
  v11 = _Block_copy(v12);
  swift_release(v13);
  objc_msgSend(v9, "addFinishBlock:", v11);
  _Block_release(v11);

}

uint64_t UnifiedMessagingProvider.bannerShelfPublisher.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit24UnifiedMessagingProvider____lazy_storage___bannerShelfPublisher);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit24UnifiedMessagingProvider____lazy_storage___bannerShelfPublisher) = a1;
  return swift_release(v2);
}

uint64_t sub_E56E0@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  id v17;
  id v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  id v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;

  v4 = (int *)type metadata accessor for ModernShelf(0);
  v5 = *((_QWORD *)v4 - 1);
  __chkstk_darwin(v4);
  v7 = (uint64_t *)((char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v8);
  v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
  __chkstk_darwin(v11);
  v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0C38);
  __chkstk_darwin(v14);
  v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*a1)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v5 + 56))(a2, 1, 1, v4);
  v17 = *a1;
  v18 = objc_msgSend(v17, "identifier");
  v43 = v5;
  v44 = a2;
  if (v18)
  {
    v19 = v18;
    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    v40 = v21;
    v41 = v20;

  }
  else
  {
    v40 = 0xE000000000000000;
    v41 = 0;
  }
  v23 = type metadata accessor for Header(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v16, 1, 1, v23);
  v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8750);
  v25 = swift_allocObject(v24, 72, 7);
  *(_OWORD *)(v25 + 16) = xmmword_2EA0D0;
  *(_QWORD *)(v25 + 56) = sub_327F8(0, (unint64_t *)&qword_3B7DB0, AMSDialogRequest_ptr);
  *(_QWORD *)(v25 + 64) = sub_E667C();
  *(_QWORD *)(v25 + 32) = v17;
  v26 = type metadata accessor for URL(0);
  v27 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56);
  v27(v13, 1, 1, v26);
  v28 = type metadata accessor for ImpressionMetrics(0);
  v45 = 0u;
  v46 = 0u;
  v47 = 0;
  v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56);
  v42 = v10;
  v29(v10, 1, 1, v28);
  v30 = v4[8];
  *((_BYTE *)v7 + v30) = 3;
  v31 = (uint64_t)v7 + v4[9];
  v27((char *)v31, 1, 1, v26);
  v32 = v40;
  *v7 = v41;
  v7[1] = v32;
  sub_15BD4((uint64_t)v16, (uint64_t)v7 + v4[5], &qword_3B0C38);
  v33 = (char *)v7 + v4[6];
  *(_WORD *)v33 = 53;
  *((_WORD *)v33 + 3) = 256;
  *(_DWORD *)(v33 + 2) = 0;
  *((_QWORD *)v33 + 1) = 1;
  *(uint64_t *)((char *)v7 + v4[7]) = v25;
  v34 = v17;
  sub_15B8C((uint64_t)v13, v31);
  *((_BYTE *)v7 + v4[10]) = 1;
  *((_BYTE *)v7 + v4[11]) = 0;
  v35 = (uint64_t)v7 + v4[12];
  if (*((_QWORD *)&v46 + 1))
  {
    sub_F4D8(&v45, v35);
  }
  else
  {
    v36 = (unint64_t)v46;
    *(_OWORD *)v35 = v45;
    *(_OWORD *)(v35 + 16) = v36;
    *(_QWORD *)(v35 + 32) = v47;
  }
  v38 = v43;
  v37 = v44;
  sub_15BD4((uint64_t)v42, (uint64_t)v7 + v4[13], (uint64_t *)&unk_3B8790);
  *((_BYTE *)v7 + v30) = 3;
  sub_15C18((uint64_t)v7, v37);

  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, int *))(v38 + 56))(v37, 0, 1, v4);
}

uint64_t sub_E5A68()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_E5A8C()
{
  uint64_t v0;

  sub_E5418(v0);
}

uint64_t (*UnifiedMessagingProvider.bannerShelfPublisher.modify(uint64_t *a1))(uint64_t *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = UnifiedMessagingProvider.bannerShelfPublisher.getter();
  return sub_E5AC8;
}

uint64_t sub_E5AC8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v1 = a1[1];
  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit24UnifiedMessagingProvider____lazy_storage___bannerShelfPublisher);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit24UnifiedMessagingProvider____lazy_storage___bannerShelfPublisher) = v2;
  return swift_release(v3);
}

id sub_E5AE0(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id result;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  id v17;
  void *v18;
  uint64_t Strong;
  char *v21;
  id v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  void *v33;
  id v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  _QWORD aBlock[5];
  uint64_t v68;
  char v69[32];

  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v63 = *(_QWORD *)(v5 - 8);
  v64 = v5;
  __chkstk_darwin(v5);
  v62 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v60 = *(_QWORD *)(v7 - 8);
  v61 = v7;
  result = (id)__chkstk_darwin(v7);
  v59 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    result = objc_msgSend(a1, "messageActions");
    if (result)
    {
      v10 = result;
      v11 = sub_327F8(0, &qword_3B8738, AMSEngagementMessageEventServiceResponse_ptr);
      v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v10, v11);

      if ((unint64_t)v12 >> 62)
        goto LABEL_34;
      v13 = *(_QWORD *)((char *)&dword_10 + (v12 & 0xFFFFFFFFFFFFF8));
      swift_bridgeObjectRetain(v12);
      while (v13)
      {
        v14 = a3 + 16;
        v55 = v12 & 0xC000000000000001;
        swift_beginAccess(a3 + 16, v69, 0, 0);
        v15 = 0;
        v53 = v12 + 32;
        v52 = v12;
        v51 = v13;
        v50 = a3 + 16;
        v16 = v59;
        while (1)
        {
          v17 = v55
              ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v15, v12)
              : *(id *)(v53 + 8 * v15);
          v18 = v17;
          if (__OFADD__(v15++, 1))
            break;
          Strong = swift_unknownObjectWeakLoadStrong(v14);
          if (Strong)
          {
            v21 = (char *)Strong;
            v22 = objc_msgSend(v18, "placementsMap");
            v23 = v18;
            if (v22)
            {
              v24 = v22;
              v54 = v23;
              v25 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8740);
              a3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v24, &type metadata for String, v25, &protocol witness table for String);

              if (*(_QWORD *)(a3 + 16))
              {
                v27 = *(_QWORD *)&v21[OBJC_IVAR____TtC8ShelfKit24UnifiedMessagingProvider_placement];
                v26 = *(_QWORD *)&v21[OBJC_IVAR____TtC8ShelfKit24UnifiedMessagingProvider_placement + 8];
                swift_bridgeObjectRetain(v26);
                v28 = sub_29724(v27, v26);
                if ((v29 & 1) != 0)
                {
                  v66 = v21;
                  v12 = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 8 * v28);
                  swift_bridgeObjectRetain(v12);
                  swift_bridgeObjectRelease(a3);
                  swift_bridgeObjectRelease(v26);
                  if ((unint64_t)v12 >> 62)
                  {
                    if (v12 < 0)
                      v47 = v12;
                    else
                      v47 = v12 & 0xFFFFFFFFFFFFFF8;
                    swift_bridgeObjectRetain(v12);
                    v65 = _CocoaArrayWrapper.endIndex.getter(v47);
                    if (v65)
                    {
LABEL_18:
                      v58 = sub_327F8(0, (unint64_t *)&qword_3B8710, OS_dispatch_queue_ptr);
                      if (v65 < 1)
                        goto LABEL_33;
                      v31 = 0;
                      v56 = v12 & 0xC000000000000001;
                      v57 = v12;
                      do
                      {
                        if (v56)
                          v32 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v31, v12);
                        else
                          v32 = *(id *)(v12 + 8 * v31 + 32);
                        v33 = v32;
                        v34 = v66;
                        ++v31;
                        v35 = (void *)static OS_dispatch_queue.main.getter(v32);
                        v36 = swift_allocObject(&unk_37FE28, 24, 7);
                        swift_unknownObjectWeakInit(v36 + 16, v34);
                        v37 = swift_allocObject(&unk_37FED8, 32, 7);
                        *(_QWORD *)(v37 + 16) = v36;
                        *(_QWORD *)(v37 + 24) = v33;
                        aBlock[4] = sub_E6674;
                        v68 = v37;
                        aBlock[0] = _NSConcreteStackBlock;
                        aBlock[1] = 1107296256;
                        aBlock[2] = sub_2C9F4;
                        aBlock[3] = &block_descriptor_15_1;
                        v38 = _Block_copy(aBlock);
                        v39 = v68;
                        v40 = v33;
                        v41 = swift_release(v39);
                        static DispatchQoS.unspecified.getter(v41);
                        aBlock[0] = _swiftEmptyArrayStorage;
                        v42 = sub_E65F4();
                        v43 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8720);
                        v44 = sub_32914((unint64_t *)&qword_3B4430, (uint64_t *)&unk_3B8720, (uint64_t)&protocol conformance descriptor for [A]);
                        v45 = v62;
                        v46 = v64;
                        dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v43, v44, v64, v42);
                        a3 = (uint64_t)v35;
                        OS_dispatch_queue.async(group:qos:flags:execute:)(0, v16, v45, v38);
                        _Block_release(v38);

                        (*(void (**)(char *, uint64_t))(v63 + 8))(v45, v46);
                        (*(void (**)(char *, uint64_t))(v60 + 8))(v16, v61);

                        v12 = v57;
                      }
                      while (v65 != v31);
                    }
                  }
                  else
                  {
                    v30 = *(_QWORD *)((char *)&dword_10 + (v12 & 0xFFFFFFFFFFFFF8));
                    swift_bridgeObjectRetain(v12);
                    v65 = v30;
                    if (v30)
                      goto LABEL_18;
                  }
                  swift_bridgeObjectRelease_n(v12, 2);

                  v12 = v52;
                  v13 = v51;
                  v14 = v50;
                  goto LABEL_7;
                }

                swift_bridgeObjectRelease(a3);
                swift_bridgeObjectRelease(v26);
              }
              else
              {

                swift_bridgeObjectRelease(a3);
              }
            }
            else
            {

            }
          }
          else
          {

          }
LABEL_7:
          if (v15 == v13)
            return (id)swift_bridgeObjectRelease_n(v12, 2);
        }
        __break(1u);
LABEL_33:
        __break(1u);
LABEL_34:
        if (v12 < 0)
          v48 = v12;
        else
          v48 = v12 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v12);
        v13 = _CocoaArrayWrapper.endIndex.getter(v48);
      }
      return (id)swift_bridgeObjectRelease_n(v12, 2);
    }
  }
  return result;
}

uint64_t sub_E6050(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t result;
  void *v5;
  uint64_t v6;
  id v7;
  _BYTE v8[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v8, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v3);
  if (result)
  {
    v5 = (void *)result;
    v6 = *(_QWORD *)(result + OBJC_IVAR____TtC8ShelfKit24UnifiedMessagingProvider_amsDialogRequestSubject);
    swift_retain(v6);

    v7 = objc_msgSend(a2, "makeDialogRequest");
    CurrentValueSubject.send(_:)();

    return swift_release(v6);
  }
  return result;
}

void sub_E60F4(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  void (*v6)(void *, void *);
  id v7;
  id v8;

  v6 = *(void (**)(void *, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v8 = a2;
  v7 = a3;
  v6(a2, a3);
  swift_release(v5);

}

void UnifiedMessagingProvider.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("ShelfKit.UnifiedMessagingProvider", 33, "init()", 6, 0);
  __break(1u);
}

uint64_t UnifiedMessagingProvider.engagement(_:didUpdate:placement:serviceType:)(uint64_t a1, void *a2)
{
  return sub_E6324(a2);
}

uint64_t sub_E6224(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  void *v3;
  uint64_t v4;
  _BYTE v5[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v5, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v1);
  if (result)
  {
    v3 = (void *)result;
    v4 = *(_QWORD *)(result + OBJC_IVAR____TtC8ShelfKit24UnifiedMessagingProvider_amsDialogRequestSubject);
    swift_retain(v4);

    CurrentValueSubject.send(_:)();
    return swift_release(v4);
  }
  return result;
}

uint64_t sub_E6324(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  _QWORD aBlock[5];
  uint64_t v26;

  v2 = v1;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v24 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_327F8(0, (unint64_t *)&qword_3B8710, OS_dispatch_queue_ptr);
  v12 = (void *)static OS_dispatch_queue.main.getter(v11);
  v13 = swift_allocObject(&unk_37FE28, 24, 7);
  swift_unknownObjectWeakInit(v13 + 16, v2);
  v14 = swift_allocObject(&unk_37FE60, 32, 7);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = a1;
  aBlock[4] = sub_E65D4;
  v26 = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_2C9F4;
  aBlock[3] = &block_descriptor_8;
  v15 = _Block_copy(aBlock);
  v16 = v26;
  v17 = a1;
  v18 = swift_release(v16);
  static DispatchQoS.unspecified.getter(v18);
  aBlock[0] = _swiftEmptyArrayStorage;
  v19 = sub_E65F4();
  v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8720);
  v21 = sub_32914((unint64_t *)&qword_3B4430, (uint64_t *)&unk_3B8720, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v20, v21, v4, v19);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v6, v15);
  _Block_release(v15);

  (*(void (**)(char *, uint64_t))(v24 + 8))(v6, v4);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_E6544@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = UnifiedMessagingProvider.bannerShelfPublisher.getter();
  *a1 = result;
  return result;
}

uint64_t sub_E656C(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *(_QWORD *)(*a2 + OBJC_IVAR____TtC8ShelfKit24UnifiedMessagingProvider____lazy_storage___bannerShelfPublisher);
  *(_QWORD *)(*a2 + OBJC_IVAR____TtC8ShelfKit24UnifiedMessagingProvider____lazy_storage___bannerShelfPublisher) = v2;
  swift_retain(v2);
  return swift_release(v3);
}

uint64_t type metadata accessor for UnifiedMessagingProvider()
{
  return objc_opt_self(_TtC8ShelfKit24UnifiedMessagingProvider);
}

uint64_t method lookup function for UnifiedMessagingProvider(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for UnifiedMessagingProvider);
}

uint64_t sub_E65D4()
{
  uint64_t v0;

  return sub_E6224(*(_QWORD *)(v0 + 16));
}

uint64_t block_copy_helper_8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t block_destroy_helper_8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_E65F4()
{
  unint64_t result;

  result = qword_3B4420;
  if (!qword_3B4420)
  {
    type metadata accessor for DispatchWorkItemFlags(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for DispatchWorkItemFlags);
    atomic_store(result, (unint64_t *)&qword_3B4420);
  }
  return result;
}

id sub_E663C(void *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_E5AE0(a1, a2, v2);
}

uint64_t objectdestroy_3Tm()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_E6674()
{
  uint64_t v0;

  return sub_E6050(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

unint64_t sub_E667C()
{
  unint64_t result;

  result = qword_3B8760;
  if (!qword_3B8760)
  {
    sub_327F8(255, (unint64_t *)&qword_3B7DB0, AMSDialogRequest_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for AMSDialogRequest);
    atomic_store(result, (unint64_t *)&qword_3B8760);
  }
  return result;
}

uint64_t CategoryListPresenter.__allocating_init(asPartOf:with:)(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = swift_allocObject(v2, 64, 7);
  CategoryListPresenter.init(asPartOf:with:)(a1, a2);
  return v5;
}

_QWORD *CategoryListPresenter.init(asPartOf:with:)(uint64_t a1, unsigned __int8 *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t v19;
  Swift::String v20;
  int v21;
  char v22;
  Swift::String v23;

  v3 = v2;
  v6 = type metadata accessor for PageContent(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *a2;
  v3[4] = &_swiftEmptySetSingleton;
  v20._countAndFlagsBits = 0;
  v20._object = 0;
  v21 = 0;
  v22 = 5;
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8770);
  swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
  v3[5] = CurrentValueSubject.init(_:)(&v20);
  *v8 = 0;
  swift_storeEnumTagMultiPayload(v8, v6, 0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B27B0);
  swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
  v3[6] = CurrentValueSubject.init(_:)(v8);
  v20._countAndFlagsBits = (uint64_t)_swiftEmptyArrayStorage;
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8780);
  swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  v3[7] = CurrentValueSubject.init(_:)(&v20);
  v3[2] = a1;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B68D0);
  swift_retain();
  BaseObjectGraph.inject<A>(_:)(&v20, v13, v13);
  v3[3] = v20._countAndFlagsBits;
  if (v9 == 1)
  {
    v14 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v23._object = (void *)0xE000000000000000;
    v15._object = (void *)0x800000000030E8C0;
    v15._countAndFlagsBits = 0xD000000000000010;
    v16._countAndFlagsBits = 0;
    v16._object = (void *)0xE000000000000000;
    v23._countAndFlagsBits = 0;
    v17 = NSLocalizedString(_:tableName:bundle:value:comment:)(v15, (Swift::String_optional)0, (NSBundle)v14, v16, v23);

    v20 = v17;
    v21 = 0;
    v22 = 3;
    CurrentValueSubject.value.setter(&v20);
  }
  swift_release(a1);
  return v3;
}

uint64_t CategoryListPresenter.pageContent.getter()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 48, v2, 0, 0);
  return swift_retain(*(_QWORD *)(v0 + 48));
}

uint64_t CategoryListPresenter.pageContent.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + 48, v5, 1, 0);
  v3 = *(_QWORD *)(v1 + 48);
  *(_QWORD *)(v1 + 48) = a1;
  return swift_release(v3);
}

uint64_t (*CategoryListPresenter.pageContent.modify(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + 48, a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t CategoryListPresenter.headerButtonItems.getter()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 56, v2, 0, 0);
  return swift_retain(*(_QWORD *)(v0 + 56));
}

uint64_t CategoryListPresenter.headerButtonItems.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + 56, v5, 1, 0);
  v3 = *(_QWORD *)(v1 + 56);
  *(_QWORD *)(v1 + 56) = a1;
  return swift_release(v3);
}

uint64_t (*CategoryListPresenter.headerButtonItems.modify(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + 56, a1, 33, 0);
  return j_j__swift_endAccess;
}

Swift::Void __swiftcall CategoryListPresenter.viewDidLoad()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t (*v57)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v58;
  char *v59;
  id v60;
  id v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  int *v75;
  unint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  char *v99;
  char *v100;
  uint64_t v101;
  char *v102;
  unint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  __int128 v115;
  uint64_t v116;
  uint64_t v117;
  char v118[8];

  v96 = *v0;
  v1 = type metadata accessor for HeaderButtonItem(0);
  v2 = *(_QWORD *)(v1 - 8);
  v110 = v1;
  v111 = v2;
  __chkstk_darwin(v1);
  v109 = (uint64_t)&v89 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v4);
  v108 = (char *)&v89 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = type metadata accessor for FlowDestination(0);
  __chkstk_darwin(v105);
  v102 = (char *)&v89 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = type metadata accessor for ActionMetrics(0);
  v101 = *(_QWORD *)(v104 - 8);
  v7 = __chkstk_darwin(v104);
  v100 = (char *)&v89 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v99 = (char *)&v89 - v9;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
  __chkstk_darwin(v10);
  v113 = (uint64_t)&v89 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Locale(0);
  __chkstk_darwin(v12);
  v98 = (char *)&v89 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v14);
  v97 = (char *)&v89 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = type metadata accessor for ActionButton(0);
  v16 = __chkstk_darwin(v106);
  v103 = (unint64_t *)((char *)&v89 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v16);
  v107 = (uint64_t)&v89 - v18;
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B87A0);
  v91 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v21 = (char *)&v89 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B87A8);
  v92 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v24 = (char *)&v89 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B87B0);
  v95 = *(_QWORD *)(v94 - 8);
  v25 = __chkstk_darwin(v94);
  v93 = (char *)&v89 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = kMTCategoryEntityName.getter(v25);
  v90 = v28;
  v29 = type metadata accessor for MTCategory(0);
  v30 = static MTCategory.predicateForCategoriesForCategoriesInLibrary()();
  v31 = static MTCategory.sortDescriptorsForCategoriesInLibrary()();
  v32 = objc_msgSend((id)v0[3], "privateQueueContext");
  v33 = sub_676C8();
  v34 = static OS_dispatch_queue.main.getter(v33);
  v35 = type metadata accessor for CategoryListItem(0);
  FetchedResultsListPublisher.init(identifier:entityName:predicate:sortDescriptors:pageSize:managedObjectContext:receiveOn:transform:updateRequiredComparator:)(0xD000000000000041, 0x800000000030E8E0, v27, v90, v30, v31, 300, v32, v34, sub_E7494, 0, sub_E74B8, 0, v35, v29);
  v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B87C0);
  v37 = sub_32914(&qword_3B87C8, &qword_3B87A0, (uint64_t)&protocol conformance descriptor for FetchedResultsListPublisher<A, B>);
  Publisher.map<A>(_:)(sub_E74D4, 0, v19, v36, v37);
  (*(void (**)(char *, uint64_t))(v91 + 8))(v21, v19);
  v38 = sub_32914(&qword_3B87D0, &qword_3B87A8, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v39 = Publisher.bufferedMulticast()(v22, v38);
  (*(void (**)(char *, uint64_t))(v92 + 8))(v24, v22);
  *(_QWORD *)&v115 = v39;
  v40 = swift_allocObject(&unk_37FF28, 24, 7);
  *(_QWORD *)(v40 + 16) = v96;
  v41 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B87D8);
  v42 = type metadata accessor for PageContent(0);
  v43 = sub_32914(&qword_3B87E0, &qword_3B87D8, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v44 = v93;
  Publisher.map<A>(_:)(sub_E7BF8, v40, v41, v42, v43);
  swift_release(v40);
  swift_release(v115);
  v45 = v112;
  swift_beginAccess(v112 + 48, v118, 0, 0);
  v46 = *(_QWORD *)(v45 + 48);
  swift_retain();
  v47 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B27B0);
  v48 = sub_32914(&qword_3B87E8, (uint64_t *)&unk_3B87B0, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v49 = sub_32914((unint64_t *)&unk_3B87F0, &qword_3B27B0, (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
  v50 = v94;
  v51 = Publisher.subscribe<A>(_:)(v46, v94, v47, v48, v49);
  swift_release(v46);
  (*(void (**)(char *, uint64_t))(v95 + 8))(v44, v50);
  swift_beginAccess(v45 + 32, &v115, 33, 0);
  AnyCancellable.store(in:)(v45 + 32);
  swift_endAccess(&v115);
  swift_release(v51);
  v52 = v97;
  v53 = String.LocalizationValue.init(stringLiteral:)(0x6567616E614DLL, 0xE600000000000000);
  v54 = v98;
  static Locale.current.getter(v53);
  v98 = (char *)String.init(localized:table:bundle:locale:comment:)(v52, 0, 0, 0, v54, 0, 0, 256);
  v97 = v55;
  v56 = type metadata accessor for ArtworkModel(0);
  v57 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 56);
  v58 = v57(v113, 1, 1, v56);
  v59 = v99;
  static ActionMetrics.notInstrumented.getter(v58);
  v60 = objc_msgSend((id)objc_opt_self(UITraitCollection), "currentTraitCollection");
  v61 = objc_msgSend(v60, "userInterfaceIdiom");

  if (v61)
    v62 = 5;
  else
    v62 = 4;
  v63 = (uint64_t)v102;
  swift_storeEnumTagMultiPayload(v102, v105, 51);
  LOBYTE(v115) = v62;
  v64 = v101;
  v65 = (uint64_t)v100;
  v66 = v104;
  (*(void (**)(char *, char *, uint64_t))(v101 + 16))(v100, v59, v104);
  LOBYTE(v114) = 0;
  v67 = type metadata accessor for FlowAction(0);
  swift_allocObject(v67, *(unsigned int *)(v67 + 48), *(unsigned __int16 *)(v67 + 52));
  v68 = FlowAction.init(_:id:title:presentationContext:animationBehavior:presentationStyle:destinationPageHeader:actionMetrics:)(v63, 0, 0, 0, 0, (char *)&v115, 0, 48, (char *)&v114, v65);
  (*(void (**)(char *, uint64_t))(v64 + 8))(v59, v66);
  v116 = v67;
  v117 = sub_726D8((unint64_t *)&qword_3B0C40, 255, (void (*)(uint64_t))type metadata accessor for FlowAction, (uint64_t)&protocol conformance descriptor for Action);
  *(_QWORD *)&v115 = v68;
  v69 = type metadata accessor for ImpressionMetrics(0);
  v70 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 56);
  v71 = (uint64_t)v108;
  v70(v108, 1, 1, v69);
  v72 = _s8ShelfKit12ActionButtonV2IDVAEycfC_0();
  v74 = v73;
  v75 = (int *)v106;
  v76 = v103;
  v77 = (uint64_t)v103 + *(int *)(v106 + 24);
  v57(v77, 1, 1, v56);
  v78 = v75[7];
  *((_BYTE *)v76 + v78) = 2;
  v79 = (uint64_t)v76 + v75[9];
  v70((char *)v79, 1, 1, v69);
  *v76 = v72;
  v76[1] = v74;
  v80 = v97;
  v76[2] = (unint64_t)v98;
  v76[3] = (unint64_t)v80;
  sub_3C454(v113, v77, &qword_3BEB70);
  *((_BYTE *)v76 + v78) = 2;
  sub_F4D8(&v115, (uint64_t)v76 + v75[8]);
  sub_3C454(v71, v79, (uint64_t *)&unk_3B8790);
  v81 = v107;
  sub_3C56C((uint64_t)v76, v107, type metadata accessor for ActionButton);
  v82 = v109;
  sub_14510(v81, v109, type metadata accessor for ActionButton);
  swift_storeEnumTagMultiPayload(v82, v110, 0);
  v83 = v112;
  swift_beginAccess(v112 + 56, &v115, 0, 0);
  v84 = *(_QWORD *)(v83 + 56);
  v85 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8800);
  v86 = *(unsigned __int8 *)(v111 + 80);
  v87 = (v86 + 32) & ~v86;
  v88 = swift_allocObject(v85, v87 + *(_QWORD *)(v111 + 72), v86 | 7);
  *(_OWORD *)(v88 + 16) = xmmword_2EA0D0;
  sub_14510(v82, v88 + v87, type metadata accessor for HeaderButtonItem);
  v114 = v88;
  swift_retain();
  CurrentValueSubject.send(_:)();
  swift_bridgeObjectRelease();
  swift_release(v84);
  sub_145D8(v82, type metadata accessor for HeaderButtonItem);
  sub_145D8(v81, type metadata accessor for ActionButton);
}

uint64_t sub_E7494@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2BD8C8(a1, a2);
}

BOOL sub_E74B8(_QWORD *a1, _QWORD *a2)
{
  return (_s8ShelfKit16CategoryListItemV2eeoiySbAC_ACtFZ_0(a1, a2) & 1) == 0;
}

uint64_t sub_E74D4()
{
  uint64_t v0;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B89B8);
  return FRPOutput.content.getter(v0);
}

uint64_t sub_E7508@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  void *v44;
  Swift::String v45;
  Swift::String v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  char v95;
  uint64_t v96;

  v90 = a2;
  v82 = type metadata accessor for ScalarDictionary(0);
  v80 = *(_QWORD *)(v82 - 8);
  v3 = __chkstk_darwin(v82);
  v79 = (char *)&v74 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v78 = (char *)&v74 - v5;
  v6 = type metadata accessor for PageMetrics(0);
  v88 = *(_QWORD *)(v6 - 8);
  v89 = v6;
  __chkstk_darwin(v6);
  v87 = (char *)&v74 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for PageID(0);
  v84 = *(_QWORD *)(v8 - 8);
  v85 = v8;
  __chkstk_darwin(v8);
  v81 = (char *)&v74 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = type metadata accessor for ModernPage(0);
  __chkstk_darwin(v83);
  v86 = (char *)&v74 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v11);
  v13 = (char *)&v74 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
  __chkstk_darwin(v14);
  v16 = (char *)&v74 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0C38);
  __chkstk_darwin(v17);
  v19 = (char *)&v74 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = (int *)type metadata accessor for ModernShelf(0);
  v76 = *((_QWORD *)v20 - 1);
  v21 = __chkstk_darwin(v20);
  v23 = (uint64_t *)((char *)&v74 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v21);
  v77 = (uint64_t)&v74 - v24;
  v25 = type metadata accessor for Header(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v19, 1, 1, v25);
  v75 = sub_24591C(a1);
  v26 = type metadata accessor for URL(0);
  v27 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56);
  v28 = v27(v16, 1, 1, v26);
  v94 = 0;
  v92 = 0u;
  v93 = 0u;
  v29 = static MetricsTargetType.swoosh.getter(v28);
  static ImpressionMetrics.shelf(id:idType:uniqueID:impressionType:name:)(0x69726F6765746143, 0xEA00000000007365, 0, 0, 0xD000000000000011, 0x800000000030E960, v29, v30, 0, 0);
  swift_bridgeObjectRelease();
  v31 = type metadata accessor for ImpressionMetrics(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v13, 0, 1, v31);
  v32 = v20[8];
  *((_BYTE *)v23 + v32) = 3;
  v33 = (uint64_t)v23 + v20[9];
  v27((char *)v33, 1, 1, v26);
  *v23 = 0xD000000000000011;
  v23[1] = 0x800000000030E960;
  sub_15BD4((uint64_t)v19, (uint64_t)v23 + v20[5], &qword_3B0C38);
  v34 = (char *)v23 + v20[6];
  *(_WORD *)v34 = 48;
  *((_WORD *)v34 + 3) = 256;
  *(_DWORD *)(v34 + 2) = 0;
  *((_QWORD *)v34 + 1) = 1;
  *(_QWORD *)((char *)v23 + v20[7]) = v75;
  sub_3C454((uint64_t)v16, v33, &qword_3B4370);
  *((_BYTE *)v23 + v20[10]) = 1;
  *((_BYTE *)v23 + v20[11]) = 0;
  v35 = (uint64_t)v23 + v20[12];
  if (*((_QWORD *)&v93 + 1))
  {
    sub_F4D8(&v92, v35);
  }
  else
  {
    v36 = (unint64_t)v93;
    *(_OWORD *)v35 = v92;
    *(_OWORD *)(v35 + 16) = v36;
    *(_QWORD *)(v35 + 32) = v94;
  }
  sub_15BD4((uint64_t)v13, (uint64_t)v23 + v20[13], (uint64_t *)&unk_3B8790);
  *((_BYTE *)v23 + v32) = 3;
  v37 = v77;
  v38 = sub_3C56C((uint64_t)v23, v77, type metadata accessor for ModernShelf);
  v39 = static MetricsPageType.room.getter(v38);
  v41 = v40;
  v42 = ((uint64_t (*)(void))static MetricsPageID.categories.getter)();
  v44 = v43;
  *(_QWORD *)&v92 = v39;
  *((_QWORD *)&v92 + 1) = v41;
  v45._countAndFlagsBits = 95;
  v45._object = (void *)0xE100000000000000;
  String.append(_:)(v45);
  v46._countAndFlagsBits = v42;
  v46._object = v44;
  String.append(_:)(v46);
  swift_bridgeObjectRelease();
  v47 = v81;
  v48 = PageID.init(with:)(v92, *((_QWORD *)&v92 + 1));
  v49 = static MetricsPageID.categories.getter(v48);
  v51 = v50;
  v52 = static MetricsPageType.room.getter(v49);
  *(_QWORD *)&v92 = v49;
  *((_QWORD *)&v92 + 1) = v51;
  *(_QWORD *)&v93 = v52;
  *((_QWORD *)&v93 + 1) = v53;
  v94 = 0;
  v95 = 0;
  v96 = 0;
  v54 = v78;
  ScalarDictionary.init()(v52);
  v55 = sub_C97A8((uint64_t)_swiftEmptyArrayStorage);
  v56 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B89A0);
  v57 = type metadata accessor for PageMetrics.Instruction(0);
  v58 = swift_allocObject(v56, ((*(unsigned __int8 *)(*(_QWORD *)(v57 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v57 - 8) + 80))+ 2 * *(_QWORD *)(*(_QWORD *)(v57 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v57 - 8) + 80) | 7);
  *(_OWORD *)(v58 + 16) = xmmword_2EA080;
  v91 = 0;
  PageMetrics.Instruction.init(eventType:)(&v91);
  v91 = 1;
  PageMetrics.Instruction.init(eventType:)(&v91);
  v59 = MetricsPageFields.metricsFields.getter();
  v61 = v79;
  v60 = v80;
  v62 = v82;
  (*(void (**)(char *, char *, uint64_t))(v80 + 16))(v79, v54, v82);
  v63 = v87;
  PageMetrics.init(instructions:pageFields:custom:clickLocationFields:)(v58, v59, v61, v55);
  (*(void (**)(char *, uint64_t))(v60 + 8))(v54, v62);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v64 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0A48);
  v65 = *(unsigned __int8 *)(v76 + 80);
  v66 = (v65 + 32) & ~v65;
  v67 = swift_allocObject(v64, v66 + *(_QWORD *)(v76 + 72), v65 | 7);
  *(_OWORD *)(v67 + 16) = xmmword_2EA0D0;
  sub_14510(v37, v67 + v66, type metadata accessor for ModernShelf);
  v68 = (uint64_t)v86;
  (*(void (**)(char *, char *, uint64_t))(v84 + 32))(v86, v47, v85);
  v69 = v83;
  (*(void (**)(uint64_t, char *, uint64_t))(v88 + 32))(v68 + *(int *)(v83 + 20), v63, v89);
  *(_QWORD *)(v68 + *(int *)(v69 + 24)) = v67;
  __swift_instantiateConcreteTypeFromMangledName(&qword_3B89B0);
  v70 = v90;
  v71 = sub_14510(v68, v90, type metadata accessor for ModernPage);
  static PageRenderContentTypes.unspecified.getter(v71);
  v72 = type metadata accessor for PageContent(0);
  swift_storeEnumTagMultiPayload(v70, v72, 3);
  sub_145D8(v68, type metadata accessor for ModernPage);
  return sub_145D8(v37, type metadata accessor for ModernShelf);
}

uint64_t sub_E7BE8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_E7BF8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_E7508(*a1, a2);
}

_QWORD *CategoryListPresenter.deinit()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_unknownObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[4]);
  swift_release(v0[5]);
  swift_release(v0[6]);
  swift_release(v0[7]);
  return v0;
}

uint64_t CategoryListPresenter.__deallocating_deinit()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_unknownObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[4]);
  swift_release(v0[5]);
  swift_release(v0[6]);
  swift_release(v0[7]);
  return swift_deallocClassInstance(v0, 64, 7);
}

uint64_t CategoryListPresenter.interactionContextPage.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = type metadata accessor for InteractionContext.Page(0);
  return swift_storeEnumTagMultiPayload(a1, v2, 9);
}

uint64_t sub_E7CDC(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v4;
  unsigned __int8 v6;

  v6 = *a2;
  v4 = swift_allocObject(v2, 64, 7);
  CategoryListPresenter.init(asPartOf:with:)(a1, &v6);
  return v4;
}

uint64_t sub_E7D30(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_726D8(&qword_3B88C8, a2, (void (*)(uint64_t))type metadata accessor for CategoryListPresenter, (uint64_t)&protocol conformance descriptor for CategoryListPresenter);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for CategoryListPresenter()
{
  return objc_opt_self(_TtC8ShelfKit21CategoryListPresenter);
}

uint64_t sub_E7D8C(uint64_t a1, uint64_t a2)
{
  return sub_726D8(&qword_3B88D0, a2, (void (*)(uint64_t))type metadata accessor for CategoryListPresenter, (uint64_t)&protocol conformance descriptor for CategoryListPresenter);
}

uint64_t method lookup function for CategoryListPresenter(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for CategoryListPresenter);
}

uint64_t dispatch thunk of CategoryListPresenter.__allocating_init(asPartOf:with:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t storeEnumTagSinglePayload for CategoryListPresenter.Configuration(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_E7E18 + 4 * byte_2F4435[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_E7E4C + 4 * byte_2F4430[v4]))();
}

uint64_t sub_E7E4C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_E7E54(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xE7E5CLL);
  return result;
}

uint64_t sub_E7E68(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xE7E70);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_E7E74(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_E7E7C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CategoryListPresenter.Configuration()
{
  return &type metadata for CategoryListPresenter.Configuration;
}

void sub_E7E98()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  void *v10;
  id v11;
  void (*v12)(_BYTE *, uint64_t);
  _BYTE v13[24];
  void *v14;

  v1 = v0;
  v2 = type metadata accessor for AutomationSemantics(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = __chkstk_darwin(v4);
  v9 = &v13[-v8];
  v10 = *(void **)&v1[OBJC_IVAR____TtC8ShelfKit20ProfilePictureButton_image];
  if (v10)
  {
    v11 = v10;
    static AutomationSemantics.accountButton()(v11);
    v14 = &type metadata for Bool;
    v13[0] = 1;
    AutomationSemantics.attribute(key:value:)(0x50656C69666F7270, 0xEE00657275746369, v13);
    v12 = *(void (**)(_BYTE *, uint64_t))(v3 + 8);
    v12(v6, v2);
    sub_298FC((uint64_t)v13);
    UIView.setAutomationSemantics(_:)(v9);
    v12(v9, v2);
    objc_msgSend(v1, "setAccessibilityIgnoresInvertColors:", 1);
    objc_msgSend(v1, "setImage:forState:", v11, 0);

  }
  else
  {
    static AutomationSemantics.accountButton()(v7);
    UIView.setAutomationSemantics(_:)(v9);
    (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v9, v2);
    objc_msgSend(v1, "setAccessibilityIgnoresInvertColors:", 0);
    if (qword_3B00D8 != -1)
      swift_once(&qword_3B00D8, sub_E8070);
    objc_msgSend(v1, "setImage:forState:", qword_3B89C8, 0);
  }
}

void sub_E8060()
{
  qword_3B89C0 = 0x4040000000000000;
}

void sub_E8070()
{
  id v0;
  id v1;
  NSString v2;
  id v3;

  v0 = objc_msgSend((id)objc_opt_self(UIFont), "systemFontOfSize:weight:", 28.0, UIFontWeightLight);
  v1 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithFont:", v0);

  v2 = String._bridgeToObjectiveC()();
  v3 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:withConfiguration:", v2, v1);

  qword_3B89C8 = (uint64_t)v3;
}

id ProfilePictureButton.__allocating_init(asPartOf:)(uint64_t a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return ProfilePictureButton.init(asPartOf:)(a1);
}

id ProfilePictureButton.init(asPartOf:)(uint64_t a1)
{
  char *v1;
  objc_class *ObjectType;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  Swift::String v14;
  Swift::String v15;
  NSString v16;
  id v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  uint64_t v34;
  Class isa;
  uint64_t v37;
  char v38;
  objc_super v39;
  Swift::String v40;

  ObjectType = (objc_class *)swift_getObjectType();
  v4 = type metadata accessor for ActionMetrics(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for FlowDestination(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v1[OBJC_IVAR____TtC8ShelfKit20ProfilePictureButton_image] = 0;
  v39.receiver = v1;
  v39.super_class = ObjectType;
  v10 = objc_msgSendSuper2(&v39, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v11 = (void *)objc_opt_self(NSBundle);
  v12 = v10;
  v13 = objc_msgSend(v11, "mainBundle");
  v14._countAndFlagsBits = 0xD00000000000001ALL;
  v40._object = (void *)0x800000000030E9A0;
  v14._object = (void *)0x800000000030E980;
  v15._countAndFlagsBits = 0;
  v15._object = (void *)0xE000000000000000;
  v40._countAndFlagsBits = 0xD000000000000017;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v14, (Swift::String_optional)0, (NSBundle)v13, v15, v40);

  v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  objc_msgSend(v12, "setAccessibilityLabel:", v16);

  v17 = objc_msgSend(v12, "imageView");
  if (v17)
  {
    v18 = v17;
    objc_msgSend(v17, "setContentMode:", 4);

  }
  sub_E7E98();
  v19 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  objc_msgSend(v19, "addObserver:selector:name:object:", v12, "updateAccount", CFSTR("ASKProfilePictureStoreDidChange"), 0);

  sub_E8654();
  v20 = swift_storeEnumTagMultiPayload(v9, v7, 50);
  LOBYTE(v37) = 5;
  v38 = 0;
  static ActionMetrics.notInstrumented.getter(v20);
  v21 = type metadata accessor for FlowAction(0);
  swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
  v22 = FlowAction.init(_:id:title:presentationContext:animationBehavior:presentationStyle:destinationPageHeader:actionMetrics:)((uint64_t)v9, 0, 0, 0, 0, (char *)&v37, 0, 48, &v38, (uint64_t)v6);
  v23 = v12;
  swift_retain();
  objc_msgSend(v23, "removeTarget:action:forControlEvents:", 0, 0, 0x2000);
  v24 = sub_327F8(0, (unint64_t *)&qword_3B89D8, UIAction_ptr);
  swift_retain();
  swift_retain();
  v25 = (void *)sub_E88AC(v22, a1, v24);
  objc_msgSend(v23, "addAction:forControlEvents:", v25, 0x2000);
  swift_release(v22);

  objc_msgSend(v23, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v26 = (void *)objc_opt_self(NSLayoutConstraint);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BC590);
  v28 = swift_allocObject(v27, 48, 7);
  *(_OWORD *)(v28 + 16) = xmmword_2F4590;
  v29 = objc_msgSend(v23, "widthAnchor");
  if (qword_3B00D0 != -1)
    swift_once(&qword_3B00D0, sub_E8060);
  v30 = objc_msgSend(v29, "constraintEqualToConstant:", *(double *)&qword_3B89C0);

  *(_QWORD *)(v28 + 32) = v30;
  v31 = objc_msgSend(v23, "heightAnchor");
  v32 = objc_msgSend(v23, "widthAnchor");
  v33 = objc_msgSend(v31, "constraintEqualToAnchor:", v32);

  *(_QWORD *)(v28 + 40) = v33;
  v37 = v28;
  specialized Array._endMutation()(v34);
  sub_327F8(0, &qword_3B89E0, NSLayoutConstraint_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v26, "activateConstraints:", isa);
  swift_release(v22);

  swift_release(a1);
  return v23;
}

void sub_E8654()
{
  uint64_t v0;
  id v1;
  double v2;
  uint64_t v3;
  void *v4;
  _QWORD v5[5];
  uint64_t v6;

  v1 = objc_msgSend((id)objc_opt_self(ASKProfilePictureStore), "sharedStore");
  if (qword_3B00D0 != -1)
    swift_once(&qword_3B00D0, sub_E8060);
  v2 = *(double *)&qword_3B89C0;
  v3 = swift_allocObject(&unk_380080, 24, 7);
  swift_unknownObjectWeakInit(v3 + 16, v0);
  v5[4] = sub_E8AC4;
  v6 = v3;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 1107296256;
  v5[2] = sub_2829B4;
  v5[3] = &block_descriptor_9;
  v4 = _Block_copy(v5);
  swift_release(v6);
  objc_msgSend(v1, "profilePictureForAccountOwnerWithoutMonogramFallbackWithPictureDiameter:completion:", v4, v2);
  _Block_release(v4);

}

void sub_E8790(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t Strong;
  void *v5;
  void *v6;
  id v7;
  _BYTE v8[24];

  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v8, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    v5 = (void *)Strong;
    v6 = *(void **)(Strong + OBJC_IVAR____TtC8ShelfKit20ProfilePictureButton_image);
    *(_QWORD *)(Strong + OBJC_IVAR____TtC8ShelfKit20ProfilePictureButton_image) = a1;
    v7 = a1;

    sub_E7E98();
  }
}

void ProfilePictureButton.init(frame:)()
{
  _swift_stdlib_reportUnimplementedInitializer("ShelfKit.ProfilePictureButton", 29, "init(frame:)", 12, 0);
  __break(1u);
}

uint64_t sub_E88AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v9[2];
  _QWORD v10[5];

  v10[3] = type metadata accessor for FlowAction(0);
  v10[4] = sub_E8A2C();
  v10[0] = a1;
  sub_150C8((uint64_t)v10, (uint64_t)v9);
  v6 = swift_allocObject(&unk_380058, 72, 7);
  *(_QWORD *)(v6 + 16) = a2;
  sub_F4D8(v9, v6 + 24);
  *(_QWORD *)(v6 + 64) = a3;
  v7 = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(0, 0xE000000000000000, 0, 0, 0, 0, 0, 0, 0, 0, 0, sub_23810, v6);
  __swift_destroy_boxed_opaque_existential_1(v10);
  return v7;
}

uint64_t type metadata accessor for ProfilePictureButton()
{
  return objc_opt_self(_TtC8ShelfKit20ProfilePictureButton);
}

uint64_t method lookup function for ProfilePictureButton(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for ProfilePictureButton);
}

void sub_E89A4()
{
  char *v0;

  *(_QWORD *)&v0[OBJC_IVAR____TtC8ShelfKit20ProfilePictureButton_image] = 0;

  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRelease(0xE000000000000000);
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x800000000030B670, "ShelfKit/ProfilePictureButton.swift", 35, 2, 56, 0);
  __break(1u);
}

unint64_t sub_E8A2C()
{
  unint64_t result;

  result = qword_3B0C40;
  if (!qword_3B0C40)
  {
    type metadata accessor for FlowAction(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for Action);
    atomic_store(result, (unint64_t *)&qword_3B0C40);
  }
  return result;
}

uint64_t sub_E8A74()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  __swift_destroy_boxed_opaque_existential_1((_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_E8AA0()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_E8AC4(void *a1)
{
  uint64_t v1;

  sub_E8790(a1, v1);
}

uint64_t block_copy_helper_9(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t block_destroy_helper_9(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t EpisodeOffer.init(deserializing:using:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(char *, uint64_t);
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  void (*v85)(char *, uint64_t);
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void (*v111)(char *, uint64_t, uint64_t);
  uint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  NSString v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  char v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  void (*v132)(uint64_t, uint64_t, uint64_t);
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  void (*v137)(uint64_t, uint64_t);
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  char v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  char v157;
  char *v158;
  uint64_t v159;
  char v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  void (*v164)(char *, uint64_t);
  uint64_t v165;
  char *v166;
  char *v167;
  char *v168;
  uint64_t v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  char *v174;
  _QWORD *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t *v179;
  char *v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  void (*v190)(uint64_t, uint64_t, uint64_t);
  char *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  unsigned __int8 v200;
  unsigned __int8 v201;
  unsigned __int8 v202;

  v198 = a2;
  v175 = a3;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2C40);
  __chkstk_darwin(v4);
  v187 = (uint64_t)&v161 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
  v7 = __chkstk_darwin(v6);
  v186 = (uint64_t)&v161 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v189 = (uint64_t)&v161 - v9;
  v10 = type metadata accessor for JSONContext(0);
  v11 = *(_QWORD *)(v10 - 8);
  v196 = v10;
  v197 = v11;
  v12 = __chkstk_darwin(v10);
  v177 = (uint64_t)&v161 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v182 = (char *)&v161 - v15;
  __chkstk_darwin(v14);
  v180 = (char *)&v161 - v16;
  v17 = type metadata accessor for ShowOffer(0);
  v18 = __chkstk_darwin(v17);
  v178 = (uint64_t)&v161 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v18);
  v185 = (uint64_t)&v161 - v21;
  v22 = __chkstk_darwin(v20);
  v179 = (uint64_t *)((char *)&v161 - v23);
  __chkstk_darwin(v22);
  v188 = (uint64_t)&v161 - v24;
  v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
  v26 = __chkstk_darwin(v25);
  v184 = (uint64_t)&v161 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v190 = (void (*)(uint64_t, uint64_t, uint64_t))((char *)&v161 - v28);
  v29 = type metadata accessor for URL(0);
  v194 = *(_QWORD *)(v29 - 8);
  v195 = v29;
  v30 = __chkstk_darwin(v29);
  v183 = (uint64_t)&v161 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  v191 = (char *)&v161 - v32;
  v33 = type metadata accessor for JSONObject(0);
  v34 = *(_QWORD *)(v33 - 8);
  v35 = __chkstk_darwin(v33);
  v176 = (uint64_t)&v161 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = __chkstk_darwin(v35);
  v174 = (char *)&v161 - v38;
  v39 = __chkstk_darwin(v37);
  v41 = (char *)&v161 - v40;
  v42 = __chkstk_darwin(v39);
  v173 = (char *)&v161 - v43;
  v44 = __chkstk_darwin(v42);
  v172 = (uint64_t)&v161 - v45;
  v46 = __chkstk_darwin(v44);
  v171 = (uint64_t)&v161 - v47;
  v48 = __chkstk_darwin(v46);
  v170 = (char *)&v161 - v49;
  v50 = __chkstk_darwin(v48);
  v169 = (uint64_t)&v161 - v51;
  v52 = __chkstk_darwin(v50);
  v167 = (char *)&v161 - v53;
  v54 = __chkstk_darwin(v52);
  v168 = (char *)&v161 - v55;
  v56 = __chkstk_darwin(v54);
  v181 = (uint64_t)&v161 - v57;
  v58 = __chkstk_darwin(v56);
  v60 = (char *)&v161 - v59;
  v61 = __chkstk_darwin(v58);
  v63 = (char *)&v161 - v62;
  v64 = __chkstk_darwin(v61);
  v66 = (char *)&v161 - v65;
  __chkstk_darwin(v64);
  v68 = (char *)&v161 - v67;
  v69 = a1;
  v70 = JSONObject.subscript.getter(0x49746E65746E6F63, 0xE900000000000064);
  v71 = JSONObject.string.getter(v70);
  if (!v72)
  {
    v77 = *(void (**)(char *, uint64_t))(v34 + 8);
    v77(v68, v33);
    v78 = type metadata accessor for JSONError(0);
    v79 = sub_F1C0((unint64_t *)&qword_3B0CB0, (void (*)(uint64_t))&type metadata accessor for JSONError, (uint64_t)&protocol conformance descriptor for JSONError);
    swift_allocError(v78, v79, 0, 0);
    v81 = v80;
    v82 = type metadata accessor for EpisodeOffer(0);
    *v81 = 0x49746E65746E6F63;
    v81[1] = 0xE900000000000064;
    v81[2] = v82;
    v83 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v78 - 8) + 104))(v81, enum case for JSONError.missingProperty(_:), v78);
    swift_willThrow(v83);
    (*(void (**)(uint64_t, uint64_t))(v197 + 8))(v198, v196);
    return ((uint64_t (*)(uint64_t, uint64_t))v77)(v69, v33);
  }
  v73 = v72;
  v192 = v33;
  v74 = v193;
  v75 = static AdamID.parse(_:)(v71, v72);
  v166 = v41;
  if (v74)
  {
    v76 = swift_bridgeObjectRelease(v73);
    v165 = static AdamID.empty.getter(v76);
    swift_errorRelease(v74);
  }
  else
  {
    v165 = v75;
    swift_bridgeObjectRelease(v73);
  }
  v85 = *(void (**)(char *, uint64_t))(v34 + 8);
  v86 = v192;
  v85(v68, v192);
  v87 = JSONObject.subscript.getter(0x656C746974, 0xE500000000000000);
  v88 = JSONObject.string.getter(v87);
  v89 = v66;
  v91 = v90;
  v85(v89, v86);
  if (!v91)
  {
    v96 = v86;
    v104 = type metadata accessor for JSONError(0);
    v105 = sub_F1C0((unint64_t *)&qword_3B0CB0, (void (*)(uint64_t))&type metadata accessor for JSONError, (uint64_t)&protocol conformance descriptor for JSONError);
    swift_allocError(v104, v105, 0, 0);
    v107 = v106;
    v108 = type metadata accessor for EpisodeOffer(0);
    *v107 = 0x656C746974;
    v107[1] = 0xE500000000000000;
    v107[2] = v108;
    v109 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v104 - 8) + 104))(v107, enum case for JSONError.missingProperty(_:), v104);
    swift_willThrow(v109);
    (*(void (**)(uint64_t, uint64_t))(v197 + 8))(v198, v196);
    v103 = v69;
    return ((uint64_t (*)(uint64_t, uint64_t))v85)(v103, v96);
  }
  v163 = v88;
  v193 = v69;
  v92 = JSONObject.subscript.getter(0x72556D6165727473, 0xE90000000000006CLL);
  v93 = (uint64_t)v190;
  JSONObject.url.getter(v92);
  v85(v63, v86);
  v95 = v194;
  v94 = v195;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v194 + 48))(v93, 1, v195) == 1)
  {
    swift_bridgeObjectRelease(v91);
    sub_1459C(v93, &qword_3B4370);
    v96 = v86;
    v97 = type metadata accessor for JSONError(0);
    v98 = sub_F1C0((unint64_t *)&qword_3B0CB0, (void (*)(uint64_t))&type metadata accessor for JSONError, (uint64_t)&protocol conformance descriptor for JSONError);
    swift_allocError(v97, v98, 0, 0);
    v100 = v99;
    v101 = type metadata accessor for EpisodeOffer(0);
    *v100 = 0x72556D6165727473;
    v100[1] = 0xE90000000000006CLL;
    v100[2] = v101;
    v102 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v97 - 8) + 104))(v100, enum case for JSONError.missingProperty(_:), v97);
    swift_willThrow(v102);
    (*(void (**)(uint64_t, uint64_t))(v197 + 8))(v198, v196);
    v103 = v193;
    return ((uint64_t (*)(uint64_t, uint64_t))v85)(v103, v96);
  }
  v164 = v85;
  (*(void (**)(char *, uint64_t, uint64_t))(v95 + 32))(v191, v93, v94);
  v110 = v193;
  JSONObject.subscript.getter(0x6566664F776F6873, 0xE900000000000072);
  v111 = *(void (**)(char *, uint64_t, uint64_t))(v197 + 16);
  v112 = (uint64_t)v180;
  v113 = v196;
  v111(v180, v198, v196);
  v114 = v179;
  ShowOffer.init(deserializing:using:)(v60, v112, v179);
  v162 = v91;
  v161 = 0;
  v115 = v113;
  sub_A9430((uint64_t)v114, v188);
  v116 = type metadata accessor for ArtworkModel(0);
  v117 = v181;
  JSONObject.subscript.getter(0x6B726F77747261, 0xE700000000000000);
  v118 = (uint64_t)v182;
  v111(v182, v198, v113);
  sub_F1C0((unint64_t *)&qword_3B2828, (void (*)(uint64_t))&type metadata accessor for ArtworkModel, (uint64_t)&protocol conformance descriptor for ArtworkModel);
  ExpressibleByJSON.init(tryDeserializing:using:)(v117, v118, v116);
  v119 = v168;
  v120 = JSONObject.subscript.getter(0x7079546563697270, 0xE900000000000065);
  JSONObject.string.getter(v120);
  v122 = v121;
  v164(v119, v192);
  if (v122)
    v123 = v122;
  else
    v123 = 0xE000000000000000;
  v124 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v123);
  v196 = MTEpisodePriceTypeFromPersistentString(v124);

  JSONObject.subscript.getter(0x707954616964656DLL, 0xE900000000000065);
  v125 = v198;
  v111((char *)v118, v198, v115);
  sub_E9C5C();
  ExpressibleByJSON.init(tryDeserializing:using:)(v117, v118, &type metadata for EpisodeMediaType);
  LODWORD(v180) = v202;
  JSONObject.subscript.getter(0x52746E65746E6F63, 0xED0000676E697461);
  v190 = (void (*)(uint64_t, uint64_t, uint64_t))v111;
  v111((char *)v118, v125, v115);
  sub_E9CA0();
  ExpressibleByJSON.init(tryDeserializing:using:)(v117, v118, &type metadata for ContentRating);
  if (v201 == 2)
  {
    v126 = v167;
    v127 = JSONObject.subscript.getter(0x63696C7078457369, 0xEA00000000007469);
    v128 = JSONObject.BOOL.getter(v127);
    v164(v126, v192);
    if ((v128 & 1) != 0)
      v201 = 1;
  }
  v129 = v181;
  JSONObject.subscript.getter(0x5465646F73697065, 0xEB00000000657079);
  v130 = (uint64_t)v182;
  v131 = v198;
  v132 = v190;
  v190((uint64_t)v182, v198, v115);
  sub_E9CE4();
  ExpressibleByJSON.init(tryDeserializing:using:)(v129, v130, &type metadata for EpisodeType);
  LODWORD(v179) = v200;
  v133 = type metadata accessor for TranscriptRequestInformation(0);
  JSONObject.subscript.getter(0x697263736E617274, 0xEE006F666E497470);
  v132(v130, v131, v115);
  sub_F1C0(&qword_3B8A28, (void (*)(uint64_t))&type metadata accessor for TranscriptRequestInformation, (uint64_t)&protocol conformance descriptor for TranscriptRequestInformation);
  ExpressibleByJSON.init(tryDeserializing:using:)(v129, v130, v133);
  v134 = JSONObject.subscript.getter(1684632935, 0xE400000000000000);
  v178 = JSONObject.string.getter(v134);
  v177 = v135;
  v136 = v192;
  v137 = (void (*)(uint64_t, uint64_t))v164;
  v164((char *)v129, v192);
  sub_A8FA0(v188, v185);
  v138 = v169;
  v139 = JSONObject.subscript.getter(0x6C725565726F7473, 0xE800000000000000);
  JSONObject.url.getter(v139);
  v137(v138, v136);
  (*(void (**)(uint64_t, char *, uint64_t))(v194 + 16))(v183, v191, v195);
  sub_267BC(v189, v186, &qword_3BEB70);
  v140 = v170;
  v141 = JSONObject.subscript.getter(0x7972616D6D7573, 0xE700000000000000);
  v181 = JSONObject.string.getter(v141);
  v176 = v142;
  v137((uint64_t)v140, v136);
  v143 = v171;
  JSONObject.subscript.getter(0x44657361656C6572, 0xEB00000000657461);
  v144 = v115;
  v132(v130, v198, v115);
  sub_8E490();
  ExpressibleByJSON.init(tryDeserializing:using:)(v143, v130, &type metadata for LazyDate);
  v145 = v199;
  LODWORD(v190) = v201;
  v146 = JSONObject.subscript.getter(0x6E6F697461727564, 0xE800000000000000);
  v182 = (char *)JSONObject.double.getter(v146);
  LODWORD(v170) = v147 & 1;
  v137(v143, v136);
  v148 = v172;
  v149 = JSONObject.subscript.getter(0x6E6974726F706572, 0xEF736D6172615067);
  v171 = JSONObject.string.getter(v149);
  v169 = v150;
  v137(v148, v136);
  v151 = v173;
  v152 = JSONObject.subscript.getter(0x754E6E6F73616573, 0xEC0000007265626DLL);
  v172 = JSONObject.int64.getter(v152);
  LODWORD(v168) = v153 & 1;
  v137((uint64_t)v151, v136);
  v154 = v166;
  v155 = JSONObject.subscript.getter(0x4E65646F73697065, 0xED00007265626D75);
  v156 = JSONObject.int64.getter(v155);
  LOBYTE(v148) = v157 & 1;
  v137((uint64_t)v154, v136);
  v158 = v174;
  v159 = JSONObject.subscript.getter(0x6C7469746E457369, 0xEF726566664F6465);
  v160 = JSONObject.BOOL.getter(v159);
  (*(void (**)(uint64_t, uint64_t))(v197 + 8))(v198, v144);
  v137(v110, v136);
  v137((uint64_t)v158, v136);
  sub_1459C(v189, &qword_3BEB70);
  sub_145D8(v188, type metadata accessor for ShowOffer);
  (*(void (**)(char *, uint64_t))(v194 + 8))(v191, v195);
  return EpisodeOffer.init(contentId:guid:showOffer:storeUrl:streamUrl:priceType:title:artwork:summary:releaseDate:mediaType:contentRating:duration:reportingParams:seasonNumber:episodeNumber:episodeType:isEntitledOffer:transcriptInfo:)(v165, v178, v177, v185, v184, v183, v196, v163, v175, v162, v186, v181, v176, v145, (char)v180, (char)v190, (uint64_t)v182, (char)v170, v171,
           v169,
           v172,
           (char)v168,
           v156,
           v148,
           (char)v179,
           v160,
           v187);
}

uint64_t type metadata accessor for EpisodeOffer(uint64_t a1)
{
  uint64_t result;

  result = qword_3B8A88;
  if (!qword_3B8A88)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for EpisodeOffer);
  return result;
}

unint64_t sub_E9C5C()
{
  unint64_t result;

  result = qword_3B8A10;
  if (!qword_3B8A10)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for EpisodeMediaType);
    atomic_store(result, (unint64_t *)&qword_3B8A10);
  }
  return result;
}

unint64_t sub_E9CA0()
{
  unint64_t result;

  result = qword_3B8A18;
  if (!qword_3B8A18)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ContentRating);
    atomic_store(result, (unint64_t *)&qword_3B8A18);
  }
  return result;
}

unint64_t sub_E9CE4()
{
  unint64_t result;

  result = qword_3B8A20;
  if (!qword_3B8A20)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for EpisodeType);
    atomic_store(result, (unint64_t *)&qword_3B8A20);
  }
  return result;
}

uint64_t EpisodeOffer.podcastOffer.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for EpisodeOffer(0) + 24);
  return sub_A8FA0(v3, a1);
}

uint64_t EpisodeOffer.storeUrl.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for EpisodeOffer(0);
  return sub_267BC(v1 + *(int *)(v3 + 28), a1, &qword_3B4370);
}

uint64_t EpisodeOffer.streamUrl.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for EpisodeOffer(0) + 32);
  v4 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t EpisodeOffer.priceType.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for EpisodeOffer(0) + 36));
}

uint64_t EpisodeOffer.title.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for EpisodeOffer(0) + 40));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t EpisodeOffer.summary.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for EpisodeOffer(0) + 44));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t EpisodeOffer.releaseDate.getter()
{
  type metadata accessor for EpisodeOffer(0);
  return swift_retain();
}

uint64_t EpisodeOffer.mediaType.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for EpisodeOffer(0) + 52));
}

uint64_t EpisodeOffer.contentRating.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for EpisodeOffer(0) + 56));
}

uint64_t EpisodeOffer.duration.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for EpisodeOffer(0) + 60));
}

uint64_t EpisodeOffer.artwork.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for EpisodeOffer(0);
  return sub_267BC(v1 + *(int *)(v3 + 64), a1, &qword_3BEB70);
}

uint64_t EpisodeOffer.reportingParams.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for EpisodeOffer(0) + 68));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t EpisodeOffer.seasonNumber.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for EpisodeOffer(0) + 72));
}

uint64_t EpisodeOffer.episodeNumber.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for EpisodeOffer(0) + 76));
}

uint64_t EpisodeOffer.episodeType.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for EpisodeOffer(0) + 80));
}

uint64_t EpisodeOffer.isEntitledOffer.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for EpisodeOffer(0) + 84));
}

uint64_t EpisodeOffer.transcriptInfo.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for EpisodeOffer(0);
  return sub_267BC(v1 + *(int *)(v3 + 88), a1, &qword_3B2C40);
}

uint64_t EpisodeOffer.init(contentId:guid:showOffer:storeUrl:streamUrl:priceType:title:artwork:summary:releaseDate:mediaType:contentRating:duration:reportingParams:seasonNumber:episodeNumber:episodeType:isEntitledOffer:transcriptInfo:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,char a24,char a25,char a26,uint64_t a27)
{
  int *v31;
  char *v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  char *v36;
  _QWORD *v37;
  char *v38;
  char *v39;

  *a9 = a1;
  a9[1] = a2;
  a9[2] = a3;
  v31 = (int *)type metadata accessor for EpisodeOffer(0);
  sub_15BD4(a5, (uint64_t)a9 + v31[7], &qword_3B4370);
  v32 = (char *)a9 + v31[8];
  v33 = type metadata accessor for URL(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 32))(v32, a6, v33);
  *(_QWORD *)((char *)a9 + v31[9]) = a7;
  v34 = (_QWORD *)((char *)a9 + v31[10]);
  *v34 = a8;
  v34[1] = a10;
  sub_15BD4(a11, (uint64_t)a9 + v31[16], &qword_3BEB70);
  v35 = (_QWORD *)((char *)a9 + v31[11]);
  *v35 = a12;
  v35[1] = a13;
  *(_QWORD *)((char *)a9 + v31[12]) = a14;
  *((_BYTE *)a9 + v31[13]) = a15;
  *((_BYTE *)a9 + v31[14]) = a16;
  v36 = (char *)a9 + v31[15];
  *(_QWORD *)v36 = a17;
  v36[8] = a18 & 1;
  sub_A9430(a4, (uint64_t)a9 + v31[6]);
  v37 = (_QWORD *)((char *)a9 + v31[17]);
  *v37 = a19;
  v37[1] = a20;
  v38 = (char *)a9 + v31[18];
  *(_QWORD *)v38 = a21;
  v38[8] = a22 & 1;
  v39 = (char *)a9 + v31[19];
  *(_QWORD *)v39 = a23;
  v39[8] = a24 & 1;
  *((_BYTE *)a9 + v31[20]) = a25;
  *((_BYTE *)a9 + v31[21]) = (a26 == 2) | a26 & 1;
  return sub_15BD4(a27, (uint64_t)a9 + v31[22], &qword_3B2C40);
}

uint64_t EpisodeOffer.isExplicit.getter()
{
  uint64_t v0;
  int v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for EpisodeOffer(0) + 56));
  if (v1 == 2)
  {
    v2 = 0;
  }
  else
  {
    v3 = ContentRating.rawValue.getter(v1 & 1);
    v5 = v4;
    v2 = 1;
    v6 = ContentRating.rawValue.getter(1);
    if (v3 != v6 || v5 != v7)
      v2 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v2 & 1;
}

uint64_t sub_EA320@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return EpisodeOffer.init(deserializing:using:)(a1, a2, a3);
}

_QWORD *initializeBufferWithCopyOfBuffer for EpisodeOffer(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v6;
  char *v7;
  char *v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  int *v13;
  unsigned int (*v14)(char *, uint64_t, int *);
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  id *v22;
  int v23;
  id v24;
  id *v25;
  int v26;
  id v27;
  id *v28;
  int v29;
  id v30;
  id *v31;
  int v32;
  id v33;
  id *v34;
  int v35;
  id v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  void (*v49)(char *, _QWORD, uint64_t, int *);
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int (*v70)(char *, uint64_t, uint64_t);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  void (*v93)(char *, char *, uint64_t);
  uint64_t v94;
  _QWORD *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  _QWORD *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  id *v115;
  int v116;
  id v117;
  id *v118;
  int v119;
  id v120;
  id *v121;
  int v122;
  id v123;
  id *v124;
  int v125;
  id v126;
  id *v127;
  int v128;
  id v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  char *v140;
  uint64_t v141;
  void (*v142)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v143;
  uint64_t v144;
  _QWORD *v145;
  char *v146;
  uint64_t v147;
  char *v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  uint64_t v154;
  char *v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  unsigned int (*v159)(char *, uint64_t, uint64_t);
  uint64_t v160;
  uint64_t v162;
  char *__dst;
  int *v164;
  unsigned int (*v165)(char *, uint64_t, int *);
  char *v167;
  int *v169;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    v17 = (_QWORD *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = a2[2];
    v6 = a3[6];
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    *(_OWORD *)v7 = *(_OWORD *)((char *)a2 + v6);
    *((_QWORD *)v7 + 2) = *(_QWORD *)((char *)a2 + v6 + 16);
    v7[24] = *((_BYTE *)a2 + v6 + 24);
    v9 = (int *)type metadata accessor for ShowOffer(0);
    v10 = v9[7];
    v11 = &v7[v10];
    v12 = &v8[v10];
    v13 = (int *)type metadata accessor for ArtworkModel(0);
    v162 = *((_QWORD *)v13 - 1);
    v14 = *(unsigned int (**)(char *, uint64_t, int *))(v162 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v169 = v13;
    v165 = v14;
    v167 = (char *)a2;
    if (v14(v12, 1, v13))
    {
      v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      v18 = *((_QWORD *)v12 + 1);
      *(_QWORD *)v11 = *(_QWORD *)v12;
      *((_QWORD *)v11 + 1) = v18;
      v19 = v12[32];
      swift_bridgeObjectRetain();
      if (v19 == 255)
      {
        *((_OWORD *)v11 + 1) = *((_OWORD *)v12 + 1);
        v11[32] = v12[32];
      }
      else
      {
        v20 = *((_QWORD *)v12 + 2);
        v21 = *((_QWORD *)v12 + 3);
        sub_3D464(v20, v21, v19);
        *((_QWORD *)v11 + 2) = v20;
        *((_QWORD *)v11 + 3) = v21;
        v11[32] = v19;
      }
      *(_OWORD *)(v11 + 40) = *(_OWORD *)(v12 + 40);
      v22 = (id *)(v12 + 56);
      v23 = v12[64];
      if (v23 == 255)
      {
        *((_QWORD *)v11 + 7) = *v22;
        v11[64] = v12[64];
      }
      else
      {
        v24 = *v22;
        sub_3D47C(*v22, v12[64]);
        *((_QWORD *)v11 + 7) = v24;
        v11[64] = v23;
      }
      v25 = (id *)(v12 + 72);
      v26 = v12[80];
      if (v26 == 255)
      {
        *((_QWORD *)v11 + 9) = *v25;
        v11[80] = v12[80];
      }
      else
      {
        v27 = *v25;
        sub_3D47C(*v25, v12[80]);
        *((_QWORD *)v11 + 9) = v27;
        v11[80] = v26;
      }
      v28 = (id *)(v12 + 88);
      v29 = v12[96];
      if (v29 == 255)
      {
        *((_QWORD *)v11 + 11) = *v28;
        v11[96] = v12[96];
      }
      else
      {
        v30 = *v28;
        sub_3D47C(*v28, v12[96]);
        *((_QWORD *)v11 + 11) = v30;
        v11[96] = v29;
      }
      v31 = (id *)(v12 + 104);
      v32 = v12[112];
      if (v32 == 255)
      {
        *((_QWORD *)v11 + 13) = *v31;
        v11[112] = v12[112];
      }
      else
      {
        v33 = *v31;
        sub_3D47C(*v31, v12[112]);
        *((_QWORD *)v11 + 13) = v33;
        v11[112] = v32;
      }
      v34 = (id *)(v12 + 120);
      v35 = v12[128];
      if (v35 == 255)
      {
        *((_QWORD *)v11 + 15) = *v34;
        v11[128] = v12[128];
      }
      else
      {
        v36 = *v34;
        sub_3D47C(*v34, v12[128]);
        *((_QWORD *)v11 + 15) = v36;
        v11[128] = v35;
      }
      v11[129] = v12[129];
      v37 = v13[11];
      v38 = &v11[v37];
      v39 = &v12[v37];
      v40 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 16))(v38, v39, v40);
      v41 = v13[12];
      v42 = &v11[v41];
      v43 = &v12[v41];
      v44 = *((_QWORD *)v43 + 1);
      *(_QWORD *)v42 = *(_QWORD *)v43;
      *((_QWORD *)v42 + 1) = v44;
      v11[v13[13]] = v12[v13[13]];
      v11[v13[14]] = v12[v13[14]];
      v11[v13[15]] = v12[v13[15]];
      v45 = v13[16];
      v46 = &v11[v45];
      v47 = &v12[v45];
      v48 = *((_QWORD *)v47 + 1);
      *(_QWORD *)v46 = *(_QWORD *)v47;
      *((_QWORD *)v46 + 1) = v48;
      v49 = *(void (**)(char *, _QWORD, uint64_t, int *))(v162 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v49(v11, 0, 1, v13);
    }
    v50 = v9[8];
    v51 = &v7[v50];
    v52 = &v8[v50];
    v53 = *((_QWORD *)v52 + 1);
    *(_QWORD *)v51 = *(_QWORD *)v52;
    *((_QWORD *)v51 + 1) = v53;
    v54 = v9[9];
    v55 = &v7[v54];
    v56 = &v8[v54];
    v57 = *((_QWORD *)v56 + 1);
    *(_QWORD *)v55 = *(_QWORD *)v56;
    *((_QWORD *)v55 + 1) = v57;
    v7[v9[10]] = v8[v9[10]];
    v58 = v9[11];
    v59 = &v7[v58];
    v60 = &v8[v58];
    v61 = *((_QWORD *)v60 + 1);
    *(_QWORD *)v59 = *(_QWORD *)v60;
    *((_QWORD *)v59 + 1) = v61;
    v62 = v9[12];
    v63 = &v7[v62];
    v64 = &v8[v62];
    v65 = *((_QWORD *)v64 + 1);
    *(_QWORD *)v63 = *(_QWORD *)v64;
    *((_QWORD *)v63 + 1) = v65;
    v66 = v9[13];
    __dst = &v7[v66];
    v164 = v9;
    v67 = &v8[v66];
    v68 = type metadata accessor for URL(0);
    v69 = *(_QWORD *)(v68 - 8);
    v70 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v69 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v70(v67, 1, v68))
    {
      v71 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
      memcpy(__dst, v67, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v69 + 16))(__dst, v67, v68);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v69 + 56))(__dst, 0, 1, v68);
    }
    v17 = a1;
    v72 = v69;
    v73 = v164[14];
    v74 = &v7[v73];
    v75 = &v8[v73];
    v76 = *((_QWORD *)v75 + 1);
    *(_QWORD *)v74 = *(_QWORD *)v75;
    *((_QWORD *)v74 + 1) = v76;
    v77 = v164[15];
    v78 = &v7[v77];
    v79 = &v8[v77];
    v80 = *((_QWORD *)v79 + 1);
    *(_QWORD *)v78 = *(_QWORD *)v79;
    *((_QWORD *)v78 + 1) = v80;
    v81 = v164[16];
    v82 = &v7[v81];
    v83 = &v8[v81];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v70(v83, 1, v68))
    {
      v84 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
      memcpy(v82, v83, *(_QWORD *)(*(_QWORD *)(v84 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v69 + 16))(v82, v83, v68);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v69 + 56))(v82, 0, 1, v68);
    }
    v85 = v164[17];
    v86 = &v7[v85];
    v87 = &v8[v85];
    if (v70(&v8[v85], 1, v68))
    {
      v88 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
      memcpy(v86, v87, *(_QWORD *)(*(_QWORD *)(v88 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v69 + 16))(v86, v87, v68);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v69 + 56))(v86, 0, 1, v68);
    }
    v7[v164[18]] = v8[v164[18]];
    v89 = a3[7];
    v90 = (char *)a1 + v89;
    v91 = &v167[v89];
    if (v70(&v167[v89], 1, v68))
    {
      v92 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
      memcpy(v90, v91, *(_QWORD *)(*(_QWORD *)(v92 - 8) + 64));
      (*(void (**)(char *, char *, uint64_t))(v72 + 16))((char *)a1 + a3[8], &v167[a3[8]], v68);
    }
    else
    {
      v93 = *(void (**)(char *, char *, uint64_t))(v72 + 16);
      v93(v90, v91, v68);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v72 + 56))(v90, 0, 1, v68);
      v93((char *)a1 + a3[8], &v167[a3[8]], v68);
    }
    v94 = a3[10];
    *(_QWORD *)((char *)a1 + a3[9]) = *(_QWORD *)&v167[a3[9]];
    v95 = (_QWORD *)((char *)a1 + v94);
    v96 = &v167[v94];
    v97 = *((_QWORD *)v96 + 1);
    *v95 = *(_QWORD *)v96;
    v95[1] = v97;
    v98 = a3[11];
    v99 = a3[12];
    v100 = (_QWORD *)((char *)a1 + v98);
    v101 = &v167[v98];
    v102 = *((_QWORD *)v101 + 1);
    *v100 = *(_QWORD *)v101;
    v100[1] = v102;
    *(_QWORD *)((char *)a1 + v99) = *(_QWORD *)&v167[v99];
    v103 = a3[14];
    *((_BYTE *)a1 + a3[13]) = v167[a3[13]];
    *((_BYTE *)a1 + v103) = v167[v103];
    v104 = a3[15];
    v105 = a3[16];
    v106 = (char *)a1 + v104;
    v107 = &v167[v104];
    v106[8] = v107[8];
    *(_QWORD *)v106 = *(_QWORD *)v107;
    v108 = (_QWORD *)((char *)a1 + v105);
    v109 = &v167[v105];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    if (v165(v109, 1, v169))
    {
      v110 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
      memcpy(v108, v109, *(_QWORD *)(*(_QWORD *)(v110 - 8) + 64));
    }
    else
    {
      v111 = *((_QWORD *)v109 + 1);
      *v108 = *(_QWORD *)v109;
      v108[1] = v111;
      v112 = v109[32];
      swift_bridgeObjectRetain();
      if (v112 == 255)
      {
        *((_OWORD *)v108 + 1) = *((_OWORD *)v109 + 1);
        *((_BYTE *)v108 + 32) = v109[32];
      }
      else
      {
        v113 = *((_QWORD *)v109 + 2);
        v114 = *((_QWORD *)v109 + 3);
        sub_3D464(v113, v114, v112);
        v108[2] = v113;
        v108[3] = v114;
        *((_BYTE *)v108 + 32) = v112;
      }
      *(_OWORD *)(v108 + 5) = *(_OWORD *)(v109 + 40);
      v115 = (id *)(v109 + 56);
      v116 = v109[64];
      if (v116 == 255)
      {
        v108[7] = *v115;
        *((_BYTE *)v108 + 64) = v109[64];
      }
      else
      {
        v117 = *v115;
        sub_3D47C(*v115, v109[64]);
        v108[7] = v117;
        *((_BYTE *)v108 + 64) = v116;
      }
      v118 = (id *)(v109 + 72);
      v119 = v109[80];
      if (v119 == 255)
      {
        v108[9] = *v118;
        *((_BYTE *)v108 + 80) = v109[80];
      }
      else
      {
        v120 = *v118;
        sub_3D47C(*v118, v109[80]);
        v108[9] = v120;
        *((_BYTE *)v108 + 80) = v119;
      }
      v121 = (id *)(v109 + 88);
      v122 = v109[96];
      if (v122 == 255)
      {
        v108[11] = *v121;
        *((_BYTE *)v108 + 96) = v109[96];
      }
      else
      {
        v123 = *v121;
        sub_3D47C(*v121, v109[96]);
        v108[11] = v123;
        *((_BYTE *)v108 + 96) = v122;
      }
      v124 = (id *)(v109 + 104);
      v125 = v109[112];
      if (v125 == 255)
      {
        v108[13] = *v124;
        *((_BYTE *)v108 + 112) = v109[112];
      }
      else
      {
        v126 = *v124;
        sub_3D47C(*v124, v109[112]);
        v108[13] = v126;
        *((_BYTE *)v108 + 112) = v125;
      }
      v127 = (id *)(v109 + 120);
      v128 = v109[128];
      if (v128 == 255)
      {
        v108[15] = *v127;
        *((_BYTE *)v108 + 128) = v109[128];
      }
      else
      {
        v129 = *v127;
        sub_3D47C(*v127, v109[128]);
        v108[15] = v129;
        *((_BYTE *)v108 + 128) = v128;
      }
      *((_BYTE *)v108 + 129) = v109[129];
      v130 = v169[11];
      v131 = (char *)v108 + v130;
      v132 = &v109[v130];
      v133 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v133 - 8) + 16))(v131, v132, v133);
      v134 = v169[12];
      v135 = (_QWORD *)((char *)v108 + v134);
      v136 = &v109[v134];
      v137 = *((_QWORD *)v136 + 1);
      *v135 = *(_QWORD *)v136;
      v135[1] = v137;
      *((_BYTE *)v108 + v169[13]) = v109[v169[13]];
      *((_BYTE *)v108 + v169[14]) = v109[v169[14]];
      *((_BYTE *)v108 + v169[15]) = v109[v169[15]];
      v138 = v169[16];
      v139 = (_QWORD *)((char *)v108 + v138);
      v140 = &v109[v138];
      v141 = *((_QWORD *)v140 + 1);
      *v139 = *(_QWORD *)v140;
      v139[1] = v141;
      v142 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v162 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v142(v108, 0, 1, v169);
    }
    v143 = a3[17];
    v144 = a3[18];
    v145 = (_QWORD *)((char *)a1 + v143);
    v146 = &v167[v143];
    v147 = *((_QWORD *)v146 + 1);
    *v145 = *(_QWORD *)v146;
    v145[1] = v147;
    v148 = (char *)a1 + v144;
    v149 = &v167[v144];
    *(_QWORD *)v148 = *(_QWORD *)v149;
    v148[8] = v149[8];
    v150 = a3[19];
    v151 = a3[20];
    v152 = (char *)a1 + v150;
    v153 = &v167[v150];
    *(_QWORD *)v152 = *(_QWORD *)v153;
    v152[8] = v153[8];
    *((_BYTE *)a1 + v151) = v167[v151];
    v154 = a3[22];
    v155 = (char *)a1 + v154;
    v156 = &v167[v154];
    *((_BYTE *)a1 + a3[21]) = v167[a3[21]];
    v157 = type metadata accessor for TranscriptRequestInformation(0);
    v158 = *(_QWORD *)(v157 - 8);
    v159 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v158 + 48);
    swift_bridgeObjectRetain();
    if (v159(v156, 1, v157))
    {
      v160 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2C40);
      memcpy(v155, v156, *(_QWORD *)(*(_QWORD *)(v160 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v158 + 16))(v155, v156, v157);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v158 + 56))(v155, 0, 1, v157);
    }
  }
  return v17;
}

uint64_t destroy for EpisodeOffer(uint64_t a1, int *a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(uint64_t, uint64_t, uint64_t);
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  void (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t result;

  swift_bridgeObjectRelease();
  v4 = a1 + a2[6];
  swift_bridgeObjectRelease();
  v5 = (int *)type metadata accessor for ShowOffer(0);
  v6 = v4 + v5[7];
  v7 = type metadata accessor for ArtworkModel(0);
  v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48);
  if (!v8(v6, 1, v7))
  {
    swift_bridgeObjectRelease();
    v9 = *(unsigned __int8 *)(v6 + 32);
    if (v9 != 255)
      sub_3B5BC(*(_QWORD *)(v6 + 16), *(_QWORD *)(v6 + 24), v9);
    v10 = *(unsigned __int8 *)(v6 + 64);
    if (v10 != 255)
      sub_3D624(*(id *)(v6 + 56), v10);
    v11 = *(unsigned __int8 *)(v6 + 80);
    if (v11 != 255)
      sub_3D624(*(id *)(v6 + 72), v11);
    v12 = *(unsigned __int8 *)(v6 + 96);
    if (v12 != 255)
      sub_3D624(*(id *)(v6 + 88), v12);
    v13 = *(unsigned __int8 *)(v6 + 112);
    if (v13 != 255)
      sub_3D624(*(id *)(v6 + 104), v13);
    v14 = *(unsigned __int8 *)(v6 + 128);
    if (v14 != 255)
      sub_3D624(*(id *)(v6 + 120), v14);
    v15 = v6 + *(int *)(v7 + 44);
    v16 = type metadata accessor for ArtworkCrop(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v17 = v4 + v5[13];
  v18 = type metadata accessor for URL(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v19 + 48);
  if (!v20(v17, 1, v18))
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v17, v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v21 = v4 + v5[16];
  if (!v20(v21, 1, v18))
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v21, v18);
  v22 = v4 + v5[17];
  if (!v20(v22, 1, v18))
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v22, v18);
  v23 = a1 + a2[7];
  v24 = v20(v23, 1, v18);
  v25 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
  if (!v24)
    v25(v23, v18);
  v25(a1 + a2[8], v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release(*(_QWORD *)(a1 + a2[12]));
  v26 = a1 + a2[16];
  if (!v8(v26, 1, v7))
  {
    swift_bridgeObjectRelease();
    v27 = *(unsigned __int8 *)(v26 + 32);
    if (v27 != 255)
      sub_3B5BC(*(_QWORD *)(v26 + 16), *(_QWORD *)(v26 + 24), v27);
    v28 = *(unsigned __int8 *)(v26 + 64);
    if (v28 != 255)
      sub_3D624(*(id *)(v26 + 56), v28);
    v29 = *(unsigned __int8 *)(v26 + 80);
    if (v29 != 255)
      sub_3D624(*(id *)(v26 + 72), v29);
    v30 = *(unsigned __int8 *)(v26 + 96);
    if (v30 != 255)
      sub_3D624(*(id *)(v26 + 88), v30);
    v31 = *(unsigned __int8 *)(v26 + 112);
    if (v31 != 255)
      sub_3D624(*(id *)(v26 + 104), v31);
    v32 = *(unsigned __int8 *)(v26 + 128);
    if (v32 != 255)
      sub_3D624(*(id *)(v26 + 120), v32);
    v33 = v26 + *(int *)(v7 + 44);
    v34 = type metadata accessor for ArtworkCrop(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 8))(v33, v34);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  v35 = a1 + a2[22];
  v36 = type metadata accessor for TranscriptRequestInformation(0);
  v37 = *(_QWORD *)(v36 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v37 + 8))(v35, v36);
  return result;
}

uint64_t initializeWithCopy for EpisodeOffer(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unsigned int (*v10)(_QWORD *, uint64_t, int *);
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  id *v16;
  int v17;
  id v18;
  id *v19;
  int v20;
  id v21;
  id *v22;
  int v23;
  id v24;
  id *v25;
  int v26;
  id v27;
  id *v28;
  int v29;
  id v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  void (*v43)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  const void *v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int (*v64)(const void *, uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  const void *v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  const void *v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  const void *v85;
  uint64_t v86;
  void (*v87)(void *, const void *, uint64_t);
  uint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  id *v109;
  int v110;
  id v111;
  id *v112;
  int v113;
  id v114;
  id *v115;
  int v116;
  id v117;
  id *v118;
  int v119;
  id v120;
  id *v121;
  int v122;
  id v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  _QWORD *v134;
  uint64_t v135;
  void (*v136)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  void *v149;
  const void *v150;
  uint64_t v151;
  uint64_t v152;
  unsigned int (*v153)(const void *, uint64_t, uint64_t);
  uint64_t v154;
  uint64_t v156;
  void *__dst;
  int *v158;
  unsigned int (*v159)(_QWORD *, uint64_t, int *);
  int *v163;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v3 = a3[6];
  v4 = a1 + v3;
  v5 = a2 + v3;
  *(_OWORD *)v4 = *(_OWORD *)(a2 + v3);
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(a2 + v3 + 16);
  *(_BYTE *)(v4 + 24) = *(_BYTE *)(a2 + v3 + 24);
  v6 = (int *)type metadata accessor for ShowOffer(0);
  v7 = v6[7];
  v8 = (_QWORD *)(v4 + v7);
  v9 = (_QWORD *)(v5 + v7);
  v163 = (int *)type metadata accessor for ArtworkModel(0);
  v156 = *((_QWORD *)v163 - 1);
  v10 = *(unsigned int (**)(_QWORD *, uint64_t, int *))(v156 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v159 = v10;
  if (v10(v9, 1, v163))
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    v12 = v9[1];
    *v8 = *v9;
    v8[1] = v12;
    v13 = *((unsigned __int8 *)v9 + 32);
    swift_bridgeObjectRetain();
    if (v13 == 255)
    {
      *((_OWORD *)v8 + 1) = *((_OWORD *)v9 + 1);
      *((_BYTE *)v8 + 32) = *((_BYTE *)v9 + 32);
    }
    else
    {
      v14 = v9[2];
      v15 = v9[3];
      sub_3D464(v14, v15, v13);
      v8[2] = v14;
      v8[3] = v15;
      *((_BYTE *)v8 + 32) = v13;
    }
    *(_OWORD *)(v8 + 5) = *(_OWORD *)(v9 + 5);
    v16 = (id *)(v9 + 7);
    v17 = *((unsigned __int8 *)v9 + 64);
    if (v17 == 255)
    {
      v8[7] = *v16;
      *((_BYTE *)v8 + 64) = *((_BYTE *)v9 + 64);
    }
    else
    {
      v18 = *v16;
      sub_3D47C(*v16, *((_BYTE *)v9 + 64));
      v8[7] = v18;
      *((_BYTE *)v8 + 64) = v17;
    }
    v19 = (id *)(v9 + 9);
    v20 = *((unsigned __int8 *)v9 + 80);
    if (v20 == 255)
    {
      v8[9] = *v19;
      *((_BYTE *)v8 + 80) = *((_BYTE *)v9 + 80);
    }
    else
    {
      v21 = *v19;
      sub_3D47C(*v19, *((_BYTE *)v9 + 80));
      v8[9] = v21;
      *((_BYTE *)v8 + 80) = v20;
    }
    v22 = (id *)(v9 + 11);
    v23 = *((unsigned __int8 *)v9 + 96);
    if (v23 == 255)
    {
      v8[11] = *v22;
      *((_BYTE *)v8 + 96) = *((_BYTE *)v9 + 96);
    }
    else
    {
      v24 = *v22;
      sub_3D47C(*v22, *((_BYTE *)v9 + 96));
      v8[11] = v24;
      *((_BYTE *)v8 + 96) = v23;
    }
    v25 = (id *)(v9 + 13);
    v26 = *((unsigned __int8 *)v9 + 112);
    if (v26 == 255)
    {
      v8[13] = *v25;
      *((_BYTE *)v8 + 112) = *((_BYTE *)v9 + 112);
    }
    else
    {
      v27 = *v25;
      sub_3D47C(*v25, *((_BYTE *)v9 + 112));
      v8[13] = v27;
      *((_BYTE *)v8 + 112) = v26;
    }
    v28 = (id *)(v9 + 15);
    v29 = *((unsigned __int8 *)v9 + 128);
    if (v29 == 255)
    {
      v8[15] = *v28;
      *((_BYTE *)v8 + 128) = *((_BYTE *)v9 + 128);
    }
    else
    {
      v30 = *v28;
      sub_3D47C(*v28, *((_BYTE *)v9 + 128));
      v8[15] = v30;
      *((_BYTE *)v8 + 128) = v29;
    }
    *((_BYTE *)v8 + 129) = *((_BYTE *)v9 + 129);
    v31 = v163[11];
    v32 = (char *)v8 + v31;
    v33 = (char *)v9 + v31;
    v34 = type metadata accessor for ArtworkCrop(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v32, v33, v34);
    v35 = v163[12];
    v36 = (_QWORD *)((char *)v8 + v35);
    v37 = (_QWORD *)((char *)v9 + v35);
    v38 = v37[1];
    *v36 = *v37;
    v36[1] = v38;
    *((_BYTE *)v8 + v163[13]) = *((_BYTE *)v9 + v163[13]);
    *((_BYTE *)v8 + v163[14]) = *((_BYTE *)v9 + v163[14]);
    *((_BYTE *)v8 + v163[15]) = *((_BYTE *)v9 + v163[15]);
    v39 = v163[16];
    v40 = (_QWORD *)((char *)v8 + v39);
    v41 = (_QWORD *)((char *)v9 + v39);
    v42 = v41[1];
    *v40 = *v41;
    v40[1] = v42;
    v43 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v156 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v43(v8, 0, 1, v163);
  }
  v44 = v6[8];
  v45 = (_QWORD *)(v4 + v44);
  v46 = (_QWORD *)(v5 + v44);
  v47 = v46[1];
  *v45 = *v46;
  v45[1] = v47;
  v48 = v6[9];
  v49 = (_QWORD *)(v4 + v48);
  v50 = (_QWORD *)(v5 + v48);
  v51 = v50[1];
  *v49 = *v50;
  v49[1] = v51;
  *(_BYTE *)(v4 + v6[10]) = *(_BYTE *)(v5 + v6[10]);
  v52 = v6[11];
  v53 = (_QWORD *)(v4 + v52);
  v54 = (_QWORD *)(v5 + v52);
  v55 = v54[1];
  *v53 = *v54;
  v53[1] = v55;
  v56 = v6[12];
  v57 = (_QWORD *)(v4 + v56);
  v58 = (_QWORD *)(v5 + v56);
  v59 = v58[1];
  *v57 = *v58;
  v57[1] = v59;
  v60 = v6[13];
  __dst = (void *)(v4 + v60);
  v158 = v6;
  v61 = (const void *)(v5 + v60);
  v62 = type metadata accessor for URL(0);
  v63 = *(_QWORD *)(v62 - 8);
  v64 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v63 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v64(v61, 1, v62))
  {
    v65 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
    memcpy(__dst, v61, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v63 + 16))(__dst, v61, v62);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v63 + 56))(__dst, 0, 1, v62);
  }
  v66 = v63;
  v67 = v158[14];
  v68 = (_QWORD *)(v4 + v67);
  v69 = (_QWORD *)(v5 + v67);
  v70 = v69[1];
  *v68 = *v69;
  v68[1] = v70;
  v71 = v158[15];
  v72 = (_QWORD *)(v4 + v71);
  v73 = (_QWORD *)(v5 + v71);
  v74 = v73[1];
  *v72 = *v73;
  v72[1] = v74;
  v75 = v158[16];
  v76 = (void *)(v4 + v75);
  v77 = (const void *)(v5 + v75);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v64(v77, 1, v62))
  {
    v78 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
    memcpy(v76, v77, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v63 + 16))(v76, v77, v62);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v63 + 56))(v76, 0, 1, v62);
  }
  v79 = v158[17];
  v80 = (void *)(v4 + v79);
  v81 = (const void *)(v5 + v79);
  if (v64((const void *)(v5 + v79), 1, v62))
  {
    v82 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
    memcpy(v80, v81, *(_QWORD *)(*(_QWORD *)(v82 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v63 + 16))(v80, v81, v62);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v63 + 56))(v80, 0, 1, v62);
  }
  *(_BYTE *)(v4 + v158[18]) = *(_BYTE *)(v5 + v158[18]);
  v83 = a3[7];
  v84 = (void *)(a1 + v83);
  v85 = (const void *)(a2 + v83);
  if (v64((const void *)(a2 + v83), 1, v62))
  {
    v86 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
    memcpy(v84, v85, *(_QWORD *)(*(_QWORD *)(v86 - 8) + 64));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v66 + 16))(a1 + a3[8], a2 + a3[8], v62);
  }
  else
  {
    v87 = *(void (**)(void *, const void *, uint64_t))(v66 + 16);
    v87(v84, v85, v62);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v66 + 56))(v84, 0, 1, v62);
    v87((void *)(a1 + a3[8]), (const void *)(a2 + a3[8]), v62);
  }
  v88 = a3[10];
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  v89 = (_QWORD *)(a1 + v88);
  v90 = (_QWORD *)(a2 + v88);
  v91 = v90[1];
  *v89 = *v90;
  v89[1] = v91;
  v92 = a3[11];
  v93 = a3[12];
  v94 = (_QWORD *)(a1 + v92);
  v95 = (_QWORD *)(a2 + v92);
  v96 = v95[1];
  *v94 = *v95;
  v94[1] = v96;
  *(_QWORD *)(a1 + v93) = *(_QWORD *)(a2 + v93);
  v97 = a3[14];
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  *(_BYTE *)(a1 + v97) = *(_BYTE *)(a2 + v97);
  v98 = a3[15];
  v99 = a3[16];
  v100 = a1 + v98;
  v101 = a2 + v98;
  *(_BYTE *)(v100 + 8) = *(_BYTE *)(v101 + 8);
  *(_QWORD *)v100 = *(_QWORD *)v101;
  v102 = (_QWORD *)(a1 + v99);
  v103 = (_QWORD *)(a2 + v99);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  if (v159(v103, 1, v163))
  {
    v104 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
    memcpy(v102, v103, *(_QWORD *)(*(_QWORD *)(v104 - 8) + 64));
  }
  else
  {
    v105 = v103[1];
    *v102 = *v103;
    v102[1] = v105;
    v106 = *((unsigned __int8 *)v103 + 32);
    swift_bridgeObjectRetain();
    if (v106 == 255)
    {
      *((_OWORD *)v102 + 1) = *((_OWORD *)v103 + 1);
      *((_BYTE *)v102 + 32) = *((_BYTE *)v103 + 32);
    }
    else
    {
      v107 = v103[2];
      v108 = v103[3];
      sub_3D464(v107, v108, v106);
      v102[2] = v107;
      v102[3] = v108;
      *((_BYTE *)v102 + 32) = v106;
    }
    *(_OWORD *)(v102 + 5) = *(_OWORD *)(v103 + 5);
    v109 = (id *)(v103 + 7);
    v110 = *((unsigned __int8 *)v103 + 64);
    if (v110 == 255)
    {
      v102[7] = *v109;
      *((_BYTE *)v102 + 64) = *((_BYTE *)v103 + 64);
    }
    else
    {
      v111 = *v109;
      sub_3D47C(*v109, *((_BYTE *)v103 + 64));
      v102[7] = v111;
      *((_BYTE *)v102 + 64) = v110;
    }
    v112 = (id *)(v103 + 9);
    v113 = *((unsigned __int8 *)v103 + 80);
    if (v113 == 255)
    {
      v102[9] = *v112;
      *((_BYTE *)v102 + 80) = *((_BYTE *)v103 + 80);
    }
    else
    {
      v114 = *v112;
      sub_3D47C(*v112, *((_BYTE *)v103 + 80));
      v102[9] = v114;
      *((_BYTE *)v102 + 80) = v113;
    }
    v115 = (id *)(v103 + 11);
    v116 = *((unsigned __int8 *)v103 + 96);
    if (v116 == 255)
    {
      v102[11] = *v115;
      *((_BYTE *)v102 + 96) = *((_BYTE *)v103 + 96);
    }
    else
    {
      v117 = *v115;
      sub_3D47C(*v115, *((_BYTE *)v103 + 96));
      v102[11] = v117;
      *((_BYTE *)v102 + 96) = v116;
    }
    v118 = (id *)(v103 + 13);
    v119 = *((unsigned __int8 *)v103 + 112);
    if (v119 == 255)
    {
      v102[13] = *v118;
      *((_BYTE *)v102 + 112) = *((_BYTE *)v103 + 112);
    }
    else
    {
      v120 = *v118;
      sub_3D47C(*v118, *((_BYTE *)v103 + 112));
      v102[13] = v120;
      *((_BYTE *)v102 + 112) = v119;
    }
    v121 = (id *)(v103 + 15);
    v122 = *((unsigned __int8 *)v103 + 128);
    if (v122 == 255)
    {
      v102[15] = *v121;
      *((_BYTE *)v102 + 128) = *((_BYTE *)v103 + 128);
    }
    else
    {
      v123 = *v121;
      sub_3D47C(*v121, *((_BYTE *)v103 + 128));
      v102[15] = v123;
      *((_BYTE *)v102 + 128) = v122;
    }
    *((_BYTE *)v102 + 129) = *((_BYTE *)v103 + 129);
    v124 = v163[11];
    v125 = (char *)v102 + v124;
    v126 = (char *)v103 + v124;
    v127 = type metadata accessor for ArtworkCrop(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v127 - 8) + 16))(v125, v126, v127);
    v128 = v163[12];
    v129 = (_QWORD *)((char *)v102 + v128);
    v130 = (_QWORD *)((char *)v103 + v128);
    v131 = v130[1];
    *v129 = *v130;
    v129[1] = v131;
    *((_BYTE *)v102 + v163[13]) = *((_BYTE *)v103 + v163[13]);
    *((_BYTE *)v102 + v163[14]) = *((_BYTE *)v103 + v163[14]);
    *((_BYTE *)v102 + v163[15]) = *((_BYTE *)v103 + v163[15]);
    v132 = v163[16];
    v133 = (_QWORD *)((char *)v102 + v132);
    v134 = (_QWORD *)((char *)v103 + v132);
    v135 = v134[1];
    *v133 = *v134;
    v133[1] = v135;
    v136 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v156 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v136(v102, 0, 1, v163);
  }
  v137 = a3[17];
  v138 = a3[18];
  v139 = (_QWORD *)(a1 + v137);
  v140 = (_QWORD *)(a2 + v137);
  v141 = v140[1];
  *v139 = *v140;
  v139[1] = v141;
  v142 = a1 + v138;
  v143 = a2 + v138;
  *(_QWORD *)v142 = *(_QWORD *)v143;
  *(_BYTE *)(v142 + 8) = *(_BYTE *)(v143 + 8);
  v144 = a3[19];
  v145 = a3[20];
  v146 = a1 + v144;
  v147 = a2 + v144;
  *(_QWORD *)v146 = *(_QWORD *)v147;
  *(_BYTE *)(v146 + 8) = *(_BYTE *)(v147 + 8);
  *(_BYTE *)(a1 + v145) = *(_BYTE *)(a2 + v145);
  v148 = a3[22];
  v149 = (void *)(a1 + v148);
  v150 = (const void *)(a2 + v148);
  *(_BYTE *)(a1 + a3[21]) = *(_BYTE *)(a2 + a3[21]);
  v151 = type metadata accessor for TranscriptRequestInformation(0);
  v152 = *(_QWORD *)(v151 - 8);
  v153 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v152 + 48);
  swift_bridgeObjectRetain();
  if (v153(v150, 1, v151))
  {
    v154 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2C40);
    memcpy(v149, v150, *(_QWORD *)(*(_QWORD *)(v154 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v152 + 16))(v149, v150, v151);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v152 + 56))(v149, 0, 1, v151);
  }
  return a1;
}

char *assignWithCopy for EpisodeOffer(char *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int *v13;
  uint64_t (*v14)(uint64_t, uint64_t, int *);
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 *v21;
  __int128 *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 v28;
  __int128 v29;
  id *v30;
  int v31;
  id v32;
  id v33;
  id *v34;
  int v35;
  id v36;
  id v37;
  id *v38;
  int v39;
  id v40;
  id v41;
  id *v42;
  int v43;
  id v44;
  id v45;
  id *v46;
  int v47;
  id v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  char *v56;
  uint64_t v57;
  _QWORD *v58;
  char *v59;
  int *v60;
  void (*v61)(uint64_t, _QWORD, uint64_t, int *);
  uint64_t v62;
  uint64_t v63;
  char v64;
  __int128 v65;
  id *v66;
  id *v67;
  int v68;
  id v69;
  void *v70;
  char v71;
  id v72;
  char v73;
  id v74;
  id *v75;
  id *v76;
  int v77;
  id v78;
  void *v79;
  char v80;
  id v81;
  char v82;
  id v83;
  id *v84;
  id *v85;
  int v86;
  id v87;
  void *v88;
  char v89;
  id v90;
  char v91;
  id v92;
  id *v93;
  id *v94;
  int v95;
  id v96;
  void *v97;
  char v98;
  id v99;
  char v100;
  id v101;
  id *v102;
  id *v103;
  int v104;
  id v105;
  void *v106;
  char v107;
  id v108;
  char v109;
  id v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  char *v117;
  uint64_t v118;
  _QWORD *v119;
  char *v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  char *v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t (*v138)(char *, uint64_t, uint64_t);
  int v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  char *v146;
  char *v147;
  uint64_t v148;
  char *v149;
  char *v150;
  int v151;
  int v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  char *v156;
  int v157;
  int v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  char *v162;
  char *v163;
  int v164;
  int v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  _QWORD *v169;
  uint64_t v170;
  char *v171;
  _QWORD *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  int v182;
  int v183;
  int v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  __int128 *v188;
  __int128 *v189;
  int v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unsigned __int8 v195;
  __int128 v196;
  id *v197;
  int v198;
  id v199;
  id v200;
  id *v201;
  int v202;
  id v203;
  id v204;
  id *v205;
  int v206;
  id v207;
  id v208;
  id *v209;
  int v210;
  id v211;
  id v212;
  id *v213;
  int v214;
  id v215;
  id v216;
  uint64_t v217;
  uint64_t v218;
  char *v219;
  uint64_t v220;
  uint64_t v221;
  _QWORD *v222;
  char *v223;
  uint64_t v224;
  _QWORD *v225;
  char *v226;
  void (*v227)(uint64_t, _QWORD, uint64_t, int *);
  uint64_t v228;
  uint64_t v229;
  char v230;
  __int128 v231;
  id *v232;
  id *v233;
  int v234;
  id v235;
  void *v236;
  char v237;
  id v238;
  char v239;
  id v240;
  id *v241;
  id *v242;
  int v243;
  id v244;
  void *v245;
  char v246;
  id v247;
  char v248;
  id v249;
  id *v250;
  id *v251;
  int v252;
  id v253;
  void *v254;
  char v255;
  id v256;
  char v257;
  id v258;
  id *v259;
  id *v260;
  int v261;
  id v262;
  void *v263;
  char v264;
  id v265;
  char v266;
  id v267;
  id *v268;
  id *v269;
  int v270;
  id v271;
  void *v272;
  char v273;
  id v274;
  char v275;
  id v276;
  uint64_t v277;
  uint64_t v278;
  char *v279;
  uint64_t v280;
  uint64_t v281;
  _QWORD *v282;
  char *v283;
  uint64_t v284;
  _QWORD *v285;
  char *v286;
  uint64_t v287;
  char *v288;
  _QWORD *v289;
  uint64_t v290;
  char *v291;
  char *v292;
  uint64_t v293;
  uint64_t v294;
  char *v295;
  char *v296;
  uint64_t v297;
  uint64_t v298;
  char *v299;
  char *v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t (*v303)(char *, uint64_t, uint64_t);
  int v304;
  int v305;
  uint64_t v306;
  uint64_t v308;
  uint64_t (*v309)(char *, uint64_t, int *);
  int *v310;
  int *v311;

  *(_QWORD *)a1 = *a2;
  *((_QWORD *)a1 + 1) = a2[1];
  *((_QWORD *)a1 + 2) = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v310 = a3;
  v6 = a3[6];
  v7 = &a1[v6];
  v8 = (char *)a2 + v6;
  *(_QWORD *)v7 = *(_QWORD *)v8;
  *((_QWORD *)v7 + 1) = *((_QWORD *)v8 + 1);
  *((_QWORD *)v7 + 2) = *((_QWORD *)v8 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7[24] = v8[24];
  v9 = (int *)type metadata accessor for ShowOffer(0);
  v10 = v9[7];
  v11 = (uint64_t)&v7[v10];
  v12 = &v8[v10];
  v13 = (int *)type metadata accessor for ArtworkModel(0);
  v308 = *((_QWORD *)v13 - 1);
  v14 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v308 + 48);
  v15 = v14(v11, 1, v13);
  v309 = (uint64_t (*)(char *, uint64_t, int *))v14;
  v16 = v14((uint64_t)v12, 1, v13);
  v311 = v13;
  if (v15)
  {
    if (!v16)
    {
      *(_QWORD *)v11 = *(_QWORD *)v12;
      *(_QWORD *)(v11 + 8) = *((_QWORD *)v12 + 1);
      v17 = v12[32];
      swift_bridgeObjectRetain();
      if (v17 == 255)
      {
        v29 = *((_OWORD *)v12 + 1);
        *(_BYTE *)(v11 + 32) = v12[32];
        *(_OWORD *)(v11 + 16) = v29;
      }
      else
      {
        v18 = *((_QWORD *)v12 + 2);
        v19 = *((_QWORD *)v12 + 3);
        sub_3D464(v18, v19, v17);
        *(_QWORD *)(v11 + 16) = v18;
        *(_QWORD *)(v11 + 24) = v19;
        *(_BYTE *)(v11 + 32) = v17;
      }
      *(_QWORD *)(v11 + 40) = *((_QWORD *)v12 + 5);
      *(_QWORD *)(v11 + 48) = *((_QWORD *)v12 + 6);
      v30 = (id *)(v12 + 56);
      v31 = v12[64];
      if (v31 == 255)
      {
        v33 = *v30;
        *(_BYTE *)(v11 + 64) = v12[64];
        *(_QWORD *)(v11 + 56) = v33;
      }
      else
      {
        v32 = *v30;
        sub_3D47C(*v30, v12[64]);
        *(_QWORD *)(v11 + 56) = v32;
        *(_BYTE *)(v11 + 64) = v31;
      }
      v34 = (id *)(v12 + 72);
      v35 = v12[80];
      if (v35 == 255)
      {
        v37 = *v34;
        *(_BYTE *)(v11 + 80) = v12[80];
        *(_QWORD *)(v11 + 72) = v37;
      }
      else
      {
        v36 = *v34;
        sub_3D47C(*v34, v12[80]);
        *(_QWORD *)(v11 + 72) = v36;
        *(_BYTE *)(v11 + 80) = v35;
      }
      v38 = (id *)(v12 + 88);
      v39 = v12[96];
      if (v39 == 255)
      {
        v41 = *v38;
        *(_BYTE *)(v11 + 96) = v12[96];
        *(_QWORD *)(v11 + 88) = v41;
      }
      else
      {
        v40 = *v38;
        sub_3D47C(*v38, v12[96]);
        *(_QWORD *)(v11 + 88) = v40;
        *(_BYTE *)(v11 + 96) = v39;
      }
      v42 = (id *)(v12 + 104);
      v43 = v12[112];
      if (v43 == 255)
      {
        v45 = *v42;
        *(_BYTE *)(v11 + 112) = v12[112];
        *(_QWORD *)(v11 + 104) = v45;
      }
      else
      {
        v44 = *v42;
        sub_3D47C(*v42, v12[112]);
        *(_QWORD *)(v11 + 104) = v44;
        *(_BYTE *)(v11 + 112) = v43;
      }
      v46 = (id *)(v12 + 120);
      v47 = v12[128];
      if (v47 == 255)
      {
        v49 = *v46;
        *(_BYTE *)(v11 + 128) = v12[128];
        *(_QWORD *)(v11 + 120) = v49;
      }
      else
      {
        v48 = *v46;
        sub_3D47C(*v46, v12[128]);
        *(_QWORD *)(v11 + 120) = v48;
        *(_BYTE *)(v11 + 128) = v47;
      }
      *(_BYTE *)(v11 + 129) = v12[129];
      v50 = v13[11];
      v51 = v11 + v50;
      v52 = &v12[v50];
      v53 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v53 - 8) + 16))(v51, v52, v53);
      v54 = v13[12];
      v55 = (_QWORD *)(v11 + v54);
      v56 = &v12[v54];
      *v55 = *(_QWORD *)v56;
      v55[1] = *((_QWORD *)v56 + 1);
      *(_BYTE *)(v11 + v13[13]) = v12[v13[13]];
      *(_BYTE *)(v11 + v13[14]) = v12[v13[14]];
      *(_BYTE *)(v11 + v13[15]) = v12[v13[15]];
      v57 = v13[16];
      v58 = (_QWORD *)(v11 + v57);
      v59 = &v12[v57];
      *v58 = *(_QWORD *)v59;
      v58[1] = *((_QWORD *)v59 + 1);
      v60 = v13;
      v61 = *(void (**)(uint64_t, _QWORD, uint64_t, int *))(v308 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v61(v11, 0, 1, v60);
      goto LABEL_68;
    }
LABEL_7:
    v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
    memcpy((void *)v11, v12, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_68;
  }
  if (v16)
  {
    sub_145D8(v11, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
    goto LABEL_7;
  }
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_QWORD *)(v11 + 8) = *((_QWORD *)v12 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v21 = (__int128 *)(v11 + 16);
  v22 = (__int128 *)(v12 + 16);
  v23 = v12[32];
  if (*(unsigned __int8 *)(v11 + 32) == 255)
  {
    if (v23 == 255)
    {
      v65 = *v22;
      *(_BYTE *)(v11 + 32) = v12[32];
      *v21 = v65;
    }
    else
    {
      v62 = *((_QWORD *)v12 + 2);
      v63 = *((_QWORD *)v12 + 3);
      sub_3D464(v62, v63, v12[32]);
      *(_QWORD *)(v11 + 16) = v62;
      *(_QWORD *)(v11 + 24) = v63;
      *(_BYTE *)(v11 + 32) = v23;
    }
  }
  else if (v23 == 255)
  {
    sub_3E43C(v11 + 16);
    v64 = v12[32];
    *v21 = *v22;
    *(_BYTE *)(v11 + 32) = v64;
  }
  else
  {
    v24 = *((_QWORD *)v12 + 2);
    v25 = *((_QWORD *)v12 + 3);
    sub_3D464(v24, v25, v12[32]);
    v26 = *(_QWORD *)(v11 + 16);
    v27 = *(_QWORD *)(v11 + 24);
    *(_QWORD *)(v11 + 16) = v24;
    *(_QWORD *)(v11 + 24) = v25;
    v28 = *(_BYTE *)(v11 + 32);
    *(_BYTE *)(v11 + 32) = v23;
    sub_3B5BC(v26, v27, v28);
  }
  *(_QWORD *)(v11 + 40) = *((_QWORD *)v12 + 5);
  *(_QWORD *)(v11 + 48) = *((_QWORD *)v12 + 6);
  v66 = (id *)(v11 + 56);
  v67 = (id *)(v12 + 56);
  v68 = v12[64];
  if (*(unsigned __int8 *)(v11 + 64) == 255)
  {
    if (v68 == 255)
    {
      v74 = *v67;
      *(_BYTE *)(v11 + 64) = v12[64];
      *v66 = v74;
    }
    else
    {
      v72 = *v67;
      sub_3D47C(*v67, v12[64]);
      *(_QWORD *)(v11 + 56) = v72;
      *(_BYTE *)(v11 + 64) = v68;
    }
  }
  else if (v68 == 255)
  {
    sub_3E470(v11 + 56);
    v73 = v12[64];
    *v66 = *v67;
    *(_BYTE *)(v11 + 64) = v73;
  }
  else
  {
    v69 = *v67;
    sub_3D47C(*v67, v12[64]);
    v70 = *(void **)(v11 + 56);
    *(_QWORD *)(v11 + 56) = v69;
    v71 = *(_BYTE *)(v11 + 64);
    *(_BYTE *)(v11 + 64) = v68;
    sub_3D624(v70, v71);
  }
  v75 = (id *)(v11 + 72);
  v76 = (id *)(v12 + 72);
  v77 = v12[80];
  if (*(unsigned __int8 *)(v11 + 80) == 255)
  {
    if (v77 == 255)
    {
      v83 = *v76;
      *(_BYTE *)(v11 + 80) = v12[80];
      *v75 = v83;
    }
    else
    {
      v81 = *v76;
      sub_3D47C(*v76, v12[80]);
      *(_QWORD *)(v11 + 72) = v81;
      *(_BYTE *)(v11 + 80) = v77;
    }
  }
  else if (v77 == 255)
  {
    sub_3E470(v11 + 72);
    v82 = v12[80];
    *v75 = *v76;
    *(_BYTE *)(v11 + 80) = v82;
  }
  else
  {
    v78 = *v76;
    sub_3D47C(*v76, v12[80]);
    v79 = *(void **)(v11 + 72);
    *(_QWORD *)(v11 + 72) = v78;
    v80 = *(_BYTE *)(v11 + 80);
    *(_BYTE *)(v11 + 80) = v77;
    sub_3D624(v79, v80);
  }
  v84 = (id *)(v11 + 88);
  v85 = (id *)(v12 + 88);
  v86 = v12[96];
  if (*(unsigned __int8 *)(v11 + 96) == 255)
  {
    if (v86 == 255)
    {
      v92 = *v85;
      *(_BYTE *)(v11 + 96) = v12[96];
      *v84 = v92;
    }
    else
    {
      v90 = *v85;
      sub_3D47C(*v85, v12[96]);
      *(_QWORD *)(v11 + 88) = v90;
      *(_BYTE *)(v11 + 96) = v86;
    }
  }
  else if (v86 == 255)
  {
    sub_3E470(v11 + 88);
    v91 = v12[96];
    *v84 = *v85;
    *(_BYTE *)(v11 + 96) = v91;
  }
  else
  {
    v87 = *v85;
    sub_3D47C(*v85, v12[96]);
    v88 = *(void **)(v11 + 88);
    *(_QWORD *)(v11 + 88) = v87;
    v89 = *(_BYTE *)(v11 + 96);
    *(_BYTE *)(v11 + 96) = v86;
    sub_3D624(v88, v89);
  }
  v93 = (id *)(v11 + 104);
  v94 = (id *)(v12 + 104);
  v95 = v12[112];
  if (*(unsigned __int8 *)(v11 + 112) == 255)
  {
    if (v95 == 255)
    {
      v101 = *v94;
      *(_BYTE *)(v11 + 112) = v12[112];
      *v93 = v101;
    }
    else
    {
      v99 = *v94;
      sub_3D47C(*v94, v12[112]);
      *(_QWORD *)(v11 + 104) = v99;
      *(_BYTE *)(v11 + 112) = v95;
    }
  }
  else if (v95 == 255)
  {
    sub_3E470(v11 + 104);
    v100 = v12[112];
    *v93 = *v94;
    *(_BYTE *)(v11 + 112) = v100;
  }
  else
  {
    v96 = *v94;
    sub_3D47C(*v94, v12[112]);
    v97 = *(void **)(v11 + 104);
    *(_QWORD *)(v11 + 104) = v96;
    v98 = *(_BYTE *)(v11 + 112);
    *(_BYTE *)(v11 + 112) = v95;
    sub_3D624(v97, v98);
  }
  v102 = (id *)(v11 + 120);
  v103 = (id *)(v12 + 120);
  v104 = v12[128];
  if (*(unsigned __int8 *)(v11 + 128) == 255)
  {
    if (v104 == 255)
    {
      v110 = *v103;
      *(_BYTE *)(v11 + 128) = v12[128];
      *v102 = v110;
    }
    else
    {
      v108 = *v103;
      sub_3D47C(*v103, v12[128]);
      *(_QWORD *)(v11 + 120) = v108;
      *(_BYTE *)(v11 + 128) = v104;
    }
  }
  else if (v104 == 255)
  {
    sub_3E470(v11 + 120);
    v109 = v12[128];
    *v102 = *v103;
    *(_BYTE *)(v11 + 128) = v109;
  }
  else
  {
    v105 = *v103;
    sub_3D47C(*v103, v12[128]);
    v106 = *(void **)(v11 + 120);
    *(_QWORD *)(v11 + 120) = v105;
    v107 = *(_BYTE *)(v11 + 128);
    *(_BYTE *)(v11 + 128) = v104;
    sub_3D624(v106, v107);
  }
  *(_BYTE *)(v11 + 129) = v12[129];
  v111 = v311[11];
  v112 = v11 + v111;
  v113 = &v12[v111];
  v114 = type metadata accessor for ArtworkCrop(0);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v114 - 8) + 24))(v112, v113, v114);
  v115 = v311[12];
  v116 = (_QWORD *)(v11 + v115);
  v117 = &v12[v115];
  *v116 = *(_QWORD *)v117;
  v116[1] = *((_QWORD *)v117 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(v11 + v311[13]) = v12[v311[13]];
  *(_BYTE *)(v11 + v311[14]) = v12[v311[14]];
  *(_BYTE *)(v11 + v311[15]) = v12[v311[15]];
  v118 = v311[16];
  v119 = (_QWORD *)(v11 + v118);
  v120 = &v12[v118];
  *v119 = *(_QWORD *)v120;
  v119[1] = *((_QWORD *)v120 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_68:
  v121 = v9[8];
  v122 = &v7[v121];
  v123 = &v8[v121];
  *(_QWORD *)v122 = *(_QWORD *)v123;
  *((_QWORD *)v122 + 1) = *((_QWORD *)v123 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v124 = v9[9];
  v125 = &v7[v124];
  v126 = &v8[v124];
  *(_QWORD *)v125 = *(_QWORD *)v126;
  *((_QWORD *)v125 + 1) = *((_QWORD *)v126 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7[v9[10]] = v8[v9[10]];
  v127 = v9[11];
  v128 = &v7[v127];
  v129 = &v8[v127];
  *(_QWORD *)v128 = *(_QWORD *)v129;
  *((_QWORD *)v128 + 1) = *((_QWORD *)v129 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v130 = v9[12];
  v131 = &v7[v130];
  v132 = &v8[v130];
  *(_QWORD *)v131 = *(_QWORD *)v132;
  *((_QWORD *)v131 + 1) = *((_QWORD *)v132 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v133 = v9[13];
  v134 = &v7[v133];
  v135 = &v8[v133];
  v136 = type metadata accessor for URL(0);
  v137 = *(_QWORD *)(v136 - 8);
  v138 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v137 + 48);
  v139 = v138(v134, 1, v136);
  v140 = v138(v135, 1, v136);
  if (v139)
  {
    if (!v140)
    {
      (*(void (**)(char *, char *, uint64_t))(v137 + 16))(v134, v135, v136);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v137 + 56))(v134, 0, 1, v136);
      goto LABEL_74;
    }
    goto LABEL_73;
  }
  if (v140)
  {
    (*(void (**)(char *, uint64_t))(v137 + 8))(v134, v136);
LABEL_73:
    v141 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
    memcpy(v134, v135, *(_QWORD *)(*(_QWORD *)(v141 - 8) + 64));
    goto LABEL_74;
  }
  (*(void (**)(char *, char *, uint64_t))(v137 + 24))(v134, v135, v136);
LABEL_74:
  v142 = v9[14];
  v143 = &v7[v142];
  v144 = &v8[v142];
  *(_QWORD *)v143 = *(_QWORD *)v144;
  *((_QWORD *)v143 + 1) = *((_QWORD *)v144 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v145 = v9[15];
  v146 = &v7[v145];
  v147 = &v8[v145];
  *(_QWORD *)v146 = *(_QWORD *)v147;
  *((_QWORD *)v146 + 1) = *((_QWORD *)v147 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v148 = v9[16];
  v149 = &v7[v148];
  v150 = &v8[v148];
  v151 = v138(&v7[v148], 1, v136);
  v152 = v138(v150, 1, v136);
  if (v151)
  {
    if (!v152)
    {
      (*(void (**)(char *, char *, uint64_t))(v137 + 16))(v149, v150, v136);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v137 + 56))(v149, 0, 1, v136);
      goto LABEL_80;
    }
    goto LABEL_79;
  }
  if (v152)
  {
    (*(void (**)(char *, uint64_t))(v137 + 8))(v149, v136);
LABEL_79:
    v153 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
    memcpy(v149, v150, *(_QWORD *)(*(_QWORD *)(v153 - 8) + 64));
    goto LABEL_80;
  }
  (*(void (**)(char *, char *, uint64_t))(v137 + 24))(v149, v150, v136);
LABEL_80:
  v154 = v9[17];
  v155 = &v7[v154];
  v156 = &v8[v154];
  v157 = v138(&v7[v154], 1, v136);
  v158 = v138(v156, 1, v136);
  if (v157)
  {
    if (!v158)
    {
      (*(void (**)(char *, char *, uint64_t))(v137 + 16))(v155, v156, v136);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v137 + 56))(v155, 0, 1, v136);
      goto LABEL_86;
    }
    goto LABEL_85;
  }
  if (v158)
  {
    (*(void (**)(char *, uint64_t))(v137 + 8))(v155, v136);
LABEL_85:
    v159 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
    memcpy(v155, v156, *(_QWORD *)(*(_QWORD *)(v159 - 8) + 64));
    goto LABEL_86;
  }
  (*(void (**)(char *, char *, uint64_t))(v137 + 24))(v155, v156, v136);
LABEL_86:
  v160 = a2;
  v7[v9[18]] = v8[v9[18]];
  v161 = v310[7];
  v162 = &a1[v161];
  v163 = (char *)a2 + v161;
  v164 = v138(&a1[v161], 1, v136);
  v165 = v138(v163, 1, v136);
  if (v164)
  {
    if (!v165)
    {
      (*(void (**)(char *, char *, uint64_t))(v137 + 16))(v162, v163, v136);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v137 + 56))(v162, 0, 1, v136);
      goto LABEL_92;
    }
    goto LABEL_91;
  }
  if (v165)
  {
    (*(void (**)(char *, uint64_t))(v137 + 8))(v162, v136);
LABEL_91:
    v166 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
    memcpy(v162, v163, *(_QWORD *)(*(_QWORD *)(v166 - 8) + 64));
    goto LABEL_92;
  }
  (*(void (**)(char *, char *, uint64_t))(v137 + 24))(v162, v163, v136);
LABEL_92:
  (*(void (**)(char *, char *, uint64_t))(v137 + 24))(&a1[v310[8]], (char *)a2 + v310[8], v136);
  *(_QWORD *)&a1[v310[9]] = *(_QWORD *)((char *)a2 + v310[9]);
  v167 = v310[10];
  v168 = &a1[v167];
  v169 = (_QWORD *)((char *)a2 + v167);
  *(_QWORD *)v168 = *v169;
  *((_QWORD *)v168 + 1) = v169[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v170 = v310[11];
  v171 = &a1[v170];
  v172 = (_QWORD *)((char *)a2 + v170);
  *(_QWORD *)v171 = *v172;
  *((_QWORD *)v171 + 1) = v172[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v173 = v310[12];
  v174 = *(_QWORD *)&a1[v173];
  *(_QWORD *)&a1[v173] = *(_QWORD *)((char *)a2 + v173);
  swift_retain();
  swift_release(v174);
  a1[v310[13]] = *((_BYTE *)a2 + v310[13]);
  a1[v310[14]] = *((_BYTE *)a2 + v310[14]);
  v175 = v310[15];
  v176 = &a1[v175];
  v177 = (char *)a2 + v175;
  v178 = *(_QWORD *)v177;
  v176[8] = v177[8];
  *(_QWORD *)v176 = v178;
  v179 = v310[16];
  v180 = (uint64_t)&a1[v179];
  v181 = (char *)a2 + v179;
  v182 = v309(&a1[v179], 1, v311);
  v183 = v309(v181, 1, v311);
  if (v182)
  {
    if (!v183)
    {
      *(_QWORD *)v180 = *(_QWORD *)v181;
      *(_QWORD *)(v180 + 8) = *((_QWORD *)v181 + 1);
      v184 = v181[32];
      swift_bridgeObjectRetain();
      if (v184 == 255)
      {
        v196 = *((_OWORD *)v181 + 1);
        *(_BYTE *)(v180 + 32) = v181[32];
        *(_OWORD *)(v180 + 16) = v196;
      }
      else
      {
        v185 = *((_QWORD *)v181 + 2);
        v186 = *((_QWORD *)v181 + 3);
        sub_3D464(v185, v186, v184);
        *(_QWORD *)(v180 + 16) = v185;
        *(_QWORD *)(v180 + 24) = v186;
        *(_BYTE *)(v180 + 32) = v184;
      }
      *(_QWORD *)(v180 + 40) = *((_QWORD *)v181 + 5);
      *(_QWORD *)(v180 + 48) = *((_QWORD *)v181 + 6);
      v197 = (id *)(v181 + 56);
      v198 = v181[64];
      if (v198 == 255)
      {
        v200 = *v197;
        *(_BYTE *)(v180 + 64) = v181[64];
        *(_QWORD *)(v180 + 56) = v200;
      }
      else
      {
        v199 = *v197;
        sub_3D47C(*v197, v181[64]);
        *(_QWORD *)(v180 + 56) = v199;
        *(_BYTE *)(v180 + 64) = v198;
      }
      v160 = a2;
      v201 = (id *)(v181 + 72);
      v202 = v181[80];
      if (v202 == 255)
      {
        v204 = *v201;
        *(_BYTE *)(v180 + 80) = v181[80];
        *(_QWORD *)(v180 + 72) = v204;
      }
      else
      {
        v203 = *v201;
        sub_3D47C(*v201, v181[80]);
        *(_QWORD *)(v180 + 72) = v203;
        *(_BYTE *)(v180 + 80) = v202;
      }
      v205 = (id *)(v181 + 88);
      v206 = v181[96];
      if (v206 == 255)
      {
        v208 = *v205;
        *(_BYTE *)(v180 + 96) = v181[96];
        *(_QWORD *)(v180 + 88) = v208;
      }
      else
      {
        v207 = *v205;
        sub_3D47C(*v205, v181[96]);
        *(_QWORD *)(v180 + 88) = v207;
        *(_BYTE *)(v180 + 96) = v206;
      }
      v209 = (id *)(v181 + 104);
      v210 = v181[112];
      if (v210 == 255)
      {
        v212 = *v209;
        *(_BYTE *)(v180 + 112) = v181[112];
        *(_QWORD *)(v180 + 104) = v212;
      }
      else
      {
        v211 = *v209;
        sub_3D47C(*v209, v181[112]);
        *(_QWORD *)(v180 + 104) = v211;
        *(_BYTE *)(v180 + 112) = v210;
      }
      v213 = (id *)(v181 + 120);
      v214 = v181[128];
      if (v214 == 255)
      {
        v216 = *v213;
        *(_BYTE *)(v180 + 128) = v181[128];
        *(_QWORD *)(v180 + 120) = v216;
      }
      else
      {
        v215 = *v213;
        sub_3D47C(*v213, v181[128]);
        *(_QWORD *)(v180 + 120) = v215;
        *(_BYTE *)(v180 + 128) = v214;
      }
      *(_BYTE *)(v180 + 129) = v181[129];
      v217 = v311[11];
      v218 = v180 + v217;
      v219 = &v181[v217];
      v220 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v220 - 8) + 16))(v218, v219, v220);
      v221 = v311[12];
      v222 = (_QWORD *)(v180 + v221);
      v223 = &v181[v221];
      *v222 = *(_QWORD *)v223;
      v222[1] = *((_QWORD *)v223 + 1);
      *(_BYTE *)(v180 + v311[13]) = v181[v311[13]];
      *(_BYTE *)(v180 + v311[14]) = v181[v311[14]];
      *(_BYTE *)(v180 + v311[15]) = v181[v311[15]];
      v224 = v311[16];
      v225 = (_QWORD *)(v180 + v224);
      v226 = &v181[v224];
      *v225 = *(_QWORD *)v226;
      v225[1] = *((_QWORD *)v226 + 1);
      v227 = *(void (**)(uint64_t, _QWORD, uint64_t, int *))(v308 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v227(v180, 0, 1, v311);
      goto LABEL_163;
    }
LABEL_98:
    v187 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
    memcpy((void *)v180, v181, *(_QWORD *)(*(_QWORD *)(v187 - 8) + 64));
    goto LABEL_163;
  }
  if (v183)
  {
    sub_145D8(v180, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
    goto LABEL_98;
  }
  *(_QWORD *)v180 = *(_QWORD *)v181;
  *(_QWORD *)(v180 + 8) = *((_QWORD *)v181 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v188 = (__int128 *)(v180 + 16);
  v189 = (__int128 *)(v181 + 16);
  v190 = v181[32];
  if (*(unsigned __int8 *)(v180 + 32) == 255)
  {
    if (v190 == 255)
    {
      v231 = *v189;
      *(_BYTE *)(v180 + 32) = v181[32];
      *v188 = v231;
    }
    else
    {
      v228 = *((_QWORD *)v181 + 2);
      v229 = *((_QWORD *)v181 + 3);
      sub_3D464(v228, v229, v181[32]);
      *(_QWORD *)(v180 + 16) = v228;
      *(_QWORD *)(v180 + 24) = v229;
      *(_BYTE *)(v180 + 32) = v190;
    }
  }
  else if (v190 == 255)
  {
    sub_3E43C(v180 + 16);
    v230 = v181[32];
    *v188 = *v189;
    *(_BYTE *)(v180 + 32) = v230;
  }
  else
  {
    v191 = *((_QWORD *)v181 + 2);
    v192 = *((_QWORD *)v181 + 3);
    sub_3D464(v191, v192, v181[32]);
    v193 = *(_QWORD *)(v180 + 16);
    v194 = *(_QWORD *)(v180 + 24);
    *(_QWORD *)(v180 + 16) = v191;
    *(_QWORD *)(v180 + 24) = v192;
    v195 = *(_BYTE *)(v180 + 32);
    *(_BYTE *)(v180 + 32) = v190;
    sub_3B5BC(v193, v194, v195);
  }
  *(_QWORD *)(v180 + 40) = *((_QWORD *)v181 + 5);
  *(_QWORD *)(v180 + 48) = *((_QWORD *)v181 + 6);
  v232 = (id *)(v180 + 56);
  v233 = (id *)(v181 + 56);
  v234 = v181[64];
  if (*(unsigned __int8 *)(v180 + 64) == 255)
  {
    v160 = a2;
    if (v234 == 255)
    {
      v240 = *v233;
      *(_BYTE *)(v180 + 64) = v181[64];
      *v232 = v240;
    }
    else
    {
      v238 = *v233;
      sub_3D47C(*v233, v181[64]);
      *(_QWORD *)(v180 + 56) = v238;
      *(_BYTE *)(v180 + 64) = v234;
    }
  }
  else
  {
    v160 = a2;
    if (v234 == 255)
    {
      sub_3E470(v180 + 56);
      v239 = v181[64];
      *v232 = *v233;
      *(_BYTE *)(v180 + 64) = v239;
    }
    else
    {
      v235 = *v233;
      sub_3D47C(*v233, v181[64]);
      v236 = *(void **)(v180 + 56);
      *(_QWORD *)(v180 + 56) = v235;
      v237 = *(_BYTE *)(v180 + 64);
      *(_BYTE *)(v180 + 64) = v234;
      sub_3D624(v236, v237);
    }
  }
  v241 = (id *)(v180 + 72);
  v242 = (id *)(v181 + 72);
  v243 = v181[80];
  if (*(unsigned __int8 *)(v180 + 80) == 255)
  {
    if (v243 == 255)
    {
      v249 = *v242;
      *(_BYTE *)(v180 + 80) = v181[80];
      *v241 = v249;
    }
    else
    {
      v247 = *v242;
      sub_3D47C(*v242, v181[80]);
      *(_QWORD *)(v180 + 72) = v247;
      *(_BYTE *)(v180 + 80) = v243;
    }
  }
  else if (v243 == 255)
  {
    sub_3E470(v180 + 72);
    v248 = v181[80];
    *v241 = *v242;
    *(_BYTE *)(v180 + 80) = v248;
  }
  else
  {
    v244 = *v242;
    sub_3D47C(*v242, v181[80]);
    v245 = *(void **)(v180 + 72);
    *(_QWORD *)(v180 + 72) = v244;
    v246 = *(_BYTE *)(v180 + 80);
    *(_BYTE *)(v180 + 80) = v243;
    sub_3D624(v245, v246);
  }
  v250 = (id *)(v180 + 88);
  v251 = (id *)(v181 + 88);
  v252 = v181[96];
  if (*(unsigned __int8 *)(v180 + 96) == 255)
  {
    if (v252 == 255)
    {
      v258 = *v251;
      *(_BYTE *)(v180 + 96) = v181[96];
      *v250 = v258;
    }
    else
    {
      v256 = *v251;
      sub_3D47C(*v251, v181[96]);
      *(_QWORD *)(v180 + 88) = v256;
      *(_BYTE *)(v180 + 96) = v252;
    }
  }
  else if (v252 == 255)
  {
    sub_3E470(v180 + 88);
    v257 = v181[96];
    *v250 = *v251;
    *(_BYTE *)(v180 + 96) = v257;
  }
  else
  {
    v253 = *v251;
    sub_3D47C(*v251, v181[96]);
    v254 = *(void **)(v180 + 88);
    *(_QWORD *)(v180 + 88) = v253;
    v255 = *(_BYTE *)(v180 + 96);
    *(_BYTE *)(v180 + 96) = v252;
    sub_3D624(v254, v255);
  }
  v259 = (id *)(v180 + 104);
  v260 = (id *)(v181 + 104);
  v261 = v181[112];
  if (*(unsigned __int8 *)(v180 + 112) == 255)
  {
    if (v261 == 255)
    {
      v267 = *v260;
      *(_BYTE *)(v180 + 112) = v181[112];
      *v259 = v267;
    }
    else
    {
      v265 = *v260;
      sub_3D47C(*v260, v181[112]);
      *(_QWORD *)(v180 + 104) = v265;
      *(_BYTE *)(v180 + 112) = v261;
    }
  }
  else if (v261 == 255)
  {
    sub_3E470(v180 + 104);
    v266 = v181[112];
    *v259 = *v260;
    *(_BYTE *)(v180 + 112) = v266;
  }
  else
  {
    v262 = *v260;
    sub_3D47C(*v260, v181[112]);
    v263 = *(void **)(v180 + 104);
    *(_QWORD *)(v180 + 104) = v262;
    v264 = *(_BYTE *)(v180 + 112);
    *(_BYTE *)(v180 + 112) = v261;
    sub_3D624(v263, v264);
  }
  v268 = (id *)(v180 + 120);
  v269 = (id *)(v181 + 120);
  v270 = v181[128];
  if (*(unsigned __int8 *)(v180 + 128) == 255)
  {
    if (v270 == 255)
    {
      v276 = *v269;
      *(_BYTE *)(v180 + 128) = v181[128];
      *v268 = v276;
    }
    else
    {
      v274 = *v269;
      sub_3D47C(*v269, v181[128]);
      *(_QWORD *)(v180 + 120) = v274;
      *(_BYTE *)(v180 + 128) = v270;
    }
  }
  else if (v270 == 255)
  {
    sub_3E470(v180 + 120);
    v275 = v181[128];
    *v268 = *v269;
    *(_BYTE *)(v180 + 128) = v275;
  }
  else
  {
    v271 = *v269;
    sub_3D47C(*v269, v181[128]);
    v272 = *(void **)(v180 + 120);
    *(_QWORD *)(v180 + 120) = v271;
    v273 = *(_BYTE *)(v180 + 128);
    *(_BYTE *)(v180 + 128) = v270;
    sub_3D624(v272, v273);
  }
  *(_BYTE *)(v180 + 129) = v181[129];
  v277 = v311[11];
  v278 = v180 + v277;
  v279 = &v181[v277];
  v280 = type metadata accessor for ArtworkCrop(0);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v280 - 8) + 24))(v278, v279, v280);
  v281 = v311[12];
  v282 = (_QWORD *)(v180 + v281);
  v283 = &v181[v281];
  *v282 = *(_QWORD *)v283;
  v282[1] = *((_QWORD *)v283 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(v180 + v311[13]) = v181[v311[13]];
  *(_BYTE *)(v180 + v311[14]) = v181[v311[14]];
  *(_BYTE *)(v180 + v311[15]) = v181[v311[15]];
  v284 = v311[16];
  v285 = (_QWORD *)(v180 + v284);
  v286 = &v181[v284];
  *v285 = *(_QWORD *)v286;
  v285[1] = *((_QWORD *)v286 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_163:
  v287 = v310[17];
  v288 = &a1[v287];
  v289 = (_QWORD *)((char *)v160 + v287);
  *(_QWORD *)v288 = *v289;
  *((_QWORD *)v288 + 1) = v289[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v290 = v310[18];
  v291 = &a1[v290];
  v292 = (char *)v160 + v290;
  v293 = *(_QWORD *)v292;
  v291[8] = v292[8];
  *(_QWORD *)v291 = v293;
  v294 = v310[19];
  v295 = &a1[v294];
  v296 = (char *)v160 + v294;
  v297 = *(_QWORD *)v296;
  v295[8] = v296[8];
  *(_QWORD *)v295 = v297;
  a1[v310[20]] = *((_BYTE *)v160 + v310[20]);
  a1[v310[21]] = *((_BYTE *)v160 + v310[21]);
  v298 = v310[22];
  v299 = &a1[v298];
  v300 = (char *)v160 + v298;
  v301 = type metadata accessor for TranscriptRequestInformation(0);
  v302 = *(_QWORD *)(v301 - 8);
  v303 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v302 + 48);
  v304 = v303(v299, 1, v301);
  v305 = v303(v300, 1, v301);
  if (!v304)
  {
    if (!v305)
    {
      (*(void (**)(char *, char *, uint64_t))(v302 + 24))(v299, v300, v301);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v302 + 8))(v299, v301);
    goto LABEL_168;
  }
  if (v305)
  {
LABEL_168:
    v306 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2C40);
    memcpy(v299, v300, *(_QWORD *)(*(_QWORD *)(v306 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v302 + 16))(v299, v300, v301);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v302 + 56))(v299, 0, 1, v301);
  return a1;
}

uint64_t initializeWithTake for EpisodeOffer(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  _OWORD *v11;
  _OWORD *v12;
  int *v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  const void *v27;
  unsigned int (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  void *v31;
  const void *v32;
  uint64_t v33;
  uint64_t v34;
  const void *v35;
  uint64_t v36;
  void *v37;
  const void *v38;
  uint64_t v39;
  void (*v40)(void *, const void *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _OWORD *v48;
  _OWORD *v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  const void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int (*v70)(_OWORD *, uint64_t, int *);
  int *v71;
  unsigned int (*v72)(const void *, uint64_t, uint64_t);
  char *v73;
  uint64_t v74;
  uint64_t v75;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v6 = a3[6];
  v7 = a1 + v6;
  v8 = a2 + v6;
  *(_QWORD *)v7 = *(_QWORD *)(a2 + v6);
  *(_OWORD *)(v7 + 8) = *(_OWORD *)(a2 + v6 + 8);
  *(_BYTE *)(v7 + 24) = *(_BYTE *)(a2 + v6 + 24);
  v9 = (int *)type metadata accessor for ShowOffer(0);
  v10 = v9[7];
  v11 = (_OWORD *)(v7 + v10);
  v12 = (_OWORD *)(v8 + v10);
  v13 = (int *)type metadata accessor for ArtworkModel(0);
  v70 = *(unsigned int (**)(_OWORD *, uint64_t, int *))(*((_QWORD *)v13 - 1) + 48);
  v71 = v13;
  v75 = *((_QWORD *)v13 - 1);
  if (v70(v12, 1, v13))
  {
    v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    v15 = v12[1];
    *v11 = *v12;
    v11[1] = v15;
    *((_BYTE *)v11 + 32) = *((_BYTE *)v12 + 32);
    *(_OWORD *)((char *)v11 + 40) = *(_OWORD *)((char *)v12 + 40);
    *((_QWORD *)v11 + 7) = *((_QWORD *)v12 + 7);
    *((_BYTE *)v11 + 64) = *((_BYTE *)v12 + 64);
    *(_OWORD *)((char *)v11 + 113) = *(_OWORD *)((char *)v12 + 113);
    *(_OWORD *)((char *)v11 + 104) = *(_OWORD *)((char *)v12 + 104);
    *(_OWORD *)((char *)v11 + 88) = *(_OWORD *)((char *)v12 + 88);
    *(_OWORD *)((char *)v11 + 72) = *(_OWORD *)((char *)v12 + 72);
    *((_BYTE *)v11 + 129) = *((_BYTE *)v12 + 129);
    v16 = v13[11];
    v73 = (char *)v11 + v16;
    v17 = (char *)v12 + v16;
    v18 = type metadata accessor for ArtworkCrop(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v73, v17, v18);
    *(_OWORD *)((char *)v11 + v13[12]) = *(_OWORD *)((char *)v12 + v13[12]);
    *((_BYTE *)v11 + v13[13]) = *((_BYTE *)v12 + v13[13]);
    *((_BYTE *)v11 + v13[14]) = *((_BYTE *)v12 + v13[14]);
    *((_BYTE *)v11 + v13[15]) = *((_BYTE *)v12 + v13[15]);
    *(_OWORD *)((char *)v11 + v13[16]) = *(_OWORD *)((char *)v12 + v13[16]);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v75 + 56))(v11, 0, 1, v13);
  }
  *(_OWORD *)(v7 + v9[8]) = *(_OWORD *)(v8 + v9[8]);
  *(_OWORD *)(v7 + v9[9]) = *(_OWORD *)(v8 + v9[9]);
  *(_BYTE *)(v7 + v9[10]) = *(_BYTE *)(v8 + v9[10]);
  *(_OWORD *)(v7 + v9[11]) = *(_OWORD *)(v8 + v9[11]);
  *(_OWORD *)(v7 + v9[12]) = *(_OWORD *)(v8 + v9[12]);
  v19 = v9[13];
  v20 = (void *)(v7 + v19);
  v21 = (const void *)(v8 + v19);
  v22 = type metadata accessor for URL(0);
  v23 = *(_QWORD *)(v22 - 8);
  v72 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v23 + 48);
  v74 = v23;
  if (v72(v21, 1, v22))
  {
    v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v23 + 32))(v20, v21, v22);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  }
  *(_OWORD *)(v7 + v9[14]) = *(_OWORD *)(v8 + v9[14]);
  *(_OWORD *)(v7 + v9[15]) = *(_OWORD *)(v8 + v9[15]);
  v25 = v9[16];
  v26 = (void *)(v7 + v25);
  v27 = (const void *)(v8 + v25);
  v28 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v72;
  if (v72((const void *)(v8 + v25), 1, v22))
  {
    v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v74 + 32))(v26, v27, v22);
    v28 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v72;
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v74 + 56))(v26, 0, 1, v22);
  }
  v30 = v9[17];
  v31 = (void *)(v7 + v30);
  v32 = (const void *)(v8 + v30);
  if (v28(v8 + v30, 1, v22))
  {
    v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    v34 = v74;
  }
  else
  {
    v35 = v32;
    v34 = v74;
    (*(void (**)(void *, const void *, uint64_t))(v74 + 32))(v31, v35, v22);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v74 + 56))(v31, 0, 1, v22);
  }
  *(_BYTE *)(v7 + v9[18]) = *(_BYTE *)(v8 + v9[18]);
  v36 = a3[7];
  v37 = (void *)(a1 + v36);
  v38 = (const void *)(a2 + v36);
  if (v28(a2 + v36, 1, v22))
  {
    v39 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
    memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    v40 = *(void (**)(void *, const void *, uint64_t))(v34 + 32);
  }
  else
  {
    v40 = *(void (**)(void *, const void *, uint64_t))(v34 + 32);
    v40(v37, v38, v22);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v37, 0, 1, v22);
  }
  v40((void *)(a1 + a3[8]), (const void *)(a2 + a3[8]), v22);
  v41 = a3[10];
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  *(_OWORD *)(a1 + v41) = *(_OWORD *)(a2 + v41);
  v42 = a3[12];
  *(_OWORD *)(a1 + a3[11]) = *(_OWORD *)(a2 + a3[11]);
  *(_QWORD *)(a1 + v42) = *(_QWORD *)(a2 + v42);
  v43 = a3[14];
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  *(_BYTE *)(a1 + v43) = *(_BYTE *)(a2 + v43);
  v44 = a3[15];
  v45 = a3[16];
  v46 = a1 + v44;
  v47 = a2 + v44;
  *(_QWORD *)v46 = *(_QWORD *)v47;
  *(_BYTE *)(v46 + 8) = *(_BYTE *)(v47 + 8);
  v48 = (_OWORD *)(a1 + v45);
  v49 = (_OWORD *)(a2 + v45);
  if (v70((_OWORD *)(a2 + v45), 1, v71))
  {
    v50 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
    memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
  }
  else
  {
    v51 = v49[1];
    *v48 = *v49;
    v48[1] = v51;
    *((_BYTE *)v48 + 32) = *((_BYTE *)v49 + 32);
    *(_OWORD *)((char *)v48 + 40) = *(_OWORD *)((char *)v49 + 40);
    *((_QWORD *)v48 + 7) = *((_QWORD *)v49 + 7);
    *((_BYTE *)v48 + 64) = *((_BYTE *)v49 + 64);
    *(_OWORD *)((char *)v48 + 113) = *(_OWORD *)((char *)v49 + 113);
    *(_OWORD *)((char *)v48 + 104) = *(_OWORD *)((char *)v49 + 104);
    *(_OWORD *)((char *)v48 + 88) = *(_OWORD *)((char *)v49 + 88);
    *(_OWORD *)((char *)v48 + 72) = *(_OWORD *)((char *)v49 + 72);
    *((_BYTE *)v48 + 129) = *((_BYTE *)v49 + 129);
    v52 = v71[11];
    v53 = (char *)v48 + v52;
    v54 = (char *)v49 + v52;
    v55 = type metadata accessor for ArtworkCrop(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v55 - 8) + 32))(v53, v54, v55);
    *(_OWORD *)((char *)v48 + v71[12]) = *(_OWORD *)((char *)v49 + v71[12]);
    *((_BYTE *)v48 + v71[13]) = *((_BYTE *)v49 + v71[13]);
    *((_BYTE *)v48 + v71[14]) = *((_BYTE *)v49 + v71[14]);
    *((_BYTE *)v48 + v71[15]) = *((_BYTE *)v49 + v71[15]);
    *(_OWORD *)((char *)v48 + v71[16]) = *(_OWORD *)((char *)v49 + v71[16]);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v75 + 56))(v48, 0, 1, v71);
  }
  v56 = a3[18];
  *(_OWORD *)(a1 + a3[17]) = *(_OWORD *)(a2 + a3[17]);
  v57 = a1 + v56;
  v58 = a2 + v56;
  *(_QWORD *)v57 = *(_QWORD *)v58;
  *(_BYTE *)(v57 + 8) = *(_BYTE *)(v58 + 8);
  v59 = a3[19];
  v60 = a3[20];
  v61 = a1 + v59;
  v62 = a2 + v59;
  *(_QWORD *)v61 = *(_QWORD *)v62;
  *(_BYTE *)(v61 + 8) = *(_BYTE *)(v62 + 8);
  *(_BYTE *)(a1 + v60) = *(_BYTE *)(a2 + v60);
  v63 = a3[22];
  *(_BYTE *)(a1 + a3[21]) = *(_BYTE *)(a2 + a3[21]);
  v64 = (void *)(a1 + v63);
  v65 = (const void *)(a2 + v63);
  v66 = type metadata accessor for TranscriptRequestInformation(0);
  v67 = *(_QWORD *)(v66 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v67 + 48))(v65, 1, v66))
  {
    v68 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2C40);
    memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v67 + 32))(v64, v65, v66);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v67 + 56))(v64, 0, 1, v66);
  }
  return a1;
}

uint64_t assignWithTake for EpisodeOffer(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t (*v14)(uint64_t, uint64_t, int *);
  int v15;
  int v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t (*v48)(void *, uint64_t, uint64_t);
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  void *v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  void *v70;
  int v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  void *v76;
  int v77;
  int v78;
  int *v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  int v101;
  __int128 v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  void *v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t (*v125)(void *, uint64_t, uint64_t);
  int v126;
  int v127;
  uint64_t v128;
  uint64_t v130;
  _OWORD *v131;
  int v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  _OWORD *v137;
  int v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  int v143;
  int v144;
  void *v145;
  _QWORD *v146;
  int v147;
  int v148;
  void *v149;
  _QWORD *v150;
  int v151;
  int v152;
  void *v153;
  _QWORD *v154;
  int v155;
  int v156;
  void *v157;
  _QWORD *v158;
  int v159;
  int v160;
  void *v161;
  _QWORD *v162;
  int v163;
  int v164;
  void *v165;
  _QWORD *v166;
  int v167;
  int v168;
  void *v169;
  _QWORD *v170;
  int v171;
  int v172;
  void *v173;
  _QWORD *v174;
  int v175;
  int v176;
  void *v177;
  _QWORD *v178;
  int v179;
  int v180;
  void *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  _QWORD *v187;
  uint64_t *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  _QWORD *v192;
  uint64_t *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  _QWORD *v201;
  uint64_t *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  _QWORD *v206;
  uint64_t *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t (*v212)(uint64_t, uint64_t, int *);
  int *v213;
  int *v214;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  v213 = a3;
  v6 = a3[6];
  v7 = a1 + v6;
  v8 = a2 + v6;
  *(_OWORD *)v7 = *(_OWORD *)(a2 + v6);
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(a2 + v6 + 16);
  swift_bridgeObjectRelease();
  *(_BYTE *)(v7 + 24) = *(_BYTE *)(v8 + 24);
  v9 = (int *)type metadata accessor for ShowOffer(0);
  v10 = v9[7];
  v11 = v7 + v10;
  v12 = v8 + v10;
  v13 = (int *)type metadata accessor for ArtworkModel(0);
  v210 = *((_QWORD *)v13 - 1);
  v14 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v210 + 48);
  v15 = v14(v11, 1, v13);
  v16 = v14(v12, 1, v13);
  v214 = v13;
  v211 = a2;
  v212 = v14;
  if (v15)
  {
    if (!v16)
    {
      v17 = *(_OWORD *)(v12 + 16);
      *(_OWORD *)v11 = *(_OWORD *)v12;
      *(_OWORD *)(v11 + 16) = v17;
      *(_BYTE *)(v11 + 32) = *(_BYTE *)(v12 + 32);
      *(_OWORD *)(v11 + 40) = *(_OWORD *)(v12 + 40);
      *(_QWORD *)(v11 + 56) = *(_QWORD *)(v12 + 56);
      *(_BYTE *)(v11 + 64) = *(_BYTE *)(v12 + 64);
      *(_OWORD *)(v11 + 113) = *(_OWORD *)(v12 + 113);
      *(_OWORD *)(v11 + 104) = *(_OWORD *)(v12 + 104);
      *(_OWORD *)(v11 + 88) = *(_OWORD *)(v12 + 88);
      *(_OWORD *)(v11 + 72) = *(_OWORD *)(v12 + 72);
      *(_BYTE *)(v11 + 129) = *(_BYTE *)(v12 + 129);
      v18 = v13[11];
      v19 = v11 + v18;
      v20 = v12 + v18;
      v21 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v19, v20, v21);
      *(_OWORD *)(v11 + v13[12]) = *(_OWORD *)(v12 + v13[12]);
      *(_BYTE *)(v11 + v13[13]) = *(_BYTE *)(v12 + v13[13]);
      *(_BYTE *)(v11 + v13[14]) = *(_BYTE *)(v12 + v13[14]);
      *(_BYTE *)(v11 + v13[15]) = *(_BYTE *)(v12 + v13[15]);
      *(_OWORD *)(v11 + v13[16]) = *(_OWORD *)(v12 + v13[16]);
      (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v210 + 56))(v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v16)
  {
    sub_145D8(v11, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
LABEL_6:
    v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
    memcpy((void *)v11, (const void *)v12, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  v130 = *(_QWORD *)(v12 + 8);
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_QWORD *)(v11 + 8) = v130;
  swift_bridgeObjectRelease();
  v131 = (_OWORD *)(v12 + 16);
  v132 = *(unsigned __int8 *)(v11 + 32);
  if (v132 != 255)
  {
    v133 = *(unsigned __int8 *)(v12 + 32);
    if (v133 != 255)
    {
      v134 = *(_QWORD *)(v11 + 16);
      v135 = *(_QWORD *)(v11 + 24);
      *(_OWORD *)(v11 + 16) = *v131;
      *(_BYTE *)(v11 + 32) = v133;
      sub_3B5BC(v134, v135, v132);
      goto LABEL_57;
    }
    sub_3E43C(v11 + 16);
  }
  *(_OWORD *)(v11 + 16) = *v131;
  *(_BYTE *)(v11 + 32) = *(_BYTE *)(v12 + 32);
LABEL_57:
  *(_OWORD *)(v11 + 40) = *(_OWORD *)(v12 + 40);
  v142 = (_QWORD *)(v12 + 56);
  v143 = *(unsigned __int8 *)(v11 + 64);
  if (v143 != 255)
  {
    v144 = *(unsigned __int8 *)(v12 + 64);
    if (v144 != 255)
    {
      v145 = *(void **)(v11 + 56);
      *(_QWORD *)(v11 + 56) = *v142;
      *(_BYTE *)(v11 + 64) = v144;
      sub_3D624(v145, v143);
      goto LABEL_67;
    }
    sub_3E470(v11 + 56);
  }
  *(_QWORD *)(v11 + 56) = *v142;
  *(_BYTE *)(v11 + 64) = *(_BYTE *)(v12 + 64);
LABEL_67:
  v150 = (_QWORD *)(v12 + 72);
  v151 = *(unsigned __int8 *)(v11 + 80);
  if (v151 != 255)
  {
    v152 = *(unsigned __int8 *)(v12 + 80);
    if (v152 != 255)
    {
      v153 = *(void **)(v11 + 72);
      *(_QWORD *)(v11 + 72) = *v150;
      *(_BYTE *)(v11 + 80) = v152;
      sub_3D624(v153, v151);
      goto LABEL_77;
    }
    sub_3E470(v11 + 72);
  }
  *(_QWORD *)(v11 + 72) = *v150;
  *(_BYTE *)(v11 + 80) = *(_BYTE *)(v12 + 80);
LABEL_77:
  v158 = (_QWORD *)(v12 + 88);
  v159 = *(unsigned __int8 *)(v11 + 96);
  if (v159 != 255)
  {
    v160 = *(unsigned __int8 *)(v12 + 96);
    if (v160 != 255)
    {
      v161 = *(void **)(v11 + 88);
      *(_QWORD *)(v11 + 88) = *v158;
      *(_BYTE *)(v11 + 96) = v160;
      sub_3D624(v161, v159);
      goto LABEL_87;
    }
    sub_3E470(v11 + 88);
  }
  *(_QWORD *)(v11 + 88) = *v158;
  *(_BYTE *)(v11 + 96) = *(_BYTE *)(v12 + 96);
LABEL_87:
  v166 = (_QWORD *)(v12 + 104);
  v167 = *(unsigned __int8 *)(v11 + 112);
  if (v167 != 255)
  {
    v168 = *(unsigned __int8 *)(v12 + 112);
    if (v168 != 255)
    {
      v169 = *(void **)(v11 + 104);
      *(_QWORD *)(v11 + 104) = *v166;
      *(_BYTE *)(v11 + 112) = v168;
      sub_3D624(v169, v167);
      goto LABEL_97;
    }
    sub_3E470(v11 + 104);
  }
  *(_QWORD *)(v11 + 104) = *v166;
  *(_BYTE *)(v11 + 112) = *(_BYTE *)(v12 + 112);
LABEL_97:
  v174 = (_QWORD *)(v12 + 120);
  v175 = *(unsigned __int8 *)(v11 + 128);
  if (v175 == 255)
  {
LABEL_106:
    *(_QWORD *)(v11 + 120) = *v174;
    *(_BYTE *)(v11 + 128) = *(_BYTE *)(v12 + 128);
    goto LABEL_107;
  }
  v176 = *(unsigned __int8 *)(v12 + 128);
  if (v176 == 255)
  {
    sub_3E470(v11 + 120);
    goto LABEL_106;
  }
  v177 = *(void **)(v11 + 120);
  *(_QWORD *)(v11 + 120) = *v174;
  *(_BYTE *)(v11 + 128) = v176;
  sub_3D624(v177, v175);
LABEL_107:
  *(_BYTE *)(v11 + 129) = *(_BYTE *)(v12 + 129);
  v182 = v214[11];
  v183 = v11 + v182;
  v184 = v12 + v182;
  v185 = type metadata accessor for ArtworkCrop(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v185 - 8) + 40))(v183, v184, v185);
  v186 = v214[12];
  v187 = (_QWORD *)(v11 + v186);
  v188 = (uint64_t *)(v12 + v186);
  v190 = *v188;
  v189 = v188[1];
  *v187 = v190;
  v187[1] = v189;
  swift_bridgeObjectRelease();
  *(_BYTE *)(v11 + v214[13]) = *(_BYTE *)(v12 + v214[13]);
  *(_BYTE *)(v11 + v214[14]) = *(_BYTE *)(v12 + v214[14]);
  *(_BYTE *)(v11 + v214[15]) = *(_BYTE *)(v12 + v214[15]);
  v191 = v214[16];
  v192 = (_QWORD *)(v11 + v191);
  v193 = (uint64_t *)(v12 + v191);
  v195 = *v193;
  v194 = v193[1];
  *v192 = v195;
  v192[1] = v194;
  swift_bridgeObjectRelease();
LABEL_7:
  v23 = v9[8];
  v24 = (_QWORD *)(v7 + v23);
  v25 = (uint64_t *)(v8 + v23);
  v27 = *v25;
  v26 = v25[1];
  *v24 = v27;
  v24[1] = v26;
  swift_bridgeObjectRelease();
  v28 = v9[9];
  v29 = (_QWORD *)(v7 + v28);
  v30 = (uint64_t *)(v8 + v28);
  v32 = *v30;
  v31 = v30[1];
  *v29 = v32;
  v29[1] = v31;
  swift_bridgeObjectRelease();
  *(_BYTE *)(v7 + v9[10]) = *(_BYTE *)(v8 + v9[10]);
  v33 = v9[11];
  v34 = (_QWORD *)(v7 + v33);
  v35 = (uint64_t *)(v8 + v33);
  v37 = *v35;
  v36 = v35[1];
  *v34 = v37;
  v34[1] = v36;
  swift_bridgeObjectRelease();
  v38 = v9[12];
  v39 = (_QWORD *)(v7 + v38);
  v40 = (uint64_t *)(v8 + v38);
  v42 = *v40;
  v41 = v40[1];
  *v39 = v42;
  v39[1] = v41;
  swift_bridgeObjectRelease();
  v43 = v9[13];
  v44 = (void *)(v7 + v43);
  v45 = (void *)(v8 + v43);
  v46 = type metadata accessor for URL(0);
  v47 = *(_QWORD *)(v46 - 8);
  v48 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v47 + 48);
  v49 = v48(v44, 1, v46);
  v50 = v48(v45, 1, v46);
  if (v49)
  {
    if (!v50)
    {
      (*(void (**)(void *, void *, uint64_t))(v47 + 32))(v44, v45, v46);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v50)
  {
    (*(void (**)(void *, uint64_t))(v47 + 8))(v44, v46);
LABEL_12:
    v51 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v47 + 40))(v44, v45, v46);
LABEL_13:
  v52 = v9[14];
  v53 = (_QWORD *)(v7 + v52);
  v54 = (uint64_t *)(v8 + v52);
  v56 = *v54;
  v55 = v54[1];
  *v53 = v56;
  v53[1] = v55;
  swift_bridgeObjectRelease();
  v57 = v9[15];
  v58 = (_QWORD *)(v7 + v57);
  v59 = (uint64_t *)(v8 + v57);
  v61 = *v59;
  v60 = v59[1];
  *v58 = v61;
  v58[1] = v60;
  swift_bridgeObjectRelease();
  v62 = v9[16];
  v63 = (void *)(v7 + v62);
  v64 = (void *)(v8 + v62);
  v65 = v48((void *)(v7 + v62), 1, v46);
  v66 = v48(v64, 1, v46);
  if (v65)
  {
    if (!v66)
    {
      (*(void (**)(void *, void *, uint64_t))(v47 + 32))(v63, v64, v46);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v63, 0, 1, v46);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v66)
  {
    (*(void (**)(void *, uint64_t))(v47 + 8))(v63, v46);
LABEL_18:
    v67 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
    memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v67 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(void *, void *, uint64_t))(v47 + 40))(v63, v64, v46);
LABEL_19:
  v68 = v9[17];
  v69 = (void *)(v7 + v68);
  v70 = (void *)(v8 + v68);
  v71 = v48((void *)(v7 + v68), 1, v46);
  v72 = v48(v70, 1, v46);
  if (v71)
  {
    if (!v72)
    {
      (*(void (**)(void *, void *, uint64_t))(v47 + 32))(v69, v70, v46);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v69, 0, 1, v46);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v72)
  {
    (*(void (**)(void *, uint64_t))(v47 + 8))(v69, v46);
LABEL_24:
    v73 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
    memcpy(v69, v70, *(_QWORD *)(*(_QWORD *)(v73 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(void *, void *, uint64_t))(v47 + 40))(v69, v70, v46);
LABEL_25:
  *(_BYTE *)(v7 + v9[18]) = *(_BYTE *)(v8 + v9[18]);
  v74 = v213[7];
  v75 = (void *)(a1 + v74);
  v76 = (void *)(v211 + v74);
  v77 = v48((void *)(a1 + v74), 1, v46);
  v78 = v48(v76, 1, v46);
  if (v77)
  {
    v79 = v214;
    if (!v78)
    {
      (*(void (**)(void *, void *, uint64_t))(v47 + 32))(v75, v76, v46);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v75, 0, 1, v46);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  v79 = v214;
  if (v78)
  {
    (*(void (**)(void *, uint64_t))(v47 + 8))(v75, v46);
LABEL_30:
    v80 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
    memcpy(v75, v76, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(void *, void *, uint64_t))(v47 + 40))(v75, v76, v46);
LABEL_31:
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v47 + 40))(a1 + v213[8], v211 + v213[8], v46);
  v81 = v213[10];
  *(_QWORD *)(a1 + v213[9]) = *(_QWORD *)(v211 + v213[9]);
  v82 = (_QWORD *)(a1 + v81);
  v83 = (uint64_t *)(v211 + v81);
  v85 = *v83;
  v84 = v83[1];
  *v82 = v85;
  v82[1] = v84;
  swift_bridgeObjectRelease();
  v86 = v213[11];
  v87 = (_QWORD *)(a1 + v86);
  v88 = (uint64_t *)(v211 + v86);
  v90 = *v88;
  v89 = v88[1];
  *v87 = v90;
  v87[1] = v89;
  swift_bridgeObjectRelease();
  v91 = v213[12];
  v92 = *(_QWORD *)(a1 + v91);
  *(_QWORD *)(a1 + v91) = *(_QWORD *)(v211 + v91);
  swift_release(v92);
  v93 = v213[14];
  *(_BYTE *)(a1 + v213[13]) = *(_BYTE *)(v211 + v213[13]);
  *(_BYTE *)(a1 + v93) = *(_BYTE *)(v211 + v93);
  v94 = v213[15];
  v95 = v213[16];
  v96 = a1 + v94;
  v97 = v211 + v94;
  *(_QWORD *)v96 = *(_QWORD *)v97;
  *(_BYTE *)(v96 + 8) = *(_BYTE *)(v97 + 8);
  v98 = a1 + v95;
  v99 = v211 + v95;
  v100 = v212(a1 + v95, 1, v79);
  v101 = v212(v99, 1, v79);
  if (v100)
  {
    if (!v101)
    {
      v102 = *(_OWORD *)(v99 + 16);
      *(_OWORD *)v98 = *(_OWORD *)v99;
      *(_OWORD *)(v98 + 16) = v102;
      *(_BYTE *)(v98 + 32) = *(_BYTE *)(v99 + 32);
      *(_OWORD *)(v98 + 40) = *(_OWORD *)(v99 + 40);
      *(_QWORD *)(v98 + 56) = *(_QWORD *)(v99 + 56);
      *(_BYTE *)(v98 + 64) = *(_BYTE *)(v99 + 64);
      *(_OWORD *)(v98 + 113) = *(_OWORD *)(v99 + 113);
      *(_OWORD *)(v98 + 104) = *(_OWORD *)(v99 + 104);
      *(_OWORD *)(v98 + 88) = *(_OWORD *)(v99 + 88);
      *(_OWORD *)(v98 + 72) = *(_OWORD *)(v99 + 72);
      *(_BYTE *)(v98 + 129) = *(_BYTE *)(v99 + 129);
      v103 = v79[11];
      v104 = v98 + v103;
      v105 = v99 + v103;
      v106 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v106 - 8) + 32))(v104, v105, v106);
      *(_OWORD *)(v98 + v79[12]) = *(_OWORD *)(v99 + v79[12]);
      *(_BYTE *)(v98 + v79[13]) = *(_BYTE *)(v99 + v79[13]);
      *(_BYTE *)(v98 + v79[14]) = *(_BYTE *)(v99 + v79[14]);
      *(_BYTE *)(v98 + v79[15]) = *(_BYTE *)(v99 + v79[15]);
      *(_OWORD *)(v98 + v79[16]) = *(_OWORD *)(v99 + v79[16]);
      (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v210 + 56))(v98, 0, 1, v79);
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  if (v101)
  {
    sub_145D8(v98, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
LABEL_36:
    v107 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
    memcpy((void *)v98, (const void *)v99, *(_QWORD *)(*(_QWORD *)(v107 - 8) + 64));
    goto LABEL_37;
  }
  v136 = *(_QWORD *)(v99 + 8);
  *(_QWORD *)v98 = *(_QWORD *)v99;
  *(_QWORD *)(v98 + 8) = v136;
  swift_bridgeObjectRelease();
  v137 = (_OWORD *)(v99 + 16);
  v138 = *(unsigned __int8 *)(v98 + 32);
  if (v138 != 255)
  {
    v139 = *(unsigned __int8 *)(v99 + 32);
    if (v139 != 255)
    {
      v140 = *(_QWORD *)(v98 + 16);
      v141 = *(_QWORD *)(v98 + 24);
      *(_OWORD *)(v98 + 16) = *v137;
      *(_BYTE *)(v98 + 32) = v139;
      sub_3B5BC(v140, v141, v138);
      goto LABEL_62;
    }
    sub_3E43C(v98 + 16);
  }
  *(_OWORD *)(v98 + 16) = *v137;
  *(_BYTE *)(v98 + 32) = *(_BYTE *)(v99 + 32);
LABEL_62:
  *(_OWORD *)(v98 + 40) = *(_OWORD *)(v99 + 40);
  v146 = (_QWORD *)(v99 + 56);
  v147 = *(unsigned __int8 *)(v98 + 64);
  if (v147 != 255)
  {
    v148 = *(unsigned __int8 *)(v99 + 64);
    if (v148 != 255)
    {
      v149 = *(void **)(v98 + 56);
      *(_QWORD *)(v98 + 56) = *v146;
      *(_BYTE *)(v98 + 64) = v148;
      sub_3D624(v149, v147);
      goto LABEL_72;
    }
    sub_3E470(v98 + 56);
  }
  *(_QWORD *)(v98 + 56) = *v146;
  *(_BYTE *)(v98 + 64) = *(_BYTE *)(v99 + 64);
LABEL_72:
  v154 = (_QWORD *)(v99 + 72);
  v155 = *(unsigned __int8 *)(v98 + 80);
  if (v155 != 255)
  {
    v156 = *(unsigned __int8 *)(v99 + 80);
    if (v156 != 255)
    {
      v157 = *(void **)(v98 + 72);
      *(_QWORD *)(v98 + 72) = *v154;
      *(_BYTE *)(v98 + 80) = v156;
      sub_3D624(v157, v155);
      goto LABEL_82;
    }
    sub_3E470(v98 + 72);
  }
  *(_QWORD *)(v98 + 72) = *v154;
  *(_BYTE *)(v98 + 80) = *(_BYTE *)(v99 + 80);
LABEL_82:
  v162 = (_QWORD *)(v99 + 88);
  v163 = *(unsigned __int8 *)(v98 + 96);
  if (v163 != 255)
  {
    v164 = *(unsigned __int8 *)(v99 + 96);
    if (v164 != 255)
    {
      v165 = *(void **)(v98 + 88);
      *(_QWORD *)(v98 + 88) = *v162;
      *(_BYTE *)(v98 + 96) = v164;
      sub_3D624(v165, v163);
      goto LABEL_92;
    }
    sub_3E470(v98 + 88);
  }
  *(_QWORD *)(v98 + 88) = *v162;
  *(_BYTE *)(v98 + 96) = *(_BYTE *)(v99 + 96);
LABEL_92:
  v170 = (_QWORD *)(v99 + 104);
  v171 = *(unsigned __int8 *)(v98 + 112);
  if (v171 != 255)
  {
    v172 = *(unsigned __int8 *)(v99 + 112);
    if (v172 != 255)
    {
      v173 = *(void **)(v98 + 104);
      *(_QWORD *)(v98 + 104) = *v170;
      *(_BYTE *)(v98 + 112) = v172;
      sub_3D624(v173, v171);
      goto LABEL_102;
    }
    sub_3E470(v98 + 104);
  }
  *(_QWORD *)(v98 + 104) = *v170;
  *(_BYTE *)(v98 + 112) = *(_BYTE *)(v99 + 112);
LABEL_102:
  v178 = (_QWORD *)(v99 + 120);
  v179 = *(unsigned __int8 *)(v98 + 128);
  if (v179 == 255)
  {
LABEL_109:
    *(_QWORD *)(v98 + 120) = *v178;
    *(_BYTE *)(v98 + 128) = *(_BYTE *)(v99 + 128);
    goto LABEL_110;
  }
  v180 = *(unsigned __int8 *)(v99 + 128);
  if (v180 == 255)
  {
    sub_3E470(v98 + 120);
    goto LABEL_109;
  }
  v181 = *(void **)(v98 + 120);
  *(_QWORD *)(v98 + 120) = *v178;
  *(_BYTE *)(v98 + 128) = v180;
  sub_3D624(v181, v179);
LABEL_110:
  *(_BYTE *)(v98 + 129) = *(_BYTE *)(v99 + 129);
  v196 = v214[11];
  v197 = v98 + v196;
  v198 = v99 + v196;
  v199 = type metadata accessor for ArtworkCrop(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v199 - 8) + 40))(v197, v198, v199);
  v200 = v214[12];
  v201 = (_QWORD *)(v98 + v200);
  v202 = (uint64_t *)(v99 + v200);
  v204 = *v202;
  v203 = v202[1];
  *v201 = v204;
  v201[1] = v203;
  swift_bridgeObjectRelease();
  *(_BYTE *)(v98 + v214[13]) = *(_BYTE *)(v99 + v214[13]);
  *(_BYTE *)(v98 + v214[14]) = *(_BYTE *)(v99 + v214[14]);
  *(_BYTE *)(v98 + v214[15]) = *(_BYTE *)(v99 + v214[15]);
  v205 = v214[16];
  v206 = (_QWORD *)(v98 + v205);
  v207 = (uint64_t *)(v99 + v205);
  v209 = *v207;
  v208 = v207[1];
  *v206 = v209;
  v206[1] = v208;
  swift_bridgeObjectRelease();
LABEL_37:
  v108 = v213[17];
  v109 = (_QWORD *)(a1 + v108);
  v110 = (uint64_t *)(v211 + v108);
  v112 = *v110;
  v111 = v110[1];
  *v109 = v112;
  v109[1] = v111;
  swift_bridgeObjectRelease();
  v113 = v213[18];
  v114 = v213[19];
  v115 = a1 + v113;
  v116 = v211 + v113;
  *(_BYTE *)(v115 + 8) = *(_BYTE *)(v116 + 8);
  *(_QWORD *)v115 = *(_QWORD *)v116;
  v117 = a1 + v114;
  v118 = v211 + v114;
  *(_BYTE *)(v117 + 8) = *(_BYTE *)(v118 + 8);
  *(_QWORD *)v117 = *(_QWORD *)v118;
  v119 = v213[21];
  *(_BYTE *)(a1 + v213[20]) = *(_BYTE *)(v211 + v213[20]);
  *(_BYTE *)(a1 + v119) = *(_BYTE *)(v211 + v119);
  v120 = v213[22];
  v121 = (void *)(a1 + v120);
  v122 = (void *)(v211 + v120);
  v123 = type metadata accessor for TranscriptRequestInformation(0);
  v124 = *(_QWORD *)(v123 - 8);
  v125 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v124 + 48);
  v126 = v125(v121, 1, v123);
  v127 = v125(v122, 1, v123);
  if (!v126)
  {
    if (!v127)
    {
      (*(void (**)(void *, void *, uint64_t))(v124 + 40))(v121, v122, v123);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v124 + 8))(v121, v123);
    goto LABEL_42;
  }
  if (v127)
  {
LABEL_42:
    v128 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2C40);
    memcpy(v121, v122, *(_QWORD *)(*(_QWORD *)(v128 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v124 + 32))(v121, v122, v123);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v124 + 56))(v121, 0, 1, v123);
  return a1;
}

uint64_t getEnumTagSinglePayload for EpisodeOffer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_EE57C);
}

uint64_t sub_EE57C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;

  v6 = type metadata accessor for ShowOffer(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[6];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
  v7 = *(_QWORD *)(v10 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v10;
    v9 = a3[7];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v11 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v9 = a3[8];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
    v7 = *(_QWORD *)(v14 - 8);
    if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    {
      v8 = v14;
      v9 = a3[16];
    }
    else
    {
      v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2C40);
      v7 = *(_QWORD *)(v8 - 8);
      v9 = a3[22];
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v12 = *(_QWORD *)(a1 + a3[10] + 8);
  if (v12 >= 0xFFFFFFFF)
    LODWORD(v12) = -1;
  return (v12 + 1);
}

uint64_t storeEnumTagSinglePayload for EpisodeOffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_EE6A8);
}

uint64_t sub_EE6A8(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = type metadata accessor for ShowOffer(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = a4[6];
  }
  else
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
    v9 = *(_QWORD *)(v12 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v12;
      v11 = a4[7];
    }
    else
    {
      result = type metadata accessor for URL(0);
      v9 = *(_QWORD *)(result - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = result;
        v11 = a4[8];
      }
      else
      {
        if (a3 == 0x7FFFFFFF)
        {
          *(_QWORD *)(a1 + a4[10] + 8) = (a2 - 1);
          return result;
        }
        v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
        v9 = *(_QWORD *)(v14 - 8);
        if (*(_DWORD *)(v9 + 84) == a3)
        {
          v10 = v14;
          v11 = a4[16];
        }
        else
        {
          v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2C40);
          v9 = *(_QWORD *)(v10 - 8);
          v11 = a4[22];
        }
      }
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
}

void sub_EE7C4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD v12[19];

  v12[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v12[1] = &unk_2F46B8;
  v2 = type metadata accessor for ShowOffer(319);
  if (v3 <= 0x3F)
  {
    v12[2] = *(_QWORD *)(v2 - 8) + 64;
    sub_3EE70(319, (unint64_t *)&qword_3B1C30, (uint64_t (*)(uint64_t))&type metadata accessor for URL);
    if (v5 <= 0x3F)
    {
      v12[3] = *(_QWORD *)(v4 - 8) + 64;
      v6 = type metadata accessor for URL(319);
      if (v7 <= 0x3F)
      {
        v12[4] = *(_QWORD *)(v6 - 8) + 64;
        v12[5] = (char *)&value witness table for Builtin.Int64 + 64;
        v12[6] = &unk_2F46D0;
        v12[7] = &unk_2F46B8;
        v12[8] = &unk_2F46E8;
        v12[9] = &unk_2F4700;
        v12[10] = &unk_2F4718;
        v12[11] = &unk_2F4730;
        sub_3EE70(319, (unint64_t *)&qword_3B28A0, (uint64_t (*)(uint64_t))&type metadata accessor for ArtworkModel);
        if (v9 <= 0x3F)
        {
          v12[12] = *(_QWORD *)(v8 - 8) + 64;
          v12[13] = &unk_2F46B8;
          v12[14] = &unk_2F4730;
          v12[15] = &unk_2F4730;
          v12[16] = &unk_2F4700;
          v12[17] = &unk_2F4748;
          sub_3EE70(319, (unint64_t *)&unk_3B8A98, (uint64_t (*)(uint64_t))&type metadata accessor for TranscriptRequestInformation);
          if (v11 <= 0x3F)
          {
            v12[18] = *(_QWORD *)(v10 - 8) + 64;
            swift_initStructMetadata(a1, 256, 19, v12, a1 + 16);
          }
        }
      }
    }
  }
}

ShelfKit::AlertActionStyle_optional __swiftcall AlertActionStyle.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  ShelfKit::AlertActionStyle_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_373B20, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 4;
  if (v5 < 4)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t AlertActionStyle.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_EE9BC + 4 * byte_2F4760[*v0]))(0x746C7561666564, 0xE700000000000000);
}

uint64_t sub_EE9BC()
{
  return 0x7473616F74;
}

uint64_t sub_EE9D0()
{
  return 0x69746E6568747561;
}

unint64_t sub_EE9F0()
{
  return 0xD000000000000021;
}

void sub_EEA0C(char *a1)
{
  sub_1E2074(*a1);
}

void sub_EEA18()
{
  char *v0;

  sub_2D8368(*v0);
}

void sub_EEA20()
{
  __asm { BR              X10 }
}

uint64_t sub_EEA5C(uint64_t a1)
{
  String.hash(into:)(a1, 0x7473616F74, 0xE500000000000000);
  return swift_bridgeObjectRelease(0xE500000000000000);
}

void sub_EEAC0(uint64_t a1)
{
  char *v1;

  sub_2D93A4(a1, *v1);
}

ShelfKit::AlertActionStyle_optional sub_EEAC8(Swift::String *a1)
{
  return AlertActionStyle.init(rawValue:)(*a1);
}

uint64_t sub_EEAD4()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_EEB04 + 4 * byte_2F4768[*v0]))();
}

void sub_EEB04(_QWORD *a1@<X8>)
{
  *a1 = 0x7473616F74;
  a1[1] = 0xE500000000000000;
}

void sub_EEB1C(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "authenticate");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

void sub_EEB40(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000021;
  a1[1] = 0x8000000000309270;
}

uint64_t AlertAction.__allocating_init(title:message:isCancelable:buttonActions:style:artwork:presentationStyle:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, _BYTE *a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t v9;
  uint64_t v18;

  v18 = swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  AlertAction.init(title:message:isCancelable:buttonActions:style:artwork:presentationStyle:)(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  return v18;
}

uint64_t AlertAction.init(title:message:isCancelable:buttonActions:style:artwork:presentationStyle:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, _BYTE *a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE v34[12];
  int v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;

  v10 = v9;
  v36 = a7;
  v37 = a6;
  v35 = a5;
  v41 = a2;
  v39 = a1;
  v40 = a9;
  v38 = type metadata accessor for UUID(0);
  v14 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38);
  v16 = &v34[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = type metadata accessor for ActionMetrics(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = &v34[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v21);
  v23 = &v34[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v24 = (_QWORD *)(v10 + OBJC_IVAR____TtC8ShelfKit11AlertAction_message);
  *v24 = a3;
  v24[1] = a4;
  *(_BYTE *)(v10 + OBJC_IVAR____TtC8ShelfKit11AlertAction_isCancelable) = v35;
  LOBYTE(v24) = *v36;
  *(_QWORD *)(v10 + OBJC_IVAR____TtC8ShelfKit11AlertAction_buttonActions) = v37;
  *(_BYTE *)(v10 + OBJC_IVAR____TtC8ShelfKit11AlertAction_style) = (_BYTE)v24;
  v25 = a8;
  sub_14554(a8, v10 + OBJC_IVAR____TtC8ShelfKit11AlertAction_artwork);
  v26 = type metadata accessor for ImpressionMetrics(0);
  v27 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v23, 1, 1, v26);
  v28 = static ActionMetrics.notInstrumented.getter(v27);
  UUID.init()(v28);
  v29 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
  v31 = v30;
  (*(void (**)(_BYTE *, uint64_t))(v14 + 8))(v16, v38);
  *(_QWORD *)(v10 + 16) = v29;
  *(_QWORD *)(v10 + 24) = v31;
  v32 = v41;
  *(_QWORD *)(v10 + 32) = v39;
  *(_QWORD *)(v10 + 40) = v32;
  *(_BYTE *)(v10 + 48) = v40;
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v18 + 32))(v10 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v20, v17);
  sub_15BD4((uint64_t)v23, v10 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics, (uint64_t *)&unk_3B8790);
  sub_1459C(v25, &qword_3BEB70);
  return v10;
}

uint64_t AlertAction.__allocating_init(deserializing:using:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  return AlertAction.init(deserializing:using:)(a1, a2);
}

uint64_t AlertAction.init(deserializing:using:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char v32;
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t);
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(char *, uint64_t, uint64_t);
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v86;
  uint64_t v87;
  void (*v88)(uint64_t, uint64_t);
  char *v89;
  _QWORD *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;

  v3 = v2;
  v103 = a2;
  v100 = *v2;
  v5 = type metadata accessor for JSONContext(0);
  v6 = *(_QWORD *)(v5 - 8);
  v101 = v5;
  v102 = v6;
  __chkstk_darwin(v5);
  v98 = (char *)&v86 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v97 = (char *)&v86 - v9;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
  __chkstk_darwin(v10);
  v96 = (char *)&v86 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4F30);
  __chkstk_darwin(v12);
  v91 = (char *)&v86 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for JSONArray(0);
  v92 = *(_QWORD *)(v14 - 8);
  v93 = v14;
  __chkstk_darwin(v14);
  v89 = (char *)&v86 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for JSONObject(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v95 = (char *)&v86 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v21 = (char *)&v86 - v20;
  __chkstk_darwin(v22);
  v24 = (char *)&v86 - v23;
  __chkstk_darwin(v25);
  v27 = (char *)&v86 - v26;
  __chkstk_darwin(v28);
  v30 = (char *)&v86 - v29;
  swift_retain();
  v31 = JSONObject.subscript.getter(0x656C746974, 0xE500000000000000);
  v32 = JSONObject.isNull.getter(v31);
  v94 = v17;
  v33 = *(void (**)(char *, uint64_t))(v17 + 8);
  v33(v30, v16);
  if ((v32 & 1) != 0)
  {
    v34 = a1;
    v35 = type metadata accessor for JSONError(0);
    v36 = sub_F1C0((unint64_t *)&qword_3B0CB0, (void (*)(uint64_t))&type metadata accessor for JSONError, (uint64_t)&protocol conformance descriptor for JSONError);
    swift_allocError(v35, v36, 0, 0);
    v38 = v37;
    v39 = *v3;
    swift_release(v3);
    *v38 = 0x656C746974;
    v38[1] = 0xE500000000000000;
    v38[2] = v39;
    v40 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v35 - 8) + 104))(v38, enum case for JSONError.missingProperty(_:), v35);
    v41 = (void (*)(uint64_t, uint64_t))v33;
    v42 = v3;
LABEL_7:
    swift_willThrow(v40);
    (*(void (**)(uint64_t, uint64_t))(v102 + 8))(v103, v101);
    v41(v34, v16);
    swift_deallocPartialClassInstance(v42, v100, *(unsigned int *)(*v42 + 48), *(unsigned __int16 *)(*v42 + 52));
    return v35;
  }
  v90 = v3;
  v43 = JSONObject.subscript.getter(0x6567617373656DLL, 0xE700000000000000);
  v44 = JSONObject.string.getter(v43);
  v46 = v45;
  v33(v27, v16);
  v41 = (void (*)(uint64_t, uint64_t))v33;
  if (!v46)
  {
    v34 = a1;
    v35 = type metadata accessor for JSONError(0);
    v58 = sub_F1C0((unint64_t *)&qword_3B0CB0, (void (*)(uint64_t))&type metadata accessor for JSONError, (uint64_t)&protocol conformance descriptor for JSONError);
    swift_allocError(v35, v58, 0, 0);
    v60 = v59;
    v42 = v90;
    v61 = *v90;
    swift_release(v90);
    *v60 = 0x6567617373656DLL;
    v60[1] = 0xE700000000000000;
    v60[2] = v61;
    v40 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v35 - 8) + 104))(v60, enum case for JSONError.missingProperty(_:), v35);
    goto LABEL_7;
  }
  v47 = v90;
  v48 = (_QWORD *)((char *)v90 + OBJC_IVAR____TtC8ShelfKit11AlertAction_message);
  *v48 = v44;
  v48[1] = v46;
  JSONObject.subscript.getter(0x656C797473, 0xE500000000000000);
  v49 = sub_EF5C4();
  JSONObject.stringEnum<A>(or:)(&v104, sub_BE128, 0, &type metadata for AlertActionStyle, v49);
  v41((uint64_t)v30, v16);
  *((_BYTE *)v47 + OBJC_IVAR____TtC8ShelfKit11AlertAction_style) = v104;
  v50 = JSONObject.subscript.getter(0x6C65636E61437369, 0xEC000000656C6261);
  v51 = JSONObject.BOOL.getter(v50);
  v41((uint64_t)v24, v16);
  *((_BYTE *)v47 + OBJC_IVAR____TtC8ShelfKit11AlertAction_isCancelable) = (v51 == 2) | v51 & 1;
  v52 = JSONObject.subscript.getter(0x63416E6F74747562, 0xED0000736E6F6974);
  v53 = (uint64_t)v91;
  JSONObject.array.getter(v52);
  v41((uint64_t)v21, v16);
  v55 = v92;
  v54 = v93;
  v56 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v92 + 48))(v53, 1, v93);
  v100 = a1;
  v87 = v16;
  v88 = v41;
  if (v56 == 1)
  {
    sub_1459C(v53, &qword_3B4F30);
    v57 = 0;
  }
  else
  {
    v62 = v89;
    (*(void (**)(char *, uint64_t, uint64_t))(v55 + 32))(v89, v53, v54);
    v63 = type metadata accessor for Action(0);
    __chkstk_darwin(v63);
    v64 = v103;
    *(&v86 - 2) = v65;
    *(&v86 - 1) = v64;
    v66 = v99;
    v57 = JSONArray.compactMap<A>(_:)(sub_9105C);
    v99 = v66;
    (*(void (**)(char *, uint64_t))(v55 + 8))(v62, v54);
  }
  v67 = v102;
  v68 = v90;
  *(_QWORD *)((char *)v90 + OBJC_IVAR____TtC8ShelfKit11AlertAction_buttonActions) = v57;
  v69 = type metadata accessor for ArtworkModel(0);
  v70 = v100;
  JSONObject.subscript.getter(0x6B726F77747261, 0xE700000000000000);
  v71 = *(void (**)(char *, uint64_t, uint64_t))(v67 + 16);
  v72 = v97;
  v73 = v103;
  v74 = v101;
  v71(v97, v103, v101);
  sub_F1C0((unint64_t *)&qword_3B2828, (void (*)(uint64_t))&type metadata accessor for ArtworkModel, (uint64_t)&protocol conformance descriptor for ArtworkModel);
  v75 = (uint64_t)v96;
  v76 = v30;
  v77 = v70;
  v78 = v74;
  ExpressibleByJSON.init(tryDeserializing:using:)(v76, v72, v69);
  sub_15BD4(v75, (uint64_t)v68 + OBJC_IVAR____TtC8ShelfKit11AlertAction_artwork, &qword_3BEB70);
  swift_release(v68);
  v79 = v95;
  v80 = v87;
  (*(void (**)(char *, uint64_t, uint64_t))(v94 + 16))(v95, v77, v87);
  v81 = (uint64_t)v98;
  v71(v98, v73, v78);
  v82 = v79;
  v35 = (uint64_t)v68;
  v83 = v99;
  v84 = Action.init(deserializing:using:)(v82, v81);
  if (!v83)
    v35 = v84;
  (*(void (**)(uint64_t, uint64_t))(v102 + 8))(v103, v78);
  v88(v77, v80);
  return v35;
}

unint64_t sub_EF5C4()
{
  unint64_t result;

  result = qword_3B8B10;
  if (!qword_3B8B10)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AlertActionStyle);
    atomic_store(result, (unint64_t *)&qword_3B8B10);
  }
  return result;
}

void AlertAction.style.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + OBJC_IVAR____TtC8ShelfKit11AlertAction_style);
}

uint64_t AlertAction.message.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit11AlertAction_message);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit11AlertAction_message + 8));
  return v1;
}

uint64_t AlertAction.isCancelable.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8ShelfKit11AlertAction_isCancelable);
}

uint64_t AlertAction.buttonActions.getter()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit11AlertAction_buttonActions));
}

uint64_t AlertAction.artwork.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_14554(v1 + OBJC_IVAR____TtC8ShelfKit11AlertAction_artwork, a1);
}

void AlertAction.init(uniqueId:title:presentationStyle:actionMetrics:impressionMetrics:)()
{
  _swift_stdlib_reportUnimplementedInitializer("ShelfKit.AlertAction", 20, "init(uniqueId:title:presentationStyle:actionMetrics:impressionMetrics:)", 71, 0);
  __break(1u);
}

uint64_t sub_EF6B4()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return sub_1459C(v0 + OBJC_IVAR____TtC8ShelfKit11AlertAction_artwork, &qword_3BEB70);
}

uint64_t AlertAction.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics;
  v2 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_1459C(v0 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics, (uint64_t *)&unk_3B8790);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1459C(v0 + OBJC_IVAR____TtC8ShelfKit11AlertAction_artwork, &qword_3BEB70);
  return v0;
}

uint64_t AlertAction.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics;
  v2 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_1459C(v0 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics, (uint64_t *)&unk_3B8790);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1459C(v0 + OBJC_IVAR____TtC8ShelfKit11AlertAction_artwork, &qword_3BEB70);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t static AlertAction.alertAuthenticationActionAccountCreationEnabled.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  char v8;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
  __chkstk_darwin(v1);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = 3;
  v4 = type metadata accessor for ArtworkModel(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  AlertAction.init(title:message:isCancelable:buttonActions:style:artwork:presentationStyle:)(0, 0xE000000000000000, 0, 0, 1, 0, &v8, (uint64_t)v3, 0x20u);
  return v5;
}

unint64_t sub_EF93C()
{
  unint64_t result;

  result = qword_3B8B18;
  if (!qword_3B8B18)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AlertActionStyle);
    atomic_store(result, (unint64_t *)&qword_3B8B18);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AlertActionStyle(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_EF9CC + 4 * byte_2F4771[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_EFA00 + 4 * byte_2F476C[v4]))();
}

uint64_t sub_EFA00(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_EFA08(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xEFA10);
  return result;
}

uint64_t sub_EFA1C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xEFA24);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_EFA28(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_EFA30(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AlertActionStyle()
{
  return &type metadata for AlertActionStyle;
}

uint64_t sub_EFA4C()
{
  return type metadata accessor for AlertAction(0);
}

uint64_t type metadata accessor for AlertAction(uint64_t a1)
{
  uint64_t result;

  result = qword_3B8B48;
  if (!qword_3B8B48)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AlertAction);
  return result;
}

void sub_EFA90(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = &unk_2F4870;
  v4[1] = &unk_2F4888;
  v4[2] = &unk_2F48A0;
  v4[3] = &unk_2F48B8;
  sub_5971C(319);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(v2 - 8) + 64;
    swift_updateClassMetadata2(a1, 256, 5, v4, a1 + 160);
  }
}

uint64_t method lookup function for AlertAction(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for AlertAction);
}

uint64_t dispatch thunk of AlertAction.__allocating_init(title:message:isCancelable:buttonActions:style:artwork:presentationStyle:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 200))();
}

_QWORD *sub_EFB40(uint64_t a1)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  id v5;
  id v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  if ((unint64_t)a1 >> 62)
    goto LABEL_15;
  v2 = *(_QWORD *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8));
  while (1)
  {
    if (!v2)
      return _swiftEmptyArrayStorage;
    result = (_QWORD *)sub_1808DC(0, v2 & ~(v2 >> 63), 0);
    if (v2 < 0)
      break;
    v4 = 0;
    while (v2 != v4)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4);
      else
        v5 = *(id *)(a1 + 8 * v4 + 32);
      v6 = v5;
      v8 = _swiftEmptyArrayStorage[2];
      v7 = _swiftEmptyArrayStorage[3];
      if (v8 >= v7 >> 1)
        sub_1808DC(v7 > 1, v8 + 1, 1);
      ++v4;
      _swiftEmptyArrayStorage[2] = v8 + 1;
      v9 = &_swiftEmptyArrayStorage[3 * v8];
      v9[4] = v6;
      v9[5] = 0;
      *((_BYTE *)v9 + 48) = 2;
      if (v2 == v4)
        return _swiftEmptyArrayStorage;
    }
    __break(1u);
LABEL_15:
    if (a1 < 0)
      v10 = a1;
    else
      v10 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v2 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

_QWORD *sub_EFC98(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  _QWORD *v15;

  v2 = type metadata accessor for URL(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = _swiftEmptyArrayStorage;
  if (v6)
  {
    v15 = _swiftEmptyArrayStorage;
    sub_1808F8(0, v6, 0);
    v7 = v15;
    v8 = (uint64_t *)(a1 + 40);
    do
    {
      v9 = *(v8 - 1);
      v10 = *v8;
      swift_bridgeObjectRetain();
      URL.init(fileURLWithPath:)(v9, v10);
      swift_bridgeObjectRelease();
      v15 = v7;
      v12 = v7[2];
      v11 = v7[3];
      if (v12 >= v11 >> 1)
      {
        sub_1808F8(v11 > 1, v12 + 1, 1);
        v7 = v15;
      }
      v8 += 2;
      v7[2] = v12 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))((unint64_t)v7+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(_QWORD *)(v3 + 72) * v12, v5, v2);
      --v6;
    }
    while (v6);
  }
  return v7;
}

_QWORD *sub_EFDE0(uint64_t a1)
{
  int64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_1807B0(0, v1, 0);
    v3 = *(_QWORD *)(type metadata accessor for URL(0) - 8);
    v4 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v5 = *(_QWORD *)(v3 + 72);
    do
    {
      v6 = URL.lastPathComponent.getter();
      v8 = v7;
      v10 = _swiftEmptyArrayStorage[2];
      v9 = _swiftEmptyArrayStorage[3];
      if (v10 >= v9 >> 1)
        sub_1807B0(v9 > 1, v10 + 1, 1);
      _swiftEmptyArrayStorage[2] = v10 + 1;
      v11 = &_swiftEmptyArrayStorage[2 * v10];
      v11[4] = v6;
      v11[5] = v8;
      v4 += v5;
      --v1;
    }
    while (v1);
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_EFEDC()
{
  void *v0;
  uint64_t v1;

  sub_327F8(0, (unint64_t *)&qword_3B8710, OS_dispatch_queue_ptr);
  v0 = (void *)static OS_dispatch_queue.automaticAssetManagement.getter();
  v1 = OS_dispatch_queue.asUnownedSerialExecutor()();

  return v1;
}

id CacheDeleteObserver.userDefaults.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 16);
}

id CacheDeleteObserver.managedObjectContext.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 24);
}

uint64_t SubscriptionConfirmationSheetHandler.channelLockupGenerator.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_150C8(v1 + 32, a1);
}

uint64_t CacheDeleteObserver.analyticsChannel.getter()
{
  uint64_t v0;

  return swift_unknownObjectRetain(*(_QWORD *)(v0 + 80));
}

uint64_t CacheDeleteObserver.__allocating_init(asPartOf:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = swift_allocObject(v1, 104, 7);
  CacheDeleteObserver.init(asPartOf:)(a1);
  return v3;
}

_QWORD *CacheDeleteObserver.init(asPartOf:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  __int128 v18[2];

  v2 = v1;
  v4 = type metadata accessor for NSUserDefaults.Name(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2[11] = 0;
  v2[12] = _swiftEmptyArrayStorage;
  v8 = sub_327F8(0, &qword_3B20B0, NSUserDefaults_ptr);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for NSUserDefaults.Name.shared(_:), v4);
  v9 = sub_F010C();
  BaseObjectGraph.inject<A>(_:named:)(v18, v8, v7, v8, v9);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v2[2] = *(_QWORD *)&v18[0];
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B68D0);
  BaseObjectGraph.inject<A>(_:)(v18, v10, v10);
  v11 = *(_QWORD *)&v18[0];
  v12 = objc_msgSend(*(id *)&v18[0], "privateQueueContext");
  swift_unknownObjectRelease(v11);
  v2[3] = v12;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8C50);
  BaseObjectGraph.inject<A>(_:)(v18, v13, v13);
  sub_F4D8(v18, (uint64_t)(v2 + 4));
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8C58);
  BaseObjectGraph.inject<A>(_:)(v18, v14, v14);
  v15 = *(_QWORD *)&v18[0];
  v2[9] = a1;
  v2[10] = v15;
  return v2;
}

unint64_t sub_F010C()
{
  unint64_t result;

  result = qword_3B8C40;
  if (!qword_3B8C40)
  {
    sub_327F8(255, &qword_3B20B0, NSUserDefaults_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSUserDefaults);
    atomic_store(result, (unint64_t *)&qword_3B8C40);
  }
  return result;
}

_QWORD *CacheDeleteObserver.__allocating_init(userDefaults:managedObjectContext:intentDispatcher:analyticsChannel:objectGraph:)(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v11;

  v11 = (_QWORD *)swift_allocObject(v5, 104, 7);
  v11[11] = 0;
  v11[12] = _swiftEmptyArrayStorage;
  v11[2] = a1;
  v11[3] = a2;
  sub_F4D8(a3, (uint64_t)(v11 + 4));
  v11[9] = a5;
  v11[10] = a4;
  return v11;
}

_QWORD *CacheDeleteObserver.init(userDefaults:managedObjectContext:intentDispatcher:analyticsChannel:objectGraph:)(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[11] = 0;
  v5[12] = _swiftEmptyArrayStorage;
  v5[2] = a1;
  v5[3] = a2;
  sub_F4D8(a3, (uint64_t)(v5 + 4));
  v5[9] = a5;
  v5[10] = a4;
  return v5;
}

uint64_t sub_F0224()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v1 + 16) = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B5978);
  *(_QWORD *)(v1 + 24) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for CacheDeleteObserver();
  v5 = sub_726D8(&qword_3B8C70, v4, (void (*)(uint64_t))type metadata accessor for CacheDeleteObserver, (uint64_t)&protocol conformance descriptor for CacheDeleteObserver);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v3, v5);
  return swift_task_switch(sub_F02B8, v6, v7);
}

uint64_t sub_F02B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  static TaskPriority.utility.getter();
  v3 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 0, 1, v3);
  v4 = swift_allocObject(&unk_380210, 24, 7);
  swift_weakInit(v4 + 16);
  v5 = (_QWORD *)swift_allocObject(&unk_380238, 40, 7);
  v5[2] = 0;
  v5[3] = 0;
  v5[4] = v4;
  v6 = sub_F0778(v2, (uint64_t)&unk_3B8C80, (uint64_t)v5);
  v7 = *(_QWORD *)(v1 + 88);
  *(_QWORD *)(v1 + 88) = v6;
  swift_release(v7);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t type metadata accessor for CacheDeleteObserver()
{
  return objc_opt_self(_TtC8ShelfKit19CacheDeleteObserver);
}

uint64_t sub_F03A4()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_F03C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[6] = a4;
  v5 = type metadata accessor for Logger(0);
  v4[7] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[8] = v6;
  v4[9] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_F0428, 0, 0);
}

uint64_t sub_F0428()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  _QWORD *v3;

  v1 = *(_QWORD *)(v0 + 48) + 16;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  *(_QWORD *)(v0 + 80) = Strong;
  if (Strong)
  {
    v3 = (_QWORD *)swift_task_alloc(dword_3B8CBC);
    *(_QWORD *)(v0 + 88) = v3;
    *v3 = v0;
    v3[1] = sub_F04B8;
    return sub_F08BC();
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v0 + 72));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_F04B8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 88);
  v3 = *v1;
  *(_QWORD *)(v3 + 96) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_F0534, 0, 0);
  swift_release(*(_QWORD *)(v3 + 80));
  swift_task_dealloc(*(_QWORD *)(v3 + 72));
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_F0534()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = swift_release(*(_QWORD *)(v0 + 80));
  static Logger.downloads.getter(v2);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(_QWORD *)(v0 + 96);
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v7 = 138412290;
    swift_errorRetain(v6);
    v9 = _swift_stdlib_bridgeErrorToNSError(v6);
    *(_QWORD *)(v0 + 40) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48);
    *v8 = v9;
    swift_errorRelease(v6);
    swift_errorRelease(v6);
    _os_log_impl(&dword_0, v4, v5, "Encountered a critical error observing central cache delete: %@", v7, 0xCu);
    v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8E70);
    swift_arrayDestroy(v8, 1, v10);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

    swift_errorRelease(v6);
  }
  else
  {
    v11 = *(_QWORD *)(v0 + 96);
    swift_errorRelease(v11);
    swift_errorRelease(v11);
    swift_errorRelease(v11);

  }
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 64) + 8))(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 56));
  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_F06E0()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_F070C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_3B8C7C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_F2ED0;
  return sub_F03C8(a1, v4, v5, v6);
}

uint64_t sub_F0778(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD v19[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) == 1)
  {
    sub_95C7C(a1);
    v8 = 7168;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
    {
LABEL_3:
      v10 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType();
      swift_unknownObjectRetain(v9);
      v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
      v14 = v13;
      swift_unknownObjectRelease(v9);
      goto LABEL_6;
    }
  }
  else
  {
    v15 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v8 = v15 | 0x1C00;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
      goto LABEL_3;
  }
  v12 = 0;
  v14 = 0;
LABEL_6:
  v16 = swift_allocObject(&unk_3802B0, 32, 7);
  *(_QWORD *)(v16 + 16) = a2;
  *(_QWORD *)(v16 + 24) = a3;
  if (v14 | v12)
  {
    v19[0] = 0;
    v19[1] = 0;
    v17 = v19;
    v19[2] = v12;
    v19[3] = v14;
  }
  else
  {
    v17 = 0;
  }
  return swift_task_create(v8, v17, (char *)&type metadata for () + 8, &unk_3B8E68, v16);
}

uint64_t sub_F08BC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1[5] = v0;
  v2 = type metadata accessor for Logger(0);
  v1[6] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[7] = v3;
  v1[8] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Date(0);
  v1[9] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v1[10] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[11] = swift_task_alloc(v6);
  v1[12] = swift_task_alloc(v6);
  v7 = type metadata accessor for OSSignpostError(0);
  v1[13] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v1[14] = v8;
  v1[15] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for OSSignpostID(0);
  v1[16] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v1[17] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[18] = swift_task_alloc(v11);
  v1[19] = swift_task_alloc(v11);
  v1[20] = swift_task_alloc(v11);
  v12 = type metadata accessor for OSSignposter(0);
  v1[21] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v1[22] = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[23] = swift_task_alloc(v14);
  v1[24] = swift_task_alloc(v14);
  v15 = type metadata accessor for CacheDeleteNotifications.CacheDeleteEvent(0);
  v1[25] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v1[26] = v16;
  v1[27] = swift_task_alloc((*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8E40);
  v1[28] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v17 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8E48);
  v1[29] = v18;
  v19 = *(_QWORD *)(v18 - 8);
  v1[30] = v19;
  v1[31] = swift_task_alloc((*(_QWORD *)(v19 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for URL(0);
  v1[32] = v20;
  v21 = *(_QWORD *)(v20 - 8);
  v1[33] = v21;
  v1[34] = swift_task_alloc((*(_QWORD *)(v21 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for CacheDeleteObserver();
  v24 = sub_726D8(&qword_3B8C70, v23, (void (*)(uint64_t))type metadata accessor for CacheDeleteObserver, (uint64_t)&protocol conformance descriptor for CacheDeleteObserver);
  v1[35] = v24;
  v25 = dispatch thunk of Actor.unownedExecutor.getter(v22, v24);
  v1[36] = v25;
  v1[37] = v26;
  return swift_task_switch(sub_F0AD4, v25, v26);
}

uint64_t sub_F0AD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v2 = *(_QWORD *)(v0 + 264);
  v1 = *(_QWORD *)(v0 + 272);
  v3 = *(_QWORD *)(v0 + 256);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8E50);
  v5 = *(unsigned __int8 *)(v2 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v4, v6 + *(_QWORD *)(v2 + 72), v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_2EA0D0;
  v8 = objc_msgSend((id)objc_opt_self(MTConstants), "managedAssetsDirectoryURL");
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v8);

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v7 + v6, v1, v3);
  v9 = objc_allocWithZone((Class)type metadata accessor for CacheDeleteNotifications(0));
  *(_QWORD *)(v0 + 304) = CacheDeleteNotifications.init(paths:)(v7);
  dispatch thunk of CacheDeleteNotifications.makeAsyncIterator()();
  *(_DWORD *)(v0 + 360) = enum case for OSSignpostError.doubleEnd(_:);
  v10 = *(_QWORD *)(v0 + 280);
  v11 = *(_QWORD *)(v0 + 40);
  v12 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  *(_QWORD *)(v0 + 312) = v12;
  *v12 = v0;
  v12[1] = sub_F0C10;
  return AsyncStream.Iterator.next(isolation:)(*(_QWORD *)(v0 + 224), v11, v10, *(_QWORD *)(v0 + 232));
}

uint64_t sub_F0C10()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 312));
  return swift_task_switch(sub_F0C5C, *(_QWORD *)(v1 + 288), *(_QWORD *)(v1 + 296));
}

uint64_t sub_F0C5C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_signpost_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  uint8_t *v21;
  os_signpost_id_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  _BOOL4 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  void (*v44)(uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(uint64_t, uint64_t);
  void (*v56)(uint64_t, uint64_t);
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;

  v1 = *(_QWORD *)(v0 + 224);
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 208) + 48))(v1, 1, *(_QWORD *)(v0 + 200)) == 1)
  {
    v2 = *(void **)(v0 + 304);
    v3 = *(_QWORD *)(v0 + 272);
    v4 = *(_QWORD *)(v0 + 248);
    v5 = *(_QWORD *)(v0 + 216);
    v7 = *(_QWORD *)(v0 + 184);
    v6 = *(_QWORD *)(v0 + 192);
    v9 = *(_QWORD *)(v0 + 152);
    v8 = *(_QWORD *)(v0 + 160);
    v71 = *(_QWORD *)(v0 + 144);
    v73 = *(_QWORD *)(v0 + 120);
    v74 = *(_QWORD *)(v0 + 96);
    v76 = *(_QWORD *)(v0 + 88);
    v78 = *(_QWORD *)(v0 + 64);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 240) + 8))(v4, *(_QWORD *)(v0 + 232));

    swift_task_dealloc(v3);
    swift_task_dealloc(v4);
    swift_task_dealloc(v1);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v71);
    swift_task_dealloc(v73);
    swift_task_dealloc(v74);
    swift_task_dealloc(v76);
    swift_task_dealloc(v78);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v11 = *(_QWORD *)(v0 + 216);
    sub_F2DF8(v1, v11);
    v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8E58);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v11, 1, v12) == 1)
    {
      v13 = static OSSignposter.downloads.getter();
      v14 = static OSSignpostID.exclusive.getter(v13);
      v15 = OSSignposter.logHandle.getter(v14);
      v16 = static os_signpost_type_t.begin.getter(v15);
      if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
      {
        v17 = *(_QWORD *)(v0 + 152);
        v18 = *(_QWORD *)(v0 + 128);
        v19 = *(_QWORD *)(v0 + 136);
        v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16);
        v20(v17, *(_QWORD *)(v0 + 160), v18);
        v21 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v21 = 0;
        v22 = OSSignpostID.rawValue.getter(v21);
        _os_signpost_emit_with_name_impl(&dword_0, v15, v16, v22, "RespondToCacheDeleteNotification", "", v21, 2u);
        swift_slowDealloc(v21, -1, -1);

        (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v17, v18);
      }
      else
      {
        v46 = *(_QWORD *)(v0 + 136);

        v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 16);
      }
      *(_QWORD *)(v0 + 320) = v20;
      v47 = *(_QWORD *)(v0 + 192);
      v48 = *(_QWORD *)(v0 + 168);
      v49 = *(_QWORD *)(v0 + 176);
      v50 = *(_QWORD *)(v0 + 152);
      v51 = *(_QWORD *)(v0 + 160);
      v52 = *(_QWORD *)(v0 + 128);
      v53 = *(_QWORD *)(v0 + 136);
      v20(v50, v51, v52);
      v54 = type metadata accessor for OSSignpostIntervalState(0);
      swift_allocObject(v54, *(unsigned int *)(v54 + 48), *(unsigned __int16 *)(v54 + 52));
      *(_QWORD *)(v0 + 328) = OSSignpostIntervalState.init(id:isOpen:)(v50, 1);
      v55 = *(void (**)(uint64_t, uint64_t))(v53 + 8);
      *(_QWORD *)(v0 + 336) = v55;
      v55(v51, v52);
      v56 = *(void (**)(uint64_t, uint64_t))(v49 + 8);
      *(_QWORD *)(v0 + 344) = v56;
      v56(v47, v48);
      v57 = (_QWORD *)swift_task_alloc(dword_3B8CC4);
      *(_QWORD *)(v0 + 352) = v57;
      *v57 = v0;
      v57[1] = sub_F1250;
      return sub_F14B8();
    }
    else
    {
      v23 = v0 + 16;
      v24 = *(uint64_t **)(v0 + 216);
      v26 = *(_QWORD *)(v0 + 88);
      v25 = *(_QWORD *)(v0 + 96);
      v27 = *(_QWORD *)(v0 + 72);
      v28 = *(_QWORD *)(v0 + 80);
      v29 = v24[1];
      v79 = *v24;
      v30 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v28 + 32))(v25, (char *)v24 + *(int *)(v12 + 48), v27);
      static Logger.downloads.getter(v30);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 16))(v26, v25, v27);
      v31 = swift_bridgeObjectRetain_n(v29, 2);
      v32 = Logger.logObject.getter(v31);
      v33 = static os_log_type_t.default.getter();
      v34 = os_log_type_enabled(v32, v33);
      v36 = *(_QWORD *)(v0 + 80);
      v35 = *(_QWORD *)(v0 + 88);
      v38 = *(_QWORD *)(v0 + 64);
      v37 = *(_QWORD *)(v0 + 72);
      v75 = *(_QWORD *)(v0 + 56);
      v77 = *(_QWORD *)(v0 + 48);
      if (v34)
      {
        v39 = swift_slowAlloc(22, -1);
        v72 = v38;
        v40 = swift_slowAlloc(64, -1);
        v80 = v40;
        *(_DWORD *)v39 = 136315394;
        v41 = sub_726D8(&qword_3B8E60, 255, (void (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
        v42 = dispatch thunk of CustomStringConvertible.description.getter(v37, v41);
        *(_QWORD *)(v39 + 4) = sub_69298(v42, v43, &v80);
        swift_bridgeObjectRelease();
        v44 = *(void (**)(uint64_t, uint64_t))(v36 + 8);
        v44(v35, v37);
        *(_WORD *)(v39 + 12) = 2080;
        swift_bridgeObjectRetain();
        *(_QWORD *)(v39 + 14) = sub_69298(v79, v29, &v80);
        swift_bridgeObjectRelease_n(v29, 3);
        _os_log_impl(&dword_0, v32, v33, "Discovered cache deleted file (deleted at %s): %s", (uint8_t *)v39, 0x16u);
        swift_arrayDestroy(v40, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v40, -1, -1);
        v45 = v39;
        v23 = v0 + 16;
        swift_slowDealloc(v45, -1, -1);

        (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v72, v77);
      }
      else
      {
        v44 = *(void (**)(uint64_t, uint64_t))(v36 + 8);
        v44(v35, v37);

        swift_bridgeObjectRelease_n(v29, 2);
        (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v38, v77);
      }
      v58 = *(_QWORD *)(v0 + 40);
      swift_beginAccess(v58 + 96, v23, 33, 0);
      v59 = *(_QWORD **)(v58 + 96);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v59);
      *(_QWORD *)(v58 + 96) = v59;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v69 = *(_QWORD *)(v0 + 40);
        v59 = sub_10644(0, v59[2] + 1, 1, v59);
        *(_QWORD *)(v69 + 96) = v59;
      }
      v62 = v59[2];
      v61 = v59[3];
      if (v62 >= v61 >> 1)
      {
        v70 = *(_QWORD *)(v0 + 40);
        v59 = sub_10644((_QWORD *)(v61 > 1), v62 + 1, 1, v59);
        *(_QWORD *)(v70 + 96) = v59;
      }
      v63 = *(_QWORD *)(v0 + 96);
      v64 = *(_QWORD *)(v0 + 72);
      v59[2] = v62 + 1;
      v65 = &v59[2 * v62];
      v65[4] = v79;
      v65[5] = v29;
      swift_endAccess(v23);
      v44(v63, v64);
      v66 = *(_QWORD *)(v0 + 280);
      v67 = *(_QWORD *)(v0 + 40);
      v68 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
      *(_QWORD *)(v0 + 312) = v68;
      *v68 = v0;
      v68[1] = sub_F0C10;
      return AsyncStream.Iterator.next(isolation:)(*(_QWORD *)(v0 + 224), v67, v66, *(_QWORD *)(v0 + 232));
    }
  }
}

uint64_t sub_F1250()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 352));
  return swift_task_switch(sub_F129C, *(_QWORD *)(v1 + 288), *(_QWORD *)(v1 + 296));
}

uint64_t sub_F129C()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  os_signpost_type_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  void (*v12)(uint64_t, uint64_t);
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint8_t *v24;
  os_signpost_id_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t);
  uint64_t v32;

  v1 = static OSSignposter.downloads.getter();
  v2 = OSSignposter.logHandle.getter(v1);
  v3 = OSSignpostIntervalState.signpostID.getter();
  v4 = static os_signpost_type_t.end.getter(v3);
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v5 = *(_QWORD *)(v0 + 328);
    v6 = *(_DWORD *)(v0 + 360);
    v8 = *(_QWORD *)(v0 + 112);
    v7 = *(_QWORD *)(v0 + 120);
    v9 = *(_QWORD *)(v0 + 104);
    v10 = swift_retain();
    checkForErrorAndConsumeState(state:)(v10);
    swift_release(v5);
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v8 + 88))(v7, v9) == v6)
    {
      v11 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 112) + 8))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 104));
      v11 = "";
    }
    v19 = *(void (**)(uint64_t, uint64_t))(v0 + 336);
    v31 = *(void (**)(uint64_t, uint64_t))(v0 + 344);
    v32 = *(_QWORD *)(v0 + 328);
    v30 = *(_QWORD *)(v0 + 184);
    v20 = *(_QWORD *)(v0 + 168);
    v22 = *(_QWORD *)(v0 + 144);
    v21 = *(_QWORD *)(v0 + 152);
    v23 = *(_QWORD *)(v0 + 128);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 320))(v21, v22, v23);
    v24 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v24 = 0;
    v25 = OSSignpostID.rawValue.getter(v24);
    _os_signpost_emit_with_name_impl(&dword_0, v2, v4, v25, "RespondToCacheDeleteNotification", v11, v24, 2u);
    swift_slowDealloc(v24, -1, -1);

    v19(v22, v23);
    v31(v30, v20);
    swift_release(v32);
    v19(v21, v23);
  }
  else
  {
    v13 = *(void (**)(uint64_t, uint64_t))(v0 + 336);
    v12 = *(void (**)(uint64_t, uint64_t))(v0 + 344);
    v14 = *(_QWORD *)(v0 + 328);
    v15 = *(_QWORD *)(v0 + 184);
    v16 = *(_QWORD *)(v0 + 168);
    v17 = *(_QWORD *)(v0 + 144);
    v18 = *(_QWORD *)(v0 + 128);

    v13(v17, v18);
    v12(v15, v16);
    swift_release(v14);
  }
  v26 = *(_QWORD *)(v0 + 280);
  v27 = *(_QWORD *)(v0 + 40);
  v28 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  *(_QWORD *)(v0 + 312) = v28;
  *v28 = v0;
  v28[1] = sub_F0C10;
  return AsyncStream.Iterator.next(isolation:)(*(_QWORD *)(v0 + 224), v27, v26, *(_QWORD *)(v0 + 232));
}

uint64_t sub_F14B8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1[8] = v0;
  v2 = type metadata accessor for Logger(0);
  v1[9] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[10] = v3;
  v1[11] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for CacheDeleteObserver();
  v6 = sub_726D8(&qword_3B8C70, v5, (void (*)(uint64_t))type metadata accessor for CacheDeleteObserver, (uint64_t)&protocol conformance descriptor for CacheDeleteObserver);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v4, v6);
  v1[12] = v7;
  v1[13] = v8;
  return swift_task_switch(sub_F1550, v7, v8);
}

uint64_t sub_F1550()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  _QWORD *v8;

  v1 = (uint64_t *)(*(_QWORD *)(v0 + 64) + 96);
  swift_beginAccess(v1, v0 + 16, 1, 0);
  *(_QWORD *)(v0 + 40) = *v1;
  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3BC430);
  v3 = sub_F2DAC();
  if ((Collection.isNotEmpty.getter(v2, v3) & 1) != 0)
  {
    v4 = *(_QWORD *)(v0 + 64);
    v5 = *v1;
    *(_QWORD *)(v0 + 112) = *v1;
    *v1 = (uint64_t)_swiftEmptyArrayStorage;
    v6 = *(void **)(v4 + 80);
    type metadata accessor for AnalyticsEvent(0);
    v7 = (void *)AnalyticsEvent.__allocating_init(cacheDeletedMediaFiles:)(*(_QWORD *)(v5 + 16));
    objc_msgSend(v6, "sendEvent:", v7);

    v8 = (_QWORD *)swift_task_alloc(dword_3B8CCC);
    *(_QWORD *)(v0 + 120) = v8;
    *v8 = v0;
    v8[1] = sub_F165C;
    return sub_F18DC(v5);
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v0 + 88));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_F165C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 120);
  v3 = *v1;
  *(_QWORD *)(v3 + 128) = v0;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease();
  if (v0)
    return swift_task_switch(sub_F16E0, *(_QWORD *)(v3 + 96), *(_QWORD *)(v3 + 104));
  swift_task_dealloc(*(_QWORD *)(v3 + 88));
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_F16E0(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v2 = v1;
  v3 = v1[16];
  static Logger.downloads.getter(a1);
  swift_errorRetain(v3);
  v4 = swift_errorRetain(v3);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = v1[16];
    v8 = v1[10];
    v19 = v1[9];
    v20 = v1[11];
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = swift_slowAlloc(32, -1);
    *(_DWORD *)v9 = 136315138;
    v21 = v10;
    v1[6] = v7;
    swift_errorRetain(v7);
    v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2B08);
    v12 = String.init<A>(describing:)(v1 + 6, v11);
    v1[7] = sub_69298(v12, v13, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 7, v1 + 8);
    swift_bridgeObjectRelease();
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl(&dword_0, v5, v6, "Failed to respond to cache delete notifications: %s", v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);

    swift_errorRelease(v7);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v20, v19);
  }
  else
  {
    v14 = v1[16];
    v16 = v2[10];
    v15 = v2[11];
    v17 = v2[9];
    swift_errorRelease(v2[16]);
    swift_errorRelease(v14);
    swift_errorRelease(v14);

    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
  }
  swift_task_dealloc(v2[11]);
  return ((uint64_t (*)(void))v2[1])();
}

uint64_t sub_F18DC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2[5] = a1;
  v2[6] = v1;
  v3 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType(0);
  v2[7] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[8] = v4;
  v2[9] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for RemoveEpisodesDownloadIntent(0);
  v2[10] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[11] = v6;
  v2[12] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Logger(0);
  v2[13] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v2[14] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[15] = swift_task_alloc(v9);
  v2[16] = swift_task_alloc(v9);
  v10 = type metadata accessor for UUID(0);
  v2[17] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v2[18] = v11;
  v2[19] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CacheDeleteObserver();
  v14 = sub_726D8(&qword_3B8C70, v13, (void (*)(uint64_t))type metadata accessor for CacheDeleteObserver, (uint64_t)&protocol conformance descriptor for CacheDeleteObserver);
  v15 = dispatch thunk of Actor.unownedExecutor.getter(v12, v14);
  v2[20] = v15;
  v2[21] = v16;
  return swift_task_switch(sub_F19FC, v15, v16);
}

uint64_t sub_F19FC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v3 = v1[18];
  v2 = v1[19];
  v4 = v1[17];
  UUID.init()(a1);
  v5 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
  v7 = v6;
  v1[22] = v5;
  v1[23] = v6;
  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  static Logger.downloads.getter(v8);
  v9 = swift_bridgeObjectRetain_n(v7, 2);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = v1[14];
    v21 = v1[13];
    v22 = v1[16];
    v13 = (uint8_t *)swift_slowAlloc(12, -1);
    v14 = swift_slowAlloc(32, -1);
    v23 = v14;
    *(_DWORD *)v13 = 136446210;
    swift_bridgeObjectRetain();
    v1[4] = sub_69298(v5, v7, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 4, v1 + 5);
    swift_bridgeObjectRelease_n(v7, 3);
    _os_log_impl(&dword_0, v10, v11, "[%{public}s] Beginning to updated database for deletions", v13, 0xCu);
    swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);

    v15 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v15(v22, v21);
  }
  else
  {
    v16 = v1[16];
    v17 = v1[13];
    v18 = v1[14];

    swift_bridgeObjectRelease_n(v7, 2);
    v15 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
    v15(v16, v17);
  }
  v1[24] = v15;
  v19 = (_QWORD *)swift_task_alloc(dword_3B8CD4);
  v1[25] = v19;
  *v19 = v1;
  v19[1] = sub_F1BF0;
  return sub_F2538(v1[5]);
}

uint64_t sub_F1BF0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 200);
  v3[26] = a1;
  v3[27] = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_F2290;
  else
    v5 = sub_F1C58;
  return swift_task_switch(v5, v3[20], v3[21]);
}

uint64_t sub_F1C58()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v1 = (_QWORD *)v0[6];
  v2 = swift_bridgeObjectRetain();
  RemoveEpisodesDownloadIntent.init(episodeIdentifiers:)(v2);
  v3 = v1[7];
  v4 = v1[8];
  __swift_project_boxed_opaque_existential_1(v1 + 4, v3);
  v5 = v1[9];
  v6 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of IntentDispatcher.dispatch<A>(_:objectGraph:)[1]);
  v0[28] = v6;
  v7 = sub_726D8((unint64_t *)&unk_3B8E20, 255, (void (*)(uint64_t))&type metadata accessor for RemoveEpisodesDownloadIntent, (uint64_t)&protocol conformance descriptor for RemoveEpisodesDownloadIntent);
  *v6 = v0;
  v6[1] = sub_F1D1C;
  return dispatch thunk of IntentDispatcher.dispatch<A>(_:objectGraph:)(v7, v0[12], v5, v0[10], v7, v3, v4);
}

uint64_t sub_F1D1C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 224);
  *(_QWORD *)(*v1 + 232) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_F1D7C;
  else
    v4 = sub_F1E14;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 160), *(_QWORD *)(v2 + 168));
}

uint64_t sub_F1D7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 208);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 8))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 80));
  swift_bridgeObjectRelease(v1);
  v2 = *(_QWORD *)(v0 + 152);
  v4 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 128);
  v5 = *(_QWORD *)(v0 + 96);
  v6 = *(_QWORD *)(v0 + 72);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 184));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_F1E14()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v1 = v0[26];
  v2 = v0[9];
  v3 = v0[7];
  v4 = v0[8];
  v5 = v0[6];
  (*(void (**)(_QWORD, _QWORD))(v0[11] + 8))(v0[12], v0[10]);
  v6 = *(void **)(v5 + 24);
  v7 = swift_allocObject(&unk_380288, 32, 7);
  v0[30] = v7;
  *(_QWORD *)(v7 + 16) = v6;
  *(_QWORD *)(v7 + 24) = v1;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 104))(v2, enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:), v3);
  v8 = async function pointer to NSManagedObjectContext.perform<A>(schedule:_:)[1];
  swift_bridgeObjectRetain();
  v6;
  v9 = (_QWORD *)swift_task_alloc(v8);
  v0[31] = v9;
  *v9 = v0;
  v9[1] = sub_F1EF8;
  return NSManagedObjectContext.perform<A>(schedule:_:)(v9, v0[9], sub_F2D94, v7, (char *)&type metadata for () + 8);
}

uint64_t sub_F1EF8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v2 = *v1;
  v4 = *(_QWORD *)(*v1 + 240);
  v3 = *(_QWORD *)(*v1 + 248);
  v6 = *(_QWORD *)(*v1 + 64);
  v5 = *(_QWORD *)(*v1 + 72);
  v7 = *(_QWORD *)(*v1 + 56);
  *(_QWORD *)(*v1 + 256) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  swift_release(v4);
  if (v0)
    v8 = sub_F1F88;
  else
    v8 = sub_F200C;
  return swift_task_switch(v8, *(_QWORD *)(v2 + 160), *(_QWORD *)(v2 + 168));
}

uint64_t sub_F1F88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 208));
  v1 = *(_QWORD *)(v0 + 152);
  v3 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 128);
  v4 = *(_QWORD *)(v0 + 96);
  v5 = *(_QWORD *)(v0 + 72);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 184));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_F200C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t);
  uint64_t v28;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = swift_bridgeObjectRelease();
  static Logger.downloads.getter(v2);
  swift_bridgeObjectRetain_n(v1, 2);
  v3 = swift_bridgeObjectRetain();
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(_QWORD *)(v0 + 184);
    v7 = *(_QWORD *)(v0 + 176);
    v26 = *(_QWORD *)(v0 + 120);
    v27 = *(void (**)(uint64_t, uint64_t))(v0 + 192);
    v25 = *(_QWORD *)(v0 + 104);
    v8 = *(_QWORD *)(v0 + 40);
    v9 = swift_slowAlloc(22, -1);
    v24 = swift_slowAlloc(64, -1);
    v28 = v24;
    *(_DWORD *)v9 = 136446466;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 16) = sub_69298(v7, v6, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24);
    swift_bridgeObjectRelease_n(v6, 3);
    *(_WORD *)(v9 + 12) = 2080;
    v10 = swift_bridgeObjectRetain();
    v11 = Array.description.getter(v10, &type metadata for String);
    v13 = v12;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 24) = sub_69298(v11, v13, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n(v8, 2);
    _os_log_impl(&dword_0, v4, v5, "[%{public}s] Successfully deleted episodes for batch: %s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy(v24, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v9, -1, -1);

    v27(v26, v25);
  }
  else
  {
    v14 = *(void (**)(uint64_t, uint64_t))(v0 + 192);
    v15 = *(_QWORD *)(v0 + 120);
    v16 = *(_QWORD *)(v0 + 104);
    v17 = *(_QWORD *)(v0 + 40);
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 184), 2);
    swift_bridgeObjectRelease_n(v17, 2);

    v14(v15, v16);
  }
  v18 = *(_QWORD *)(v0 + 152);
  v20 = *(_QWORD *)(v0 + 120);
  v19 = *(_QWORD *)(v0 + 128);
  v21 = *(_QWORD *)(v0 + 96);
  v22 = *(_QWORD *)(v0 + 72);
  sub_F2AD4();
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_F2290()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 152);
  v3 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 128);
  v4 = *(_QWORD *)(v0 + 96);
  v5 = *(_QWORD *)(v0 + 72);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 184));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_F230C(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  Class isa;
  uint64_t v16;
  unsigned __int8 v17;
  id v18;
  uint64_t (*v19)(char *, uint64_t);
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  id v27;

  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = NSManagedObjectContext.episodes(for:sortDescriptors:limit:)(a2, &_swiftEmptyArrayStorage, 0, 1);
  if (!v2)
  {
    v10 = result;
    v26 = a1;
    static Date.now.getter();
    v24 = v6;
    v25 = v5;
    v23 = 0;
    if ((unint64_t)v10 >> 62)
    {
      if (v10 < 0)
        v16 = v10;
      else
        v16 = v10 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v10);
      v11 = _CocoaArrayWrapper.endIndex.getter(v16);
      swift_bridgeObjectRelease(v10);
      if (v11)
        goto LABEL_4;
    }
    else
    {
      v11 = *(_QWORD *)((char *)&dword_10 + (v10 & 0xFFFFFFFFFFFFF8));
      if (v11)
      {
LABEL_4:
        if (v11 < 1)
          __break(1u);
        v12 = 0;
        do
        {
          if ((v10 & 0xC000000000000001) != 0)
            v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v12, v10);
          else
            v13 = *(id *)(v10 + 8 * v12 + 32);
          v14 = v13;
          ++v12;
          objc_msgSend(v13, "setDownloadBehavior:", 5, v23);
          isa = Date._bridgeToObjectiveC()().super.isa;
          objc_msgSend(v14, "setLastCacheDeletePurge:", isa);

        }
        while (v11 != v12);
      }
    }
    swift_bridgeObjectRelease(v10);
    v27 = 0;
    v17 = objc_msgSend(v26, "save:", &v27);
    v18 = v27;
    if ((v17 & 1) != 0)
    {
      v19 = *(uint64_t (**)(char *, uint64_t))(v24 + 8);
      v20 = v27;
      return v19(v8, v25);
    }
    else
    {
      v21 = v27;
      _convertNSErrorToError(_:)(v18);

      swift_willThrow(v22);
      return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v8, v25);
    }
  }
  return result;
}

uint64_t sub_F2538(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2[5] = a1;
  v2[6] = v1;
  v3 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType(0);
  v2[7] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[8] = v4;
  v2[9] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CacheDeleteObserver();
  v7 = sub_726D8(&qword_3B8C70, v6, (void (*)(uint64_t))type metadata accessor for CacheDeleteObserver, (uint64_t)&protocol conformance descriptor for CacheDeleteObserver);
  v8 = dispatch thunk of Actor.unownedExecutor.getter(v5, v7);
  v2[10] = v8;
  v2[11] = v9;
  return swift_task_switch(sub_F25D0, v8, v9);
}

uint64_t sub_F25D0()
{
  uint64_t *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t **v24;
  uint64_t v25;

  v1 = sub_EFC98(v0[5]);
  v2 = sub_EFDE0((uint64_t)v1);
  swift_bridgeObjectRelease();
  v3 = v2[2];
  if (v3)
  {
    specialized ContiguousArray.reserveCapacity(_:)(v3);
    sub_327F8(0, &qword_3B8E08, NSPredicate_ptr);
    v4 = kEpisodeAssetURL;
    v5 = v2 + 5;
    do
    {
      v6 = *(v5 - 1);
      v7 = *v5;
      v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8E10);
      v9 = swift_allocObject(v8, 112, 7);
      *(_OWORD *)(v9 + 16) = xmmword_2EA080;
      v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
      v12 = v11;
      *(_QWORD *)(v9 + 56) = &type metadata for String;
      v13 = sub_22F20();
      *(_QWORD *)(v9 + 32) = v10;
      *(_QWORD *)(v9 + 40) = v12;
      *(_QWORD *)(v9 + 96) = &type metadata for String;
      *(_QWORD *)(v9 + 104) = v13;
      *(_QWORD *)(v9 + 64) = v13;
      *(_QWORD *)(v9 + 72) = v6;
      *(_QWORD *)(v9 + 80) = v7;
      swift_bridgeObjectRetain_n(v7, 2);
      v14 = NSPredicate.init(format:_:)(0xD000000000000012, 0x800000000030EB70, v9);
      v15 = swift_bridgeObjectRelease();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v15);
      v16 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v16);
      v17 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v16, v14);
      specialized ContiguousArray._endMutation()(v17);
      v5 += 2;
      --v3;
    }
    while (v3);
  }
  swift_bridgeObjectRelease();
  v19 = v0[8];
  v18 = v0[9];
  v20 = v0[7];
  v21 = *(void **)(v0[6] + 24);
  v22 = swift_allocObject(&unk_380260, 32, 7);
  v0[12] = v22;
  *(_QWORD *)(v22 + 16) = _swiftEmptyArrayStorage;
  *(_QWORD *)(v22 + 24) = v21;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v19 + 104))(v18, enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:), v20);
  v23 = async function pointer to NSManagedObjectContext.perform<A>(schedule:_:)[1];
  v21;
  v24 = (uint64_t **)swift_task_alloc(v23);
  v0[13] = (uint64_t)v24;
  v25 = __swift_instantiateConcreteTypeFromMangledName(qword_3B7970);
  *v24 = v0;
  v24[1] = (uint64_t *)sub_F2844;
  return NSManagedObjectContext.perform<A>(schedule:_:)(v0 + 4, v0[9], sub_F2D50, v22, v25);
}

uint64_t sub_F2844()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 104);
  *(_QWORD *)(*(_QWORD *)v1 + 112) = v0;
  swift_task_dealloc(v3);
  v4 = v2[12];
  (*(void (**)(_QWORD, _QWORD))(v2[8] + 8))(v2[9], v2[7]);
  swift_release(v4);
  if (v0)
    v5 = sub_F2904;
  else
    v5 = sub_F28C8;
  return swift_task_switch(v5, v2[10], v2[11]);
}

uint64_t sub_F28C8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_F2904()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_F2938(_QWORD *a1@<X8>)
{
  uint64_t v1;
  id v3;
  NSString v4;
  id v5;
  Class isa;
  id v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  static String._unconditionallyBridgeFromObjectiveC(_:)(kMTEpisodeEntityName);
  v3 = objc_allocWithZone((Class)NSFetchRequest);
  v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v5 = objc_msgSend(v3, "initWithEntityName:", v4);

  objc_msgSend(v5, "setResultType:", 1);
  sub_327F8(0, &qword_3B8E08, NSPredicate_ptr);
  swift_bridgeObjectRetain();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v7 = objc_msgSend((id)objc_opt_self(NSCompoundPredicate), "orPredicateWithSubpredicates:", isa);

  objc_msgSend(v5, "setPredicate:", v7);
  v8 = sub_327F8(0, (unint64_t *)&unk_3C4440, NSManagedObjectID_ptr);
  v9 = NSManagedObjectContext.fetch<A>(_:)(v5, v8);
  if (v1)
  {

  }
  else
  {
    v10 = sub_EFB40(v9);
    swift_bridgeObjectRelease();

    *a1 = v10;
  }
}

uint64_t sub_F2AD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v14[3];
  uint64_t v15;
  uint64_t v16;

  v0 = type metadata accessor for Logger(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v14[-1] - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = static Logger.downloads.getter(v4);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl(&dword_0, v6, v7, "Finished processing new cache deleted items. Requesting tip providers update in response", v8, 2u);
    swift_slowDealloc(v8, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8E00);
  BaseObjectGraph.inject<A>(_:)(v14, v9, v9);
  v10 = v15;
  v11 = v16;
  __swift_project_boxed_opaque_existential_1(v14, v15);
  dispatch thunk of TipProvider.requestRefresh()(v10, v11);
  return __swift_destroy_boxed_opaque_existential_1(v14);
}

uint64_t CacheDeleteObserver.deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1((_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 72));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 80));
  swift_release(*(_QWORD *)(v0 + 88));
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t CacheDeleteObserver.__deallocating_deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1((_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 72));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 80));
  swift_release(*(_QWORD *)(v0 + 88));
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance(v0, 104, 7);
}

uint64_t method lookup function for CacheDeleteObserver(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for CacheDeleteObserver);
}

uint64_t dispatch thunk of CacheDeleteObserver.__allocating_init(asPartOf:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 192))();
}

uint64_t dispatch thunk of CacheDeleteObserver.__allocating_init(userDefaults:managedObjectContext:intentDispatcher:analyticsChannel:objectGraph:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 200))();
}

uint64_t dispatch thunk of CacheDeleteObserver.subscribeToObservation()()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  _QWORD *v3;
  uint64_t (*v5)(void);

  v2 = *(int **)(*(_QWORD *)v0 + 208);
  v5 = (uint64_t (*)(void))((char *)v2 + *v2);
  v3 = (_QWORD *)swift_task_alloc(v2[1]);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_43684;
  return v5();
}

uint64_t sub_F2D24()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

void sub_F2D50(_QWORD *a1@<X8>)
{
  sub_F2938(a1);
}

uint64_t sub_F2D68()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_F2D94()
{
  uint64_t v0;

  return sub_F230C(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

unint64_t sub_F2DAC()
{
  unint64_t result;

  result = qword_3B8E30;
  if (!qword_3B8E30)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_3BC430);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A]);
    atomic_store(result, (unint64_t *)&qword_3B8E30);
  }
  return result;
}

uint64_t sub_F2DF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CacheDeleteNotifications.CacheDeleteEvent(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_F2E3C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_F2E60(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_3C4404);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_43684;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_3C4400 + dword_3C4400))(a1, v4);
}

uint64_t LibraryPodcastContextAction.podcastUuid.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit27LibraryPodcastContextAction_podcastUuid);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit27LibraryPodcastContextAction_podcastUuid + 8));
  return v1;
}

uint64_t LibraryPodcastContextAction.groupedEpisodeListType.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_88BF4(v1 + OBJC_IVAR____TtC8ShelfKit27LibraryPodcastContextAction_groupedEpisodeListType, a1);
}

uint64_t LibraryPodcastContextAction.__allocating_init(podcastUuid:groupedEpisodeListType:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;

  v4 = v3;
  v28 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ActionMetrics(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v15);
  v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v19 = (_QWORD *)(v18 + OBJC_IVAR____TtC8ShelfKit27LibraryPodcastContextAction_podcastUuid);
  *v19 = a1;
  v19[1] = a2;
  sub_15BD4(a3, v18 + OBJC_IVAR____TtC8ShelfKit27LibraryPodcastContextAction_groupedEpisodeListType, &qword_3B5028);
  v20 = type metadata accessor for ImpressionMetrics(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v17, 1, 1, v20);
  v21 = sub_F3548(a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_89F58);
  v22 = static ActionMetrics.notInstrumented.getter(v21);
  UUID.init()(v22);
  v23 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
  v25 = v24;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v28);
  *(_QWORD *)(v18 + 16) = v23;
  *(_QWORD *)(v18 + 24) = v25;
  *(_QWORD *)(v18 + 32) = 0;
  *(_QWORD *)(v18 + 40) = 0;
  *(_BYTE *)(v18 + 48) = 32;
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v18 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v14, v11);
  sub_15BD4((uint64_t)v17, v18 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics, (uint64_t *)&unk_3B8790);
  sub_F3548(a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_87180);
  return v18;
}

uint64_t LibraryPodcastContextAction.init(podcastUuid:groupedEpisodeListType:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;

  v4 = v3;
  v27 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ActionMetrics(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v15);
  v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = (_QWORD *)(v4 + OBJC_IVAR____TtC8ShelfKit27LibraryPodcastContextAction_podcastUuid);
  *v18 = a1;
  v18[1] = a2;
  sub_15BD4(a3, v4 + OBJC_IVAR____TtC8ShelfKit27LibraryPodcastContextAction_groupedEpisodeListType, &qword_3B5028);
  v19 = type metadata accessor for ImpressionMetrics(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v17, 1, 1, v19);
  v20 = sub_F3548(a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_89F58);
  v21 = static ActionMetrics.notInstrumented.getter(v20);
  UUID.init()(v21);
  v22 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
  v24 = v23;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v27);
  *(_QWORD *)(v4 + 16) = v22;
  *(_QWORD *)(v4 + 24) = v24;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = 0;
  *(_BYTE *)(v4 + 48) = 32;
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v4 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v14, v11);
  sub_15BD4((uint64_t)v17, v4 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics, (uint64_t *)&unk_3B8790);
  sub_F3548(a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_87180);
  return v4;
}

void LibraryPodcastContextAction.init(deserializing:using:)()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000033, 0x800000000030A500, "ShelfKit/LibraryPodcastContextAction.swift", 42, 2, 30, 0);
  __break(1u);
}

void LibraryPodcastContextAction.init(uniqueId:title:presentationStyle:actionMetrics:impressionMetrics:)()
{
  _swift_stdlib_reportUnimplementedInitializer("ShelfKit.LibraryPodcastContextAction", 36, "init(uniqueId:title:presentationStyle:actionMetrics:impressionMetrics:)", 71, 0);
  __break(1u);
}

uint64_t sub_F3388()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return sub_87180(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit27LibraryPodcastContextAction_groupedEpisodeListType), *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit27LibraryPodcastContextAction_groupedEpisodeListType + 8), *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit27LibraryPodcastContextAction_groupedEpisodeListType + 16), *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit27LibraryPodcastContextAction_groupedEpisodeListType + 24), *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit27LibraryPodcastContextAction_groupedEpisodeListType + 32), *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit27LibraryPodcastContextAction_groupedEpisodeListType + 40), *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit27LibraryPodcastContextAction_groupedEpisodeListType + 48), *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit27LibraryPodcastContextAction_groupedEpisodeListType + 56), *(_BYTE *)(v0 + OBJC_IVAR____TtC8ShelfKit27LibraryPodcastContextAction_groupedEpisodeListType + 64));
}

uint64_t LibraryPodcastContextAction.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics;
  v2 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_23B00(v0 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics);
  swift_bridgeObjectRelease();
  sub_87180(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit27LibraryPodcastContextAction_groupedEpisodeListType), *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit27LibraryPodcastContextAction_groupedEpisodeListType + 8), *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit27LibraryPodcastContextAction_groupedEpisodeListType + 16), *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit27LibraryPodcastContextAction_groupedEpisodeListType + 24), *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit27LibraryPodcastContextAction_groupedEpisodeListType + 32), *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit27LibraryPodcastContextAction_groupedEpisodeListType + 40), *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit27LibraryPodcastContextAction_groupedEpisodeListType + 48), *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit27LibraryPodcastContextAction_groupedEpisodeListType + 56), *(_BYTE *)(v0 + OBJC_IVAR____TtC8ShelfKit27LibraryPodcastContextAction_groupedEpisodeListType + 64));
  return v0;
}

uint64_t LibraryPodcastContextAction.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics;
  v2 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_23B00(v0 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics);
  swift_bridgeObjectRelease();
  sub_87180(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit27LibraryPodcastContextAction_groupedEpisodeListType), *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit27LibraryPodcastContextAction_groupedEpisodeListType + 8), *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit27LibraryPodcastContextAction_groupedEpisodeListType + 16), *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit27LibraryPodcastContextAction_groupedEpisodeListType + 24), *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit27LibraryPodcastContextAction_groupedEpisodeListType + 32), *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit27LibraryPodcastContextAction_groupedEpisodeListType + 40), *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit27LibraryPodcastContextAction_groupedEpisodeListType + 48), *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit27LibraryPodcastContextAction_groupedEpisodeListType + 56), *(_BYTE *)(v0 + OBJC_IVAR____TtC8ShelfKit27LibraryPodcastContextAction_groupedEpisodeListType + 64));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_F3548(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))
{
  char v4;

  v4 = *(_BYTE *)(a1 + 64);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), v4);
  return a1;
}

uint64_t sub_F3594()
{
  return type metadata accessor for LibraryPodcastContextAction(0);
}

uint64_t type metadata accessor for LibraryPodcastContextAction(uint64_t a1)
{
  uint64_t result;

  result = qword_3B8EA8;
  if (!qword_3B8EA8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LibraryPodcastContextAction);
  return result;
}

uint64_t sub_F35D8(uint64_t a1)
{
  _QWORD v2[2];

  v2[0] = &unk_2F4A00;
  v2[1] = &unk_2F4A18;
  return swift_updateClassMetadata2(a1, 256, 2, v2, a1 + 160);
}

uint64_t method lookup function for LibraryPodcastContextAction(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for LibraryPodcastContextAction);
}

uint64_t dispatch thunk of LibraryPodcastContextAction.__allocating_init(podcastUuid:groupedEpisodeListType:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char v4;
  uint64_t (*v5)(uint64_t, uint64_t, _OWORD *);
  __int128 v6;
  __int128 v7;
  _OWORD v9[4];
  char v10;

  v4 = *(_BYTE *)(a3 + 64);
  v5 = *(uint64_t (**)(uint64_t, uint64_t, _OWORD *))(v3 + 176);
  v6 = *(_OWORD *)(a3 + 16);
  v9[0] = *(_OWORD *)a3;
  v9[1] = v6;
  v7 = *(_OWORD *)(a3 + 48);
  v9[2] = *(_OWORD *)(a3 + 32);
  v9[3] = v7;
  v10 = v4;
  return v5(a1, a2, v9);
}

uint64_t EpisodeLibraryStateView.init(episode:graph:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;

  v6 = __swift_instantiateConcreteTypeFromMangledName(qword_3B5BB0);
  BaseObjectGraph.inject<A>(_:)(&v20, v6, v6);
  v7 = v20;
  v8 = type metadata accessor for LibraryEpisodeLockup(0);
  v9 = swift_dynamicCastClass(a1, v8);
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + OBJC_IVAR____TtC8ShelfKit20LibraryEpisodeLockup_uuid);
    v11 = *(_QWORD *)(v9 + OBJC_IVAR____TtC8ShelfKit20LibraryEpisodeLockup_uuid + 8);
    swift_retain();
    swift_bridgeObjectRetain();
    v12 = dispatch thunk of EpisodeStateController.stateMachine(for:)(v10, v11, 1);
    swift_release(a1);
    swift_bridgeObjectRelease();
  }
  else
  {
    v12 = dispatch thunk of EpisodeStateController.stateMachine(for:)(*(_QWORD *)(a1 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup_adamId), 0, 0);
  }
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8F88);
  BaseObjectGraph.inject<A>(_:)(&v20, v13, v13);
  v14 = v20;
  v15 = swift_dynamicCastClass(a1, v8);
  if (v15)
  {
    v16 = *(_QWORD *)(v15 + OBJC_IVAR____TtC8ShelfKit20LibraryEpisodeLockup_uuid);
    v17 = *(_QWORD *)(v15 + OBJC_IVAR____TtC8ShelfKit20LibraryEpisodeLockup_uuid + 8);
    swift_retain();
    swift_bridgeObjectRetain();
    v18 = dispatch thunk of EpisodeStateController.stateMachine(for:)(v16, v17, 1);
    swift_release(a2);
    swift_release_n(a1, 2);
    swift_bridgeObjectRelease();
  }
  else
  {
    v18 = dispatch thunk of EpisodeStateController.stateMachine(for:)(*(_QWORD *)(a1 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup_adamId), 0, 0);
    swift_release(a1);
    swift_release(a2);
  }
  swift_release(v7);
  result = swift_release(v14);
  *a3 = v12;
  a3[1] = v18;
  return result;
}

uint64_t EpisodeLibraryStateView.body.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;

  v4 = *v1;
  v3 = v1[1];
  KeyPath = swift_getKeyPath(&unk_2F4A70);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8F98);
  swift_allocObject(v6, 48, 7);
  v7 = swift_retain_n(v4, 2);
  v8 = sub_F4AA0(v7, KeyPath);
  v9 = sub_32914(&qword_3B8FA0, &qword_3B8F98, (uint64_t)&protocol conformance descriptor for ObservableObjectAnimator<A>);
  v10 = ObservedObject.init(wrappedValue:)(v8, v6, v9);
  v12 = v11;
  swift_release(v4);
  v13 = swift_getKeyPath(&unk_2F4AA8);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8FB0);
  swift_allocObject(v14, 48, 7);
  v15 = swift_retain_n(v3, 2);
  v16 = sub_F4C40(v15, v13);
  v17 = sub_32914(&qword_3B8FB8, &qword_3B8FB0, (uint64_t)&protocol conformance descriptor for ObservableObjectAnimator<A>);
  v18 = ObservedObject.init(wrappedValue:)(v16, v14, v17);
  v20 = v19;
  result = swift_release(v3);
  *a1 = v10;
  a1[1] = v12;
  a1[2] = v18;
  a1[3] = v20;
  return result;
}

uint64_t EpisodeBookmarkStateView.init(stateMachine:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_F39F4(a1, (uint64_t)&unk_2F4A70, &qword_3B8F98, (uint64_t (*)(uint64_t, uint64_t))sub_F4AA0, &qword_3B8FA0, a2);
}

uint64_t sub_F39A4()
{
  return sub_F1C0(&qword_3B8F90, (void (*)(uint64_t))&type metadata accessor for AnyEpisodeBookmarkStateRule, (uint64_t)&protocol conformance descriptor for AnyEpisodeBookmarkStateRule);
}

uint64_t EpisodeDownloadStateView.init(stateMachine:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_F39F4(a1, (uint64_t)&unk_2F4AA8, &qword_3B8FB0, (uint64_t (*)(uint64_t, uint64_t))sub_F4C40, &qword_3B8FB8, a2);
}

uint64_t sub_F39F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t (*a4)(uint64_t, uint64_t)@<X3>, unint64_t *a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;

  KeyPath = swift_getKeyPath(a2);
  v12 = __swift_instantiateConcreteTypeFromMangledName(a3);
  swift_allocObject(v12, 48, 7);
  v13 = swift_retain();
  v14 = a4(v13, KeyPath);
  v15 = sub_32914(a5, a3, (uint64_t)&protocol conformance descriptor for ObservableObjectAnimator<A>);
  v16 = ObservedObject.init(wrappedValue:)(v14, v12, v15);
  v18 = v17;
  result = swift_release(a1);
  *a6 = v16;
  a6[1] = v18;
  return result;
}

uint64_t EpisodeBookmarkStateView.init(episode:graph:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t KeyPath;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;

  v6 = __swift_instantiateConcreteTypeFromMangledName(qword_3B5BB0);
  BaseObjectGraph.inject<A>(_:)(&v22, v6, v6);
  v7 = v22;
  v8 = type metadata accessor for LibraryEpisodeLockup(0);
  v9 = swift_dynamicCastClass(a1, v8);
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + OBJC_IVAR____TtC8ShelfKit20LibraryEpisodeLockup_uuid);
    v11 = *(_QWORD *)(v9 + OBJC_IVAR____TtC8ShelfKit20LibraryEpisodeLockup_uuid + 8);
    swift_retain();
    swift_bridgeObjectRetain();
    v12 = dispatch thunk of EpisodeStateController.stateMachine(for:)(v10, v11, 1);
    swift_release(a1);
    swift_bridgeObjectRelease();
  }
  else
  {
    v12 = dispatch thunk of EpisodeStateController.stateMachine(for:)(*(_QWORD *)(a1 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup_adamId), 0, 0);
  }
  KeyPath = swift_getKeyPath(&unk_2F4A70);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8F98);
  swift_allocObject(v14, 48, 7);
  v15 = swift_retain();
  v16 = sub_F4AA0(v15, KeyPath);
  v17 = sub_32914(&qword_3B8FA0, &qword_3B8F98, (uint64_t)&protocol conformance descriptor for ObservableObjectAnimator<A>);
  v18 = ObservedObject.init(wrappedValue:)(v16, v14, v17);
  v20 = v19;
  swift_release(v7);
  swift_release(a1);
  swift_release(a2);
  result = swift_release(v12);
  *a3 = v18;
  a3[1] = v20;
  return result;
}

_QWORD *sub_F3C4C@<X0>(_BYTE *a1@<X8>)
{
  _QWORD *result;
  uint64_t v3;

  result = dispatch thunk of EpisodeStateMachine.currentState.getter(&v3);
  *a1 = v3;
  return result;
}

uint64_t EpisodeBookmarkStateView.body.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void (*v16)(_QWORD *__return_ptr, uint64_t);
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t OpaqueTypeConformance2;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[4];

  v3 = type metadata accessor for ScaleTransition(0);
  v34 = *(_QWORD *)(v3 - 8);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for OpacityTransition(0, v4);
  v32 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8FC0);
  v35 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v33 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)&v30 - v13;
  v15 = *(_QWORD *)(v1 + 8);
  v16 = *(void (**)(_QWORD *__return_ptr, uint64_t))(v15 + 24);
  v17 = swift_retain();
  v16(v36, v17);
  swift_release(v15);
  result = static EpisodeBookmarkState.== infix(_:_:)(LOBYTE(v36[0]), 1);
  v19 = 0;
  v20 = 0;
  if ((result & 1) != 0)
  {
    v19 = Image.init(systemName:)(0x6B72616D6B6F6F62, 0xED00006C6C69662ELL);
    v21 = OpacityTransition.init()();
    v22 = static UnitPoint.center.getter(v21);
    ScaleTransition.init(_:anchor:)(0.00001, v22, v23);
    v24 = sub_F1C0(&qword_3B8FC8, (void (*)(uint64_t))&type metadata accessor for OpacityTransition, (uint64_t)&protocol conformance descriptor for OpacityTransition);
    v25 = sub_F1C0(&qword_3B8FD0, (void (*)(uint64_t))&type metadata accessor for ScaleTransition, (uint64_t)&protocol conformance descriptor for ScaleTransition);
    v31 = a1;
    v26 = v25;
    Transition.combined<A>(with:)(v6, v7, v3, v24, v25);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v6, v3);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v9, v7);
    v27 = v35;
    v28 = v33;
    (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v33, v14, v10);
    v36[0] = v7;
    v36[1] = v3;
    v36[2] = v24;
    v36[3] = v26;
    a1 = v31;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v36, &opaque type descriptor for <<opaque return type of Transition.combined<A>(with:)>>, 1);
    v20 = AnyTransition.init<A>(_:)(v28, v10, OpaqueTypeConformance2);
    result = (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v14, v10);
  }
  *a1 = v19;
  a1[1] = v20;
  return result;
}

uint64_t sub_F3F1C@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void (*v16)(_QWORD *__return_ptr, uint64_t);
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t OpaqueTypeConformance2;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[4];

  v4 = type metadata accessor for ScaleTransition(0);
  v34 = *(_QWORD *)(v4 - 8);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OpacityTransition(0, v5);
  v32 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8FC0);
  v35 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v33 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v15 = (char *)&v30 - v14;
  v16 = *(void (**)(_QWORD *__return_ptr, uint64_t))(a1 + 24);
  v17 = swift_retain();
  v16(v36, v17);
  swift_release(a1);
  result = static EpisodeBookmarkState.== infix(_:_:)(LOBYTE(v36[0]), 1);
  v19 = 0;
  v20 = 0;
  if ((result & 1) != 0)
  {
    v19 = Image.init(systemName:)(0x6B72616D6B6F6F62, 0xED00006C6C69662ELL);
    v21 = OpacityTransition.init()();
    v22 = static UnitPoint.center.getter(v21);
    ScaleTransition.init(_:anchor:)(0.00001, v22, v23);
    v24 = sub_F1C0(&qword_3B8FC8, (void (*)(uint64_t))&type metadata accessor for OpacityTransition, (uint64_t)&protocol conformance descriptor for OpacityTransition);
    v25 = sub_F1C0(&qword_3B8FD0, (void (*)(uint64_t))&type metadata accessor for ScaleTransition, (uint64_t)&protocol conformance descriptor for ScaleTransition);
    v31 = a2;
    v26 = v25;
    Transition.combined<A>(with:)(v7, v8, v4, v24, v25);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v7, v4);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v10, v8);
    v27 = v35;
    v28 = v33;
    (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v33, v15, v11);
    v36[0] = v8;
    v36[1] = v4;
    v36[2] = v24;
    v36[3] = v26;
    a2 = v31;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v36, &opaque type descriptor for <<opaque return type of Transition.combined<A>(with:)>>, 1);
    v20 = AnyTransition.init<A>(_:)(v28, v11, OpaqueTypeConformance2);
    result = (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v15, v11);
  }
  *a2 = v19;
  a2[1] = v20;
  return result;
}

double sub_F41B4@<D0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  double result;
  __int128 v4;

  sub_F3F1C(*(_QWORD *)(v1 + 8), (uint64_t *)&v4);
  result = *(double *)&v4;
  *a1 = v4;
  return result;
}

uint64_t EpisodeDownloadStateView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_F41F4(*v1, v1[1], a1);
}

uint64_t sub_F41F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  double *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(uint64_t);
  uint64_t v26;
  uint64_t v27;
  char v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  double v42;
  char *v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t OpaqueTypeConformance2;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD v83[5];

  v67 = a1;
  v82 = a3;
  v79 = type metadata accessor for ScaleTransition(0);
  v74 = *(_QWORD *)(v79 - 8);
  v4 = __chkstk_darwin(v79);
  v73 = (char *)&v64 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = type metadata accessor for OpacityTransition(0, v4);
  v71 = *(_QWORD *)(v76 - 8);
  __chkstk_darwin(v76);
  v70 = (char *)&v64 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8FC0);
  v77 = *(_QWORD *)(v7 - 8);
  v78 = v7;
  __chkstk_darwin(v7);
  v72 = (char *)&v64 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v75 = (char *)&v64 - v10;
  v66 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B9080);
  __chkstk_darwin(v66);
  v12 = (char *)&v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B9060);
  __chkstk_darwin(v13);
  v15 = (double *)((char *)&v64 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B9050);
  v17 = *(_QWORD *)(v16 - 8);
  v80 = v16;
  v81 = v17;
  __chkstk_darwin(v16);
  v69 = (uint64_t)&v64 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v68 = (uint64_t)&v64 - v20;
  v21 = type metadata accessor for EpisodeDownloadState(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = (char *)&v64 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = *(void (**)(uint64_t))(a2 + 24);
  v26 = swift_retain();
  v25(v26);
  v27 = swift_release(a2);
  v28 = EpisodeDownloadState.isDownloadingOrDownloaded.getter(v27);
  v29 = *(void (**)(char *, uint64_t))(v22 + 8);
  v29(v24, v21);
  if ((v28 & 1) != 0)
  {
    v65 = Image.init(systemName:)(0xD000000000000016, 0x800000000030EC70);
    v30 = swift_retain();
    v25(v30);
    v31 = swift_release(a2);
    v32 = EpisodeDownloadState.isDownloadedEpisode.getter(v31);
    v33 = ((uint64_t (*)(char *, uint64_t))v29)(v24, v21);
    if ((v32 & 1) != 0)
      v34 = 1.0;
    else
      v34 = 0.0;
    v35 = static Alignment.center.getter(v33);
    v37 = v36;
    sub_F4700(a2, (uint64_t)v12);
    v38 = (uint64_t *)&v12[*(int *)(v66 + 36)];
    *v38 = v35;
    v38[1] = v37;
    sub_267BC((uint64_t)v12, (uint64_t)v15 + *(int *)(v13 + 36), &qword_3B9080);
    *(_QWORD *)v15 = v65;
    v15[1] = v34;
    v39 = sub_1459C((uint64_t)v12, &qword_3B9080);
    v40 = v70;
    v41 = OpacityTransition.init()(v39);
    v42 = static UnitPoint.center.getter(v41);
    v43 = v73;
    ScaleTransition.init(_:anchor:)(0.00001, v42, v44);
    v45 = sub_F1C0(&qword_3B8FC8, (void (*)(uint64_t))&type metadata accessor for OpacityTransition, (uint64_t)&protocol conformance descriptor for OpacityTransition);
    v46 = sub_F1C0(&qword_3B8FD0, (void (*)(uint64_t))&type metadata accessor for ScaleTransition, (uint64_t)&protocol conformance descriptor for ScaleTransition);
    v48 = v75;
    v47 = v76;
    v49 = v79;
    Transition.combined<A>(with:)(v43, v76, v79, v45, v46);
    (*(void (**)(char *, uint64_t))(v74 + 8))(v43, v49);
    (*(void (**)(char *, uint64_t))(v71 + 8))(v40, v47);
    v51 = v77;
    v50 = v78;
    v52 = v72;
    (*(void (**)(char *, char *, uint64_t))(v77 + 16))(v72, v48, v78);
    v83[0] = v47;
    v83[1] = v49;
    v83[2] = v45;
    v83[3] = v46;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v83, &opaque type descriptor for <<opaque return type of Transition.combined<A>(with:)>>, 1);
    v54 = AnyTransition.init<A>(_:)(v52, v50, OpaqueTypeConformance2);
    v55 = v69;
    sub_267BC((uint64_t)v15, v69, &qword_3B9060);
    v56 = v80;
    *(_QWORD *)(v55 + *(int *)(v80 + 36)) = v54;
    (*(void (**)(char *, uint64_t))(v51 + 8))(v48, v50);
    sub_1459C((uint64_t)v15, &qword_3B9060);
    v57 = v68;
    sub_15BD4(v55, v68, &qword_3B9050);
    v58 = v57;
    v59 = v82;
    sub_15BD4(v58, v82, &qword_3B9050);
    v60 = 0;
    v61 = v59;
    v62 = v56;
  }
  else
  {
    v60 = 1;
    v61 = v82;
    v62 = v80;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v81 + 56))(v61, v60, 1, v62);
}

uint64_t sub_F4700@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t KeyPath;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;

  v54 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B9088);
  v49 = *(_QWORD *)(v3 - 8);
  v50 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)&v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B9090);
  v51 = *(_QWORD *)(v6 - 8);
  v52 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B9098);
  v53 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v48 = (uint64_t)&v48 - v13;
  v14 = type metadata accessor for EpisodeDownloadState(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(void (**)(uint64_t))(a1 + 24);
  v19 = swift_retain();
  v18(v19);
  swift_release(a1);
  if ((*(unsigned int (**)(char *, uint64_t))(v15 + 88))(v17, v14) == enum case for EpisodeDownloadState.downloading(_:))
  {
    (*(void (**)(char *, uint64_t))(v15 + 96))(v17, v14);
    v20 = *(_QWORD *)v17;
    v21 = v17[8];
    if (v21)
      v20 = 0;
    v55 = v20;
    LOBYTE(v56) = v21;
    v61 = 0x3FF0000000000000;
    v22 = sub_F5268();
    ProgressView.init<A>(value:total:)(&v55, &v61, &type metadata for Double, v22);
    v61 = 0x4008000000000000;
    State.init(wrappedValue:)(&v61, &type metadata for CGFloat);
    v23 = v55;
    v24 = v56;
    LOBYTE(v61) = 0;
    State.init(wrappedValue:)(&v61, &type metadata for Bool);
    v25 = v55;
    v26 = v56;
    KeyPath = swift_getKeyPath(&unk_2F4C40);
    v55 = v23;
    v56 = v24;
    v57 = v25;
    v58 = v26;
    v59 = KeyPath;
    v60 = 0;
    v28 = sub_32914(&qword_3B90A8, &qword_3B9088, (uint64_t)&protocol conformance descriptor for ProgressView<A, B>);
    v29 = sub_F52B4();
    v30 = v50;
    View.progressViewStyle<A>(_:)(&v55, v50, &type metadata for DownloadProgressViewStyle, v28, v29);
    swift_release(KeyPath);
    swift_release(v24);
    swift_release(v26);
    v31 = (*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v5, v30);
    LOBYTE(v24) = static Edge.Set.all.getter(v31);
    v32 = EdgeInsets.init(_all:)(1.0);
    v34 = v33;
    v36 = v35;
    v38 = v37;
    v40 = v51;
    v39 = v52;
    (*(void (**)(char *, char *, uint64_t))(v51 + 16))(v11, v8, v52);
    v41 = &v11[*(int *)(v9 + 36)];
    *v41 = v24;
    *((double *)v41 + 1) = v32;
    *((_QWORD *)v41 + 2) = v34;
    *((_QWORD *)v41 + 3) = v36;
    *((_QWORD *)v41 + 4) = v38;
    v41[40] = 0;
    (*(void (**)(char *, uint64_t))(v40 + 8))(v8, v39);
    v42 = v48;
    sub_15BD4((uint64_t)v11, v48, &qword_3B9098);
    v43 = v42;
    v44 = v54;
    sub_15BD4(v43, v54, &qword_3B9098);
    v45 = 0;
    v46 = v44;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    v45 = 1;
    v46 = v54;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v53 + 56))(v46, v45, 1, v9);
}

_QWORD *sub_F4AA0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v3 = v2;
  v2[5] = 0;
  v2[2] = a1;
  v6 = swift_allocObject(&unk_3804E8, 32, 7);
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  v2[3] = sub_F5528;
  v2[4] = v6;
  swift_retain_n(a1, 2);
  swift_retain();
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B90C8);
  v8 = sub_32914(&qword_3B90D0, &qword_3B90C8, (uint64_t)&protocol conformance descriptor for EpisodeStateMachine<A, B>);
  dispatch thunk of ObservableObject.objectWillChange.getter(&v15, v7, v8);
  v9 = swift_allocObject(&unk_380510, 24, 7);
  swift_weakInit(v9 + 16);
  v10 = type metadata accessor for ObservableObjectPublisher(0);
  swift_retain();
  v11 = Publisher<>.sink(receiveValue:)(sub_F5530, v9, v10, &protocol witness table for ObservableObjectPublisher);
  swift_release(a1);
  swift_release(a2);
  swift_release(v9);
  v12 = v15;
  swift_release(v9);
  swift_release(v12);
  v13 = v3[5];
  v3[5] = v11;
  swift_release(v13);
  return v3;
}

uint64_t sub_F4BF4()
{
  return sub_F1C0(&qword_3B8FA8, (void (*)(uint64_t))&type metadata accessor for AnyEpisodeDownloadStateRule, (uint64_t)&protocol conformance descriptor for AnyEpisodeDownloadStateRule);
}

_QWORD *sub_F4C20@<X0>(_QWORD *a1@<X8>)
{
  return dispatch thunk of EpisodeStateMachine.currentState.getter(a1);
}

_QWORD *sub_F4C40(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v3 = v2;
  v2[5] = 0;
  v2[2] = a1;
  v6 = swift_allocObject(&unk_380498, 32, 7);
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  v2[3] = sub_F5350;
  v2[4] = v6;
  swift_retain_n(a1, 2);
  swift_retain();
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B90B8);
  v8 = sub_32914(&qword_3B90C0, &qword_3B90B8, (uint64_t)&protocol conformance descriptor for EpisodeStateMachine<A, B>);
  dispatch thunk of ObservableObject.objectWillChange.getter(&v15, v7, v8);
  v9 = swift_allocObject(&unk_3804C0, 24, 7);
  swift_weakInit(v9 + 16);
  v10 = type metadata accessor for ObservableObjectPublisher(0);
  swift_retain();
  v11 = Publisher<>.sink(receiveValue:)(sub_F54DC, v9, v10, &protocol witness table for ObservableObjectPublisher);
  swift_release(a1);
  swift_release(a2);
  swift_release(v9);
  v12 = v15;
  swift_release(v9);
  swift_release(v12);
  v13 = v3[5];
  v3[5] = v11;
  swift_release(v13);
  return v3;
}

uint64_t sub_F4D94(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of EpisodeLibraryStateView.body>>, 1);
}

uint64_t sub_F4DA4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of EpisodeBookmarkStateView.body>>, 1);
}

uint64_t sub_F4DB4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of EpisodeDownloadStateView.body>>, 1);
}

uint64_t destroy for EpisodeLibraryStateView(_QWORD *a1)
{
  swift_release(*a1);
  return swift_release(a1[1]);
}

uint64_t *_s8ShelfKit23EpisodeLibraryStateViewVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain(v3);
  swift_retain(v4);
  return a1;
}

uint64_t *assignWithCopy for EpisodeLibraryStateView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  return a1;
}

_QWORD *assignWithTake for EpisodeLibraryStateView(_QWORD *a1, _OWORD *a2)
{
  uint64_t v4;

  swift_release(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  swift_release(v4);
  return a1;
}

ValueMetadata *type metadata accessor for EpisodeLibraryStateView()
{
  return &type metadata for EpisodeLibraryStateView;
}

_QWORD *initializeBufferWithCopyOfBuffer for EpisodeBookmarkStateView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain(v3);
  return a1;
}

uint64_t destroy for EpisodeBookmarkStateView(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 8));
}

_QWORD *assignWithTake for EpisodeBookmarkStateView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_release(v4);
  return a1;
}

ValueMetadata *type metadata accessor for EpisodeBookmarkStateView()
{
  return &type metadata for EpisodeBookmarkStateView;
}

_QWORD *assignWithCopy for EpisodeCaption(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = *a2;
  v3 = a2[1];
  v4 = a1[1];
  a1[1] = v3;
  swift_retain(v3);
  swift_release(v4);
  return a1;
}

ValueMetadata *type metadata accessor for EpisodeDownloadStateView()
{
  return &type metadata for EpisodeDownloadStateView;
}

uint64_t sub_F4F9C()
{
  return sub_32914(&qword_3B8FD8, &qword_3B8FE0, (uint64_t)&protocol conformance descriptor for TupleView<A>);
}

uint64_t sub_F4FC8()
{
  return sub_16138(&qword_3B8FE8, &qword_3B8FF0, (void (*)(void))sub_F4FFC, (uint64_t)&protocol conformance descriptor for <A> Group<A>);
}

uint64_t sub_F4FFC()
{
  return sub_16138(&qword_3B8FF8, &qword_3B9000, (void (*)(void))sub_F5020, (uint64_t)&protocol conformance descriptor for <A> A?);
}

unint64_t sub_F5020()
{
  unint64_t result;

  result = qword_3B9008;
  if (!qword_3B9008)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_3B9010);
    sub_32914(&qword_3B9018, &qword_3B9020, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>);
    atomic_store(result, (unint64_t *)&qword_3B9008);
  }
  return result;
}

uint64_t sub_F50A4()
{
  return sub_16138(&qword_3B9028, &qword_3B9030, (void (*)(void))sub_F50D8, (uint64_t)&protocol conformance descriptor for <A> Group<A>);
}

uint64_t sub_F50D8()
{
  return sub_16138(&qword_3B9038, &qword_3B9040, (void (*)(void))sub_F50FC, (uint64_t)&protocol conformance descriptor for <A> A?);
}

unint64_t sub_F50FC()
{
  unint64_t result;

  result = qword_3B9048;
  if (!qword_3B9048)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_3B9050);
    sub_F5180();
    sub_32914(&qword_3B9018, &qword_3B9020, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>);
    atomic_store(result, (unint64_t *)&qword_3B9048);
  }
  return result;
}

unint64_t sub_F5180()
{
  unint64_t result;

  result = qword_3B9058;
  if (!qword_3B9058)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_3B9060);
    sub_F5204();
    sub_32914(&qword_3B9078, &qword_3B9080, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>);
    atomic_store(result, (unint64_t *)&qword_3B9058);
  }
  return result;
}

unint64_t sub_F5204()
{
  unint64_t result;

  result = qword_3B9068;
  if (!qword_3B9068)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_3B9070);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>);
    atomic_store(result, (unint64_t *)&qword_3B9068);
  }
  return result;
}

unint64_t sub_F5268()
{
  unint64_t result;

  result = qword_3B90A0;
  if (!qword_3B90A0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Double);
    atomic_store(result, (unint64_t *)&qword_3B90A0);
  }
  return result;
}

unint64_t sub_F52B4()
{
  unint64_t result;

  result = qword_3B90B0;
  if (!qword_3B90B0)
  {
    result = swift_getWitnessTable(&unk_2FFEFC);
    atomic_store(result, (unint64_t *)&qword_3B90B0);
  }
  return result;
}

uint64_t sub_F52F8(uint64_t a1, uint64_t a2)
{
  uint64_t v5;

  v5 = a1;
  swift_retain(a1);
  swift_getAtKeyPath(&v5, a2);
  return swift_release(a1);
}

uint64_t sub_F5350()
{
  uint64_t v0;

  return sub_F52F8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_F5358()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_F537C(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a2);
  sub_32914(a3, a2, (uint64_t)&protocol conformance descriptor for ObservableObjectAnimator<A>);
  v6 = ObservableObject<>.objectWillChange.getter(v5);
  ObservableObjectPublisher.send()();
  return swift_release(v6);
}

uint64_t sub_F53F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  char v8;

  v7 = a1;
  swift_retain(a1);
  swift_getAtKeyPath(&v7, a2);
  result = swift_release(a1);
  *a3 = v8;
  return result;
}

uint64_t sub_F5454(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[24];

  v4 = a2 + 16;
  swift_beginAccess(a2 + 16, v8, 0, 0);
  result = swift_weakLoadStrong(v4);
  if (result)
  {
    v6 = result;
    v7 = static Animation.default.getter();
    withAnimation<A>(_:_:)(v7, a3, v6, (char *)&type metadata for () + 8);
    swift_release(v6);
    return swift_release(v7);
  }
  return result;
}

uint64_t sub_F54DC(uint64_t a1)
{
  uint64_t v1;

  return sub_F5454(a1, v1, (uint64_t)sub_F54FC);
}

uint64_t sub_F54FC()
{
  uint64_t v0;

  return sub_F537C(v0, &qword_3B8FB0, &qword_3B8FB8);
}

uint64_t sub_F5528@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;

  return sub_F53F8(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_F5530(uint64_t a1)
{
  uint64_t v1;

  return sub_F5454(a1, v1, (uint64_t)sub_F5550);
}

uint64_t sub_F5550()
{
  uint64_t v0;

  return sub_F537C(v0, &qword_3B8F98, &qword_3B8FA0);
}

uint64_t LegacyMetricsPageEnterGate.hasMetricsPage.setter(char a1)
{
  uint64_t v1;
  uint64_t result;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t ObjectType;
  char v8;
  _BYTE v9[24];
  _BYTE v10[24];

  result = swift_beginAccess(v1 + 34, v10, 1, 0);
  v4 = *(_BYTE *)(v1 + 34);
  *(_BYTE *)(v1 + 34) = a1;
  if ((v4 & 1) == 0 && (a1 & 1) != 0)
  {
    result = swift_beginAccess(v1 + 32, v9, 0, 0);
    if (*(_BYTE *)(v1 + 32) == 1)
    {
      result = swift_unknownObjectWeakLoadStrong(v1 + 16);
      if (result)
      {
        v5 = result;
        v6 = *(_QWORD *)(v1 + 24);
        ObjectType = swift_getObjectType(result);
        v8 = 0;
        (*(void (**)(char *, uint64_t, uint64_t))(v6 + 8))(&v8, ObjectType, v6);
        return swift_unknownObjectRelease(v5);
      }
    }
  }
  return result;
}

void sub_F5638(ShelfKit::StoreViewControllerLifecycleEvent a1)
{
  swift_getWitnessTable(&protocol conformance descriptor for BasePresenter<A>);
  MetricsPagePresenter.observe(lifecycleEvent:)(a1);
}

Swift::Void __swiftcall MetricsPagePresenter.observe(lifecycleEvent:)(ShelfKit::StoreViewControllerLifecycleEvent lifecycleEvent)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  _BYTE v14[24];

  v3 = v2;
  v4 = v1;
  switch(lifecycleEvent)
  {
    case ShelfKit_StoreViewControllerLifecycleEvent_didAppear:
      v5 = (*(uint64_t (**)())(v2 + 64))();
      if (v5)
      {
        v6 = v5;
        LegacyMetricsPageEnterGate.hasAppeared.setter(1);
        goto LABEL_13;
      }
      break;
    case ShelfKit_StoreViewControllerLifecycleEvent_willDisappear:
      v7 = (*(uint64_t (**)())(v2 + 64))();
      if (v7)
      {
        v8 = v7;
        swift_beginAccess(v7 + 32, v14, 1, 0);
        *(_BYTE *)(v8 + 32) = 0;
        swift_release(v8);
      }
      v9 = 1;
      goto LABEL_10;
    case ShelfKit_StoreViewControllerLifecycleEvent_appExitedWhileAppeared:
      v10 = (*(uint64_t (**)())(v2 + 64))();
      if (v10)
      {
        v11 = v10;
        swift_beginAccess(v10 + 33, v14, 1, 0);
        *(_BYTE *)(v11 + 33) = 1;
        swift_release(v11);
      }
      v9 = 2;
LABEL_10:
      v13 = v9;
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v3 + 8) + 8))(&v13, v4);
      break;
    case ShelfKit_StoreViewControllerLifecycleEvent_appEnteredWhileAppeared:
      v12 = (*(uint64_t (**)())(v2 + 64))();
      if (v12)
      {
        v6 = v12;
        LegacyMetricsPageEnterGate.hasExitedWhileAppeared.setter(0);
LABEL_13:
        swift_release(v6);
      }
      break;
    case ShelfKit_StoreViewControllerLifecycleEvent_dismissedByBackButton:
      v14[0] = 4;
      (*(void (**)(_BYTE *))(*(_QWORD *)(v2 + 8) + 8))(v14);
      break;
    default:
      return;
  }
}

uint64_t LegacyMetricsPageEnterGate.hasAppeared.setter(char a1)
{
  uint64_t v1;
  int v3;
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t ObjectType;
  char v9;
  _BYTE v10[24];
  _BYTE v11[24];

  v3 = a1 & 1;
  result = swift_beginAccess(v1 + 32, v11, 1, 0);
  v5 = *(unsigned __int8 *)(v1 + 32);
  *(_BYTE *)(v1 + 32) = a1;
  if (v5 != v3)
  {
    result = swift_beginAccess(v1 + 34, v10, 0, 0);
    if (*(_BYTE *)(v1 + 34) == 1 && (a1 & 1) != 0)
    {
      result = swift_unknownObjectWeakLoadStrong(v1 + 16);
      if (result)
      {
        v6 = result;
        v7 = *(_QWORD *)(v1 + 24);
        ObjectType = swift_getObjectType(result);
        v9 = 0;
        (*(void (**)(char *, uint64_t, uint64_t))(v7 + 8))(&v9, ObjectType, v7);
        return swift_unknownObjectRelease(v6);
      }
    }
  }
  return result;
}

void (*LegacyMetricsPageEnterGate.hasAppeared.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x40uLL);
  *a1 = v3;
  v3[6] = v1;
  swift_beginAccess(v1 + 32, v3, 1, 0);
  *((_BYTE *)v3 + 56) = *(_BYTE *)(v1 + 32);
  return sub_F5904;
}

void sub_F5904(uint64_t a1, char a2)
{
  _QWORD *v2;
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  BOOL v7;
  uint64_t Strong;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  char v12;

  v2 = *(_QWORD **)a1;
  v3 = *(unsigned __int8 *)(*(_QWORD *)a1 + 56);
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 48);
  if ((a2 & 1) != 0)
  {
    LegacyMetricsPageEnterGate.hasAppeared.setter(*(_BYTE *)(*(_QWORD *)a1 + 56));
  }
  else
  {
    v5 = *(unsigned __int8 *)(v4 + 32);
    *(_BYTE *)(v4 + 32) = v3;
    if (v3 != v5)
    {
      v6 = v2[6];
      swift_beginAccess(v6 + 34, v2 + 3, 0, 0);
      if (v3)
        v7 = *(_BYTE *)(v6 + 34) == 0;
      else
        v7 = 1;
      if (!v7)
      {
        Strong = swift_unknownObjectWeakLoadStrong(v2[6] + 16);
        if (Strong)
        {
          v9 = Strong;
          v10 = *(_QWORD *)(v2[6] + 24);
          ObjectType = swift_getObjectType();
          v12 = 0;
          (*(void (**)(char *, uint64_t, uint64_t))(v10 + 8))(&v12, ObjectType, v10);
          swift_unknownObjectRelease(v9);
        }
      }
    }
  }
  free(v2);
}

uint64_t LegacyMetricsPageEnterGate.hasExitedWhileAppeared.getter()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 33, v2, 0, 0);
  return *(unsigned __int8 *)(v0 + 33);
}

uint64_t LegacyMetricsPageEnterGate.hasExitedWhileAppeared.setter(char a1)
{
  uint64_t v1;
  uint64_t result;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t ObjectType;
  char v8;
  _BYTE v9[24];
  _BYTE v10[24];

  result = swift_beginAccess(v1 + 33, v10, 1, 0);
  v4 = *(unsigned __int8 *)(v1 + 33);
  *(_BYTE *)(v1 + 33) = a1;
  if (v4 == 1 && (a1 & 1) == 0)
  {
    result = swift_beginAccess(v1 + 34, v9, 0, 0);
    if ((*(_BYTE *)(v1 + 34) & 1) != 0)
    {
      result = swift_unknownObjectWeakLoadStrong(v1 + 16);
      if (result)
      {
        v5 = result;
        v6 = *(_QWORD *)(v1 + 24);
        ObjectType = swift_getObjectType(result);
        v8 = 3;
        (*(void (**)(char *, uint64_t, uint64_t))(v6 + 8))(&v8, ObjectType, v6);
        return swift_unknownObjectRelease(v5);
      }
    }
  }
  return result;
}

void (*LegacyMetricsPageEnterGate.hasExitedWhileAppeared.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x40uLL);
  *a1 = v3;
  v3[6] = v1;
  swift_beginAccess(v1 + 33, v3, 1, 0);
  *((_BYTE *)v3 + 56) = *(_BYTE *)(v1 + 33);
  return sub_F5B04;
}

void sub_F5B04(uint64_t a1, char a2)
{
  _QWORD *v2;
  char v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t Strong;
  uint64_t v8;
  uint64_t v9;
  uint64_t ObjectType;
  char v11;

  v2 = *(_QWORD **)a1;
  v3 = *(_BYTE *)(*(_QWORD *)a1 + 56);
  v4 = v2[6];
  if ((a2 & 1) != 0)
  {
    LegacyMetricsPageEnterGate.hasExitedWhileAppeared.setter(v3);
  }
  else
  {
    v5 = *(unsigned __int8 *)(v4 + 33);
    *(_BYTE *)(v4 + 33) = v3;
    if (v5 == 1 && (v3 & 1) == 0)
    {
      v6 = v2[6];
      swift_beginAccess(v6 + 34, v2 + 3, 0, 0);
      if (*(_BYTE *)(v6 + 34) == 1)
      {
        Strong = swift_unknownObjectWeakLoadStrong(v2[6] + 16);
        if (Strong)
        {
          v8 = Strong;
          v9 = *(_QWORD *)(v2[6] + 24);
          ObjectType = swift_getObjectType();
          v11 = 3;
          (*(void (**)(char *, uint64_t, uint64_t))(v9 + 8))(&v11, ObjectType, v9);
          swift_unknownObjectRelease(v8);
        }
      }
    }
  }
  free(v2);
}

uint64_t LegacyMetricsPageEnterGate.hasMetricsPage.getter()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 34, v2, 0, 0);
  return *(unsigned __int8 *)(v0 + 34);
}

void (*LegacyMetricsPageEnterGate.hasMetricsPage.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x40uLL);
  *a1 = v3;
  v3[6] = v1;
  swift_beginAccess(v1 + 34, v3, 1, 0);
  *((_BYTE *)v3 + 56) = *(_BYTE *)(v1 + 34);
  return sub_F5C54;
}

void sub_F5C54(uint64_t a1, char a2)
{
  _QWORD *v2;
  int v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t Strong;
  uint64_t v8;
  uint64_t v9;
  uint64_t ObjectType;
  char v11;

  v2 = *(_QWORD **)a1;
  v3 = *(unsigned __int8 *)(*(_QWORD *)a1 + 56);
  v4 = v2[6];
  if ((a2 & 1) != 0)
  {
    LegacyMetricsPageEnterGate.hasMetricsPage.setter(v3);
  }
  else
  {
    v5 = *(_BYTE *)(v4 + 34);
    *(_BYTE *)(v4 + 34) = v3;
    if ((v5 & 1) == 0)
    {
      if (v3)
      {
        v6 = v2[6];
        swift_beginAccess(v6 + 32, v2 + 3, 0, 0);
        if (*(_BYTE *)(v6 + 32) == 1)
        {
          Strong = swift_unknownObjectWeakLoadStrong(v2[6] + 16);
          if (Strong)
          {
            v8 = Strong;
            v9 = *(_QWORD *)(v2[6] + 24);
            ObjectType = swift_getObjectType();
            v11 = 0;
            (*(void (**)(char *, uint64_t, uint64_t))(v9 + 8))(&v11, ObjectType, v9);
            swift_unknownObjectRelease(v8);
          }
        }
      }
    }
  }
  free(v2);
}

uint64_t LegacyMetricsPageEnterGate.deinit()
{
  uint64_t v0;

  sub_6FC38(v0 + 16);
  return v0;
}

uint64_t LegacyMetricsPageEnterGate.__deallocating_deinit()
{
  uint64_t v0;

  sub_6FC38(v0 + 16);
  return swift_deallocClassInstance(v0, 35, 7);
}

uint64_t sub_F5D4C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  _BYTE v5[24];

  v3 = *a1;
  result = swift_beginAccess(*a1 + 32, v5, 0, 0);
  *a2 = *(_BYTE *)(v3 + 32);
  return result;
}

uint64_t sub_F5D90(char *a1)
{
  return LegacyMetricsPageEnterGate.hasAppeared.setter(*a1);
}

uint64_t sub_F5DB4@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  _BYTE v5[24];

  v3 = *a1;
  result = swift_beginAccess(*a1 + 33, v5, 0, 0);
  *a2 = *(_BYTE *)(v3 + 33);
  return result;
}

uint64_t sub_F5DF8(char *a1)
{
  return LegacyMetricsPageEnterGate.hasExitedWhileAppeared.setter(*a1);
}

uint64_t sub_F5E1C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  _BYTE v5[24];

  v3 = *a1;
  result = swift_beginAccess(*a1 + 34, v5, 0, 0);
  *a2 = *(_BYTE *)(v3 + 34);
  return result;
}

uint64_t sub_F5E60(char *a1)
{
  return LegacyMetricsPageEnterGate.hasMetricsPage.setter(*a1);
}

uint64_t type metadata accessor for LegacyMetricsPageEnterGate()
{
  return objc_opt_self(_TtC8ShelfKit26LegacyMetricsPageEnterGate);
}

uint64_t method lookup function for LegacyMetricsPageEnterGate(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for LegacyMetricsPageEnterGate);
}

uint64_t sub_F5EB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;

  v6 = swift_allocObject(a2, 35, 7);
  *(_QWORD *)(v6 + 24) = 0;
  v7 = swift_unknownObjectWeakInit(v6 + 16, 0);
  *(_WORD *)(v6 + 32) = 0;
  *(_BYTE *)(v6 + 34) = 0;
  *(_QWORD *)(v6 + 24) = a4;
  swift_unknownObjectWeakAssign(v7, a1);
  return v6;
}

uint64_t BookmarkEpisodeAction.actionMetrics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for BookmarkEpisodeAction(0) + 20);
  v4 = type metadata accessor for ActionMetrics(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for BookmarkEpisodeAction(uint64_t a1)
{
  uint64_t result;

  result = qword_3B91F0;
  if (!qword_3B91F0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BookmarkEpisodeAction);
  return result;
}

uint64_t BookmarkEpisodeAction.actionMetrics.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for BookmarkEpisodeAction(0) + 20);
  v4 = type metadata accessor for ActionMetrics(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

void (__swiftcall *BookmarkEpisodeAction.actionMetrics.modify())()
{
  type metadata accessor for BookmarkEpisodeAction(0);
  return FindOrCreateEpisodeOfferContentIDsIntentsIntentImplementation.init();
}

uint64_t BookmarkEpisodeAction.intent.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0918);
  v2 = swift_allocObject(v1, 56, 7);
  *(_OWORD *)(v2 + 16) = xmmword_2EA0D0;
  *(_QWORD *)(v2 + 32) = *v0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 48) = 0;
  return BookmarkEpisodeIntent.init(episodeIdentifiers:)(v2);
}

uint64_t BookmarkEpisodeAction.init(adamID:actionMetrics:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  char *v4;
  uint64_t v5;

  *a3 = a1;
  v4 = (char *)a3 + *(int *)(type metadata accessor for BookmarkEpisodeAction(0) + 20);
  v5 = type metadata accessor for ActionMetrics(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(v4, a2, v5);
}

uint64_t sub_F60A8()
{
  return sub_F1C0(&qword_3B9190, (void (*)(uint64_t))type metadata accessor for BookmarkEpisodeAction, (uint64_t)&protocol conformance descriptor for BookmarkEpisodeAction);
}

uint64_t sub_F60D4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of BookmarkEpisodeAction.intent>>, 1);
}

uint64_t sub_F60E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 20);
  v5 = type metadata accessor for ActionMetrics(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t *initializeBufferWithCopyOfBuffer for BookmarkEpisodeAction(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v9);
  }
  else
  {
    *a1 = *a2;
    v5 = *(int *)(a3 + 20);
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    v8 = type metadata accessor for ActionMetrics(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t destroy for BookmarkEpisodeAction(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 20);
  v3 = type metadata accessor for ActionMetrics(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

_QWORD *initializeWithCopy for BookmarkEpisodeAction(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

_QWORD *assignWithCopy for BookmarkEpisodeAction(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

_QWORD *initializeWithTake for BookmarkEpisodeAction(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_QWORD *assignWithTake for BookmarkEpisodeAction(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for BookmarkEpisodeAction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_F6360);
}

uint64_t sub_F6360(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a3 + 20);
  v5 = type metadata accessor for ActionMetrics(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for BookmarkEpisodeAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_F63AC);
}

uint64_t sub_F63AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + *(int *)(a4 + 20);
  v6 = type metadata accessor for ActionMetrics(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, a2, a2, v6);
}

uint64_t sub_F63F0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  result = type metadata accessor for ActionMetrics(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_F6468()
{
  return sub_F1C0((unint64_t *)&qword_3B18D8, (void (*)(uint64_t))&type metadata accessor for BookmarkEpisodeIntent, (uint64_t)&protocol conformance descriptor for BookmarkEpisodeIntent);
}

uint64_t static Animation.uikitDefault(duration:)(double a1)
{
  return static Animation.timingCurve(_:_:_:_:duration:)(0.25, 0.1, 0.25, 1.0, a1);
}

id sub_F64B4(uint64_t a1, uint64_t a2, char a3, char a4)
{
  void *v7;
  char **v8;
  id v9;
  id v10;
  NSString v11;
  void *v12;
  id v13;
  id v14;
  uint64_t v15;
  id v16;
  id v17;

  v7 = (void *)objc_opt_self(UIImageSymbolConfiguration);
  v8 = &selRef_configurationPreferringMulticolor;
  if ((a4 & 1) == 0)
    v8 = &selRef_unspecifiedConfiguration;
  v9 = objc_msgSend(v7, *v8);
  swift_bridgeObjectRetain(a2);
  v10 = v9;
  v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v12 = (void *)objc_opt_self(UIImage);
  if ((a3 & 1) != 0)
    v13 = objc_msgSend(v12, "imageNamed:inBundle:withConfiguration:", v11, 0, v10);
  else
    v13 = objc_msgSend(v12, "systemImageNamed:withConfiguration:", v11, v10);
  v14 = v13;

  if (v14)
  {
    if ((a4 & 1) != 0)
      v15 = 1;
    else
      v15 = 2;
    v16 = v14;
    v17 = objc_msgSend(v16, "imageWithRenderingMode:", v15);

  }
  else
  {

    return 0;
  }
  return v17;
}

id _s8ShelfKit11SystemGlyphC4load7artworkSo7UIImageCSg18PodcastsFoundation12ArtworkModelVSg_tFZ_0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  id v25;
  NSString v26;
  uint64_t v28;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
  __chkstk_darwin(v2);
  v4 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
  __chkstk_darwin(v9);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (int *)type metadata accessor for ArtworkModel(0);
  v13 = *((_QWORD *)v12 - 1);
  __chkstk_darwin(v12);
  v15 = (uint64_t *)((char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_14554(a1, (uint64_t)v11);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 1, v12) == 1)
  {
    sub_1459C((uint64_t)v11, &qword_3BEB70);
    return 0;
  }
  v16 = sub_14614((uint64_t)v11, (uint64_t)v15);
  if ((ArtworkModel.isSystemGlyph.getter(v16) & 1) == 0)
  {
LABEL_11:
    sub_3E4A4((uint64_t)v15);
    return 0;
  }
  v17 = *v15;
  v18 = v15[1];
  swift_bridgeObjectRetain(v18);
  URL.init(string:)(v17, v18);
  swift_bridgeObjectRelease(v18);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_3E4A4((uint64_t)v15);
    sub_1459C((uint64_t)v4, &qword_3B4370);
    return 0;
  }
  v19 = (*(uint64_t (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
  v20 = URL.host.getter(v19);
  if (!v21)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    goto LABEL_11;
  }
  v22 = v21;
  v23 = sub_F64B4(v20, v21, *((_BYTE *)v15 + v12[14]), *((_BYTE *)v15 + v12[15]));
  swift_bridgeObjectRelease(v22);
  if (v23)
  {
    v24 = *(_QWORD *)((char *)v15 + v12[12] + 8);
    v25 = v23;
    if (v24)
    {
      swift_bridgeObjectRetain(v24);
      v26 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v24);
    }
    else
    {
      v26 = 0;
    }
    objc_msgSend(v23, "setAccessibilityLabel:", v26);

  }
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  sub_3E4A4((uint64_t)v15);
  return v23;
}

uint64_t type metadata accessor for SystemGlyph()
{
  return objc_opt_self(_TtC8ShelfKit11SystemGlyph);
}

uint64_t method lookup function for SystemGlyph(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for SystemGlyph);
}

void sub_F68CC()
{
  void *v0;
  NSString *v1;
  id v2;

  v0 = (void *)objc_opt_self(UITraitCollection);
  v1 = UIContentSizeCategoryLarge;
  v2 = objc_msgSend(v0, "traitCollectionWithPreferredContentSizeCategory:", v1);

  qword_3B92C0 = (uint64_t)v2;
}

void Paragraph.Style.nqmlConfiguration.getter(char a1@<W0>, ShelfKit::NqmlConfiguration *a2@<X8>)
{
  const UIFontTextStyle *v3;
  UIFontTextStyle v4;
  void *v5;
  uint64_t v6;
  NSString *v7;
  id v8;

  v3 = &UIFontTextStyleTitle3;
  if (a1 != 1)
    v3 = &UIFontTextStyleBody;
  v4 = *v3;
  v5 = (void *)objc_opt_self(UIFont);
  v6 = qword_3B00E0;
  v7 = v4;
  if (v6 != -1)
    swift_once(&qword_3B00E0, sub_F68CC);
  v8 = objc_msgSend(v5, "preferredFontForTextStyle:compatibleWithTraitCollection:", v7, qword_3B92C0);

  NqmlConfiguration.init(font:)(a2, (UIFont)v8);
}

uint64_t Paragraph.Text.languageAwareObject()(unint64_t a1)
{
  uint64_t v1;
  void *v2;
  id v3;

  v1 = a1;
  if (a1 >> 62 == 2 || a1 >> 62 == 1)
  {
    v2 = (void *)(a1 & 0x3FFFFFFFFFFFFFFFLL);
    v1 = a1 & 0x3FFFFFFFFFFFFFFFLL;
  }
  else
  {
    v2 = (void *)(a1 & 0x3FFFFFFFFFFFFFFFLL);
  }
  v3 = v2;
  return v1;
}

uint64_t static Paragraph.Text.== infix(_:_:)(unint64_t a1, unint64_t a2)
{
  void *v4;
  id v5;
  id v6;
  unint64_t v7;
  id v8;
  char v9;

  if (!(a1 >> 62))
  {
    if (!(a2 >> 62))
    {
      sub_327F8(0, &qword_3B92C8, NSObject_ptr);
      v5 = (id)(a1 & 0x3FFFFFFFFFFFFFFFLL);
      v6 = (id)a2;
      v7 = a1;
      v8 = v6;
      goto LABEL_7;
    }
LABEL_8:
    v9 = 0;
    return v9 & 1;
  }
  if (a1 >> 62 != 1 || a2 >> 62 != 1)
    goto LABEL_8;
  v4 = (void *)(a1 & 0x3FFFFFFFFFFFFFFFLL);
  sub_327F8(0, &qword_3B92C8, NSObject_ptr);
  v5 = v4;
  v6 = (id)(a2 & 0x3FFFFFFFFFFFFFFFLL);
  v7 = (unint64_t)v5;
  v8 = v6;
LABEL_7:
  v9 = static NSObject.== infix(_:_:)(v7, v8);

  return v9 & 1;
}

BOOL Paragraph.Text.isEmpty.getter(unint64_t a1)
{
  void *v1;
  id v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (a1 >> 62 == 2 || a1 >> 62 == 1)
    v1 = (void *)(a1 & 0x3FFFFFFFFFFFFFFFLL);
  else
    v1 = (void *)(a1 & 0x3FFFFFFFFFFFFFFFLL);
  v2 = v1;
  v3 = LanguageAwareString.string.getter();
  v5 = v4;

  swift_bridgeObjectRelease(v5);
  v6 = HIBYTE(v5) & 0xF;
  if ((v5 & 0x2000000000000000) == 0)
    v6 = v3 & 0xFFFFFFFFFFFFLL;
  return v6 == 0;
}

uint64_t sub_F6B9C(unint64_t *a1, void **a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  id v5;
  id v6;
  unint64_t v7;
  id v8;
  char v9;

  v2 = *a1;
  v3 = (unint64_t)*a2;
  v4 = *a1 >> 62;
  if (!(_DWORD)v4)
  {
    if (!(v3 >> 62))
    {
      sub_327F8(0, &qword_3B92C8, NSObject_ptr);
      v5 = (id)(v2 & 0x3FFFFFFFFFFFFFFFLL);
      v6 = (id)v3;
      v7 = v2;
      v8 = v6;
      goto LABEL_7;
    }
LABEL_8:
    v9 = 0;
    return v9 & 1;
  }
  if ((_DWORD)v4 != 1 || v3 >> 62 != 1)
    goto LABEL_8;
  sub_327F8(0, &qword_3B92C8, NSObject_ptr);
  v5 = (id)(v2 & 0x3FFFFFFFFFFFFFFFLL);
  v6 = (id)(v3 & 0x3FFFFFFFFFFFFFFFLL);
  v7 = (unint64_t)v5;
  v8 = v6;
LABEL_7:
  v9 = static NSObject.== infix(_:_:)(v7, v8);

  return v9 & 1;
}

ShelfKit::Paragraph::MediaType_optional __swiftcall Paragraph.MediaType.init(rawValue:)(Swift::String rawValue)
{
  Swift::OpaquePointer v1;

  v1._rawValue = &off_373BA0;
  return (ShelfKit::Paragraph::MediaType_optional)sub_F88F8(rawValue, v1);
}

uint64_t Paragraph.MediaType.rawValue.getter(char a1)
{
  if (!a1)
    return 0x616C702F74786574;
  if (a1 == 1)
    return 0xD000000000000015;
  return 0x6D74682F74786574;
}

uint64_t sub_F6D00(_BYTE *a1, _BYTE *a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;

  v2 = *a1;
  v3 = 0x80000000003092A0;
  v4 = 0xD000000000000015;
  if (v2 == 1)
  {
    v5 = 0x80000000003092A0;
  }
  else
  {
    v4 = 0x6D74682F74786574;
    v5 = 0xE90000000000006CLL;
  }
  if (*a1)
    v6 = v4;
  else
    v6 = 0x616C702F74786574;
  if (v2)
    v7 = v5;
  else
    v7 = 0xEA00000000006E69;
  v8 = 0xD000000000000015;
  if (*a2 != 1)
  {
    v8 = 0x6D74682F74786574;
    v3 = 0xE90000000000006CLL;
  }
  if (*a2)
    v9 = v8;
  else
    v9 = 0x616C702F74786574;
  if (*a2)
    v10 = v3;
  else
    v10 = 0xEA00000000006E69;
  if (v6 == v9 && v7 == v10)
  {
    v11 = 1;
    v10 = v7;
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v7, v9, v10, 0);
  }
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v10);
  return v11 & 1;
}

Swift::Int sub_F6E04()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7);
  v2 = 0x80000000003092A0;
  v3 = 0xD000000000000015;
  if (v1 != 1)
  {
    v3 = 0x6D74682F74786574;
    v2 = 0xE90000000000006CLL;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 0x616C702F74786574;
  if (v1)
    v5 = v2;
  else
    v5 = 0xEA00000000006E69;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_F6EB0(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0x80000000003092A0;
  v3 = 0xD000000000000015;
  if (*v1 != 1)
  {
    v3 = 0x6D74682F74786574;
    v2 = 0xE90000000000006CLL;
  }
  if (*v1)
    v4 = v3;
  else
    v4 = 0x616C702F74786574;
  if (*v1)
    v5 = v2;
  else
    v5 = 0xEA00000000006E69;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_F6F38()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7);
  v2 = 0x80000000003092A0;
  v3 = 0xD000000000000015;
  if (v1 != 1)
  {
    v3 = 0x6D74682F74786574;
    v2 = 0xE90000000000006CLL;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 0x616C702F74786574;
  if (v1)
    v5 = v2;
  else
    v5 = 0xEA00000000006E69;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

unint64_t sub_F6FE0@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  Swift::OpaquePointer v3;
  unint64_t result;

  v3._rawValue = &off_373BA0;
  result = sub_F88F8(*a1, v3);
  *a2 = result;
  return result;
}

void sub_F7014(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xEA00000000006E69;
  v4 = 0x80000000003092A0;
  v5 = 0xD000000000000015;
  if (v2 != 1)
  {
    v5 = 0x6D74682F74786574;
    v4 = 0xE90000000000006CLL;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x616C702F74786574;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t Paragraph.Alignment.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_F70B0 + 4 * byte_2F4DE8[a1]))(1952867692, 0xE400000000000000);
}

uint64_t sub_F70B0()
{
  return 0x7265746E6563;
}

uint64_t sub_F70C4()
{
  return 0x7468676972;
}

uint64_t sub_F70D8()
{
  return 0x656966697473756ALL;
}

void sub_F70F4(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_F7138@<X0>(uint64_t a1@<X8>)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_F7194 + 4 * byte_2F4DF0[a1]))(0x7265746E6563);
}

uint64_t sub_F7194(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x7265746E6563 && v1 == 0xE600000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x7265746E6563, 0xE600000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE600000000000000);
  return v2 & 1;
}

void sub_F7238()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2);
  __asm { BR              X9 }
}

Swift::Int sub_F727C()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x7265746E6563, 0xE600000000000000);
  swift_bridgeObjectRelease(0xE600000000000000);
  return Hasher._finalize()();
}

void sub_F72E8()
{
  __asm { BR              X10 }
}

uint64_t sub_F731C(uint64_t a1)
{
  String.hash(into:)(a1, 0x7265746E6563, 0xE600000000000000);
  return swift_bridgeObjectRelease(0xE600000000000000);
}

void sub_F7374()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2);
  __asm { BR              X9 }
}

Swift::Int sub_F73B4()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x7265746E6563, 0xE600000000000000);
  swift_bridgeObjectRelease(0xE600000000000000);
  return Hasher._finalize()();
}

unint64_t sub_F7420@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = _s8ShelfKit9ParagraphC9AlignmentO8rawValueAESgSS_tcfC_0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_F744C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_F7474 + 4 * byte_2F4E00[*v0]))();
}

void sub_F7474(_QWORD *a1@<X8>)
{
  *a1 = 0x7265746E6563;
  a1[1] = 0xE600000000000000;
}

void sub_F748C(_QWORD *a1@<X8>)
{
  *a1 = 0x7468676972;
  a1[1] = 0xE500000000000000;
}

void sub_F74A4(_QWORD *a1@<X8>)
{
  *a1 = 0x656966697473756ALL;
  a1[1] = 0xE900000000000064;
}

id Paragraph.Style.textStyle.getter(char a1)
{
  id *v1;

  v1 = (id *)&UIFontTextStyleTitle3;
  if (a1 != 1)
    v1 = (id *)&UIFontTextStyleBody;
  return *v1;
}

ShelfKit::Paragraph::Style_optional __swiftcall Paragraph.Style.init(rawValue:)(Swift::String rawValue)
{
  Swift::OpaquePointer v1;

  v1._rawValue = &off_373C88;
  return (ShelfKit::Paragraph::Style_optional)sub_F88F8(rawValue, v1);
}

uint64_t Paragraph.Style.rawValue.getter(char a1)
{
  if (!a1)
    return 0x647261646E617473;
  if (a1 == 1)
    return 0x656C6369747261;
  return 0x656E696C6E69;
}

uint64_t sub_F7558(_BYTE *a1, _BYTE *a2)
{
  int v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;

  v2 = *a1;
  v3 = 0xE700000000000000;
  v4 = 0x656C6369747261;
  if (v2 != 1)
  {
    v4 = 0x656E696C6E69;
    v3 = 0xE600000000000000;
  }
  if (*a1)
    v5 = v4;
  else
    v5 = 0x647261646E617473;
  if (v2)
    v6 = v3;
  else
    v6 = 0xE800000000000000;
  v7 = 0xE700000000000000;
  v8 = 0x656C6369747261;
  if (*a2 != 1)
  {
    v8 = 0x656E696C6E69;
    v7 = 0xE600000000000000;
  }
  if (*a2)
    v9 = v8;
  else
    v9 = 0x647261646E617473;
  if (*a2)
    v10 = v7;
  else
    v10 = 0xE800000000000000;
  if (v5 == v9 && v6 == v10)
  {
    v11 = 1;
    v10 = v6;
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v9, v10, 0);
  }
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v10);
  return v11 & 1;
}

Swift::Int sub_F7654()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7);
  v2 = 0xE700000000000000;
  v3 = 0x656C6369747261;
  if (v1 != 1)
  {
    v3 = 0x656E696C6E69;
    v2 = 0xE600000000000000;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 0x647261646E617473;
  if (v1)
    v5 = v2;
  else
    v5 = 0xE800000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_F76F0(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0xE700000000000000;
  v3 = 0x656C6369747261;
  if (*v1 != 1)
  {
    v3 = 0x656E696C6E69;
    v2 = 0xE600000000000000;
  }
  if (*v1)
    v4 = v3;
  else
    v4 = 0x647261646E617473;
  if (*v1)
    v5 = v2;
  else
    v5 = 0xE800000000000000;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_F7768()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7);
  v2 = 0xE700000000000000;
  v3 = 0x656C6369747261;
  if (v1 != 1)
  {
    v3 = 0x656E696C6E69;
    v2 = 0xE600000000000000;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 0x647261646E617473;
  if (v1)
    v5 = v2;
  else
    v5 = 0xE800000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

unint64_t sub_F7800@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  Swift::OpaquePointer v3;
  unint64_t result;

  v3._rawValue = &off_373C88;
  result = sub_F88F8(*a1, v3);
  *a2 = result;
  return result;
}

void sub_F7834(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE800000000000000;
  v4 = 0xE700000000000000;
  v5 = 0x656C6369747261;
  if (v2 != 1)
  {
    v5 = 0x656E696C6E69;
    v4 = 0xE600000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x647261646E617473;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t Paragraph.__allocating_init(text:alignment:style:isCollapsed:isLinkDetectionEnabled:shareSheetContentSource:impressionMetrics:)(uint64_t a1, char a2, char a3, char a4, char a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v15;

  swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  v15 = sub_F80AC(a1, a2, a3, a4, a5, a6, a7);

  return v15;
}

uint64_t Paragraph.init(text:alignment:style:isCollapsed:isLinkDetectionEnabled:shareSheetContentSource:impressionMetrics:)(uint64_t a1, char a2, char a3, char a4, char a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;

  v8 = sub_F80AC(a1, a2, a3, a4, a5, a6, a7);

  return v8;
}

uint64_t Paragraph.__allocating_init(deserializing:using:)(char *a1, uint64_t a2)
{
  return sub_F81EC(a1, a2);
}

uint64_t Paragraph.text.getter()
{
  uint64_t v0;
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = (id)(v1 & 0x3FFFFFFFFFFFFFFFLL);
  return v1;
}

uint64_t Paragraph.alignment.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 40);
}

uint64_t Paragraph.style.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 41);
}

uint64_t Paragraph.isCollapsed.getter()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 42, v2, 0, 0);
  return *(unsigned __int8 *)(v0 + 42);
}

uint64_t Paragraph.isCollapsed.setter(char a1)
{
  uint64_t v1;
  uint64_t result;
  _BYTE v4[24];

  result = swift_beginAccess(v1 + 42, v4, 1, 0);
  *(_BYTE *)(v1 + 42) = a1;
  return result;
}

uint64_t (*Paragraph.isCollapsed.modify(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + 42, a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t Paragraph.isLinkDetectionEnabled.getter()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 43, v2, 0, 0);
  return *(unsigned __int8 *)(v0 + 43);
}

uint64_t Paragraph.isLinkDetectionEnabled.setter(char a1)
{
  uint64_t v1;
  uint64_t result;
  _BYTE v4[24];

  result = swift_beginAccess(v1 + 43, v4, 1, 0);
  *(_BYTE *)(v1 + 43) = a1;
  return result;
}

uint64_t (*Paragraph.isLinkDetectionEnabled.modify(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + 43, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t Paragraph.shareSheetContentSource.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_267BC(v1 + OBJC_IVAR____TtC8ShelfKit9Paragraph_shareSheetContentSource, a1, &qword_3B92D0);
}

double Paragraph.clickSender.getter@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t Paragraph.impressionMetrics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_267BC(v1 + OBJC_IVAR____TtC8ShelfKit9Paragraph_impressionMetrics, a1, (uint64_t *)&unk_3B8790);
}

uint64_t Paragraph.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  sub_1459C(v0 + OBJC_IVAR____TtC8ShelfKit9Paragraph_shareSheetContentSource, &qword_3B92D0);
  sub_1459C(v0 + OBJC_IVAR____TtC8ShelfKit9Paragraph_impressionMetrics, (uint64_t *)&unk_3B8790);
  return v0;
}

uint64_t Paragraph.__deallocating_deinit()
{
  _QWORD *v0;

  swift_bridgeObjectRelease();

  sub_1459C((uint64_t)v0 + OBJC_IVAR____TtC8ShelfKit9Paragraph_shareSheetContentSource, &qword_3B92D0);
  sub_1459C((uint64_t)v0 + OBJC_IVAR____TtC8ShelfKit9Paragraph_impressionMetrics, (uint64_t *)&unk_3B8790);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_F7C0C@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t result;

  result = sub_F81EC(a1, a2);
  if (!v3)
    *a3 = result;
  return result;
}

uint64_t sub_F7C34@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return sub_267BC(*v1 + OBJC_IVAR____TtC8ShelfKit9Paragraph_impressionMetrics, a1, (uint64_t *)&unk_3B8790);
}

id _s8ShelfKit9ParagraphC4TextO4text9mediaType5styleAESSSg_AC05MediaG0OAC5StyleOtcfC_0(uint64_t a1, void *a2, char a3, char a4)
{
  const UIFontTextStyle *v6;
  UIFontTextStyle v7;
  void *v8;
  uint64_t v9;
  NSString *v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  objc_class *v16;
  double v17;
  double v18;
  id v19;
  id v20;
  Class isa;
  id v22;
  Swift::String v23;
  Class v24;
  id v25;
  id result;
  objc_class *v27;
  char Attributed;
  id v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  objc_class *v33;
  char v34;
  id v35;
  void *v36;
  NSString v37;
  id v38;
  void *v39;
  id v40;
  id v41;
  id v42;
  uint64_t v43;
  objc_class *v44;
  char v45;
  id v46;
  uint64_t v47;
  ShelfKit::NqmlConfiguration configuration;

  if (!a2)
  {
    v27 = (objc_class *)type metadata accessor for LanguageAwareString(0);
    Attributed = static LanguageAwareString.alwaysGenerateAttributedString.getter();
    v29 = objc_allocWithZone(v27);
    v30 = Attributed & 1;
    v31 = 0;
    v32 = 0xE000000000000000;
    return (id)LanguageAwareString.init(_:baseParagraphStyle:generateAttributedString:)(v31, v32, 0, v30);
  }
  if (!a3)
  {
    v33 = (objc_class *)type metadata accessor for LanguageAwareString(0);
    v34 = static LanguageAwareString.alwaysGenerateAttributedString.getter();
    v35 = objc_allocWithZone(v33);
    v30 = v34 & 1;
    v31 = a1;
    v32 = (unint64_t)a2;
    return (id)LanguageAwareString.init(_:baseParagraphStyle:generateAttributedString:)(v31, v32, 0, v30);
  }
  if (a3 != 1)
  {
    v36 = (void *)objc_opt_self(NSAttributedString);
    v37 = String._bridgeToObjectiveC()();
    v38 = objc_msgSend(v36, "safeAttributedStringWithHTML:attributes:", v37, 0);

    if (v38)
    {
      result = objc_msgSend(v38, "attributedStringWithDefaultLineSpacing");
      if (!result)
      {
        __break(1u);
        return result;
      }
      v39 = result;
      v40 = objc_msgSend(result, "attributedStringByTrimmingWhitespaceNewlinesAndObjectReplacementCharacters");

      if (v40)
      {
        v41 = v40;
        swift_bridgeObjectRelease();
        v42 = objc_allocWithZone((Class)type metadata accessor for LanguageAwareString(0));
        v43 = LanguageAwareString.init(_:baseParagraphStyle:)(v41, 0);

        return (id)(v43 | 0x8000000000000000);
      }
    }
    v44 = (objc_class *)type metadata accessor for LanguageAwareString(0);
    v45 = static LanguageAwareString.alwaysGenerateAttributedString.getter();
    v46 = objc_allocWithZone(v44);
    return (id)(LanguageAwareString.init(_:baseParagraphStyle:generateAttributedString:)(a1, a2, 0, v45 & 1) | 0x8000000000000000);
  }
  v6 = &UIFontTextStyleTitle3;
  if (a4 != 1)
    v6 = &UIFontTextStyleBody;
  v7 = *v6;
  v47 = sub_327F8(0, &qword_3B9408, NSAttributedString_ptr);
  v8 = (void *)objc_opt_self(UIFont);
  v9 = qword_3B00E0;
  v10 = v7;
  if (v9 != -1)
    swift_once(&qword_3B00E0, sub_F68CC);
  v11 = objc_msgSend(v8, "preferredFontForTextStyle:compatibleWithTraitCollection:", v10, qword_3B92C0, v47);

  v12 = (void *)sub_2881B4((uint64_t)_swiftEmptyArrayStorage);
  v13 = (void *)sub_2882F8((uint64_t)_swiftEmptyArrayStorage);
  v14 = (void *)objc_opt_self(NSParagraphStyle);
  v15 = v11;
  v16 = (objc_class *)objc_msgSend(v14, "defaultParagraphStyle");
  objc_msgSend(v15, "pointSize");
  v18 = v17;
  v19 = objc_msgSend(objc_allocWithZone((Class)NSMutableParagraphStyle), "init");
  objc_msgSend(v19, "setFirstLineHeadIndent:", 0.0);
  objc_msgSend(v19, "setHeadIndent:", v18);
  objc_msgSend(v19, "setDefaultTabInterval:", v18);
  sub_288198((uint64_t)_swiftEmptyArrayStorage);
  v20 = objc_allocWithZone((Class)NSTextTab);
  type metadata accessor for OptionKey(0);
  sub_F1C0((unint64_t *)&qword_3B06A8, type metadata accessor for OptionKey, (uint64_t)&unk_2E94A4);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v22 = objc_msgSend(v20, "initWithTextAlignment:location:options:", 4, isa, v18);

  objc_msgSend(v19, "addTabStop:", v22);
  configuration.newline._countAndFlagsBits = 10;
  configuration.newline._object = (void *)0xE100000000000000;
  configuration.font.super.isa = (Class)v15;
  configuration.paragraphStyle.super.isa = v16;
  configuration.listItemBullet._countAndFlagsBits = 547520738;
  configuration.listItemBullet._object = (void *)0xA400000000000000;
  configuration.listItemStyle.super.isa = (Class)v19;
  configuration.markAttributes._rawValue = v12;
  configuration.markFontAttributes._rawValue = v13;
  v23._countAndFlagsBits = a1;
  v23._object = a2;
  v24 = NSAttributedString.init(nqml:configuration:)(v23, &configuration).super.isa;
  v25 = objc_allocWithZone((Class)type metadata accessor for LanguageAwareString(0));
  return (id)(LanguageAwareString.init(_:baseParagraphStyle:)(v24, 0) | 0x4000000000000000);
}

uint64_t sub_F80AC(uint64_t a1, char a2, char a3, char a4, char a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;

  v8 = v7;
  v25 = a7;
  v15 = type metadata accessor for UUID(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v8 + 32) = a1;
  *(_BYTE *)(v8 + 40) = a2;
  *(_BYTE *)(v8 + 41) = a3;
  *(_BYTE *)(v8 + 42) = a4;
  *(_BYTE *)(v8 + 43) = a5;
  sub_267BC(a6, v8 + OBJC_IVAR____TtC8ShelfKit9Paragraph_shareSheetContentSource, &qword_3B92D0);
  v19 = v25;
  sub_267BC(v25, v8 + OBJC_IVAR____TtC8ShelfKit9Paragraph_impressionMetrics, (uint64_t *)&unk_3B8790);
  UUID.init()((id)(a1 & 0x3FFFFFFFFFFFFFFFLL));
  v20 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
  v22 = v21;
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  sub_1459C(v19, (uint64_t *)&unk_3B8790);
  sub_1459C(a6, &qword_3B92D0);
  *(_QWORD *)(v8 + 16) = v20;
  *(_QWORD *)(v8 + 24) = v22;
  return v8;
}

uint64_t sub_F81EC(char *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int (**v6)(uint64_t, uint64_t, _QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void (*v34)(char *, uint64_t);
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  void (*v55)(char *, uint64_t);
  uint64_t v56;
  char v57;
  char v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v69;
  uint64_t v70;
  int v71;
  void *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  unsigned int (**v81)(uint64_t, uint64_t, _QWORD);
  uint64_t v82;
  void (*v83)(char *, uint64_t);
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  uint64_t v91;

  v89 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2C18);
  __chkstk_darwin(v3);
  v79 = (char *)&v69 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for EpisodeOffer(0);
  v6 = *(unsigned int (***)(uint64_t, uint64_t, _QWORD))(v5 - 8);
  v80 = v5;
  v81 = v6;
  __chkstk_darwin(v5);
  v70 = (uint64_t)&v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B92D0);
  v9 = __chkstk_darwin(v8);
  v88 = (uint64_t)&v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v75 = (uint64_t)&v69 - v11;
  v12 = type metadata accessor for JSONContext(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v69 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  v17 = __chkstk_darwin(v16);
  v84 = (uint64_t)&v69 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v20 = (char *)&v69 - v19;
  v21 = type metadata accessor for JSONObject(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = __chkstk_darwin(v21);
  v77 = (char *)&v69 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __chkstk_darwin(v23);
  v76 = (char *)&v69 - v26;
  v27 = __chkstk_darwin(v25);
  v74 = (char *)&v69 - v28;
  __chkstk_darwin(v27);
  v30 = (char *)&v69 - v29;
  v31 = JSONObject.subscript.getter(1954047348, 0xE400000000000000);
  v32 = JSONObject.string.getter(v31);
  v72 = v33;
  v73 = v32;
  v34 = *(void (**)(char *, uint64_t))(v22 + 8);
  v34(v30, v21);
  JSONObject.subscript.getter(0x707954616964656DLL, 0xE900000000000065);
  v35 = sub_F8E3C();
  JSONObject.stringEnum<A>(or:)((uint64_t *)((char *)&v91 + 2), sub_BE128, 0, &type metadata for Paragraph.MediaType, v35);
  v34(v30, v21);
  v71 = BYTE2(v91);
  JSONObject.subscript.getter(0x656C797473, 0xE500000000000000);
  v36 = sub_F8E80();
  JSONObject.stringEnum<A>(or:)((uint64_t *)((char *)&v91 + 1), sub_BE128, 0, &type metadata for Paragraph.Style, v36);
  v82 = v21;
  v83 = v34;
  v34(v30, v21);
  v90 = BYTE1(v91);
  v37 = type metadata accessor for ImpressionMetrics(0);
  JSONObject.subscript.getter(0xD000000000000011, 0x8000000000309180);
  v86 = v13;
  v38 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v39 = v89;
  v38(v15, v89, v12);
  v85 = v20;
  v40 = (uint64_t)v79;
  ExpressibleByJSON.init(tryDeserializing:using:)(v30, v15, v37);
  JSONObject.subscript.getter(0x4F65646F73697065, 0xEC00000072656666);
  v87 = v12;
  v38(v15, v39, v12);
  sub_F1C0((unint64_t *)&qword_3B0C88, (void (*)(uint64_t))type metadata accessor for EpisodeOffer, (uint64_t)&protocol conformance descriptor for EpisodeOffer);
  v41 = v30;
  v42 = v80;
  ExpressibleByJSON.init(tryDeserializing:using:)(v41, v15, v80);
  if (v81[6](v40, 1, v42) == 1)
  {
    sub_1459C(v40, &qword_3B2C18);
    v43 = type metadata accessor for ShareSheetContentSource(0);
    v44 = v75;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56))(v75, 1, 1, v43);
  }
  else
  {
    v45 = v40;
    v46 = v70;
    sub_1E4B0(v45, v70);
    v44 = v75;
    sub_1E4B0(v46, v75);
    v47 = type metadata accessor for ShareSheetContentSource(0);
    swift_storeEnumTagMultiPayload(v44, v47, 0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 56))(v44, 0, 1, v47);
  }
  v49 = v77;
  v48 = v78;
  v50 = v76;
  v51 = v74;
  v81 = (unsigned int (**)(uint64_t, uint64_t, _QWORD))_s8ShelfKit9ParagraphC4TextO4text9mediaType5styleAESSSg_AC05MediaG0OAC5StyleOtcfC_0(v73, v72, v71, v90);
  JSONObject.subscript.getter(0x6E656D6E67696C61, 0xE900000000000074);
  v52 = sub_F8EC4();
  JSONObject.stringEnum<A>()(&v91, &type metadata for Paragraph.Alignment, v52);
  if (v48)
  {
    swift_errorRelease(v48);
    v80 = 0;
    LODWORD(v79) = 4;
  }
  else
  {
    LODWORD(v79) = v91;
    v80 = 0;
  }
  v53 = v51;
  v54 = v82;
  v55 = v83;
  v83(v53, v82);
  v56 = JSONObject.subscript.getter(0x70616C6C6F437369, 0xEB00000000646573);
  v57 = JSONObject.BOOL.getter(v56);
  v55(v50, v54);
  v58 = (v57 == 2) | v57;
  v59 = JSONObject.subscript.getter(0xD000000000000016, 0x800000000030ED50);
  v60 = JSONObject.BOOL.getter(v59);
  v55(v49, v54);
  v61 = v88;
  sub_267BC(v44, v88, &qword_3B92D0);
  v63 = v84;
  v62 = (uint64_t)v85;
  sub_267BC((uint64_t)v85, v84, (uint64_t *)&unk_3B8790);
  v64 = type metadata accessor for Paragraph(0);
  swift_allocObject(v64, *(unsigned int *)(v64 + 48), *(unsigned __int16 *)(v64 + 52));
  v65 = v58 & 1;
  v66 = (unint64_t)v81;
  v67 = sub_F80AC((uint64_t)v81, (char)v79, v90, v65, v60 & 1, v61, v63);

  (*(void (**)(uint64_t, uint64_t))(v86 + 8))(v89, v87);
  v55(a1, v54);
  sub_1459C(v44, &qword_3B92D0);
  sub_1459C(v62, (uint64_t *)&unk_3B8790);
  return v67;
}

unint64_t _s8ShelfKit9ParagraphC9AlignmentO8rawValueAESgSS_tcfC_0(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_373C08, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4)
    return 4;
  else
    return v3;
}

unint64_t sub_F88F8(Swift::String string, Swift::OpaquePointer cases)
{
  void *object;
  Swift::String v3;
  unint64_t v5;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)(cases, v3);
  swift_bridgeObjectRelease(object);
  if (v5 >= 3)
    return 3;
  else
    return v5;
}

unint64_t sub_F8940()
{
  unint64_t result;

  result = qword_3B92D8;
  if (!qword_3B92D8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Paragraph.MediaType);
    atomic_store(result, (unint64_t *)&qword_3B92D8);
  }
  return result;
}

unint64_t sub_F8988()
{
  unint64_t result;

  result = qword_3B92E0;
  if (!qword_3B92E0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Paragraph.Alignment);
    atomic_store(result, (unint64_t *)&qword_3B92E0);
  }
  return result;
}

unint64_t sub_F89D0()
{
  unint64_t result;

  result = qword_3B92E8;
  if (!qword_3B92E8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Paragraph.Style);
    atomic_store(result, (unint64_t *)&qword_3B92E8);
  }
  return result;
}

uint64_t sub_F8A14(uint64_t a1)
{
  uint64_t result;

  result = sub_F1C0(&qword_3B67B0, (void (*)(uint64_t))type metadata accessor for Paragraph, (uint64_t)&protocol conformance descriptor for Paragraph);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for Paragraph(uint64_t a1)
{
  uint64_t result;

  result = qword_3B9320;
  if (!qword_3B9320)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for Paragraph);
  return result;
}

uint64_t sub_F8A8C(uint64_t a1)
{
  uint64_t result;

  result = sub_F1C0(&qword_3B92F0, (void (*)(uint64_t))type metadata accessor for Paragraph, (uint64_t)&protocol conformance descriptor for Paragraph);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_F8AC8()
{
  return type metadata accessor for Paragraph(0);
}

void sub_F8AD0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[8];

  v6[0] = &unk_2F5128;
  v6[1] = &unk_2F5140;
  v6[2] = &unk_2F5158;
  v6[3] = &unk_2F5170;
  v6[4] = &unk_2F5188;
  v6[5] = &unk_2F5188;
  sub_3EE70(319, (unint64_t *)&unk_3B9330, type metadata accessor for ShareSheetContentSource);
  if (v3 <= 0x3F)
  {
    v6[6] = *(_QWORD *)(v2 - 8) + 64;
    sub_3EE70(319, (unint64_t *)&qword_3B2250, (uint64_t (*)(uint64_t))&type metadata accessor for ImpressionMetrics);
    if (v5 <= 0x3F)
    {
      v6[7] = *(_QWORD *)(v4 - 8) + 64;
      swift_updateClassMetadata2(a1, 256, 8, v6, a1 + 80);
    }
  }
}

uint64_t method lookup function for Paragraph(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for Paragraph);
}

uint64_t dispatch thunk of Paragraph.__allocating_init(text:alignment:style:isCollapsed:isLinkDetectionEnabled:shareSheetContentSource:impressionMetrics:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t dispatch thunk of Paragraph.__allocating_init(deserializing:using:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 152))();
}

_QWORD *initializeBufferWithCopyOfBuffer for Paragraph.Text(_QWORD *a1, _QWORD *a2)
{
  void *v3;
  id v4;

  v3 = (void *)(*a2 & 0x3FFFFFFFFFFFFFFFLL);
  *a1 = *a2;
  v4 = v3;
  return a1;
}

void destroy for Paragraph.Text(_QWORD *a1)
{

}

uint64_t *assignWithCopy for Paragraph.Text(uint64_t *a1, uint64_t *a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;

  v3 = (void *)(*a2 & 0x3FFFFFFFFFFFFFFFLL);
  v4 = *a1;
  *a1 = *a2;
  v5 = (void *)(v4 & 0x3FFFFFFFFFFFFFFFLL);
  v6 = v3;

  return a1;
}

uint64_t *assignWithTake for Paragraph.Text(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a1;
  *a1 = *a2;

  return a1;
}

ValueMetadata *type metadata accessor for Paragraph.Text()
{
  return &type metadata for Paragraph.Text;
}

ValueMetadata *type metadata accessor for Paragraph.MediaType()
{
  return &type metadata for Paragraph.MediaType;
}

uint64_t storeEnumTagSinglePayload for Paragraph.Alignment(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_F8CF0 + 4 * byte_2F4E09[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_F8D24 + 4 * byte_2F4E04[v4]))();
}

uint64_t sub_F8D24(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_F8D2C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xF8D34);
  return result;
}

uint64_t sub_F8D40(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xF8D48);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_F8D4C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_F8D54(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Paragraph.Alignment()
{
  return &type metadata for Paragraph.Alignment;
}

uint64_t _s8ShelfKit9ParagraphC5StyleOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_F8DBC + 4 * byte_2F4E13[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_F8DF0 + 4 * byte_2F4E0E[v4]))();
}

uint64_t sub_F8DF0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_F8DF8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xF8E00);
  return result;
}

uint64_t sub_F8E0C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xF8E14);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_F8E18(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_F8E20(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Paragraph.Style()
{
  return &type metadata for Paragraph.Style;
}

unint64_t sub_F8E3C()
{
  unint64_t result;

  result = qword_3B93F0;
  if (!qword_3B93F0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Paragraph.MediaType);
    atomic_store(result, (unint64_t *)&qword_3B93F0);
  }
  return result;
}

unint64_t sub_F8E80()
{
  unint64_t result;

  result = qword_3B93F8;
  if (!qword_3B93F8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Paragraph.Style);
    atomic_store(result, (unint64_t *)&qword_3B93F8);
  }
  return result;
}

unint64_t sub_F8EC4()
{
  unint64_t result;

  result = qword_3B9400;
  if (!qword_3B9400)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Paragraph.Alignment);
    atomic_store(result, (unint64_t *)&qword_3B9400);
  }
  return result;
}

id UIButton.init(menu:asPartOf:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  id v14;
  NSString v15;
  id v16;
  void *v17;
  void *v18;
  id v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  objc_class *v33;
  uint64_t v34;
  Swift::String v35;
  Swift::String_optional v36;
  Class isa;
  id v38;
  _QWORD *v40;
  Swift::OpaquePointer v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  unint64_t v47;
  UIImage_optional v48;

  v3 = v2;
  v46 = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
  __chkstk_darwin(v5);
  v7 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ActionMenu(0);
  __chkstk_darwin(v8);
  v10 = (unint64_t *)((char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v11);
  v13 = (unint64_t *)((char *)&v42 - v12);
  v14 = objc_msgSend((id)swift_getObjCClassFromMetadata(v3), "buttonWithType:", 1);
  v15 = String._bridgeToObjectiveC()();
  objc_msgSend(v14, "setTitle:forState:", v15, 0);

  v45 = v14;
  v16 = objc_msgSend(v14, "titleLabel");
  if (v16)
  {
    v17 = v16;
    v18 = (void *)objc_opt_self(UIFont);
    static Glyph.HeaderButtons.headerButtonsPointSize.getter();
    v19 = objc_msgSend(v18, "boldSystemFontOfSize:");
    objc_msgSend(v17, "setFont:", v19);

  }
  v43 = sub_288454((uint64_t)_swiftEmptyArrayStorage);
  v20 = type metadata accessor for ArtworkModel(0);
  v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56);
  v21(v7, 1, 1, v20);
  v22 = *(_QWORD *)(a1 + *(int *)(v8 + 32));
  swift_bridgeObjectRetain();
  v23 = _s8ShelfKit10ActionMenuV2IDVAEycfC_0();
  v44 = a1;
  v25 = v24;
  v26 = (uint64_t)v7;
  v27 = (uint64_t)v10 + *(int *)(v8 + 28);
  v21((char *)v27, 1, 1, v20);
  *v10 = v23;
  v10[1] = v25;
  v10[2] = 0;
  v10[3] = 0xE000000000000000;
  v10[4] = 0;
  v10[5] = 0;
  sub_48E00(v26, v27);
  *(unint64_t *)((char *)v10 + *(int *)(v8 + 32)) = v22;
  sub_F9488((uint64_t)v10, (uint64_t)v13);
  v42 = sub_F94CC();
  v28 = v13[2];
  v29 = (void *)v13[3];
  v30 = v13[4];
  v31 = (void *)v13[5];
  v32 = (uint64_t)v13 + *(int *)(v8 + 28);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v33 = (objc_class *)_s8ShelfKit11SystemGlyphC4load7artworkSo7UIImageCSg18PodcastsFoundation12ArtworkModelVSg_tFZ_0(v32);
  LOBYTE(v21) = String._bridgeToObjectiveC()();
  v47 = v43;
  v34 = v46;
  v40 = ActionMenuBuilder.buildMenuElements(for:asPartOf:)(*(_QWORD *)((char *)v13 + *(int *)(v8 + 32)), v46);
  v35._countAndFlagsBits = v28;
  v35._object = v29;
  v36.value._countAndFlagsBits = v30;
  v36.value._object = v31;
  v48.value.super.isa = v33;
  v48.is_nil = (char)v21;
  isa = UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v35, v36, v48, 0, 0xFFFFFFFFFFFFFFFFLL, (UIMenuElementSize)v40, v41).super.super.isa;
  sub_F9508((uint64_t)v13);
  swift_bridgeObjectRelease();
  v38 = v45;
  objc_msgSend(v45, "setMenu:", isa);

  objc_msgSend(v38, "setShowsMenuAsPrimaryAction:", 1);
  swift_release(v34);
  sub_F9508(v44);
  return v38;
}

id UIButton.setMenu(_:asPartOf:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  objc_class *v24;
  Swift::String v25;
  Swift::String_optional v26;
  Class isa;
  id v28;
  _QWORD *v30;
  Swift::OpaquePointer v31;
  unint64_t v32;
  uint64_t v33;
  id v34;
  unint64_t v35;
  UIImage_optional v36;

  v33 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
  __chkstk_darwin(v3);
  v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ActionMenu(0);
  __chkstk_darwin(v6);
  v8 = (unint64_t *)((char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v9);
  v11 = (unint64_t *)((char *)&v32 - v10);
  v32 = sub_288454((uint64_t)_swiftEmptyArrayStorage);
  v12 = type metadata accessor for ArtworkModel(0);
  v13 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56);
  v13(v5, 1, 1, v12);
  v14 = *(_QWORD *)(a1 + *(int *)(v6 + 32));
  swift_bridgeObjectRetain();
  v15 = _s8ShelfKit10ActionMenuV2IDVAEycfC_0();
  v17 = v16;
  v18 = (uint64_t)v8 + *(int *)(v6 + 28);
  v13((char *)v18, 1, 1, v12);
  *v8 = v15;
  v8[1] = v17;
  v8[2] = 0;
  v8[3] = 0xE000000000000000;
  v8[4] = 0;
  v8[5] = 0;
  sub_48E00((uint64_t)v5, v18);
  *(unint64_t *)((char *)v8 + *(int *)(v6 + 32)) = v14;
  sub_F9488((uint64_t)v8, (uint64_t)v11);
  sub_F94CC();
  v19 = v11[2];
  v20 = (void *)v11[3];
  v21 = v11[4];
  v22 = (void *)v11[5];
  v23 = (uint64_t)v11 + *(int *)(v6 + 28);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v24 = (objc_class *)_s8ShelfKit11SystemGlyphC4load7artworkSo7UIImageCSg18PodcastsFoundation12ArtworkModelVSg_tFZ_0(v23);
  LOBYTE(v15) = String._bridgeToObjectiveC()();
  v35 = v32;
  v30 = ActionMenuBuilder.buildMenuElements(for:asPartOf:)(*(_QWORD *)((char *)v11 + *(int *)(v6 + 32)), v33);
  v25._countAndFlagsBits = v19;
  v25._object = v20;
  v26.value._countAndFlagsBits = v21;
  v26.value._object = v22;
  v36.value.super.isa = v24;
  v36.is_nil = v15;
  isa = UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v25, v26, v36, 0, 0xFFFFFFFFFFFFFFFFLL, (UIMenuElementSize)v30, v31).super.super.isa;
  sub_F9508((uint64_t)v11);
  swift_bridgeObjectRelease();
  v28 = v34;
  objc_msgSend(v34, "setMenu:", isa);

  return objc_msgSend(v28, "setShowsMenuAsPrimaryAction:", 1);
}

uint64_t sub_F9488(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ActionMenu(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_F94CC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_3B9410;
  if (!qword_3B9410)
  {
    v1 = objc_opt_self(UIMenu);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_3B9410);
  }
  return result;
}

uint64_t sub_F9508(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ActionMenu(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t RefollowAllRecentlyUnfollowedShowsAction.__allocating_init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  id v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  Swift::String v25;

  v1 = v0;
  v24 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for ActionMetrics(0);
  v5 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v8);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  v12 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v13._countAndFlagsBits = 0xD000000000000011;
  v25._object = (void *)0x800000000030B070;
  v13._object = (void *)0x800000000030B050;
  v14._countAndFlagsBits = 0;
  v14._object = (void *)0xE000000000000000;
  v25._countAndFlagsBits = 0xD000000000000010;
  v15 = NSLocalizedString(_:tableName:bundle:value:comment:)(v13, (Swift::String_optional)0, (NSBundle)v12, v14, v25);

  v16 = type metadata accessor for ImpressionMetrics(0);
  v17 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v10, 1, 1, v16);
  v18 = static ActionMetrics.notInstrumented.getter(v17);
  UUID.init()(v18);
  v19 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
  v21 = v20;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v24);
  *(_QWORD *)(v11 + 16) = v19;
  *(_QWORD *)(v11 + 24) = v21;
  *(Swift::String *)(v11 + 32) = v15;
  *(_BYTE *)(v11 + 48) = 32;
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v11 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v7, v23);
  sub_23AB8((uint64_t)v10, v11 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics);
  return v11;
}

uint64_t RefollowAllRecentlyUnfollowedShowsAction.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  Swift::String v24;

  v1 = v0;
  v23 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for ActionMetrics(0);
  v5 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v8);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v12._countAndFlagsBits = 0xD000000000000011;
  v24._object = (void *)0x800000000030B070;
  v12._object = (void *)0x800000000030B050;
  v13._countAndFlagsBits = 0;
  v13._object = (void *)0xE000000000000000;
  v24._countAndFlagsBits = 0xD000000000000010;
  v14 = NSLocalizedString(_:tableName:bundle:value:comment:)(v12, (Swift::String_optional)0, (NSBundle)v11, v13, v24);

  v15 = type metadata accessor for ImpressionMetrics(0);
  v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v10, 1, 1, v15);
  v17 = static ActionMetrics.notInstrumented.getter(v16);
  UUID.init()(v17);
  v18 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
  v20 = v19;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v23);
  *(_QWORD *)(v1 + 16) = v18;
  *(_QWORD *)(v1 + 24) = v20;
  *(Swift::String *)(v1 + 32) = v14;
  *(_BYTE *)(v1 + 48) = 32;
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v1 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v7, v22);
  sub_23AB8((uint64_t)v10, v1 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics);
  return v1;
}

void RefollowAllRecentlyUnfollowedShowsAction.init(uniqueId:title:presentationStyle:actionMetrics:impressionMetrics:)()
{
  _swift_stdlib_reportUnimplementedInitializer("ShelfKit.RefollowAllRecentlyUnfollowedShowsAction", 49, "init(uniqueId:title:presentationStyle:actionMetrics:impressionMetrics:)", 71, 0);
  __break(1u);
}

uint64_t sub_F999C()
{
  return type metadata accessor for RefollowAllRecentlyUnfollowedShowsAction(0);
}

uint64_t type metadata accessor for RefollowAllRecentlyUnfollowedShowsAction(uint64_t a1)
{
  uint64_t result;

  result = qword_3B9440;
  if (!qword_3B9440)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RefollowAllRecentlyUnfollowedShowsAction);
  return result;
}

uint64_t method lookup function for RefollowAllRecentlyUnfollowedShowsAction(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for RefollowAllRecentlyUnfollowedShowsAction);
}

uint64_t dispatch thunk of RefollowAllRecentlyUnfollowedShowsAction.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 160))();
}

uint64_t RecommendationsMetadata.Episodes.Metadata.duration.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

void __swiftcall LoadingAction.Configuration.init(title:showsLoadingIndicator:dismissAfter:)(ShelfKit::LoadingAction::Configuration *__return_ptr retstr, Swift::String title, Swift::Bool showsLoadingIndicator, Swift::Double_optional dismissAfter)
{
  char v4;

  retstr->title = title;
  retstr->showsLoadingIndicator = showsLoadingIndicator;
  retstr->dismissAfter.value = *(Swift::Double *)&dismissAfter.is_nil;
  retstr->dismissAfter.is_nil = v4 & 1;
}

void sub_F9A18()
{
  id v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;

  v0 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v4._object = (void *)0xE000000000000000;
  v1._object = (void *)0x800000000030EEC0;
  v1._countAndFlagsBits = 0xD00000000000001CLL;
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  v4._countAndFlagsBits = 0;
  v3 = NSLocalizedString(_:tableName:bundle:value:comment:)(v1, (Swift::String_optional)0, (NSBundle)v0, v2, v4);

  xmmword_3B9510 = (__int128)v3;
  byte_3B9520 = 1;
  qword_3B9528 = 0;
  byte_3B9530 = 1;
}

uint64_t static LoadingAction.Configuration.oauthStartingConfiguration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;

  if (qword_3B00E8 != -1)
    swift_once(&qword_3B00E8, sub_F9A18);
  v2 = *((_QWORD *)&xmmword_3B9510 + 1);
  v3 = byte_3B9520;
  v4 = qword_3B9528;
  v5 = byte_3B9530;
  *(_QWORD *)a1 = xmmword_3B9510;
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = v5;
  return swift_bridgeObjectRetain();
}

void sub_F9B34()
{
  id v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;

  v0 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v4._object = (void *)0xE000000000000000;
  v1._object = (void *)0x800000000030EE90;
  v1._countAndFlagsBits = 0xD000000000000029;
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  v4._countAndFlagsBits = 0;
  v3 = NSLocalizedString(_:tableName:bundle:value:comment:)(v1, (Swift::String_optional)0, (NSBundle)v0, v2, v4);

  xmmword_3B9538 = (__int128)v3;
  byte_3B9548 = 0;
  qword_3B9550 = 0x4000000000000000;
  byte_3B9558 = 0;
}

uint64_t static LoadingAction.Configuration.oauthSuccessConfiguration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;

  if (qword_3B00F0 != -1)
    swift_once(&qword_3B00F0, sub_F9B34);
  v2 = *((_QWORD *)&xmmword_3B9538 + 1);
  v3 = byte_3B9548;
  v4 = qword_3B9550;
  v5 = byte_3B9558;
  *(_QWORD *)a1 = xmmword_3B9538;
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = v5;
  return swift_bridgeObjectRetain();
}

uint64_t LoadingAction.ViewToken.init(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;

  *(_QWORD *)(a3 + 8) = 0;
  v5 = swift_unknownObjectWeakInit(a3, 0);
  *(_QWORD *)(v5 + 8) = a2;
  swift_unknownObjectWeakAssign(v5, a1);
  return swift_unknownObjectRelease(a1);
}

uint64_t LoadingAction.config.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;

  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit13LoadingAction_config + 8);
  v3 = *(_BYTE *)(v1 + OBJC_IVAR____TtC8ShelfKit13LoadingAction_config + 16);
  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit13LoadingAction_config + 24);
  v5 = *(_BYTE *)(v1 + OBJC_IVAR____TtC8ShelfKit13LoadingAction_config + 32);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit13LoadingAction_config);
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = v5;
  return swift_bridgeObjectRetain(v2);
}

uint64_t LoadingAction.updateHandler.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit13LoadingAction_updateHandler);
  swift_retain(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit13LoadingAction_updateHandler + 8));
  return v1;
}

uint64_t LoadingAction.__allocating_init(config:updateHandler:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;

  v4 = v3;
  v33 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ActionMetrics(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v15);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v19 = *(_QWORD *)(a1 + 8);
  v20 = *(_BYTE *)(a1 + 16);
  v21 = *(_QWORD *)(a1 + 24);
  v22 = *(_BYTE *)(a1 + 32);
  v23 = v18 + OBJC_IVAR____TtC8ShelfKit13LoadingAction_config;
  *(_QWORD *)v23 = *(_QWORD *)a1;
  *(_QWORD *)(v23 + 8) = v19;
  *(_BYTE *)(v23 + 16) = v20;
  *(_QWORD *)(v23 + 24) = v21;
  *(_BYTE *)(v23 + 32) = v22;
  v24 = (_QWORD *)(v18 + OBJC_IVAR____TtC8ShelfKit13LoadingAction_updateHandler);
  *v24 = a2;
  v24[1] = a3;
  v25 = type metadata accessor for ImpressionMetrics(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v17, 1, 1, v25);
  v26 = swift_retain();
  v27 = static ActionMetrics.notInstrumented.getter(v26);
  UUID.init()(v27);
  v28 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
  v30 = v29;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v33);
  *(_QWORD *)(v18 + 16) = v28;
  *(_QWORD *)(v18 + 24) = v30;
  *(_QWORD *)(v18 + 32) = 0;
  *(_QWORD *)(v18 + 40) = 0;
  *(_BYTE *)(v18 + 48) = 32;
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v18 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v14, v11);
  sub_23AB8((uint64_t)v17, v18 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics);
  swift_release(a3);
  return v18;
}

uint64_t LoadingAction.init(config:updateHandler:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;

  v4 = v3;
  v32 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ActionMetrics(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v15);
  v17 = (char *)&v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(_QWORD *)(a1 + 8);
  v19 = *(_BYTE *)(a1 + 16);
  v20 = *(_QWORD *)(a1 + 24);
  v21 = *(_BYTE *)(a1 + 32);
  v22 = v4 + OBJC_IVAR____TtC8ShelfKit13LoadingAction_config;
  *(_QWORD *)v22 = *(_QWORD *)a1;
  *(_QWORD *)(v22 + 8) = v18;
  *(_BYTE *)(v22 + 16) = v19;
  *(_QWORD *)(v22 + 24) = v20;
  *(_BYTE *)(v22 + 32) = v21;
  v23 = (_QWORD *)(v4 + OBJC_IVAR____TtC8ShelfKit13LoadingAction_updateHandler);
  *v23 = a2;
  v23[1] = a3;
  v24 = type metadata accessor for ImpressionMetrics(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v17, 1, 1, v24);
  v25 = swift_retain();
  v26 = static ActionMetrics.notInstrumented.getter(v25);
  UUID.init()(v26);
  v27 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
  v29 = v28;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v32);
  *(_QWORD *)(v4 + 16) = v27;
  *(_QWORD *)(v4 + 24) = v29;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = 0;
  *(_BYTE *)(v4 + 48) = 32;
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v4 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v14, v11);
  sub_23AB8((uint64_t)v17, v4 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics);
  swift_release(a3);
  return v4;
}

void LoadingAction.init(deserializing:using:)()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000033, 0x800000000030A500, "ShelfKit/LoadingAction.swift", 28, 2, 75, 0);
  __break(1u);
}

void LoadingAction.init(uniqueId:title:presentationStyle:actionMetrics:impressionMetrics:)()
{
  _swift_stdlib_reportUnimplementedInitializer("ShelfKit.LoadingAction", 22, "init(uniqueId:title:presentationStyle:actionMetrics:impressionMetrics:)", 71, 0);
  __break(1u);
}

uint64_t sub_FA150()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit13LoadingAction_config + 8));
  return swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit13LoadingAction_updateHandler + 8));
}

uint64_t LoadingAction.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics;
  v2 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_23B00(v0 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics);
  swift_bridgeObjectRelease();
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit13LoadingAction_updateHandler + 8));
  return v0;
}

uint64_t LoadingAction.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics;
  v2 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_23B00(v0 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics);
  swift_bridgeObjectRelease();
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit13LoadingAction_updateHandler + 8));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_FA2B8()
{
  return type metadata accessor for LoadingAction(0);
}

uint64_t type metadata accessor for LoadingAction(uint64_t a1)
{
  uint64_t result;

  result = qword_3B9588;
  if (!qword_3B9588)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LoadingAction);
  return result;
}

uint64_t sub_FA2FC(uint64_t a1)
{
  _QWORD v2[2];

  v2[0] = &unk_2F5268;
  v2[1] = (char *)&value witness table for () + 64;
  return swift_updateClassMetadata2(a1, 256, 2, v2, a1 + 160);
}

uint64_t method lookup function for LoadingAction(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for LoadingAction);
}

uint64_t initializeWithCopy for LoadingAction.Configuration(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for LoadingAction.Configuration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithTake for LoadingAction.Configuration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for LoadingAction.Configuration(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 33))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LoadingAction.Configuration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 33) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for LoadingAction.Configuration()
{
  return &type metadata for LoadingAction.Configuration;
}

uint64_t initializeWithCopy for LoadingAction.ViewToken(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_unknownObjectWeakCopyInit();
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  return result;
}

uint64_t assignWithCopy for LoadingAction.ViewToken(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_unknownObjectWeakCopyAssign();
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  return result;
}

uint64_t initializeWithTake for LoadingAction.ViewToken(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_unknownObjectWeakTakeInit();
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  return result;
}

uint64_t assignWithTake for LoadingAction.ViewToken(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_unknownObjectWeakTakeAssign();
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  return result;
}

uint64_t getEnumTagSinglePayload for LoadingAction.ViewToken(uint64_t a1, int a2)
{
  int v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  if ((*(_QWORD *)(a1 + 8) & 0xF000000000000007) != 0)
    v2 = *(_DWORD *)a1 & 0x7FFFFFFF;
  else
    v2 = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LoadingAction.ViewToken(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      *(_QWORD *)(result + 8) = 1;
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for LoadingAction.ViewToken()
{
  return &type metadata for LoadingAction.ViewToken;
}

uint64_t dispatch thunk of LibraryRemovalControllerProtocol.removalOptionsAfterUnfollow(uuid:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t Showcase.artwork.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_267BC(v1 + OBJC_IVAR____TtC8ShelfKit8Showcase_artwork, a1, &qword_3BEB70);
}

uint64_t Showcase.showArtwork.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_267BC(v1 + OBJC_IVAR____TtC8ShelfKit8Showcase_showArtwork, a1, &qword_3BEB70);
}

uint64_t Showcase.showAdamId.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit8Showcase_showAdamId);
}

uint64_t Showcase.showMetadata.getter()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit8Showcase_showMetadata));
}

uint64_t Showcase.thumbnailArtwork.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_267BC(v1 + OBJC_IVAR____TtC8ShelfKit8Showcase_thumbnailArtwork, a1, &qword_3BEB70);
}

uint64_t Showcase.clickAction.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_267BC(v1 + OBJC_IVAR____TtC8ShelfKit8Showcase_clickAction, a1, &qword_3B0C50);
}

uint64_t Showcase.playAction.getter()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit8Showcase_playAction));
}

uint64_t Showcase.impressionMetrics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_267BC(v1 + OBJC_IVAR____TtC8ShelfKit8Showcase_impressionMetrics, a1, (uint64_t *)&unk_3B8790);
}

BOOL Showcase.hasThumbnailArtwork.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  _BOOL8 v5;
  uint64_t v7;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
  __chkstk_darwin(v1);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_267BC(v0 + OBJC_IVAR____TtC8ShelfKit8Showcase_thumbnailArtwork, (uint64_t)v3, &qword_3BEB70);
  v4 = type metadata accessor for ArtworkModel(0);
  v5 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(v3, 1, v4) != 1;
  sub_1459C((uint64_t)v3, &qword_3BEB70);
  return v5;
}

uint64_t Showcase.__allocating_init(caption:title:subtitle:overlayingCaption:artwork:showArtwork:showAdamId:showMetadata:thumbnailArtwork:clickAction:playAction:impressionMetrics:shelfUniqueId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;
  uint64_t v26;

  v26 = swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
  Showcase.init(caption:title:subtitle:overlayingCaption:artwork:showArtwork:showAdamId:showMetadata:thumbnailArtwork:clickAction:playAction:impressionMetrics:shelfUniqueId:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12 & 1, a13, a14, a15, a16, a17, a18, a19);
  return v26;
}

_QWORD *Showcase.init(caption:title:subtitle:overlayingCaption:artwork:showArtwork:showAdamId:showMetadata:thumbnailArtwork:clickAction:playAction:impressionMetrics:shelfUniqueId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  _QWORD *v19;
  uint64_t v20;
  char *v21;

  v19[4] = a1;
  v19[5] = a2;
  v19[6] = a3;
  v19[7] = a4;
  v19[8] = a5;
  v19[9] = a6;
  v20 = (uint64_t)v19 + OBJC_IVAR____TtC8ShelfKit8Showcase_artwork;
  v19[10] = a7;
  v19[11] = a8;
  sub_15BD4(a9, v20, &qword_3BEB70);
  sub_15BD4(a10, (uint64_t)v19 + OBJC_IVAR____TtC8ShelfKit8Showcase_showArtwork, &qword_3BEB70);
  v21 = (char *)v19 + OBJC_IVAR____TtC8ShelfKit8Showcase_showAdamId;
  *(_QWORD *)v21 = a11;
  v21[8] = a12 & 1;
  *(_QWORD *)((char *)v19 + OBJC_IVAR____TtC8ShelfKit8Showcase_showMetadata) = a13;
  sub_15BD4(a14, (uint64_t)v19 + OBJC_IVAR____TtC8ShelfKit8Showcase_thumbnailArtwork, &qword_3BEB70);
  sub_15BD4(a15, (uint64_t)v19 + OBJC_IVAR____TtC8ShelfKit8Showcase_clickAction, &qword_3B0C50);
  *(_QWORD *)((char *)v19 + OBJC_IVAR____TtC8ShelfKit8Showcase_playAction) = a16;
  sub_15BD4(a17, (uint64_t)v19 + OBJC_IVAR____TtC8ShelfKit8Showcase_impressionMetrics, (uint64_t *)&unk_3B8790);
  v19[2] = a18;
  v19[3] = a19;
  return v19;
}

uint64_t Showcase.__allocating_init(deserializing:using:)(void (*a1)(char *, uint64_t, uint64_t), uint64_t a2)
{
  return sub_FAD68(a1, a2);
}

uint64_t Showcase.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1459C(v0 + OBJC_IVAR____TtC8ShelfKit8Showcase_artwork, &qword_3BEB70);
  sub_1459C(v0 + OBJC_IVAR____TtC8ShelfKit8Showcase_showArtwork, &qword_3BEB70);
  swift_bridgeObjectRelease();
  sub_1459C(v0 + OBJC_IVAR____TtC8ShelfKit8Showcase_thumbnailArtwork, &qword_3BEB70);
  sub_1459C(v0 + OBJC_IVAR____TtC8ShelfKit8Showcase_clickAction, &qword_3B0C50);
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit8Showcase_playAction));
  sub_1459C(v0 + OBJC_IVAR____TtC8ShelfKit8Showcase_impressionMetrics, (uint64_t *)&unk_3B8790);
  return v0;
}

uint64_t Showcase.__deallocating_deinit()
{
  uint64_t v0;

  Showcase.deinit();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_FAB2C@<X0>(void (*a1)(char *, uint64_t, uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t result;

  result = sub_FAD68(a1, a2);
  if (!v3)
    *a3 = result;
  return result;
}

uint64_t sub_FAB54@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return sub_267BC(*v1 + OBJC_IVAR____TtC8ShelfKit8Showcase_artwork, a1, &qword_3BEB70);
}

uint64_t sub_FAB84@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return sub_267BC(*v1 + OBJC_IVAR____TtC8ShelfKit8Showcase_clickAction, a1, &qword_3B0C50);
}

uint64_t sub_FABB4@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return sub_267BC(*v1 + OBJC_IVAR____TtC8ShelfKit8Showcase_impressionMetrics, a1, (uint64_t *)&unk_3B8790);
}

NSObject_optional __swiftcall Showcase.appEntityAnnotation()()
{
  uint64_t v0;
  uint64_t v1;
  Swift::Bool v2;
  uint64_t v3;
  char *v4;
  objc_class *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[2];
  NSObject_optional result;

  v1 = type metadata accessor for AppEntityVisualState(0);
  __chkstk_darwin(v1);
  v4 = (char *)v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = 0;
  if ((*(_BYTE *)(v0 + OBJC_IVAR____TtC8ShelfKit8Showcase_showAdamId + 8) & 1) == 0)
  {
    v15[0] = *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit8Showcase_showAdamId);
    v6 = sub_144B4();
    v7 = BinaryInteger.description.getter(&type metadata for UInt64, v6);
    v9 = v8;
    v15[0] = _swiftEmptyArrayStorage;
    v10 = sub_F1C0((unint64_t *)&qword_3B1D18, (void (*)(uint64_t))&type metadata accessor for AppEntityVisualState, (uint64_t)&protocol conformance descriptor for AppEntityVisualState);
    v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B1D20);
    v12 = sub_29210();
    dispatch thunk of SetAlgebra.init<A>(_:)(v15, v11, v12, v1, v10);
    v13 = type metadata accessor for ShowEntity(0);
    v15[0] = v7;
    v15[1] = v9;
    objc_allocWithZone((Class)type metadata accessor for AppEntityViewAnnotation(0));
    v14 = sub_F1C0(&qword_3B9668, (void (*)(uint64_t))&type metadata accessor for ShowEntity, (uint64_t)&protocol conformance descriptor for ShowEntity);
    v5 = (objc_class *)AppEntityViewAnnotation.init<A>(entityType:identifier:state:)(v13, v15, v4, v13, v14);
  }
  result.value.isa = v5;
  result.is_nil = v2;
  return result;
}

unint64_t sub_FAD48()
{
  return (unint64_t)Showcase.appEntityAnnotation()();
}

uint64_t sub_FAD68(void (*a1)(char *, uint64_t, uint64_t), uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(uint64_t, uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  void (*v71)(char *, uint64_t, uint64_t);
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(uint64_t, uint64_t);
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t Instance15byDeserializing5usingACSg9JetEngine10JSONObjectV_AH11JSONContextVtFZ_0;
  uint64_t v88;
  void (*v89)(char *, uint64_t);
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  void (*v119)(char *, uint64_t, uint64_t);
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  void (*v128)(char *, uint64_t);
  uint64_t v129;
  __int128 v130;
  __int128 v131;
  uint64_t v132;
  uint64_t v133;

  v123 = a2;
  v3 = type metadata accessor for UUID(0);
  v116 = *(_QWORD *)(v3 - 8);
  v117 = v3;
  __chkstk_darwin(v3);
  v115 = (char *)&v102 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v5);
  v118 = (char *)&v102 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
  v8 = __chkstk_darwin(v7);
  v122 = (uint64_t)&v102 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v121 = (uint64_t)&v102 - v11;
  __chkstk_darwin(v10);
  v120 = (uint64_t)&v102 - v12;
  v133 = type metadata accessor for JSONContext(0);
  v124 = *(_QWORD *)(v133 - 8);
  v13 = __chkstk_darwin(v133);
  v126 = (char *)&v102 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v109 = (uint64_t)&v102 - v15;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4F30);
  __chkstk_darwin(v16);
  v18 = (char *)&v102 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for JSONObject(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = __chkstk_darwin(v19);
  v114 = (char *)&v102 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v21);
  v125 = (char *)&v102 - v24;
  v25 = __chkstk_darwin(v23);
  v112 = (uint64_t)&v102 - v26;
  v27 = __chkstk_darwin(v25);
  v111 = (uint64_t)&v102 - v28;
  v29 = __chkstk_darwin(v27);
  v113 = (uint64_t)&v102 - v30;
  v31 = __chkstk_darwin(v29);
  v110 = (uint64_t)&v102 - v32;
  __chkstk_darwin(v31);
  v34 = (char *)&v102 - v33;
  v35 = type metadata accessor for JSONArray(0);
  v36 = *(_QWORD *)(v35 - 8);
  v37 = __chkstk_darwin(v35);
  v39 = (char *)&v102 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v37);
  v41 = (char *)&v102 - v40;
  v119 = a1;
  v42 = JSONObject.subscript.getter(0x6174654D776F6873, 0xEC00000061746164);
  JSONObject.array.getter(v42);
  v128 = *(void (**)(char *, uint64_t))(v20 + 8);
  v129 = v19;
  v128(v34, v19);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v18, 1, v35) == 1)
  {
    v43 = v123;
    sub_1459C((uint64_t)v18, &qword_3B4F30);
    v104 = _swiftEmptyArrayStorage;
    v44 = (char *)v119;
    v45 = v124;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v41, v18, v35);
    (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v39, v41, v35);
    v46 = v123;
    v47 = v124;
    v48 = v109;
    v49 = v133;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v124 + 16))(v109, v123, v133);
    v50 = sub_FB970();
    v51 = v127;
    v52 = (_QWORD *)Array<A>.init(deserializing:using:)(v39, v48, &type metadata for HeaderModel.MetadataComponent, v50);
    v53 = v49;
    v45 = v47;
    if (v51)
    {
      (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v46, v53);
      v128((char *)v119, v129);
      (*(void (**)(char *, uint64_t))(v36 + 8))(v41, v35);
      return v46;
    }
    v104 = v52;
    v127 = 0;
    v43 = v46;
    (*(void (**)(char *, uint64_t))(v36 + 8))(v41, v35);
    v44 = (char *)v119;
  }
  v54 = v112;
  v55 = v111;
  v56 = v110;
  v57 = JSONObject.subscript.getter(0x6E6F6974706163, 0xE700000000000000);
  v112 = JSONObject.string.getter(v57);
  v111 = v58;
  v59 = v56;
  v61 = (void (*)(uint64_t, uint64_t))v128;
  v60 = v129;
  v128((char *)v59, v129);
  v62 = v113;
  v63 = JSONObject.subscript.getter(0x656C746974, 0xE500000000000000);
  v110 = JSONObject.string.getter(v63);
  v109 = v64;
  v61(v62, v60);
  v65 = JSONObject.subscript.getter(0x656C746974627573, 0xE800000000000000);
  v113 = JSONObject.string.getter(v65);
  v108 = v66;
  v61(v55, v60);
  v67 = JSONObject.subscript.getter(0xD000000000000011, 0x800000000030EF00);
  v107 = JSONObject.string.getter(v67);
  v106 = v68;
  v61(v54, v60);
  v69 = type metadata accessor for ArtworkModel(0);
  v70 = v125;
  JSONObject.subscript.getter(0x6B726F77747261, 0xE700000000000000);
  v71 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 16);
  v72 = v126;
  v73 = v133;
  v71(v126, v43, v133);
  sub_F1C0((unint64_t *)&qword_3B2828, (void (*)(uint64_t))&type metadata accessor for ArtworkModel, (uint64_t)&protocol conformance descriptor for ArtworkModel);
  ExpressibleByJSON.init(tryDeserializing:using:)(v70, v72, v69);
  JSONObject.subscript.getter(0x77747241776F6873, 0xEB000000006B726FLL);
  v119 = v71;
  v71(v72, v43, v73);
  ExpressibleByJSON.init(tryDeserializing:using:)(v70, v72, v69);
  v74 = v114;
  v75 = JSONObject.subscript.getter(0x6D616441776F6873, 0xEA00000000006449);
  v76 = JSONObject.string.getter(v75);
  v78 = v77;
  if (v77)
  {
    v79 = v127;
    v80 = static AdamID.parse(_:)(v76, v77);
    if (v79)
    {
      v81 = swift_bridgeObjectRelease();
      v103 = static AdamID.empty.getter(v81);
      swift_errorRelease(v79);
      v127 = 0;
    }
    else
    {
      v103 = v80;
      v127 = 0;
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    v103 = 0;
  }
  v83 = (void (*)(uint64_t, uint64_t))v128;
  v82 = v129;
  v128(v74, v129);
  v84 = (uint64_t)v125;
  JSONObject.subscript.getter(0xD000000000000010, 0x800000000030EF30);
  v85 = v126;
  v86 = v123;
  v119(v126, v123, v133);
  ExpressibleByJSON.init(tryDeserializing:using:)(v84, v85, v69);
  JSONObject.subscript.getter(0x7463416B63696C63, 0xEB000000006E6F69);
  Instance15byDeserializing5usingACSg9JetEngine10JSONObjectV_AH11JSONContextVtFZ_0 = _s8ShelfKit6ActionC17tryToMakeInstance15byDeserializing5usingACSg9JetEngine10JSONObjectV_AH11JSONContextVtFZ_0(v84, v86);
  v83(v84, v82);
  if (Instance15byDeserializing5usingACSg9JetEngine10JSONObjectV_AH11JSONContextVtFZ_0)
  {
    *((_QWORD *)&v131 + 1) = type metadata accessor for Action(0);
    v132 = sub_F1C0((unint64_t *)&qword_3B28E8, (void (*)(uint64_t))type metadata accessor for Action, (uint64_t)&protocol conformance descriptor for Action);
    *(_QWORD *)&v130 = Instance15byDeserializing5usingACSg9JetEngine10JSONObjectV_AH11JSONContextVtFZ_0;
  }
  else
  {
    v132 = 0;
    v130 = 0u;
    v131 = 0u;
  }
  LODWORD(v114) = v78 == 0;
  v88 = (uint64_t)v125;
  JSONObject.subscript.getter(0x6974634179616C70, 0xEA00000000006E6FLL);
  v105 = _s8ShelfKit6ActionC17tryToMakeInstance15byDeserializing5usingACSg9JetEngine10JSONObjectV_AH11JSONContextVtFZ_0(v88, v86);
  v89 = v128;
  v90 = v129;
  v128((char *)v88, v129);
  v91 = type metadata accessor for ImpressionMetrics(0);
  JSONObject.subscript.getter(0xD000000000000011, 0x8000000000309180);
  v92 = v126;
  v93 = v133;
  v119(v126, v86, v133);
  v94 = (uint64_t)v118;
  v95 = ExpressibleByJSON.init(tryDeserializing:using:)(v88, v92, v91);
  v96 = v115;
  UUID.init()(v95);
  v97 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
  v99 = v98;
  (*(void (**)(char *, uint64_t))(v116 + 8))(v96, v117);
  (*(void (**)(uint64_t, uint64_t))(v124 + 8))(v86, v93);
  v89(v44, v90);
  v100 = type metadata accessor for Showcase(0);
  v46 = swift_allocObject(v100, *(unsigned int *)(v100 + 48), *(unsigned __int16 *)(v100 + 52));
  Showcase.init(caption:title:subtitle:overlayingCaption:artwork:showArtwork:showAdamId:showMetadata:thumbnailArtwork:clickAction:playAction:impressionMetrics:shelfUniqueId:)(v112, v111, v110, v109, v113, v108, v107, v106, v120, v121, v103, (char)v114, (uint64_t)v104, v122, (uint64_t)&v130, v105, v94, v97, v99);
  return v46;
}

uint64_t type metadata accessor for Showcase(uint64_t a1)
{
  uint64_t result;

  result = qword_3B96A8;
  if (!qword_3B96A8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for Showcase);
  return result;
}

uint64_t sub_FB7B0(uint64_t a1)
{
  uint64_t result;

  result = sub_F1C0(&qword_3B9670, (void (*)(uint64_t))type metadata accessor for Showcase, (uint64_t)&protocol conformance descriptor for Showcase);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_FB7EC(uint64_t a1)
{
  uint64_t result;

  result = sub_F1C0(&qword_3B9678, (void (*)(uint64_t))type metadata accessor for Showcase, (uint64_t)&protocol conformance descriptor for Showcase);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_FB828()
{
  return type metadata accessor for Showcase(0);
}

void sub_FB830(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[5];
  uint64_t v7;
  uint64_t v8;
  void *v9;
  char *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;

  v6[0] = &unk_2F53F0;
  v6[1] = &unk_2F5408;
  v6[2] = &unk_2F5408;
  v6[3] = &unk_2F5408;
  v6[4] = &unk_2F5408;
  sub_3EE70(319, (unint64_t *)&qword_3B28A0, (uint64_t (*)(uint64_t))&type metadata accessor for ArtworkModel);
  if (v3 <= 0x3F)
  {
    v7 = *(_QWORD *)(v2 - 8) + 64;
    v8 = v7;
    v9 = &unk_2F5420;
    v10 = (char *)&value witness table for Builtin.BridgeObject + 64;
    v11 = v7;
    v12 = &unk_2F5438;
    v13 = &unk_2F5450;
    sub_3EE70(319, (unint64_t *)&qword_3B2250, (uint64_t (*)(uint64_t))&type metadata accessor for ImpressionMetrics);
    if (v5 <= 0x3F)
    {
      v14 = *(_QWORD *)(v4 - 8) + 64;
      swift_updateClassMetadata2(a1, 256, 13, v6, a1 + 80);
    }
  }
}

uint64_t method lookup function for Showcase(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for Showcase);
}

uint64_t dispatch thunk of Showcase.__allocating_init(caption:title:subtitle:overlayingCaption:artwork:showArtwork:showAdamId:showMetadata:thumbnailArtwork:clickAction:playAction:impressionMetrics:shelfUniqueId:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 184))(a1, a2, a3);
}

unint64_t sub_FB970()
{
  unint64_t result;

  result = qword_3B9798;
  if (!qword_3B9798)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for HeaderModel.MetadataComponent);
    atomic_store(result, (unint64_t *)&qword_3B9798);
  }
  return result;
}

uint64_t Sequence<>.join(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  _QWORD v8[6];
  _OWORD v9[2];
  uint64_t v10;

  memset(v9, 0, sizeof(v9));
  v8[2] = a1;
  v8[3] = a2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B97A0);
  Sequence.reduce<A>(into:_:)(&v10, v9, sub_FBB98, v8, a3, v6, a4);
  return v10;
}

uint64_t sub_FBA30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;

  v7 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v8 = *(unsigned __int8 *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_QWORD *)(a1 + 24);
  if (v10)
  {
    v13 = *(_QWORD *)a1;
    v12 = *(_QWORD *)(a1 + 8);
    v32 = *(_QWORD *)a1;
    v33 = v12;
    v14 = *(_DWORD *)(a1 + 16) & 1;
    v34 = *(unsigned __int8 *)(a2 + 16);
    v36 = v14;
    v31 = *(_QWORD *)(a2 + 8);
    swift_bridgeObjectRetain();
    v15 = static Text.+ infix(_:_:)(v13, v12, v14, v10, a3, a4, 0, _swiftEmptyArrayStorage);
    v17 = v16;
    v18 = v9;
    v20 = v19;
    v22 = v21;
    swift_bridgeObjectRelease();
    v23 = v20 & 1;
    v35 = static Text.+ infix(_:_:)(v15, v17, v23, v22, v7, v31, v34, v18);
    v25 = v24;
    v27 = v26;
    v29 = v28 & 1;
    sub_3EF90(v32, v33, v36);
    swift_bridgeObjectRelease();
    sub_3EF90(v15, v17, v23);
    result = swift_bridgeObjectRelease();
    *(_QWORD *)a1 = v35;
    *(_QWORD *)(a1 + 8) = v25;
    *(_QWORD *)(a1 + 16) = v29;
    *(_QWORD *)(a1 + 24) = v27;
  }
  else
  {
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v6;
    *(_QWORD *)(a1 + 16) = v8;
    *(_QWORD *)(a1 + 24) = v9;
    sub_3EF80(v7, v6, v8);
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_FBB98(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_FBA30(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

unint64_t static EpisodePageFooterShelvesIntent.kind.getter()
{
  return 0xD00000000000001ELL;
}

uint64_t static EpisodePageFooterShelvesIntent.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)a1 == *(_QWORD *)a2)
    return (*(unsigned __int8 *)(a2 + 8) ^ *(unsigned __int8 *)(a1 + 8) ^ 1) & 1;
  else
    return 0;
}

void sub_FBBFC(_QWORD *a1@<X8>)
{
  *a1 = 0xD00000000000001ELL;
  a1[1] = 0x80000000002F5460;
}

uint64_t sub_FBC1C(char *a1, char *a2)
{
  return sub_1E0650(*a1, *a2);
}

Swift::Int sub_FBC28()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  if (v1)
    v2 = 0x7263736275537369;
  else
    v2 = 0x64496D616461;
  if (v1)
    v3 = 0xEC00000064656269;
  else
    v3 = 0xE600000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_FBCAC(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0x7263736275537369;
  else
    v2 = 0x64496D616461;
  if (*v1)
    v3 = 0xEC00000064656269;
  else
    v3 = 0xE600000000000000;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_FBD0C()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  if (v1)
    v2 = 0x7263736275537369;
  else
    v2 = 0x64496D616461;
  if (v1)
    v3 = 0xEC00000064656269;
  else
    v3 = 0xE600000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_FBD8C@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;
  char v7;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_373CF0, v3);
  result = swift_bridgeObjectRelease(v4);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

void sub_FBDE8(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x64496D616461;
  if (*v1)
    v2 = 0x7263736275537369;
  v3 = 0xE600000000000000;
  if (*v1)
    v3 = 0xEC00000064656269;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_FBE2C()
{
  _BYTE *v0;

  if (*v0)
    return 0x7263736275537369;
  else
    return 0x64496D616461;
}

uint64_t sub_FBE6C@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  void *object;
  Swift::String v3;
  Swift::Int v5;
  uint64_t result;
  char v7;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_373CF0, v3);
  result = swift_bridgeObjectRelease(object);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

uint64_t sub_FBECC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_FC054();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_FBEF4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_FC054();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t EpisodePageFooterShelvesIntent.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  unsigned int v14;
  _BYTE v15[2];
  uint64_t v16;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B97A8);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v14 = *((unsigned __int8 *)v1 + 8);
  v9 = a1[3];
  v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  v11 = sub_FC054();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for EpisodePageFooterShelvesIntent.CodingKeys, &type metadata for EpisodePageFooterShelvesIntent.CodingKeys, v11, v9, v10);
  v16 = v8;
  v15[1] = 0;
  sub_13E9C();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v16);
  if (!v2)
  {
    v15[0] = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, v15, v4);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_FC054()
{
  unint64_t result;

  result = qword_3B97B0;
  if (!qword_3B97B0)
  {
    result = swift_getWitnessTable(&unk_2F56BC);
    atomic_store(result, (unint64_t *)&qword_3B97B0);
  }
  return result;
}

unint64_t sub_FC09C()
{
  unint64_t result;

  result = qword_3B97B8;
  if (!qword_3B97B8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for EpisodePageFooterShelvesIntent);
    atomic_store(result, (unint64_t *)&qword_3B97B8);
  }
  return result;
}

unint64_t sub_FC0E4()
{
  unint64_t result;

  result = qword_3B97C0;
  if (!qword_3B97C0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for EpisodePageFooterShelvesIntent);
    atomic_store(result, (unint64_t *)&qword_3B97C0);
  }
  return result;
}

uint64_t sub_FC128(_QWORD *a1)
{
  return EpisodePageFooterShelvesIntent.encode(to:)(a1);
}

uint64_t sub_FC13C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_FC3E4();
  return CustomJSValueConvertible<>.jsRepresentation(in:)(a1, a2, a3, v6);
}

uint64_t getEnumTagSinglePayload for EpisodePageFooterShelvesIntent(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for EpisodePageFooterShelvesIntent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for EpisodePageFooterShelvesIntent()
{
  return &type metadata for EpisodePageFooterShelvesIntent;
}

uint64_t storeEnumTagSinglePayload for EpisodePageFooterShelvesIntent.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_FC28C + 4 * byte_2F5475[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_FC2C0 + 4 * byte_2F5470[v4]))();
}

uint64_t sub_FC2C0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_FC2C8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xFC2D0);
  return result;
}

uint64_t sub_FC2DC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xFC2E4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_FC2E8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_FC2F0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for EpisodePageFooterShelvesIntent.CodingKeys()
{
  return &type metadata for EpisodePageFooterShelvesIntent.CodingKeys;
}

unint64_t sub_FC310()
{
  unint64_t result;

  result = qword_3B97C8;
  if (!qword_3B97C8)
  {
    result = swift_getWitnessTable(&unk_2F5694);
    atomic_store(result, (unint64_t *)&qword_3B97C8);
  }
  return result;
}

unint64_t sub_FC358()
{
  unint64_t result;

  result = qword_3B97D0;
  if (!qword_3B97D0)
  {
    result = swift_getWitnessTable(&unk_2F55CC);
    atomic_store(result, (unint64_t *)&qword_3B97D0);
  }
  return result;
}

unint64_t sub_FC3A0()
{
  unint64_t result;

  result = qword_3B97D8;
  if (!qword_3B97D8)
  {
    result = swift_getWitnessTable(&unk_2F55F4);
    atomic_store(result, (unint64_t *)&qword_3B97D8);
  }
  return result;
}

unint64_t sub_FC3E4()
{
  unint64_t result;

  result = qword_3B97E0[0];
  if (!qword_3B97E0[0])
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for EpisodePageFooterShelvesIntent);
    atomic_store(result, qword_3B97E0);
  }
  return result;
}

uint64_t _CachableValueContainer.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 36));
}

uint64_t _CachableValueContainer.init(object:value:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v10 = type metadata accessor for JSONObject(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a5, a1, v10);
  v12 = a5 + *(int *)(type metadata accessor for _CachableValueContainer(0, a3, a4, v11) + 36);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(v12, a2, a3);
}

uint64_t type metadata accessor for _CachableValueContainer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _CachableValueContainer);
}

uint64_t _CachableValueContainer.init(deserializing:using:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  char *v20;
  void (*v21)(char *, uint64_t, uint64_t, __n128);
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v33 = a4;
  v31 = a5;
  v32 = a2;
  v7 = type metadata accessor for JSONContext(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for JSONObject(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = *(_QWORD *)(a3 - 8);
  __chkstk_darwin(v15);
  v30 = (char *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v17);
  v20 = (char *)&v29 - v19;
  v21 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v12 + 16);
  v35 = a1;
  v22 = a1;
  v23 = v32;
  v21(v14, v22, v11, v18);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v23, v7);
  v24 = v10;
  v26 = v33;
  v25 = v34;
  dispatch thunk of ExpressibleByJSON.init(deserializing:using:)(v14, v24, a3, v33);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v23, v7);
  if (v25)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v35, v11);
  v28 = (uint64_t)v30;
  (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v30, v20, a3);
  return _CachableValueContainer.init(object:value:)(v35, v28, a3, v26, v31);
}

uint64_t _CachableValueContainer.init(tryDeserializing:using:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v30)(char *, char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a2;
  v40 = a4;
  v41 = a5;
  v42 = a1;
  v6 = type metadata accessor for JSONContext(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for JSONObject(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Optional(0, a3);
  v36 = *(_QWORD *)(v14 - 8);
  v37 = v14;
  __chkstk_darwin(v14);
  v16 = (char *)&v35 - v15;
  v17 = *(_QWORD *)(a3 - 8);
  __chkstk_darwin(v18);
  v35 = (char *)&v35 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v20);
  v23 = (char *)&v35 - v22;
  v38 = v11;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v11 + 16))(v13, v42, v10, v21);
  v24 = v39;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v39, v6);
  v25 = v9;
  v26 = v40;
  dispatch thunk of ExpressibleByJSON.init(tryDeserializing:using:)(v13, v25, a3, v40);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v24, v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v16, 1, a3) == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v42, v10);
    (*(void (**)(char *, uint64_t))(v36 + 8))(v16, v37);
    v28 = type metadata accessor for _CachableValueContainer(0, a3, v26, v27);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v41, 1, 1, v28);
  }
  else
  {
    v30 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
    v30(v23, v16, a3);
    v31 = (uint64_t)v35;
    v30(v35, v23, a3);
    v32 = v41;
    _CachableValueContainer.init(object:value:)(v42, v31, a3, v26, v41);
    v34 = type metadata accessor for _CachableValueContainer(0, a3, v26, v33);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v32, 0, 1, v34);
  }
}

uint64_t sub_FC910@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return _CachableValueContainer.init(deserializing:using:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
}

uint64_t sub_FC92C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return _CachableValueContainer.init(tryDeserializing:using:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
}

uint64_t sub_FC938(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[2];

  result = type metadata accessor for JSONObject(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
    if (v4 <= 0x3F)
    {
      v5[1] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 0, 2, v5, a1 + 32);
      return 0;
    }
  }
  return result;
}

uint64_t *sub_FC9C0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;

  v6 = type metadata accessor for JSONObject(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(a3 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = *(_QWORD *)(v7 + 64) + v10;
  v12 = (*(_BYTE *)(v7 + 80) | *(_BYTE *)(v9 + 80));
  if (v12 > 7
    || ((*(_DWORD *)(v7 + 80) | *(_DWORD *)(v9 + 80)) & 0x100000) != 0
    || (v11 & (unint64_t)~v10) + *(_QWORD *)(v9 + 64) > 0x18)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v12 + 16) & ~v12));
    swift_retain(v15);
  }
  else
  {
    v16 = ~v10;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))(((unint64_t)a1 + v11) & v16, ((unint64_t)a2 + v11) & v16, v8);
  }
  return a1;
}

uint64_t sub_FCA98(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for JSONObject(0);
  v5 = *(_QWORD *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((*(_QWORD *)(v5 + 64) + a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

uint64_t sub_FCAFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for JSONObject(0);
  v7 = *(_QWORD *)(v6 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a1, a2, v6);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v8 + 16))((*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

uint64_t sub_FCB78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for JSONObject(0);
  v7 = *(_QWORD *)(v6 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24))(a1, a2, v6);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v8 + 24))((*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

uint64_t sub_FCBF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for JSONObject(0);
  v7 = *(_QWORD *)(v6 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(a1, a2, v6);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v8 + 32))((*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

uint64_t sub_FCC70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for JSONObject(0);
  v7 = *(_QWORD *)(v6 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40))(a1, a2, v6);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v8 + 40))((*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

uint64_t sub_FCCEC(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  int v17;
  unsigned int v18;
  int v19;
  int v20;

  v6 = type metadata accessor for JSONObject(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int *)(v7 + 84);
  v9 = *(_QWORD *)(a3 + 16);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_DWORD *)(v10 + 84);
  if (v11 <= v8)
    v12 = *(_DWORD *)(v7 + 84);
  else
    v12 = *(_DWORD *)(v10 + 84);
  if (!a2)
    return 0;
  v13 = *(unsigned __int8 *)(v10 + 80);
  v14 = *(_QWORD *)(v7 + 64) + v13;
  if (a2 <= v12)
    goto LABEL_23;
  v15 = (v14 & ~v13) + *(_QWORD *)(v10 + 64);
  v16 = 8 * v15;
  if (v15 <= 3)
  {
    v18 = ((a2 - v12 + ~(-1 << v16)) >> v16) + 1;
    if (HIWORD(v18))
    {
      v17 = *(_DWORD *)(a1 + v15);
      if (!v17)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v18 > 0xFF)
    {
      v17 = *(unsigned __int16 *)(a1 + v15);
      if (!*(_WORD *)(a1 + v15))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v18 < 2)
    {
LABEL_23:
      if (v12)
      {
        if (v8 >= v11)
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, v8, v6);
        else
          return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v10 + 48))((v14 + a1) & ~v13, *(unsigned int *)(v10 + 84), v9);
      }
      return 0;
    }
  }
  v17 = *(unsigned __int8 *)(a1 + v15);
  if (!*(_BYTE *)(a1 + v15))
    goto LABEL_23;
LABEL_14:
  v19 = (v17 - 1) << v16;
  if (v15 > 3)
    v19 = 0;
  if ((_DWORD)v15)
  {
    if (v15 <= 3)
      v20 = (v14 & ~(_DWORD)v13) + *(_DWORD *)(v10 + 64);
    else
      v20 = 4;
    __asm { BR              X12 }
  }
  return v12 + v19 + 1;
}

void sub_FCE7C(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;

  v8 = *(_QWORD *)(type metadata accessor for JSONObject(0) - 8);
  v9 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v9 + 84) <= *(_DWORD *)(v8 + 84))
    v10 = *(_DWORD *)(v8 + 84);
  else
    v10 = *(_DWORD *)(v9 + 84);
  v11 = *(unsigned __int8 *)(v9 + 80);
  v12 = ((*(_QWORD *)(v8 + 64) + v11) & ~v11) + *(_QWORD *)(v9 + 64);
  if (a3 <= v10)
  {
    v13 = 0;
  }
  else if (v12 <= 3)
  {
    v15 = ((a3 - v10 + ~(-1 << (8 * v12))) >> (8 * v12)) + 1;
    if (HIWORD(v15))
    {
      v13 = &dword_4;
    }
    else if (v15 >= 0x100)
    {
      v13 = 2;
    }
    else
    {
      v13 = v15 > 1;
    }
  }
  else
  {
    v13 = &dword_0 + 1;
  }
  if (v10 < a2)
  {
    v14 = ~v10 + a2;
    if (v12 < 4)
    {
      if ((_DWORD)v12)
      {
        v16 = v14 & ~(-1 << (8 * v12));
        bzero(a1, ((*(_QWORD *)(v8 + 64) + v11) & ~v11) + *(_QWORD *)(v9 + 64));
        if ((_DWORD)v12 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }
        else if ((_DWORD)v12 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, ((*(_QWORD *)(v8 + 64) + v11) & ~v11) + *(_QWORD *)(v9 + 64));
      *(_DWORD *)a1 = v14;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

uint64_t sub_FD090@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (**v28)();
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v36 = a1;
  v42 = a2;
  v3 = type metadata accessor for ArtworkLoaderModifier(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v3);
  v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = type metadata accessor for Artwork.Configuration(0);
  __chkstk_darwin(v39);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B9AB8);
  __chkstk_darwin(v37);
  v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B9AC0);
  v40 = *(_QWORD *)(v11 - 8);
  v41 = v11;
  __chkstk_darwin(v11);
  v35 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B9AC8);
  __chkstk_darwin(v38);
  v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = v2;
  sub_FD414(v2, v36, (uint64_t)v10);
  sub_14510(v2 + *(int *)(v3 + 20), (uint64_t)v8, type metadata accessor for Artwork.Configuration);
  sub_14510(v2, (uint64_t)v6, type metadata accessor for ArtworkLoaderModifier);
  v15 = *(unsigned __int8 *)(v4 + 80);
  v16 = (v15 + 16) & ~v15;
  v17 = v16 + v5;
  v36 = v15 | 7;
  v33 = v17;
  v18 = swift_allocObject(&unk_380E48, v17, v15 | 7);
  sub_3C56C((uint64_t)v6, v18 + v16, type metadata accessor for ArtworkLoaderModifier);
  v19 = sub_104A9C();
  v20 = sub_F1C0(&qword_3B9B18, (void (*)(uint64_t))type metadata accessor for Artwork.Configuration, (uint64_t)&unk_3048E0);
  v21 = v35;
  View.onChange<A>(of:initial:_:)(v8, 0, sub_104A50, v18, v37, v39, v19, v20);
  swift_release(v18);
  sub_145D8((uint64_t)v8, type metadata accessor for Artwork.Configuration);
  sub_1459C((uint64_t)v10, &qword_3B9AB8);
  v22 = v34;
  sub_14510(v34, (uint64_t)v6, type metadata accessor for ArtworkLoaderModifier);
  v23 = v17;
  v24 = v36;
  v25 = swift_allocObject(&unk_380E70, v23, v36);
  sub_3C56C((uint64_t)v6, v25 + v16, type metadata accessor for ArtworkLoaderModifier);
  v27 = v40;
  v26 = v41;
  (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v14, v21, v41);
  v28 = (uint64_t (**)())&v14[*(int *)(v38 + 36)];
  *v28 = sub_104E10;
  v28[1] = (uint64_t (*)())v25;
  v28[2] = 0;
  v28[3] = 0;
  (*(void (**)(char *, uint64_t))(v27 + 8))(v21, v26);
  sub_14510(v22, (uint64_t)v6, type metadata accessor for ArtworkLoaderModifier);
  v29 = swift_allocObject(&unk_380E98, v33, v24);
  sub_3C56C((uint64_t)v6, v29 + v16, type metadata accessor for ArtworkLoaderModifier);
  v30 = v42;
  sub_267BC((uint64_t)v14, v42, &qword_3B9AC8);
  v31 = (_QWORD *)(v30 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B9B20) + 36));
  *v31 = 0;
  v31[1] = 0;
  v31[2] = sub_104E20;
  v31[3] = v29;
  return sub_1459C((uint64_t)v14, &qword_3B9AC8);
}

uint64_t sub_FD414@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t);
  unint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (**v29)@<X0>(uint64_t@<X8>);
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v35 = a2;
  v37 = a3;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B9B00);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B9B88);
  __chkstk_darwin(v36);
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ArtworkLoaderModifier(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v10);
  v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B9AF0);
  __chkstk_darwin(v34);
  v33 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = a1 + *(int *)(v10 + 20);
  v16 = v15 + *(int *)(type metadata accessor for Artwork.Configuration(0) + 20);
  if (*(_BYTE *)(v16 + 16) == 2 && *(_OWORD *)v16 == 0)
  {
    sub_14510(a1, (uint64_t)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for ArtworkLoaderModifier);
    v21 = *(unsigned __int8 *)(v11 + 80);
    v22 = (v21 + 16) & ~v21;
    v23 = v22 + v12;
    v24 = v21 | 7;
    v25 = swift_allocObject(&unk_380F60, v23, v21 | 7);
    sub_3C56C((uint64_t)v13, v25 + v22, type metadata accessor for ArtworkLoaderModifier);
    sub_14510(a1, (uint64_t)v13, type metadata accessor for ArtworkLoaderModifier);
    v26 = swift_allocObject(&unk_380F88, v23, v24);
    sub_3C56C((uint64_t)v13, v26 + v22, type metadata accessor for ArtworkLoaderModifier);
    v27 = (uint64_t)v33;
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v33, v35, v4);
    v28 = v34;
    v29 = (uint64_t (**)@<X0>(uint64_t@<X8>))(v27 + *(int *)(v34 + 36));
    *v29 = sub_1052B4;
    v29[1] = (uint64_t (*)@<X0>(uint64_t@<X8>))v25;
    v29[2] = (uint64_t (*)@<X0>(uint64_t@<X8>))sub_105304;
    v29[3] = (uint64_t (*)@<X0>(uint64_t@<X8>))v26;
    sub_267BC(v27, (uint64_t)v9, &qword_3B9AF0);
    swift_storeEnumTagMultiPayload(v9, v36, 0);
    v30 = sub_104B84();
    v31 = sub_32914(&qword_3B9AF8, &qword_3B9B00, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    _ConditionalContent<>.init(storage:)(v9, v28, v4, v30, v31);
    return sub_1459C(v27, &qword_3B9AF0);
  }
  else
  {
    v17 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v17(v7, v35, v4);
    v17(v9, (uint64_t)v7, v4);
    swift_storeEnumTagMultiPayload(v9, v36, 1);
    v18 = sub_104B84();
    v19 = sub_32914(&qword_3B9AF8, &qword_3B9B00, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    _ConditionalContent<>.init(storage:)(v9, v34, v4, v18, v19);
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

uint64_t sub_FD74C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;

  type metadata accessor for ArtworkLoaderModifier(0);
  sub_269DD4((uint64_t)v6);
  v2 = v7;
  v3 = v8;
  __swift_project_boxed_opaque_existential_1(v6, v7);
  GeometryProxy.size.getter();
  *(double *)a1 = dispatch thunk of ArtworkSizeBucketingStrategy.bucketedSize(for:)(v2, v3);
  *(_QWORD *)(a1 + 8) = v4;
  return __swift_destroy_boxed_opaque_existential_1(v6);
}

uint64_t sub_FD7D8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int (*v6)(uint64_t, uint64_t, int *);
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  double v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B9B30);
  __chkstk_darwin(v4);
  v6 = (unsigned int (*)(uint64_t, uint64_t, int *))((char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = *a1;
  v8 = a1[1];
  v9 = (int *)type metadata accessor for ArtworkLoaderModifier(0);
  sub_14510(a2 + v9[5], (uint64_t)v6, type metadata accessor for Artwork.Configuration);
  v10 = type metadata accessor for Artwork.Configuration(0);
  (*(void (**)(unsigned int (*)(uint64_t, uint64_t, int *), _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v6, 0, 1, v10);
  v11 = a2 + v9[6];
  v12 = *(_QWORD *)v11;
  v13 = *(_BYTE *)(v11 + 8);
  sub_A0A18(*(_QWORD *)v11, v13);
  v14 = sub_269FB8(v12, v13);
  sub_A0A6C(v12, v13);
  v15 = (uint64_t *)(a2 + v9[7]);
  v16 = *v15;
  LOBYTE(v9) = *((_BYTE *)v15 + 8);
  v17 = swift_retain();
  v18 = sub_26A178(v17, (char)v9);
  swift_release(v16);
  sub_FD944(v6, v7, v8, 0, v18, v14);
  swift_release(v18);
  return sub_1459C((uint64_t)v6, &qword_3B9B30);
}

uint64_t sub_FD944(unsigned int (*a1)(uint64_t, uint64_t, int *), uint64_t a2, uint64_t a3, int a4, uint64_t a5, double a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int (*v43)(uint64_t, uint64_t, uint64_t);
  int *v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  char *v52;
  double v53;
  double *v54;
  unsigned int v55;
  void (*v56)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t (*v66)(uint64_t, uint64_t, uint64_t);
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t KeyPath;
  uint64_t v74;
  uint64_t v75;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int (*v94)(uint64_t, uint64_t, int *);
  uint64_t v95;
  uint64_t v96;
  _QWORD v97[3];
  char v98[32];

  v7 = v6;
  v84 = a5;
  v85 = a2;
  LODWORD(v92) = a4;
  v86 = a3;
  v94 = a1;
  v89 = type metadata accessor for ArtworkModel(0);
  v95 = *(_QWORD *)(v89 - 8);
  __chkstk_darwin(v89);
  v81 = (uint64_t)&v80 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0B18);
  __chkstk_darwin(v91);
  v90 = (char *)&v80 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
  __chkstk_darwin(v11);
  v88 = (char *)&v80 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v93 = (uint64_t)&v80 - v14;
  __chkstk_darwin(v15);
  v96 = (uint64_t)&v80 - v16;
  v17 = _s6LoaderC19LoaderConfigurationVMa(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v83 = (uint64_t)&v80 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v82 = (uint64_t)&v80 - v21;
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B9B38);
  __chkstk_darwin(v22);
  v24 = (char *)&v80 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B9B30);
  __chkstk_darwin(v25);
  v27 = (char *)&v80 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B9B28);
  __chkstk_darwin(v28);
  v87 = (char *)&v80 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  v32 = (char *)&v80 - v31;
  __chkstk_darwin(v33);
  v35 = (char *)&v80 - v34;
  __chkstk_darwin(v36);
  v38 = (char *)&v80 - v37;
  if ((v92 & 1) == 0)
  {
    v39 = v7 + OBJC_IVAR____TtCV8ShelfKit7Artwork6Loader_lastKnownProxySize;
    v40 = v86;
    *(_QWORD *)v39 = v85;
    *(_QWORD *)(v39 + 8) = v40;
    *(_BYTE *)(v39 + 16) = 0;
  }
  sub_267BC((uint64_t)v94, (uint64_t)v27, &qword_3B9B30);
  sub_FE620((uint64_t)v27, *(_QWORD *)(v7 + OBJC_IVAR____TtCV8ShelfKit7Artwork6Loader_lastKnownProxySize), *(_QWORD *)(v7 + OBJC_IVAR____TtCV8ShelfKit7Artwork6Loader_lastKnownProxySize + 8), *(unsigned __int8 *)(v7 + OBJC_IVAR____TtCV8ShelfKit7Artwork6Loader_lastKnownProxySize + 16), (uint64_t)v38, a6);
  v92 = v7;
  v41 = v7 + OBJC_IVAR____TtCV8ShelfKit7Artwork6Loader_loaderConfiguration;
  swift_beginAccess(v7 + OBJC_IVAR____TtCV8ShelfKit7Artwork6Loader_loaderConfiguration, v98, 0, 0);
  v42 = (uint64_t)&v24[*(int *)(v22 + 48)];
  sub_267BC((uint64_t)v38, (uint64_t)v24, &qword_3B9B28);
  sub_267BC(v41, v42, &qword_3B9B28);
  v43 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48);
  v44 = (int *)v17;
  if (v43((uint64_t)v24, 1, v17) == 1)
  {
    if (v43(v42, 1, v17) == 1)
    {
LABEL_5:
      sub_1459C((uint64_t)v24, &qword_3B9B28);
      v45 = (uint64_t)v38;
      return sub_1459C(v45, &qword_3B9B28);
    }
    v46 = &qword_3B9B38;
    v48 = v96;
    v47 = v93;
  }
  else
  {
    sub_267BC((uint64_t)v24, (uint64_t)v35, &qword_3B9B28);
    if (v43(v42, 1, v17) == 1)
    {
      v46 = &qword_3B9B38;
      v47 = v93;
    }
    else
    {
      v49 = v82;
      sub_3C56C(v42, v82, _s6LoaderC19LoaderConfigurationVMa);
      v50 = sub_2B0918((uint64_t)v35, v49);
      v47 = v93;
      if ((v50 & 1) != 0
        && *(double *)&v35[v44[5]] == *(double *)(v49 + v44[5])
        && (static ArtworkModel.== infix(_:_:)(&v35[v44[6]], v49 + v44[6]) & 1) != 0)
      {
        v51 = v44[7];
        v52 = &v35[v51];
        v53 = *(double *)&v35[v51];
        v54 = (double *)(v49 + v51);
        if (v53 == *v54 && *((double *)v52 + 1) == v54[1])
        {
          sub_145D8(v49, _s6LoaderC19LoaderConfigurationVMa);
          sub_145D8((uint64_t)v35, _s6LoaderC19LoaderConfigurationVMa);
          goto LABEL_5;
        }
      }
      sub_145D8(v49, _s6LoaderC19LoaderConfigurationVMa);
      v46 = &qword_3B9B28;
    }
    sub_145D8((uint64_t)v35, _s6LoaderC19LoaderConfigurationVMa);
    v48 = v96;
  }
  sub_1459C((uint64_t)v24, v46);
  sub_267BC((uint64_t)v38, (uint64_t)v32, &qword_3B9B28);
  v55 = v43((uint64_t)v32, 1, (uint64_t)v44);
  v94 = (unsigned int (*)(uint64_t, uint64_t, int *))v43;
  if (v55 == 1)
  {
    sub_1459C((uint64_t)v32, &qword_3B9B28);
    v56 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v95 + 56);
    v57 = v48;
    v58 = 1;
  }
  else
  {
    sub_14510((uint64_t)&v32[v44[6]], v48, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
    sub_145D8((uint64_t)v32, _s6LoaderC19LoaderConfigurationVMa);
    v56 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v95 + 56);
    v57 = v48;
    v58 = 0;
  }
  v59 = v89;
  v56(v57, v58, 1, v89);
  v60 = v92;
  v61 = (uint64_t)v90;
  v62 = (uint64_t)v88;
  v63 = 1;
  if (!v94(v41, 1, v44))
  {
    sub_14510(v41 + v44[6], v47, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
    v63 = 0;
  }
  v92 = v41;
  v56(v47, v63, 1, v59);
  v64 = v61 + *(int *)(v91 + 48);
  v65 = v96;
  sub_267BC(v96, v61, &qword_3BEB70);
  sub_267BC(v47, v64, &qword_3BEB70);
  v66 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v95 + 48);
  if (v66(v61, 1, v59) == 1)
  {
    sub_1459C(v47, &qword_3BEB70);
    sub_1459C(v65, &qword_3BEB70);
    v67 = v66(v64, 1, v59);
    v68 = (uint64_t)v87;
    if (v67 == 1)
    {
      sub_1459C(v61, &qword_3BEB70);
      v69 = v92;
      goto LABEL_30;
    }
  }
  else
  {
    sub_267BC(v61, v62, &qword_3BEB70);
    if (v66(v64, 1, v59) != 1)
    {
      v70 = v62;
      v71 = v81;
      sub_3C56C(v64, v81, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
      v72 = static ArtworkModel.== infix(_:_:)(v70, v71);
      sub_145D8(v71, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
      sub_1459C(v93, &qword_3BEB70);
      sub_1459C(v96, &qword_3BEB70);
      sub_145D8(v70, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
      sub_1459C(v61, &qword_3BEB70);
      v68 = (uint64_t)v87;
      v69 = v92;
      if ((v72 & 1) != 0)
        goto LABEL_30;
      goto LABEL_29;
    }
    sub_1459C(v93, &qword_3BEB70);
    sub_1459C(v96, &qword_3BEB70);
    sub_145D8(v62, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
    v68 = (uint64_t)v87;
  }
  sub_1459C(v61, &qword_3B0B18);
  v69 = v92;
LABEL_29:
  KeyPath = swift_getKeyPath(&unk_2F5978);
  v74 = swift_getKeyPath(&unk_2F59A0);
  v97[0] = 0;
  swift_retain();
  static Published.subscript.setter(v97, v60, KeyPath, v74);
LABEL_30:
  v75 = OBJC_IVAR____TtCV8ShelfKit7Artwork6Loader_currentRequest;
  if (*(_QWORD *)(v60 + OBJC_IVAR____TtCV8ShelfKit7Artwork6Loader_currentRequest))
    sub_105080();
  swift_beginAccess(v69, v97, 33, 0);
  sub_104FA8((uint64_t)v38, v69);
  swift_endAccess(v97);
  sub_267BC((uint64_t)v38, v68, &qword_3B9B28);
  if (v94(v68, 1, v44) == 1)
  {
    sub_1459C((uint64_t)v38, &qword_3B9B28);
    v45 = v68;
    return sub_1459C(v45, &qword_3B9B28);
  }
  v77 = v83;
  sub_3C56C(v68, v83, _s6LoaderC19LoaderConfigurationVMa);
  v78 = sub_FE954(v77, v84);
  sub_145D8(v77, _s6LoaderC19LoaderConfigurationVMa);
  sub_1459C((uint64_t)v38, &qword_3B9B28);
  v79 = *(_QWORD *)(v60 + v75);
  *(_QWORD *)(v60 + v75) = v78;
  return swift_release(v79);
}

uint64_t sub_FE214(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(uint64_t, uint64_t, int *);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  double v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B9B30);
  __chkstk_darwin(v5);
  v7 = (unsigned int (*)(uint64_t, uint64_t, int *))((char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_14510(a2, (uint64_t)v7, type metadata accessor for Artwork.Configuration);
  v8 = type metadata accessor for Artwork.Configuration(0);
  (*(void (**)(unsigned int (*)(uint64_t, uint64_t, int *), _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 0, 1, v8);
  v9 = type metadata accessor for ArtworkLoaderModifier(0);
  v10 = a3 + *(int *)(v9 + 24);
  v11 = *(_QWORD *)v10;
  v12 = *(_BYTE *)(v10 + 8);
  sub_A0A18(*(_QWORD *)v10, v12);
  v13 = sub_269FB8(v11, v12);
  sub_A0A6C(v11, v12);
  v14 = (uint64_t *)(a3 + *(int *)(v9 + 28));
  v15 = *v14;
  LOBYTE(v9) = *((_BYTE *)v14 + 8);
  v16 = swift_retain();
  v17 = sub_26A178(v16, v9);
  swift_release(v15);
  sub_FD944(v7, 0, 0, 1, v17, v13);
  swift_release(v17);
  return sub_1459C((uint64_t)v7, &qword_3B9B30);
}

uint64_t sub_FE370(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int (*v4)(uint64_t, uint64_t, int *);
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  double v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B9B30);
  __chkstk_darwin(v2);
  v4 = (unsigned int (*)(uint64_t, uint64_t, int *))((char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = (int *)type metadata accessor for ArtworkLoaderModifier(0);
  sub_14510(a1 + v5[5], (uint64_t)v4, type metadata accessor for Artwork.Configuration);
  v6 = type metadata accessor for Artwork.Configuration(0);
  (*(void (**)(unsigned int (*)(uint64_t, uint64_t, int *), _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v4, 0, 1, v6);
  v7 = a1 + v5[6];
  v8 = *(_QWORD *)v7;
  v9 = *(_BYTE *)(v7 + 8);
  sub_A0A18(*(_QWORD *)v7, v9);
  v10 = sub_269FB8(v8, v9);
  sub_A0A6C(v8, v9);
  v11 = (uint64_t *)(a1 + v5[7]);
  v12 = *v11;
  LOBYTE(v5) = *((_BYTE *)v11 + 8);
  v13 = swift_retain();
  v14 = sub_26A178(v13, (char)v5);
  swift_release(v12);
  sub_FD944(v4, 0, 0, 1, v14, v10);
  swift_release(v14);
  return sub_1459C((uint64_t)v4, &qword_3B9B30);
}

uint64_t sub_FE4CC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v18[24];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B9B28);
  __chkstk_darwin(v2);
  v4 = &v18[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *a1;
  v6 = (char *)a1 + *(int *)(type metadata accessor for ArtworkLoaderModifier(0) + 28);
  v7 = *(_QWORD *)v6;
  v8 = v6[8];
  v9 = swift_retain();
  v10 = sub_26A178(v9, v8);
  swift_release(v7);
  v11 = OBJC_IVAR____TtCV8ShelfKit7Artwork6Loader_currentRequest;
  v12 = *(_QWORD *)(v5 + OBJC_IVAR____TtCV8ShelfKit7Artwork6Loader_currentRequest);
  if (v12)
  {
    swift_retain();
    AnyCancellable.cancel()();
    swift_release(v12);
    v13 = *(_QWORD *)(v5 + v11);
    *(_QWORD *)(v5 + v11) = 0;
    swift_release(v13);
    v14 = _s6LoaderC19LoaderConfigurationVMa(0);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v4, 1, 1, v14);
    v15 = v5 + OBJC_IVAR____TtCV8ShelfKit7Artwork6Loader_loaderConfiguration;
    swift_beginAccess(v5 + OBJC_IVAR____TtCV8ShelfKit7Artwork6Loader_loaderConfiguration, v18, 33, 0);
    sub_104E68((uint64_t)v4, v15);
    swift_endAccess(v18);
  }
  return swift_release(v10);
}

uint64_t sub_FE620@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>, double a6@<D0>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int *v19;
  __n128 v20;
  uint64_t v21;
  char *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;

  v34 = a4;
  v32 = a2;
  v33 = a3;
  v36 = a5;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
  __chkstk_darwin(v8);
  v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ArtworkModel(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Artwork.Configuration(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = (int *)_s6LoaderC19LoaderConfigurationVMa(0);
  v35 = *((_QWORD *)v19 - 1);
  v20 = __chkstk_darwin(v19);
  v22 = (char *)&v31 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, __n128))(v16 + 48))(a1, 1, v15, v20) == 1)
  {
    v23 = (uint64_t *)&unk_3B9B30;
    v24 = a1;
LABEL_5:
    sub_1459C(v24, v23);
    v25 = 1;
    v26 = v36;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v35 + 56))(v26, v25, 1, v19);
  }
  sub_3C56C(a1, (uint64_t)v18, type metadata accessor for Artwork.Configuration);
  sub_267BC((uint64_t)v18, (uint64_t)v10, &qword_3BEB70);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    sub_145D8((uint64_t)v18, type metadata accessor for Artwork.Configuration);
    v23 = &qword_3BEB70;
    v24 = (uint64_t)v10;
    goto LABEL_5;
  }
  sub_3C56C((uint64_t)v10, (uint64_t)v14, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
  v27 = &v18[*(int *)(v15 + 20)];
  v26 = v36;
  if (v27[16] >= 2u)
  {
    if ((v34 & 1) != 0)
    {
      sub_145D8((uint64_t)v14, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
      sub_145D8((uint64_t)v18, type metadata accessor for Artwork.Configuration);
      v25 = 1;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v35 + 56))(v26, v25, 1, v19);
    }
    v28 = &v22[v19[7]];
    v29 = v33;
    *(_QWORD *)v28 = v32;
    *((_QWORD *)v28 + 1) = v29;
  }
  else
  {
    *(_OWORD *)&v22[v19[7]] = *(_OWORD *)v27;
  }
  sub_3C56C((uint64_t)v18, (uint64_t)v22, type metadata accessor for Artwork.Configuration);
  *(double *)&v22[v19[5]] = a6;
  sub_3C56C((uint64_t)v14, (uint64_t)&v22[v19[6]], (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
  sub_3C56C((uint64_t)v22, v26, _s6LoaderC19LoaderConfigurationVMa);
  v25 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v35 + 56))(v26, v25, 1, v19);
}

uint64_t sub_FE8E0()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_2F5978);
  v2 = swift_getKeyPath(&unk_2F59A0);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

uint64_t sub_FE954(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int *v21;
  double *v22;
  double v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  __int128 aBlock;
  __int128 v68;
  uint64_t (*v69)();
  uint64_t v70;

  v59 = a2;
  v55 = type metadata accessor for DispatchWorkItemFlags(0);
  v54 = *(_QWORD *)(v55 - 8);
  __chkstk_darwin(v55);
  v53 = (char *)&v49 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = type metadata accessor for DispatchQoS(0);
  v51 = *(_QWORD *)(v52 - 8);
  __chkstk_darwin(v52);
  v50 = (char *)&v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = type metadata accessor for PreparedArtworkRequest(0);
  v58 = *(_QWORD *)(v60 - 8);
  __chkstk_darwin(v60);
  v6 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B9B40);
  v57 = *(_QWORD *)(v56 - 8);
  __chkstk_darwin(v56);
  v8 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for AssetCaches(0);
  v65 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (uint64_t *)((char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7D58);
  __chkstk_darwin(v12);
  v14 = (char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for ArtworkModel(0);
  __chkstk_darwin(v15);
  v17 = (char *)&v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for ArtworkRequest(0);
  v61 = *(_QWORD *)(v18 - 8);
  v62 = v18;
  __chkstk_darwin(v18);
  v20 = (char *)&v49 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = (int *)_s6LoaderC19LoaderConfigurationVMa(0);
  sub_14510(a1 + v21[6], (uint64_t)v17, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
  v22 = (double *)(a1 + v21[7]);
  v23 = *v22;
  v24 = v22[1];
  v25 = type metadata accessor for Artwork.Configuration(0);
  v26 = *(unsigned __int8 *)(a1 + *(int *)(v25 + 32));
  v27 = *(double *)(a1 + v21[5]);
  sub_267BC(a1 + *(int *)(v25 + 28), (uint64_t)v14, &qword_3B7D58);
  v69 = 0;
  aBlock = 0u;
  v68 = 0u;
  ArtworkRequest.init(model:targetSize:contentMode:displayScale:retainAspectRatio:cropCodeOverride:destination:effects:trace:)(v17, v26, 0, v14, 0, _swiftEmptyArrayStorage, &aBlock, v23, v24, v27);
  v66 = v9;
  v28 = BaseObjectGraph.inject<A>(_:)(v11, v9, v9);
  v64 = v11;
  AssetCaches.preparedArtwork.getter(v28);
  v29 = v56;
  v30 = CacheDomain.memory.getter(v56);
  v31 = (*(uint64_t (**)(char *, uint64_t))(v57 + 8))(v8, v29);
  ArtworkRequest.prepared.getter(v31);
  InMemoryAssetCache.asset(at:)(&aBlock, v6);
  swift_release(v30);
  (*(void (**)(char *, uint64_t))(v58 + 8))(v6, v60);
  v32 = (void *)aBlock;
  if ((_QWORD)aBlock)
  {
    v33 = sub_676C8();
    v34 = (void *)static OS_dispatch_queue.main.getter(v33);
    v35 = swift_allocObject(&unk_380EC0, 32, 7);
    *(_QWORD *)(v35 + 16) = v63;
    *(_QWORD *)(v35 + 24) = v32;
    v69 = sub_105198;
    v70 = v35;
    *(_QWORD *)&aBlock = _NSConcreteStackBlock;
    *((_QWORD *)&aBlock + 1) = 1107296256;
    *(_QWORD *)&v68 = sub_2C9F4;
    *((_QWORD *)&v68 + 1) = &block_descriptor_10;
    v36 = _Block_copy(&aBlock);
    v37 = v70;
    swift_retain();
    v38 = v32;
    v39 = swift_release(v37);
    v40 = v50;
    static DispatchQoS.unspecified.getter(v39);
    *(_QWORD *)&aBlock = _swiftEmptyArrayStorage;
    v41 = sub_F1C0((unint64_t *)&qword_3B4420, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v42 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8720);
    v43 = sub_32914((unint64_t *)&qword_3B4430, (uint64_t *)&unk_3B8720, (uint64_t)&protocol conformance descriptor for [A]);
    v44 = v53;
    v45 = v42;
    v46 = v55;
    dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v45, v43, v55, v41);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v40, v44, v36);
    _Block_release(v36);

    (*(void (**)(char *, uint64_t))(v54 + 8))(v44, v46);
    (*(void (**)(char *, uint64_t))(v51 + 8))(v40, v52);
    (*(void (**)(_QWORD *, uint64_t))(v65 + 8))(v64, v66);
    (*(void (**)(char *, uint64_t))(v61 + 8))(v20, v62);
    return 0;
  }
  else
  {
    v47 = sub_FEF8C((uint64_t)v20);
    (*(void (**)(_QWORD *, uint64_t))(v65 + 8))(v64, v66);
    (*(void (**)(char *, uint64_t))(v61 + 8))(v20, v62);
  }
  return v47;
}

uint64_t sub_FEEC4(uint64_t a1, void *a2)
{
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v10;

  KeyPath = swift_getKeyPath(&unk_2F5978);
  v5 = swift_getKeyPath(&unk_2F59A0);
  static Published.subscript.getter(&v10, a1, KeyPath, v5);
  swift_release(KeyPath);
  swift_release(v5);

  v6 = swift_getKeyPath(&unk_2F5978);
  v7 = swift_getKeyPath(&unk_2F59A0);
  v10 = a2;
  v8 = a2;
  swift_retain(a1);
  return static Published.subscript.setter(&v10, a1, v6, v7);
}

uint64_t sub_FEF8C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  _QWORD *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t OpaqueTypeConformance2;
  uint64_t v36;
  char v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  id v64[2];
  _QWORD v65[5];
  _QWORD v66[5];
  _QWORD v67[3];
  uint64_t v68;
  uint64_t v69;

  v63 = a1;
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2B18);
  __chkstk_darwin(v1);
  v3 = (char *)&v51 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = (_QWORD *)__swift_instantiateConcreteTypeFromMangledName(&qword_3B9B48);
  v54 = *(v4 - 1);
  __chkstk_darwin(v4);
  v6 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B9B50);
  v60 = *(_QWORD *)(v55 - 8);
  __chkstk_darwin(v55);
  v8 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B9B58);
  v10 = *(_QWORD *)(v9 - 8);
  v61 = v9;
  v62 = v10;
  __chkstk_darwin(v9);
  v53 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for ArtworkRequest(0);
  v58 = *(_QWORD *)(v12 - 8);
  v59 = *(_QWORD *)(v58 + 64);
  __chkstk_darwin(v12);
  v57 = (char *)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v16 = (char *)&v51 - v15;
  v17 = type metadata accessor for Logger(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (char *)&v51 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BF700);
  BaseObjectGraph.inject<A>(_:)(v67, v21, v21);
  v22 = type metadata accessor for PageRenderController(0);
  v23 = BaseObjectGraph.optional<A>(_:)(v66, v22, v22);
  v52 = v66[0];
  v24 = static Logger.artwork.getter(v23);
  v25 = static os_log_type_t.info.getter(v24);
  SignpostAndLogTrace(domain:level:)(v66, v20, v25);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  v56 = v16;
  Traceable.traced(by:)(v66, v12, &protocol witness table for ArtworkRequest);
  v26 = v68;
  v27 = v69;
  __swift_project_boxed_opaque_existential_1(v67, v68);
  v65[0] = dispatch thunk of ImageProvider.load(artwork:)(v16, v26, v27);
  v28 = sub_676C8();
  v64[0] = (id)static OS_dispatch_queue.main.getter(v28);
  v29 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v3, 1, 1, v29);
  v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B6288);
  v31 = sub_32914(&qword_3B6290, &qword_3B6288, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v32 = sub_F1C0((unint64_t *)&qword_3B2B60, (void (*)(uint64_t))sub_676C8, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  Publisher.receive<A>(on:options:)(v64, v3, v30, v28, v31, v32);
  sub_1459C((uint64_t)v3, &qword_3B2B18);

  swift_release(v65[0]);
  v33 = (void *)sub_32914(&qword_3B9B60, &qword_3B9B48, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v34 = v52;
  Publisher.emitPageRenderResourceEvents(using:onScreen:)(v52, 1, v4, v33);
  (*(void (**)(char *, _QWORD *))(v54 + 8))(v6, v4);
  sub_150C8((uint64_t)v66, (uint64_t)v65);
  v64[0] = v4;
  v64[1] = v33;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v64, &opaque type descriptor for <<opaque return type of Publisher.emitPageRenderResourceEvents(using:onScreen:)>>, 1);
  v36 = v55;
  v37 = static EmitLifecycle.defaultVerbosity.getter(v55, OpaqueTypeConformance2);
  v38 = v53;
  Publisher.emitLifecycle(for:name:definesInterval:context:verbose:)(v65, "Artwork.Loader", 14, 2, 1, 0, 0, v37 & 1, v36, OpaqueTypeConformance2);
  sub_1459C((uint64_t)v65, &qword_3B62A0);
  (*(void (**)(char *, uint64_t))(v60 + 8))(v8, v36);
  v39 = swift_allocObject(&unk_380F10, 24, 7);
  swift_weakInit(v39 + 16);
  v40 = v58;
  v41 = v57;
  v42 = v12;
  (*(void (**)(char *, uint64_t, uint64_t))(v58 + 16))(v57, v63, v12);
  v43 = *(unsigned __int8 *)(v40 + 80);
  v44 = (v43 + 24) & ~v43;
  v45 = swift_allocObject(&unk_380F38, v44 + v59, v43 | 7);
  *(_QWORD *)(v45 + 16) = v39;
  (*(void (**)(uint64_t, char *, uint64_t))(v40 + 32))(v45 + v44, v41, v42);
  v46 = swift_allocObject(&unk_380F10, 24, 7);
  swift_weakInit(v46 + 16);
  v47 = sub_32914(&qword_3B9B68, &qword_3B9B58, (uint64_t)&protocol conformance descriptor for EmitLifecycle<A>);
  v48 = v61;
  v49 = Publisher.sink(receiveCompletion:receiveValue:)(sub_105250, v45, sub_105290, v46, v61, v47);
  swift_release(v45);
  swift_release(v46);
  swift_release(v34);
  (*(void (**)(char *, uint64_t))(v62 + 8))(v38, v48);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v56, v42);
  __swift_destroy_boxed_opaque_existential_1(v66);
  __swift_destroy_boxed_opaque_existential_1(v67);
  return v49;
}

uint64_t sub_FF55C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  _BYTE v8[24];

  v4 = *a1;
  v5 = a2 + 16;
  swift_beginAccess(a2 + 16, v8, 0, 0);
  result = swift_weakLoadStrong(v5);
  if (result)
  {
    v7 = result;
    sub_FF5CC(a3, v4);
    return swift_release(v7);
  }
  return result;
}

uint64_t sub_FF5CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  char *v32;
  void (*v33)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  __n128 v36;
  unsigned int (*v37)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v38;
  uint64_t v39;
  double *v40;
  double v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int (*v49)(uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char v54;
  void (*v55)(char *, uint64_t);
  uint64_t v56;
  uint64_t result;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  _BOOL4 v64;
  uint64_t v65;
  uint64_t v66;
  uint8_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  uint64_t v73;
  NSObject *v74;
  os_log_type_t v75;
  uint8_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _OWORD v95[2];
  uint64_t v96;
  uint64_t v97;
  _BYTE v98[32];

  v3 = v2;
  v86 = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B9B28);
  __chkstk_darwin(v5);
  v80 = (char *)&v79 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Logger(0);
  v91 = *(_QWORD *)(v7 - 8);
  v92 = v7;
  __chkstk_darwin(v7);
  v90 = (char *)&v79 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v82 = (char *)&v79 - v10;
  v11 = type metadata accessor for ArtworkRequest(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v81 = (char *)&v79 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B9B70);
  __chkstk_darwin(v93);
  v15 = (char *)&v79 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7D58);
  __chkstk_darwin(v16);
  v84 = (uint64_t)&v79 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for ArtworkModel(0);
  __chkstk_darwin(v18);
  v83 = (uint64_t)&v79 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = _s6LoaderC19LoaderConfigurationVMa(0);
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v23 = (char *)&v79 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B9B78);
  __chkstk_darwin(v24);
  v87 = (uint64_t)&v79 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v28 = (char *)&v79 - v27;
  v30 = __chkstk_darwin(v29);
  v32 = (char *)&v79 - v31;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v12 + 16))((char *)&v79 - v31, a1, v11, v30);
  v94 = v12;
  v33 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56);
  v34 = 1;
  v33(v32, 0, 1, v11);
  v85 = v3;
  v35 = v3 + OBJC_IVAR____TtCV8ShelfKit7Artwork6Loader_loaderConfiguration;
  v36 = swift_beginAccess(v35, v98, 0, 0);
  v79 = v21;
  v37 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, __n128))(v21 + 48);
  v88 = v35;
  v89 = v20;
  if (!v37(v35, 1, v20, v36))
  {
    sub_14510(v88, (uint64_t)v23, _s6LoaderC19LoaderConfigurationVMa);
    v38 = v89;
    v39 = v83;
    sub_14510((uint64_t)&v23[*(int *)(v89 + 24)], v83, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
    v40 = (double *)&v23[*(int *)(v38 + 28)];
    v41 = *v40;
    v42 = v40[1];
    v43 = type metadata accessor for Artwork.Configuration(0);
    v44 = v23[*(int *)(v43 + 32)];
    v45 = *(double *)&v23[*(int *)(v38 + 20)];
    v46 = v84;
    sub_267BC((uint64_t)&v23[*(int *)(v43 + 28)], v84, &qword_3B7D58);
    v96 = 0;
    memset(v95, 0, sizeof(v95));
    ArtworkRequest.init(model:targetSize:contentMode:displayScale:retainAspectRatio:cropCodeOverride:destination:effects:trace:)(v39, v44, 0, v46, 0, _swiftEmptyArrayStorage, v95, v41, v42, v45);
    sub_145D8((uint64_t)v23, _s6LoaderC19LoaderConfigurationVMa);
    v34 = 0;
  }
  v33(v28, v34, 1, v11);
  v47 = (uint64_t)&v15[*(int *)(v93 + 48)];
  sub_267BC((uint64_t)v32, (uint64_t)v15, &qword_3B9B78);
  sub_267BC((uint64_t)v28, v47, &qword_3B9B78);
  v48 = v94;
  v49 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v94 + 48);
  if (v49((uint64_t)v15, 1, v11) == 1)
  {
    sub_1459C((uint64_t)v28, &qword_3B9B78);
    sub_1459C((uint64_t)v32, &qword_3B9B78);
    if (v49(v47, 1, v11) == 1)
    {
      sub_1459C((uint64_t)v15, &qword_3B9B78);
      goto LABEL_10;
    }
    goto LABEL_8;
  }
  v50 = v87;
  sub_267BC((uint64_t)v15, v87, &qword_3B9B78);
  if (v49(v47, 1, v11) == 1)
  {
    sub_1459C((uint64_t)v28, &qword_3B9B78);
    sub_1459C((uint64_t)v32, &qword_3B9B78);
    (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v50, v11);
LABEL_8:
    v51 = sub_1459C((uint64_t)v15, &qword_3B9B70);
    goto LABEL_13;
  }
  v52 = v81;
  (*(void (**)(char *, uint64_t, uint64_t))(v48 + 32))(v81, v47, v11);
  v53 = sub_F1C0(&qword_3B9B80, (void (*)(uint64_t))&type metadata accessor for ArtworkRequest, (uint64_t)&protocol conformance descriptor for ArtworkRequest);
  v54 = dispatch thunk of static Equatable.== infix(_:_:)(v50, v52, v11, v53);
  v55 = *(void (**)(char *, uint64_t))(v48 + 8);
  v55(v52, v11);
  sub_1459C((uint64_t)v28, &qword_3B9B78);
  sub_1459C((uint64_t)v32, &qword_3B9B78);
  v55((char *)v50, v11);
  v51 = sub_1459C((uint64_t)v15, &qword_3B9B78);
  if ((v54 & 1) != 0)
  {
LABEL_10:
    v56 = *(_QWORD *)(v85 + OBJC_IVAR____TtCV8ShelfKit7Artwork6Loader_currentRequest);
    *(_QWORD *)(v85 + OBJC_IVAR____TtCV8ShelfKit7Artwork6Loader_currentRequest) = 0;
    result = swift_release(v56);
    v58 = v86;
    if (v86)
    {
      v59 = swift_errorRetain(v86);
      v60 = v82;
      static Logger.artwork.getter(v59);
      swift_errorRetain(v58);
      v61 = swift_errorRetain(v58);
      v62 = Logger.logObject.getter(v61);
      v63 = static os_log_type_t.error.getter();
      v64 = os_log_type_enabled(v62, v63);
      v66 = v91;
      v65 = v92;
      if (v64)
      {
        v67 = (uint8_t *)swift_slowAlloc(12, -1);
        v68 = swift_slowAlloc(32, -1);
        *(_QWORD *)&v95[0] = v68;
        *(_DWORD *)v67 = 136315138;
        v97 = v58;
        swift_errorRetain(v58);
        v69 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2B08);
        v70 = String.init<A>(describing:)(&v97, v69);
        v97 = sub_69298(v70, v71, (uint64_t *)v95);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, v98);
        swift_bridgeObjectRelease();
        swift_errorRelease(v58);
        swift_errorRelease(v58);
        _os_log_impl(&dword_0, v62, v63, "Failed to load artwork, error: %s", v67, 0xCu);
        swift_arrayDestroy(v68, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v68, -1, -1);
        swift_slowDealloc(v67, -1, -1);

        swift_errorRelease(v58);
        (*(void (**)(char *, uint64_t))(v66 + 8))(v82, v92);
      }
      else
      {
        swift_errorRelease(v58);
        swift_errorRelease(v58);
        swift_errorRelease(v58);

        (*(void (**)(char *, uint64_t))(v66 + 8))(v60, v65);
      }
      v77 = (uint64_t)v80;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v79 + 56))(v80, 1, 1, v89);
      v78 = v88;
      swift_beginAccess(v88, v95, 33, 0);
      sub_104E68(v77, v78);
      return swift_endAccess(v95);
    }
    return result;
  }
LABEL_13:
  v72 = v90;
  v73 = static Logger.artwork.getter(v51);
  v74 = Logger.logObject.getter(v73);
  v75 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v74, v75))
  {
    v76 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v76 = 0;
    _os_log_impl(&dword_0, v74, v75, "Received a completion for a previous request", v76, 2u);
    swift_slowDealloc(v76, -1, -1);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v91 + 8))(v72, v92);
}

uint64_t sub_FFE28(void **a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  _QWORD v13[6];
  id v14;
  _BYTE v15[24];

  v2 = *a1;
  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v15, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    KeyPath = swift_getKeyPath(&unk_2F5978);
    v7 = swift_getKeyPath(&unk_2F59A0);
    static Published.subscript.getter(&v14, v5, KeyPath, v7);
    swift_release(KeyPath);
    swift_release(v7);
    v8 = v14;

    if (v8)
    {
      v9 = swift_getKeyPath(&unk_2F5978);
      v10 = swift_getKeyPath(&unk_2F59A0);
      v14 = v2;
      v11 = v2;
      return static Published.subscript.setter(&v14, v5, v9, v10);
    }
    else
    {
      __chkstk_darwin(*(_QWORD *)(v5 + OBJC_IVAR____TtCV8ShelfKit7Artwork6Loader_animation));
      v13[2] = v5;
      v13[3] = v2;
      withAnimation<A>(_:_:)(v12, sub_105298, v13, (char *)&type metadata for () + 8);
      return swift_release(v5);
    }
  }
  return result;
}

uint64_t sub_FFF64(uint64_t a1, void *a2)
{
  uint64_t KeyPath;
  uint64_t v5;
  id v6;
  void *v8;

  KeyPath = swift_getKeyPath(&unk_2F5978);
  v5 = swift_getKeyPath(&unk_2F59A0);
  v8 = a2;
  v6 = a2;
  swift_retain(a1);
  return static Published.subscript.setter(&v8, a1, KeyPath, v5);
}

uint64_t sub_FFFE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtCV8ShelfKit7Artwork6Loader__image;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B9B90);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_1459C(v0 + OBJC_IVAR____TtCV8ShelfKit7Artwork6Loader_loaderConfiguration, &qword_3B9B28);
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtCV8ShelfKit7Artwork6Loader_currentRequest));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtCV8ShelfKit7Artwork6Loader_animation));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10006C@<X0>(_QWORD *a1@<X8>)
{
  a1[3] = type metadata accessor for UniformBucketingStrategy(0);
  a1[4] = sub_F1C0((unint64_t *)&unk_3BF750, (void (*)(uint64_t))&type metadata accessor for UniformBucketingStrategy, (uint64_t)&protocol conformance descriptor for UniformBucketingStrategy);
  __swift_allocate_boxed_opaque_existential_2Tm(a1);
  return static UniformBucketingStrategy.uniform3000MaxStrategy.getter();
}

uint64_t EnvironmentValues.artworkBucketingStrategy.getter()
{
  unint64_t v0;

  v0 = sub_1000F8();
  return EnvironmentValues.subscript.getter(&type metadata for BucketingStrategyEnviromentKey, &type metadata for BucketingStrategyEnviromentKey, v0);
}

unint64_t sub_1000F8()
{
  unint64_t result;

  result = qword_3B9868;
  if (!qword_3B9868)
  {
    result = swift_getWitnessTable(&unk_2F5940);
    atomic_store(result, (unint64_t *)&qword_3B9868);
  }
  return result;
}

uint64_t EnvironmentValues.artworkBucketingStrategy.setter(_QWORD *a1)
{
  unint64_t v2;
  _BYTE v4[40];

  sub_150C8((uint64_t)a1, (uint64_t)v4);
  v2 = sub_1000F8();
  EnvironmentValues.subscript.setter(v4, &type metadata for BucketingStrategyEnviromentKey, &type metadata for BucketingStrategyEnviromentKey, v2);
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

void (*EnvironmentValues.artworkBucketingStrategy.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  unint64_t v4;

  v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[15] = v1;
  v4 = sub_1000F8();
  v3[16] = v4;
  EnvironmentValues.subscript.getter(&type metadata for BucketingStrategyEnviromentKey, &type metadata for BucketingStrategyEnviromentKey, v4);
  return sub_1001F0;
}

void sub_1001F0(uint64_t *a1, char a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)*a1;
  v3 = (_QWORD *)(*a1 + 40);
  v4 = *(_QWORD *)(*a1 + 128);
  if ((a2 & 1) != 0)
  {
    sub_150C8(*a1, (uint64_t)v3);
    sub_150C8((uint64_t)v3, (uint64_t)(v2 + 10));
    EnvironmentValues.subscript.setter(v2 + 10, &type metadata for BucketingStrategyEnviromentKey, &type metadata for BucketingStrategyEnviromentKey, v4);
    __swift_destroy_boxed_opaque_existential_1(v3);
  }
  else
  {
    sub_150C8(*a1, (uint64_t)v3);
    EnvironmentValues.subscript.setter(v3, &type metadata for BucketingStrategyEnviromentKey, &type metadata for BucketingStrategyEnviromentKey, v4);
  }
  __swift_destroy_boxed_opaque_existential_1(v2);
  free(v2);
}

uint64_t sub_1002A4()
{
  return _s6LoaderCMa(0);
}

uint64_t _s6LoaderCMa(uint64_t a1)
{
  return sub_1F9D4(a1, (uint64_t *)&unk_3B98B8, (uint64_t)&_s6LoaderCMn);
}

void sub_1002C0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[5];

  sub_100368(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_1003C0(319);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      v6[2] = &unk_2F57A8;
      v6[3] = &unk_2F57C0;
      v6[4] = (char *)&value witness table for Builtin.NativeObject + 64;
      swift_updateClassMetadata2(a1, 256, 5, v6, a1 + 80);
    }
  }
}

void sub_100368(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_3B98C8)
  {
    v2 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_3B98D0);
    v3 = type metadata accessor for Published(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_3B98C8);
  }
}

void sub_1003C0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_3B98D8)
  {
    v2 = _s6LoaderC19LoaderConfigurationVMa(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_3B98D8);
  }
}

uint64_t _s6LoaderC19LoaderConfigurationVMa(uint64_t a1)
{
  return sub_1F9D4(a1, qword_3B99D0, (uint64_t)&_s6LoaderC19LoaderConfigurationVMn);
}

uint64_t *sub_100428(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  id *v15;
  int v16;
  id v17;
  id *v18;
  int v19;
  id v20;
  id *v21;
  int v22;
  id v23;
  id *v24;
  int v25;
  id v26;
  id *v27;
  int v28;
  id v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  void (*v42)(uint64_t *, _QWORD, uint64_t, int *);
  int *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  id *v60;
  int v61;
  id v62;
  id *v63;
  int v64;
  id v65;
  id *v66;
  int v67;
  id v68;
  id *v69;
  int v70;
  id v71;
  id *v72;
  int v73;
  id v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = (int *)type metadata accessor for ArtworkModel(0);
    v8 = *((_QWORD *)v7 - 1);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, int *))(v8 + 48))(a2, 1, v7))
    {
      v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      v11 = a2[1];
      *a1 = *a2;
      a1[1] = v11;
      v12 = *((unsigned __int8 *)a2 + 32);
      swift_bridgeObjectRetain();
      if (v12 == 255)
      {
        *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
        *((_BYTE *)a1 + 32) = *((_BYTE *)a2 + 32);
      }
      else
      {
        v13 = a2[2];
        v14 = a2[3];
        sub_3D464(v13, v14, v12);
        a1[2] = v13;
        a1[3] = v14;
        *((_BYTE *)a1 + 32) = v12;
      }
      *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 5);
      v15 = (id *)(a2 + 7);
      v16 = *((unsigned __int8 *)a2 + 64);
      if (v16 == 255)
      {
        a1[7] = (uint64_t)*v15;
        *((_BYTE *)a1 + 64) = *((_BYTE *)a2 + 64);
      }
      else
      {
        v17 = *v15;
        sub_3D47C(*v15, *((_BYTE *)a2 + 64));
        a1[7] = (uint64_t)v17;
        *((_BYTE *)a1 + 64) = v16;
      }
      v18 = (id *)(a2 + 9);
      v19 = *((unsigned __int8 *)a2 + 80);
      if (v19 == 255)
      {
        a1[9] = (uint64_t)*v18;
        *((_BYTE *)a1 + 80) = *((_BYTE *)a2 + 80);
      }
      else
      {
        v20 = *v18;
        sub_3D47C(*v18, *((_BYTE *)a2 + 80));
        a1[9] = (uint64_t)v20;
        *((_BYTE *)a1 + 80) = v19;
      }
      v21 = (id *)(a2 + 11);
      v22 = *((unsigned __int8 *)a2 + 96);
      if (v22 == 255)
      {
        a1[11] = (uint64_t)*v21;
        *((_BYTE *)a1 + 96) = *((_BYTE *)a2 + 96);
      }
      else
      {
        v23 = *v21;
        sub_3D47C(*v21, *((_BYTE *)a2 + 96));
        a1[11] = (uint64_t)v23;
        *((_BYTE *)a1 + 96) = v22;
      }
      v24 = (id *)(a2 + 13);
      v25 = *((unsigned __int8 *)a2 + 112);
      if (v25 == 255)
      {
        a1[13] = (uint64_t)*v24;
        *((_BYTE *)a1 + 112) = *((_BYTE *)a2 + 112);
      }
      else
      {
        v26 = *v24;
        sub_3D47C(*v24, *((_BYTE *)a2 + 112));
        a1[13] = (uint64_t)v26;
        *((_BYTE *)a1 + 112) = v25;
      }
      v27 = (id *)(a2 + 15);
      v28 = *((unsigned __int8 *)a2 + 128);
      if (v28 == 255)
      {
        a1[15] = (uint64_t)*v27;
        *((_BYTE *)a1 + 128) = *((_BYTE *)a2 + 128);
      }
      else
      {
        v29 = *v27;
        sub_3D47C(*v27, *((_BYTE *)a2 + 128));
        a1[15] = (uint64_t)v29;
        *((_BYTE *)a1 + 128) = v28;
      }
      *((_BYTE *)a1 + 129) = *((_BYTE *)a2 + 129);
      v30 = v7[11];
      v31 = (char *)a1 + v30;
      v32 = (char *)a2 + v30;
      v33 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v31, v32, v33);
      v34 = v7[12];
      v35 = (uint64_t *)((char *)a1 + v34);
      v36 = (uint64_t *)((char *)a2 + v34);
      v37 = v36[1];
      *v35 = *v36;
      v35[1] = v37;
      *((_BYTE *)a1 + v7[13]) = *((_BYTE *)a2 + v7[13]);
      *((_BYTE *)a1 + v7[14]) = *((_BYTE *)a2 + v7[14]);
      *((_BYTE *)a1 + v7[15]) = *((_BYTE *)a2 + v7[15]);
      v38 = v7[16];
      v39 = (uint64_t *)((char *)a1 + v38);
      v40 = (uint64_t *)((char *)a2 + v38);
      v41 = v40[1];
      *v39 = *v40;
      v39[1] = v41;
      v42 = *(void (**)(uint64_t *, _QWORD, uint64_t, int *))(v8 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v42(a1, 0, 1, v7);
    }
    v43 = (int *)type metadata accessor for Artwork.Configuration(0);
    v44 = v43[5];
    v45 = (char *)a1 + v44;
    v46 = (char *)a2 + v44;
    *(_OWORD *)v45 = *(_OWORD *)v46;
    v45[16] = v46[16];
    *(_OWORD *)((char *)a1 + v43[6]) = *(_OWORD *)((char *)a2 + v43[6]);
    v47 = v43[7];
    v48 = (char *)a1 + v47;
    v49 = (char *)a2 + v47;
    v50 = type metadata accessor for CropCode(0);
    v51 = *(_QWORD *)(v50 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48))(v49, 1, v50))
    {
      v52 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7D58);
      memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v51 + 16))(v48, v49, v50);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v51 + 56))(v48, 0, 1, v50);
    }
    *((_BYTE *)a1 + v43[8]) = *((_BYTE *)a2 + v43[8]);
    v53 = a3[6];
    *(uint64_t *)((char *)a1 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    v54 = (char *)a1 + v53;
    v55 = (char *)a2 + v53;
    v56 = *(uint64_t *)((char *)a2 + v53 + 8);
    *(_QWORD *)v54 = *(uint64_t *)((char *)a2 + v53);
    *((_QWORD *)v54 + 1) = v56;
    v57 = *((unsigned __int8 *)a2 + v53 + 32);
    swift_bridgeObjectRetain();
    if (v57 == 255)
    {
      *((_OWORD *)v54 + 1) = *((_OWORD *)v55 + 1);
      v54[32] = v55[32];
    }
    else
    {
      v58 = *((_QWORD *)v55 + 2);
      v59 = *((_QWORD *)v55 + 3);
      sub_3D464(v58, v59, v57);
      *((_QWORD *)v54 + 2) = v58;
      *((_QWORD *)v54 + 3) = v59;
      v54[32] = v57;
    }
    *(_OWORD *)(v54 + 40) = *(_OWORD *)(v55 + 40);
    v60 = (id *)(v55 + 56);
    v61 = v55[64];
    if (v61 == 255)
    {
      *((_QWORD *)v54 + 7) = *v60;
      v54[64] = v55[64];
    }
    else
    {
      v62 = *v60;
      sub_3D47C(*v60, v55[64]);
      *((_QWORD *)v54 + 7) = v62;
      v54[64] = v61;
    }
    v63 = (id *)(v55 + 72);
    v64 = v55[80];
    if (v64 == 255)
    {
      *((_QWORD *)v54 + 9) = *v63;
      v54[80] = v55[80];
    }
    else
    {
      v65 = *v63;
      sub_3D47C(*v63, v55[80]);
      *((_QWORD *)v54 + 9) = v65;
      v54[80] = v64;
    }
    v66 = (id *)(v55 + 88);
    v67 = v55[96];
    if (v67 == 255)
    {
      *((_QWORD *)v54 + 11) = *v66;
      v54[96] = v55[96];
    }
    else
    {
      v68 = *v66;
      sub_3D47C(*v66, v55[96]);
      *((_QWORD *)v54 + 11) = v68;
      v54[96] = v67;
    }
    v69 = (id *)(v55 + 104);
    v70 = v55[112];
    if (v70 == 255)
    {
      *((_QWORD *)v54 + 13) = *v69;
      v54[112] = v55[112];
    }
    else
    {
      v71 = *v69;
      sub_3D47C(*v69, v55[112]);
      *((_QWORD *)v54 + 13) = v71;
      v54[112] = v70;
    }
    v72 = (id *)(v55 + 120);
    v73 = v55[128];
    if (v73 == 255)
    {
      *((_QWORD *)v54 + 15) = *v72;
      v54[128] = v55[128];
    }
    else
    {
      v74 = *v72;
      sub_3D47C(*v72, v55[128]);
      *((_QWORD *)v54 + 15) = v74;
      v54[128] = v73;
    }
    v54[129] = v55[129];
    v75 = v7[11];
    v76 = &v54[v75];
    v77 = &v55[v75];
    v78 = type metadata accessor for ArtworkCrop(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v78 - 8) + 16))(v76, v77, v78);
    v79 = v7[12];
    v80 = &v54[v79];
    v81 = &v55[v79];
    v82 = *((_QWORD *)v81 + 1);
    *(_QWORD *)v80 = *(_QWORD *)v81;
    *((_QWORD *)v80 + 1) = v82;
    v54[v7[13]] = v55[v7[13]];
    v54[v7[14]] = v55[v7[14]];
    v54[v7[15]] = v55[v7[15]];
    v83 = v7[16];
    v84 = &v54[v83];
    v85 = &v55[v83];
    v86 = *((_QWORD *)v85 + 1);
    *(_QWORD *)v84 = *(_QWORD *)v85;
    *((_QWORD *)v84 + 1) = v86;
    *(_OWORD *)((char *)a1 + a3[7]) = *(_OWORD *)((char *)a2 + a3[7]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_100A2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;

  v4 = type metadata accessor for ArtworkModel(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, 1, v4))
  {
    swift_bridgeObjectRelease();
    v5 = *(unsigned __int8 *)(a1 + 32);
    if (v5 != 255)
      sub_3B5BC(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), v5);
    v6 = *(unsigned __int8 *)(a1 + 64);
    if (v6 != 255)
      sub_3D624(*(id *)(a1 + 56), v6);
    v7 = *(unsigned __int8 *)(a1 + 80);
    if (v7 != 255)
      sub_3D624(*(id *)(a1 + 72), v7);
    v8 = *(unsigned __int8 *)(a1 + 96);
    if (v8 != 255)
      sub_3D624(*(id *)(a1 + 88), v8);
    v9 = *(unsigned __int8 *)(a1 + 112);
    if (v9 != 255)
      sub_3D624(*(id *)(a1 + 104), v9);
    v10 = *(unsigned __int8 *)(a1 + 128);
    if (v10 != 255)
      sub_3D624(*(id *)(a1 + 120), v10);
    v11 = a1 + *(int *)(v4 + 44);
    v12 = type metadata accessor for ArtworkCrop(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v13 = a1 + *(int *)(type metadata accessor for Artwork.Configuration(0) + 28);
  v14 = type metadata accessor for CropCode(0);
  v15 = *(_QWORD *)(v14 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
  v16 = a1 + *(int *)(a2 + 24);
  swift_bridgeObjectRelease();
  v17 = *(unsigned __int8 *)(v16 + 32);
  if (v17 != 255)
    sub_3B5BC(*(_QWORD *)(v16 + 16), *(_QWORD *)(v16 + 24), v17);
  v18 = *(unsigned __int8 *)(v16 + 64);
  if (v18 != 255)
    sub_3D624(*(id *)(v16 + 56), v18);
  v19 = *(unsigned __int8 *)(v16 + 80);
  if (v19 != 255)
    sub_3D624(*(id *)(v16 + 72), v19);
  v20 = *(unsigned __int8 *)(v16 + 96);
  if (v20 != 255)
    sub_3D624(*(id *)(v16 + 88), v20);
  v21 = *(unsigned __int8 *)(v16 + 112);
  if (v21 != 255)
    sub_3D624(*(id *)(v16 + 104), v21);
  v22 = *(unsigned __int8 *)(v16 + 128);
  if (v22 != 255)
    sub_3D624(*(id *)(v16 + 120), v22);
  v23 = v16 + *(int *)(v4 + 44);
  v24 = type metadata accessor for ArtworkCrop(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(v23, v24);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *sub_100C58(_QWORD *a1, _QWORD *a2, int *a3)
{
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  id *v13;
  int v14;
  id v15;
  id *v16;
  int v17;
  id v18;
  id *v19;
  int v20;
  id v21;
  id *v22;
  int v23;
  id v24;
  id *v25;
  int v26;
  id v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  void (*v40)(_QWORD *, _QWORD, uint64_t, int *);
  int *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  id *v58;
  int v59;
  id v60;
  id *v61;
  int v62;
  id v63;
  id *v64;
  int v65;
  id v66;
  id *v67;
  int v68;
  id v69;
  id *v70;
  int v71;
  id v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;

  v6 = (int *)type metadata accessor for ArtworkModel(0);
  v7 = *((_QWORD *)v6 - 1);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    v9 = a2[1];
    *a1 = *a2;
    a1[1] = v9;
    v10 = *((unsigned __int8 *)a2 + 32);
    swift_bridgeObjectRetain();
    if (v10 == 255)
    {
      *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
      *((_BYTE *)a1 + 32) = *((_BYTE *)a2 + 32);
    }
    else
    {
      v11 = a2[2];
      v12 = a2[3];
      sub_3D464(v11, v12, v10);
      a1[2] = v11;
      a1[3] = v12;
      *((_BYTE *)a1 + 32) = v10;
    }
    *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 5);
    v13 = (id *)(a2 + 7);
    v14 = *((unsigned __int8 *)a2 + 64);
    if (v14 == 255)
    {
      a1[7] = *v13;
      *((_BYTE *)a1 + 64) = *((_BYTE *)a2 + 64);
    }
    else
    {
      v15 = *v13;
      sub_3D47C(*v13, *((_BYTE *)a2 + 64));
      a1[7] = v15;
      *((_BYTE *)a1 + 64) = v14;
    }
    v16 = (id *)(a2 + 9);
    v17 = *((unsigned __int8 *)a2 + 80);
    if (v17 == 255)
    {
      a1[9] = *v16;
      *((_BYTE *)a1 + 80) = *((_BYTE *)a2 + 80);
    }
    else
    {
      v18 = *v16;
      sub_3D47C(*v16, *((_BYTE *)a2 + 80));
      a1[9] = v18;
      *((_BYTE *)a1 + 80) = v17;
    }
    v19 = (id *)(a2 + 11);
    v20 = *((unsigned __int8 *)a2 + 96);
    if (v20 == 255)
    {
      a1[11] = *v19;
      *((_BYTE *)a1 + 96) = *((_BYTE *)a2 + 96);
    }
    else
    {
      v21 = *v19;
      sub_3D47C(*v19, *((_BYTE *)a2 + 96));
      a1[11] = v21;
      *((_BYTE *)a1 + 96) = v20;
    }
    v22 = (id *)(a2 + 13);
    v23 = *((unsigned __int8 *)a2 + 112);
    if (v23 == 255)
    {
      a1[13] = *v22;
      *((_BYTE *)a1 + 112) = *((_BYTE *)a2 + 112);
    }
    else
    {
      v24 = *v22;
      sub_3D47C(*v22, *((_BYTE *)a2 + 112));
      a1[13] = v24;
      *((_BYTE *)a1 + 112) = v23;
    }
    v25 = (id *)(a2 + 15);
    v26 = *((unsigned __int8 *)a2 + 128);
    if (v26 == 255)
    {
      a1[15] = *v25;
      *((_BYTE *)a1 + 128) = *((_BYTE *)a2 + 128);
    }
    else
    {
      v27 = *v25;
      sub_3D47C(*v25, *((_BYTE *)a2 + 128));
      a1[15] = v27;
      *((_BYTE *)a1 + 128) = v26;
    }
    *((_BYTE *)a1 + 129) = *((_BYTE *)a2 + 129);
    v28 = v6[11];
    v29 = (char *)a1 + v28;
    v30 = (char *)a2 + v28;
    v31 = type metadata accessor for ArtworkCrop(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v29, v30, v31);
    v32 = v6[12];
    v33 = (_QWORD *)((char *)a1 + v32);
    v34 = (_QWORD *)((char *)a2 + v32);
    v35 = v34[1];
    *v33 = *v34;
    v33[1] = v35;
    *((_BYTE *)a1 + v6[13]) = *((_BYTE *)a2 + v6[13]);
    *((_BYTE *)a1 + v6[14]) = *((_BYTE *)a2 + v6[14]);
    *((_BYTE *)a1 + v6[15]) = *((_BYTE *)a2 + v6[15]);
    v36 = v6[16];
    v37 = (_QWORD *)((char *)a1 + v36);
    v38 = (_QWORD *)((char *)a2 + v36);
    v39 = v38[1];
    *v37 = *v38;
    v37[1] = v39;
    v40 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v7 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v40(a1, 0, 1, v6);
  }
  v41 = (int *)type metadata accessor for Artwork.Configuration(0);
  v42 = v41[5];
  v43 = (char *)a1 + v42;
  v44 = (char *)a2 + v42;
  *(_OWORD *)v43 = *(_OWORD *)v44;
  v43[16] = v44[16];
  *(_OWORD *)((char *)a1 + v41[6]) = *(_OWORD *)((char *)a2 + v41[6]);
  v45 = v41[7];
  v46 = (char *)a1 + v45;
  v47 = (char *)a2 + v45;
  v48 = type metadata accessor for CropCode(0);
  v49 = *(_QWORD *)(v48 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v47, 1, v48))
  {
    v50 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7D58);
    memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v46, v47, v48);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v46, 0, 1, v48);
  }
  *((_BYTE *)a1 + v41[8]) = *((_BYTE *)a2 + v41[8]);
  v51 = a3[6];
  *(_QWORD *)((char *)a1 + a3[5]) = *(_QWORD *)((char *)a2 + a3[5]);
  v52 = (char *)a1 + v51;
  v53 = (char *)a2 + v51;
  v54 = *(_QWORD *)((char *)a2 + v51 + 8);
  *(_QWORD *)v52 = *(_QWORD *)((char *)a2 + v51);
  *((_QWORD *)v52 + 1) = v54;
  v55 = *((unsigned __int8 *)a2 + v51 + 32);
  swift_bridgeObjectRetain();
  if (v55 == 255)
  {
    *((_OWORD *)v52 + 1) = *((_OWORD *)v53 + 1);
    v52[32] = v53[32];
  }
  else
  {
    v56 = *((_QWORD *)v53 + 2);
    v57 = *((_QWORD *)v53 + 3);
    sub_3D464(v56, v57, v55);
    *((_QWORD *)v52 + 2) = v56;
    *((_QWORD *)v52 + 3) = v57;
    v52[32] = v55;
  }
  *(_OWORD *)(v52 + 40) = *(_OWORD *)(v53 + 40);
  v58 = (id *)(v53 + 56);
  v59 = v53[64];
  if (v59 == 255)
  {
    *((_QWORD *)v52 + 7) = *v58;
    v52[64] = v53[64];
  }
  else
  {
    v60 = *v58;
    sub_3D47C(*v58, v53[64]);
    *((_QWORD *)v52 + 7) = v60;
    v52[64] = v59;
  }
  v61 = (id *)(v53 + 72);
  v62 = v53[80];
  if (v62 == 255)
  {
    *((_QWORD *)v52 + 9) = *v61;
    v52[80] = v53[80];
  }
  else
  {
    v63 = *v61;
    sub_3D47C(*v61, v53[80]);
    *((_QWORD *)v52 + 9) = v63;
    v52[80] = v62;
  }
  v64 = (id *)(v53 + 88);
  v65 = v53[96];
  if (v65 == 255)
  {
    *((_QWORD *)v52 + 11) = *v64;
    v52[96] = v53[96];
  }
  else
  {
    v66 = *v64;
    sub_3D47C(*v64, v53[96]);
    *((_QWORD *)v52 + 11) = v66;
    v52[96] = v65;
  }
  v67 = (id *)(v53 + 104);
  v68 = v53[112];
  if (v68 == 255)
  {
    *((_QWORD *)v52 + 13) = *v67;
    v52[112] = v53[112];
  }
  else
  {
    v69 = *v67;
    sub_3D47C(*v67, v53[112]);
    *((_QWORD *)v52 + 13) = v69;
    v52[112] = v68;
  }
  v70 = (id *)(v53 + 120);
  v71 = v53[128];
  if (v71 == 255)
  {
    *((_QWORD *)v52 + 15) = *v70;
    v52[128] = v53[128];
  }
  else
  {
    v72 = *v70;
    sub_3D47C(*v70, v53[128]);
    *((_QWORD *)v52 + 15) = v72;
    v52[128] = v71;
  }
  v52[129] = v53[129];
  v73 = v6[11];
  v74 = &v52[v73];
  v75 = &v53[v73];
  v76 = type metadata accessor for ArtworkCrop(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v76 - 8) + 16))(v74, v75, v76);
  v77 = v6[12];
  v78 = &v52[v77];
  v79 = &v53[v77];
  v80 = *((_QWORD *)v79 + 1);
  *(_QWORD *)v78 = *(_QWORD *)v79;
  *((_QWORD *)v78 + 1) = v80;
  v52[v6[13]] = v53[v6[13]];
  v52[v6[14]] = v53[v6[14]];
  v52[v6[15]] = v53[v6[15]];
  v81 = v6[16];
  v82 = &v52[v81];
  v83 = &v53[v81];
  v84 = *((_QWORD *)v83 + 1);
  *(_QWORD *)v82 = *(_QWORD *)v83;
  *((_QWORD *)v82 + 1) = v84;
  *(_OWORD *)((char *)a1 + a3[7]) = *(_OWORD *)((char *)a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_101230(uint64_t a1, uint64_t a2, int *a3)
{
  int *v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, int *);
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 *v15;
  __int128 *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  __int128 v23;
  id *v24;
  int v25;
  id v26;
  id v27;
  id *v28;
  int v29;
  id v30;
  id v31;
  id *v32;
  int v33;
  id v34;
  id v35;
  id *v36;
  int v37;
  id v38;
  id v39;
  id *v40;
  int v41;
  id v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  void (*v54)(uint64_t, _QWORD, uint64_t, int *);
  uint64_t v55;
  uint64_t v56;
  char v57;
  __int128 v58;
  id *v59;
  id *v60;
  int v61;
  id v62;
  void *v63;
  char v64;
  id v65;
  char v66;
  id v67;
  id *v68;
  id *v69;
  int v70;
  id v71;
  void *v72;
  char v73;
  id v74;
  char v75;
  id v76;
  id *v77;
  id *v78;
  int v79;
  id v80;
  void *v81;
  char v82;
  id v83;
  char v84;
  id v85;
  id *v86;
  id *v87;
  int v88;
  id v89;
  void *v90;
  char v91;
  id v92;
  char v93;
  id v94;
  id *v95;
  id *v96;
  int v97;
  id v98;
  void *v99;
  char v100;
  id v101;
  char v102;
  id v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  _QWORD *v110;
  uint64_t v111;
  _QWORD *v112;
  _QWORD *v113;
  int *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  uint64_t v119;
  _QWORD *v120;
  _QWORD *v121;
  uint64_t v122;
  void *v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t (*v127)(void *, uint64_t, uint64_t);
  int v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  __int128 *v134;
  __int128 *v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unsigned __int8 v141;
  uint64_t v142;
  uint64_t v143;
  char v144;
  __int128 v145;
  id *v146;
  id *v147;
  int v148;
  id v149;
  void *v150;
  char v151;
  id v152;
  char v153;
  id v154;
  id *v155;
  id *v156;
  int v157;
  id v158;
  void *v159;
  char v160;
  id v161;
  char v162;
  id v163;
  id *v164;
  id *v165;
  int v166;
  id v167;
  void *v168;
  char v169;
  id v170;
  char v171;
  id v172;
  id *v173;
  id *v174;
  int v175;
  id v176;
  void *v177;
  char v178;
  id v179;
  char v180;
  id v181;
  id *v182;
  id *v183;
  int v184;
  id v185;
  void *v186;
  char v187;
  id v188;
  char v189;
  id v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  _QWORD *v196;
  _QWORD *v197;
  uint64_t v198;
  _QWORD *v199;
  _QWORD *v200;
  uint64_t v201;
  _QWORD *v202;
  _QWORD *v203;
  int *v205;

  v6 = (int *)type metadata accessor for ArtworkModel(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  v205 = a3;
  if (v9)
  {
    if (!v10)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      v11 = *(unsigned __int8 *)(a2 + 32);
      swift_bridgeObjectRetain();
      if (v11 == 255)
      {
        v23 = *(_OWORD *)(a2 + 16);
        *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
        *(_OWORD *)(a1 + 16) = v23;
      }
      else
      {
        v12 = *(_QWORD *)(a2 + 16);
        v13 = *(_QWORD *)(a2 + 24);
        sub_3D464(v12, v13, v11);
        *(_QWORD *)(a1 + 16) = v12;
        *(_QWORD *)(a1 + 24) = v13;
        *(_BYTE *)(a1 + 32) = v11;
      }
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      v24 = (id *)(a2 + 56);
      v25 = *(unsigned __int8 *)(a2 + 64);
      if (v25 == 255)
      {
        v27 = *v24;
        *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
        *(_QWORD *)(a1 + 56) = v27;
      }
      else
      {
        v26 = *v24;
        sub_3D47C(*v24, *(_BYTE *)(a2 + 64));
        *(_QWORD *)(a1 + 56) = v26;
        *(_BYTE *)(a1 + 64) = v25;
      }
      v28 = (id *)(a2 + 72);
      v29 = *(unsigned __int8 *)(a2 + 80);
      if (v29 == 255)
      {
        v31 = *v28;
        *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
        *(_QWORD *)(a1 + 72) = v31;
      }
      else
      {
        v30 = *v28;
        sub_3D47C(*v28, *(_BYTE *)(a2 + 80));
        *(_QWORD *)(a1 + 72) = v30;
        *(_BYTE *)(a1 + 80) = v29;
      }
      v32 = (id *)(a2 + 88);
      v33 = *(unsigned __int8 *)(a2 + 96);
      if (v33 == 255)
      {
        v35 = *v32;
        *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
        *(_QWORD *)(a1 + 88) = v35;
      }
      else
      {
        v34 = *v32;
        sub_3D47C(*v32, *(_BYTE *)(a2 + 96));
        *(_QWORD *)(a1 + 88) = v34;
        *(_BYTE *)(a1 + 96) = v33;
      }
      v36 = (id *)(a2 + 104);
      v37 = *(unsigned __int8 *)(a2 + 112);
      if (v37 == 255)
      {
        v39 = *v36;
        *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
        *(_QWORD *)(a1 + 104) = v39;
      }
      else
      {
        v38 = *v36;
        sub_3D47C(*v36, *(_BYTE *)(a2 + 112));
        *(_QWORD *)(a1 + 104) = v38;
        *(_BYTE *)(a1 + 112) = v37;
      }
      v40 = (id *)(a2 + 120);
      v41 = *(unsigned __int8 *)(a2 + 128);
      if (v41 == 255)
      {
        v43 = *v40;
        *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
        *(_QWORD *)(a1 + 120) = v43;
      }
      else
      {
        v42 = *v40;
        sub_3D47C(*v40, *(_BYTE *)(a2 + 128));
        *(_QWORD *)(a1 + 120) = v42;
        *(_BYTE *)(a1 + 128) = v41;
      }
      *(_BYTE *)(a1 + 129) = *(_BYTE *)(a2 + 129);
      v44 = v6[11];
      v45 = a1 + v44;
      v46 = a2 + v44;
      v47 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 16))(v45, v46, v47);
      v48 = v6[12];
      v49 = (_QWORD *)(a1 + v48);
      v50 = (_QWORD *)(a2 + v48);
      *v49 = *v50;
      v49[1] = v50[1];
      *(_BYTE *)(a1 + v6[13]) = *(_BYTE *)(a2 + v6[13]);
      *(_BYTE *)(a1 + v6[14]) = *(_BYTE *)(a2 + v6[14]);
      *(_BYTE *)(a1 + v6[15]) = *(_BYTE *)(a2 + v6[15]);
      v51 = v6[16];
      v52 = (_QWORD *)(a1 + v51);
      v53 = (_QWORD *)(a2 + v51);
      *v52 = *v53;
      v52[1] = v53[1];
      v54 = *(void (**)(uint64_t, _QWORD, uint64_t, int *))(v7 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v54(a1, 0, 1, v6);
      goto LABEL_68;
    }
LABEL_7:
    v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
    memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_68;
  }
  if (v10)
  {
    sub_145D8(a1, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
    goto LABEL_7;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v15 = (__int128 *)(a1 + 16);
  v16 = (__int128 *)(a2 + 16);
  v17 = *(unsigned __int8 *)(a2 + 32);
  if (*(unsigned __int8 *)(a1 + 32) == 255)
  {
    if (v17 == 255)
    {
      v58 = *v16;
      *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
      *v15 = v58;
    }
    else
    {
      v55 = *(_QWORD *)(a2 + 16);
      v56 = *(_QWORD *)(a2 + 24);
      sub_3D464(v55, v56, *(_BYTE *)(a2 + 32));
      *(_QWORD *)(a1 + 16) = v55;
      *(_QWORD *)(a1 + 24) = v56;
      *(_BYTE *)(a1 + 32) = v17;
    }
  }
  else if (v17 == 255)
  {
    sub_3E43C(a1 + 16);
    v57 = *(_BYTE *)(a2 + 32);
    *v15 = *v16;
    *(_BYTE *)(a1 + 32) = v57;
  }
  else
  {
    v18 = *(_QWORD *)(a2 + 16);
    v19 = *(_QWORD *)(a2 + 24);
    sub_3D464(v18, v19, *(_BYTE *)(a2 + 32));
    v20 = *(_QWORD *)(a1 + 16);
    v21 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 16) = v18;
    *(_QWORD *)(a1 + 24) = v19;
    v22 = *(_BYTE *)(a1 + 32);
    *(_BYTE *)(a1 + 32) = v17;
    sub_3B5BC(v20, v21, v22);
  }
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v59 = (id *)(a1 + 56);
  v60 = (id *)(a2 + 56);
  v61 = *(unsigned __int8 *)(a2 + 64);
  if (*(unsigned __int8 *)(a1 + 64) == 255)
  {
    if (v61 == 255)
    {
      v67 = *v60;
      *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
      *v59 = v67;
    }
    else
    {
      v65 = *v60;
      sub_3D47C(*v60, *(_BYTE *)(a2 + 64));
      *(_QWORD *)(a1 + 56) = v65;
      *(_BYTE *)(a1 + 64) = v61;
    }
  }
  else if (v61 == 255)
  {
    sub_3E470(a1 + 56);
    v66 = *(_BYTE *)(a2 + 64);
    *v59 = *v60;
    *(_BYTE *)(a1 + 64) = v66;
  }
  else
  {
    v62 = *v60;
    sub_3D47C(*v60, *(_BYTE *)(a2 + 64));
    v63 = *(void **)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v62;
    v64 = *(_BYTE *)(a1 + 64);
    *(_BYTE *)(a1 + 64) = v61;
    sub_3D624(v63, v64);
  }
  v68 = (id *)(a1 + 72);
  v69 = (id *)(a2 + 72);
  v70 = *(unsigned __int8 *)(a2 + 80);
  if (*(unsigned __int8 *)(a1 + 80) == 255)
  {
    if (v70 == 255)
    {
      v76 = *v69;
      *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
      *v68 = v76;
    }
    else
    {
      v74 = *v69;
      sub_3D47C(*v69, *(_BYTE *)(a2 + 80));
      *(_QWORD *)(a1 + 72) = v74;
      *(_BYTE *)(a1 + 80) = v70;
    }
  }
  else if (v70 == 255)
  {
    sub_3E470(a1 + 72);
    v75 = *(_BYTE *)(a2 + 80);
    *v68 = *v69;
    *(_BYTE *)(a1 + 80) = v75;
  }
  else
  {
    v71 = *v69;
    sub_3D47C(*v69, *(_BYTE *)(a2 + 80));
    v72 = *(void **)(a1 + 72);
    *(_QWORD *)(a1 + 72) = v71;
    v73 = *(_BYTE *)(a1 + 80);
    *(_BYTE *)(a1 + 80) = v70;
    sub_3D624(v72, v73);
  }
  v77 = (id *)(a1 + 88);
  v78 = (id *)(a2 + 88);
  v79 = *(unsigned __int8 *)(a2 + 96);
  if (*(unsigned __int8 *)(a1 + 96) == 255)
  {
    if (v79 == 255)
    {
      v85 = *v78;
      *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
      *v77 = v85;
    }
    else
    {
      v83 = *v78;
      sub_3D47C(*v78, *(_BYTE *)(a2 + 96));
      *(_QWORD *)(a1 + 88) = v83;
      *(_BYTE *)(a1 + 96) = v79;
    }
  }
  else if (v79 == 255)
  {
    sub_3E470(a1 + 88);
    v84 = *(_BYTE *)(a2 + 96);
    *v77 = *v78;
    *(_BYTE *)(a1 + 96) = v84;
  }
  else
  {
    v80 = *v78;
    sub_3D47C(*v78, *(_BYTE *)(a2 + 96));
    v81 = *(void **)(a1 + 88);
    *(_QWORD *)(a1 + 88) = v80;
    v82 = *(_BYTE *)(a1 + 96);
    *(_BYTE *)(a1 + 96) = v79;
    sub_3D624(v81, v82);
  }
  v86 = (id *)(a1 + 104);
  v87 = (id *)(a2 + 104);
  v88 = *(unsigned __int8 *)(a2 + 112);
  if (*(unsigned __int8 *)(a1 + 112) == 255)
  {
    if (v88 == 255)
    {
      v94 = *v87;
      *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
      *v86 = v94;
    }
    else
    {
      v92 = *v87;
      sub_3D47C(*v87, *(_BYTE *)(a2 + 112));
      *(_QWORD *)(a1 + 104) = v92;
      *(_BYTE *)(a1 + 112) = v88;
    }
  }
  else if (v88 == 255)
  {
    sub_3E470(a1 + 104);
    v93 = *(_BYTE *)(a2 + 112);
    *v86 = *v87;
    *(_BYTE *)(a1 + 112) = v93;
  }
  else
  {
    v89 = *v87;
    sub_3D47C(*v87, *(_BYTE *)(a2 + 112));
    v90 = *(void **)(a1 + 104);
    *(_QWORD *)(a1 + 104) = v89;
    v91 = *(_BYTE *)(a1 + 112);
    *(_BYTE *)(a1 + 112) = v88;
    sub_3D624(v90, v91);
  }
  v95 = (id *)(a1 + 120);
  v96 = (id *)(a2 + 120);
  v97 = *(unsigned __int8 *)(a2 + 128);
  if (*(unsigned __int8 *)(a1 + 128) == 255)
  {
    if (v97 == 255)
    {
      v103 = *v96;
      *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
      *v95 = v103;
    }
    else
    {
      v101 = *v96;
      sub_3D47C(*v96, *(_BYTE *)(a2 + 128));
      *(_QWORD *)(a1 + 120) = v101;
      *(_BYTE *)(a1 + 128) = v97;
    }
  }
  else if (v97 == 255)
  {
    sub_3E470(a1 + 120);
    v102 = *(_BYTE *)(a2 + 128);
    *v95 = *v96;
    *(_BYTE *)(a1 + 128) = v102;
  }
  else
  {
    v98 = *v96;
    sub_3D47C(*v96, *(_BYTE *)(a2 + 128));
    v99 = *(void **)(a1 + 120);
    *(_QWORD *)(a1 + 120) = v98;
    v100 = *(_BYTE *)(a1 + 128);
    *(_BYTE *)(a1 + 128) = v97;
    sub_3D624(v99, v100);
  }
  *(_BYTE *)(a1 + 129) = *(_BYTE *)(a2 + 129);
  v104 = v6[11];
  v105 = a1 + v104;
  v106 = a2 + v104;
  v107 = type metadata accessor for ArtworkCrop(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v107 - 8) + 24))(v105, v106, v107);
  v108 = v6[12];
  v109 = (_QWORD *)(a1 + v108);
  v110 = (_QWORD *)(a2 + v108);
  *v109 = *v110;
  v109[1] = v110[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + v6[13]) = *(_BYTE *)(a2 + v6[13]);
  *(_BYTE *)(a1 + v6[14]) = *(_BYTE *)(a2 + v6[14]);
  *(_BYTE *)(a1 + v6[15]) = *(_BYTE *)(a2 + v6[15]);
  v111 = v6[16];
  v112 = (_QWORD *)(a1 + v111);
  v113 = (_QWORD *)(a2 + v111);
  *v112 = *v113;
  v112[1] = v113[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_68:
  v114 = (int *)type metadata accessor for Artwork.Configuration(0);
  v115 = v114[5];
  v116 = a1 + v115;
  v117 = a2 + v115;
  v118 = *(_BYTE *)(v117 + 16);
  *(_OWORD *)v116 = *(_OWORD *)v117;
  *(_BYTE *)(v116 + 16) = v118;
  v119 = v114[6];
  v120 = (_QWORD *)(a1 + v119);
  v121 = (_QWORD *)(a2 + v119);
  *v120 = *v121;
  v120[1] = v121[1];
  v122 = v114[7];
  v123 = (void *)(a1 + v122);
  v124 = (void *)(a2 + v122);
  v125 = type metadata accessor for CropCode(0);
  v126 = *(_QWORD *)(v125 - 8);
  v127 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v126 + 48);
  v128 = v127(v123, 1, v125);
  v129 = v127(v124, 1, v125);
  if (v128)
  {
    if (!v129)
    {
      (*(void (**)(void *, void *, uint64_t))(v126 + 16))(v123, v124, v125);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v126 + 56))(v123, 0, 1, v125);
      goto LABEL_74;
    }
    goto LABEL_73;
  }
  if (v129)
  {
    (*(void (**)(void *, uint64_t))(v126 + 8))(v123, v125);
LABEL_73:
    v130 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7D58);
    memcpy(v123, v124, *(_QWORD *)(*(_QWORD *)(v130 - 8) + 64));
    goto LABEL_74;
  }
  (*(void (**)(void *, void *, uint64_t))(v126 + 24))(v123, v124, v125);
LABEL_74:
  *(_BYTE *)(a1 + v114[8]) = *(_BYTE *)(a2 + v114[8]);
  *(_QWORD *)(a1 + v205[5]) = *(_QWORD *)(a2 + v205[5]);
  v131 = v205[6];
  v132 = a1 + v131;
  v133 = a2 + v131;
  *(_QWORD *)v132 = *(_QWORD *)(a2 + v131);
  *(_QWORD *)(v132 + 8) = *(_QWORD *)(a2 + v131 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v134 = (__int128 *)(v132 + 16);
  v135 = (__int128 *)(v133 + 16);
  v136 = *(unsigned __int8 *)(v133 + 32);
  if (*(unsigned __int8 *)(v132 + 32) == 255)
  {
    if (v136 == 255)
    {
      v145 = *v135;
      *(_BYTE *)(v132 + 32) = *(_BYTE *)(v133 + 32);
      *v134 = v145;
    }
    else
    {
      v142 = *(_QWORD *)(v133 + 16);
      v143 = *(_QWORD *)(v133 + 24);
      sub_3D464(v142, v143, *(_BYTE *)(v133 + 32));
      *(_QWORD *)(v132 + 16) = v142;
      *(_QWORD *)(v132 + 24) = v143;
      *(_BYTE *)(v132 + 32) = v136;
    }
  }
  else if (v136 == 255)
  {
    sub_3E43C(v132 + 16);
    v144 = *(_BYTE *)(v133 + 32);
    *v134 = *v135;
    *(_BYTE *)(v132 + 32) = v144;
  }
  else
  {
    v137 = *(_QWORD *)(v133 + 16);
    v138 = *(_QWORD *)(v133 + 24);
    sub_3D464(v137, v138, *(_BYTE *)(v133 + 32));
    v139 = *(_QWORD *)(v132 + 16);
    v140 = *(_QWORD *)(v132 + 24);
    *(_QWORD *)(v132 + 16) = v137;
    *(_QWORD *)(v132 + 24) = v138;
    v141 = *(_BYTE *)(v132 + 32);
    *(_BYTE *)(v132 + 32) = v136;
    sub_3B5BC(v139, v140, v141);
  }
  *(_QWORD *)(v132 + 40) = *(_QWORD *)(v133 + 40);
  *(_QWORD *)(v132 + 48) = *(_QWORD *)(v133 + 48);
  v146 = (id *)(v132 + 56);
  v147 = (id *)(v133 + 56);
  v148 = *(unsigned __int8 *)(v133 + 64);
  if (*(unsigned __int8 *)(v132 + 64) == 255)
  {
    if (v148 == 255)
    {
      v154 = *v147;
      *(_BYTE *)(v132 + 64) = *(_BYTE *)(v133 + 64);
      *v146 = v154;
    }
    else
    {
      v152 = *v147;
      sub_3D47C(*v147, *(_BYTE *)(v133 + 64));
      *(_QWORD *)(v132 + 56) = v152;
      *(_BYTE *)(v132 + 64) = v148;
    }
  }
  else if (v148 == 255)
  {
    sub_3E470(v132 + 56);
    v153 = *(_BYTE *)(v133 + 64);
    *v146 = *v147;
    *(_BYTE *)(v132 + 64) = v153;
  }
  else
  {
    v149 = *v147;
    sub_3D47C(*v147, *(_BYTE *)(v133 + 64));
    v150 = *(void **)(v132 + 56);
    *(_QWORD *)(v132 + 56) = v149;
    v151 = *(_BYTE *)(v132 + 64);
    *(_BYTE *)(v132 + 64) = v148;
    sub_3D624(v150, v151);
  }
  v155 = (id *)(v132 + 72);
  v156 = (id *)(v133 + 72);
  v157 = *(unsigned __int8 *)(v133 + 80);
  if (*(unsigned __int8 *)(v132 + 80) == 255)
  {
    if (v157 == 255)
    {
      v163 = *v156;
      *(_BYTE *)(v132 + 80) = *(_BYTE *)(v133 + 80);
      *v155 = v163;
    }
    else
    {
      v161 = *v156;
      sub_3D47C(*v156, *(_BYTE *)(v133 + 80));
      *(_QWORD *)(v132 + 72) = v161;
      *(_BYTE *)(v132 + 80) = v157;
    }
  }
  else if (v157 == 255)
  {
    sub_3E470(v132 + 72);
    v162 = *(_BYTE *)(v133 + 80);
    *v155 = *v156;
    *(_BYTE *)(v132 + 80) = v162;
  }
  else
  {
    v158 = *v156;
    sub_3D47C(*v156, *(_BYTE *)(v133 + 80));
    v159 = *(void **)(v132 + 72);
    *(_QWORD *)(v132 + 72) = v158;
    v160 = *(_BYTE *)(v132 + 80);
    *(_BYTE *)(v132 + 80) = v157;
    sub_3D624(v159, v160);
  }
  v164 = (id *)(v132 + 88);
  v165 = (id *)(v133 + 88);
  v166 = *(unsigned __int8 *)(v133 + 96);
  if (*(unsigned __int8 *)(v132 + 96) == 255)
  {
    if (v166 == 255)
    {
      v172 = *v165;
      *(_BYTE *)(v132 + 96) = *(_BYTE *)(v133 + 96);
      *v164 = v172;
    }
    else
    {
      v170 = *v165;
      sub_3D47C(*v165, *(_BYTE *)(v133 + 96));
      *(_QWORD *)(v132 + 88) = v170;
      *(_BYTE *)(v132 + 96) = v166;
    }
  }
  else if (v166 == 255)
  {
    sub_3E470(v132 + 88);
    v171 = *(_BYTE *)(v133 + 96);
    *v164 = *v165;
    *(_BYTE *)(v132 + 96) = v171;
  }
  else
  {
    v167 = *v165;
    sub_3D47C(*v165, *(_BYTE *)(v133 + 96));
    v168 = *(void **)(v132 + 88);
    *(_QWORD *)(v132 + 88) = v167;
    v169 = *(_BYTE *)(v132 + 96);
    *(_BYTE *)(v132 + 96) = v166;
    sub_3D624(v168, v169);
  }
  v173 = (id *)(v132 + 104);
  v174 = (id *)(v133 + 104);
  v175 = *(unsigned __int8 *)(v133 + 112);
  if (*(unsigned __int8 *)(v132 + 112) == 255)
  {
    if (v175 == 255)
    {
      v181 = *v174;
      *(_BYTE *)(v132 + 112) = *(_BYTE *)(v133 + 112);
      *v173 = v181;
    }
    else
    {
      v179 = *v174;
      sub_3D47C(*v174, *(_BYTE *)(v133 + 112));
      *(_QWORD *)(v132 + 104) = v179;
      *(_BYTE *)(v132 + 112) = v175;
    }
  }
  else if (v175 == 255)
  {
    sub_3E470(v132 + 104);
    v180 = *(_BYTE *)(v133 + 112);
    *v173 = *v174;
    *(_BYTE *)(v132 + 112) = v180;
  }
  else
  {
    v176 = *v174;
    sub_3D47C(*v174, *(_BYTE *)(v133 + 112));
    v177 = *(void **)(v132 + 104);
    *(_QWORD *)(v132 + 104) = v176;
    v178 = *(_BYTE *)(v132 + 112);
    *(_BYTE *)(v132 + 112) = v175;
    sub_3D624(v177, v178);
  }
  v182 = (id *)(v132 + 120);
  v183 = (id *)(v133 + 120);
  v184 = *(unsigned __int8 *)(v133 + 128);
  if (*(unsigned __int8 *)(v132 + 128) == 255)
  {
    if (v184 == 255)
    {
      v190 = *v183;
      *(_BYTE *)(v132 + 128) = *(_BYTE *)(v133 + 128);
      *v182 = v190;
    }
    else
    {
      v188 = *v183;
      sub_3D47C(*v183, *(_BYTE *)(v133 + 128));
      *(_QWORD *)(v132 + 120) = v188;
      *(_BYTE *)(v132 + 128) = v184;
    }
  }
  else if (v184 == 255)
  {
    sub_3E470(v132 + 120);
    v189 = *(_BYTE *)(v133 + 128);
    *v182 = *v183;
    *(_BYTE *)(v132 + 128) = v189;
  }
  else
  {
    v185 = *v183;
    sub_3D47C(*v183, *(_BYTE *)(v133 + 128));
    v186 = *(void **)(v132 + 120);
    *(_QWORD *)(v132 + 120) = v185;
    v187 = *(_BYTE *)(v132 + 128);
    *(_BYTE *)(v132 + 128) = v184;
    sub_3D624(v186, v187);
  }
  *(_BYTE *)(v132 + 129) = *(_BYTE *)(v133 + 129);
  v191 = v6[11];
  v192 = v132 + v191;
  v193 = v133 + v191;
  v194 = type metadata accessor for ArtworkCrop(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v194 - 8) + 24))(v192, v193, v194);
  v195 = v6[12];
  v196 = (_QWORD *)(v132 + v195);
  v197 = (_QWORD *)(v133 + v195);
  *v196 = *v197;
  v196[1] = v197[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(v132 + v6[13]) = *(_BYTE *)(v133 + v6[13]);
  *(_BYTE *)(v132 + v6[14]) = *(_BYTE *)(v133 + v6[14]);
  *(_BYTE *)(v132 + v6[15]) = *(_BYTE *)(v133 + v6[15]);
  v198 = v6[16];
  v199 = (_QWORD *)(v132 + v198);
  v200 = (_QWORD *)(v133 + v198);
  *v199 = *v200;
  v199[1] = v200[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v201 = v205[7];
  v202 = (_QWORD *)(a1 + v201);
  v203 = (_QWORD *)(a2 + v201);
  *v202 = *v203;
  v202[1] = v203[1];
  return a1;
}

_OWORD *sub_101F9C(_OWORD *a1, _OWORD *a2, int *a3)
{
  int *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;

  v6 = (int *)type metadata accessor for ArtworkModel(0);
  v7 = *((_QWORD *)v6 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    v9 = a2[1];
    *a1 = *a2;
    a1[1] = v9;
    *((_BYTE *)a1 + 32) = *((_BYTE *)a2 + 32);
    *(_OWORD *)((char *)a1 + 40) = *(_OWORD *)((char *)a2 + 40);
    *((_QWORD *)a1 + 7) = *((_QWORD *)a2 + 7);
    *((_BYTE *)a1 + 64) = *((_BYTE *)a2 + 64);
    *(_OWORD *)((char *)a1 + 113) = *(_OWORD *)((char *)a2 + 113);
    *(_OWORD *)((char *)a1 + 104) = *(_OWORD *)((char *)a2 + 104);
    *(_OWORD *)((char *)a1 + 88) = *(_OWORD *)((char *)a2 + 88);
    *(_OWORD *)((char *)a1 + 72) = *(_OWORD *)((char *)a2 + 72);
    *((_BYTE *)a1 + 129) = *((_BYTE *)a2 + 129);
    v10 = v6[11];
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    v13 = type metadata accessor for ArtworkCrop(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
    *(_OWORD *)((char *)a1 + v6[12]) = *(_OWORD *)((char *)a2 + v6[12]);
    *((_BYTE *)a1 + v6[13]) = *((_BYTE *)a2 + v6[13]);
    *((_BYTE *)a1 + v6[14]) = *((_BYTE *)a2 + v6[14]);
    *((_BYTE *)a1 + v6[15]) = *((_BYTE *)a2 + v6[15]);
    *(_OWORD *)((char *)a1 + v6[16]) = *(_OWORD *)((char *)a2 + v6[16]);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v7 + 56))(a1, 0, 1, v6);
  }
  v14 = (int *)type metadata accessor for Artwork.Configuration(0);
  v15 = v14[5];
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  *(_OWORD *)v16 = *(_OWORD *)v17;
  v16[16] = v17[16];
  *(_OWORD *)((char *)a1 + v14[6]) = *(_OWORD *)((char *)a2 + v14[6]);
  v18 = v14[7];
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  v21 = type metadata accessor for CropCode(0);
  v22 = *(_QWORD *)(v21 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
  {
    v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7D58);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v19, v20, v21);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  }
  *((_BYTE *)a1 + v14[8]) = *((_BYTE *)a2 + v14[8]);
  v24 = a3[6];
  *(_QWORD *)((char *)a1 + a3[5]) = *(_QWORD *)((char *)a2 + a3[5]);
  v25 = (char *)a1 + v24;
  v26 = (char *)a2 + v24;
  v27 = *(_OWORD *)((char *)a2 + v24 + 16);
  *(_OWORD *)v25 = *(_OWORD *)((char *)a2 + v24);
  *((_OWORD *)v25 + 1) = v27;
  v25[32] = *((_BYTE *)a2 + v24 + 32);
  *(_OWORD *)(v25 + 40) = *(_OWORD *)((char *)a2 + v24 + 40);
  *((_QWORD *)v25 + 7) = *(_QWORD *)((char *)a2 + v24 + 56);
  v25[64] = *((_BYTE *)a2 + v24 + 64);
  v28 = *(_OWORD *)((char *)a2 + v24 + 72);
  v29 = *(_OWORD *)((char *)a2 + v24 + 88);
  v30 = *(_OWORD *)((char *)a2 + v24 + 104);
  *(_OWORD *)(v25 + 113) = *(_OWORD *)((char *)a2 + v24 + 113);
  *(_OWORD *)(v25 + 104) = v30;
  *(_OWORD *)(v25 + 88) = v29;
  *(_OWORD *)(v25 + 72) = v28;
  v25[129] = *((_BYTE *)a2 + v24 + 129);
  v31 = v6[11];
  v32 = (char *)a1 + v24 + v31;
  v33 = (char *)a2 + v24 + v31;
  v34 = type metadata accessor for ArtworkCrop(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 32))(v32, v33, v34);
  *(_OWORD *)&v25[v6[12]] = *(_OWORD *)&v26[v6[12]];
  v25[v6[13]] = v26[v6[13]];
  v25[v6[14]] = v26[v6[14]];
  v25[v6[15]] = v26[v6[15]];
  *(_OWORD *)&v25[v6[16]] = *(_OWORD *)&v26[v6[16]];
  *(_OWORD *)((char *)a1 + a3[7]) = *(_OWORD *)((char *)a2 + a3[7]);
  return a1;
}

uint64_t sub_10229C(uint64_t a1, uint64_t a2, int *a3)
{
  int *v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, int *);
  int v9;
  int v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(void *, uint64_t, uint64_t);
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _OWORD *v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  int v41;
  int v42;
  void *v43;
  _QWORD *v44;
  int v45;
  int v46;
  void *v47;
  _QWORD *v48;
  int v49;
  int v50;
  void *v51;
  _QWORD *v52;
  int v53;
  int v54;
  void *v55;
  _QWORD *v56;
  int v57;
  int v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v75;
  _OWORD *v76;
  int v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  int v82;
  int v83;
  void *v84;
  _QWORD *v85;
  int v86;
  int v87;
  void *v88;
  _QWORD *v89;
  int v90;
  int v91;
  void *v92;
  _QWORD *v93;
  int v94;
  int v95;
  void *v96;
  _QWORD *v97;
  int v98;
  int v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  int *v115;

  v6 = (int *)type metadata accessor for ArtworkModel(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  v115 = a3;
  if (v9)
  {
    if (!v10)
    {
      v11 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v11;
      *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
      *(_OWORD *)(a1 + 113) = *(_OWORD *)(a2 + 113);
      *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
      *(_BYTE *)(a1 + 129) = *(_BYTE *)(a2 + 129);
      v12 = v6[11];
      v13 = a1 + v12;
      v14 = a2 + v12;
      v15 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
      *(_OWORD *)(a1 + v6[12]) = *(_OWORD *)(a2 + v6[12]);
      *(_BYTE *)(a1 + v6[13]) = *(_BYTE *)(a2 + v6[13]);
      *(_BYTE *)(a1 + v6[14]) = *(_BYTE *)(a2 + v6[14]);
      *(_BYTE *)(a1 + v6[15]) = *(_BYTE *)(a2 + v6[15]);
      *(_OWORD *)(a1 + v6[16]) = *(_OWORD *)(a2 + v6[16]);
      (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    sub_145D8(a1, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
LABEL_6:
    v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
    memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  v75 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v75;
  swift_bridgeObjectRelease();
  v76 = (_OWORD *)(a2 + 16);
  v77 = *(unsigned __int8 *)(a1 + 32);
  if (v77 != 255)
  {
    v78 = *(unsigned __int8 *)(a2 + 32);
    if (v78 != 255)
    {
      v79 = *(_QWORD *)(a1 + 16);
      v80 = *(_QWORD *)(a1 + 24);
      *(_OWORD *)(a1 + 16) = *v76;
      *(_BYTE *)(a1 + 32) = v78;
      sub_3B5BC(v79, v80, v77);
      goto LABEL_50;
    }
    sub_3E43C(a1 + 16);
  }
  *(_OWORD *)(a1 + 16) = *v76;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
LABEL_50:
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v81 = (_QWORD *)(a2 + 56);
  v82 = *(unsigned __int8 *)(a1 + 64);
  if (v82 != 255)
  {
    v83 = *(unsigned __int8 *)(a2 + 64);
    if (v83 != 255)
    {
      v84 = *(void **)(a1 + 56);
      *(_QWORD *)(a1 + 56) = *v81;
      *(_BYTE *)(a1 + 64) = v83;
      sub_3D624(v84, v82);
      goto LABEL_55;
    }
    sub_3E470(a1 + 56);
  }
  *(_QWORD *)(a1 + 56) = *v81;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
LABEL_55:
  v85 = (_QWORD *)(a2 + 72);
  v86 = *(unsigned __int8 *)(a1 + 80);
  if (v86 != 255)
  {
    v87 = *(unsigned __int8 *)(a2 + 80);
    if (v87 != 255)
    {
      v88 = *(void **)(a1 + 72);
      *(_QWORD *)(a1 + 72) = *v85;
      *(_BYTE *)(a1 + 80) = v87;
      sub_3D624(v88, v86);
      goto LABEL_60;
    }
    sub_3E470(a1 + 72);
  }
  *(_QWORD *)(a1 + 72) = *v85;
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
LABEL_60:
  v89 = (_QWORD *)(a2 + 88);
  v90 = *(unsigned __int8 *)(a1 + 96);
  if (v90 != 255)
  {
    v91 = *(unsigned __int8 *)(a2 + 96);
    if (v91 != 255)
    {
      v92 = *(void **)(a1 + 88);
      *(_QWORD *)(a1 + 88) = *v89;
      *(_BYTE *)(a1 + 96) = v91;
      sub_3D624(v92, v90);
      goto LABEL_65;
    }
    sub_3E470(a1 + 88);
  }
  *(_QWORD *)(a1 + 88) = *v89;
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
LABEL_65:
  v93 = (_QWORD *)(a2 + 104);
  v94 = *(unsigned __int8 *)(a1 + 112);
  if (v94 != 255)
  {
    v95 = *(unsigned __int8 *)(a2 + 112);
    if (v95 != 255)
    {
      v96 = *(void **)(a1 + 104);
      *(_QWORD *)(a1 + 104) = *v93;
      *(_BYTE *)(a1 + 112) = v95;
      sub_3D624(v96, v94);
      goto LABEL_70;
    }
    sub_3E470(a1 + 104);
  }
  *(_QWORD *)(a1 + 104) = *v93;
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
LABEL_70:
  v97 = (_QWORD *)(a2 + 120);
  v98 = *(unsigned __int8 *)(a1 + 128);
  if (v98 == 255)
  {
LABEL_74:
    *(_QWORD *)(a1 + 120) = *v97;
    *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
    goto LABEL_75;
  }
  v99 = *(unsigned __int8 *)(a2 + 128);
  if (v99 == 255)
  {
    sub_3E470(a1 + 120);
    goto LABEL_74;
  }
  v100 = *(void **)(a1 + 120);
  *(_QWORD *)(a1 + 120) = *v97;
  *(_BYTE *)(a1 + 128) = v99;
  sub_3D624(v100, v98);
LABEL_75:
  *(_BYTE *)(a1 + 129) = *(_BYTE *)(a2 + 129);
  v101 = v6[11];
  v102 = a1 + v101;
  v103 = a2 + v101;
  v104 = type metadata accessor for ArtworkCrop(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v104 - 8) + 40))(v102, v103, v104);
  v105 = v6[12];
  v106 = (_QWORD *)(a1 + v105);
  v107 = (uint64_t *)(a2 + v105);
  v109 = *v107;
  v108 = v107[1];
  *v106 = v109;
  v106[1] = v108;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + v6[13]) = *(_BYTE *)(a2 + v6[13]);
  *(_BYTE *)(a1 + v6[14]) = *(_BYTE *)(a2 + v6[14]);
  *(_BYTE *)(a1 + v6[15]) = *(_BYTE *)(a2 + v6[15]);
  v110 = v6[16];
  v111 = (_QWORD *)(a1 + v110);
  v112 = (uint64_t *)(a2 + v110);
  v114 = *v112;
  v113 = v112[1];
  *v111 = v114;
  v111[1] = v113;
  swift_bridgeObjectRelease();
LABEL_7:
  v17 = (int *)type metadata accessor for Artwork.Configuration(0);
  v18 = v17[5];
  v19 = a1 + v18;
  v20 = a2 + v18;
  *(_OWORD *)v19 = *(_OWORD *)v20;
  *(_BYTE *)(v19 + 16) = *(_BYTE *)(v20 + 16);
  *(_OWORD *)(a1 + v17[6]) = *(_OWORD *)(a2 + v17[6]);
  v21 = v17[7];
  v22 = (void *)(a1 + v21);
  v23 = (void *)(a2 + v21);
  v24 = type metadata accessor for CropCode(0);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v25 + 48);
  v27 = v26(v22, 1, v24);
  v28 = v26(v23, 1, v24);
  if (v27)
  {
    if (!v28)
    {
      (*(void (**)(void *, void *, uint64_t))(v25 + 32))(v22, v23, v24);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v28)
  {
    (*(void (**)(void *, uint64_t))(v25 + 8))(v22, v24);
LABEL_12:
    v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7D58);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v25 + 40))(v22, v23, v24);
LABEL_13:
  *(_BYTE *)(a1 + v17[8]) = *(_BYTE *)(a2 + v17[8]);
  v30 = v115[6];
  *(_QWORD *)(a1 + v115[5]) = *(_QWORD *)(a2 + v115[5]);
  v31 = a1 + v30;
  v32 = a2 + v30;
  v33 = *(_QWORD *)(a2 + v30);
  v34 = *(_QWORD *)(a2 + v30 + 8);
  *(_QWORD *)v31 = v33;
  *(_QWORD *)(v31 + 8) = v34;
  swift_bridgeObjectRelease();
  v35 = (_OWORD *)(v32 + 16);
  v36 = *(unsigned __int8 *)(v31 + 32);
  if (v36 != 255)
  {
    v37 = *(unsigned __int8 *)(v32 + 32);
    if (v37 != 255)
    {
      v38 = *(_QWORD *)(v31 + 16);
      v39 = *(_QWORD *)(v31 + 24);
      *(_OWORD *)(v31 + 16) = *v35;
      *(_BYTE *)(v31 + 32) = v37;
      sub_3B5BC(v38, v39, v36);
      goto LABEL_18;
    }
    sub_3E43C(v31 + 16);
  }
  *(_OWORD *)(v31 + 16) = *v35;
  *(_BYTE *)(v31 + 32) = *(_BYTE *)(v32 + 32);
LABEL_18:
  *(_OWORD *)(v31 + 40) = *(_OWORD *)(v32 + 40);
  v40 = (_QWORD *)(v32 + 56);
  v41 = *(unsigned __int8 *)(v31 + 64);
  if (v41 != 255)
  {
    v42 = *(unsigned __int8 *)(v32 + 64);
    if (v42 != 255)
    {
      v43 = *(void **)(v31 + 56);
      *(_QWORD *)(v31 + 56) = *v40;
      *(_BYTE *)(v31 + 64) = v42;
      sub_3D624(v43, v41);
      goto LABEL_23;
    }
    sub_3E470(v31 + 56);
  }
  *(_QWORD *)(v31 + 56) = *v40;
  *(_BYTE *)(v31 + 64) = *(_BYTE *)(v32 + 64);
LABEL_23:
  v44 = (_QWORD *)(v32 + 72);
  v45 = *(unsigned __int8 *)(v31 + 80);
  if (v45 != 255)
  {
    v46 = *(unsigned __int8 *)(v32 + 80);
    if (v46 != 255)
    {
      v47 = *(void **)(v31 + 72);
      *(_QWORD *)(v31 + 72) = *v44;
      *(_BYTE *)(v31 + 80) = v46;
      sub_3D624(v47, v45);
      goto LABEL_28;
    }
    sub_3E470(v31 + 72);
  }
  *(_QWORD *)(v31 + 72) = *v44;
  *(_BYTE *)(v31 + 80) = *(_BYTE *)(v32 + 80);
LABEL_28:
  v48 = (_QWORD *)(v32 + 88);
  v49 = *(unsigned __int8 *)(v31 + 96);
  if (v49 != 255)
  {
    v50 = *(unsigned __int8 *)(v32 + 96);
    if (v50 != 255)
    {
      v51 = *(void **)(v31 + 88);
      *(_QWORD *)(v31 + 88) = *v48;
      *(_BYTE *)(v31 + 96) = v50;
      sub_3D624(v51, v49);
      goto LABEL_33;
    }
    sub_3E470(v31 + 88);
  }
  *(_QWORD *)(v31 + 88) = *v48;
  *(_BYTE *)(v31 + 96) = *(_BYTE *)(v32 + 96);
LABEL_33:
  v52 = (_QWORD *)(v32 + 104);
  v53 = *(unsigned __int8 *)(v31 + 112);
  if (v53 != 255)
  {
    v54 = *(unsigned __int8 *)(v32 + 112);
    if (v54 != 255)
    {
      v55 = *(void **)(v31 + 104);
      *(_QWORD *)(v31 + 104) = *v52;
      *(_BYTE *)(v31 + 112) = v54;
      sub_3D624(v55, v53);
      goto LABEL_38;
    }
    sub_3E470(v31 + 104);
  }
  *(_QWORD *)(v31 + 104) = *v52;
  *(_BYTE *)(v31 + 112) = *(_BYTE *)(v32 + 112);
LABEL_38:
  v56 = (_QWORD *)(v32 + 120);
  v57 = *(unsigned __int8 *)(v31 + 128);
  if (v57 == 255)
  {
LABEL_42:
    *(_QWORD *)(v31 + 120) = *v56;
    *(_BYTE *)(v31 + 128) = *(_BYTE *)(v32 + 128);
    goto LABEL_43;
  }
  v58 = *(unsigned __int8 *)(v32 + 128);
  if (v58 == 255)
  {
    sub_3E470(v31 + 120);
    goto LABEL_42;
  }
  v59 = *(void **)(v31 + 120);
  *(_QWORD *)(v31 + 120) = *v56;
  *(_BYTE *)(v31 + 128) = v58;
  sub_3D624(v59, v57);
LABEL_43:
  *(_BYTE *)(v31 + 129) = *(_BYTE *)(v32 + 129);
  v60 = v6[11];
  v61 = v31 + v60;
  v62 = v32 + v60;
  v63 = type metadata accessor for ArtworkCrop(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 40))(v61, v62, v63);
  v64 = v6[12];
  v65 = (_QWORD *)(v31 + v64);
  v66 = (uint64_t *)(v32 + v64);
  v68 = *v66;
  v67 = v66[1];
  *v65 = v68;
  v65[1] = v67;
  swift_bridgeObjectRelease();
  *(_BYTE *)(v31 + v6[13]) = *(_BYTE *)(v32 + v6[13]);
  *(_BYTE *)(v31 + v6[14]) = *(_BYTE *)(v32 + v6[14]);
  *(_BYTE *)(v31 + v6[15]) = *(_BYTE *)(v32 + v6[15]);
  v69 = v6[16];
  v70 = (_QWORD *)(v31 + v69);
  v71 = (uint64_t *)(v32 + v69);
  v73 = *v71;
  v72 = v71[1];
  *v70 = v73;
  v70[1] = v72;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + v115[7]) = *(_OWORD *)(a2 + v115[7]);
  return a1;
}

uint64_t sub_102A78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_102A84);
}

uint64_t sub_102A84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = type metadata accessor for Artwork.Configuration(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = type metadata accessor for ArtworkModel(0);
    v10 = a1 + *(int *)(a3 + 24);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_102AF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_102B04);
}

uint64_t sub_102B04(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = type metadata accessor for Artwork.Configuration(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = type metadata accessor for ArtworkModel(0);
    v12 = a1 + *(int *)(a4 + 24);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t sub_102B80(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[4];

  result = type metadata accessor for Artwork.Configuration(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    v5[1] = (char *)&value witness table for Builtin.Int64 + 64;
    result = type metadata accessor for ArtworkModel(319);
    if (v4 <= 0x3F)
    {
      v5[2] = *(_QWORD *)(result - 8) + 64;
      v5[3] = &unk_2F57F8;
      swift_initStructMetadata(a1, 256, 4, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t *sub_102C18(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  int *v11;
  uint64_t v12;
  unsigned int (*v13)(_QWORD *, uint64_t, int *);
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  id *v19;
  int v20;
  id v21;
  id *v22;
  int v23;
  id v24;
  id *v25;
  int v26;
  id v27;
  id *v28;
  int v29;
  id v30;
  id *v31;
  int v32;
  id v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  void (*v46)(_QWORD *, _QWORD, uint64_t, int *);
  int *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  __int128 v69;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
LABEL_30:
    swift_retain();
    return v7;
  }
  v7 = a1;
  v8 = a3[5];
  v9 = (uint64_t *)((char *)a1 + v8);
  v10 = (uint64_t *)((char *)a2 + v8);
  v11 = (int *)type metadata accessor for ArtworkModel(0);
  v12 = *((_QWORD *)v11 - 1);
  v13 = *(unsigned int (**)(_QWORD *, uint64_t, int *))(v12 + 48);
  swift_retain();
  if (v13(v10, 1, v11))
  {
    v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    v15 = v10[1];
    *v9 = *v10;
    v9[1] = v15;
    v16 = *((unsigned __int8 *)v10 + 32);
    swift_bridgeObjectRetain();
    if (v16 == 255)
    {
      *((_OWORD *)v9 + 1) = *((_OWORD *)v10 + 1);
      *((_BYTE *)v9 + 32) = *((_BYTE *)v10 + 32);
    }
    else
    {
      v17 = v10[2];
      v18 = v10[3];
      sub_3D464(v17, v18, v16);
      v9[2] = v17;
      v9[3] = v18;
      *((_BYTE *)v9 + 32) = v16;
    }
    *(_OWORD *)(v9 + 5) = *(_OWORD *)(v10 + 5);
    v19 = (id *)(v10 + 7);
    v20 = *((unsigned __int8 *)v10 + 64);
    if (v20 == 255)
    {
      v9[7] = *v19;
      *((_BYTE *)v9 + 64) = *((_BYTE *)v10 + 64);
    }
    else
    {
      v21 = *v19;
      sub_3D47C(*v19, *((_BYTE *)v10 + 64));
      v9[7] = v21;
      *((_BYTE *)v9 + 64) = v20;
    }
    v22 = (id *)(v10 + 9);
    v23 = *((unsigned __int8 *)v10 + 80);
    if (v23 == 255)
    {
      v9[9] = *v22;
      *((_BYTE *)v9 + 80) = *((_BYTE *)v10 + 80);
    }
    else
    {
      v24 = *v22;
      sub_3D47C(*v22, *((_BYTE *)v10 + 80));
      v9[9] = v24;
      *((_BYTE *)v9 + 80) = v23;
    }
    v25 = (id *)(v10 + 11);
    v26 = *((unsigned __int8 *)v10 + 96);
    if (v26 == 255)
    {
      v9[11] = *v25;
      *((_BYTE *)v9 + 96) = *((_BYTE *)v10 + 96);
    }
    else
    {
      v27 = *v25;
      sub_3D47C(*v25, *((_BYTE *)v10 + 96));
      v9[11] = v27;
      *((_BYTE *)v9 + 96) = v26;
    }
    v28 = (id *)(v10 + 13);
    v29 = *((unsigned __int8 *)v10 + 112);
    if (v29 == 255)
    {
      v9[13] = *v28;
      *((_BYTE *)v9 + 112) = *((_BYTE *)v10 + 112);
    }
    else
    {
      v30 = *v28;
      sub_3D47C(*v28, *((_BYTE *)v10 + 112));
      v9[13] = v30;
      *((_BYTE *)v9 + 112) = v29;
    }
    v31 = (id *)(v10 + 15);
    v32 = *((unsigned __int8 *)v10 + 128);
    if (v32 == 255)
    {
      v9[15] = *v31;
      *((_BYTE *)v9 + 128) = *((_BYTE *)v10 + 128);
    }
    else
    {
      v33 = *v31;
      sub_3D47C(*v31, *((_BYTE *)v10 + 128));
      v9[15] = v33;
      *((_BYTE *)v9 + 128) = v32;
    }
    *((_BYTE *)v9 + 129) = *((_BYTE *)v10 + 129);
    v34 = v11[11];
    v35 = (char *)v9 + v34;
    v36 = (char *)v10 + v34;
    v37 = type metadata accessor for ArtworkCrop(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 16))(v35, v36, v37);
    v38 = v11[12];
    v39 = (_QWORD *)((char *)v9 + v38);
    v40 = (_QWORD *)((char *)v10 + v38);
    v41 = v40[1];
    *v39 = *v40;
    v39[1] = v41;
    *((_BYTE *)v9 + v11[13]) = *((_BYTE *)v10 + v11[13]);
    *((_BYTE *)v9 + v11[14]) = *((_BYTE *)v10 + v11[14]);
    *((_BYTE *)v9 + v11[15]) = *((_BYTE *)v10 + v11[15]);
    v42 = v11[16];
    v43 = (_QWORD *)((char *)v9 + v42);
    v44 = (_QWORD *)((char *)v10 + v42);
    v45 = v44[1];
    *v43 = *v44;
    v43[1] = v45;
    v46 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v12 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v46(v9, 0, 1, v11);
  }
  v47 = (int *)type metadata accessor for Artwork.Configuration(0);
  v48 = v47[5];
  v49 = (char *)v9 + v48;
  v50 = (char *)v10 + v48;
  *(_OWORD *)v49 = *(_OWORD *)v50;
  v49[16] = v50[16];
  *(_OWORD *)((char *)v9 + v47[6]) = *(_OWORD *)((char *)v10 + v47[6]);
  v51 = v47[7];
  v52 = (char *)v9 + v51;
  v53 = (char *)v10 + v51;
  v54 = type metadata accessor for CropCode(0);
  v55 = *(_QWORD *)(v54 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v53, 1, v54))
  {
    v56 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7D58);
    memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v55 + 16))(v52, v53, v54);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v55 + 56))(v52, 0, 1, v54);
  }
  *((_BYTE *)v9 + v47[8]) = *((_BYTE *)v10 + v47[8]);
  v57 = a3[6];
  v58 = (char *)v7 + v57;
  v59 = (char *)a2 + v57;
  v60 = *(_QWORD *)v59;
  v61 = v59[8];
  sub_A0A18(*(_QWORD *)v59, v61);
  *(_QWORD *)v58 = v60;
  v58[8] = v61;
  v62 = a3[7];
  v63 = a3[8];
  v64 = (char *)v7 + v62;
  v65 = (char *)a2 + v62;
  v66 = *(_QWORD *)v65;
  LOBYTE(v65) = v65[8];
  *(_QWORD *)v64 = v66;
  v64[8] = (char)v65;
  v67 = (char *)v7 + v63;
  v68 = (char *)a2 + v63;
  LOBYTE(v60) = v68[40];
  swift_retain();
  if ((v60 & 1) == 0)
  {
    *(_QWORD *)v67 = *(_QWORD *)v68;
    v67[40] = 0;
    goto LABEL_30;
  }
  v69 = *(_OWORD *)(v68 + 24);
  *(_OWORD *)(v67 + 24) = v69;
  (**(void (***)(char *, char *))(v69 - 8))(v67, v68);
  v67[40] = 1;
  return v7;
}

uint64_t sub_103080(_QWORD *a1, int *a2)
{
  char *v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  swift_release(*a1);
  v4 = (char *)a1 + a2[5];
  v5 = type metadata accessor for ArtworkModel(0);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5))
  {
    swift_bridgeObjectRelease();
    v6 = v4[32];
    if (v6 != 255)
      sub_3B5BC(*((_QWORD *)v4 + 2), *((_QWORD *)v4 + 3), v6);
    v7 = v4[64];
    if (v7 != 255)
      sub_3D624(*((id *)v4 + 7), v7);
    v8 = v4[80];
    if (v8 != 255)
      sub_3D624(*((id *)v4 + 9), v8);
    v9 = v4[96];
    if (v9 != 255)
      sub_3D624(*((id *)v4 + 11), v9);
    v10 = v4[112];
    if (v10 != 255)
      sub_3D624(*((id *)v4 + 13), v10);
    v11 = v4[128];
    if (v11 != 255)
      sub_3D624(*((id *)v4 + 15), v11);
    v12 = &v4[*(int *)(v5 + 44)];
    v13 = type metadata accessor for ArtworkCrop(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v14 = &v4[*(int *)(type metadata accessor for Artwork.Configuration(0) + 28)];
  v15 = type metadata accessor for CropCode(0);
  v16 = *(_QWORD *)(v15 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    (*(void (**)(char *, uint64_t))(v16 + 8))(v14, v15);
  sub_A0A6C(*(_QWORD *)((char *)a1 + a2[6]), *((_BYTE *)a1 + a2[6] + 8));
  swift_release(*(_QWORD *)((char *)a1 + a2[7]));
  v17 = (_QWORD *)((char *)a1 + a2[8]);
  if ((v17[5] & 1) != 0)
    return __swift_destroy_boxed_opaque_existential_1(v17);
  else
    return swift_release(*v17);
}

_QWORD *sub_10323C(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  int *v9;
  uint64_t v10;
  unsigned int (*v11)(_QWORD *, uint64_t, int *);
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  id *v17;
  int v18;
  id v19;
  id *v20;
  int v21;
  id v22;
  id *v23;
  int v24;
  id v25;
  id *v26;
  int v27;
  id v28;
  id *v29;
  int v30;
  id v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  void (*v44)(_QWORD *, _QWORD, uint64_t, int *);
  int *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  char v67;
  __int128 v68;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (_QWORD *)((char *)a1 + v6);
  v8 = (_QWORD *)((char *)a2 + v6);
  v9 = (int *)type metadata accessor for ArtworkModel(0);
  v10 = *((_QWORD *)v9 - 1);
  v11 = *(unsigned int (**)(_QWORD *, uint64_t, int *))(v10 + 48);
  swift_retain();
  if (v11(v8, 1, v9))
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v13 = v8[1];
    *v7 = *v8;
    v7[1] = v13;
    v14 = *((unsigned __int8 *)v8 + 32);
    swift_bridgeObjectRetain();
    if (v14 == 255)
    {
      *((_OWORD *)v7 + 1) = *((_OWORD *)v8 + 1);
      *((_BYTE *)v7 + 32) = *((_BYTE *)v8 + 32);
    }
    else
    {
      v15 = v8[2];
      v16 = v8[3];
      sub_3D464(v15, v16, v14);
      v7[2] = v15;
      v7[3] = v16;
      *((_BYTE *)v7 + 32) = v14;
    }
    *(_OWORD *)(v7 + 5) = *(_OWORD *)(v8 + 5);
    v17 = (id *)(v8 + 7);
    v18 = *((unsigned __int8 *)v8 + 64);
    if (v18 == 255)
    {
      v7[7] = *v17;
      *((_BYTE *)v7 + 64) = *((_BYTE *)v8 + 64);
    }
    else
    {
      v19 = *v17;
      sub_3D47C(*v17, *((_BYTE *)v8 + 64));
      v7[7] = v19;
      *((_BYTE *)v7 + 64) = v18;
    }
    v20 = (id *)(v8 + 9);
    v21 = *((unsigned __int8 *)v8 + 80);
    if (v21 == 255)
    {
      v7[9] = *v20;
      *((_BYTE *)v7 + 80) = *((_BYTE *)v8 + 80);
    }
    else
    {
      v22 = *v20;
      sub_3D47C(*v20, *((_BYTE *)v8 + 80));
      v7[9] = v22;
      *((_BYTE *)v7 + 80) = v21;
    }
    v23 = (id *)(v8 + 11);
    v24 = *((unsigned __int8 *)v8 + 96);
    if (v24 == 255)
    {
      v7[11] = *v23;
      *((_BYTE *)v7 + 96) = *((_BYTE *)v8 + 96);
    }
    else
    {
      v25 = *v23;
      sub_3D47C(*v23, *((_BYTE *)v8 + 96));
      v7[11] = v25;
      *((_BYTE *)v7 + 96) = v24;
    }
    v26 = (id *)(v8 + 13);
    v27 = *((unsigned __int8 *)v8 + 112);
    if (v27 == 255)
    {
      v7[13] = *v26;
      *((_BYTE *)v7 + 112) = *((_BYTE *)v8 + 112);
    }
    else
    {
      v28 = *v26;
      sub_3D47C(*v26, *((_BYTE *)v8 + 112));
      v7[13] = v28;
      *((_BYTE *)v7 + 112) = v27;
    }
    v29 = (id *)(v8 + 15);
    v30 = *((unsigned __int8 *)v8 + 128);
    if (v30 == 255)
    {
      v7[15] = *v29;
      *((_BYTE *)v7 + 128) = *((_BYTE *)v8 + 128);
    }
    else
    {
      v31 = *v29;
      sub_3D47C(*v29, *((_BYTE *)v8 + 128));
      v7[15] = v31;
      *((_BYTE *)v7 + 128) = v30;
    }
    *((_BYTE *)v7 + 129) = *((_BYTE *)v8 + 129);
    v32 = v9[11];
    v33 = (char *)v7 + v32;
    v34 = (char *)v8 + v32;
    v35 = type metadata accessor for ArtworkCrop(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(v33, v34, v35);
    v36 = v9[12];
    v37 = (_QWORD *)((char *)v7 + v36);
    v38 = (_QWORD *)((char *)v8 + v36);
    v39 = v38[1];
    *v37 = *v38;
    v37[1] = v39;
    *((_BYTE *)v7 + v9[13]) = *((_BYTE *)v8 + v9[13]);
    *((_BYTE *)v7 + v9[14]) = *((_BYTE *)v8 + v9[14]);
    *((_BYTE *)v7 + v9[15]) = *((_BYTE *)v8 + v9[15]);
    v40 = v9[16];
    v41 = (_QWORD *)((char *)v7 + v40);
    v42 = (_QWORD *)((char *)v8 + v40);
    v43 = v42[1];
    *v41 = *v42;
    v41[1] = v43;
    v44 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v10 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v44(v7, 0, 1, v9);
  }
  v45 = (int *)type metadata accessor for Artwork.Configuration(0);
  v46 = v45[5];
  v47 = (char *)v7 + v46;
  v48 = (char *)v8 + v46;
  *(_OWORD *)v47 = *(_OWORD *)v48;
  v47[16] = v48[16];
  *(_OWORD *)((char *)v7 + v45[6]) = *(_OWORD *)((char *)v8 + v45[6]);
  v49 = v45[7];
  v50 = (char *)v7 + v49;
  v51 = (char *)v8 + v49;
  v52 = type metadata accessor for CropCode(0);
  v53 = *(_QWORD *)(v52 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48))(v51, 1, v52))
  {
    v54 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7D58);
    memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v53 + 16))(v50, v51, v52);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v53 + 56))(v50, 0, 1, v52);
  }
  *((_BYTE *)v7 + v45[8]) = *((_BYTE *)v8 + v45[8]);
  v55 = a3[6];
  v56 = (char *)a1 + v55;
  v57 = (char *)a2 + v55;
  v58 = *(_QWORD *)v57;
  v59 = v57[8];
  sub_A0A18(*(_QWORD *)v57, v59);
  *(_QWORD *)v56 = v58;
  v56[8] = v59;
  v60 = a3[7];
  v61 = a3[8];
  v62 = (char *)a1 + v60;
  v63 = (char *)a2 + v60;
  v64 = *(_QWORD *)v63;
  LOBYTE(v63) = v63[8];
  *(_QWORD *)v62 = v64;
  v62[8] = (char)v63;
  v65 = (char *)a1 + v61;
  v66 = (char *)a2 + v61;
  v67 = v66[40];
  swift_retain();
  if ((v67 & 1) != 0)
  {
    v68 = *(_OWORD *)(v66 + 24);
    *(_OWORD *)(v65 + 24) = v68;
    (**(void (***)(char *, char *))(v68 - 8))(v65, v66);
  }
  else
  {
    *(_QWORD *)v65 = *(_QWORD *)v66;
    swift_retain();
  }
  v65[40] = v67;
  return a1;
}

uint64_t *sub_103678(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, int *);
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 *v19;
  __int128 *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  __int128 v27;
  id *v28;
  int v29;
  id v30;
  id v31;
  id *v32;
  int v33;
  id v34;
  id v35;
  id *v36;
  int v37;
  id v38;
  id v39;
  id *v40;
  int v41;
  id v42;
  id v43;
  id *v44;
  int v45;
  id v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  char *v54;
  uint64_t v55;
  _QWORD *v56;
  char *v57;
  void (*v58)(uint64_t, _QWORD, uint64_t, int *);
  uint64_t v59;
  uint64_t v60;
  char v61;
  __int128 v62;
  id *v63;
  id *v64;
  int v65;
  id v66;
  void *v67;
  char v68;
  id v69;
  char v70;
  id v71;
  id *v72;
  id *v73;
  int v74;
  id v75;
  void *v76;
  char v77;
  id v78;
  char v79;
  id v80;
  id *v81;
  id *v82;
  int v83;
  id v84;
  void *v85;
  char v86;
  id v87;
  char v88;
  id v89;
  id *v90;
  id *v91;
  int v92;
  id v93;
  void *v94;
  char v95;
  id v96;
  char v97;
  id v98;
  id *v99;
  id *v100;
  int v101;
  id v102;
  void *v103;
  char v104;
  id v105;
  char v106;
  id v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  char *v114;
  uint64_t v115;
  _QWORD *v116;
  char *v117;
  int *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  char v122;
  uint64_t v123;
  _QWORD *v124;
  char *v125;
  uint64_t v126;
  void *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t (*v131)(void *, uint64_t, uint64_t);
  int v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  char *v137;
  uint64_t v138;
  char v139;
  uint64_t v140;
  char v141;
  uint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  char *v149;
  uint64_t v150;
  int *v152;
  uint64_t *v153;

  v6 = *a1;
  *a1 = *a2;
  swift_retain();
  swift_release(v6);
  v7 = a3[5];
  v8 = (uint64_t)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = (int *)type metadata accessor for ArtworkModel(0);
  v11 = *((_QWORD *)v10 - 1);
  v12 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12((uint64_t)v9, 1, v10);
  v152 = a3;
  v153 = a2;
  if (v13)
  {
    if (!v14)
    {
      *(_QWORD *)v8 = *(_QWORD *)v9;
      *(_QWORD *)(v8 + 8) = *((_QWORD *)v9 + 1);
      v15 = v9[32];
      swift_bridgeObjectRetain();
      if (v15 == 255)
      {
        v27 = *((_OWORD *)v9 + 1);
        *(_BYTE *)(v8 + 32) = v9[32];
        *(_OWORD *)(v8 + 16) = v27;
      }
      else
      {
        v16 = *((_QWORD *)v9 + 2);
        v17 = *((_QWORD *)v9 + 3);
        sub_3D464(v16, v17, v15);
        *(_QWORD *)(v8 + 16) = v16;
        *(_QWORD *)(v8 + 24) = v17;
        *(_BYTE *)(v8 + 32) = v15;
      }
      *(_QWORD *)(v8 + 40) = *((_QWORD *)v9 + 5);
      *(_QWORD *)(v8 + 48) = *((_QWORD *)v9 + 6);
      v28 = (id *)(v9 + 56);
      v29 = v9[64];
      if (v29 == 255)
      {
        v31 = *v28;
        *(_BYTE *)(v8 + 64) = v9[64];
        *(_QWORD *)(v8 + 56) = v31;
      }
      else
      {
        v30 = *v28;
        sub_3D47C(*v28, v9[64]);
        *(_QWORD *)(v8 + 56) = v30;
        *(_BYTE *)(v8 + 64) = v29;
      }
      v32 = (id *)(v9 + 72);
      v33 = v9[80];
      if (v33 == 255)
      {
        v35 = *v32;
        *(_BYTE *)(v8 + 80) = v9[80];
        *(_QWORD *)(v8 + 72) = v35;
      }
      else
      {
        v34 = *v32;
        sub_3D47C(*v32, v9[80]);
        *(_QWORD *)(v8 + 72) = v34;
        *(_BYTE *)(v8 + 80) = v33;
      }
      v36 = (id *)(v9 + 88);
      v37 = v9[96];
      if (v37 == 255)
      {
        v39 = *v36;
        *(_BYTE *)(v8 + 96) = v9[96];
        *(_QWORD *)(v8 + 88) = v39;
      }
      else
      {
        v38 = *v36;
        sub_3D47C(*v36, v9[96]);
        *(_QWORD *)(v8 + 88) = v38;
        *(_BYTE *)(v8 + 96) = v37;
      }
      v40 = (id *)(v9 + 104);
      v41 = v9[112];
      if (v41 == 255)
      {
        v43 = *v40;
        *(_BYTE *)(v8 + 112) = v9[112];
        *(_QWORD *)(v8 + 104) = v43;
      }
      else
      {
        v42 = *v40;
        sub_3D47C(*v40, v9[112]);
        *(_QWORD *)(v8 + 104) = v42;
        *(_BYTE *)(v8 + 112) = v41;
      }
      v44 = (id *)(v9 + 120);
      v45 = v9[128];
      if (v45 == 255)
      {
        v47 = *v44;
        *(_BYTE *)(v8 + 128) = v9[128];
        *(_QWORD *)(v8 + 120) = v47;
      }
      else
      {
        v46 = *v44;
        sub_3D47C(*v44, v9[128]);
        *(_QWORD *)(v8 + 120) = v46;
        *(_BYTE *)(v8 + 128) = v45;
      }
      *(_BYTE *)(v8 + 129) = v9[129];
      v48 = v10[11];
      v49 = v8 + v48;
      v50 = &v9[v48];
      v51 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v51 - 8) + 16))(v49, v50, v51);
      v52 = v10[12];
      v53 = (_QWORD *)(v8 + v52);
      v54 = &v9[v52];
      *v53 = *(_QWORD *)v54;
      v53[1] = *((_QWORD *)v54 + 1);
      *(_BYTE *)(v8 + v10[13]) = v9[v10[13]];
      *(_BYTE *)(v8 + v10[14]) = v9[v10[14]];
      *(_BYTE *)(v8 + v10[15]) = v9[v10[15]];
      v55 = v10[16];
      v56 = (_QWORD *)(v8 + v55);
      v57 = &v9[v55];
      *v56 = *(_QWORD *)v57;
      v56[1] = *((_QWORD *)v57 + 1);
      v58 = *(void (**)(uint64_t, _QWORD, uint64_t, int *))(v11 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v58(v8, 0, 1, v10);
      goto LABEL_68;
    }
LABEL_7:
    v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
    memcpy((void *)v8, v9, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_68;
  }
  if (v14)
  {
    sub_145D8(v8, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
    goto LABEL_7;
  }
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_QWORD *)(v8 + 8) = *((_QWORD *)v9 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v19 = (__int128 *)(v8 + 16);
  v20 = (__int128 *)(v9 + 16);
  v21 = v9[32];
  if (*(unsigned __int8 *)(v8 + 32) == 255)
  {
    if (v21 == 255)
    {
      v62 = *v20;
      *(_BYTE *)(v8 + 32) = v9[32];
      *v19 = v62;
    }
    else
    {
      v59 = *((_QWORD *)v9 + 2);
      v60 = *((_QWORD *)v9 + 3);
      sub_3D464(v59, v60, v9[32]);
      *(_QWORD *)(v8 + 16) = v59;
      *(_QWORD *)(v8 + 24) = v60;
      *(_BYTE *)(v8 + 32) = v21;
    }
  }
  else if (v21 == 255)
  {
    sub_3E43C(v8 + 16);
    v61 = v9[32];
    *v19 = *v20;
    *(_BYTE *)(v8 + 32) = v61;
  }
  else
  {
    v22 = *((_QWORD *)v9 + 2);
    v23 = *((_QWORD *)v9 + 3);
    sub_3D464(v22, v23, v9[32]);
    v24 = *(_QWORD *)(v8 + 16);
    v25 = *(_QWORD *)(v8 + 24);
    *(_QWORD *)(v8 + 16) = v22;
    *(_QWORD *)(v8 + 24) = v23;
    v26 = *(_BYTE *)(v8 + 32);
    *(_BYTE *)(v8 + 32) = v21;
    sub_3B5BC(v24, v25, v26);
  }
  *(_QWORD *)(v8 + 40) = *((_QWORD *)v9 + 5);
  *(_QWORD *)(v8 + 48) = *((_QWORD *)v9 + 6);
  v63 = (id *)(v8 + 56);
  v64 = (id *)(v9 + 56);
  v65 = v9[64];
  if (*(unsigned __int8 *)(v8 + 64) == 255)
  {
    if (v65 == 255)
    {
      v71 = *v64;
      *(_BYTE *)(v8 + 64) = v9[64];
      *v63 = v71;
    }
    else
    {
      v69 = *v64;
      sub_3D47C(*v64, v9[64]);
      *(_QWORD *)(v8 + 56) = v69;
      *(_BYTE *)(v8 + 64) = v65;
    }
  }
  else if (v65 == 255)
  {
    sub_3E470(v8 + 56);
    v70 = v9[64];
    *v63 = *v64;
    *(_BYTE *)(v8 + 64) = v70;
  }
  else
  {
    v66 = *v64;
    sub_3D47C(*v64, v9[64]);
    v67 = *(void **)(v8 + 56);
    *(_QWORD *)(v8 + 56) = v66;
    v68 = *(_BYTE *)(v8 + 64);
    *(_BYTE *)(v8 + 64) = v65;
    sub_3D624(v67, v68);
  }
  v72 = (id *)(v8 + 72);
  v73 = (id *)(v9 + 72);
  v74 = v9[80];
  if (*(unsigned __int8 *)(v8 + 80) == 255)
  {
    if (v74 == 255)
    {
      v80 = *v73;
      *(_BYTE *)(v8 + 80) = v9[80];
      *v72 = v80;
    }
    else
    {
      v78 = *v73;
      sub_3D47C(*v73, v9[80]);
      *(_QWORD *)(v8 + 72) = v78;
      *(_BYTE *)(v8 + 80) = v74;
    }
  }
  else if (v74 == 255)
  {
    sub_3E470(v8 + 72);
    v79 = v9[80];
    *v72 = *v73;
    *(_BYTE *)(v8 + 80) = v79;
  }
  else
  {
    v75 = *v73;
    sub_3D47C(*v73, v9[80]);
    v76 = *(void **)(v8 + 72);
    *(_QWORD *)(v8 + 72) = v75;
    v77 = *(_BYTE *)(v8 + 80);
    *(_BYTE *)(v8 + 80) = v74;
    sub_3D624(v76, v77);
  }
  v81 = (id *)(v8 + 88);
  v82 = (id *)(v9 + 88);
  v83 = v9[96];
  if (*(unsigned __int8 *)(v8 + 96) == 255)
  {
    if (v83 == 255)
    {
      v89 = *v82;
      *(_BYTE *)(v8 + 96) = v9[96];
      *v81 = v89;
    }
    else
    {
      v87 = *v82;
      sub_3D47C(*v82, v9[96]);
      *(_QWORD *)(v8 + 88) = v87;
      *(_BYTE *)(v8 + 96) = v83;
    }
  }
  else if (v83 == 255)
  {
    sub_3E470(v8 + 88);
    v88 = v9[96];
    *v81 = *v82;
    *(_BYTE *)(v8 + 96) = v88;
  }
  else
  {
    v84 = *v82;
    sub_3D47C(*v82, v9[96]);
    v85 = *(void **)(v8 + 88);
    *(_QWORD *)(v8 + 88) = v84;
    v86 = *(_BYTE *)(v8 + 96);
    *(_BYTE *)(v8 + 96) = v83;
    sub_3D624(v85, v86);
  }
  v90 = (id *)(v8 + 104);
  v91 = (id *)(v9 + 104);
  v92 = v9[112];
  if (*(unsigned __int8 *)(v8 + 112) == 255)
  {
    if (v92 == 255)
    {
      v98 = *v91;
      *(_BYTE *)(v8 + 112) = v9[112];
      *v90 = v98;
    }
    else
    {
      v96 = *v91;
      sub_3D47C(*v91, v9[112]);
      *(_QWORD *)(v8 + 104) = v96;
      *(_BYTE *)(v8 + 112) = v92;
    }
  }
  else if (v92 == 255)
  {
    sub_3E470(v8 + 104);
    v97 = v9[112];
    *v90 = *v91;
    *(_BYTE *)(v8 + 112) = v97;
  }
  else
  {
    v93 = *v91;
    sub_3D47C(*v91, v9[112]);
    v94 = *(void **)(v8 + 104);
    *(_QWORD *)(v8 + 104) = v93;
    v95 = *(_BYTE *)(v8 + 112);
    *(_BYTE *)(v8 + 112) = v92;
    sub_3D624(v94, v95);
  }
  v99 = (id *)(v8 + 120);
  v100 = (id *)(v9 + 120);
  v101 = v9[128];
  if (*(unsigned __int8 *)(v8 + 128) == 255)
  {
    if (v101 == 255)
    {
      v107 = *v100;
      *(_BYTE *)(v8 + 128) = v9[128];
      *v99 = v107;
    }
    else
    {
      v105 = *v100;
      sub_3D47C(*v100, v9[128]);
      *(_QWORD *)(v8 + 120) = v105;
      *(_BYTE *)(v8 + 128) = v101;
    }
  }
  else if (v101 == 255)
  {
    sub_3E470(v8 + 120);
    v106 = v9[128];
    *v99 = *v100;
    *(_BYTE *)(v8 + 128) = v106;
  }
  else
  {
    v102 = *v100;
    sub_3D47C(*v100, v9[128]);
    v103 = *(void **)(v8 + 120);
    *(_QWORD *)(v8 + 120) = v102;
    v104 = *(_BYTE *)(v8 + 128);
    *(_BYTE *)(v8 + 128) = v101;
    sub_3D624(v103, v104);
  }
  *(_BYTE *)(v8 + 129) = v9[129];
  v108 = v10[11];
  v109 = v8 + v108;
  v110 = &v9[v108];
  v111 = type metadata accessor for ArtworkCrop(0);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v111 - 8) + 24))(v109, v110, v111);
  v112 = v10[12];
  v113 = (_QWORD *)(v8 + v112);
  v114 = &v9[v112];
  *v113 = *(_QWORD *)v114;
  v113[1] = *((_QWORD *)v114 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(v8 + v10[13]) = v9[v10[13]];
  *(_BYTE *)(v8 + v10[14]) = v9[v10[14]];
  *(_BYTE *)(v8 + v10[15]) = v9[v10[15]];
  v115 = v10[16];
  v116 = (_QWORD *)(v8 + v115);
  v117 = &v9[v115];
  *v116 = *(_QWORD *)v117;
  v116[1] = *((_QWORD *)v117 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_68:
  v118 = (int *)type metadata accessor for Artwork.Configuration(0);
  v119 = v118[5];
  v120 = v8 + v119;
  v121 = &v9[v119];
  v122 = v121[16];
  *(_OWORD *)v120 = *(_OWORD *)v121;
  *(_BYTE *)(v120 + 16) = v122;
  v123 = v118[6];
  v124 = (_QWORD *)(v8 + v123);
  v125 = &v9[v123];
  *v124 = *(_QWORD *)v125;
  v124[1] = *((_QWORD *)v125 + 1);
  v126 = v118[7];
  v127 = (void *)(v8 + v126);
  v128 = &v9[v126];
  v129 = type metadata accessor for CropCode(0);
  v130 = *(_QWORD *)(v129 - 8);
  v131 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v130 + 48);
  v132 = v131(v127, 1, v129);
  v133 = v131(v128, 1, v129);
  if (v132)
  {
    if (!v133)
    {
      (*(void (**)(void *, char *, uint64_t))(v130 + 16))(v127, v128, v129);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v130 + 56))(v127, 0, 1, v129);
      goto LABEL_74;
    }
    goto LABEL_73;
  }
  if (v133)
  {
    (*(void (**)(void *, uint64_t))(v130 + 8))(v127, v129);
LABEL_73:
    v134 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7D58);
    memcpy(v127, v128, *(_QWORD *)(*(_QWORD *)(v134 - 8) + 64));
    goto LABEL_74;
  }
  (*(void (**)(void *, char *, uint64_t))(v130 + 24))(v127, v128, v129);
LABEL_74:
  *(_BYTE *)(v8 + v118[8]) = v9[v118[8]];
  v135 = v152[6];
  v136 = (char *)a1 + v135;
  v137 = (char *)v153 + v135;
  v138 = *(_QWORD *)v137;
  v139 = v137[8];
  sub_A0A18(*(_QWORD *)v137, v139);
  v140 = *(_QWORD *)v136;
  v141 = v136[8];
  *(_QWORD *)v136 = v138;
  v136[8] = v139;
  sub_A0A6C(v140, v141);
  v142 = v152[7];
  v143 = (char *)a1 + v142;
  v144 = (char *)v153 + v142;
  v145 = *(_QWORD *)v144;
  LOBYTE(v144) = v144[8];
  v146 = *(_QWORD *)v143;
  *(_QWORD *)v143 = v145;
  v143[8] = (char)v144;
  swift_retain();
  swift_release(v146);
  if (a1 != v153)
  {
    v147 = v152[8];
    v148 = (char *)a1 + v147;
    v149 = (char *)v153 + v147;
    sub_1459C((uint64_t)a1 + v147, &qword_3B9A10);
    if ((v149[40] & 1) != 0)
    {
      v150 = *((_QWORD *)v149 + 3);
      *((_QWORD *)v148 + 3) = v150;
      *((_QWORD *)v148 + 4) = *((_QWORD *)v149 + 4);
      (**(void (***)(char *, char *))(v150 - 8))(v148, v149);
      v148[40] = 1;
    }
    else
    {
      *(_QWORD *)v148 = *(_QWORD *)v149;
      v148[40] = 0;
      swift_retain();
    }
  }
  return a1;
}

_QWORD *sub_104028(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  _OWORD *v34;
  _OWORD *v35;
  __int128 v36;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (_OWORD *)((char *)a1 + v6);
  v8 = (_OWORD *)((char *)a2 + v6);
  v9 = (int *)type metadata accessor for ArtworkModel(0);
  v10 = *((_QWORD *)v9 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v10 + 48))(v8, 1, v9))
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    v12 = v8[1];
    *v7 = *v8;
    v7[1] = v12;
    *((_BYTE *)v7 + 32) = *((_BYTE *)v8 + 32);
    *(_OWORD *)((char *)v7 + 40) = *(_OWORD *)((char *)v8 + 40);
    *((_QWORD *)v7 + 7) = *((_QWORD *)v8 + 7);
    *((_BYTE *)v7 + 64) = *((_BYTE *)v8 + 64);
    *(_OWORD *)((char *)v7 + 113) = *(_OWORD *)((char *)v8 + 113);
    *(_OWORD *)((char *)v7 + 104) = *(_OWORD *)((char *)v8 + 104);
    *(_OWORD *)((char *)v7 + 88) = *(_OWORD *)((char *)v8 + 88);
    *(_OWORD *)((char *)v7 + 72) = *(_OWORD *)((char *)v8 + 72);
    *((_BYTE *)v7 + 129) = *((_BYTE *)v8 + 129);
    v13 = v9[11];
    v14 = (char *)v7 + v13;
    v15 = (char *)v8 + v13;
    v16 = type metadata accessor for ArtworkCrop(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
    *(_OWORD *)((char *)v7 + v9[12]) = *(_OWORD *)((char *)v8 + v9[12]);
    *((_BYTE *)v7 + v9[13]) = *((_BYTE *)v8 + v9[13]);
    *((_BYTE *)v7 + v9[14]) = *((_BYTE *)v8 + v9[14]);
    *((_BYTE *)v7 + v9[15]) = *((_BYTE *)v8 + v9[15]);
    *(_OWORD *)((char *)v7 + v9[16]) = *(_OWORD *)((char *)v8 + v9[16]);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v10 + 56))(v7, 0, 1, v9);
  }
  v17 = (int *)type metadata accessor for Artwork.Configuration(0);
  v18 = v17[5];
  v19 = (char *)v7 + v18;
  v20 = (char *)v8 + v18;
  *(_OWORD *)v19 = *(_OWORD *)v20;
  v19[16] = v20[16];
  *(_OWORD *)((char *)v7 + v17[6]) = *(_OWORD *)((char *)v8 + v17[6]);
  v21 = v17[7];
  v22 = (char *)v7 + v21;
  v23 = (char *)v8 + v21;
  v24 = type metadata accessor for CropCode(0);
  v25 = *(_QWORD *)(v24 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
  {
    v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7D58);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v22, v23, v24);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  }
  *((_BYTE *)v7 + v17[8]) = *((_BYTE *)v8 + v17[8]);
  v27 = a3[6];
  v28 = a3[7];
  v29 = (char *)a1 + v27;
  v30 = (char *)a2 + v27;
  v29[8] = v30[8];
  *(_QWORD *)v29 = *(_QWORD *)v30;
  v31 = (char *)a1 + v28;
  v32 = (char *)a2 + v28;
  v31[8] = v32[8];
  *(_QWORD *)v31 = *(_QWORD *)v32;
  v33 = a3[8];
  v34 = (_OWORD *)((char *)a1 + v33);
  v35 = (_OWORD *)((char *)a2 + v33);
  *(_OWORD *)((char *)v34 + 25) = *(_OWORD *)((char *)v35 + 25);
  v36 = v35[1];
  *v34 = *v35;
  v34[1] = v36;
  return a1;
}

uint64_t *sub_1042B4(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, int *);
  int v13;
  int v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(void *, uint64_t, uint64_t);
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _OWORD *v46;
  _OWORD *v47;
  __int128 v48;
  uint64_t v50;
  _OWORD *v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  int v57;
  int v58;
  void *v59;
  _QWORD *v60;
  int v61;
  int v62;
  void *v63;
  _QWORD *v64;
  int v65;
  int v66;
  void *v67;
  _QWORD *v68;
  int v69;
  int v70;
  void *v71;
  _QWORD *v72;
  int v73;
  int v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  int *v90;
  uint64_t *v91;

  v6 = *a1;
  *a1 = *a2;
  swift_release(v6);
  v7 = a3[5];
  v8 = (uint64_t)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = (int *)type metadata accessor for ArtworkModel(0);
  v11 = *((_QWORD *)v10 - 1);
  v12 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12((uint64_t)v9, 1, v10);
  v90 = a3;
  v91 = a2;
  if (v13)
  {
    if (!v14)
    {
      v15 = *((_OWORD *)v9 + 1);
      *(_OWORD *)v8 = *(_OWORD *)v9;
      *(_OWORD *)(v8 + 16) = v15;
      *(_BYTE *)(v8 + 32) = v9[32];
      *(_OWORD *)(v8 + 40) = *(_OWORD *)(v9 + 40);
      *(_QWORD *)(v8 + 56) = *((_QWORD *)v9 + 7);
      *(_BYTE *)(v8 + 64) = v9[64];
      *(_OWORD *)(v8 + 113) = *(_OWORD *)(v9 + 113);
      *(_OWORD *)(v8 + 104) = *(_OWORD *)(v9 + 104);
      *(_OWORD *)(v8 + 88) = *(_OWORD *)(v9 + 88);
      *(_OWORD *)(v8 + 72) = *(_OWORD *)(v9 + 72);
      *(_BYTE *)(v8 + 129) = v9[129];
      v16 = v10[11];
      v17 = v8 + v16;
      v18 = &v9[v16];
      v19 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v17, v18, v19);
      *(_OWORD *)(v8 + v10[12]) = *(_OWORD *)&v9[v10[12]];
      *(_BYTE *)(v8 + v10[13]) = v9[v10[13]];
      *(_BYTE *)(v8 + v10[14]) = v9[v10[14]];
      *(_BYTE *)(v8 + v10[15]) = v9[v10[15]];
      *(_OWORD *)(v8 + v10[16]) = *(_OWORD *)&v9[v10[16]];
      (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    sub_145D8(v8, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
LABEL_6:
    v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
    memcpy((void *)v8, v9, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  v50 = *((_QWORD *)v9 + 1);
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_QWORD *)(v8 + 8) = v50;
  swift_bridgeObjectRelease();
  v51 = v9 + 16;
  v52 = *(unsigned __int8 *)(v8 + 32);
  if (v52 != 255)
  {
    v53 = v9[32];
    if (v53 != 255)
    {
      v54 = *(_QWORD *)(v8 + 16);
      v55 = *(_QWORD *)(v8 + 24);
      *(_OWORD *)(v8 + 16) = *v51;
      *(_BYTE *)(v8 + 32) = v53;
      sub_3B5BC(v54, v55, v52);
      goto LABEL_22;
    }
    sub_3E43C(v8 + 16);
  }
  *(_OWORD *)(v8 + 16) = *v51;
  *(_BYTE *)(v8 + 32) = v9[32];
LABEL_22:
  *(_OWORD *)(v8 + 40) = *(_OWORD *)(v9 + 40);
  v56 = v9 + 56;
  v57 = *(unsigned __int8 *)(v8 + 64);
  if (v57 != 255)
  {
    v58 = v9[64];
    if (v58 != 255)
    {
      v59 = *(void **)(v8 + 56);
      *(_QWORD *)(v8 + 56) = *v56;
      *(_BYTE *)(v8 + 64) = v58;
      sub_3D624(v59, v57);
      goto LABEL_27;
    }
    sub_3E470(v8 + 56);
  }
  *(_QWORD *)(v8 + 56) = *v56;
  *(_BYTE *)(v8 + 64) = v9[64];
LABEL_27:
  v60 = v9 + 72;
  v61 = *(unsigned __int8 *)(v8 + 80);
  if (v61 != 255)
  {
    v62 = v9[80];
    if (v62 != 255)
    {
      v63 = *(void **)(v8 + 72);
      *(_QWORD *)(v8 + 72) = *v60;
      *(_BYTE *)(v8 + 80) = v62;
      sub_3D624(v63, v61);
      goto LABEL_32;
    }
    sub_3E470(v8 + 72);
  }
  *(_QWORD *)(v8 + 72) = *v60;
  *(_BYTE *)(v8 + 80) = v9[80];
LABEL_32:
  v64 = v9 + 88;
  v65 = *(unsigned __int8 *)(v8 + 96);
  if (v65 != 255)
  {
    v66 = v9[96];
    if (v66 != 255)
    {
      v67 = *(void **)(v8 + 88);
      *(_QWORD *)(v8 + 88) = *v64;
      *(_BYTE *)(v8 + 96) = v66;
      sub_3D624(v67, v65);
      goto LABEL_37;
    }
    sub_3E470(v8 + 88);
  }
  *(_QWORD *)(v8 + 88) = *v64;
  *(_BYTE *)(v8 + 96) = v9[96];
LABEL_37:
  v68 = v9 + 104;
  v69 = *(unsigned __int8 *)(v8 + 112);
  if (v69 != 255)
  {
    v70 = v9[112];
    if (v70 != 255)
    {
      v71 = *(void **)(v8 + 104);
      *(_QWORD *)(v8 + 104) = *v68;
      *(_BYTE *)(v8 + 112) = v70;
      sub_3D624(v71, v69);
      goto LABEL_42;
    }
    sub_3E470(v8 + 104);
  }
  *(_QWORD *)(v8 + 104) = *v68;
  *(_BYTE *)(v8 + 112) = v9[112];
LABEL_42:
  v72 = v9 + 120;
  v73 = *(unsigned __int8 *)(v8 + 128);
  if (v73 == 255)
  {
LABEL_46:
    *(_QWORD *)(v8 + 120) = *v72;
    *(_BYTE *)(v8 + 128) = v9[128];
    goto LABEL_47;
  }
  v74 = v9[128];
  if (v74 == 255)
  {
    sub_3E470(v8 + 120);
    goto LABEL_46;
  }
  v75 = *(void **)(v8 + 120);
  *(_QWORD *)(v8 + 120) = *v72;
  *(_BYTE *)(v8 + 128) = v74;
  sub_3D624(v75, v73);
LABEL_47:
  *(_BYTE *)(v8 + 129) = v9[129];
  v76 = v10[11];
  v77 = v8 + v76;
  v78 = &v9[v76];
  v79 = type metadata accessor for ArtworkCrop(0);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v79 - 8) + 40))(v77, v78, v79);
  v80 = v10[12];
  v81 = (_QWORD *)(v8 + v80);
  v82 = &v9[v80];
  v84 = *(_QWORD *)v82;
  v83 = *((_QWORD *)v82 + 1);
  *v81 = v84;
  v81[1] = v83;
  swift_bridgeObjectRelease();
  *(_BYTE *)(v8 + v10[13]) = v9[v10[13]];
  *(_BYTE *)(v8 + v10[14]) = v9[v10[14]];
  *(_BYTE *)(v8 + v10[15]) = v9[v10[15]];
  v85 = v10[16];
  v86 = (_QWORD *)(v8 + v85);
  v87 = &v9[v85];
  v89 = *(_QWORD *)v87;
  v88 = *((_QWORD *)v87 + 1);
  *v86 = v89;
  v86[1] = v88;
  swift_bridgeObjectRelease();
LABEL_7:
  v21 = (int *)type metadata accessor for Artwork.Configuration(0);
  v22 = v21[5];
  v23 = v8 + v22;
  v24 = &v9[v22];
  *(_OWORD *)v23 = *(_OWORD *)v24;
  *(_BYTE *)(v23 + 16) = v24[16];
  *(_OWORD *)(v8 + v21[6]) = *(_OWORD *)&v9[v21[6]];
  v25 = v21[7];
  v26 = (void *)(v8 + v25);
  v27 = &v9[v25];
  v28 = type metadata accessor for CropCode(0);
  v29 = *(_QWORD *)(v28 - 8);
  v30 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v29 + 48);
  v31 = v30(v26, 1, v28);
  v32 = v30(v27, 1, v28);
  if (v31)
  {
    if (!v32)
    {
      (*(void (**)(void *, char *, uint64_t))(v29 + 32))(v26, v27, v28);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v32)
  {
    (*(void (**)(void *, uint64_t))(v29 + 8))(v26, v28);
LABEL_12:
    v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7D58);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, char *, uint64_t))(v29 + 40))(v26, v27, v28);
LABEL_13:
  *(_BYTE *)(v8 + v21[8]) = v9[v21[8]];
  v34 = v90[6];
  v35 = (char *)a1 + v34;
  v36 = (char *)v91 + v34;
  v37 = *(_QWORD *)v36;
  LOBYTE(v36) = v36[8];
  v38 = *(_QWORD *)v35;
  v39 = v35[8];
  *(_QWORD *)v35 = v37;
  v35[8] = (char)v36;
  sub_A0A6C(v38, v39);
  v40 = v90[7];
  v41 = (char *)a1 + v40;
  v42 = (char *)v91 + v40;
  v43 = *(_QWORD *)v42;
  LOBYTE(v42) = v42[8];
  v44 = *(_QWORD *)v41;
  *(_QWORD *)v41 = v43;
  v41[8] = (char)v42;
  swift_release(v44);
  if (a1 != v91)
  {
    v45 = v90[8];
    v46 = (_OWORD *)((char *)v91 + v45);
    v47 = (_OWORD *)((char *)a1 + v45);
    sub_1459C((uint64_t)a1 + v45, &qword_3B9A10);
    v48 = v46[1];
    *v47 = *v46;
    v47[1] = v48;
    *(_OWORD *)((char *)v47 + 25) = *(_OWORD *)((char *)v46 + 25);
  }
  return a1;
}

uint64_t sub_104884(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_104890);
}

uint64_t sub_104890(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for Artwork.Configuration(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t sub_10490C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_104918);
}

char *sub_104918(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for Artwork.Configuration(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for ArtworkLoaderModifier(uint64_t a1)
{
  return sub_1F9D4(a1, qword_3B9A70, (uint64_t)&nominal type descriptor for ArtworkLoaderModifier);
}

uint64_t sub_1049A0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  result = type metadata accessor for Artwork.Configuration(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = "\t";
    v4[3] = "\t";
    v4[4] = &unk_2F5850;
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for BucketingStrategyEnviromentKey()
{
  return &type metadata for BucketingStrategyEnviromentKey;
}

uint64_t sub_104A3C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_340610, 1);
}

uint64_t sub_104A50(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ArtworkLoaderModifier(0) - 8) + 80);
  return sub_FE214(a1, a2, v2 + ((v5 + 16) & ~v5));
}

unint64_t sub_104A9C()
{
  unint64_t result;

  result = qword_3B9AD0;
  if (!qword_3B9AD0)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_3B9AB8);
    sub_104B00();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>);
    atomic_store(result, (unint64_t *)&qword_3B9AD0);
  }
  return result;
}

unint64_t sub_104B00()
{
  unint64_t result;

  result = qword_3B9AD8;
  if (!qword_3B9AD8)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_3B9AE0);
    sub_104B84();
    sub_32914(&qword_3B9AF8, &qword_3B9B00, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>);
    atomic_store(result, (unint64_t *)&qword_3B9AD8);
  }
  return result;
}

unint64_t sub_104B84()
{
  unint64_t result;

  result = qword_3B9AE8;
  if (!qword_3B9AE8)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_3B9AF0);
    sub_32914(&qword_3B9AF8, &qword_3B9B00, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    sub_32914(&qword_3B9B08, &qword_3B9B10, (uint64_t)&protocol conformance descriptor for _GeometryActionModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>);
    atomic_store(result, (unint64_t *)&qword_3B9AE8);
  }
  return result;
}

uint64_t objectdestroyTm_2()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;

  v1 = (int *)type metadata accessor for ArtworkLoaderModifier(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  swift_release(*(_QWORD *)(v0 + v4));
  v7 = v0 + v4 + v1[5];
  v8 = type metadata accessor for ArtworkModel(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v7, 1, v8))
  {
    swift_bridgeObjectRelease();
    v9 = *(unsigned __int8 *)(v7 + 32);
    if (v9 != 255)
      sub_3B5BC(*(_QWORD *)(v7 + 16), *(_QWORD *)(v7 + 24), v9);
    v10 = *(unsigned __int8 *)(v7 + 64);
    if (v10 != 255)
      sub_3D624(*(id *)(v7 + 56), v10);
    v11 = *(unsigned __int8 *)(v7 + 80);
    if (v11 != 255)
      sub_3D624(*(id *)(v7 + 72), v11);
    v12 = *(unsigned __int8 *)(v7 + 96);
    if (v12 != 255)
      sub_3D624(*(id *)(v7 + 88), v12);
    v13 = *(unsigned __int8 *)(v7 + 112);
    if (v13 != 255)
      sub_3D624(*(id *)(v7 + 104), v13);
    v14 = *(unsigned __int8 *)(v7 + 128);
    if (v14 != 255)
      sub_3D624(*(id *)(v7 + 120), v14);
    v15 = v7 + *(int *)(v8 + 44);
    v16 = type metadata accessor for ArtworkCrop(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v17 = v7 + *(int *)(type metadata accessor for Artwork.Configuration(0) + 28);
  v18 = type metadata accessor for CropCode(0);
  v19 = *(_QWORD *)(v18 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v17, v18);
  sub_A0A6C(*(_QWORD *)(v6 + v1[6]), *(_BYTE *)(v6 + v1[6] + 8));
  swift_release(*(_QWORD *)(v6 + v1[7]));
  v20 = (_QWORD *)(v6 + v1[8]);
  if ((v20[5] & 1) != 0)
    __swift_destroy_boxed_opaque_existential_1(v20);
  else
    swift_release(*v20);
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_104E10()
{
  return sub_104E2C(sub_FE370);
}

uint64_t sub_104E20()
{
  return sub_104E2C((uint64_t (*)(uint64_t))sub_FE4CC);
}

uint64_t sub_104E2C(uint64_t (*a1)(uint64_t))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ArtworkLoaderModifier(0) - 8) + 80);
  return a1(v1 + ((v2 + 16) & ~v2));
}

uint64_t sub_104E68(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B9B28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_104EB0@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_2F5978);
  v5 = swift_getKeyPath(&unk_2F59A0);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(KeyPath);
  result = swift_release(v5);
  *a2 = v7;
  return result;
}

uint64_t sub_104F30(void **a1, uint64_t *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  id v6;
  void *v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_2F5978);
  v5 = swift_getKeyPath(&unk_2F59A0);
  v8 = v2;
  v6 = v2;
  swift_retain(v3);
  return static Published.subscript.setter(&v8, v3, KeyPath, v5);
}

uint64_t sub_104FA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B9B28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

BOOL sub_104FF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  double *v9;
  double v10;
  _BOOL4 v11;

  if ((sub_2AA720(a1, a2) & 1) == 0)
    return 0;
  v4 = _s6LoaderC19LoaderConfigurationVMa(0);
  if (*(double *)(a1 + *(int *)(v4 + 20)) != *(double *)(a2 + *(int *)(v4 + 20)))
    return 0;
  v5 = v4;
  if ((static ArtworkModel.== infix(_:_:)(a1 + *(int *)(v4 + 24), a2 + *(int *)(v4 + 24)) & 1) == 0)
    return 0;
  v6 = *(int *)(v5 + 28);
  v7 = *(double *)(a1 + v6);
  v8 = *(double *)(a1 + v6 + 8);
  v9 = (double *)(a2 + v6);
  v10 = v9[1];
  v11 = v7 == *v9;
  return v8 == v10 && v11;
}

void sub_105080()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[24];

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B9B28);
  __chkstk_darwin(v2);
  v4 = &v11[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = OBJC_IVAR____TtCV8ShelfKit7Artwork6Loader_currentRequest;
  v6 = *(_QWORD *)(v0 + OBJC_IVAR____TtCV8ShelfKit7Artwork6Loader_currentRequest);
  if (v6)
  {
    swift_retain();
    AnyCancellable.cancel()();
    swift_release(v6);
    v7 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = 0;
    swift_release(v7);
    v8 = _s6LoaderC19LoaderConfigurationVMa(0);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v4, 1, 1, v8);
    v9 = v1 + OBJC_IVAR____TtCV8ShelfKit7Artwork6Loader_loaderConfiguration;
    swift_beginAccess(v9, v11, 33, 0);
    sub_104E68((uint64_t)v4, v9);
    swift_endAccess(v11);
  }
}

uint64_t sub_10516C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_105198()
{
  uint64_t v0;

  return sub_FEEC4(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t block_copy_helper_10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t block_destroy_helper_10(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1051B8()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1051DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for ArtworkRequest(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_105250(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ArtworkRequest(0) - 8) + 80);
  return sub_FF55C(a1, *(_QWORD *)(v1 + 16), v1 + ((v3 + 24) & ~v3));
}

uint64_t sub_105290(void **a1)
{
  uint64_t v1;

  return sub_FFE28(a1, v1);
}

uint64_t sub_105298()
{
  uint64_t v0;

  return sub_FFF64(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1052B4@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for ArtworkLoaderModifier(0);
  return sub_FD74C(a1);
}

uint64_t sub_105304(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ArtworkLoaderModifier(0) - 8) + 80);
  return sub_FD7D8(a1, v1 + ((v3 + 16) & ~v3));
}

unint64_t sub_105344()
{
  unint64_t result;

  result = qword_3B9B98;
  if (!qword_3B9B98)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_3B9B20);
    sub_1053B0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>);
    atomic_store(result, (unint64_t *)&qword_3B9B98);
  }
  return result;
}

unint64_t sub_1053B0()
{
  unint64_t result;
  _QWORD v1[4];

  result = qword_3B9BA0;
  if (!qword_3B9BA0)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_3B9AC8);
    v1[0] = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_3B9AB8);
    v1[1] = type metadata accessor for Artwork.Configuration(255);
    v1[2] = sub_104A9C();
    v1[3] = sub_F1C0(&qword_3B9B18, (void (*)(uint64_t))type metadata accessor for Artwork.Configuration, (uint64_t)&unk_3048E0);
    swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>);
    atomic_store(result, (unint64_t *)&qword_3B9BA0);
  }
  return result;
}

id sub_105488(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  id v11;
  objc_class *v12;
  char *v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  void *v20;
  id v21;
  id v22;
  void *v23;
  id v24;
  void *v25;
  objc_super v27;

  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B9BB0);
  __chkstk_darwin(v7);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(void **)(v3 + OBJC_IVAR____TtC8ShelfKit25TipViewControllerProvider_dialogRequest);
  *(_QWORD *)(v3 + OBJC_IVAR____TtC8ShelfKit25TipViewControllerProvider_dialogRequest) = a1;
  v11 = a1;

  sub_105AF4(a2, (uint64_t)v9);
  v12 = (objc_class *)type metadata accessor for PopoverTipViewController(0);
  v13 = (char *)objc_allocWithZone(v12);
  sub_105AF4((uint64_t)v9, (uint64_t)&v13[OBJC_IVAR____TtC8ShelfKit24PopoverTipViewController_tipType]);
  *(_QWORD *)&v13[OBJC_IVAR____TtC8ShelfKit24PopoverTipViewController_metricsController] = a3;
  v27.receiver = v13;
  v27.super_class = v12;
  swift_retain_n(a3, 2);
  v14 = v11;
  v15 = objc_msgSendSuper2(&v27, "initWithRequest:", v14);
  v16 = objc_allocWithZone((Class)AMSUIBubbleTipAppearance);
  v17 = v15;
  v18 = objc_msgSend(v16, "init");
  objc_msgSend(v17, "setPreferredAppearance:", v18);

  v19 = objc_msgSend(v17, "preferredAppearance");
  if (v19)
  {
    v20 = v19;
    v21 = objc_msgSend((id)objc_opt_self(UIColor), "secondaryLabelColor");
    objc_msgSend(v20, "setImageTintColor:", v21);

  }
  objc_msgSend(v17, "setModalPresentationStyle:", 7);
  v22 = objc_msgSend(v17, "popoverPresentationController");
  if (v22)
  {
    v23 = v22;
    objc_msgSend(v22, "setPermittedArrowDirections:", 1);

    swift_release(a3);
  }
  else
  {

    swift_release(a3);
  }

  sub_57698((uint64_t)v9);
  v24 = objc_msgSend(v17, "popoverPresentationController");
  if (v24)
  {
    v25 = v24;
    objc_msgSend(v24, "setDelegate:", v3);

  }
  return v17;
}

id PopoverTipViewController.__allocating_init(request:tipType:metricsController:)(void *a1, uint64_t a2, uint64_t a3)
{
  objc_class *v3;
  objc_class *v4;
  char *v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  void *v17;
  objc_super v19;

  v4 = v3;
  v8 = (char *)objc_allocWithZone(v4);
  sub_105AF4(a2, (uint64_t)&v8[OBJC_IVAR____TtC8ShelfKit24PopoverTipViewController_tipType]);
  *(_QWORD *)&v8[OBJC_IVAR____TtC8ShelfKit24PopoverTipViewController_metricsController] = a3;
  v19.receiver = v8;
  v19.super_class = v4;
  swift_retain();
  v9 = objc_msgSendSuper2(&v19, "initWithRequest:", a1);
  v10 = objc_allocWithZone((Class)AMSUIBubbleTipAppearance);
  v11 = v9;
  v12 = objc_msgSend(v10, "init", v19.receiver, v19.super_class);
  objc_msgSend(v11, "setPreferredAppearance:", v12);

  v13 = objc_msgSend(v11, "preferredAppearance");
  if (v13)
  {
    v14 = v13;
    v15 = objc_msgSend((id)objc_opt_self(UIColor), "secondaryLabelColor");
    objc_msgSend(v14, "setImageTintColor:", v15);

  }
  objc_msgSend(v11, "setModalPresentationStyle:", 7);
  v16 = objc_msgSend(v11, "popoverPresentationController");
  if (v16)
  {
    v17 = v16;
    objc_msgSend(v16, "setPermittedArrowDirections:", 1);

    swift_release(a3);
  }
  else
  {

    swift_release(a3);
  }

  sub_57698(a2);
  return v11;
}

uint64_t sub_105898()
{
  return -1;
}

id TipViewControllerProvider.init()()
{
  char *v0;
  objc_super v2;

  *(_QWORD *)&v0[OBJC_IVAR____TtC8ShelfKit25TipViewControllerProvider_dialogRequest] = 0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TipViewControllerProvider();
  return objc_msgSendSuper2(&v2, "init");
}

id TipViewControllerProvider.__deallocating_deinit(uint64_t a1)
{
  return sub_106194(a1, type metadata accessor for TipViewControllerProvider);
}

id PopoverTipViewController.init(request:tipType:metricsController:)(void *a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  objc_super v17;

  sub_105AF4(a2, (uint64_t)&v3[OBJC_IVAR____TtC8ShelfKit24PopoverTipViewController_tipType]);
  *(_QWORD *)&v3[OBJC_IVAR____TtC8ShelfKit24PopoverTipViewController_metricsController] = a3;
  v17.receiver = v3;
  v17.super_class = (Class)type metadata accessor for PopoverTipViewController(0);
  swift_retain();
  v7 = objc_msgSendSuper2(&v17, "initWithRequest:", a1);
  v8 = objc_allocWithZone((Class)AMSUIBubbleTipAppearance);
  v9 = v7;
  v10 = objc_msgSend(v8, "init", v17.receiver, v17.super_class);
  objc_msgSend(v9, "setPreferredAppearance:", v10);

  v11 = objc_msgSend(v9, "preferredAppearance");
  if (v11)
  {
    v12 = v11;
    v13 = objc_msgSend((id)objc_opt_self(UIColor), "secondaryLabelColor");
    objc_msgSend(v12, "setImageTintColor:", v13);

  }
  objc_msgSend(v9, "setModalPresentationStyle:", 7);
  v14 = objc_msgSend(v9, "popoverPresentationController");
  if (v14)
  {
    v15 = v14;
    objc_msgSend(v14, "setPermittedArrowDirections:", 1);

    swift_release(a3);
  }
  else
  {

    swift_release(a3);
  }

  sub_57698(a2);
  return v9;
}

uint64_t sub_105AF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B9BB0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for PopoverTipViewController(uint64_t a1)
{
  uint64_t result;

  result = qword_3B9C20;
  if (!qword_3B9C20)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PopoverTipViewController);
  return result;
}

void sub_105BD0()
{
  void *v0;
  objc_super v1;

  v1.receiver = v0;
  v1.super_class = (Class)type metadata accessor for PopoverTipViewController(0);
  objc_msgSendSuper2(&v1, "viewDidLoad");
  objc_msgSend(v0, "setDelegate:", v0);
  sub_105C88();
}

void sub_105C88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD v14[2];
  char v15;

  v1 = type metadata accessor for MetricsAdHocImpression(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B9BB0);
  __chkstk_darwin(v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for TipType(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit24PopoverTipViewController_metricsController);
  if (v12)
  {
    sub_105AF4(v0 + OBJC_IVAR____TtC8ShelfKit24PopoverTipViewController_tipType, (uint64_t)v7);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    {
      sub_57698((uint64_t)v7);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v7, v8);
      v13 = swift_retain();
      TipType.adHocImpression.getter(v13);
      memset(v14, 0, sizeof(v14));
      v15 = 1;
      MetricsController.addAdHocImpression(_:in:at:)((uint64_t)v4, (uint64_t)v14, 0);
      swift_release(v12);
      (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    }
  }
}

uint64_t sub_105E30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B9BB0);
  __chkstk_darwin(v1);
  v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v6 = (char *)&v11 - v5;
  sub_105AF4(v0 + OBJC_IVAR____TtC8ShelfKit24PopoverTipViewController_tipType, (uint64_t)&v11 - v5);
  v7 = type metadata accessor for TipType(0);
  v8 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
    goto LABEL_5;
  sub_105AF4((uint64_t)v6, (uint64_t)v3);
  if ((*(unsigned int (**)(char *, uint64_t))(v8 + 88))(v3, v7) != enum case for TipType.follow(_:))
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v3, v7);
LABEL_5:
    v9 = 0;
    goto LABEL_6;
  }
  v9 = 1;
LABEL_6:
  sub_57698((uint64_t)v6);
  return v9;
}

id PopoverTipViewController.__allocating_init(request:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_msgSend(objc_allocWithZone(v1), "initWithRequest:", a1);

  return v3;
}

void PopoverTipViewController.init(request:)()
{
  _swift_stdlib_reportUnimplementedInitializer("ShelfKit.PopoverTipViewController", 33, "init(request:)", 14, 0);
  __break(1u);
}

id PopoverTipViewController.__allocating_init(request:bag:account:)(void *a1, uint64_t a2, void *a3)
{
  objc_class *v3;
  id v7;

  v7 = objc_msgSend(objc_allocWithZone(v3), "initWithRequest:bag:account:", a1, a2, a3);

  swift_unknownObjectRelease(a2);
  return v7;
}

void PopoverTipViewController.init(request:bag:account:)()
{
  _swift_stdlib_reportUnimplementedInitializer("ShelfKit.PopoverTipViewController", 33, "init(request:bag:account:)", 26, 0);
  __break(1u);
}

id MetricsPageViewController.__allocating_init(nibName:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  objc_class *v3;
  objc_class *v4;
  NSString v7;
  id v8;

  v4 = v3;
  if (a2)
  {
    v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v7 = 0;
  }
  v8 = objc_msgSend(objc_allocWithZone(v4), "initWithNibName:bundle:", v7, a3);

  return v8;
}

void PopoverTipViewController.init(nibName:bundle:)()
{
  _swift_stdlib_reportUnimplementedInitializer("ShelfKit.PopoverTipViewController", 33, "init(nibName:bundle:)", 21, 0);
  __break(1u);
}

id PopoverTipViewController.__deallocating_deinit()
{
  return sub_106194(0, (uint64_t (*)(void))type metadata accessor for PopoverTipViewController);
}

id sub_106194(uint64_t a1, uint64_t (*a2)(void))
{
  void *v2;
  objc_super v4;

  v4.receiver = v2;
  v4.super_class = (Class)a2();
  return objc_msgSendSuper2(&v4, "dealloc");
}

uint64_t AMSDialogRequest.tipType.getter@<X0>(uint64_t a1@<X8>)
{
  void *v1;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v3 = objc_msgSend(v1, "identifier");
  if (v3)
  {
    v4 = v3;
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    v7 = v6;

    return TipType.init(rawValue:)(v5, v7);
  }
  else
  {
    v9 = type metadata accessor for TipType();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(a1, 1, 1, v9);
  }
}

uint64_t type metadata accessor for TipViewControllerProvider()
{
  return objc_opt_self(_TtC8ShelfKit25TipViewControllerProvider);
}

void _s8ShelfKit24PopoverTipViewControllerC07messageeF0_19didSelectActionWithySo012AMSUIMessageeF0_So06UIViewF0CXc_So15AMSDialogResultCtF_0(void *a1, id a2)
{
  id v4;
  NSString v5;
  uint64_t v6;
  uint64_t v7;
  id v8;

  v4 = objc_msgSend(a2, "originalRequest");
  v5 = objc_msgSend(a2, "selectedActionIdentifier");
  if (!v5)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v7 = v6;
    v5 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v7);
  }
  v8 = objc_msgSend(v4, "locateActionWithIdentifier:", v5);

  if (v8)
  {
    if (objc_msgSend(v8, "style") == (char *)&dword_0 + 2)
      objc_msgSend(a1, "dismissViewControllerAnimated:completion:", 1, 0);

  }
}

uint64_t method lookup function for TipViewControllerProvider(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for TipViewControllerProvider);
}

uint64_t dispatch thunk of TipViewControllerProvider.popoverTipController(request:tipType:metricsController:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))&stru_68.segname[(swift_isaMask & *v0) - 8])();
}

uint64_t dispatch thunk of TipViewControllerProvider.adaptivePresentationStyle(for:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))&stru_68.segname[swift_isaMask & *v0])();
}

uint64_t sub_106450()
{
  return type metadata accessor for PopoverTipViewController(0);
}

void sub_106458(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  sub_1064FC(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = &unk_2F5A30;
    swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 80);
  }
}

uint64_t method lookup function for PopoverTipViewController(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for PopoverTipViewController);
}

uint64_t dispatch thunk of MetricsPageViewController.__allocating_init(asPartOf:wrapping:with:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of PopoverTipViewController.isFollowTipController()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))&stru_68.segname[(swift_isaMask & *v0) - 8])();
}

void sub_1064FC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_3B9C30)
  {
    v2 = type metadata accessor for TipType(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_3B9C30);
  }
}

uint64_t sub_106550(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  Swift::Int v23;
  char *v24;
  uint64_t result;
  char *v26;
  char *v27;
  void (*v28)(_BYTE *, _QWORD);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  void (*v39)(char *, char *);
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  _BYTE v44[32];
  uint64_t v45;

  v33 = a5;
  v34 = a8;
  v39 = a1;
  v40 = a2;
  v32 = *(_QWORD *)(a5 - 8);
  __chkstk_darwin(a1);
  v41 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(v12 + 8), v13, &protocol requirements base descriptor for Sequence, &associated type descriptor for Sequence.Element);
  v15 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v16 = __chkstk_darwin(AssociatedTypeWitness);
  v37 = (char *)&v30 - v17;
  v42 = a4;
  __chkstk_darwin(v16);
  v36 = (char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = swift_getAssociatedTypeWitness(0, a6, a3, &protocol requirements base descriptor for Collection, &associated type descriptor for Collection.Index);
  v35 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v21 = (char *)&v30 - v20;
  v22 = dispatch thunk of Collection.count.getter(a3, a6);
  if (!v22)
    return static Array._allocateUninitialized(_:)(0, v42);
  v23 = v22;
  v31 = v19;
  v24 = v42;
  v45 = ContiguousArray.init()(v42);
  v38 = type metadata accessor for ContiguousArray(0, v24);
  ContiguousArray.reserveCapacity(_:)(v23);
  v42 = v21;
  result = dispatch thunk of Collection.startIndex.getter(a3);
  if (v23 < 0)
  {
    __break(1u);
  }
  else
  {
    v27 = v36;
    v26 = v37;
    while (1)
    {
      v28 = (void (*)(_BYTE *, _QWORD))dispatch thunk of Collection.subscript.read(v44, v42, a3, a6);
      (*(void (**)(char *))(v15 + 16))(v26);
      v28(v44, 0);
      v29 = v43;
      v39(v26, v41);
      if (v29)
        break;
      v43 = 0;
      (*(void (**)(char *, uint64_t))(v15 + 8))(v26, AssociatedTypeWitness);
      ContiguousArray.append(_:)(v27, v38);
      dispatch thunk of Collection.formIndex(after:)(v42, a3, a6);
      if (!--v23)
      {
        (*(void (**)(char *, uint64_t))(v35 + 8))(v42, v31);
        return v45;
      }
    }
    (*(void (**)(char *, uint64_t))(v15 + 8))(v26, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v42, v31);
    swift_release(v45);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v32 + 32))(v34, v41, v33);
  }
  return result;
}

uint64_t static FreezableContentPresenter.itemsByApplyingFrozenOrderingToUniquePodcastLists<A>(currentItems:newItems:episodeOrderingFrozen:propertyGetter:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t TupleTypeMetadata2;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t WitnessTable;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t KeyPath;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  _BYTE v28[16];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[2];
  uint64_t v34;

  v6 = a2;
  if ((a3 & 1) != 0)
  {
    v33[1] = a2;
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, &type metadata for String, a6, 0, 0);
    v12 = static Array._allocateUninitialized(_:)(0, TupleTypeMetadata2);
    v33[0] = Dictionary.init(dictionaryLiteral:)(v12, &type metadata for String, a6, &protocol witness table for String);
    v13 = __chkstk_darwin(v33[0]);
    v29 = a6;
    v30 = a4;
    v31 = a5;
    v14 = type metadata accessor for Array(0, a6, v13);
    v15 = type metadata accessor for Dictionary(0, &type metadata for String, a6, &protocol witness table for String);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A]);
    v17 = Sequence.reduce<A>(into:_:)(&v34, v33, sub_106CC4, v28, v14, v15, WitnessTable);
    v18 = v34;
    v34 = a1;
    __chkstk_darwin(v17);
    v29 = a6;
    v30 = a4;
    v31 = a5;
    v19 = swift_getWitnessTable(&protocol conformance descriptor for [A]);
    v34 = sub_106550((void (*)(char *, char *))sub_106CE0, (uint64_t)v28, v14, (char *)&type metadata for String, (uint64_t)&type metadata for Never, v19, (uint64_t)&protocol witness table for Never, v20);
    KeyPath = swift_getKeyPath(&unk_2F5A58);
    v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3BC430);
    v23 = sub_106D28();
    v24 = Sequence.uniqued<A>(by:)(KeyPath, v22, v23, &protocol witness table for String);
    swift_release(KeyPath);
    v25 = swift_bridgeObjectRelease();
    v34 = v24;
    v26 = __chkstk_darwin(v25);
    v31 = a6;
    v32 = v18;
    v6 = Sequence.compactMap<A>(_:)(sub_106D74, v26);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  return v6;
}

uint64_t sub_106A94(uint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v24[2];
  uint64_t v25;
  uint64_t v26;

  v9 = type metadata accessor for Optional(0, a5);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)v24 - v14;
  v16 = a3(a2);
  v18 = v17;
  swift_bridgeObjectRelease(v19);
  v24[1] = a1;
  v25 = v16;
  v20 = *a1;
  v26 = v18;
  swift_bridgeObjectRetain(v18);
  Dictionary.subscript.getter(&v25, v20, &type metadata for String, a5, &protocol witness table for String);
  swift_bridgeObjectRelease(v18);
  v21 = *(_QWORD *)(a5 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v15, 1, a5) == 1)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v9);
    (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v13, a2, a5);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v13, 0, 1, a5);
    v25 = v16;
    v26 = v18;
    v22 = type metadata accessor for Dictionary(0, &type metadata for String, a5, &protocol witness table for String);
    return Dictionary.subscript.setter(v13, &v25, v22);
  }
  else
  {
    swift_bridgeObjectRelease(v18);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v15, v9);
  }
}

uint64_t sub_106C4C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD v7[2];

  v5 = a1[1];
  v7[0] = *a1;
  v7[1] = v5;
  swift_bridgeObjectRetain(v5);
  Dictionary.subscript.getter(v7, a2, &type metadata for String, a3, &protocol witness table for String);
  return swift_bridgeObjectRelease(v5);
}

uint64_t sub_106CC4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_106A94(a1, a2, *(uint64_t (**)(uint64_t))(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 16));
}

uint64_t sub_106CE0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = (*(uint64_t (**)(void))(v1 + 24))();
  v5 = v4;
  result = swift_bridgeObjectRelease(v6);
  *a1 = v3;
  a1[1] = v5;
  return result;
}

unint64_t sub_106D28()
{
  unint64_t result;

  result = qword_3B3750;
  if (!qword_3B3750)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_3BC430);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A]);
    atomic_store(result, (unint64_t *)&qword_3B3750);
  }
  return result;
}

uint64_t sub_106D74(_QWORD *a1)
{
  uint64_t v1;

  return sub_106C4C(a1, *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 16));
}

ValueMetadata *type metadata accessor for FreezableContentPresenter()
{
  return &type metadata for FreezableContentPresenter;
}

uint64_t LongDescriptionPresenter.__allocating_init(asPartOf:with:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v5;

  swift_allocObject(v2, 41, 7);
  v5 = sub_107638(a2);
  swift_release(a1);
  return v5;
}

uint64_t LongDescriptionPresenter.init(asPartOf:with:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_107638(a2);
  swift_release(a1);
  return v3;
}

uint64_t LongDescriptionPresenter.interactionContextPage.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = type metadata accessor for InteractionContext.Page(0);
  return swift_storeEnumTagMultiPayload(a1, v2, 19);
}

Swift::Void __swiftcall LongDescriptionPresenter.viewDidLoad()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  Swift::String v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  Swift::String v66;
  Swift::String v67;
  Swift::String v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  Swift::String v93;
  __int128 v94;
  uint64_t v95;
  Swift::String v96;

  v1 = type metadata accessor for PageContent(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v71 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = (int *)type metadata accessor for ModernShelf(0);
  v5 = *((_QWORD *)v4 - 1);
  __chkstk_darwin(v4);
  v7 = (uint64_t *)((char *)&v71 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v8);
  v89 = (char *)&v71 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
  __chkstk_darwin(v10);
  v88 = (char *)&v71 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
  __chkstk_darwin(v12);
  v83 = (char *)&v71 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3740);
  __chkstk_darwin(v14);
  v82 = (char *)&v71 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3BF7E0);
  __chkstk_darwin(v16);
  v18 = (char *)&v71 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0C38);
  __chkstk_darwin(v19);
  v92 = (uint64_t)&v71 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for PageMetrics(0);
  v86 = *(_QWORD *)(v21 - 8);
  v87 = v21;
  __chkstk_darwin(v21);
  v23 = (char *)&v71 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for PageID(0);
  v84 = *(_QWORD *)(v24 - 8);
  v85 = v24;
  __chkstk_darwin(v24);
  v26 = (char *)&v71 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for ModernPage(0);
  __chkstk_darwin(v27);
  v30 = (char *)&v71 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = v0;
  v31 = *(_QWORD **)(v0 + 16);
  v32 = v31[6];
  if (v32)
  {
    v77 = v28;
    v79 = v30;
    v80 = v1;
    v81 = v3;
    v91 = v32;
    swift_retain();
    v76 = v26;
    v33 = PageID.init(with:)(0x63736544676E6F4CLL, 0xEF6E6F6974706972);
    v78 = v23;
    static PageMetrics.notInstrumented.getter(v33);
    v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0A48);
    v35 = *(_QWORD *)(v5 + 72);
    v36 = *(unsigned __int8 *)(v5 + 80);
    v37 = (v36 + 32) & ~v36;
    v38 = swift_allocObject(v34, v37 + v35, v36 | 7);
    v71 = xmmword_2EA0D0;
    *(_OWORD *)(v38 + 16) = xmmword_2EA0D0;
    v75 = v38;
    v74 = v38 + v37;
    ShelfIDBuilder.init(named:)(0x7972616D6D7573, 0xE700000000000000);
    v39 = ShelfIDBuilder.build()();
    countAndFlagsBits = v39._countAndFlagsBits;
    object = v39._object;
    swift_bridgeObjectRelease();
    v41 = v31[2];
    v40 = v31[3];
    v42 = v31[4];
    v43 = v31[5];
    v44 = type metadata accessor for ActionMenu(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v18, 1, 1, v44);
    v45 = type metadata accessor for Header.PrimaryAction(0);
    v46 = (uint64_t)v82;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v82, 1, 1, v45);
    v47 = type metadata accessor for ArtworkModel(0);
    v48 = (uint64_t)v83;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 56))(v83, 1, 1, v47);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    Header.init(title:subtitle:subtitleSymbolName:displaySubtitleAsEyebrow:hasColoredBackground:titleContextMenu:primaryAction:secondaryButtons:artwork:)(v41, v40, v42, v43, 0, 0, 0, 0, v92, (uint64_t)v18, v46, (uint64_t)_swiftEmptyArrayStorage, v48);
    v49 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8750);
    v50 = swift_allocObject(v49, 72, 7);
    *(_OWORD *)(v50 + 16) = v71;
    *(_QWORD *)(v50 + 56) = type metadata accessor for Paragraph(0);
    *(_QWORD *)(v50 + 64) = sub_726D8(&qword_3B9D60, 255, (void (*)(uint64_t))type metadata accessor for Paragraph, (uint64_t)&protocol conformance descriptor for Paragraph);
    *(_QWORD *)(v50 + 32) = v91;
    v51 = type metadata accessor for URL(0);
    v52 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 56);
    v53 = (uint64_t)v88;
    v52(v88, 1, 1, v51);
    v54 = type metadata accessor for ImpressionMetrics(0);
    v93 = (Swift::String)0;
    v94 = 0u;
    v95 = 0;
    v55 = (uint64_t)v89;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 56))(v89, 1, 1, v54);
    v56 = v4[8];
    *((_BYTE *)v7 + v56) = 3;
    v57 = (uint64_t)v7 + v4[9];
    v52((char *)v57, 1, 1, v51);
    v58 = (uint64_t)object;
    *v7 = countAndFlagsBits;
    v7[1] = v58;
    sub_15BD4(v92, (uint64_t)v7 + v4[5], &qword_3B0C38);
    v59 = (char *)v7 + v4[6];
    *(_WORD *)v59 = 19;
    *((_WORD *)v59 + 3) = 256;
    *(_DWORD *)(v59 + 2) = 0;
    *((_QWORD *)v59 + 1) = 1;
    *(uint64_t *)((char *)v7 + v4[7]) = v50;
    swift_retain();
    sub_15B8C(v53, v57);
    *((_BYTE *)v7 + v4[10]) = 1;
    *((_BYTE *)v7 + v4[11]) = 0;
    v60 = (uint64_t)v7 + v4[12];
    if (*((_QWORD *)&v94 + 1))
    {
      sub_F4D8((__int128 *)&v93._countAndFlagsBits, v60);
    }
    else
    {
      v61 = (unint64_t)v94;
      *(Swift::String *)v60 = v93;
      *(_OWORD *)(v60 + 16) = v61;
      *(_QWORD *)(v60 + 32) = v95;
    }
    v62 = v80;
    sub_15BD4(v55, (uint64_t)v7 + v4[13], (uint64_t *)&unk_3B8790);
    *((_BYTE *)v7 + v56) = 3;
    sub_15C18((uint64_t)v7, v74);
    v63 = (uint64_t)v79;
    (*(void (**)(char *, char *, uint64_t))(v84 + 32))(v79, v76, v85);
    v64 = v77;
    (*(void (**)(uint64_t, char *, uint64_t))(v86 + 32))(v63 + *(int *)(v77 + 20), v78, v87);
    *(_QWORD *)(v63 + *(int *)(v64 + 24)) = v75;
    v65 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v96._object = (void *)0xE000000000000000;
    v66._countAndFlagsBits = 0x49545F54554F4241;
    v66._object = (void *)0xEB00000000454C54;
    v67._countAndFlagsBits = 0;
    v67._object = (void *)0xE000000000000000;
    v96._countAndFlagsBits = 0;
    v68 = NSLocalizedString(_:tableName:bundle:value:comment:)(v66, (Swift::String_optional)0, (NSBundle)v65, v67, v96);

    v93 = v68;
    LODWORD(v94) = 0;
    BYTE4(v94) = 0;
    CurrentValueSubject.send(_:)();
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&qword_3B89B0);
    v69 = (uint64_t)v81;
    v70 = sub_107730(v63, (uint64_t)v81);
    static PageRenderContentTypes.unspecified.getter(v70);
    swift_storeEnumTagMultiPayload(v69, v62, 3);
    CurrentValueSubject.send(_:)();
    swift_release(v91);
    sub_145D8(v69, type metadata accessor for PageContent);
    sub_145D8(v63, type metadata accessor for ModernPage);
  }
}

