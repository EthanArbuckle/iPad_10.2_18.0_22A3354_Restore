_OWORD *sub_27E6D4(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  __int128 v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;

  v6 = type metadata accessor for HeroBackgroundVariant(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v6);
  if (EnumCaseMultiPayload == 2)
  {
    v18 = (int *)type metadata accessor for ArtworkModel(0);
    v19 = *((_QWORD *)v18 - 1);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v19 + 48))(a2, 1, v18))
    {
      v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      v32 = a2[1];
      *a1 = *a2;
      a1[1] = v32;
      *((_BYTE *)a1 + 32) = *((_BYTE *)a2 + 32);
      *(_OWORD *)((char *)a1 + 40) = *(_OWORD *)((char *)a2 + 40);
      *((_QWORD *)a1 + 7) = *((_QWORD *)a2 + 7);
      *((_BYTE *)a1 + 64) = *((_BYTE *)a2 + 64);
      *(_OWORD *)((char *)a1 + 113) = *(_OWORD *)((char *)a2 + 113);
      *(_OWORD *)((char *)a1 + 104) = *(_OWORD *)((char *)a2 + 104);
      *(_OWORD *)((char *)a1 + 88) = *(_OWORD *)((char *)a2 + 88);
      *(_OWORD *)((char *)a1 + 72) = *(_OWORD *)((char *)a2 + 72);
      *((_BYTE *)a1 + 129) = *((_BYTE *)a2 + 129);
      v33 = v18[11];
      v34 = (char *)a1 + v33;
      v35 = (char *)a2 + v33;
      v36 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 32))(v34, v35, v36);
      *(_OWORD *)((char *)a1 + v18[12]) = *(_OWORD *)((char *)a2 + v18[12]);
      *((_BYTE *)a1 + v18[13]) = *((_BYTE *)a2 + v18[13]);
      *((_BYTE *)a1 + v18[14]) = *((_BYTE *)a2 + v18[14]);
      *((_BYTE *)a1 + v18[15]) = *((_BYTE *)a2 + v18[15]);
      *(_OWORD *)((char *)a1 + v18[16]) = *(_OWORD *)((char *)a2 + v18[16]);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v19 + 56))(a1, 0, 1, v18);
    }
    v37 = __swift_instantiateConcreteTypeFromMangledName(qword_3C4878);
    *(_QWORD *)((char *)a1 + *(int *)(v37 + 48)) = *(_QWORD *)((char *)a2 + *(int *)(v37 + 48));
    v15 = a1;
    v16 = v6;
    v17 = 2;
  }
  else
  {
    v8 = a2[1];
    *a1 = *a2;
    a1[1] = v8;
    *((_BYTE *)a1 + 32) = *((_BYTE *)a2 + 32);
    *(_OWORD *)((char *)a1 + 40) = *(_OWORD *)((char *)a2 + 40);
    *((_QWORD *)a1 + 7) = *((_QWORD *)a2 + 7);
    *((_BYTE *)a1 + 64) = *((_BYTE *)a2 + 64);
    *(_OWORD *)((char *)a1 + 113) = *(_OWORD *)((char *)a2 + 113);
    *(_OWORD *)((char *)a1 + 104) = *(_OWORD *)((char *)a2 + 104);
    *(_OWORD *)((char *)a1 + 88) = *(_OWORD *)((char *)a2 + 88);
    *(_OWORD *)((char *)a1 + 72) = *(_OWORD *)((char *)a2 + 72);
    *((_BYTE *)a1 + 129) = *((_BYTE *)a2 + 129);
    if (EnumCaseMultiPayload == 1)
    {
      v9 = (int *)type metadata accessor for ArtworkModel(0);
      v10 = v9[11];
      v11 = (char *)a1 + v10;
      v12 = (char *)a2 + v10;
      v13 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
      *(_OWORD *)((char *)a1 + v9[12]) = *(_OWORD *)((char *)a2 + v9[12]);
      *((_BYTE *)a1 + v9[13]) = *((_BYTE *)a2 + v9[13]);
      *((_BYTE *)a1 + v9[14]) = *((_BYTE *)a2 + v9[14]);
      *((_BYTE *)a1 + v9[15]) = *((_BYTE *)a2 + v9[15]);
      *(_OWORD *)((char *)a1 + v9[16]) = *(_OWORD *)((char *)a2 + v9[16]);
      v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C4870);
      *(_QWORD *)((char *)a1 + *(int *)(v14 + 48)) = *(_QWORD *)((char *)a2 + *(int *)(v14 + 48));
      v15 = a1;
      v16 = v6;
      v17 = 1;
    }
    else
    {
      v21 = (int *)type metadata accessor for ArtworkModel(0);
      v22 = v21[11];
      v23 = (char *)a1 + v22;
      v24 = (char *)a2 + v22;
      v25 = type metadata accessor for ArtworkCrop(0);
      v26 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 32);
      v26(v23, v24, v25);
      *(_OWORD *)((char *)a1 + v21[12]) = *(_OWORD *)((char *)a2 + v21[12]);
      *((_BYTE *)a1 + v21[13]) = *((_BYTE *)a2 + v21[13]);
      *((_BYTE *)a1 + v21[14]) = *((_BYTE *)a2 + v21[14]);
      *((_BYTE *)a1 + v21[15]) = *((_BYTE *)a2 + v21[15]);
      *(_OWORD *)((char *)a1 + v21[16]) = *(_OWORD *)((char *)a2 + v21[16]);
      v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C4868);
      v28 = *(int *)(v27 + 48);
      v29 = (char *)a1 + v28;
      v30 = (char *)a2 + v28;
      v31 = *(_OWORD *)((char *)a2 + v28 + 16);
      *(_OWORD *)v29 = *(_OWORD *)((char *)a2 + v28);
      *((_OWORD *)v29 + 1) = v31;
      v29[32] = *((_BYTE *)a2 + v28 + 32);
      *(_OWORD *)(v29 + 40) = *(_OWORD *)((char *)a2 + v28 + 40);
      *((_QWORD *)v29 + 7) = *(_QWORD *)((char *)a2 + v28 + 56);
      v29[64] = *((_BYTE *)a2 + v28 + 64);
      *(_OWORD *)(v29 + 113) = *(_OWORD *)((char *)a2 + v28 + 113);
      *(_OWORD *)(v29 + 104) = *(_OWORD *)((char *)a2 + v28 + 104);
      *(_OWORD *)(v29 + 88) = *(_OWORD *)((char *)a2 + v28 + 88);
      *(_OWORD *)(v29 + 72) = *(_OWORD *)((char *)a2 + v28 + 72);
      v29[129] = *((_BYTE *)a2 + v28 + 129);
      v26((char *)a1 + v28 + v21[11], (char *)a2 + v28 + v21[11], v25);
      *(_OWORD *)&v29[v21[12]] = *(_OWORD *)&v30[v21[12]];
      v29[v21[13]] = v30[v21[13]];
      v29[v21[14]] = v30[v21[14]];
      v29[v21[15]] = v30[v21[15]];
      *(_OWORD *)&v29[v21[16]] = *(_OWORD *)&v30[v21[16]];
      *(_QWORD *)((char *)a1 + *(int *)(v27 + 64)) = *(_QWORD *)((char *)a2 + *(int *)(v27 + 64));
      v15 = a1;
      v16 = v6;
      v17 = 0;
    }
  }
  swift_storeEnumTagMultiPayload(v15, v16, v17);
  v38 = *(int *)(a3 + 20);
  v39 = (char *)a1 + v38;
  v40 = (char *)a2 + v38;
  v41 = type metadata accessor for NamedCoordinateSpace(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 32))(v39, v40, v41);
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

_OWORD *sub_27EB4C(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  __int128 v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;

  if (a1 != a2)
  {
    sub_145D8((uint64_t)a1, type metadata accessor for HeroBackgroundVariant);
    v6 = type metadata accessor for HeroBackgroundVariant(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v6);
    if (EnumCaseMultiPayload == 2)
    {
      v18 = (int *)type metadata accessor for ArtworkModel(0);
      v19 = *((_QWORD *)v18 - 1);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v19 + 48))(a2, 1, v18))
      {
        v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      }
      else
      {
        v32 = a2[1];
        *a1 = *a2;
        a1[1] = v32;
        *((_BYTE *)a1 + 32) = *((_BYTE *)a2 + 32);
        *(_OWORD *)((char *)a1 + 40) = *(_OWORD *)((char *)a2 + 40);
        *((_QWORD *)a1 + 7) = *((_QWORD *)a2 + 7);
        *((_BYTE *)a1 + 64) = *((_BYTE *)a2 + 64);
        *(_OWORD *)((char *)a1 + 113) = *(_OWORD *)((char *)a2 + 113);
        *(_OWORD *)((char *)a1 + 104) = *(_OWORD *)((char *)a2 + 104);
        *(_OWORD *)((char *)a1 + 88) = *(_OWORD *)((char *)a2 + 88);
        *(_OWORD *)((char *)a1 + 72) = *(_OWORD *)((char *)a2 + 72);
        *((_BYTE *)a1 + 129) = *((_BYTE *)a2 + 129);
        v33 = v18[11];
        v34 = (char *)a1 + v33;
        v35 = (char *)a2 + v33;
        v36 = type metadata accessor for ArtworkCrop(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 32))(v34, v35, v36);
        *(_OWORD *)((char *)a1 + v18[12]) = *(_OWORD *)((char *)a2 + v18[12]);
        *((_BYTE *)a1 + v18[13]) = *((_BYTE *)a2 + v18[13]);
        *((_BYTE *)a1 + v18[14]) = *((_BYTE *)a2 + v18[14]);
        *((_BYTE *)a1 + v18[15]) = *((_BYTE *)a2 + v18[15]);
        *(_OWORD *)((char *)a1 + v18[16]) = *(_OWORD *)((char *)a2 + v18[16]);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v19 + 56))(a1, 0, 1, v18);
      }
      v37 = __swift_instantiateConcreteTypeFromMangledName(qword_3C4878);
      *(_QWORD *)((char *)a1 + *(int *)(v37 + 48)) = *(_QWORD *)((char *)a2 + *(int *)(v37 + 48));
      v15 = a1;
      v16 = v6;
      v17 = 2;
    }
    else
    {
      v8 = a2[1];
      *a1 = *a2;
      a1[1] = v8;
      *((_BYTE *)a1 + 32) = *((_BYTE *)a2 + 32);
      *(_OWORD *)((char *)a1 + 40) = *(_OWORD *)((char *)a2 + 40);
      *((_QWORD *)a1 + 7) = *((_QWORD *)a2 + 7);
      *((_BYTE *)a1 + 64) = *((_BYTE *)a2 + 64);
      *(_OWORD *)((char *)a1 + 113) = *(_OWORD *)((char *)a2 + 113);
      *(_OWORD *)((char *)a1 + 104) = *(_OWORD *)((char *)a2 + 104);
      *(_OWORD *)((char *)a1 + 88) = *(_OWORD *)((char *)a2 + 88);
      *(_OWORD *)((char *)a1 + 72) = *(_OWORD *)((char *)a2 + 72);
      *((_BYTE *)a1 + 129) = *((_BYTE *)a2 + 129);
      if (EnumCaseMultiPayload == 1)
      {
        v9 = (int *)type metadata accessor for ArtworkModel(0);
        v10 = v9[11];
        v11 = (char *)a1 + v10;
        v12 = (char *)a2 + v10;
        v13 = type metadata accessor for ArtworkCrop(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
        *(_OWORD *)((char *)a1 + v9[12]) = *(_OWORD *)((char *)a2 + v9[12]);
        *((_BYTE *)a1 + v9[13]) = *((_BYTE *)a2 + v9[13]);
        *((_BYTE *)a1 + v9[14]) = *((_BYTE *)a2 + v9[14]);
        *((_BYTE *)a1 + v9[15]) = *((_BYTE *)a2 + v9[15]);
        *(_OWORD *)((char *)a1 + v9[16]) = *(_OWORD *)((char *)a2 + v9[16]);
        v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C4870);
        *(_QWORD *)((char *)a1 + *(int *)(v14 + 48)) = *(_QWORD *)((char *)a2 + *(int *)(v14 + 48));
        v15 = a1;
        v16 = v6;
        v17 = 1;
      }
      else
      {
        v21 = (int *)type metadata accessor for ArtworkModel(0);
        v22 = v21[11];
        v23 = (char *)a1 + v22;
        v24 = (char *)a2 + v22;
        v25 = type metadata accessor for ArtworkCrop(0);
        v26 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 32);
        v26(v23, v24, v25);
        *(_OWORD *)((char *)a1 + v21[12]) = *(_OWORD *)((char *)a2 + v21[12]);
        *((_BYTE *)a1 + v21[13]) = *((_BYTE *)a2 + v21[13]);
        *((_BYTE *)a1 + v21[14]) = *((_BYTE *)a2 + v21[14]);
        *((_BYTE *)a1 + v21[15]) = *((_BYTE *)a2 + v21[15]);
        *(_OWORD *)((char *)a1 + v21[16]) = *(_OWORD *)((char *)a2 + v21[16]);
        v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C4868);
        v28 = *(int *)(v27 + 48);
        v29 = (char *)a1 + v28;
        v30 = (char *)a2 + v28;
        v31 = *(_OWORD *)((char *)a2 + v28 + 16);
        *(_OWORD *)v29 = *(_OWORD *)((char *)a2 + v28);
        *((_OWORD *)v29 + 1) = v31;
        v29[32] = *((_BYTE *)a2 + v28 + 32);
        *(_OWORD *)(v29 + 40) = *(_OWORD *)((char *)a2 + v28 + 40);
        *((_QWORD *)v29 + 7) = *(_QWORD *)((char *)a2 + v28 + 56);
        v29[64] = *((_BYTE *)a2 + v28 + 64);
        *(_OWORD *)(v29 + 113) = *(_OWORD *)((char *)a2 + v28 + 113);
        *(_OWORD *)(v29 + 104) = *(_OWORD *)((char *)a2 + v28 + 104);
        *(_OWORD *)(v29 + 88) = *(_OWORD *)((char *)a2 + v28 + 88);
        *(_OWORD *)(v29 + 72) = *(_OWORD *)((char *)a2 + v28 + 72);
        v29[129] = *((_BYTE *)a2 + v28 + 129);
        v26((char *)a1 + v28 + v21[11], (char *)a2 + v28 + v21[11], v25);
        *(_OWORD *)&v29[v21[12]] = *(_OWORD *)&v30[v21[12]];
        v29[v21[13]] = v30[v21[13]];
        v29[v21[14]] = v30[v21[14]];
        v29[v21[15]] = v30[v21[15]];
        *(_OWORD *)&v29[v21[16]] = *(_OWORD *)&v30[v21[16]];
        *(_QWORD *)((char *)a1 + *(int *)(v27 + 64)) = *(_QWORD *)((char *)a2 + *(int *)(v27 + 64));
        v15 = a1;
        v16 = v6;
        v17 = 0;
      }
    }
    swift_storeEnumTagMultiPayload(v15, v16, v17);
  }
  v38 = *(int *)(a3 + 20);
  v39 = (char *)a1 + v38;
  v40 = (char *)a2 + v38;
  v41 = type metadata accessor for NamedCoordinateSpace(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 40))(v39, v40, v41);
  v42 = *(int *)(a3 + 24);
  v43 = (_QWORD *)((char *)a1 + v42);
  v44 = (_QWORD *)((char *)a2 + v42);
  *v43 = *v44;
  v45 = v43[1];
  v43[1] = v44[1];
  swift_release(v45);
  return a1;
}

uint64_t sub_27EFF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_27F000);
}

uint64_t sub_27F000(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;
  int v15;

  v6 = type metadata accessor for HeroBackgroundVariant(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = type metadata accessor for NamedCoordinateSpace(0);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  v15 = v14 - 1;
  if (v15 < 0)
    v15 = -1;
  return (v15 + 1);
}

uint64_t sub_27F0B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_27F0C4);
}

uint64_t sub_27F0C4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = type metadata accessor for HeroBackgroundVariant(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = type metadata accessor for NamedCoordinateSpace(0);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = a2;
  return result;
}

uint64_t type metadata accessor for HeroChinBackground(uint64_t a1)
{
  return sub_1F9D4(a1, qword_3C5130, (uint64_t)&nominal type descriptor for HeroChinBackground);
}

uint64_t sub_27F180(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[3];

  result = type metadata accessor for HeroBackgroundVariant(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for NamedCoordinateSpace(319);
    if (v4 <= 0x3F)
    {
      v5[1] = *(_QWORD *)(result - 8) + 64;
      v5[2] = &unk_3034D8;
      swift_initStructMetadata(a1, 256, 3, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t sub_27F20C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_345064, 1);
}

void sub_27F21C()
{
  qword_3C4DD8 = 0;
}

uint64_t sub_27F228@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  double *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t (*v18)(_QWORD);
  int EnumCaseMultiPayload;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (**v32)(double *@<X8>);
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v40[2];
  uint64_t v41;
  uint64_t v42;

  v2 = v1;
  v42 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C5288);
  __chkstk_darwin(v42);
  v5 = (char *)v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for HeroChinBackground(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6);
  v9 = (char *)v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C5290);
  __chkstk_darwin(v10);
  v12 = (double *)((char *)v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v41 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C5298);
  __chkstk_darwin(v41);
  v14 = (char *)v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for HeroBackgroundVariant(0);
  __chkstk_darwin(v15);
  v17 = (char *)v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_14510(v2, (uint64_t)v17, v18);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v17, v15);
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload != 1)
    {
      v37 = __swift_instantiateConcreteTypeFromMangledName(qword_3C4878);
      swift_release(*(_QWORD *)&v17[*(int *)(v37 + 48)]);
      swift_storeEnumTagMultiPayload(v5, v42, 1);
      v38 = sub_28139C();
      _ConditionalContent<>.init(storage:)(v5, v41, &type metadata for EmptyView, v38, &protocol witness table for EmptyView);
      v36 = &qword_3BEB70;
      v35 = (uint64_t)v17;
      return sub_1459C(v35, v36);
    }
    v20 = *(_QWORD *)&v17[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3C4870) + 48)];
  }
  else
  {
    v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C4868);
    v20 = *(_QWORD *)&v17[*(int *)(v21 + 64)];
    sub_145D8((uint64_t)&v17[*(int *)(v21 + 48)], (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
  }
  v40[0] = (uint64_t)v5;
  v40[1] = a1;
  sub_145D8((uint64_t)v17, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
  if (qword_3B0298 != -1)
    swift_once(&qword_3B0298, sub_27F734);
  v22 = -*(double *)&qword_3C4DF8;
  *(_QWORD *)v12 = static HorizontalAlignment.center.getter();
  v12[1] = v22;
  *((_BYTE *)v12 + 16) = 0;
  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C52C0);
  sub_27F744(v20, v2, (uint64_t)v12 + *(int *)(v23 + 44));
  sub_14510(v2, (uint64_t)v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for HeroChinBackground);
  v24 = *(unsigned __int8 *)(v7 + 80);
  v25 = (v24 + 16) & ~v24;
  v26 = v25 + v8;
  v27 = v24 | 7;
  v28 = v20;
  v29 = swift_allocObject(&unk_38D1F8, v26, v24 | 7);
  sub_3C56C((uint64_t)v9, v29 + v25, type metadata accessor for HeroChinBackground);
  sub_14510(v2, (uint64_t)v9, type metadata accessor for HeroChinBackground);
  v30 = swift_allocObject(&unk_38D220, v26, v27);
  sub_3C56C((uint64_t)v9, v30 + v25, type metadata accessor for HeroChinBackground);
  sub_267BC((uint64_t)v12, (uint64_t)v14, &qword_3C5290);
  v31 = v41;
  v32 = (void (**)(double *@<X8>))&v14[*(int *)(v41 + 36)];
  *v32 = sub_28143C;
  v32[1] = (void (*)(double *@<X8>))v29;
  v32[2] = (void (*)(double *@<X8>))sub_2818F0;
  v32[3] = (void (*)(double *@<X8>))v30;
  sub_1459C((uint64_t)v12, &qword_3C5290);
  swift_release(v28);
  v33 = v40[0];
  sub_267BC((uint64_t)v14, v40[0], &qword_3C5298);
  swift_storeEnumTagMultiPayload(v33, v42, 0);
  v34 = sub_28139C();
  _ConditionalContent<>.init(storage:)(v33, v31, &type metadata for EmptyView, v34, &protocol witness table for EmptyView);
  v35 = (uint64_t)v14;
  v36 = &qword_3C5298;
  return sub_1459C(v35, v36);
}

uint64_t sub_27F61C()
{
  uint64_t v0;
  uint64_t v1;
  __n128 v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v0 = type metadata accessor for RoundedCornerStyle(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UnevenRoundedRectangle(0, v2);
  __swift_allocate_value_buffer(v5, qword_3C4DE0);
  v6 = __swift_project_value_buffer(v5, (uint64_t)qword_3C4DE0);
  if (qword_3B0210 != -1)
    swift_once(&qword_3B0210, sub_268754);
  v7 = *(double *)&qword_3F3FE8;
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v4, enum case for RoundedCornerStyle.continuous(_:), v0);
  *(double *)v6 = RectangleCornerRadii.init(topLeft:topRight:bottomRight:bottomLeft:)(0.0, 0.0, v7, v7);
  *(_QWORD *)(v6 + 8) = v8;
  *(_QWORD *)(v6 + 16) = v9;
  *(_QWORD *)(v6 + 24) = v10;
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v1 + 32))(v6 + *(int *)(v5 + 20), v4, v0);
}

void sub_27F734()
{
  qword_3C4DF8 = 0x3FF0000000000000;
}

uint64_t sub_27F744@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double *v15;
  double v16;
  double v17;
  _QWORD *v18;
  double v19;
  double v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  double v25;
  char v26;
  char v27;
  __n128 v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double v49[2];
  double v50;
  double v51;
  double v52;
  uint64_t v53;
  unsigned __int8 v54;
  uint64_t v55;
  uint64_t v56;

  v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C52C8);
  __chkstk_darwin(v48);
  v7 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v43 - v9;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C52D0);
  *(double *)&v12 = COERCE_DOUBLE(swift_allocObject(v11, 48, 7));
  *(_OWORD *)(v12 + 16) = xmmword_2EA080;
  *(_QWORD *)(v12 + 32) = Color.opacity(_:)(0.0);
  v47 = a1;
  v13 = Color.opacity(_:)(1.0);
  *(_QWORD *)(v12 + 40) = v13;
  v51 = *(double *)&v12;
  specialized Array._endMutation()(v13);
  v14 = AnyGradient.init(colors:locations:interpolations:)(*(_QWORD *)&v51, 0, &off_375E00);
  v15 = (double *)(a2 + *(int *)(type metadata accessor for HeroChinBackground(0) + 24));
  v16 = *v15;
  v17 = v15[1];
  v51 = *v15;
  v52 = v17;
  __swift_instantiateConcreteTypeFromMangledName(&qword_3B5450);
  v18 = State.wrappedValue.getter(v49);
  v19 = v49[0] * 0.16;
  if (qword_3B0298 != -1)
    v18 = (_QWORD *)swift_once(&qword_3B0298, sub_27F734);
  v20 = *(double *)&qword_3C4DF8;
  v21 = v19 + *(double *)&qword_3C4DF8;
  v22 = static Alignment.center.getter(v18);
  v24 = _FrameLayout.init(width:height:alignment:)(&v51, 0, 1, *(_QWORD *)&v21, 0, v22, v23);
  v25 = v51;
  v26 = LOBYTE(v52);
  v46 = v53;
  v45 = v54;
  v43 = v56;
  v44 = v55;
  v27 = static Edge.Set.top.getter(v24);
  v49[0] = v16;
  v49[1] = v17;
  State.wrappedValue.getter(&v50);
  v28.n128_f64[0] = EdgeInsets.init(_all:)(v20 + v50 * -0.12);
  v29 = v28.n128_u64[0];
  v31 = v30;
  v33 = v32;
  v35 = v34;
  if (qword_3B0290 != -1)
    swift_once(&qword_3B0290, sub_27F61C);
  v36 = type metadata accessor for UnevenRoundedRectangle(0, v28);
  v37 = __swift_project_value_buffer(v36, (uint64_t)qword_3C4DE0);
  v38 = Color.opacity(_:)(1.0);
  sub_14510(v37, (uint64_t)v10, (uint64_t (*)(_QWORD))&type metadata accessor for UnevenRoundedRectangle);
  v39 = v48;
  *(_QWORD *)&v10[*(int *)(v48 + 52)] = v38;
  *(_WORD *)&v10[*(int *)(v39 + 56)] = 256;
  sub_267BC((uint64_t)v10, (uint64_t)v7, &qword_3C52C8);
  *(_QWORD *)a3 = v14;
  *(_WORD *)(a3 + 8) = 256;
  *(double *)(a3 + 16) = v25;
  *(_BYTE *)(a3 + 24) = v26;
  *(_QWORD *)(a3 + 32) = v46;
  *(_BYTE *)(a3 + 40) = v45;
  v40 = v43;
  *(_QWORD *)(a3 + 48) = v44;
  *(_QWORD *)(a3 + 56) = v40;
  *(_BYTE *)(a3 + 64) = v27;
  *(_QWORD *)(a3 + 72) = v29;
  *(_QWORD *)(a3 + 80) = v31;
  *(_QWORD *)(a3 + 88) = v33;
  *(_QWORD *)(a3 + 96) = v35;
  *(_BYTE *)(a3 + 104) = 0;
  v41 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C52D8);
  sub_267BC((uint64_t)v7, a3 + *(int *)(v41 + 48), &qword_3C52C8);
  swift_retain();
  sub_1459C((uint64_t)v10, &qword_3C52C8);
  sub_1459C((uint64_t)v7, &qword_3C52C8);
  return swift_release(v14);
}

void sub_27FA94(uint64_t a1@<X1>, double *a2@<X8>)
{
  uint64_t v4;
  double Height;
  _QWORD v6[5];
  CGRect v7;
  char v8;

  v4 = type metadata accessor for HeroChinBackground(0);
  GeometryProxy.bounds(of:)(v6, a1 + *(int *)(v4 + 20));
  sub_15BD4((uint64_t)v6, (uint64_t)&v7, &qword_3B7710);
  Height = 0.0;
  if ((v8 & 1) == 0)
    Height = CGRectGetHeight(v7);
  *a2 = Height;
}

_QWORD *sub_27FB14(double *a1)
{
  double v1;
  uint64_t v2;
  _QWORD *result;
  double v4;
  double v5;

  v1 = *a1;
  type metadata accessor for HeroChinBackground(0);
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B5450);
  result = State.wrappedValue.getter(&v5);
  v4 = v5;
  if (v1 != v5)
  {
    v5 = v1;
    result = (_QWORD *)State.wrappedValue.setter(&v5, v2, v4);
    if (qword_3B0288 != -1)
      result = (_QWORD *)swift_once(&qword_3B0288, sub_27F21C);
    qword_3C4DD8 = *(_QWORD *)&v1;
  }
  return result;
}

uint64_t sub_27FBE4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_34503C, 1);
}

uint64_t sub_27FBF4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  int *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;

  v2 = v1;
  v4 = type metadata accessor for Artwork(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C5170);
  __chkstk_darwin(v7);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C5178);
  __chkstk_darwin(v10);
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_14510(v2, (uint64_t)v6, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
  v13 = type metadata accessor for ArtworkModel(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v6, 0, 1, v13);
  v14 = (int *)type metadata accessor for Artwork.Configuration(0);
  v15 = &v6[v14[7]];
  v16 = type metadata accessor for CropCode(0);
  v17 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 1, 1, v16);
  v18 = static Alignment.top.getter(v17);
  v19 = &v6[v14[5]];
  *(_QWORD *)v19 = 0;
  *((_QWORD *)v19 + 1) = 0;
  v19[16] = 2;
  v20 = (uint64_t *)&v6[v14[6]];
  *v20 = v18;
  v20[1] = v21;
  v6[v14[8]] = 1;
  v22 = &v6[*(int *)(v4 + 20)];
  *(_QWORD *)v22 = sub_2AA724;
  *((_QWORD *)v22 + 1) = 0;
  v22[16] = 0;
  sub_14510((uint64_t)v6, (uint64_t)v9, type metadata accessor for Artwork);
  v23 = &v9[*(int *)(v7 + 36)];
  *(_QWORD *)v23 = 0x3FF0000000000000;
  *((_WORD *)v23 + 4) = 0;
  v24 = sub_145D8((uint64_t)v6, type metadata accessor for Artwork);
  v25 = static Alignment.top.getter(v24);
  sub_278D54(0.0, 0, 0.0, 1, INFINITY, 0, 0.0, 0, (uint64_t)v12, 0.0, 1, INFINITY, 0, v25, v26, &qword_3C5170, &qword_3C5178);
  sub_1459C((uint64_t)v9, &qword_3C5170);
  if (qword_3B0218 != -1)
    swift_once(&qword_3B0218, sub_268764);
  v27 = type metadata accessor for RoundedRectangle(0);
  v28 = __swift_project_value_buffer(v27, (uint64_t)qword_3C45D8);
  v29 = a1 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3C5180) + 36);
  sub_14510(v28, v29, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v29 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3C4E00) + 36)) = 256;
  return sub_15BD4((uint64_t)v12, a1, &qword_3C5178);
}

uint64_t sub_27FED8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int64x2_t *v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C5258);
  __chkstk_darwin(v4);
  v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C5260);
  __chkstk_darwin(v7);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (int64x2_t *)&v6[*(int *)(v4 + 44)];
  v11 = (uint64_t)v10->i64 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3C5268) + 44);
  sub_14510(v2, v11, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
  v12 = type metadata accessor for ArtworkModel(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 0, 1, v12);
  v13 = (int *)type metadata accessor for Artwork.Configuration(0);
  v14 = v11 + v13[7];
  v15 = type metadata accessor for CropCode(0);
  v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
  v17 = static Alignment.top.getter(v16);
  v18 = v11 + v13[5];
  *(_QWORD *)v18 = 0;
  *(_QWORD *)(v18 + 8) = 0;
  *(_BYTE *)(v18 + 16) = 2;
  v19 = (uint64_t *)(v11 + v13[6]);
  *v19 = v17;
  v19[1] = v20;
  *(_BYTE *)(v11 + v13[8]) = 1;
  v21 = type metadata accessor for Artwork(0);
  v22 = v11 + *(int *)(v21 + 20);
  *(_QWORD *)v22 = sub_2AA724;
  *(_QWORD *)(v22 + 8) = 0;
  *(_BYTE *)(v22 + 16) = 0;
  *v10 = vdupq_n_s64(0x3FF70A3D70A3D70AuLL);
  *v6 = 0;
  *(_OWORD *)(v6 + 8) = xmmword_3033C0;
  v23 = static Alignment.top.getter(v21);
  sub_278D54(0.0, 0, 0.0, 1, INFINITY, 0, 0.0, 0, (uint64_t)v9, 0.0, 1, INFINITY, 0, v23, v24, &qword_3C5258, &qword_3C5260);
  sub_1459C((uint64_t)v6, &qword_3C5258);
  if (qword_3B0218 != -1)
    swift_once(&qword_3B0218, sub_268764);
  v25 = type metadata accessor for RoundedRectangle(0);
  v26 = __swift_project_value_buffer(v25, (uint64_t)qword_3C45D8);
  v27 = a1 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3C5270) + 36);
  sub_14510(v26, v27, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v27 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3C4E00) + 36)) = 256;
  return sub_15BD4((uint64_t)v9, a1, &qword_3C5260);
}

uint64_t sub_280194(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_345014, 1);
}

uint64_t sub_2801A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _QWORD *boxed_opaque_existential_2Tm;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  void (*v28)(char *, uint64_t, uint64_t);
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[5];

  v31 = a1;
  v33 = a2;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C5188);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C5190);
  __chkstk_darwin(v32);
  v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C5198);
  __chkstk_darwin(v8);
  v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C51A0);
  __chkstk_darwin(v11);
  v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v16 = (char *)&v31 - v15;
  v17 = type metadata accessor for Podcasts(0);
  v34[3] = v17;
  v34[4] = sub_F1C0((unint64_t *)&qword_3B33B8, (void (*)(uint64_t))&type metadata accessor for Podcasts, (uint64_t)&protocol conformance descriptor for Podcasts);
  boxed_opaque_existential_2Tm = __swift_allocate_boxed_opaque_existential_2Tm(v34);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v17 - 8) + 104))(boxed_opaque_existential_2Tm, enum case for Podcasts.heroJoeColorDebugger(_:), v17);
  LOBYTE(v17) = isFeatureEnabled(_:)(v34);
  __swift_destroy_boxed_opaque_existential_1(v34);
  if ((v17 & 1) != 0)
  {
    v19 = sub_2804D8((uint64_t)v10);
    v20 = static Alignment.topTrailing.getter(v19);
    v22 = v21;
    v23 = (uint64_t)&v13[*(int *)(v11 + 36)];
    sub_267BC((uint64_t)v10, v23, &qword_3C5198);
    v24 = (uint64_t *)(v23 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3C51C0) + 36));
    *v24 = v20;
    v24[1] = v22;
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v13, v31, v2);
    sub_1459C((uint64_t)v10, &qword_3C5198);
    sub_15BD4((uint64_t)v13, (uint64_t)v16, &qword_3C51A0);
    sub_267BC((uint64_t)v16, (uint64_t)v7, &qword_3C51A0);
    swift_storeEnumTagMultiPayload(v7, v32, 0);
    v25 = sub_28111C();
    v26 = sub_32914(&qword_3C51B0, &qword_3C5188, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    _ConditionalContent<>.init(storage:)(v7, v11, v2, v25, v26);
    return sub_1459C((uint64_t)v16, &qword_3C51A0);
  }
  else
  {
    v28 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v28(v5, v31, v2);
    v28(v7, (uint64_t)v5, v2);
    swift_storeEnumTagMultiPayload(v7, v32, 1);
    v29 = sub_28111C();
    v30 = sub_32914(&qword_3C51B0, &qword_3C5188, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    _ConditionalContent<>.init(storage:)(v7, v11, v2, v29, v30);
    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
}

uint64_t sub_2804D8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v2 = v1;
  v22 = a1;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C51C8);
  __chkstk_darwin(v3);
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C51D0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
  __chkstk_darwin(v10);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for ArtworkModel(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_267BC(v2, (uint64_t)v12, &qword_3BEB70);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    sub_1459C((uint64_t)v12, &qword_3BEB70);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(v22, 1, 1, v6);
  }
  else
  {
    v18 = sub_3C56C((uint64_t)v12, (uint64_t)v16, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
    *(_QWORD *)v5 = static HorizontalAlignment.center.getter(v18);
    *((_QWORD *)v5 + 1) = 0;
    v5[16] = 0;
    v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C51D8);
    sub_280714((uint64_t)v16, (uint64_t)&v5[*(int *)(v19 + 44)]);
    sub_267BC((uint64_t)v5, (uint64_t)v9, &qword_3C51C8);
    *(_OWORD *)&v9[*(int *)(v6 + 36)] = xmmword_3033D0;
    sub_1459C((uint64_t)v5, &qword_3C51C8);
    v20 = v22;
    sub_15BD4((uint64_t)v9, v22, &qword_3C51D0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(v20, 0, 1, v6);
    return sub_145D8((uint64_t)v16, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
  }
}

uint64_t sub_280714@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  uint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v48 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C51E0);
  __chkstk_darwin(v3);
  v47 = (uint64_t)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v46 = (uint64_t)&v42 - v6;
  __chkstk_darwin(v7);
  v49 = (uint64_t)&v42 - v8;
  __chkstk_darwin(v9);
  v11 = (char *)&v42 - v10;
  __chkstk_darwin(v12);
  v14 = (char *)&v42 - v13;
  __chkstk_darwin(v15);
  v17 = (char *)&v42 - v16;
  __chkstk_darwin(v18);
  v20 = (char *)&v42 - v19;
  __chkstk_darwin(v21);
  v23 = (char *)&v42 - v22;
  __chkstk_darwin(v24);
  v26 = (char *)&v42 - v25;
  __chkstk_darwin(v27);
  v29 = (char *)&v42 - v28;
  sub_280A4C(*(_QWORD *)(a1 + 56), *(unsigned __int8 *)(a1 + 64), (uint64_t)&v42 - v28);
  sub_280A4C(*(_QWORD *)(a1 + 72), *(unsigned __int8 *)(a1 + 80), (uint64_t)v26);
  sub_280A4C(*(_QWORD *)(a1 + 88), *(unsigned __int8 *)(a1 + 96), (uint64_t)v23);
  v30 = *(_QWORD *)(a1 + 104);
  v31 = *(unsigned __int8 *)(a1 + 112);
  v44 = v20;
  sub_280A4C(v30, v31, (uint64_t)v20);
  v32 = *(_QWORD *)(a1 + 120);
  v33 = *(unsigned __int8 *)(a1 + 128);
  v43 = v17;
  sub_280A4C(v32, v33, (uint64_t)v17);
  v34 = (uint64_t)v14;
  v45 = v14;
  sub_267BC((uint64_t)v29, (uint64_t)v14, &qword_3C51E0);
  sub_267BC((uint64_t)v26, (uint64_t)v11, &qword_3C51E0);
  v35 = v49;
  sub_267BC((uint64_t)v23, v49, &qword_3C51E0);
  v36 = (uint64_t)v20;
  v37 = v46;
  sub_267BC(v36, v46, &qword_3C51E0);
  v38 = v47;
  sub_267BC((uint64_t)v17, v47, &qword_3C51E0);
  v39 = v48;
  sub_267BC(v34, v48, &qword_3C51E0);
  v40 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_3C51E8);
  sub_267BC((uint64_t)v11, v39 + v40[12], &qword_3C51E0);
  sub_267BC(v35, v39 + v40[16], &qword_3C51E0);
  sub_267BC(v37, v39 + v40[20], &qword_3C51E0);
  sub_267BC(v38, v39 + v40[24], &qword_3C51E0);
  sub_1459C((uint64_t)v43, &qword_3C51E0);
  sub_1459C((uint64_t)v44, &qword_3C51E0);
  sub_1459C((uint64_t)v23, &qword_3C51E0);
  sub_1459C((uint64_t)v26, &qword_3C51E0);
  sub_1459C((uint64_t)v29, &qword_3C51E0);
  sub_1459C(v38, &qword_3C51E0);
  sub_1459C(v37, &qword_3C51E0);
  sub_1459C(v49, &qword_3C51E0);
  sub_1459C((uint64_t)v11, &qword_3C51E0);
  return sub_1459C((uint64_t)v45, &qword_3C51E0);
}

uint64_t sub_280A4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t KeyPath;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v58 = a3;
  v5 = ~(_BYTE)a2;
  v61 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C51F0);
  __chkstk_darwin(v61);
  v62 = (uint64_t)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BA2B0);
  __chkstk_darwin(v56);
  v8 = (uint64_t *)((char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v57 = type metadata accessor for Image.Scale(0);
  v9 = *(_QWORD *)(v57 - 8);
  __chkstk_darwin(v57);
  v11 = (char *)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C51F8);
  __chkstk_darwin(v12);
  v14 = (char *)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C5200);
  __chkstk_darwin(v15);
  v17 = (char *)&v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C5208);
  __chkstk_darwin(v55);
  v19 = (uint64_t *)((char *)&v53 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v60 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C5210);
  __chkstk_darwin(v60);
  v21 = (char *)&v53 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v59 = (uint64_t)&v53 - v23;
  if (v5)
  {
    v24 = Color.color.getter(a1, a2);
    v54 = Color.init(uiColor:)(v24);
    v25 = Image.init(systemName:)(0x662E657261757173, 0xEB000000006C6C69);
    static SymbolRenderingMode.monochrome.getter();
    v26 = type metadata accessor for SymbolRenderingMode(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v17, 0, 1, v26);
    v27 = Image.symbolRenderingMode(_:)(v17, v25);
    swift_release(v25);
    sub_1459C((uint64_t)v17, &qword_3C5200);
    v28 = type metadata accessor for Font.Design(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v14, 1, 1, v28);
    v29 = static Font.system(size:weight:design:)(0, 1, v14, 18.0);
    sub_1459C((uint64_t)v14, &qword_3C51F8);
    KeyPath = swift_getKeyPath(&unk_303630);
    v31 = v57;
    (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for Image.Scale.medium(_:), v57);
    v32 = swift_getKeyPath(&unk_303660);
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))((char *)v8 + *(int *)(v56 + 28), v11, v31);
    *v8 = v32;
    sub_267BC((uint64_t)v8, (uint64_t)v19 + *(int *)(v55 + 36), &qword_3BA2B0);
    *v19 = v27;
    v19[1] = KeyPath;
    v19[2] = v29;
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1459C((uint64_t)v8, &qword_3BA2B0);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v31);
    swift_release(v29);
    swift_release(KeyPath);
    swift_release(v27);
    sub_267BC((uint64_t)v19, (uint64_t)v21, &qword_3C5208);
    v33 = v60;
    v34 = v54;
    *(_QWORD *)&v21[*(int *)(v60 + 36)] = v54;
    swift_retain();
    sub_1459C((uint64_t)v19, &qword_3C5208);
    v35 = v59;
    sub_15BD4((uint64_t)v21, v59, &qword_3C5210);
    v36 = v62;
    sub_267BC(v35, v62, &qword_3C5210);
    swift_storeEnumTagMultiPayload(v36, v61, 0);
    v37 = sub_281210();
    _ConditionalContent<>.init(storage:)(v36, v33, v33, v37, v37);
    swift_release(v34);
  }
  else
  {
    v38 = Image.init(systemName:)(0xD000000000000015, 0x8000000000314E10);
    static SymbolRenderingMode.monochrome.getter();
    v39 = type metadata accessor for SymbolRenderingMode(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v17, 0, 1, v39);
    v40 = Image.symbolRenderingMode(_:)(v17, v38);
    swift_release(v38);
    sub_1459C((uint64_t)v17, &qword_3C5200);
    v41 = type metadata accessor for Font.Design(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v14, 1, 1, v41);
    v42 = static Font.system(size:weight:design:)(0, 1, v14, 18.0);
    sub_1459C((uint64_t)v14, &qword_3C51F8);
    v43 = swift_getKeyPath(&unk_303630);
    v44 = v57;
    (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for Image.Scale.medium(_:), v57);
    v45 = swift_getKeyPath(&unk_303660);
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))((char *)v8 + *(int *)(v56 + 28), v11, v44);
    *v8 = v45;
    sub_267BC((uint64_t)v8, (uint64_t)v19 + *(int *)(v55 + 36), &qword_3BA2B0);
    *v19 = v40;
    v19[1] = v43;
    v19[2] = v42;
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1459C((uint64_t)v8, &qword_3BA2B0);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v44);
    swift_release(v42);
    swift_release(v43);
    v46 = swift_release(v40);
    v47 = static Color.white.getter(v46);
    v48 = Color.opacity(_:)(0.2);
    swift_release(v47);
    sub_267BC((uint64_t)v19, (uint64_t)v21, &qword_3C5208);
    v49 = v60;
    *(_QWORD *)&v21[*(int *)(v60 + 36)] = v48;
    sub_1459C((uint64_t)v19, &qword_3C5208);
    v35 = v59;
    sub_15BD4((uint64_t)v21, v59, &qword_3C5210);
    v50 = v62;
    sub_267BC(v35, v62, &qword_3C5210);
    swift_storeEnumTagMultiPayload(v50, v61, 1);
    v51 = sub_281210();
    _ConditionalContent<>.init(storage:)(v50, v49, v49, v51, v51);
  }
  return sub_1459C(v35, &qword_3C5210);
}

uint64_t sub_28110C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_344FEC, 1);
}

unint64_t sub_28111C()
{
  unint64_t result;

  result = qword_3C51A8;
  if (!qword_3C51A8)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_3C51A0);
    sub_32914(&qword_3C51B0, &qword_3C5188, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    sub_32914(&qword_3C51B8, &qword_3C51C0, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>);
    atomic_store(result, (unint64_t *)&qword_3C51A8);
  }
  return result;
}

uint64_t sub_2811B8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_2811E0(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.font.setter(v1);
}

unint64_t sub_281210()
{
  unint64_t result;

  result = qword_3C5218;
  if (!qword_3C5218)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_3C5210);
    sub_281294();
    sub_32914(&qword_3C5248, &qword_3C5250, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>);
    atomic_store(result, (unint64_t *)&qword_3C5218);
  }
  return result;
}

unint64_t sub_281294()
{
  unint64_t result;

  result = qword_3C5220;
  if (!qword_3C5220)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_3C5208);
    sub_281318();
    sub_32914(&qword_3BA480, &qword_3BA2B0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>);
    atomic_store(result, (unint64_t *)&qword_3C5220);
  }
  return result;
}

unint64_t sub_281318()
{
  unint64_t result;

  result = qword_3C5228;
  if (!qword_3C5228)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_3C5230);
    sub_32914(&qword_3C5238, &qword_3C5240, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>);
    atomic_store(result, (unint64_t *)&qword_3C5228);
  }
  return result;
}

unint64_t sub_28139C()
{
  unint64_t result;

  result = qword_3C52A0;
  if (!qword_3C52A0)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_3C5298);
    sub_32914(&qword_3C52A8, &qword_3C5290, (uint64_t)&protocol conformance descriptor for VStack<A>);
    sub_32914(&qword_3C52B0, &qword_3C52B8, (uint64_t)&protocol conformance descriptor for _GeometryActionModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>);
    atomic_store(result, (unint64_t *)&qword_3C52A0);
  }
  return result;
}

void sub_28143C(double *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for HeroChinBackground(0) - 8) + 80);
  sub_27FA94(v1 + ((v3 + 16) & ~v3), a1);
}

uint64_t objectdestroyTm_10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int EnumCaseMultiPayload;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int *v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;

  v1 = type metadata accessor for HeroChinBackground(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  v7 = type metadata accessor for HeroBackgroundVariant(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v0 + v4, v7);
  switch(EnumCaseMultiPayload)
  {
    case 2:
      v28 = type metadata accessor for ArtworkModel(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 48))(v0 + v4, 1, v28))
      {
        swift_bridgeObjectRelease();
        v29 = *(unsigned __int8 *)(v6 + 32);
        if (v29 != 255)
          sub_3B5BC(*(_QWORD *)(v6 + 16), *(_QWORD *)(v6 + 24), v29);
        v30 = *(unsigned __int8 *)(v6 + 64);
        if (v30 != 255)
          sub_3D624(*(id *)(v6 + 56), v30);
        v31 = *(unsigned __int8 *)(v6 + 80);
        if (v31 != 255)
          sub_3D624(*(id *)(v6 + 72), v31);
        v32 = *(unsigned __int8 *)(v6 + 96);
        if (v32 != 255)
          sub_3D624(*(id *)(v6 + 88), v32);
        v33 = *(unsigned __int8 *)(v6 + 112);
        if (v33 != 255)
          sub_3D624(*(id *)(v6 + 104), v33);
        v34 = *(unsigned __int8 *)(v6 + 128);
        if (v34 != 255)
          sub_3D624(*(id *)(v6 + 120), v34);
        v35 = v6 + *(int *)(v28 + 44);
        v36 = type metadata accessor for ArtworkCrop(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 8))(v35, v36);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      v37 = qword_3C4878;
      goto LABEL_57;
    case 1:
      swift_bridgeObjectRelease();
      v38 = *(unsigned __int8 *)(v6 + 32);
      if (v38 != 255)
        sub_3B5BC(*(_QWORD *)(v6 + 16), *(_QWORD *)(v6 + 24), v38);
      v39 = *(unsigned __int8 *)(v6 + 64);
      if (v39 != 255)
        sub_3D624(*(id *)(v6 + 56), v39);
      v40 = *(unsigned __int8 *)(v6 + 80);
      if (v40 != 255)
        sub_3D624(*(id *)(v6 + 72), v40);
      v41 = *(unsigned __int8 *)(v6 + 96);
      if (v41 != 255)
        sub_3D624(*(id *)(v6 + 88), v41);
      v42 = *(unsigned __int8 *)(v6 + 112);
      if (v42 != 255)
        sub_3D624(*(id *)(v6 + 104), v42);
      v43 = *(unsigned __int8 *)(v6 + 128);
      if (v43 != 255)
        sub_3D624(*(id *)(v6 + 120), v43);
      v44 = v6 + *(int *)(type metadata accessor for ArtworkModel(0) + 44);
      v45 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 8))(v44, v45);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v37 = &qword_3C4870;
LABEL_57:
      v27 = (int *)(__swift_instantiateConcreteTypeFromMangledName(v37) + 48);
LABEL_58:
      swift_release(*(_QWORD *)(v6 + *v27));
      break;
    case 0:
      swift_bridgeObjectRelease();
      v9 = *(unsigned __int8 *)(v6 + 32);
      if (v9 != 255)
        sub_3B5BC(*(_QWORD *)(v6 + 16), *(_QWORD *)(v6 + 24), v9);
      v10 = *(unsigned __int8 *)(v6 + 64);
      if (v10 != 255)
        sub_3D624(*(id *)(v6 + 56), v10);
      v11 = *(unsigned __int8 *)(v6 + 80);
      if (v11 != 255)
        sub_3D624(*(id *)(v6 + 72), v11);
      v12 = *(unsigned __int8 *)(v6 + 96);
      if (v12 != 255)
        sub_3D624(*(id *)(v6 + 88), v12);
      v13 = *(unsigned __int8 *)(v6 + 112);
      if (v13 != 255)
        sub_3D624(*(id *)(v6 + 104), v13);
      v50 = v5;
      v14 = *(unsigned __int8 *)(v6 + 128);
      if (v14 != 255)
        sub_3D624(*(id *)(v6 + 120), v14);
      v15 = type metadata accessor for ArtworkModel(0);
      v16 = v6 + *(int *)(v15 + 44);
      v17 = type metadata accessor for ArtworkCrop(0);
      v18 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8);
      v18(v16, v17);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C4868);
      v20 = v6 + *(int *)(v19 + 48);
      swift_bridgeObjectRelease();
      v21 = *(unsigned __int8 *)(v20 + 32);
      if (v21 != 255)
        sub_3B5BC(*(_QWORD *)(v20 + 16), *(_QWORD *)(v20 + 24), v21);
      v22 = *(unsigned __int8 *)(v20 + 64);
      if (v22 != 255)
        sub_3D624(*(id *)(v20 + 56), v22);
      v23 = *(unsigned __int8 *)(v20 + 80);
      if (v23 != 255)
        sub_3D624(*(id *)(v20 + 72), v23);
      v24 = *(unsigned __int8 *)(v20 + 96);
      if (v24 != 255)
        sub_3D624(*(id *)(v20 + 88), v24);
      v25 = *(unsigned __int8 *)(v20 + 112);
      if (v25 != 255)
        sub_3D624(*(id *)(v20 + 104), v25);
      v26 = *(unsigned __int8 *)(v20 + 128);
      if (v26 != 255)
        sub_3D624(*(id *)(v20 + 120), v26);
      v18(v20 + *(int *)(v15 + 44), v17);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v27 = (int *)(v19 + 64);
      v5 = v50;
      goto LABEL_58;
  }
  v46 = v4 + v5;
  v47 = v6 + *(int *)(v1 + 20);
  v48 = type metadata accessor for NamedCoordinateSpace(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 8))(v47, v48);
  swift_release(*(_QWORD *)(v6 + *(int *)(v1 + 24) + 8));
  return swift_deallocObject(v0, v46, v3 | 7);
}

_QWORD *sub_2818F0(double *a1)
{
  type metadata accessor for HeroChinBackground(0);
  return sub_27FB14(a1);
}

unint64_t sub_281930()
{
  unint64_t result;

  result = qword_3C52E0;
  if (!qword_3C52E0)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_3C5180);
    sub_281B78(&qword_3C52E8, &qword_3C5178, (void (*)(void))sub_2819CC);
    sub_32914(&qword_3C4E80, &qword_3C4E00, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>);
    atomic_store(result, (unint64_t *)&qword_3C52E0);
  }
  return result;
}

unint64_t sub_2819CC()
{
  unint64_t result;

  result = qword_3C52F0;
  if (!qword_3C52F0)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_3C5170);
    sub_F1C0(&qword_3C4CE8, (void (*)(uint64_t))type metadata accessor for Artwork, (uint64_t)&protocol conformance descriptor for Artwork);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>);
    atomic_store(result, (unint64_t *)&qword_3C52F0);
  }
  return result;
}

unint64_t sub_281A54()
{
  unint64_t result;

  result = qword_3C52F8;
  if (!qword_3C52F8)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_3C5300);
    sub_28111C();
    sub_32914(&qword_3C51B0, &qword_3C5188, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>);
    atomic_store(result, (unint64_t *)&qword_3C52F8);
  }
  return result;
}

unint64_t sub_281ADC()
{
  unint64_t result;

  result = qword_3C5308;
  if (!qword_3C5308)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_3C5270);
    sub_281B78(&qword_3C5310, &qword_3C5260, (void (*)(void))sub_281BE4);
    sub_32914(&qword_3C4E80, &qword_3C4E00, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>);
    atomic_store(result, (unint64_t *)&qword_3C5308);
  }
  return result;
}

uint64_t sub_281B78(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;

  result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    a3();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_281BE4()
{
  unint64_t result;

  result = qword_3C5318;
  if (!qword_3C5318)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_3C5258);
    sub_32914(&qword_3B2BE8, &qword_3B2BD8, (uint64_t)&protocol conformance descriptor for _LayoutRoot<A>);
    sub_281C68();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _VariadicView.Tree<A, B>);
    atomic_store(result, (unint64_t *)&qword_3C5318);
  }
  return result;
}

unint64_t sub_281C68()
{
  unint64_t result;

  result = qword_3C5320;
  if (!qword_3C5320)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_3C5268);
    sub_32914(&qword_3B7D88, &qword_3B7D78, (uint64_t)&protocol conformance descriptor for _LayoutRoot<A>);
    sub_F1C0(&qword_3C4CE8, (void (*)(uint64_t))type metadata accessor for Artwork, (uint64_t)&protocol conformance descriptor for Artwork);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _VariadicView.Tree<A, B>);
    atomic_store(result, (unint64_t *)&qword_3C5320);
  }
  return result;
}

unint64_t sub_281D08()
{
  unint64_t result;

  result = qword_3C5328;
  if (!qword_3C5328)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_3C5330);
    sub_28139C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>);
    atomic_store(result, (unint64_t *)&qword_3C5328);
  }
  return result;
}

uint64_t ActionPerformer.init(_:asPartOf:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;

  result = sub_F4D8(a1, a3);
  *(_QWORD *)(a3 + 40) = a2;
  return result;
}

uint64_t ActionPerformer.callAsFunction()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t ObjectType;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  int v27;
  _QWORD *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  Swift::String v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *boxed_opaque_existential_2Tm;
  Swift::String v38;
  char *v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  _QWORD *v48;
  _QWORD v49[4];

  v1 = type metadata accessor for ActionOutcome(0);
  v43 = *(_QWORD *)(v1 - 8);
  v44 = v1;
  __chkstk_darwin(v1);
  v45 = (char *)&v41 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for LogMessage.StringInterpolation(0);
  __chkstk_darwin(v3);
  v47 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = type metadata accessor for OSLogger(0);
  v42 = *(_QWORD *)(v46 - 8);
  __chkstk_darwin(v46);
  v6 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C5338);
  __chkstk_darwin(v7);
  v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BAFB8);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for ActionMetricsBehavior(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = v0;
  v18 = v0[5];
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BC3D8);
  BaseObjectGraph.injectIfAvailable<A>(_:)(v19, v19);
  v20 = v49[0];
  if (v49[0])
  {
    v21 = v49[1];
    ObjectType = swift_getObjectType();
    (*(void (**)(char *, _QWORD, uint64_t))(v15 + 104))(v17, enum case for ActionMetricsBehavior.fromAction(_:), v14);
    v23 = ActionRunner.perform(_:withMetrics:asPartOf:)(v48, (uint64_t)v17, v18, ObjectType, v21);
    swift_unknownObjectRelease(v20);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  }
  else
  {
    v24 = v6;
    v25 = v46;
    v26 = v47;
    BaseObjectGraph.injectIfAvailable<A>(_:)(v10, v10);
    v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10);
    v28 = v48;
    if (v27 == 1)
    {
      v29 = sub_1459C((uint64_t)v9, &qword_3C5338);
      v30 = v24;
      static OSLogger.actions.getter(v29);
      v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0B10);
      v32 = type metadata accessor for LogMessage(0);
      v33 = swift_allocObject(v31, ((*(unsigned __int8 *)(*(_QWORD *)(v32 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v32 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v32 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v32 - 8) + 80) | 7);
      *(_OWORD *)(v33 + 16) = xmmword_2EA0D0;
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(58, 1);
      v34._object = (void *)0x8000000000313E70;
      v34._countAndFlagsBits = 0xD000000000000012;
      LogMessage.StringInterpolation.appendLiteral(_:)(v34);
      v35 = v28[3];
      v36 = __swift_project_boxed_opaque_existential_1(v28, v35);
      v49[3] = v35;
      boxed_opaque_existential_2Tm = __swift_allocate_boxed_opaque_existential_2Tm(v49);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(boxed_opaque_existential_2Tm, v36, v35);
      LogMessage.StringInterpolation.appendInterpolation(sensitive:)(v49);
      sub_1459C((uint64_t)v49, (uint64_t *)&unk_3BC540);
      v38._countAndFlagsBits = 0xD000000000000028;
      v38._object = (void *)0x8000000000314E30;
      LogMessage.StringInterpolation.appendLiteral(_:)(v38);
      LogMessage.init(stringInterpolation:)(v26);
      Logger.error(_:)(v33, v25, &protocol witness table for OSLogger);
      swift_bridgeObjectRelease(v33);
      (*(void (**)(char *, uint64_t))(v42 + 8))(v30, v25);
      __swift_instantiateConcreteTypeFromMangledName(&qword_3BC108);
      v39 = v45;
      (*(void (**)(char *, _QWORD, uint64_t))(v43 + 104))(v45, enum case for ActionOutcome.unsupported(_:), v44);
      return Promise.__allocating_init(value:)(v39);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v9, v10);
      v23 = sub_2821C4();
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    }
  }
  return v23;
}

uint64_t sub_2821C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v13[5];
  __int128 v14[2];
  __int128 v15[2];

  v1 = v0;
  v2 = type metadata accessor for ActionMetricsBehavior(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v13[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for ActionMetricsBehavior.fromAction(_:), v2);
  v6 = *(_QWORD *)(v0 + 40);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BAFB8);
  v8 = ActionDispatcher.dispatch(_:withMetrics:asPartOf:)(v0, v5, v6, v7);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  sub_150C8(v1, (uint64_t)v15);
  v9 = swift_allocObject(&unk_38D348, 56, 7);
  sub_F4D8(v15, v9 + 16);
  sub_150C8(v1, (uint64_t)v15);
  sub_150C8((uint64_t)v15, (uint64_t)v14);
  v10 = swift_allocObject(&unk_38D370, 56, 7);
  sub_F4D8(v14, v10 + 16);
  v13[3] = type metadata accessor for SyncTaskScheduler(0);
  v13[4] = &protocol witness table for SyncTaskScheduler;
  __swift_allocate_boxed_opaque_existential_2Tm(v13);
  SyncTaskScheduler.init()();
  Promise.then(perform:orCatchError:on:)(sub_28276C, v9, sub_2829A8, v10, v13);
  swift_release(v9);
  swift_release(v10);
  __swift_destroy_boxed_opaque_existential_1(v15);
  __swift_destroy_boxed_opaque_existential_1(v13);
  return v8;
}

uint64_t destroy for ActionPerformer(_QWORD *a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  return swift_release(a1[5]);
}

uint64_t initializeWithCopy for ActionPerformer(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v5;
  swift_retain(v5);
  return a1;
}

_QWORD *assignWithCopy for ActionPerformer(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  __swift_assign_boxed_opaque_existential_1(a1, a2);
  v4 = a2[5];
  v5 = a1[5];
  a1[5] = v4;
  swift_retain();
  swift_release(v5);
  return a1;
}

uint64_t assignWithTake for ActionPerformer(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  __swift_destroy_boxed_opaque_existential_1((_QWORD *)a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  v6 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  swift_release(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for ActionPerformer(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ActionPerformer(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ActionPerformer()
{
  return &type metadata for ActionPerformer;
}

uint64_t sub_2824EC(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *boxed_opaque_existential_2Tm;
  Swift::String v23;
  _QWORD v24[4];

  v4 = type metadata accessor for LogMessage.StringInterpolation(0);
  __chkstk_darwin(v4);
  v6 = (char *)v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for OSLogger(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ActionOutcome(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v14, enum case for ActionOutcome.unsupported(_:), v11);
  LOBYTE(a1) = static ActionOutcome.== infix(_:_:)(a1, v14);
  result = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  if ((a1 & 1) != 0)
  {
    static OSLogger.actions.getter(result);
    v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0B10);
    v17 = type metadata accessor for LogMessage(0);
    v18 = swift_allocObject(v16, ((*(unsigned __int8 *)(*(_QWORD *)(v17 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v17 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v17 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v17 - 8) + 80) | 7);
    *(_OWORD *)(v18 + 16) = xmmword_2EA0D0;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(72, 1);
    v19._object = (void *)0x8000000000314E60;
    v19._countAndFlagsBits = 0xD000000000000012;
    LogMessage.StringInterpolation.appendLiteral(_:)(v19);
    v20 = a2[3];
    v21 = __swift_project_boxed_opaque_existential_1(a2, v20);
    v24[3] = v20;
    boxed_opaque_existential_2Tm = __swift_allocate_boxed_opaque_existential_2Tm(v24);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(boxed_opaque_existential_2Tm, v21, v20);
    LogMessage.StringInterpolation.appendInterpolation(sensitive:)(v24);
    sub_1459C((uint64_t)v24, (uint64_t *)&unk_3BC540);
    v23._countAndFlagsBits = 0xD000000000000036;
    v23._object = (void *)0x8000000000314E80;
    LogMessage.StringInterpolation.appendLiteral(_:)(v23);
    LogMessage.init(stringInterpolation:)(v6);
    Logger.error(_:)(v18, v7, &protocol witness table for OSLogger);
    swift_bridgeObjectRelease(v18);
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  return result;
}

uint64_t sub_282748()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1((_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_28276C(uint64_t a1)
{
  uint64_t v1;

  return sub_2824EC(a1, (_QWORD *)(v1 + 16));
}

uint64_t sub_282774(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::String v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *boxed_opaque_existential_2Tm;
  Swift::String v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  Swift::String v23;
  uint64_t v25;
  uint64_t v26;
  char v27[8];
  _QWORD v28[3];
  uint64_t v29;

  v4 = type metadata accessor for LogMessage.StringInterpolation(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for OSLogger(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  static OSLogger.actions.getter(v9);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0B10);
  v13 = type metadata accessor for LogMessage(0);
  v14 = swift_allocObject(v12, ((*(unsigned __int8 *)(*(_QWORD *)(v13 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v13 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v13 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v13 - 8) + 80) | 7);
  *(_OWORD *)(v14 + 16) = xmmword_2EA0D0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(28, 2);
  v15._object = (void *)0x8000000000314E60;
  v15._countAndFlagsBits = 0xD000000000000012;
  LogMessage.StringInterpolation.appendLiteral(_:)(v15);
  v16 = a2[3];
  v17 = __swift_project_boxed_opaque_existential_1(a2, v16);
  v29 = v16;
  boxed_opaque_existential_2Tm = __swift_allocate_boxed_opaque_existential_2Tm(v28);
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(boxed_opaque_existential_2Tm, v17, v16);
  LogMessage.StringInterpolation.appendInterpolation(sensitive:)(v28);
  sub_1459C((uint64_t)v28, (uint64_t *)&unk_3BC540);
  v19._countAndFlagsBits = 0x6E6F73616572202CLL;
  v19._object = (void *)0xEA0000000000203ALL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v19);
  swift_getErrorValue(a1, v27, &v25);
  v20 = v25;
  v21 = v26;
  v29 = v26;
  v22 = __swift_allocate_boxed_opaque_existential_2Tm(v28);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v22, v20, v21);
  LogMessage.StringInterpolation.appendInterpolation(safe:)(v28);
  sub_1459C((uint64_t)v28, (uint64_t *)&unk_3BC540);
  v23._countAndFlagsBits = 0;
  v23._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v23);
  LogMessage.init(stringInterpolation:)(v6);
  Logger.error(_:)(v14, v7, &protocol witness table for OSLogger);
  swift_bridgeObjectRelease(v14);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

uint64_t sub_2829A8(uint64_t a1)
{
  uint64_t v1;

  return sub_282774(a1, (_QWORD *)(v1 + 16));
}

void sub_2829B4(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void *);
  id v5;

  v4 = *(void (**)(void *))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v4(a2);
  swift_release(v3);

}

uint64_t sub_282A08(uint64_t a1)
{
  return sub_282A50(a1, qword_3C5340, 0xD000000000000045, 0x8000000000315150);
}

uint64_t sub_282A2C(uint64_t a1)
{
  return sub_282A50(a1, qword_3C5358, 0xD000000000000043, 0x8000000000315270);
}

uint64_t sub_282A50(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
  __swift_allocate_value_buffer(v7, a2);
  __swift_project_value_buffer(v7, (uint64_t)a2);
  return URL.init(string:)(a3, a4);
}

void *AccountPresenter.activeAccount.getter()
{
  uint64_t v0;
  void *v1;
  id v2;
  _BYTE v4[24];

  swift_beginAccess(v0 + 96, v4, 0, 0);
  v1 = *(void **)(v0 + 96);
  v2 = v1;
  return v1;
}

void *AccountPresenter.profilePicture.getter()
{
  uint64_t v0;
  void *v1;
  id v2;
  _BYTE v4[24];

  swift_beginAccess(v0 + 104, v4, 0, 0);
  v1 = *(void **)(v0 + 104);
  v2 = v1;
  return v1;
}

void AccountPresenter.profilePicture.setter(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  _BYTE v4[24];

  swift_beginAccess(v1 + 104, v4, 1, 0);
  v3 = *(void **)(v1 + 104);
  *(_QWORD *)(v1 + 104) = a1;

}

uint64_t (*AccountPresenter.profilePicture.modify(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + 104, a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t sub_282BB0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  v1 = *v0;
  result = FlowTransitionSource.view.getter();
  if (result)
  {
    v3 = result;
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 296) + 32))(*((unsigned __int8 *)v0 + 128), *(_QWORD *)(v1 + 288));
    return swift_unknownObjectRelease(v3);
  }
  return result;
}

uint64_t sub_282C08(char a1)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 128) = a1;
  return sub_282BB0();
}

void *AccountPresenter.accountName.getter()
{
  uint64_t v0;
  double v1;
  void *result;
  id v3;
  void *v4;
  uint64_t v5;
  _BYTE v6[24];

  if (!AccountPresenter.signedIn.getter())
  {
    v5 = *(_QWORD *)(v0 + 136);
    swift_bridgeObjectRetain();
    return (void *)v5;
  }
  *(_QWORD *)&v1 = swift_beginAccess(v0 + 96, v6, 0, 0).n128_u64[0];
  result = *(void **)(v0 + 96);
  if (result)
  {
    v3 = objc_msgSend(result, "username", v1);
    if (!v3)
      return 0;
    v4 = v3;
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);

    return (void *)v5;
  }
  __break(1u);
  return result;
}

uint64_t AccountPresenter.accountName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (AccountPresenter.signedIn.getter() || (*(_BYTE *)(v2 + 128) & 1) != 0)
    return swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 136) = a1;
  *(_QWORD *)(v2 + 144) = a2;
  v6 = swift_bridgeObjectRelease();
  return sub_282D70(v6, v7, v8, v9);
}

BOOL AccountPresenter.signedIn.getter()
{
  uint64_t v0;
  void *v1;
  id v2;
  _BOOL8 result;
  _BYTE v4[24];

  swift_beginAccess(v0 + 96, v4, 0, 0);
  v1 = *(void **)(v0 + 96);
  result = 0;
  if (v1)
  {
    v2 = objc_msgSend(v1, "ams_DSID");

    if (v2)
      return 1;
  }
  return result;
}

uint64_t sub_282D70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t WitnessTable;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[6];
  uint64_t v16;
  char v17;

  v5 = *v4;
  v15[5] = v4[21];
  v6 = *(_QWORD *)(v5 + 288);
  v7 = *(_QWORD *)(v5 + 296);
  v15[2] = v6;
  v15[3] = v7;
  v8 = type metadata accessor for AccountPresenter.AccountSection(255, v6, v7, a4);
  v10 = type metadata accessor for Array(0, v8, v9);
  swift_bridgeObjectRetain();
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A]);
  Collection.firstIndex(where:)(&v16, sub_287074, v15, v10, WitnessTable);
  result = swift_bridgeObjectRelease();
  if ((v17 & 1) == 0)
  {
    v13 = v16;
    result = FlowTransitionSource.view.getter();
    if (result)
    {
      v14 = result;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 56))(v13, v6, v7);
      return swift_unknownObjectRelease(v14);
    }
  }
  return result;
}

uint64_t (*AccountPresenter.accountName.modify(void **a1))(uint64_t *a1, char a2)
{
  void *v1;
  void *v3;

  a1[2] = v1;
  *a1 = AccountPresenter.accountName.getter();
  a1[1] = v3;
  return sub_282E88;
}

uint64_t sub_282E88(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *a1;
  v2 = a1[1];
  if ((a2 & 1) == 0)
    return AccountPresenter.accountName.setter(*a1, v2);
  swift_bridgeObjectRetain();
  AccountPresenter.accountName.setter(v3, v2);
  return swift_bridgeObjectRelease();
}

uint64_t AccountPresenter.passwordInputValue.getter()
{
  uint64_t v0;

  v0 = sub_28696C();
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t AccountPresenter.passwordInputValue.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v2 + 152) = a1;
  *(_QWORD *)(v2 + 160) = a2;
  v3 = swift_bridgeObjectRelease();
  return sub_282D70(v3, v4, v5, v6);
}

uint64_t (*AccountPresenter.passwordInputValue.modify(_QWORD *a1))(_QWORD *a1, char a2)
{
  uint64_t v1;
  uint64_t v3;

  a1[2] = v1;
  v3 = *(_QWORD *)(v1 + 160);
  *a1 = *(_QWORD *)(v1 + 152);
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return sub_282F78;
}

uint64_t sub_282F78(_QWORD *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = a1[1];
  v3 = a1[2];
  *(_QWORD *)(v3 + 152) = *a1;
  *(_QWORD *)(v3 + 160) = v2;
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    v4 = swift_bridgeObjectRelease();
    sub_282D70(v4, v5, v6, v7);
    return swift_bridgeObjectRelease();
  }
  else
  {
    v9 = swift_bridgeObjectRelease();
    return sub_282D70(v9, v10, v11, v12);
  }
}

BOOL AccountPresenter.canSignIn.getter()
{
  uint64_t v0;
  void *v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _BOOL4 v6;
  unint64_t v7;
  uint64_t v8;
  _BOOL8 v9;

  v1 = AccountPresenter.accountName.getter();
  if (v2)
  {
    v3 = (unint64_t)v1;
    v4 = v2;
    swift_bridgeObjectRelease();
    v5 = HIBYTE(v4) & 0xF;
    if ((v4 & 0x2000000000000000) == 0)
      v5 = v3 & 0xFFFFFFFFFFFFLL;
    v6 = v5 == 0;
    v7 = *(_QWORD *)(v0 + 160);
    if (v7)
    {
LABEL_5:
      if ((v7 & 0x2000000000000000) != 0)
        v8 = HIBYTE(v7) & 0xF;
      else
        v8 = *(_QWORD *)(v0 + 152) & 0xFFFFFFFFFFFFLL;
      v9 = v8 != 0;
      if (AccountPresenter.signedIn.getter())
        return 0;
      goto LABEL_12;
    }
  }
  else
  {
    v6 = 1;
    v7 = *(_QWORD *)(v0 + 160);
    if (v7)
      goto LABEL_5;
  }
  v9 = 0;
  if (AccountPresenter.signedIn.getter())
    return 0;
LABEL_12:
  if (((*(unsigned __int8 *)(v0 + 128) | v6) & 1) != 0)
    return 0;
  return v9;
}

uint64_t sub_283090()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *boxed_opaque_existential_2Tm;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __n128 v54;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  _QWORD v62[5];
  char v63;

  v61 = *v0;
  v1 = type metadata accessor for ActionMetrics(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v56 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for FlowDestination(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B70A0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
  __chkstk_darwin(v57);
  v12 = (char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v58 = (char *)&v56 - v14;
  __chkstk_darwin(v15);
  v17 = (char *)&v56 - v16;
  v18 = v0[22];
  v56 = v8;
  if (v18)
  {
    Bag.subscript.getter(kBagKeyAddFundsURL);
    Bag.Value.currentOrNil()(v7);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  else
  {
    v19 = type metadata accessor for URL(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v17, 1, 1, v19);
  }
  sub_282CC((uint64_t)v17, (uint64_t)v6);
  v59 = v4;
  v20 = swift_storeEnumTagMultiPayload(v6, v4, 24);
  LOBYTE(v62[0]) = 5;
  v63 = 0;
  static ActionMetrics.notInstrumented.getter(v20);
  v21 = type metadata accessor for FlowAction(0);
  swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
  v60 = v3;
  v22 = FlowAction.init(_:id:title:presentationContext:animationBehavior:presentationStyle:destinationPageHeader:actionMetrics:)((uint64_t)v6, 0, 0, 0, 0, (char *)v62, 0, 48, &v63, (uint64_t)v3);
  sub_1459C((uint64_t)v17, &qword_3B4370);
  if (v18)
  {
    Bag.subscript.getter(kBagKeyManageSubscriptionsURL);
    Bag.Value.currentOrNil()(v7);
    (*(void (**)(char *, uint64_t))(v56 + 8))(v10, v7);
    v23 = type metadata accessor for URL(0);
    v24 = *(_QWORD *)(v23 - 8);
    v25 = v22;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v12, 1, v23) != 1)
    {
      v26 = (uint64_t)v58;
      (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v58, v12, v23);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v24 + 56))(v26, 0, 1, v23);
      v27 = (uint64_t)v60;
      goto LABEL_11;
    }
  }
  else
  {
    v28 = type metadata accessor for URL(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v12, 1, 1, v28);
    v25 = v22;
  }
  v27 = (uint64_t)v60;
  v26 = (uint64_t)v58;
  if (qword_3B02A8 != -1)
    swift_once(&qword_3B02A8, sub_282A2C);
  v29 = __swift_project_value_buffer(v57, (uint64_t)qword_3C5358);
  sub_282CC(v29, v26);
  sub_1459C((uint64_t)v12, &qword_3B4370);
LABEL_11:
  sub_282CC(v26, (uint64_t)v6);
  v30 = swift_storeEnumTagMultiPayload(v6, v59, 24);
  LOBYTE(v62[0]) = 5;
  v63 = 0;
  static ActionMetrics.notInstrumented.getter(v30);
  swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
  v31 = FlowAction.init(_:id:title:presentationContext:animationBehavior:presentationStyle:destinationPageHeader:actionMetrics:)((uint64_t)v6, 0, 0, 0, 0, (char *)v62, 0, 48, &v63, v27);
  sub_1459C(v26, &qword_3B4370);
  v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C54B8);
  v33 = swift_allocObject(v32, 160, 7);
  *(_OWORD *)(v33 + 16) = xmmword_2ED8E0;
  *(_QWORD *)(v33 + 32) = sub_286624;
  *(_QWORD *)(v33 + 40) = 0;
  *(_QWORD *)(v33 + 48) = v31;
  *(_BYTE *)(v33 + 56) = 1;
  v34 = qword_3B02B0;
  swift_retain();
  if (v34 != -1)
    swift_once(&qword_3B02B0, sub_286230);
  v35 = *(_QWORD *)algn_3C5378;
  v36 = qword_3C5380;
  v37 = byte_3C5388;
  *(_QWORD *)(v33 + 64) = qword_3C5370;
  *(_QWORD *)(v33 + 72) = v35;
  *(_QWORD *)(v33 + 80) = v36;
  *(_BYTE *)(v33 + 88) = v37;
  v38 = qword_3B02B8;
  swift_retain();
  swift_retain();
  if (v38 != -1)
    swift_once(&qword_3B02B8, sub_286424);
  v39 = *(_QWORD *)algn_3C5398;
  v40 = qword_3C53A0;
  v41 = byte_3C53A8;
  *(_QWORD *)(v33 + 96) = qword_3C5390;
  *(_QWORD *)(v33 + 104) = v39;
  *(_QWORD *)(v33 + 112) = v40;
  *(_BYTE *)(v33 + 120) = v41;
  *(_QWORD *)(v33 + 128) = sub_286608;
  *(_QWORD *)(v33 + 136) = 0;
  *(_QWORD *)(v33 + 144) = v25;
  *(_BYTE *)(v33 + 152) = 1;
  v42 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0920);
  v43 = (_QWORD *)swift_allocObject(v42, 33, 7);
  *((_OWORD *)v43 + 1) = xmmword_2EA0D0;
  *((_BYTE *)v43 + 32) = 0;
  v44 = type metadata accessor for Podcasts(0);
  v62[3] = v44;
  v62[4] = sub_F1C0((unint64_t *)&qword_3B33B8, (void (*)(uint64_t))&type metadata accessor for Podcasts, (uint64_t)&protocol conformance descriptor for Podcasts);
  boxed_opaque_existential_2Tm = __swift_allocate_boxed_opaque_existential_2Tm(v62);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v44 - 8) + 104))(boxed_opaque_existential_2Tm, enum case for Podcasts.ponderosa(_:), v44);
  swift_retain();
  swift_retain();
  swift_retain();
  LOBYTE(v39) = isFeatureEnabled(_:)(v62);
  __swift_destroy_boxed_opaque_existential_1(v62);
  if ((v39 & 1) != 0)
  {
    v48 = v43[2];
    v47 = v43[3];
    if (v48 >= v47 >> 1)
      v43 = sub_116D4((_QWORD *)(v47 > 1), v48 + 1, 1, v43);
    v43[2] = v48 + 1;
    *((_BYTE *)v43 + v48 + 32) = 1;
  }
  v49 = type metadata accessor for AccountPresenter.AccountSection(255, *(_QWORD *)(v61 + 288), *(_QWORD *)(v61 + 296), v46);
  v50 = type metadata accessor for _ContiguousArrayStorage(0, v49);
  v51 = swift_allocObject(v50, 80, 7);
  v52 = static Array._adoptStorage(_:count:)(v51, 3);
  *(_QWORD *)v53 = 3;
  *(_BYTE *)(v53 + 8) = 2;
  *(_QWORD *)(v53 + 16) = v43;
  *(_BYTE *)(v53 + 24) = 1;
  *(_QWORD *)(v53 + 32) = v33;
  *(_BYTE *)(v53 + 40) = 0;
  swift_release(v25);
  swift_release(v31);
  type metadata accessor for Array(0, v49, v54);
  return v52;
}

uint64_t AccountPresenter.accountViewController.getter()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 200, v2, 0, 0);
  return swift_unknownObjectWeakLoadStrong(v0 + 200);
}

void AccountPresenter.accountViewController.setter(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v4[24];

  v3 = v1 + 200;
  swift_beginAccess(v3, v4, 1, 0);
  swift_unknownObjectWeakAssign(v3, a1);

}

void (*AccountPresenter.accountViewController.modify(_QWORD *a1))(id **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  swift_beginAccess(v1 + 200, v3, 33, 0);
  v3[3] = swift_unknownObjectWeakLoadStrong(v1 + 200);
  return sub_283814;
}

void sub_283814(id **a1, char a2)
{
  id *v3;
  id v4;

  v3 = *a1;
  v4 = (*a1)[3];
  swift_unknownObjectWeakAssign((char *)(*a1)[4] + 200, v4);
  if ((a2 & 1) != 0)
  {

    swift_endAccess(v3);
  }
  else
  {
    swift_endAccess(v3);

  }
  free(v3);
}

uint64_t AccountPresenter.__allocating_init(asPartOf:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  swift_allocObject(v1, 208, 7);
  v3 = sub_286974();
  swift_release(a1);
  return v3;
}

uint64_t AccountPresenter.init(asPartOf:)(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_286974();
  swift_release(a1);
  return v2;
}

uint64_t sub_2838F4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *v0;
  v2 = swift_allocObject(&unk_38D398, 24, 7);
  swift_weakInit(v2 + 16);
  v3 = (_QWORD *)swift_allocObject(&unk_38D590, 40, 7);
  v3[2] = *(_QWORD *)(v1 + 288);
  v3[3] = *(_QWORD *)(v1 + 296);
  v3[4] = v2;
  swift_retain();
  sub_28398C((uint64_t)sub_286F74, (uint64_t)v3);
  swift_release(v2);
  return swift_release(v3);
}

void sub_28398C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  id v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  _QWORD *v11;
  _QWORD v12[5];
  _QWORD *v13;

  v3 = v2;
  v6 = *v3;
  v7 = objc_msgSend((id)objc_opt_self(ASKProfilePictureStore), "sharedStore");
  v8 = swift_allocObject(&unk_38D398, 24, 7);
  swift_weakInit(v8 + 16);
  v9 = (_QWORD *)swift_allocObject(&unk_38D6A8, 56, 7);
  v9[2] = *(_QWORD *)(v6 + 288);
  v9[3] = *(_QWORD *)(v6 + 296);
  v9[4] = v8;
  v9[5] = a1;
  v9[6] = a2;
  v12[4] = sub_287058;
  v13 = v9;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1107296256;
  v12[2] = sub_2829B4;
  v12[3] = &block_descriptor_39;
  v10 = _Block_copy(v12);
  v11 = v13;
  sub_76C34(a1, a2);
  swift_release(v11);
  objc_msgSend(v7, "profilePictureForAccountOwnerWithoutMonogramFallbackWithPictureDiameter:completion:", v10, 56.0);
  _Block_release(v10);

}

uint64_t sub_283AC0(uint64_t a1)
{
  swift_retain();
  sub_2838F4();
  return swift_release(a1);
}

void sub_283AE8(void *a1, uint64_t a2, void (*a3)(void))
{
  uint64_t v5;
  uint64_t Strong;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  _BYTE v11[24];

  v5 = a2 + 16;
  swift_beginAccess(a2 + 16, v11, 0, 0);
  Strong = swift_weakLoadStrong(v5);
  if (Strong)
  {
    v7 = Strong;
    swift_beginAccess(Strong + 104, &v10, 1, 0);
    v8 = *(void **)(v7 + 104);
    *(_QWORD *)(v7 + 104) = a1;
    v9 = a1;
    swift_release(v7);

  }
  if (a3)
    a3();
}

Swift::Void __swiftcall AccountPresenter.didLoad()()
{
  uint64_t *v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = *v0;
  v2 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  objc_msgSend(v2, "addObserver:selector:name:object:", v0, "profilePictureStoreDidChange", CFSTR("ASKProfilePictureStoreDidChange"), 0);

  v3 = swift_allocObject(&unk_38D398, 24, 7);
  swift_weakInit(v3 + 16);
  v4 = (_QWORD *)swift_allocObject(&unk_38D3C0, 40, 7);
  v4[2] = *(_QWORD *)(v1 + 288);
  v4[3] = *(_QWORD *)(v1 + 296);
  v4[4] = v3;
  swift_retain();
  sub_28398C((uint64_t)sub_2870BC, (uint64_t)v4);
  swift_release(v3);
  swift_release(v4);
}

uint64_t sub_283C64(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  _BYTE v4[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v4, 0, 0);
  result = swift_weakLoadStrong(v1);
  if (result)
  {
    v3 = result;
    _s8ShelfKit16AccountPresenterC6update13ignoringCacheySb_tF_0();
    return swift_release(v3);
  }
  return result;
}

uint64_t sub_283CB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  id v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[24];

  v5 = a1 + 16;
  swift_beginAccess(a1 + 16, v14, 0, 0);
  result = swift_weakLoadStrong(v5);
  if (result)
  {
    v7 = result;
    swift_retain();
    sub_D28C(1);
    swift_release(v7);
    v8 = objc_msgSend((id)objc_opt_self(ACAccountStore), "ams_sharedAccountStore");
    v9 = objc_msgSend(v8, "ams_activeiTunesAccount");

    swift_beginAccess(v7 + 96, &v13, 1, 0);
    v10 = *(void **)(v7 + 96);
    *(_QWORD *)(v7 + 96) = v9;

    v11 = FlowTransitionSource.view.getter();
    if (v11)
    {
      v12 = v11;
      (*(void (**)(uint64_t))(*(_QWORD *)(a3 + 16) + 16))(a2);
      swift_unknownObjectRelease(v12);
    }
    swift_retain();
    sub_D28C(0);
    return swift_release_n(v7, 2);
  }
  return result;
}

uint64_t AccountPresenter.sectionCount.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  v1 = *v0;
  if (AccountPresenter.signedIn.getter())
  {
    v3 = sub_283090();
    v5 = type metadata accessor for AccountPresenter.AccountSection(0, *(_QWORD *)(v1 + 288), *(_QWORD *)(v1 + 296), v4);
    v6 = Array.count.getter(v3, v5);
    swift_bridgeObjectRelease();
    return v6;
  }
  else
  {
    v8 = v0[21];
    v9 = type metadata accessor for AccountPresenter.AccountSection(0, *(_QWORD *)(v1 + 288), *(_QWORD *)(v1 + 296), v2);
    return Array.count.getter(v8, v9);
  }
}

uint64_t AccountPresenter.accountSection(for:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v3 = *v1;
  if (AccountPresenter.signedIn.getter())
  {
    v5 = sub_283090();
    v7 = type metadata accessor for AccountPresenter.AccountSection(0, *(_QWORD *)(v3 + 288), *(_QWORD *)(v3 + 296), v6);
    Array.subscript.getter(&v11, a1, v5, v7);
    swift_bridgeObjectRelease();
  }
  else
  {
    v8 = v1[21];
    v9 = type metadata accessor for AccountPresenter.AccountSection(0, *(_QWORD *)(v3 + 288), *(_QWORD *)(v3 + 296), v4);
    Array.subscript.getter(&v11, a1, v8, v9);
  }
  return v11;
}

Swift::Int __swiftcall AccountPresenter.numberOfItems(in:)(Swift::Int in)
{
  uint64_t v1;
  char v2;
  Swift::Int v3;

  v1 = AccountPresenter.accountSection(for:)(in);
  if (v2)
  {
    if (v2 == 1)
    {
      v3 = *(_QWORD *)(v1 + 16);
      sub_286BE4(v1, 1u);
    }
    else
    {
      return qword_3037F8[v1];
    }
  }
  else
  {
    v3 = *(_QWORD *)(v1 + 16);
    sub_286BE4(v1, 0);
  }
  return v3;
}

uint64_t AccountPresenter.itemText(at:)()
{
  uint64_t v0;
  __n128 v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  id v8;
  unint64_t v9;
  const char *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t countAndFlagsBits;
  unint64_t v17;
  Swift::String v18;
  uint64_t v19;
  unint64_t v21;

  v0 = type metadata accessor for PersonNameComponents(0);
  v1 = __chkstk_darwin(v0);
  v2 = IndexPath.item.getter(v1);
  v3 = IndexPath.section.getter();
  v4 = AccountPresenter.accountSection(for:)(v3);
  v6 = v4;
  if (!v5)
  {
    if ((v2 & 0x8000000000000000) == 0)
    {
      if (v2 < *(_QWORD *)(v4 + 16))
      {
        v11 = (_QWORD *)(v4 + 32 * v2);
        v13 = (uint64_t (*)(uint64_t))v11[4];
        v12 = v11[5];
        v14 = v11[6];
        swift_retain();
        v15 = swift_retain();
        countAndFlagsBits = v13(v15);
        sub_286BE4(v6, 0);
        swift_release(v14);
        swift_release(v12);
        return countAndFlagsBits;
      }
LABEL_17:
      __break(1u);
      JUMPOUT(0x2843ECLL);
    }
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v5 != 1)
    __asm { BR              X9 }
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (v2 >= *(_QWORD *)(v4 + 16))
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v7 = *(_BYTE *)(v4 + v2 + 32);
  v8 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  if ((v7 & 1) != 0)
  {
    v9 = 0xD000000000000021;
    v21 = 0xE000000000000000;
    v10 = "ACCOUNT_FAVORITE_CATEGORIES_TITLE";
  }
  else
  {
    v9 = 0xD00000000000001BLL;
    v21 = 0xE000000000000000;
    v10 = "ACCOUNT_NOTIFICATIONS_TITLE";
  }
  v17 = (unint64_t)(v10 - 32) | 0x8000000000000000;
  v18._countAndFlagsBits = 0;
  v18._object = (void *)0xE000000000000000;
  v19 = 0;
  countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v9, (Swift::String_optional)0, (NSBundle)v8, v18, *(Swift::String *)(&v21 - 1))._countAndFlagsBits;
  sub_286BE4(v6, 1u);

  return countAndFlagsBits;
}

uint64_t AccountPresenter.itemSubtitle(at:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 v3;
  double v5;
  void *v6;
  id v7;
  void *v8;
  uint64_t v9;
  _BYTE v11[24];

  v1 = IndexPath.section.getter();
  v2 = AccountPresenter.accountSection(for:)(v1);
  if (v3 != 2 || v2 != 3)
  {
    sub_286BE4(v2, v3);
    return 0;
  }
  if (!AccountPresenter.signedIn.getter())
    return 0;
  *(_QWORD *)&v5 = swift_beginAccess(v0 + 96, v11, 0, 0).n128_u64[0];
  v6 = *(void **)(v0 + 96);
  if (!v6)
    return 0;
  v7 = objc_msgSend(v6, "username", v5);
  if (!v7)
    return 0;
  v8 = v7;
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);

  return v9;
}

uint64_t AccountPresenter.itemDetail(at:)()
{
  return 0;
}

Swift::String_optional __swiftcall AccountPresenter.footerText(in:)(Swift::Int in)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 v3;
  void *v4;
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  id v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t countAndFlagsBits;
  void *v19;
  void *object;
  uint64_t v21;
  void *v22;
  id v23;
  unint64_t v24;
  unint64_t v25;
  Swift::String v26;
  uint64_t v27;
  Swift::String v28;
  Swift::String_optional result;
  unint64_t v30;
  _BYTE v31[24];
  Swift::String v32;

  v2 = AccountPresenter.accountSection(for:)(in);
  if (v3 != 2)
    goto LABEL_11;
  if (v2 == 1)
  {
    if (AccountPresenter.signedIn.getter())
      goto LABEL_12;
    v23 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v24 = 0xD00000000000001BLL;
    v30 = 0xE000000000000000;
    v25 = 0x8000000000314F90;
LABEL_17:
    v26._countAndFlagsBits = 0;
    v26._object = (void *)0xE000000000000000;
    v27 = 0;
    v28 = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v24, (Swift::String_optional)0, (NSBundle)v23, v26, *(Swift::String *)(&v30 - 1));
    countAndFlagsBits = v28._countAndFlagsBits;
    object = v28._object;

    goto LABEL_13;
  }
  if (v2 == 2)
  {
    v23 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v30 = 0xE000000000000000;
    v25 = 0x8000000000314F70;
    v24 = 0xD000000000000013;
    goto LABEL_17;
  }
  if (v2 != 3)
  {
LABEL_11:
    sub_286BE4(v2, v3);
    goto LABEL_12;
  }
  swift_beginAccess(v1 + 96, v31, 0, 0);
  v4 = *(void **)(v1 + 96);
  if (!v4)
  {
LABEL_12:
    countAndFlagsBits = 0;
    object = 0;
    goto LABEL_13;
  }
  v5 = v4;
  v6 = objc_msgSend(v5, "ams_creditsString");
  if (!v6)
  {

    goto LABEL_12;
  }
  v7 = v6;
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  v10 = v9;

  v11 = HIBYTE(v10) & 0xF;
  if ((v10 & 0x2000000000000000) == 0)
    v11 = v8 & 0xFFFFFFFFFFFFLL;
  if (!v11)
  {

    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  v12 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v32._object = (void *)0xE000000000000000;
  v13._countAndFlagsBits = 0x5F544E554F434341;
  v13._object = (void *)0xEE00544944455243;
  v14._countAndFlagsBits = 0;
  v14._object = (void *)0xE000000000000000;
  v32._countAndFlagsBits = 0;
  v15 = NSLocalizedString(_:tableName:bundle:value:comment:)(v13, (Swift::String_optional)0, (NSBundle)v12, v14, v32);

  v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8E10);
  v17 = swift_allocObject(v16, 72, 7);
  *(_OWORD *)(v17 + 16) = xmmword_2EA0D0;
  *(_QWORD *)(v17 + 56) = &type metadata for String;
  *(_QWORD *)(v17 + 64) = sub_22F20();
  *(_QWORD *)(v17 + 32) = v8;
  *(_QWORD *)(v17 + 40) = v10;
  countAndFlagsBits = String.init(format:_:)(v15._countAndFlagsBits, v15._object, v17);
  object = v19;

  swift_bridgeObjectRelease();
LABEL_13:
  v21 = countAndFlagsBits;
  v22 = object;
  result.value._object = v22;
  result.value._countAndFlagsBits = v21;
  return result;
}

uint64_t AccountPresenter.placeholderText(at:)()
{
  uint64_t v0;
  uint64_t v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  int v4;
  __n128 v5;
  uint64_t v6;
  id v8;
  const char *v9;
  uint64_t countAndFlagsBits;
  Swift::String v11;
  Swift::String v12;
  uint64_t v13;
  unint64_t v15;

  v0 = IndexPath.section.getter();
  v1 = AccountPresenter.accountSection(for:)(v0);
  v3 = v2;
  v4 = v2;
  v6 = IndexPath.item.getter(v5);
  if (v4 == 2 && v1 == 0)
  {
    if (v6 == 1)
    {
      v8 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v15 = 0xE000000000000000;
      v9 = "ACCOUNT_REQUIRED";
    }
    else
    {
      if (v6)
        return 0;
      v8 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v15 = 0xE000000000000000;
      v9 = "ACCOUNT_APPLE_ID";
    }
    v11._object = (void *)((unint64_t)(v9 - 32) | 0x8000000000000000);
    v11._countAndFlagsBits = 0xD000000000000010;
    v12._countAndFlagsBits = 0;
    v12._object = (void *)0xE000000000000000;
    v13 = 0;
    countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v11, (Swift::String_optional)0, (NSBundle)v8, v12, *(Swift::String *)(&v15 - 1))._countAndFlagsBits;

    return countAndFlagsBits;
  }
  sub_286BE4(v1, v3);
  return 0;
}

uint64_t AccountPresenter.title.getter()
{
  id v0;
  Swift::String v1;
  Swift::String v2;
  uint64_t countAndFlagsBits;
  Swift::String v5;

  v0 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v5._object = (void *)0xE000000000000000;
  v1._countAndFlagsBits = 0x544E554F434341;
  v1._object = (void *)0xE700000000000000;
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  v5._countAndFlagsBits = 0;
  countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v1, (Swift::String_optional)0, (NSBundle)v0, v2, v5)._countAndFlagsBits;

  return countAndFlagsBits;
}

void sub_284920(char a1, uint64_t a2)
{
  uint64_t v2;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13;
  void *v14;
  id v15;
  id v16;

  *(_BYTE *)(v2 + 128) = 0;
  sub_282BB0();
  if ((a1 & 1) != 0)
  {
    *(_QWORD *)(v2 + 136) = 0;
    *(_QWORD *)(v2 + 144) = 0;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v2 + 152) = 0;
    *(_QWORD *)(v2 + 160) = 0;
    swift_bridgeObjectRelease();
    _s8ShelfKit16AccountPresenterC6update13ignoringCacheySb_tF_0();
    return;
  }
  *(_QWORD *)(v2 + 152) = 0;
  *(_QWORD *)(v2 + 160) = 0;
  swift_bridgeObjectRelease();
  if (a2)
  {
    v16 = (id)_convertErrorToNSError(_:)(a2);
    v5 = objc_msgSend(v16, "ams_underlyingError");
    if (!v5)
    {
      v14 = v16;
LABEL_13:

      return;
    }
    v15 = v5;
    v6 = objc_msgSend(v5, "domain");
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
    v9 = v8;

    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(AMSServerErrorDomain);
    if (v7 != v10 || v9 != v11)
    {
      v13 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v13 & 1) == 0)
        sub_284A80();

      v14 = v15;
      goto LABEL_13;
    }

    swift_bridgeObjectRelease_n(v9, 2);
  }
}

void sub_284A80()
{
  uint64_t v0;
  void *v1;
  id v2;
  Swift::String v3;
  Swift::String v4;
  void *object;
  id v6;
  Swift::String v7;
  Swift::String v8;
  void *v9;
  NSString v10;
  NSString v11;
  id v12;
  id v13;
  Swift::String v14;
  Swift::String v15;
  void *v16;
  NSString v17;
  id v18;
  void *Strong;
  void *v20;
  _BYTE v21[24];
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;

  v1 = (void *)objc_opt_self(NSBundle);
  v2 = objc_msgSend(v1, "mainBundle");
  v22._object = (void *)0xE000000000000000;
  v3._object = (void *)0x80000000003151F0;
  v3._countAndFlagsBits = 0xD000000000000015;
  v4._countAndFlagsBits = 0;
  v4._object = (void *)0xE000000000000000;
  v22._countAndFlagsBits = 0;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v3, (Swift::String_optional)0, (NSBundle)v2, v4, v22)._object;

  v6 = objc_msgSend(v1, "mainBundle");
  v7._countAndFlagsBits = 0xD00000000000001BLL;
  v23._object = (void *)0xE000000000000000;
  v7._object = (void *)0x8000000000315210;
  v8._countAndFlagsBits = 0;
  v8._object = (void *)0xE000000000000000;
  v23._countAndFlagsBits = 0;
  v9 = NSLocalizedString(_:tableName:bundle:value:comment:)(v7, (Swift::String_optional)0, (NSBundle)v6, v8, v23)._object;

  v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v9);
  v12 = objc_msgSend((id)objc_opt_self(UIAlertController), "alertControllerWithTitle:message:preferredStyle:", v10, v11, 1);

  v13 = objc_msgSend(v1, "mainBundle");
  v24._object = (void *)0xE000000000000000;
  v14._countAndFlagsBits = 0x4F5F4E4F49544341;
  v14._object = (void *)0xE90000000000004BLL;
  v15._countAndFlagsBits = 0;
  v15._object = (void *)0xE000000000000000;
  v24._countAndFlagsBits = 0;
  v16 = NSLocalizedString(_:tableName:bundle:value:comment:)(v14, (Swift::String_optional)0, (NSBundle)v13, v15, v24)._object;

  v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v16);
  v18 = objc_msgSend((id)objc_opt_self(UIAlertAction), "actionWithTitle:style:handler:", v17, 0, 0);

  objc_msgSend(v12, "addAction:", v18);
  swift_beginAccess(v0 + 200, v21, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v0 + 200);
  if (Strong)
  {
    v20 = Strong;
    objc_msgSend(Strong, "presentViewController:animated:completion:", v12, 1, 0);

  }
}

Swift::Void __swiftcall AccountPresenter.signIn()()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  id v3;
  id v4;
  NSString v5;
  id v6;
  uint64_t Strong;
  void *v8;
  id v9;
  id v10;
  id v11;
  NSString v12;
  _BYTE v13[24];

  AccountPresenter.accountName.getter();
  if (v1)
  {
    if (*(_QWORD *)(v0 + 160))
    {
      *(_BYTE *)(v0 + 128) = 1;
      swift_bridgeObjectRetain();
      sub_282BB0();
      v2 = objc_msgSend(objc_allocWithZone((Class)AMSAuthenticateOptions), "init");
      objc_msgSend(v2, "setAuthenticationType:", 0);
      v3 = objc_allocWithZone((Class)AMSAuthenticateRequest);
      v4 = v2;
      v5 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v6 = objc_msgSend(v3, "initWithDSID:altDSID:username:options:", 0, 0, v5, v4);

      swift_beginAccess(v0 + 200, v13, 0, 0);
      Strong = swift_unknownObjectWeakLoadStrong(v0 + 200);
      if (Strong)
      {
        v8 = (void *)Strong;
        v9 = objc_allocWithZone((Class)AMSUIAuthenticateTask);
        v10 = v6;
        v11 = objc_msgSend(v9, "initWithRequest:presentingViewController:", v10, v8);

      }
      else
      {
        v11 = objc_msgSend(objc_allocWithZone((Class)AMSAuthenticateTask), "initWithRequest:", v6);
      }
      v12 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      objc_msgSend(v11, "setRawPassword:", v12);

      swift_retain();
      sub_284EF8(v11, (uint64_t)sub_287020, v0);

      swift_release();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
}

void sub_284EF8(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  id v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  _QWORD v13[5];
  uint64_t v14;

  v6 = objc_msgSend(a1, "performAuthentication");
  sub_286900();
  v7 = *(void **)(v3 + 112);
  *(_QWORD *)(v3 + 112) = v6;

  v8 = *(void **)(v3 + 112);
  if (v8)
  {
    v9 = swift_allocObject(&unk_38D608, 32, 7);
    *(_QWORD *)(v9 + 16) = a2;
    *(_QWORD *)(v9 + 24) = a3;
    v13[4] = sub_286FD8;
    v14 = v9;
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 1107296256;
    v13[2] = sub_E60F4;
    v13[3] = &block_descriptor_26;
    v10 = _Block_copy(v13);
    v11 = v14;
    v12 = v8;
    swift_retain();
    swift_release(v11);
    objc_msgSend(v12, "addFinishBlock:", v10);
    _Block_release(v10);

  }
}

uint64_t sub_284FF0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void *v15;
  _QWORD *v16;
  void *v17;
  _QWORD *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v25;
  uint64_t v26;
  _QWORD aBlock[5];
  _QWORD *v28;

  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v26 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for DispatchQoS(0);
  v11 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_327F8(0, (unint64_t *)&qword_3B8710, OS_dispatch_queue_ptr);
  v15 = (void *)static OS_dispatch_queue.main.getter(v14);
  v16 = (_QWORD *)swift_allocObject(&unk_38D658, 48, 7);
  v16[2] = a1;
  v16[3] = a2;
  v16[4] = a3;
  v16[5] = a4;
  aBlock[4] = sub_287014;
  v28 = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_2C9F4;
  aBlock[3] = &block_descriptor_32;
  v17 = _Block_copy(aBlock);
  v18 = v28;
  v19 = a1;
  swift_errorRetain(a2);
  swift_retain();
  v20 = swift_release(v18);
  static DispatchQoS.unspecified.getter(v20);
  aBlock[0] = _swiftEmptyArrayStorage;
  v21 = sub_F1C0((unint64_t *)&qword_3B4420, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8720);
  v23 = sub_724B4();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v22, v23, v8, v21);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v10, v17);
  _Block_release(v17);

  (*(void (**)(char *, uint64_t))(v26 + 8))(v10, v8);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v25);
}

uint64_t sub_285208(void *a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (a1 && !a2 && (v5 = objc_msgSend(a1, "account"), v5, v5))
  {
    v6 = 1;
  }
  else
  {
    v7 = static os_log_type_t.error.getter();
    sub_327F8(0, (unint64_t *)&qword_3B0CF0, OS_os_log_ptr);
    v8 = (void *)OS_os_log.init(subsystem:category:)(0xD000000000000012);
    v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8E10);
    v10 = swift_allocObject(v9, 72, 7);
    *(_OWORD *)(v10 + 16) = xmmword_2EA0D0;
    v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C54B0);
    v12 = Optional.debugDescription.getter(v11);
    v14 = v13;
    *(_QWORD *)(v10 + 56) = &type metadata for String;
    *(_QWORD *)(v10 + 64) = sub_22F20();
    *(_QWORD *)(v10 + 32) = v12;
    *(_QWORD *)(v10 + 40) = v14;
    os_log(_:dso:log:_:_:)(v7, &dword_0, v8, "Authentication Task Failed %@", 29, 2, v10);

    swift_bridgeObjectRelease();
    v6 = 0;
  }
  return a3(v6, a2);
}

void sub_285384()
{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  id v11;
  id v12;
  _QWORD aBlock[6];

  v1 = *v0;
  v2 = (void *)objc_opt_self(ACAccountStore);
  v3 = objc_msgSend(v2, "ams_sharedAccountStore");
  v12 = objc_msgSend(v3, "ams_activeiTunesAccount");

  if (v12)
  {
    objc_msgSend(v12, "setActive:", 0);
    v4 = objc_msgSend(v2, "ams_sharedAccountStore");
    v5 = objc_msgSend(v4, "ams_saveAccount:", v12);

    objc_msgSend((id)v0[15], "cancel");
    v6 = (void *)v0[15];
    v0[15] = (uint64_t)v5;

    v7 = (void *)v0[15];
    if (v7)
    {
      v8 = swift_allocObject(&unk_38D398, 24, 7);
      swift_weakInit(v8 + 16);
      v9 = (_QWORD *)swift_allocObject(&unk_38D5B8, 40, 7);
      v9[2] = *(_QWORD *)(v1 + 288);
      v9[3] = *(_QWORD *)(v1 + 296);
      v9[4] = v8;
      aBlock[4] = sub_286F90;
      aBlock[5] = v9;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_2856BC;
      aBlock[3] = &block_descriptor_29;
      v10 = _Block_copy(aBlock);
      v11 = v7;
      swift_release();
      objc_msgSend(v11, "addFinishBlock:", v10);

      _Block_release(v10);
    }
    else
    {

    }
  }
}

uint64_t sub_285558(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  _QWORD v14[3];

  v3 = a3 + 16;
  if ((a1 & 1) == 0)
  {
    v5 = static os_log_type_t.error.getter();
    sub_327F8(0, (unint64_t *)&qword_3B0CF0, OS_os_log_ptr);
    v6 = (void *)OS_os_log.init(subsystem:category:)(0xD000000000000012);
    v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8E10);
    v8 = swift_allocObject(v7, 72, 7);
    *(_OWORD *)(v8 + 16) = xmmword_2EA0D0;
    v14[0] = a2;
    v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C54B0);
    v10 = Optional.debugDescription.getter(v9);
    v12 = v11;
    *(_QWORD *)(v8 + 56) = &type metadata for String;
    *(_QWORD *)(v8 + 64) = sub_22F20();
    *(_QWORD *)(v8 + 32) = v10;
    *(_QWORD *)(v8 + 40) = v12;
    os_log(_:dso:log:_:_:)(v5, &dword_0, v6, "Failed to sign out %@", 21, 2, v8);

    swift_bridgeObjectRelease();
  }
  swift_beginAccess(v3, v14, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    _s8ShelfKit16AccountPresenterC6update13ignoringCacheySb_tF_0();
    return swift_release();
  }
  return result;
}

void sub_2856BC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  void (*v6)(uint64_t, void *);
  id v7;

  v6 = *(void (**)(uint64_t, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v7 = a3;
  v6(a2, a3);
  swift_release(v5);

}

BOOL AccountPresenter.shouldSelectItem(at:)()
{
  uint64_t v0;
  uint64_t v1;
  unsigned __int8 v2;

  v0 = IndexPath.section.getter();
  v1 = AccountPresenter.accountSection(for:)(v0);
  if (v2 != 2 || v1 != 1)
  {
    sub_286BE4(v1, v2);
    return 1;
  }
  if (AccountPresenter.signedIn.getter())
    return 1;
  return !AccountPresenter.signedIn.getter() && AccountPresenter.canSignIn.getter();
}

uint64_t AccountPresenter.didSelectItem(at:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  __n128 v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t, uint64_t);
  uint64_t v26;
  unsigned __int8 v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, char *, uint64_t, uint64_t);
  _QWORD v38[2];
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char v42[24];
  uint64_t v43;
  char v44[24];
  uint64_t v45;
  uint64_t v46;

  v39 = *v0;
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B70A0);
  __chkstk_darwin(v1);
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
  __chkstk_darwin(v2);
  v38[1] = (char *)v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for ActionMetrics(0);
  __chkstk_darwin(v4);
  v41 = (char *)v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = type metadata accessor for FlowDestination(0);
  __chkstk_darwin(v40);
  v7 = (_QWORD *)((char *)v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v8);
  v38[0] = (char *)v38 - v9;
  v11 = __chkstk_darwin(v10);
  v12 = IndexPath.section.getter(v11);
  v13 = AccountPresenter.accountSection(for:)(v12);
  v16 = v13;
  if (!v14)
  {
    v19 = IndexPath.item.getter(v15);
    if ((v19 & 0x8000000000000000) == 0)
    {
      if (v19 < *(_QWORD *)(v16 + 16))
      {
        v20 = *(_QWORD *)(v16 + 32 * v19 + 48);
        if (!v20)
          return sub_286BE4(v16, 0);
        v21 = FlowTransitionSource.view.getter();
        if (!v21)
          return sub_286BE4(v16, 0);
        v22 = v21;
        v45 = type metadata accessor for Action(0);
        v46 = sub_F1C0((unint64_t *)&qword_3B28E8, (void (*)(uint64_t))type metadata accessor for Action, (uint64_t)&protocol conformance descriptor for Action);
        v43 = v39;
        *(_QWORD *)v44 = v20;
        *(_QWORD *)v42 = v0;
        v23 = *(_QWORD *)(v39 + 288);
        v24 = *(_QWORD *)(*(_QWORD *)(v39 + 296) + 8);
        v25 = *(void (**)(char *, char *, uint64_t, uint64_t))(v24 + 16);
        swift_retain_n(v20, 3);
        swift_retain();
        swift_retain();
        v25(v44, v42, v23, v24);
        swift_release();
        swift_unknownObjectRelease(v22);
        swift_release_n(v20, 2);
        v26 = v16;
        v27 = 0;
        goto LABEL_17;
      }
LABEL_23:
      __break(1u);
      JUMPOUT(0x285EECLL);
    }
    goto LABEL_21;
  }
  if (v14 != 1)
    __asm { BR              X9 }
  v17 = IndexPath.item.getter(v15);
  if ((v17 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (v17 >= *(_QWORD *)(v16 + 16))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if ((*(_BYTE *)(v16 + v17 + 32) & 1) != 0)
  {
    v18 = 51;
  }
  else
  {
    *v7 = 0;
    v7[1] = 0;
    v18 = 12;
  }
  v29 = swift_storeEnumTagMultiPayload(v7, v40, v18);
  v44[0] = 0;
  v42[0] = 0;
  v30 = (uint64_t)v41;
  static ActionMetrics.notInstrumented.getter(v29);
  v31 = type metadata accessor for FlowAction(0);
  swift_allocObject(v31, *(unsigned int *)(v31 + 48), *(unsigned __int16 *)(v31 + 52));
  v32 = FlowAction.init(_:id:title:presentationContext:animationBehavior:presentationStyle:destinationPageHeader:actionMetrics:)((uint64_t)v7, 0, 0, 0, 0, v44, 0, 48, v42, v30);
  v33 = FlowTransitionSource.view.getter();
  if (v33)
  {
    v34 = v33;
    v45 = v31;
    v46 = sub_F1C0((unint64_t *)&qword_3B0C40, (void (*)(uint64_t))type metadata accessor for FlowAction, (uint64_t)&protocol conformance descriptor for Action);
    v43 = v39;
    *(_QWORD *)v44 = v32;
    *(_QWORD *)v42 = v0;
    v35 = *(_QWORD *)(v39 + 288);
    v36 = *(_QWORD *)(*(_QWORD *)(v39 + 296) + 8);
    v37 = *(void (**)(char *, char *, uint64_t, uint64_t))(v36 + 16);
    swift_retain();
    swift_retain();
    v37(v44, v42, v35, v36);
    swift_unknownObjectRelease(v34);
    swift_release();
    v26 = v16;
    v27 = 1;
LABEL_17:
    sub_286BE4(v26, v27);
    sub_1459C((uint64_t)v42, (uint64_t *)&unk_3BC540);
    return __swift_destroy_boxed_opaque_existential_1(v44);
  }
  swift_release();
  return sub_286BE4(v16, 1u);
}

_QWORD *AccountPresenter.didSelectFooter(at:)()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *result;
  char v4;
  uint64_t v5;
  unsigned __int8 v6;
  id v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(_QWORD *, _QWORD *, uint64_t, uint64_t);
  _QWORD v21[4];
  _QWORD v22[5];
  Swift::String v23;

  v1 = v0;
  v2 = *v0;
  result = (_QWORD *)IndexPath.safeSection.getter();
  if ((v4 & 1) == 0)
  {
    v5 = AccountPresenter.accountSection(for:)((uint64_t)result);
    if (v6 == 2 && v5 == 1)
    {
      v8 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v23._object = (void *)0xE000000000000000;
      v9._object = (void *)0x8000000000314F90;
      v9._countAndFlagsBits = 0xD00000000000001BLL;
      v10._countAndFlagsBits = 0;
      v10._object = (void *)0xE000000000000000;
      v23._countAndFlagsBits = 0;
      v11 = NSLocalizedString(_:tableName:bundle:value:comment:)(v9, (Swift::String_optional)0, (NSBundle)v8, v10, v23);

      v12 = v1[23];
      v13 = v1[24];
      v14 = type metadata accessor for ExternalUrlAction(0);
      swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
      swift_bridgeObjectRetain();
      result = ExternalUrlAction.init(title:urlString:isSensitive:presentationStyle:requiresSignedInUser:)(v11._countAndFlagsBits, (uint64_t)v11._object, v12, v13, 0, 0, 0);
      if (result)
      {
        v15 = result;
        v16 = FlowTransitionSource.view.getter();
        if (v16)
        {
          v17 = v16;
          v22[3] = v14;
          v22[4] = sub_F1C0(&qword_3B6A10, (void (*)(uint64_t))type metadata accessor for ExternalUrlAction, (uint64_t)&protocol conformance descriptor for Action);
          v21[3] = v2;
          v22[0] = v15;
          v21[0] = v1;
          v18 = *(_QWORD *)(v2 + 288);
          v19 = *(_QWORD *)(*(_QWORD *)(v2 + 296) + 8);
          v20 = *(void (**)(_QWORD *, _QWORD *, uint64_t, uint64_t))(v19 + 16);
          swift_retain();
          swift_retain();
          v20(v22, v21, v18, v19);
          swift_unknownObjectRelease(v17);
          swift_release();
          sub_1459C((uint64_t)v21, (uint64_t *)&unk_3BC540);
          return (_QWORD *)__swift_destroy_boxed_opaque_existential_1(v22);
        }
        else
        {
          return (_QWORD *)swift_release();
        }
      }
      else
      {
        __break(1u);
      }
    }
    else
    {
      return (_QWORD *)sub_286BE4(v5, v6);
    }
  }
  return result;
}

void AccountPresenter.__allocating_init()()
{
  _swift_stdlib_reportUnimplementedInitializer("ShelfKit.AccountPresenter", 25, "init()", 6, 0);
  __break(1u);
}

void AccountPresenter.init()()
{
  AccountPresenter.__allocating_init()();
}

uint64_t sub_286144()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 144));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 160));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 168));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 192));
  return swift_unknownObjectWeakDestroy(v0 + 200);
}

id *AccountPresenter.deinit()
{
  id *v0;

  v0 = (id *)BasePresenter.deinit();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_unknownObjectWeakDestroy(v0 + 25);
  return v0;
}

uint64_t AccountPresenter.__deallocating_deinit()
{
  id *v0;

  v0 = AccountPresenter.deinit();
  return swift_deallocClassInstance(v0, 208, 7);
}

uint64_t sub_286230()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  NSURL *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  _BYTE v15[14];
  char v16;
  char v17;

  v0 = type metadata accessor for ActionMetrics(0);
  __chkstk_darwin(v0);
  v2 = &v15[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v3 = type metadata accessor for FlowDestination(0);
  __chkstk_darwin(v3);
  v5 = &v15[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
  __chkstk_darwin(v6);
  v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = ASKFinanceTypeGetUrl(1uLL);
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v9);

  v10 = type metadata accessor for URL(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v8, 0, 1, v10);
  sub_282CC((uint64_t)v8, (uint64_t)v5);
  v11 = swift_storeEnumTagMultiPayload(v5, v3, 24);
  v17 = 5;
  v16 = 0;
  static ActionMetrics.notInstrumented.getter(v11);
  v12 = type metadata accessor for FlowAction(0);
  swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  v13 = FlowAction.init(_:id:title:presentationContext:animationBehavior:presentationStyle:destinationPageHeader:actionMetrics:)((uint64_t)v5, 0, 0, 0, 0, &v17, 0, 48, &v16, (uint64_t)v2);
  result = sub_1459C((uint64_t)v8, &qword_3B4370);
  qword_3C5370 = (uint64_t)sub_286400;
  *(_QWORD *)algn_3C5378 = 0;
  qword_3C5380 = v13;
  byte_3C5388 = 1;
  return result;
}

uint64_t sub_286400()
{
  return sub_286640(0x5F544E554F434341, (void *)0xEE004D4545444552);
}

uint64_t sub_286424()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  NSURL *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  _BYTE v15[14];
  char v16;
  char v17;

  v0 = type metadata accessor for ActionMetrics(0);
  __chkstk_darwin(v0);
  v2 = &v15[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v3 = type metadata accessor for FlowDestination(0);
  __chkstk_darwin(v3);
  v5 = &v15[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
  __chkstk_darwin(v6);
  v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = ASKFinanceTypeGetUrl(2uLL);
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v9);

  v10 = type metadata accessor for URL(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v8, 0, 1, v10);
  sub_282CC((uint64_t)v8, (uint64_t)v5);
  v11 = swift_storeEnumTagMultiPayload(v5, v3, 24);
  v17 = 5;
  v16 = 0;
  static ActionMetrics.notInstrumented.getter(v11);
  v12 = type metadata accessor for FlowAction(0);
  swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  v13 = FlowAction.init(_:id:title:presentationContext:animationBehavior:presentationStyle:destinationPageHeader:actionMetrics:)((uint64_t)v5, 0, 0, 0, 0, &v17, 0, 48, &v16, (uint64_t)v2);
  result = sub_1459C((uint64_t)v8, &qword_3B4370);
  qword_3C5390 = (uint64_t)sub_2865EC;
  *(_QWORD *)algn_3C5398 = 0;
  qword_3C53A0 = v13;
  byte_3C53A8 = 1;
  return result;
}

uint64_t sub_2865EC()
{
  return sub_286640(0xD000000000000011, (void *)0x8000000000315230);
}

uint64_t sub_286608()
{
  return sub_286640(0xD000000000000011, (void *)0x80000000003152C0);
}

uint64_t sub_286624()
{
  return sub_286640(0xD000000000000015, (void *)0x8000000000315250);
}

uint64_t sub_286640(uint64_t a1, void *a2)
{
  id v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t countAndFlagsBits;
  Swift::String v9;

  v4 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v9._object = (void *)0xE000000000000000;
  v5._countAndFlagsBits = a1;
  v5._object = a2;
  v6._countAndFlagsBits = 0;
  v6._object = (void *)0xE000000000000000;
  v9._countAndFlagsBits = 0;
  countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v5, (Swift::String_optional)0, (NSBundle)v4, v6, v9)._countAndFlagsBits;

  return countAndFlagsBits;
}

uint64_t _s8ShelfKit16AccountPresenterC6update13ignoringCacheySb_tF_0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t result;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD aBlock[5];
  _QWORD *v21;

  v1 = *v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = HomePageProvider.episodeOrderingFrozen.getter();
  if ((result & 1) == 0 && (v0[16] & 1) == 0)
  {
    v11 = sub_327F8(0, (unint64_t *)&qword_3B8710, OS_dispatch_queue_ptr);
    v12 = (void *)static OS_dispatch_queue.main.getter(v11);
    v13 = swift_allocObject(&unk_38D398, 24, 7);
    swift_weakInit(v13 + 16);
    v14 = (_QWORD *)swift_allocObject(&unk_38D6F8, 40, 7);
    v14[2] = *(_QWORD *)(v1 + 288);
    v14[3] = *(_QWORD *)(v1 + 296);
    v14[4] = v13;
    aBlock[4] = sub_287068;
    v21 = v14;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_2C9F4;
    aBlock[3] = &block_descriptor_46;
    v15 = _Block_copy(aBlock);
    v16 = swift_release(v21);
    static DispatchQoS.unspecified.getter(v16);
    aBlock[0] = _swiftEmptyArrayStorage;
    v17 = sub_F1C0((unint64_t *)&qword_3B4420, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8720);
    v19 = sub_724B4();
    dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v18, v19, v2, v17);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v5, v15);
    _Block_release(v15);

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  return result;
}

void sub_286900()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 112);
  if (v1)
  {
    v2 = v1;
    if ((objc_msgSend(v2, "isCancelled") & 1) == 0
      && (objc_msgSend(v2, "isFinished") & 1) == 0)
    {
      objc_msgSend(v2, "cancel");
    }

  }
}

uint64_t sub_28696C()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 152);
}

uint64_t sub_286974()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v26;
  uint64_t v27;

  v1 = v0;
  v2 = 0xD000000000000018;
  v3 = *v0;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B70A0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
  __chkstk_darwin(v8);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *((_BYTE *)v0 + 128) = 0;
  *((_OWORD *)v0 + 6) = 0u;
  *((_OWORD *)v0 + 7) = 0u;
  *(_OWORD *)(v0 + 17) = 0u;
  *(_OWORD *)(v0 + 19) = 0u;
  v12 = type metadata accessor for AccountPresenter.AccountSection(255, *(_QWORD *)(v3 + 288), *(_QWORD *)(v3 + 296), v11);
  v13 = type metadata accessor for _ContiguousArrayStorage(0, v12);
  v14 = swift_allocObject(v13, 80, 7);
  swift_retain();
  v15 = static Array._adoptStorage(_:count:)(v14, 3);
  *(_QWORD *)v16 = 0;
  *(_BYTE *)(v16 + 8) = 2;
  *(_QWORD *)(v16 + 16) = 1;
  *(_BYTE *)(v16 + 24) = 2;
  *(_QWORD *)(v16 + 32) = 2;
  *(_BYTE *)(v16 + 40) = 2;
  type metadata accessor for Array(0, v12, v17);
  v0[21] = v15;
  swift_unknownObjectWeakInit(v0 + 25, 0);
  v18 = type metadata accessor for ASKBagContract(0);
  BaseObjectGraph.injectIfAvailable<A>(_:)(v18, v18);
  v19 = v27;
  v0[22] = v27;
  if (v19)
  {
    Bag.subscript.getter(kBagKeyiForgotUrl);
    Bag.Value.currentOrNil()(v4);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v20 = type metadata accessor for URL(0);
    v21 = *(_QWORD *)(v20 - 8);
    v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48))(v10, 1, v20);
    if ((_DWORD)v22 != 1)
    {
      v2 = URL.absoluteString.getter(v22);
      v23 = v24;
      (*(void (**)(char *, uint64_t))(v21 + 8))(v10, v20);
      goto LABEL_6;
    }
    sub_1459C((uint64_t)v10, &qword_3B4370);
  }
  v23 = 0x80000000003152E0;
LABEL_6:
  v1[23] = v2;
  v1[24] = v23;
  swift_release(v1);
  return BasePresenter.init()();
}

uint64_t sub_286BB4()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t type metadata accessor for AccountPresenter.AccountSection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AccountPresenter.AccountSection);
}

uint64_t sub_286BE4(uint64_t result, unsigned __int8 a2)
{
  if (a2 <= 1u)
    return swift_bridgeObjectRelease(result);
  return result;
}

void *sub_286BF8@<X0>(_QWORD *a1@<X8>)
{
  void *result;
  uint64_t v3;

  result = AccountPresenter.accountName.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_286C20(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, AccountPresenter.accountName.setter);
}

uint64_t sub_286C2C()
{
  return 16;
}

__n128 sub_286C38(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_286C44@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;

  *a1 = sub_28696C();
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_286C70(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, AccountPresenter.passwordInputValue.setter);
}

uint64_t keypath_setTm(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;

  v7 = *a1;
  v6 = a1[1];
  swift_bridgeObjectRetain(v6);
  return a5(v7, v6);
}

uint64_t sub_286CBC()
{
  return 16;
}

__n128 sub_286CC8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_286CD4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  _BYTE v5[24];

  v3 = *a1 + 200;
  swift_beginAccess(v3, v5, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v3);
  *a2 = result;
  return result;
}

uint64_t sub_286D20(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE v5[24];

  v2 = *a1;
  v3 = *a2 + 200;
  swift_beginAccess(v3, v5, 1, 0);
  return swift_unknownObjectWeakAssign(v3, v2);
}

uint64_t sub_286D6C()
{
  return 16;
}

__n128 sub_286D78(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_286D84(uint64_t a1)
{
  _QWORD v2[11];

  v2[0] = "\b";
  v2[1] = "\b";
  v2[4] = &unk_303770;
  v2[5] = &unk_303788;
  v2[6] = &unk_303788;
  v2[7] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v2[2] = "\b";
  v2[3] = "\b";
  v2[8] = "\b";
  v2[9] = &unk_3037A0;
  v2[10] = &unk_3037B8;
  return swift_initClassMetadata2(a1, 0, 11, v2, a1 + 304);
}

uint64_t type metadata accessor for AccountPresenter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AccountPresenter);
}

uint64_t method lookup function for AccountPresenter(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for AccountPresenter);
}

uint64_t dispatch thunk of AccountPresenter.__allocating_init(asPartOf:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 392))();
}

uint64_t sub_286E24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 16);
}

uint64_t sub_286E2C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned __int8 v4;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_286E70(*(_QWORD *)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

uint64_t sub_286E70(uint64_t result, unsigned __int8 a2)
{
  if (a2 <= 1u)
    return swift_bridgeObjectRetain(result);
  return result;
}

uint64_t sub_286E84(uint64_t a1)
{
  return sub_286BE4(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t sub_286E94(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_286E70(*(_QWORD *)a2, v4);
  v5 = *(_QWORD *)a1;
  *(_QWORD *)a1 = v3;
  v6 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v4;
  sub_286BE4(v5, v6);
  return a1;
}

uint64_t sub_286EE4(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v3;
  sub_286BE4(v4, v5);
  return a1;
}

uint64_t sub_286F20(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 1u)
    return *(unsigned __int8 *)(a1 + 8);
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t sub_286F38(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_QWORD *)result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 8) = a2;
  return result;
}

uint64_t sub_286F50()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_286F74()
{
  uint64_t v0;

  return sub_283C64(*(_QWORD *)(v0 + 32));
}

uint64_t sub_286F90(char a1, uint64_t a2)
{
  uint64_t v2;

  return sub_285558(a1, a2, *(_QWORD *)(v2 + 32));
}

uint64_t block_copy_helper_29(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t block_destroy_helper_29(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_286FB4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_286FD8(void *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_284FF0(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_286FE0()
{
  uint64_t v0;

  swift_errorRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_287014()
{
  uint64_t v0;

  return sub_285208(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(uint64_t (**)(uint64_t, uint64_t))(v0 + 32));
}

uint64_t sub_287024()
{
  _QWORD *v0;

  swift_release(v0[4]);
  if (v0[5])
    swift_release(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

void sub_287058(void *a1)
{
  uint64_t v1;

  sub_283AE8(a1, *(_QWORD *)(v1 + 32), *(void (**)(void))(v1 + 40));
}

uint64_t sub_287068()
{
  uint64_t *v0;

  return sub_283CB8(v0[4], v0[2], v0[3]);
}

BOOL sub_287074(uint64_t a1)
{
  return *(_QWORD *)a1 == 1 && *(_BYTE *)(a1 + 8) == 2;
}

double sub_2870C0@<D0>(uint64_t a1@<X8>)
{
  return Paragraph.clickAction.getter(a1);
}

uint64_t ShelfAttributes.pageSize.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ShelfAttributes(0) + 20);
  v4 = type metadata accessor for PageSize(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for ShelfAttributes(uint64_t a1)
{
  uint64_t result;

  result = qword_3C5518;
  if (!qword_3C5518)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ShelfAttributes);
  return result;
}

uint64_t ShelfAttributes.init(sizeClass:pageSize:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  _BYTE *v4;
  uint64_t v5;

  *a3 = a1;
  v4 = &a3[*(int *)(type metadata accessor for ShelfAttributes(0) + 20)];
  v5 = type metadata accessor for PageSize(0);
  return (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(v4, a2, v5);
}

uint64_t static ShelfAttributes.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v4;
  double v5;
  uint64_t v6;

  v4 = *a2;
  v5 = SizeClass.rawValue.getter(*a1);
  if (v5 != SizeClass.rawValue.getter(v4))
    return 0;
  v6 = *(int *)(type metadata accessor for ShelfAttributes(0) + 20);
  return static PageSize.== infix(_:_:)(&a1[v6], &a2[v6]);
}

uint64_t sub_287224(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6;
  double v7;

  v6 = *a2;
  v7 = SizeClass.rawValue.getter(*a1);
  if (v7 == SizeClass.rawValue.getter(v6))
    return static PageSize.== infix(_:_:)(&a1[*(int *)(a3 + 20)], &a2[*(int *)(a3 + 20)]);
  else
    return 0;
}

uint64_t static TypedShelfUIKitCell.modelType.getter(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a2, a1);
  swift_getAssociatedConformanceWitness(a2, a1, AssociatedTypeWitness, &protocol requirements base descriptor for TypedShelfUIKitCell, &associated conformance descriptor for TypedShelfUIKitCell.TypedShelfUIKitCell.ModelType: ModernShelfItem);
  return AssociatedTypeWitness;
}

uint64_t sub_287304(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  Swift::String v10;
  uint64_t ObjectType;
  Swift::String v12;
  Swift::String v13;
  uint64_t AssociatedTypeWitness;
  Swift::String v15;
  Swift::String v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;

  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = 0;
  v31 = 0xE000000000000000;
  _StringGuts.grow(_:)(52);
  v10._object = (void *)0x800000000030DE00;
  v10._countAndFlagsBits = 0xD00000000000001ALL;
  String.append(_:)(v10);
  ObjectType = swift_getObjectType();
  v12._countAndFlagsBits = _typeName(_:qualified:)(ObjectType, 0);
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 0x7374636570786520;
  v13._object = (void *)0xE900000000000020;
  String.append(_:)(v13);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a3, a2);
  v15._countAndFlagsBits = _typeName(_:qualified:)(AssociatedTypeWitness, 0);
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._countAndFlagsBits = 0x766965636572202CLL;
  v16._object = (void *)0xEB00000000206465;
  String.append(_:)(v16);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0A50);
  _print_unlocked<A, B>(_:_:)(a1, &v30, v17, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v19 = v30;
  v18 = v31;
  static Logger.ui.getter(v20);
  v21 = swift_bridgeObjectRetain();
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.fault.getter(v22);
  if (os_log_type_enabled(v22, v23))
  {
    v24 = (uint8_t *)swift_slowAlloc(12, -1);
    v25 = swift_slowAlloc(32, -1);
    v28 = v6;
    v26 = v25;
    v30 = v25;
    *(_DWORD *)v24 = 136315138;
    swift_bridgeObjectRetain();
    v29 = sub_69298(v19, v18, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30);
    swift_bridgeObjectRelease_n(v18, 3);
    _os_log_impl(&dword_0, v22, v23, "%s", v24, 0xCu);
    swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v24, -1, -1);

    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v28);
  }
  else
  {

    swift_bridgeObjectRelease_n(v18, 2);
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
}

uint64_t TypedShelfUIKitCell.apply(model:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  int v16;
  void (*v17)(_BYTE *, uint64_t, uint64_t, uint64_t);
  _BYTE v20[40];

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a3, a2);
  v7 = type metadata accessor for Optional(0, AssociatedTypeWitness);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = &v20[-v9 - 8];
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(v12);
  v14 = &v20[-v13 - 8];
  sub_150C8(a1, (uint64_t)v20);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0A50);
  v16 = swift_dynamicCast(v10, v20, v15, AssociatedTypeWitness, 6);
  v17 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v11 + 56);
  if (v16)
  {
    v17(v10, 0, 1, AssociatedTypeWitness);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v11 + 32))(v14, v10, AssociatedTypeWitness);
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(a3 + 32))(v14, a2, a3);
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v11 + 8))(v14, AssociatedTypeWitness);
  }
  else
  {
    v17(v10, 1, 1, AssociatedTypeWitness);
    (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v7);
    return sub_287304(a1, a2, a3);
  }
}

BOOL ShelfUIKitCell.doesCellOverrideClickAction.getter(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;
  _QWORD v4[5];

  (*(void (**)(_QWORD *__return_ptr))(a2 + 72))(v4);
  v2 = v4[3] != 0;
  sub_1459C((uint64_t)v4, &qword_3B0C50);
  return v2;
}

uint64_t ShelfUIKitCell.perform(_:from:in:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[6];

  v10 = type metadata accessor for ActionOutcome(0);
  v26 = *(_QWORD *)(v10 - 8);
  v27 = v10;
  __chkstk_darwin(v10);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for OSLogger(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(uint64_t (**)(uint64_t, uint64_t, __n128))(a5 + 24))(a4, a5, v15))
  {
    type metadata accessor for ActionRunnerOptions(0);
    v18 = swift_retain();
    BaseObjectGraph.__allocating_init(_:)(v18);
    sub_236BC(a2, (uint64_t)v28);
    v28[4] = a3;
    v19 = a3;
    v20 = _s8ShelfKit19ActionRunnerOptionsC04withC6OriginyACXDAA0cG0VSgF_0((uint64_t)v28);
    sub_1459C((uint64_t)v28, &qword_3B18E8);
    swift_release();
    sub_150C8(a1, (uint64_t)v28);
    v28[5] = v20;
    v21 = ActionPerformer.callAsFunction()();
    swift_release();
    sub_23740(v28);
  }
  else
  {
    static OSLogger.actions.getter(0);
    v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0B10);
    v23 = type metadata accessor for LogMessage(0);
    v24 = swift_allocObject(v22, ((*(unsigned __int8 *)(*(_QWORD *)(v23 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v23 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v23 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v23 - 8) + 80) | 7);
    *(_OWORD *)(v24 + 16) = xmmword_2EA0D0;
    LogMessage.init(stringLiteral:)(0xD000000000000031, 0x8000000000315300);
    Logger.error(_:)(v24, v13, &protocol witness table for OSLogger);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
    __swift_instantiateConcreteTypeFromMangledName(&qword_3BC108);
    (*(void (**)(char *, _QWORD, uint64_t))(v26 + 104))(v12, enum case for ActionOutcome.unsupported(_:), v27);
    return Promise.__allocating_init(value:)(v12);
  }
  return v21;
}

uint64_t LibraryActionControllerProtocol.subscribe(podcast:displaySuccessHUD:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 56))();
}

uint64_t *initializeBufferWithCopyOfBuffer for ShelfAttributes(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v9);
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v5 = *(int *)(a3 + 20);
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    v8 = type metadata accessor for PageSize(0);
    (*(void (**)(_BYTE *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t destroy for ShelfAttributes(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 20);
  v3 = type metadata accessor for PageSize(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

_BYTE *initializeWithCopy for ShelfAttributes(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = &a1[v4];
  v6 = &a2[v4];
  v7 = type metadata accessor for PageSize(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

_BYTE *assignWithCopy for ShelfAttributes(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = &a1[v4];
  v6 = &a2[v4];
  v7 = type metadata accessor for PageSize(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

_BYTE *initializeWithTake for ShelfAttributes(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = &a1[v4];
  v6 = &a2[v4];
  v7 = type metadata accessor for PageSize(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_BYTE *assignWithTake for ShelfAttributes(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = &a1[v4];
  v6 = &a2[v4];
  v7 = type metadata accessor for PageSize(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for ShelfAttributes(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_287C24);
}

uint64_t sub_287C24(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v8;

  if ((_DWORD)a2 == 248)
  {
    v4 = *a1;
    if (v4 >= 8)
      return v4 - 7;
    else
      return 0;
  }
  else
  {
    v8 = type metadata accessor for PageSize(0);
    return (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for ShelfAttributes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_287CA4);
}

_BYTE *sub_287CA4(_BYTE *result, uint64_t a2, int a3, uint64_t a4)
{
  _BYTE *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 248)
  {
    *result = a2 + 7;
  }
  else
  {
    v7 = type metadata accessor for PageSize(0);
    return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_287D14(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_3038E0;
  result = type metadata accessor for PageSize(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

unint64_t LocationFields.metricsFields.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t inited;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _BYTE v17[280];

  v2 = *v0;
  v1 = v0[1];
  v3 = *((unsigned __int8 *)v0 + 16);
  v5 = v0[3];
  v4 = v0[4];
  v6 = v0[5];
  v7 = v0[6];
  v8 = v0[7];
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B5020);
  inited = swift_initStackObject(v9, v17);
  v11 = inited;
  *(_OWORD *)(inited + 16) = xmmword_2F27F0;
  *(_QWORD *)(inited + 32) = 25705;
  *(_QWORD *)(inited + 40) = 0xE200000000000000;
  *(_QWORD *)(inited + 48) = v2;
  *(_QWORD *)(inited + 56) = v1;
  *(_QWORD *)(inited + 72) = &type metadata for String;
  *(_QWORD *)(inited + 80) = 0x657079546469;
  v12 = 0xE600000000000000;
  *(_QWORD *)(inited + 88) = 0xE600000000000000;
  if (v3)
  {
    if (v3 == 1)
    {
      v13 = 0x64695F737469;
    }
    else
    {
      v12 = 0xED00006449746E65;
      v13 = 0x746E6F635F737469;
    }
  }
  else
  {
    v12 = 0xEA00000000006C61;
    v13 = 0x69746E6575716573;
  }
  *(_QWORD *)(inited + 96) = v13;
  *(_QWORD *)(inited + 104) = v12;
  *(_QWORD *)(inited + 120) = &type metadata for String;
  *(_QWORD *)(inited + 128) = 0xD000000000000010;
  *(_QWORD *)(inited + 136) = 0x800000000030DAF0;
  *(_QWORD *)(inited + 144) = v5;
  *(_QWORD *)(inited + 168) = &type metadata for Int;
  strcpy((char *)(inited + 176), "locationType");
  *(_BYTE *)(inited + 189) = 0;
  *(_WORD *)(inited + 190) = -5120;
  *(_QWORD *)(inited + 192) = v4;
  *(_QWORD *)(inited + 200) = v6;
  *(_QWORD *)(inited + 216) = &type metadata for String;
  *(_QWORD *)(inited + 224) = 1701667182;
  *(_QWORD *)(inited + 264) = &type metadata for String;
  if (v8)
    v14 = v7;
  else
    v14 = 0;
  v15 = 0xE000000000000000;
  if (v8)
    v15 = v8;
  *(_QWORD *)(inited + 232) = 0xE400000000000000;
  *(_QWORD *)(inited + 240) = v14;
  *(_QWORD *)(inited + 248) = v15;
  swift_bridgeObjectRetain(v1);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v8);
  return sub_287F38(v11);
}

unint64_t sub_287F38(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_3B1810);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_267BC(v7, (uint64_t)&v16, &qword_3B6B78);
    v8 = v16;
    v9 = v17;
    result = sub_29724(v16, v17);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v8;
    v12[1] = v9;
    result = (unint64_t)sub_1F460(&v18, (_OWORD *)(v4[7] + 32 * result));
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v7 += 48;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_28806C(uint64_t a1)
{
  return sub_28891C(a1, &qword_3C55F0);
}

unint64_t sub_288078(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t result;
  char v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_3C3020);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v7 = *(v6 - 3);
    v8 = *(v6 - 2);
    v10 = *(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    result = sub_29724(v7, v8);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = (uint64_t *)(v4[6] + 16 * result);
    *v13 = v7;
    v13[1] = v8;
    v14 = (_QWORD *)(v4[7] + 16 * result);
    *v14 = v10;
    v14[1] = v9;
    v15 = v4[2];
    v16 = __OFADD__(v15, 1);
    v17 = v15 + 1;
    if (v16)
      goto LABEL_11;
    v6 += 4;
    v4[2] = v17;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_288198(uint64_t a1)
{
  return sub_2881D0(a1, &qword_3C55A8, &qword_3C55B0, (uint64_t (*)(uint64_t))sub_29788);
}

unint64_t sub_2881B4(uint64_t a1)
{
  return sub_2881D0(a1, &qword_3BCFD0, &qword_3C55C0, (uint64_t (*)(uint64_t))sub_29818);
}

unint64_t sub_2881D0(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v5;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;

  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
    v9 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v8 = static _DictionaryStorage.allocate(capacity:)(v5);
  v9 = (_QWORD *)v8;
  v10 = *(_QWORD *)(a1 + 16);
  if (!v10)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v9;
  }
  v11 = v8 + 64;
  v12 = a1 + 32;
  swift_retain(v8);
  while (1)
  {
    sub_267BC(v12, (uint64_t)&v19, a3);
    v13 = v19;
    result = a4(v19);
    if ((v15 & 1) != 0)
      break;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(v9[6] + 8 * result) = v13;
    result = (unint64_t)sub_1F460(&v20, (_OWORD *)(v9[7] + 32 * result));
    v16 = v9[2];
    v17 = __OFADD__(v16, 1);
    v18 = v16 + 1;
    if (v17)
      goto LABEL_11;
    v9[2] = v18;
    v12 += 40;
    if (!--v10)
    {
      swift_release(v9);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_2882F8(uint64_t a1)
{
  return sub_2881D0(a1, &qword_3C3000, &qword_3C55B8, (uint64_t (*)(uint64_t))sub_29788);
}

unint64_t sub_288314(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t v17;
  __int128 v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_3C55E0);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_267BC(v7, (uint64_t)v16, &qword_3C55E8);
    result = sub_29898((uint64_t)v16);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v10 = v4[6] + 40 * result;
    v11 = v16[0];
    v12 = v16[1];
    *(_QWORD *)(v10 + 32) = v17;
    *(_OWORD *)v10 = v11;
    *(_OWORD *)(v10 + 16) = v12;
    result = (unint64_t)sub_1F460(&v18, (_OWORD *)(v4[7] + 32 * result));
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v7 += 72;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_288454(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  __int128 v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_3C3040);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (_OWORD *)(a1 + 48);
  while (1)
  {
    v7 = *((_QWORD *)v6 - 2);
    v8 = *((_QWORD *)v6 - 1);
    v15 = *v6;
    swift_bridgeObjectRetain(v8);
    swift_retain(*((_QWORD *)&v15 + 1));
    result = sub_2993C(v7, v8);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v4[6] + 16 * result);
    *v11 = v7;
    v11[1] = v8;
    *(_OWORD *)(v4[7] + 16 * result) = v15;
    v12 = v4[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v4[2] = v14;
    v6 += 2;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_28857C(uint64_t a1)
{
  return sub_288594(a1, &qword_3C3018);
}

unint64_t sub_288588(uint64_t a1)
{
  return sub_288594(a1, &qword_3C3058);
}

unint64_t sub_288594(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t result;
  char v12;
  uint64_t *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
    v5 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v4 = static _DictionaryStorage.allocate(capacity:)(v3);
  v5 = (_QWORD *)v4;
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v5;
  }
  swift_retain(v4);
  v7 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v8 = *(v7 - 2);
    v9 = *(v7 - 1);
    v10 = *v7;
    swift_bridgeObjectRetain(v9);
    swift_retain(v10);
    result = sub_29724(v8, v9);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = (uint64_t *)(v5[6] + 16 * result);
    *v13 = v8;
    v13[1] = v9;
    *(_QWORD *)(v5[7] + 8 * result) = v10;
    v14 = v5[2];
    v15 = __OFADD__(v14, 1);
    v16 = v14 + 1;
    if (v15)
      goto LABEL_11;
    v5[2] = v16;
    v7 += 3;
    if (!--v6)
    {
      swift_release(v5);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_2886A8(uint64_t a1)
{
  return sub_28891C(a1, &qword_3C1E50);
}

unint64_t sub_2886B4(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_3C55D8);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  v5 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v6 = *(v5 - 3);
    v7 = *(v5 - 2);
    v9 = *(v5 - 1);
    v8 = *v5;
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    result = sub_29724(v6, v7);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v3[6] + 16 * result);
    *v12 = v6;
    v12[1] = v7;
    v13 = (_QWORD *)(v3[7] + 16 * result);
    *v13 = v9;
    v13[1] = v8;
    v14 = v3[2];
    v15 = __OFADD__(v14, 1);
    v16 = v14 + 1;
    if (v15)
      goto LABEL_11;
    v5 += 4;
    v3[2] = v16;
    if (!--v4)
    {
      swift_release(v3);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_2887D4(uint64_t a1)
{
  return sub_2881D0(a1, &qword_3C55C8, &qword_3C55D0, (uint64_t (*)(uint64_t))sub_29788);
}

unint64_t sub_2887F0(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_3C55A0);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  v5 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v6 = *(v5 - 3);
    v7 = *(v5 - 2);
    v9 = *(v5 - 1);
    v8 = *v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = sub_29724(v6, v7);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v3[6] + 16 * result);
    *v12 = v6;
    v12[1] = v7;
    v13 = (_QWORD *)(v3[7] + 16 * result);
    *v13 = v9;
    v13[1] = v8;
    v14 = v3[2];
    v15 = __OFADD__(v14, 1);
    v16 = v14 + 1;
    if (v15)
      goto LABEL_11;
    v5 += 4;
    v3[2] = v16;
    if (!--v4)
    {
      swift_release(v3);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_288910(uint64_t a1)
{
  return sub_28891C(a1, &qword_3C5598);
}

unint64_t sub_28891C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  __int128 v16;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
    v5 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v4 = static _DictionaryStorage.allocate(capacity:)(v3);
  v5 = (_QWORD *)v4;
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v5;
  }
  swift_retain(v4);
  v7 = (_OWORD *)(a1 + 48);
  while (1)
  {
    v8 = *((_QWORD *)v7 - 2);
    v9 = *((_QWORD *)v7 - 1);
    v16 = *v7;
    swift_bridgeObjectRetain(v9);
    result = sub_29724(v8, v9);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v5[6] + 16 * result);
    *v12 = v8;
    v12[1] = v9;
    *(_OWORD *)(v5[7] + 16 * result) = v16;
    v13 = v5[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v5[2] = v15;
    v7 += 2;
    if (!--v6)
    {
      swift_release(v5);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

void sub_288A34(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  _QWORD *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2
    && (__swift_instantiateConcreteTypeFromMangledName(&qword_3C5590),
        v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2),
        (v4 = *(_QWORD *)(a1 + 16)) != 0))
  {
    swift_retain();
    v5 = (_QWORD *)(a1 + 48);
    while (1)
    {
      v6 = *((_BYTE *)v5 - 16);
      v8 = *(v5 - 1);
      v7 = *v5;
      swift_bridgeObjectRetain();
      sub_29B78(v6);
      if ((v10 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v9;
      *(_BYTE *)(v3[6] + v9) = v6;
      v11 = (_QWORD *)(v3[7] + 16 * v9);
      *v11 = v8;
      v11[1] = v7;
      v12 = v3[2];
      v13 = __OFADD__(v12, 1);
      v14 = v12 + 1;
      if (v13)
        goto LABEL_10;
      v5 += 3;
      v3[2] = v14;
      if (!--v4)
      {
        swift_release(v3);
        goto LABEL_8;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
LABEL_8:
    swift_bridgeObjectRelease();
  }
}

unint64_t sub_288B40(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  _QWORD v25[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C5580);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_3C3050);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }
  v10 = &v5[*(int *)(v2 + 48)];
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v25[1] = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_267BC(v13, (uint64_t)v5, &qword_3C5580);
    result = sub_299B0((uint64_t)v5);
    if ((v16 & 1) != 0)
      break;
    v17 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v18 = v8[6];
    v19 = type metadata accessor for UUID(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v17, v5, v19);
    v20 = v8[7] + 24 * v17;
    v21 = *((_QWORD *)v10 + 2);
    *(_OWORD *)v20 = *(_OWORD *)v10;
    *(_QWORD *)(v20 + 16) = v21;
    v22 = v8[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (v23)
      goto LABEL_11;
    v8[2] = v24;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_288CE8(uint64_t a1)
{
  return sub_180428(a1, &qword_3C5578, &qword_3C3028, (uint64_t (*)(char *))sub_29CA0, (uint64_t (*)(_QWORD))&type metadata accessor for URL);
}

unint64_t sub_288D0C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  _QWORD v23[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C5570);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_3C3048);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }
  v10 = *(int *)(v2 + 48);
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v23[1] = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_267BC(v13, (uint64_t)v5, &qword_3C5570);
    result = sub_299B0((uint64_t)v5);
    if ((v16 & 1) != 0)
      break;
    v17 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v18 = v8[6];
    v19 = type metadata accessor for UUID(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v17, v5, v19);
    *(_BYTE *)(v8[7] + v17) = v5[v10];
    v20 = v8[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
      goto LABEL_11;
    v8[2] = v22;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_288EA0(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  id v7;
  id v8;
  unint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_3C5568);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  v5 = (void **)(a1 + 40);
  while (1)
  {
    v6 = *v5;
    v7 = *(v5 - 1);
    v8 = v6;
    result = sub_29818((uint64_t)v7);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = 8 * result;
    *(_QWORD *)(v3[6] + v11) = v7;
    *(_QWORD *)(v3[7] + v11) = v8;
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v5 += 2;
    if (!--v4)
    {
      swift_release(v3);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_288FA8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_3C5558);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_267BC(v7, (uint64_t)&v16, &qword_3C5560);
    v8 = v16;
    v9 = v17;
    result = sub_29724(v16, v17);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v8;
    v12[1] = v9;
    result = sub_31BE8((uint64_t)&v18, v4[7] + 32 * result);
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v7 += 48;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_2890DC(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  id v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_3C5550);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  v5 = (uint64_t *)(a1 + 40);
  while (1)
  {
    v6 = *v5;
    v7 = (id)*(v5 - 1);
    result = sub_29788();
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = 8 * result;
    *(_QWORD *)(v3[6] + v10) = v7;
    *(_QWORD *)(v3[7] + v10) = v6;
    v11 = v3[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v3[2] = v13;
    v5 += 2;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t LocationFields.init(id:idType:locationPosition:locationType:name:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  char v9;

  v9 = *a3;
  *(_QWORD *)a9 = result;
  *(_QWORD *)(a9 + 8) = a2;
  *(_BYTE *)(a9 + 16) = v9;
  *(_QWORD *)(a9 + 24) = a4;
  *(_QWORD *)(a9 + 32) = a5;
  *(_QWORD *)(a9 + 40) = a6;
  *(_QWORD *)(a9 + 48) = a7;
  *(_QWORD *)(a9 + 56) = a8;
  return result;
}

void LocationFields.idType.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 16);
}

double LocationFields.init(from:)@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Swift::String v26;
  _BYTE v27[39];
  unsigned __int8 v28;

  v4 = ImpressionMetrics.fields.getter();
  v5 = sub_289508(v4, 25705, 0xE200000000000000);
  if (v6)
  {
    v7 = v6;
    if (*(_QWORD *)(v4 + 16)
      && (v8 = v5, v9 = sub_29724(0x657079546469, 0xE600000000000000), (v10 & 1) != 0)
      && (sub_1FB98(*(_QWORD *)(v4 + 56) + 32 * v9, (uint64_t)v27),
          (swift_dynamicCast(&v26, v27, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0))
    {
      MetricsLocationIdType.init(rawValue:)(v26);
      v11 = v28;
      if (v28 != 3)
      {
        v12 = sub_2893C4(v4);
        if ((v13 & 1) == 0)
        {
          v14 = v12;
          v15 = sub_28946C(v4);
          if (v16)
          {
            v17 = v16;
            v25 = v15;
            v18 = sub_289508(v4, 1701667182, 0xE400000000000000);
            v20 = v19;
            swift_bridgeObjectRelease();
            v21 = type metadata accessor for ImpressionMetrics(0);
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(a1, v21);
            *a2 = v8;
            a2[1] = v7;
            a2[2] = v11;
            a2[3] = v14;
            a2[4] = v25;
            a2[5] = v17;
            a2[6] = v18;
            a2[7] = v20;
            return result;
          }
        }
      }
    }
    else
    {
      v28 = 3;
    }
    v23 = type metadata accessor for ImpressionMetrics(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(a1, v23);
    swift_bridgeObjectRelease();
  }
  else
  {
    v24 = type metadata accessor for ImpressionMetrics(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(a1, v24);
  }
  swift_bridgeObjectRelease();
  result = 0.0;
  *((_OWORD *)a2 + 2) = 0u;
  *((_OWORD *)a2 + 3) = 0u;
  *(_OWORD *)a2 = 0u;
  *((_OWORD *)a2 + 1) = 0u;
  return result;
}

uint64_t sub_2893C4(uint64_t a1)
{
  unint64_t v2;
  char v3;
  uint64_t v5;
  _BYTE v6[32];

  if (!*(_QWORD *)(a1 + 16))
    return 0;
  v2 = sub_29724(0x6973736572706D69, 0xEF7865646E496E6FLL);
  if ((v3 & 1) == 0)
    return 0;
  sub_1FB98(*(_QWORD *)(a1 + 56) + 32 * v2, (uint64_t)v6);
  if (swift_dynamicCast(&v5, v6, (char *)&type metadata for Any + 8, &type metadata for Int, 6))
    return v5;
  else
    return 0;
}

uint64_t sub_28946C(uint64_t a1)
{
  unint64_t v2;
  char v3;
  uint64_t v5;
  _BYTE v6[32];

  if (*(_QWORD *)(a1 + 16)
    && (v2 = sub_29724(0x6973736572706D69, 0xEE00657079546E6FLL), (v3 & 1) != 0)
    && (sub_1FB98(*(_QWORD *)(a1 + 56) + 32 * v2, (uint64_t)v6),
        (swift_dynamicCast(&v5, v6, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0))
  {
    return v5;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_289508(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  char v5;
  uint64_t v7;
  _BYTE v8[32];

  if (!*(_QWORD *)(a1 + 16))
    return 0;
  v4 = sub_29724(a2, a3);
  if ((v5 & 1) == 0)
    return 0;
  sub_1FB98(*(_QWORD *)(a1 + 56) + 32 * v4, (uint64_t)v8);
  if (swift_dynamicCast(&v7, v8, (char *)&type metadata for Any + 8, &type metadata for String, 6))
    return v7;
  else
    return 0;
}

uint64_t destroy for LocationFields(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[5]);
  return swift_bridgeObjectRelease(a1[7]);
}

uint64_t initializeWithCopy for LocationFields(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 40);
  v4 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 48) = v4;
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v6;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

uint64_t assignWithCopy for LocationFields(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v8 = *(_QWORD *)(a2 + 56);
  v9 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t assignWithTake for LocationFields(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease(v6);
  v7 = *(_QWORD *)(a2 + 56);
  v8 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v7;
  swift_bridgeObjectRelease(v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for LocationFields(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LocationFields(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for LocationFields()
{
  return &type metadata for LocationFields;
}

unint64_t sub_2897D0(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  Swift::UInt64 v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  char v17;

  v1 = a1[2];
  if (!v1)
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  __swift_instantiateConcreteTypeFromMangledName(&qword_3C5588);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v1);
  v5 = a1[4];
  v4 = a1[5];
  v6 = a1[6];
  v7 = a1[7];
  v8 = a1[8];
  v9 = a1[9];
  result = sub_29C48(v5);
  if ((v11 & 1) != 0)
  {
LABEL_7:
    __break(1u);
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  v12 = a1 + 15;
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_QWORD *)(v3[6] + 8 * result) = v5;
    v13 = (uint64_t *)(v3[7] + 40 * result);
    *v13 = v4;
    v13[1] = v6;
    v13[2] = v7;
    v13[3] = v8;
    v13[4] = v9;
    v14 = v3[2];
    v15 = __OFADD__(v14, 1);
    v16 = v14 + 1;
    if (v15)
      break;
    v3[2] = v16;
    sub_289900(v4, v6, v7);
    if (!--v1)
      return (unint64_t)v3;
    v5 = *(v12 - 5);
    v4 = *(v12 - 4);
    v6 = *(v12 - 3);
    v7 = *(v12 - 2);
    v8 = *(v12 - 1);
    v9 = *v12;
    result = sub_29C48(v5);
    v12 += 6;
    if ((v17 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

uint64_t sub_289900(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  if (a3 >= 3)
    return swift_bridgeObjectRetain(a3);
  return result;
}

Swift::Bool __swiftcall NavigationHandlingController.shouldScrollToTop(_:)(Swift::Bool a1)
{
  return !a1;
}

uint64_t AddFavoriteCategoriesSearchTipProvider.__allocating_init(asPartOf:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = swift_allocObject(v1, 64, 7);
  AddFavoriteCategoriesSearchTipProvider.init(asPartOf:)(a1);
  return v3;
}

_QWORD *AddFavoriteCategoriesSearchTipProvider.init(asPartOf:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  os_unfair_lock_s *v47;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  id v63;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8530);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v57 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2B18);
  __chkstk_darwin(v7);
  v9 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C55F8);
  v52 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C5600);
  v53 = *(_QWORD *)(v55 - 8);
  __chkstk_darwin(v55);
  v14 = (char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C5608);
  v54 = *(_QWORD *)(v56 - 8);
  __chkstk_darwin(v56);
  v16 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v1[2] = 0;
  v1[5] = a1;
  v17 = type metadata accessor for InterestObserverProvider(0);
  swift_retain(a1);
  BaseObjectGraph.inject<A>(_:)(&v63, v17, v17);
  v2[6] = v63;
  v59 = v4;
  v60 = a1;
  v58 = v5;
  v51 = v9;
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
    && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
  {
    v18 = (void *)sub_B3484((uint64_t)_swiftEmptyArrayStorage);
  }
  else
  {
    v18 = &_swiftEmptySetSingleton;
  }
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3748);
  v20 = swift_allocObject(v19, 28, 7);
  *(_DWORD *)(v20 + 24) = 0;
  *(_QWORD *)(v20 + 16) = v18;
  v2[7] = v20;
  v21 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "_applePodcastsFoundationSharedUserDefaults");
  v22 = (void *)NSUserDefaults.BOOLPublisher(forKey:)(0xD000000000000034, 0x8000000000315340);

  v2[3] = v22;
  v63 = v22;
  v23 = swift_retain(v22);
  v62 = InterestObserverProvider.favoritedInterestsCountPublisher.getter(v23);
  v61 = InterestObserverProvider.userAppSessionsCountPublisher.getter();
  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2120);
  v50 = v24;
  v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3628);
  v26 = sub_32914(&qword_3B2128, &qword_3B2120, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v27 = sub_32914(&qword_3B3638, &qword_3B3628, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v28 = v24;
  v29 = v26;
  Publishers.CombineLatest3.init(_:_:_:)(&v63, &v62, &v61, v28, v25, v25, v26, v27, v27);
  v30 = sub_32914(&qword_3C5610, &qword_3C55F8, (uint64_t)&protocol conformance descriptor for Publishers.CombineLatest3<A, B, C>);
  Publisher.map<A>(_:)(sub_289F4C, 0, v10, &type metadata for Bool, v30);
  (*(void (**)(char *, uint64_t))(v52 + 8))(v12, v10);
  v31 = sub_327F8(0, (unint64_t *)&qword_3B8710, OS_dispatch_queue_ptr);
  v63 = (id)static OS_dispatch_queue.main.getter(v31);
  v32 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  v33 = (uint64_t)v51;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v51, 1, 1, v32);
  v34 = sub_32914(&qword_3C5618, &qword_3C5600, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v35 = sub_E50C0((unint64_t *)&qword_3B2B60, (unint64_t *)&qword_3B8710, OS_dispatch_queue_ptr, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  v36 = v55;
  Publisher.receive<A>(on:options:)(&v63, v33, v55, v31, v34, v35);
  sub_1459C(v33, &qword_3B2B18);

  (*(void (**)(char *, uint64_t))(v53 + 8))(v14, v36);
  v37 = sub_32914(&qword_3C5620, &qword_3C5608, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v38 = v56;
  v39 = (void *)Publisher.eraseToAnyPublisher()(v56, v37);
  (*(void (**)(char *, uint64_t))(v54 + 8))(v16, v38);
  v2[4] = v39;
  v63 = v39;
  v40 = swift_allocObject(&unk_38D828, 24, 7);
  swift_weakInit(v40 + 16);
  swift_retain(v39);
  v41 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8660);
  v42 = v57;
  Publisher.map<A>(_:)(sub_28A0B4, v40, v50, v41, v29);
  swift_release(v40);
  swift_release(v63);
  v43 = swift_allocObject(&unk_38D828, 24, 7);
  swift_weakInit(v43 + 16);
  v44 = sub_32914(&qword_3B8568, &qword_3B8530, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v45 = v59;
  v46 = Publisher<>.sink(receiveValue:)(sub_E4C1C, v43, v59, v44);
  swift_release(v43);
  (*(void (**)(char *, uint64_t))(v58 + 8))(v42, v45);
  v47 = (os_unfair_lock_s *)v2[7];
  swift_retain(v47);
  os_unfair_lock_lock(v47 + 6);
  sub_635EC();
  os_unfair_lock_unlock(v47 + 6);
  swift_release(v46);
  swift_release(v47);
  swift_release(v60);
  return v2;
}

uint64_t sub_289F4C@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  char v2;

  v2 = (*(_QWORD *)(result + 8) == 0) & ~*(_BYTE *)result;
  if (*(uint64_t *)(result + 16) >= 6)
    v2 = 0;
  *a2 = v2;
  return result;
}

uint64_t sub_289F70()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_289F94@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  int v5;
  uint64_t v6;
  _QWORD *boxed_opaque_existential_2Tm;
  uint64_t v8;
  uint64_t Strong;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD v14[5];

  v5 = *a1;
  v6 = type metadata accessor for Podcasts(0);
  v14[3] = v6;
  v14[4] = sub_F1C0((unint64_t *)&qword_3B33B8, (void (*)(uint64_t))&type metadata accessor for Podcasts, (uint64_t)&protocol conformance descriptor for Podcasts);
  boxed_opaque_existential_2Tm = __swift_allocate_boxed_opaque_existential_2Tm(v14);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(boxed_opaque_existential_2Tm, enum case for Podcasts.ponderosa(_:), v6);
  LOBYTE(v6) = isFeatureEnabled(_:)(v14);
  __swift_destroy_boxed_opaque_existential_1(v14);
  if ((v6 & 1) != 0 && v5)
  {
    v8 = a2 + 16;
    swift_beginAccess(v8, v14, 0, 0);
    Strong = swift_weakLoadStrong(v8);
    if (Strong)
    {
      v10 = Strong;
      sub_28A0BC(a3);
      swift_release(v10);
      v11 = type metadata accessor for ModernShelf(0);
      return (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(a3, 0, 1, v11);
    }
  }
  else
  {
    Strong = 0;
  }
  v13 = type metadata accessor for ModernShelf(Strong);
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(a3, 1, 1, v13);
}

uint64_t sub_28A0B4@<X0>(unsigned __int8 *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_289F94(a1, v2, a2);
}

void sub_28A0BC(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  id v9;
  Swift::String v10;
  Swift::String v11;
  id v12;
  Swift::String v13;
  Swift::String v14;
  id v15;
  NSString v16;
  NSString v17;
  id v18;
  uint64_t (*v19)(_QWORD);
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  NSString v22;
  uint64_t v23;
  uint64_t v24;
  NSURL *v25;
  void *v26;
  void *v27;
  void *v28;
  id v29;
  Swift::String v30;
  uint64_t v31;
  Swift::String v32;
  NSString v33;
  id v34;
  uint64_t v35;
  NSString v36;
  id v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(char *, _QWORD, uint64_t);
  unsigned int v44;
  id v45;
  uint64_t v46;
  void *v47;
  _QWORD *v48;
  __int16 v49;
  int v50;
  __int16 v51;
  uint64_t v52;
  Swift::String v53;
  Swift::String v54;
  Swift::String v55;

  v48 = a1;
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
  __chkstk_darwin(v1);
  v3 = (char *)&v43 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for TipType(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (void *)objc_opt_self(NSBundle);
  v9 = objc_msgSend(v8, "mainBundle");
  v10._countAndFlagsBits = 0xD000000000000021;
  v47 = (void *)0x800000000030FD20;
  v53._object = (void *)0x800000000030FD20;
  v10._object = (void *)0x8000000000315460;
  v11._countAndFlagsBits = 0;
  v11._object = (void *)0xE000000000000000;
  v53._countAndFlagsBits = 0xD000000000000017;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v10, (Swift::String_optional)0, (NSBundle)v9, v11, v53);

  v12 = objc_msgSend(v8, "mainBundle");
  v13._countAndFlagsBits = 0xD000000000000020;
  v54._countAndFlagsBits = 0xD000000000000038;
  v54._object = (void *)0x800000000030FCB0;
  v13._object = (void *)0x800000000030B320;
  v46 = 0xD000000000000020;
  v14._countAndFlagsBits = 0;
  v14._object = (void *)0xE000000000000000;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v13, (Swift::String_optional)0, (NSBundle)v12, v14, v54);

  v15 = objc_allocWithZone((Class)AMSDialogRequest);
  v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v18 = objc_msgSend(v15, "initWithTitle:message:", v16, v17);

  v19 = *(uint64_t (**)(_QWORD))(v5 + 104);
  v44 = enum case for TipType.addFavoriteCategoriesSearch(_:);
  v43 = (uint64_t (*)(char *, _QWORD, uint64_t))v19;
  v20 = v19(v7);
  TipType.rawValue.getter(v20);
  v21 = *(void (**)(char *, uint64_t))(v5 + 8);
  v21(v7, v4);
  v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  objc_msgSend(v18, "setIdentifier:", v22);

  objc_msgSend(v18, "setStyle:", 4);
  URL.init(string:)(0xD000000000000012, 0x800000000030B350);
  v23 = type metadata accessor for URL(0);
  v24 = *(_QWORD *)(v23 - 8);
  v26 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v3, 1, v23) != 1)
  {
    URL._bridgeToObjectiveC()(v25);
    v26 = v27;
    (*(void (**)(char *, uint64_t))(v24 + 8))(v3, v23);
  }
  objc_msgSend(v18, "setIconURL:", v26);

  v28 = (void *)objc_opt_self(AMSDialogAction);
  v45 = objc_msgSend(v28, "actionWithTitle:style:", 0, 2);
  objc_msgSend(v18, "addButtonAction:");
  v29 = objc_msgSend(v8, "mainBundle");
  v55._object = v47;
  v30._object = (void *)0x800000000030FCF0;
  v31 = 0xE000000000000000;
  v30._countAndFlagsBits = v46;
  v32._countAndFlagsBits = 0;
  v32._object = (void *)0xE000000000000000;
  v55._countAndFlagsBits = 0xD000000000000017;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v30, (Swift::String_optional)0, (NSBundle)v29, v32, v55);

  v33 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v34 = objc_msgSend(v28, "actionWithTitle:style:", v33, 0);

  v35 = v43(v7, v44, v4);
  TipType.rawValue.getter(v35);
  v21(v7, v4);
  v36 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  objc_msgSend(v34, "setIdentifier:", v36);

  objc_msgSend(v18, "addButtonAction:", v34);
  v37 = objc_msgSend(v18, "identifier");
  if (v37)
  {
    v38 = v37;
    v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
    v31 = v40;

  }
  else
  {
    v39 = 0;
  }
  v49 = 53;
  v51 = 256;
  v50 = 0;
  v52 = 1;
  v41 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8750);
  v42 = swift_allocObject(v41, 72, 7);
  *(_OWORD *)(v42 + 16) = xmmword_2EA0D0;
  *(_QWORD *)(v42 + 56) = sub_327F8(0, (unint64_t *)&qword_3B7DB0, AMSDialogRequest_ptr);
  *(_QWORD *)(v42 + 64) = sub_E50C0((unint64_t *)&qword_3B8760, (unint64_t *)&qword_3B7DB0, AMSDialogRequest_ptr, (uint64_t)&protocol conformance descriptor for AMSDialogRequest);
  *(_QWORD *)(v42 + 32) = v18;
  ModernShelf.init(id:title:itemPresentation:items:)(v39, v31, 0, 0, (unsigned __int8 *)&v49, v42, v48);

}

_QWORD *AddFavoriteCategoriesSearchTipProvider.handle(tipAction:from:)(void *a1, void *a2)
{
  id v4;
  NSString v5;
  _QWORD *result;

  v4 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "_applePodcastsFoundationSharedUserDefaults");
  v5 = String._bridgeToObjectiveC()();
  objc_msgSend(v4, "setBool:forKey:", 1, v5);

  result = objc_msgSend(a1, "style");
  if (result != (_QWORD *)((char *)&dword_0 + 2))
    return sub_E4CE8(a2);
  return result;
}

uint64_t sub_28A6FC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = AddFavoriteCategoriesSearchTipProvider.addFavoriteCategoriesSearchTipShelf.getter();
  *a1 = result;
  return result;
}

uint64_t sub_28A724(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *(_QWORD *)(*(_QWORD *)a2 + 16);
  *(_QWORD *)(*(_QWORD *)a2 + 16) = v2;
  swift_retain(v2);
  return swift_release(v3);
}

uint64_t type metadata accessor for AddFavoriteCategoriesSearchTipProvider()
{
  return objc_opt_self(_TtC8ShelfKit38AddFavoriteCategoriesSearchTipProvider);
}

uint64_t method lookup function for AddFavoriteCategoriesSearchTipProvider(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for AddFavoriteCategoriesSearchTipProvider);
}

uint64_t EpisodeEyebrowView.init(asPartOf:model:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  swift_retain();
  swift_retain();
  v6 = _s8ShelfKit23EpisodeCaptionGeneratorC8asPartOf7episode22showsSubscriptionBadge16useSearchContextAC9JetEngine15BaseObjectGraphC_AA06LegacyC6LockupCS2btcfC_0(a1, a2, 1, 1);
  v7 = type metadata accessor for EpisodeCaptionGenerator(0);
  v8 = sub_28AAF8();
  v9 = ObservedObject.init(wrappedValue:)(v6, v7, v8);
  v11 = v10;
  swift_release();
  result = swift_release();
  *a3 = v9;
  a3[1] = v11;
  return result;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = type metadata accessor for EyebrowBuilder.ListContext(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(a2 + 72) & 1) != 0)
  {
    swift_release();
    result = swift_release();
    v11 = 0;
    v12 = 0;
  }
  else
  {
    v13 = *(_QWORD *)(a2 + 64);
    v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B23C0);
    v15 = type metadata accessor for BaseObjectGraph(0);
    swift_retain();
    swift_retain();
    inject<A, B>(_:from:)(&v23, v14, a1, v14, v15);
    swift_retain();
    v16 = EpisodeStateController.stateMachine(for:)(v13);
    (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for EyebrowBuilder.ListContext.single(_:), v6);
    v17 = type metadata accessor for EpisodeCaptionGenerator(0);
    v18 = swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
    v19 = sub_354B0(a1, a2, v16, (uint64_t)v9, 1, v18);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    v20 = sub_28AAF8();
    v11 = ObservedObject.init(wrappedValue:)(v19, v17, v20);
    v12 = v21;
    swift_release();
    result = swift_release();
  }
  *a3 = v11;
  a3[1] = v12;
  return result;
}

uint64_t EpisodeEyebrowView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  unint64_t v22;

  v3 = *(_QWORD *)(v1 + 8);
  KeyPath = swift_getKeyPath(&unk_3039E0);
  v5 = swift_getKeyPath(&unk_303A08);
  v6 = swift_retain_n(v3, 2);
  static Published.subscript.getter(&v21, v6, KeyPath, v5);
  swift_release();
  swift_release();
  swift_release();
  v7 = v21;
  if (v22)
  {
    v8 = v22;
  }
  else
  {
    v7 = 0;
    v8 = 0xE000000000000000;
  }
  v21 = v7;
  v22 = v8;
  v9 = sub_65CC4();
  v10 = StringProtocol.localizedUppercase.getter(&type metadata for String, v9);
  v12 = v11;
  swift_release();
  swift_bridgeObjectRelease();
  v21 = v10;
  v22 = v12;
  v13 = Text.init<A>(_:)(&v21, &type metadata for String, v9);
  v15 = v14;
  v17 = v16;
  v19 = v18;
  result = swift_getKeyPath(&unk_303A28);
  *(_QWORD *)a1 = v13;
  *(_QWORD *)(a1 + 8) = v15;
  *(_BYTE *)(a1 + 16) = v17 & 1;
  *(_QWORD *)(a1 + 24) = v19;
  *(_QWORD *)(a1 + 32) = result;
  *(_QWORD *)(a1 + 40) = 1;
  *(_BYTE *)(a1 + 48) = 0;
  return result;
}

unint64_t sub_28AAF8()
{
  unint64_t result;

  result = qword_3C56F0;
  if (!qword_3C56F0)
  {
    type metadata accessor for EpisodeCaptionGenerator(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for EpisodeCaptionGenerator);
    atomic_store(result, (unint64_t *)&qword_3C56F0);
  }
  return result;
}

uint64_t sub_28AB48@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.lineLimit.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_28AB78(uint64_t a1)
{
  return EnvironmentValues.lineLimit.setter(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_28ABA4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of EpisodeEyebrowView.body>>, 1);
}

ValueMetadata *type metadata accessor for EpisodeEyebrowView()
{
  return &type metadata for EpisodeEyebrowView;
}

unint64_t sub_28ABC8()
{
  unint64_t result;

  result = qword_3C56F8;
  if (!qword_3C56F8)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_3C5700);
    sub_28AC34();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>);
    atomic_store(result, (unint64_t *)&qword_3C56F8);
  }
  return result;
}

unint64_t sub_28AC34()
{
  unint64_t result;

  result = qword_3C5708;
  if (!qword_3C5708)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_3C5710);
    result = swift_getWitnessTable(&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    atomic_store(result, (unint64_t *)&qword_3C5708);
  }
  return result;
}

uint64_t EpisodeUserFilter.id.getter(uint64_t a1, char a2)
{
  uint64_t v3;
  char v4;

  v3 = a1;
  v4 = a2;
  sub_43568(a1, a2);
  return String.init<A>(describing:)(&v3, &type metadata for EpisodeUserFilter);
}

uint64_t sub_28ACB4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  char v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v5 = *(_BYTE *)(v2 + 8);
  v8 = *(_QWORD *)v2;
  v9 = v5;
  sub_43568(v8, v5);
  result = String.init<A>(describing:)(&v8, a1);
  *a2 = result;
  a2[1] = v7;
  return result;
}

uint64_t EpisodeUserFilter.isEmptyFilter.getter(uint64_t a1, uint64_t a2)
{
  return static EpisodeUserFilter.== infix(_:_:)(a1, a2, 0, 2);
}

uint64_t sub_28AD14(uint64_t a1)
{
  uint64_t v1;
  char v3;
  uint64_t v5;
  char v6;

  v3 = *(_BYTE *)(v1 + 8);
  v5 = *(_QWORD *)v1;
  v6 = v3;
  sub_43568(v5, v3);
  return String.init<A>(describing:)(&v5, a1);
}

uint64_t sub_28AD58()
{
  uint64_t v0;

  return EpisodeUserFilter.title.getter(*(_QWORD *)v0, *(unsigned __int8 *)(v0 + 8));
}

uint64_t sub_28AD64()
{
  uint64_t v0;

  return static EpisodeUserFilter.== infix(_:_:)(*(_QWORD *)v0, *(unsigned __int8 *)(v0 + 8), 0, 2);
}

unint64_t sub_28AD78(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_28ADA4();
  result = sub_28ADE8();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_28ADA4()
{
  unint64_t result;

  result = qword_3C5718;
  if (!qword_3C5718)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for EpisodeUserFilter);
    atomic_store(result, (unint64_t *)&qword_3C5718);
  }
  return result;
}

unint64_t sub_28ADE8()
{
  unint64_t result;

  result = qword_3C5720;
  if (!qword_3C5720)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for EpisodeUserFilter);
    atomic_store(result, (unint64_t *)&qword_3C5720);
  }
  return result;
}

uint64_t ResumeOAuthAction.redirectURL.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC8ShelfKit17ResumeOAuthAction_redirectURL;
  v4 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ResumeOAuthAction.__allocating_init(redirectURL:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = v1;
  v25 = a1;
  v27 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for ActionMetrics(0);
  v7 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v10);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  v14 = v13 + OBJC_IVAR____TtC8ShelfKit17ResumeOAuthAction_redirectURL;
  v15 = type metadata accessor for URL(0);
  v16 = *(_QWORD *)(v15 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v14, a1, v15);
  v17 = type metadata accessor for ImpressionMetrics(0);
  v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v12, 1, 1, v17);
  v19 = static ActionMetrics.notInstrumented.getter(v18);
  UUID.init()(v19);
  v20 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
  v22 = v21;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v27);
  *(_QWORD *)(v13 + 16) = v20;
  *(_QWORD *)(v13 + 24) = v22;
  *(_QWORD *)(v13 + 32) = 0;
  *(_QWORD *)(v13 + 40) = 0;
  *(_BYTE *)(v13 + 48) = 32;
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v13 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v9, v26);
  sub_23AB8((uint64_t)v12, v13 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v25, v15);
  return v13;
}

uint64_t ResumeOAuthAction.init(redirectURL:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2 = v1;
  v24 = a1;
  v26 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for ActionMetrics(0);
  v7 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v10);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = v2 + OBJC_IVAR____TtC8ShelfKit17ResumeOAuthAction_redirectURL;
  v14 = type metadata accessor for URL(0);
  v15 = *(_QWORD *)(v14 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v13, a1, v14);
  v16 = type metadata accessor for ImpressionMetrics(0);
  v17 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v12, 1, 1, v16);
  v18 = static ActionMetrics.notInstrumented.getter(v17);
  UUID.init()(v18);
  v19 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
  v21 = v20;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v26);
  *(_QWORD *)(v2 + 16) = v19;
  *(_QWORD *)(v2 + 24) = v21;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 48) = 32;
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v2 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v9, v25);
  sub_23AB8((uint64_t)v12, v2 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v24, v14);
  return v2;
}

void ResumeOAuthAction.init(deserializing:using:)()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000033, 0x800000000030A500, "ShelfKit/ResumeOAuthAction.swift", 32, 2, 31, 0);
  __break(1u);
}

void ResumeOAuthAction.init(uniqueId:title:presentationStyle:actionMetrics:impressionMetrics:)()
{
  _swift_stdlib_reportUnimplementedInitializer("ShelfKit.ResumeOAuthAction", 26, "init(uniqueId:title:presentationStyle:actionMetrics:impressionMetrics:)", 71, 0);
  __break(1u);
}

uint64_t sub_28B2A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC8ShelfKit17ResumeOAuthAction_redirectURL;
  v2 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
}

uint64_t ResumeOAuthAction.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics;
  v2 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_23B00(v0 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics);
  v3 = v0 + OBJC_IVAR____TtC8ShelfKit17ResumeOAuthAction_redirectURL;
  v4 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  return v0;
}

uint64_t ResumeOAuthAction.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics;
  v2 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_23B00(v0 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics);
  v3 = v0 + OBJC_IVAR____TtC8ShelfKit17ResumeOAuthAction_redirectURL;
  v4 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_28B418()
{
  return type metadata accessor for ResumeOAuthAction(0);
}

uint64_t type metadata accessor for ResumeOAuthAction(uint64_t a1)
{
  uint64_t result;

  result = qword_3C5750;
  if (!qword_3C5750)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ResumeOAuthAction);
  return result;
}

uint64_t sub_28B45C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 1, &v4, a1 + 160);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for ResumeOAuthAction(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for ResumeOAuthAction);
}

uint64_t sub_28B4D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C5958);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C5960);
  v31 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C5968);
  v10 = *(_QWORD *)(v9 - 8);
  v32 = v9;
  v33 = v10;
  __chkstk_darwin(v9);
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit24LocalShowPageFeedUpdater_libraryActionController + 24);
  v14 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit24LocalShowPageFeedUpdater_libraryActionController + 32);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit24LocalShowPageFeedUpdater_libraryActionController), v13);
  v15 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(v14 + 128))(*(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit24LocalShowPageFeedUpdater_podcastUUID), *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit24LocalShowPageFeedUpdater_podcastUUID + 8), *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC8ShelfKit24LocalShowPageFeedUpdater_isImplicitlyFollowed) | 0x40u, v13, v14);
  v16 = Promise.optionalPublisher.getter(v15);
  swift_release(v15);
  v34 = v16;
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C5970);
  v18 = sub_32914(&qword_3C5978, &qword_3C5970, (uint64_t)&protocol conformance descriptor for Future<A, B>);
  Publisher.compactMap<A>(_:)(sub_28C6D8, 0, v17, &type metadata for FeedUpdateResult, v18);
  swift_release(v16);
  LODWORD(v17) = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC8ShelfKit24LocalShowPageFeedUpdater_showUpdaterType);
  v19 = swift_allocObject(&unk_38DAC0, 17, 7);
  *(_BYTE *)(v19 + 16) = v17;
  Publishers.CompactMap.compactMap<A>(_:)(sub_28C74C, v19, v2, &type metadata for LocalShowPageFeedUpdaterStatus);
  swift_release(v19);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C5980);
  v21 = swift_allocObject(v20, 40, 7);
  v22 = v21;
  *(_OWORD *)(v21 + 16) = xmmword_2EA0D0;
  v23 = 0x3000000000000007;
  if ((_DWORD)v17)
    v23 = 0x7000000000000007;
  *(_QWORD *)(v21 + 32) = v23;
  v24 = sub_32914(&qword_3C5988, &qword_3C5960, (uint64_t)&protocol conformance descriptor for Publishers.CompactMap<A, B>);
  Publisher.prepend(_:)(v22, v6, v24);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v31 + 8))(v8, v6);
  v25 = swift_allocObject(&unk_38DAE8, 24, 7);
  swift_weakInit(v25 + 16);
  v26 = sub_32914(&qword_3C5990, &qword_3C5968, (uint64_t)&protocol conformance descriptor for Publishers.Concatenate<A, B>);
  v27 = v32;
  v28 = Publisher<>.sink(receiveValue:)(sub_28CABC, v25, v32, v26);
  swift_release(v25);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v12, v27);
  v29 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit24LocalShowPageFeedUpdater_internalStatusSubscription);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit24LocalShowPageFeedUpdater_internalStatusSubscription) = v28;
  return swift_release(v29);
}

unint64_t sub_28B81C()
{
  _QWORD *v0;

  if ((*v0 & 0xF000000000000007) == 0xF000000000000007)
    return 0xD000000000000018;
  else
    return 0xD000000000000011;
}

uint64_t sub_28B864()
{
  unint64_t *v0;
  unint64_t v1;
  int v2;
  uint64_t v4;
  void *v5;
  Swift::String v6;
  Swift::String v7;

  v1 = *v0;
  v2 = (*v0 >> 57) & 0x78 | *v0 & 7;
  switch(v2)
  {
    case 31:
      return 0x656873696E69662ELL;
    case 95:
      return 0x656C64692ELL;
    case 63:
      return 0x737365636F72702ELL;
  }
  if ((v1 & 0xF000000000000007) == 0xF000000000000007)
    v4 = 0xD000000000000018;
  else
    v4 = 0xD000000000000011;
  if ((v1 & 0xF000000000000007) == 0xF000000000000007)
    v5 = (void *)0x80000000003155C0;
  else
    v5 = (void *)0x80000000003155A0;
  sub_28C684(v1);
  v6._countAndFlagsBits = v4;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 41;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  sub_28C698(v1);
  return 0x6572756C6961662ELL;
}

uint64_t sub_28B9A4(char *a1, char *a2)
{
  return sub_1E21E0(*a1, *a2);
}

Swift::Int sub_28B9B0()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  if (v1)
    v2 = 0x676E696B636F6C62;
  else
    v2 = 0x6B636F6C426E6F6ELL;
  if (v1)
    v3 = 0xE800000000000000;
  else
    v3 = 0xEB00000000676E69;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_28BA38(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0x676E696B636F6C62;
  else
    v2 = 0x6B636F6C426E6F6ELL;
  if (*v1)
    v3 = 0xE800000000000000;
  else
    v3 = 0xEB00000000676E69;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_28BA9C()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  if (v1)
    v2 = 0x676E696B636F6C62;
  else
    v2 = 0x6B636F6C426E6F6ELL;
  if (v1)
    v3 = 0xE800000000000000;
  else
    v3 = 0xEB00000000676E69;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_28BB20@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;
  char v7;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_375E30, v3);
  result = swift_bridgeObjectRelease(v4);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

void sub_28BB7C(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x6B636F6C426E6F6ELL;
  if (*v1)
    v2 = 0x676E696B636F6C62;
  v3 = 0xEB00000000676E69;
  if (*v1)
    v3 = 0xE800000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_28BBC4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_28C640();
  return EnumStringConvertible<>.description.getter(a1, v2);
}

uint64_t sub_28BBEC@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_303DC0);
  v4 = swift_getKeyPath(&unk_303DE8);
  static Published.subscript.getter(a1, v1, KeyPath, v4);
  swift_release(KeyPath);
  return swift_release(v4);
}

uint64_t sub_28BC50(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  unint64_t v40;

  v3 = v2;
  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7FE0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = v3 + OBJC_IVAR____TtC8ShelfKit24LocalShowPageFeedUpdater__status;
  *(_QWORD *)&v38 = 0xB000000000000007;
  Published.init(initialValue:)(&v38, &type metadata for LocalShowPageFeedUpdaterStatus);
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v14, v13, v10);
  *(_QWORD *)(v3 + OBJC_IVAR____TtC8ShelfKit24LocalShowPageFeedUpdater_internalStatusSubscription) = 0;
  v15 = swift_retain();
  sub_28CC2C(v15);
  *(_BYTE *)(v3 + OBJC_IVAR____TtC8ShelfKit24LocalShowPageFeedUpdater_showUpdaterType) = v16 & 1;
  v17 = *(_QWORD *)(a1 + 40);
  v18 = (_QWORD *)(v3 + OBJC_IVAR____TtC8ShelfKit24LocalShowPageFeedUpdater_podcastUUID);
  *v18 = *(_QWORD *)(a1 + 32);
  v18[1] = v17;
  v19 = *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC8ShelfKit13PodcastDetail_podcastState);
  swift_bridgeObjectRetain();
  v20 = PodcastStateModel.SanitizedState.rawValue.getter(v19);
  v22 = v21;
  v23 = PodcastStateModel.SanitizedState.rawValue.getter(2);
  if (v20 == v23 && v22 == v24)
    v26 = 1;
  else
    v26 = _stringCompareWithSmolCheck(_:_:expecting:)(v20, v22, v23, v24, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_BYTE *)(v3 + OBJC_IVAR____TtC8ShelfKit24LocalShowPageFeedUpdater_isImplicitlyFollowed) = v26 & 1;
  v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BC3F0);
  v28 = type metadata accessor for BaseObjectGraph(0);
  inject<A, B>(_:from:)(&v38, v27, a2, v27, v28);
  sub_F4D8(&v38, v3 + OBJC_IVAR____TtC8ShelfKit24LocalShowPageFeedUpdater_libraryActionController);
  if ((*(_BYTE *)(v3 + OBJC_IVAR____TtC8ShelfKit24LocalShowPageFeedUpdater_isImplicitlyFollowed) & 1) != 0
    && (v29 = type metadata accessor for Podcasts(0),
        v39 = v29,
        v40 = sub_24DB34(),
        v30 = __swift_allocate_boxed_opaque_existential_2Tm(&v38),
        (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v29 - 8) + 104))(v30, enum case for Podcasts.renderImplicitFollowsAsLocalShows(_:), v29), LOBYTE(v29) = isFeatureEnabled(_:)(&v38), v31 = __swift_destroy_boxed_opaque_existential_1(&v38), (v29 & 1) == 0))
  {
    v32 = static Logger.libraryShow.getter(v31);
    v33 = Logger.logObject.getter(v32);
    v34 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v33, v34))
    {
      v35 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v35 = 0;
      _os_log_impl(&dword_0, v33, v34, "LocalShowPageFeedUpdater is supposed to be only used for local pages, and Implicit Follows should NOT be rendering in local pages if RenderImplicitFollowsAsLocalShows is OFF.", v35, 2u);
      swift_slowDealloc(v35, -1, -1);
    }
    swift_release(a1);
    swift_release(a2);

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  else
  {
    swift_release(a1);
    swift_release(a2);
  }
  return v3;
}

uint64_t sub_28BF60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC8ShelfKit24LocalShowPageFeedUpdater__status;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7FE0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((_QWORD *)(v0
                                                      + OBJC_IVAR____TtC8ShelfKit24LocalShowPageFeedUpdater_libraryActionController));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_28BFE8()
{
  return type metadata accessor for LocalShowPageFeedUpdater(0);
}

uint64_t type metadata accessor for LocalShowPageFeedUpdater(uint64_t a1)
{
  uint64_t result;

  result = qword_3C5880;
  if (!qword_3C5880)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LocalShowPageFeedUpdater);
  return result;
}

void sub_28C02C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[6];

  sub_28C0C0();
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = "\b";
    v4[2] = &unk_303C28;
    v4[3] = &unk_303C40;
    v4[4] = &unk_303C28;
    v4[5] = &unk_303C58;
    swift_updateClassMetadata2(a1, 256, 6, v4, a1 + 80);
  }
}

void sub_28C0C0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_3C5890)
  {
    v0 = type metadata accessor for Published(0, &type metadata for LocalShowPageFeedUpdaterStatus);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_3C5890);
  }
}

uint64_t storeEnumTagSinglePayload for ShowUpdaterType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_28C160 + 4 * byte_303BD5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_28C194 + 4 * byte_303BD0[v4]))();
}

uint64_t sub_28C194(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_28C19C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x28C1A4);
  return result;
}

uint64_t sub_28C1B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x28C1B8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_28C1BC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_28C1C4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ShowUpdaterType()
{
  return &type metadata for ShowUpdaterType;
}

unint64_t sub_28C1E4(unint64_t result)
{
  if (result >> 62)
  {
    if (result >> 62 != 1)
      return result;
    result &= 0x3FFFFFFFFFFFFFFFuLL;
  }
  return swift_errorRetain(result);
}

unint64_t destroy for LocalShowPageFeedUpdaterStatus(unint64_t *a1)
{
  unint64_t result;

  result = *a1;
  if (((((result >> 57) >> 5) | (4 * ((result >> 57) & 0x18 | result & 7))) ^ 0x7F) >= 0x7D)
    return sub_28C22C(result);
  return result;
}

unint64_t sub_28C22C(unint64_t result)
{
  if (result >> 62)
  {
    if (result >> 62 != 1)
      return result;
    result &= 0x3FFFFFFFFFFFFFFFuLL;
  }
  return swift_errorRelease(result);
}

unint64_t *_s8ShelfKit29LocalShowPageFeedUpdaterErrorOwCP_0(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  v3 = *a2;
  if (((((*a2 >> 57) >> 5) | (4 * ((*a2 >> 57) & 0x18 | *a2 & 7))) ^ 0x7F) >= 0x7D)
    sub_28C1E4(*a2);
  *a1 = v3;
  return a1;
}

unint64_t *assignWithCopy for LocalShowPageFeedUpdaterStatus(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4;
  int v5;
  unsigned int v6;
  unint64_t v7;
  int v8;
  unsigned int v9;
  _BOOL4 v11;
  unint64_t v12;

  v4 = *a1;
  v5 = ((v4 >> 57) >> 5) | (4 * ((v4 >> 57) & 0x18 | v4 & 7));
  v6 = v5 ^ 0x7F;
  v7 = *a2;
  v8 = ((*a2 >> 57) >> 5) | (4 * ((*a2 >> 57) & 0x18 | *a2 & 7));
  v9 = v8 ^ 0x7F;
  v11 = v8 == 127 || v9 > 0x7C;
  if (v5 != 127 && v6 < 0x7D)
  {
    if (!v11)
    {
LABEL_19:
      *a1 = v7;
      return a1;
    }
LABEL_15:
    if (v9 >= 0x7D)
      sub_28C1E4(*a2);
    goto LABEL_19;
  }
  if (!v11)
  {
    if (v6 >= 0x7D)
    {
      sub_28C22C(v4);
      v7 = *a2;
    }
    goto LABEL_19;
  }
  if (v6 < 0x7D)
    goto LABEL_15;
  if (v9 < 0x7D)
  {
    sub_28C22C(v4);
    *a1 = *a2;
  }
  else
  {
    sub_28C1E4(*a2);
    v12 = *a1;
    *a1 = v7;
    sub_28C22C(v12);
  }
  return a1;
}

unint64_t *assignWithTake for LocalShowPageFeedUpdaterStatus(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  int v4;
  unsigned int v5;
  unint64_t v6;
  int v7;
  unsigned int v8;

  v3 = *a1;
  v4 = ((v3 >> 57) >> 5) | (4 * ((v3 >> 57) & 0x18 | v3 & 7));
  v5 = v4 ^ 0x7F;
  v6 = *a2;
  if (v4 != 127 && v5 < 0x7D)
    goto LABEL_11;
  v7 = ((v6 >> 57) >> 5) | (4 * ((v6 >> 57) & 0x18 | v6 & 7));
  v8 = v7 ^ 0x7F;
  if (v7 != 127 && v8 < 0x7D)
  {
    if (v5 < 0x7D)
      goto LABEL_11;
    goto LABEL_10;
  }
  if (v5 < 0x7D)
  {
LABEL_11:
    *a1 = v6;
    return a1;
  }
  if (v8 < 0x7D)
  {
LABEL_10:
    sub_28C22C(v3);
    goto LABEL_11;
  }
  *a1 = v6;
  sub_28C22C(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for LocalShowPageFeedUpdaterStatus(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7A && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 122);
  v3 = (((*(_QWORD *)a1 >> 57) >> 5) | (4 * ((*(_QWORD *)a1 >> 57) & 0x18 | *(_QWORD *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7D)
    v3 = -1;
  if (v3 + 1 < 2)
    v3 = 0;
  if (v3 >= 4)
    return v3 - 3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for LocalShowPageFeedUpdaterStatus(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x79)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 122;
    if (a3 >= 0x7A)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7A)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = ((32 * (124 - a2)) | ((124 - a2) >> 2) | ((unint64_t)((32 * (124 - a2)) | ((124 - a2) >> 2)) << 57)) & 0xF000000000000007;
  }
  return result;
}

uint64_t sub_28C4EC(_QWORD *a1)
{
  unsigned int v1;

  v1 = (((*a1 >> 57) >> 5) | (4 * ((*a1 >> 57) & 0x18 | *a1 & 7))) ^ 0x7F;
  if (v1 >= 0x7D)
    v1 = -1;
  if (v1 + 1 >= 2)
    return v1;
  else
    return 0;
}

unint64_t *sub_28C520(unint64_t *result, unsigned int a2)
{
  if (a2 > 0x7C)
  {
    *result = 0;
    *(_DWORD *)result = a2 - 125;
  }
  else if (a2)
  {
    *result = ((32 * (a2 ^ 0x7F)) | ((a2 ^ 0x7F) >> 2) | ((unint64_t)((32 * (a2 ^ 0x7F)) | ((a2 ^ 0x7F) >> 2)) << 57)) & 0xF000000000000007;
  }
  return result;
}

ValueMetadata *type metadata accessor for LocalShowPageFeedUpdaterStatus()
{
  return &type metadata for LocalShowPageFeedUpdaterStatus;
}

unint64_t sub_28C56C()
{
  unint64_t result;

  result = qword_3C5938;
  if (!qword_3C5938)
  {
    result = swift_getWitnessTable(&unk_303CC8);
    atomic_store(result, (unint64_t *)&qword_3C5938);
  }
  return result;
}

unint64_t sub_28C5B4()
{
  unint64_t result;

  result = qword_3C5940;
  if (!qword_3C5940)
  {
    result = swift_getWitnessTable(&unk_303D20);
    atomic_store(result, (unint64_t *)&qword_3C5940);
  }
  return result;
}

unint64_t sub_28C5FC()
{
  unint64_t result;

  result = qword_3C5948;
  if (!qword_3C5948)
  {
    result = swift_getWitnessTable(&unk_303D98);
    atomic_store(result, (unint64_t *)&qword_3C5948);
  }
  return result;
}

unint64_t sub_28C640()
{
  unint64_t result;

  result = qword_3C5950;
  if (!qword_3C5950)
  {
    result = swift_getWitnessTable(&unk_303CF0);
    atomic_store(result, (unint64_t *)&qword_3C5950);
  }
  return result;
}

unint64_t sub_28C684(unint64_t result)
{
  if ((~result & 0xF000000000000007) != 0)
    return sub_28C1E4(result);
  return result;
}

unint64_t sub_28C698(unint64_t result)
{
  int v1;

  v1 = (result >> 57) & 0x78 | result & 7;
  if (v1 != 31 && v1 != 63 && v1 != 95)
    return sub_28C6C4(result);
  return result;
}

unint64_t sub_28C6C4(unint64_t result)
{
  if ((~result & 0xF000000000000007) != 0)
    return sub_28C22C(result);
  return result;
}

unint64_t sub_28C6D8@<X0>(unint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v2;

  v2 = *a1;
  *a2 = v2;
  return sub_28CBEC(v2);
}

unint64_t *sub_28C6E4@<X0>(unint64_t *result@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;

  v4 = 0x3000000000000007;
  if ((a2 & 1) != 0)
  {
    v5 = *result;
    if (((*result >> 57) & 0xF8 | *result & 7 | 0x20) != 0x7F)
    {
      result = (unint64_t *)sub_28C1E4(*result);
      v4 = v5;
    }
  }
  *a3 = v4;
  return result;
}

uint64_t sub_28C73C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

unint64_t *sub_28C74C@<X0>(unint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_28C6E4(a1, *(_BYTE *)(v2 + 16), a2);
}

uint64_t sub_28C754()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_28C778(unint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t KeyPath;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _BYTE v31[24];

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *a1;
  a2 += 16;
  swift_beginAccess(a2, v31, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (result)
  {
    v10 = result;
    static Logger.libraryShow.getter();
    swift_retain_n(v10, 3);
    sub_28CAC4(v8);
    swift_retain();
    v11 = sub_28CAC4(v8);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = swift_slowAlloc(32, -1);
      v28 = v5;
      v15 = v14;
      v26 = swift_slowAlloc(96, -1);
      v30 = v26;
      *(_DWORD *)v15 = 136315650;
      LOBYTE(v29) = *(_BYTE *)(v10 + OBJC_IVAR____TtC8ShelfKit24LocalShowPageFeedUpdater_showUpdaterType);
      v16 = sub_28C56C();
      v27 = v4;
      v17 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for ShowUpdaterType, v16);
      v29 = sub_69298(v17, v18, (uint64_t *)&v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30);
      swift_release_n(v10, 2);
      swift_bridgeObjectRelease();
      *(_WORD *)(v15 + 12) = 2080;
      v29 = v8;
      v19 = sub_28B864();
      v29 = sub_69298(v19, v20, (uint64_t *)&v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30);
      swift_bridgeObjectRelease();
      sub_28C698(v8);
      sub_28C698(v8);
      *(_WORD *)(v15 + 22) = 2080;
      v22 = *(_QWORD *)(v10 + OBJC_IVAR____TtC8ShelfKit24LocalShowPageFeedUpdater_podcastUUID);
      v21 = *(_QWORD *)(v10 + OBJC_IVAR____TtC8ShelfKit24LocalShowPageFeedUpdater_podcastUUID + 8);
      swift_bridgeObjectRetain();
      v29 = sub_69298(v22, v21, (uint64_t *)&v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30);
      swift_release_n(v10, 2);
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_0, v12, v13, "LocalShowPageFeedUpdater of type: '%s' transitioning to '%s' for podcast with UUID: %s", (uint8_t *)v15, 0x20u);
      v23 = v26;
      swift_arrayDestroy(v26, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v23, -1, -1);
      swift_slowDealloc(v15, -1, -1);

      (*(void (**)(char *, uint64_t))(v28 + 8))(v7, v27);
    }
    else
    {
      swift_release_n(v10, 2);
      sub_28C698(v8);
      sub_28C698(v8);

      swift_release_n(v10, 2);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    }
    KeyPath = swift_getKeyPath(&unk_303DC0);
    v25 = swift_getKeyPath(&unk_303DE8);
    v30 = v8;
    sub_28CAC4(v8);
    return static Published.subscript.setter(&v30, v10, KeyPath, v25);
  }
  return result;
}

uint64_t sub_28CABC(unint64_t *a1)
{
  uint64_t v1;

  return sub_28C778(a1, v1);
}

unint64_t sub_28CAC4(unint64_t result)
{
  int v1;

  v1 = (result >> 57) & 0x78 | result & 7;
  if (v1 != 31 && v1 != 63 && v1 != 95)
    return sub_28C684(result);
  return result;
}

uint64_t sub_28CAF0@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_303DC0);
  v5 = swift_getKeyPath(&unk_303DE8);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(KeyPath);
  result = swift_release(v5);
  *a2 = v7;
  return result;
}

uint64_t sub_28CB70(unint64_t *a1, uint64_t *a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  unint64_t v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_303DC0);
  v5 = swift_getKeyPath(&unk_303DE8);
  v7 = v2;
  sub_28CAC4(v2);
  swift_retain();
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

unint64_t sub_28CBEC(unint64_t result)
{
  if ((result & 0xF000000000000007) != 0x7000000000000007)
    return sub_28CC08(result);
  return result;
}

unint64_t sub_28CC08(unint64_t result)
{
  if (((result >> 57) & 0xF8 | result & 7 | 0x20) != 0x7F)
    return sub_28C1E4(result);
  return result;
}

void sub_28CC2C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for Logger(0);
  __chkstk_darwin(v2);
  __asm { BR              X10 }
}

uint64_t sub_28CCB4()
{
  uint64_t v0;

  swift_release(v0);
  return 0;
}

unint64_t destroy for LocalShowPageFeedUpdaterError(unint64_t *a1)
{
  unint64_t result;

  result = *a1;
  if (((((result >> 57) >> 5) | (4 * ((result >> 57) & 0x18 | result & 7))) ^ 0x7F) >= 0x7D)
    return sub_28C22C(result);
  return result;
}

unint64_t *assignWithCopy for LocalShowPageFeedUpdaterError(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;
  unsigned int v5;
  unint64_t v6;

  v3 = *a1;
  v4 = *a2;
  v5 = (((*a2 >> 57) >> 5) | (4 * ((*a2 >> 57) & 0x18 | *a2 & 7))) ^ 0x7F;
  if (((((v3 >> 57) >> 5) | (4 * ((v3 >> 57) & 0x18 | v3 & 7))) ^ 0x7F) < 0x7D)
  {
    if (v5 >= 0x7D)
      sub_28C1E4(*a2);
    *a1 = v4;
  }
  else if (v5 < 0x7D)
  {
    sub_28C22C(v3);
    *a1 = *a2;
  }
  else
  {
    sub_28C1E4(*a2);
    v6 = *a1;
    *a1 = v4;
    sub_28C22C(v6);
  }
  return a1;
}

unint64_t *assignWithTake for LocalShowPageFeedUpdaterError(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *a1;
  v4 = *a2;
  if (((((v3 >> 57) >> 5) | (4 * ((v3 >> 57) & 0x18 | v3 & 7))) ^ 0x7F) < 0x7D)
    goto LABEL_5;
  if (((((v4 >> 57) >> 5) | (4 * ((v4 >> 57) & 0x18 | v4 & 7))) ^ 0x7F) < 0x7D)
  {
    sub_28C22C(v3);
LABEL_5:
    *a1 = v4;
    return a1;
  }
  *a1 = v4;
  sub_28C22C(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for LocalShowPageFeedUpdaterError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7D && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 125);
  v3 = (((*(_QWORD *)a1 >> 57) >> 5) | (4 * ((*(_QWORD *)a1 >> 57) & 0x18 | *(_QWORD *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7D)
    v3 = -1;
  if (v3 + 1 >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for LocalShowPageFeedUpdaterError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7C)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 125;
    if (a3 >= 0x7D)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7D)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = ((32 * (a2 ^ 0x7F)) | ((a2 ^ 0x7F) >> 2) | ((unint64_t)((32 * (a2 ^ 0x7F)) | ((a2 ^ 0x7F) >> 2)) << 57)) & 0xF000000000000007;
  }
  return result;
}

uint64_t sub_28D064(_QWORD *a1)
{
  int v1;
  unsigned int v2;
  unsigned int v3;

  v1 = ((*a1 >> 57) >> 5) | (4 * ((*a1 >> 57) & 0x18 | *a1 & 7));
  v2 = v1 ^ 0x7F;
  v3 = 128 - v1;
  if (v2 >= 0x7D)
    return 0;
  else
    return v3;
}

unint64_t *sub_28D094(unint64_t *result, unsigned int a2)
{
  uint64_t v2;
  unint64_t v3;

  if (a2 > 0x7D)
  {
    v3 = a2 - 126;
  }
  else
  {
    if (!a2)
      return result;
    v2 = (-a2 >> 2) & 0x1F | (32 * (-a2 & 0x7F));
    v3 = (v2 | (v2 << 57)) & 0xF000000000000007;
  }
  *result = v3;
  return result;
}

ValueMetadata *type metadata accessor for LocalShowPageFeedUpdaterError()
{
  return &type metadata for LocalShowPageFeedUpdaterError;
}

uint64_t SearchController.__allocating_init(asPartOf:)()
{
  uint64_t v0;
  uint64_t v1;

  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  v1 = sub_28FEBC();
  swift_release();
  return v1;
}

void SearchController.dependenciesDidChange(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  os_unfair_lock_s *v3;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = v1 + *(_QWORD *)(class metadata base offset for ManagedBuffer + *(_QWORD *)v1 + 16);
  v3 = (os_unfair_lock_s *)(v1 + ((*(unsigned int *)(*(_QWORD *)v1 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v3);
  sub_28D5E0(v2);
  os_unfair_lock_unlock(v3);
}

uint64_t SearchController.publisher(for:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unsigned __int8 v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 v32;
  _QWORD v33[4];
  char v34;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C59B0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C59B8);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_80AAC(a1, (uint64_t)&v28);
  v10 = v28;
  v11 = v32;
  v12 = v32 >> 6;
  if (!v12)
  {
    v32 &= 0x3Fu;
    v23 = v29;
    if (static SearchTermValidating.isValid(searchString:)(v28, v29))
      return sub_28D734(v10, v23);
    v33[0] = 1;
    memset(&v33[1], 0, 24);
    v34 = 0x80;
    return SearchController.publisher(for:)(v33);
  }
  if (v12 != 1)
  {
    if (v32 == 128 && !(v30 | v31 | v28 | v29))
    {
      v25 = type metadata accessor for SearchContent(0);
      Empty.init(completeImmediately:)(1, v25, &type metadata for Never, &protocol witness table for Never);
      v26 = sub_32914(&qword_3C59C8, &qword_3C59B8, (uint64_t)&protocol conformance descriptor for Empty<A, B>);
      v22 = Publisher.eraseToAnyPublisher()(v6, v26);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      return v22;
    }
    return sub_28D904();
  }
  v32 &= 0x3Fu;
  v13 = v29;
  v14 = v30;
  v15 = v31;
  v16 = v11 & 1;
  v17 = swift_allocObject(&unk_38DC48, 24, 7);
  swift_weakInit(v17 + 16);
  v18 = swift_allocObject(&unk_38DC70, 57, 7);
  *(_QWORD *)(v18 + 16) = v17;
  *(_QWORD *)(v18 + 24) = v10;
  *(_QWORD *)(v18 + 32) = v13;
  *(_QWORD *)(v18 + 40) = v14;
  *(_QWORD *)(v18 + 48) = v15;
  *(_BYTE *)(v18 + 56) = v16;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v13);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B46C8);
  v20 = sub_32914(&qword_3B46E0, &qword_3B46C8, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  RetriggerableDeferred.init(createPublisher:)(sub_2902EC, v18, v19, v20);
  v21 = sub_32914(&qword_3C59C0, &qword_3C59B0, (uint64_t)&protocol conformance descriptor for RetriggerableDeferred<A>);
  v22 = Publisher.eraseToAnyPublisher()(v2, v21);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v22;
}

Swift::Void __swiftcall SearchController.selectHint(at:)(Swift::Int at)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t v6;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(class metadata base offset for ManagedBuffer + *(_QWORD *)v3 + 16);
  v5 = (os_unfair_lock_s *)(v3 + ((*(unsigned int *)(*(_QWORD *)v3 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v5);
  v6 = v3 + *(int *)(type metadata accessor for SearchController.State(0) + 20) + v4;
  *(_QWORD *)v6 = at;
  *(_BYTE *)(v6 + 8) = 0;
  os_unfair_lock_unlock(v5);
}

uint64_t SearchController.init(asPartOf:)()
{
  uint64_t v0;

  v0 = sub_28FEBC();
  swift_release();
  return v0;
}

uint64_t SearchController.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release();
  __swift_destroy_boxed_opaque_existential_1((_QWORD *)(v0 + 24));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 64));

  v1 = v0 + OBJC_IVAR____TtC8ShelfKit16SearchController_metricsPipeline;
  v2 = type metadata accessor for MetricsPipeline(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((_QWORD *)(v0
                                                      + OBJC_IVAR____TtC8ShelfKit16SearchController_storeDataProvider));
  return v0;
}

uint64_t SearchController.__deallocating_deinit()
{
  uint64_t v0;

  SearchController.deinit();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_28D5E0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7718);
  __chkstk_darwin(v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for MetricsFieldsContext(0);
  BaseObjectGraph.injectIfAvailable<A>(_:)(v5, v5);
  return sub_290F80((uint64_t)v4, a1);
}

uint64_t SearchController.selectedHintIndex.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  os_unfair_lock_s *v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(class metadata base offset for ManagedBuffer + *(_QWORD *)v1 + 16);
  v3 = (os_unfair_lock_s *)(v1 + ((*(unsigned int *)(*(_QWORD *)v1 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v3);
  v4 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for SearchController.State(0) + 20) + v2);
  os_unfair_lock_unlock(v3);
  return v4;
}

uint64_t sub_28D6EC(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = type metadata accessor for SearchController.State(0);
  v5 = a1 + *(int *)(result + 20);
  *(_QWORD *)v5 = a2;
  *(_BYTE *)(v5 + 8) = 0;
  return result;
}

uint64_t sub_28D734(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C5B80);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8ShelfKit16SearchController_storeDataProvider + 24);
  v10 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8ShelfKit16SearchController_storeDataProvider + 32);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v2 + OBJC_IVAR____TtC8ShelfKit16SearchController_storeDataProvider), v9);
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 176))(a1, a2, v9, v10);
  v12 = Promise.optionalPublisher.getter();
  swift_release(v11);
  v22 = v12;
  v13 = swift_allocObject(&unk_38DC48, 24, 7);
  swift_weakInit(v13 + 16);
  v14 = (_QWORD *)swift_allocObject(&unk_38DCA8, 40, 7);
  v14[2] = v13;
  v14[3] = a1;
  v14[4] = a2;
  swift_bridgeObjectRetain(a2);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C5B88);
  v16 = type metadata accessor for SearchContent(0);
  v17 = sub_32914(&qword_3C5B90, &qword_3C5B88, (uint64_t)&protocol conformance descriptor for Future<A, B>);
  Publisher.map<A>(_:)(sub_290AA4, v14, v15, v16, v17);
  swift_release(v14);
  swift_release(v22);
  v18 = sub_32914(&qword_3C5B98, &qword_3C5B80, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v19 = Publisher.eraseToAnyPublisher()(v5, v18);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return v19;
}

uint64_t sub_28D904()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *boxed_opaque_existential_2Tm;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  _QWORD v28[5];

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C59B8);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v28[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C5BB8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v28[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C5BC0);
  v27 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v28[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Podcasts(0);
  v28[3] = v12;
  v28[4] = sub_F1C0((unint64_t *)&qword_3B33B8, (void (*)(uint64_t))&type metadata accessor for Podcasts, (uint64_t)&protocol conformance descriptor for Podcasts);
  boxed_opaque_existential_2Tm = __swift_allocate_boxed_opaque_existential_2Tm(v28);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(boxed_opaque_existential_2Tm, enum case for Podcasts.recentlySearched(_:), v12);
  LOBYTE(v12) = isFeatureEnabled(_:)(v28);
  __swift_destroy_boxed_opaque_existential_1(v28);
  if ((v12 & 1) != 0
    && (v14 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit16SearchController_recentlySearchedStore)) != 0
    && (v15 = *(_QWORD *)(v0 + 64)) != 0)
  {
    v16 = *(_QWORD *)(v0 + 72);
    v17 = v0 + 24;
    v18 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit16SearchController_searchLockupCache);
    v19 = v15;
    swift_retain(v14);
    swift_unknownObjectRetain(v19);
    sub_CBD00(v14, v19, v16, v17, v18, (uint64_t)v8);
    v20 = type metadata accessor for SearchContent(0);
    v21 = sub_32914(&qword_3C5BC8, &qword_3C5BB8, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
    Publisher.map<A>(_:)(sub_28F670, 0, v5, v20, v21);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v22 = sub_32914(&qword_3C5BD0, &qword_3C5BC0, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
    v23 = Publisher.eraseToAnyPublisher()(v9, v22);
    swift_unknownObjectRelease(v19);
    swift_release(v14);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v11, v9);
  }
  else
  {
    v24 = type metadata accessor for SearchContent(0);
    Empty.init(completeImmediately:)(1, v24, &type metadata for Never, &protocol witness table for Never);
    v25 = sub_32914(&qword_3C59C8, &qword_3C59B8, (uint64_t)&protocol conformance descriptor for Empty<A, B>);
    v23 = Publisher.eraseToAnyPublisher()(v1, v25);
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
  return v23;
}

uint64_t sub_28DBE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t *a9@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t Strong;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t result;
  uint64_t v43;
  uint64_t v44;
  _BYTE v45[12];
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58[24];

  v46 = a8;
  v48 = a6;
  v49 = a7;
  v47 = a5;
  v50 = a1;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C5BD8);
  v52 = *(_QWORD *)(v13 - 8);
  v53 = v13;
  __chkstk_darwin(v13);
  v51 = &v45[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C5BE0);
  v55 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v54 = &v45[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v56 = type metadata accessor for SearchContent(0);
  v17 = *(_QWORD *)(v56 - 8);
  __chkstk_darwin(v56);
  v19 = &v45[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C5BE8);
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v23 = &v45[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  a3 += 16;
  swift_beginAccess(a3, v58, 0, 0);
  Strong = swift_weakLoadStrong(a3);
  if (Strong)
  {
    v25 = Strong;
    v57 = sub_28DF98(a4, v47, v48, v49, v46 & 1);
    v26 = swift_allocObject(&unk_38DD48, 32, 7);
    *(_QWORD *)(v26 + 16) = v50;
    *(_QWORD *)(v26 + 24) = a2;
    swift_retain(a2);
    v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C5BF8);
    v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B46C8);
    v50 = v15;
    v29 = sub_32914(&qword_3C5C00, &qword_3C5BF8, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
    v30 = sub_32914(&qword_3B46E0, &qword_3B46C8, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
    v31 = v51;
    Publisher.catch<A>(_:)(sub_290C2C, v26, v27, v28, v29, v30);
    swift_release(v26);
    swift_release(v57);
    v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C5C08);
    v33 = *(unsigned __int8 *)(v17 + 80);
    v34 = (v33 + 32) & ~v33;
    v35 = swift_allocObject(v32, v34 + *(_QWORD *)(v17 + 72), v33 | 7);
    *(_OWORD *)(v35 + 16) = xmmword_2EA0D0;
    swift_storeEnumTagMultiPayload(v35 + v34, v56, 5);
    v36 = sub_32914(&qword_3C5C10, &qword_3C5BD8, (uint64_t)&protocol conformance descriptor for Publishers.Catch<A, B>);
    v37 = v53;
    v38 = v54;
    Publisher.prepend(_:)(v35, v53, v36);
    swift_bridgeObjectRelease();
    (*(void (**)(_BYTE *, uint64_t))(v52 + 8))(v31, v37);
    v39 = sub_32914(&qword_3C5C18, &qword_3C5BE0, (uint64_t)&protocol conformance descriptor for Publishers.Concatenate<A, B>);
    v40 = v50;
    v41 = Publisher.eraseToAnyPublisher()(v50, v39);
    swift_release(v25);
    result = (*(uint64_t (**)(_BYTE *, uint64_t))(v55 + 8))(v38, v40);
  }
  else
  {
    static GroupedSearchResultsPage.empty.getter((uint64_t)v19);
    v43 = v56;
    swift_storeEnumTagMultiPayload(v19, v56, 4);
    Just.init(_:)(v19, v43);
    v44 = sub_32914(&qword_3C5BF0, &qword_3C5BE8, (uint64_t)&protocol conformance descriptor for Just<A>);
    v41 = Publisher.eraseToAnyPublisher()(v20, v44);
    result = (*(uint64_t (**)(_BYTE *, uint64_t))(v21 + 8))(v23, v20);
  }
  *a9 = v41;
  return result;
}

uint64_t sub_28DF98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_signpost_type_t v23;
  char v24;
  char *v25;
  const char *v26;
  void (*v27)(char *, char *, uint64_t);
  uint8_t *v28;
  uint64_t v29;
  uint8_t *v30;
  os_signpost_id_t v31;
  uint8_t *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  int v66;
  uint64_t v67;

  v61 = a3;
  v62 = a4;
  v63 = a2;
  v59 = a1;
  v60 = *v5;
  v66 = a5 & 1;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C5C20);
  v65 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v64 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OSSignposter(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for OSSignpostID(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)&v53 - v17;
  if (qword_3B02C0 != -1)
    swift_once(&qword_3B02C0, sub_28E528);
  v19 = __swift_project_value_buffer(v8, (uint64_t)qword_3C5998);
  v20 = OSSignposter.logHandle.getter(v19);
  OSSignpostID.init(log:)(v20);
  v57 = v9;
  v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v19, v8);
  v22 = OSSignposter.logHandle.getter(v21);
  v23 = static os_signpost_type_t.begin.getter();
  v24 = OS_os_log.signpostsEnabled.getter();
  v25 = v18;
  v58 = v13;
  if ((v24 & 1) != 0)
  {
    v26 = "StoreSearchProvider";
    if (!v66)
      v26 = "LibrarySearchProvider";
    v54 = v26;
    v55 = v8;
    v27 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
    v27(v16, v25, v12);
    v28 = (uint8_t *)swift_slowAlloc(2, -1);
    v56 = v12;
    v29 = v6;
    v30 = v28;
    *(_WORD *)v28 = 0;
    v31 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_0, v22, v23, v31, v54, "", v30, 2u);
    v32 = v30;
    v6 = v29;
    v12 = v56;
    swift_slowDealloc(v32, -1, -1);

    v8 = v55;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  }
  else
  {

    v27 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
  }
  v27(v16, v25, v12);
  v33 = type metadata accessor for OSSignpostIntervalState(0);
  swift_allocObject(v33, *(unsigned int *)(v33 + 48), *(unsigned __int16 *)(v33 + 52));
  v34 = v25;
  v35 = OSSignpostIntervalState.init(id:isOpen:)(v16, 1);
  (*(void (**)(char *, uint64_t))(v57 + 8))(v11, v8);
  v36 = v59;
  v37 = v63;
  v38 = v66;
  v39 = sub_28F6B0(v59, v63, v66);
  v40 = v12;
  v41 = Promise.publisher.getter(v39);
  swift_release(v39);
  v67 = v41;
  v42 = swift_allocObject(&unk_38DC48, 24, 7);
  swift_weakInit(v42 + 16);
  v43 = swift_allocObject(&unk_38DD70, 80, 7);
  *(_BYTE *)(v43 + 16) = v38;
  *(_QWORD *)(v43 + 24) = v35;
  *(_QWORD *)(v43 + 32) = v42;
  *(_QWORD *)(v43 + 40) = v36;
  *(_QWORD *)(v43 + 48) = v37;
  *(_QWORD *)(v43 + 56) = v61;
  v44 = v62;
  v45 = v60;
  *(_QWORD *)(v43 + 64) = v62;
  *(_QWORD *)(v43 + 72) = v45;
  swift_bridgeObjectRetain(v44);
  swift_retain(v35);
  swift_bridgeObjectRetain(v37);
  v46 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C5C28);
  v47 = type metadata accessor for SearchContent(0);
  v48 = sub_32914(&qword_3C5C30, &qword_3C5C28, (uint64_t)&protocol conformance descriptor for Future<A, B>);
  v49 = v64;
  Publisher.map<A>(_:)(sub_290C70, v43, v46, v47, v48);
  swift_release(v43);
  swift_release(v67);
  v50 = sub_32914(&qword_3C5C38, &qword_3C5C20, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v51 = Publisher.eraseToAnyPublisher()(v6, v50);
  swift_release(v35);
  (*(void (**)(char *, uint64_t))(v65 + 8))(v49, v6);
  (*(void (**)(char *, uint64_t))(v58 + 8))(v34, v40);
  return v51;
}

uint64_t sub_28E3E8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;

  v8 = type metadata accessor for SearchContent(0);
  __chkstk_darwin(v8);
  v10 = (uint64_t *)((char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C5BE8);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *a1;
  *v10 = v15;
  v10[1] = a2;
  v10[2] = a3;
  swift_storeEnumTagMultiPayload(v10, v8, 0);
  swift_errorRetain(v15);
  swift_retain(a3);
  Just.init(_:)(v10, v8);
  v16 = sub_32914(&qword_3C5BF0, &qword_3C5BE8, (uint64_t)&protocol conformance descriptor for Just<A>);
  v17 = Publisher.eraseToAnyPublisher()(v11, v16);
  result = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  *a4 = v17;
  return result;
}

uint64_t sub_28E528()
{
  uint64_t v0;

  v0 = type metadata accessor for OSSignposter(0);
  __swift_allocate_value_buffer(v0, qword_3C5998);
  __swift_project_value_buffer(v0, (uint64_t)qword_3C5998);
  return static OSSignposter.search.getter();
}

uint64_t sub_28E570@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t Strong;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  _QWORD *boxed_opaque_existential_2Tm;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t result;
  uint64_t v50;
  _QWORD *v51;
  id v52;
  void *v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD v83[5];
  char v84[32];

  v70 = a4;
  v69 = a3;
  v74 = a2;
  v79 = a1;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8660);
  __chkstk_darwin(v6);
  v8 = (char *)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = type metadata accessor for ModernShelf(0);
  v9 = *(_QWORD *)(v82 - 8);
  v10 = __chkstk_darwin(v82);
  v81 = (uint64_t)&v60 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v80 = (uint64_t)&v60 - v12;
  v13 = type metadata accessor for PageMetrics(0);
  v77 = *(_QWORD *)(v13 - 8);
  v78 = v13;
  __chkstk_darwin(v13);
  v76 = (char *)&v60 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for PageID(0);
  v72 = *(_QWORD *)(v15 - 8);
  v73 = v15;
  __chkstk_darwin(v15);
  v75 = (char *)&v60 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for ModernPage(0);
  __chkstk_darwin(v17);
  v71 = (char *)&v60 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = type metadata accessor for MetricsData.Configuration(0);
  v64 = *(_QWORD *)(v65 - 8);
  __chkstk_darwin(v65);
  v63 = (char *)&v60 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
  __chkstk_darwin(v20);
  v22 = (char *)&v60 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = type metadata accessor for MetricsData(0);
  v67 = *(_QWORD *)(v68 - 8);
  __chkstk_darwin(v68);
  v66 = (char *)&v60 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C5BA0);
  __chkstk_darwin(v24);
  v26 = (char *)&v60 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for SearchHintsPage(0);
  v28 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v30 = (char *)&v60 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_267BC(v79, (uint64_t)v26, &qword_3C5BA0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27) == 1)
  {
    v31 = sub_1459C((uint64_t)v26, &qword_3C5BA0);
    v32 = static PageID.searchHints.getter(v31);
    static PageMetrics.notInstrumented.getter(v32);
    *(_QWORD *)(a5 + *(int *)(v17 + 24)) = _swiftEmptyArrayStorage;
LABEL_26:
    v59 = type metadata accessor for SearchContent(0);
    return swift_storeEnumTagMultiPayload(a5, v59, 1);
  }
  v79 = v17;
  v62 = a5;
  v33 = v74 + 16;
  sub_3C56C((uint64_t)v26, (uint64_t)v30, type metadata accessor for SearchHintsPage);
  swift_beginAccess(v33, v84, 0, 0);
  Strong = swift_weakLoadStrong(v33);
  v35 = (uint64_t)v30;
  if (Strong)
  {
    v36 = Strong;
    v61 = static MetricsTargetType.key.getter();
    v38 = v37;
    v74 = static MetricsActionType.input.getter();
    v40 = v39;
    v41 = type metadata accessor for URL(0);
    v42 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v22, 1, 1, v41);
    v43 = v63;
    static MetricsData.Configuration.podcasts.getter(v42);
    v44 = (uint64_t)v66;
    static MetricsData.searchData(targetType:term:prefix:actionType:actionURL:fields:configuration:)(v61, v38, v69, v70, 0, 0, v74, v40, v22, &_swiftEmptyDictionarySingleton, v43);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v64 + 8))(v43, v65);
    sub_1459C((uint64_t)v22, &qword_3B4370);
    v83[3] = v27;
    v83[4] = sub_F1C0(&qword_3C5BA8, (void (*)(uint64_t))type metadata accessor for SearchHintsPage, (uint64_t)&protocol conformance descriptor for SearchHintsPage);
    boxed_opaque_existential_2Tm = __swift_allocate_boxed_opaque_existential_2Tm(v83);
    sub_14510(v35, (uint64_t)boxed_opaque_existential_2Tm, type metadata accessor for SearchHintsPage);
    sub_28ECB0(v44, (uint64_t)v83);
    swift_release(v36);
    (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v44, v68);
    Strong = sub_1459C((uint64_t)v83, &qword_3C5BB0);
  }
  static PageID.searchHints.getter(Strong);
  (*(void (**)(char *, uint64_t, uint64_t))(v77 + 16))(v76, v35 + *(int *)(v27 + 24), v78);
  v46 = *(_QWORD *)(v35 + 8);
  v47 = v79;
  if (!((unint64_t)v46 >> 62))
  {
    v48 = *(_QWORD *)((char *)&dword_10 + (v46 & 0xFFFFFFFFFFFFF8));
    result = swift_bridgeObjectRetain_n(*(_QWORD *)(v35 + 8), 2);
    v74 = v35;
    if (v48)
      goto LABEL_7;
LABEL_24:
    v51 = _swiftEmptyArrayStorage;
LABEL_25:
    swift_bridgeObjectRelease_n(v46, 2);
    sub_145D8(v74, type metadata accessor for SearchHintsPage);
    v58 = (uint64_t)v71;
    (*(void (**)(char *, char *, uint64_t))(v72 + 32))(v71, v75, v73);
    (*(void (**)(uint64_t, char *, uint64_t))(v77 + 32))(v58 + *(int *)(v47 + 20), v76, v78);
    *(_QWORD *)(v58 + *(int *)(v47 + 24)) = v51;
    a5 = v62;
    sub_3C56C(v58, v62, type metadata accessor for ModernPage);
    goto LABEL_26;
  }
  if (v46 < 0)
    v57 = *(_QWORD *)(v35 + 8);
  else
    v57 = v46 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain_n(*(_QWORD *)(v35 + 8), 2);
  result = _CocoaArrayWrapper.endIndex.getter(v57);
  v48 = result;
  v74 = v35;
  if (!result)
    goto LABEL_24;
LABEL_7:
  if (v48 >= 1)
  {
    v50 = 0;
    v51 = _swiftEmptyArrayStorage;
    do
    {
      if ((v46 & 0xC000000000000001) != 0)
        v52 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v50, v46);
      else
        v52 = *(id *)(v46 + 8 * v50 + 32);
      v53 = v52;
      Shelf.mapToModernShelf()((uint64_t)v8);

      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, v82) == 1)
      {
        sub_1459C((uint64_t)v8, &qword_3B8660);
      }
      else
      {
        v54 = v80;
        sub_3C56C((uint64_t)v8, v80, type metadata accessor for ModernShelf);
        sub_3C56C(v54, v81, type metadata accessor for ModernShelf);
        if ((swift_isUniquelyReferenced_nonNull_native(v51) & 1) == 0)
          v51 = (_QWORD *)sub_10CD4(0, v51[2] + 1, 1, (unint64_t)v51);
        v56 = v51[2];
        v55 = v51[3];
        if (v56 >= v55 >> 1)
          v51 = (_QWORD *)sub_10CD4(v55 > 1, v56 + 1, 1, (unint64_t)v51);
        v51[2] = v56 + 1;
        sub_3C56C(v81, (uint64_t)v51+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * v56, type metadata accessor for ModernShelf);
        v47 = v79;
      }
      ++v50;
    }
    while (v48 != v50);
    goto LABEL_25;
  }
  __break(1u);
  return result;
}

uint64_t sub_28ECB0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  void *v36;
  char *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t (*v40)();
  uint64_t (*v41)();
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t (*v53)(char *, uint64_t);
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  void (*v59)(char *, uint64_t, uint64_t);
  char *v60;
  uint64_t v61;
  void (*v62)(char *, uint64_t, uint64_t);
  char *v63;
  uint64_t v64;
  void (*v65)(char *, char *, uint64_t);
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void (*v98)(char *, uint64_t);
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t (*v119)(char *, uint64_t);
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  char *v125;
  char *v126;
  char *v127;
  char *v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD aBlock[3];
  void *v134;
  uint64_t (*v135)();
  uint64_t v136;

  v121 = a1;
  v106 = type metadata accessor for DispatchWorkItemFlags(0);
  v105 = *(_QWORD *)(v106 - 8);
  __chkstk_darwin(v106);
  v104 = (char *)&v100 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v103 = type metadata accessor for DispatchQoS(0);
  v102 = *(_QWORD *)(v103 - 8);
  __chkstk_darwin(v103);
  v101 = (char *)&v100 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v122 = type metadata accessor for MetricsData(0);
  v131 = *(_QWORD *)(v122 - 8);
  v5 = __chkstk_darwin(v122);
  v126 = (char *)&v100 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v120 = v6;
  __chkstk_darwin(v5);
  v128 = (char *)&v100 - v7;
  v123 = type metadata accessor for MetricsPipeline(0);
  v130 = *(_QWORD *)(v123 - 8);
  v8 = __chkstk_darwin(v123);
  v125 = (char *)&v100 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v117 = v9;
  __chkstk_darwin(v8);
  v118 = (char *)&v100 - v10;
  v115 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B76E8);
  v114 = *(_QWORD *)(v115 - 8);
  __chkstk_darwin(v115);
  v112 = (char *)&v100 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v111 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B76F0);
  v110 = *(_QWORD *)(v111 - 8);
  __chkstk_darwin(v111);
  v109 = (char *)&v100 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7718);
  __chkstk_darwin(v13);
  v107 = (uint64_t)&v100 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for SearchController.State(0);
  __chkstk_darwin(v15);
  v17 = (uint64_t *)((char *)&v100 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v132 = type metadata accessor for MetricsFieldsContext(0);
  v116 = *(_QWORD *)(v132 - 8);
  v18 = __chkstk_darwin(v132);
  v124 = (char *)&v100 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v18);
  v127 = (char *)&v100 - v21;
  v22 = __chkstk_darwin(v20);
  v24 = (char *)&v100 - v23;
  v25 = __chkstk_darwin(v22);
  v108 = (char *)&v100 - v26;
  v113 = v27;
  __chkstk_darwin(v25);
  v129 = (char *)&v100 - v28;
  v29 = type metadata accessor for MetricsActivity.State(0);
  __chkstk_darwin(v29);
  v31 = (uint64_t *)((char *)&v100 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  v32 = type metadata accessor for PageMetrics(0);
  v33 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v35 = (char *)&v100 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_267BC(a2, (uint64_t)aBlock, &qword_3C5BB0);
  v36 = v134;
  if (v134)
  {
    v100 = v29;
    v37 = v24;
    v38 = v17;
    v39 = v15;
    v40 = v135;
    __swift_project_boxed_opaque_existential_1(aBlock, (uint64_t)v134);
    v41 = v40;
    v15 = v39;
    v17 = v38;
    v24 = v37;
    v29 = v100;
    v42 = dispatch thunk of PageModel.pageMetrics.getter(v36, v41);
    v43 = PageMetrics.pageFields.getter(v42);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v35, v32);
    __swift_destroy_boxed_opaque_existential_1(aBlock);
    v44 = v119;
    if (v43)
      goto LABEL_6;
  }
  else
  {
    sub_1459C((uint64_t)aBlock, &qword_3C5BB0);
    v44 = v119;
  }
  OSAllocatedUnfairLock.current.getter(v31, *(_QWORD *)(*((_QWORD *)v44 + 10) + OBJC_IVAR____TtC8ShelfKit15MetricsActivity_state), v29);
  v43 = *(_QWORD *)((char *)v31 + *(int *)(v29 + 28));
  swift_bridgeObjectRetain(v43);
  sub_145D8((uint64_t)v31, type metadata accessor for MetricsActivity.State);
  swift_bridgeObjectRelease();
LABEL_6:
  OSAllocatedUnfairLock.current.getter(v17, *((_QWORD *)v44 + 2), v15);
  v45 = v107;
  sub_290AB0((uint64_t)v17, v107);
  v46 = v116;
  v47 = v132;
  v48 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v116 + 48))(v45, 1, v132);
  if ((_DWORD)v48 == 1)
  {
    MetricsFieldsContext.init()(v48);
    sub_1459C(v45, &qword_3B7718);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v46 + 32))(v24, v45, v47);
  }
  aBlock[0] = *(_QWORD *)((char *)v44 + OBJC_IVAR____TtC8ShelfKit16SearchController_pageContextTracker);
  v49 = swift_retain(aBlock[0]);
  v50 = v109;
  static MetricsFieldsContext.Property<A>.pageContextTracker.getter(v49);
  v51 = type metadata accessor for PageContextTracker(0);
  v52 = v108;
  MetricsFieldsContext.addingValue<A>(_:forProperty:)(aBlock, v50, v51);
  (*(void (**)(char *, uint64_t))(v110 + 8))(v50, v111);
  swift_release(aBlock[0]);
  v53 = *(uint64_t (**)(char *, uint64_t))(v46 + 8);
  v54 = v53(v24, v47);
  aBlock[0] = v43;
  v55 = v112;
  static MetricsFieldsContext.Property<A>.pageFields.getter(v54);
  v56 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0A78);
  v57 = v129;
  MetricsFieldsContext.addingValue<A>(_:forProperty:)(aBlock, v55, v56);
  (*(void (**)(char *, uint64_t))(v114 + 8))(v55, v115);
  v119 = v53;
  v53(v52, v47);
  swift_bridgeObjectRelease();
  v58 = (uint64_t)v44 + OBJC_IVAR____TtC8ShelfKit16SearchController_metricsPipeline;
  v59 = *(void (**)(char *, uint64_t, uint64_t))(v130 + 16);
  v60 = v118;
  v61 = v123;
  v59(v118, v58, v123);
  v62 = *(void (**)(char *, uint64_t, uint64_t))(v131 + 16);
  v63 = v128;
  v64 = v122;
  v62(v128, v121, v122);
  v65 = *(void (**)(char *, char *, uint64_t))(v46 + 16);
  v66 = v127;
  v65(v127, v57, v132);
  v59(v125, (uint64_t)v60, v61);
  v62(v126, (uint64_t)v63, v64);
  v65(v124, v66, v132);
  v68 = v130;
  v67 = v131;
  v69 = *(unsigned __int8 *)(v130 + 80);
  v70 = (v69 + 16) & ~v69;
  v71 = *(unsigned __int8 *)(v131 + 80);
  v72 = (v117 + v71 + v70) & ~v71;
  v73 = *(unsigned __int8 *)(v46 + 80);
  v74 = (v120 + v73 + v72) & ~v73;
  v75 = swift_allocObject(&unk_38DCD0, v74 + v113, v69 | v71 | v73 | 7);
  v76 = v75 + v70;
  v77 = v132;
  (*(void (**)(uint64_t, char *, uint64_t))(v68 + 32))(v76, v60, v61);
  v78 = v64;
  v79 = v77;
  (*(void (**)(uint64_t, char *, uint64_t))(v67 + 32))(v75 + v72, v128, v78);
  (*(void (**)(uint64_t, char *, uint64_t))(v46 + 32))(v75 + v74, v127, v77);
  if (objc_msgSend((id)objc_opt_self(NSThread), "isMainThread"))
  {
    v80 = v125;
    v81 = v126;
    v82 = v124;
    v83 = MetricsPipeline.process(_:using:)(v126, v124);
    swift_release(v75);
    v75 = v83;
  }
  else
  {
    v84 = sub_327F8(0, (unint64_t *)&qword_3B8710, OS_dispatch_queue_ptr);
    v85 = (void *)static OS_dispatch_queue.main.getter(v84);
    v86 = swift_allocObject(&unk_38DCF8, 32, 7);
    *(_QWORD *)(v86 + 16) = sub_C76C0;
    *(_QWORD *)(v86 + 24) = v75;
    v135 = sub_327F0;
    v136 = v86;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_2C9F4;
    v134 = &block_descriptor_30;
    v87 = _Block_copy(aBlock);
    v88 = v136;
    swift_retain(v75);
    v89 = swift_release(v88);
    v90 = v101;
    static DispatchQoS.unspecified.getter(v89);
    aBlock[0] = _swiftEmptyArrayStorage;
    v91 = sub_F1C0((unint64_t *)&qword_3B4420, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v92 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8720);
    v93 = sub_32914((unint64_t *)&qword_3B4430, (uint64_t *)&unk_3B8720, (uint64_t)&protocol conformance descriptor for [A]);
    v94 = v104;
    v95 = v92;
    v96 = v106;
    v97 = v91;
    v81 = v126;
    dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v95, v93, v106, v97);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v90, v94, v87);
    _Block_release(v87);

    v61 = v123;
    (*(void (**)(char *, uint64_t))(v105 + 8))(v94, v96);
    (*(void (**)(char *, uint64_t))(v102 + 8))(v90, v103);
    v82 = v124;
    v80 = v125;
  }
  v98 = (void (*)(char *, uint64_t))v119;
  swift_release(v75);
  (*(void (**)(char *, uint64_t))(v130 + 8))(v80, v61);
  (*(void (**)(char *, uint64_t))(v131 + 8))(v81, v78);
  v98(v82, v79);
  return ((uint64_t (*)(char *, uint64_t))v98)(v129, v79);
}

uint64_t sub_28F670@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  sub_14510(a1, a2, type metadata accessor for ModernPage);
  v3 = type metadata accessor for SearchContent(0);
  return swift_storeEnumTagMultiPayload(a2, v3, 2);
}

uint64_t sub_28F6B0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t ObjectType;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;

  v7 = type metadata accessor for GroupedSearchResultsPage(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Logger(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a3 & 1) != 0)
  {
    v19 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8ShelfKit16SearchController_storeDataProvider + 24);
    v20 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8ShelfKit16SearchController_storeDataProvider + 32);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v3 + OBJC_IVAR____TtC8ShelfKit16SearchController_storeDataProvider), v19);
    v21 = sub_288078((uint64_t)_swiftEmptyArrayStorage);
    v18 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(v20 + 168))(a1, a2, v21, v19, v20);
    goto LABEL_5;
  }
  v14 = *(_QWORD *)(v3 + 64);
  if (v14)
  {
    v15 = *(_QWORD *)(v3 + 72);
    ObjectType = swift_getObjectType();
    swift_unknownObjectRetain(v14);
    v17 = sub_288078((uint64_t)_swiftEmptyArrayStorage);
    v18 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(v15 + 416))(a1, a2, v17, ObjectType, v15);
    swift_unknownObjectRelease(v14);
LABEL_5:
    swift_bridgeObjectRelease();
    return v18;
  }
  sub_327F8(0, (unint64_t *)&qword_3B0CF0, OS_os_log_ptr);
  v23 = static OS_os_log.search.getter();
  v24 = Logger.logObject.getter(v23);
  v25 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v24, v25))
  {
    v26 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v26 = 0;
    _os_log_impl(&dword_0, v24, v25, "Cannot fetch library search results without library data provider!", v26, 2u);
    swift_slowDealloc(v26, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  __swift_instantiateConcreteTypeFromMangledName(&qword_3C0970);
  static GroupedSearchResultsPage.empty.getter((uint64_t)v9);
  return Promise.__allocating_init(value:)(v9);
}

uint64_t sub_28F8E0@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>)
{
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t Strong;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  os_unfair_lock_s *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  int v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  _BYTE v67[24];
  char v68[32];

  v55 = a7;
  v56 = a8;
  v59 = a5;
  v60 = a6;
  v63 = a3;
  v62 = a2;
  v61 = a9;
  v54 = type metadata accessor for MetricsData.Configuration(0);
  v53 = *(_QWORD *)(v54 - 8);
  __chkstk_darwin(v54);
  v12 = (char *)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for MetricsData(0);
  v57 = *(_QWORD *)(v13 - 8);
  v58 = v13;
  __chkstk_darwin(v13);
  v15 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
  __chkstk_darwin(v16);
  v18 = (char *)&v52 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = a4 + 16;
  v20 = type metadata accessor for GroupedSearchResultsPage(0);
  v21 = PageMetrics.pageFields.getter(v20);
  if (v21)
  {
    v22 = v21;
    v23 = static MetricsField<>.pageURL.getter();
    sub_13E5A8(v23, v24, v22, (uint64_t)v18);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v25 = type metadata accessor for URL(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v18, 1, 1, v25);
  }
  swift_beginAccess(v19, v68, 0, 0);
  Strong = swift_weakLoadStrong(v19);
  if (!Strong)
    goto LABEL_6;
  v27 = Strong;
  v28 = *(_QWORD *)(Strong + 16);
  v29 = *(_QWORD *)(class metadata base offset for ManagedBuffer + *(_QWORD *)v28 + 16);
  v30 = (os_unfair_lock_s *)(v28 + ((*(unsigned int *)(*(_QWORD *)v28 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v30);
  v31 = v28 + *(int *)(type metadata accessor for SearchController.State(0) + 20) + v29;
  v32 = *(_QWORD *)v31;
  LODWORD(v29) = *(unsigned __int8 *)(v31 + 8);
  *(_QWORD *)v31 = 0;
  *(_BYTE *)(v31 + 8) = 1;
  os_unfair_lock_unlock(v30);
  swift_release(v27);
  if ((_DWORD)v29 != 1)
  {
    swift_beginAccess(v19, v67, 0, 0);
    v43 = swift_weakLoadStrong(v19);
    if (!v43)
      goto LABEL_11;
    v44 = v43;
    sub_28FCC4(v59, v60, v55, v56, v32, (uint64_t)v18, (uint64_t)v15);
    v66 = 0;
    v64 = 0u;
    v65 = 0u;
    sub_28ECB0((uint64_t)v15, (uint64_t)&v64);
    v42 = v44;
  }
  else
  {
LABEL_6:
    swift_beginAccess(v19, v67, 0, 0);
    v33 = swift_weakLoadStrong(v19);
    if (!v33)
      goto LABEL_11;
    v35 = v33;
    v36 = static MetricsTargetType.button.getter(v33, v34);
    v38 = v37;
    v39 = static MetricsActionType.submit.getter();
    v41 = v40;
    static MetricsData.Configuration.podcasts.getter(v39);
    static MetricsData.searchData(targetType:term:prefix:actionType:actionURL:fields:configuration:)(v36, v38, v59, v60, v55, v56, v39, v41, v18, &_swiftEmptyDictionarySingleton, v12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v53 + 8))(v12, v54);
    v66 = 0;
    v64 = 0u;
    v65 = 0u;
    sub_28ECB0((uint64_t)v15, (uint64_t)&v64);
    v42 = v35;
  }
  swift_release(v42);
  sub_1459C((uint64_t)&v64, &qword_3C5BB0);
  (*(void (**)(char *, uint64_t))(v57 + 8))(v15, v58);
LABEL_11:
  v45 = *(_QWORD *)(*(_QWORD *)(a1 + *(int *)(v20 + 20)) + 16);
  sub_1459C((uint64_t)v18, &qword_3B4370);
  if (v45)
  {
    v46 = v61;
    sub_14510(a1, (uint64_t)v61, type metadata accessor for GroupedSearchResultsPage);
    v47 = type metadata accessor for SearchContent(0);
    swift_storeEnumTagMultiPayload(v46, v47, 4);
  }
  else
  {
    v49 = v60;
    v48 = v61;
    *v61 = v59;
    v48[1] = v49;
    v50 = type metadata accessor for SearchContent(0);
    swift_storeEnumTagMultiPayload(v48, v50, 3);
    swift_bridgeObjectRetain(v49);
  }
  return sub_290CA4(v62 & 1, v63);
}

uint64_t sub_28FCC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t inited;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE v35[136];

  v28 = a6;
  v29 = a2;
  v30 = a3;
  v31 = a4;
  v26 = a7;
  v27 = a1;
  v8 = type metadata accessor for MetricsData.Configuration(0);
  v32 = *(_QWORD *)(v8 - 8);
  v33 = v8;
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = static MetricsTargetType.listItem.getter(v9);
  v13 = v12;
  v25 = static MetricsActionType.hint.getter();
  v15 = v14;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B5020);
  inited = swift_initStackObject(v16, v35);
  v23 = xmmword_2EA080;
  *(_OWORD *)(inited + 16) = xmmword_2EA080;
  *(_QWORD *)(inited + 32) = 0x6E6F697461636F6CLL;
  *(_QWORD *)(inited + 40) = 0xE800000000000000;
  v18 = swift_initStackObject(v16, &v34);
  *(_OWORD *)(v18 + 16) = v23;
  *(_QWORD *)(v18 + 32) = 0xD000000000000010;
  *(_QWORD *)(v18 + 40) = 0x800000000030DAF0;
  *(_QWORD *)(v18 + 48) = a5;
  *(_QWORD *)(v18 + 72) = &type metadata for Int;
  strcpy((char *)(v18 + 80), "locationType");
  *(_QWORD *)(v18 + 120) = &type metadata for String;
  *(_BYTE *)(v18 + 93) = 0;
  *(_WORD *)(v18 + 94) = -5120;
  *(_QWORD *)(v18 + 96) = 0x7473694C746E6948;
  *(_QWORD *)(v18 + 104) = 0xE800000000000000;
  v19 = sub_287F38(v18);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0A78);
  *(_QWORD *)(inited + 48) = v19;
  *(_QWORD *)(inited + 72) = v20;
  *(_QWORD *)(inited + 80) = 0x6449746567726174;
  *(_QWORD *)(inited + 120) = &type metadata for Int;
  *(_QWORD *)(inited + 88) = 0xE800000000000000;
  *(_QWORD *)(inited + 96) = a5;
  v21 = sub_287F38(inited);
  static MetricsData.Configuration.podcasts.getter(v21);
  static MetricsData.searchData(targetType:term:prefix:actionType:actionURL:fields:configuration:)(v24, v13, v27, v29, v30, v31, v25, v15, v28, v21, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v11, v33);
}

uint64_t sub_28FEBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v32;
  uint64_t v33;
  __int128 v34[3];

  v1 = v0;
  v2 = type metadata accessor for MetricsPipeline(0);
  v33 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v32 = (_QWORD **)((char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7718);
  __chkstk_darwin(v4);
  v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for SearchController.State(0);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v32 - v11;
  v13 = type metadata accessor for MetricsFieldsContext(0);
  BaseObjectGraph.injectIfAvailable<A>(_:)(v13, v13);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v10, 1, 1, v13);
  v14 = &v10[*(int *)(v7 + 20)];
  *(_QWORD *)v14 = 0;
  v14[8] = 1;
  sub_290F80((uint64_t)v6, (uint64_t)v10);
  *(_QWORD *)v14 = 0;
  v14[8] = 1;
  sub_3C56C((uint64_t)v10, (uint64_t)v12, type metadata accessor for SearchController.State);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C5C40);
  v16 = swift_allocObject(v15, ((*(unsigned int *)(v15 + 48) + 3) & 0x1FFFFFFFCLL) + 4, *(unsigned __int16 *)(v15 + 52) | 3);
  *(_DWORD *)(v16 + ((*(unsigned int *)(*(_QWORD *)v16 + 48) + 3) & 0x1FFFFFFFCLL)) = 0;
  sub_14510((uint64_t)v12, v16 + *(_QWORD *)(class metadata base offset for ManagedBuffer + *(_QWORD *)v16 + 16), type metadata accessor for SearchController.State);
  sub_145D8((uint64_t)v12, type metadata accessor for SearchController.State);
  *(_QWORD *)(v1 + 16) = v16;
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8C50);
  BaseObjectGraph.inject<A>(_:)(v34, v17, v17);
  sub_F4D8(v34, v1 + 24);
  v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3BF760);
  BaseObjectGraph.injectIfAvailable<A>(_:)(v18, v18);
  *(_OWORD *)(v1 + 64) = v34[0];
  v19 = type metadata accessor for MetricsActivity();
  BaseObjectGraph.injectIfAvailable<A>(_:)(v19, v19);
  v20 = *(id *)&v34[0];
  if (!*(_QWORD *)&v34[0])
  {
    if (qword_3B0108 != -1)
      swift_once(&qword_3B0108, sub_13CAD4);
    v20 = (id)qword_3BBC50;
  }
  *(_QWORD *)(v1 + 80) = v20;
  v21 = v32;
  BaseObjectGraph.inject<A>(_:)(v32, v2, v2);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v33 + 32))(v1 + OBJC_IVAR____TtC8ShelfKit16SearchController_metricsPipeline, v21, v2);
  v22 = type metadata accessor for PageContextTracker(0);
  BaseObjectGraph.injectIfAvailable<A>(_:)(v22, v22);
  v23 = *(_QWORD *)&v34[0];
  if (!*(_QWORD *)&v34[0])
    v23 = static PageContextTracker.shared.getter();
  *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit16SearchController_pageContextTracker) = v23;
  v24 = type metadata accessor for RecentlySearchedStorage();
  BaseObjectGraph.injectIfAvailable<A>(_:)(v24, v24);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit16SearchController_recentlySearchedStore) = *(_QWORD *)&v34[0];
  v25 = type metadata accessor for SearchLockupCache();
  v26 = swift_allocObject(v25, 24, 7);
  v27 = sub_288588((uint64_t)_swiftEmptyArrayStorage);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C5C48);
  v29 = swift_allocObject(v28, 28, 7);
  *(_DWORD *)(v29 + 24) = 0;
  *(_QWORD *)(v29 + 16) = v27;
  *(_QWORD *)(v26 + 16) = v29;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit16SearchController_searchLockupCache) = v26;
  v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BE9F0);
  BaseObjectGraph.inject<A>(_:)(v34, v30, v30);
  sub_F4D8(v34, v1 + OBJC_IVAR____TtC8ShelfKit16SearchController_storeDataProvider);
  objc_msgSend((id)objc_opt_self(PFClientUtil), "supportsLocalLibrary");
  return v1;
}

uint64_t sub_290294()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_2902B8()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[4]);
  swift_bridgeObjectRelease(v0[6]);
  return swift_deallocObject(v0, 57, 7);
}

uint64_t sub_2902EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_28DBE0(a1, a2, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 40), *(_QWORD *)(v3 + 48), *(unsigned __int8 *)(v3 + 56), a3);
}

uint64_t sub_290300()
{
  return type metadata accessor for SearchController(0);
}

uint64_t type metadata accessor for SearchController(uint64_t a1)
{
  return sub_1F9D4(a1, qword_3C5A20, (uint64_t)&nominal type descriptor for SearchController);
}

uint64_t sub_29031C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[9];

  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[1] = &unk_303F18;
  v4[2] = &unk_303F30;
  v4[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
  result = type metadata accessor for MetricsPipeline(319);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(result - 8) + 64;
    v4[5] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[6] = &unk_303F48;
    v4[7] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[8] = &unk_303F18;
    result = swift_updateClassMetadata2(a1, 256, 9, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for SearchController(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for SearchController);
}

uint64_t *sub_2903DC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for MetricsFieldsContext(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7718);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v11 = *(int *)(a3 + 20);
    v12 = (char *)a1 + v11;
    v13 = (char *)a2 + v11;
    *(_QWORD *)v12 = *(_QWORD *)v13;
    v12[8] = v13[8];
  }
  return a1;
}

uint64_t sub_2904D4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = type metadata accessor for MetricsFieldsContext(0);
  v3 = *(_QWORD *)(v2 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(a1, 1, v2);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  return result;
}

char *sub_29053C(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;

  v6 = type metadata accessor for MetricsFieldsContext(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7718);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = *(int *)(a3 + 20);
  v10 = &a1[v9];
  v11 = &a2[v9];
  *(_QWORD *)v10 = *(_QWORD *)v11;
  v10[8] = v11[8];
  return a1;
}

char *sub_290608(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  v6 = type metadata accessor for MetricsFieldsContext(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7718);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  v12 = *(int *)(a3 + 20);
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = *(_QWORD *)v14;
  v13[8] = v14[8];
  *(_QWORD *)v13 = v15;
  return a1;
}

char *sub_290720(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;

  v6 = type metadata accessor for MetricsFieldsContext(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7718);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = *(int *)(a3 + 20);
  v10 = &a1[v9];
  v11 = &a2[v9];
  *(_QWORD *)v10 = *(_QWORD *)v11;
  v10[8] = v11[8];
  return a1;
}

char *sub_2907EC(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v6 = type metadata accessor for MetricsFieldsContext(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7718);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  v12 = *(int *)(a3 + 20);
  v13 = &a1[v12];
  v14 = &a2[v12];
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v13[8] = v14[8];
  return a1;
}

uint64_t sub_290904(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_290910);
}

uint64_t sub_290910(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7718);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_290950(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_29095C);
}

uint64_t sub_29095C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7718);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for SearchController.State(uint64_t a1)
{
  return sub_1F9D4(a1, (uint64_t *)&unk_3C5B40, (uint64_t)&nominal type descriptor for SearchController.State);
}

void sub_2909B4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  sub_290A24(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = "\t";
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
  }
}

void sub_290A24(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_3C5B50)
  {
    v2 = type metadata accessor for MetricsFieldsContext(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_3C5B50);
  }
}

uint64_t sub_290A78()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_290AA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_28E570(a1, v2[2], v2[3], v2[4], a2);
}

uint64_t sub_290AB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7718);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_290AF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = type metadata accessor for MetricsPipeline(0);
  v1 = *(_QWORD *)(v17 - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 16) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);
  v16 = type metadata accessor for MetricsData(0);
  v5 = *(_QWORD *)(v16 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v3 + v4 + v6) & ~v6;
  v8 = *(_QWORD *)(v5 + 64);
  v9 = type metadata accessor for MetricsFieldsContext(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (v7 + v8 + v11) & ~v11;
  v15 = v12 + *(_QWORD *)(v10 + 64);
  v13 = v2 | v6 | v11 | 7;
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v0 + v3, v17);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v0 + v7, v16);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v0 + v12, v9);
  return swift_deallocObject(v0, v15, v13);
}

uint64_t sub_290BF0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t block_copy_helper_30(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t block_destroy_helper_30(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_290C2C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_28E3E8(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t sub_290C34()
{
  _QWORD *v0;

  swift_release(v0[3]);
  swift_release(v0[4]);
  swift_bridgeObjectRelease(v0[6]);
  swift_bridgeObjectRelease(v0[8]);
  return swift_deallocObject(v0, 80, 7);
}

uint64_t sub_290C70@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_28F8E0(a1, *(unsigned __int8 *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64), a2);
}

uint64_t sub_290CA4(int a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  const char *v22;
  _BYTE *v24;
  uint64_t v25;
  uint8_t *v26;
  os_signpost_id_t v27;
  void (*v28)(_BYTE *, uint64_t);
  _BYTE v29[12];
  int v30;
  const char *v31;
  const char *v32;
  _BYTE *v33;
  uint64_t v34;

  LODWORD(v31) = a1;
  v32 = (const char *)type metadata accessor for OSSignpostError(0);
  v3 = *((_QWORD *)v32 - 1);
  __chkstk_darwin(v32);
  v5 = &v29[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = type metadata accessor for OSSignpostID(0);
  v34 = *(_QWORD *)(v6 - 8);
  v7 = __chkstk_darwin(v6);
  v33 = &v29[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v7);
  v10 = &v29[-v9];
  v11 = type metadata accessor for OSSignposter(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = &v29[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_3B02C0 != -1)
    swift_once(&qword_3B02C0, sub_28E528);
  v15 = __swift_project_value_buffer(v11, (uint64_t)qword_3C5998);
  v16 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v12 + 16))(v14, v15, v11);
  v17 = OSSignposter.logHandle.getter(v16);
  v18 = OSSignpostIntervalState.signpostID.getter();
  v30 = static os_signpost_type_t.end.getter(v18);
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v19 = "StoreSearchProvider";
    if ((v31 & 1) == 0)
      v19 = "LibrarySearchProvider";
    v31 = v19;
    v20 = swift_retain(a2);
    checkForErrorAndConsumeState(state:)(v20);
    swift_release(a2);
    v21 = v32;
    if ((*(unsigned int (**)(_BYTE *, const char *))(v3 + 88))(v5, v32) == enum case for OSSignpostError.doubleEnd(_:))
    {
      v22 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(_BYTE *, const char *))(v3 + 8))(v5, v21);
      v22 = "";
    }
    v32 = v22;
    v24 = v33;
    v25 = v34;
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v34 + 16))(v33, v10, v6);
    v26 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v26 = 0;
    v27 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_0, v17, (os_signpost_type_t)v30, v27, v31, v32, v26, 2u);
    swift_slowDealloc(v26, -1, -1);

    v28 = *(void (**)(_BYTE *, uint64_t))(v25 + 8);
    v28(v10, v6);
    (*(void (**)(_BYTE *, uint64_t))(v12 + 8))(v14, v11);
    return ((uint64_t (*)(_BYTE *, uint64_t))v28)(v24, v6);
  }
  else
  {

    (*(void (**)(_BYTE *, uint64_t))(v34 + 8))(v10, v6);
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v12 + 8))(v14, v11);
  }
}

uint64_t sub_290F80(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7718);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t OAuthSession.__allocating_init(authorizationURL:oAuthAdamId:hudViewHandler:endpointSubscriber:window:workQueue:uiQueue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7, void *a8)
{
  uint64_t v8;
  uint64_t v17;

  swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  v17 = sub_296C20(a1, a2, a3, a4, a5, a6, a7, a8);

  return v17;
}

uint64_t OAuthSession.init(authorizationURL:oAuthAdamId:hudViewHandler:endpointSubscriber:window:workQueue:uiQueue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7, void *a8)
{
  uint64_t v11;

  v11 = sub_296C20(a1, a2, a3, a4, a5, a6, a7, a8);

  return v11;
}

uint64_t sub_2910B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t aBlock[5];
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v2 = v1;
  v32 = a1;
  v3 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v36 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v35 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v33 = *(_QWORD *)(v9 - 8);
  v34 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for URL(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  v15 = __chkstk_darwin(v12);
  if (*(_QWORD *)(v2 + OBJC_IVAR____TtC8ShelfKit12OAuthSession_webAuthenticationSession))
  {
    v36 = *(char **)(v2 + OBJC_IVAR____TtC8ShelfKit12OAuthSession_uiQueue);
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v32, v12);
    v16 = *(unsigned __int8 *)(v13 + 80);
    v17 = (v16 + 24) & ~v16;
    v18 = swift_allocObject(&unk_38DDA0, v17 + v14, v16 | 7);
    *(_QWORD *)(v18 + 16) = v2;
    (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v18 + v17, (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v12);
    aBlock[4] = (uint64_t)sub_296E30;
    v38 = v18;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_2C9F4;
    aBlock[3] = (uint64_t)&block_descriptor_31;
    v19 = _Block_copy(aBlock);
    v20 = swift_retain(v2);
    static DispatchQoS.unspecified.getter(v20);
    v39 = (uint64_t)_swiftEmptyArrayStorage;
    v21 = sub_F1C0((unint64_t *)&qword_3B4420, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8720);
    v23 = sub_32914((unint64_t *)&qword_3B4430, (uint64_t *)&unk_3B8720, (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v39, v22, v23, v6, v21);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v8, v19);
    _Block_release(v19);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v8, v6);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v11, v34);
    return swift_release(v38);
  }
  else
  {
    v35 = v3;
    static Logger.purchases.getter(v15);
    v25 = swift_retain(v2);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = swift_slowAlloc(22, -1);
      v29 = swift_slowAlloc(32, -1);
      aBlock[0] = v29;
      *(_DWORD *)v28 = 141558275;
      v39 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40);
      *(_WORD *)(v28 + 12) = 2081;
      v30 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8ShelfKit12OAuthSession_sessionId);
      v31 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8ShelfKit12OAuthSession_sessionId + 8);
      swift_bridgeObjectRetain(v31);
      v39 = sub_69298(v30, v31, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40);
      swift_release(v2);
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_0, v26, v27, "%{private,mask.hash}s: Resume OAuth called but there is no web authentication session to resume in OAuthSession", (uint8_t *)v28, 0x16u);
      swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v29, -1, -1);
      swift_slowDealloc(v28, -1, -1);

    }
    else
    {

      swift_release(v2);
    }
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v36, v35);
  }
}

void sub_2914DC(uint64_t a1, uint64_t a2)
{
  void *v2;
  id v4;

  v2 = *(void **)(a1 + OBJC_IVAR____TtC8ShelfKit12OAuthSession_webAuthenticationSession);
  if (v2)
  {
    v4 = v2;
    sub_765E4(a2);

  }
}

uint64_t sub_29153C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  void *v22;
  id v23;
  char v24;
  uint64_t result;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  void *v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  id v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97[2];

  v3 = v2;
  v95 = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C5C68);
  v83 = *(_QWORD *)(v5 - 8);
  v84 = v5;
  __chkstk_darwin(v5);
  v82 = (uint64_t)&v77 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C5C70);
  v86 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v85 = (char *)&v77 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C5C78);
  v88 = *(_QWORD *)(v9 - 8);
  v89 = v9;
  __chkstk_darwin(v9);
  v87 = (char *)&v77 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C5C80);
  v91 = *(_QWORD *)(v11 - 8);
  v92 = v11;
  __chkstk_darwin(v11);
  v90 = (char *)&v77 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C5C88);
  v94 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v93 = (char *)&v77 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Logger(0);
  v80 = *(_QWORD *)(v15 - 8);
  v81 = v15;
  __chkstk_darwin(v15);
  v17 = (char *)&v77 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for DispatchPredicate(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (uint64_t *)((char *)&v77 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  v22 = *(void **)(v3 + OBJC_IVAR____TtC8ShelfKit12OAuthSession_workQueue);
  *v21 = v22;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v19 + 104))(v21, enum case for DispatchPredicate.onQueue(_:), v18);
  v23 = v22;
  v24 = _dispatchPreconditionTest(_:)(v21);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v19 + 8))(v21, v18);
  if ((v24 & 1) != 0)
  {
    v77 = v7;
    v78 = v13;
    v79 = a1;
    static Logger.purchases.getter(result);
    v26 = swift_retain(v3);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v27, v28))
    {
      v29 = swift_slowAlloc(42, -1);
      v30 = swift_slowAlloc(64, -1);
      *(_DWORD *)v29 = 141558787;
      v96 = 1752392040;
      v97[0] = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, v97);
      *(_WORD *)(v29 + 12) = 2081;
      v31 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8ShelfKit12OAuthSession_sessionId);
      v32 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8ShelfKit12OAuthSession_sessionId + 8);
      swift_bridgeObjectRetain(v32);
      v96 = sub_69298(v31, v32, v97);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, v97);
      swift_bridgeObjectRelease();
      *(_WORD *)(v29 + 22) = 2160;
      v96 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, v97);
      *(_WORD *)(v29 + 32) = 2081;
      v33 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8ShelfKit12OAuthSession_oAuthAdamId);
      v34 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8ShelfKit12OAuthSession_oAuthAdamId + 8);
      swift_bridgeObjectRetain(v34);
      v96 = sub_69298(v33, v34, v97);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, v97);
      swift_release(v3);
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_0, v27, v28, "%{private,mask.hash}s: Starting OAuth flow for oauth adamId: %{private,mask.hash}s", (uint8_t *)v29, 0x2Au);
      swift_arrayDestroy(v30, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1, -1);
      swift_slowDealloc(v29, -1, -1);

    }
    else
    {

      swift_release(v3);
    }
    (*(void (**)(char *, uint64_t))(v80 + 8))(v17, v81);
    v35 = v82;
    sub_2931E4(v82);
    v36 = swift_allocObject(&unk_38DDF0, 32, 7);
    *(_QWORD *)(v36 + 16) = sub_296E78;
    *(_QWORD *)(v36 + 24) = v3;
    v37 = sub_32914(&qword_3C5C98, &qword_3C5C68, (uint64_t)&protocol conformance descriptor for Publishers.HandleEvents<A>);
    swift_retain(v3);
    v38 = v84;
    v39 = v85;
    Publisher.tryMap<A>(_:)(sub_296EB0, v36, v84, &type metadata for String, v37);
    swift_release(v36);
    (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v35, v38);
    v40 = swift_allocObject(&unk_38DE18, 32, 7);
    *(_QWORD *)(v40 + 16) = sub_296EDC;
    *(_QWORD *)(v40 + 24) = v3;
    v41 = swift_retain(v3);
    v42 = static Subscribers.Demand.unlimited.getter(v41);
    v43 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C5CA0);
    v44 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C5CA8);
    v45 = sub_32914(&qword_3C5CB0, &qword_3C5C70, (uint64_t)&protocol conformance descriptor for Publishers.TryMap<A, B>);
    v46 = sub_32914(&qword_3C5CB8, &qword_3C5CA8, (uint64_t)&protocol conformance descriptor for Future<A, B>);
    v47 = v87;
    v48 = v77;
    Publisher.flatMap<A, B>(maxPublishers:_:)(v42, sub_DD790, v40, v77, v43, v44, v45, v46);
    swift_release(v40);
    (*(void (**)(char *, uint64_t))(v86 + 8))(v39, v48);
    v49 = swift_allocObject(&unk_38DE40, 32, 7);
    *(_QWORD *)(v49 + 16) = sub_296EE0;
    *(_QWORD *)(v49 + 24) = v3;
    v50 = type metadata accessor for URL(0);
    v51 = sub_32914(&qword_3C5CC0, &qword_3C5C78, (uint64_t)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
    swift_retain(v3);
    v52 = v89;
    v53 = v90;
    Publisher.tryMap<A>(_:)(sub_296EF4, v49, v89, v50, v51);
    swift_release(v49);
    (*(void (**)(char *, uint64_t))(v88 + 8))(v47, v52);
    v55 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8ShelfKit12OAuthSession_sessionId);
    v54 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8ShelfKit12OAuthSession_sessionId + 8);
    v56 = swift_allocObject(&unk_38DE68, 32, 7);
    *(_QWORD *)(v56 + 16) = v55;
    *(_QWORD *)(v56 + 24) = v54;
    v57 = swift_bridgeObjectRetain(v54);
    v58 = static Subscribers.Demand.unlimited.getter(v57);
    v59 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C5CC8);
    v60 = sub_32914(&qword_3C5CD0, &qword_3C5C80, (uint64_t)&protocol conformance descriptor for Publishers.TryMap<A, B>);
    v61 = sub_32914(&qword_3C5CD8, &qword_3C5CC8, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
    v62 = v92;
    v63 = v93;
    Publisher.flatMap<A, B>(maxPublishers:_:)(v58, sub_296F44, v56, v92, &type metadata for Bool, v59, v60, v61);
    swift_release(v56);
    (*(void (**)(char *, uint64_t))(v91 + 8))(v53, v62);
    v64 = swift_allocObject(&unk_38DE90, 24, 7);
    swift_weakInit(v64 + 16);
    v65 = *(void **)(v3 + OBJC_IVAR____TtC8ShelfKit12OAuthSession_uiQueue);
    v66 = (_QWORD *)swift_allocObject(&unk_38DEB8, 48, 7);
    v67 = v79;
    v68 = v95;
    v66[2] = v79;
    v66[3] = v68;
    v66[4] = v65;
    v66[5] = v64;
    v69 = swift_allocObject(&unk_38DE90, 24, 7);
    swift_weakInit(v69 + 16);
    v70 = (_QWORD *)swift_allocObject(&unk_38DEE0, 48, 7);
    v70[2] = v65;
    v70[3] = v69;
    v70[4] = v67;
    v70[5] = v68;
    v71 = sub_32914(&qword_3C5CE0, &qword_3C5C88, (uint64_t)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
    v72 = v65;
    swift_retain_n(v68, 2);
    v73 = v72;
    v74 = v78;
    v75 = Publisher.sink(receiveCompletion:receiveValue:)(sub_296FC4, v66, sub_297004, v70, v78, v71);
    swift_release(v66);
    swift_release(v70);
    (*(void (**)(char *, uint64_t))(v94 + 8))(v63, v74);
    v76 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8ShelfKit12OAuthSession_oauthSession);
    *(_QWORD *)(v3 + OBJC_IVAR____TtC8ShelfKit12OAuthSession_oauthSession) = v75;
    return swift_release(v76);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_291DB4(uint64_t *a1, void (*a2)(_QWORD, _QWORD), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t, uint64_t);
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t Strong;
  _QWORD *v40;
  void (*v41)(_QWORD, _QWORD);
  void *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  _QWORD *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  void (*v58)(_QWORD, _QWORD);
  _QWORD *v59;
  _QWORD aBlock[5];
  _QWORD *v61;
  char v62[32];

  v55 = a5;
  v58 = a2;
  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS(0);
  v57 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v56 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = type metadata accessor for Logger(0);
  v14 = *(_QWORD *)(v54 - 8);
  __chkstk_darwin(v54);
  v16 = (char *)&v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C5EA0);
  result = __chkstk_darwin(v17);
  v20 = (char *)&v50 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = *a1;
  if (v21)
  {
    v50 = v12;
    v51 = v11;
    v52 = a4;
    aBlock[0] = v21;
    swift_errorRetain(v21);
    swift_errorRetain(v21);
    v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2B08);
    v23 = type metadata accessor for OAuthSessionError(0);
    v24 = swift_dynamicCast(v20, aBlock, v22, v23, 6);
    v25 = *(_QWORD *)(v23 - 8);
    v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v25 + 56);
    v53 = v9;
    if (!v24)
    {
      v26(v20, 1, 1, v23);
      sub_1459C((uint64_t)v20, &qword_3C5EA0);
LABEL_9:
      v37 = v55 + 16;
      v38 = swift_allocObject(&unk_38DE90, 24, 7);
      swift_beginAccess(v37, v62, 0, 0);
      Strong = swift_weakLoadStrong(v37);
      swift_weakInit(v38 + 16);
      swift_release(Strong);
      v40 = (_QWORD *)swift_allocObject(&unk_38E0C0, 48, 7);
      v41 = v58;
      v40[2] = v38;
      v40[3] = v41;
      v40[4] = a3;
      v40[5] = v21;
      aBlock[4] = sub_297358;
      v61 = v40;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_2C9F4;
      aBlock[3] = &block_descriptor_63;
      v42 = _Block_copy(aBlock);
      swift_errorRetain(v21);
      swift_retain(v38);
      v43 = swift_retain(a3);
      v44 = v56;
      static DispatchQoS.unspecified.getter(v43);
      v59 = _swiftEmptyArrayStorage;
      v45 = sub_F1C0((unint64_t *)&qword_3B4420, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v46 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8720);
      v47 = sub_32914((unint64_t *)&qword_3B4430, (uint64_t *)&unk_3B8720, (uint64_t)&protocol conformance descriptor for [A]);
      v48 = v51;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v59, v46, v47, v8, v45);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v44, v48, v42);
      _Block_release(v42);
      swift_errorRelease(v21);
      (*(void (**)(char *, uint64_t))(v53 + 8))(v48, v8);
      (*(void (**)(char *, uint64_t))(v57 + 8))(v44, v50);
      v49 = v61;
      swift_release(v38);
      return swift_release(v49);
    }
    v26(v20, 0, 1, v23);
    v27 = (*(uint64_t (**)(char *, uint64_t))(v25 + 88))(v20, v23);
    v28 = v8;
    v29 = a3;
    v30 = enum case for OAuthSessionError.userCancelledLogin(_:);
    v31 = (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v20, v23);
    v32 = v27 == v30;
    a3 = v29;
    v8 = v28;
    if (!v32)
      goto LABEL_9;
    v33 = static Logger.purchases.getter(v31);
    v34 = Logger.logObject.getter(v33);
    v35 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v34, v35))
    {
      v36 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v36 = 0;
      _os_log_impl(&dword_0, v34, v35, "User cancelled OAuth login.", v36, 2u);
      swift_slowDealloc(v36, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v54);
    v58(0, 0);
    return swift_errorRelease(v21);
  }
  return result;
}

uint64_t sub_29223C(uint64_t a1, void (*a2)(_QWORD, uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t Strong;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(_QWORD, uint64_t);
  _BYTE v47[24];
  Swift::String v48;

  v7 = type metadata accessor for Logger(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v44 - v13;
  __chkstk_darwin(v12);
  v16 = (char *)&v44 - v15;
  a1 += 16;
  swift_beginAccess(a1, v47, 0, 0);
  Strong = swift_weakLoadStrong(a1);
  if (Strong)
  {
    v18 = Strong;
    v45 = a4;
    v46 = a2;
    v19 = (_QWORD *)(Strong + OBJC_IVAR____TtC8ShelfKit12OAuthSession_hudViewHandler);
    v21 = *(_QWORD *)(Strong + OBJC_IVAR____TtC8ShelfKit12OAuthSession_hudViewHandler + 24);
    v20 = *(_QWORD *)(Strong + OBJC_IVAR____TtC8ShelfKit12OAuthSession_hudViewHandler + 32);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(Strong + OBJC_IVAR____TtC8ShelfKit12OAuthSession_hudViewHandler), v21);
    v22 = dispatch thunk of OAuthHUDViewHandlerProtocol.spinnerIsActive.getter(v21, v20);
    if ((v22 & 1) != 0)
    {
      v23 = static Logger.purchases.getter(v22);
      v24 = Logger.logObject.getter(v23);
      v25 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v24, v25))
      {
        v26 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v26 = 0;
        _os_log_impl(&dword_0, v24, v25, "Dismissing the spinner and displaying an error alert.", v26, 2u);
        swift_slowDealloc(v26, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v8 + 8))(v14, v7);
      v27 = v19[3];
      v28 = v19[4];
      __swift_project_boxed_opaque_existential_1(v19, v27);
      dispatch thunk of OAuthHUDViewHandlerProtocol.dismiss(success:)(0, v27, v28);
      v29 = v19[3];
      v30 = v19[4];
      __swift_project_boxed_opaque_existential_1(v19, v29);
      v31 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v48._object = (void *)0xE000000000000000;
      v32._object = (void *)0x8000000000315770;
      v32._countAndFlagsBits = 0xD000000000000013;
      v33._countAndFlagsBits = 0;
      v33._object = (void *)0xE000000000000000;
      v48._countAndFlagsBits = 0;
      v34 = NSLocalizedString(_:tableName:bundle:value:comment:)(v32, (Swift::String_optional)0, (NSBundle)v31, v33, v48);

      dispatch thunk of OAuthHUDViewHandlerProtocol.displayAlert(title:description:)(v34._countAndFlagsBits, v34._object, 0, 0, v29, v30);
      swift_bridgeObjectRelease();
    }
    else
    {
      v40 = static Logger.purchases.getter(v22);
      v41 = Logger.logObject.getter(v40);
      v42 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v41, v42))
      {
        v43 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v43 = 0;
        _os_log_impl(&dword_0, v41, v42, "Spinner is not active.", v43, 2u);
        swift_slowDealloc(v43, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    }
    v46(0, v45);
    return swift_release(v18);
  }
  else
  {
    v35 = static Logger.purchases.getter(0);
    v36 = Logger.logObject.getter(v35);
    v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v36, v37))
    {
      v38 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v38 = 0;
      _os_log_impl(&dword_0, v36, v37, "Unable to unwrap self in OAuth promise completion!.", v38, 2u);
      swift_slowDealloc(v38, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v8 + 8))(v16, v7);
    return ((uint64_t (*)(_QWORD, _QWORD))a2)(0, 0);
  }
}

uint64_t sub_2925E8(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint8_t *v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD aBlock[5];
  uint64_t v43;

  v35 = a4;
  v36 = a3;
  v40 = a2;
  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v39 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v37 = *(_QWORD *)(v10 - 8);
  v38 = v10;
  __chkstk_darwin(v10);
  v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Logger(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *a1;
  v19 = static Logger.purchases.getter(v15);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v20, v21))
  {
    v22 = (uint8_t *)swift_slowAlloc(8, -1);
    v34 = a5;
    v23 = v22;
    *(_DWORD *)v22 = 67109120;
    LODWORD(aBlock[0]) = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(aBlock, (char *)aBlock + 4);
    _os_log_impl(&dword_0, v20, v21, "User is subscribed to content: %{BOOL}d", v23, 8u);
    v24 = v23;
    a5 = v34;
    swift_slowDealloc(v24, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  v25 = swift_allocObject(&unk_38E070, 41, 7);
  v26 = v35;
  v27 = v36;
  *(_QWORD *)(v25 + 16) = v36;
  *(_QWORD *)(v25 + 24) = v26;
  *(_QWORD *)(v25 + 32) = a5;
  *(_BYTE *)(v25 + 40) = v18;
  aBlock[4] = sub_297314;
  v43 = v25;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_2C9F4;
  aBlock[3] = &block_descriptor_56;
  v28 = _Block_copy(aBlock);
  swift_retain(v27);
  v29 = swift_retain(a5);
  static DispatchQoS.unspecified.getter(v29);
  v41 = _swiftEmptyArrayStorage;
  v30 = sub_F1C0((unint64_t *)&qword_3B4420, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v31 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8720);
  v32 = sub_32914((unint64_t *)&qword_3B4430, (uint64_t *)&unk_3B8720, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v41, v31, v32, v7, v30);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v9, v28);
  _Block_release(v28);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v12, v38);
  return swift_release(v43);
}

uint64_t sub_2928E0(uint64_t a1, void (*a2)(_QWORD, _QWORD), uint64_t a3, char a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t Strong;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v21;
  void *v22;
  id v23;
  id v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  id v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  _QWORD *v32;
  uint64_t v33;
  void (*v34)(_QWORD, _QWORD);
  _BYTE v35[24];
  Swift::String v36;
  Swift::String v37;

  v7 = type metadata accessor for Logger(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  a1 += 16;
  swift_beginAccess(a1, v35, 0, 0);
  Strong = swift_weakLoadStrong(a1);
  if (Strong)
  {
    v12 = Strong;
    v13 = (_QWORD *)(Strong + OBJC_IVAR____TtC8ShelfKit12OAuthSession_hudViewHandler);
    v14 = *(_QWORD *)(Strong + OBJC_IVAR____TtC8ShelfKit12OAuthSession_hudViewHandler + 24);
    v15 = *(_QWORD *)(Strong + OBJC_IVAR____TtC8ShelfKit12OAuthSession_hudViewHandler + 32);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(Strong + OBJC_IVAR____TtC8ShelfKit12OAuthSession_hudViewHandler), v14);
    if ((a4 & 1) != 0)
    {
      dispatch thunk of OAuthHUDViewHandlerProtocol.dismiss(success:)(1, v14, v15);
    }
    else
    {
      dispatch thunk of OAuthHUDViewHandlerProtocol.dismiss(success:)(0, v14, v15);
      v21 = v13[3];
      v33 = v13[4];
      v32 = __swift_project_boxed_opaque_existential_1(v13, v21);
      v22 = (void *)objc_opt_self(NSBundle);
      v23 = objc_msgSend(v22, "mainBundle");
      v34 = a2;
      v24 = v23;
      v36._object = (void *)0xE000000000000000;
      v25._object = (void *)0x8000000000315720;
      v25._countAndFlagsBits = 0xD00000000000001FLL;
      v26._countAndFlagsBits = 0;
      v26._object = (void *)0xE000000000000000;
      v36._countAndFlagsBits = 0;
      v27 = NSLocalizedString(_:tableName:bundle:value:comment:)(v25, (Swift::String_optional)0, (NSBundle)v24, v26, v36);

      v28 = objc_msgSend(v22, "mainBundle");
      v29._countAndFlagsBits = 0xD000000000000025;
      v37._object = (void *)0xE000000000000000;
      v29._object = (void *)0x8000000000315740;
      v30._countAndFlagsBits = 0;
      v30._object = (void *)0xE000000000000000;
      v37._countAndFlagsBits = 0;
      v31 = NSLocalizedString(_:tableName:bundle:value:comment:)(v29, (Swift::String_optional)0, (NSBundle)v28, v30, v37);

      a2 = v34;
      dispatch thunk of OAuthHUDViewHandlerProtocol.displayAlert(title:description:)(v27._countAndFlagsBits, v27._object, v31._countAndFlagsBits, v31._object, v21, v33);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    a2(a4 & 1, 0);
    return swift_release(v12);
  }
  else
  {
    v16 = static Logger.purchases.getter(0);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v19 = 0;
      _os_log_impl(&dword_0, v17, v18, "Unable to unwrap self in OAuth promise completion.", v19, 2u);
      swift_slowDealloc(v19, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    return ((uint64_t (*)(_QWORD, _QWORD))a2)(a4 & 1, 0);
  }
}

uint64_t sub_292BAC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD v21[2];
  uint64_t v22;
  _QWORD *v23;
  _QWORD aBlock[5];
  _QWORD *v25;

  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v22 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21[1] = *(_QWORD *)(v2 + OBJC_IVAR____TtC8ShelfKit12OAuthSession_uiQueue);
  v12 = swift_allocObject(&unk_38DE90, 24, 7);
  swift_weakInit(v12 + 16);
  v13 = (_QWORD *)swift_allocObject(&unk_38DF08, 40, 7);
  v13[2] = v12;
  v13[3] = a1;
  v13[4] = a2;
  aBlock[4] = sub_297020;
  v25 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_2C9F4;
  aBlock[3] = &block_descriptor_29_0;
  v14 = _Block_copy(aBlock);
  swift_retain(v12);
  v15 = swift_retain(a2);
  static DispatchQoS.unspecified.getter(v15);
  v23 = _swiftEmptyArrayStorage;
  v16 = sub_F1C0((unint64_t *)&qword_3B4420, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8720);
  v18 = sub_32914((unint64_t *)&qword_3B4430, (uint64_t *)&unk_3B8720, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v23, v17, v18, v5, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v7, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v19 = v25;
  swift_release(v12);
  return swift_release(v19);
}

uint64_t sub_292DEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t Strong;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  void *v22;
  char *v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint8_t *v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD aBlock[5];
  _QWORD *v55;
  char v56[24];

  v50 = a2;
  v51 = a3;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v52 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Logger(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v45 - v16;
  a1 += 16;
  swift_beginAccess(a1, v56, 0, 0);
  Strong = swift_weakLoadStrong(a1);
  if (Strong)
  {
    v19 = Strong;
    v47 = v8;
    v48 = v5;
    v20 = OBJC_IVAR____TtC8ShelfKit12OAuthSession_webAuthenticationSession;
    v21 = *(char **)(Strong + OBJC_IVAR____TtC8ShelfKit12OAuthSession_webAuthenticationSession);
    v49 = v4;
    if (v21)
    {
      v22 = *(void **)&v21[OBJC_IVAR____TtC8ShelfKit24WebAuthenticationSession_authenticationSession];
      v23 = v21;
      v24 = static Logger.purchases.getter(objc_msgSend(v22, "cancel"));
      v25 = Logger.logObject.getter(v24);
      v26 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v25, v26))
      {
        v27 = (uint8_t *)swift_slowAlloc(2, -1);
        v46 = v23;
        v28 = v27;
        *(_WORD *)v27 = 0;
        _os_log_impl(&dword_0, v25, v26, "Canceled ASWebAuthenticationSession.", v27, 2u);
        v29 = v28;
        v23 = v46;
        swift_slowDealloc(v29, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
      v21 = *(char **)(v19 + v20);
    }
    v30 = v51;
    v31 = v52;
    v32 = v50;
    *(_QWORD *)(v19 + v20) = 0;

    v33 = (_QWORD *)swift_allocObject(&unk_38E020, 40, 7);
    v33[2] = v19;
    v33[3] = v32;
    v33[4] = v30;
    aBlock[4] = sub_297288;
    v55 = v33;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_2C9F4;
    aBlock[3] = &block_descriptor_50;
    v34 = _Block_copy(aBlock);
    swift_retain(v19);
    v35 = swift_retain(v30);
    static DispatchQoS.unspecified.getter(v35);
    v53 = _swiftEmptyArrayStorage;
    v36 = sub_F1C0((unint64_t *)&qword_3B4420, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v37 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8720);
    v38 = sub_32914((unint64_t *)&qword_3B4430, (uint64_t *)&unk_3B8720, (uint64_t)&protocol conformance descriptor for [A]);
    v39 = v49;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v53, v37, v38, v49, v36);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v7, v34);
    _Block_release(v34);
    (*(void (**)(char *, uint64_t))(v48 + 8))(v7, v39);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v10, v47);
    swift_release(v19);
    return swift_release(v55);
  }
  else
  {
    v41 = static Logger.purchases.getter(0);
    v42 = Logger.logObject.getter(v41);
    v43 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v42, v43))
    {
      v44 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v44 = 0;
      _os_log_impl(&dword_0, v42, v43, "Unable to unwrap self in cancelSession completion in OAuthSession.", v44, 2u);
      swift_slowDealloc(v44, -1, -1);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v17, v11);
  }
}

uint64_t sub_2931E4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  _BOOL4 v26;
  uint64_t v27;
  void (*v28)(_QWORD, _QWORD);
  uint64_t v29;
  unint64_t v30;
  void (*v31)(_QWORD, _QWORD);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  void (*v38)(char *, char *, uint64_t);
  char *v39;
  char *v40;
  uint64_t v41;
  void *v42;
  objc_class *v43;
  char *v44;
  char *v45;
  char *v46;
  id v47;
  id v48;
  void *v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  id v62;
  uint64_t v63;
  char *v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  id v83;
  uint64_t v84;
  id v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v91;
  void (*v92)(_QWORD, _QWORD);
  unint64_t v93;
  char *v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  id v113;
  objc_super v114;

  v2 = v1;
  v109 = a1;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2B18);
  __chkstk_darwin(v3);
  v107 = (char *)&v91 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C5EA8);
  v97 = *(_QWORD *)(v5 - 8);
  v98 = v5;
  __chkstk_darwin(v5);
  v96 = (char *)&v91 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C5EB0);
  v100 = *(_QWORD *)(v7 - 8);
  v101 = v7;
  __chkstk_darwin(v7);
  v99 = (char *)&v91 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C5EB8);
  v103 = *(_QWORD *)(v9 - 8);
  v104 = v9;
  __chkstk_darwin(v9);
  v102 = (char *)&v91 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v108 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C5EC0);
  v106 = *(_QWORD *)(v108 - 8);
  __chkstk_darwin(v108);
  v105 = (char *)&v91 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v111 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v111 - 8);
  v13 = __chkstk_darwin(v111);
  v94 = (char *)&v91 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v110 = (char *)&v91 - v15;
  v16 = type metadata accessor for Logger(0);
  v93 = *(_QWORD *)(v16 - 8);
  v17 = __chkstk_darwin(v16);
  v19 = (char *)&v91 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v17);
  v22 = (char *)&v91 - v21;
  static Logger.purchases.getter(v20);
  v23 = swift_retain(v2);
  v24 = Logger.logObject.getter(v23);
  v25 = static os_log_type_t.default.getter();
  v26 = os_log_type_enabled(v24, v25);
  v95 = v19;
  if (v26)
  {
    v27 = swift_slowAlloc(22, -1);
    v28 = (void (*)(_QWORD, _QWORD))swift_slowAlloc(32, -1);
    v92 = v28;
    *(_DWORD *)v27 = 141558275;
    v112 = 1752392040;
    v113 = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, &v113);
    *(_WORD *)(v27 + 12) = 2081;
    v91 = v12;
    v29 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8ShelfKit12OAuthSession_sessionId);
    v30 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8ShelfKit12OAuthSession_sessionId + 8);
    swift_bridgeObjectRetain(v30);
    v112 = sub_69298(v29, v30, (uint64_t *)&v113);
    v19 = v95;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, &v113);
    swift_release(v2);
    v12 = v91;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v24, v25, "%{private,mask.hash}s: Retrieving short lived token from provider.", (uint8_t *)v27, 0x16u);
    v31 = v92;
    swift_arrayDestroy(v92, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v31, -1, -1);
    swift_slowDealloc(v27, -1, -1);

  }
  else
  {

    swift_release(v2);
  }
  v92 = *(void (**)(_QWORD, _QWORD))(v93 + 8);
  v92(v22, v16);
  v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0978);
  v33 = *(_QWORD *)(type metadata accessor for URLQueryItem(0) - 8);
  v34 = swift_allocObject(v32, ((*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80))+ *(_QWORD *)(v33 + 72), *(unsigned __int8 *)(v33 + 80) | 7);
  *(_OWORD *)(v34 + 16) = xmmword_2EA0D0;
  v35 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
  URLQueryItem.init(name:value:)(0x6574617473, 0xE500000000000000, v35, v36);
  swift_bridgeObjectRelease();
  v37 = v110;
  URL.appending(queryItems:)(v34);
  swift_bridgeObjectRelease();
  v38 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
  v39 = v94;
  v40 = v37;
  v41 = v111;
  v38(v94, v40, v111);
  v42 = *(void **)(v2 + OBJC_IVAR____TtC8ShelfKit12OAuthSession_window);
  v43 = (objc_class *)type metadata accessor for WebAuthenticationSession(0);
  v44 = (char *)objc_allocWithZone(v43);
  *(_QWORD *)&v44[OBJC_IVAR____TtC8ShelfKit24WebAuthenticationSession_authenticationSession] = 0;
  v45 = &v44[OBJC_IVAR____TtC8ShelfKit24WebAuthenticationSession_startCompletion];
  *(_QWORD *)v45 = 0;
  *((_QWORD *)v45 + 1) = 0;
  v46 = &v44[OBJC_IVAR____TtC8ShelfKit24WebAuthenticationSession_callbackURLScheme];
  *(_QWORD *)v46 = 0x7374736163646F70;
  *((_QWORD *)v46 + 1) = 0xE800000000000000;
  v38(&v44[OBJC_IVAR____TtC8ShelfKit24WebAuthenticationSession_authorizationURL], v39, v41);
  *(_QWORD *)&v44[OBJC_IVAR____TtC8ShelfKit24WebAuthenticationSession_window] = v42;
  v114.receiver = v44;
  v114.super_class = v43;
  v93 = (unint64_t)v43;
  v47 = v42;
  v48 = objc_msgSendSuper2(&v114, "init");
  v94 = *(char **)(v12 + 8);
  ((void (*)(char *, uint64_t))v94)(v39, v41);
  v49 = *(void **)(v2 + OBJC_IVAR____TtC8ShelfKit12OAuthSession_webAuthenticationSession);
  *(_QWORD *)(v2 + OBJC_IVAR____TtC8ShelfKit12OAuthSession_webAuthenticationSession) = v48;
  v50 = v48;

  static Logger.purchases.getter(v51);
  v52 = swift_retain(v2);
  v53 = Logger.logObject.getter(v52);
  v54 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v53, v54))
  {
    v55 = swift_slowAlloc(22, -1);
    v56 = (void *)swift_slowAlloc(32, -1);
    *(_DWORD *)v55 = 141558275;
    v112 = 1752392040;
    v113 = v56;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, &v113);
    *(_WORD *)(v55 + 12) = 2081;
    v91 = v16;
    v57 = v2 + OBJC_IVAR____TtC8ShelfKit12OAuthSession_sessionId;
    v58 = v2;
    v59 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8ShelfKit12OAuthSession_sessionId);
    v60 = *(_QWORD *)(v57 + 8);
    swift_bridgeObjectRetain(v60);
    v61 = v59;
    v2 = v58;
    v112 = sub_69298(v61, v60, (uint64_t *)&v113);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, &v113);
    swift_release(v58);
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v53, v54, "%{private,mask.hash}s: Created Web Authentication Session.", (uint8_t *)v55, 0x16u);
    swift_arrayDestroy(v56, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v56, -1, -1);
    swift_slowDealloc(v55, -1, -1);

    v62 = v95;
    v63 = v91;
  }
  else
  {

    swift_release(v2);
    v62 = v19;
    v63 = v16;
  }
  v92(v62, v63);
  v113 = v50;
  v95 = (char *)v50;
  v64 = v96;
  Just.init(_:)(&v113, v93);
  v113 = *(id *)(v2 + OBJC_IVAR____TtC8ShelfKit12OAuthSession_uiQueue);
  v65 = v113;
  v66 = v2;
  v67 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  v68 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v67 - 8) + 56);
  v69 = (uint64_t)v107;
  v68(v107, 1, 1, v67);
  v70 = sub_676C8();
  v93 = v70;
  v71 = sub_32914(&qword_3C5EC8, &qword_3C5EA8, (uint64_t)&protocol conformance descriptor for Just<A>);
  v72 = sub_F1C0((unint64_t *)&qword_3B2B60, (void (*)(uint64_t))sub_676C8, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  v92 = (void (*)(_QWORD, _QWORD))v72;
  v73 = v65;
  v75 = v98;
  v74 = v99;
  Publisher.receive<A>(on:options:)(&v113, v69, v98, v70, v71, v72);
  sub_1459C(v69, &qword_3B2B18);

  v76 = (*(uint64_t (**)(char *, uint64_t))(v97 + 8))(v64, v75);
  v77 = static Subscribers.Demand.unlimited.getter(v76);
  v78 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C5ED0);
  v79 = sub_32914(&qword_3C5ED8, &qword_3C5EB0, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v80 = sub_32914(&qword_3C5EE0, &qword_3C5ED0, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v82 = v101;
  v81 = v102;
  Publisher<>.flatMap<A>(maxPublishers:_:)(v77, sub_293C0C, 0, v101, v78, v79, v80);
  (*(void (**)(char *, uint64_t))(v100 + 8))(v74, v82);
  v113 = *(id *)(v66 + OBJC_IVAR____TtC8ShelfKit12OAuthSession_workQueue);
  v83 = v113;
  v68((char *)v69, 1, 1, v67);
  v84 = sub_32914(&qword_3C5EE8, &qword_3C5EB8, (uint64_t)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
  v85 = v83;
  v87 = v104;
  v86 = v105;
  Publisher.receive<A>(on:options:)(&v113, v69, v104, v93, v84, v92);
  sub_1459C(v69, &qword_3B2B18);

  (*(void (**)(char *, uint64_t))(v103 + 8))(v81, v87);
  v88 = sub_32914(&qword_3C5EF0, &qword_3C5EC0, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  swift_retain_n(v66, 2);
  v89 = v108;
  Publisher.handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)(0, 0, sub_297364, v66, sub_29736C, v66, 0, 0, 0, 0, v108, v88);

  swift_release_n(v66, 2);
  (*(void (**)(char *, uint64_t))(v106 + 8))(v86, v89);
  return ((uint64_t (*)(char *, uint64_t))v94)(v110, v111);
}

uint64_t sub_293C0C@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v3 = *a1;
  v4 = swift_allocObject(&unk_38E110, 24, 7);
  *(_QWORD *)(v4 + 16) = v3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C5EF8);
  swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  v6 = v3;
  v10 = Future.init(_:)(sub_297398, v4);
  v7 = sub_32914(&qword_3C5F00, &qword_3C5EF8, (uint64_t)&protocol conformance descriptor for Future<A, B>);
  v8 = Publisher.eraseToAnyPublisher()(v5, v7);
  result = swift_release(v10);
  *a2 = v8;
  return result;
}

uint64_t sub_293CDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  os_log_t v25;
  uint64_t v26;
  _BYTE v28[12];
  int v29;
  os_log_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v28[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = &v28[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  static Logger.purchases.getter(v10);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  v13 = swift_retain(a2);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter();
  v16 = v15;
  if (os_log_type_enabled(v14, v15))
  {
    v17 = swift_slowAlloc(32, -1);
    v33 = v8;
    v18 = v17;
    v19 = swift_slowAlloc(64, -1);
    v32 = v19;
    *(_DWORD *)v18 = 141558531;
    v34 = 1752392040;
    v35 = v19;
    v30 = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35);
    *(_WORD *)(v18 + 12) = 2081;
    v29 = v16;
    v31 = v9;
    v21 = *(_QWORD *)(a2 + OBJC_IVAR____TtC8ShelfKit12OAuthSession_sessionId);
    v20 = *(_QWORD *)(a2 + OBJC_IVAR____TtC8ShelfKit12OAuthSession_sessionId + 8);
    swift_bridgeObjectRetain(v20);
    v34 = sub_69298(v21, v20, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35);
    swift_release(a2);
    v22 = swift_bridgeObjectRelease();
    *(_WORD *)(v18 + 22) = 2080;
    v23 = URL.absoluteString.getter(v22);
    v34 = sub_69298(v23, v24, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35);
    swift_bridgeObjectRelease();
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
    v25 = v30;
    _os_log_impl(&dword_0, v30, (os_log_type_t)v29, "%{private,mask.hash}s: Redirect URL acquired: %s", (uint8_t *)v18, 0x20u);
    v26 = v32;
    swift_arrayDestroy(v32, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v18, -1, -1);

    return (*(uint64_t (**)(_BYTE *, uint64_t))(v31 + 8))(v12, v33);
  }
  else
  {
    swift_release(a2);
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);

    return (*(uint64_t (**)(_BYTE *, uint64_t))(v9 + 8))(v12, v8);
  }
}

uint64_t sub_293F94(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  result = __chkstk_darwin(v4);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *a1;
  if (v9)
  {
    v10 = swift_errorRetain(v9);
    static Logger.purchases.getter(v10);
    swift_errorRetain(v9);
    v11 = swift_retain(a2);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = swift_slowAlloc(32, -1);
      v26 = v5;
      v15 = v14;
      v23 = (uint64_t *)swift_slowAlloc(8, -1);
      v16 = swift_slowAlloc(32, -1);
      v24 = v16;
      *(_DWORD *)v15 = 141558531;
      v27 = 1752392040;
      v28 = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28);
      *(_WORD *)(v15 + 12) = 2081;
      v25 = v4;
      v18 = *(_QWORD *)(a2 + OBJC_IVAR____TtC8ShelfKit12OAuthSession_sessionId);
      v17 = *(_QWORD *)(a2 + OBJC_IVAR____TtC8ShelfKit12OAuthSession_sessionId + 8);
      swift_bridgeObjectRetain(v17);
      v27 = sub_69298(v18, v17, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28);
      swift_release(a2);
      swift_bridgeObjectRelease();
      *(_WORD *)(v15 + 22) = 2112;
      v19 = _convertErrorToNSError(_:)(v9);
      v27 = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28);
      v20 = v23;
      *v23 = v19;
      swift_errorRelease(v9);
      _os_log_impl(&dword_0, v12, v13, "%{private,mask.hash}s: OAuth Authentication failed with error: %@", (uint8_t *)v15, 0x20u);
      v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8E70);
      swift_arrayDestroy(v20, 1, v21);
      swift_slowDealloc(v20, -1, -1);
      v22 = v24;
      swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1, -1);
      swift_slowDealloc(v15, -1, -1);

      swift_errorRelease(v9);
      return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v8, v25);
    }
    else
    {
      swift_release(a2);
      swift_errorRelease(v9);
      swift_errorRelease(v9);

      return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    }
  }
  return result;
}

NSObject *sub_294238(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  void (*v24)(_BYTE *, uint64_t, uint64_t);
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(_BYTE *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE *v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int *v69;
  uint64_t v70;
  char v72;
  unint64_t v73;
  char v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  _BYTE *v78;
  uint64_t v79;
  NSObject *v80;
  os_log_type_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  _BYTE *v87;
  _BYTE *v88;
  uint64_t v89;
  _BYTE *v90;
  uint64_t v91;
  NSObject *v92;
  os_log_type_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  _BYTE *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  unint64_t v106;
  unint64_t v107;
  _BYTE *v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  BOOL v112;
  BOOL v113;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char v121;
  uint64_t v122;
  uint64_t v123;
  NSObject *v124;
  os_log_type_t v125;
  _BOOL4 v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  NSObject *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  _BYTE v136[4];
  int v137;
  uint64_t v138;
  uint64_t v139;
  NSObject *v140;
  uint64_t v141;
  _BYTE *v142;
  uint64_t v143;
  _BYTE *v144;
  _BYTE *v145;
  uint64_t v146;
  _BYTE *v147;
  void (*v148)(_BYTE *, uint64_t);
  _BYTE *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  _QWORD *v153;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C5E98);
  __chkstk_darwin(v4);
  v149 = &v136[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v146 = type metadata accessor for OAuthAuthenticationErrorResponse(0);
  v150 = *(_QWORD *)(v146 - 8);
  __chkstk_darwin(v146);
  v145 = &v136[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for URL(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = &v136[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = type metadata accessor for Logger(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v147 = &v136[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = __chkstk_darwin(v13);
  v144 = &v136[-v16];
  v17 = __chkstk_darwin(v15);
  v140 = &v136[-v18];
  v19 = __chkstk_darwin(v17);
  v142 = &v136[-v20];
  v21 = __chkstk_darwin(v19);
  v23 = &v136[-v22];
  static Logger.purchases.getter(v21);
  v24 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v8 + 16);
  v148 = (void (*)(_BYTE *, uint64_t))v7;
  v24(v10, a1, v7);
  v25 = swift_retain(v2);
  v26 = Logger.logObject.getter(v25);
  v27 = static os_log_type_t.default.getter();
  v28 = v27;
  if (os_log_type_enabled(v26, v27))
  {
    v29 = swift_slowAlloc(32, -1);
    v143 = v11;
    v30 = v29;
    v139 = swift_slowAlloc(64, -1);
    v153 = (_QWORD *)v139;
    *(_DWORD *)v30 = 141558531;
    v151 = 1752392040;
    v141 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v151, &v152);
    *(_WORD *)(v30 + 12) = 2081;
    v137 = v28;
    v138 = v12;
    v31 = v2;
    v32 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8ShelfKit12OAuthSession_sessionId);
    v33 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8ShelfKit12OAuthSession_sessionId + 8);
    swift_bridgeObjectRetain(v33);
    v151 = sub_69298(v32, v33, (uint64_t *)&v153);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v151, &v152);
    swift_release(v31);
    v34 = swift_bridgeObjectRelease();
    *(_WORD *)(v30 + 22) = 2080;
    v35 = URL.absoluteString.getter(v34);
    v151 = sub_69298(v35, v36, (uint64_t *)&v153);
    a1 = v141;
    v2 = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v151, &v152);
    swift_bridgeObjectRelease();
    (*(void (**)(_BYTE *, _QWORD))(v8 + 8))(v10, v148);
    _os_log_impl(&dword_0, v26, (os_log_type_t)v137, "%{private,mask.hash}s: Validating redirectUrl parameters: %s.", (uint8_t *)v30, 0x20u);
    v37 = v139;
    swift_arrayDestroy(v139, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1, -1);
    v38 = v30;
    v11 = v143;
    swift_slowDealloc(v38, -1, -1);

    v39 = *(void (**)(_BYTE *, uint64_t))(v138 + 8);
  }
  else
  {
    swift_release(v2);
    (*(void (**)(_BYTE *, _QWORD))(v8 + 8))(v10, v148);

    v39 = *(void (**)(_BYTE *, uint64_t))(v12 + 8);
  }
  v39(v23, v11);
  v40 = sub_29510C();
  v41 = (uint64_t)v149;
  v42 = v150;
  if (!v40)
  {
LABEL_14:
    v57 = v147;
    static Logger.purchases.getter(v40);
    v58 = swift_retain(v2);
    v59 = Logger.logObject.getter(v58);
    v60 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v59, v60))
    {
      v61 = swift_slowAlloc(22, -1);
      v62 = swift_slowAlloc(32, -1);
      v153 = (_QWORD *)v62;
      *(_DWORD *)v61 = 141558275;
      v151 = 1752392040;
      v148 = v39;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v151, &v152);
      *(_WORD *)(v61 + 12) = 2081;
      v26 = (v61 + 14);
      v63 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8ShelfKit12OAuthSession_sessionId);
      v64 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8ShelfKit12OAuthSession_sessionId + 8);
      swift_bridgeObjectRetain(v64);
      v151 = sub_69298(v63, v64, (uint64_t *)&v153);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v151, &v152);
      swift_release(v2);
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_0, v59, v60, "%{private,mask.hash}s: State UUIDs do not match.", (uint8_t *)v61, 0x16u);
      swift_arrayDestroy(v62, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v62, -1, -1);
      swift_slowDealloc(v61, -1, -1);

      v148(v147, v11);
    }
    else
    {

      swift_release(v2);
      v39(v57, v11);
    }
    v65 = type metadata accessor for OAuthSessionError(0);
    v66 = sub_F1C0((unint64_t *)&qword_3B4378, (void (*)(uint64_t))&type metadata accessor for OAuthSessionError, (uint64_t)&protocol conformance descriptor for OAuthSessionError);
    swift_allocError(v65, v66, 0, 0);
    v68 = v67;
    v69 = (unsigned int *)&enum case for OAuthSessionError.stateMismatch(_:);
    goto LABEL_18;
  }
  v43 = v40;
  v44 = swift_bridgeObjectRetain(v40);
  OAuthAuthenticationErrorResponse.init(body:)(v44);
  v45 = v146;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v42 + 48))(v41, 1, v146) != 1)
  {
    swift_bridgeObjectRelease();
    v53 = v145;
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v42 + 32))(v145, v41, v45);
    v54 = type metadata accessor for OAuthSessionError(0);
    v55 = sub_F1C0((unint64_t *)&qword_3B4378, (void (*)(uint64_t))&type metadata accessor for OAuthSessionError, (uint64_t)&protocol conformance descriptor for OAuthSessionError);
    swift_allocError(v54, v55, 0, 0);
    v56 = OAuthAuthenticationErrorResponse.sessionError.getter();
    swift_willThrow(v56);
    (*(void (**)(_BYTE *, uint64_t))(v42 + 8))(v53, v45);
    return v26;
  }
  sub_1459C(v41, &qword_3C5E98);
  if (!*(_QWORD *)(v43 + 16))
  {
LABEL_13:
    v40 = swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  swift_bridgeObjectRetain(v43);
  v46 = sub_29724(0x6574617473, 0xE500000000000000);
  if ((v47 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  v48 = (uint64_t *)(*(_QWORD *)(v43 + 56) + 16 * v46);
  v50 = *v48;
  v49 = v48[1];
  swift_bridgeObjectRetain(v49);
  swift_bridgeObjectRelease();
  v52 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
  if (v50 == v52 && v49 == v51)
  {
    swift_bridgeObjectRelease_n(v49, 2);
    goto LABEL_21;
  }
  v72 = _stringCompareWithSmolCheck(_:_:expecting:)(v50, v49, v52, v51, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v72 & 1) == 0)
    goto LABEL_13;
LABEL_21:
  if (!*(_QWORD *)(v43 + 16) || (v73 = sub_29724(1701080931, 0xE400000000000000), (v74 & 1) == 0))
  {
    v89 = swift_bridgeObjectRelease();
    v90 = v144;
    static Logger.purchases.getter(v89);
    v91 = swift_retain(v2);
    v92 = Logger.logObject.getter(v91);
    v93 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v92, v93))
    {
      v94 = swift_slowAlloc(22, -1);
      v150 = swift_slowAlloc(32, -1);
      v153 = (_QWORD *)v150;
      *(_DWORD *)v94 = 141558275;
      v151 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v151, &v152);
      *(_WORD *)(v94 + 12) = 2081;
      v26 = (v94 + 14);
      v95 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8ShelfKit12OAuthSession_sessionId);
      v96 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8ShelfKit12OAuthSession_sessionId + 8);
      swift_bridgeObjectRetain(v96);
      v151 = sub_69298(v95, v96, (uint64_t *)&v153);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v151, &v152);
      swift_release(v2);
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_0, v92, v93, "%{private,mask.hash}s: Missing short-lived token from response.", (uint8_t *)v94, 0x16u);
      v97 = v150;
      swift_arrayDestroy(v150, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v97, -1, -1);
      swift_slowDealloc(v94, -1, -1);

      v98 = v144;
    }
    else
    {

      swift_release(v2);
      v98 = v90;
    }
    v39(v98, v11);
    v65 = type metadata accessor for OAuthSessionError(0);
    v99 = sub_F1C0((unint64_t *)&qword_3B4378, (void (*)(uint64_t))&type metadata accessor for OAuthSessionError, (uint64_t)&protocol conformance descriptor for OAuthSessionError);
    swift_allocError(v65, v99, 0, 0);
    v68 = v100;
    v69 = (unsigned int *)&enum case for OAuthSessionError.missingShortLivedToken(_:);
    goto LABEL_18;
  }
  v143 = v11;
  v75 = *(_QWORD *)(v43 + 56) + 16 * v73;
  v26 = *(NSObject **)v75;
  v76 = *(_QWORD *)(v75 + 8);
  swift_bridgeObjectRetain(v76);
  v77 = swift_bridgeObjectRelease();
  v78 = v142;
  static Logger.purchases.getter(v77);
  swift_retain_n(v2, 2);
  v79 = swift_bridgeObjectRetain_n(v76, 2);
  v80 = Logger.logObject.getter(v79);
  v81 = static os_log_type_t.default.getter();
  v82 = v81;
  if (os_log_type_enabled(v80, v81))
  {
    v83 = swift_slowAlloc(32, -1);
    LODWORD(v150) = v82;
    v84 = v83;
    v149 = (_BYTE *)swift_slowAlloc(64, -1);
    v153 = v149;
    *(_DWORD *)v84 = 141558531;
    v151 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v151, &v152);
    *(_WORD *)(v84 + 12) = 2081;
    v141 = a1;
    v85 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8ShelfKit12OAuthSession_sessionId);
    v86 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8ShelfKit12OAuthSession_sessionId + 8);
    swift_bridgeObjectRetain(v86);
    v151 = sub_69298(v85, v86, (uint64_t *)&v153);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v151, &v152);
    swift_release_n(v2, 2);
    swift_bridgeObjectRelease();
    *(_WORD *)(v84 + 22) = 2080;
    swift_bridgeObjectRetain(v76);
    v151 = sub_69298((uint64_t)v26, v76, (uint64_t *)&v153);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v151, &v152);
    swift_bridgeObjectRelease_n(v76, 3);
    _os_log_impl(&dword_0, v80, (os_log_type_t)v150, "%{private,mask.hash}s: short-lived token acquired: %s.", (uint8_t *)v84, 0x20u);
    v87 = v149;
    swift_arrayDestroy(v149, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v87, -1, -1);
    swift_slowDealloc(v84, -1, -1);

    v88 = v142;
  }
  else
  {

    swift_bridgeObjectRelease_n(v76, 2);
    swift_release_n(v2, 2);
    v88 = v78;
  }
  v101 = ((uint64_t (*)(_BYTE *, uint64_t))v39)(v88, v143);
  v102 = URL.pathComponents.getter(v101);
  v103 = *(_QWORD *)(v102 + 16);
  v150 = v102;
  if (v103)
  {
    v104 = (_QWORD *)(v102 + 40);
    v105 = _swiftEmptyArrayStorage;
    v148 = v39;
    do
    {
      v110 = *(v104 - 1);
      v111 = *v104;
      v112 = v110 == 47 && v111 == 0xE100000000000000;
      if (!v112
        && (_stringCompareWithSmolCheck(_:_:expecting:)(*(v104 - 1), *v104, 47, 0xE100000000000000, 0) & 1) == 0)
      {
        v113 = v110 == 0x687475616FLL && v111 == 0xE500000000000000;
        if (!v113
          && (_stringCompareWithSmolCheck(_:_:expecting:)(v110, v111, 0x687475616FLL, 0xE500000000000000, 0) & 1) == 0)
        {
          swift_bridgeObjectRetain(v111);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v105);
          v153 = v105;
          v115 = v2;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_1807B0(0, v105[2] + 1, 1);
            v105 = v153;
          }
          v107 = v105[2];
          v106 = v105[3];
          v108 = (_BYTE *)(v107 + 1);
          if (v107 >= v106 >> 1)
          {
            v149 = (_BYTE *)(v107 + 1);
            sub_1807B0(v106 > 1, v107 + 1, 1);
            v108 = v149;
            v105 = v153;
          }
          v105[2] = v108;
          v109 = &v105[2 * v107];
          v109[4] = v110;
          v109[5] = v111;
          v2 = v115;
          v39 = v148;
        }
      }
      v104 += 2;
      --v103;
    }
    while (v103);
  }
  else
  {
    v105 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease();
  if (!v105[2])
  {
    swift_bridgeObjectRelease();
    v122 = swift_release(v105);
    goto LABEL_57;
  }
  v117 = v105[4];
  v116 = v105[5];
  swift_bridgeObjectRetain(v116);
  swift_release(v105);
  v118 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8ShelfKit12OAuthSession_oAuthAdamId);
  v119 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8ShelfKit12OAuthSession_oAuthAdamId + 8);
  if (v117 == v118 && v116 == v119)
  {
    swift_bridgeObjectRelease();
    return v26;
  }
  v121 = _stringCompareWithSmolCheck(_:_:expecting:)(v117, v116, v118, v119, 0);
  swift_bridgeObjectRelease();
  if ((v121 & 1) == 0)
  {
    v122 = swift_bridgeObjectRelease();
LABEL_57:
    v26 = v140;
    static Logger.purchases.getter(v122);
    v123 = swift_retain(v2);
    v124 = Logger.logObject.getter(v123);
    v125 = static os_log_type_t.error.getter();
    v126 = os_log_type_enabled(v124, v125);
    v127 = v143;
    if (v126)
    {
      v128 = swift_slowAlloc(22, -1);
      v129 = swift_slowAlloc(32, -1);
      v153 = (_QWORD *)v129;
      *(_DWORD *)v128 = 141558275;
      v151 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v151, &v152);
      *(_WORD *)(v128 + 12) = 2081;
      v26 = (v128 + 14);
      v130 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8ShelfKit12OAuthSession_sessionId);
      v131 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8ShelfKit12OAuthSession_sessionId + 8);
      swift_bridgeObjectRetain(v131);
      v151 = sub_69298(v130, v131, (uint64_t *)&v153);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v151, &v152);
      swift_release(v2);
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_0, v124, v125, "%{private,mask.hash}s: oAuthAdamId's do not match.", (uint8_t *)v128, 0x16u);
      swift_arrayDestroy(v129, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v129, -1, -1);
      swift_slowDealloc(v128, -1, -1);

      v132 = v140;
      v133 = v143;
    }
    else
    {

      swift_release(v2);
      v132 = v26;
      v133 = v127;
    }
    v39(v132, v133);
    v65 = type metadata accessor for OAuthSessionError(0);
    v134 = sub_F1C0((unint64_t *)&qword_3B4378, (void (*)(uint64_t))&type metadata accessor for OAuthSessionError, (uint64_t)&protocol conformance descriptor for OAuthSessionError);
    swift_allocError(v65, v134, 0, 0);
    v68 = v135;
    v69 = (unsigned int *)&enum case for OAuthSessionError.oAuthAdamIdMismatch(_:);
LABEL_18:
    v70 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v65 - 8) + 104))(v68, *v69, v65);
    swift_willThrow(v70);
  }
  return v26;
}

uint64_t sub_29510C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t (*v15)(char *, unint64_t, uint64_t);
  _QWORD *v16;
  uint64_t i;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  uint64_t v30;
  _BOOL8 v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  char v37;
  char v38;
  char isUniquelyReferenced_nonNull_native;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t result;
  _QWORD v46[2];
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t (*v53)(char *, unint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;

  v1 = type metadata accessor for URLQueryItem(0);
  v54 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v3 = (char *)v46 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0CB8);
  __chkstk_darwin(v4);
  v6 = (char *)v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for URLComponents(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  URLComponents.init(url:resolvingAgainstBaseURL:)(v0, 1);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_1459C((uint64_t)v6, &qword_3B0CB8);
    return 0;
  }
  v11 = (*(uint64_t (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
  v12 = URLComponents.queryItems.getter(v11);
  if (!v12)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    return 0;
  }
  v47 = v10;
  v48 = v8;
  v49 = v7;
  v13 = *(_QWORD *)(v12 + 16);
  v46[1] = v12;
  if (!v13)
  {
    v16 = &_swiftEmptyDictionarySingleton;
LABEL_30:
    (*(void (**)(char *, uint64_t))(v48 + 8))(v47, v49);
    swift_bridgeObjectRelease();
    return (uint64_t)v16;
  }
  v14 = v12 + ((*(unsigned __int8 *)(v54 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v54 + 80));
  v15 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v54 + 16);
  v52 = *(_QWORD *)(v54 + 72);
  v53 = v15;
  v16 = &_swiftEmptyDictionarySingleton;
  v50 = v3;
  v51 = v1;
  for (i = v15(v3, v14, v1); ; i = v53(v3, v14, v1))
  {
    v19 = URLQueryItem.name.getter(i);
    v21 = v20;
    v22 = URLQueryItem.value.getter();
    if (v23)
      break;
    swift_bridgeObjectRetain(v16);
    v36 = sub_29724(v19, v21);
    v38 = v37;
    swift_bridgeObjectRelease();
    if ((v38 & 1) != 0)
    {
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v16);
      v56 = v16;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_232894();
        v16 = v56;
      }
      swift_bridgeObjectRelease();
      sub_2314CC(v36, (uint64_t)v16);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
LABEL_8:
    (*(void (**)(char *, uint64_t))(v54 + 8))(v3, v1);
    v14 += v52;
    if (!--v13)
      goto LABEL_30;
  }
  v24 = v23;
  v55 = v13;
  v25 = v22;
  v26 = swift_isUniquelyReferenced_nonNull_native(v16);
  v56 = v16;
  v27 = v21;
  v29 = sub_29724(v19, v21);
  v30 = v16[2];
  v31 = (v28 & 1) == 0;
  v32 = v30 + v31;
  if (!__OFADD__(v30, v31))
  {
    v33 = v28;
    if (v16[3] < v32)
    {
      sub_22FB80(v32, v26);
      v34 = sub_29724(v19, v27);
      if ((v33 & 1) != (v35 & 1))
        goto LABEL_34;
      v29 = v34;
      v16 = v56;
      if ((v33 & 1) == 0)
        goto LABEL_22;
LABEL_6:
      v18 = (uint64_t *)(v16[7] + 16 * v29);
      swift_bridgeObjectRelease();
      *v18 = v25;
      v18[1] = v24;
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v3 = v50;
      v1 = v51;
      v13 = v55;
      goto LABEL_8;
    }
    if ((v26 & 1) != 0)
    {
      v16 = v56;
      if ((v28 & 1) != 0)
        goto LABEL_6;
    }
    else
    {
      sub_232894();
      v16 = v56;
      if ((v33 & 1) != 0)
        goto LABEL_6;
    }
LABEL_22:
    v16[(v29 >> 6) + 8] |= 1 << v29;
    v40 = (uint64_t *)(v16[6] + 16 * v29);
    *v40 = v19;
    v40[1] = v27;
    v41 = (uint64_t *)(v16[7] + 16 * v29);
    *v41 = v25;
    v41[1] = v24;
    v42 = v16[2];
    v43 = __OFADD__(v42, 1);
    v44 = v42 + 1;
    if (v43)
      goto LABEL_33;
    v16[2] = v44;
    swift_bridgeObjectRetain(v27);
    goto LABEL_7;
  }
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_295514@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t aBlock[6];

  v4 = v3;
  v36 = a2;
  v43 = a1;
  v41 = a3;
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v42 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v40 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v38 = *(_QWORD *)(v7 - 8);
  v39 = v7;
  __chkstk_darwin(v7);
  v37 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Logger(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.purchases.getter(v13);
  v14 = swift_retain();
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.default.getter(v15);
  if (os_log_type_enabled(v15, v16))
  {
    v17 = swift_slowAlloc(22, -1);
    v34 = v9;
    v18 = v17;
    v19 = swift_slowAlloc(32, -1);
    *(_DWORD *)v18 = 141558275;
    v44 = 1752392040;
    aBlock[0] = v19;
    v35 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, aBlock);
    *(_WORD *)(v18 + 12) = 2081;
    v33 = v18 + 14;
    v20 = *(_QWORD *)(v4 + OBJC_IVAR____TtC8ShelfKit12OAuthSession_sessionId);
    v21 = *(_QWORD *)(v4 + OBJC_IVAR____TtC8ShelfKit12OAuthSession_sessionId + 8);
    swift_bridgeObjectRetain();
    v44 = sub_69298(v20, v21, aBlock);
    v5 = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, aBlock);
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v15, v16, "%{private,mask.hash}s: Getting commerce verification url from bag. Starting UI spinner.", (uint8_t *)v18, 0x16u);
    swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1, -1);
    swift_slowDealloc(v18, -1, -1);

    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v34);
  }
  else
  {

    swift_release();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  aBlock[4] = (uint64_t)sub_297154;
  aBlock[5] = v4;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_2C9F4;
  aBlock[3] = (uint64_t)&block_descriptor_32_0;
  v22 = _Block_copy(aBlock);
  v23 = swift_retain();
  v24 = v37;
  static DispatchQoS.unspecified.getter(v23);
  v44 = (uint64_t)_swiftEmptyArrayStorage;
  v25 = sub_F1C0((unint64_t *)&qword_3B4420, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v26 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8720);
  v27 = sub_32914((unint64_t *)&qword_3B4430, (uint64_t *)&unk_3B8720, (uint64_t)&protocol conformance descriptor for [A]);
  v28 = v40;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v44, v26, v27, v5, v25);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v24, v28, v22);
  _Block_release(v22);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v28, v5);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v24, v39);
  swift_release();
  v29 = (_QWORD *)swift_allocObject(&unk_38DF80, 40, 7);
  v30 = v43;
  v29[2] = v4;
  v29[3] = v30;
  v29[4] = v36;
  v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C5CA8);
  swift_allocObject(v31, *(unsigned int *)(v31 + 48), *(unsigned __int16 *)(v31 + 52));
  swift_retain();
  swift_bridgeObjectRetain();
  result = Future.init(_:)(sub_2971AC, v29);
  *v41 = result;
  return result;
}

void sub_29592C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  _QWORD *v15;
  void *v16;
  _QWORD v17[6];

  v10 = swift_allocObject(&unk_38DFA8, 32, 7);
  *(_QWORD *)(v10 + 16) = a1;
  *(_QWORD *)(v10 + 24) = a2;
  v11 = (void *)objc_opt_self(IMURLBag);
  swift_retain();
  v12 = objc_msgSend(v11, "sharedInstance");
  v13 = objc_msgSend(v12, "commerceOAuthVerificationUrl");

  v14 = objc_msgSend(v13, "asyncValuePromiseOnQueue:", *(_QWORD *)(a3 + OBJC_IVAR____TtC8ShelfKit12OAuthSession_workQueue));
  v15 = (_QWORD *)swift_allocObject(&unk_38DFD0, 56, 7);
  v15[2] = a3;
  v15[3] = sub_2971B8;
  v15[4] = v10;
  v15[5] = a4;
  v15[6] = a5;
  v17[4] = sub_297220;
  v17[5] = v15;
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 1107296256;
  v17[2] = sub_E60F4;
  v17[3] = &block_descriptor_44_0;
  v16 = _Block_copy(v17);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_release();
  objc_msgSend(v14, "addFinishBlock:", v16);
  _Block_release(v16);

}

void sub_295AB0(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  os_log_t v35;
  _QWORD *v36;
  void *v37;
  id v38;
  NSObject *v39;
  os_log_type_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  id v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE v62[4];
  int v63;
  os_log_t v64;
  _QWORD *v65;
  void (*v66)(_QWORD);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;

  v68 = a6;
  v69 = a7;
  v12 = type metadata accessor for Logger(0);
  v70 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = &v62[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v15);
  v17 = &v62[-v16];
  __chkstk_darwin(v18);
  v21 = &v62[-v20];
  if (a1
    && (v72 = 0,
        v73 = 0,
        v19 = static String._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v72),
        (v22 = v73) != 0))
  {
    v23 = v72;
    static Logger.purchases.getter(v19);
    swift_retain_n(a3, 2);
    v24 = swift_bridgeObjectRetain_n(v22, 2);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.default.getter(v25);
    v27 = v26;
    if (os_log_type_enabled(v25, v26))
    {
      v28 = swift_slowAlloc(32, -1);
      v64 = v25;
      v29 = v28;
      v30 = swift_slowAlloc(64, -1);
      v65 = (_QWORD *)v30;
      *(_DWORD *)v29 = 141558531;
      v71 = 1752392040;
      v72 = v30;
      v66 = a4;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, &v72);
      *(_WORD *)(v29 + 12) = 2081;
      v67 = v12;
      v63 = v27;
      v31 = v23;
      v33 = *(_QWORD *)(a3 + OBJC_IVAR____TtC8ShelfKit12OAuthSession_sessionId);
      v32 = *(_QWORD *)(a3 + OBJC_IVAR____TtC8ShelfKit12OAuthSession_sessionId + 8);
      swift_bridgeObjectRetain();
      v34 = v33;
      v23 = v31;
      v71 = sub_69298(v34, v32, &v72);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, &v72);
      swift_release_n(a3, 2);
      swift_bridgeObjectRelease();
      *(_WORD *)(v29 + 22) = 2080;
      swift_bridgeObjectRetain();
      v71 = sub_69298(v31, v22, &v72);
      a4 = v66;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, &v72);
      swift_bridgeObjectRelease_n(v22, 3);
      v35 = v64;
      _os_log_impl(&dword_0, v64, (os_log_type_t)v63, "%{private,mask.hash}s: Acquired OAuth commerce verification endpoint from bag: %s.", (uint8_t *)v29, 0x20u);
      v36 = v65;
      swift_arrayDestroy(v65, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v36, -1, -1);
      swift_slowDealloc(v29, -1, -1);

      (*(void (**)(_BYTE *, uint64_t))(v70 + 8))(v21, v67);
    }
    else
    {

      swift_bridgeObjectRelease_n(v22, 2);
      swift_release_n(a3, 2);
      (*(void (**)(_BYTE *, uint64_t))(v70 + 8))(v21, v12);
    }
    v72 = v23;
    v73 = v22;
    v74 = v68;
    v75 = v69;
    v76 = 0;
    swift_bridgeObjectRetain();
    a4(&v72);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else if (a2)
  {
    v67 = v12;
    v69 = a5;
    v37 = (void *)_convertErrorToNSError(_:)(a2);
    static Logger.purchases.getter(v37);
    swift_retain_n(a3, 2);
    v38 = v37;
    v39 = Logger.logObject.getter(v38);
    v40 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v39, v40))
    {
      v41 = swift_slowAlloc(32, -1);
      v65 = (_QWORD *)swift_slowAlloc(8, -1);
      v42 = swift_slowAlloc(32, -1);
      v68 = v42;
      *(_DWORD *)v41 = 141558531;
      v71 = 1752392040;
      v72 = v42;
      v66 = a4;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, &v72);
      *(_WORD *)(v41 + 12) = 2081;
      v44 = *(_QWORD *)(a3 + OBJC_IVAR____TtC8ShelfKit12OAuthSession_sessionId);
      v43 = *(_QWORD *)(a3 + OBJC_IVAR____TtC8ShelfKit12OAuthSession_sessionId + 8);
      swift_bridgeObjectRetain();
      v71 = sub_69298(v44, v43, &v72);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, &v72);
      swift_release_n(a3, 2);
      swift_bridgeObjectRelease();
      *(_WORD *)(v41 + 22) = 2112;
      v71 = (uint64_t)v38;
      v45 = v38;
      a4 = v66;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, &v72);
      v46 = v65;
      *v65 = v38;

      _os_log_impl(&dword_0, v39, v40, "%{private,mask.hash}s Could not get commerce OAuth verification endpoint from bag with error: %@", (uint8_t *)v41, 0x20u);
      v47 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8E70);
      swift_arrayDestroy(v46, 1, v47);
      swift_slowDealloc(v46, -1, -1);
      v48 = v68;
      swift_arrayDestroy(v68, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v48, -1, -1);
      swift_slowDealloc(v41, -1, -1);

    }
    else
    {

      swift_release_n(a3, 2);
    }
    (*(void (**)(_BYTE *, uint64_t))(v70 + 8))(v14, v67);
    v72 = (uint64_t)v38;
    v73 = 0;
    v74 = 0;
    v75 = 0;
    v76 = 1;
    v57 = v38;
    a4(&v72);

  }
  else
  {
    static Logger.purchases.getter(v19);
    v49 = swift_retain();
    v50 = Logger.logObject.getter(v49);
    v51 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v50, v51))
    {
      v52 = swift_slowAlloc(22, -1);
      v53 = swift_slowAlloc(32, -1);
      v69 = v53;
      *(_DWORD *)v52 = 141558275;
      v71 = 1752392040;
      v72 = v53;
      v66 = a4;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, &v72);
      *(_WORD *)(v52 + 12) = 2081;
      v67 = v12;
      v54 = *(_QWORD *)(a3 + OBJC_IVAR____TtC8ShelfKit12OAuthSession_sessionId);
      v55 = *(_QWORD *)(a3 + OBJC_IVAR____TtC8ShelfKit12OAuthSession_sessionId + 8);
      swift_bridgeObjectRetain();
      v71 = sub_69298(v54, v55, &v72);
      a4 = v66;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, &v72);
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_0, v50, v51, "%{private,mask.hash}s Could not get commerce OAuth verification endpoint from bag.", (uint8_t *)v52, 0x16u);
      v56 = v69;
      swift_arrayDestroy(v69, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v56, -1, -1);
      swift_slowDealloc(v52, -1, -1);

      (*(void (**)(_BYTE *, uint64_t))(v70 + 8))(v17, v67);
    }
    else
    {

      swift_release();
      (*(void (**)(_BYTE *, uint64_t))(v70 + 8))(v17, v12);
    }
    v58 = type metadata accessor for OAuthSessionError(0);
    v59 = sub_F1C0((unint64_t *)&qword_3B4378, (void (*)(uint64_t))&type metadata accessor for OAuthSessionError, (uint64_t)&protocol conformance descriptor for OAuthSessionError);
    v60 = swift_allocError(v58, v59, 0, 0);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v58 - 8) + 104))(v61, enum case for OAuthSessionError.unableToGetCommerceVerificationEndpointFromBag(_:), v58);
    v72 = v60;
    v73 = 0;
    v74 = 0;
    v75 = 0;
    v76 = 1;
    a4(&v72);
    swift_errorRelease(v60);
  }
}

uint64_t sub_296250@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  Swift::OpaquePointer v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __n128 v54;
  _BYTE v55[4];
  int v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD v62[2];
  uint64_t v63[3];
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v58 = a5;
  v6 = v5;
  v57 = a4;
  v66 = type metadata accessor for Logger(0);
  v60 = *(_QWORD *)(v66 - 8);
  v10 = __chkstk_darwin(v66);
  v12 = &v55[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v10);
  v59 = &v55[-v13];
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
  __chkstk_darwin(v14);
  v16 = &v55[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = type metadata accessor for URL(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = &v55[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v63[0] = a1;
  v63[1] = a2;
  v61 = 0x612D687475616F7BLL;
  v62[0] = 0xEF7D64692D6D6164;
  v21 = *(_QWORD *)(v6 + OBJC_IVAR____TtC8ShelfKit12OAuthSession_oAuthAdamId + 8);
  v64 = *(_QWORD *)(v6 + OBJC_IVAR____TtC8ShelfKit12OAuthSession_oAuthAdamId);
  v65 = v21;
  v22 = sub_65CC4();
  v23 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v61, &v64, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v22, v22, v22);
  URL.init(string:)(v23, v24);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
  {
    v25 = sub_1459C((uint64_t)v16, &qword_3B4370);
    static Logger.purchases.getter(v25);
    v26 = swift_retain(v6);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      v29 = swift_slowAlloc(22, -1);
      v30 = swift_slowAlloc(32, -1);
      v63[0] = v30;
      *(_DWORD *)v29 = 141558275;
      v61 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, v62);
      *(_WORD *)(v29 + 12) = 2081;
      v31 = *(_QWORD *)(v6 + OBJC_IVAR____TtC8ShelfKit12OAuthSession_sessionId);
      v32 = *(_QWORD *)(v6 + OBJC_IVAR____TtC8ShelfKit12OAuthSession_sessionId + 8);
      swift_bridgeObjectRetain(v32);
      v61 = sub_69298(v31, v32, v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, v62);
      swift_release(v6);
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_0, v27, v28, "%{private,mask.hash}s Could not form verification endpoint with oauth id.", (uint8_t *)v29, 0x16u);
      swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1, -1);
      swift_slowDealloc(v29, -1, -1);

    }
    else
    {

      swift_release(v6);
    }
    (*(void (**)(_BYTE *, uint64_t))(v60 + 8))(v12, v66);
    v49 = type metadata accessor for OAuthSessionError(0);
    v50 = sub_F1C0((unint64_t *)&qword_3B4378, (void (*)(uint64_t))&type metadata accessor for OAuthSessionError, (uint64_t)&protocol conformance descriptor for OAuthSessionError);
    swift_allocError(v49, v50, 0, 0);
    v52 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v49 - 8) + 104))(v51, enum case for OAuthSessionError.cannotReformCommerceVerificationUrl(_:), v49);
    return swift_willThrow(v52);
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v18 + 32))(v20, v16, v17);
    v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0978);
    v34 = type metadata accessor for URLQueryItem(0);
    v35._rawValue = (void *)swift_allocObject(v33, ((*(unsigned __int8 *)(*(_QWORD *)(v34 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v34 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v34 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v34 - 8) + 80) | 7);
    *((_OWORD *)v35._rawValue + 1) = xmmword_2EA0D0;
    URLQueryItem.init(name:value:)(1701080931, 0xE400000000000000, a3, v57);
    URL.append(queryItems:)(v35);
    v36 = swift_bridgeObjectRelease();
    static Logger.purchases.getter(v36);
    v37 = swift_retain(v6);
    v38 = Logger.logObject.getter(v37);
    v39 = static os_log_type_t.default.getter();
    v40 = v39;
    if (os_log_type_enabled(v38, v39))
    {
      v41 = swift_slowAlloc(32, -1);
      v56 = v40;
      v42 = v41;
      v57 = swift_slowAlloc(64, -1);
      v63[0] = v57;
      *(_DWORD *)v42 = 141558531;
      v61 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, v62);
      *(_WORD *)(v42 + 12) = 2081;
      v43 = *(_QWORD *)(v6 + OBJC_IVAR____TtC8ShelfKit12OAuthSession_sessionId);
      v44 = *(_QWORD *)(v6 + OBJC_IVAR____TtC8ShelfKit12OAuthSession_sessionId + 8);
      swift_bridgeObjectRetain(v44);
      v61 = sub_69298(v43, v44, v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, v62);
      swift_release(v6);
      swift_bridgeObjectRelease();
      *(_WORD *)(v42 + 22) = 2080;
      swift_beginAccess(v20, &v61, 0, 0);
      v45 = sub_F1C0(&qword_3C5E88, (void (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v46 = dispatch thunk of CustomStringConvertible.description.getter(v17, v45);
      v64 = sub_69298(v46, v47, v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65);
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_0, v38, (os_log_type_t)v56, "%{private,mask.hash}s Got commerce verification endpoint from the bag and appended short-lived token: %s", (uint8_t *)v42, 0x20u);
      v48 = v57;
      swift_arrayDestroy(v57, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v48, -1, -1);
      swift_slowDealloc(v42, -1, -1);

    }
    else
    {

      swift_release(v6);
    }
    (*(void (**)(_BYTE *, uint64_t))(v60 + 8))(v59, v66);
    v54 = swift_beginAccess(v20, v63, 0, 0);
    (*(void (**)(uint64_t, _BYTE *, uint64_t, __n128))(v18 + 16))(v58, v20, v17, v54);
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v18 + 8))(v20, v17);
  }
}

uint64_t OAuthSession.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0 + OBJC_IVAR____TtC8ShelfKit12OAuthSession_authorizationURL;
  v2 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  v3 = v0 + OBJC_IVAR____TtC8ShelfKit12OAuthSession_state;
  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);

  swift_release();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit12OAuthSession_hudViewHandler));

  return v0;
}

uint64_t OAuthSession.__deallocating_deinit()
{
  uint64_t v0;

  OAuthSession.deinit();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_2969DC(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C5F08);
  __chkstk_darwin(v6);
  v8 = (uint64_t *)((char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
  __chkstk_darwin(v9);
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for URL(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_282CC(a1, (uint64_t)v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    sub_1459C((uint64_t)v11, &qword_3B4370);
    if (a2)
    {
      *v8 = a2;
      swift_storeEnumTagMultiPayload(v8, v6, 1);
      swift_errorRetain(a2);
    }
    else
    {
      v17 = type metadata accessor for OAuthSessionError(0);
      v18 = sub_F1C0((unint64_t *)&qword_3B4378, (void (*)(uint64_t))&type metadata accessor for OAuthSessionError, (uint64_t)&protocol conformance descriptor for OAuthSessionError);
      v19 = swift_allocError(v17, v18, 0, 0);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v17 - 8) + 104))(v20, enum case for OAuthSessionError.missingRedirectUrlFromWebAuthenticationSession(_:), v17);
      *v8 = v19;
      swift_storeEnumTagMultiPayload(v8, v6, 1);
    }
    a3(v8);
    return sub_1459C((uint64_t)v8, &qword_3C5F08);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v11, v12);
    (*(void (**)(uint64_t *, char *, uint64_t))(v13 + 16))(v8, v15, v12);
    swift_storeEnumTagMultiPayload(v8, v6, 0);
    a3(v8);
    sub_1459C((uint64_t)v8, &qword_3C5F08);
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  }
}

uint64_t sub_296C20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7, void *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  id v24;
  id v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;

  v9 = v8;
  v32 = a3;
  v33 = (_QWORD *)a4;
  v15 = type metadata accessor for UUID(0);
  v34 = *(_QWORD *)(v15 - 8);
  v35 = v15;
  __chkstk_darwin(v15);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v9 + OBJC_IVAR____TtC8ShelfKit12OAuthSession_oauthSession) = 0;
  *(_QWORD *)(v9 + OBJC_IVAR____TtC8ShelfKit12OAuthSession_webAuthenticationSession) = 0;
  v18 = v9 + OBJC_IVAR____TtC8ShelfKit12OAuthSession_authorizationURL;
  v19 = type metadata accessor for URL(0);
  v20 = *(_QWORD *)(v19 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v18, a1, v19);
  v21 = (_QWORD *)(v9 + OBJC_IVAR____TtC8ShelfKit12OAuthSession_oAuthAdamId);
  v22 = v32;
  *v21 = a2;
  v21[1] = v22;
  v23 = v33;
  sub_150C8((uint64_t)v33, v9 + OBJC_IVAR____TtC8ShelfKit12OAuthSession_hudViewHandler);
  *(_QWORD *)(v9 + OBJC_IVAR____TtC8ShelfKit12OAuthSession_window) = a6;
  *(_QWORD *)(v9 + OBJC_IVAR____TtC8ShelfKit12OAuthSession_workQueue) = a7;
  *(_QWORD *)(v9 + OBJC_IVAR____TtC8ShelfKit12OAuthSession_uiQueue) = a8;
  v24 = a6;
  v25 = a7;
  v26 = URL.host.getter(a8);
  if (v27)
    v28 = v26;
  else
    v28 = 0;
  v29 = 0xE000000000000000;
  if (v27)
    v29 = v27;
  v30 = (uint64_t *)(v9 + OBJC_IVAR____TtC8ShelfKit12OAuthSession_sessionId);
  *v30 = v28;
  v30[1] = v29;
  UUID.init()(v26);
  __swift_destroy_boxed_opaque_existential_1(v23);
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(a1, v19);
  (*(void (**)(uint64_t, char *, uint64_t))(v34 + 32))(v9 + OBJC_IVAR____TtC8ShelfKit12OAuthSession_state, v17, v35);
  return v9;
}

uint64_t sub_296DBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_296E30()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for URL(0) - 8) + 80);
  sub_2914DC(*(_QWORD *)(v0 + 16), v0 + ((v1 + 24) & ~v1));
}

uint64_t block_copy_helper_31(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t block_destroy_helper_31(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

NSObject *sub_296E78(uint64_t a1)
{
  return sub_294238(a1);
}

uint64_t sub_296E8C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_296EB0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = (*(uint64_t (**)(void))(v1 + 16))();
  if (!v2)
  {
    *a1 = result;
    a1[1] = v5;
  }
  return result;
}

uint64_t sub_296EE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return sub_296250(a1, a2, a3, a4, a5);
}

uint64_t sub_296EF4(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(v1 + 16))(*a1, a1[1], a1[2], a1[3]);
}

uint64_t sub_296F20()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_296F44@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = AMSOAuthEndpointSubscriber.subscribe(to:for:)(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
  *a2 = result;
  return result;
}

uint64_t sub_296F6C()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_296F90()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));

  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_296FC4(uint64_t *a1)
{
  uint64_t v1;

  return sub_291DB4(a1, *(void (**)(_QWORD, _QWORD))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_296FD0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_297004(unsigned __int8 *a1)
{
  uint64_t *v1;

  return sub_2925E8(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_297010()
{
  return objectdestroy_25Tm((void (*)(_QWORD))&_swift_release, 40);
}

uint64_t sub_297020()
{
  uint64_t *v0;

  return sub_292DEC(v0[2], v0[3], v0[4]);
}

uint64_t sub_29702C()
{
  return type metadata accessor for OAuthSession(0);
}

uint64_t type metadata accessor for OAuthSession(uint64_t a1)
{
  uint64_t result;

  result = qword_3C5D40;
  if (!qword_3C5D40)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for OAuthSession);
  return result;
}

uint64_t sub_297070(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[11];

  result = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    v5[1] = &unk_303FB8;
    result = type metadata accessor for UUID(319);
    if (v4 <= 0x3F)
    {
      v5[2] = *(_QWORD *)(result - 8) + 64;
      v5[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
      v5[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
      v5[5] = &unk_303FD0;
      v5[6] = &unk_303FB8;
      v5[7] = &unk_303FE8;
      v5[8] = &unk_303FD0;
      v5[9] = (char *)&value witness table for () + 64;
      v5[10] = (char *)&value witness table for Builtin.UnknownObject + 64;
      return swift_updateClassMetadata2(a1, 256, 11, v5, a1 + 80);
    }
  }
  return result;
}

uint64_t method lookup function for OAuthSession(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for OAuthSession);
}

uint64_t dispatch thunk of OAuthSession.__allocating_init(authorizationURL:oAuthAdamId:hudViewHandler:endpointSubscriber:window:workQueue:uiQueue:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 224))();
}

uint64_t dispatch thunk of OAuthSession.startOAuthFlow(completionHandler:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t sub_297154()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit12OAuthSession_hudViewHandler + 24);
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit12OAuthSession_hudViewHandler + 32);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit12OAuthSession_hudViewHandler), v1);
  return dispatch thunk of OAuthHUDViewHandlerProtocol.start()(v1, v2);
}

uint64_t sub_29719C()
{
  return objectdestroy_25Tm((void (*)(_QWORD))&_swift_bridgeObjectRelease, 40);
}

void sub_2971AC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_29592C(a1, a2, v2[2], v2[3], v2[4]);
}

uint64_t sub_2971B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(_BYTE *);
  _BYTE v4[40];

  v2 = *(uint64_t (**)(_BYTE *))(v1 + 16);
  sub_297230(a1, (uint64_t)v4);
  return v2(v4);
}

uint64_t sub_2971EC()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[4]);
  swift_bridgeObjectRelease(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

void sub_297220(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_295AB0(a1, a2, *(_QWORD *)(v2 + 16), *(void (**)(_QWORD))(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48));
}

uint64_t sub_297230(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C5E90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_297278()
{
  return objectdestroy_25Tm((void (*)(_QWORD))&_swift_release, 40);
}

uint64_t sub_297288()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(uint64_t (**)(uint64_t))(v0 + 24);
  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit12OAuthSession_oauthSession);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit12OAuthSession_oauthSession) = 0;
  v4 = swift_release(v3);
  return v2(v4);
}

uint64_t sub_2972C0()
{
  return objectdestroy_25Tm((void (*)(_QWORD))&_swift_release, 41);
}

uint64_t objectdestroy_25Tm(void (*a1)(_QWORD), uint64_t a2)
{
  uint64_t v2;

  swift_release(*(_QWORD *)(v2 + 16));
  a1(*(_QWORD *)(v2 + 32));
  return swift_deallocObject(v2, a2, 7);
}

uint64_t sub_297314()
{
  uint64_t v0;

  return sub_2928E0(*(_QWORD *)(v0 + 16), *(void (**)(_QWORD, _QWORD))(v0 + 24), *(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
}

uint64_t sub_297324()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[4]);
  swift_errorRelease(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_297358()
{
  uint64_t v0;

  return sub_29223C(*(_QWORD *)(v0 + 16), *(void (**)(_QWORD, uint64_t))(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_297364(uint64_t a1)
{
  uint64_t v1;

  return sub_293CDC(a1, v1);
}

uint64_t sub_29736C(uint64_t *a1)
{
  uint64_t v1;

  return sub_293F94(a1, v1);
}

uint64_t sub_297374()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_297398(void (*a1)(uint64_t *), uint64_t a2)
{
  uint64_t v2;
  char *v5;

  v5 = *(char **)(v2 + 16);
  swift_retain(a2);
  sub_76C44(v5, a1, a2);
  return swift_release(a2);
}

uint64_t ShowEpisodesShelvesProvider.shelvesPublisher(showUUID:showPublisher:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t KeyPath;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t ObjectType;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _OWORD v102[3];
  uint64_t v103;
  uint64_t v104;

  v78 = a3;
  v83 = a2;
  v82 = a1;
  v88 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C5F10);
  v89 = *(_QWORD *)(v88 - 8);
  __chkstk_darwin(v88);
  v84 = (char *)&v77 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C5F18);
  v6 = *(_QWORD *)(v5 - 8);
  v90 = v5;
  v91 = v6;
  __chkstk_darwin(v5);
  v85 = (char *)&v77 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C5F20);
  v9 = *(_QWORD *)(v8 - 8);
  v94 = v8;
  v95 = v9;
  __chkstk_darwin(v8);
  v87 = (char *)&v77 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C5F28);
  v98 = *(_QWORD *)(v96 - 8);
  __chkstk_darwin(v96);
  v92 = (char *)&v77 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C5F30);
  v99 = *(_QWORD *)(v97 - 8);
  __chkstk_darwin(v97);
  v93 = (char *)&v77 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C5F38);
  v100 = *(_QWORD *)(v13 - 8);
  v101 = v13;
  __chkstk_darwin(v13);
  v79 = (char *)&v77 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v17 = (char *)&v77 - v16;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C5F40);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v77 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C5F48);
  v23 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v25 = (char *)&v77 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v102[0] = a3;
  KeyPath = swift_getKeyPath(&unk_304010);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8078);
  v77 = sub_32914(&qword_3B8080, &qword_3B8078, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.map<A>(_:)(KeyPath, v27, v77);
  swift_release(KeyPath);
  v28 = sub_32914(&qword_3C5F50, &qword_3C5F40, (uint64_t)&protocol conformance descriptor for Publishers.MapKeyPath<A, B>);
  v29 = sub_297C7C();
  Publisher<>.removeDuplicates()(v18, v28, v29);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  v30 = sub_32914(&qword_3C5F68, &qword_3C5F48, (uint64_t)&protocol conformance descriptor for Publishers.RemoveDuplicates<A>);
  v31 = Publisher.nullifyFirstIf<A>(_:)(sub_297D74, 0, v22, &type metadata for EpisodeUserFilter, v30);
  v80 = v31;
  (*(void (**)(char *, uint64_t))(v23 + 8))(v25, v22);
  v32 = v78;
  *(_QWORD *)&v102[0] = v78;
  v86 = v17;
  v33 = v27;
  v34 = v27;
  v35 = v77;
  Publisher.map<A>(_:)(sub_297D84, 0, v33, &type metadata for ShowEpisodesShelvesProvider.Info.DropDownOptionsInfo, v77);
  v36 = v101;
  v37 = v79;
  (*(void (**)(char *, char *, uint64_t))(v100 + 16))(v79, v17, v101);
  v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C5F70);
  swift_allocObject(v38, *(unsigned int *)(v38 + 48), *(unsigned __int16 *)(v38 + 52));
  v39 = sub_32914(&qword_3C5F78, &qword_3C5F38, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v79 = (char *)SubscriptionSubject.init<A>(_:)(v37, v36, v39);
  v40 = v81;
  v41 = *(_QWORD *)(v81 + 48);
  ObjectType = swift_getObjectType();
  v43 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v41 + 328))(v82, v83, ObjectType, v41);
  *(_QWORD *)&v102[0] = v43;
  v44 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C5F80);
  swift_allocObject(v44, *(unsigned int *)(v44 + 48), *(unsigned __int16 *)(v44 + 52));
  swift_retain();
  v45 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C2B58);
  v46 = sub_32914(&qword_3C2B60, &qword_3C2B58, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v47 = SubscriptionSubject.init<A>(_:)(v102, v45, v46);
  *(_QWORD *)&v102[0] = v32;
  v104 = v31;
  v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C5F88);
  v49 = sub_32914(&qword_3C5F90, &qword_3C5F88, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v50 = v84;
  Publisher.combineLatest<A>(_:)(&v104, v34, v48, v35, v49);
  v51 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C5F98);
  v52 = sub_32914(&qword_3C5FA0, &qword_3C5F10, (uint64_t)&protocol conformance descriptor for Publishers.CombineLatest<A, B>);
  v53 = v85;
  v54 = v88;
  Publisher.map<A>(_:)(sub_297F48, 0, v88, v51, v52);
  (*(void (**)(char *, uint64_t))(v89 + 8))(v50, v54);
  v55 = sub_32914(&qword_3C5FA8, &qword_3C5F18, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v56 = v87;
  v57 = v90;
  Publisher.removeDuplicates(by:)(sub_298310, 0, v90, v55);
  (*(void (**)(char *, uint64_t))(v91 + 8))(v53, v57);
  sub_298690(v40, (uint64_t)v102);
  v58 = swift_allocObject(&unk_38E138, 88, 7);
  v59 = v79;
  *(_QWORD *)(v58 + 16) = v79;
  *(_QWORD *)(v58 + 24) = v47;
  v60 = v102[1];
  *(_OWORD *)(v58 + 32) = v102[0];
  *(_OWORD *)(v58 + 48) = v60;
  *(_OWORD *)(v58 + 64) = v102[2];
  *(_QWORD *)(v58 + 80) = v103;
  v61 = swift_allocObject(&unk_38E160, 32, 7);
  *(_QWORD *)(v61 + 16) = sub_298720;
  *(_QWORD *)(v61 + 24) = v58;
  swift_retain();
  swift_retain();
  v62 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C5FB0);
  v63 = sub_32914(&qword_3C5FB8, &qword_3C5F20, (uint64_t)&protocol conformance descriptor for Publishers.RemoveDuplicates<A>);
  v64 = v92;
  v65 = v94;
  Publisher.map<A>(_:)(sub_298E60, v61, v94, v62, v63);
  swift_release(v61);
  (*(void (**)(char *, uint64_t))(v95 + 8))(v56, v65);
  v66 = sub_32914(&qword_3C5FC0, &qword_3C5F28, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v67 = sub_32914(&qword_3C5FC8, &qword_3C5FB0, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v68 = v93;
  v69 = v96;
  Publisher<>.switchToLatest()(v96, v66, v67);
  (*(void (**)(char *, uint64_t))(v98 + 8))(v64, v69);
  v70 = sub_32914(&qword_3C5FD0, &qword_3C5F30, (uint64_t)&protocol conformance descriptor for Publishers.SwitchToLatest<A, B>);
  v71 = v97;
  v72 = Publisher.bufferedMulticast()(v97, v70);
  (*(void (**)(char *, uint64_t))(v99 + 8))(v68, v71);
  *(_QWORD *)&v102[0] = v72;
  v73 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B80B0);
  v74 = sub_32914(&qword_3B80B8, &qword_3B80B0, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v75 = Publisher.eraseToAnyPublisher()(v73, v74);
  swift_release(v72);
  swift_release(v43);
  swift_release(v59);
  swift_release(v47);
  swift_release(v80);
  (*(void (**)(char *, uint64_t))(v100 + 8))(v86, v101);
  return v75;
}

unint64_t sub_297C7C()
{
  unint64_t result;

  result = qword_3C5F58;
  if (!qword_3C5F58)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_3C5F60);
    sub_229E00();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?);
    atomic_store(result, (unint64_t *)&qword_3C5F58);
  }
  return result;
}

double ShowEpisodesShelvesProvider.init(asPartOf:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double result;
  __int128 v8;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BC3F0);
  v5 = type metadata accessor for BaseObjectGraph(0);
  inject<A, B>(_:from:)((_QWORD *)a2, v4, a1, v4, v5);
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3BF760);
  inject<A, B>(_:from:)(&v8, v6, a1, v6, v5);
  swift_release();
  result = *(double *)&v8;
  *(_OWORD *)(a2 + 40) = v8;
  return result;
}

uint64_t sub_297D74(uint64_t a1)
{
  return EpisodeUserFilter.shouldResetOnNewVisit.getter(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

_QWORD *sub_297D84@<X0>(_QWORD *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(*result + OBJC_IVAR____TtC8ShelfKit13PodcastDetail_sort);
  return result;
}

uint64_t sub_297DA0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  int v8;
  unsigned int *v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  Swift::String v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t result;
  _BYTE v24[24];
  _QWORD v25[4];
  __int128 v26;
  __int128 v27;
  char v28;

  v8 = ~(_BYTE)a3;
  v9 = (unsigned int *)(a1 + OBJC_IVAR____TtC8ShelfKit13PodcastDetail_hidesPlayedEpisodes);
  v10 = swift_beginAccess(a1 + OBJC_IVAR____TtC8ShelfKit13PodcastDetail_hidesPlayedEpisodes, v24, 0, 0);
  v11 = MTPodcastHidesPlayedEpisodesResolved(*v9, v10);
  v12 = a2;
  v13 = a3;
  if (!v8)
  {
    v12 = static EpisodeUserFilter.defaultFilter(seasonToShow:hidesPlayedEpisodes:)(*(_QWORD *)(a1 + OBJC_IVAR____TtC8ShelfKit13PodcastDetail_seasonToShow), *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC8ShelfKit13PodcastDetail_seasonToShow + 8), v11);
    v13 = v14;
  }
  sub_173794(a2, a3);
  if ((_DWORD)v11)
    v15 = EpisodeUserFilter.supportsHidesPlayedEpisodes.getter(v12, v13);
  else
    v15 = 0;
  v16 = EpisodeUserFilter.shelfTitle(hidesPlayedEpisodes:)(v11);
  v18 = *(_QWORD *)(a1 + 40);
  v25[0] = *(_QWORD *)(a1 + 32);
  v17 = v25[0];
  v25[1] = v18;
  v25[2] = v12;
  v25[3] = v13;
  v26 = 0u;
  v27 = 0u;
  v28 = 7;
  v19 = *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC8ShelfKit13PodcastDetail_sort);
  swift_bridgeObjectRetain();
  sub_43568(v12, v13);
  EpisodeListSettings.init(_:sort:pubDateLimit:hidePlayedEpisodes:hideTrailers:hideVideoEpisodes:)(v25, v19, 3, v15 & 1, 0, 0);
  v20 = *(_BYTE *)(a1 + OBJC_IVAR____TtC8ShelfKit13PodcastDetail_isSerialShowTypeInFeed);
  v21 = *(_QWORD *)(a1 + 16);
  v22 = *(_BYTE *)(a1 + 24);
  result = swift_bridgeObjectRetain();
  *(_QWORD *)a4 = v17;
  *(_QWORD *)(a4 + 8) = v18;
  *(_QWORD *)(a4 + 16) = v21;
  *(_BYTE *)(a4 + 24) = v22;
  *(_QWORD *)(a4 + 32) = v12;
  *(_BYTE *)(a4 + 40) = v13;
  *(Swift::String *)(a4 + 48) = v16;
  *(_BYTE *)(a4 + 64) = v20;
  return result;
}

double sub_297F48@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  double result;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  __int128 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char v24;

  v3 = *(_QWORD *)a1;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(unsigned __int8 *)(a1 + 16);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C5F98);
  v7 = (_QWORD *)(a2 + *(int *)(v6 + 96));
  v8 = *(int *)(v6 + 112);
  sub_297DA0(v3, v4, v5, (uint64_t)&v17);
  result = *(double *)&v17;
  v10 = v18;
  v11 = v19;
  v12 = v20;
  v13 = v21;
  v14 = v22;
  v15 = v23;
  v16 = v24;
  *(_OWORD *)a2 = v17;
  *(_QWORD *)(a2 + 16) = v10;
  *(_BYTE *)(a2 + 24) = v11;
  *(_QWORD *)(a2 + 32) = v12;
  *(_BYTE *)(a2 + 40) = v13;
  *v7 = v14;
  v7[1] = v15;
  *(_BYTE *)(a2 + v8) = v16;
  return result;
}

uint64_t sub_297FF4(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, unsigned __int8 a16, uint64_t a17, uint64_t a18, uint64_t a19, unsigned __int8 a20)
{
  int v24;
  int *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t, uint64_t);
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int8 v49;
  char v50;
  char *v52;
  int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;

  v63 = a7;
  v56 = a1;
  v57 = a2;
  v62 = a20;
  v71 = a16;
  v69 = a8;
  v70 = a15;
  v68 = a13;
  v58 = a11;
  v59 = a12;
  v67 = a10;
  v24 = a4 & 1;
  v66 = a18;
  v60 = a17;
  v61 = a19;
  v25 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_3C5F98);
  __chkstk_darwin(v25);
  v27 = (char *)&v52 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v30 = (char *)&v52 - v29;
  *(_QWORD *)v30 = a1;
  v31 = v57;
  *((_QWORD *)v30 + 1) = v57;
  *((_QWORD *)v30 + 2) = a3;
  v55 = a3;
  v54 = v24;
  v30[24] = v24;
  v64 = a5;
  *((_QWORD *)v30 + 4) = a5;
  v65 = a6;
  v30[40] = a6;
  v33 = (char *)&v52 + *(int *)(v32 + 80) - v29;
  v34 = type metadata accessor for EpisodeListSettings(0);
  v35 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 16);
  v52 = v33;
  v35(v33, v63, v34);
  v36 = &v30[v25[24]];
  *(_QWORD *)v36 = v69;
  *((_QWORD *)v36 + 1) = a9;
  v63 = a9;
  v30[v25[28]] = v67;
  v37 = v58;
  v38 = v59;
  *(_QWORD *)v27 = v58;
  *((_QWORD *)v27 + 1) = v38;
  *((_QWORD *)v27 + 2) = v68;
  v53 = a14 & 1;
  v27[24] = v53;
  *((_QWORD *)v27 + 4) = v70;
  v27[40] = v71;
  v39 = (uint64_t)&v27[v25[20]];
  v35((char *)v39, v60, v34);
  v40 = v56;
  v41 = v61;
  v42 = &v27[v25[24]];
  *(_QWORD *)v42 = v66;
  *((_QWORD *)v42 + 1) = v41;
  v43 = v25[28];
  v44 = v62;
  v27[v43] = v62;
  if (v40 == v37 && v31 == v38 || (_stringCompareWithSmolCheck(_:_:expecting:)(v40, v31, v37, v38, 0) & 1) != 0)
  {
    swift_bridgeObjectRetain();
    v45 = v64;
    v46 = v65;
    sub_43568(v64, v65);
    v47 = v63;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v48 = v70;
    v49 = v71;
    sub_43568(v70, v71);
    swift_bridgeObjectRetain();
    v50 = sub_29ED20(v55, v54, v45, v46, (uint64_t)v52, v69, v47, v67 & 1, v68, v53, v48, v49, v39, v66, v41, v44 & 1);
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_43568(v64, v65);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_43568(v70, v71);
    swift_bridgeObjectRetain();
    v50 = 0;
  }
  sub_1459C((uint64_t)v27, &qword_3C5F98);
  sub_1459C((uint64_t)v30, &qword_3C5F98);
  return v50 & 1;
}

uint64_t sub_298310(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  unsigned int v9;
  int *v10;
  uint64_t v11;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_BYTE *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(unsigned __int8 *)(a1 + 40);
  v10 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_3C5F98);
  v11 = v10[24];
  return sub_297FF4(v4, v5, v6, v7, v8, v9, a1 + v10[20], *(_QWORD *)(a1 + v11), *(_QWORD *)(a1 + v11 + 8), *(_BYTE *)(a1 + v10[28]), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), *(_BYTE *)(a2 + 24), *(_QWORD *)(a2 + 32), *(_BYTE *)(a2 + 40), a2 + v10[20], *(_QWORD *)(a2 + v11), *(_QWORD *)(a2 + v11 + 8),
           *(_BYTE *)(a2 + v10[28])) & 1;
}

uint64_t sub_2983F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, unsigned __int8 a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  __n128 v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  void (*v45)(char *, uint64_t, uint64_t, __n128);
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;

  v46 = a7;
  v44 = a6;
  v40 = a1;
  v41 = a3;
  v51 = a9;
  v47 = a13;
  *(_QWORD *)&v48 = a8;
  v43 = a12;
  v42 = a11;
  v18 = type metadata accessor for EpisodeListSettings(0);
  v19 = *(_QWORD *)(v18 - 8);
  v49 = *(_QWORD *)(v19 + 64);
  __chkstk_darwin(v18);
  v50 = (char *)&v40 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = (int *)type metadata accessor for ShowEpisodesShelvesProvider.Info(0);
  v22 = __chkstk_darwin(v21);
  v24 = (char *)&v40 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = &v24[*(int *)(v25 + 28)];
  v45 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v19 + 16);
  v45(v26, a7, v18, v22);
  sub_150C8(a14, (uint64_t)&v24[v21[12]]);
  *(_QWORD *)v24 = v40;
  *((_QWORD *)v24 + 1) = a2;
  *((_QWORD *)v24 + 2) = v41;
  v24[24] = a4 & 1;
  *((_QWORD *)v24 + 4) = a5;
  v27 = a5;
  LOBYTE(a5) = v44;
  v24[40] = v44;
  v28 = &v24[v21[8]];
  v29 = v47;
  *(_QWORD *)v28 = v48;
  *((_QWORD *)v28 + 1) = a10;
  v24[v21[9]] = v42;
  *(_QWORD *)&v24[v21[10]] = v43;
  *(_QWORD *)&v24[v21[11]] = v29;
  v30 = v21[13];
  v48 = *(_OWORD *)(a14 + 40);
  *(_OWORD *)&v24[v30] = v48;
  swift_bridgeObjectRetain();
  sub_43568(v27, a5);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain(v48);
  v31 = sub_298760();
  sub_145D8((uint64_t)v24, type metadata accessor for ShowEpisodesShelvesProvider.Info);
  v52 = v31;
  v32 = v50;
  ((void (*)(char *, uint64_t, uint64_t))v45)(v50, v46, v18);
  v33 = *(unsigned __int8 *)(v19 + 80);
  v34 = (v33 + 16) & ~v33;
  v35 = swift_allocObject(&unk_38E288, v34 + v49, v33 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v19 + 32))(v35 + v34, v32, v18);
  v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2970);
  v37 = type metadata accessor for ShowEpisodesShelvesProvider.Result(0);
  v38 = sub_32914(&qword_3B2978, &qword_3B2970, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.map<A>(_:)(sub_299DC0, v35, v36, v37, v38);
  swift_release(v35);
  return swift_release(v52);
}

uint64_t sub_298690(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  v4 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 24) = v4;
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a2, a1);
  v5 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 40) = v5;
  swift_unknownObjectRetain(v5);
  return a2;
}

uint64_t sub_2986E4()
{
  uint64_t v0;

  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((_QWORD *)(v0 + 32));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 72));
  return swift_deallocObject(v0, 88, 7);
}

uint64_t sub_298720@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, unsigned __int8 a11)
{
  uint64_t v11;

  return sub_2983F8(a1, a2, a3, a4 & 1, a5, a6, a7, a8, a9, a10, a11, *(_QWORD *)(v11 + 16), *(_QWORD *)(v11 + 24), v11 + 32);
}

uint64_t sub_298760()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t ObjectType;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C6118);
  v62 = *(_QWORD *)(v1 - 8);
  v63 = v1;
  __chkstk_darwin(v1);
  v61 = (char *)&v61 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for ShowEpisodesShelvesProvider.Info(0);
  v71 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v72 = v4;
  v74 = (uint64_t)&v61 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C6120);
  v66 = *(_QWORD *)(v5 - 8);
  v67 = v5;
  __chkstk_darwin(v5);
  v64 = (char *)&v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C6128);
  v69 = *(_QWORD *)(v7 - 8);
  v70 = v7;
  __chkstk_darwin(v7);
  v68 = (char *)&v61 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for EpisodeListSettings(0);
  v75 = *(_QWORD *)(v9 - 8);
  v76 = v9;
  __chkstk_darwin(v9);
  v65 = (char *)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C6130);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v61 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = v0 + *(int *)(v3 + 52);
  v16 = *(_QWORD *)(v15 + 8);
  ObjectType = swift_getObjectType();
  v18 = *(int *)(v3 + 28);
  v73 = v0;
  v19 = v0 + v18;
  v20 = LibraryDataProviderProtocol.episodeListPublisher(settings:pageSize:)(v0 + v18, 12, ObjectType, v16);
  v78 = v20;
  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3730);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C6138);
  v23 = sub_32914(&qword_3B3738, &qword_3B3730, (uint64_t)&protocol conformance descriptor for AnyPaginatedPublisher<A, B>);
  Publisher.map<A>(_:)(sub_299E0C, 0, v21, v22, v23);
  swift_release(v20);
  v24 = sub_32914(&qword_3C6140, &qword_3C6130, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v25 = Publisher.eraseToAnyPublisher()(v11, v24);
  v26 = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  if ((EpisodeListSettings.hidePlayedEpisodes.getter(v26) & 1) != 0)
  {
    v27 = v65;
    (*(void (**)(char *, uint64_t, uint64_t))(v75 + 16))(v65, v19, v76);
    v28 = v27;
    EpisodeListSettings.hidePlayedEpisodes.setter(0);
    v29 = *(_QWORD *)(v15 + 8);
    v30 = swift_getObjectType();
    v31 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v29 + 344))(v27, v30, v29);
    v77 = v31;
    v78 = v25;
    v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C6148);
    v33 = v25;
    v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3628);
    v35 = sub_32914(&qword_3C6150, &qword_3C6148, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
    v36 = sub_32914(&qword_3B3638, &qword_3B3628, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
    v37 = v64;
    Publisher.combineLatest<A>(_:)(&v77, v32, v34, v35, v36);
    v38 = v74;
    sub_14510(v73, v74, type metadata accessor for ShowEpisodesShelvesProvider.Info);
    v39 = *(unsigned __int8 *)(v71 + 80);
    v40 = (v39 + 16) & ~v39;
    v41 = swift_allocObject(&unk_38E2D8, v40 + v72, v39 | 7);
    sub_3C56C(v38, v41 + v40, type metadata accessor for ShowEpisodesShelvesProvider.Info);
    v42 = swift_allocObject(&unk_38E300, 32, 7);
    *(_QWORD *)(v42 + 16) = sub_29A520;
    *(_QWORD *)(v42 + 24) = v41;
    v43 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3BF7B0);
    v44 = sub_32914(&qword_3C6160, &qword_3C6120, (uint64_t)&protocol conformance descriptor for Publishers.CombineLatest<A, B>);
    v45 = v67;
    v46 = v68;
    Publisher.map<A>(_:)(sub_29A5B0, v42, v67, v43, v44);
    swift_release(v42);
    (*(void (**)(char *, uint64_t))(v66 + 8))(v37, v45);
    v47 = sub_32914(&qword_3C6168, &qword_3C6128, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
    v48 = v70;
    v49 = Publisher.eraseToAnyPublisher()(v70, v47);
    swift_release(v33);
    swift_release(v31);
    (*(void (**)(char *, uint64_t))(v69 + 8))(v46, v48);
    (*(void (**)(char *, uint64_t))(v75 + 8))(v28, v76);
  }
  else
  {
    v78 = v25;
    v50 = v74;
    sub_14510(v73, v74, type metadata accessor for ShowEpisodesShelvesProvider.Info);
    v51 = *(unsigned __int8 *)(v71 + 80);
    v52 = (v51 + 16) & ~v51;
    v53 = swift_allocObject(&unk_38E2B0, v52 + v72, v51 | 7);
    sub_3C56C(v50, v53 + v52, type metadata accessor for ShowEpisodesShelvesProvider.Info);
    v54 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C6148);
    v55 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3BF7B0);
    v56 = sub_32914(&qword_3C6150, &qword_3C6148, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
    v57 = v61;
    Publisher.map<A>(_:)(sub_299EAC, v53, v54, v55, v56);
    swift_release(v53);
    v58 = sub_32914(&qword_3C6158, &qword_3C6118, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
    v59 = v63;
    v49 = Publisher.eraseToAnyPublisher()(v63, v58);
    swift_release(v25);
    (*(void (**)(char *, uint64_t))(v62 + 8))(v57, v59);
  }
  return v49;
}

uint64_t sub_298D48@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;

  v5 = *a1;
  v6 = (char *)a3 + *(int *)(type metadata accessor for ShowEpisodesShelvesProvider.Result(0) + 20);
  v7 = type metadata accessor for EpisodeListSettings(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v6, a2, v7);
  *a3 = v5;
  return swift_bridgeObjectRetain();
}

uint64_t sub_298DAC(uint64_t *a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, _QWORD, _QWORD, char))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  char v12;

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v7 = *((unsigned __int8 *)a1 + 24);
  v8 = a1[4];
  v9 = *((unsigned __int8 *)a1 + 40);
  v10 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_3C5F98);
  v12 = *((_BYTE *)a1 + v10[28]);
  return a2(v4, v5, v6, v7, v8, v9, (char *)a1 + v10[20], *(uint64_t *)((char *)a1 + v10[24]), *(uint64_t *)((char *)a1 + v10[24] + 8), v12);
}

uint64_t sub_298E60(uint64_t *a1)
{
  uint64_t v1;

  return sub_298DAC(a1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, _QWORD, _QWORD, char))(v1 + 16));
}

uint64_t destroy for ShowEpisodesShelvesProvider(_QWORD *a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  return swift_unknownObjectRelease(a1[5]);
}

uint64_t initializeWithCopy for ShowEpisodesShelvesProvider(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 40) = v5;
  swift_unknownObjectRetain(v5);
  return a1;
}

_QWORD *assignWithCopy for ShowEpisodesShelvesProvider(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  __swift_assign_boxed_opaque_existential_1(a1, a2);
  v4 = a2[5];
  v5 = a2[6];
  v6 = a1[5];
  a1[5] = v4;
  swift_unknownObjectRetain(v4);
  swift_unknownObjectRelease(v6);
  a1[6] = v5;
  return a1;
}

uint64_t assignWithTake for ShowEpisodesShelvesProvider(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  __swift_destroy_boxed_opaque_existential_1((_QWORD *)a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a2 + 48);
  v8 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = v6;
  swift_unknownObjectRelease(v8);
  *(_QWORD *)(a1 + 48) = v7;
  return a1;
}

ValueMetadata *type metadata accessor for ShowEpisodesShelvesProvider()
{
  return &type metadata for ShowEpisodesShelvesProvider;
}

uint64_t *initializeBufferWithCopyOfBuffer for ShowEpisodesShelvesProvider.Result(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain(v4);
  }
  else
  {
    v5 = a1;
    v6 = *(int *)(a3 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for EpisodeListSettings(0);
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain(v4);
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t destroy for ShowEpisodesShelvesProvider.Result(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*a1);
  v4 = (char *)a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for EpisodeListSettings(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t *initializeWithCopy for ShowEpisodesShelvesProvider.Result(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);

  v4 = *a2;
  *a1 = *a2;
  v5 = *(int *)(a3 + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for EpisodeListSettings(0);
  v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain(v4);
  v9(v6, v7, v8);
  return a1;
}

uint64_t *assignWithCopy for ShowEpisodesShelvesProvider.Result(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for EpisodeListSettings(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  return a1;
}

_QWORD *initializeWithTake for ShowEpisodesShelvesProvider.Result(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for EpisodeListSettings(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t *assignWithTake for ShowEpisodesShelvesProvider.Result(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for EpisodeListSettings(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for ShowEpisodesShelvesProvider.Result(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_299214);
}

uint64_t sub_299214(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for EpisodeListSettings(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for ShowEpisodesShelvesProvider.Result(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_29929C);
}

char *sub_29929C(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for EpisodeListSettings(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for ShowEpisodesShelvesProvider.Result(uint64_t a1)
{
  return sub_1F9D4(a1, qword_3C6030, (uint64_t)&nominal type descriptor for ShowEpisodesShelvesProvider.Result);
}

uint64_t sub_299324(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  result = type metadata accessor for EpisodeListSettings(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_29939C(uint64_t a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  __int128 v27;
  uint64_t v28;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v28 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v28 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
    v8 = a2[4];
    v9 = *((_BYTE *)a2 + 40);
    swift_bridgeObjectRetain();
    sub_43568(v8, v9);
    *(_QWORD *)(a1 + 32) = v8;
    *(_BYTE *)(a1 + 40) = v9;
    v10 = a3[7];
    v11 = a1 + v10;
    v12 = (uint64_t)a2 + v10;
    v13 = type metadata accessor for EpisodeListSettings(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
    v14 = a3[8];
    v15 = a3[9];
    v16 = (_QWORD *)(a1 + v14);
    v17 = (uint64_t *)((char *)a2 + v14);
    v18 = v17[1];
    *v16 = *v17;
    v16[1] = v18;
    *(_BYTE *)(a1 + v15) = *((_BYTE *)a2 + v15);
    v19 = a3[11];
    *(_QWORD *)(a1 + a3[10]) = *(uint64_t *)((char *)a2 + a3[10]);
    *(_QWORD *)(a1 + v19) = *(uint64_t *)((char *)a2 + v19);
    v20 = a3[12];
    v21 = a1 + v20;
    v22 = (uint64_t)a2 + v20;
    v23 = *(_OWORD *)((char *)a2 + v20 + 24);
    *(_OWORD *)(a1 + v20 + 24) = v23;
    v24 = v23;
    v25 = **(void (***)(uint64_t, uint64_t, uint64_t))(v23 - 8);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    v25(v21, v22, v24);
    v26 = a3[13];
    v27 = *(_OWORD *)((char *)a2 + v26);
    *(_OWORD *)(a1 + v26) = v27;
    swift_unknownObjectRetain(v27);
  }
  return a1;
}

uint64_t sub_2994FC(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  sub_4357C(*(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  v4 = a1 + a2[7];
  v5 = type metadata accessor for EpisodeListSettings(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((_QWORD *)(a1 + a2[12]));
  return swift_unknownObjectRelease(*(_QWORD *)(a1 + a2[13]));
}

uint64_t sub_299598(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  __int128 v26;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_BYTE *)(a2 + 40);
  swift_bridgeObjectRetain();
  sub_43568(v7, v8);
  *(_QWORD *)(a1 + 32) = v7;
  *(_BYTE *)(a1 + 40) = v8;
  v9 = a3[7];
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = type metadata accessor for EpisodeListSettings(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
  v13 = a3[8];
  v14 = a3[9];
  v15 = (_QWORD *)(a1 + v13);
  v16 = (_QWORD *)(a2 + v13);
  v17 = v16[1];
  *v15 = *v16;
  v15[1] = v17;
  *(_BYTE *)(a1 + v14) = *(_BYTE *)(a2 + v14);
  v18 = a3[11];
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  *(_QWORD *)(a1 + v18) = *(_QWORD *)(a2 + v18);
  v19 = a3[12];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = *(_OWORD *)(a2 + v19 + 24);
  *(_OWORD *)(a1 + v19 + 24) = v22;
  v23 = v22;
  v24 = **(void (***)(uint64_t, uint64_t, uint64_t))(v22 - 8);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  v24(v20, v21, v23);
  v25 = a3[13];
  v26 = *(_OWORD *)(a2 + v25);
  *(_OWORD *)(a1 + v25) = v26;
  swift_unknownObjectRetain(v26);
  return a1;
}

uint64_t sub_2996CC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v6;
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_BYTE *)(a2 + 40);
  sub_43568(v7, v8);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v7;
  v10 = *(_BYTE *)(a1 + 40);
  *(_BYTE *)(a1 + 40) = v8;
  sub_4357C(v9, v10);
  v11 = a3[7];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for EpisodeListSettings(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = a3[8];
  v16 = (_QWORD *)(a1 + v15);
  v17 = (_QWORD *)(a2 + v15);
  *v16 = *v17;
  v16[1] = v17[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  swift_retain();
  swift_release();
  __swift_assign_boxed_opaque_existential_1((_QWORD *)(a1 + a3[12]), (_QWORD *)(a2 + a3[12]));
  v18 = a3[13];
  v19 = (uint64_t *)(a1 + v18);
  v20 = (uint64_t *)(a2 + v18);
  v21 = *v20;
  v22 = v20[1];
  v23 = *v19;
  *v19 = *v20;
  swift_unknownObjectRetain(v21);
  swift_unknownObjectRelease(v23);
  v19[1] = v22;
  return a1;
}

uint64_t sub_299830(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v6 = a3[7];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for EpisodeListSettings(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[9];
  *(_OWORD *)(a1 + a3[8]) = *(_OWORD *)(a2 + a3[8]);
  *(_BYTE *)(a1 + v10) = *(_BYTE *)(a2 + v10);
  v11 = a3[11];
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  *(_QWORD *)(a1 + v11) = *(_QWORD *)(a2 + v11);
  v12 = a3[12];
  v13 = a3[13];
  v14 = a1 + v12;
  v15 = a2 + v12;
  v16 = *(_OWORD *)(v15 + 16);
  *(_OWORD *)v14 = *(_OWORD *)v15;
  *(_OWORD *)(v14 + 16) = v16;
  *(_QWORD *)(v14 + 32) = *(_QWORD *)(v15 + 32);
  *(_OWORD *)(a1 + v13) = *(_OWORD *)(a2 + v13);
  return a1;
}

uint64_t sub_299908(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 40);
  v8 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v9 = *(_BYTE *)(a1 + 40);
  *(_BYTE *)(a1 + 40) = v7;
  sub_4357C(v8, v9);
  v10 = a3[7];
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = type metadata accessor for EpisodeListSettings(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v11, v12, v13);
  v14 = a3[8];
  v15 = (_QWORD *)(a1 + v14);
  v16 = (uint64_t *)(a2 + v14);
  v18 = *v16;
  v17 = v16[1];
  *v15 = v18;
  v15[1] = v17;
  swift_bridgeObjectRelease();
  v19 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_QWORD *)(a1 + v19) = *(_QWORD *)(a2 + v19);
  swift_release();
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  swift_release();
  v20 = a3[12];
  v21 = a1 + v20;
  v22 = a2 + v20;
  __swift_destroy_boxed_opaque_existential_1((_QWORD *)(a1 + v20));
  v23 = *(_OWORD *)(v22 + 16);
  *(_OWORD *)v21 = *(_OWORD *)v22;
  *(_OWORD *)(v21 + 16) = v23;
  *(_QWORD *)(v21 + 32) = *(_QWORD *)(v22 + 32);
  v24 = a3[13];
  v25 = (uint64_t *)(a1 + v24);
  v26 = (uint64_t *)(a2 + v24);
  v27 = v26[1];
  v28 = *v25;
  *v25 = *v26;
  swift_unknownObjectRelease(v28);
  v25[1] = v27;
  return a1;
}

uint64_t sub_299A38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_299A44);
}

uint64_t sub_299A44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for EpisodeListSettings(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t sub_299AC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_299ACC);
}

uint64_t sub_299ACC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for EpisodeListSettings(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for ShowEpisodesShelvesProvider.Info(uint64_t a1)
{
  return sub_1F9D4(a1, qword_3C60C0, (uint64_t)&nominal type descriptor for ShowEpisodesShelvesProvider.Info);
}

uint64_t sub_299B54(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[10];

  v4[0] = &unk_304098;
  v4[1] = &unk_3040B0;
  v4[2] = &unk_3040C8;
  result = type metadata accessor for EpisodeListSettings(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    v4[4] = &unk_304098;
    v4[5] = &unk_3040E0;
    v4[6] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[7] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[8] = &unk_3040F8;
    v4[9] = &unk_304098;
    swift_initStructMetadata(a1, 256, 10, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ShowEpisodesShelvesProvider.Info.DropDownOptionsInfo(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF0)
    goto LABEL_17;
  if (a2 + 16 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 16) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 16;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 16;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 16;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x11;
  v8 = v6 - 17;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ShowEpisodesShelvesProvider.Info.DropDownOptionsInfo(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 16 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 16) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF0)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEF)
    return ((uint64_t (*)(void))((char *)&loc_299CE0 + 4 * byte_304005[v4]))();
  *a1 = a2 + 16;
  return ((uint64_t (*)(void))((char *)sub_299D14 + 4 * byte_304000[v4]))();
}

uint64_t sub_299D14(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_299D1C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x299D24);
  return result;
}

uint64_t sub_299D30(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x299D38);
  *(_BYTE *)result = a2 + 16;
  return result;
}

uint64_t sub_299D3C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_299D44(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ShowEpisodesShelvesProvider.Info.DropDownOptionsInfo()
{
  return &type metadata for ShowEpisodesShelvesProvider.Info.DropDownOptionsInfo;
}

uint64_t sub_299D60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for EpisodeListSettings(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_299DC0@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for EpisodeListSettings(0) - 8) + 80);
  return sub_298D48(a1, v2 + ((v5 + 16) & ~v5), a2);
}

uint64_t sub_299E0C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3BF7F0);
  FRPOutput.content.getter(v2);
  result = FRPOutput.totalCount.getter(v2);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_299E58@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = swift_bridgeObjectRetain();
  v5 = sub_299EF8(v4, v3, v3);
  result = swift_bridgeObjectRelease();
  *a2 = v5;
  return result;
}

uint64_t sub_299EAC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  type metadata accessor for ShowEpisodesShelvesProvider.Info(0);
  return sub_299E58(a1, a2);
}

uint64_t sub_299EF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::Int v16;
  Swift::Int v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  Swift::String *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C6170);
  __chkstk_darwin(v6);
  v8 = (char *)&v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C6178);
  __chkstk_darwin(v9);
  v11 = (char *)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = a1;
  v68 = v8;
  v69 = a2;
  v66 = v12;
  if (a3 < 13)
  {
    swift_bridgeObjectRetain();
    v21 = a1;
    goto LABEL_25;
  }
  v13 = v9;
  v14 = (unint64_t)a1 >> 62;
  if (!((unint64_t)a1 >> 62))
  {
    if (*(uint64_t *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8)) >= 8)
      v15 = 8;
    else
      v15 = *(_QWORD *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8));
    swift_bridgeObjectRetain();
    if ((a1 & 0xC000000000000001) == 0)
      goto LABEL_10;
    goto LABEL_7;
  }
  if (a1 < 0)
    v18 = a1;
  else
    v18 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  v20 = _CocoaArrayWrapper.endIndex.getter(v18);
  swift_bridgeObjectRetain();
  v19 = _CocoaArrayWrapper.endIndex.getter(v18);
  v31 = swift_bridgeObjectRelease();
  if (v19 < 0)
  {
    __break(1u);
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  if (v20 >= 8)
    v61 = 8;
  else
    v61 = v20;
  if (v20 >= 0)
    v15 = v61;
  else
    v15 = 8;
  swift_bridgeObjectRetain();
  v62 = _CocoaArrayWrapper.endIndex.getter(v18);
  swift_bridgeObjectRelease();
  if (v62 < v15)
    __break(1u);
  a1 = v67;
  if ((v67 & 0xC000000000000001) != 0)
  {
LABEL_7:
    if (v15)
    {
      type metadata accessor for LibraryEpisodeLockup(0);
      v16 = 0;
      do
      {
        v17 = v16 + 1;
        _ArrayBuffer._typeCheckSlowPath(_:)(v16);
        v16 = v17;
      }
      while (v15 != v17);
    }
  }
LABEL_10:
  if (v14)
  {
    if (a1 < 0)
      v22 = a1;
    else
      v22 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v14 = _CocoaArrayWrapper.subscript.getter(0, v15, v22);
    v23 = a1;
    v19 = v24;
    v18 = v25;
    v20 = v26;
    swift_bridgeObjectRelease_n(v23, 2);
    if ((v20 & 1) == 0)
      goto LABEL_18;
  }
  else
  {
    v18 = 0;
    v14 = a1 & 0xFFFFFFFFFFFFFF8;
    v19 = (a1 & 0xFFFFFFFFFFFFFF8) + 32;
    v20 = (2 * v15) | 1;
    if ((v20 & 1) == 0)
    {
LABEL_18:
      v21 = (uint64_t)sub_1FBF74(v14, v19, v18, v20);
      swift_unknownObjectRelease(v14);
      v9 = v13;
      goto LABEL_25;
    }
  }
  v27 = type metadata accessor for __ContiguousArrayStorageBase(0);
  v28 = swift_unknownObjectRetain_n(v14, 2);
  v29 = (_QWORD *)swift_dynamicCastClass(v28, v27);
  if (!v29)
  {
    swift_unknownObjectRelease(v14);
    v29 = _swiftEmptyArrayStorage;
  }
  v30 = v29[2];
  v31 = swift_release(v29);
  if (__OFSUB__((unint64_t)v20 >> 1, v18))
    goto LABEL_39;
  v31 = v14;
  if (v30 != ((unint64_t)v20 >> 1) - v18)
  {
LABEL_40:
    swift_unknownObjectRelease(v31);
    a2 = v69;
    goto LABEL_18;
  }
  v21 = swift_dynamicCastClass(v14, v27);
  swift_unknownObjectRelease(v14);
  a2 = v69;
  v9 = v13;
  if (!v21)
  {
    swift_unknownObjectRelease(v14);
    v21 = (uint64_t)_swiftEmptyArrayStorage;
  }
LABEL_25:
  v32 = v9;
  v33 = (uint64_t *)&v11[*(int *)(v9 + 48)];
  v65 = v11;
  v34 = sub_29A5E4((uint64_t)v11, a2);
  v36 = v35;
  *v33 = v34;
  v33[1] = v35;
  if ((unint64_t)v21 >> 62)
  {
    if (v21 < 0)
      v52 = v21;
    else
      v52 = v21 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v53 = _CocoaArrayWrapper.endIndex.getter(v52);
    swift_bridgeObjectRelease();
    if (v53)
      goto LABEL_27;
LABEL_32:
    swift_bridgeObjectRelease();
    v54 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0A48);
    v55 = *(_QWORD *)(type metadata accessor for ModernShelf(0) - 8);
    v56 = *(_QWORD *)(v55 + 72);
    v57 = *(unsigned __int8 *)(v55 + 80);
    v58 = (v57 + 32) & ~v57;
    v43 = swift_allocObject(v54, v58 + v56, v57 | 7);
    *(_OWORD *)(v43 + 16) = xmmword_2EA0D0;
    v51 = v43 + v58;
    v46 = (uint64_t)v68;
    v59 = (uint64_t *)&v68[*(int *)(v32 + 48)];
    v48 = (uint64_t)v65;
    sub_267BC((uint64_t)v65, (uint64_t)v68, &qword_3B0C38);
    *v59 = v34;
    v59[1] = v36;
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v66 + 56))(v46, 0, 1, v32);
    goto LABEL_33;
  }
  v37 = *(_QWORD *)((char *)&dword_10 + (v21 & 0xFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain();
  if (!v37)
    goto LABEL_32;
LABEL_27:
  v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0A48);
  v39 = *(_QWORD *)(type metadata accessor for ModernShelf(0) - 8);
  v40 = *(_QWORD *)(v39 + 72);
  v41 = *(unsigned __int8 *)(v39 + 80);
  v42 = (v41 + 32) & ~v41;
  v43 = swift_allocObject(v38, v42 + 2 * v40, v41 | 7);
  *(_OWORD *)(v43 + 16) = xmmword_2EA080;
  v44 = (Swift::String *)(v43 + v42);
  v45 = *(int *)(v32 + 48);
  v64 = a3;
  v46 = (uint64_t)v68;
  v47 = (uint64_t *)&v68[v45];
  v48 = (uint64_t)v65;
  sub_267BC((uint64_t)v65, (uint64_t)v68, &qword_3B0C38);
  *v47 = v34;
  v47[1] = v36;
  v49 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v66 + 56);
  v49(v46, 0, 1, v32);
  v50 = sub_2452E8(v21);
  swift_bridgeObjectRelease();
  sub_29AFC8(v46, v50, v44);
  swift_bridgeObjectRelease();
  sub_1459C(v46, &qword_3C6170);
  v51 = (uint64_t)v44 + v40;
  v49(v46, 1, 1, v32);
  a3 = v64;
LABEL_33:
  sub_29A8A8(v46, v67, v69, a3, v51);
  sub_1459C(v46, &qword_3C6170);
  sub_1459C(v48, &qword_3C6178);
  return v43;
}

uint64_t objectdestroy_10Tm()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = (int *)type metadata accessor for ShowEpisodesShelvesProvider.Info(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = v0 + v4;
  swift_bridgeObjectRelease();
  sub_4357C(*(_QWORD *)(v7 + 32), *(_BYTE *)(v7 + 40));
  v8 = v7 + v1[7];
  v9 = type metadata accessor for EpisodeListSettings(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((_QWORD *)(v7 + v1[12]));
  swift_unknownObjectRelease(*(_QWORD *)(v7 + v1[13]));
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_29A520(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  type metadata accessor for ShowEpisodesShelvesProvider.Info(0);
  v5 = swift_bridgeObjectRetain();
  v6 = sub_299EF8(v5, a3, a2);
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_29A58C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_29A5B0@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v2 + 16))(*a1, a1[1], a1[2]);
  *a2 = result;
  return result;
}

uint64_t sub_29A5E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  void *v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;

  v29 = a1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
  __chkstk_darwin(v4);
  v28 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3740);
  __chkstk_darwin(v6);
  v8 = (uint64_t *)((char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3BF7E0);
  __chkstk_darwin(v9);
  v11 = (unint64_t *)((char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a2)
  {
    v12 = *(_QWORD *)(v2 + 32);
    v13 = *(unsigned __int8 *)(v2 + 40);
    sub_43568(v12, *(_BYTE *)(v2 + 40));
  }
  else
  {
    v12 = 0;
    v13 = 2;
  }
  v27 = sub_29B560(v12, v13);
  v30 = 0;
  v31 = 0xE000000000000000;
  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease();
  v30 = 0x7365646F73697045;
  v31 = 0xE90000000000003ALL;
  v14 = (uint64_t *)(v2 + *(int *)(type metadata accessor for ShowEpisodesShelvesProvider.Info(0) + 32));
  v15 = *v14;
  v16 = (void *)v14[1];
  swift_bridgeObjectRetain();
  v17._countAndFlagsBits = v15;
  v17._object = v16;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18._countAndFlagsBits = 0x3A6C6C416565732BLL;
  v18._object = (void *)0xE800000000000000;
  String.append(_:)(v18);
  v19._countAndFlagsBits = EpisodeUserFilter.title.getter(v12, v13);
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20 = v30;
  swift_bridgeObjectRetain();
  sub_29B954(v11);
  v21 = type metadata accessor for ActionMenu(0);
  (*(void (**)(unint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v11, 0, 1, v21);
  *v8 = v27;
  v22 = type metadata accessor for Header.PrimaryAction(0);
  swift_storeEnumTagMultiPayload(v8, v22, 0);
  (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v8, 0, 1, v22);
  v23 = type metadata accessor for ArtworkModel(0);
  v24 = (uint64_t)v28;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v28, 1, 1, v23);
  Header.init(title:subtitle:subtitleSymbolName:displaySubtitleAsEyebrow:hasColoredBackground:titleContextMenu:primaryAction:secondaryButtons:artwork:)(v15, (uint64_t)v16, 0, 0, 0, 0, 0, 0, v29, (uint64_t)v11, (uint64_t)v8, (uint64_t)_swiftEmptyArrayStorage, v24);
  sub_4357C(v12, v13);
  return v20;
}

uint64_t sub_29A8A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;
  Swift::String v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t countAndFlagsBits;
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;

  v65 = a4;
  countAndFlagsBits = a3;
  v71 = a1;
  v67 = a5;
  v6 = (int *)type metadata accessor for ModernShelf(0);
  __chkstk_darwin(v6);
  v8 = (uint64_t *)((char *)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v9);
  v66 = (char *)&v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
  __chkstk_darwin(v11);
  v70 = (uint64_t)&v60 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0C38);
  __chkstk_darwin(v13);
  v61 = (uint64_t *)((char *)&v60 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v15);
  v68 = (uint64_t)&v60 - v16;
  v17 = &qword_3C6170;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C6170);
  __chkstk_darwin(v18);
  v64 = (char *)&v60 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v22 = (char *)&v60 - v21;
  __chkstk_darwin(v23);
  v25 = (char *)&v60 - v24;
  v26 = type metadata accessor for ShowEpisodesShelvesProvider.Info.Footer(0);
  __chkstk_darwin(v26);
  v28 = (char *)&v60 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  v31 = (char *)&v60 - v30;
  sub_29D180(a2, countAndFlagsBits, v65, (uint64_t *)((char *)&v60 - v30));
  v69 = v31;
  sub_14510((uint64_t)v31, (uint64_t)v28, type metadata accessor for ShowEpisodesShelvesProvider.Info.Footer);
  LODWORD(v26) = 0x110F0Eu >> (8 * swift_getEnumCaseMultiPayload(v28, v26));
  sub_145D8((uint64_t)v28, type metadata accessor for ShowEpisodesShelvesProvider.Info.Footer);
  ShelfIDBuilder.init(named:)(0x7365646F73697065, 0xEF7265746F6F662DLL);
  LODWORD(v65) = v26;
  v32 = ModernShelf.ItemKind.rawValue.getter(v26);
  ShelfIDBuilder.addingAttribute(_:named:)(v32);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_267BC(v71, (uint64_t)v25, &qword_3C6170);
  v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C6178);
  v34 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 48);
  if (v34(v25, 1, v33) == 1)
  {
    v35 = 0x6E776F6E6B6E75;
  }
  else
  {
    v35 = *(_QWORD *)&v25[*(int *)(v33 + 48)];
    v17 = &qword_3B0C38;
  }
  sub_1459C((uint64_t)v25, v17);
  ShelfIDBuilder.addingAttribute(_:named:)(v35);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v36 = ShelfIDBuilder.build()();
  countAndFlagsBits = v36._countAndFlagsBits;
  swift_bridgeObjectRelease();
  sub_267BC(v71, (uint64_t)v22, &qword_3C6170);
  if (v34(v22, 1, v33) == 1)
  {
    sub_1459C((uint64_t)v22, &qword_3C6170);
    v37 = type metadata accessor for Header(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v68, 1, 1, v37);
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_15BD4((uint64_t)v22, v68, &qword_3B0C38);
  }
  v38 = (uint64_t *)v64;
  v39 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8750);
  v40 = swift_allocObject(v39, 72, 7);
  *(_OWORD *)(v40 + 16) = xmmword_2EA0D0;
  sub_29CDB8((_QWORD *)(v40 + 32));
  v41 = type metadata accessor for URL(0);
  v64 = *(char **)(*(_QWORD *)(v41 - 8) + 56);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v64)(v70, 1, 1, v41);
  v74 = 0;
  v72 = 0u;
  v73 = 0u;
  v42 = swift_bridgeObjectRetain();
  v62 = static MetricsTargetType.swoosh.getter(v42);
  v44 = v43;
  sub_267BC(v71, (uint64_t)v38, &qword_3C6170);
  if (v34((char *)v38, 1, v33) == 1)
  {
    v45 = &qword_3C6170;
LABEL_11:
    sub_1459C((uint64_t)v38, v45);
    v48 = 0;
    v49 = 0;
    goto LABEL_13;
  }
  swift_bridgeObjectRelease();
  v46 = (uint64_t)v38;
  v38 = v61;
  sub_15BD4(v46, (uint64_t)v61, &qword_3B0C38);
  v47 = type metadata accessor for Header(0);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 48))(v38, 1, v47) == 1)
  {
    v45 = &qword_3B0C38;
    goto LABEL_11;
  }
  v48 = *v38;
  v49 = v38[1];
  swift_bridgeObjectRetain();
  sub_145D8((uint64_t)v38, type metadata accessor for Header);
LABEL_13:
  v59 = v48;
  v50 = (uint64_t)v66;
  v51 = countAndFlagsBits;
  static ImpressionMetrics.shelf(id:idType:uniqueID:impressionType:name:)(0x7365646F73697045, 0xEE007265746F6F46, 0, 0, countAndFlagsBits, v36._object, v62, v44, v59, v49);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v52 = type metadata accessor for ImpressionMetrics(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 56))(v50, 0, 1, v52);
  v53 = v6[8];
  *((_BYTE *)v8 + v53) = 3;
  v54 = (uint64_t)v8 + v6[9];
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v64)(v54, 1, 1, v41);
  *v8 = v51;
  v8[1] = (uint64_t)v36._object;
  sub_15BD4(v68, (uint64_t)v8 + v6[5], &qword_3B0C38);
  v55 = (char *)v8 + v6[6];
  *v55 = v65;
  v55[1] = 0;
  *((_WORD *)v55 + 3) = 256;
  *(_DWORD *)(v55 + 2) = 0;
  *((_QWORD *)v55 + 1) = 1;
  *(uint64_t *)((char *)v8 + v6[7]) = v40;
  sub_3C454(v70, v54, &qword_3B4370);
  *((_BYTE *)v8 + v6[10]) = 1;
  *((_BYTE *)v8 + v6[11]) = 0;
  v56 = (uint64_t)v8 + v6[12];
  if (*((_QWORD *)&v73 + 1))
  {
    sub_F4D8(&v72, v56);
  }
  else
  {
    v57 = (unint64_t)v73;
    *(_OWORD *)v56 = v72;
    *(_OWORD *)(v56 + 16) = v57;
    *(_QWORD *)(v56 + 32) = v74;
  }
  sub_15BD4(v50, (uint64_t)v8 + v6[13], (uint64_t *)&unk_3B8790);
  *((_BYTE *)v8 + v53) = 3;
  sub_3C56C((uint64_t)v8, v67, type metadata accessor for ModernShelf);
  return sub_145D8((uint64_t)v69, type metadata accessor for ShowEpisodesShelvesProvider.Info.Footer);
}

uint64_t sub_29AFC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, Swift::String *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unsigned int (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  Swift::String v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  __int128 v46;
  uint64_t result;
  uint64_t *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;

  v49 = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v5);
  v50 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
  __chkstk_darwin(v7);
  v53 = (uint64_t)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0C38);
  __chkstk_darwin(v9);
  v48 = (uint64_t *)((char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v11);
  v52 = (uint64_t)&v48 - v12;
  v13 = &qword_3C6170;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C6170);
  __chkstk_darwin(v14);
  v16 = (uint64_t *)((char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v17);
  v19 = (char *)&v48 - v18;
  __chkstk_darwin(v20);
  v22 = (char *)&v48 - v21;
  ShelfIDBuilder.init(named:)(0x7365646F73697065, 0xEF7265646165682DLL);
  v51 = a1;
  sub_267BC(a1, (uint64_t)v22, &qword_3C6170);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C6178);
  v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 48);
  if (v24(v22, 1, v23) == 1)
  {
    v25 = 0x6E776F6E6B6E75;
  }
  else
  {
    v25 = *(_QWORD *)&v22[*(int *)(v23 + 48)];
    v13 = &qword_3B0C38;
  }
  sub_1459C((uint64_t)v22, v13);
  ShelfIDBuilder.addingAttribute(_:named:)(v25);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v26 = ShelfIDBuilder.build()();
  swift_bridgeObjectRelease();
  sub_267BC(v51, (uint64_t)v19, &qword_3C6170);
  if (v24(v19, 1, v23) == 1)
  {
    sub_1459C((uint64_t)v19, &qword_3C6170);
    v27 = type metadata accessor for Header(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v52, 1, 1, v27);
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_15BD4((uint64_t)v19, v52, &qword_3B0C38);
  }
  v28 = type metadata accessor for URL(0);
  v29 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56);
  v29(v53, 1, 1, v28);
  v56 = 0;
  v54 = 0u;
  v55 = 0u;
  v30 = swift_bridgeObjectRetain();
  v31 = static MetricsTargetType.swoosh.getter(v30);
  v33 = v32;
  sub_267BC(v51, (uint64_t)v16, &qword_3C6170);
  if (v24((char *)v16, 1, v23) == 1)
  {
    v34 = &qword_3C6170;
LABEL_11:
    sub_1459C((uint64_t)v16, v34);
    v37 = 0;
    v38 = 0;
    goto LABEL_13;
  }
  swift_bridgeObjectRelease();
  v35 = (uint64_t)v16;
  v16 = v48;
  sub_15BD4(v35, (uint64_t)v48, &qword_3B0C38);
  v36 = type metadata accessor for Header(0);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 48))(v16, 1, v36) == 1)
  {
    v34 = &qword_3B0C38;
    goto LABEL_11;
  }
  v37 = *v16;
  v38 = v16[1];
  swift_bridgeObjectRetain();
  sub_145D8((uint64_t)v16, type metadata accessor for Header);
LABEL_13:
  v39 = (uint64_t)v50;
  static ImpressionMetrics.shelf(id:idType:uniqueID:impressionType:name:)(0x7365646F73697045, 0xEE00726564616548, 0, 0, v26._countAndFlagsBits, v26._object, v31, v33, v37, v38);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v40 = type metadata accessor for ImpressionMetrics(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v39, 0, 1, v40);
  v41 = (int *)type metadata accessor for ModernShelf(0);
  v42 = v41[8];
  *((_BYTE *)&a3->_countAndFlagsBits + v42) = 3;
  v43 = (uint64_t)a3 + v41[9];
  v29(v43, 1, 1, v28);
  *a3 = v26;
  sub_15BD4(v52, (uint64_t)a3 + v41[5], &qword_3B0C38);
  v44 = (char *)a3 + v41[6];
  *(_WORD *)v44 = 8;
  *((_WORD *)v44 + 3) = 256;
  *(_DWORD *)(v44 + 2) = 0;
  *((_QWORD *)v44 + 1) = 1;
  *(uint64_t *)((char *)&a3->_countAndFlagsBits + v41[7]) = v49;
  swift_bridgeObjectRetain();
  sub_3C454(v53, v43, &qword_3B4370);
  *((_BYTE *)&a3->_countAndFlagsBits + v41[10]) = 1;
  *((_BYTE *)&a3->_countAndFlagsBits + v41[11]) = 0;
  v45 = (uint64_t)a3 + v41[12];
  if (*((_QWORD *)&v55 + 1))
  {
    sub_F4D8(&v54, v45);
  }
  else
  {
    v46 = (unint64_t)v55;
    *(_OWORD *)v45 = v54;
    *(_OWORD *)(v45 + 16) = v46;
    *(_QWORD *)(v45 + 32) = v56;
  }
  result = sub_15BD4(v39, (uint64_t)a3 + v41[13], (uint64_t *)&unk_3B8790);
  *((_BYTE *)&a3->_countAndFlagsBits + v42) = 3;
  return result;
}

uint64_t sub_29B560(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  id v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  Swift::String v24;
  Swift::String v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *object;
  uint64_t countAndFlagsBits;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  _BYTE v57[17];
  Swift::String v58;

  v5 = type metadata accessor for ScalarDictionary(0);
  __chkstk_darwin(v5);
  v56 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for MetricsData.Configuration(0);
  v54 = *(_QWORD *)(v7 - 8);
  v55 = v7;
  __chkstk_darwin(v7);
  v52 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
  __chkstk_darwin(v9);
  v11 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for ActionMetrics(0);
  __chkstk_darwin(v12);
  v53 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for FlowDestination(0);
  __chkstk_darwin(v14);
  v16 = (char *)&v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v58._object = (void *)0xE000000000000000;
  v18._countAndFlagsBits = 0x535F4E4F49544341;
  v18._object = (void *)0xEE004C4C415F4545;
  v19._countAndFlagsBits = 0;
  v19._object = (void *)0xE000000000000000;
  v58._countAndFlagsBits = 0;
  v20 = NSLocalizedString(_:tableName:bundle:value:comment:)(v18, (Swift::String_optional)0, (NSBundle)v17, v19, v58);
  countAndFlagsBits = v20._countAndFlagsBits;

  v21 = *(_QWORD *)(v2 + 8);
  v22 = *(_QWORD *)(v2 + 16);
  v23 = *(_BYTE *)(v2 + 24);
  *(_QWORD *)v16 = *(_QWORD *)v2;
  *((_QWORD *)v16 + 1) = v21;
  *((_QWORD *)v16 + 2) = v22;
  v16[24] = v23;
  *((_QWORD *)v16 + 4) = a1;
  v16[40] = a2;
  swift_storeEnumTagMultiPayload(v16, v14, 7);
  *(Swift::String *)&v57[1] = v20;
  object = v20._object;
  swift_bridgeObjectRetain();
  sub_43568(a1, a2);
  swift_bridgeObjectRetain();
  v24._countAndFlagsBits = 43;
  v24._object = (void *)0xE100000000000000;
  String.append(_:)(v24);
  v25._countAndFlagsBits = EpisodeUserFilter.title.getter(a1, a2);
  String.append(_:)(v25);
  v26 = swift_bridgeObjectRelease();
  v48 = *(_QWORD *)&v57[9];
  v49 = *(_QWORD *)&v57[1];
  v47 = static MetricsTargetID.seeAll.getter(v26);
  v28 = v27;
  v29 = static MetricsTargetType.button.getter(v47, v27);
  v31 = v30;
  v32 = type metadata accessor for URL(0);
  v33 = (uint64_t)v11;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v11, 1, 1, v32);
  v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0930);
  v35 = type metadata accessor for MetricsData(0);
  v36 = swift_allocObject(v34, ((*(unsigned __int8 *)(*(_QWORD *)(v35 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v35 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v35 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v35 - 8) + 80) | 7);
  *(_OWORD *)(v36 + 16) = xmmword_2EA0D0;
  v37 = static MetricsActionType.navigate.getter();
  v39 = v38;
  v40 = v52;
  static MetricsData.Configuration.podcasts.getter(v37);
  static MetricsData.clickData(targetID:targetType:actionType:actionContext:actionResult:actionURL:fields:configuration:)(v47, v28, v29, v31, v37, v39, 0, 0, 0, 0, v11, &_swiftEmptyDictionarySingleton, v40);
  swift_bridgeObjectRelease();
  v41 = (*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v40, v55);
  v42 = v56;
  ScalarDictionary.init()(v41);
  v43 = (uint64_t)v53;
  ActionMetrics.init(data:custom:)(v36, v42);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1459C(v33, &qword_3B4370);
  *(_WORD *)v57 = 0;
  v44 = type metadata accessor for FlowAction(0);
  swift_allocObject(v44, *(unsigned int *)(v44 + 48), *(unsigned __int16 *)(v44 + 52));
  return FlowAction.init(_:id:title:presentationContext:animationBehavior:presentationStyle:destinationPageHeader:actionMetrics:)((uint64_t)v16, v49, v48, countAndFlagsBits, (uint64_t)object, &v57[1], 0, 48, v57, v43);
}

uint64_t sub_29B954@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  uint64_t v35[2];
  uint64_t v36;
  void (*v37)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  char *v39;

  v2 = v1;
  v4 = type metadata accessor for ShowEpisodesShelvesProvider.Info(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  v7 = (char *)v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
  __chkstk_darwin(v8);
  v10 = (char *)v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = v10;
  v11 = type metadata accessor for ArtworkModel(0);
  v37 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56);
  v38 = v11;
  v37(v10, 1, 1, v11);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0928);
  v13 = type metadata accessor for ActionMenu.Child(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = swift_allocObject(v12, v17 + 2 * v15, v16 | 7);
  v36 = v18;
  *(_OWORD *)(v18 + 16) = xmmword_2EA080;
  v19 = (unint64_t *)(v18 + v17);
  sub_14510(v2, (uint64_t)v7, type metadata accessor for ShowEpisodesShelvesProvider.Info);
  v20 = *(unsigned __int8 *)(v5 + 80);
  v21 = (v20 + 16) & ~v20;
  v22 = v21 + v6;
  v23 = v20 | 7;
  v24 = swift_allocObject(&unk_38E328, v22, v20 | 7);
  sub_3C56C((uint64_t)v7, v24 + v21, type metadata accessor for ShowEpisodesShelvesProvider.Info);
  *v19 = _s8ShelfKit10ActionMenuV2IDVAEycfC_0();
  v19[1] = v25;
  v19[2] = (unint64_t)sub_29F38C;
  v19[3] = v24;
  swift_storeEnumTagMultiPayload(v19, v13, 3);
  v26 = (unint64_t *)((char *)v19 + v15);
  sub_14510(v35[1], (uint64_t)v7, type metadata accessor for ShowEpisodesShelvesProvider.Info);
  v27 = swift_allocObject(&unk_38E350, v22, v23);
  sub_3C56C((uint64_t)v7, v27 + v21, type metadata accessor for ShowEpisodesShelvesProvider.Info);
  *v26 = _s8ShelfKit10ActionMenuV2IDVAEycfC_0();
  v26[1] = v28;
  v26[2] = (unint64_t)sub_29F518;
  v26[3] = v27;
  swift_storeEnumTagMultiPayload(v26, v13, 3);
  v29 = _s8ShelfKit10ActionMenuV2IDVAEycfC_0();
  v31 = v30;
  v32 = type metadata accessor for ActionMenu(0);
  v33 = (uint64_t)a1 + *(int *)(v32 + 28);
  v37((char *)v33, 1, 1, v38);
  *a1 = v29;
  a1[1] = v31;
  a1[2] = 0;
  a1[3] = 0xE000000000000000;
  a1[4] = 0;
  a1[5] = 0;
  result = sub_3C454((uint64_t)v39, v33, &qword_3BEB70);
  *(unint64_t *)((char *)a1 + *(int *)(v32 + 32)) = v36;
  return result;
}

_QWORD *sub_29BBCC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;

  v2 = swift_bridgeObjectRetain();
  v3 = sub_29F3C8(v2);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v3 + 16) < 6uLL)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    return _swiftEmptyArrayStorage;
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4)
    {
      swift_bridgeObjectRetain();
      v5 = (char *)(a1 + 40);
      do
      {
        v6 = *((_QWORD *)v5 - 1);
        v7 = *v5;
        sub_43568(v6, *v5);
        if ((EpisodeUserFilter.isSeasonal.getter(v6, v7) & 1) != 0)
        {
          sub_4357C(v6, v7);
        }
        else
        {
          if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
            sub_180A4C(0, _swiftEmptyArrayStorage[2] + 1, 1);
          v9 = _swiftEmptyArrayStorage[2];
          v8 = _swiftEmptyArrayStorage[3];
          if (v9 >= v8 >> 1)
            sub_180A4C(v8 > 1, v9 + 1, 1);
          _swiftEmptyArrayStorage[2] = v9 + 1;
          v10 = &_swiftEmptyArrayStorage[2 * v9];
          v10[4] = v6;
          *((_BYTE *)v10 + 40) = v7;
        }
        v5 += 16;
        --v4;
      }
      while (v4);
      swift_bridgeObjectRelease();
    }
  }
  return (_QWORD *)v3;
}

uint64_t sub_29BD3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t *v5;
  uint64_t *v6;
  int *v10;
  uint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53[2];
  _QWORD v54[5];

  v6 = v5;
  v50 = a3;
  v52 = a5;
  v10 = (int *)type metadata accessor for ActionMenu.Item(0);
  __chkstk_darwin(v10);
  v12 = (unint64_t *)((char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = type metadata accessor for ActionMetrics(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
  __chkstk_darwin(v16);
  v51 = (uint64_t)&v47 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v18);
  v21 = (char *)&v47 - v20;
  v22 = EpisodeUserFilter.symbolName.getter(a1, a2, v19);
  if (v23)
  {
    v24 = v22;
    v25 = v23;
    swift_bridgeObjectRetain();
    ArtworkModel.init(glyphName:accessibilityTitle:isCustomSymbol:isMulticolorSymbol:)(v24, v25, 0, 0, 0, 0);
    v26 = type metadata accessor for ArtworkModel(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v21, 0, 1, v26);
    swift_bridgeObjectRelease();
  }
  else
  {
    v26 = type metadata accessor for ArtworkModel(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v21, 1, 1, v26);
  }
  v27 = EpisodeUserFilter.title.getter(a1, a2);
  v48 = v28;
  v49 = v27;
  LODWORD(v50) = static EpisodeUserFilter.== infix(_:_:)(a1, a2, v50, a4);
  v29 = type metadata accessor for ShowEpisodesShelvesProvider.Info(0);
  sub_150C8((uint64_t)v6 + *(int *)(v29 + 48), (uint64_t)v54);
  v31 = *v6;
  v30 = v6[1];
  sub_150C8((uint64_t)v54, (uint64_t)v53);
  v32 = swift_allocObject(&unk_38E3A0, 81, 7);
  sub_F4D8(v53, v32 + 16);
  *(_QWORD *)(v32 + 56) = v31;
  *(_QWORD *)(v32 + 64) = v30;
  *(_QWORD *)(v32 + 72) = a1;
  *(_BYTE *)(v32 + 80) = a2;
  swift_bridgeObjectRetain();
  v33 = sub_43568(a1, a2);
  static ActionMetrics.notInstrumented.getter(v33);
  v34 = type metadata accessor for ClosureAction(0);
  swift_allocObject(v34, *(unsigned int *)(v34 + 48), *(unsigned __int16 *)(v34 + 52));
  v35 = sub_213C1C(0, 0, 32, (uint64_t)v15, (uint64_t)sub_29F678, v32);
  swift_release(v32);
  __swift_destroy_boxed_opaque_existential_1(v54);
  v54[3] = v34;
  v54[4] = sub_F1C0(&qword_3B2768, (void (*)(uint64_t))type metadata accessor for ClosureAction, (uint64_t)&protocol conformance descriptor for Action);
  v54[0] = v35;
  v36 = _s8ShelfKit10ActionMenuV2IDVAEycfC_0();
  v38 = v37;
  v39 = v51;
  sub_267BC((uint64_t)v21, v51, &qword_3BEB70);
  sub_267BC((uint64_t)v54, (uint64_t)v53, &qword_3B0C50);
  v40 = (uint64_t)v12 + v10[6];
  type metadata accessor for ArtworkModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v40, 1, 1, v26);
  v41 = v10[7];
  *((_BYTE *)v12 + v41) = 2;
  v42 = (uint64_t)v12 + v10[9];
  *(_QWORD *)(v42 + 32) = 0;
  *(_OWORD *)v42 = 0u;
  *(_OWORD *)(v42 + 16) = 0u;
  *v12 = v36;
  v12[1] = v38;
  v43 = v48;
  v12[2] = v49;
  v12[3] = v43;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_3C454(v39, v40, &qword_3BEB70);
  *((_BYTE *)v12 + v41) = 2;
  *((_BYTE *)v12 + v10[8]) = (v50 & 1) == 0;
  sub_3C454((uint64_t)v53, v42, &qword_3B0C50);
  v44 = v52;
  sub_3C56C((uint64_t)v12, v52, type metadata accessor for ActionMenu.Item);
  v45 = type metadata accessor for ActionMenu.Child(0);
  swift_storeEnumTagMultiPayload(v44, v45, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1459C((uint64_t)v21, &qword_3BEB70);
  return sub_1459C((uint64_t)v54, &qword_3B0C50);
}

uint64_t sub_29C14C@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  char v19;
  void *v20;
  void *v21;
  uint64_t v22;
  id v23;
  Swift::String v24;
  Swift::String v25;
  id v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  uint64_t v30;
  uint64_t (*v31)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v52;
  _QWORD *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t *v57;
  uint64_t v58;
  uint64_t result;
  void *object;
  uint64_t countAndFlagsBits;
  Swift::String v62;
  uint64_t v63;
  int v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t *v73;
  _QWORD *v74;
  Swift::String v75;
  Swift::String v76;

  v73 = a2;
  v4 = type metadata accessor for ActionMenu(0);
  __chkstk_darwin(v4);
  v6 = (unint64_t *)((char *)&object - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
  __chkstk_darwin(v7);
  v69 = (uint64_t)&object - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&object - v10;
  v70 = type metadata accessor for ActionMenu.Child(0);
  v12 = *(_QWORD *)(v70 - 8);
  __chkstk_darwin(v70);
  v71 = (uint64_t)&object - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(void **)(v2 + 32);
  v15 = *(unsigned __int8 *)(v2 + 40);
  v17 = sub_29BBCC(a1);
  v18 = v16;
  v74 = _swiftEmptyArrayStorage;
  if (v17[2])
  {
    v63 = v12;
    v66 = v16;
    v19 = EpisodeUserFilter.isSeasonal.getter(v14, v15);
    v72 = v4;
    if ((v19 & 1) != 0)
    {
      v62._countAndFlagsBits = EpisodeUserFilter.title.getter(v14, v15);
      v62._object = v20;
      v21 = v14;
    }
    else
    {
      v21 = v14;
      v23 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v76._object = (void *)0xE000000000000000;
      v24._countAndFlagsBits = 0x534145535F4C4C41;
      v24._object = (void *)0xEB00000000534E4FLL;
      v25._countAndFlagsBits = 0;
      v25._object = (void *)0xE000000000000000;
      v75._countAndFlagsBits = 0;
      v62 = NSLocalizedString(_:tableName:bundle:value:comment:)(v24, (Swift::String_optional)0, (NSBundle)v23, v25, v75);

    }
    v26 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v76._object = (void *)0xE000000000000000;
    v27._countAndFlagsBits = 0x545F4E4F53414553;
    v27._object = (void *)0xEC000000454C5449;
    v28._countAndFlagsBits = 0;
    v28._object = (void *)0xE000000000000000;
    v76._countAndFlagsBits = 0;
    v29 = NSLocalizedString(_:tableName:bundle:value:comment:)(v27, (Swift::String_optional)0, (NSBundle)v26, v28, v76);
    object = v29._object;
    countAndFlagsBits = v29._countAndFlagsBits;

    v30 = type metadata accessor for ArtworkModel(0);
    v31 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56);
    v32 = v31(v11, 1, 1, v30);
    v33 = (uint64_t)v11;
    __chkstk_darwin(v32);
    v67 = v2;
    *(&object - 4) = (void *)v2;
    *(&object - 3) = v21;
    v65 = v21;
    v64 = v15;
    LOBYTE(v76._object) = v15;
    v34 = sub_3FA70((uint64_t)sub_29F5F0, (uint64_t)(&object - 6), (uint64_t)v17);
    v68 = 0;
    swift_bridgeObjectRelease();
    v35 = _s8ShelfKit10ActionMenuV2IDVAEycfC_0();
    v37 = v36;
    v38 = v69;
    sub_267BC((uint64_t)v11, v69, &qword_3BEB70);
    v39 = v72;
    v40 = (char *)v6 + *(int *)(v72 + 28);
    v31(v40, 1, 1, v30);
    *v6 = v35;
    v6[1] = v37;
    v41 = (unint64_t)object;
    v6[2] = countAndFlagsBits;
    v6[3] = v41;
    v42 = v62._object;
    v6[4] = v62._countAndFlagsBits;
    v6[5] = (unint64_t)v42;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v43 = (uint64_t)v40;
    v11 = (char *)v33;
    sub_3C454(v38, v43, &qword_3BEB70);
    *(unint64_t *)((char *)v6 + *(int *)(v39 + 32)) = (unint64_t)v34;
    v44 = (uint64_t)v6;
    v45 = v71;
    sub_3C56C(v44, v71, type metadata accessor for ActionMenu);
    swift_storeEnumTagMultiPayload(v45, v70, 1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1459C(v33, &qword_3BEB70);
    v46 = (unint64_t)v74;
    if ((swift_isUniquelyReferenced_nonNull_native(v74) & 1) == 0)
      v46 = sub_10CAC(0, *(_QWORD *)(v46 + 16) + 1, 1, v46);
    v47 = v63;
    v15 = *(_QWORD *)(v46 + 16);
    v48 = *(_QWORD *)(v46 + 24);
    v4 = v72;
    v2 = v67;
    if (v15 >= v48 >> 1)
      v46 = sub_10CAC(v48 > 1, v15 + 1, 1, v46);
    *(_QWORD *)(v46 + 16) = v15 + 1;
    v22 = sub_3C56C(v45, v46+ ((*(unsigned __int8 *)(v47 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v47 + 80))+ *(_QWORD *)(v47 + 72) * v15, type metadata accessor for ActionMenu.Child);
    v74 = (_QWORD *)v46;
    v14 = v65;
    v18 = v66;
    LOBYTE(v15) = v64;
  }
  else
  {
    v22 = swift_bridgeObjectRelease();
  }
  __chkstk_darwin(v22);
  *(&object - 4) = (void *)v2;
  *(&object - 3) = v14;
  LOBYTE(v76._object) = v15;
  v49 = sub_3FA70((uint64_t)sub_29F5F0, (uint64_t)(&object - 6), v18);
  swift_bridgeObjectRelease();
  sub_1E4208((uint64_t)v49);
  v50 = type metadata accessor for ArtworkModel(0);
  v51 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 56);
  v51(v11, 1, 1, v50);
  v52 = (uint64_t)v11;
  v53 = v74;
  v54 = _s8ShelfKit10ActionMenuV2IDVAEycfC_0();
  v56 = v55;
  v57 = v73;
  v58 = (uint64_t)v73 + *(int *)(v4 + 28);
  v51((char *)v58, 1, 1, v50);
  *v57 = v54;
  v57[1] = v56;
  v57[2] = 0;
  v57[3] = 0xE000000000000000;
  v57[4] = 0;
  v57[5] = 0;
  result = sub_3C454(v52, v58, &qword_3BEB70);
  *(unint64_t *)((char *)v57 + *(int *)(v4 + 32)) = (unint64_t)v53;
  return result;
}

uint64_t sub_29C6A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE v48[12];
  int v49;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v52;
  uint64_t v53;
  __int128 v54[2];
  _QWORD v55[5];
  Swift::String v56;

  v53 = a2;
  v52 = type metadata accessor for ActionMenu.Item(0);
  __chkstk_darwin(v52);
  v5 = (unint64_t *)&v48[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = type metadata accessor for ActionMetrics(0);
  __chkstk_darwin(v6);
  v8 = &v48[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
  __chkstk_darwin(v9);
  v11 = &v48[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v12);
  v14 = &v48[-v13];
  v15 = EpisodeSortType.rawValue.getter(a1);
  v17 = v16;
  v18 = 1;
  v20 = EpisodeSortType.rawValue.getter(1);
  if (v15 != v20 || v17 != v19)
    v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v17, v20, v19, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v21 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v22._countAndFlagsBits = 0xD00000000000001CLL;
  v56._object = (void *)0xE000000000000000;
  v22._object = (void *)0x8000000000315B20;
  v23._countAndFlagsBits = 0;
  v23._object = (void *)0xE000000000000000;
  v56._countAndFlagsBits = 0;
  v24 = NSLocalizedString(_:tableName:bundle:value:comment:)(v22, (Swift::String_optional)0, (NSBundle)v21, v23, v56);
  object = v24._object;
  countAndFlagsBits = v24._countAndFlagsBits;

  ArtworkModel.init(glyphName:accessibilityTitle:isCustomSymbol:isMulticolorSymbol:)(0xD000000000000013, 0x8000000000315B40, 0, 0, 0, 0);
  v25 = type metadata accessor for ArtworkModel(0);
  v26 = (uint64_t)v14;
  v27 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56);
  v27(v26, 0, 1, v25);
  v28 = type metadata accessor for ShowEpisodesShelvesProvider.Info(0);
  sub_150C8((uint64_t)v2 + *(int *)(v28 + 48), (uint64_t)v55);
  v29 = v18;
  v49 = v18;
  v31 = *v2;
  v30 = v2[1];
  sub_150C8((uint64_t)v55, (uint64_t)v54);
  v32 = swift_allocObject(&unk_38E378, 80, 7);
  *(_BYTE *)(v32 + 16) = v29 & 1;
  sub_F4D8(v54, v32 + 24);
  *(_QWORD *)(v32 + 64) = v31;
  *(_QWORD *)(v32 + 72) = v30;
  v33 = swift_bridgeObjectRetain();
  static ActionMetrics.notInstrumented.getter(v33);
  v34 = type metadata accessor for ClosureAction(0);
  swift_allocObject(v34, *(unsigned int *)(v34 + 48), *(unsigned __int16 *)(v34 + 52));
  v35 = sub_213C1C(0, 0, 32, (uint64_t)v8, (uint64_t)sub_29F584, v32);
  swift_release(v32);
  __swift_destroy_boxed_opaque_existential_1(v55);
  v55[3] = v34;
  v55[4] = sub_F1C0(&qword_3B2768, (void (*)(uint64_t))type metadata accessor for ClosureAction, (uint64_t)&protocol conformance descriptor for Action);
  v55[0] = v35;
  v36 = _s8ShelfKit10ActionMenuV2IDVAEycfC_0();
  v38 = v37;
  sub_267BC(v26, (uint64_t)v11, &qword_3BEB70);
  sub_267BC((uint64_t)v55, (uint64_t)v54, &qword_3B0C50);
  v39 = (uint64_t)v11;
  v40 = (int *)v52;
  v41 = (uint64_t)v5 + *(int *)(v52 + 24);
  v27(v41, 1, 1, v25);
  v42 = v40[7];
  *((_BYTE *)v5 + v42) = 2;
  v43 = (uint64_t)v5 + v40[9];
  *(_QWORD *)(v43 + 32) = 0;
  *(_OWORD *)v43 = 0u;
  *(_OWORD *)(v43 + 16) = 0u;
  *v5 = v36;
  v5[1] = v38;
  v44 = (unint64_t)object;
  v5[2] = countAndFlagsBits;
  v5[3] = v44;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_3C454(v39, v41, &qword_3BEB70);
  *((_BYTE *)v5 + v42) = 2;
  *((_BYTE *)v5 + v40[8]) = (v49 & 1) == 0;
  sub_3C454((uint64_t)v54, v43, &qword_3B0C50);
  v45 = v53;
  sub_3C56C((uint64_t)v5, v53, type metadata accessor for ActionMenu.Item);
  v46 = type metadata accessor for ActionMenu.Child(0);
  swift_storeEnumTagMultiPayload(v45, v46, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1459C(v26, &qword_3BEB70);
  return sub_1459C((uint64_t)v55, &qword_3B0C50);
}

uint64_t sub_29CB04@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void (*v26)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v27;

  v3 = type metadata accessor for ActionMenu(0);
  __chkstk_darwin(v3);
  v5 = (unint64_t *)((char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
  __chkstk_darwin(v6);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v1 + *(int *)(type metadata accessor for ShowEpisodesShelvesProvider.Info(0) + 36)) & 1) != 0
    || (dispatch thunk of SubscriptionSubject.value.getter(&v27), v9 = v27, v27 == 17))
  {
    v10 = type metadata accessor for ArtworkModel(0);
    v11 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
    v11(v8, 1, 1, v10);
    v12 = _s8ShelfKit10ActionMenuV2IDVAEycfC_0();
    v14 = v13;
    v15 = v5 + 4;
    v16 = (uint64_t)v5 + *(int *)(v3 + 28);
    v11((char *)v16, 1, 1, v10);
    v17 = _swiftEmptyArrayStorage;
  }
  else
  {
    v18 = type metadata accessor for ArtworkModel(0);
    v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56);
    v26(v8, 1, 1, v18);
    v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0928);
    v20 = *(_QWORD *)(type metadata accessor for ActionMenu.Child(0) - 8);
    v21 = *(_QWORD *)(v20 + 72);
    v22 = *(unsigned __int8 *)(v20 + 80);
    v23 = (v22 + 32) & ~v22;
    v17 = (_QWORD *)swift_allocObject(v19, v23 + v21, v22 | 7);
    *((_OWORD *)v17 + 1) = xmmword_2EA0D0;
    sub_29C6A8(v9, (uint64_t)v17 + v23);
    v12 = _s8ShelfKit10ActionMenuV2IDVAEycfC_0();
    v14 = v24;
    v15 = v5 + 4;
    v16 = (uint64_t)v5 + *(int *)(v3 + 28);
    v26((char *)v16, 1, 1, v18);
  }
  *v5 = v12;
  v5[1] = v14;
  v5[2] = 0;
  v5[3] = 0xE000000000000000;
  *v15 = 0;
  v15[1] = 0;
  sub_3C454((uint64_t)v8, v16, &qword_3BEB70);
  *(unint64_t *)((char *)v5 + *(int *)(v3 + 32)) = (unint64_t)v17;
  return sub_3C56C((uint64_t)v5, a1, type metadata accessor for ActionMenu);
}

uint64_t sub_29CD44@<X0>(unint64_t *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *v4;

  type metadata accessor for ShowEpisodesShelvesProvider.Info(0);
  dispatch thunk of SubscriptionSubject.value.getter(&v4);
  if (v4)
    v2 = v4;
  else
    v2 = _swiftEmptyArrayStorage;
  sub_29C14C((uint64_t)v2, a1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_29CDB8@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t (*v13)(_QWORD);
  int EnumCaseMultiPayload;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::String v18;
  uint64_t v19;
  void *v20;
  Swift::String v21;
  __int128 v22;
  uint64_t v23;
  _QWORD *boxed_opaque_existential_2Tm;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t (*v36)(uint64_t);
  __int128 v37;
  __int128 v38;
  uint64_t v39;

  v2 = v1;
  v4 = type metadata accessor for Information(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v7);
  v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ShowEpisodesShelvesProvider.Info.Footer(0);
  __chkstk_darwin(v10);
  v12 = (_QWORD *)((char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_14510(v2, (uint64_t)v12, v13);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v12, v10);
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v15 = v12[1];
      v17 = v12[2];
      *(_QWORD *)&v37 = *v12;
      v16 = v37;
      *((_QWORD *)&v37 + 1) = v15;
      swift_bridgeObjectRetain();
      v18._countAndFlagsBits = 43;
      v18._object = (void *)0xE100000000000000;
      String.append(_:)(v18);
      v19 = *(_QWORD *)(v17 + 16);
      v20 = *(void **)(v17 + 24);
      swift_bridgeObjectRetain();
      v21._countAndFlagsBits = v19;
      v21._object = v20;
      String.append(_:)(v21);
      swift_bridgeObjectRelease();
      v22 = v37;
      *((_QWORD *)&v38 + 1) = type metadata accessor for Action(0);
      v39 = sub_F1C0((unint64_t *)&qword_3B28E8, (void (*)(uint64_t))type metadata accessor for Action, (uint64_t)&protocol conformance descriptor for Action);
      *(_QWORD *)&v37 = v17;
      v23 = type metadata accessor for ImpressionMetrics(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v9, 1, 1, v23);
      a1[3] = v4;
      a1[4] = sub_F1C0(&qword_3B4E90, (void (*)(uint64_t))type metadata accessor for Information, (uint64_t)&protocol conformance descriptor for Information);
      boxed_opaque_existential_2Tm = __swift_allocate_boxed_opaque_existential_2Tm(a1);
      *(_OWORD *)v6 = v22;
      *((_QWORD *)v6 + 2) = v16;
      *((_QWORD *)v6 + 3) = v15;
      *((_OWORD *)v6 + 2) = 0u;
      *((_OWORD *)v6 + 3) = 0u;
      sub_267BC((uint64_t)&v37, (uint64_t)(v6 + 64), &qword_3B0C50);
      v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4E88);
      v26 = swift_allocObject(v25, 24, 7);
      *(_DWORD *)(v26 + 20) = 0;
      *(_BYTE *)(v26 + 16) = 1;
      swift_retain();
      sub_1459C((uint64_t)&v37, &qword_3B0C50);
      *((_QWORD *)v6 + 13) = v26;
      sub_15BD4((uint64_t)v9, (uint64_t)&v6[*(int *)(v4 + 40)], (uint64_t *)&unk_3B8790);
      sub_3C56C((uint64_t)v6, (uint64_t)boxed_opaque_existential_2Tm, type metadata accessor for Information);
      return swift_release(v17);
    }
    a1[3] = type metadata accessor for Link(0);
    a1[4] = sub_F1C0(&qword_3B0C48, (void (*)(uint64_t))type metadata accessor for Link, (uint64_t)&protocol conformance descriptor for Link);
    v35 = __swift_allocate_boxed_opaque_existential_2Tm(a1);
    v34 = (uint64_t)v12;
    v36 = type metadata accessor for Link;
  }
  else
  {
    v29 = *v12;
    v28 = v12[1];
    v30 = type metadata accessor for ImpressionMetrics(0);
    v37 = 0u;
    v38 = 0u;
    v39 = 0;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v9, 1, 1, v30);
    a1[3] = v4;
    a1[4] = sub_F1C0(&qword_3B4E90, (void (*)(uint64_t))type metadata accessor for Information, (uint64_t)&protocol conformance descriptor for Information);
    v31 = __swift_allocate_boxed_opaque_existential_2Tm(a1);
    *(_QWORD *)v6 = v29;
    *((_QWORD *)v6 + 1) = v28;
    *((_QWORD *)v6 + 2) = v29;
    *((_QWORD *)v6 + 3) = v28;
    *((_QWORD *)v6 + 4) = 0;
    *((_QWORD *)v6 + 5) = 0;
    *((_QWORD *)v6 + 6) = 0;
    *((_QWORD *)v6 + 7) = 0xE000000000000000;
    sub_267BC((uint64_t)&v37, (uint64_t)(v6 + 64), &qword_3B0C50);
    v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4E88);
    v33 = swift_allocObject(v32, 24, 7);
    *(_DWORD *)(v33 + 20) = 0;
    *(_BYTE *)(v33 + 16) = 0;
    swift_bridgeObjectRetain();
    sub_1459C((uint64_t)&v37, &qword_3B0C50);
    *((_QWORD *)v6 + 13) = v33;
    sub_15BD4((uint64_t)v9, (uint64_t)&v6[*(int *)(v4 + 40)], (uint64_t *)&unk_3B8790);
    v34 = (uint64_t)v6;
    v35 = v31;
    v36 = type metadata accessor for Information;
  }
  return sub_3C56C(v34, (uint64_t)v35, v36);
}

uint64_t sub_29D180@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  id v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v27;
  Swift::String v28;

  if (a3 >= a2)
  {
    if (a2 >= 13)
    {
      sub_29D704(a2, a4);
      v18 = type metadata accessor for ShowEpisodesShelvesProvider.Info.Footer(0);
      v19 = a4;
      v20 = 2;
      return swift_storeEnumTagMultiPayload(v19, v18, v20);
    }
    if (a2 < 1)
      v21 = EpisodeUserFilter.emptyMessage.getter(*(_QWORD *)(v4 + 32), *(unsigned __int8 *)(v4 + 40));
    else
      v21 = sub_29DCC8(a1, a2);
    *a4 = v21;
    a4[1] = v22;
LABEL_11:
    v18 = type metadata accessor for ShowEpisodesShelvesProvider.Info.Footer(0);
    v19 = a4;
    v20 = 0;
    return swift_storeEnumTagMultiPayload(v19, v18, v20);
  }
  v8 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  if (!a3)
  {
    v28._object = (void *)0xE000000000000000;
    v23._object = (void *)0x80000000003157B0;
    v23._countAndFlagsBits = 0xD000000000000014;
    v24._countAndFlagsBits = 0;
    v24._object = (void *)0xE000000000000000;
    v28._countAndFlagsBits = 0;
    v25 = NSLocalizedString(_:tableName:bundle:value:comment:)(v23, (Swift::String_optional)0, (NSBundle)v8, v24, v28);

    *(Swift::String *)a4 = v25;
    goto LABEL_11;
  }
  v9._countAndFlagsBits = 0xD000000000000015;
  v27._object = (void *)0xE000000000000000;
  v9._object = (void *)0x8000000000315790;
  v10._countAndFlagsBits = 0;
  v10._object = (void *)0xE000000000000000;
  v27._countAndFlagsBits = 0;
  v11 = NSLocalizedString(_:tableName:bundle:value:comment:)(v9, (Swift::String_optional)0, (NSBundle)v8, v10, v27);

  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8E10);
  v13 = swift_allocObject(v12, 72, 7);
  *(_OWORD *)(v13 + 16) = xmmword_2EA0D0;
  *(_QWORD *)(v13 + 56) = &type metadata for Int;
  *(_QWORD *)(v13 + 64) = &protocol witness table for Int;
  *(_QWORD *)(v13 + 32) = a3;
  v14 = String.init(format:_:)(v11._countAndFlagsBits, v11._object, v13);
  v16 = v15;
  swift_bridgeObjectRelease();
  v17 = sub_29D37C(a2);
  *a4 = v14;
  a4[1] = v16;
  a4[2] = v17;
  v18 = type metadata accessor for ShowEpisodesShelvesProvider.Info.Footer(0);
  v19 = a4;
  v20 = 1;
  return swift_storeEnumTagMultiPayload(v19, v18, v20);
}

uint64_t sub_29D37C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  Swift::String v24;
  Swift::String v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  _BYTE v55[9];
  uint64_t v56;

  v3 = type metadata accessor for ScalarDictionary(0);
  __chkstk_darwin(v3);
  v54 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for MetricsData.Configuration(0);
  v52 = *(_QWORD *)(v5 - 8);
  v53 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
  __chkstk_darwin(v8);
  v10 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ActionMetrics(0);
  __chkstk_darwin(v11);
  v50 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for FlowDestination(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_29E790(a1);
  v51 = v16;
  v18 = v17;
  v19 = *(_QWORD *)(v1 + 8);
  v20 = *(_QWORD *)(v1 + 16);
  v21 = *(_BYTE *)(v1 + 24);
  v22 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)v15 = *(_QWORD *)v1;
  *((_QWORD *)v15 + 1) = v19;
  *((_QWORD *)v15 + 2) = v20;
  v15[24] = v21;
  *((_QWORD *)v15 + 4) = v22;
  v23 = *(unsigned __int8 *)(v1 + 40);
  v15[40] = v23;
  swift_storeEnumTagMultiPayload(v15, v13, 7);
  *(_QWORD *)&v55[1] = v16;
  v56 = v18;
  v49 = v18;
  swift_bridgeObjectRetain();
  sub_43568(v22, v23);
  swift_bridgeObjectRetain();
  v24._countAndFlagsBits = 43;
  v24._object = (void *)0xE100000000000000;
  String.append(_:)(v24);
  v25._countAndFlagsBits = EpisodeUserFilter.title.getter(v22, v23);
  String.append(_:)(v25);
  v26 = swift_bridgeObjectRelease();
  v47 = v56;
  v48 = *(_QWORD *)&v55[1];
  v46 = static MetricsTargetID.seeAll.getter(v26);
  v28 = v27;
  v45 = static MetricsTargetType.button.getter(v46, v27);
  v30 = v29;
  v31 = type metadata accessor for URL(0);
  v32 = (uint64_t)v10;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v10, 1, 1, v31);
  v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0930);
  v34 = type metadata accessor for MetricsData(0);
  v35 = swift_allocObject(v33, ((*(unsigned __int8 *)(*(_QWORD *)(v34 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v34 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v34 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v34 - 8) + 80) | 7);
  *(_OWORD *)(v35 + 16) = xmmword_2EA0D0;
  v36 = static MetricsActionType.navigate.getter();
  v38 = v37;
  static MetricsData.Configuration.podcasts.getter(v36);
  static MetricsData.clickData(targetID:targetType:actionType:actionContext:actionResult:actionURL:fields:configuration:)(v46, v28, v45, v30, v36, v38, 0, 0, 0, 0, v10, &_swiftEmptyDictionarySingleton, v7);
  swift_bridgeObjectRelease();
  v39 = (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v7, v53);
  v40 = v54;
  ScalarDictionary.init()(v39);
  v41 = (uint64_t)v50;
  ActionMetrics.init(data:custom:)(v35, v40);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1459C(v32, &qword_3B4370);
  *(_WORD *)v55 = 0;
  v42 = type metadata accessor for FlowAction(0);
  swift_allocObject(v42, *(unsigned int *)(v42 + 48), *(unsigned __int16 *)(v42 + 52));
  return FlowAction.init(_:id:title:presentationContext:animationBehavior:presentationStyle:destinationPageHeader:actionMetrics:)((uint64_t)v15, v48, v47, v51, v49, &v55[1], 0, 48, v55, v41);
}

uint64_t sub_29D704@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  uint64_t v27;
  char v28;
  Swift::String v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;

  v3 = v2;
  v6 = type metadata accessor for ScalarDictionary(0);
  __chkstk_darwin(v6);
  v83 = (char *)&v70 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for MetricsData.Configuration(0);
  v80 = *(_QWORD *)(v8 - 8);
  v81 = v8;
  __chkstk_darwin(v8);
  v75 = (char *)&v70 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
  __chkstk_darwin(v10);
  v12 = (char *)&v70 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for ActionMetrics(0);
  __chkstk_darwin(v13);
  v77 = (char *)&v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for FlowDestination(0);
  __chkstk_darwin(v15);
  v17 = (char *)&v70 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
  __chkstk_darwin(v18);
  v20 = (char *)&v70 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = v20;
  v21 = sub_29E790(a1);
  v78 = (uint64_t)v22;
  v79 = v21;
  v23 = v22;
  v84 = 0;
  v85 = 0xE000000000000000;
  _StringGuts.grow(_:)(52);
  v24._object = (void *)0x8000000000315970;
  v24._countAndFlagsBits = 0xD000000000000026;
  String.append(_:)(v24);
  v25._countAndFlagsBits = v21;
  v25._object = v23;
  String.append(_:)(v25);
  v26._countAndFlagsBits = 0x7265746C69665B5DLL;
  v26._object = (void *)0xE90000000000003DLL;
  String.append(_:)(v26);
  v28 = *(_BYTE *)(v3 + 40);
  v88 = *(_QWORD *)(v3 + 32);
  v27 = v88;
  v89 = v28;
  _print_unlocked<A, B>(_:_:)(&v88, &v84, &type metadata for EpisodeUserFilter, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v29._countAndFlagsBits = 93;
  v29._object = (void *)0xE100000000000000;
  String.append(_:)(v29);
  v76 = v84;
  v74 = v85;
  v30 = type metadata accessor for ArtworkModel(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v20, 1, 1, v30);
  v73 = v3;
  v31 = *(_QWORD *)(v3 + 8);
  v32 = *(_QWORD *)(v3 + 16);
  v33 = *(_BYTE *)(v3 + 24);
  *(_QWORD *)v17 = *(_QWORD *)v3;
  *((_QWORD *)v17 + 1) = v31;
  *((_QWORD *)v17 + 2) = v32;
  v17[24] = v33;
  *((_QWORD *)v17 + 4) = v27;
  v17[40] = v28;
  swift_storeEnumTagMultiPayload(v17, v15, 7);
  swift_bridgeObjectRetain();
  v34 = sub_43568(v27, v28);
  v72 = static MetricsTargetID.seeAll.getter(v34);
  v36 = v35;
  v71 = static MetricsTargetType.button.getter(v72, v35);
  v38 = v37;
  v39 = type metadata accessor for URL(0);
  v40 = (uint64_t)v12;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v12, 1, 1, v39);
  v41 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0930);
  v42 = type metadata accessor for MetricsData(0);
  v43 = swift_allocObject(v41, ((*(unsigned __int8 *)(*(_QWORD *)(v42 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v42 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v42 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v42 - 8) + 80) | 7);
  *(_OWORD *)(v43 + 16) = xmmword_2EA0D0;
  v44 = static MetricsActionType.navigate.getter();
  v46 = v45;
  v47 = v75;
  static MetricsData.Configuration.podcasts.getter(v44);
  static MetricsData.clickData(targetID:targetType:actionType:actionContext:actionResult:actionURL:fields:configuration:)(v72, v36, v71, v38, v44, v46, 0, 0, 0, 0, v40, &_swiftEmptyDictionarySingleton, v47);
  swift_bridgeObjectRelease();
  v48 = (*(uint64_t (**)(char *, uint64_t))(v80 + 8))(v47, v81);
  v49 = v83;
  ScalarDictionary.init()(v48);
  v50 = (uint64_t)v77;
  ActionMetrics.init(data:custom:)(v43, v49);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1459C(v40, &qword_3B4370);
  LOBYTE(v84) = 0;
  LOBYTE(v88) = 0;
  v51 = type metadata accessor for FlowAction(0);
  swift_allocObject(v51, *(unsigned int *)(v51 + 48), *(unsigned __int16 *)(v51 + 52));
  v52 = FlowAction.init(_:id:title:presentationContext:animationBehavior:presentationStyle:destinationPageHeader:actionMetrics:)((uint64_t)v17, 0, 0, 0, 0, (char *)&v84, 0, 48, (char *)&v88, v50);
  v86 = v51;
  v87 = sub_F1C0((unint64_t *)&qword_3B0C40, (void (*)(uint64_t))type metadata accessor for FlowAction, (uint64_t)&protocol conformance descriptor for Action);
  v84 = v52;
  v53 = (int *)type metadata accessor for Link(0);
  v54 = (char *)a2 + v53[10];
  v55 = sub_29EB54();
  v57 = v56;
  v58 = v74;
  v59 = swift_bridgeObjectRetain();
  v60 = static MetricsTargetType.link.getter(v59);
  v62 = v61;
  v63 = v78;
  swift_bridgeObjectRetain();
  v64 = v79;
  v65 = v55;
  v66 = v76;
  static ImpressionMetrics.shelfItem(id:idType:uniqueID:impressionType:kind:name:)(v65, v57, 0, 0, v76, v58, v60, v62, 0, 0, v79, v63);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v67 = type metadata accessor for ImpressionMetrics(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v67 - 8) + 56))(v54, 0, 1, v67);
  v68 = (char *)a2 + v53[11];
  *((_QWORD *)v68 + 4) = 0;
  *(_OWORD *)v68 = 0u;
  *((_OWORD *)v68 + 1) = 0u;
  *a2 = v66;
  a2[1] = v58;
  a2[2] = v64;
  a2[3] = v63;
  a2[4] = 0;
  a2[5] = 0;
  sub_15BD4((uint64_t)v82, (uint64_t)a2 + v53[7], &qword_3BEB70);
  *((_BYTE *)a2 + v53[8]) = 48;
  return sub_15BD4((uint64_t)&v84, (uint64_t)a2 + v53[9], &qword_3B0C50);
}

uint64_t sub_29DCC8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  int64_t v3;
  unint64_t v4;
  int64_t v5;
  void *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v31;
  uint64_t i;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  id v47;
  Swift::String v48;
  Swift::String v49;
  Swift::String v50;
  uint64_t v51;
  int64_t v52;
  _QWORD *v53;
  unint64_t v54;
  uint64_t v55;
  id v56;
  Swift::String v57;
  Swift::String v58;
  Swift::String v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  _QWORD *v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  id v69;
  Swift::String v70;
  Swift::String v71;
  Swift::String v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  _QWORD *v94;
  unint64_t v95;
  Swift::String v96;
  Swift::String v97;
  Swift::String v98;

  v92 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C6180);
  v89 = *(_QWORD *)(v92 - 8);
  __chkstk_darwin(v92);
  v88 = (char *)&v85 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C6188);
  v86 = *(_QWORD *)(v10 - 8);
  v87 = v10;
  __chkstk_darwin(v10);
  v12 = (char *)&v85 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C6190);
  v90 = *(_QWORD *)(v13 - 8);
  v91 = v13;
  __chkstk_darwin(v13);
  v15 = (char *)&v85 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = (unint64_t)_swiftEmptyArrayStorage;
  if (!((unint64_t)a1 >> 62))
  {
    v16 = *(_QWORD *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8));
    swift_bridgeObjectRetain();
    v93 = a2;
    if (v16)
      goto LABEL_3;
LABEL_32:
    swift_bridgeObjectRelease();
    v45 = v95;
    if ((v95 & 0x8000000000000000) != 0)
      goto LABEL_48;
    goto LABEL_33;
  }
  if (a1 < 0)
    v46 = a1;
  else
    v46 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  v16 = _CocoaArrayWrapper.endIndex.getter(v46);
  v93 = a2;
  if (!v16)
    goto LABEL_32;
LABEL_3:
  if (v16 < 1)
  {
    __break(1u);
LABEL_50:
    v2 = sub_10644((_QWORD *)(v17 > 1), v5, 1, v2);
LABEL_37:
    v2[2] = v5;
    v53 = &v2[2 * v4];
    v53[4] = a2;
    v53[5] = v3;
    v54 = v93;
    v55 = v93 - v16;
    if (__OFSUB__(v93, v16))
    {
      __break(1u);
    }
    else
    {
      if (v55 < 1)
      {
        a1 = (uint64_t)v12;
        v64 = v15;
        v63 = v91;
        v62 = v92;
        goto LABEL_44;
      }
      v56 = objc_msgSend(v6, "mainBundle");
      v97._object = (void *)0xE000000000000000;
      v57._object = (void *)0x8000000000310D20;
      v57._countAndFlagsBits = 0xD000000000000015;
      v58._countAndFlagsBits = 0;
      v58._object = (void *)0xE000000000000000;
      v97._countAndFlagsBits = 0;
      v59 = NSLocalizedString(_:tableName:bundle:value:comment:)(v57, (Swift::String_optional)0, (NSBundle)v56, v58, v97);

      v60 = swift_allocObject(a1, 72, 7);
      *(_OWORD *)(v60 + 16) = v85;
      *(_QWORD *)(v60 + 56) = &type metadata for Int;
      *(_QWORD *)(v60 + 64) = &protocol witness table for Int;
      *(_QWORD *)(v60 + 32) = v55;
      v16 = static String.localizedStringWithFormat(_:_:)(v59._countAndFlagsBits, v59._object, v60);
      a2 = v61;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v55 = v2[2];
      v54 = v2[3];
      v3 = v55 + 1;
      a1 = (uint64_t)v12;
      if (v55 < v54 >> 1)
      {
LABEL_40:
        v63 = v91;
        v62 = v92;
        v64 = v15;
        v2[2] = v3;
        v65 = &v2[2 * v55];
        v65[4] = v16;
        v65[5] = a2;
LABEL_44:
        v94 = v2;
        v77 = v86;
        v76 = v87;
        (*(void (**)(uint64_t, _QWORD, uint64_t))(v86 + 104))(a1, enum case for ListFormatStyle.ListType.and<A, B>(_:), v87);
        v79 = v88;
        v78 = v89;
        (*(void (**)(char *, _QWORD, uint64_t))(v89 + 104))(v88, enum case for ListFormatStyle.Width.narrow<A, B>(_:), v62);
        v80 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3BC430);
        v81 = sub_32914((unint64_t *)&qword_3B3750, (uint64_t *)&unk_3BC430, (uint64_t)&protocol conformance descriptor for [A]);
        static FormatStyle.list<A>(type:width:)(a1, v79, v80, v81);
        (*(void (**)(char *, uint64_t))(v78 + 8))(v79, v62);
        (*(void (**)(uint64_t, uint64_t))(v77 + 8))(a1, v76);
        v82 = sub_32914(&qword_3C6198, &qword_3C6190, (uint64_t)&protocol conformance descriptor for ListFormatStyle<A, B>);
        Sequence.formatted<A>(_:)(&v95, v64, v80, v63, v81, v82);
        (*(void (**)(char *, uint64_t))(v90 + 8))(v64, v63);
        swift_bridgeObjectRelease();
        return v95;
      }
    }
    v2 = sub_10644((_QWORD *)(v54 > 1), v3, 1, v2);
    goto LABEL_40;
  }
  *(_QWORD *)&v85 = v12;
  v18 = v15;
  v19 = v2;
  if ((a1 & 0xC000000000000001) != 0)
  {
    v20 = 0;
    while (1)
    {
      v24 = specialized _ArrayBuffer._getElementSlowPath(_:)(v20);
      v25 = EpisodeType.rawValue.getter(*(unsigned __int8 *)(v24
                                                           + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_episodeType));
      v27 = v26;
      v28 = EpisodeType.rawValue.getter(2);
      if (v25 == v28 && v27 == v29)
      {
        v21 = swift_bridgeObjectRelease_n(v27, 2);
      }
      else
      {
        v31 = _stringCompareWithSmolCheck(_:_:expecting:)(v25, v27, v28, v29, 0);
        swift_bridgeObjectRelease();
        v21 = swift_bridgeObjectRelease();
        if ((v31 & 1) == 0)
        {
          swift_unknownObjectRelease(v24);
          goto LABEL_8;
        }
      }
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v21);
      v22 = *(_QWORD *)(v95 + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v22);
      v23 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v22, v24);
      specialized ContiguousArray._endMutation()(v23);
LABEL_8:
      if (v16 == ++v20)
        goto LABEL_26;
    }
  }
  for (i = 0; i != v16; ++i)
  {
    v33 = *(_QWORD *)(a1 + 8 * i + 32);
    v34 = *(unsigned __int8 *)(v33 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_episodeType);
    swift_retain();
    v35 = EpisodeType.rawValue.getter(v34);
    v37 = v36;
    v38 = EpisodeType.rawValue.getter(2);
    if (v35 == v38 && v37 == v39)
    {
      v42 = swift_bridgeObjectRelease_n(v37, 2);
    }
    else
    {
      v41 = _stringCompareWithSmolCheck(_:_:expecting:)(v35, v37, v38, v39, 0);
      swift_bridgeObjectRelease();
      v42 = swift_bridgeObjectRelease();
      if ((v41 & 1) == 0)
      {
        swift_release(v33);
        continue;
      }
    }
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v42);
    v43 = *(_QWORD *)(v95 + 16);
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v43);
    v44 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v43, v33);
    specialized ContiguousArray._endMutation()(v44);
  }
LABEL_26:
  swift_bridgeObjectRelease();
  v2 = v19;
  v15 = v18;
  v12 = (char *)v85;
  v45 = v95;
  if ((v95 & 0x8000000000000000) != 0)
  {
LABEL_48:
    v84 = swift_bridgeObjectRetain();
    v16 = _CocoaArrayWrapper.endIndex.getter(v84);
    swift_release(v45);
    goto LABEL_35;
  }
LABEL_33:
  if ((v45 & 0x4000000000000000) != 0)
    goto LABEL_48;
  v16 = *(_QWORD *)(v45 + 16);
LABEL_35:
  swift_release(v45);
  if (v16 > 0)
  {
    v6 = (void *)objc_opt_self(NSBundle);
    v47 = objc_msgSend(v6, "mainBundle");
    v96._object = (void *)0xE000000000000000;
    v48._object = (void *)0x8000000000315B00;
    v48._countAndFlagsBits = 0xD000000000000015;
    v49._countAndFlagsBits = 0;
    v49._object = (void *)0xE000000000000000;
    v96._countAndFlagsBits = 0;
    v50 = NSLocalizedString(_:tableName:bundle:value:comment:)(v48, (Swift::String_optional)0, (NSBundle)v47, v49, v96);

    a1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8E10);
    v51 = swift_allocObject(a1, 72, 7);
    v85 = xmmword_2EA0D0;
    *(_OWORD *)(v51 + 16) = xmmword_2EA0D0;
    *(_QWORD *)(v51 + 56) = &type metadata for Int;
    *(_QWORD *)(v51 + 64) = &protocol witness table for Int;
    *(_QWORD *)(v51 + 32) = v16;
    a2 = static String.localizedStringWithFormat(_:_:)(v50._countAndFlagsBits, v50._object, v51);
    v3 = v52;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v2 = sub_10644(0, 1, 1, _swiftEmptyArrayStorage);
    v4 = v2[2];
    v17 = v2[3];
    v5 = v4 + 1;
    if (v4 < v17 >> 1)
      goto LABEL_37;
    goto LABEL_50;
  }
  v66 = EpisodeUserFilter.canonical.getter(v2[4], *((unsigned __int8 *)v2 + 40));
  v68 = v66;
  if (v67)
  {
    if (v67 == 2)
      __asm { BR              X9 }
    sub_4357C(v66, 1);
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000016, 0x8000000000315800, "ShelfKit/ShowEpisodesShelvesProvider.swift", 42, 2, 755, 0);
    __break(1u);
    JUMPOUT(0x29E778);
  }
  v69 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v70._countAndFlagsBits = 0xD000000000000022;
  v98._object = (void *)0xE000000000000000;
  v70._object = (void *)0x8000000000315AD0;
  v71._countAndFlagsBits = 0;
  v71._object = (void *)0xE000000000000000;
  v98._countAndFlagsBits = 0;
  v72 = NSLocalizedString(_:tableName:bundle:value:comment:)(v70, (Swift::String_optional)0, (NSBundle)v69, v71, v98);

  v73 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8E10);
  v74 = swift_allocObject(v73, 112, 7);
  *(_OWORD *)(v74 + 16) = xmmword_2EA080;
  *(_QWORD *)(v74 + 56) = &type metadata for Int;
  *(_QWORD *)(v74 + 64) = &protocol witness table for Int;
  *(_QWORD *)(v74 + 32) = v93;
  *(_QWORD *)(v74 + 96) = &type metadata for Int64;
  *(_QWORD *)(v74 + 104) = &protocol witness table for Int64;
  *(_QWORD *)(v74 + 72) = v68;
  v75 = String.init(format:_:)(v72._countAndFlagsBits, v72._object, v74);
  swift_bridgeObjectRelease();
  return v75;
}

uint64_t sub_29E790(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  uint64_t v5;
  id v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::String v14;

  v3 = EpisodeUserFilter.canonical.getter(*(_QWORD *)(v1 + 32), *(unsigned __int8 *)(v1 + 40));
  v5 = v3;
  if (v4)
  {
    if (v4 == 2)
      __asm { BR              X9 }
    sub_4357C(v3, 1);
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000016, 0x8000000000315800, "ShelfKit/ShowEpisodesShelvesProvider.swift", 42, 2, 640, 0);
    __break(1u);
    JUMPOUT(0x29EB3CLL);
  }
  v6 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v7._countAndFlagsBits = 0xD000000000000024;
  v14._object = (void *)0xE000000000000000;
  v7._object = (void *)0x8000000000315940;
  v8._countAndFlagsBits = 0;
  v8._object = (void *)0xE000000000000000;
  v14._countAndFlagsBits = 0;
  v9 = NSLocalizedString(_:tableName:bundle:value:comment:)(v7, (Swift::String_optional)0, (NSBundle)v6, v8, v14);

  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8E10);
  v11 = swift_allocObject(v10, 112, 7);
  *(_OWORD *)(v11 + 16) = xmmword_2EA080;
  *(_QWORD *)(v11 + 56) = &type metadata for Int64;
  *(_QWORD *)(v11 + 64) = &protocol witness table for Int64;
  *(_QWORD *)(v11 + 32) = v5;
  *(_QWORD *)(v11 + 96) = &type metadata for Int;
  *(_QWORD *)(v11 + 104) = &protocol witness table for Int;
  *(_QWORD *)(v11 + 72) = a1;
  v12 = String.init(format:_:)(v9._countAndFlagsBits, v9._object, v11);
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t sub_29EB54()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  Swift::String v3;
  uint64_t result;
  _QWORD v5[2];

  v1 = EpisodeUserFilter.canonical.getter(*(_QWORD *)(v0 + 32), *(unsigned __int8 *)(v0 + 40));
  if (v2)
  {
    if (v2 == 2)
      __asm { BR              X10 }
    sub_4357C(v1, 1);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0x6168636165726E55, 0xEB00000000656C62, "ShelfKit/ShowEpisodesShelvesProvider.swift", 42, 2, 671, 0);
    __break(1u);
  }
  else
  {
    strcpy((char *)v5, "SeeAllSeason");
    BYTE5(v5[1]) = 0;
    HIWORD(v5[1]) = -5120;
    v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int64, &protocol witness table for Int64);
    String.append(_:)(v3);
    swift_bridgeObjectRelease();
    return v5[0];
  }
  return result;
}

uint64_t type metadata accessor for ShowEpisodesShelvesProvider.Info.Footer(uint64_t a1)
{
  return sub_1F9D4(a1, qword_3C6228, (uint64_t)&nominal type descriptor for ShowEpisodesShelvesProvider.Info.Footer);
}

uint64_t sub_29ED20(uint64_t a1, int a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, char a10, uint64_t a11, unsigned __int8 a12, uint64_t a13, uint64_t a14, uint64_t a15, unsigned __int8 a16)
{
  char v19;
  int *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  char *v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;

  v51 = a8;
  v54 = a6;
  v55 = a7;
  v49 = a2;
  v53 = a16;
  v50 = a15;
  v46 = a12;
  v19 = a2 & 1;
  v52 = a14;
  v47 = a5;
  v48 = a13;
  v20 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_3C61A0);
  __chkstk_darwin(v20);
  v22 = (char *)&v42 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v25 = (char *)&v42 - v24;
  v43 = a1;
  v44 = a3;
  *(_QWORD *)v25 = a1;
  v25[8] = v19;
  *((_QWORD *)v25 + 2) = a3;
  v45 = a4;
  v25[24] = a4;
  v27 = (char *)&v42 + *(int *)(v26 + 64) - v24;
  v28 = type metadata accessor for EpisodeListSettings(0);
  v29 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 16);
  v42 = v27;
  v29(v27, v47, v28);
  v30 = &v25[v20[20]];
  v31 = v55;
  *(_QWORD *)v30 = v54;
  *((_QWORD *)v30 + 1) = v31;
  v32 = v46;
  v25[v20[24]] = v51;
  *(_QWORD *)v22 = a9;
  v22[8] = a10 & 1;
  v47 = a11;
  *((_QWORD *)v22 + 2) = a11;
  v22[24] = v32;
  v33 = (uint64_t)&v22[v20[16]];
  v29((char *)v33, v48, v28);
  v34 = v50;
  v35 = &v22[v20[20]];
  *(_QWORD *)v35 = v52;
  *((_QWORD *)v35 + 1) = v34;
  v22[v20[24]] = v53;
  if ((v49 & 1) != 0)
  {
    if ((a10 & 1) == 0)
    {
LABEL_7:
      sub_43568(v44, v45);
      swift_bridgeObjectRetain();
      sub_43568(v47, v32);
      swift_bridgeObjectRetain();
      v40 = 0;
      goto LABEL_8;
    }
  }
  else if ((a10 & 1) != 0 || v43 != a9)
  {
    goto LABEL_7;
  }
  v36 = v44;
  v37 = v45;
  sub_43568(v44, v45);
  v38 = v55;
  swift_bridgeObjectRetain();
  v39 = v47;
  sub_43568(v47, v32);
  swift_bridgeObjectRetain();
  v40 = sub_29EFC4(v36, v37, (uint64_t)v42, v54, v38, v51 & 1, v39, v32, v33, v52, v34, v53 & 1);
LABEL_8:
  sub_1459C((uint64_t)v22, &qword_3C61A0);
  sub_1459C((uint64_t)v25, &qword_3C61A0);
  return v40 & 1;
}

uint64_t sub_29EFC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, unsigned int a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned __int8 a12)
{
  int *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void (*v26)(void);
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  char v34;
  char v35;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  int v46;
  int v47;

  v47 = a6;
  v45 = a8;
  v46 = a12;
  v43 = a7;
  v44 = a11;
  v42 = a10;
  v40 = a3;
  v41 = a9;
  v16 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_3C61A8);
  __chkstk_darwin(v16);
  v18 = (char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v21 = (char *)&v37 - v20;
  *(_QWORD *)v21 = a1;
  v21[8] = a2;
  v22 = a2;
  v24 = (char *)&v37 + *(int *)(v23 + 48) - v20;
  v25 = type metadata accessor for EpisodeListSettings(0);
  v26 = *(void (**)(void))(*(_QWORD *)(v25 - 8) + 16);
  v39 = v24;
  ((void (*)(char *, uint64_t, uint64_t))v26)(v24, v40, v25);
  v27 = (uint64_t *)&v21[v16[16]];
  v40 = a4;
  *v27 = a4;
  v27[1] = a5;
  v21[v16[20]] = v47;
  v28 = v43;
  *(_QWORD *)v18 = v43;
  v29 = v45;
  v18[8] = v45;
  v38 = &v18[v16[12]];
  v30 = v42;
  v26();
  v31 = v44;
  v32 = (uint64_t *)&v18[v16[16]];
  *v32 = v30;
  v32[1] = v31;
  v33 = v16[20];
  v34 = v46;
  v18[v33] = v46;
  sub_43568(a1, v22);
  swift_bridgeObjectRetain();
  sub_43568(v28, v29);
  swift_bridgeObjectRetain();
  if ((static EpisodeUserFilter.== infix(_:_:)(a1, v22, v28, v29) & 1) != 0)
    v35 = sub_29F1C0((uint64_t)v39, v40, a5, v47 & 1, (uint64_t)v38, v30, v31, v34 & 1);
  else
    v35 = 0;
  sub_1459C((uint64_t)v18, &qword_3C61A8);
  sub_1459C((uint64_t)v21, &qword_3C61A8);
  return v35 & 1;
}

uint64_t sub_29F1C0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  char v22;
  char *v23;
  uint64_t v24;
  char v25;
  char *v26;
  uint64_t v27;
  char v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;

  v33 = a8;
  v31 = a5;
  v32 = a6;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C61B0);
  __chkstk_darwin(v13);
  v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v18 = (char *)&v30 - v17;
  v19 = type metadata accessor for EpisodeListSettings(0);
  v20 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 16);
  v21 = a1;
  v22 = a4;
  v20(v18, v21, v19);
  v23 = &v18[*(int *)(v13 + 48)];
  v30 = a2;
  *(_QWORD *)v23 = a2;
  *((_QWORD *)v23 + 1) = a3;
  v18[*(int *)(v13 + 64)] = a4;
  v24 = v32;
  v25 = v33;
  v20(v15, v31, v19);
  v26 = &v15[*(int *)(v13 + 48)];
  *(_QWORD *)v26 = v24;
  *((_QWORD *)v26 + 1) = a7;
  v15[*(int *)(v13 + 64)] = v25;
  v27 = sub_F1C0(&qword_3C42D0, (void (*)(uint64_t))&type metadata accessor for EpisodeListSettings, (uint64_t)&protocol conformance descriptor for EpisodeListSettings);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((dispatch thunk of static Equatable.== infix(_:_:)(v18, v15, v19, v27) & 1) != 0)
  {
    if (v30 == v24 && a3 == a7
      || (v28 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(v30, a3, v24, a7, 0) & 1) != 0))
    {
      v28 = v22 ^ v25 ^ 1;
    }
  }
  else
  {
    v28 = 0;
  }
  sub_1459C((uint64_t)v15, &qword_3C61B0);
  sub_1459C((uint64_t)v18, &qword_3C61B0);
  return v28 & 1;
}

uint64_t sub_29F38C@<X0>(unint64_t *a1@<X8>)
{
  type metadata accessor for ShowEpisodesShelvesProvider.Info(0);
  return sub_29CD44(a1);
}

uint64_t sub_29F3C8(uint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char *i;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;

  v1 = *(_QWORD *)(result + 16);
  if (v1)
  {
    v2 = 0;
    v3 = result + 40;
    do
    {
      if (v2 <= v1)
        v4 = v1;
      else
        v4 = v2;
      v5 = -(uint64_t)v4;
      for (i = (char *)(v3 + 16 * v2++); ; i += 16)
      {
        if (v5 + v2 == 1)
        {
          __break(1u);
          return result;
        }
        v7 = *((_QWORD *)i - 1);
        v8 = *i;
        sub_43568(v7, *i);
        if ((EpisodeUserFilter.isSeasonal.getter(v7, v8) & 1) != 0)
          break;
        result = sub_4357C(v7, v8);
        if (++v2 - v1 == 1)
          return (uint64_t)_swiftEmptyArrayStorage;
      }
      result = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage);
      if ((result & 1) == 0)
        result = sub_180A4C(0, _swiftEmptyArrayStorage[2] + 1, 1);
      v10 = _swiftEmptyArrayStorage[2];
      v9 = _swiftEmptyArrayStorage[3];
      if (v10 >= v9 >> 1)
        result = sub_180A4C(v9 > 1, v10 + 1, 1);
      _swiftEmptyArrayStorage[2] = v10 + 1;
      v11 = &_swiftEmptyArrayStorage[2 * v10];
      v11[4] = v7;
      *((_BYTE *)v11 + 40) = v8;
    }
    while (v2 != v1);
  }
  return (uint64_t)_swiftEmptyArrayStorage;
}

uint64_t sub_29F518@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for ShowEpisodesShelvesProvider.Info(0);
  return sub_29CB04(a1);
}

uint64_t sub_29F558()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1((_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, 80, 7);
}

uint64_t sub_29F584()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 72);
  if (*(_BYTE *)(v0 + 16))
    v3 = 1;
  else
    v3 = 4;
  v4 = *(_QWORD *)(v0 + 48);
  v5 = *(_QWORD *)(v0 + 56);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 24), v4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 224))(v1, v2, v3, v4, v5);
}

uint64_t sub_29F5F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_29F604(a1, a2);
}

uint64_t sub_29F604@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_29BD3C(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8), *(_QWORD *)(v2 + 24), *(unsigned __int8 *)(v2 + 32), a2);
}

uint64_t sub_29F640()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1((_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease();
  sub_4357C(*(_QWORD *)(v0 + 72), *(_BYTE *)(v0 + 80));
  return swift_deallocObject(v0, 81, 7);
}

uint64_t sub_29F678()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = (_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 72);
  v5 = *(_QWORD *)(v0 + 40);
  v6 = *(_QWORD *)(v0 + 48);
  v7 = *(unsigned __int8 *)(v0 + 80);
  __swift_project_boxed_opaque_existential_1(v1, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 216))(v2, v3, v4, v7, v5, v6);
}

_QWORD *sub_29F6E4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  int *v19;
  uint64_t v20;
  unsigned int (*v21)(_QWORD *, uint64_t, int *);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  id *v28;
  int v29;
  id v30;
  id *v31;
  int v32;
  id v33;
  id *v34;
  int v35;
  id v36;
  id *v37;
  int v38;
  id v39;
  id *v40;
  int v41;
  id v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  void (*v55)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  _QWORD *__dst;
  int *v76;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      v13 = a2[1];
      *a1 = *a2;
      a1[1] = v13;
      v14 = a2[3];
      a1[2] = a2[2];
      a1[3] = v14;
      v15 = a2[5];
      a1[4] = a2[4];
      a1[5] = v15;
      v16 = type metadata accessor for Link(0);
      v17 = *(int *)(v16 + 28);
      __dst = (_QWORD *)((char *)a1 + v17);
      v76 = (int *)v16;
      v18 = (_QWORD *)((char *)a2 + v17);
      v19 = (int *)type metadata accessor for ArtworkModel(0);
      v20 = *((_QWORD *)v19 - 1);
      v21 = *(unsigned int (**)(_QWORD *, uint64_t, int *))(v20 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v21(v18, 1, v19))
      {
        v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
        memcpy(__dst, v18, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
      }
      else
      {
        v24 = v18[1];
        *__dst = *v18;
        __dst[1] = v24;
        v25 = *((unsigned __int8 *)v18 + 32);
        swift_bridgeObjectRetain();
        if (v25 == 255)
        {
          *((_OWORD *)__dst + 1) = *((_OWORD *)v18 + 1);
          *((_BYTE *)__dst + 32) = *((_BYTE *)v18 + 32);
        }
        else
        {
          v26 = v18[2];
          v27 = v18[3];
          sub_3D464(v26, v27, v25);
          __dst[2] = v26;
          __dst[3] = v27;
          *((_BYTE *)__dst + 32) = v25;
        }
        *(_OWORD *)(__dst + 5) = *(_OWORD *)(v18 + 5);
        v28 = (id *)(v18 + 7);
        v29 = *((unsigned __int8 *)v18 + 64);
        if (v29 == 255)
        {
          __dst[7] = *v28;
          *((_BYTE *)__dst + 64) = *((_BYTE *)v18 + 64);
        }
        else
        {
          v30 = *v28;
          sub_3D47C(*v28, *((_BYTE *)v18 + 64));
          __dst[7] = v30;
          *((_BYTE *)__dst + 64) = v29;
        }
        v31 = (id *)(v18 + 9);
        v32 = *((unsigned __int8 *)v18 + 80);
        if (v32 == 255)
        {
          __dst[9] = *v31;
          *((_BYTE *)__dst + 80) = *((_BYTE *)v18 + 80);
        }
        else
        {
          v33 = *v31;
          sub_3D47C(*v31, *((_BYTE *)v18 + 80));
          __dst[9] = v33;
          *((_BYTE *)__dst + 80) = v32;
        }
        v34 = (id *)(v18 + 11);
        v35 = *((unsigned __int8 *)v18 + 96);
        if (v35 == 255)
        {
          __dst[11] = *v34;
          *((_BYTE *)__dst + 96) = *((_BYTE *)v18 + 96);
        }
        else
        {
          v36 = *v34;
          sub_3D47C(*v34, *((_BYTE *)v18 + 96));
          __dst[11] = v36;
          *((_BYTE *)__dst + 96) = v35;
        }
        v37 = (id *)(v18 + 13);
        v38 = *((unsigned __int8 *)v18 + 112);
        if (v38 == 255)
        {
          __dst[13] = *v37;
          *((_BYTE *)__dst + 112) = *((_BYTE *)v18 + 112);
        }
        else
        {
          v39 = *v37;
          sub_3D47C(*v37, *((_BYTE *)v18 + 112));
          __dst[13] = v39;
          *((_BYTE *)__dst + 112) = v38;
        }
        v40 = (id *)(v18 + 15);
        v41 = *((unsigned __int8 *)v18 + 128);
        if (v41 == 255)
        {
          __dst[15] = *v40;
          *((_BYTE *)__dst + 128) = *((_BYTE *)v18 + 128);
        }
        else
        {
          v42 = *v40;
          sub_3D47C(*v40, *((_BYTE *)v18 + 128));
          __dst[15] = v42;
          *((_BYTE *)__dst + 128) = v41;
        }
        *((_BYTE *)__dst + 129) = *((_BYTE *)v18 + 129);
        v43 = v19[11];
        v44 = (char *)__dst + v43;
        v45 = (char *)v18 + v43;
        v46 = type metadata accessor for ArtworkCrop(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v46 - 8) + 16))(v44, v45, v46);
        v47 = v19[12];
        v48 = (_QWORD *)((char *)__dst + v47);
        v49 = (_QWORD *)((char *)v18 + v47);
        v50 = v49[1];
        *v48 = *v49;
        v48[1] = v50;
        *((_BYTE *)__dst + v19[13]) = *((_BYTE *)v18 + v19[13]);
        *((_BYTE *)__dst + v19[14]) = *((_BYTE *)v18 + v19[14]);
        *((_BYTE *)__dst + v19[15]) = *((_BYTE *)v18 + v19[15]);
        v51 = v19[16];
        v52 = (_QWORD *)((char *)__dst + v51);
        v53 = (_QWORD *)((char *)v18 + v51);
        v54 = v53[1];
        *v52 = *v53;
        v52[1] = v54;
        v55 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v20 + 56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v55(__dst, 0, 1, v19);
      }
      *((_BYTE *)a1 + v76[8]) = *((_BYTE *)a2 + v76[8]);
      v56 = v76[9];
      v57 = (char *)a1 + v56;
      v58 = (char *)a2 + v56;
      v59 = *(_QWORD *)((char *)a2 + v56 + 24);
      if (v59)
      {
        v60 = *((_QWORD *)v58 + 4);
        *((_QWORD *)v57 + 3) = v59;
        *((_QWORD *)v57 + 4) = v60;
        (**(void (***)(void))(v59 - 8))();
      }
      else
      {
        v61 = *((_OWORD *)v58 + 1);
        *(_OWORD *)v57 = *(_OWORD *)v58;
        *((_OWORD *)v57 + 1) = v61;
        *((_QWORD *)v57 + 4) = *((_QWORD *)v58 + 4);
      }
      v62 = v76[10];
      v63 = (char *)a1 + v62;
      v64 = (char *)a2 + v62;
      v65 = type metadata accessor for ImpressionMetrics(0);
      v66 = *(_QWORD *)(v65 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v64, 1, v65))
      {
        v67 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
        memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v67 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v66 + 16))(v63, v64, v65);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v66 + 56))(v63, 0, 1, v65);
      }
      v68 = v76[11];
      v69 = (char *)a1 + v68;
      v70 = (char *)a2 + v68;
      v71 = *(_QWORD *)((char *)a2 + v68 + 24);
      if (v71)
      {
        v72 = *((_QWORD *)v70 + 4);
        *((_QWORD *)v69 + 3) = v71;
        *((_QWORD *)v69 + 4) = v72;
        (**(void (***)(void))(v71 - 8))();
      }
      else
      {
        v73 = *((_OWORD *)v70 + 1);
        *(_OWORD *)v69 = *(_OWORD *)v70;
        *((_OWORD *)v69 + 1) = v73;
        *((_QWORD *)v69 + 4) = *((_QWORD *)v70 + 4);
      }
      v9 = a1;
      v10 = a3;
      v11 = 2;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v8 = a2[1];
      *a1 = *a2;
      a1[1] = v8;
      a1[2] = a2[2];
      swift_bridgeObjectRetain();
      swift_retain();
      v9 = a1;
      v10 = a3;
      v11 = 1;
    }
    else
    {
      v23 = a2[1];
      *a1 = *a2;
      a1[1] = v23;
      swift_bridgeObjectRetain();
      v9 = a1;
      v10 = a3;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
  }
  return a1;
}

_QWORD *sub_29FBB8(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  result = (_QWORD *)swift_getEnumCaseMultiPayload(a1, a2);
  switch((_DWORD)result)
  {
    case 2:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v4 = (int *)type metadata accessor for Link(0);
      v5 = a1 + v4[7];
      v6 = type metadata accessor for ArtworkModel(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6))
      {
        swift_bridgeObjectRelease();
        v7 = *(unsigned __int8 *)(v5 + 32);
        if (v7 != 255)
          sub_3B5BC(*(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 24), v7);
        v8 = *(unsigned __int8 *)(v5 + 64);
        if (v8 != 255)
          sub_3D624(*(id *)(v5 + 56), v8);
        v9 = *(unsigned __int8 *)(v5 + 80);
        if (v9 != 255)
          sub_3D624(*(id *)(v5 + 72), v9);
        v10 = *(unsigned __int8 *)(v5 + 96);
        if (v10 != 255)
          sub_3D624(*(id *)(v5 + 88), v10);
        v11 = *(unsigned __int8 *)(v5 + 112);
        if (v11 != 255)
          sub_3D624(*(id *)(v5 + 104), v11);
        v12 = *(unsigned __int8 *)(v5 + 128);
        if (v12 != 255)
          sub_3D624(*(id *)(v5 + 120), v12);
        v13 = v5 + *(int *)(v6 + 44);
        v14 = type metadata accessor for ArtworkCrop(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      v15 = (_QWORD *)(a1 + v4[9]);
      if (v15[3])
        __swift_destroy_boxed_opaque_existential_1(v15);
      v16 = a1 + v4[10];
      v17 = type metadata accessor for ImpressionMetrics(0);
      v18 = *(_QWORD *)(v17 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
        (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v17);
      result = (_QWORD *)(a1 + v4[11]);
      if (result[3])
        return (_QWORD *)__swift_destroy_boxed_opaque_existential_1(result);
      break;
    case 1:
      swift_bridgeObjectRelease();
      return (_QWORD *)swift_release();
    case 0:
      return (_QWORD *)swift_bridgeObjectRelease();
  }
  return result;
}

_QWORD *sub_29FDC4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(_QWORD *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  id *v25;
  int v26;
  id v27;
  id *v28;
  int v29;
  id v30;
  id *v31;
  int v32;
  id v33;
  id *v34;
  int v35;
  id v36;
  id *v37;
  int v38;
  id v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  void (*v52)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  int *v72;
  uint64_t v73;

  v3 = a3;
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  v7 = EnumCaseMultiPayload;
  if ((_DWORD)EnumCaseMultiPayload == 2)
  {
    v73 = v3;
    v9 = a2[1];
    *a1 = *a2;
    a1[1] = v9;
    v10 = a2[3];
    a1[2] = a2[2];
    a1[3] = v10;
    v11 = a2[5];
    a1[4] = a2[4];
    a1[5] = v11;
    v72 = (int *)type metadata accessor for Link(0);
    v12 = v72[7];
    v13 = (_QWORD *)((char *)a1 + v12);
    v14 = (_QWORD *)((char *)a2 + v12);
    v15 = type metadata accessor for ArtworkModel(0);
    v16 = *(_QWORD *)(v15 - 8);
    v17 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v16 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v17(v14, 1, v15))
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
      v7 = 2;
    }
    else
    {
      v20 = v14[1];
      *v13 = *v14;
      v13[1] = v20;
      v21 = *((unsigned __int8 *)v14 + 32);
      swift_bridgeObjectRetain();
      if (v21 == 255)
      {
        *((_OWORD *)v13 + 1) = *((_OWORD *)v14 + 1);
        *((_BYTE *)v13 + 32) = *((_BYTE *)v14 + 32);
      }
      else
      {
        v22 = v14[2];
        v23 = v14[3];
        sub_3D464(v22, v23, v21);
        v13[2] = v22;
        v13[3] = v23;
        *((_BYTE *)v13 + 32) = v21;
      }
      v24 = (int *)v15;
      v7 = 2;
      *(_OWORD *)(v13 + 5) = *(_OWORD *)(v14 + 5);
      v25 = (id *)(v14 + 7);
      v26 = *((unsigned __int8 *)v14 + 64);
      if (v26 == 255)
      {
        v13[7] = *v25;
        *((_BYTE *)v13 + 64) = *((_BYTE *)v14 + 64);
      }
      else
      {
        v27 = *v25;
        sub_3D47C(*v25, *((_BYTE *)v14 + 64));
        v13[7] = v27;
        *((_BYTE *)v13 + 64) = v26;
      }
      v28 = (id *)(v14 + 9);
      v29 = *((unsigned __int8 *)v14 + 80);
      if (v29 == 255)
      {
        v13[9] = *v28;
        *((_BYTE *)v13 + 80) = *((_BYTE *)v14 + 80);
      }
      else
      {
        v30 = *v28;
        sub_3D47C(*v28, *((_BYTE *)v14 + 80));
        v13[9] = v30;
        *((_BYTE *)v13 + 80) = v29;
      }
      v31 = (id *)(v14 + 11);
      v32 = *((unsigned __int8 *)v14 + 96);
      if (v32 == 255)
      {
        v13[11] = *v31;
        *((_BYTE *)v13 + 96) = *((_BYTE *)v14 + 96);
      }
      else
      {
        v33 = *v31;
        sub_3D47C(*v31, *((_BYTE *)v14 + 96));
        v13[11] = v33;
        *((_BYTE *)v13 + 96) = v32;
      }
      v34 = (id *)(v14 + 13);
      v35 = *((unsigned __int8 *)v14 + 112);
      if (v35 == 255)
      {
        v13[13] = *v34;
        *((_BYTE *)v13 + 112) = *((_BYTE *)v14 + 112);
      }
      else
      {
        v36 = *v34;
        sub_3D47C(*v34, *((_BYTE *)v14 + 112));
        v13[13] = v36;
        *((_BYTE *)v13 + 112) = v35;
      }
      v37 = (id *)(v14 + 15);
      v38 = *((unsigned __int8 *)v14 + 128);
      if (v38 == 255)
      {
        v13[15] = *v37;
        *((_BYTE *)v13 + 128) = *((_BYTE *)v14 + 128);
      }
      else
      {
        v39 = *v37;
        sub_3D47C(*v37, *((_BYTE *)v14 + 128));
        v13[15] = v39;
        *((_BYTE *)v13 + 128) = v38;
      }
      *((_BYTE *)v13 + 129) = *((_BYTE *)v14 + 129);
      v40 = v24[11];
      v41 = (char *)v13 + v40;
      v42 = (char *)v14 + v40;
      v43 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 16))(v41, v42, v43);
      v44 = v24[12];
      v45 = (_QWORD *)((char *)v13 + v44);
      v46 = (_QWORD *)((char *)v14 + v44);
      v47 = v46[1];
      *v45 = *v46;
      v45[1] = v47;
      *((_BYTE *)v13 + v24[13]) = *((_BYTE *)v14 + v24[13]);
      *((_BYTE *)v13 + v24[14]) = *((_BYTE *)v14 + v24[14]);
      *((_BYTE *)v13 + v24[15]) = *((_BYTE *)v14 + v24[15]);
      v48 = v24[16];
      v49 = (_QWORD *)((char *)v13 + v48);
      v50 = (_QWORD *)((char *)v14 + v48);
      v51 = v50[1];
      *v49 = *v50;
      v49[1] = v51;
      v52 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v16 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v52(v13, 0, 1, v24);
    }
    v3 = v73;
    *((_BYTE *)a1 + v72[8]) = *((_BYTE *)a2 + v72[8]);
    v53 = v72[9];
    v54 = (char *)a1 + v53;
    v55 = (char *)a2 + v53;
    v56 = *(_QWORD *)((char *)a2 + v53 + 24);
    if (v56)
    {
      v57 = *((_QWORD *)v55 + 4);
      *((_QWORD *)v54 + 3) = v56;
      *((_QWORD *)v54 + 4) = v57;
      (**(void (***)(void))(v56 - 8))();
    }
    else
    {
      v58 = *((_OWORD *)v55 + 1);
      *(_OWORD *)v54 = *(_OWORD *)v55;
      *((_OWORD *)v54 + 1) = v58;
      *((_QWORD *)v54 + 4) = *((_QWORD *)v55 + 4);
    }
    v59 = v72[10];
    v60 = (char *)a1 + v59;
    v61 = (char *)a2 + v59;
    v62 = type metadata accessor for ImpressionMetrics(0);
    v63 = *(_QWORD *)(v62 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v63 + 48))(v61, 1, v62))
    {
      v64 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
      memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v63 + 16))(v60, v61, v62);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v63 + 56))(v60, 0, 1, v62);
    }
    v65 = v72[11];
    v66 = (char *)a1 + v65;
    v67 = (char *)a2 + v65;
    v68 = *(_QWORD *)((char *)a2 + v65 + 24);
    if (v68)
    {
      v69 = *((_QWORD *)v67 + 4);
      *((_QWORD *)v66 + 3) = v68;
      *((_QWORD *)v66 + 4) = v69;
      (**(void (***)(void))(v68 - 8))();
    }
    else
    {
      v70 = *((_OWORD *)v67 + 1);
      *(_OWORD *)v66 = *(_OWORD *)v67;
      *((_OWORD *)v66 + 1) = v70;
      *((_QWORD *)v66 + 4) = *((_QWORD *)v67 + 4);
    }
  }
  else if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    v8 = a2[1];
    *a1 = *a2;
    a1[1] = v8;
    a1[2] = a2[2];
    swift_bridgeObjectRetain();
    swift_retain();
  }
  else
  {
    v19 = a2[1];
    *a1 = *a2;
    a1[1] = v19;
    swift_bridgeObjectRetain();
  }
  swift_storeEnumTagMultiPayload(a1, v3, v7);
  return a1;
}

_QWORD *sub_2A0264(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  int *v11;
  uint64_t v12;
  unsigned int (*v13)(_QWORD *, uint64_t, int *);
  uint64_t v14;
  int *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  id *v20;
  int v21;
  id v22;
  id v23;
  id *v24;
  int v25;
  id v26;
  id v27;
  id *v28;
  int v29;
  id v30;
  id v31;
  id *v32;
  int v33;
  id v34;
  id v35;
  id *v36;
  int v37;
  id v38;
  id v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  void (*v50)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  uint64_t v70;
  uint64_t v71;

  if (a1 != a2)
  {
    sub_145D8((uint64_t)a1, type metadata accessor for ShowEpisodesShelvesProvider.Info.Footer);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    v7 = EnumCaseMultiPayload;
    if ((_DWORD)EnumCaseMultiPayload == 2)
    {
      v71 = a3;
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      a1[3] = a2[3];
      a1[4] = a2[4];
      a1[5] = a2[5];
      v70 = type metadata accessor for Link(0);
      v8 = *(int *)(v70 + 28);
      v9 = (_QWORD *)((char *)a1 + v8);
      v10 = (_QWORD *)((char *)a2 + v8);
      v11 = (int *)type metadata accessor for ArtworkModel(0);
      v12 = *((_QWORD *)v11 - 1);
      v13 = *(unsigned int (**)(_QWORD *, uint64_t, int *))(v12 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v13(v10, 1, v11))
      {
        v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
        memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
        v15 = (int *)v70;
        v7 = 2;
      }
      else
      {
        *v9 = *v10;
        v9[1] = v10[1];
        v16 = *((unsigned __int8 *)v10 + 32);
        swift_bridgeObjectRetain();
        if (v16 == 255)
        {
          v19 = *((_OWORD *)v10 + 1);
          *((_BYTE *)v9 + 32) = *((_BYTE *)v10 + 32);
          *((_OWORD *)v9 + 1) = v19;
        }
        else
        {
          v17 = v10[2];
          v18 = v10[3];
          sub_3D464(v17, v18, v16);
          v9[2] = v17;
          v9[3] = v18;
          *((_BYTE *)v9 + 32) = v16;
        }
        v15 = (int *)v70;
        v7 = 2;
        v9[5] = v10[5];
        v9[6] = v10[6];
        v20 = (id *)(v10 + 7);
        v21 = *((unsigned __int8 *)v10 + 64);
        if (v21 == 255)
        {
          v23 = *v20;
          *((_BYTE *)v9 + 64) = *((_BYTE *)v10 + 64);
          v9[7] = v23;
        }
        else
        {
          v22 = *v20;
          sub_3D47C(*v20, *((_BYTE *)v10 + 64));
          v9[7] = v22;
          *((_BYTE *)v9 + 64) = v21;
        }
        v24 = (id *)(v10 + 9);
        v25 = *((unsigned __int8 *)v10 + 80);
        if (v25 == 255)
        {
          v27 = *v24;
          *((_BYTE *)v9 + 80) = *((_BYTE *)v10 + 80);
          v9[9] = v27;
        }
        else
        {
          v26 = *v24;
          sub_3D47C(*v24, *((_BYTE *)v10 + 80));
          v9[9] = v26;
          *((_BYTE *)v9 + 80) = v25;
        }
        v28 = (id *)(v10 + 11);
        v29 = *((unsigned __int8 *)v10 + 96);
        if (v29 == 255)
        {
          v31 = *v28;
          *((_BYTE *)v9 + 96) = *((_BYTE *)v10 + 96);
          v9[11] = v31;
        }
        else
        {
          v30 = *v28;
          sub_3D47C(*v28, *((_BYTE *)v10 + 96));
          v9[11] = v30;
          *((_BYTE *)v9 + 96) = v29;
        }
        v32 = (id *)(v10 + 13);
        v33 = *((unsigned __int8 *)v10 + 112);
        if (v33 == 255)
        {
          v35 = *v32;
          *((_BYTE *)v9 + 112) = *((_BYTE *)v10 + 112);
          v9[13] = v35;
        }
        else
        {
          v34 = *v32;
          sub_3D47C(*v32, *((_BYTE *)v10 + 112));
          v9[13] = v34;
          *((_BYTE *)v9 + 112) = v33;
        }
        v36 = (id *)(v10 + 15);
        v37 = *((unsigned __int8 *)v10 + 128);
        if (v37 == 255)
        {
          v39 = *v36;
          *((_BYTE *)v9 + 128) = *((_BYTE *)v10 + 128);
          v9[15] = v39;
        }
        else
        {
          v38 = *v36;
          sub_3D47C(*v36, *((_BYTE *)v10 + 128));
          v9[15] = v38;
          *((_BYTE *)v9 + 128) = v37;
        }
        *((_BYTE *)v9 + 129) = *((_BYTE *)v10 + 129);
        v40 = v11[11];
        v41 = (char *)v9 + v40;
        v42 = (char *)v10 + v40;
        v43 = type metadata accessor for ArtworkCrop(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 16))(v41, v42, v43);
        v44 = v11[12];
        v45 = (_QWORD *)((char *)v9 + v44);
        v46 = (_QWORD *)((char *)v10 + v44);
        *v45 = *v46;
        v45[1] = v46[1];
        *((_BYTE *)v9 + v11[13]) = *((_BYTE *)v10 + v11[13]);
        *((_BYTE *)v9 + v11[14]) = *((_BYTE *)v10 + v11[14]);
        *((_BYTE *)v9 + v11[15]) = *((_BYTE *)v10 + v11[15]);
        v47 = v11[16];
        v48 = (_QWORD *)((char *)v9 + v47);
        v49 = (_QWORD *)((char *)v10 + v47);
        *v48 = *v49;
        v48[1] = v49[1];
        v50 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v12 + 56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v50(v9, 0, 1, v11);
      }
      *((_BYTE *)a1 + v15[8]) = *((_BYTE *)a2 + v15[8]);
      v51 = v15[9];
      v52 = (char *)a1 + v51;
      v53 = (char *)a2 + v51;
      v54 = *(_QWORD *)((char *)a2 + v51 + 24);
      a3 = v71;
      if (v54)
      {
        *((_QWORD *)v52 + 3) = v54;
        *((_QWORD *)v52 + 4) = *((_QWORD *)v53 + 4);
        (**(void (***)(void))(v54 - 8))();
      }
      else
      {
        v55 = *(_OWORD *)v53;
        v56 = *((_OWORD *)v53 + 1);
        *((_QWORD *)v52 + 4) = *((_QWORD *)v53 + 4);
        *(_OWORD *)v52 = v55;
        *((_OWORD *)v52 + 1) = v56;
      }
      v57 = v15[10];
      v58 = (char *)a1 + v57;
      v59 = (char *)a2 + v57;
      v60 = type metadata accessor for ImpressionMetrics(0);
      v61 = *(_QWORD *)(v60 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v61 + 48))(v59, 1, v60))
      {
        v62 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
        memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v61 + 16))(v58, v59, v60);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v61 + 56))(v58, 0, 1, v60);
      }
      v63 = v15[11];
      v64 = (char *)a1 + v63;
      v65 = (char *)a2 + v63;
      v66 = *(_QWORD *)((char *)a2 + v63 + 24);
      if (v66)
      {
        *((_QWORD *)v64 + 3) = v66;
        *((_QWORD *)v64 + 4) = *((_QWORD *)v65 + 4);
        (**(void (***)(void))(v66 - 8))();
      }
      else
      {
        v67 = *(_OWORD *)v65;
        v68 = *((_OWORD *)v65 + 1);
        *((_QWORD *)v64 + 4) = *((_QWORD *)v65 + 4);
        *(_OWORD *)v64 = v67;
        *((_OWORD *)v64 + 1) = v68;
      }
    }
    else
    {
      *a1 = *a2;
      a1[1] = a2[1];
      if ((_DWORD)EnumCaseMultiPayload == 1)
      {
        a1[2] = a2[2];
        swift_bridgeObjectRetain();
        swift_retain();
      }
      else
      {
        swift_bridgeObjectRetain();
      }
    }
    swift_storeEnumTagMultiPayload(a1, a3, v7);
  }
  return a1;
}

_OWORD *sub_2A0770(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6;
  int *v7;
  uint64_t v8;
  _OWORD *v9;
  _OWORD *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  __int128 v32;

  if (swift_getEnumCaseMultiPayload(a2, a3) == 2)
  {
    v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    a1[2] = a2[2];
    v7 = (int *)type metadata accessor for Link(0);
    v8 = v7[7];
    v9 = (_OWORD *)((char *)a1 + v8);
    v10 = (_OWORD *)((char *)a2 + v8);
    v11 = (int *)type metadata accessor for ArtworkModel(0);
    v12 = *((_QWORD *)v11 - 1);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
    {
      v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      v14 = v10[1];
      *v9 = *v10;
      v9[1] = v14;
      *((_BYTE *)v9 + 32) = *((_BYTE *)v10 + 32);
      *(_OWORD *)((char *)v9 + 40) = *(_OWORD *)((char *)v10 + 40);
      *((_QWORD *)v9 + 7) = *((_QWORD *)v10 + 7);
      *((_BYTE *)v9 + 64) = *((_BYTE *)v10 + 64);
      *(_OWORD *)((char *)v9 + 113) = *(_OWORD *)((char *)v10 + 113);
      *(_OWORD *)((char *)v9 + 104) = *(_OWORD *)((char *)v10 + 104);
      *(_OWORD *)((char *)v9 + 88) = *(_OWORD *)((char *)v10 + 88);
      *(_OWORD *)((char *)v9 + 72) = *(_OWORD *)((char *)v10 + 72);
      *((_BYTE *)v9 + 129) = *((_BYTE *)v10 + 129);
      v15 = v11[11];
      v16 = (char *)v9 + v15;
      v17 = (char *)v10 + v15;
      v18 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
      *(_OWORD *)((char *)v9 + v11[12]) = *(_OWORD *)((char *)v10 + v11[12]);
      *((_BYTE *)v9 + v11[13]) = *((_BYTE *)v10 + v11[13]);
      *((_BYTE *)v9 + v11[14]) = *((_BYTE *)v10 + v11[14]);
      *((_BYTE *)v9 + v11[15]) = *((_BYTE *)v10 + v11[15]);
      *(_OWORD *)((char *)v9 + v11[16]) = *(_OWORD *)((char *)v10 + v11[16]);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
    }
    *((_BYTE *)a1 + v7[8]) = *((_BYTE *)a2 + v7[8]);
    v19 = v7[9];
    v20 = (char *)a1 + v19;
    v21 = (char *)a2 + v19;
    v22 = *((_OWORD *)v21 + 1);
    *(_OWORD *)v20 = *(_OWORD *)v21;
    *((_OWORD *)v20 + 1) = v22;
    *((_QWORD *)v20 + 4) = *((_QWORD *)v21 + 4);
    v23 = v7[10];
    v24 = (char *)a1 + v23;
    v25 = (char *)a2 + v23;
    v26 = type metadata accessor for ImpressionMetrics(0);
    v27 = *(_QWORD *)(v26 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
    {
      v28 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v24, v25, v26);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
    }
    v29 = v7[11];
    v30 = (char *)a1 + v29;
    v31 = (char *)a2 + v29;
    v32 = *((_OWORD *)v31 + 1);
    *(_OWORD *)v30 = *(_OWORD *)v31;
    *((_OWORD *)v30 + 1) = v32;
    *((_QWORD *)v30 + 4) = *((_QWORD *)v31 + 4);
    swift_storeEnumTagMultiPayload(a1, a3, 2);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

_OWORD *sub_2A0A00(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6;
  int *v7;
  uint64_t v8;
  _OWORD *v9;
  _OWORD *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  __int128 v32;

  if (a1 != a2)
  {
    sub_145D8((uint64_t)a1, type metadata accessor for ShowEpisodesShelvesProvider.Info.Footer);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 2)
    {
      v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      a1[2] = a2[2];
      v7 = (int *)type metadata accessor for Link(0);
      v8 = v7[7];
      v9 = (_OWORD *)((char *)a1 + v8);
      v10 = (_OWORD *)((char *)a2 + v8);
      v11 = (int *)type metadata accessor for ArtworkModel(0);
      v12 = *((_QWORD *)v11 - 1);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
      {
        v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
        memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
      }
      else
      {
        v14 = v10[1];
        *v9 = *v10;
        v9[1] = v14;
        *((_BYTE *)v9 + 32) = *((_BYTE *)v10 + 32);
        *(_OWORD *)((char *)v9 + 40) = *(_OWORD *)((char *)v10 + 40);
        *((_QWORD *)v9 + 7) = *((_QWORD *)v10 + 7);
        *((_BYTE *)v9 + 64) = *((_BYTE *)v10 + 64);
        *(_OWORD *)((char *)v9 + 113) = *(_OWORD *)((char *)v10 + 113);
        *(_OWORD *)((char *)v9 + 104) = *(_OWORD *)((char *)v10 + 104);
        *(_OWORD *)((char *)v9 + 88) = *(_OWORD *)((char *)v10 + 88);
        *(_OWORD *)((char *)v9 + 72) = *(_OWORD *)((char *)v10 + 72);
        *((_BYTE *)v9 + 129) = *((_BYTE *)v10 + 129);
        v15 = v11[11];
        v16 = (char *)v9 + v15;
        v17 = (char *)v10 + v15;
        v18 = type metadata accessor for ArtworkCrop(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
        *(_OWORD *)((char *)v9 + v11[12]) = *(_OWORD *)((char *)v10 + v11[12]);
        *((_BYTE *)v9 + v11[13]) = *((_BYTE *)v10 + v11[13]);
        *((_BYTE *)v9 + v11[14]) = *((_BYTE *)v10 + v11[14]);
        *((_BYTE *)v9 + v11[15]) = *((_BYTE *)v10 + v11[15]);
        *(_OWORD *)((char *)v9 + v11[16]) = *(_OWORD *)((char *)v10 + v11[16]);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
      }
      *((_BYTE *)a1 + v7[8]) = *((_BYTE *)a2 + v7[8]);
      v19 = v7[9];
      v20 = (char *)a1 + v19;
      v21 = (char *)a2 + v19;
      v22 = *((_OWORD *)v21 + 1);
      *(_OWORD *)v20 = *(_OWORD *)v21;
      *((_OWORD *)v20 + 1) = v22;
      *((_QWORD *)v20 + 4) = *((_QWORD *)v21 + 4);
      v23 = v7[10];
      v24 = (char *)a1 + v23;
      v25 = (char *)a2 + v23;
      v26 = type metadata accessor for ImpressionMetrics(0);
      v27 = *(_QWORD *)(v26 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
      {
        v28 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
        memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v24, v25, v26);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
      }
      v29 = v7[11];
      v30 = (char *)a1 + v29;
      v31 = (char *)a2 + v29;
      v32 = *((_OWORD *)v31 + 1);
      *(_OWORD *)v30 = *(_OWORD *)v31;
      *((_OWORD *)v30 + 1) = v32;
      *((_QWORD *)v30 + 4) = *((_QWORD *)v31 + 4);
      swift_storeEnumTagMultiPayload(a1, a3, 2);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_2A0CA8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = &unk_304098;
  v4[1] = &unk_304130;
  result = type metadata accessor for Link(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    swift_initEnumMetadataMultiPayload(a1, 256, 3, v4);
    return 0;
  }
  return result;
}

uint64_t FlowAction.__allocating_init(_:id:title:presentationContext:animationBehavior:presentationStyle:destinationPageHeader:actionMetrics:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char *a6, int a7, int a8, char *a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v18;

  v18 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
  FlowAction.init(_:id:title:presentationContext:animationBehavior:presentationStyle:destinationPageHeader:actionMetrics:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  return v18;
}

uint64_t static FlowAction.manageCategoriesPage(actionMetrics:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  id v9;
  id v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v15[14];
  char v16;
  char v17;

  v2 = type metadata accessor for ActionMetrics(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v15[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = type metadata accessor for FlowDestination(0);
  __chkstk_darwin(v6);
  v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = objc_msgSend((id)objc_opt_self(UITraitCollection), "currentTraitCollection");
  v10 = objc_msgSend(v9, "userInterfaceIdiom");

  if (v10)
    v11 = 5;
  else
    v11 = 4;
  swift_storeEnumTagMultiPayload(v8, v6, 51);
  v17 = v11;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  v16 = 0;
  v12 = type metadata accessor for FlowAction(0);
  v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  FlowAction.init(_:id:title:presentationContext:animationBehavior:presentationStyle:destinationPageHeader:actionMetrics:)((uint64_t)v8, 0, 0, 0, 0, &v17, 0, 48, &v16, (uint64_t)v5);
  return v13;
}

ShelfKit::FlowPresentationContext_optional __swiftcall FlowPresentationContext.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  ShelfKit::FlowPresentationContext_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_375E80, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 15;
  if (v5 < 0xF)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t FlowPresentationContext.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_2A0FBC + 4 * byte_304150[*v0]))(0x7265666E69, 0xE500000000000000);
}

uint64_t sub_2A0FBC()
{
  return 0x61746544776F6873;
}

uint64_t sub_2A0FF4()
{
  return 0x4D746E6573657270;
}

unint64_t sub_2A1014()
{
  return 0xD000000000000015;
}

unint64_t sub_2A103C()
{
  return 0xD000000000000010;
}

uint64_t sub_2A10D8()
{
  return 0x7463656C6573;
}

uint64_t sub_2A10EC()
{
  return 0x6563616C706572;
}

uint64_t sub_2A1104()
{
  return 0x546563616C706572;
}

uint64_t sub_2A1128(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1E0E28(*a1, *a2);
}

Swift::Int sub_2A1134()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  v0 = FlowPresentationContext.rawValue.getter();
  String.hash(into:)(v3, v0, v1);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_2A1198(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = FlowPresentationContext.rawValue.getter();
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease();
}

Swift::Int sub_2A11E8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  v0 = FlowPresentationContext.rawValue.getter();
  String.hash(into:)(v3, v0, v1);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

ShelfKit::FlowPresentationContext_optional sub_2A1248(Swift::String *a1)
{
  return FlowPresentationContext.init(rawValue:)(*a1);
}

uint64_t sub_2A1254@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = FlowPresentationContext.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t FlowAnimationBehavior.rawValue.getter(char a1)
{
  if (!a1)
    return 0x7265666E69;
  if (a1 == 1)
    return 0x726576656ELL;
  return 0x737961776C61;
}

uint64_t sub_2A12C8(_BYTE *a1, _BYTE *a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;

  v2 = *a1;
  v3 = 0xE500000000000000;
  v4 = 0xE500000000000000;
  v5 = 0x726576656ELL;
  if (v2 != 1)
  {
    v5 = 0x737961776C61;
    v4 = 0xE600000000000000;
  }
  if (*a1)
    v6 = v5;
  else
    v6 = 0x7265666E69;
  if (v2)
    v7 = v4;
  else
    v7 = 0xE500000000000000;
  v8 = 0x726576656ELL;
  if (*a2 != 1)
  {
    v8 = 0x737961776C61;
    v3 = 0xE600000000000000;
  }
  if (*a2)
    v9 = v8;
  else
    v9 = 0x7265666E69;
  if (*a2)
    v10 = v3;
  else
    v10 = 0xE500000000000000;
  if (v6 == v9 && v7 == v10)
  {
    v11 = 1;
    v10 = v7;
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v7, v9, v10, 0);
  }
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v10);
  return v11 & 1;
}

Swift::Int sub_2A13B4()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7);
  v2 = 0xE500000000000000;
  v3 = 0x726576656ELL;
  if (v1 != 1)
  {
    v3 = 0x737961776C61;
    v2 = 0xE600000000000000;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 0x7265666E69;
  if (v1)
    v5 = v2;
  else
    v5 = 0xE500000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_2A1448(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0xE500000000000000;
  v3 = 0x726576656ELL;
  if (*v1 != 1)
  {
    v3 = 0x737961776C61;
    v2 = 0xE600000000000000;
  }
  if (*v1)
    v4 = v3;
  else
    v4 = 0x7265666E69;
  if (*v1)
    v5 = v2;
  else
    v5 = 0xE500000000000000;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_2A14B8()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7);
  v2 = 0xE500000000000000;
  v3 = 0x726576656ELL;
  if (v1 != 1)
  {
    v3 = 0x737961776C61;
    v2 = 0xE600000000000000;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 0x7265666E69;
  if (v1)
    v5 = v2;
  else
    v5 = 0xE500000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

unint64_t sub_2A1548@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = _s8ShelfKit21FlowAnimationBehaviorO8rawValueACSgSS_tcfC_0(*a1);
  *a2 = result;
  return result;
}

void sub_2A1574(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE500000000000000;
  v4 = 0xE500000000000000;
  v5 = 0x726576656ELL;
  if (v2 != 1)
  {
    v5 = 0x737961776C61;
    v4 = 0xE600000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x7265666E69;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t FlowOrigin.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0x6C616E7265747865;
  else
    return 0x7070616E69;
}

ShelfKit::FlowOrigin_optional __swiftcall FlowOrigin.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  Swift::Int v5;
  ShelfKit::FlowOrigin_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_376070, v3);
  result.value = swift_bridgeObjectRelease(object);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *v4 = v7;
  return result;
}

Swift::Int sub_2A1664()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  if (v1)
    v2 = 0x6C616E7265747865;
  else
    v2 = 0x7070616E69;
  if (v1)
    v3 = 0xE800000000000000;
  else
    v3 = 0xE500000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_2A16E0(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0x6C616E7265747865;
  else
    v2 = 0x7070616E69;
  if (*v1)
    v3 = 0xE800000000000000;
  else
    v3 = 0xE500000000000000;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_2A1738()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  if (v1)
    v2 = 0x6C616E7265747865;
  else
    v2 = 0x7070616E69;
  if (v1)
    v3 = 0xE800000000000000;
  else
    v3 = 0xE500000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

ShelfKit::FlowOrigin_optional sub_2A17B0(Swift::String *a1)
{
  return FlowOrigin.init(rawValue:)(*a1);
}

void sub_2A17BC(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x7070616E69;
  if (*v1)
    v2 = 0x6C616E7265747865;
  v3 = 0xE500000000000000;
  if (*v1)
    v3 = 0xE800000000000000;
  *a1 = v2;
  a1[1] = v3;
}

ShelfKit::FlowDestinationPageHeader_optional __swiftcall FlowDestinationPageHeader.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  ShelfKit::FlowDestinationPageHeader_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_3760C0, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 3;
  if (v5 < 3)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t FlowDestinationPageHeader.rawValue.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 1919246965;
  if (*v0 != 1)
    v1 = 0x746954656772616CLL;
  if (*v0)
    return v1;
  else
    return 0x647261646E617473;
}

uint64_t sub_2A18A8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1E06F8(*a1, *a2);
}

Swift::Int sub_2A18B4()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7);
  v2 = 0xE400000000000000;
  v3 = 1919246965;
  if (v1 != 1)
  {
    v3 = 0x746954656772616CLL;
    v2 = 0xEA0000000000656CLL;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 0x647261646E617473;
  if (v1)
    v5 = v2;
  else
    v5 = 0xE800000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_2A1950(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0xE400000000000000;
  v3 = 1919246965;
  if (*v1 != 1)
  {
    v3 = 0x746954656772616CLL;
    v2 = 0xEA0000000000656CLL;
  }
  if (*v1)
    v4 = v3;
  else
    v4 = 0x647261646E617473;
  if (*v1)
    v5 = v2;
  else
    v5 = 0xE800000000000000;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_2A19C8()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7);
  v2 = 0xE400000000000000;
  v3 = 1919246965;
  if (v1 != 1)
  {
    v3 = 0x746954656772616CLL;
    v2 = 0xEA0000000000656CLL;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 0x647261646E617473;
  if (v1)
    v5 = v2;
  else
    v5 = 0xE800000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

ShelfKit::FlowDestinationPageHeader_optional sub_2A1A60(Swift::String *a1)
{
  return FlowDestinationPageHeader.init(rawValue:)(*a1);
}

void sub_2A1A6C(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE800000000000000;
  v4 = 0xE400000000000000;
  v5 = 1919246965;
  if (v2 != 1)
  {
    v5 = 0x746954656772616CLL;
    v4 = 0xEA0000000000656CLL;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x647261646E617473;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t FlowAction.init(_:id:title:presentationContext:animationBehavior:presentationStyle:destinationPageHeader:actionMetrics:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char *a6, int a7, int a8, char *a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;

  v11 = v10;
  v45 = a8;
  v42 = a7;
  v43 = a4;
  v44 = a5;
  v39 = a2;
  v40 = a10;
  v41 = a3;
  v14 = type metadata accessor for UUID(0);
  v37 = *(_QWORD *)(v14 - 8);
  v38 = v14;
  __chkstk_darwin(v14);
  v16 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v17);
  v19 = (char *)&v37 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for ActionMetrics(0);
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v23 = (char *)&v37 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = *a6;
  v25 = *a9;
  v26 = v11 + OBJC_IVAR____TtC8ShelfKit10FlowAction_destinationType;
  v46 = a1;
  sub_14510(a1, v11 + OBJC_IVAR____TtC8ShelfKit10FlowAction_destinationType, type metadata accessor for FlowDestination);
  v27 = type metadata accessor for FlowAction.DestinationType(0);
  swift_storeEnumTagMultiPayload(v26, v27, 0);
  v28 = (_QWORD *)(v11 + OBJC_IVAR____TtC8ShelfKit10FlowAction_referrerUrl);
  *v28 = 0;
  v28[1] = 0;
  *(_BYTE *)(v11 + OBJC_IVAR____TtC8ShelfKit10FlowAction_presentationContext) = v24;
  *(_BYTE *)(v11 + OBJC_IVAR____TtC8ShelfKit10FlowAction_animationBehavior) = v42;
  *(_BYTE *)(v11 + OBJC_IVAR____TtC8ShelfKit10FlowAction_destinationPageHeader) = v25;
  v29 = v40;
  v30 = v41;
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v23, v40, v20);
  v31 = type metadata accessor for ImpressionMetrics(0);
  v32 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v19, 1, 1, v31);
  if (v30)
  {
    v33 = v39;
  }
  else
  {
    UUID.init()(v32);
    v33 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
    v30 = v34;
    (*(void (**)(char *, uint64_t))(v37 + 8))(v16, v38);
  }
  *(_QWORD *)(v11 + 16) = v33;
  *(_QWORD *)(v11 + 24) = v30;
  v35 = v44;
  *(_QWORD *)(v11 + 32) = v43;
  *(_QWORD *)(v11 + 40) = v35;
  *(_BYTE *)(v11 + 48) = v45;
  (*(void (**)(uint64_t, char *, uint64_t))(v21 + 32))(v11 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v23, v20);
  sub_15BD4((uint64_t)v19, v11 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics, (uint64_t *)&unk_3B8790);
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v29, v20);
  sub_145D8(v46, type metadata accessor for FlowDestination);
  return v11;
}

uint64_t FlowAction.__allocating_init(deserializing:using:)(uint64_t a1, uint64_t a2)
{
  return sub_178BC(a1, a2, (uint64_t (*)(uint64_t, uint64_t))FlowAction.init(deserializing:using:));
}

char *FlowAction.init(deserializing:using:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  _BYTE *v24;
  void (*v25)(char *, uint64_t, uint64_t, __n128);
  uint64_t v26;
  void (*v27)(char *);
  uint64_t v28;
  uint64_t v29;
  char *v30;
  void (*v31)(_QWORD, _QWORD);
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  char v43;
  char *v44;
  uint64_t v45;
  char v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  void (*v51)(char *, uint64_t);
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  char *v60;
  unint64_t v61;
  char v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(char *, uint64_t, uint64_t);
  void (*v74)(char *, uint64_t, uint64_t);
  _BYTE *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  void (*v87)(_QWORD, _QWORD);
  uint64_t v88;
  uint64_t v89;

  v88 = a2;
  v3 = type metadata accessor for JSONContext(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v80 = (char *)&v71 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v8 = (char *)&v71 - v7;
  v9 = type metadata accessor for JSONObject(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v82 = (char *)&v71 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v81 = (char *)&v71 - v13;
  __chkstk_darwin(v14);
  v79 = (char *)&v71 - v15;
  __chkstk_darwin(v16);
  v78 = (char *)&v71 - v17;
  __chkstk_darwin(v18);
  v20 = (char *)&v71 - v19;
  v21 = type metadata accessor for LazyJSFlowDestination(0);
  v22 = __chkstk_darwin(v21);
  v24 = (char *)&v71 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = v10;
  v84 = v9;
  v25 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v10 + 16);
  v85 = a1;
  v25(v20, a1, v9, v22);
  v26 = v4;
  v27 = *(void (**)(char *))(v4 + 16);
  v28 = v88;
  v29 = v3;
  v27(v8);
  v30 = v86;
  swift_retain();
  v31 = v87;
  sub_2C4060((uint64_t)v20, (uint64_t)v8, v24);
  if (v31)
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v28, v29);
    (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v85, v84);
    v32 = type metadata accessor for FlowAction(0);
    swift_deallocPartialClassInstance(v30, v32, *(unsigned int *)(*(_QWORD *)v30 + 48), *(unsigned __int16 *)(*(_QWORD *)v30 + 52));
    return v8;
  }
  v73 = (void (*)(char *, uint64_t, uint64_t))v27;
  v74 = (void (*)(char *, uint64_t, uint64_t))v25;
  v75 = v24;
  v76 = 0;
  v77 = v26;
  v72 = v29;
  v33 = v78;
  v34 = v85;
  v35 = JSONObject.subscript.getter(0xD000000000000013, 0x8000000000315B60);
  v36 = v33;
  v37 = JSONObject.string.getter(v35);
  v40 = v83;
  v39 = v84;
  v41 = v30;
  v42 = v79;
  if (!v38)
    goto LABEL_9;
  if (v37 != 0xD00000000000001BLL || v38 != 0x8000000000315BA0)
  {
    v43 = _stringCompareWithSmolCheck(_:_:expecting:)(v37, v38, 0xD00000000000001BLL, 0x8000000000315BA0, 0);
    swift_bridgeObjectRelease();
    if ((v43 & 1) != 0)
      goto LABEL_8;
LABEL_9:
    v47 = sub_2A3474();
    JSONObject.stringEnumOrNil<A>()((uint64_t *)((char *)&v89 + 2), &type metadata for FlowPresentationContext, v47);
    v48 = v36;
    v45 = v39;
    v87 = *(void (**)(_QWORD, _QWORD))(v40 + 8);
    v87(v48, v39);
    v46 = BYTE2(v89);
    if (BYTE2(v89) == 15)
      v46 = 0;
    goto LABEL_11;
  }
  swift_bridgeObjectRelease();
LABEL_8:
  v44 = v36;
  v45 = v39;
  v87 = *(void (**)(_QWORD, _QWORD))(v40 + 8);
  v87(v44, v39);
  v46 = 13;
LABEL_11:
  v30[OBJC_IVAR____TtC8ShelfKit10FlowAction_presentationContext] = v46;
  v49 = v34;
  JSONObject.subscript.getter(0xD000000000000011, 0x800000000030BC40);
  v50 = sub_2A34B8();
  JSONObject.stringEnum<A>(or:)((uint64_t *)((char *)&v89 + 1), sub_BE128, 0, &type metadata for FlowAnimationBehavior, v50);
  v51 = (void (*)(char *, uint64_t))v87;
  v87(v42, v45);
  v41[OBJC_IVAR____TtC8ShelfKit10FlowAction_animationBehavior] = BYTE1(v89);
  v52 = &v41[OBJC_IVAR____TtC8ShelfKit10FlowAction_destinationType];
  v53 = (uint64_t)v75;
  sub_14510((uint64_t)v75, (uint64_t)&v41[OBJC_IVAR____TtC8ShelfKit10FlowAction_destinationType], type metadata accessor for LazyJSFlowDestination);
  v54 = type metadata accessor for FlowAction.DestinationType(0);
  swift_storeEnumTagMultiPayload(v52, v54, 1);
  v55 = JSONObject.subscript.getter(0x7265727265666572, 0xEB000000006C7255);
  v56 = JSONObject.string.getter(v55);
  v58 = v57;
  v51(v42, v45);
  v59 = (uint64_t *)&v41[OBJC_IVAR____TtC8ShelfKit10FlowAction_referrerUrl];
  *v59 = v56;
  v59[1] = v58;
  v60 = v81;
  JSONObject.subscript.getter(0xD000000000000015, 0x8000000000315B80);
  v61 = sub_2A34FC();
  JSONObject.stringEnumOrNil<A>()(&v89, &type metadata for FlowDestinationPageHeader, v61);
  v51(v60, v45);
  v62 = v89;
  if (v89 == 3)
    v62 = 0;
  v41[OBJC_IVAR____TtC8ShelfKit10FlowAction_destinationPageHeader] = v62;
  swift_release();
  v63 = v82;
  v74(v82, v49, v45);
  v64 = v80;
  v65 = v88;
  v66 = v72;
  v73(v80, v88, v72);
  v67 = (uint64_t)v64;
  v8 = v41;
  v68 = v76;
  v69 = Action.init(deserializing:using:)(v63, v67);
  if (!v68)
    v8 = (char *)v69;
  (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v65, v66);
  v87(v49, v45);
  sub_145D8(v53, type metadata accessor for LazyJSFlowDestination);
  return v8;
}

uint64_t sub_2A22FC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  int *v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t (*v12)(_QWORD);
  uint64_t v13;
  uint64_t v15;
  _BYTE v16[16];
  _BYTE v17[32];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
  __chkstk_darwin(v3);
  v5 = &v16[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = (int *)type metadata accessor for LazyJSFlowDestination(0);
  __chkstk_darwin(v6);
  v8 = &v16[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for FlowAction.DestinationType(0);
  __chkstk_darwin(v9);
  v11 = &v16[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_14510(v1 + OBJC_IVAR____TtC8ShelfKit10FlowAction_destinationType, (uint64_t)v11, v12);
  if (swift_getEnumCaseMultiPayload(v11, v9) == 1)
  {
    sub_3C56C((uint64_t)v11, (uint64_t)v8, type metadata accessor for LazyJSFlowDestination);
    v13 = *v8;
    sub_267BC((uint64_t)&v8[v6[5]], (uint64_t)v5, &qword_3B4370);
    sub_267BC((uint64_t)&v8[v6[6]], (uint64_t)v17, (uint64_t *)&unk_3BC540);
    v16[15] = v8[v6[7]];
    sub_2C4DAC(v13, (uint64_t)v5, (uint64_t)v17, a1);
    return sub_145D8((uint64_t)v8, type metadata accessor for LazyJSFlowDestination);
  }
  else
  {
    sub_3C56C((uint64_t)v11, a1, type metadata accessor for FlowDestination);
    v15 = type metadata accessor for FlowDestination(0);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(a1, 0, 1, v15);
  }
}

uint64_t FlowAction.referrerUrl.getter()
{
  return sub_1CCE8(&OBJC_IVAR____TtC8ShelfKit10FlowAction_referrerUrl);
}

uint64_t sub_2A24D4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;
  _BYTE v5[24];

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC8ShelfKit10FlowAction_presentationContext);
  result = swift_beginAccess(v3, v5, 0, 0);
  *a1 = *v3;
  return result;
}

uint64_t sub_2A2520(char *a1)
{
  uint64_t v1;
  char v2;
  _BYTE *v3;
  uint64_t result;
  _BYTE v5[24];

  v2 = *a1;
  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC8ShelfKit10FlowAction_presentationContext);
  result = swift_beginAccess(v1 + OBJC_IVAR____TtC8ShelfKit10FlowAction_presentationContext, v5, 1, 0);
  *v3 = v2;
  return result;
}

uint64_t (*sub_2A2570(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC8ShelfKit10FlowAction_presentationContext, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t sub_2A25B4()
{
  uint64_t v0;
  unsigned __int8 *v1;
  _BYTE v3[24];

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC8ShelfKit10FlowAction_animationBehavior);
  swift_beginAccess(v0 + OBJC_IVAR____TtC8ShelfKit10FlowAction_animationBehavior, v3, 0, 0);
  return *v1;
}

uint64_t sub_2A25F8(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;
  _BYTE v5[24];

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC8ShelfKit10FlowAction_animationBehavior);
  result = swift_beginAccess(v3, v5, 1, 0);
  *v3 = a1;
  return result;
}

uint64_t (*sub_2A2640(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC8ShelfKit10FlowAction_animationBehavior, a1, 33, 0);
  return j__swift_endAccess;
}

void FlowAction.destinationPageHeader.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + OBJC_IVAR____TtC8ShelfKit10FlowAction_destinationPageHeader);
}

unint64_t sub_2A2698()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t (*v7)(_QWORD);
  unint64_t v8;
  uint64_t v10;

  v1 = type metadata accessor for LazyJSFlowDestination(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for FlowAction.DestinationType(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_14510(v0 + OBJC_IVAR____TtC8ShelfKit10FlowAction_destinationType, (uint64_t)v6, v7);
  if (swift_getEnumCaseMultiPayload(v6, v4) == 1)
  {
    sub_3C56C((uint64_t)v6, (uint64_t)v3, type metadata accessor for LazyJSFlowDestination);
    v8 = (unint64_t)LazyJSFlowDestination.appEntityAnnotation()();
    sub_145D8((uint64_t)v3, type metadata accessor for LazyJSFlowDestination);
  }
  else
  {
    sub_145D8((uint64_t)v6, type metadata accessor for FlowAction.DestinationType);
    return 0;
  }
  return v8;
}

void FlowAction.init(uniqueId:title:presentationStyle:actionMetrics:impressionMetrics:)()
{
  _swift_stdlib_reportUnimplementedInitializer("ShelfKit.FlowAction", 19, "init(uniqueId:title:presentationStyle:actionMetrics:impressionMetrics:)", 71, 0);
  __break(1u);
}

uint64_t sub_2A27D0()
{
  uint64_t v0;

  sub_145D8(v0 + OBJC_IVAR____TtC8ShelfKit10FlowAction_destinationType, type metadata accessor for FlowAction.DestinationType);
  return swift_bridgeObjectRelease();
}

uint64_t FlowAction.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics;
  v2 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_1459C(v0 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics, (uint64_t *)&unk_3B8790);
  sub_145D8(v0 + OBJC_IVAR____TtC8ShelfKit10FlowAction_destinationType, type metadata accessor for FlowAction.DestinationType);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t FlowAction.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics;
  v2 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_1459C(v0 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics, (uint64_t *)&unk_3B8790);
  sub_145D8(v0 + OBJC_IVAR____TtC8ShelfKit10FlowAction_destinationType, type metadata accessor for FlowAction.DestinationType);
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t FlowAction.generateClickEventWithItemLevelFields(sender:interactionView:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  _BYTE v15[135];
  unsigned __int8 v16;
  _OWORD v17[8];

  v4 = _s8ShelfKit10FlowActionC9metricsId6senderSSypSg_tF_0(a1);
  v6 = v5;
  v7 = sub_2A3364(a1, a2);
  v9 = v8;
  v10 = static MetricsActionType.navigate.getter();
  v12 = v11;
  v16 = 19;
  sub_1FB80(v17);
  sub_15BD4((uint64_t)v17, (uint64_t)v15, &qword_3B1808);
  v13 = sub_B2EB8(v4, v6, v10, v12, v7, v9, 0, 0, (Swift::String)0, &v16, 0, (uint64_t)v15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v13;
}

uint64_t FlowAction.generateItemLevelLocationFields(locationPosition:sender:interactionView:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;

  v8 = _s8ShelfKit10FlowActionC9metricsId6senderSSypSg_tF_0(a2);
  v10 = v9;
  v11 = sub_2A3364(a2, a3);
  v13 = v12;
  result = _s8ShelfKit10FlowActionC11metricsName6senderSSypSg_tF_0(a2);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v10;
  *(_BYTE *)(a4 + 16) = 1;
  *(_QWORD *)(a4 + 24) = a1;
  *(_QWORD *)(a4 + 32) = v11;
  *(_QWORD *)(a4 + 40) = v13;
  *(_QWORD *)(a4 + 48) = result;
  *(_QWORD *)(a4 + 56) = v15;
  return result;
}

uint64_t ChannelPowerSwooshAction.channelAdamId.getter()
{
  return sub_1CCE8(&OBJC_IVAR____TtC8ShelfKit24ChannelPowerSwooshAction_channelAdamId);
}

uint64_t ChannelPowerSwooshAction.channelName.getter()
{
  return sub_1CCE8(&OBJC_IVAR____TtC8ShelfKit24ChannelPowerSwooshAction_channelName);
}

uint64_t ChannelPowerSwooshAction.__allocating_init(deserializing:using:)(uint64_t a1, uint64_t a2)
{
  return sub_178BC(a1, a2, (uint64_t (*)(uint64_t, uint64_t))ChannelPowerSwooshAction.init(deserializing:using:));
}

char *ChannelPowerSwooshAction.init(deserializing:using:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t);
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t);
  char *v35;
  uint64_t v36;
  uint64_t v37;

  v3 = v2;
  v36 = a2;
  v37 = type metadata accessor for JSONContext(0);
  v33 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v35 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for JSONObject(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v12 = (char *)&v32 - v11;
  swift_retain();
  v13 = JSONObject.subscript.getter(0x416C656E6E616863, 0xED000064496D6164);
  v14 = JSONObject.string.getter(v13);
  v16 = v15;
  v17 = *(void (**)(char *, uint64_t))(v7 + 8);
  v17(v12, v6);
  v18 = (uint64_t *)(v3 + OBJC_IVAR____TtC8ShelfKit24ChannelPowerSwooshAction_channelAdamId);
  *v18 = v14;
  v18[1] = v16;
  v19 = JSONObject.subscript.getter(0x4E6C656E6E616863, 0xEB00000000656D61);
  v20 = JSONObject.string.getter(v19);
  v22 = v21;
  v34 = (void (*)(uint64_t, uint64_t))v17;
  v17(v12, v6);
  v23 = (uint64_t *)(v3 + OBJC_IVAR____TtC8ShelfKit24ChannelPowerSwooshAction_channelName);
  *v23 = v20;
  v23[1] = v22;
  v24 = v36;
  swift_release();
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v26 = a1;
  v25(v9, a1, v6);
  v27 = v33;
  v28 = (uint64_t)v35;
  v29 = v37;
  (*(void (**)(char *, uint64_t))(v33 + 16))(v35, v24);
  v30 = FlowAction.init(deserializing:using:)((uint64_t)v9, v28);
  (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v24, v29);
  v34(v26, v6);
  return v30;
}

void ChannelPowerSwooshAction.init(_:id:title:presentationContext:animationBehavior:presentationStyle:destinationPageHeader:actionMetrics:)()
{
  _swift_stdlib_reportUnimplementedInitializer("ShelfKit.ChannelPowerSwooshAction", 33, "init(_:id:title:presentationContext:animationBehavior:presentationStyle:destinationPageHeader:actionMetrics:)", 109, 0);
  __break(1u);
}

uint64_t sub_2A2D58()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit24ChannelPowerSwooshAction_channelAdamId + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit24ChannelPowerSwooshAction_channelName + 8));
}

uint64_t ChannelPowerSwooshAction.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics;
  v2 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_1459C(v0 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics, (uint64_t *)&unk_3B8790);
  sub_145D8(v0 + OBJC_IVAR____TtC8ShelfKit10FlowAction_destinationType, type metadata accessor for FlowAction.DestinationType);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t ChannelPowerSwooshAction.__deallocating_deinit()
{
  uint64_t v0;

  ChannelPowerSwooshAction.deinit();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t _s8ShelfKit10FlowOriginO2eeoiySbAC_ACtFZ_0(_BYTE *a1, _BYTE *a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v8;

  v2 = *a1 == 0;
  if (*a1)
    v3 = 0x6C616E7265747865;
  else
    v3 = 0x7070616E69;
  if (v2)
    v4 = 0xE500000000000000;
  else
    v4 = 0xE800000000000000;
  if (*a2)
    v5 = 0x6C616E7265747865;
  else
    v5 = 0x7070616E69;
  if (*a2)
    v6 = 0xE800000000000000;
  else
    v6 = 0xE500000000000000;
  if (v3 == v5 && v4 == v6)
  {
    v8 = 1;
    v6 = v4;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v8 & 1;
}

uint64_t _s8ShelfKit10FlowActionC6seeAllyAcA0C11DestinationOFZ_0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(_QWORD);
  id v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *object;
  uint64_t countAndFlagsBits;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  __int16 v46;
  Swift::String v47;

  v2 = type metadata accessor for ScalarDictionary(0);
  __chkstk_darwin(v2);
  v45 = (char *)&object - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for MetricsData.Configuration(0);
  v43 = *(_QWORD *)(v4 - 8);
  v44 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&object - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
  __chkstk_darwin(v7);
  v9 = (char *)&object - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ActionMetrics(0);
  __chkstk_darwin(v10);
  v41 = (char *)&object - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for FlowDestination(0);
  __chkstk_darwin(v12);
  v42 = (uint64_t)&object - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_14510(a1, v42, v14);
  v15 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v47._object = (void *)0xE000000000000000;
  v16._countAndFlagsBits = 0x535F4E4F49544341;
  v16._object = (void *)0xEE004C4C415F4545;
  v17._countAndFlagsBits = 0;
  v17._object = (void *)0xE000000000000000;
  v47._countAndFlagsBits = 0;
  v18 = NSLocalizedString(_:tableName:bundle:value:comment:)(v16, (Swift::String_optional)0, (NSBundle)v15, v17, v47);
  object = v18._object;
  countAndFlagsBits = v18._countAndFlagsBits;

  v20 = static MetricsTargetID.seeAll.getter(v19);
  v22 = v21;
  v23 = static MetricsTargetType.button.getter(v20, v21);
  v25 = v24;
  v26 = type metadata accessor for URL(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v9, 1, 1, v26);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0930);
  v28 = type metadata accessor for MetricsData(0);
  v29 = swift_allocObject(v27, ((*(unsigned __int8 *)(*(_QWORD *)(v28 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v28 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v28 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v28 - 8) + 80) | 7);
  *(_OWORD *)(v29 + 16) = xmmword_2EA0D0;
  v30 = static MetricsActionType.navigate.getter();
  v32 = v31;
  static MetricsData.Configuration.podcasts.getter(v30);
  static MetricsData.clickData(targetID:targetType:actionType:actionContext:actionResult:actionURL:fields:configuration:)(v20, v22, v23, v25, v30, v32, 0, 0, 0, 0, v9, &_swiftEmptyDictionarySingleton, v6);
  swift_bridgeObjectRelease();
  v33 = (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v6, v44);
  v34 = v45;
  ScalarDictionary.init()(v33);
  v35 = (uint64_t)v41;
  ActionMetrics.init(data:custom:)(v29, v34);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1459C((uint64_t)v9, &qword_3B4370);
  v46 = 0;
  v36 = type metadata accessor for FlowAction(0);
  v37 = swift_allocObject(v36, *(unsigned int *)(v36 + 48), *(unsigned __int16 *)(v36 + 52));
  FlowAction.init(_:id:title:presentationContext:animationBehavior:presentationStyle:destinationPageHeader:actionMetrics:)(v42, 0, 0, countAndFlagsBits, (uint64_t)object, (char *)&v46 + 1, 0, 48, (char *)&v46, v35);
  return v37;
}

uint64_t type metadata accessor for FlowAction(uint64_t a1)
{
  return sub_1F9D4(a1, qword_3C62C8, (uint64_t)&nominal type descriptor for FlowAction);
}

uint64_t _s8ShelfKit10FlowActionC9metricsId6senderSSypSg_tF_0(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[4];

  sub_267BC(a1, (uint64_t)v6, (uint64_t *)&unk_3BC540);
  if (!v6[3])
  {
    sub_1459C((uint64_t)v6, (uint64_t *)&unk_3BC540);
    return 0;
  }
  v1 = type metadata accessor for LegacyLockup(0);
  if ((swift_dynamicCast(&v5, v6, (char *)&type metadata for Any + 8, v1, 6) & 1) == 0)
    return 0;
  v6[0] = *(_QWORD *)(v5 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup_adamId);
  v2 = sub_144B4();
  v3 = BinaryInteger.description.getter(&type metadata for UInt64, v2);
  swift_release();
  return v3;
}

uint64_t sub_2A3364(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  switch((char)a2)
  {
    case 2:
    case 3:
    case 4:
      return static MetricsTargetType.lockup.getter(a1, a2);
    case 6:
      return static MetricsTargetType.button.getter(a1, a2);
    case 7:
      v13 = v2;
      v14 = v3;
      sub_267BC(a1, (uint64_t)v11, (uint64_t *)&unk_3BC540);
      if (v12)
      {
        v5 = type metadata accessor for LegacyLockup(0);
        v6 = swift_dynamicCast(&v10, v11, (char *)&type metadata for Any + 8, v5, 6);
        if ((v6 & 1) != 0)
        {
          v8 = swift_release();
          return static MetricsTargetType.lockup.getter(v8, v9);
        }
      }
      else
      {
        v6 = sub_1459C((uint64_t)v11, (uint64_t *)&unk_3BC540);
      }
      return static MetricsTargetType.button.getter(v6, v7);
    default:
      return static MetricsTargetType.powerSwooshItem.getter(a1, a2);
  }
}

unint64_t _s8ShelfKit21FlowAnimationBehaviorO8rawValueACSgSS_tcfC_0(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_376008, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

uint64_t type metadata accessor for FlowAction.DestinationType(uint64_t a1)
{
  return sub_1F9D4(a1, qword_3C65E0, (uint64_t)&nominal type descriptor for FlowAction.DestinationType);
}

unint64_t sub_2A3474()
{
  unint64_t result;

  result = qword_3C6268;
  if (!qword_3C6268)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for FlowPresentationContext);
    atomic_store(result, (unint64_t *)&qword_3C6268);
  }
  return result;
}

unint64_t sub_2A34B8()
{
  unint64_t result;

  result = qword_3C6270;
  if (!qword_3C6270)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for FlowAnimationBehavior);
    atomic_store(result, (unint64_t *)&qword_3C6270);
  }
  return result;
}

unint64_t sub_2A34FC()
{
  unint64_t result;

  result = qword_3C6278;
  if (!qword_3C6278)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for FlowDestinationPageHeader);
    atomic_store(result, (unint64_t *)&qword_3C6278);
  }
  return result;
}

uint64_t _s8ShelfKit10FlowActionC11metricsName6senderSSypSg_tF_0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE v5[24];
  uint64_t v6;

  sub_267BC(a1, (uint64_t)v5, (uint64_t *)&unk_3BC540);
  if (!v6)
  {
    sub_1459C((uint64_t)v5, (uint64_t *)&unk_3BC540);
    return 0;
  }
  v1 = type metadata accessor for LegacyLockup(0);
  if ((swift_dynamicCast(&v4, v5, (char *)&type metadata for Any + 8, v1, 6) & 1) == 0)
    return 0;
  if (!*(_QWORD *)(v4 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup_title + 8))
  {
    swift_release();
    return 0;
  }
  v2 = *(_QWORD *)(v4 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup_title);
  swift_bridgeObjectRetain();
  swift_release();
  return v2;
}

unint64_t sub_2A3610()
{
  unint64_t result;

  result = qword_3C6280;
  if (!qword_3C6280)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for FlowPresentationContext);
    atomic_store(result, (unint64_t *)&qword_3C6280);
  }
  return result;
}

unint64_t sub_2A3658()
{
  unint64_t result;

  result = qword_3C6288;
  if (!qword_3C6288)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for FlowAnimationBehavior);
    atomic_store(result, (unint64_t *)&qword_3C6288);
  }
  return result;
}

unint64_t sub_2A36A0()
{
  unint64_t result;

  result = qword_3C6290;
  if (!qword_3C6290)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for FlowOrigin);
    atomic_store(result, (unint64_t *)&qword_3C6290);
  }
  return result;
}

unint64_t sub_2A36E8()
{
  unint64_t result;

  result = qword_3C6298;
  if (!qword_3C6298)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for FlowDestinationPageHeader);
    atomic_store(result, (unint64_t *)&qword_3C6298);
  }
  return result;
}

uint64_t sub_2A372C@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return keypath_getTm_0(a1, &OBJC_IVAR____TtC8ShelfKit10FlowAction_presentationContext, a2);
}

uint64_t sub_2A3738(char *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm_0(a1, a2, a3, a4, &OBJC_IVAR____TtC8ShelfKit10FlowAction_presentationContext);
}

uint64_t sub_2A3744@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return keypath_getTm_0(a1, &OBJC_IVAR____TtC8ShelfKit10FlowAction_animationBehavior, a2);
}

uint64_t keypath_getTm_0@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X3>, _BYTE *a3@<X8>)
{
  _BYTE *v4;
  uint64_t result;
  _BYTE v6[24];

  v4 = (_BYTE *)(*a1 + *a2);
  result = swift_beginAccess(v4, v6, 0, 0);
  *a3 = *v4;
  return result;
}

uint64_t sub_2A379C(char *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm_0(a1, a2, a3, a4, &OBJC_IVAR____TtC8ShelfKit10FlowAction_animationBehavior);
}

uint64_t keypath_setTm_0(char *a1, _QWORD *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  char v5;
  _BYTE *v6;
  uint64_t result;
  _BYTE v8[24];

  v5 = *a1;
  v6 = (_BYTE *)(*a2 + *a5);
  result = swift_beginAccess(v6, v8, 1, 0);
  *v6 = v5;
  return result;
}

uint64_t getEnumTagSinglePayload for FlowPresentationContext(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF2)
    goto LABEL_17;
  if (a2 + 14 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 14) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 14;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 14;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 14;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xF;
  v8 = v6 - 15;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for FlowPresentationContext(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 14 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 14) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF2)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF1)
    return ((uint64_t (*)(void))((char *)&loc_2A38CC + 4 * byte_30416A[v4]))();
  *a1 = a2 + 14;
  return ((uint64_t (*)(void))((char *)sub_2A3900 + 4 * byte_304165[v4]))();
}

uint64_t sub_2A3900(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2A3908(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2A3910);
  return result;
}

uint64_t sub_2A391C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2A3924);
  *(_BYTE *)result = a2 + 14;
  return result;
}

uint64_t sub_2A3928(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2A3930(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FlowPresentationContext()
{
  return &type metadata for FlowPresentationContext;
}

ValueMetadata *type metadata accessor for FlowAnimationBehavior()
{
  return &type metadata for FlowAnimationBehavior;
}

uint64_t storeEnumTagSinglePayload for FlowOrigin(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_2A39AC + 4 * byte_304174[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_2A39E0 + 4 * byte_30416F[v4]))();
}

uint64_t sub_2A39E0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2A39E8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2A39F0);
  return result;
}

uint64_t sub_2A39FC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2A3A04);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_2A3A08(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2A3A10(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FlowOrigin()
{
  return &type metadata for FlowOrigin;
}

uint64_t _s8ShelfKit21FlowAnimationBehaviorOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_2A3A78 + 4 * byte_30417E[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_2A3AAC + 4 * byte_304179[v4]))();
}

uint64_t sub_2A3AAC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2A3AB4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2A3ABCLL);
  return result;
}

uint64_t sub_2A3AC8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2A3AD0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_2A3AD4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2A3ADC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FlowDestinationPageHeader()
{
  return &type metadata for FlowDestinationPageHeader;
}

uint64_t sub_2A3AF8()
{
  return type metadata accessor for FlowAction(0);
}

uint64_t sub_2A3B00(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  result = type metadata accessor for FlowAction.DestinationType(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_3046B8;
    v4[2] = &unk_3046D0;
    v4[3] = &unk_3046E8;
    v4[4] = &unk_3046E8;
    result = swift_updateClassMetadata2(a1, 256, 5, v4, a1 + 160);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for FlowAction(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for FlowAction);
}

uint64_t dispatch thunk of FlowAction.__allocating_init(_:id:title:presentationContext:animationBehavior:presentationStyle:destinationPageHeader:actionMetrics:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 200))();
}

uint64_t dispatch thunk of FlowAction.presentationContext.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of FlowAction.animationBehavior.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t dispatch thunk of FlowAction.appEntityAnnotation()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

uint64_t sub_2A3BCC()
{
  return type metadata accessor for ChannelPowerSwooshAction(0);
}

uint64_t type metadata accessor for ChannelPowerSwooshAction(uint64_t a1)
{
  return sub_1F9D4(a1, qword_3C6428, (uint64_t)&nominal type descriptor for ChannelPowerSwooshAction);
}

uint64_t sub_2A3BE8(uint64_t a1)
{
  _QWORD v2[2];

  v2[0] = &unk_3046B8;
  v2[1] = &unk_3046B8;
  return swift_updateClassMetadata2(a1, 256, 2, v2, a1 + 272);
}

uint64_t *sub_2A3C28(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  _OWORD *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  int *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  id v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  id v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  char *v100;
  char *v101;
  int *v102;
  unsigned int (*v103)(_QWORD *, uint64_t, int *);
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  id *v117;
  int v118;
  id v119;
  id *v120;
  int v121;
  id v122;
  id *v123;
  int v124;
  id v125;
  id *v126;
  int v127;
  id v128;
  id *v129;
  int v130;
  id v131;
  id *v132;
  int v133;
  id v134;
  id *v135;
  int v136;
  id v137;
  id *v138;
  int v139;
  id v140;
  id *v141;
  int v142;
  id v143;
  id *v144;
  int v145;
  id v146;
  uint64_t v147;
  char *v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  _QWORD *v153;
  uint64_t v154;
  uint64_t v155;
  _QWORD *v156;
  _QWORD *v157;
  uint64_t v158;
  void (*v159)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v160;
  char *v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  char *v170;
  uint64_t v171;
  void (*v172)(char *, _QWORD, uint64_t, int *);
  uint64_t v173;
  char *v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  unsigned int (*v193)(char *, uint64_t, uint64_t);
  unsigned int (*v194)(char *, uint64_t, uint64_t);
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  char *v203;
  uint64_t v204;
  uint64_t v205;
  char *v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  char *v210;
  char *v211;
  uint64_t v212;
  uint64_t v213;
  char *v214;
  char *v215;
  uint64_t v216;
  void (*v217)(char *, char *, uint64_t);
  uint64_t v218;
  _QWORD *v219;
  _QWORD *v220;
  uint64_t v221;
  uint64_t v222;
  _QWORD *v223;
  _QWORD *v224;
  uint64_t v225;
  uint64_t v226;
  char *v227;
  char *v228;
  uint64_t v229;
  _QWORD *v230;
  _QWORD *v231;
  uint64_t v232;
  uint64_t v233;
  int v234;
  uint64_t v235;
  uint64_t v236;
  id *v237;
  int v238;
  id v239;
  id *v240;
  int v241;
  id v242;
  id *v243;
  int v244;
  id v245;
  id *v246;
  int v247;
  id v248;
  id *v249;
  int v250;
  id v251;
  uint64_t v252;
  char *v253;
  char *v254;
  uint64_t v255;
  uint64_t v256;
  _QWORD *v257;
  _QWORD *v258;
  uint64_t v259;
  uint64_t v260;
  _QWORD *v261;
  _QWORD *v262;
  uint64_t v263;
  void (*v264)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v265;
  _QWORD *v266;
  _QWORD *v267;
  uint64_t v268;
  uint64_t v269;
  char *v270;
  char *v271;
  uint64_t v272;
  char *v273;
  char *v274;
  uint64_t v275;
  char *v276;
  char *v277;
  uint64_t v278;
  uint64_t v279;
  unsigned int (*v280)(char *, uint64_t, uint64_t);
  uint64_t v281;
  uint64_t v283;
  char *__dst;
  unsigned int (*v285)(_QWORD *, uint64_t, int *);
  int *v286;
  int *v287;
  uint64_t v288;
  uint64_t v289;
  int *v290;
  char *v291;
  uint64_t v292;
  char *v293;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      *(_BYTE *)a1 = *(_BYTE *)a2;
      v7 = (int *)type metadata accessor for LazyJSFlowDestination(0);
      v8 = v7[5];
      v9 = (char *)a1 + v8;
      v10 = (char *)a2 + v8;
      v11 = type metadata accessor for URL(0);
      v12 = *(_QWORD *)(v11 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
      {
        v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
        memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      }
      v21 = v7[6];
      v22 = (char *)a1 + v21;
      v23 = (_OWORD *)((char *)a2 + v21);
      v24 = *(_QWORD *)((char *)a2 + v21 + 24);
      if (v24)
      {
        *((_QWORD *)v22 + 3) = v24;
        (**(void (***)(void))(v24 - 8))();
      }
      else
      {
        v25 = v23[1];
        *(_OWORD *)v22 = *v23;
        *((_OWORD *)v22 + 1) = v25;
      }
      *((_BYTE *)a1 + v7[7]) = *((_BYTE *)a2 + v7[7]);
      v26 = a1;
      v27 = a3;
      v28 = 1;
    }
    else
    {
      v15 = type metadata accessor for FlowDestination(0);
      switch(swift_getEnumCaseMultiPayload(a2, v15))
      {
        case 0u:
          v16 = type metadata accessor for URL(0);
          (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(a1, a2, v16);
          v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B6F98);
          *((_BYTE *)a1 + *(int *)(v17 + 48)) = *((_BYTE *)a2 + *(int *)(v17 + 48));
          v18 = a1;
          v19 = v15;
          v20 = 0;
          goto LABEL_141;
        case 1u:
          v29 = type metadata accessor for URL(0);
          v30 = *(_QWORD *)(v29 - 8);
          if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v30 + 48))(a2, 1, v29))
          {
            v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
            memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
          }
          else
          {
            (*(void (**)(uint64_t *, _QWORD *, uint64_t))(v30 + 16))(a1, a2, v29);
            (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v30 + 56))(a1, 0, 1, v29);
          }
          v18 = a1;
          v19 = v15;
          v20 = 1;
          goto LABEL_141;
        case 2u:
          v32 = type metadata accessor for URL(0);
          (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(a1, a2, v32);
          v33 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B6F80) + 48);
          v34 = (uint64_t *)((char *)a1 + v33);
          v35 = (_QWORD *)((char *)a2 + v33);
          v36 = (int *)type metadata accessor for ArtworkModel(0);
          v37 = *((_QWORD *)v36 - 1);
          if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v37 + 48))(v35, 1, v36))
          {
            v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
            memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
          }
          else
          {
            v109 = v35[1];
            *v34 = *v35;
            v34[1] = v109;
            v110 = *((unsigned __int8 *)v35 + 32);
            swift_bridgeObjectRetain();
            if (v110 == 255)
            {
              *((_OWORD *)v34 + 1) = *((_OWORD *)v35 + 1);
              *((_BYTE *)v34 + 32) = *((_BYTE *)v35 + 32);
            }
            else
            {
              v111 = v35[2];
              v112 = v35[3];
              sub_3D464(v111, v112, v110);
              v34[2] = v111;
              v34[3] = v112;
              *((_BYTE *)v34 + 32) = v110;
            }
            *(_OWORD *)(v34 + 5) = *(_OWORD *)(v35 + 5);
            v117 = (id *)(v35 + 7);
            v118 = *((unsigned __int8 *)v35 + 64);
            if (v118 == 255)
            {
              v34[7] = *v117;
              *((_BYTE *)v34 + 64) = *((_BYTE *)v35 + 64);
            }
            else
            {
              v119 = *v117;
              sub_3D47C(*v117, *((_BYTE *)v35 + 64));
              v34[7] = v119;
              *((_BYTE *)v34 + 64) = v118;
            }
            v123 = (id *)(v35 + 9);
            v124 = *((unsigned __int8 *)v35 + 80);
            if (v124 == 255)
            {
              v34[9] = *v123;
              *((_BYTE *)v34 + 80) = *((_BYTE *)v35 + 80);
            }
            else
            {
              v125 = *v123;
              sub_3D47C(*v123, *((_BYTE *)v35 + 80));
              v34[9] = v125;
              *((_BYTE *)v34 + 80) = v124;
            }
            v129 = (id *)(v35 + 11);
            v130 = *((unsigned __int8 *)v35 + 96);
            if (v130 == 255)
            {
              v34[11] = *v129;
              *((_BYTE *)v34 + 96) = *((_BYTE *)v35 + 96);
            }
            else
            {
              v131 = *v129;
              sub_3D47C(*v129, *((_BYTE *)v35 + 96));
              v34[11] = v131;
              *((_BYTE *)v34 + 96) = v130;
            }
            v135 = (id *)(v35 + 13);
            v136 = *((unsigned __int8 *)v35 + 112);
            if (v136 == 255)
            {
              v34[13] = *v135;
              *((_BYTE *)v34 + 112) = *((_BYTE *)v35 + 112);
            }
            else
            {
              v137 = *v135;
              sub_3D47C(*v135, *((_BYTE *)v35 + 112));
              v34[13] = v137;
              *((_BYTE *)v34 + 112) = v136;
            }
            v141 = (id *)(v35 + 15);
            v142 = *((unsigned __int8 *)v35 + 128);
            if (v142 == 255)
            {
              v34[15] = *v141;
              *((_BYTE *)v34 + 128) = *((_BYTE *)v35 + 128);
            }
            else
            {
              v143 = *v141;
              sub_3D47C(*v141, *((_BYTE *)v35 + 128));
              v34[15] = v143;
              *((_BYTE *)v34 + 128) = v142;
            }
            *((_BYTE *)v34 + 129) = *((_BYTE *)v35 + 129);
            v147 = v36[11];
            v148 = (char *)v34 + v147;
            v149 = (char *)v35 + v147;
            v150 = type metadata accessor for ArtworkCrop(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v150 - 8) + 16))(v148, v149, v150);
            v151 = v36[12];
            v152 = (_QWORD *)((char *)v34 + v151);
            v153 = (_QWORD *)((char *)v35 + v151);
            v154 = v153[1];
            *v152 = *v153;
            v152[1] = v154;
            *((_BYTE *)v34 + v36[13]) = *((_BYTE *)v35 + v36[13]);
            *((_BYTE *)v34 + v36[14]) = *((_BYTE *)v35 + v36[14]);
            *((_BYTE *)v34 + v36[15]) = *((_BYTE *)v35 + v36[15]);
            v155 = v36[16];
            v156 = (_QWORD *)((char *)v34 + v155);
            v157 = (_QWORD *)((char *)v35 + v155);
            v158 = v157[1];
            *v156 = *v157;
            v156[1] = v158;
            v159 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v37 + 56);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v159(v34, 0, 1, v36);
          }
          v18 = a1;
          v19 = v15;
          v20 = 2;
          goto LABEL_141;
        case 3u:
          *a1 = *a2;
          swift_retain();
          v39 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B6F78) + 48);
          v40 = (char *)a1 + v39;
          v41 = (char *)a2 + v39;
          v42 = type metadata accessor for URL(0);
          v43 = *(_QWORD *)(v42 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
          {
            v44 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
            memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v40, v41, v42);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
          }
          v18 = a1;
          v19 = v15;
          v20 = 3;
          goto LABEL_141;
        case 4u:
          *a1 = *a2;
          swift_retain();
          v45 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B6F78) + 48);
          v46 = (char *)a1 + v45;
          v47 = (char *)a2 + v45;
          v48 = type metadata accessor for URL(0);
          v49 = *(_QWORD *)(v48 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v47, 1, v48))
          {
            v50 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
            memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v46, v47, v48);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v46, 0, 1, v48);
          }
          v18 = a1;
          v19 = v15;
          v20 = 4;
          goto LABEL_141;
        case 5u:
          *a1 = *a2;
          swift_retain();
          v51 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B6F78) + 48);
          v52 = (char *)a1 + v51;
          v53 = (char *)a2 + v51;
          v54 = type metadata accessor for URL(0);
          v55 = *(_QWORD *)(v54 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v53, 1, v54))
          {
            v56 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
            memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v55 + 16))(v52, v53, v54);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v55 + 56))(v52, 0, 1, v54);
          }
          v18 = a1;
          v19 = v15;
          v20 = 5;
          goto LABEL_141;
        case 6u:
          v57 = (void *)*a2;
          *a1 = *a2;
          v58 = v57;
          v18 = a1;
          v19 = v15;
          v20 = 6;
          goto LABEL_141;
        case 7u:
          v59 = a2[1];
          *a1 = *a2;
          a1[1] = v59;
          a1[2] = a2[2];
          *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
          v60 = a2[4];
          v61 = *((_BYTE *)a2 + 40);
          swift_bridgeObjectRetain();
          sub_43568(v60, v61);
          a1[4] = v60;
          *((_BYTE *)a1 + 40) = v61;
          v18 = a1;
          v19 = v15;
          v20 = 7;
          goto LABEL_141;
        case 8u:
          v62 = *a2;
          v63 = a2[1];
          v64 = a2[2];
          v65 = a2[3];
          v288 = v15;
          v66 = a2[4];
          v67 = a2[5];
          v69 = a2[6];
          v68 = a2[7];
          v292 = v68;
          v70 = *((_BYTE *)a2 + 64);
          sub_898F4(v62, v63, v64, v65, v66, v67, v69, v68, v70);
          *a1 = v62;
          a1[1] = v63;
          a1[2] = v64;
          a1[3] = v65;
          a1[4] = v66;
          a1[5] = v67;
          a1[6] = v69;
          a1[7] = v292;
          *((_BYTE *)a1 + 64) = v70;
          v18 = a1;
          v19 = v288;
          v20 = 8;
          goto LABEL_141;
        case 9u:
          v71 = a2[1];
          *a1 = *a2;
          a1[1] = v71;
          v72 = a2[3];
          a1[2] = a2[2];
          a1[3] = v72;
          a1[4] = a2[4];
          *((_BYTE *)a1 + 40) = *((_BYTE *)a2 + 40);
          a1[6] = a2[6];
          *((_BYTE *)a1 + 56) = *((_BYTE *)a2 + 56);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v18 = a1;
          v19 = v15;
          v20 = 9;
          goto LABEL_141;
        case 0xAu:
          *a1 = *a2;
          swift_retain();
          v18 = a1;
          v19 = v15;
          v20 = 10;
          goto LABEL_141;
        case 0xBu:
          v73 = a2[1];
          *a1 = *a2;
          a1[1] = v73;
          swift_bridgeObjectRetain();
          v18 = a1;
          v19 = v15;
          v20 = 11;
          goto LABEL_141;
        case 0xCu:
          v74 = a2[1];
          *a1 = *a2;
          a1[1] = v74;
          swift_bridgeObjectRetain();
          v18 = a1;
          v19 = v15;
          v20 = 12;
          goto LABEL_141;
        case 0xDu:
          *a1 = *a2;
          swift_retain();
          v18 = a1;
          v19 = v15;
          v20 = 13;
          goto LABEL_141;
        case 0xEu:
          v75 = a2[1];
          *a1 = *a2;
          a1[1] = v75;
          swift_bridgeObjectRetain();
          v18 = a1;
          v19 = v15;
          v20 = 14;
          goto LABEL_141;
        case 0xFu:
          v76 = a2[1];
          *a1 = *a2;
          a1[1] = v76;
          v77 = a2[3];
          a1[2] = a2[2];
          a1[3] = v77;
          v78 = a2[5];
          a1[4] = a2[4];
          a1[5] = v78;
          v79 = a2[6];
          v80 = a2[7];
          a1[6] = v79;
          a1[7] = v80;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v18 = a1;
          v19 = v15;
          v20 = 15;
          goto LABEL_141;
        case 0x10u:
          *a1 = *a2;
          swift_retain();
          v18 = a1;
          v19 = v15;
          v20 = 16;
          goto LABEL_141;
        case 0x11u:
          v81 = a2[1];
          *a1 = *a2;
          a1[1] = v81;
          swift_bridgeObjectRetain();
          v18 = a1;
          v19 = v15;
          v20 = 17;
          goto LABEL_141;
        case 0x12u:
          v82 = type metadata accessor for URL(0);
          (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v82 - 8) + 16))(a1, a2, v82);
          v18 = a1;
          v19 = v15;
          v20 = 18;
          goto LABEL_141;
        case 0x13u:
          v83 = a2[1];
          *a1 = *a2;
          a1[1] = v83;
          swift_bridgeObjectRetain();
          v18 = a1;
          v19 = v15;
          v20 = 19;
          goto LABEL_141;
        case 0x15u:
          *a1 = *a2;
          swift_retain();
          v18 = a1;
          v19 = v15;
          v20 = 21;
          goto LABEL_141;
        case 0x16u:
          v84 = (void *)*a2;
          *a1 = *a2;
          v85 = v84;
          v18 = a1;
          v19 = v15;
          v20 = 22;
          goto LABEL_141;
        case 0x17u:
          *a1 = *a2;
          swift_retain();
          v18 = a1;
          v19 = v15;
          v20 = 23;
          goto LABEL_141;
        case 0x18u:
          v86 = type metadata accessor for URL(0);
          v87 = *(_QWORD *)(v86 - 8);
          if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v87 + 48))(a2, 1, v86))
          {
            v88 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
            memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v88 - 8) + 64));
          }
          else
          {
            (*(void (**)(uint64_t *, _QWORD *, uint64_t))(v87 + 16))(a1, a2, v86);
            (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v87 + 56))(a1, 0, 1, v86);
          }
          v18 = a1;
          v19 = v15;
          v20 = 24;
          goto LABEL_141;
        case 0x19u:
          v89 = type metadata accessor for URL(0);
          v90 = *(_QWORD *)(v89 - 8);
          if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v90 + 48))(a2, 1, v89))
          {
            v91 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
            memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v91 - 8) + 64));
          }
          else
          {
            (*(void (**)(uint64_t *, _QWORD *, uint64_t))(v90 + 16))(a1, a2, v89);
            (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v90 + 56))(a1, 0, 1, v89);
          }
          v18 = a1;
          v19 = v15;
          v20 = 25;
          goto LABEL_141;
        case 0x1Au:
          *a1 = *a2;
          swift_retain();
          v18 = a1;
          v19 = v15;
          v20 = 26;
          goto LABEL_141;
        case 0x1Bu:
          v92 = (void *)*a2;
          *a1 = *a2;
          v93 = v92;
          v18 = a1;
          v19 = v15;
          v20 = 27;
          goto LABEL_141;
        case 0x1Cu:
          *a1 = *a2;
          swift_bridgeObjectRetain();
          v18 = a1;
          v19 = v15;
          v20 = 28;
          goto LABEL_141;
        case 0x1Du:
          v94 = type metadata accessor for TranscriptRequestInformation(0);
          (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v94 - 8) + 16))(a1, a2, v94);
          v18 = a1;
          v19 = v15;
          v20 = 29;
          goto LABEL_141;
        case 0x1Eu:
          v289 = v15;
          *(_OWORD *)a1 = *(_OWORD *)a2;
          a1[2] = a2[2];
          v95 = type metadata accessor for EpisodeOffer(0);
          v96 = *(int *)(v95 + 24);
          v97 = (char *)a1 + v96;
          v98 = (char *)a2 + v96;
          *(_OWORD *)v97 = *(_OWORD *)((char *)a2 + v96);
          *((_QWORD *)v97 + 2) = *(_QWORD *)((char *)a2 + v96 + 16);
          v97[24] = *((_BYTE *)a2 + v96 + 24);
          v290 = (int *)type metadata accessor for ShowOffer(0);
          v291 = v98;
          v99 = v290[7];
          v293 = v97;
          v100 = &v97[v99];
          v101 = &v98[v99];
          v102 = (int *)type metadata accessor for ArtworkModel(0);
          v283 = *((_QWORD *)v102 - 1);
          v103 = *(unsigned int (**)(_QWORD *, uint64_t, int *))(v283 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v285 = v103;
          v286 = (int *)v95;
          v287 = v102;
          if (v103(v101, 1, v102))
          {
            v104 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
            memcpy(v100, v101, *(_QWORD *)(*(_QWORD *)(v104 - 8) + 64));
          }
          else
          {
            v113 = *((_QWORD *)v101 + 1);
            *(_QWORD *)v100 = *(_QWORD *)v101;
            *((_QWORD *)v100 + 1) = v113;
            v114 = v101[32];
            swift_bridgeObjectRetain();
            if (v114 == 255)
            {
              *((_OWORD *)v100 + 1) = *((_OWORD *)v101 + 1);
              v100[32] = v101[32];
            }
            else
            {
              v115 = *((_QWORD *)v101 + 2);
              v116 = *((_QWORD *)v101 + 3);
              sub_3D464(v115, v116, v114);
              *((_QWORD *)v100 + 2) = v115;
              *((_QWORD *)v100 + 3) = v116;
              v100[32] = v114;
            }
            *(_OWORD *)(v100 + 40) = *(_OWORD *)(v101 + 40);
            v120 = (id *)(v101 + 56);
            v121 = v101[64];
            if (v121 == 255)
            {
              *((_QWORD *)v100 + 7) = *v120;
              v100[64] = v101[64];
            }
            else
            {
              v122 = *v120;
              sub_3D47C(*v120, v101[64]);
              *((_QWORD *)v100 + 7) = v122;
              v100[64] = v121;
            }
            v126 = (id *)(v101 + 72);
            v127 = v101[80];
            if (v127 == 255)
            {
              *((_QWORD *)v100 + 9) = *v126;
              v100[80] = v101[80];
            }
            else
            {
              v128 = *v126;
              sub_3D47C(*v126, v101[80]);
              *((_QWORD *)v100 + 9) = v128;
              v100[80] = v127;
            }
            v132 = (id *)(v101 + 88);
            v133 = v101[96];
            if (v133 == 255)
            {
              *((_QWORD *)v100 + 11) = *v132;
              v100[96] = v101[96];
            }
            else
            {
              v134 = *v132;
              sub_3D47C(*v132, v101[96]);
              *((_QWORD *)v100 + 11) = v134;
              v100[96] = v133;
            }
            v138 = (id *)(v101 + 104);
            v139 = v101[112];
            if (v139 == 255)
            {
              *((_QWORD *)v100 + 13) = *v138;
              v100[112] = v101[112];
            }
            else
            {
              v140 = *v138;
              sub_3D47C(*v138, v101[112]);
              *((_QWORD *)v100 + 13) = v140;
              v100[112] = v139;
            }
            v144 = (id *)(v101 + 120);
            v145 = v101[128];
            if (v145 == 255)
            {
              *((_QWORD *)v100 + 15) = *v144;
              v100[128] = v101[128];
            }
            else
            {
              v146 = *v144;
              sub_3D47C(*v144, v101[128]);
              *((_QWORD *)v100 + 15) = v146;
              v100[128] = v145;
            }
            v100[129] = v101[129];
            v160 = v102[11];
            v161 = &v100[v160];
            v162 = &v101[v160];
            v163 = type metadata accessor for ArtworkCrop(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v163 - 8) + 16))(v161, v162, v163);
            v164 = v102[12];
            v165 = &v100[v164];
            v166 = &v101[v164];
            v167 = *((_QWORD *)v166 + 1);
            *(_QWORD *)v165 = *(_QWORD *)v166;
            *((_QWORD *)v165 + 1) = v167;
            v100[v102[13]] = v101[v102[13]];
            v100[v102[14]] = v101[v102[14]];
            v100[v102[15]] = v101[v102[15]];
            v168 = v102[16];
            v169 = &v100[v168];
            v170 = &v101[v168];
            v171 = *((_QWORD *)v170 + 1);
            *(_QWORD *)v169 = *(_QWORD *)v170;
            *((_QWORD *)v169 + 1) = v171;
            v172 = *(void (**)(char *, _QWORD, uint64_t, int *))(v283 + 56);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v172(v100, 0, 1, v102);
          }
          v173 = v290[8];
          v174 = &v293[v173];
          v175 = &v291[v173];
          v176 = *((_QWORD *)v175 + 1);
          *(_QWORD *)v174 = *(_QWORD *)v175;
          *((_QWORD *)v174 + 1) = v176;
          v177 = v290[9];
          v178 = &v293[v177];
          v179 = &v291[v177];
          v180 = *((_QWORD *)v179 + 1);
          *(_QWORD *)v178 = *(_QWORD *)v179;
          *((_QWORD *)v178 + 1) = v180;
          v293[v290[10]] = v291[v290[10]];
          v181 = v290[11];
          v182 = &v293[v181];
          v183 = &v291[v181];
          v184 = *((_QWORD *)v183 + 1);
          *(_QWORD *)v182 = *(_QWORD *)v183;
          *((_QWORD *)v182 + 1) = v184;
          v185 = v290[12];
          v186 = &v293[v185];
          v187 = &v291[v185];
          v188 = *((_QWORD *)v187 + 1);
          *(_QWORD *)v186 = *(_QWORD *)v187;
          *((_QWORD *)v186 + 1) = v188;
          v189 = v290[13];
          __dst = &v293[v189];
          v190 = &v291[v189];
          v191 = type metadata accessor for URL(0);
          v192 = *(_QWORD *)(v191 - 8);
          v193 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v192 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v194 = v193;
          if (v193(v190, 1, v191))
          {
            v195 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
            memcpy(__dst, v190, *(_QWORD *)(*(_QWORD *)(v195 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v192 + 16))(__dst, v190, v191);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v192 + 56))(__dst, 0, 1, v191);
          }
          v196 = v192;
          v197 = v290[14];
          v198 = &v293[v197];
          v199 = &v291[v197];
          v200 = *((_QWORD *)v199 + 1);
          *(_QWORD *)v198 = *(_QWORD *)v199;
          *((_QWORD *)v198 + 1) = v200;
          v201 = v290[15];
          v202 = &v293[v201];
          v203 = &v291[v201];
          v204 = *((_QWORD *)v203 + 1);
          *(_QWORD *)v202 = *(_QWORD *)v203;
          *((_QWORD *)v202 + 1) = v204;
          v205 = v290[16];
          v206 = &v293[v205];
          v207 = &v291[v205];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v194(v207, 1, v191))
          {
            v208 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
            memcpy(v206, v207, *(_QWORD *)(*(_QWORD *)(v208 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v196 + 16))(v206, v207, v191);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v196 + 56))(v206, 0, 1, v191);
          }
          v209 = v290[17];
          v210 = &v293[v209];
          v211 = &v291[v209];
          if (v194(&v291[v209], 1, v191))
          {
            v212 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
            memcpy(v210, v211, *(_QWORD *)(*(_QWORD *)(v212 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v196 + 16))(v210, v211, v191);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v196 + 56))(v210, 0, 1, v191);
          }
          v293[v290[18]] = v291[v290[18]];
          v213 = v286[7];
          v214 = (char *)a1 + v213;
          v215 = (char *)a2 + v213;
          if (v194((char *)a2 + v213, 1, v191))
          {
            v216 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
            memcpy(v214, v215, *(_QWORD *)(*(_QWORD *)(v216 - 8) + 64));
            (*(void (**)(char *, char *, uint64_t))(v196 + 16))((char *)a1 + v286[8], (char *)a2 + v286[8], v191);
          }
          else
          {
            v217 = *(void (**)(char *, char *, uint64_t))(v196 + 16);
            v217(v214, v215, v191);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v196 + 56))(v214, 0, 1, v191);
            v217((char *)a1 + v286[8], (char *)a2 + v286[8], v191);
          }
          *(uint64_t *)((char *)a1 + v286[9]) = *(_QWORD *)((char *)a2 + v286[9]);
          v218 = v286[10];
          v219 = (uint64_t *)((char *)a1 + v218);
          v220 = (_QWORD *)((char *)a2 + v218);
          v221 = v220[1];
          *v219 = *v220;
          v219[1] = v221;
          v222 = v286[11];
          v223 = (uint64_t *)((char *)a1 + v222);
          v224 = (_QWORD *)((char *)a2 + v222);
          v225 = v224[1];
          *v223 = *v224;
          v223[1] = v225;
          *(uint64_t *)((char *)a1 + v286[12]) = *(_QWORD *)((char *)a2 + v286[12]);
          *((_BYTE *)a1 + v286[13]) = *((_BYTE *)a2 + v286[13]);
          *((_BYTE *)a1 + v286[14]) = *((_BYTE *)a2 + v286[14]);
          v226 = v286[15];
          v227 = (char *)a1 + v226;
          v228 = (char *)a2 + v226;
          *(_QWORD *)v227 = *(_QWORD *)v228;
          v227[8] = v228[8];
          v229 = v286[16];
          v230 = (uint64_t *)((char *)a1 + v229);
          v231 = (_QWORD *)((char *)a2 + v229);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_retain();
          if (v285(v231, 1, v287))
          {
            v232 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
            memcpy(v230, v231, *(_QWORD *)(*(_QWORD *)(v232 - 8) + 64));
          }
          else
          {
            v233 = v231[1];
            *v230 = *v231;
            v230[1] = v233;
            v234 = *((unsigned __int8 *)v231 + 32);
            swift_bridgeObjectRetain();
            if (v234 == 255)
            {
              *((_OWORD *)v230 + 1) = *((_OWORD *)v231 + 1);
              *((_BYTE *)v230 + 32) = *((_BYTE *)v231 + 32);
            }
            else
            {
              v235 = v231[2];
              v236 = v231[3];
              sub_3D464(v235, v236, v234);
              v230[2] = v235;
              v230[3] = v236;
              *((_BYTE *)v230 + 32) = v234;
            }
            *(_OWORD *)(v230 + 5) = *(_OWORD *)(v231 + 5);
            v237 = (id *)(v231 + 7);
            v238 = *((unsigned __int8 *)v231 + 64);
            if (v238 == 255)
            {
              v230[7] = *v237;
              *((_BYTE *)v230 + 64) = *((_BYTE *)v231 + 64);
            }
            else
            {
              v239 = *v237;
              sub_3D47C(*v237, *((_BYTE *)v231 + 64));
              v230[7] = v239;
              *((_BYTE *)v230 + 64) = v238;
            }
            v240 = (id *)(v231 + 9);
            v241 = *((unsigned __int8 *)v231 + 80);
            if (v241 == 255)
            {
              v230[9] = *v240;
              *((_BYTE *)v230 + 80) = *((_BYTE *)v231 + 80);
            }
            else
            {
              v242 = *v240;
              sub_3D47C(*v240, *((_BYTE *)v231 + 80));
              v230[9] = v242;
              *((_BYTE *)v230 + 80) = v241;
            }
            v243 = (id *)(v231 + 11);
            v244 = *((unsigned __int8 *)v231 + 96);
            if (v244 == 255)
            {
              v230[11] = *v243;
              *((_BYTE *)v230 + 96) = *((_BYTE *)v231 + 96);
            }
            else
            {
              v245 = *v243;
              sub_3D47C(*v243, *((_BYTE *)v231 + 96));
              v230[11] = v245;
              *((_BYTE *)v230 + 96) = v244;
            }
            v246 = (id *)(v231 + 13);
            v247 = *((unsigned __int8 *)v231 + 112);
            if (v247 == 255)
            {
              v230[13] = *v246;
              *((_BYTE *)v230 + 112) = *((_BYTE *)v231 + 112);
            }
            else
            {
              v248 = *v246;
              sub_3D47C(*v246, *((_BYTE *)v231 + 112));
              v230[13] = v248;
              *((_BYTE *)v230 + 112) = v247;
            }
            v249 = (id *)(v231 + 15);
            v250 = *((unsigned __int8 *)v231 + 128);
            if (v250 == 255)
            {
              v230[15] = *v249;
              *((_BYTE *)v230 + 128) = *((_BYTE *)v231 + 128);
            }
            else
            {
              v251 = *v249;
              sub_3D47C(*v249, *((_BYTE *)v231 + 128));
              v230[15] = v251;
              *((_BYTE *)v230 + 128) = v250;
            }
            *((_BYTE *)v230 + 129) = *((_BYTE *)v231 + 129);
            v252 = v287[11];
            v253 = (char *)v230 + v252;
            v254 = (char *)v231 + v252;
            v255 = type metadata accessor for ArtworkCrop(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v255 - 8) + 16))(v253, v254, v255);
            v256 = v287[12];
            v257 = (_QWORD *)((char *)v230 + v256);
            v258 = (_QWORD *)((char *)v231 + v256);
            v259 = v258[1];
            *v257 = *v258;
            v257[1] = v259;
            *((_BYTE *)v230 + v287[13]) = *((_BYTE *)v231 + v287[13]);
            *((_BYTE *)v230 + v287[14]) = *((_BYTE *)v231 + v287[14]);
            *((_BYTE *)v230 + v287[15]) = *((_BYTE *)v231 + v287[15]);
            v260 = v287[16];
            v261 = (_QWORD *)((char *)v230 + v260);
            v262 = (_QWORD *)((char *)v231 + v260);
            v263 = v262[1];
            *v261 = *v262;
            v261[1] = v263;
            v264 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v283 + 56);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v264(v230, 0, 1, v287);
          }
          v265 = v286[17];
          v266 = (uint64_t *)((char *)a1 + v265);
          v267 = (_QWORD *)((char *)a2 + v265);
          v268 = v267[1];
          *v266 = *v267;
          v266[1] = v268;
          v269 = v286[18];
          v270 = (char *)a1 + v269;
          v271 = (char *)a2 + v269;
          v270[8] = v271[8];
          *(_QWORD *)v270 = *(_QWORD *)v271;
          v272 = v286[19];
          v273 = (char *)a1 + v272;
          v274 = (char *)a2 + v272;
          *(_QWORD *)v273 = *(_QWORD *)v274;
          v273[8] = v274[8];
          *((_BYTE *)a1 + v286[20]) = *((_BYTE *)a2 + v286[20]);
          *((_BYTE *)a1 + v286[21]) = *((_BYTE *)a2 + v286[21]);
          v275 = v286[22];
          v276 = (char *)a1 + v275;
          v277 = (char *)a2 + v275;
          v278 = type metadata accessor for TranscriptRequestInformation(0);
          v279 = *(_QWORD *)(v278 - 8);
          v280 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v279 + 48);
          swift_bridgeObjectRetain();
          if (v280(v277, 1, v278))
          {
            v281 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2C40);
            memcpy(v276, v277, *(_QWORD *)(*(_QWORD *)(v281 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v279 + 16))(v276, v277, v278);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v279 + 56))(v276, 0, 1, v278);
          }
          v18 = a1;
          v19 = v289;
          v20 = 30;
          goto LABEL_141;
        case 0x1Fu:
          *(_OWORD *)a1 = *(_OWORD *)a2;
          a1[2] = a2[2];
          swift_bridgeObjectRetain();
          v18 = a1;
          v19 = v15;
          v20 = 31;
          goto LABEL_141;
        case 0x20u:
          *a1 = *a2;
          v105 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B6FA0) + 48);
          v106 = (char *)a1 + v105;
          v107 = (char *)a2 + v105;
          v108 = type metadata accessor for URL(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v108 - 8) + 16))(v106, v107, v108);
          v18 = a1;
          v19 = v15;
          v20 = 32;
LABEL_141:
          swift_storeEnumTagMultiPayload(v18, v19, v20);
          break;
        default:
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
          break;
      }
      v26 = a1;
      v27 = a3;
      v28 = 0;
    }
    swift_storeEnumTagMultiPayload(v26, v27, v28);
  }
  return a1;
}

void sub_2A5280(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int (*v32)(uint64_t, uint64_t, uint64_t);
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int (*v44)(uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  void (*v49)(uint64_t, uint64_t);
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;

  v2 = a1;
  if (swift_getEnumCaseMultiPayload(a1, a2) == 1)
  {
    v3 = type metadata accessor for LazyJSFlowDestination(0);
    v4 = v2 + *(int *)(v3 + 20);
    v5 = type metadata accessor for URL(0);
    v6 = *(_QWORD *)(v5 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
    v7 = (_QWORD *)(v2 + *(int *)(v3 + 24));
    if (v7[3])
      __swift_destroy_boxed_opaque_existential_1(v7);
  }
  else
  {
    v8 = type metadata accessor for FlowDestination(0);
    switch(swift_getEnumCaseMultiPayload(v2, v8))
    {
      case 0u:
      case 0x12u:
        goto LABEL_72;
      case 1u:
      case 0x18u:
      case 0x19u:
        goto LABEL_10;
      case 2u:
        v15 = type metadata accessor for URL(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v2, v15);
        v16 = v2 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B6F80) + 48);
        v17 = type metadata accessor for ArtworkModel(0);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 48))(v16, 1, v17))
          return;
        swift_bridgeObjectRelease();
        v18 = *(unsigned __int8 *)(v16 + 32);
        if (v18 != 255)
          sub_3B5BC(*(_QWORD *)(v16 + 16), *(_QWORD *)(v16 + 24), v18);
        v19 = *(unsigned __int8 *)(v16 + 64);
        if (v19 != 255)
          sub_3D624(*(id *)(v16 + 56), v19);
        v20 = *(unsigned __int8 *)(v16 + 80);
        if (v20 != 255)
          sub_3D624(*(id *)(v16 + 72), v20);
        v21 = *(unsigned __int8 *)(v16 + 96);
        if (v21 != 255)
          sub_3D624(*(id *)(v16 + 88), v21);
        v22 = *(unsigned __int8 *)(v16 + 112);
        if (v22 != 255)
          sub_3D624(*(id *)(v16 + 104), v22);
        v23 = *(unsigned __int8 *)(v16 + 128);
        if (v23 != 255)
          sub_3D624(*(id *)(v16 + 120), v23);
        v24 = v16 + *(int *)(v17 + 44);
        v25 = type metadata accessor for ArtworkCrop(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 8))(v24, v25);
        swift_bridgeObjectRelease();
        goto LABEL_8;
      case 3u:
      case 4u:
      case 5u:
        swift_release();
        v2 += *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B6F78) + 48);
LABEL_10:
        v9 = type metadata accessor for URL(0);
        goto LABEL_11;
      case 6u:
      case 0x16u:
      case 0x1Bu:

        return;
      case 7u:
        swift_bridgeObjectRelease();
        sub_4357C(*(_QWORD *)(v2 + 32), *(_BYTE *)(v2 + 40));
        return;
      case 8u:
        sub_87198(*(_QWORD *)v2, *(_QWORD *)(v2 + 8), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56), *(_BYTE *)(v2 + 64));
        return;
      case 9u:
        swift_bridgeObjectRelease();
        goto LABEL_8;
      case 0xAu:
      case 0xDu:
      case 0x10u:
      case 0x15u:
      case 0x17u:
      case 0x1Au:
        swift_release();
        return;
      case 0xBu:
      case 0xCu:
      case 0xEu:
      case 0x11u:
      case 0x13u:
      case 0x1Cu:
      case 0x1Fu:
        goto LABEL_8;
      case 0xFu:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_8:
        swift_bridgeObjectRelease();
        return;
      case 0x1Du:
        v26 = type metadata accessor for TranscriptRequestInformation(0);
        goto LABEL_73;
      case 0x1Eu:
        swift_bridgeObjectRelease();
        v27 = (int *)type metadata accessor for EpisodeOffer(0);
        v28 = v2 + v27[6];
        swift_bridgeObjectRelease();
        v29 = (int *)type metadata accessor for ShowOffer(0);
        v30 = v28 + v29[7];
        v31 = type metadata accessor for ArtworkModel(0);
        v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 48);
        if (!v32(v30, 1, v31))
        {
          swift_bridgeObjectRelease();
          v33 = *(unsigned __int8 *)(v30 + 32);
          if (v33 != 255)
            sub_3B5BC(*(_QWORD *)(v30 + 16), *(_QWORD *)(v30 + 24), v33);
          v34 = *(unsigned __int8 *)(v30 + 64);
          if (v34 != 255)
            sub_3D624(*(id *)(v30 + 56), v34);
          v35 = *(unsigned __int8 *)(v30 + 80);
          if (v35 != 255)
            sub_3D624(*(id *)(v30 + 72), v35);
          v36 = *(unsigned __int8 *)(v30 + 96);
          if (v36 != 255)
            sub_3D624(*(id *)(v30 + 88), v36);
          v37 = *(unsigned __int8 *)(v30 + 112);
          if (v37 != 255)
            sub_3D624(*(id *)(v30 + 104), v37);
          v38 = *(unsigned __int8 *)(v30 + 128);
          if (v38 != 255)
            sub_3D624(*(id *)(v30 + 120), v38);
          v39 = v30 + *(int *)(v31 + 44);
          v40 = type metadata accessor for ArtworkCrop(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 8))(v39, v40);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v41 = v28 + v29[13];
        v42 = type metadata accessor for URL(0);
        v43 = *(_QWORD *)(v42 - 8);
        v44 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48);
        if (!v44(v41, 1, v42))
          (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v41, v42);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v45 = v28 + v29[16];
        if (!v44(v45, 1, v42))
          (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v45, v42);
        v46 = v28 + v29[17];
        if (!v44(v46, 1, v42))
          (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v46, v42);
        v47 = v2 + v27[7];
        v48 = v44(v47, 1, v42);
        v49 = *(void (**)(uint64_t, uint64_t))(v43 + 8);
        if (!v48)
          v49(v47, v42);
        v49(v2 + v27[8], v42);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        v50 = v2 + v27[16];
        if (!v32(v50, 1, v31))
        {
          swift_bridgeObjectRelease();
          v51 = *(unsigned __int8 *)(v50 + 32);
          if (v51 != 255)
            sub_3B5BC(*(_QWORD *)(v50 + 16), *(_QWORD *)(v50 + 24), v51);
          v52 = *(unsigned __int8 *)(v50 + 64);
          if (v52 != 255)
            sub_3D624(*(id *)(v50 + 56), v52);
          v53 = *(unsigned __int8 *)(v50 + 80);
          if (v53 != 255)
            sub_3D624(*(id *)(v50 + 72), v53);
          v54 = *(unsigned __int8 *)(v50 + 96);
          if (v54 != 255)
            sub_3D624(*(id *)(v50 + 88), v54);
          v55 = *(unsigned __int8 *)(v50 + 112);
          if (v55 != 255)
            sub_3D624(*(id *)(v50 + 104), v55);
          v56 = *(unsigned __int8 *)(v50 + 128);
          if (v56 != 255)
            sub_3D624(*(id *)(v50 + 120), v56);
          v57 = v50 + *(int *)(v31 + 44);
          v58 = type metadata accessor for ArtworkCrop(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 8))(v57, v58);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        v2 += v27[22];
        v9 = type metadata accessor for TranscriptRequestInformation(0);
LABEL_11:
        v10 = v9;
        v11 = *(_QWORD *)(v9 - 8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v2, 1, v9))
          return;
        v12 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
        v13 = v2;
        v14 = v10;
        goto LABEL_74;
      case 0x20u:
        v2 += *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B6FA0) + 48);
LABEL_72:
        v26 = type metadata accessor for URL(0);
LABEL_73:
        v14 = v26;
        v12 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 8);
        v13 = v2;
LABEL_74:
        v12(v13, v14);
        break;
      default:
        return;
    }
  }
}

_BYTE *sub_2A59DC(_BYTE *a1, uint64_t *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  _OWORD *v21;
  uint64_t v22;
  __int128 v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  int *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE *v50;
  _BYTE *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  id v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  id v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _BYTE *v95;
  _BYTE *v96;
  uint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  int *v100;
  unsigned int (*v101)(_QWORD *, uint64_t, int *);
  uint64_t v102;
  uint64_t v103;
  _BYTE *v104;
  _BYTE *v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  id *v115;
  int v116;
  id v117;
  id *v118;
  int v119;
  id v120;
  id *v121;
  int v122;
  id v123;
  id *v124;
  int v125;
  id v126;
  id *v127;
  int v128;
  id v129;
  id *v130;
  int v131;
  id v132;
  id *v133;
  int v134;
  id v135;
  id *v136;
  int v137;
  id v138;
  id *v139;
  int v140;
  id v141;
  id *v142;
  int v143;
  id v144;
  uint64_t v145;
  char *v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  _QWORD *v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  _QWORD *v155;
  uint64_t v156;
  void (*v157)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v158;
  char *v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD *v163;
  _QWORD *v164;
  uint64_t v165;
  uint64_t v166;
  _QWORD *v167;
  _QWORD *v168;
  uint64_t v169;
  void (*v170)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v171;
  _QWORD *v172;
  _QWORD *v173;
  uint64_t v174;
  uint64_t v175;
  _QWORD *v176;
  _QWORD *v177;
  uint64_t v178;
  uint64_t v179;
  _QWORD *v180;
  _QWORD *v181;
  uint64_t v182;
  uint64_t v183;
  _QWORD *v184;
  _QWORD *v185;
  uint64_t v186;
  uint64_t v187;
  _BYTE *v188;
  uint64_t v189;
  uint64_t v190;
  unsigned int (*v191)(_BYTE *, uint64_t, uint64_t);
  unsigned int (*v192)(_BYTE *, uint64_t, uint64_t);
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  _QWORD *v196;
  _QWORD *v197;
  uint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  _QWORD *v201;
  uint64_t v202;
  uint64_t v203;
  _BYTE *v204;
  _BYTE *v205;
  uint64_t v206;
  uint64_t v207;
  _BYTE *v208;
  _BYTE *v209;
  uint64_t v210;
  uint64_t v211;
  _BYTE *v212;
  _BYTE *v213;
  uint64_t v214;
  void (*v215)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v216;
  _QWORD *v217;
  _QWORD *v218;
  uint64_t v219;
  uint64_t v220;
  _QWORD *v221;
  _QWORD *v222;
  uint64_t v223;
  uint64_t v224;
  _BYTE *v225;
  _BYTE *v226;
  uint64_t v227;
  _QWORD *v228;
  _QWORD *v229;
  uint64_t v230;
  uint64_t v231;
  int v232;
  uint64_t v233;
  uint64_t v234;
  id *v235;
  int v236;
  id v237;
  id *v238;
  int v239;
  id v240;
  id *v241;
  int v242;
  id v243;
  id *v244;
  int v245;
  id v246;
  id *v247;
  int v248;
  id v249;
  uint64_t v250;
  char *v251;
  char *v252;
  uint64_t v253;
  uint64_t v254;
  _QWORD *v255;
  _QWORD *v256;
  uint64_t v257;
  uint64_t v258;
  _QWORD *v259;
  _QWORD *v260;
  uint64_t v261;
  void (*v262)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v263;
  _QWORD *v264;
  _QWORD *v265;
  uint64_t v266;
  uint64_t v267;
  _BYTE *v268;
  _BYTE *v269;
  uint64_t v270;
  _BYTE *v271;
  _BYTE *v272;
  uint64_t v273;
  _BYTE *v274;
  _BYTE *v275;
  uint64_t v276;
  uint64_t v277;
  unsigned int (*v278)(_BYTE *, uint64_t, uint64_t);
  uint64_t v279;
  uint64_t v281;
  _BYTE *__dst;
  unsigned int (*v283)(_QWORD *, uint64_t, int *);
  int *v284;
  int *v285;
  uint64_t v286;
  uint64_t v287;
  int *v288;
  _BYTE *v289;
  uint64_t v290;
  _BYTE *v291;

  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    *a1 = *(_BYTE *)a2;
    v6 = (int *)type metadata accessor for LazyJSFlowDestination(0);
    v7 = v6[5];
    v8 = &a1[v7];
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for URL(0);
    v11 = *(_QWORD *)(v10 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    v19 = v6[6];
    v20 = &a1[v19];
    v21 = (_OWORD *)((char *)a2 + v19);
    v22 = *(uint64_t *)((char *)a2 + v19 + 24);
    if (v22)
    {
      *((_QWORD *)v20 + 3) = v22;
      (**(void (***)(void))(v22 - 8))();
    }
    else
    {
      v23 = v21[1];
      *(_OWORD *)v20 = *v21;
      *((_OWORD *)v20 + 1) = v23;
    }
    a1[v6[7]] = *((_BYTE *)a2 + v6[7]);
    v24 = a1;
    v25 = a3;
    v26 = 1;
  }
  else
  {
    v13 = type metadata accessor for FlowDestination(0);
    switch(swift_getEnumCaseMultiPayload(a2, v13))
    {
      case 0u:
        v14 = type metadata accessor for URL(0);
        (*(void (**)(_BYTE *, uint64_t *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(a1, a2, v14);
        v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B6F98);
        a1[*(int *)(v15 + 48)] = *((_BYTE *)a2 + *(int *)(v15 + 48));
        v16 = a1;
        v17 = v13;
        v18 = 0;
        goto LABEL_139;
      case 1u:
        v27 = type metadata accessor for URL(0);
        v28 = *(_QWORD *)(v27 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v28 + 48))(a2, 1, v27))
        {
          v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
        }
        else
        {
          (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v28 + 16))(a1, a2, v27);
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v28 + 56))(a1, 0, 1, v27);
        }
        v16 = a1;
        v17 = v13;
        v18 = 1;
        goto LABEL_139;
      case 2u:
        v30 = type metadata accessor for URL(0);
        (*(void (**)(_BYTE *, uint64_t *, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(a1, a2, v30);
        v31 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B6F80) + 48);
        v32 = &a1[v31];
        v33 = (uint64_t *)((char *)a2 + v31);
        v34 = (int *)type metadata accessor for ArtworkModel(0);
        v35 = *((_QWORD *)v34 - 1);
        if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v35 + 48))(v33, 1, v34))
        {
          v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
          memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
        }
        else
        {
          v107 = v33[1];
          *v32 = *v33;
          v32[1] = v107;
          v108 = *((unsigned __int8 *)v33 + 32);
          swift_bridgeObjectRetain();
          if (v108 == 255)
          {
            *((_OWORD *)v32 + 1) = *((_OWORD *)v33 + 1);
            *((_BYTE *)v32 + 32) = *((_BYTE *)v33 + 32);
          }
          else
          {
            v109 = v33[2];
            v110 = v33[3];
            sub_3D464(v109, v110, v108);
            v32[2] = v109;
            v32[3] = v110;
            *((_BYTE *)v32 + 32) = v108;
          }
          *(_OWORD *)(v32 + 5) = *(_OWORD *)(v33 + 5);
          v115 = (id *)(v33 + 7);
          v116 = *((unsigned __int8 *)v33 + 64);
          if (v116 == 255)
          {
            v32[7] = *v115;
            *((_BYTE *)v32 + 64) = *((_BYTE *)v33 + 64);
          }
          else
          {
            v117 = *v115;
            sub_3D47C(*v115, *((_BYTE *)v33 + 64));
            v32[7] = v117;
            *((_BYTE *)v32 + 64) = v116;
          }
          v121 = (id *)(v33 + 9);
          v122 = *((unsigned __int8 *)v33 + 80);
          if (v122 == 255)
          {
            v32[9] = *v121;
            *((_BYTE *)v32 + 80) = *((_BYTE *)v33 + 80);
          }
          else
          {
            v123 = *v121;
            sub_3D47C(*v121, *((_BYTE *)v33 + 80));
            v32[9] = v123;
            *((_BYTE *)v32 + 80) = v122;
          }
          v127 = (id *)(v33 + 11);
          v128 = *((unsigned __int8 *)v33 + 96);
          if (v128 == 255)
          {
            v32[11] = *v127;
            *((_BYTE *)v32 + 96) = *((_BYTE *)v33 + 96);
          }
          else
          {
            v129 = *v127;
            sub_3D47C(*v127, *((_BYTE *)v33 + 96));
            v32[11] = v129;
            *((_BYTE *)v32 + 96) = v128;
          }
          v133 = (id *)(v33 + 13);
          v134 = *((unsigned __int8 *)v33 + 112);
          if (v134 == 255)
          {
            v32[13] = *v133;
            *((_BYTE *)v32 + 112) = *((_BYTE *)v33 + 112);
          }
          else
          {
            v135 = *v133;
            sub_3D47C(*v133, *((_BYTE *)v33 + 112));
            v32[13] = v135;
            *((_BYTE *)v32 + 112) = v134;
          }
          v139 = (id *)(v33 + 15);
          v140 = *((unsigned __int8 *)v33 + 128);
          if (v140 == 255)
          {
            v32[15] = *v139;
            *((_BYTE *)v32 + 128) = *((_BYTE *)v33 + 128);
          }
          else
          {
            v141 = *v139;
            sub_3D47C(*v139, *((_BYTE *)v33 + 128));
            v32[15] = v141;
            *((_BYTE *)v32 + 128) = v140;
          }
          *((_BYTE *)v32 + 129) = *((_BYTE *)v33 + 129);
          v145 = v34[11];
          v146 = (char *)v32 + v145;
          v147 = (char *)v33 + v145;
          v148 = type metadata accessor for ArtworkCrop(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v148 - 8) + 16))(v146, v147, v148);
          v149 = v34[12];
          v150 = (_QWORD *)((char *)v32 + v149);
          v151 = (_QWORD *)((char *)v33 + v149);
          v152 = v151[1];
          *v150 = *v151;
          v150[1] = v152;
          *((_BYTE *)v32 + v34[13]) = *((_BYTE *)v33 + v34[13]);
          *((_BYTE *)v32 + v34[14]) = *((_BYTE *)v33 + v34[14]);
          *((_BYTE *)v32 + v34[15]) = *((_BYTE *)v33 + v34[15]);
          v153 = v34[16];
          v154 = (_QWORD *)((char *)v32 + v153);
          v155 = (_QWORD *)((char *)v33 + v153);
          v156 = v155[1];
          *v154 = *v155;
          v154[1] = v156;
          v157 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v35 + 56);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v157(v32, 0, 1, v34);
        }
        v16 = a1;
        v17 = v13;
        v18 = 2;
        goto LABEL_139;
      case 3u:
        *(_QWORD *)a1 = *a2;
        swift_retain();
        v37 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B6F78) + 48);
        v38 = &a1[v37];
        v39 = (char *)a2 + v37;
        v40 = type metadata accessor for URL(0);
        v41 = *(_QWORD *)(v40 - 8);
        if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
        {
          v42 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
          memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
        }
        else
        {
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v41 + 16))(v38, v39, v40);
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
        }
        v16 = a1;
        v17 = v13;
        v18 = 3;
        goto LABEL_139;
      case 4u:
        *(_QWORD *)a1 = *a2;
        swift_retain();
        v43 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B6F78) + 48);
        v44 = &a1[v43];
        v45 = (char *)a2 + v43;
        v46 = type metadata accessor for URL(0);
        v47 = *(_QWORD *)(v46 - 8);
        if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46))
        {
          v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
          memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
        }
        else
        {
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v47 + 16))(v44, v45, v46);
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
        }
        v16 = a1;
        v17 = v13;
        v18 = 4;
        goto LABEL_139;
      case 5u:
        *(_QWORD *)a1 = *a2;
        swift_retain();
        v49 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B6F78) + 48);
        v50 = &a1[v49];
        v51 = (char *)a2 + v49;
        v52 = type metadata accessor for URL(0);
        v53 = *(_QWORD *)(v52 - 8);
        if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v53 + 48))(v51, 1, v52))
        {
          v54 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
          memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
        }
        else
        {
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v53 + 16))(v50, v51, v52);
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v53 + 56))(v50, 0, 1, v52);
        }
        v16 = a1;
        v17 = v13;
        v18 = 5;
        goto LABEL_139;
      case 6u:
        v55 = (void *)*a2;
        *(_QWORD *)a1 = *a2;
        v56 = v55;
        v16 = a1;
        v17 = v13;
        v18 = 6;
        goto LABEL_139;
      case 7u:
        v57 = a2[1];
        *(_QWORD *)a1 = *a2;
        *((_QWORD *)a1 + 1) = v57;
        *((_QWORD *)a1 + 2) = a2[2];
        a1[24] = *((_BYTE *)a2 + 24);
        v58 = a2[4];
        v59 = *((_BYTE *)a2 + 40);
        swift_bridgeObjectRetain();
        sub_43568(v58, v59);
        *((_QWORD *)a1 + 4) = v58;
        a1[40] = v59;
        v16 = a1;
        v17 = v13;
        v18 = 7;
        goto LABEL_139;
      case 8u:
        v60 = *a2;
        v61 = a2[1];
        v62 = a2[2];
        v63 = a2[3];
        v286 = v13;
        v64 = a2[4];
        v65 = a2[5];
        v67 = a2[6];
        v66 = a2[7];
        v290 = v66;
        v68 = *((_BYTE *)a2 + 64);
        sub_898F4(v60, v61, v62, v63, v64, v65, v67, v66, v68);
        *(_QWORD *)a1 = v60;
        *((_QWORD *)a1 + 1) = v61;
        *((_QWORD *)a1 + 2) = v62;
        *((_QWORD *)a1 + 3) = v63;
        *((_QWORD *)a1 + 4) = v64;
        *((_QWORD *)a1 + 5) = v65;
        *((_QWORD *)a1 + 6) = v67;
        *((_QWORD *)a1 + 7) = v290;
        a1[64] = v68;
        v16 = a1;
        v17 = v286;
        v18 = 8;
        goto LABEL_139;
      case 9u:
        v69 = a2[1];
        *(_QWORD *)a1 = *a2;
        *((_QWORD *)a1 + 1) = v69;
        v70 = a2[3];
        *((_QWORD *)a1 + 2) = a2[2];
        *((_QWORD *)a1 + 3) = v70;
        *((_QWORD *)a1 + 4) = a2[4];
        a1[40] = *((_BYTE *)a2 + 40);
        *((_QWORD *)a1 + 6) = a2[6];
        a1[56] = *((_BYTE *)a2 + 56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v16 = a1;
        v17 = v13;
        v18 = 9;
        goto LABEL_139;
      case 0xAu:
        *(_QWORD *)a1 = *a2;
        swift_retain();
        v16 = a1;
        v17 = v13;
        v18 = 10;
        goto LABEL_139;
      case 0xBu:
        v71 = a2[1];
        *(_QWORD *)a1 = *a2;
        *((_QWORD *)a1 + 1) = v71;
        swift_bridgeObjectRetain();
        v16 = a1;
        v17 = v13;
        v18 = 11;
        goto LABEL_139;
      case 0xCu:
        v72 = a2[1];
        *(_QWORD *)a1 = *a2;
        *((_QWORD *)a1 + 1) = v72;
        swift_bridgeObjectRetain();
        v16 = a1;
        v17 = v13;
        v18 = 12;
        goto LABEL_139;
      case 0xDu:
        *(_QWORD *)a1 = *a2;
        swift_retain();
        v16 = a1;
        v17 = v13;
        v18 = 13;
        goto LABEL_139;
      case 0xEu:
        v73 = a2[1];
        *(_QWORD *)a1 = *a2;
        *((_QWORD *)a1 + 1) = v73;
        swift_bridgeObjectRetain();
        v16 = a1;
        v17 = v13;
        v18 = 14;
        goto LABEL_139;
      case 0xFu:
        v74 = a2[1];
        *(_QWORD *)a1 = *a2;
        *((_QWORD *)a1 + 1) = v74;
        v75 = a2[3];
        *((_QWORD *)a1 + 2) = a2[2];
        *((_QWORD *)a1 + 3) = v75;
        v76 = a2[5];
        *((_QWORD *)a1 + 4) = a2[4];
        *((_QWORD *)a1 + 5) = v76;
        v77 = a2[6];
        v78 = a2[7];
        *((_QWORD *)a1 + 6) = v77;
        *((_QWORD *)a1 + 7) = v78;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v16 = a1;
        v17 = v13;
        v18 = 15;
        goto LABEL_139;
      case 0x10u:
        *(_QWORD *)a1 = *a2;
        swift_retain();
        v16 = a1;
        v17 = v13;
        v18 = 16;
        goto LABEL_139;
      case 0x11u:
        v79 = a2[1];
        *(_QWORD *)a1 = *a2;
        *((_QWORD *)a1 + 1) = v79;
        swift_bridgeObjectRetain();
        v16 = a1;
        v17 = v13;
        v18 = 17;
        goto LABEL_139;
      case 0x12u:
        v80 = type metadata accessor for URL(0);
        (*(void (**)(_BYTE *, uint64_t *, uint64_t))(*(_QWORD *)(v80 - 8) + 16))(a1, a2, v80);
        v16 = a1;
        v17 = v13;
        v18 = 18;
        goto LABEL_139;
      case 0x13u:
        v81 = a2[1];
        *(_QWORD *)a1 = *a2;
        *((_QWORD *)a1 + 1) = v81;
        swift_bridgeObjectRetain();
        v16 = a1;
        v17 = v13;
        v18 = 19;
        goto LABEL_139;
      case 0x15u:
        *(_QWORD *)a1 = *a2;
        swift_retain();
        v16 = a1;
        v17 = v13;
        v18 = 21;
        goto LABEL_139;
      case 0x16u:
        v82 = (void *)*a2;
        *(_QWORD *)a1 = *a2;
        v83 = v82;
        v16 = a1;
        v17 = v13;
        v18 = 22;
        goto LABEL_139;
      case 0x17u:
        *(_QWORD *)a1 = *a2;
        swift_retain();
        v16 = a1;
        v17 = v13;
        v18 = 23;
        goto LABEL_139;
      case 0x18u:
        v84 = type metadata accessor for URL(0);
        v85 = *(_QWORD *)(v84 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v85 + 48))(a2, 1, v84))
        {
          v86 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v86 - 8) + 64));
        }
        else
        {
          (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v85 + 16))(a1, a2, v84);
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v85 + 56))(a1, 0, 1, v84);
        }
        v16 = a1;
        v17 = v13;
        v18 = 24;
        goto LABEL_139;
      case 0x19u:
        v87 = type metadata accessor for URL(0);
        v88 = *(_QWORD *)(v87 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v88 + 48))(a2, 1, v87))
        {
          v89 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v89 - 8) + 64));
        }
        else
        {
          (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v88 + 16))(a1, a2, v87);
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v88 + 56))(a1, 0, 1, v87);
        }
        v16 = a1;
        v17 = v13;
        v18 = 25;
        goto LABEL_139;
      case 0x1Au:
        *(_QWORD *)a1 = *a2;
        swift_retain();
        v16 = a1;
        v17 = v13;
        v18 = 26;
        goto LABEL_139;
      case 0x1Bu:
        v90 = (void *)*a2;
        *(_QWORD *)a1 = *a2;
        v91 = v90;
        v16 = a1;
        v17 = v13;
        v18 = 27;
        goto LABEL_139;
      case 0x1Cu:
        *(_QWORD *)a1 = *a2;
        swift_bridgeObjectRetain();
        v16 = a1;
        v17 = v13;
        v18 = 28;
        goto LABEL_139;
      case 0x1Du:
        v92 = type metadata accessor for TranscriptRequestInformation(0);
        (*(void (**)(_BYTE *, uint64_t *, uint64_t))(*(_QWORD *)(v92 - 8) + 16))(a1, a2, v92);
        v16 = a1;
        v17 = v13;
        v18 = 29;
        goto LABEL_139;
      case 0x1Eu:
        v287 = v13;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((_QWORD *)a1 + 2) = a2[2];
        v93 = type metadata accessor for EpisodeOffer(0);
        v94 = *(int *)(v93 + 24);
        v95 = &a1[v94];
        v96 = (char *)a2 + v94;
        *(_OWORD *)v95 = *(_OWORD *)((char *)a2 + v94);
        *((_QWORD *)v95 + 2) = *(uint64_t *)((char *)a2 + v94 + 16);
        v95[24] = *((_BYTE *)a2 + v94 + 24);
        v288 = (int *)type metadata accessor for ShowOffer(0);
        v289 = v96;
        v97 = v288[7];
        v291 = v95;
        v98 = &v95[v97];
        v99 = &v96[v97];
        v100 = (int *)type metadata accessor for ArtworkModel(0);
        v281 = *((_QWORD *)v100 - 1);
        v101 = *(unsigned int (**)(_QWORD *, uint64_t, int *))(v281 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v283 = v101;
        v284 = (int *)v93;
        v285 = v100;
        if (v101(v99, 1, v100))
        {
          v102 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
          memcpy(v98, v99, *(_QWORD *)(*(_QWORD *)(v102 - 8) + 64));
        }
        else
        {
          v111 = v99[1];
          *v98 = *v99;
          v98[1] = v111;
          v112 = *((unsigned __int8 *)v99 + 32);
          swift_bridgeObjectRetain();
          if (v112 == 255)
          {
            *((_OWORD *)v98 + 1) = *((_OWORD *)v99 + 1);
            *((_BYTE *)v98 + 32) = *((_BYTE *)v99 + 32);
          }
          else
          {
            v113 = v99[2];
            v114 = v99[3];
            sub_3D464(v113, v114, v112);
            v98[2] = v113;
            v98[3] = v114;
            *((_BYTE *)v98 + 32) = v112;
          }
          *(_OWORD *)(v98 + 5) = *(_OWORD *)(v99 + 5);
          v118 = (id *)(v99 + 7);
          v119 = *((unsigned __int8 *)v99 + 64);
          if (v119 == 255)
          {
            v98[7] = *v118;
            *((_BYTE *)v98 + 64) = *((_BYTE *)v99 + 64);
          }
          else
          {
            v120 = *v118;
            sub_3D47C(*v118, *((_BYTE *)v99 + 64));
            v98[7] = v120;
            *((_BYTE *)v98 + 64) = v119;
          }
          v124 = (id *)(v99 + 9);
          v125 = *((unsigned __int8 *)v99 + 80);
          if (v125 == 255)
          {
            v98[9] = *v124;
            *((_BYTE *)v98 + 80) = *((_BYTE *)v99 + 80);
          }
          else
          {
            v126 = *v124;
            sub_3D47C(*v124, *((_BYTE *)v99 + 80));
            v98[9] = v126;
            *((_BYTE *)v98 + 80) = v125;
          }
          v130 = (id *)(v99 + 11);
          v131 = *((unsigned __int8 *)v99 + 96);
          if (v131 == 255)
          {
            v98[11] = *v130;
            *((_BYTE *)v98 + 96) = *((_BYTE *)v99 + 96);
          }
          else
          {
            v132 = *v130;
            sub_3D47C(*v130, *((_BYTE *)v99 + 96));
            v98[11] = v132;
            *((_BYTE *)v98 + 96) = v131;
          }
          v136 = (id *)(v99 + 13);
          v137 = *((unsigned __int8 *)v99 + 112);
          if (v137 == 255)
          {
            v98[13] = *v136;
            *((_BYTE *)v98 + 112) = *((_BYTE *)v99 + 112);
          }
          else
          {
            v138 = *v136;
            sub_3D47C(*v136, *((_BYTE *)v99 + 112));
            v98[13] = v138;
            *((_BYTE *)v98 + 112) = v137;
          }
          v142 = (id *)(v99 + 15);
          v143 = *((unsigned __int8 *)v99 + 128);
          if (v143 == 255)
          {
            v98[15] = *v142;
            *((_BYTE *)v98 + 128) = *((_BYTE *)v99 + 128);
          }
          else
          {
            v144 = *v142;
            sub_3D47C(*v142, *((_BYTE *)v99 + 128));
            v98[15] = v144;
            *((_BYTE *)v98 + 128) = v143;
          }
          *((_BYTE *)v98 + 129) = *((_BYTE *)v99 + 129);
          v158 = v100[11];
          v159 = (char *)v98 + v158;
          v160 = (char *)v99 + v158;
          v161 = type metadata accessor for ArtworkCrop(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v161 - 8) + 16))(v159, v160, v161);
          v162 = v100[12];
          v163 = (_QWORD *)((char *)v98 + v162);
          v164 = (_QWORD *)((char *)v99 + v162);
          v165 = v164[1];
          *v163 = *v164;
          v163[1] = v165;
          *((_BYTE *)v98 + v100[13]) = *((_BYTE *)v99 + v100[13]);
          *((_BYTE *)v98 + v100[14]) = *((_BYTE *)v99 + v100[14]);
          *((_BYTE *)v98 + v100[15]) = *((_BYTE *)v99 + v100[15]);
          v166 = v100[16];
          v167 = (_QWORD *)((char *)v98 + v166);
          v168 = (_QWORD *)((char *)v99 + v166);
          v169 = v168[1];
          *v167 = *v168;
          v167[1] = v169;
          v170 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v281 + 56);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v170(v98, 0, 1, v100);
        }
        v171 = v288[8];
        v172 = &v291[v171];
        v173 = &v289[v171];
        v174 = v173[1];
        *v172 = *v173;
        v172[1] = v174;
        v175 = v288[9];
        v176 = &v291[v175];
        v177 = &v289[v175];
        v178 = v177[1];
        *v176 = *v177;
        v176[1] = v178;
        v291[v288[10]] = v289[v288[10]];
        v179 = v288[11];
        v180 = &v291[v179];
        v181 = &v289[v179];
        v182 = v181[1];
        *v180 = *v181;
        v180[1] = v182;
        v183 = v288[12];
        v184 = &v291[v183];
        v185 = &v289[v183];
        v186 = v185[1];
        *v184 = *v185;
        v184[1] = v186;
        v187 = v288[13];
        __dst = &v291[v187];
        v188 = &v289[v187];
        v189 = type metadata accessor for URL(0);
        v190 = *(_QWORD *)(v189 - 8);
        v191 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v190 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v192 = v191;
        if (v191(v188, 1, v189))
        {
          v193 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
          memcpy(__dst, v188, *(_QWORD *)(*(_QWORD *)(v193 - 8) + 64));
        }
        else
        {
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v190 + 16))(__dst, v188, v189);
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v190 + 56))(__dst, 0, 1, v189);
        }
        v194 = v190;
        v195 = v288[14];
        v196 = &v291[v195];
        v197 = &v289[v195];
        v198 = v197[1];
        *v196 = *v197;
        v196[1] = v198;
        v199 = v288[15];
        v200 = &v291[v199];
        v201 = &v289[v199];
        v202 = v201[1];
        *v200 = *v201;
        v200[1] = v202;
        v203 = v288[16];
        v204 = &v291[v203];
        v205 = &v289[v203];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v192(v205, 1, v189))
        {
          v206 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
          memcpy(v204, v205, *(_QWORD *)(*(_QWORD *)(v206 - 8) + 64));
        }
        else
        {
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v194 + 16))(v204, v205, v189);
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v194 + 56))(v204, 0, 1, v189);
        }
        v207 = v288[17];
        v208 = &v291[v207];
        v209 = &v289[v207];
        if (v192(&v289[v207], 1, v189))
        {
          v210 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
          memcpy(v208, v209, *(_QWORD *)(*(_QWORD *)(v210 - 8) + 64));
        }
        else
        {
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v194 + 16))(v208, v209, v189);
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v194 + 56))(v208, 0, 1, v189);
        }
        v291[v288[18]] = v289[v288[18]];
        v211 = v284[7];
        v212 = &a1[v211];
        v213 = (char *)a2 + v211;
        if (v192((_BYTE *)a2 + v211, 1, v189))
        {
          v214 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
          memcpy(v212, v213, *(_QWORD *)(*(_QWORD *)(v214 - 8) + 64));
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v194 + 16))(&a1[v284[8]], (_BYTE *)a2 + v284[8], v189);
        }
        else
        {
          v215 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v194 + 16);
          v215(v212, v213, v189);
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v194 + 56))(v212, 0, 1, v189);
          v215(&a1[v284[8]], (_BYTE *)a2 + v284[8], v189);
        }
        *(_QWORD *)&a1[v284[9]] = *(uint64_t *)((char *)a2 + v284[9]);
        v216 = v284[10];
        v217 = &a1[v216];
        v218 = (uint64_t *)((char *)a2 + v216);
        v219 = v218[1];
        *v217 = *v218;
        v217[1] = v219;
        v220 = v284[11];
        v221 = &a1[v220];
        v222 = (uint64_t *)((char *)a2 + v220);
        v223 = v222[1];
        *v221 = *v222;
        v221[1] = v223;
        *(_QWORD *)&a1[v284[12]] = *(uint64_t *)((char *)a2 + v284[12]);
        a1[v284[13]] = *((_BYTE *)a2 + v284[13]);
        a1[v284[14]] = *((_BYTE *)a2 + v284[14]);
        v224 = v284[15];
        v225 = &a1[v224];
        v226 = (char *)a2 + v224;
        *(_QWORD *)v225 = *(_QWORD *)v226;
        v225[8] = v226[8];
        v227 = v284[16];
        v228 = &a1[v227];
        v229 = (uint64_t *)((char *)a2 + v227);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_retain();
        if (v283(v229, 1, v285))
        {
          v230 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
          memcpy(v228, v229, *(_QWORD *)(*(_QWORD *)(v230 - 8) + 64));
        }
        else
        {
          v231 = v229[1];
          *v228 = *v229;
          v228[1] = v231;
          v232 = *((unsigned __int8 *)v229 + 32);
          swift_bridgeObjectRetain();
          if (v232 == 255)
          {
            *((_OWORD *)v228 + 1) = *((_OWORD *)v229 + 1);
            *((_BYTE *)v228 + 32) = *((_BYTE *)v229 + 32);
          }
          else
          {
            v233 = v229[2];
            v234 = v229[3];
            sub_3D464(v233, v234, v232);
            v228[2] = v233;
            v228[3] = v234;
            *((_BYTE *)v228 + 32) = v232;
          }
          *(_OWORD *)(v228 + 5) = *(_OWORD *)(v229 + 5);
          v235 = (id *)(v229 + 7);
          v236 = *((unsigned __int8 *)v229 + 64);
          if (v236 == 255)
          {
            v228[7] = *v235;
            *((_BYTE *)v228 + 64) = *((_BYTE *)v229 + 64);
          }
          else
          {
            v237 = *v235;
            sub_3D47C(*v235, *((_BYTE *)v229 + 64));
            v228[7] = v237;
            *((_BYTE *)v228 + 64) = v236;
          }
          v238 = (id *)(v229 + 9);
          v239 = *((unsigned __int8 *)v229 + 80);
          if (v239 == 255)
          {
            v228[9] = *v238;
            *((_BYTE *)v228 + 80) = *((_BYTE *)v229 + 80);
          }
          else
          {
            v240 = *v238;
            sub_3D47C(*v238, *((_BYTE *)v229 + 80));
            v228[9] = v240;
            *((_BYTE *)v228 + 80) = v239;
          }
          v241 = (id *)(v229 + 11);
          v242 = *((unsigned __int8 *)v229 + 96);
          if (v242 == 255)
          {
            v228[11] = *v241;
            *((_BYTE *)v228 + 96) = *((_BYTE *)v229 + 96);
          }
          else
          {
            v243 = *v241;
            sub_3D47C(*v241, *((_BYTE *)v229 + 96));
            v228[11] = v243;
            *((_BYTE *)v228 + 96) = v242;
          }
          v244 = (id *)(v229 + 13);
          v245 = *((unsigned __int8 *)v229 + 112);
          if (v245 == 255)
          {
            v228[13] = *v244;
            *((_BYTE *)v228 + 112) = *((_BYTE *)v229 + 112);
          }
          else
          {
            v246 = *v244;
            sub_3D47C(*v244, *((_BYTE *)v229 + 112));
            v228[13] = v246;
            *((_BYTE *)v228 + 112) = v245;
          }
          v247 = (id *)(v229 + 15);
          v248 = *((unsigned __int8 *)v229 + 128);
          if (v248 == 255)
          {
            v228[15] = *v247;
            *((_BYTE *)v228 + 128) = *((_BYTE *)v229 + 128);
          }
          else
          {
            v249 = *v247;
            sub_3D47C(*v247, *((_BYTE *)v229 + 128));
            v228[15] = v249;
            *((_BYTE *)v228 + 128) = v248;
          }
          *((_BYTE *)v228 + 129) = *((_BYTE *)v229 + 129);
          v250 = v285[11];
          v251 = (char *)v228 + v250;
          v252 = (char *)v229 + v250;
          v253 = type metadata accessor for ArtworkCrop(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v253 - 8) + 16))(v251, v252, v253);
          v254 = v285[12];
          v255 = (_QWORD *)((char *)v228 + v254);
          v256 = (_QWORD *)((char *)v229 + v254);
          v257 = v256[1];
          *v255 = *v256;
          v255[1] = v257;
          *((_BYTE *)v228 + v285[13]) = *((_BYTE *)v229 + v285[13]);
          *((_BYTE *)v228 + v285[14]) = *((_BYTE *)v229 + v285[14]);
          *((_BYTE *)v228 + v285[15]) = *((_BYTE *)v229 + v285[15]);
          v258 = v285[16];
          v259 = (_QWORD *)((char *)v228 + v258);
          v260 = (_QWORD *)((char *)v229 + v258);
          v261 = v260[1];
          *v259 = *v260;
          v259[1] = v261;
          v262 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v281 + 56);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v262(v228, 0, 1, v285);
        }
        v263 = v284[17];
        v264 = &a1[v263];
        v265 = (uint64_t *)((char *)a2 + v263);
        v266 = v265[1];
        *v264 = *v265;
        v264[1] = v266;
        v267 = v284[18];
        v268 = &a1[v267];
        v269 = (char *)a2 + v267;
        v268[8] = v269[8];
        *(_QWORD *)v268 = *(_QWORD *)v269;
        v270 = v284[19];
        v271 = &a1[v270];
        v272 = (char *)a2 + v270;
        *(_QWORD *)v271 = *(_QWORD *)v272;
        v271[8] = v272[8];
        a1[v284[20]] = *((_BYTE *)a2 + v284[20]);
        a1[v284[21]] = *((_BYTE *)a2 + v284[21]);
        v273 = v284[22];
        v274 = &a1[v273];
        v275 = (char *)a2 + v273;
        v276 = type metadata accessor for TranscriptRequestInformation(0);
        v277 = *(_QWORD *)(v276 - 8);
        v278 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v277 + 48);
        swift_bridgeObjectRetain();
        if (v278(v275, 1, v276))
        {
          v279 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2C40);
          memcpy(v274, v275, *(_QWORD *)(*(_QWORD *)(v279 - 8) + 64));
        }
        else
        {
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v277 + 16))(v274, v275, v276);
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v277 + 56))(v274, 0, 1, v276);
        }
        v16 = a1;
        v17 = v287;
        v18 = 30;
        goto LABEL_139;
      case 0x1Fu:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((_QWORD *)a1 + 2) = a2[2];
        swift_bridgeObjectRetain();
        v16 = a1;
        v17 = v13;
        v18 = 31;
        goto LABEL_139;
      case 0x20u:
        *(_QWORD *)a1 = *a2;
        v103 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B6FA0) + 48);
        v104 = &a1[v103];
        v105 = (char *)a2 + v103;
        v106 = type metadata accessor for URL(0);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v106 - 8) + 16))(v104, v105, v106);
        v16 = a1;
        v17 = v13;
        v18 = 32;
LABEL_139:
        swift_storeEnumTagMultiPayload(v16, v17, v18);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
        break;
    }
    v24 = a1;
    v25 = a3;
    v26 = 0;
  }
  swift_storeEnumTagMultiPayload(v24, v25, v26);
  return a1;
}

uint64_t *sub_2A7008(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  _OWORD *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  int *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE *v50;
  _BYTE *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  id v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _BYTE *v85;
  _BYTE *v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  int *v90;
  unsigned int (*v91)(_QWORD *, uint64_t, int *);
  uint64_t v92;
  uint64_t v93;
  _BYTE *v94;
  _BYTE *v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  __int128 v103;
  id *v104;
  int v105;
  id v106;
  id v107;
  id *v108;
  int v109;
  id v110;
  id v111;
  id *v112;
  int v113;
  id v114;
  id v115;
  id *v116;
  int v117;
  id v118;
  id v119;
  id *v120;
  int v121;
  id v122;
  id v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  _QWORD *v130;
  uint64_t v131;
  _QWORD *v132;
  _QWORD *v133;
  void (*v134)(_QWORD *, _QWORD, uint64_t, int *);
  __int128 v135;
  id *v136;
  int v137;
  id v138;
  id v139;
  id *v140;
  int v141;
  id v142;
  id v143;
  id *v144;
  int v145;
  id v146;
  id v147;
  id *v148;
  int v149;
  id v150;
  id v151;
  id *v152;
  int v153;
  id v154;
  id v155;
  uint64_t v156;
  char *v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  _QWORD *v162;
  uint64_t v163;
  _QWORD *v164;
  _QWORD *v165;
  void (*v166)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v167;
  _QWORD *v168;
  _QWORD *v169;
  uint64_t v170;
  _QWORD *v171;
  _QWORD *v172;
  uint64_t v173;
  _QWORD *v174;
  _QWORD *v175;
  uint64_t v176;
  _QWORD *v177;
  _QWORD *v178;
  uint64_t v179;
  _BYTE *v180;
  uint64_t v181;
  uint64_t v182;
  unsigned int (*v183)(_BYTE *, uint64_t, uint64_t);
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  _QWORD *v187;
  _QWORD *v188;
  uint64_t v189;
  _QWORD *v190;
  _QWORD *v191;
  uint64_t v192;
  _BYTE *v193;
  _BYTE *v194;
  uint64_t v195;
  uint64_t v196;
  _BYTE *v197;
  _BYTE *v198;
  uint64_t v199;
  uint64_t v200;
  _BYTE *v201;
  _BYTE *v202;
  uint64_t v203;
  void (*v204)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v205;
  _QWORD *v206;
  _QWORD *v207;
  uint64_t v208;
  _QWORD *v209;
  _QWORD *v210;
  uint64_t v211;
  _BYTE *v212;
  _BYTE *v213;
  char v214;
  uint64_t v215;
  _QWORD *v216;
  _QWORD *v217;
  uint64_t v218;
  int v219;
  uint64_t v220;
  uint64_t v221;
  __int128 v222;
  id *v223;
  int v224;
  id v225;
  id v226;
  id *v227;
  int v228;
  id v229;
  id v230;
  id *v231;
  int v232;
  id v233;
  id v234;
  id *v235;
  int v236;
  id v237;
  id v238;
  id *v239;
  int v240;
  id v241;
  id v242;
  uint64_t v243;
  char *v244;
  char *v245;
  uint64_t v246;
  uint64_t v247;
  _QWORD *v248;
  _QWORD *v249;
  uint64_t v250;
  _QWORD *v251;
  _QWORD *v252;
  void (*v253)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v254;
  _QWORD *v255;
  _QWORD *v256;
  uint64_t v257;
  _BYTE *v258;
  _BYTE *v259;
  uint64_t v260;
  uint64_t v261;
  _BYTE *v262;
  _BYTE *v263;
  uint64_t v264;
  uint64_t v265;
  _BYTE *v266;
  _BYTE *v267;
  uint64_t v268;
  uint64_t v269;
  unsigned int (*v270)(_BYTE *, uint64_t, uint64_t);
  uint64_t v271;
  uint64_t v273;
  _BYTE *__dst;
  unsigned int (*v275)(_QWORD *, uint64_t, int *);
  int *v276;
  int *v277;
  uint64_t v278;
  uint64_t v279;
  int *v280;
  _BYTE *v281;
  uint64_t v282;
  _BYTE *v283;

  if (a1 != a2)
  {
    sub_145D8((uint64_t)a1, type metadata accessor for FlowAction.DestinationType);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      *(_BYTE *)a1 = *(_BYTE *)a2;
      v6 = (int *)type metadata accessor for LazyJSFlowDestination(0);
      v7 = v6[5];
      v8 = (char *)a1 + v7;
      v9 = (char *)a2 + v7;
      v10 = type metadata accessor for URL(0);
      v11 = *(_QWORD *)(v10 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
      {
        v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
        memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v11 + 16))(v8, v9, v10);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      }
      v19 = v6[6];
      v20 = (char *)a1 + v19;
      v21 = (_OWORD *)((char *)a2 + v19);
      v22 = *(uint64_t *)((char *)a2 + v19 + 24);
      if (v22)
      {
        *((_QWORD *)v20 + 3) = v22;
        (**(void (***)(void))(v22 - 8))();
      }
      else
      {
        v23 = v21[1];
        *(_OWORD *)v20 = *v21;
        *((_OWORD *)v20 + 1) = v23;
      }
      *((_BYTE *)a1 + v6[7]) = *((_BYTE *)a2 + v6[7]);
      v24 = a1;
      v25 = a3;
      v26 = 1;
    }
    else
    {
      v13 = type metadata accessor for FlowDestination(0);
      switch(swift_getEnumCaseMultiPayload(a2, v13))
      {
        case 0u:
          v14 = type metadata accessor for URL(0);
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(a1, a2, v14);
          v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B6F98);
          *((_BYTE *)a1 + *(int *)(v15 + 48)) = *((_BYTE *)a2 + *(int *)(v15 + 48));
          v16 = a1;
          v17 = v13;
          v18 = 0;
          goto LABEL_140;
        case 1u:
          v27 = type metadata accessor for URL(0);
          v28 = *(_QWORD *)(v27 - 8);
          if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v28 + 48))(a2, 1, v27))
          {
            v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
            memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
          }
          else
          {
            (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v28 + 16))(a1, a2, v27);
            (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v28 + 56))(a1, 0, 1, v27);
          }
          v16 = a1;
          v17 = v13;
          v18 = 1;
          goto LABEL_140;
        case 2u:
          v30 = type metadata accessor for URL(0);
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(a1, a2, v30);
          v31 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B6F80) + 48);
          v32 = (uint64_t *)((char *)a1 + v31);
          v33 = (uint64_t *)((char *)a2 + v31);
          v34 = (int *)type metadata accessor for ArtworkModel(0);
          v35 = *((_QWORD *)v34 - 1);
          if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v35 + 48))(v33, 1, v34))
          {
            v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
            memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
          }
          else
          {
            *v32 = *v33;
            v32[1] = v33[1];
            v97 = *((unsigned __int8 *)v33 + 32);
            swift_bridgeObjectRetain();
            if (v97 == 255)
            {
              v103 = *((_OWORD *)v33 + 1);
              *((_BYTE *)v32 + 32) = *((_BYTE *)v33 + 32);
              *((_OWORD *)v32 + 1) = v103;
            }
            else
            {
              v98 = v33[2];
              v99 = v33[3];
              sub_3D464(v98, v99, v97);
              v32[2] = v98;
              v32[3] = v99;
              *((_BYTE *)v32 + 32) = v97;
            }
            v32[5] = v33[5];
            v32[6] = v33[6];
            v104 = (id *)(v33 + 7);
            v105 = *((unsigned __int8 *)v33 + 64);
            if (v105 == 255)
            {
              v107 = *v104;
              *((_BYTE *)v32 + 64) = *((_BYTE *)v33 + 64);
              v32[7] = v107;
            }
            else
            {
              v106 = *v104;
              sub_3D47C(*v104, *((_BYTE *)v33 + 64));
              v32[7] = v106;
              *((_BYTE *)v32 + 64) = v105;
            }
            v108 = (id *)(v33 + 9);
            v109 = *((unsigned __int8 *)v33 + 80);
            if (v109 == 255)
            {
              v111 = *v108;
              *((_BYTE *)v32 + 80) = *((_BYTE *)v33 + 80);
              v32[9] = v111;
            }
            else
            {
              v110 = *v108;
              sub_3D47C(*v108, *((_BYTE *)v33 + 80));
              v32[9] = v110;
              *((_BYTE *)v32 + 80) = v109;
            }
            v112 = (id *)(v33 + 11);
            v113 = *((unsigned __int8 *)v33 + 96);
            if (v113 == 255)
            {
              v115 = *v112;
              *((_BYTE *)v32 + 96) = *((_BYTE *)v33 + 96);
              v32[11] = v115;
            }
            else
            {
              v114 = *v112;
              sub_3D47C(*v112, *((_BYTE *)v33 + 96));
              v32[11] = v114;
              *((_BYTE *)v32 + 96) = v113;
            }
            v116 = (id *)(v33 + 13);
            v117 = *((unsigned __int8 *)v33 + 112);
            if (v117 == 255)
            {
              v119 = *v116;
              *((_BYTE *)v32 + 112) = *((_BYTE *)v33 + 112);
              v32[13] = v119;
            }
            else
            {
              v118 = *v116;
              sub_3D47C(*v116, *((_BYTE *)v33 + 112));
              v32[13] = v118;
              *((_BYTE *)v32 + 112) = v117;
            }
            v120 = (id *)(v33 + 15);
            v121 = *((unsigned __int8 *)v33 + 128);
            if (v121 == 255)
            {
              v123 = *v120;
              *((_BYTE *)v32 + 128) = *((_BYTE *)v33 + 128);
              v32[15] = v123;
            }
            else
            {
              v122 = *v120;
              sub_3D47C(*v120, *((_BYTE *)v33 + 128));
              v32[15] = v122;
              *((_BYTE *)v32 + 128) = v121;
            }
            *((_BYTE *)v32 + 129) = *((_BYTE *)v33 + 129);
            v124 = v34[11];
            v125 = (char *)v32 + v124;
            v126 = (char *)v33 + v124;
            v127 = type metadata accessor for ArtworkCrop(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v127 - 8) + 16))(v125, v126, v127);
            v128 = v34[12];
            v129 = (_QWORD *)((char *)v32 + v128);
            v130 = (_QWORD *)((char *)v33 + v128);
            *v129 = *v130;
            v129[1] = v130[1];
            *((_BYTE *)v32 + v34[13]) = *((_BYTE *)v33 + v34[13]);
            *((_BYTE *)v32 + v34[14]) = *((_BYTE *)v33 + v34[14]);
            *((_BYTE *)v32 + v34[15]) = *((_BYTE *)v33 + v34[15]);
            v131 = v34[16];
            v132 = (_QWORD *)((char *)v32 + v131);
            v133 = (_QWORD *)((char *)v33 + v131);
            *v132 = *v133;
            v132[1] = v133[1];
            v134 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v35 + 56);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v134(v32, 0, 1, v34);
          }
          v16 = a1;
          v17 = v13;
          v18 = 2;
          goto LABEL_140;
        case 3u:
          *a1 = *a2;
          swift_retain();
          v37 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B6F78) + 48);
          v38 = (char *)a1 + v37;
          v39 = (char *)a2 + v37;
          v40 = type metadata accessor for URL(0);
          v41 = *(_QWORD *)(v40 - 8);
          if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
          {
            v42 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
            memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
          }
          else
          {
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v41 + 16))(v38, v39, v40);
            (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
          }
          v16 = a1;
          v17 = v13;
          v18 = 3;
          goto LABEL_140;
        case 4u:
          *a1 = *a2;
          swift_retain();
          v43 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B6F78) + 48);
          v44 = (char *)a1 + v43;
          v45 = (char *)a2 + v43;
          v46 = type metadata accessor for URL(0);
          v47 = *(_QWORD *)(v46 - 8);
          if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46))
          {
            v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
            memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
          }
          else
          {
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v47 + 16))(v44, v45, v46);
            (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
          }
          v16 = a1;
          v17 = v13;
          v18 = 4;
          goto LABEL_140;
        case 5u:
          *a1 = *a2;
          swift_retain();
          v49 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B6F78) + 48);
          v50 = (char *)a1 + v49;
          v51 = (char *)a2 + v49;
          v52 = type metadata accessor for URL(0);
          v53 = *(_QWORD *)(v52 - 8);
          if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v53 + 48))(v51, 1, v52))
          {
            v54 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
            memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
          }
          else
          {
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v53 + 16))(v50, v51, v52);
            (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v53 + 56))(v50, 0, 1, v52);
          }
          v16 = a1;
          v17 = v13;
          v18 = 5;
          goto LABEL_140;
        case 6u:
          v55 = (void *)*a2;
          *a1 = *a2;
          v56 = v55;
          v16 = a1;
          v17 = v13;
          v18 = 6;
          goto LABEL_140;
        case 7u:
          *a1 = *a2;
          a1[1] = a2[1];
          v57 = a2[2];
          *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
          a1[2] = v57;
          v58 = a2[4];
          v59 = *((_BYTE *)a2 + 40);
          swift_bridgeObjectRetain();
          sub_43568(v58, v59);
          a1[4] = v58;
          *((_BYTE *)a1 + 40) = v59;
          v16 = a1;
          v17 = v13;
          v18 = 7;
          goto LABEL_140;
        case 8u:
          v60 = *a2;
          v61 = a2[1];
          v62 = a2[2];
          v63 = a2[3];
          v278 = v13;
          v64 = a2[4];
          v65 = a2[5];
          v67 = a2[6];
          v66 = a2[7];
          v282 = v66;
          v68 = *((_BYTE *)a2 + 64);
          sub_898F4(v60, v61, v62, v63, v64, v65, v67, v66, v68);
          *a1 = v60;
          a1[1] = v61;
          a1[2] = v62;
          a1[3] = v63;
          a1[4] = v64;
          a1[5] = v65;
          a1[6] = v67;
          a1[7] = v282;
          *((_BYTE *)a1 + 64) = v68;
          v16 = a1;
          v17 = v278;
          v18 = 8;
          goto LABEL_140;
        case 9u:
          *a1 = *a2;
          a1[1] = a2[1];
          a1[2] = a2[2];
          a1[3] = a2[3];
          v69 = a2[4];
          *((_BYTE *)a1 + 40) = *((_BYTE *)a2 + 40);
          a1[4] = v69;
          v70 = a2[6];
          *((_BYTE *)a1 + 56) = *((_BYTE *)a2 + 56);
          a1[6] = v70;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v16 = a1;
          v17 = v13;
          v18 = 9;
          goto LABEL_140;
        case 0xAu:
          *a1 = *a2;
          swift_retain();
          v16 = a1;
          v17 = v13;
          v18 = 10;
          goto LABEL_140;
        case 0xBu:
          *a1 = *a2;
          a1[1] = a2[1];
          swift_bridgeObjectRetain();
          v16 = a1;
          v17 = v13;
          v18 = 11;
          goto LABEL_140;
        case 0xCu:
          *a1 = *a2;
          a1[1] = a2[1];
          swift_bridgeObjectRetain();
          v16 = a1;
          v17 = v13;
          v18 = 12;
          goto LABEL_140;
        case 0xDu:
          *a1 = *a2;
          swift_retain();
          v16 = a1;
          v17 = v13;
          v18 = 13;
          goto LABEL_140;
        case 0xEu:
          *a1 = *a2;
          a1[1] = a2[1];
          swift_bridgeObjectRetain();
          v16 = a1;
          v17 = v13;
          v18 = 14;
          goto LABEL_140;
        case 0xFu:
          *a1 = *a2;
          a1[1] = a2[1];
          a1[2] = a2[2];
          a1[3] = a2[3];
          a1[4] = a2[4];
          a1[5] = a2[5];
          a1[6] = a2[6];
          a1[7] = a2[7];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v16 = a1;
          v17 = v13;
          v18 = 15;
          goto LABEL_140;
        case 0x10u:
          *a1 = *a2;
          swift_retain();
          v16 = a1;
          v17 = v13;
          v18 = 16;
          goto LABEL_140;
        case 0x11u:
          *a1 = *a2;
          a1[1] = a2[1];
          swift_bridgeObjectRetain();
          v16 = a1;
          v17 = v13;
          v18 = 17;
          goto LABEL_140;
        case 0x12u:
          v71 = type metadata accessor for URL(0);
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v71 - 8) + 16))(a1, a2, v71);
          v16 = a1;
          v17 = v13;
          v18 = 18;
          goto LABEL_140;
        case 0x13u:
          *a1 = *a2;
          a1[1] = a2[1];
          swift_bridgeObjectRetain();
          v16 = a1;
          v17 = v13;
          v18 = 19;
          goto LABEL_140;
        case 0x15u:
          *a1 = *a2;
          swift_retain();
          v16 = a1;
          v17 = v13;
          v18 = 21;
          goto LABEL_140;
        case 0x16u:
          v72 = (void *)*a2;
          *a1 = *a2;
          v73 = v72;
          v16 = a1;
          v17 = v13;
          v18 = 22;
          goto LABEL_140;
        case 0x17u:
          *a1 = *a2;
          swift_retain();
          v16 = a1;
          v17 = v13;
          v18 = 23;
          goto LABEL_140;
        case 0x18u:
          v74 = type metadata accessor for URL(0);
          v75 = *(_QWORD *)(v74 - 8);
          if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v75 + 48))(a2, 1, v74))
          {
            v76 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
            memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64));
          }
          else
          {
            (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v75 + 16))(a1, a2, v74);
            (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v75 + 56))(a1, 0, 1, v74);
          }
          v16 = a1;
          v17 = v13;
          v18 = 24;
          goto LABEL_140;
        case 0x19u:
          v77 = type metadata accessor for URL(0);
          v78 = *(_QWORD *)(v77 - 8);
          if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v78 + 48))(a2, 1, v77))
          {
            v79 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
            memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v79 - 8) + 64));
          }
          else
          {
            (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v78 + 16))(a1, a2, v77);
            (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v78 + 56))(a1, 0, 1, v77);
          }
          v16 = a1;
          v17 = v13;
          v18 = 25;
          goto LABEL_140;
        case 0x1Au:
          *a1 = *a2;
          swift_retain();
          v16 = a1;
          v17 = v13;
          v18 = 26;
          goto LABEL_140;
        case 0x1Bu:
          v80 = (void *)*a2;
          *a1 = *a2;
          v81 = v80;
          v16 = a1;
          v17 = v13;
          v18 = 27;
          goto LABEL_140;
        case 0x1Cu:
          *a1 = *a2;
          swift_bridgeObjectRetain();
          v16 = a1;
          v17 = v13;
          v18 = 28;
          goto LABEL_140;
        case 0x1Du:
          v82 = type metadata accessor for TranscriptRequestInformation(0);
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v82 - 8) + 16))(a1, a2, v82);
          v16 = a1;
          v17 = v13;
          v18 = 29;
          goto LABEL_140;
        case 0x1Eu:
          v279 = v13;
          *a1 = *a2;
          a1[1] = a2[1];
          a1[2] = a2[2];
          v83 = type metadata accessor for EpisodeOffer(0);
          v84 = *(int *)(v83 + 24);
          v85 = (char *)a1 + v84;
          v86 = (char *)a2 + v84;
          *(_QWORD *)v85 = *(uint64_t *)((char *)a2 + v84);
          *((_QWORD *)v85 + 1) = *(uint64_t *)((char *)a2 + v84 + 8);
          *((_QWORD *)v85 + 2) = *(uint64_t *)((char *)a2 + v84 + 16);
          v85[24] = *((_BYTE *)a2 + v84 + 24);
          v280 = (int *)type metadata accessor for ShowOffer(0);
          v281 = v86;
          v87 = v280[7];
          v283 = v85;
          v88 = &v85[v87];
          v89 = &v86[v87];
          v90 = (int *)type metadata accessor for ArtworkModel(0);
          v273 = *((_QWORD *)v90 - 1);
          v91 = *(unsigned int (**)(_QWORD *, uint64_t, int *))(v273 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v276 = (int *)v83;
          v277 = v90;
          v275 = v91;
          if (v91(v89, 1, v90))
          {
            v92 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
            memcpy(v88, v89, *(_QWORD *)(*(_QWORD *)(v92 - 8) + 64));
          }
          else
          {
            *v88 = *v89;
            v88[1] = v89[1];
            v100 = *((unsigned __int8 *)v89 + 32);
            swift_bridgeObjectRetain();
            if (v100 == 255)
            {
              v135 = *((_OWORD *)v89 + 1);
              *((_BYTE *)v88 + 32) = *((_BYTE *)v89 + 32);
              *((_OWORD *)v88 + 1) = v135;
            }
            else
            {
              v101 = v89[2];
              v102 = v89[3];
              sub_3D464(v101, v102, v100);
              v88[2] = v101;
              v88[3] = v102;
              *((_BYTE *)v88 + 32) = v100;
            }
            v88[5] = v89[5];
            v88[6] = v89[6];
            v136 = (id *)(v89 + 7);
            v137 = *((unsigned __int8 *)v89 + 64);
            if (v137 == 255)
            {
              v139 = *v136;
              *((_BYTE *)v88 + 64) = *((_BYTE *)v89 + 64);
              v88[7] = v139;
            }
            else
            {
              v138 = *v136;
              sub_3D47C(*v136, *((_BYTE *)v89 + 64));
              v88[7] = v138;
              *((_BYTE *)v88 + 64) = v137;
            }
            v140 = (id *)(v89 + 9);
            v141 = *((unsigned __int8 *)v89 + 80);
            if (v141 == 255)
            {
              v143 = *v140;
              *((_BYTE *)v88 + 80) = *((_BYTE *)v89 + 80);
              v88[9] = v143;
            }
            else
            {
              v142 = *v140;
              sub_3D47C(*v140, *((_BYTE *)v89 + 80));
              v88[9] = v142;
              *((_BYTE *)v88 + 80) = v141;
            }
            v144 = (id *)(v89 + 11);
            v145 = *((unsigned __int8 *)v89 + 96);
            if (v145 == 255)
            {
              v147 = *v144;
              *((_BYTE *)v88 + 96) = *((_BYTE *)v89 + 96);
              v88[11] = v147;
            }
            else
            {
              v146 = *v144;
              sub_3D47C(*v144, *((_BYTE *)v89 + 96));
              v88[11] = v146;
              *((_BYTE *)v88 + 96) = v145;
            }
            v148 = (id *)(v89 + 13);
            v149 = *((unsigned __int8 *)v89 + 112);
            if (v149 == 255)
            {
              v151 = *v148;
              *((_BYTE *)v88 + 112) = *((_BYTE *)v89 + 112);
              v88[13] = v151;
            }
            else
            {
              v150 = *v148;
              sub_3D47C(*v148, *((_BYTE *)v89 + 112));
              v88[13] = v150;
              *((_BYTE *)v88 + 112) = v149;
            }
            v152 = (id *)(v89 + 15);
            v153 = *((unsigned __int8 *)v89 + 128);
            if (v153 == 255)
            {
              v155 = *v152;
              *((_BYTE *)v88 + 128) = *((_BYTE *)v89 + 128);
              v88[15] = v155;
            }
            else
            {
              v154 = *v152;
              sub_3D47C(*v152, *((_BYTE *)v89 + 128));
              v88[15] = v154;
              *((_BYTE *)v88 + 128) = v153;
            }
            *((_BYTE *)v88 + 129) = *((_BYTE *)v89 + 129);
            v156 = v90[11];
            v157 = (char *)v88 + v156;
            v158 = (char *)v89 + v156;
            v159 = type metadata accessor for ArtworkCrop(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v159 - 8) + 16))(v157, v158, v159);
            v160 = v90[12];
            v161 = (_QWORD *)((char *)v88 + v160);
            v162 = (_QWORD *)((char *)v89 + v160);
            *v161 = *v162;
            v161[1] = v162[1];
            *((_BYTE *)v88 + v90[13]) = *((_BYTE *)v89 + v90[13]);
            *((_BYTE *)v88 + v90[14]) = *((_BYTE *)v89 + v90[14]);
            *((_BYTE *)v88 + v90[15]) = *((_BYTE *)v89 + v90[15]);
            v163 = v90[16];
            v164 = (_QWORD *)((char *)v88 + v163);
            v165 = (_QWORD *)((char *)v89 + v163);
            *v164 = *v165;
            v164[1] = v165[1];
            v166 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v273 + 56);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v166(v88, 0, 1, v90);
          }
          v167 = v280[8];
          v168 = &v283[v167];
          v169 = &v281[v167];
          *v168 = *v169;
          v168[1] = v169[1];
          v170 = v280[9];
          v171 = &v283[v170];
          v172 = &v281[v170];
          *v171 = *v172;
          v171[1] = v172[1];
          v283[v280[10]] = v281[v280[10]];
          v173 = v280[11];
          v174 = &v283[v173];
          v175 = &v281[v173];
          *v174 = *v175;
          v174[1] = v175[1];
          v176 = v280[12];
          v177 = &v283[v176];
          v178 = &v281[v176];
          *v177 = *v178;
          v177[1] = v178[1];
          v179 = v280[13];
          __dst = &v283[v179];
          v180 = &v281[v179];
          v181 = type metadata accessor for URL(0);
          v182 = *(_QWORD *)(v181 - 8);
          v183 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v182 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v183(v180, 1, v181))
          {
            v184 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
            memcpy(__dst, v180, *(_QWORD *)(*(_QWORD *)(v184 - 8) + 64));
          }
          else
          {
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v182 + 16))(__dst, v180, v181);
            (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v182 + 56))(__dst, 0, 1, v181);
          }
          v185 = v182;
          v186 = v280[14];
          v187 = &v283[v186];
          v188 = &v281[v186];
          *v187 = *v188;
          v187[1] = v188[1];
          v189 = v280[15];
          v190 = &v283[v189];
          v191 = &v281[v189];
          *v190 = *v191;
          v190[1] = v191[1];
          v192 = v280[16];
          v193 = &v283[v192];
          v194 = &v281[v192];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v183(v194, 1, v181))
          {
            v195 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
            memcpy(v193, v194, *(_QWORD *)(*(_QWORD *)(v195 - 8) + 64));
          }
          else
          {
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v185 + 16))(v193, v194, v181);
            (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v185 + 56))(v193, 0, 1, v181);
          }
          v196 = v280[17];
          v197 = &v283[v196];
          v198 = &v281[v196];
          if (v183(&v281[v196], 1, v181))
          {
            v199 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
            memcpy(v197, v198, *(_QWORD *)(*(_QWORD *)(v199 - 8) + 64));
          }
          else
          {
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v185 + 16))(v197, v198, v181);
            (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v185 + 56))(v197, 0, 1, v181);
          }
          v283[v280[18]] = v281[v280[18]];
          v200 = v276[7];
          v201 = (char *)a1 + v200;
          v202 = (char *)a2 + v200;
          if (v183((_BYTE *)a2 + v200, 1, v181))
          {
            v203 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
            memcpy(v201, v202, *(_QWORD *)(*(_QWORD *)(v203 - 8) + 64));
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v185 + 16))((_BYTE *)a1 + v276[8], (_BYTE *)a2 + v276[8], v181);
          }
          else
          {
            v204 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v185 + 16);
            v204(v201, v202, v181);
            (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v185 + 56))(v201, 0, 1, v181);
            v204((_BYTE *)a1 + v276[8], (_BYTE *)a2 + v276[8], v181);
          }
          *(uint64_t *)((char *)a1 + v276[9]) = *(uint64_t *)((char *)a2 + v276[9]);
          v205 = v276[10];
          v206 = (uint64_t *)((char *)a1 + v205);
          v207 = (uint64_t *)((char *)a2 + v205);
          *v206 = *v207;
          v206[1] = v207[1];
          v208 = v276[11];
          v209 = (uint64_t *)((char *)a1 + v208);
          v210 = (uint64_t *)((char *)a2 + v208);
          *v209 = *v210;
          v209[1] = v210[1];
          *(uint64_t *)((char *)a1 + v276[12]) = *(uint64_t *)((char *)a2 + v276[12]);
          *((_BYTE *)a1 + v276[13]) = *((_BYTE *)a2 + v276[13]);
          *((_BYTE *)a1 + v276[14]) = *((_BYTE *)a2 + v276[14]);
          v211 = v276[15];
          v212 = (char *)a1 + v211;
          v213 = (char *)a2 + v211;
          v214 = v213[8];
          *(_QWORD *)v212 = *(_QWORD *)v213;
          v212[8] = v214;
          v215 = v276[16];
          v216 = (uint64_t *)((char *)a1 + v215);
          v217 = (uint64_t *)((char *)a2 + v215);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_retain();
          if (v275(v217, 1, v277))
          {
            v218 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
            memcpy(v216, v217, *(_QWORD *)(*(_QWORD *)(v218 - 8) + 64));
          }
          else
          {
            *v216 = *v217;
            v216[1] = v217[1];
            v219 = *((unsigned __int8 *)v217 + 32);
            swift_bridgeObjectRetain();
            if (v219 == 255)
            {
              v222 = *((_OWORD *)v217 + 1);
              *((_BYTE *)v216 + 32) = *((_BYTE *)v217 + 32);
              *((_OWORD *)v216 + 1) = v222;
            }
            else
            {
              v220 = v217[2];
              v221 = v217[3];
              sub_3D464(v220, v221, v219);
              v216[2] = v220;
              v216[3] = v221;
              *((_BYTE *)v216 + 32) = v219;
            }
            v216[5] = v217[5];
            v216[6] = v217[6];
            v223 = (id *)(v217 + 7);
            v224 = *((unsigned __int8 *)v217 + 64);
            if (v224 == 255)
            {
              v226 = *v223;
              *((_BYTE *)v216 + 64) = *((_BYTE *)v217 + 64);
              v216[7] = v226;
            }
            else
            {
              v225 = *v223;
              sub_3D47C(*v223, *((_BYTE *)v217 + 64));
              v216[7] = v225;
              *((_BYTE *)v216 + 64) = v224;
            }
            v227 = (id *)(v217 + 9);
            v228 = *((unsigned __int8 *)v217 + 80);
            if (v228 == 255)
            {
              v230 = *v227;
              *((_BYTE *)v216 + 80) = *((_BYTE *)v217 + 80);
              v216[9] = v230;
            }
            else
            {
              v229 = *v227;
              sub_3D47C(*v227, *((_BYTE *)v217 + 80));
              v216[9] = v229;
              *((_BYTE *)v216 + 80) = v228;
            }
            v231 = (id *)(v217 + 11);
            v232 = *((unsigned __int8 *)v217 + 96);
            if (v232 == 255)
            {
              v234 = *v231;
              *((_BYTE *)v216 + 96) = *((_BYTE *)v217 + 96);
              v216[11] = v234;
            }
            else
            {
              v233 = *v231;
              sub_3D47C(*v231, *((_BYTE *)v217 + 96));
              v216[11] = v233;
              *((_BYTE *)v216 + 96) = v232;
            }
            v235 = (id *)(v217 + 13);
            v236 = *((unsigned __int8 *)v217 + 112);
            if (v236 == 255)
            {
              v238 = *v235;
              *((_BYTE *)v216 + 112) = *((_BYTE *)v217 + 112);
              v216[13] = v238;
            }
            else
            {
              v237 = *v235;
              sub_3D47C(*v235, *((_BYTE *)v217 + 112));
              v216[13] = v237;
              *((_BYTE *)v216 + 112) = v236;
            }
            v239 = (id *)(v217 + 15);
            v240 = *((unsigned __int8 *)v217 + 128);
            if (v240 == 255)
            {
              v242 = *v239;
              *((_BYTE *)v216 + 128) = *((_BYTE *)v217 + 128);
              v216[15] = v242;
            }
            else
            {
              v241 = *v239;
              sub_3D47C(*v239, *((_BYTE *)v217 + 128));
              v216[15] = v241;
              *((_BYTE *)v216 + 128) = v240;
            }
            *((_BYTE *)v216 + 129) = *((_BYTE *)v217 + 129);
            v243 = v277[11];
            v244 = (char *)v216 + v243;
            v245 = (char *)v217 + v243;
            v246 = type metadata accessor for ArtworkCrop(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v246 - 8) + 16))(v244, v245, v246);
            v247 = v277[12];
            v248 = (_QWORD *)((char *)v216 + v247);
            v249 = (_QWORD *)((char *)v217 + v247);
            *v248 = *v249;
            v248[1] = v249[1];
            *((_BYTE *)v216 + v277[13]) = *((_BYTE *)v217 + v277[13]);
            *((_BYTE *)v216 + v277[14]) = *((_BYTE *)v217 + v277[14]);
            *((_BYTE *)v216 + v277[15]) = *((_BYTE *)v217 + v277[15]);
            v250 = v277[16];
            v251 = (_QWORD *)((char *)v216 + v250);
            v252 = (_QWORD *)((char *)v217 + v250);
            *v251 = *v252;
            v251[1] = v252[1];
            v253 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v273 + 56);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v253(v216, 0, 1, v277);
          }
          v254 = v276[17];
          v255 = (uint64_t *)((char *)a1 + v254);
          v256 = (uint64_t *)((char *)a2 + v254);
          *v255 = *v256;
          v255[1] = v256[1];
          v257 = v276[18];
          v258 = (char *)a1 + v257;
          v259 = (char *)a2 + v257;
          v260 = *(_QWORD *)v259;
          v258[8] = v259[8];
          *(_QWORD *)v258 = v260;
          v261 = v276[19];
          v262 = (char *)a1 + v261;
          v263 = (char *)a2 + v261;
          v264 = *(_QWORD *)v263;
          v262[8] = v263[8];
          *(_QWORD *)v262 = v264;
          *((_BYTE *)a1 + v276[20]) = *((_BYTE *)a2 + v276[20]);
          *((_BYTE *)a1 + v276[21]) = *((_BYTE *)a2 + v276[21]);
          v265 = v276[22];
          v266 = (char *)a1 + v265;
          v267 = (char *)a2 + v265;
          v268 = type metadata accessor for TranscriptRequestInformation(0);
          v269 = *(_QWORD *)(v268 - 8);
          v270 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v269 + 48);
          swift_bridgeObjectRetain();
          if (v270(v267, 1, v268))
          {
            v271 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2C40);
            memcpy(v266, v267, *(_QWORD *)(*(_QWORD *)(v271 - 8) + 64));
          }
          else
          {
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v269 + 16))(v266, v267, v268);
            (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v269 + 56))(v266, 0, 1, v268);
          }
          v16 = a1;
          v17 = v279;
          v18 = 30;
          goto LABEL_140;
        case 0x1Fu:
          *a1 = *a2;
          a1[1] = a2[1];
          a1[2] = a2[2];
          swift_bridgeObjectRetain();
          v16 = a1;
          v17 = v13;
          v18 = 31;
          goto LABEL_140;
        case 0x20u:
          *a1 = *a2;
          v93 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B6FA0) + 48);
          v94 = (char *)a1 + v93;
          v95 = (char *)a2 + v93;
          v96 = type metadata accessor for URL(0);
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v96 - 8) + 16))(v94, v95, v96);
          v16 = a1;
          v17 = v13;
          v18 = 32;
LABEL_140:
          swift_storeEnumTagMultiPayload(v16, v17, v18);
          break;
        default:
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
          break;
      }
      v24 = a1;
      v25 = a3;
      v26 = 0;
    }
    swift_storeEnumTagMultiPayload(v24, v25, v26);
  }
  return a1;
}

_BYTE *sub_2A876C(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  _OWORD *v21;
  __int128 v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  _OWORD *v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  _BYTE *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE *v49;
  _BYTE *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _BYTE *v63;
  _BYTE *v64;
  int *v65;
  uint64_t v66;
  _OWORD *v67;
  _OWORD *v68;
  int *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _BYTE *v73;
  _BYTE *v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _BYTE *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _BYTE *v90;
  _BYTE *v91;
  uint64_t v92;
  uint64_t v93;
  _BYTE *v94;
  _BYTE *v95;
  uint64_t v96;
  uint64_t v97;
  _BYTE *v98;
  _BYTE *v99;
  uint64_t v100;
  void (*v101)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v102;
  _BYTE *v103;
  _BYTE *v104;
  uint64_t v105;
  _OWORD *v106;
  _OWORD *v107;
  uint64_t v108;
  __int128 v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  _BYTE *v115;
  _BYTE *v116;
  uint64_t v117;
  _BYTE *v118;
  _BYTE *v119;
  uint64_t v120;
  _BYTE *v121;
  _BYTE *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int (*v127)(_OWORD *, uint64_t, int *);
  int *v128;
  int *v129;
  uint64_t v130;
  _BYTE *__dst;
  char *v132;
  uint64_t v133;
  char *v134;
  unsigned int (*v135)(_BYTE *, uint64_t, uint64_t);

  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    *a1 = *a2;
    v6 = (int *)type metadata accessor for LazyJSFlowDestination(0);
    v7 = v6[5];
    v8 = &a1[v7];
    v9 = &a2[v7];
    v10 = type metadata accessor for URL(0);
    v11 = *(_QWORD *)(v10 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    v19 = v6[6];
    v20 = &a1[v19];
    v21 = &a2[v19];
    v22 = v21[1];
    *v20 = *v21;
    v20[1] = v22;
    a1[v6[7]] = a2[v6[7]];
    v23 = a1;
    v24 = a3;
    v25 = 1;
  }
  else
  {
    v13 = type metadata accessor for FlowDestination(0);
    switch(swift_getEnumCaseMultiPayload(a2, v13))
    {
      case 0u:
        v14 = type metadata accessor for URL(0);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(a1, a2, v14);
        v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B6F98);
        a1[*(int *)(v15 + 48)] = a2[*(int *)(v15 + 48)];
        v16 = a1;
        v17 = v13;
        v18 = 0;
        goto LABEL_62;
      case 1u:
        v26 = type metadata accessor for URL(0);
        v27 = *(_QWORD *)(v26 - 8);
        if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v27 + 48))(a2, 1, v26))
        {
          v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
        }
        else
        {
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v27 + 32))(a1, a2, v26);
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v27 + 56))(a1, 0, 1, v26);
        }
        v16 = a1;
        v17 = v13;
        v18 = 1;
        goto LABEL_62;
      case 2u:
        v29 = type metadata accessor for URL(0);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v29 - 8) + 32))(a1, a2, v29);
        v30 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B6F80) + 48);
        v31 = &a1[v30];
        v32 = &a2[v30];
        v33 = (int *)type metadata accessor for ArtworkModel(0);
        v34 = *((_QWORD *)v33 - 1);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v34 + 48))(v32, 1, v33))
        {
          v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
          memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
        }
        else
        {
          v76 = v32[1];
          *v31 = *v32;
          v31[1] = v76;
          *((_BYTE *)v31 + 32) = *((_BYTE *)v32 + 32);
          *(_OWORD *)((char *)v31 + 40) = *(_OWORD *)((char *)v32 + 40);
          *((_QWORD *)v31 + 7) = *((_QWORD *)v32 + 7);
          *((_BYTE *)v31 + 64) = *((_BYTE *)v32 + 64);
          *(_OWORD *)((char *)v31 + 113) = *(_OWORD *)((char *)v32 + 113);
          *(_OWORD *)((char *)v31 + 104) = *(_OWORD *)((char *)v32 + 104);
          *(_OWORD *)((char *)v31 + 88) = *(_OWORD *)((char *)v32 + 88);
          *(_OWORD *)((char *)v31 + 72) = *(_OWORD *)((char *)v32 + 72);
          *((_BYTE *)v31 + 129) = *((_BYTE *)v32 + 129);
          v77 = v33[11];
          v78 = (char *)v31 + v77;
          v79 = (char *)v32 + v77;
          v80 = type metadata accessor for ArtworkCrop(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v80 - 8) + 32))(v78, v79, v80);
          *(_OWORD *)((char *)v31 + v33[12]) = *(_OWORD *)((char *)v32 + v33[12]);
          *((_BYTE *)v31 + v33[13]) = *((_BYTE *)v32 + v33[13]);
          *((_BYTE *)v31 + v33[14]) = *((_BYTE *)v32 + v33[14]);
          *((_BYTE *)v31 + v33[15]) = *((_BYTE *)v32 + v33[15]);
          *(_OWORD *)((char *)v31 + v33[16]) = *(_OWORD *)((char *)v32 + v33[16]);
          (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v34 + 56))(v31, 0, 1, v33);
        }
        v16 = a1;
        v17 = v13;
        v18 = 2;
        goto LABEL_62;
      case 3u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v36 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B6F78) + 48);
        v37 = &a1[v36];
        v38 = &a2[v36];
        v39 = type metadata accessor for URL(0);
        v40 = *(_QWORD *)(v39 - 8);
        if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39))
        {
          v41 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
          memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
        }
        else
        {
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v40 + 32))(v37, v38, v39);
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
        }
        v16 = a1;
        v17 = v13;
        v18 = 3;
        goto LABEL_62;
      case 4u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v42 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B6F78) + 48);
        v43 = &a1[v42];
        v44 = &a2[v42];
        v45 = type metadata accessor for URL(0);
        v46 = *(_QWORD *)(v45 - 8);
        if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v46 + 48))(v44, 1, v45))
        {
          v47 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
          memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
        }
        else
        {
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v46 + 32))(v43, v44, v45);
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
        }
        v16 = a1;
        v17 = v13;
        v18 = 4;
        goto LABEL_62;
      case 5u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v48 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B6F78) + 48);
        v49 = &a1[v48];
        v50 = &a2[v48];
        v51 = type metadata accessor for URL(0);
        v52 = *(_QWORD *)(v51 - 8);
        if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v52 + 48))(v50, 1, v51))
        {
          v53 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
          memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
        }
        else
        {
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v52 + 32))(v49, v50, v51);
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v52 + 56))(v49, 0, 1, v51);
        }
        v16 = a1;
        v17 = v13;
        v18 = 5;
        goto LABEL_62;
      case 0x12u:
        v54 = type metadata accessor for URL(0);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v54 - 8) + 32))(a1, a2, v54);
        v16 = a1;
        v17 = v13;
        v18 = 18;
        goto LABEL_62;
      case 0x18u:
        v55 = type metadata accessor for URL(0);
        v56 = *(_QWORD *)(v55 - 8);
        if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v56 + 48))(a2, 1, v55))
        {
          v57 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
        }
        else
        {
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v56 + 32))(a1, a2, v55);
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v56 + 56))(a1, 0, 1, v55);
        }
        v16 = a1;
        v17 = v13;
        v18 = 24;
        goto LABEL_62;
      case 0x19u:
        v58 = type metadata accessor for URL(0);
        v59 = *(_QWORD *)(v58 - 8);
        if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v59 + 48))(a2, 1, v58))
        {
          v60 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
        }
        else
        {
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v59 + 32))(a1, a2, v58);
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v59 + 56))(a1, 0, 1, v58);
        }
        v16 = a1;
        v17 = v13;
        v18 = 25;
        goto LABEL_62;
      case 0x1Du:
        v61 = type metadata accessor for TranscriptRequestInformation(0);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v61 - 8) + 32))(a1, a2, v61);
        v16 = a1;
        v17 = v13;
        v18 = 29;
        goto LABEL_62;
      case 0x1Eu:
        v130 = v13;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
        v128 = (int *)type metadata accessor for EpisodeOffer(0);
        v62 = v128[6];
        v63 = &a1[v62];
        v64 = &a2[v62];
        *(_QWORD *)v63 = *(_QWORD *)&a2[v62];
        *(_OWORD *)(v63 + 8) = *(_OWORD *)&a2[v62 + 8];
        v63[24] = a2[v62 + 24];
        v65 = (int *)type metadata accessor for ShowOffer(0);
        v66 = v65[7];
        v67 = &v63[v66];
        v68 = &v64[v66];
        v69 = (int *)type metadata accessor for ArtworkModel(0);
        v70 = *((_QWORD *)v69 - 1);
        v127 = *(unsigned int (**)(_OWORD *, uint64_t, int *))(v70 + 48);
        v129 = v69;
        if (v127(v68, 1, v69))
        {
          v71 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
          memcpy(v67, v68, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
        }
        else
        {
          v81 = v68[1];
          *v67 = *v68;
          v67[1] = v81;
          *((_BYTE *)v67 + 32) = *((_BYTE *)v68 + 32);
          *(_OWORD *)((char *)v67 + 40) = *(_OWORD *)((char *)v68 + 40);
          *((_QWORD *)v67 + 7) = *((_QWORD *)v68 + 7);
          *((_BYTE *)v67 + 64) = *((_BYTE *)v68 + 64);
          *(_OWORD *)((char *)v67 + 113) = *(_OWORD *)((char *)v68 + 113);
          *(_OWORD *)((char *)v67 + 104) = *(_OWORD *)((char *)v68 + 104);
          *(_OWORD *)((char *)v67 + 88) = *(_OWORD *)((char *)v68 + 88);
          *(_OWORD *)((char *)v67 + 72) = *(_OWORD *)((char *)v68 + 72);
          *((_BYTE *)v67 + 129) = *((_BYTE *)v68 + 129);
          v82 = v69[11];
          v132 = (char *)v68 + v82;
          v134 = (char *)v67 + v82;
          v83 = type metadata accessor for ArtworkCrop(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v83 - 8) + 32))(v134, v132, v83);
          *(_OWORD *)((char *)v67 + v69[12]) = *(_OWORD *)((char *)v68 + v69[12]);
          *((_BYTE *)v67 + v69[13]) = *((_BYTE *)v68 + v69[13]);
          *((_BYTE *)v67 + v69[14]) = *((_BYTE *)v68 + v69[14]);
          *((_BYTE *)v67 + v69[15]) = *((_BYTE *)v68 + v69[15]);
          *(_OWORD *)((char *)v67 + v69[16]) = *(_OWORD *)((char *)v68 + v69[16]);
          (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v70 + 56))(v67, 0, 1, v69);
        }
        *(_OWORD *)&v63[v65[8]] = *(_OWORD *)&v64[v65[8]];
        *(_OWORD *)&v63[v65[9]] = *(_OWORD *)&v64[v65[9]];
        v63[v65[10]] = v64[v65[10]];
        *(_OWORD *)&v63[v65[11]] = *(_OWORD *)&v64[v65[11]];
        *(_OWORD *)&v63[v65[12]] = *(_OWORD *)&v64[v65[12]];
        v84 = v65[13];
        __dst = &v63[v84];
        v85 = &v64[v84];
        v86 = type metadata accessor for URL(0);
        v87 = *(_QWORD *)(v86 - 8);
        v135 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v87 + 48);
        v133 = v87;
        if (v135(v85, 1, v86))
        {
          v88 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
          memcpy(__dst, v85, *(_QWORD *)(*(_QWORD *)(v88 - 8) + 64));
        }
        else
        {
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v87 + 32))(__dst, v85, v86);
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v87 + 56))(__dst, 0, 1, v86);
        }
        *(_OWORD *)&v63[v65[14]] = *(_OWORD *)&v64[v65[14]];
        *(_OWORD *)&v63[v65[15]] = *(_OWORD *)&v64[v65[15]];
        v89 = v65[16];
        v90 = &v63[v89];
        v91 = &v64[v89];
        if (v135(&v64[v89], 1, v86))
        {
          v92 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
          memcpy(v90, v91, *(_QWORD *)(*(_QWORD *)(v92 - 8) + 64));
        }
        else
        {
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v133 + 32))(v90, v91, v86);
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v133 + 56))(v90, 0, 1, v86);
        }
        v93 = v65[17];
        v94 = &v63[v93];
        v95 = &v64[v93];
        if (v135(&v64[v93], 1, v86))
        {
          v96 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
          memcpy(v94, v95, *(_QWORD *)(*(_QWORD *)(v96 - 8) + 64));
        }
        else
        {
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v133 + 32))(v94, v95, v86);
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v133 + 56))(v94, 0, 1, v86);
        }
        v63[v65[18]] = v64[v65[18]];
        v97 = v128[7];
        v98 = &a1[v97];
        v99 = &a2[v97];
        if (v135(&a2[v97], 1, v86))
        {
          v100 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
          memcpy(v98, v99, *(_QWORD *)(*(_QWORD *)(v100 - 8) + 64));
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v133 + 32))(&a1[v128[8]], &a2[v128[8]], v86);
        }
        else
        {
          v101 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v133 + 32);
          v101(v98, v99, v86);
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v133 + 56))(v98, 0, 1, v86);
          v101(&a1[v128[8]], &a2[v128[8]], v86);
        }
        *(_QWORD *)&a1[v128[9]] = *(_QWORD *)&a2[v128[9]];
        *(_OWORD *)&a1[v128[10]] = *(_OWORD *)&a2[v128[10]];
        *(_OWORD *)&a1[v128[11]] = *(_OWORD *)&a2[v128[11]];
        *(_QWORD *)&a1[v128[12]] = *(_QWORD *)&a2[v128[12]];
        a1[v128[13]] = a2[v128[13]];
        a1[v128[14]] = a2[v128[14]];
        v102 = v128[15];
        v103 = &a1[v102];
        v104 = &a2[v102];
        *(_QWORD *)v103 = *(_QWORD *)v104;
        v103[8] = v104[8];
        v105 = v128[16];
        v106 = &a1[v105];
        v107 = &a2[v105];
        if (v127(&a2[v105], 1, v129))
        {
          v108 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
          memcpy(v106, v107, *(_QWORD *)(*(_QWORD *)(v108 - 8) + 64));
        }
        else
        {
          v109 = v107[1];
          *v106 = *v107;
          v106[1] = v109;
          *((_BYTE *)v106 + 32) = *((_BYTE *)v107 + 32);
          *(_OWORD *)((char *)v106 + 40) = *(_OWORD *)((char *)v107 + 40);
          *((_QWORD *)v106 + 7) = *((_QWORD *)v107 + 7);
          *((_BYTE *)v106 + 64) = *((_BYTE *)v107 + 64);
          *(_OWORD *)((char *)v106 + 113) = *(_OWORD *)((char *)v107 + 113);
          *(_OWORD *)((char *)v106 + 104) = *(_OWORD *)((char *)v107 + 104);
          *(_OWORD *)((char *)v106 + 88) = *(_OWORD *)((char *)v107 + 88);
          *(_OWORD *)((char *)v106 + 72) = *(_OWORD *)((char *)v107 + 72);
          *((_BYTE *)v106 + 129) = *((_BYTE *)v107 + 129);
          v110 = v129[11];
          v111 = (char *)v106 + v110;
          v112 = (char *)v107 + v110;
          v113 = type metadata accessor for ArtworkCrop(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v113 - 8) + 32))(v111, v112, v113);
          *(_OWORD *)((char *)v106 + v129[12]) = *(_OWORD *)((char *)v107 + v129[12]);
          *((_BYTE *)v106 + v129[13]) = *((_BYTE *)v107 + v129[13]);
          *((_BYTE *)v106 + v129[14]) = *((_BYTE *)v107 + v129[14]);
          *((_BYTE *)v106 + v129[15]) = *((_BYTE *)v107 + v129[15]);
          *(_OWORD *)((char *)v106 + v129[16]) = *(_OWORD *)((char *)v107 + v129[16]);
          (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v70 + 56))(v106, 0, 1, v129);
        }
        *(_OWORD *)&a1[v128[17]] = *(_OWORD *)&a2[v128[17]];
        v114 = v128[18];
        v115 = &a1[v114];
        v116 = &a2[v114];
        v115[8] = v116[8];
        *(_QWORD *)v115 = *(_QWORD *)v116;
        v117 = v128[19];
        v118 = &a1[v117];
        v119 = &a2[v117];
        *(_QWORD *)v118 = *(_QWORD *)v119;
        v118[8] = v119[8];
        a1[v128[20]] = a2[v128[20]];
        a1[v128[21]] = a2[v128[21]];
        v120 = v128[22];
        v121 = &a1[v120];
        v122 = &a2[v120];
        v123 = type metadata accessor for TranscriptRequestInformation(0);
        v124 = *(_QWORD *)(v123 - 8);
        if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v124 + 48))(v122, 1, v123))
        {
          v125 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2C40);
          memcpy(v121, v122, *(_QWORD *)(*(_QWORD *)(v125 - 8) + 64));
        }
        else
        {
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v124 + 32))(v121, v122, v123);
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v124 + 56))(v121, 0, 1, v123);
        }
        v16 = a1;
        v17 = v130;
        v18 = 30;
        goto LABEL_62;
      case 0x20u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v72 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B6FA0) + 48);
        v73 = &a1[v72];
        v74 = &a2[v72];
        v75 = type metadata accessor for URL(0);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v75 - 8) + 32))(v73, v74, v75);
        v16 = a1;
        v17 = v13;
        v18 = 32;
LABEL_62:
        swift_storeEnumTagMultiPayload(v16, v17, v18);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
        break;
    }
    v23 = a1;
    v24 = a3;
    v25 = 0;
  }
  swift_storeEnumTagMultiPayload(v23, v24, v25);
  return a1;
}

_BYTE *sub_2A9564(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  _OWORD *v21;
  __int128 v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  _OWORD *v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  _BYTE *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE *v49;
  _BYTE *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _BYTE *v63;
  _BYTE *v64;
  int *v65;
  uint64_t v66;
  _OWORD *v67;
  _OWORD *v68;
  int *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _BYTE *v73;
  _BYTE *v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _BYTE *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _BYTE *v90;
  _BYTE *v91;
  uint64_t v92;
  uint64_t v93;
  _BYTE *v94;
  _BYTE *v95;
  uint64_t v96;
  uint64_t v97;
  _BYTE *v98;
  _BYTE *v99;
  uint64_t v100;
  void (*v101)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v102;
  _BYTE *v103;
  _BYTE *v104;
  uint64_t v105;
  _OWORD *v106;
  _OWORD *v107;
  uint64_t v108;
  __int128 v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  _BYTE *v115;
  _BYTE *v116;
  uint64_t v117;
  _BYTE *v118;
  _BYTE *v119;
  uint64_t v120;
  _BYTE *v121;
  _BYTE *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int (*v127)(_OWORD *, uint64_t, int *);
  int *v128;
  int *v129;
  uint64_t v130;
  _BYTE *__dst;
  char *v132;
  uint64_t v133;
  char *v134;
  unsigned int (*v135)(_BYTE *, uint64_t, uint64_t);

  if (a1 != a2)
  {
    sub_145D8((uint64_t)a1, type metadata accessor for FlowAction.DestinationType);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      *a1 = *a2;
      v6 = (int *)type metadata accessor for LazyJSFlowDestination(0);
      v7 = v6[5];
      v8 = &a1[v7];
      v9 = &a2[v7];
      v10 = type metadata accessor for URL(0);
      v11 = *(_QWORD *)(v10 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
      {
        v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
        memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v11 + 32))(v8, v9, v10);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      }
      v19 = v6[6];
      v20 = &a1[v19];
      v21 = &a2[v19];
      v22 = v21[1];
      *v20 = *v21;
      v20[1] = v22;
      a1[v6[7]] = a2[v6[7]];
      v23 = a1;
      v24 = a3;
      v25 = 1;
    }
    else
    {
      v13 = type metadata accessor for FlowDestination(0);
      switch(swift_getEnumCaseMultiPayload(a2, v13))
      {
        case 0u:
          v14 = type metadata accessor for URL(0);
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(a1, a2, v14);
          v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B6F98);
          a1[*(int *)(v15 + 48)] = a2[*(int *)(v15 + 48)];
          v16 = a1;
          v17 = v13;
          v18 = 0;
          goto LABEL_63;
        case 1u:
          v26 = type metadata accessor for URL(0);
          v27 = *(_QWORD *)(v26 - 8);
          if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v27 + 48))(a2, 1, v26))
          {
            v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
            memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
          }
          else
          {
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v27 + 32))(a1, a2, v26);
            (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v27 + 56))(a1, 0, 1, v26);
          }
          v16 = a1;
          v17 = v13;
          v18 = 1;
          goto LABEL_63;
        case 2u:
          v29 = type metadata accessor for URL(0);
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v29 - 8) + 32))(a1, a2, v29);
          v30 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B6F80) + 48);
          v31 = &a1[v30];
          v32 = &a2[v30];
          v33 = (int *)type metadata accessor for ArtworkModel(0);
          v34 = *((_QWORD *)v33 - 1);
          if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v34 + 48))(v32, 1, v33))
          {
            v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
            memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
          }
          else
          {
            v76 = v32[1];
            *v31 = *v32;
            v31[1] = v76;
            *((_BYTE *)v31 + 32) = *((_BYTE *)v32 + 32);
            *(_OWORD *)((char *)v31 + 40) = *(_OWORD *)((char *)v32 + 40);
            *((_QWORD *)v31 + 7) = *((_QWORD *)v32 + 7);
            *((_BYTE *)v31 + 64) = *((_BYTE *)v32 + 64);
            *(_OWORD *)((char *)v31 + 113) = *(_OWORD *)((char *)v32 + 113);
            *(_OWORD *)((char *)v31 + 104) = *(_OWORD *)((char *)v32 + 104);
            *(_OWORD *)((char *)v31 + 88) = *(_OWORD *)((char *)v32 + 88);
            *(_OWORD *)((char *)v31 + 72) = *(_OWORD *)((char *)v32 + 72);
            *((_BYTE *)v31 + 129) = *((_BYTE *)v32 + 129);
            v77 = v33[11];
            v78 = (char *)v31 + v77;
            v79 = (char *)v32 + v77;
            v80 = type metadata accessor for ArtworkCrop(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v80 - 8) + 32))(v78, v79, v80);
            *(_OWORD *)((char *)v31 + v33[12]) = *(_OWORD *)((char *)v32 + v33[12]);
            *((_BYTE *)v31 + v33[13]) = *((_BYTE *)v32 + v33[13]);
            *((_BYTE *)v31 + v33[14]) = *((_BYTE *)v32 + v33[14]);
            *((_BYTE *)v31 + v33[15]) = *((_BYTE *)v32 + v33[15]);
            *(_OWORD *)((char *)v31 + v33[16]) = *(_OWORD *)((char *)v32 + v33[16]);
            (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v34 + 56))(v31, 0, 1, v33);
          }
          v16 = a1;
          v17 = v13;
          v18 = 2;
          goto LABEL_63;
        case 3u:
          *(_QWORD *)a1 = *(_QWORD *)a2;
          v36 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B6F78) + 48);
          v37 = &a1[v36];
          v38 = &a2[v36];
          v39 = type metadata accessor for URL(0);
          v40 = *(_QWORD *)(v39 - 8);
          if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39))
          {
            v41 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
            memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
          }
          else
          {
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v40 + 32))(v37, v38, v39);
            (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
          }
          v16 = a1;
          v17 = v13;
          v18 = 3;
          goto LABEL_63;
        case 4u:
          *(_QWORD *)a1 = *(_QWORD *)a2;
          v42 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B6F78) + 48);
          v43 = &a1[v42];
          v44 = &a2[v42];
          v45 = type metadata accessor for URL(0);
          v46 = *(_QWORD *)(v45 - 8);
          if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v46 + 48))(v44, 1, v45))
          {
            v47 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
            memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
          }
          else
          {
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v46 + 32))(v43, v44, v45);
            (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
          }
          v16 = a1;
          v17 = v13;
          v18 = 4;
          goto LABEL_63;
        case 5u:
          *(_QWORD *)a1 = *(_QWORD *)a2;
          v48 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B6F78) + 48);
          v49 = &a1[v48];
          v50 = &a2[v48];
          v51 = type metadata accessor for URL(0);
          v52 = *(_QWORD *)(v51 - 8);
          if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v52 + 48))(v50, 1, v51))
          {
            v53 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
            memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
          }
          else
          {
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v52 + 32))(v49, v50, v51);
            (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v52 + 56))(v49, 0, 1, v51);
          }
          v16 = a1;
          v17 = v13;
          v18 = 5;
          goto LABEL_63;
        case 0x12u:
          v54 = type metadata accessor for URL(0);
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v54 - 8) + 32))(a1, a2, v54);
          v16 = a1;
          v17 = v13;
          v18 = 18;
          goto LABEL_63;
        case 0x18u:
          v55 = type metadata accessor for URL(0);
          v56 = *(_QWORD *)(v55 - 8);
          if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v56 + 48))(a2, 1, v55))
          {
            v57 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
            memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
          }
          else
          {
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v56 + 32))(a1, a2, v55);
            (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v56 + 56))(a1, 0, 1, v55);
          }
          v16 = a1;
          v17 = v13;
          v18 = 24;
          goto LABEL_63;
        case 0x19u:
          v58 = type metadata accessor for URL(0);
          v59 = *(_QWORD *)(v58 - 8);
          if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v59 + 48))(a2, 1, v58))
          {
            v60 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
            memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
          }
          else
          {
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v59 + 32))(a1, a2, v58);
            (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v59 + 56))(a1, 0, 1, v58);
          }
          v16 = a1;
          v17 = v13;
          v18 = 25;
          goto LABEL_63;
        case 0x1Du:
          v61 = type metadata accessor for TranscriptRequestInformation(0);
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v61 - 8) + 32))(a1, a2, v61);
          v16 = a1;
          v17 = v13;
          v18 = 29;
          goto LABEL_63;
        case 0x1Eu:
          v130 = v13;
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
          v128 = (int *)type metadata accessor for EpisodeOffer(0);
          v62 = v128[6];
          v63 = &a1[v62];
          v64 = &a2[v62];
          *(_QWORD *)v63 = *(_QWORD *)&a2[v62];
          *(_OWORD *)(v63 + 8) = *(_OWORD *)&a2[v62 + 8];
          v63[24] = a2[v62 + 24];
          v65 = (int *)type metadata accessor for ShowOffer(0);
          v66 = v65[7];
          v67 = &v63[v66];
          v68 = &v64[v66];
          v69 = (int *)type metadata accessor for ArtworkModel(0);
          v70 = *((_QWORD *)v69 - 1);
          v127 = *(unsigned int (**)(_OWORD *, uint64_t, int *))(v70 + 48);
          v129 = v69;
          if (v127(v68, 1, v69))
          {
            v71 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
            memcpy(v67, v68, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
          }
          else
          {
            v81 = v68[1];
            *v67 = *v68;
            v67[1] = v81;
            *((_BYTE *)v67 + 32) = *((_BYTE *)v68 + 32);
            *(_OWORD *)((char *)v67 + 40) = *(_OWORD *)((char *)v68 + 40);
            *((_QWORD *)v67 + 7) = *((_QWORD *)v68 + 7);
            *((_BYTE *)v67 + 64) = *((_BYTE *)v68 + 64);
            *(_OWORD *)((char *)v67 + 113) = *(_OWORD *)((char *)v68 + 113);
            *(_OWORD *)((char *)v67 + 104) = *(_OWORD *)((char *)v68 + 104);
            *(_OWORD *)((char *)v67 + 88) = *(_OWORD *)((char *)v68 + 88);
            *(_OWORD *)((char *)v67 + 72) = *(_OWORD *)((char *)v68 + 72);
            *((_BYTE *)v67 + 129) = *((_BYTE *)v68 + 129);
            v82 = v69[11];
            v132 = (char *)v68 + v82;
            v134 = (char *)v67 + v82;
            v83 = type metadata accessor for ArtworkCrop(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v83 - 8) + 32))(v134, v132, v83);
            *(_OWORD *)((char *)v67 + v69[12]) = *(_OWORD *)((char *)v68 + v69[12]);
            *((_BYTE *)v67 + v69[13]) = *((_BYTE *)v68 + v69[13]);
            *((_BYTE *)v67 + v69[14]) = *((_BYTE *)v68 + v69[14]);
            *((_BYTE *)v67 + v69[15]) = *((_BYTE *)v68 + v69[15]);
            *(_OWORD *)((char *)v67 + v69[16]) = *(_OWORD *)((char *)v68 + v69[16]);
            (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v70 + 56))(v67, 0, 1, v69);
          }
          *(_OWORD *)&v63[v65[8]] = *(_OWORD *)&v64[v65[8]];
          *(_OWORD *)&v63[v65[9]] = *(_OWORD *)&v64[v65[9]];
          v63[v65[10]] = v64[v65[10]];
          *(_OWORD *)&v63[v65[11]] = *(_OWORD *)&v64[v65[11]];
          *(_OWORD *)&v63[v65[12]] = *(_OWORD *)&v64[v65[12]];
          v84 = v65[13];
          __dst = &v63[v84];
          v85 = &v64[v84];
          v86 = type metadata accessor for URL(0);
          v87 = *(_QWORD *)(v86 - 8);
          v135 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v87 + 48);
          v133 = v87;
          if (v135(v85, 1, v86))
          {
            v88 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
            memcpy(__dst, v85, *(_QWORD *)(*(_QWORD *)(v88 - 8) + 64));
          }
          else
          {
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v87 + 32))(__dst, v85, v86);
            (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v87 + 56))(__dst, 0, 1, v86);
          }
          *(_OWORD *)&v63[v65[14]] = *(_OWORD *)&v64[v65[14]];
          *(_OWORD *)&v63[v65[15]] = *(_OWORD *)&v64[v65[15]];
          v89 = v65[16];
          v90 = &v63[v89];
          v91 = &v64[v89];
          if (v135(&v64[v89], 1, v86))
          {
            v92 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
            memcpy(v90, v91, *(_QWORD *)(*(_QWORD *)(v92 - 8) + 64));
          }
          else
          {
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v133 + 32))(v90, v91, v86);
            (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v133 + 56))(v90, 0, 1, v86);
          }
          v93 = v65[17];
          v94 = &v63[v93];
          v95 = &v64[v93];
          if (v135(&v64[v93], 1, v86))
          {
            v96 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
            memcpy(v94, v95, *(_QWORD *)(*(_QWORD *)(v96 - 8) + 64));
          }
          else
          {
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v133 + 32))(v94, v95, v86);
            (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v133 + 56))(v94, 0, 1, v86);
          }
          v63[v65[18]] = v64[v65[18]];
          v97 = v128[7];
          v98 = &a1[v97];
          v99 = &a2[v97];
          if (v135(&a2[v97], 1, v86))
          {
            v100 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
            memcpy(v98, v99, *(_QWORD *)(*(_QWORD *)(v100 - 8) + 64));
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v133 + 32))(&a1[v128[8]], &a2[v128[8]], v86);
          }
          else
          {
            v101 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v133 + 32);
            v101(v98, v99, v86);
            (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v133 + 56))(v98, 0, 1, v86);
            v101(&a1[v128[8]], &a2[v128[8]], v86);
          }
          *(_QWORD *)&a1[v128[9]] = *(_QWORD *)&a2[v128[9]];
          *(_OWORD *)&a1[v128[10]] = *(_OWORD *)&a2[v128[10]];
          *(_OWORD *)&a1[v128[11]] = *(_OWORD *)&a2[v128[11]];
          *(_QWORD *)&a1[v128[12]] = *(_QWORD *)&a2[v128[12]];
          a1[v128[13]] = a2[v128[13]];
          a1[v128[14]] = a2[v128[14]];
          v102 = v128[15];
          v103 = &a1[v102];
          v104 = &a2[v102];
          *(_QWORD *)v103 = *(_QWORD *)v104;
          v103[8] = v104[8];
          v105 = v128[16];
          v106 = &a1[v105];
          v107 = &a2[v105];
          if (v127(&a2[v105], 1, v129))
          {
            v108 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
            memcpy(v106, v107, *(_QWORD *)(*(_QWORD *)(v108 - 8) + 64));
          }
          else
          {
            v109 = v107[1];
            *v106 = *v107;
            v106[1] = v109;
            *((_BYTE *)v106 + 32) = *((_BYTE *)v107 + 32);
            *(_OWORD *)((char *)v106 + 40) = *(_OWORD *)((char *)v107 + 40);
            *((_QWORD *)v106 + 7) = *((_QWORD *)v107 + 7);
            *((_BYTE *)v106 + 64) = *((_BYTE *)v107 + 64);
            *(_OWORD *)((char *)v106 + 113) = *(_OWORD *)((char *)v107 + 113);
            *(_OWORD *)((char *)v106 + 104) = *(_OWORD *)((char *)v107 + 104);
            *(_OWORD *)((char *)v106 + 88) = *(_OWORD *)((char *)v107 + 88);
            *(_OWORD *)((char *)v106 + 72) = *(_OWORD *)((char *)v107 + 72);
            *((_BYTE *)v106 + 129) = *((_BYTE *)v107 + 129);
            v110 = v129[11];
            v111 = (char *)v106 + v110;
            v112 = (char *)v107 + v110;
            v113 = type metadata accessor for ArtworkCrop(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v113 - 8) + 32))(v111, v112, v113);
            *(_OWORD *)((char *)v106 + v129[12]) = *(_OWORD *)((char *)v107 + v129[12]);
            *((_BYTE *)v106 + v129[13]) = *((_BYTE *)v107 + v129[13]);
            *((_BYTE *)v106 + v129[14]) = *((_BYTE *)v107 + v129[14]);
            *((_BYTE *)v106 + v129[15]) = *((_BYTE *)v107 + v129[15]);
            *(_OWORD *)((char *)v106 + v129[16]) = *(_OWORD *)((char *)v107 + v129[16]);
            (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v70 + 56))(v106, 0, 1, v129);
          }
          *(_OWORD *)&a1[v128[17]] = *(_OWORD *)&a2[v128[17]];
          v114 = v128[18];
          v115 = &a1[v114];
          v116 = &a2[v114];
          v115[8] = v116[8];
          *(_QWORD *)v115 = *(_QWORD *)v116;
          v117 = v128[19];
          v118 = &a1[v117];
          v119 = &a2[v117];
          *(_QWORD *)v118 = *(_QWORD *)v119;
          v118[8] = v119[8];
          a1[v128[20]] = a2[v128[20]];
          a1[v128[21]] = a2[v128[21]];
          v120 = v128[22];
          v121 = &a1[v120];
          v122 = &a2[v120];
          v123 = type metadata accessor for TranscriptRequestInformation(0);
          v124 = *(_QWORD *)(v123 - 8);
          if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v124 + 48))(v122, 1, v123))
          {
            v125 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2C40);
            memcpy(v121, v122, *(_QWORD *)(*(_QWORD *)(v125 - 8) + 64));
          }
          else
          {
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v124 + 32))(v121, v122, v123);
            (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v124 + 56))(v121, 0, 1, v123);
          }
          v16 = a1;
          v17 = v130;
          v18 = 30;
          goto LABEL_63;
        case 0x20u:
          *(_QWORD *)a1 = *(_QWORD *)a2;
          v72 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B6FA0) + 48);
          v73 = &a1[v72];
          v74 = &a2[v72];
          v75 = type metadata accessor for URL(0);
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v75 - 8) + 32))(v73, v74, v75);
          v16 = a1;
          v17 = v13;
          v18 = 32;
LABEL_63:
          swift_storeEnumTagMultiPayload(v16, v17, v18);
          break;
        default:
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
          break;
      }
      v23 = a1;
      v24 = a3;
      v25 = 0;
    }
    swift_storeEnumTagMultiPayload(v23, v24, v25);
  }
  return a1;
}

uint64_t sub_2AA374(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[2];

  result = type metadata accessor for FlowDestination(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for LazyJSFlowDestination(319);
    if (v4 <= 0x3F)
    {
      v5[1] = *(_QWORD *)(result - 8) + 64;
      swift_initEnumMetadataMultiPayload(a1, 256, 2, v5);
      return 0;
    }
  }
  return result;
}

uint64_t sub_2AA3F4@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v2;
  uint64_t result;
  uint64_t v4;

  v2 = sub_70888();
  result = EnvironmentValues.subscript.getter(&type metadata for ObjectGraphEnvironmentKey, &type metadata for ObjectGraphEnvironmentKey, v2);
  *a1 = v4;
  return result;
}

uint64_t sub_2AA440(uint64_t *a1)
{
  unint64_t v1;
  uint64_t v3;

  v3 = *a1;
  v1 = sub_70888();
  swift_retain();
  return EnvironmentValues.subscript.setter(&v3, &type metadata for ObjectGraphEnvironmentKey, &type metadata for ObjectGraphEnvironmentKey, v1);
}

uint64_t sub_2AA4A0()
{
  unint64_t v0;

  v0 = sub_1000F8();
  return EnvironmentValues.subscript.getter(&type metadata for BucketingStrategyEnviromentKey, &type metadata for BucketingStrategyEnviromentKey, v0);
}

uint64_t sub_2AA4DC(uint64_t a1)
{
  unint64_t v1;
  _BYTE v3[40];
  _QWORD v4[5];

  sub_150C8(a1, (uint64_t)v4);
  sub_150C8((uint64_t)v4, (uint64_t)v3);
  v1 = sub_1000F8();
  EnvironmentValues.subscript.setter(v3, &type metadata for BucketingStrategyEnviromentKey, &type metadata for BucketingStrategyEnviromentKey, v1);
  return __swift_destroy_boxed_opaque_existential_1(v4);
}

void sub_2AA538(double *a1@<X8>)
{
  *a1 = EnvironmentValues.displayScale.getter();
}

uint64_t sub_2AA560(double *a1)
{
  return EnvironmentValues.displayScale.setter(*a1);
}

uint64_t Artwork.init(artwork:fittingImageSize:isResizable:alignment:cropCodeOverride:contentMode:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X8>, double a8@<D0>, double a9@<D1>)
{
  char v16;
  int *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t result;
  uint64_t v21;

  v16 = a6 & 1;
  sub_15BD4(a1, a7, &qword_3BEB70);
  v17 = (int *)type metadata accessor for Artwork.Configuration(0);
  v18 = a7 + v17[5];
  *(double *)v18 = a8;
  *(double *)(v18 + 8) = a9;
  *(_BYTE *)(v18 + 16) = a2;
  v19 = (_QWORD *)(a7 + v17[6]);
  *v19 = a3;
  v19[1] = a4;
  sub_15BD4(a5, a7 + v17[7], &qword_3B7D58);
  *(_BYTE *)(a7 + v17[8]) = v16;
  result = type metadata accessor for Artwork(0);
  v21 = a7 + *(int *)(result + 20);
  *(_QWORD *)v21 = sub_2AA724;
  *(_QWORD *)(v21 + 8) = 0;
  *(_BYTE *)(v21 + 16) = 0;
  return result;
}

uint64_t Artwork.init(artwork:sizing:alignment:cropCodeOverride:contentMode:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X8>)
{
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  int *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t result;
  uint64_t v19;

  v11 = a6 & 1;
  v12 = *a2;
  v13 = a2[1];
  v14 = *((_BYTE *)a2 + 16);
  sub_15BD4(a1, a7, &qword_3BEB70);
  v15 = (int *)type metadata accessor for Artwork.Configuration(0);
  v16 = a7 + v15[5];
  *(_QWORD *)v16 = v12;
  *(_QWORD *)(v16 + 8) = v13;
  *(_BYTE *)(v16 + 16) = v14;
  v17 = (_QWORD *)(a7 + v15[6]);
  *v17 = a3;
  v17[1] = a4;
  sub_15BD4(a5, a7 + v15[7], &qword_3B7D58);
  *(_BYTE *)(a7 + v15[8]) = v11;
  result = type metadata accessor for Artwork(0);
  v19 = a7 + *(int *)(result + 20);
  *(_QWORD *)v19 = sub_2AA724;
  *(_QWORD *)(v19 + 8) = 0;
  *(_BYTE *)(v19 + 16) = 0;
  return result;
}

uint64_t sub_2AA724()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v0 = _s6LoaderCMa(0);
  v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  v8 = 0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B98D0);
  Published.init(initialValue:)(&v8, v2);
  v3 = v1 + OBJC_IVAR____TtCV8ShelfKit7Artwork6Loader_loaderConfiguration;
  v4 = _s6LoaderC19LoaderConfigurationVMa(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = v1 + OBJC_IVAR____TtCV8ShelfKit7Artwork6Loader_lastKnownProxySize;
  *(_QWORD *)v5 = 0;
  *(_QWORD *)(v5 + 8) = 0;
  *(_BYTE *)(v5 + 16) = 1;
  *(_QWORD *)(v1 + OBJC_IVAR____TtCV8ShelfKit7Artwork6Loader_currentRequest) = 0;
  v6 = OBJC_IVAR____TtCV8ShelfKit7Artwork6Loader_animation;
  *(_QWORD *)(v1 + v6) = static Animation.timingCurve(_:_:_:_:duration:)(0.25, 0.1, 0.25, 1.0, 0.15);
  return v1;
}

uint64_t Artwork.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  char v40;

  v36 = a1;
  v35 = type metadata accessor for ArtworkLoaderModifier(0);
  __chkstk_darwin(v35);
  v3 = (uint64_t *)((char *)&v33 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = type metadata accessor for FrameModifier(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C6618);
  __chkstk_darwin(v7);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = static Alignment.center.getter(v10);
  v13 = v12;
  v34 = v1;
  sub_2AAAAC(v1, (uint64_t)&v37);
  v33 = v37;
  v14 = v38;
  v15 = v39;
  v16 = v40;
  sub_14510(v1, (uint64_t)v6, type metadata accessor for Artwork.Configuration);
  sub_14510((uint64_t)v6, (uint64_t)&v9[*(int *)(v7 + 36)], type metadata accessor for FrameModifier);
  *(_QWORD *)v9 = v11;
  *((_QWORD *)v9 + 1) = v13;
  *((_OWORD *)v9 + 1) = v33;
  *((_QWORD *)v9 + 4) = v14;
  *((_QWORD *)v9 + 5) = v15;
  v9[48] = v16;
  v9[49] = 1;
  sub_145D8((uint64_t)v6, type metadata accessor for FrameModifier);
  v17 = type metadata accessor for Artwork(0);
  v18 = v34;
  v19 = v34 + *(int *)(v17 + 20);
  v20 = *(_QWORD *)v19;
  v21 = *(_QWORD *)(v19 + 8);
  v22 = *(unsigned __int8 *)(v19 + 16);
  v23 = _s6LoaderCMa(0);
  v24 = sub_F1C0(&qword_3C6620, (void (*)(uint64_t))_s6LoaderCMa, (uint64_t)&unk_2F5908);
  v25 = StateObject.wrappedValue.getter(v20, v21, v22, v23, v24);
  v26 = (int *)v35;
  sub_14510(v18, (uint64_t)v3 + *(int *)(v35 + 20), type metadata accessor for Artwork.Configuration);
  *v3 = v25;
  v27 = (char *)v3 + v26[6];
  *(_QWORD *)v27 = swift_getKeyPath(&unk_304740);
  v27[8] = 0;
  v28 = (char *)v3 + v26[7];
  *(_QWORD *)v28 = swift_getKeyPath(&unk_304770);
  v28[8] = 0;
  v29 = (char *)v3 + v26[8];
  *(_QWORD *)v29 = swift_getKeyPath(&unk_304798);
  v29[40] = 0;
  v30 = v36;
  sub_267BC((uint64_t)v9, v36, &qword_3C6618);
  v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C6628);
  sub_3C56C((uint64_t)v3, v30 + *(int *)(v31 + 36), type metadata accessor for ArtworkLoaderModifier);
  return sub_1459C((uint64_t)v9, &qword_3C6618);
}

double sub_2AAAAC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t KeyPath;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  double result;
  __int128 v35;
  char v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  __int128 v42;
  __int128 v43;
  char v44;
  uint64_t v45;

  v4 = type metadata accessor for Image.ResizingMode(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (uint64_t *)(a1 + *(int *)(type metadata accessor for Artwork(0) + 20));
  v9 = *v8;
  v10 = v8[1];
  v11 = *((unsigned __int8 *)v8 + 16);
  v12 = _s6LoaderCMa(0);
  v13 = sub_F1C0(&qword_3C6620, (void (*)(uint64_t))_s6LoaderCMa, (uint64_t)&unk_2F5908);
  v14 = StateObject.wrappedValue.getter(v9, v10, v11, v12, v13);
  KeyPath = swift_getKeyPath(&unk_304958);
  v16 = swift_getKeyPath(&unk_304980);
  static Published.subscript.getter(&v42, v14, KeyPath, v16);
  swift_release();
  swift_release();
  swift_release();
  if ((_QWORD)v42)
  {
    v17 = (id)v42;
    v18 = Image.init(uiImage:)();
    (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for Image.ResizingMode.stretch(_:), v4);
    v19 = Image.resizable(capInsets:resizingMode:)(v7, v18, 0.0, 0.0, 0.0, 0.0);
    swift_release();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v20 = type metadata accessor for Artwork.Configuration(0);
    v21 = 257;
    if (!*(_BYTE *)(a1 + *(int *)(v20 + 32)))
      v21 = 1;
    v38 = (unint64_t)v19;
    v39 = v21;
    v40 = 0;
    v41 = 0;
    swift_retain();
    v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C6890);
    v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C6898);
    v24 = sub_2B0FE4();
    v25 = sub_2B1048();
    _ConditionalContent<>.init(storage:)(&v38, v22, v23, v24, v25);
    swift_release();

  }
  else
  {
    sub_2AAD68((uint64_t)&v42);
    v26 = v42;
    v27 = v43;
    *(_QWORD *)&v38 = 0;
    v45 = 0x3FF0000000000000;
    v28 = sub_2B0FA0();
    v29 = static AnyTransition.modifier<A>(active:identity:)(&v38, &v45, &type metadata for NothingModifier, v28);
    v38 = v26;
    v39 = v27;
    v40 = v29;
    v41 = 1;
    v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C6890);
    v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C6898);
    v32 = sub_2B0FE4();
    v33 = sub_2B1048();
    _ConditionalContent<>.init(storage:)(&v38, v30, v31, v32, v33);
  }
  result = *(double *)&v42;
  v35 = v43;
  v36 = v44;
  *(_OWORD *)a2 = v42;
  *(_OWORD *)(a2 + 16) = v35;
  *(_BYTE *)(a2 + 32) = v36;
  return result;
}

double sub_2AAD68@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  double result;
  char v23;
  uint64_t v24;
  uint64_t KeyPath;
  uint64_t v26;
  char v27;
  __int128 v28;
  char v29;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
  __chkstk_darwin(v4);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_267BC(v2, (uint64_t)v6, &qword_3BEB70);
  v7 = type metadata accessor for ArtworkModel(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    v8 = sub_1459C((uint64_t)v6, &qword_3BEB70);
LABEL_5:
    KeyPath = static HierarchicalShapeStyle.tertiary.getter(v8);
    v26 = 0;
    v27 = 1;
    v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C68C8);
    v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C68E0);
    v20 = sub_2B1138();
    v21 = sub_2B1200();
    _ConditionalContent<>.init(storage:)(&KeyPath, v18, v19, v20, v21);
    goto LABEL_6;
  }
  v9 = (void *)*((_QWORD *)v6 + 7);
  v10 = v6[64];
  sub_C5CB0(v9, v6[64]);
  v8 = sub_145D8((uint64_t)v6, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
  if ((_DWORD)v10 == 255)
    goto LABEL_5;
  v11 = (void *)Color.color.getter(v9, v10);
  sub_C5CC4(v9, v10);
  v12 = v11;
  v13 = Color.init(uiColor:)(v12);
  KeyPath = swift_getKeyPath(&unk_3049A0);
  v26 = v13;
  v27 = 0;
  swift_retain();
  swift_retain();
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C68C8);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C68E0);
  v16 = sub_2B1138();
  v17 = sub_2B1200();
  _ConditionalContent<>.init(storage:)(&KeyPath, v14, v15, v16, v17);
  swift_release();
  swift_release();

LABEL_6:
  result = *(double *)&v28;
  v23 = v29;
  *(_OWORD *)a1 = v28;
  *(_BYTE *)(a1 + 16) = v23;
  return result;
}

uint64_t sub_2AAF7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v27;
  char *v28;
  __int128 v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD v44[3];

  v39 = a1;
  v42 = a2;
  v43 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C6838);
  __chkstk_darwin(v43);
  v4 = (char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C5278);
  v38 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C6840);
  __chkstk_darwin(v40);
  v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C6848);
  __chkstk_darwin(v10);
  v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C6850);
  __chkstk_darwin(v41);
  v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C5280);
  __chkstk_darwin(v15);
  v17 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for Artwork.Configuration(0);
  v19 = v2 + *(int *)(v18 + 20);
  if (*(_BYTE *)(v19 + 16))
  {
    if (*(_BYTE *)(v19 + 16) == 1)
    {
      v20 = v38;
      v21 = *(void (**)(char *, uint64_t, uint64_t))(v38 + 16);
      v21(v7, v39, v5);
      v21(v12, (uint64_t)v7, v5);
      swift_storeEnumTagMultiPayload(v12, v10, 1);
      v22 = sub_2B089C(&qword_3C6860, &qword_3C5280);
      v23 = sub_32914(&qword_3C6868, &qword_3C5278, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
      _ConditionalContent<>.init(storage:)(v12, v15, v5, v22, v23);
      sub_267BC((uint64_t)v14, (uint64_t)v9, &qword_3C6850);
      swift_storeEnumTagMultiPayload(v9, v40, 0);
      v24 = sub_2B0800();
      v25 = sub_2B089C(&qword_3C6870, &qword_3C6838);
      _ConditionalContent<>.init(storage:)(v9, v41, v43, v24, v25);
      sub_1459C((uint64_t)v14, &qword_3C6850);
      return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v7, v5);
    }
    sub_278F78(0.0, 0, 0.0, 1, INFINITY, 0, 0.0, 0, (uint64_t)v17, 0.0, 1, INFINITY, 0, *(_QWORD *)(v2 + *(int *)(v18 + 24)), *(_QWORD *)(v2 + *(int *)(v18 + 24) + 8));
    sub_267BC((uint64_t)v17, (uint64_t)v12, &qword_3C5280);
    swift_storeEnumTagMultiPayload(v12, v10, 0);
    v34 = sub_2B089C(&qword_3C6860, &qword_3C5280);
    v35 = sub_32914(&qword_3C6868, &qword_3C5278, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    _ConditionalContent<>.init(storage:)(v12, v15, v5, v34, v35);
    sub_267BC((uint64_t)v14, (uint64_t)v9, &qword_3C6850);
    swift_storeEnumTagMultiPayload(v9, v40, 0);
    v36 = sub_2B0800();
    v37 = sub_2B089C(&qword_3C6870, &qword_3C6838);
    _ConditionalContent<>.init(storage:)(v9, v41, v43, v36, v37);
    sub_1459C((uint64_t)v14, &qword_3C6850);
    v32 = (uint64_t)v17;
    v33 = &qword_3C5280;
  }
  else
  {
    _FrameLayout.init(width:height:alignment:)(v44, *(_QWORD *)v19, 0, *(_QWORD *)(v19 + 8), 0, *(_QWORD *)(v2 + *(int *)(v18 + 24)), *(_QWORD *)(v2 + *(int *)(v18 + 24) + 8));
    (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v4, v39, v5);
    v27 = v43;
    v28 = &v4[*(int *)(v43 + 36)];
    v29 = v44[1];
    *(_OWORD *)v28 = v44[0];
    *((_OWORD *)v28 + 1) = v29;
    *((_OWORD *)v28 + 2) = v44[2];
    sub_267BC((uint64_t)v4, (uint64_t)v9, &qword_3C6838);
    swift_storeEnumTagMultiPayload(v9, v40, 1);
    v30 = sub_2B0800();
    v31 = sub_2B089C(&qword_3C6870, &qword_3C6838);
    _ConditionalContent<>.init(storage:)(v9, v41, v27, v30, v31);
    v32 = (uint64_t)v4;
    v33 = &qword_3C6838;
  }
  return sub_1459C(v32, v33);
}

double sub_2AB478(double *a1)
{
  _QWORD *v1;
  double result;

  result = *a1;
  *v1 = *(_QWORD *)a1;
  return result;
}

uint64_t sub_2AB488(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v12;

  v12 = sub_2B13C4();
  return static ViewModifier<>._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5, v12, a6);
}

uint64_t sub_2AB4F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v12;

  v12 = sub_2B13C4();
  return static ViewModifier<>._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, v12, a6);
}

uint64_t sub_2AB568@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C6910);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
}

BOOL _s8ShelfKit7ArtworkV6SizingO2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;
  int v4;

  v2 = *(double *)a2;
  v3 = *(double *)(a2 + 8);
  v4 = *(unsigned __int8 *)(a2 + 16);
  if (!*(_BYTE *)(a1 + 16))
  {
    if (*(_BYTE *)(a2 + 16))
      return 0;
    return *(double *)(a1 + 8) == v3 && *(double *)a1 == v2;
  }
  if (*(_BYTE *)(a1 + 16) == 1)
  {
    if (v4 != 1)
      return 0;
    return *(double *)(a1 + 8) == v3 && *(double *)a1 == v2;
  }
  return v4 == 2 && (*(_QWORD *)&v3 | *(_QWORD *)&v2) == 0;
}

uint64_t type metadata accessor for Artwork.Configuration(uint64_t a1)
{
  return sub_1F9D4(a1, (uint64_t *)&unk_3C67E8, (uint64_t)&nominal type descriptor for Artwork.Configuration);
}

uint64_t type metadata accessor for Artwork(uint64_t a1)
{
  return sub_1F9D4(a1, qword_3C6688, (uint64_t)&nominal type descriptor for Artwork);
}

uint64_t type metadata accessor for FrameModifier(uint64_t a1)
{
  return sub_1F9D4(a1, qword_3C6758, (uint64_t)&nominal type descriptor for FrameModifier);
}

void sub_2AB654(double *a1@<X8>)
{
  *a1 = EnvironmentValues.displayScale.getter();
}

uint64_t sub_2AB67C(double *a1)
{
  return EnvironmentValues.displayScale.setter(*a1);
}

uint64_t sub_2AB6A0@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v2;
  uint64_t result;
  uint64_t v4;

  v2 = sub_70888();
  result = EnvironmentValues.subscript.getter(&type metadata for ObjectGraphEnvironmentKey, &type metadata for ObjectGraphEnvironmentKey, v2);
  *a1 = v4;
  return result;
}

uint64_t sub_2AB6F0()
{
  unint64_t v0;

  v0 = sub_1000F8();
  return EnvironmentValues.subscript.getter(&type metadata for BucketingStrategyEnviromentKey, &type metadata for BucketingStrategyEnviromentKey, v0);
}

uint64_t sub_2AB730(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of Artwork.body>>, 1);
}

uint64_t *initializeBufferWithCopyOfBuffer for Artwork(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  id *v15;
  int v16;
  id v17;
  id *v18;
  int v19;
  id v20;
  id *v21;
  int v22;
  id v23;
  id *v24;
  int v25;
  id v26;
  id *v27;
  int v28;
  id v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  void (*v42)(uint64_t *, _QWORD, uint64_t, int *);
  int *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char v58;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = (int *)type metadata accessor for ArtworkModel(0);
    v8 = *((_QWORD *)v7 - 1);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, int *))(v8 + 48))(a2, 1, v7))
    {
      v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      v11 = a2[1];
      *a1 = *a2;
      a1[1] = v11;
      v12 = *((unsigned __int8 *)a2 + 32);
      swift_bridgeObjectRetain();
      if (v12 == 255)
      {
        *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
        *((_BYTE *)a1 + 32) = *((_BYTE *)a2 + 32);
      }
      else
      {
        v13 = a2[2];
        v14 = a2[3];
        sub_3D464(v13, v14, v12);
        a1[2] = v13;
        a1[3] = v14;
        *((_BYTE *)a1 + 32) = v12;
      }
      *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 5);
      v15 = (id *)(a2 + 7);
      v16 = *((unsigned __int8 *)a2 + 64);
      if (v16 == 255)
      {
        a1[7] = (uint64_t)*v15;
        *((_BYTE *)a1 + 64) = *((_BYTE *)a2 + 64);
      }
      else
      {
        v17 = *v15;
        sub_3D47C(*v15, *((_BYTE *)a2 + 64));
        a1[7] = (uint64_t)v17;
        *((_BYTE *)a1 + 64) = v16;
      }
      v18 = (id *)(a2 + 9);
      v19 = *((unsigned __int8 *)a2 + 80);
      if (v19 == 255)
      {
        a1[9] = (uint64_t)*v18;
        *((_BYTE *)a1 + 80) = *((_BYTE *)a2 + 80);
      }
      else
      {
        v20 = *v18;
        sub_3D47C(*v18, *((_BYTE *)a2 + 80));
        a1[9] = (uint64_t)v20;
        *((_BYTE *)a1 + 80) = v19;
      }
      v21 = (id *)(a2 + 11);
      v22 = *((unsigned __int8 *)a2 + 96);
      if (v22 == 255)
      {
        a1[11] = (uint64_t)*v21;
        *((_BYTE *)a1 + 96) = *((_BYTE *)a2 + 96);
      }
      else
      {
        v23 = *v21;
        sub_3D47C(*v21, *((_BYTE *)a2 + 96));
        a1[11] = (uint64_t)v23;
        *((_BYTE *)a1 + 96) = v22;
      }
      v24 = (id *)(a2 + 13);
      v25 = *((unsigned __int8 *)a2 + 112);
      if (v25 == 255)
      {
        a1[13] = (uint64_t)*v24;
        *((_BYTE *)a1 + 112) = *((_BYTE *)a2 + 112);
      }
      else
      {
        v26 = *v24;
        sub_3D47C(*v24, *((_BYTE *)a2 + 112));
        a1[13] = (uint64_t)v26;
        *((_BYTE *)a1 + 112) = v25;
      }
      v27 = (id *)(a2 + 15);
      v28 = *((unsigned __int8 *)a2 + 128);
      if (v28 == 255)
      {
        a1[15] = (uint64_t)*v27;
        *((_BYTE *)a1 + 128) = *((_BYTE *)a2 + 128);
      }
      else
      {
        v29 = *v27;
        sub_3D47C(*v27, *((_BYTE *)a2 + 128));
        a1[15] = (uint64_t)v29;
        *((_BYTE *)a1 + 128) = v28;
      }
      *((_BYTE *)a1 + 129) = *((_BYTE *)a2 + 129);
      v30 = v7[11];
      v31 = (char *)a1 + v30;
      v32 = (char *)a2 + v30;
      v33 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v31, v32, v33);
      v34 = v7[12];
      v35 = (uint64_t *)((char *)a1 + v34);
      v36 = (uint64_t *)((char *)a2 + v34);
      v37 = v36[1];
      *v35 = *v36;
      v35[1] = v37;
      *((_BYTE *)a1 + v7[13]) = *((_BYTE *)a2 + v7[13]);
      *((_BYTE *)a1 + v7[14]) = *((_BYTE *)a2 + v7[14]);
      *((_BYTE *)a1 + v7[15]) = *((_BYTE *)a2 + v7[15]);
      v38 = v7[16];
      v39 = (uint64_t *)((char *)a1 + v38);
      v40 = (uint64_t *)((char *)a2 + v38);
      v41 = v40[1];
      *v39 = *v40;
      v39[1] = v41;
      v42 = *(void (**)(uint64_t *, _QWORD, uint64_t, int *))(v8 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v42(a1, 0, 1, v7);
    }
    v43 = (int *)type metadata accessor for Artwork.Configuration(0);
    v44 = v43[5];
    v45 = (char *)a1 + v44;
    v46 = (char *)a2 + v44;
    *(_OWORD *)v45 = *(_OWORD *)v46;
    v45[16] = v46[16];
    *(_OWORD *)((char *)a1 + v43[6]) = *(_OWORD *)((char *)a2 + v43[6]);
    v47 = v43[7];
    v48 = (char *)a1 + v47;
    v49 = (char *)a2 + v47;
    v50 = type metadata accessor for CropCode(0);
    v51 = *(_QWORD *)(v50 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48))(v49, 1, v50))
    {
      v52 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7D58);
      memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v51 + 16))(v48, v49, v50);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v51 + 56))(v48, 0, 1, v50);
    }
    *((_BYTE *)a1 + v43[8]) = *((_BYTE *)a2 + v43[8]);
    v53 = *(int *)(a3 + 20);
    v54 = (char *)a1 + v53;
    v55 = (char *)a2 + v53;
    v56 = *(_QWORD *)v55;
    v57 = *((_QWORD *)v55 + 1);
    v58 = v55[16];
    sub_2ABB24(*(_QWORD *)v55, v57);
    *(_QWORD *)v54 = v56;
    *((_QWORD *)v54 + 1) = v57;
    v54[16] = v58;
  }
  return a1;
}

uint64_t sub_2ABB24(uint64_t a1, uint64_t a2)
{
  return swift_retain(a2);
}

uint64_t destroy for Artwork(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = type metadata accessor for ArtworkModel(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, 1, v4))
  {
    swift_bridgeObjectRelease();
    v5 = *(unsigned __int8 *)(a1 + 32);
    if (v5 != 255)
      sub_3B5BC(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), v5);
    v6 = *(unsigned __int8 *)(a1 + 64);
    if (v6 != 255)
      sub_3D624(*(id *)(a1 + 56), v6);
    v7 = *(unsigned __int8 *)(a1 + 80);
    if (v7 != 255)
      sub_3D624(*(id *)(a1 + 72), v7);
    v8 = *(unsigned __int8 *)(a1 + 96);
    if (v8 != 255)
      sub_3D624(*(id *)(a1 + 88), v8);
    v9 = *(unsigned __int8 *)(a1 + 112);
    if (v9 != 255)
      sub_3D624(*(id *)(a1 + 104), v9);
    v10 = *(unsigned __int8 *)(a1 + 128);
    if (v10 != 255)
      sub_3D624(*(id *)(a1 + 120), v10);
    v11 = a1 + *(int *)(v4 + 44);
    v12 = type metadata accessor for ArtworkCrop(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v13 = a1 + *(int *)(type metadata accessor for Artwork.Configuration(0) + 28);
  v14 = type metadata accessor for CropCode(0);
  v15 = *(_QWORD *)(v14 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
  return sub_2ABCA0(*(_QWORD *)(a1 + *(int *)(a2 + 20)), *(_QWORD *)(a1 + *(int *)(a2 + 20) + 8));
}

uint64_t sub_2ABCA0(uint64_t a1, uint64_t a2)
{
  return swift_release(a2);
}

_QWORD *initializeWithCopy for Artwork(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  id *v13;
  int v14;
  id v15;
  id *v16;
  int v17;
  id v18;
  id *v19;
  int v20;
  id v21;
  id *v22;
  int v23;
  id v24;
  id *v25;
  int v26;
  id v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  void (*v40)(_QWORD *, _QWORD, uint64_t, int *);
  int *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char v56;

  v6 = (int *)type metadata accessor for ArtworkModel(0);
  v7 = *((_QWORD *)v6 - 1);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    v9 = a2[1];
    *a1 = *a2;
    a1[1] = v9;
    v10 = *((unsigned __int8 *)a2 + 32);
    swift_bridgeObjectRetain();
    if (v10 == 255)
    {
      *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
      *((_BYTE *)a1 + 32) = *((_BYTE *)a2 + 32);
    }
    else
    {
      v11 = a2[2];
      v12 = a2[3];
      sub_3D464(v11, v12, v10);
      a1[2] = v11;
      a1[3] = v12;
      *((_BYTE *)a1 + 32) = v10;
    }
    *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 5);
    v13 = (id *)(a2 + 7);
    v14 = *((unsigned __int8 *)a2 + 64);
    if (v14 == 255)
    {
      a1[7] = *v13;
      *((_BYTE *)a1 + 64) = *((_BYTE *)a2 + 64);
    }
    else
    {
      v15 = *v13;
      sub_3D47C(*v13, *((_BYTE *)a2 + 64));
      a1[7] = v15;
      *((_BYTE *)a1 + 64) = v14;
    }
    v16 = (id *)(a2 + 9);
    v17 = *((unsigned __int8 *)a2 + 80);
    if (v17 == 255)
    {
      a1[9] = *v16;
      *((_BYTE *)a1 + 80) = *((_BYTE *)a2 + 80);
    }
    else
    {
      v18 = *v16;
      sub_3D47C(*v16, *((_BYTE *)a2 + 80));
      a1[9] = v18;
      *((_BYTE *)a1 + 80) = v17;
    }
    v19 = (id *)(a2 + 11);
    v20 = *((unsigned __int8 *)a2 + 96);
    if (v20 == 255)
    {
      a1[11] = *v19;
      *((_BYTE *)a1 + 96) = *((_BYTE *)a2 + 96);
    }
    else
    {
      v21 = *v19;
      sub_3D47C(*v19, *((_BYTE *)a2 + 96));
      a1[11] = v21;
      *((_BYTE *)a1 + 96) = v20;
    }
    v22 = (id *)(a2 + 13);
    v23 = *((unsigned __int8 *)a2 + 112);
    if (v23 == 255)
    {
      a1[13] = *v22;
      *((_BYTE *)a1 + 112) = *((_BYTE *)a2 + 112);
    }
    else
    {
      v24 = *v22;
      sub_3D47C(*v22, *((_BYTE *)a2 + 112));
      a1[13] = v24;
      *((_BYTE *)a1 + 112) = v23;
    }
    v25 = (id *)(a2 + 15);
    v26 = *((unsigned __int8 *)a2 + 128);
    if (v26 == 255)
    {
      a1[15] = *v25;
      *((_BYTE *)a1 + 128) = *((_BYTE *)a2 + 128);
    }
    else
    {
      v27 = *v25;
      sub_3D47C(*v25, *((_BYTE *)a2 + 128));
      a1[15] = v27;
      *((_BYTE *)a1 + 128) = v26;
    }
    *((_BYTE *)a1 + 129) = *((_BYTE *)a2 + 129);
    v28 = v6[11];
    v29 = (char *)a1 + v28;
    v30 = (char *)a2 + v28;
    v31 = type metadata accessor for ArtworkCrop(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v29, v30, v31);
    v32 = v6[12];
    v33 = (_QWORD *)((char *)a1 + v32);
    v34 = (_QWORD *)((char *)a2 + v32);
    v35 = v34[1];
    *v33 = *v34;
    v33[1] = v35;
    *((_BYTE *)a1 + v6[13]) = *((_BYTE *)a2 + v6[13]);
    *((_BYTE *)a1 + v6[14]) = *((_BYTE *)a2 + v6[14]);
    *((_BYTE *)a1 + v6[15]) = *((_BYTE *)a2 + v6[15]);
    v36 = v6[16];
    v37 = (_QWORD *)((char *)a1 + v36);
    v38 = (_QWORD *)((char *)a2 + v36);
    v39 = v38[1];
    *v37 = *v38;
    v37[1] = v39;
    v40 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v7 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v40(a1, 0, 1, v6);
  }
  v41 = (int *)type metadata accessor for Artwork.Configuration(0);
  v42 = v41[5];
  v43 = (char *)a1 + v42;
  v44 = (char *)a2 + v42;
  *(_OWORD *)v43 = *(_OWORD *)v44;
  v43[16] = v44[16];
  *(_OWORD *)((char *)a1 + v41[6]) = *(_OWORD *)((char *)a2 + v41[6]);
  v45 = v41[7];
  v46 = (char *)a1 + v45;
  v47 = (char *)a2 + v45;
  v48 = type metadata accessor for CropCode(0);
  v49 = *(_QWORD *)(v48 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v47, 1, v48))
  {
    v50 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7D58);
    memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v46, v47, v48);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v46, 0, 1, v48);
  }
  *((_BYTE *)a1 + v41[8]) = *((_BYTE *)a2 + v41[8]);
  v51 = *(int *)(a3 + 20);
  v52 = (char *)a1 + v51;
  v53 = (char *)a2 + v51;
  v54 = *(_QWORD *)v53;
  v55 = *((_QWORD *)v53 + 1);
  v56 = v53[16];
  sub_2ABB24(*(_QWORD *)v53, v55);
  *(_QWORD *)v52 = v54;
  *((_QWORD *)v52 + 1) = v55;
  v52[16] = v56;
  return a1;
}

uint64_t assignWithCopy for Artwork(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, int *);
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 *v15;
  __int128 *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  __int128 v23;
  id *v24;
  int v25;
  id v26;
  id v27;
  id *v28;
  int v29;
  id v30;
  id v31;
  id *v32;
  int v33;
  id v34;
  id v35;
  id *v36;
  int v37;
  id v38;
  id v39;
  id *v40;
  int v41;
  id v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  void (*v54)(uint64_t, _QWORD, uint64_t, int *);
  uint64_t v55;
  uint64_t v56;
  char v57;
  __int128 v58;
  id *v59;
  id *v60;
  int v61;
  id v62;
  void *v63;
  char v64;
  id v65;
  char v66;
  id v67;
  id *v68;
  id *v69;
  int v70;
  id v71;
  void *v72;
  char v73;
  id v74;
  char v75;
  id v76;
  id *v77;
  id *v78;
  int v79;
  id v80;
  void *v81;
  char v82;
  id v83;
  char v84;
  id v85;
  id *v86;
  id *v87;
  int v88;
  id v89;
  void *v90;
  char v91;
  id v92;
  char v93;
  id v94;
  id *v95;
  id *v96;
  int v97;
  id v98;
  void *v99;
  char v100;
  id v101;
  char v102;
  id v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  _QWORD *v110;
  uint64_t v111;
  _QWORD *v112;
  _QWORD *v113;
  int *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  uint64_t v119;
  _QWORD *v120;
  _QWORD *v121;
  uint64_t v122;
  void *v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t (*v127)(void *, uint64_t, uint64_t);
  int v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char v136;
  uint64_t v137;
  uint64_t v138;

  v6 = (int *)type metadata accessor for ArtworkModel(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      v11 = *(unsigned __int8 *)(a2 + 32);
      swift_bridgeObjectRetain();
      if (v11 == 255)
      {
        v23 = *(_OWORD *)(a2 + 16);
        *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
        *(_OWORD *)(a1 + 16) = v23;
      }
      else
      {
        v12 = *(_QWORD *)(a2 + 16);
        v13 = *(_QWORD *)(a2 + 24);
        sub_3D464(v12, v13, v11);
        *(_QWORD *)(a1 + 16) = v12;
        *(_QWORD *)(a1 + 24) = v13;
        *(_BYTE *)(a1 + 32) = v11;
      }
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      v24 = (id *)(a2 + 56);
      v25 = *(unsigned __int8 *)(a2 + 64);
      if (v25 == 255)
      {
        v27 = *v24;
        *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
        *(_QWORD *)(a1 + 56) = v27;
      }
      else
      {
        v26 = *v24;
        sub_3D47C(*v24, *(_BYTE *)(a2 + 64));
        *(_QWORD *)(a1 + 56) = v26;
        *(_BYTE *)(a1 + 64) = v25;
      }
      v28 = (id *)(a2 + 72);
      v29 = *(unsigned __int8 *)(a2 + 80);
      if (v29 == 255)
      {
        v31 = *v28;
        *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
        *(_QWORD *)(a1 + 72) = v31;
      }
      else
      {
        v30 = *v28;
        sub_3D47C(*v28, *(_BYTE *)(a2 + 80));
        *(_QWORD *)(a1 + 72) = v30;
        *(_BYTE *)(a1 + 80) = v29;
      }
      v32 = (id *)(a2 + 88);
      v33 = *(unsigned __int8 *)(a2 + 96);
      if (v33 == 255)
      {
        v35 = *v32;
        *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
        *(_QWORD *)(a1 + 88) = v35;
      }
      else
      {
        v34 = *v32;
        sub_3D47C(*v32, *(_BYTE *)(a2 + 96));
        *(_QWORD *)(a1 + 88) = v34;
        *(_BYTE *)(a1 + 96) = v33;
      }
      v36 = (id *)(a2 + 104);
      v37 = *(unsigned __int8 *)(a2 + 112);
      if (v37 == 255)
      {
        v39 = *v36;
        *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
        *(_QWORD *)(a1 + 104) = v39;
      }
      else
      {
        v38 = *v36;
        sub_3D47C(*v36, *(_BYTE *)(a2 + 112));
        *(_QWORD *)(a1 + 104) = v38;
        *(_BYTE *)(a1 + 112) = v37;
      }
      v40 = (id *)(a2 + 120);
      v41 = *(unsigned __int8 *)(a2 + 128);
      if (v41 == 255)
      {
        v43 = *v40;
        *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
        *(_QWORD *)(a1 + 120) = v43;
      }
      else
      {
        v42 = *v40;
        sub_3D47C(*v40, *(_BYTE *)(a2 + 128));
        *(_QWORD *)(a1 + 120) = v42;
        *(_BYTE *)(a1 + 128) = v41;
      }
      *(_BYTE *)(a1 + 129) = *(_BYTE *)(a2 + 129);
      v44 = v6[11];
      v45 = a1 + v44;
      v46 = a2 + v44;
      v47 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 16))(v45, v46, v47);
      v48 = v6[12];
      v49 = (_QWORD *)(a1 + v48);
      v50 = (_QWORD *)(a2 + v48);
      *v49 = *v50;
      v49[1] = v50[1];
      *(_BYTE *)(a1 + v6[13]) = *(_BYTE *)(a2 + v6[13]);
      *(_BYTE *)(a1 + v6[14]) = *(_BYTE *)(a2 + v6[14]);
      *(_BYTE *)(a1 + v6[15]) = *(_BYTE *)(a2 + v6[15]);
      v51 = v6[16];
      v52 = (_QWORD *)(a1 + v51);
      v53 = (_QWORD *)(a2 + v51);
      *v52 = *v53;
      v52[1] = v53[1];
      v54 = *(void (**)(uint64_t, _QWORD, uint64_t, int *))(v7 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v54(a1, 0, 1, v6);
      goto LABEL_68;
    }
LABEL_7:
    v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
    memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_68;
  }
  if (v10)
  {
    sub_145D8(a1, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
    goto LABEL_7;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v15 = (__int128 *)(a1 + 16);
  v16 = (__int128 *)(a2 + 16);
  v17 = *(unsigned __int8 *)(a2 + 32);
  if (*(unsigned __int8 *)(a1 + 32) == 255)
  {
    if (v17 == 255)
    {
      v58 = *v16;
      *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
      *v15 = v58;
    }
    else
    {
      v55 = *(_QWORD *)(a2 + 16);
      v56 = *(_QWORD *)(a2 + 24);
      sub_3D464(v55, v56, *(_BYTE *)(a2 + 32));
      *(_QWORD *)(a1 + 16) = v55;
      *(_QWORD *)(a1 + 24) = v56;
      *(_BYTE *)(a1 + 32) = v17;
    }
  }
  else if (v17 == 255)
  {
    sub_3E43C(a1 + 16);
    v57 = *(_BYTE *)(a2 + 32);
    *v15 = *v16;
    *(_BYTE *)(a1 + 32) = v57;
  }
  else
  {
    v18 = *(_QWORD *)(a2 + 16);
    v19 = *(_QWORD *)(a2 + 24);
    sub_3D464(v18, v19, *(_BYTE *)(a2 + 32));
    v20 = *(_QWORD *)(a1 + 16);
    v21 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 16) = v18;
    *(_QWORD *)(a1 + 24) = v19;
    v22 = *(_BYTE *)(a1 + 32);
    *(_BYTE *)(a1 + 32) = v17;
    sub_3B5BC(v20, v21, v22);
  }
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v59 = (id *)(a1 + 56);
  v60 = (id *)(a2 + 56);
  v61 = *(unsigned __int8 *)(a2 + 64);
  if (*(unsigned __int8 *)(a1 + 64) == 255)
  {
    if (v61 == 255)
    {
      v67 = *v60;
      *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
      *v59 = v67;
    }
    else
    {
      v65 = *v60;
      sub_3D47C(*v60, *(_BYTE *)(a2 + 64));
      *(_QWORD *)(a1 + 56) = v65;
      *(_BYTE *)(a1 + 64) = v61;
    }
  }
  else if (v61 == 255)
  {
    sub_3E470(a1 + 56);
    v66 = *(_BYTE *)(a2 + 64);
    *v59 = *v60;
    *(_BYTE *)(a1 + 64) = v66;
  }
  else
  {
    v62 = *v60;
    sub_3D47C(*v60, *(_BYTE *)(a2 + 64));
    v63 = *(void **)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v62;
    v64 = *(_BYTE *)(a1 + 64);
    *(_BYTE *)(a1 + 64) = v61;
    sub_3D624(v63, v64);
  }
  v68 = (id *)(a1 + 72);
  v69 = (id *)(a2 + 72);
  v70 = *(unsigned __int8 *)(a2 + 80);
  if (*(unsigned __int8 *)(a1 + 80) == 255)
  {
    if (v70 == 255)
    {
      v76 = *v69;
      *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
      *v68 = v76;
    }
    else
    {
      v74 = *v69;
      sub_3D47C(*v69, *(_BYTE *)(a2 + 80));
      *(_QWORD *)(a1 + 72) = v74;
      *(_BYTE *)(a1 + 80) = v70;
    }
  }
  else if (v70 == 255)
  {
    sub_3E470(a1 + 72);
    v75 = *(_BYTE *)(a2 + 80);
    *v68 = *v69;
    *(_BYTE *)(a1 + 80) = v75;
  }
  else
  {
    v71 = *v69;
    sub_3D47C(*v69, *(_BYTE *)(a2 + 80));
    v72 = *(void **)(a1 + 72);
    *(_QWORD *)(a1 + 72) = v71;
    v73 = *(_BYTE *)(a1 + 80);
    *(_BYTE *)(a1 + 80) = v70;
    sub_3D624(v72, v73);
  }
  v77 = (id *)(a1 + 88);
  v78 = (id *)(a2 + 88);
  v79 = *(unsigned __int8 *)(a2 + 96);
  if (*(unsigned __int8 *)(a1 + 96) == 255)
  {
    if (v79 == 255)
    {
      v85 = *v78;
      *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
      *v77 = v85;
    }
    else
    {
      v83 = *v78;
      sub_3D47C(*v78, *(_BYTE *)(a2 + 96));
      *(_QWORD *)(a1 + 88) = v83;
      *(_BYTE *)(a1 + 96) = v79;
    }
  }
  else if (v79 == 255)
  {
    sub_3E470(a1 + 88);
    v84 = *(_BYTE *)(a2 + 96);
    *v77 = *v78;
    *(_BYTE *)(a1 + 96) = v84;
  }
  else
  {
    v80 = *v78;
    sub_3D47C(*v78, *(_BYTE *)(a2 + 96));
    v81 = *(void **)(a1 + 88);
    *(_QWORD *)(a1 + 88) = v80;
    v82 = *(_BYTE *)(a1 + 96);
    *(_BYTE *)(a1 + 96) = v79;
    sub_3D624(v81, v82);
  }
  v86 = (id *)(a1 + 104);
  v87 = (id *)(a2 + 104);
  v88 = *(unsigned __int8 *)(a2 + 112);
  if (*(unsigned __int8 *)(a1 + 112) == 255)
  {
    if (v88 == 255)
    {
      v94 = *v87;
      *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
      *v86 = v94;
    }
    else
    {
      v92 = *v87;
      sub_3D47C(*v87, *(_BYTE *)(a2 + 112));
      *(_QWORD *)(a1 + 104) = v92;
      *(_BYTE *)(a1 + 112) = v88;
    }
  }
  else if (v88 == 255)
  {
    sub_3E470(a1 + 104);
    v93 = *(_BYTE *)(a2 + 112);
    *v86 = *v87;
    *(_BYTE *)(a1 + 112) = v93;
  }
  else
  {
    v89 = *v87;
    sub_3D47C(*v87, *(_BYTE *)(a2 + 112));
    v90 = *(void **)(a1 + 104);
    *(_QWORD *)(a1 + 104) = v89;
    v91 = *(_BYTE *)(a1 + 112);
    *(_BYTE *)(a1 + 112) = v88;
    sub_3D624(v90, v91);
  }
  v95 = (id *)(a1 + 120);
  v96 = (id *)(a2 + 120);
  v97 = *(unsigned __int8 *)(a2 + 128);
  if (*(unsigned __int8 *)(a1 + 128) == 255)
  {
    if (v97 == 255)
    {
      v103 = *v96;
      *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
      *v95 = v103;
    }
    else
    {
      v101 = *v96;
      sub_3D47C(*v96, *(_BYTE *)(a2 + 128));
      *(_QWORD *)(a1 + 120) = v101;
      *(_BYTE *)(a1 + 128) = v97;
    }
  }
  else if (v97 == 255)
  {
    sub_3E470(a1 + 120);
    v102 = *(_BYTE *)(a2 + 128);
    *v95 = *v96;
    *(_BYTE *)(a1 + 128) = v102;
  }
  else
  {
    v98 = *v96;
    sub_3D47C(*v96, *(_BYTE *)(a2 + 128));
    v99 = *(void **)(a1 + 120);
    *(_QWORD *)(a1 + 120) = v98;
    v100 = *(_BYTE *)(a1 + 128);
    *(_BYTE *)(a1 + 128) = v97;
    sub_3D624(v99, v100);
  }
  *(_BYTE *)(a1 + 129) = *(_BYTE *)(a2 + 129);
  v104 = v6[11];
  v105 = a1 + v104;
  v106 = a2 + v104;
  v107 = type metadata accessor for ArtworkCrop(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v107 - 8) + 24))(v105, v106, v107);
  v108 = v6[12];
  v109 = (_QWORD *)(a1 + v108);
  v110 = (_QWORD *)(a2 + v108);
  *v109 = *v110;
  v109[1] = v110[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + v6[13]) = *(_BYTE *)(a2 + v6[13]);
  *(_BYTE *)(a1 + v6[14]) = *(_BYTE *)(a2 + v6[14]);
  *(_BYTE *)(a1 + v6[15]) = *(_BYTE *)(a2 + v6[15]);
  v111 = v6[16];
  v112 = (_QWORD *)(a1 + v111);
  v113 = (_QWORD *)(a2 + v111);
  *v112 = *v113;
  v112[1] = v113[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_68:
  v114 = (int *)type metadata accessor for Artwork.Configuration(0);
  v115 = v114[5];
  v116 = a1 + v115;
  v117 = a2 + v115;
  v118 = *(_BYTE *)(v117 + 16);
  *(_OWORD *)v116 = *(_OWORD *)v117;
  *(_BYTE *)(v116 + 16) = v118;
  v119 = v114[6];
  v120 = (_QWORD *)(a1 + v119);
  v121 = (_QWORD *)(a2 + v119);
  *v120 = *v121;
  v120[1] = v121[1];
  v122 = v114[7];
  v123 = (void *)(a1 + v122);
  v124 = (void *)(a2 + v122);
  v125 = type metadata accessor for CropCode(0);
  v126 = *(_QWORD *)(v125 - 8);
  v127 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v126 + 48);
  v128 = v127(v123, 1, v125);
  v129 = v127(v124, 1, v125);
  if (!v128)
  {
    if (!v129)
    {
      (*(void (**)(void *, void *, uint64_t))(v126 + 24))(v123, v124, v125);
      goto LABEL_74;
    }
    (*(void (**)(void *, uint64_t))(v126 + 8))(v123, v125);
    goto LABEL_73;
  }
  if (v129)
  {
LABEL_73:
    v130 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7D58);
    memcpy(v123, v124, *(_QWORD *)(*(_QWORD *)(v130 - 8) + 64));
    goto LABEL_74;
  }
  (*(void (**)(void *, void *, uint64_t))(v126 + 16))(v123, v124, v125);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v126 + 56))(v123, 0, 1, v125);
LABEL_74:
  *(_BYTE *)(a1 + v114[8]) = *(_BYTE *)(a2 + v114[8]);
  v131 = *(int *)(a3 + 20);
  v132 = a1 + v131;
  v133 = a2 + v131;
  v134 = *(_QWORD *)v133;
  v135 = *(_QWORD *)(v133 + 8);
  v136 = *(_BYTE *)(v133 + 16);
  sub_2ABB24(*(_QWORD *)v133, v135);
  v137 = *(_QWORD *)v132;
  v138 = *(_QWORD *)(v132 + 8);
  *(_QWORD *)v132 = v134;
  *(_QWORD *)(v132 + 8) = v135;
  *(_BYTE *)(v132 + 16) = v136;
  sub_2ABCA0(v137, v138);
  return a1;
}

_OWORD *initializeWithTake for Artwork(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;

  v6 = (int *)type metadata accessor for ArtworkModel(0);
  v7 = *((_QWORD *)v6 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    v9 = a2[1];
    *a1 = *a2;
    a1[1] = v9;
    *((_BYTE *)a1 + 32) = *((_BYTE *)a2 + 32);
    *(_OWORD *)((char *)a1 + 40) = *(_OWORD *)((char *)a2 + 40);
    *((_QWORD *)a1 + 7) = *((_QWORD *)a2 + 7);
    *((_BYTE *)a1 + 64) = *((_BYTE *)a2 + 64);
    *(_OWORD *)((char *)a1 + 113) = *(_OWORD *)((char *)a2 + 113);
    *(_OWORD *)((char *)a1 + 104) = *(_OWORD *)((char *)a2 + 104);
    *(_OWORD *)((char *)a1 + 88) = *(_OWORD *)((char *)a2 + 88);
    *(_OWORD *)((char *)a1 + 72) = *(_OWORD *)((char *)a2 + 72);
    *((_BYTE *)a1 + 129) = *((_BYTE *)a2 + 129);
    v10 = v6[11];
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    v13 = type metadata accessor for ArtworkCrop(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
    *(_OWORD *)((char *)a1 + v6[12]) = *(_OWORD *)((char *)a2 + v6[12]);
    *((_BYTE *)a1 + v6[13]) = *((_BYTE *)a2 + v6[13]);
    *((_BYTE *)a1 + v6[14]) = *((_BYTE *)a2 + v6[14]);
    *((_BYTE *)a1 + v6[15]) = *((_BYTE *)a2 + v6[15]);
    *(_OWORD *)((char *)a1 + v6[16]) = *(_OWORD *)((char *)a2 + v6[16]);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v7 + 56))(a1, 0, 1, v6);
  }
  v14 = (int *)type metadata accessor for Artwork.Configuration(0);
  v15 = v14[5];
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  *(_OWORD *)v16 = *(_OWORD *)v17;
  v16[16] = v17[16];
  *(_OWORD *)((char *)a1 + v14[6]) = *(_OWORD *)((char *)a2 + v14[6]);
  v18 = v14[7];
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  v21 = type metadata accessor for CropCode(0);
  v22 = *(_QWORD *)(v21 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
  {
    v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7D58);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v19, v20, v21);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  }
  *((_BYTE *)a1 + v14[8]) = *((_BYTE *)a2 + v14[8]);
  v24 = *(int *)(a3 + 20);
  v25 = (char *)a1 + v24;
  v26 = (char *)a2 + v24;
  *(_OWORD *)v25 = *(_OWORD *)v26;
  v25[16] = v26[16];
  return a1;
}

uint64_t assignWithTake for Artwork(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, int *);
  int v9;
  int v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(void *, uint64_t, uint64_t);
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  _OWORD *v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  int v44;
  int v45;
  void *v46;
  _QWORD *v47;
  int v48;
  int v49;
  void *v50;
  _QWORD *v51;
  int v52;
  int v53;
  void *v54;
  _QWORD *v55;
  int v56;
  int v57;
  void *v58;
  _QWORD *v59;
  int v60;
  int v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;

  v6 = (int *)type metadata accessor for ArtworkModel(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      v11 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v11;
      *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
      *(_OWORD *)(a1 + 113) = *(_OWORD *)(a2 + 113);
      *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
      *(_BYTE *)(a1 + 129) = *(_BYTE *)(a2 + 129);
      v12 = v6[11];
      v13 = a1 + v12;
      v14 = a2 + v12;
      v15 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
      *(_OWORD *)(a1 + v6[12]) = *(_OWORD *)(a2 + v6[12]);
      *(_BYTE *)(a1 + v6[13]) = *(_BYTE *)(a2 + v6[13]);
      *(_BYTE *)(a1 + v6[14]) = *(_BYTE *)(a2 + v6[14]);
      *(_BYTE *)(a1 + v6[15]) = *(_BYTE *)(a2 + v6[15]);
      *(_OWORD *)(a1 + v6[16]) = *(_OWORD *)(a2 + v6[16]);
      (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    sub_145D8(a1, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
LABEL_6:
    v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
    memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  v37 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v37;
  swift_bridgeObjectRelease();
  v38 = (_OWORD *)(a2 + 16);
  v39 = *(unsigned __int8 *)(a1 + 32);
  if (v39 != 255)
  {
    v40 = *(unsigned __int8 *)(a2 + 32);
    if (v40 != 255)
    {
      v41 = *(_QWORD *)(a1 + 16);
      v42 = *(_QWORD *)(a1 + 24);
      *(_OWORD *)(a1 + 16) = *v38;
      *(_BYTE *)(a1 + 32) = v40;
      sub_3B5BC(v41, v42, v39);
      goto LABEL_20;
    }
    sub_3E43C(a1 + 16);
  }
  *(_OWORD *)(a1 + 16) = *v38;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
LABEL_20:
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v43 = (_QWORD *)(a2 + 56);
  v44 = *(unsigned __int8 *)(a1 + 64);
  if (v44 != 255)
  {
    v45 = *(unsigned __int8 *)(a2 + 64);
    if (v45 != 255)
    {
      v46 = *(void **)(a1 + 56);
      *(_QWORD *)(a1 + 56) = *v43;
      *(_BYTE *)(a1 + 64) = v45;
      sub_3D624(v46, v44);
      goto LABEL_25;
    }
    sub_3E470(a1 + 56);
  }
  *(_QWORD *)(a1 + 56) = *v43;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
LABEL_25:
  v47 = (_QWORD *)(a2 + 72);
  v48 = *(unsigned __int8 *)(a1 + 80);
  if (v48 != 255)
  {
    v49 = *(unsigned __int8 *)(a2 + 80);
    if (v49 != 255)
    {
      v50 = *(void **)(a1 + 72);
      *(_QWORD *)(a1 + 72) = *v47;
      *(_BYTE *)(a1 + 80) = v49;
      sub_3D624(v50, v48);
      goto LABEL_30;
    }
    sub_3E470(a1 + 72);
  }
  *(_QWORD *)(a1 + 72) = *v47;
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
LABEL_30:
  v51 = (_QWORD *)(a2 + 88);
  v52 = *(unsigned __int8 *)(a1 + 96);
  if (v52 != 255)
  {
    v53 = *(unsigned __int8 *)(a2 + 96);
    if (v53 != 255)
    {
      v54 = *(void **)(a1 + 88);
      *(_QWORD *)(a1 + 88) = *v51;
      *(_BYTE *)(a1 + 96) = v53;
      sub_3D624(v54, v52);
      goto LABEL_35;
    }
    sub_3E470(a1 + 88);
  }
  *(_QWORD *)(a1 + 88) = *v51;
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
LABEL_35:
  v55 = (_QWORD *)(a2 + 104);
  v56 = *(unsigned __int8 *)(a1 + 112);
  if (v56 != 255)
  {
    v57 = *(unsigned __int8 *)(a2 + 112);
    if (v57 != 255)
    {
      v58 = *(void **)(a1 + 104);
      *(_QWORD *)(a1 + 104) = *v55;
      *(_BYTE *)(a1 + 112) = v57;
      sub_3D624(v58, v56);
      goto LABEL_40;
    }
    sub_3E470(a1 + 104);
  }
  *(_QWORD *)(a1 + 104) = *v55;
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
LABEL_40:
  v59 = (_QWORD *)(a2 + 120);
  v60 = *(unsigned __int8 *)(a1 + 128);
  if (v60 == 255)
  {
LABEL_44:
    *(_QWORD *)(a1 + 120) = *v59;
    *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
    goto LABEL_45;
  }
  v61 = *(unsigned __int8 *)(a2 + 128);
  if (v61 == 255)
  {
    sub_3E470(a1 + 120);
    goto LABEL_44;
  }
  v62 = *(void **)(a1 + 120);
  *(_QWORD *)(a1 + 120) = *v59;
  *(_BYTE *)(a1 + 128) = v61;
  sub_3D624(v62, v60);
LABEL_45:
  *(_BYTE *)(a1 + 129) = *(_BYTE *)(a2 + 129);
  v63 = v6[11];
  v64 = a1 + v63;
  v65 = a2 + v63;
  v66 = type metadata accessor for ArtworkCrop(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 40))(v64, v65, v66);
  v67 = v6[12];
  v68 = (_QWORD *)(a1 + v67);
  v69 = (uint64_t *)(a2 + v67);
  v71 = *v69;
  v70 = v69[1];
  *v68 = v71;
  v68[1] = v70;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + v6[13]) = *(_BYTE *)(a2 + v6[13]);
  *(_BYTE *)(a1 + v6[14]) = *(_BYTE *)(a2 + v6[14]);
  *(_BYTE *)(a1 + v6[15]) = *(_BYTE *)(a2 + v6[15]);
  v72 = v6[16];
  v73 = (_QWORD *)(a1 + v72);
  v74 = (uint64_t *)(a2 + v72);
  v76 = *v74;
  v75 = v74[1];
  *v73 = v76;
  v73[1] = v75;
  swift_bridgeObjectRelease();
LABEL_7:
  v17 = (int *)type metadata accessor for Artwork.Configuration(0);
  v18 = v17[5];
  v19 = a1 + v18;
  v20 = a2 + v18;
  *(_OWORD *)v19 = *(_OWORD *)v20;
  *(_BYTE *)(v19 + 16) = *(_BYTE *)(v20 + 16);
  *(_OWORD *)(a1 + v17[6]) = *(_OWORD *)(a2 + v17[6]);
  v21 = v17[7];
  v22 = (void *)(a1 + v21);
  v23 = (void *)(a2 + v21);
  v24 = type metadata accessor for CropCode(0);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v25 + 48);
  v27 = v26(v22, 1, v24);
  v28 = v26(v23, 1, v24);
  if (!v27)
  {
    if (!v28)
    {
      (*(void (**)(void *, void *, uint64_t))(v25 + 40))(v22, v23, v24);
      goto LABEL_13;
    }
    (*(void (**)(void *, uint64_t))(v25 + 8))(v22, v24);
    goto LABEL_12;
  }
  if (v28)
  {
LABEL_12:
    v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7D58);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v25 + 32))(v22, v23, v24);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
LABEL_13:
  *(_BYTE *)(a1 + v17[8]) = *(_BYTE *)(a2 + v17[8]);
  v30 = *(int *)(a3 + 20);
  v31 = a1 + v30;
  v32 = a2 + v30;
  v33 = *(_BYTE *)(v32 + 16);
  v34 = *(_QWORD *)v31;
  v35 = *(_QWORD *)(v31 + 8);
  *(_OWORD *)v31 = *(_OWORD *)v32;
  *(_BYTE *)(v31 + 16) = v33;
  sub_2ABCA0(v34, v35);
  return a1;
}

uint64_t getEnumTagSinglePayload for Artwork(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_2AD0DC);
}

uint64_t sub_2AD0DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = type metadata accessor for Artwork.Configuration(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20) + 16);
  if (v9 > 1)
    return (v9 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for Artwork(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_2AD164);
}

uint64_t sub_2AD164(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for Artwork.Configuration(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 20) + 16) = -(char)a2;
  return result;
}

uint64_t sub_2AD1E0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for Artwork.Configuration(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_304850;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for Artwork.Sizing()
{
  return &type metadata for Artwork.Sizing;
}

unint64_t sub_2AD264()
{
  unint64_t result;

  result = qword_3C66C0;
  if (!qword_3C66C0)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_3C6628);
    sub_2AD2E8();
    sub_F1C0(&qword_3C66F8, (void (*)(uint64_t))type metadata accessor for ArtworkLoaderModifier, (uint64_t)&unk_2F58B8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>);
    atomic_store(result, (unint64_t *)&qword_3C66C0);
  }
  return result;
}

unint64_t sub_2AD2E8()
{
  unint64_t result;

  result = qword_3C66C8;
  if (!qword_3C66C8)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_3C6618);
    sub_2AD36C();
    sub_F1C0(&qword_3C66F0, (void (*)(uint64_t))type metadata accessor for FrameModifier, (uint64_t)&unk_304908);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>);
    atomic_store(result, (unint64_t *)&qword_3C66C8);
  }
  return result;
}

unint64_t sub_2AD36C()
{
  unint64_t result;

  result = qword_3C66D0;
  if (!qword_3C66D0)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_3C66D8);
    sub_32914(&qword_3C66E0, &qword_3C66E8, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    sub_26AE40();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>);
    atomic_store(result, (unint64_t *)&qword_3C66D0);
  }
  return result;
}

uint64_t *sub_2AD3F0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  int *v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  id *v15;
  int v16;
  id v17;
  id *v18;
  int v19;
  id v20;
  id *v21;
  int v22;
  id v23;
  id *v24;
  int v25;
  id v26;
  id *v27;
  int v28;
  id v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  void (*v42)(uint64_t *, _QWORD, uint64_t, int *);
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v4 = type metadata accessor for Artwork.Configuration(0);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = (int *)v4;
    v7 = (int *)type metadata accessor for ArtworkModel(0);
    v8 = *((_QWORD *)v7 - 1);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, int *))(v8 + 48))(a2, 1, v7))
    {
      v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      v11 = a2[1];
      *a1 = *a2;
      a1[1] = v11;
      v12 = *((unsigned __int8 *)a2 + 32);
      swift_bridgeObjectRetain();
      if (v12 == 255)
      {
        *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
        *((_BYTE *)a1 + 32) = *((_BYTE *)a2 + 32);
      }
      else
      {
        v13 = a2[2];
        v14 = a2[3];
        sub_3D464(v13, v14, v12);
        a1[2] = v13;
        a1[3] = v14;
        *((_BYTE *)a1 + 32) = v12;
      }
      *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 5);
      v15 = (id *)(a2 + 7);
      v16 = *((unsigned __int8 *)a2 + 64);
      if (v16 == 255)
      {
        a1[7] = (uint64_t)*v15;
        *((_BYTE *)a1 + 64) = *((_BYTE *)a2 + 64);
      }
      else
      {
        v17 = *v15;
        sub_3D47C(*v15, *((_BYTE *)a2 + 64));
        a1[7] = (uint64_t)v17;
        *((_BYTE *)a1 + 64) = v16;
      }
      v18 = (id *)(a2 + 9);
      v19 = *((unsigned __int8 *)a2 + 80);
      if (v19 == 255)
      {
        a1[9] = (uint64_t)*v18;
        *((_BYTE *)a1 + 80) = *((_BYTE *)a2 + 80);
      }
      else
      {
        v20 = *v18;
        sub_3D47C(*v18, *((_BYTE *)a2 + 80));
        a1[9] = (uint64_t)v20;
        *((_BYTE *)a1 + 80) = v19;
      }
      v21 = (id *)(a2 + 11);
      v22 = *((unsigned __int8 *)a2 + 96);
      if (v22 == 255)
      {
        a1[11] = (uint64_t)*v21;
        *((_BYTE *)a1 + 96) = *((_BYTE *)a2 + 96);
      }
      else
      {
        v23 = *v21;
        sub_3D47C(*v21, *((_BYTE *)a2 + 96));
        a1[11] = (uint64_t)v23;
        *((_BYTE *)a1 + 96) = v22;
      }
      v24 = (id *)(a2 + 13);
      v25 = *((unsigned __int8 *)a2 + 112);
      if (v25 == 255)
      {
        a1[13] = (uint64_t)*v24;
        *((_BYTE *)a1 + 112) = *((_BYTE *)a2 + 112);
      }
      else
      {
        v26 = *v24;
        sub_3D47C(*v24, *((_BYTE *)a2 + 112));
        a1[13] = (uint64_t)v26;
        *((_BYTE *)a1 + 112) = v25;
      }
      v27 = (id *)(a2 + 15);
      v28 = *((unsigned __int8 *)a2 + 128);
      if (v28 == 255)
      {
        a1[15] = (uint64_t)*v27;
        *((_BYTE *)a1 + 128) = *((_BYTE *)a2 + 128);
      }
      else
      {
        v29 = *v27;
        sub_3D47C(*v27, *((_BYTE *)a2 + 128));
        a1[15] = (uint64_t)v29;
        *((_BYTE *)a1 + 128) = v28;
      }
      *((_BYTE *)a1 + 129) = *((_BYTE *)a2 + 129);
      v30 = v7[11];
      v31 = (char *)a1 + v30;
      v32 = (char *)a2 + v30;
      v33 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v31, v32, v33);
      v34 = v7[12];
      v35 = (uint64_t *)((char *)a1 + v34);
      v36 = (uint64_t *)((char *)a2 + v34);
      v37 = v36[1];
      *v35 = *v36;
      v35[1] = v37;
      *((_BYTE *)a1 + v7[13]) = *((_BYTE *)a2 + v7[13]);
      *((_BYTE *)a1 + v7[14]) = *((_BYTE *)a2 + v7[14]);
      *((_BYTE *)a1 + v7[15]) = *((_BYTE *)a2 + v7[15]);
      v38 = v7[16];
      v39 = (uint64_t *)((char *)a1 + v38);
      v40 = (uint64_t *)((char *)a2 + v38);
      v41 = v40[1];
      *v39 = *v40;
      v39[1] = v41;
      v42 = *(void (**)(uint64_t *, _QWORD, uint64_t, int *))(v8 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v42(a1, 0, 1, v7);
    }
    v43 = v6[5];
    v44 = (char *)a1 + v43;
    v45 = (char *)a2 + v43;
    *(_OWORD *)v44 = *(_OWORD *)v45;
    v44[16] = v45[16];
    *(_OWORD *)((char *)a1 + v6[6]) = *(_OWORD *)((char *)a2 + v6[6]);
    v46 = v6[7];
    v47 = (char *)a1 + v46;
    v48 = (char *)a2 + v46;
    v49 = type metadata accessor for CropCode(0);
    v50 = *(_QWORD *)(v49 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48))(v48, 1, v49))
    {
      v51 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7D58);
      memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v50 + 16))(v47, v48, v49);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v50 + 56))(v47, 0, 1, v49);
    }
    *((_BYTE *)a1 + v6[8]) = *((_BYTE *)a2 + v6[8]);
  }
  return a1;
}

uint64_t sub_2AD7A4(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  v2 = type metadata accessor for ArtworkModel(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 1, v2))
  {
    swift_bridgeObjectRelease();
    v3 = *(unsigned __int8 *)(a1 + 32);
    if (v3 != 255)
      sub_3B5BC(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), v3);
    v4 = *(unsigned __int8 *)(a1 + 64);
    if (v4 != 255)
      sub_3D624(*(id *)(a1 + 56), v4);
    v5 = *(unsigned __int8 *)(a1 + 80);
    if (v5 != 255)
      sub_3D624(*(id *)(a1 + 72), v5);
    v6 = *(unsigned __int8 *)(a1 + 96);
    if (v6 != 255)
      sub_3D624(*(id *)(a1 + 88), v6);
    v7 = *(unsigned __int8 *)(a1 + 112);
    if (v7 != 255)
      sub_3D624(*(id *)(a1 + 104), v7);
    v8 = *(unsigned __int8 *)(a1 + 128);
    if (v8 != 255)
      sub_3D624(*(id *)(a1 + 120), v8);
    v9 = a1 + *(int *)(v2 + 44);
    v10 = type metadata accessor for ArtworkCrop(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v11 = a1 + *(int *)(type metadata accessor for Artwork.Configuration(0) + 28);
  v12 = type metadata accessor for CropCode(0);
  v13 = *(_QWORD *)(v12 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
  return result;
}

_QWORD *sub_2AD908(_QWORD *a1, _QWORD *a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  id *v11;
  int v12;
  id v13;
  id *v14;
  int v15;
  id v16;
  id *v17;
  int v18;
  id v19;
  id *v20;
  int v21;
  id v22;
  id *v23;
  int v24;
  id v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  void (*v38)(_QWORD *, _QWORD, uint64_t, int *);
  int *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v4 = (int *)type metadata accessor for ArtworkModel(0);
  v5 = *((_QWORD *)v4 - 1);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v5 + 48))(a2, 1, v4))
  {
    v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = *((unsigned __int8 *)a2 + 32);
    swift_bridgeObjectRetain();
    if (v8 == 255)
    {
      *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
      *((_BYTE *)a1 + 32) = *((_BYTE *)a2 + 32);
    }
    else
    {
      v9 = a2[2];
      v10 = a2[3];
      sub_3D464(v9, v10, v8);
      a1[2] = v9;
      a1[3] = v10;
      *((_BYTE *)a1 + 32) = v8;
    }
    *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 5);
    v11 = (id *)(a2 + 7);
    v12 = *((unsigned __int8 *)a2 + 64);
    if (v12 == 255)
    {
      a1[7] = *v11;
      *((_BYTE *)a1 + 64) = *((_BYTE *)a2 + 64);
    }
    else
    {
      v13 = *v11;
      sub_3D47C(*v11, *((_BYTE *)a2 + 64));
      a1[7] = v13;
      *((_BYTE *)a1 + 64) = v12;
    }
    v14 = (id *)(a2 + 9);
    v15 = *((unsigned __int8 *)a2 + 80);
    if (v15 == 255)
    {
      a1[9] = *v14;
      *((_BYTE *)a1 + 80) = *((_BYTE *)a2 + 80);
    }
    else
    {
      v16 = *v14;
      sub_3D47C(*v14, *((_BYTE *)a2 + 80));
      a1[9] = v16;
      *((_BYTE *)a1 + 80) = v15;
    }
    v17 = (id *)(a2 + 11);
    v18 = *((unsigned __int8 *)a2 + 96);
    if (v18 == 255)
    {
      a1[11] = *v17;
      *((_BYTE *)a1 + 96) = *((_BYTE *)a2 + 96);
    }
    else
    {
      v19 = *v17;
      sub_3D47C(*v17, *((_BYTE *)a2 + 96));
      a1[11] = v19;
      *((_BYTE *)a1 + 96) = v18;
    }
    v20 = (id *)(a2 + 13);
    v21 = *((unsigned __int8 *)a2 + 112);
    if (v21 == 255)
    {
      a1[13] = *v20;
      *((_BYTE *)a1 + 112) = *((_BYTE *)a2 + 112);
    }
    else
    {
      v22 = *v20;
      sub_3D47C(*v20, *((_BYTE *)a2 + 112));
      a1[13] = v22;
      *((_BYTE *)a1 + 112) = v21;
    }
    v23 = (id *)(a2 + 15);
    v24 = *((unsigned __int8 *)a2 + 128);
    if (v24 == 255)
    {
      a1[15] = *v23;
      *((_BYTE *)a1 + 128) = *((_BYTE *)a2 + 128);
    }
    else
    {
      v25 = *v23;
      sub_3D47C(*v23, *((_BYTE *)a2 + 128));
      a1[15] = v25;
      *((_BYTE *)a1 + 128) = v24;
    }
    *((_BYTE *)a1 + 129) = *((_BYTE *)a2 + 129);
    v26 = v4[11];
    v27 = (char *)a1 + v26;
    v28 = (char *)a2 + v26;
    v29 = type metadata accessor for ArtworkCrop(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v27, v28, v29);
    v30 = v4[12];
    v31 = (_QWORD *)((char *)a1 + v30);
    v32 = (_QWORD *)((char *)a2 + v30);
    v33 = v32[1];
    *v31 = *v32;
    v31[1] = v33;
    *((_BYTE *)a1 + v4[13]) = *((_BYTE *)a2 + v4[13]);
    *((_BYTE *)a1 + v4[14]) = *((_BYTE *)a2 + v4[14]);
    *((_BYTE *)a1 + v4[15]) = *((_BYTE *)a2 + v4[15]);
    v34 = v4[16];
    v35 = (_QWORD *)((char *)a1 + v34);
    v36 = (_QWORD *)((char *)a2 + v34);
    v37 = v36[1];
    *v35 = *v36;
    v35[1] = v37;
    v38 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v5 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v38(a1, 0, 1, v4);
  }
  v39 = (int *)type metadata accessor for Artwork.Configuration(0);
  v40 = v39[5];
  v41 = (char *)a1 + v40;
  v42 = (char *)a2 + v40;
  *(_OWORD *)v41 = *(_OWORD *)v42;
  v41[16] = v42[16];
  *(_OWORD *)((char *)a1 + v39[6]) = *(_OWORD *)((char *)a2 + v39[6]);
  v43 = v39[7];
  v44 = (char *)a1 + v43;
  v45 = (char *)a2 + v43;
  v46 = type metadata accessor for CropCode(0);
  v47 = *(_QWORD *)(v46 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46))
  {
    v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7D58);
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v44, v45, v46);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
  }
  *((_BYTE *)a1 + v39[8]) = *((_BYTE *)a2 + v39[8]);
  return a1;
}

uint64_t sub_2ADC90(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, int *);
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  __int128 *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 v20;
  __int128 v21;
  id *v22;
  int v23;
  id v24;
  id v25;
  id *v26;
  int v27;
  id v28;
  id v29;
  id *v30;
  int v31;
  id v32;
  id v33;
  id *v34;
  int v35;
  id v36;
  id v37;
  id *v38;
  int v39;
  id v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  void (*v52)(uint64_t, _QWORD, uint64_t, int *);
  uint64_t v53;
  uint64_t v54;
  char v55;
  __int128 v56;
  id *v57;
  id *v58;
  int v59;
  id v60;
  void *v61;
  char v62;
  id v63;
  char v64;
  id v65;
  id *v66;
  id *v67;
  int v68;
  id v69;
  void *v70;
  char v71;
  id v72;
  char v73;
  id v74;
  id *v75;
  id *v76;
  int v77;
  id v78;
  void *v79;
  char v80;
  id v81;
  char v82;
  id v83;
  id *v84;
  id *v85;
  int v86;
  id v87;
  void *v88;
  char v89;
  id v90;
  char v91;
  id v92;
  id *v93;
  id *v94;
  int v95;
  id v96;
  void *v97;
  char v98;
  id v99;
  char v100;
  id v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  _QWORD *v108;
  uint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  int *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  uint64_t v117;
  _QWORD *v118;
  _QWORD *v119;
  uint64_t v120;
  void *v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t (*v125)(void *, uint64_t, uint64_t);
  int v126;
  int v127;
  uint64_t v128;

  v4 = (int *)type metadata accessor for ArtworkModel(0);
  v5 = *((_QWORD *)v4 - 1);
  v6 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v5 + 48);
  v7 = v6(a1, 1, v4);
  v8 = v6(a2, 1, v4);
  if (v7)
  {
    if (!v8)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      v9 = *(unsigned __int8 *)(a2 + 32);
      swift_bridgeObjectRetain();
      if (v9 == 255)
      {
        v21 = *(_OWORD *)(a2 + 16);
        *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
        *(_OWORD *)(a1 + 16) = v21;
      }
      else
      {
        v10 = *(_QWORD *)(a2 + 16);
        v11 = *(_QWORD *)(a2 + 24);
        sub_3D464(v10, v11, v9);
        *(_QWORD *)(a1 + 16) = v10;
        *(_QWORD *)(a1 + 24) = v11;
        *(_BYTE *)(a1 + 32) = v9;
      }
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      v22 = (id *)(a2 + 56);
      v23 = *(unsigned __int8 *)(a2 + 64);
      if (v23 == 255)
      {
        v25 = *v22;
        *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
        *(_QWORD *)(a1 + 56) = v25;
      }
      else
      {
        v24 = *v22;
        sub_3D47C(*v22, *(_BYTE *)(a2 + 64));
        *(_QWORD *)(a1 + 56) = v24;
        *(_BYTE *)(a1 + 64) = v23;
      }
      v26 = (id *)(a2 + 72);
      v27 = *(unsigned __int8 *)(a2 + 80);
      if (v27 == 255)
      {
        v29 = *v26;
        *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
        *(_QWORD *)(a1 + 72) = v29;
      }
      else
      {
        v28 = *v26;
        sub_3D47C(*v26, *(_BYTE *)(a2 + 80));
        *(_QWORD *)(a1 + 72) = v28;
        *(_BYTE *)(a1 + 80) = v27;
      }
      v30 = (id *)(a2 + 88);
      v31 = *(unsigned __int8 *)(a2 + 96);
      if (v31 == 255)
      {
        v33 = *v30;
        *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
        *(_QWORD *)(a1 + 88) = v33;
      }
      else
      {
        v32 = *v30;
        sub_3D47C(*v30, *(_BYTE *)(a2 + 96));
        *(_QWORD *)(a1 + 88) = v32;
        *(_BYTE *)(a1 + 96) = v31;
      }
      v34 = (id *)(a2 + 104);
      v35 = *(unsigned __int8 *)(a2 + 112);
      if (v35 == 255)
      {
        v37 = *v34;
        *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
        *(_QWORD *)(a1 + 104) = v37;
      }
      else
      {
        v36 = *v34;
        sub_3D47C(*v34, *(_BYTE *)(a2 + 112));
        *(_QWORD *)(a1 + 104) = v36;
        *(_BYTE *)(a1 + 112) = v35;
      }
      v38 = (id *)(a2 + 120);
      v39 = *(unsigned __int8 *)(a2 + 128);
      if (v39 == 255)
      {
        v41 = *v38;
        *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
        *(_QWORD *)(a1 + 120) = v41;
      }
      else
      {
        v40 = *v38;
        sub_3D47C(*v38, *(_BYTE *)(a2 + 128));
        *(_QWORD *)(a1 + 120) = v40;
        *(_BYTE *)(a1 + 128) = v39;
      }
      *(_BYTE *)(a1 + 129) = *(_BYTE *)(a2 + 129);
      v42 = v4[11];
      v43 = a1 + v42;
      v44 = a2 + v42;
      v45 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 16))(v43, v44, v45);
      v46 = v4[12];
      v47 = (_QWORD *)(a1 + v46);
      v48 = (_QWORD *)(a2 + v46);
      *v47 = *v48;
      v47[1] = v48[1];
      *(_BYTE *)(a1 + v4[13]) = *(_BYTE *)(a2 + v4[13]);
      *(_BYTE *)(a1 + v4[14]) = *(_BYTE *)(a2 + v4[14]);
      *(_BYTE *)(a1 + v4[15]) = *(_BYTE *)(a2 + v4[15]);
      v49 = v4[16];
      v50 = (_QWORD *)(a1 + v49);
      v51 = (_QWORD *)(a2 + v49);
      *v50 = *v51;
      v50[1] = v51[1];
      v52 = *(void (**)(uint64_t, _QWORD, uint64_t, int *))(v5 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v52(a1, 0, 1, v4);
      goto LABEL_68;
    }
LABEL_7:
    v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
    memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    goto LABEL_68;
  }
  if (v8)
  {
    sub_145D8(a1, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
    goto LABEL_7;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v13 = (__int128 *)(a1 + 16);
  v14 = (__int128 *)(a2 + 16);
  v15 = *(unsigned __int8 *)(a2 + 32);
  if (*(unsigned __int8 *)(a1 + 32) == 255)
  {
    if (v15 == 255)
    {
      v56 = *v14;
      *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
      *v13 = v56;
    }
    else
    {
      v53 = *(_QWORD *)(a2 + 16);
      v54 = *(_QWORD *)(a2 + 24);
      sub_3D464(v53, v54, *(_BYTE *)(a2 + 32));
      *(_QWORD *)(a1 + 16) = v53;
      *(_QWORD *)(a1 + 24) = v54;
      *(_BYTE *)(a1 + 32) = v15;
    }
  }
  else if (v15 == 255)
  {
    sub_3E43C(a1 + 16);
    v55 = *(_BYTE *)(a2 + 32);
    *v13 = *v14;
    *(_BYTE *)(a1 + 32) = v55;
  }
  else
  {
    v16 = *(_QWORD *)(a2 + 16);
    v17 = *(_QWORD *)(a2 + 24);
    sub_3D464(v16, v17, *(_BYTE *)(a2 + 32));
    v18 = *(_QWORD *)(a1 + 16);
    v19 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 16) = v16;
    *(_QWORD *)(a1 + 24) = v17;
    v20 = *(_BYTE *)(a1 + 32);
    *(_BYTE *)(a1 + 32) = v15;
    sub_3B5BC(v18, v19, v20);
  }
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v57 = (id *)(a1 + 56);
  v58 = (id *)(a2 + 56);
  v59 = *(unsigned __int8 *)(a2 + 64);
  if (*(unsigned __int8 *)(a1 + 64) == 255)
  {
    if (v59 == 255)
    {
      v65 = *v58;
      *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
      *v57 = v65;
    }
    else
    {
      v63 = *v58;
      sub_3D47C(*v58, *(_BYTE *)(a2 + 64));
      *(_QWORD *)(a1 + 56) = v63;
      *(_BYTE *)(a1 + 64) = v59;
    }
  }
  else if (v59 == 255)
  {
    sub_3E470(a1 + 56);
    v64 = *(_BYTE *)(a2 + 64);
    *v57 = *v58;
    *(_BYTE *)(a1 + 64) = v64;
  }
  else
  {
    v60 = *v58;
    sub_3D47C(*v58, *(_BYTE *)(a2 + 64));
    v61 = *(void **)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v60;
    v62 = *(_BYTE *)(a1 + 64);
    *(_BYTE *)(a1 + 64) = v59;
    sub_3D624(v61, v62);
  }
  v66 = (id *)(a1 + 72);
  v67 = (id *)(a2 + 72);
  v68 = *(unsigned __int8 *)(a2 + 80);
  if (*(unsigned __int8 *)(a1 + 80) == 255)
  {
    if (v68 == 255)
    {
      v74 = *v67;
      *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
      *v66 = v74;
    }
    else
    {
      v72 = *v67;
      sub_3D47C(*v67, *(_BYTE *)(a2 + 80));
      *(_QWORD *)(a1 + 72) = v72;
      *(_BYTE *)(a1 + 80) = v68;
    }
  }
  else if (v68 == 255)
  {
    sub_3E470(a1 + 72);
    v73 = *(_BYTE *)(a2 + 80);
    *v66 = *v67;
    *(_BYTE *)(a1 + 80) = v73;
  }
  else
  {
    v69 = *v67;
    sub_3D47C(*v67, *(_BYTE *)(a2 + 80));
    v70 = *(void **)(a1 + 72);
    *(_QWORD *)(a1 + 72) = v69;
    v71 = *(_BYTE *)(a1 + 80);
    *(_BYTE *)(a1 + 80) = v68;
    sub_3D624(v70, v71);
  }
  v75 = (id *)(a1 + 88);
  v76 = (id *)(a2 + 88);
  v77 = *(unsigned __int8 *)(a2 + 96);
  if (*(unsigned __int8 *)(a1 + 96) == 255)
  {
    if (v77 == 255)
    {
      v83 = *v76;
      *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
      *v75 = v83;
    }
    else
    {
      v81 = *v76;
      sub_3D47C(*v76, *(_BYTE *)(a2 + 96));
      *(_QWORD *)(a1 + 88) = v81;
      *(_BYTE *)(a1 + 96) = v77;
    }
  }
  else if (v77 == 255)
  {
    sub_3E470(a1 + 88);
    v82 = *(_BYTE *)(a2 + 96);
    *v75 = *v76;
    *(_BYTE *)(a1 + 96) = v82;
  }
  else
  {
    v78 = *v76;
    sub_3D47C(*v76, *(_BYTE *)(a2 + 96));
    v79 = *(void **)(a1 + 88);
    *(_QWORD *)(a1 + 88) = v78;
    v80 = *(_BYTE *)(a1 + 96);
    *(_BYTE *)(a1 + 96) = v77;
    sub_3D624(v79, v80);
  }
  v84 = (id *)(a1 + 104);
  v85 = (id *)(a2 + 104);
  v86 = *(unsigned __int8 *)(a2 + 112);
  if (*(unsigned __int8 *)(a1 + 112) == 255)
  {
    if (v86 == 255)
    {
      v92 = *v85;
      *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
      *v84 = v92;
    }
    else
    {
      v90 = *v85;
      sub_3D47C(*v85, *(_BYTE *)(a2 + 112));
      *(_QWORD *)(a1 + 104) = v90;
      *(_BYTE *)(a1 + 112) = v86;
    }
  }
  else if (v86 == 255)
  {
    sub_3E470(a1 + 104);
    v91 = *(_BYTE *)(a2 + 112);
    *v84 = *v85;
    *(_BYTE *)(a1 + 112) = v91;
  }
  else
  {
    v87 = *v85;
    sub_3D47C(*v85, *(_BYTE *)(a2 + 112));
    v88 = *(void **)(a1 + 104);
    *(_QWORD *)(a1 + 104) = v87;
    v89 = *(_BYTE *)(a1 + 112);
    *(_BYTE *)(a1 + 112) = v86;
    sub_3D624(v88, v89);
  }
  v93 = (id *)(a1 + 120);
  v94 = (id *)(a2 + 120);
  v95 = *(unsigned __int8 *)(a2 + 128);
  if (*(unsigned __int8 *)(a1 + 128) == 255)
  {
    if (v95 == 255)
    {
      v101 = *v94;
      *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
      *v93 = v101;
    }
    else
    {
      v99 = *v94;
      sub_3D47C(*v94, *(_BYTE *)(a2 + 128));
      *(_QWORD *)(a1 + 120) = v99;
      *(_BYTE *)(a1 + 128) = v95;
    }
  }
  else if (v95 == 255)
  {
    sub_3E470(a1 + 120);
    v100 = *(_BYTE *)(a2 + 128);
    *v93 = *v94;
    *(_BYTE *)(a1 + 128) = v100;
  }
  else
  {
    v96 = *v94;
    sub_3D47C(*v94, *(_BYTE *)(a2 + 128));
    v97 = *(void **)(a1 + 120);
    *(_QWORD *)(a1 + 120) = v96;
    v98 = *(_BYTE *)(a1 + 128);
    *(_BYTE *)(a1 + 128) = v95;
    sub_3D624(v97, v98);
  }
  *(_BYTE *)(a1 + 129) = *(_BYTE *)(a2 + 129);
  v102 = v4[11];
  v103 = a1 + v102;
  v104 = a2 + v102;
  v105 = type metadata accessor for ArtworkCrop(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v105 - 8) + 24))(v103, v104, v105);
  v106 = v4[12];
  v107 = (_QWORD *)(a1 + v106);
  v108 = (_QWORD *)(a2 + v106);
  *v107 = *v108;
  v107[1] = v108[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + v4[13]) = *(_BYTE *)(a2 + v4[13]);
  *(_BYTE *)(a1 + v4[14]) = *(_BYTE *)(a2 + v4[14]);
  *(_BYTE *)(a1 + v4[15]) = *(_BYTE *)(a2 + v4[15]);
  v109 = v4[16];
  v110 = (_QWORD *)(a1 + v109);
  v111 = (_QWORD *)(a2 + v109);
  *v110 = *v111;
  v110[1] = v111[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_68:
  v112 = (int *)type metadata accessor for Artwork.Configuration(0);
  v113 = v112[5];
  v114 = a1 + v113;
  v115 = a2 + v113;
  v116 = *(_BYTE *)(v115 + 16);
  *(_OWORD *)v114 = *(_OWORD *)v115;
  *(_BYTE *)(v114 + 16) = v116;
  v117 = v112[6];
  v118 = (_QWORD *)(a1 + v117);
  v119 = (_QWORD *)(a2 + v117);
  *v118 = *v119;
  v118[1] = v119[1];
  v120 = v112[7];
  v121 = (void *)(a1 + v120);
  v122 = (void *)(a2 + v120);
  v123 = type metadata accessor for CropCode(0);
  v124 = *(_QWORD *)(v123 - 8);
  v125 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v124 + 48);
  v126 = v125(v121, 1, v123);
  v127 = v125(v122, 1, v123);
  if (!v126)
  {
    if (!v127)
    {
      (*(void (**)(void *, void *, uint64_t))(v124 + 24))(v121, v122, v123);
      goto LABEL_74;
    }
    (*(void (**)(void *, uint64_t))(v124 + 8))(v121, v123);
    goto LABEL_73;
  }
  if (v127)
  {
LABEL_73:
    v128 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7D58);
    memcpy(v121, v122, *(_QWORD *)(*(_QWORD *)(v128 - 8) + 64));
    goto LABEL_74;
  }
  (*(void (**)(void *, void *, uint64_t))(v124 + 16))(v121, v122, v123);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v124 + 56))(v121, 0, 1, v123);
LABEL_74:
  *(_BYTE *)(a1 + v112[8]) = *(_BYTE *)(a2 + v112[8]);
  return a1;
}

_OWORD *sub_2AE53C(_OWORD *a1, _OWORD *a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = (int *)type metadata accessor for ArtworkModel(0);
  v5 = *((_QWORD *)v4 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v5 + 48))(a2, 1, v4))
  {
    v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    *((_BYTE *)a1 + 32) = *((_BYTE *)a2 + 32);
    *(_OWORD *)((char *)a1 + 40) = *(_OWORD *)((char *)a2 + 40);
    *((_QWORD *)a1 + 7) = *((_QWORD *)a2 + 7);
    *((_BYTE *)a1 + 64) = *((_BYTE *)a2 + 64);
    *(_OWORD *)((char *)a1 + 113) = *(_OWORD *)((char *)a2 + 113);
    *(_OWORD *)((char *)a1 + 104) = *(_OWORD *)((char *)a2 + 104);
    *(_OWORD *)((char *)a1 + 88) = *(_OWORD *)((char *)a2 + 88);
    *(_OWORD *)((char *)a1 + 72) = *(_OWORD *)((char *)a2 + 72);
    *((_BYTE *)a1 + 129) = *((_BYTE *)a2 + 129);
    v8 = v4[11];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for ArtworkCrop(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
    *(_OWORD *)((char *)a1 + v4[12]) = *(_OWORD *)((char *)a2 + v4[12]);
    *((_BYTE *)a1 + v4[13]) = *((_BYTE *)a2 + v4[13]);
    *((_BYTE *)a1 + v4[14]) = *((_BYTE *)a2 + v4[14]);
    *((_BYTE *)a1 + v4[15]) = *((_BYTE *)a2 + v4[15]);
    *(_OWORD *)((char *)a1 + v4[16]) = *(_OWORD *)((char *)a2 + v4[16]);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v5 + 56))(a1, 0, 1, v4);
  }
  v12 = (int *)type metadata accessor for Artwork.Configuration(0);
  v13 = v12[5];
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  *(_OWORD *)v14 = *(_OWORD *)v15;
  v14[16] = v15[16];
  *(_OWORD *)((char *)a1 + v12[6]) = *(_OWORD *)((char *)a2 + v12[6]);
  v16 = v12[7];
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = type metadata accessor for CropCode(0);
  v20 = *(_QWORD *)(v19 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
  {
    v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7D58);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  }
  *((_BYTE *)a1 + v12[8]) = *((_BYTE *)a2 + v12[8]);
  return a1;
}

uint64_t sub_2AE758(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, int *);
  int v7;
  int v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(void *, uint64_t, uint64_t);
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v29;
  _OWORD *v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  int v36;
  int v37;
  void *v38;
  _QWORD *v39;
  int v40;
  int v41;
  void *v42;
  _QWORD *v43;
  int v44;
  int v45;
  void *v46;
  _QWORD *v47;
  int v48;
  int v49;
  void *v50;
  _QWORD *v51;
  int v52;
  int v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;

  v4 = (int *)type metadata accessor for ArtworkModel(0);
  v5 = *((_QWORD *)v4 - 1);
  v6 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v5 + 48);
  v7 = v6(a1, 1, v4);
  v8 = v6(a2, 1, v4);
  if (v7)
  {
    if (!v8)
    {
      v9 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v9;
      *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
      *(_OWORD *)(a1 + 113) = *(_OWORD *)(a2 + 113);
      *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
      *(_BYTE *)(a1 + 129) = *(_BYTE *)(a2 + 129);
      v10 = v4[11];
      v11 = a1 + v10;
      v12 = a2 + v10;
      v13 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
      *(_OWORD *)(a1 + v4[12]) = *(_OWORD *)(a2 + v4[12]);
      *(_BYTE *)(a1 + v4[13]) = *(_BYTE *)(a2 + v4[13]);
      *(_BYTE *)(a1 + v4[14]) = *(_BYTE *)(a2 + v4[14]);
      *(_BYTE *)(a1 + v4[15]) = *(_BYTE *)(a2 + v4[15]);
      *(_OWORD *)(a1 + v4[16]) = *(_OWORD *)(a2 + v4[16]);
      (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v5 + 56))(a1, 0, 1, v4);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v8)
  {
    sub_145D8(a1, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
LABEL_6:
    v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
    memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  v29 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v29;
  swift_bridgeObjectRelease();
  v30 = (_OWORD *)(a2 + 16);
  v31 = *(unsigned __int8 *)(a1 + 32);
  if (v31 != 255)
  {
    v32 = *(unsigned __int8 *)(a2 + 32);
    if (v32 != 255)
    {
      v33 = *(_QWORD *)(a1 + 16);
      v34 = *(_QWORD *)(a1 + 24);
      *(_OWORD *)(a1 + 16) = *v30;
      *(_BYTE *)(a1 + 32) = v32;
      sub_3B5BC(v33, v34, v31);
      goto LABEL_20;
    }
    sub_3E43C(a1 + 16);
  }
  *(_OWORD *)(a1 + 16) = *v30;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
LABEL_20:
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v35 = (_QWORD *)(a2 + 56);
  v36 = *(unsigned __int8 *)(a1 + 64);
  if (v36 != 255)
  {
    v37 = *(unsigned __int8 *)(a2 + 64);
    if (v37 != 255)
    {
      v38 = *(void **)(a1 + 56);
      *(_QWORD *)(a1 + 56) = *v35;
      *(_BYTE *)(a1 + 64) = v37;
      sub_3D624(v38, v36);
      goto LABEL_25;
    }
    sub_3E470(a1 + 56);
  }
  *(_QWORD *)(a1 + 56) = *v35;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
LABEL_25:
  v39 = (_QWORD *)(a2 + 72);
  v40 = *(unsigned __int8 *)(a1 + 80);
  if (v40 != 255)
  {
    v41 = *(unsigned __int8 *)(a2 + 80);
    if (v41 != 255)
    {
      v42 = *(void **)(a1 + 72);
      *(_QWORD *)(a1 + 72) = *v39;
      *(_BYTE *)(a1 + 80) = v41;
      sub_3D624(v42, v40);
      goto LABEL_30;
    }
    sub_3E470(a1 + 72);
  }
  *(_QWORD *)(a1 + 72) = *v39;
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
LABEL_30:
  v43 = (_QWORD *)(a2 + 88);
  v44 = *(unsigned __int8 *)(a1 + 96);
  if (v44 != 255)
  {
    v45 = *(unsigned __int8 *)(a2 + 96);
    if (v45 != 255)
    {
      v46 = *(void **)(a1 + 88);
      *(_QWORD *)(a1 + 88) = *v43;
      *(_BYTE *)(a1 + 96) = v45;
      sub_3D624(v46, v44);
      goto LABEL_35;
    }
    sub_3E470(a1 + 88);
  }
  *(_QWORD *)(a1 + 88) = *v43;
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
LABEL_35:
  v47 = (_QWORD *)(a2 + 104);
  v48 = *(unsigned __int8 *)(a1 + 112);
  if (v48 != 255)
  {
    v49 = *(unsigned __int8 *)(a2 + 112);
    if (v49 != 255)
    {
      v50 = *(void **)(a1 + 104);
      *(_QWORD *)(a1 + 104) = *v47;
      *(_BYTE *)(a1 + 112) = v49;
      sub_3D624(v50, v48);
      goto LABEL_40;
    }
    sub_3E470(a1 + 104);
  }
  *(_QWORD *)(a1 + 104) = *v47;
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
LABEL_40:
  v51 = (_QWORD *)(a2 + 120);
  v52 = *(unsigned __int8 *)(a1 + 128);
  if (v52 == 255)
  {
LABEL_44:
    *(_QWORD *)(a1 + 120) = *v51;
    *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
    goto LABEL_45;
  }
  v53 = *(unsigned __int8 *)(a2 + 128);
  if (v53 == 255)
  {
    sub_3E470(a1 + 120);
    goto LABEL_44;
  }
  v54 = *(void **)(a1 + 120);
  *(_QWORD *)(a1 + 120) = *v51;
  *(_BYTE *)(a1 + 128) = v53;
  sub_3D624(v54, v52);
LABEL_45:
  *(_BYTE *)(a1 + 129) = *(_BYTE *)(a2 + 129);
  v55 = v4[11];
  v56 = a1 + v55;
  v57 = a2 + v55;
  v58 = type metadata accessor for ArtworkCrop(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 40))(v56, v57, v58);
  v59 = v4[12];
  v60 = (_QWORD *)(a1 + v59);
  v61 = (uint64_t *)(a2 + v59);
  v63 = *v61;
  v62 = v61[1];
  *v60 = v63;
  v60[1] = v62;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + v4[13]) = *(_BYTE *)(a2 + v4[13]);
  *(_BYTE *)(a1 + v4[14]) = *(_BYTE *)(a2 + v4[14]);
  *(_BYTE *)(a1 + v4[15]) = *(_BYTE *)(a2 + v4[15]);
  v64 = v4[16];
  v65 = (_QWORD *)(a1 + v64);
  v66 = (uint64_t *)(a2 + v64);
  v68 = *v66;
  v67 = v66[1];
  *v65 = v68;
  v65[1] = v67;
  swift_bridgeObjectRelease();
LABEL_7:
  v15 = (int *)type metadata accessor for Artwork.Configuration(0);
  v16 = v15[5];
  v17 = a1 + v16;
  v18 = a2 + v16;
  *(_OWORD *)v17 = *(_OWORD *)v18;
  *(_BYTE *)(v17 + 16) = *(_BYTE *)(v18 + 16);
  *(_OWORD *)(a1 + v15[6]) = *(_OWORD *)(a2 + v15[6]);
  v19 = v15[7];
  v20 = (void *)(a1 + v19);
  v21 = (void *)(a2 + v19);
  v22 = type metadata accessor for CropCode(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v23 + 48);
  v25 = v24(v20, 1, v22);
  v26 = v24(v21, 1, v22);
  if (!v25)
  {
    if (!v26)
    {
      (*(void (**)(void *, void *, uint64_t))(v23 + 40))(v20, v21, v22);
      goto LABEL_13;
    }
    (*(void (**)(void *, uint64_t))(v23 + 8))(v20, v22);
    goto LABEL_12;
  }
  if (v26)
  {
LABEL_12:
    v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7D58);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v23 + 32))(v20, v21, v22);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
LABEL_13:
  *(_BYTE *)(a1 + v15[8]) = *(_BYTE *)(a2 + v15[8]);
  return a1;
}

uint64_t sub_2AEC78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_2AEC84);
}

uint64_t sub_2AEC84(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Artwork.Configuration(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_2AECC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_2AECCC);
}

uint64_t sub_2AECCC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Artwork.Configuration(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_2AED0C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for Artwork.Configuration(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t *sub_2AED74(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  id *v15;
  int v16;
  id v17;
  id *v18;
  int v19;
  id v20;
  id *v21;
  int v22;
  id v23;
  id *v24;
  int v25;
  id v26;
  id *v27;
  int v28;
  id v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  void (*v42)(uint64_t *, _QWORD, uint64_t, int *);
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  __int128 v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = (int *)type metadata accessor for ArtworkModel(0);
    v8 = *((_QWORD *)v7 - 1);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, int *))(v8 + 48))(a2, 1, v7))
    {
      v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      v11 = a2[1];
      *a1 = *a2;
      a1[1] = v11;
      v12 = *((unsigned __int8 *)a2 + 32);
      swift_bridgeObjectRetain();
      if (v12 == 255)
      {
        *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
        *((_BYTE *)a1 + 32) = *((_BYTE *)a2 + 32);
      }
      else
      {
        v13 = a2[2];
        v14 = a2[3];
        sub_3D464(v13, v14, v12);
        a1[2] = v13;
        a1[3] = v14;
        *((_BYTE *)a1 + 32) = v12;
      }
      *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 5);
      v15 = (id *)(a2 + 7);
      v16 = *((unsigned __int8 *)a2 + 64);
      if (v16 == 255)
      {
        a1[7] = (uint64_t)*v15;
        *((_BYTE *)a1 + 64) = *((_BYTE *)a2 + 64);
      }
      else
      {
        v17 = *v15;
        sub_3D47C(*v15, *((_BYTE *)a2 + 64));
        a1[7] = (uint64_t)v17;
        *((_BYTE *)a1 + 64) = v16;
      }
      v18 = (id *)(a2 + 9);
      v19 = *((unsigned __int8 *)a2 + 80);
      if (v19 == 255)
      {
        a1[9] = (uint64_t)*v18;
        *((_BYTE *)a1 + 80) = *((_BYTE *)a2 + 80);
      }
      else
      {
        v20 = *v18;
        sub_3D47C(*v18, *((_BYTE *)a2 + 80));
        a1[9] = (uint64_t)v20;
        *((_BYTE *)a1 + 80) = v19;
      }
      v21 = (id *)(a2 + 11);
      v22 = *((unsigned __int8 *)a2 + 96);
      if (v22 == 255)
      {
        a1[11] = (uint64_t)*v21;
        *((_BYTE *)a1 + 96) = *((_BYTE *)a2 + 96);
      }
      else
      {
        v23 = *v21;
        sub_3D47C(*v21, *((_BYTE *)a2 + 96));
        a1[11] = (uint64_t)v23;
        *((_BYTE *)a1 + 96) = v22;
      }
      v24 = (id *)(a2 + 13);
      v25 = *((unsigned __int8 *)a2 + 112);
      if (v25 == 255)
      {
        a1[13] = (uint64_t)*v24;
        *((_BYTE *)a1 + 112) = *((_BYTE *)a2 + 112);
      }
      else
      {
        v26 = *v24;
        sub_3D47C(*v24, *((_BYTE *)a2 + 112));
        a1[13] = (uint64_t)v26;
        *((_BYTE *)a1 + 112) = v25;
      }
      v27 = (id *)(a2 + 15);
      v28 = *((unsigned __int8 *)a2 + 128);
      if (v28 == 255)
      {
        a1[15] = (uint64_t)*v27;
        *((_BYTE *)a1 + 128) = *((_BYTE *)a2 + 128);
      }
      else
      {
        v29 = *v27;
        sub_3D47C(*v27, *((_BYTE *)a2 + 128));
        a1[15] = (uint64_t)v29;
        *((_BYTE *)a1 + 128) = v28;
      }
      *((_BYTE *)a1 + 129) = *((_BYTE *)a2 + 129);
      v30 = v7[11];
      v31 = (char *)a1 + v30;
      v32 = (char *)a2 + v30;
      v33 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v31, v32, v33);
      v34 = v7[12];
      v35 = (uint64_t *)((char *)a1 + v34);
      v36 = (uint64_t *)((char *)a2 + v34);
      v37 = v36[1];
      *v35 = *v36;
      v35[1] = v37;
      *((_BYTE *)a1 + v7[13]) = *((_BYTE *)a2 + v7[13]);
      *((_BYTE *)a1 + v7[14]) = *((_BYTE *)a2 + v7[14]);
      *((_BYTE *)a1 + v7[15]) = *((_BYTE *)a2 + v7[15]);
      v38 = v7[16];
      v39 = (uint64_t *)((char *)a1 + v38);
      v40 = (uint64_t *)((char *)a2 + v38);
      v41 = v40[1];
      *v39 = *v40;
      v39[1] = v41;
      v42 = *(void (**)(uint64_t *, _QWORD, uint64_t, int *))(v8 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v42(a1, 0, 1, v7);
    }
    v43 = a3[5];
    v44 = a3[6];
    v45 = (char *)a1 + v43;
    v46 = (char *)a2 + v43;
    *(_OWORD *)v45 = *(_OWORD *)v46;
    v47 = *(_OWORD *)((char *)a2 + v44);
    v45[16] = v46[16];
    *(_OWORD *)((char *)a1 + v44) = v47;
    v48 = a3[7];
    v49 = (char *)a1 + v48;
    v50 = (char *)a2 + v48;
    v51 = type metadata accessor for CropCode(0);
    v52 = *(_QWORD *)(v51 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v50, 1, v51))
    {
      v53 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7D58);
      memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v52 + 16))(v49, v50, v51);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v52 + 56))(v49, 0, 1, v51);
    }
    *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  }
  return a1;
}

uint64_t sub_2AF11C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;

  v4 = type metadata accessor for ArtworkModel(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, 1, v4))
  {
    swift_bridgeObjectRelease();
    v5 = *(unsigned __int8 *)(a1 + 32);
    if (v5 != 255)
      sub_3B5BC(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), v5);
    v6 = *(unsigned __int8 *)(a1 + 64);
    if (v6 != 255)
      sub_3D624(*(id *)(a1 + 56), v6);
    v7 = *(unsigned __int8 *)(a1 + 80);
    if (v7 != 255)
      sub_3D624(*(id *)(a1 + 72), v7);
    v8 = *(unsigned __int8 *)(a1 + 96);
    if (v8 != 255)
      sub_3D624(*(id *)(a1 + 88), v8);
    v9 = *(unsigned __int8 *)(a1 + 112);
    if (v9 != 255)
      sub_3D624(*(id *)(a1 + 104), v9);
    v10 = *(unsigned __int8 *)(a1 + 128);
    if (v10 != 255)
      sub_3D624(*(id *)(a1 + 120), v10);
    v11 = a1 + *(int *)(v4 + 44);
    v12 = type metadata accessor for ArtworkCrop(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v13 = a1 + *(int *)(a2 + 28);
  v14 = type metadata accessor for CropCode(0);
  v15 = *(_QWORD *)(v14 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
  return result;
}

_QWORD *sub_2AF27C(_QWORD *a1, _QWORD *a2, int *a3)
{
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  id *v13;
  int v14;
  id v15;
  id *v16;
  int v17;
  id v18;
  id *v19;
  int v20;
  id v21;
  id *v22;
  int v23;
  id v24;
  id *v25;
  int v26;
  id v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  void (*v40)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  __int128 v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v6 = (int *)type metadata accessor for ArtworkModel(0);
  v7 = *((_QWORD *)v6 - 1);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    v9 = a2[1];
    *a1 = *a2;
    a1[1] = v9;
    v10 = *((unsigned __int8 *)a2 + 32);
    swift_bridgeObjectRetain();
    if (v10 == 255)
    {
      *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
      *((_BYTE *)a1 + 32) = *((_BYTE *)a2 + 32);
    }
    else
    {
      v11 = a2[2];
      v12 = a2[3];
      sub_3D464(v11, v12, v10);
      a1[2] = v11;
      a1[3] = v12;
      *((_BYTE *)a1 + 32) = v10;
    }
    *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 5);
    v13 = (id *)(a2 + 7);
    v14 = *((unsigned __int8 *)a2 + 64);
    if (v14 == 255)
    {
      a1[7] = *v13;
      *((_BYTE *)a1 + 64) = *((_BYTE *)a2 + 64);
    }
    else
    {
      v15 = *v13;
      sub_3D47C(*v13, *((_BYTE *)a2 + 64));
      a1[7] = v15;
      *((_BYTE *)a1 + 64) = v14;
    }
    v16 = (id *)(a2 + 9);
    v17 = *((unsigned __int8 *)a2 + 80);
    if (v17 == 255)
    {
      a1[9] = *v16;
      *((_BYTE *)a1 + 80) = *((_BYTE *)a2 + 80);
    }
    else
    {
      v18 = *v16;
      sub_3D47C(*v16, *((_BYTE *)a2 + 80));
      a1[9] = v18;
      *((_BYTE *)a1 + 80) = v17;
    }
    v19 = (id *)(a2 + 11);
    v20 = *((unsigned __int8 *)a2 + 96);
    if (v20 == 255)
    {
      a1[11] = *v19;
      *((_BYTE *)a1 + 96) = *((_BYTE *)a2 + 96);
    }
    else
    {
      v21 = *v19;
      sub_3D47C(*v19, *((_BYTE *)a2 + 96));
      a1[11] = v21;
      *((_BYTE *)a1 + 96) = v20;
    }
    v22 = (id *)(a2 + 13);
    v23 = *((unsigned __int8 *)a2 + 112);
    if (v23 == 255)
    {
      a1[13] = *v22;
      *((_BYTE *)a1 + 112) = *((_BYTE *)a2 + 112);
    }
    else
    {
      v24 = *v22;
      sub_3D47C(*v22, *((_BYTE *)a2 + 112));
      a1[13] = v24;
      *((_BYTE *)a1 + 112) = v23;
    }
    v25 = (id *)(a2 + 15);
    v26 = *((unsigned __int8 *)a2 + 128);
    if (v26 == 255)
    {
      a1[15] = *v25;
      *((_BYTE *)a1 + 128) = *((_BYTE *)a2 + 128);
    }
    else
    {
      v27 = *v25;
      sub_3D47C(*v25, *((_BYTE *)a2 + 128));
      a1[15] = v27;
      *((_BYTE *)a1 + 128) = v26;
    }
    *((_BYTE *)a1 + 129) = *((_BYTE *)a2 + 129);
    v28 = v6[11];
    v29 = (char *)a1 + v28;
    v30 = (char *)a2 + v28;
    v31 = type metadata accessor for ArtworkCrop(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v29, v30, v31);
    v32 = v6[12];
    v33 = (_QWORD *)((char *)a1 + v32);
    v34 = (_QWORD *)((char *)a2 + v32);
    v35 = v34[1];
    *v33 = *v34;
    v33[1] = v35;
    *((_BYTE *)a1 + v6[13]) = *((_BYTE *)a2 + v6[13]);
    *((_BYTE *)a1 + v6[14]) = *((_BYTE *)a2 + v6[14]);
    *((_BYTE *)a1 + v6[15]) = *((_BYTE *)a2 + v6[15]);
    v36 = v6[16];
    v37 = (_QWORD *)((char *)a1 + v36);
    v38 = (_QWORD *)((char *)a2 + v36);
    v39 = v38[1];
    *v37 = *v38;
    v37[1] = v39;
    v40 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v7 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v40(a1, 0, 1, v6);
  }
  v41 = a3[5];
  v42 = a3[6];
  v43 = (char *)a1 + v41;
  v44 = (char *)a2 + v41;
  *(_OWORD *)v43 = *(_OWORD *)v44;
  v45 = *(_OWORD *)((char *)a2 + v42);
  v43[16] = v44[16];
  *(_OWORD *)((char *)a1 + v42) = v45;
  v46 = a3[7];
  v47 = (char *)a1 + v46;
  v48 = (char *)a2 + v46;
  v49 = type metadata accessor for CropCode(0);
  v50 = *(_QWORD *)(v49 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48))(v48, 1, v49))
  {
    v51 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7D58);
    memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v50 + 16))(v47, v48, v49);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v50 + 56))(v47, 0, 1, v49);
  }
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  return a1;
}

uint64_t sub_2AF5F8(uint64_t a1, uint64_t a2, int *a3)
{
  int *v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, int *);
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 *v15;
  __int128 *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  __int128 v23;
  id *v24;
  int v25;
  id v26;
  id v27;
  id *v28;
  int v29;
  id v30;
  id v31;
  id *v32;
  int v33;
  id v34;
  id v35;
  id *v36;
  int v37;
  id v38;
  id v39;
  id *v40;
  int v41;
  id v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  void (*v54)(uint64_t, _QWORD, uint64_t, int *);
  uint64_t v55;
  uint64_t v56;
  char v57;
  __int128 v58;
  id *v59;
  id *v60;
  int v61;
  id v62;
  void *v63;
  char v64;
  id v65;
  char v66;
  id v67;
  id *v68;
  id *v69;
  int v70;
  id v71;
  void *v72;
  char v73;
  id v74;
  char v75;
  id v76;
  id *v77;
  id *v78;
  int v79;
  id v80;
  void *v81;
  char v82;
  id v83;
  char v84;
  id v85;
  id *v86;
  id *v87;
  int v88;
  id v89;
  void *v90;
  char v91;
  id v92;
  char v93;
  id v94;
  id *v95;
  id *v96;
  int v97;
  id v98;
  void *v99;
  char v100;
  id v101;
  char v102;
  id v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  _QWORD *v110;
  uint64_t v111;
  _QWORD *v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  __int128 *v116;
  __int128 v117;
  uint64_t v118;
  _QWORD *v119;
  _QWORD *v120;
  uint64_t v121;
  void *v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t (*v126)(void *, uint64_t, uint64_t);
  int v127;
  int v128;
  uint64_t v129;

  v6 = (int *)type metadata accessor for ArtworkModel(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      v11 = *(unsigned __int8 *)(a2 + 32);
      swift_bridgeObjectRetain();
      if (v11 == 255)
      {
        v23 = *(_OWORD *)(a2 + 16);
        *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
        *(_OWORD *)(a1 + 16) = v23;
      }
      else
      {
        v12 = *(_QWORD *)(a2 + 16);
        v13 = *(_QWORD *)(a2 + 24);
        sub_3D464(v12, v13, v11);
        *(_QWORD *)(a1 + 16) = v12;
        *(_QWORD *)(a1 + 24) = v13;
        *(_BYTE *)(a1 + 32) = v11;
      }
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      v24 = (id *)(a2 + 56);
      v25 = *(unsigned __int8 *)(a2 + 64);
      if (v25 == 255)
      {
        v27 = *v24;
        *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
        *(_QWORD *)(a1 + 56) = v27;
      }
      else
      {
        v26 = *v24;
        sub_3D47C(*v24, *(_BYTE *)(a2 + 64));
        *(_QWORD *)(a1 + 56) = v26;
        *(_BYTE *)(a1 + 64) = v25;
      }
      v28 = (id *)(a2 + 72);
      v29 = *(unsigned __int8 *)(a2 + 80);
      if (v29 == 255)
      {
        v31 = *v28;
        *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
        *(_QWORD *)(a1 + 72) = v31;
      }
      else
      {
        v30 = *v28;
        sub_3D47C(*v28, *(_BYTE *)(a2 + 80));
        *(_QWORD *)(a1 + 72) = v30;
        *(_BYTE *)(a1 + 80) = v29;
      }
      v32 = (id *)(a2 + 88);
      v33 = *(unsigned __int8 *)(a2 + 96);
      if (v33 == 255)
      {
        v35 = *v32;
        *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
        *(_QWORD *)(a1 + 88) = v35;
      }
      else
      {
        v34 = *v32;
        sub_3D47C(*v32, *(_BYTE *)(a2 + 96));
        *(_QWORD *)(a1 + 88) = v34;
        *(_BYTE *)(a1 + 96) = v33;
      }
      v36 = (id *)(a2 + 104);
      v37 = *(unsigned __int8 *)(a2 + 112);
      if (v37 == 255)
      {
        v39 = *v36;
        *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
        *(_QWORD *)(a1 + 104) = v39;
      }
      else
      {
        v38 = *v36;
        sub_3D47C(*v36, *(_BYTE *)(a2 + 112));
        *(_QWORD *)(a1 + 104) = v38;
        *(_BYTE *)(a1 + 112) = v37;
      }
      v40 = (id *)(a2 + 120);
      v41 = *(unsigned __int8 *)(a2 + 128);
      if (v41 == 255)
      {
        v43 = *v40;
        *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
        *(_QWORD *)(a1 + 120) = v43;
      }
      else
      {
        v42 = *v40;
        sub_3D47C(*v40, *(_BYTE *)(a2 + 128));
        *(_QWORD *)(a1 + 120) = v42;
        *(_BYTE *)(a1 + 128) = v41;
      }
      *(_BYTE *)(a1 + 129) = *(_BYTE *)(a2 + 129);
      v44 = v6[11];
      v45 = a1 + v44;
      v46 = a2 + v44;
      v47 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 16))(v45, v46, v47);
      v48 = v6[12];
      v49 = (_QWORD *)(a1 + v48);
      v50 = (_QWORD *)(a2 + v48);
      *v49 = *v50;
      v49[1] = v50[1];
      *(_BYTE *)(a1 + v6[13]) = *(_BYTE *)(a2 + v6[13]);
      *(_BYTE *)(a1 + v6[14]) = *(_BYTE *)(a2 + v6[14]);
      *(_BYTE *)(a1 + v6[15]) = *(_BYTE *)(a2 + v6[15]);
      v51 = v6[16];
      v52 = (_QWORD *)(a1 + v51);
      v53 = (_QWORD *)(a2 + v51);
      *v52 = *v53;
      v52[1] = v53[1];
      v54 = *(void (**)(uint64_t, _QWORD, uint64_t, int *))(v7 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v54(a1, 0, 1, v6);
      goto LABEL_68;
    }
LABEL_7:
    v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
    memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_68;
  }
  if (v10)
  {
    sub_145D8(a1, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
    goto LABEL_7;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v15 = (__int128 *)(a1 + 16);
  v16 = (__int128 *)(a2 + 16);
  v17 = *(unsigned __int8 *)(a2 + 32);
  if (*(unsigned __int8 *)(a1 + 32) == 255)
  {
    if (v17 == 255)
    {
      v58 = *v16;
      *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
      *v15 = v58;
    }
    else
    {
      v55 = *(_QWORD *)(a2 + 16);
      v56 = *(_QWORD *)(a2 + 24);
      sub_3D464(v55, v56, *(_BYTE *)(a2 + 32));
      *(_QWORD *)(a1 + 16) = v55;
      *(_QWORD *)(a1 + 24) = v56;
      *(_BYTE *)(a1 + 32) = v17;
    }
  }
  else if (v17 == 255)
  {
    sub_3E43C(a1 + 16);
    v57 = *(_BYTE *)(a2 + 32);
    *v15 = *v16;
    *(_BYTE *)(a1 + 32) = v57;
  }
  else
  {
    v18 = *(_QWORD *)(a2 + 16);
    v19 = *(_QWORD *)(a2 + 24);
    sub_3D464(v18, v19, *(_BYTE *)(a2 + 32));
    v20 = *(_QWORD *)(a1 + 16);
    v21 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 16) = v18;
    *(_QWORD *)(a1 + 24) = v19;
    v22 = *(_BYTE *)(a1 + 32);
    *(_BYTE *)(a1 + 32) = v17;
    sub_3B5BC(v20, v21, v22);
  }
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v59 = (id *)(a1 + 56);
  v60 = (id *)(a2 + 56);
  v61 = *(unsigned __int8 *)(a2 + 64);
  if (*(unsigned __int8 *)(a1 + 64) == 255)
  {
    if (v61 == 255)
    {
      v67 = *v60;
      *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
      *v59 = v67;
    }
    else
    {
      v65 = *v60;
      sub_3D47C(*v60, *(_BYTE *)(a2 + 64));
      *(_QWORD *)(a1 + 56) = v65;
      *(_BYTE *)(a1 + 64) = v61;
    }
  }
  else if (v61 == 255)
  {
    sub_3E470(a1 + 56);
    v66 = *(_BYTE *)(a2 + 64);
    *v59 = *v60;
    *(_BYTE *)(a1 + 64) = v66;
  }
  else
  {
    v62 = *v60;
    sub_3D47C(*v60, *(_BYTE *)(a2 + 64));
    v63 = *(void **)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v62;
    v64 = *(_BYTE *)(a1 + 64);
    *(_BYTE *)(a1 + 64) = v61;
    sub_3D624(v63, v64);
  }
  v68 = (id *)(a1 + 72);
  v69 = (id *)(a2 + 72);
  v70 = *(unsigned __int8 *)(a2 + 80);
  if (*(unsigned __int8 *)(a1 + 80) == 255)
  {
    if (v70 == 255)
    {
      v76 = *v69;
      *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
      *v68 = v76;
    }
    else
    {
      v74 = *v69;
      sub_3D47C(*v69, *(_BYTE *)(a2 + 80));
      *(_QWORD *)(a1 + 72) = v74;
      *(_BYTE *)(a1 + 80) = v70;
    }
  }
  else if (v70 == 255)
  {
    sub_3E470(a1 + 72);
    v75 = *(_BYTE *)(a2 + 80);
    *v68 = *v69;
    *(_BYTE *)(a1 + 80) = v75;
  }
  else
  {
    v71 = *v69;
    sub_3D47C(*v69, *(_BYTE *)(a2 + 80));
    v72 = *(void **)(a1 + 72);
    *(_QWORD *)(a1 + 72) = v71;
    v73 = *(_BYTE *)(a1 + 80);
    *(_BYTE *)(a1 + 80) = v70;
    sub_3D624(v72, v73);
  }
  v77 = (id *)(a1 + 88);
  v78 = (id *)(a2 + 88);
  v79 = *(unsigned __int8 *)(a2 + 96);
  if (*(unsigned __int8 *)(a1 + 96) == 255)
  {
    if (v79 == 255)
    {
      v85 = *v78;
      *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
      *v77 = v85;
    }
    else
    {
      v83 = *v78;
      sub_3D47C(*v78, *(_BYTE *)(a2 + 96));
      *(_QWORD *)(a1 + 88) = v83;
      *(_BYTE *)(a1 + 96) = v79;
    }
  }
  else if (v79 == 255)
  {
    sub_3E470(a1 + 88);
    v84 = *(_BYTE *)(a2 + 96);
    *v77 = *v78;
    *(_BYTE *)(a1 + 96) = v84;
  }
  else
  {
    v80 = *v78;
    sub_3D47C(*v78, *(_BYTE *)(a2 + 96));
    v81 = *(void **)(a1 + 88);
    *(_QWORD *)(a1 + 88) = v80;
    v82 = *(_BYTE *)(a1 + 96);
    *(_BYTE *)(a1 + 96) = v79;
    sub_3D624(v81, v82);
  }
  v86 = (id *)(a1 + 104);
  v87 = (id *)(a2 + 104);
  v88 = *(unsigned __int8 *)(a2 + 112);
  if (*(unsigned __int8 *)(a1 + 112) == 255)
  {
    if (v88 == 255)
    {
      v94 = *v87;
      *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
      *v86 = v94;
    }
    else
    {
      v92 = *v87;
      sub_3D47C(*v87, *(_BYTE *)(a2 + 112));
      *(_QWORD *)(a1 + 104) = v92;
      *(_BYTE *)(a1 + 112) = v88;
    }
  }
  else if (v88 == 255)
  {
    sub_3E470(a1 + 104);
    v93 = *(_BYTE *)(a2 + 112);
    *v86 = *v87;
    *(_BYTE *)(a1 + 112) = v93;
  }
  else
  {
    v89 = *v87;
    sub_3D47C(*v87, *(_BYTE *)(a2 + 112));
    v90 = *(void **)(a1 + 104);
    *(_QWORD *)(a1 + 104) = v89;
    v91 = *(_BYTE *)(a1 + 112);
    *(_BYTE *)(a1 + 112) = v88;
    sub_3D624(v90, v91);
  }
  v95 = (id *)(a1 + 120);
  v96 = (id *)(a2 + 120);
  v97 = *(unsigned __int8 *)(a2 + 128);
  if (*(unsigned __int8 *)(a1 + 128) == 255)
  {
    if (v97 == 255)
    {
      v103 = *v96;
      *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
      *v95 = v103;
    }
    else
    {
      v101 = *v96;
      sub_3D47C(*v96, *(_BYTE *)(a2 + 128));
      *(_QWORD *)(a1 + 120) = v101;
      *(_BYTE *)(a1 + 128) = v97;
    }
  }
  else if (v97 == 255)
  {
    sub_3E470(a1 + 120);
    v102 = *(_BYTE *)(a2 + 128);
    *v95 = *v96;
    *(_BYTE *)(a1 + 128) = v102;
  }
  else
  {
    v98 = *v96;
    sub_3D47C(*v96, *(_BYTE *)(a2 + 128));
    v99 = *(void **)(a1 + 120);
    *(_QWORD *)(a1 + 120) = v98;
    v100 = *(_BYTE *)(a1 + 128);
    *(_BYTE *)(a1 + 128) = v97;
    sub_3D624(v99, v100);
  }
  *(_BYTE *)(a1 + 129) = *(_BYTE *)(a2 + 129);
  v104 = v6[11];
  v105 = a1 + v104;
  v106 = a2 + v104;
  v107 = type metadata accessor for ArtworkCrop(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v107 - 8) + 24))(v105, v106, v107);
  v108 = v6[12];
  v109 = (_QWORD *)(a1 + v108);
  v110 = (_QWORD *)(a2 + v108);
  *v109 = *v110;
  v109[1] = v110[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + v6[13]) = *(_BYTE *)(a2 + v6[13]);
  *(_BYTE *)(a1 + v6[14]) = *(_BYTE *)(a2 + v6[14]);
  *(_BYTE *)(a1 + v6[15]) = *(_BYTE *)(a2 + v6[15]);
  v111 = v6[16];
  v112 = (_QWORD *)(a1 + v111);
  v113 = (_QWORD *)(a2 + v111);
  *v112 = *v113;
  v112[1] = v113[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_68:
  v114 = a3[5];
  v115 = a1 + v114;
  v116 = (__int128 *)(a2 + v114);
  v117 = *v116;
  *(_BYTE *)(v115 + 16) = *((_BYTE *)v116 + 16);
  *(_OWORD *)v115 = v117;
  v118 = a3[6];
  v119 = (_QWORD *)(a1 + v118);
  v120 = (_QWORD *)(a2 + v118);
  *v119 = *v120;
  v119[1] = v120[1];
  v121 = a3[7];
  v122 = (void *)(a1 + v121);
  v123 = (void *)(a2 + v121);
  v124 = type metadata accessor for CropCode(0);
  v125 = *(_QWORD *)(v124 - 8);
  v126 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v125 + 48);
  v127 = v126(v122, 1, v124);
  v128 = v126(v123, 1, v124);
  if (!v127)
  {
    if (!v128)
    {
      (*(void (**)(void *, void *, uint64_t))(v125 + 24))(v122, v123, v124);
      goto LABEL_74;
    }
    (*(void (**)(void *, uint64_t))(v125 + 8))(v122, v124);
    goto LABEL_73;
  }
  if (v128)
  {
LABEL_73:
    v129 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7D58);
    memcpy(v122, v123, *(_QWORD *)(*(_QWORD *)(v129 - 8) + 64));
    goto LABEL_74;
  }
  (*(void (**)(void *, void *, uint64_t))(v125 + 16))(v122, v123, v124);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v125 + 56))(v122, 0, 1, v124);
LABEL_74:
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  return a1;
}

_OWORD *sub_2AFE9C(_OWORD *a1, _OWORD *a2, int *a3)
{
  int *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v6 = (int *)type metadata accessor for ArtworkModel(0);
  v7 = *((_QWORD *)v6 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    v9 = a2[1];
    *a1 = *a2;
    a1[1] = v9;
    *((_BYTE *)a1 + 32) = *((_BYTE *)a2 + 32);
    *(_OWORD *)((char *)a1 + 40) = *(_OWORD *)((char *)a2 + 40);
    *((_QWORD *)a1 + 7) = *((_QWORD *)a2 + 7);
    *((_BYTE *)a1 + 64) = *((_BYTE *)a2 + 64);
    *(_OWORD *)((char *)a1 + 113) = *(_OWORD *)((char *)a2 + 113);
    *(_OWORD *)((char *)a1 + 104) = *(_OWORD *)((char *)a2 + 104);
    *(_OWORD *)((char *)a1 + 88) = *(_OWORD *)((char *)a2 + 88);
    *(_OWORD *)((char *)a1 + 72) = *(_OWORD *)((char *)a2 + 72);
    *((_BYTE *)a1 + 129) = *((_BYTE *)a2 + 129);
    v10 = v6[11];
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    v13 = type metadata accessor for ArtworkCrop(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
    *(_OWORD *)((char *)a1 + v6[12]) = *(_OWORD *)((char *)a2 + v6[12]);
    *((_BYTE *)a1 + v6[13]) = *((_BYTE *)a2 + v6[13]);
    *((_BYTE *)a1 + v6[14]) = *((_BYTE *)a2 + v6[14]);
    *((_BYTE *)a1 + v6[15]) = *((_BYTE *)a2 + v6[15]);
    *(_OWORD *)((char *)a1 + v6[16]) = *(_OWORD *)((char *)a2 + v6[16]);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v7 + 56))(a1, 0, 1, v6);
  }
  v14 = a3[5];
  v15 = a3[6];
  v16 = (char *)a1 + v14;
  v17 = (char *)a2 + v14;
  *(_OWORD *)v16 = *(_OWORD *)v17;
  v18 = *(_OWORD *)((char *)a2 + v15);
  v16[16] = v17[16];
  *(_OWORD *)((char *)a1 + v15) = v18;
  v19 = a3[7];
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  v22 = type metadata accessor for CropCode(0);
  v23 = *(_QWORD *)(v22 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
  {
    v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7D58);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v20, v21, v22);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  }
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  return a1;
}

uint64_t sub_2B00AC(uint64_t a1, uint64_t a2, int *a3)
{
  int *v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, int *);
  int v9;
  int v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(void *, uint64_t, uint64_t);
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v32;
  _OWORD *v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  int v39;
  int v40;
  void *v41;
  _QWORD *v42;
  int v43;
  int v44;
  void *v45;
  _QWORD *v46;
  int v47;
  int v48;
  void *v49;
  _QWORD *v50;
  int v51;
  int v52;
  void *v53;
  _QWORD *v54;
  int v55;
  int v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;

  v6 = (int *)type metadata accessor for ArtworkModel(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      v11 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v11;
      *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
      *(_OWORD *)(a1 + 113) = *(_OWORD *)(a2 + 113);
      *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
      *(_BYTE *)(a1 + 129) = *(_BYTE *)(a2 + 129);
      v12 = v6[11];
      v13 = a1 + v12;
      v14 = a2 + v12;
      v15 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
      *(_OWORD *)(a1 + v6[12]) = *(_OWORD *)(a2 + v6[12]);
      *(_BYTE *)(a1 + v6[13]) = *(_BYTE *)(a2 + v6[13]);
      *(_BYTE *)(a1 + v6[14]) = *(_BYTE *)(a2 + v6[14]);
      *(_BYTE *)(a1 + v6[15]) = *(_BYTE *)(a2 + v6[15]);
      *(_OWORD *)(a1 + v6[16]) = *(_OWORD *)(a2 + v6[16]);
      (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    sub_145D8(a1, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
LABEL_6:
    v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
    memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  v32 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v32;
  swift_bridgeObjectRelease();
  v33 = (_OWORD *)(a2 + 16);
  v34 = *(unsigned __int8 *)(a1 + 32);
  if (v34 != 255)
  {
    v35 = *(unsigned __int8 *)(a2 + 32);
    if (v35 != 255)
    {
      v36 = *(_QWORD *)(a1 + 16);
      v37 = *(_QWORD *)(a1 + 24);
      *(_OWORD *)(a1 + 16) = *v33;
      *(_BYTE *)(a1 + 32) = v35;
      sub_3B5BC(v36, v37, v34);
      goto LABEL_20;
    }
    sub_3E43C(a1 + 16);
  }
  *(_OWORD *)(a1 + 16) = *v33;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
LABEL_20:
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v38 = (_QWORD *)(a2 + 56);
  v39 = *(unsigned __int8 *)(a1 + 64);
  if (v39 != 255)
  {
    v40 = *(unsigned __int8 *)(a2 + 64);
    if (v40 != 255)
    {
      v41 = *(void **)(a1 + 56);
      *(_QWORD *)(a1 + 56) = *v38;
      *(_BYTE *)(a1 + 64) = v40;
      sub_3D624(v41, v39);
      goto LABEL_25;
    }
    sub_3E470(a1 + 56);
  }
  *(_QWORD *)(a1 + 56) = *v38;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
LABEL_25:
  v42 = (_QWORD *)(a2 + 72);
  v43 = *(unsigned __int8 *)(a1 + 80);
  if (v43 != 255)
  {
    v44 = *(unsigned __int8 *)(a2 + 80);
    if (v44 != 255)
    {
      v45 = *(void **)(a1 + 72);
      *(_QWORD *)(a1 + 72) = *v42;
      *(_BYTE *)(a1 + 80) = v44;
      sub_3D624(v45, v43);
      goto LABEL_30;
    }
    sub_3E470(a1 + 72);
  }
  *(_QWORD *)(a1 + 72) = *v42;
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
LABEL_30:
  v46 = (_QWORD *)(a2 + 88);
  v47 = *(unsigned __int8 *)(a1 + 96);
  if (v47 != 255)
  {
    v48 = *(unsigned __int8 *)(a2 + 96);
    if (v48 != 255)
    {
      v49 = *(void **)(a1 + 88);
      *(_QWORD *)(a1 + 88) = *v46;
      *(_BYTE *)(a1 + 96) = v48;
      sub_3D624(v49, v47);
      goto LABEL_35;
    }
    sub_3E470(a1 + 88);
  }
  *(_QWORD *)(a1 + 88) = *v46;
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
LABEL_35:
  v50 = (_QWORD *)(a2 + 104);
  v51 = *(unsigned __int8 *)(a1 + 112);
  if (v51 != 255)
  {
    v52 = *(unsigned __int8 *)(a2 + 112);
    if (v52 != 255)
    {
      v53 = *(void **)(a1 + 104);
      *(_QWORD *)(a1 + 104) = *v50;
      *(_BYTE *)(a1 + 112) = v52;
      sub_3D624(v53, v51);
      goto LABEL_40;
    }
    sub_3E470(a1 + 104);
  }
  *(_QWORD *)(a1 + 104) = *v50;
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
LABEL_40:
  v54 = (_QWORD *)(a2 + 120);
  v55 = *(unsigned __int8 *)(a1 + 128);
  if (v55 == 255)
  {
LABEL_44:
    *(_QWORD *)(a1 + 120) = *v54;
    *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
    goto LABEL_45;
  }
  v56 = *(unsigned __int8 *)(a2 + 128);
  if (v56 == 255)
  {
    sub_3E470(a1 + 120);
    goto LABEL_44;
  }
  v57 = *(void **)(a1 + 120);
  *(_QWORD *)(a1 + 120) = *v54;
  *(_BYTE *)(a1 + 128) = v56;
  sub_3D624(v57, v55);
LABEL_45:
  *(_BYTE *)(a1 + 129) = *(_BYTE *)(a2 + 129);
  v58 = v6[11];
  v59 = a1 + v58;
  v60 = a2 + v58;
  v61 = type metadata accessor for ArtworkCrop(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 40))(v59, v60, v61);
  v62 = v6[12];
  v63 = (_QWORD *)(a1 + v62);
  v64 = (uint64_t *)(a2 + v62);
  v66 = *v64;
  v65 = v64[1];
  *v63 = v66;
  v63[1] = v65;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + v6[13]) = *(_BYTE *)(a2 + v6[13]);
  *(_BYTE *)(a1 + v6[14]) = *(_BYTE *)(a2 + v6[14]);
  *(_BYTE *)(a1 + v6[15]) = *(_BYTE *)(a2 + v6[15]);
  v67 = v6[16];
  v68 = (_QWORD *)(a1 + v67);
  v69 = (uint64_t *)(a2 + v67);
  v71 = *v69;
  v70 = v69[1];
  *v68 = v71;
  v68[1] = v70;
  swift_bridgeObjectRelease();
LABEL_7:
  v17 = a3[5];
  v18 = a3[6];
  v19 = a1 + v17;
  v20 = a2 + v17;
  *(_OWORD *)v19 = *(_OWORD *)v20;
  v21 = *(_OWORD *)(a2 + v18);
  *(_BYTE *)(v19 + 16) = *(_BYTE *)(v20 + 16);
  *(_OWORD *)(a1 + v18) = v21;
  v22 = a3[7];
  v23 = (void *)(a1 + v22);
  v24 = (void *)(a2 + v22);
  v25 = type metadata accessor for CropCode(0);
  v26 = *(_QWORD *)(v25 - 8);
  v27 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v26 + 48);
  v28 = v27(v23, 1, v25);
  v29 = v27(v24, 1, v25);
  if (!v28)
  {
    if (!v29)
    {
      (*(void (**)(void *, void *, uint64_t))(v26 + 40))(v23, v24, v25);
      goto LABEL_13;
    }
    (*(void (**)(void *, uint64_t))(v26 + 8))(v23, v25);
    goto LABEL_12;
  }
  if (v29)
  {
LABEL_12:
    v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7D58);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v26 + 32))(v23, v24, v25);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
LABEL_13:
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  return a1;
}

uint64_t sub_2B05C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_2B05CC);
}

uint64_t sub_2B05CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v14;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7D58);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 28);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 32));
  if (v14 >= 2)
    return v14 - 1;
  else
    return 0;
}

uint64_t sub_2B0678(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_2B0684);
}

uint64_t sub_2B0684(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7D58);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 28);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_BYTE *)(a1 + *(int *)(a4 + 32)) = a2 + 1;
  return result;
}

void sub_2B0730(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[5];

  sub_3EE70(319, (unint64_t *)&qword_3B28A0, (uint64_t (*)(uint64_t))&type metadata accessor for ArtworkModel);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = &unk_304898;
    v6[2] = &unk_3048B0;
    sub_3EE70(319, (unint64_t *)&unk_3C67F8, (uint64_t (*)(uint64_t))&type metadata accessor for CropCode);
    if (v5 <= 0x3F)
    {
      v6[3] = *(_QWORD *)(v4 - 8) + 64;
      v6[4] = &unk_3048C8;
      swift_initStructMetadata(a1, 256, 5, v6, a1 + 16);
    }
  }
}

uint64_t sub_2B07F0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_3459E0, 1);
}

unint64_t sub_2B0800()
{
  unint64_t result;

  result = qword_3C6858;
  if (!qword_3C6858)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_3C6850);
    sub_2B089C(&qword_3C6860, &qword_3C5280);
    sub_32914(&qword_3C6868, &qword_3C5278, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>);
    atomic_store(result, (unint64_t *)&qword_3C6858);
  }
  return result;
}

uint64_t sub_2B089C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;

  result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    sub_32914(&qword_3C6868, &qword_3C5278, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_2B0918(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  unsigned int (*v30)(uint64_t, uint64_t, uint64_t);
  uint64_t *v31;
  uint64_t v32;
  char v33;
  uint64_t v35;
  char v36;
  int *v37;
  __n128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  double v43;
  int v44;
  uint64_t v45;
  double v46;
  double v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int (*v55)(uint64_t, uint64_t, uint64_t);
  uint64_t v56;
  char *v57;
  uint64_t v58;
  void (*v59)(char *, uint64_t);
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v4 = type metadata accessor for CropCode(0);
  v5 = *(_QWORD *)(v4 - 8);
  v63 = v4;
  v64 = v5;
  __chkstk_darwin(v4);
  v61 = (char *)&v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C6878);
  __chkstk_darwin(v62);
  v68 = (char *)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7D58);
  __chkstk_darwin(v8);
  v67 = (char *)&v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v66 = (char *)&v60 - v11;
  __chkstk_darwin(v12);
  v71 = (uint64_t)&v60 - v13;
  v14 = type metadata accessor for ArtworkModel(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v65 = (uint64_t)&v60 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0B18);
  __chkstk_darwin(v17);
  v19 = (char *)&v60 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
  __chkstk_darwin(v20);
  v22 = (char *)&v60 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v25 = (char *)&v60 - v24;
  __chkstk_darwin(v26);
  v28 = (char *)&v60 - v27;
  v69 = a1;
  sub_267BC(a1, (uint64_t)&v60 - v27, &qword_3BEB70);
  v70 = a2;
  sub_267BC(a2, (uint64_t)v25, &qword_3BEB70);
  v29 = (uint64_t)&v19[*(int *)(v17 + 48)];
  sub_267BC((uint64_t)v28, (uint64_t)v19, &qword_3BEB70);
  sub_267BC((uint64_t)v25, v29, &qword_3BEB70);
  v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  if (v30((uint64_t)v19, 1, v14) == 1)
  {
    sub_1459C((uint64_t)v25, &qword_3BEB70);
    sub_1459C((uint64_t)v28, &qword_3BEB70);
    if (v30(v29, 1, v14) == 1)
    {
      sub_1459C((uint64_t)v19, &qword_3BEB70);
      goto LABEL_11;
    }
LABEL_6:
    v31 = &qword_3B0B18;
    v32 = (uint64_t)v19;
    goto LABEL_7;
  }
  sub_267BC((uint64_t)v19, (uint64_t)v22, &qword_3BEB70);
  if (v30(v29, 1, v14) == 1)
  {
    sub_1459C((uint64_t)v25, &qword_3BEB70);
    sub_1459C((uint64_t)v28, &qword_3BEB70);
    sub_145D8((uint64_t)v22, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
    goto LABEL_6;
  }
  v35 = v65;
  sub_3C56C(v29, v65, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
  v36 = static ArtworkModel.== infix(_:_:)(v22, v35);
  sub_145D8(v35, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
  sub_1459C((uint64_t)v25, &qword_3BEB70);
  sub_1459C((uint64_t)v28, &qword_3BEB70);
  sub_145D8((uint64_t)v22, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
  sub_1459C((uint64_t)v19, &qword_3BEB70);
  if ((v36 & 1) == 0)
    goto LABEL_8;
LABEL_11:
  v37 = (int *)type metadata accessor for Artwork.Configuration(0);
  v39 = v37[5];
  v41 = v69;
  v40 = v70;
  v43 = *(double *)(v69 + v39);
  v42 = *(double *)(v69 + v39 + 8);
  v44 = *(unsigned __int8 *)(v69 + v39 + 16);
  v45 = v70 + v39;
  v47 = *(double *)(v70 + v39);
  v46 = *(double *)(v70 + v39 + 8);
  v48 = *(unsigned __int8 *)(v45 + 16);
  if (!v44)
  {
    v50 = (uint64_t)v67;
    v49 = (uint64_t)v68;
    v51 = v71;
    v52 = (uint64_t)v66;
    v33 = 0;
    if (v48)
      return v33 & 1;
LABEL_16:
    if (v43 != v47)
      return v33 & 1;
    v38.n128_f64[0] = v42;
    if (v42 != v46)
      return v33 & 1;
    goto LABEL_21;
  }
  v50 = (uint64_t)v67;
  v49 = (uint64_t)v68;
  v51 = v71;
  v52 = (uint64_t)v66;
  if (v44 == 1)
  {
    if (v48 != 1)
      goto LABEL_8;
    v33 = 0;
    goto LABEL_16;
  }
  v33 = 0;
  if (v48 == 2 && !(*(_QWORD *)&v46 | *(_QWORD *)&v47))
  {
LABEL_21:
    if ((static Alignment.== infix(_:_:)(*(_QWORD *)(v69 + v37[6]), *(_QWORD *)(v69 + v37[6] + 8), *(_QWORD *)(v70 + v37[6]), *(_QWORD *)(v70 + v37[6] + 8), v38) & 1) == 0)goto LABEL_8;
    sub_267BC(v41 + v37[7], v51, &qword_3B7D58);
    sub_267BC(v40 + v37[7], v52, &qword_3B7D58);
    v53 = v49 + *(int *)(v62 + 48);
    sub_267BC(v51, v49, &qword_3B7D58);
    sub_267BC(v52, v53, &qword_3B7D58);
    v54 = v63;
    v55 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v64 + 48);
    if (v55(v49, 1, v63) == 1)
    {
      sub_1459C(v52, &qword_3B7D58);
      sub_1459C(v51, &qword_3B7D58);
      if (v55(v53, 1, v54) == 1)
      {
        sub_1459C(v49, &qword_3B7D58);
LABEL_29:
        v33 = static ContentMode.== infix(_:_:)(*(unsigned __int8 *)(v41 + v37[8]), *(unsigned __int8 *)(v40 + v37[8]));
        return v33 & 1;
      }
    }
    else
    {
      sub_267BC(v49, v50, &qword_3B7D58);
      if (v55(v53, 1, v54) != 1)
      {
        v56 = v64;
        v57 = v61;
        (*(void (**)(char *, uint64_t, uint64_t))(v64 + 32))(v61, v53, v54);
        v58 = sub_F1C0(&qword_3C6880, (void (*)(uint64_t))&type metadata accessor for CropCode, (uint64_t)&protocol conformance descriptor for CropCode);
        LODWORD(v68) = dispatch thunk of static Equatable.== infix(_:_:)(v50, v57, v54, v58);
        v59 = *(void (**)(char *, uint64_t))(v56 + 8);
        v59(v57, v54);
        sub_1459C(v52, &qword_3B7D58);
        sub_1459C(v71, &qword_3B7D58);
        v59((char *)v50, v54);
        sub_1459C(v49, &qword_3B7D58);
        if ((v68 & 1) != 0)
          goto LABEL_29;
LABEL_8:
        v33 = 0;
        return v33 & 1;
      }
      sub_1459C(v52, &qword_3B7D58);
      sub_1459C(v51, &qword_3B7D58);
      (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v50, v54);
    }
    v31 = &qword_3C6878;
    v32 = v49;
LABEL_7:
    sub_1459C(v32, v31);
    goto LABEL_8;
  }
  return v33 & 1;
}

unint64_t sub_2B0FA0()
{
  unint64_t result;

  result = qword_3C6888;
  if (!qword_3C6888)
  {
    result = swift_getWitnessTable(&unk_304A30);
    atomic_store(result, (unint64_t *)&qword_3C6888);
  }
  return result;
}

unint64_t sub_2B0FE4()
{
  unint64_t result;

  result = qword_3C68A0;
  if (!qword_3C68A0)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_3C6890);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>);
    atomic_store(result, (unint64_t *)&qword_3C68A0);
  }
  return result;
}

unint64_t sub_2B1048()
{
  unint64_t result;

  result = qword_3C68A8;
  if (!qword_3C68A8)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_3C6898);
    sub_2B10CC();
    sub_32914(&qword_3B9018, &qword_3B9020, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>);
    atomic_store(result, (unint64_t *)&qword_3C68A8);
  }
  return result;
}

unint64_t sub_2B10CC()
{
  unint64_t result;

  result = qword_3C68B0;
  if (!qword_3C68B0)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_3C68B8);
    sub_2B1138();
    sub_2B1200();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>);
    atomic_store(result, (unint64_t *)&qword_3C68B0);
  }
  return result;
}

unint64_t sub_2B1138()
{
  unint64_t result;

  result = qword_3C68C0;
  if (!qword_3C68C0)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_3C68C8);
    sub_2B11BC();
    sub_32914(&qword_3C49B8, &qword_3C4840, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>);
    atomic_store(result, (unint64_t *)&qword_3C68C0);
  }
  return result;
}

unint64_t sub_2B11BC()
{
  unint64_t result;

  result = qword_3C68D0;
  if (!qword_3C68D0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Rectangle);
    atomic_store(result, (unint64_t *)&qword_3C68D0);
  }
  return result;
}

unint64_t sub_2B1200()
{
  unint64_t result;

  result = qword_3C68D8;
  if (!qword_3C68D8)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_3C68E0);
    sub_2B11BC();
    sub_32914(&qword_3C68E8, &qword_3C68F0, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>);
    atomic_store(result, (unint64_t *)&qword_3C68D8);
  }
  return result;
}

uint64_t sub_2B1284@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_2B12AC(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.foregroundColor.setter(v1);
}

ValueMetadata *type metadata accessor for NothingModifier()
{
  return &type metadata for NothingModifier;
}

unint64_t sub_2B12E8()
{
  unint64_t result;

  result = qword_3C68F8;
  if (!qword_3C68F8)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_3C6900);
    sub_2B0800();
    sub_2B089C(&qword_3C6870, &qword_3C6838);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>);
    atomic_store(result, (unint64_t *)&qword_3C68F8);
  }
  return result;
}

unint64_t sub_2B1370()
{
  unint64_t result;

  result = qword_3C6908;
  if (!qword_3C6908)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CGFloat);
    atomic_store(result, (unint64_t *)&qword_3C6908);
  }
  return result;
}

uint64_t sub_2B13B4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_345A08, 1);
}

unint64_t sub_2B13C4()
{
  unint64_t result;

  result = qword_3C6918;
  if (!qword_3C6918)
  {
    result = swift_getWitnessTable(&unk_3049E0);
    atomic_store(result, (unint64_t *)&qword_3C6918);
  }
  return result;
}

uint64_t sub_2B1408()
{
  return sub_32914(&qword_3C6920, &qword_3C6910, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
}

uint64_t NavigationTab.stringValue.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = a1 - 1;
  result = 0x73776F6873;
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = 0x736C656E6E616863;
      break;
    case 2:
      result = 0x69726F6765746163;
      break;
    case 3:
      result = 0x64616F6C6E776F64;
      break;
    case 4:
      result = 0x7472616843706F74;
      break;
    case 5:
      result = 0x6F546E7265646F6DLL;
      break;
    case 6:
      result = 0x7972617262696CLL;
      break;
    case 7:
      result = 0x6E657473696CLL;
      break;
    case 8:
      result = 0x676F6C61746163;
      break;
    case 9:
      result = 0x7265666E69;
      break;
    case 10:
      result = 0x64657463656C6573;
      break;
    case 11:
      result = 0x686372616573;
      break;
    case 12:
      result = 0x676E6964616F6CLL;
      break;
    case 13:
      result = 0x79616C50696E696DLL;
      break;
    case 14:
      result = 0x6B72616D6B6F6F62;
      break;
    case 15:
      result = 0x704574736574616CLL;
      break;
    case 16:
      result = 0x796C746E65636572;
      break;
    default:
      result = 0x6E6F6974617473;
      break;
  }
  return result;
}

uint64_t TabChangeAction.__allocating_init(title:navigationTab:actions:popToRoot:preserveTransientView:userInitiated:suppressMetrics:presentationStyle:actionMetrics:)(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, char a5, int a6, int a7, int a8, unsigned __int8 a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v18;

  swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
  v18 = sub_2B354C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  sub_267A8(a3);
  return v18;
}

uint64_t NavigationTab.station.getter(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) >= 0x11)
    return swift_retain(a1);
  else
    return 0;
}

uint64_t NavigationTab.intValue.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = a1 - 1;
  result = 1;
  switch(v1)
  {
    case 0:
      result = 7;
      break;
    case 1:
      result = 8;
      break;
    case 2:
      result = 9;
      break;
    case 3:
      result = 10;
      break;
    case 4:
      result = 11;
      break;
    case 5:
      result = 12;
      break;
    case 6:
      result = 5;
      break;
    case 7:
      result = 4;
      break;
    case 8:
      result = 6;
      break;
    case 9:
      result = 2;
      break;
    case 10:
      return result;
    case 11:
      result = 3;
      break;
    case 12:
      result = NSNotFound.getter(1);
      break;
    case 13:
    case 14:
    case 15:
    case 16:
      result = a1;
      break;
    default:
      result = 13;
      break;
  }
  return result;
}

uint64_t NavigationTab.description.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = a1 - 1;
  result = 0x73776F6873;
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = 0x736C656E6E616863;
      break;
    case 2:
      result = 0x69726F6765746163;
      break;
    case 3:
      result = 0x64616F6C6E776F64;
      break;
    case 4:
      result = 0x7472616843706F74;
      break;
    case 5:
      result = 0x6F546E7265646F6DLL;
      break;
    case 6:
      result = 0x7972617262696CLL;
      break;
    case 7:
      result = 0x6E657473696CLL;
      break;
    case 8:
      result = 0x676F6C61746163;
      break;
    case 9:
      result = 0x7265666E69;
      break;
    case 10:
      result = 0x64657463656C6573;
      break;
    case 11:
      result = 0x686372616573;
      break;
    case 12:
      result = 0x676E6964616F6CLL;
      break;
    case 13:
      result = 0x79616C50696E696DLL;
      break;
    case 14:
      result = 0x6B72616D6B6F6F62;
      break;
    case 15:
      result = 0x704574736574616CLL;
      break;
    case 16:
      result = 0x796C746E65636572;
      break;
    default:
      result = 0x6E6F6974617473;
      break;
  }
  return result;
}

uint64_t NavigationTab.init(intValue:)(uint64_t a1)
{
  int *v2;
  unint64_t v3;
  char v4;
  uint64_t v5;

  if (qword_3B02C8 != -1)
    swift_once(&qword_3B02C8, sub_2B1D4C);
  v2 = off_3C6928[0];
  if (!*(_QWORD *)((char *)off_3C6928[0] + (unint64_t)&dword_10))
    return 18;
  v3 = sub_29D38(a1);
  if ((v4 & 1) == 0)
    return 18;
  v5 = *(_QWORD *)(*(_QWORD *)&stru_20.segname[(_QWORD)v2 + 16] + 8 * v3);
  sub_26794(v5);
  return v5;
}

uint64_t NavigationTab.pageContext.getter()
{
  unint64_t v0;
  uint64_t v1;

  v0 = sub_65CC4();
  v1 = StringProtocol.capitalized.getter(&type metadata for String, v0);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t NavigationTab.metricsPageContext.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = a1 - 1;
  result = 0;
  switch(v1)
  {
    case 0:
      result = static MetricsPageContext.shows.getter(0, 0);
      break;
    case 1:
      result = static MetricsPageContext.channels.getter(0, 0);
      break;
    case 2:
      result = static MetricsPageContext.categories.getter(0, 0);
      break;
    case 3:
      result = static MetricsPageContext.downloaded.getter(0, 0);
      break;
    case 4:
    case 5:
      result = static MetricsPageContext.topCharts.getter(0, 0);
      break;
    case 6:
      result = static MetricsPageContext.library.getter(0, 0);
      break;
    case 7:
      result = static MetricsPageContext.listen.getter(0, 0);
      break;
    case 8:
      result = static MetricsPageContext.browse.getter(0, 0);
      break;
    case 9:
    case 10:
    case 12:
    case 13:
      return result;
    case 11:
      result = static MetricsPageContext.search.getter(0, 0);
      break;
    case 14:
      result = static MetricsPageContext.bookmarks.getter(0, 0);
      break;
    case 15:
      result = static MetricsPageContext.latestEpisodes.getter(0, 0);
      break;
    case 16:
      result = static MetricsPageContext.recentlyUpdated.getter(0, 0);
      break;
    default:
      result = static MetricsPageContext.station.getter(0, 0);
      break;
  }
  return result;
}

_UNKNOWN **static NavigationTab.allCases.getter()
{
  return &off_376128;
}

int *sub_2B1D4C()
{
  int *result;

  result = (int *)sub_2B1D68();
  off_3C6928[0] = result;
  return result;
}

_QWORD *sub_2B1D68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v13;

  v0 = 18;
  v13 = _swiftEmptyArrayStorage;
  v1 = sub_180A68(0, 18, 0);
  v2 = &qword_376148;
  v3 = _swiftEmptyArrayStorage;
  do
  {
    v5 = *v2++;
    v4 = v5;
    v6 = 1;
    switch(v5)
    {
      case 1:
        v6 = 7;
        break;
      case 2:
        v6 = 8;
        break;
      case 3:
        v6 = 9;
        break;
      case 4:
        v6 = 10;
        break;
      case 5:
        v6 = 11;
        break;
      case 6:
        v6 = 12;
        break;
      case 7:
        v6 = 5;
        break;
      case 8:
        v6 = 4;
        break;
      case 9:
        v6 = 6;
        break;
      case 10:
        v6 = 2;
        break;
      case 11:
        break;
      case 12:
        v6 = 3;
        break;
      case 13:
        v6 = NSNotFound.getter(v1);
        break;
      case 14:
      case 15:
      case 16:
      case 17:
        v6 = v4;
        break;
      default:
        v6 = 13;
        break;
    }
    v1 = sub_26794(v4);
    v13 = v3;
    v8 = v3[2];
    v7 = v3[3];
    v9 = v8 + 1;
    if (v8 >= v7 >> 1)
    {
      v1 = sub_180A68(v7 > 1, v8 + 1, 1);
      v3 = v13;
    }
    v3[2] = v9;
    v10 = &v3[2 * v8];
    v10[4] = v6;
    v10[5] = v4;
    --v0;
  }
  while (v0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_3C3010);
  v13 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v9);
  v11 = (_QWORD *)swift_bridgeObjectRetain();
  sub_2B2910(v11, 1, &v13);
  swift_bridgeObjectRelease();
  return v13;
}

BOOL NavigationTab.isStation.getter(uint64_t a1)
{
  return (unint64_t)(a1 - 18) < 0xFFFFFFFFFFFFFFEFLL;
}

uint64_t NavigationTab.init(deserializing:using:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = JSONObject.string.getter(a1);
  if (v5)
    v6 = _s8ShelfKit13NavigationTabO11stringValueACSS_tcfC_0(v4, v5);
  else
    v6 = 11;
  v7 = type metadata accessor for JSONContext(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(a2, v7);
  v8 = type metadata accessor for JSONObject(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(a1, v8);
  return v6;
}

void NavigationTab.hash(into:)(uint64_t a1, _QWORD *a2)
{
  Swift::UInt v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  switch((unint64_t)a2)
  {
    case 1uLL:
      v3 = 0;
      goto LABEL_21;
    case 2uLL:
      v3 = 1;
      goto LABEL_21;
    case 3uLL:
      v3 = 2;
      goto LABEL_21;
    case 4uLL:
      v3 = 3;
      goto LABEL_21;
    case 5uLL:
      v3 = 4;
      goto LABEL_21;
    case 6uLL:
      v3 = 5;
      goto LABEL_21;
    case 7uLL:
      v3 = 7;
      goto LABEL_21;
    case 8uLL:
      v3 = 8;
      goto LABEL_21;
    case 9uLL:
      v3 = 9;
      goto LABEL_21;
    case 0xAuLL:
      v3 = 10;
      goto LABEL_21;
    case 0xBuLL:
      v3 = 11;
      goto LABEL_21;
    case 0xCuLL:
      v3 = 12;
      goto LABEL_21;
    case 0xDuLL:
      v3 = 13;
      goto LABEL_21;
    case 0xEuLL:
      v3 = 14;
      goto LABEL_21;
    case 0xFuLL:
      v3 = 15;
      goto LABEL_21;
    case 0x10uLL:
      v3 = 16;
      goto LABEL_21;
    case 0x11uLL:
      v3 = 17;
LABEL_21:
      Hasher._combine(_:)(v3);
      break;
    default:
      Hasher._combine(_:)(6uLL);
      if (a2)
      {
        Hasher._combine(_:)(1u);
        v5 = a2[2];
        v6 = a2[3];
        sub_26794((uint64_t)a2);
        swift_bridgeObjectRetain();
        String.hash(into:)(a1, v5, v6);
        swift_bridgeObjectRelease();
        v7 = a2[4];
        v8 = a2[5];
        swift_bridgeObjectRetain();
        String.hash(into:)(a1, v7, v8);
        swift_bridgeObjectRelease();
        Hasher._combine(_:)(*(_QWORD *)((char *)a2 + OBJC_IVAR____TtC8ShelfKit13StationDetail_episodeCount));
        Hasher._combine(_:)(*(_QWORD *)((char *)a2 + OBJC_IVAR____TtC8ShelfKit13StationDetail_unplayedCount));
        v9 = (uint64_t)a2;
      }
      else
      {
        Hasher._combine(_:)(0);
        v9 = 0;
      }
      sub_267A8(v9);
      break;
  }
}

Swift::Int NavigationTab.hashValue.getter(_QWORD *a1)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  NavigationTab.hash(into:)((uint64_t)v3, a1);
  return Hasher._finalize()();
}

Swift::Int sub_2B21AC()
{
  _QWORD **v0;
  _QWORD *v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  NavigationTab.hash(into:)((uint64_t)v3, v1);
  return Hasher._finalize()();
}

void sub_2B21F0(uint64_t a1)
{
  _QWORD **v1;

  NavigationTab.hash(into:)(a1, *v1);
}

Swift::Int sub_2B21F8()
{
  _QWORD **v0;
  _QWORD *v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  NavigationTab.hash(into:)((uint64_t)v3, v1);
  return Hasher._finalize()();
}

BOOL sub_2B2238(_QWORD **a1, int **a2)
{
  return _s8ShelfKit13NavigationTabO2eeoiySbAC_ACtFZ_0(*a1, *a2);
}

void sub_2B2244(_QWORD *a1@<X8>)
{
  *a1 = &off_376128;
}

uint64_t sub_2B2254()
{
  uint64_t *v0;

  return NavigationTab.description.getter(*v0);
}

uint64_t TabChangeAction.navigationTab.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit15TabChangeAction_navigationTab);
  sub_26794(v1);
  return v1;
}

uint64_t TabChangeAction.actions.getter()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit15TabChangeAction_actions));
}

uint64_t TabChangeAction.popToRoot.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8ShelfKit15TabChangeAction_popToRoot);
}

uint64_t TabChangeAction.userInitiated.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8ShelfKit15TabChangeAction_userInitiated);
}

uint64_t TabChangeAction.suppressMetrics.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8ShelfKit15TabChangeAction_suppressMetrics);
}

uint64_t TabChangeAction.preserveTransientView.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8ShelfKit15TabChangeAction_preserveTransientView);
}

uint64_t TabChangeAction.init(title:navigationTab:actions:popToRoot:preserveTransientView:userInitiated:suppressMetrics:presentationStyle:actionMetrics:)(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, char a5, int a6, int a7, int a8, unsigned __int8 a9, uint64_t a10)
{
  uint64_t v11;

  v11 = sub_2B354C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  sub_267A8(a3);
  return v11;
}

uint64_t TabChangeAction.__allocating_init(deserializing:using:)(char *a1, uint64_t a2)
{
  uint64_t v2;

  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  return TabChangeAction.init(deserializing:using:)(a1, a2);
}

uint64_t TabChangeAction.init(deserializing:using:)(char *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  void (*v43)(char *, uint64_t);
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v3 = v2;
  v59 = a2;
  v53 = type metadata accessor for JSONContext(0);
  v58 = *(_QWORD *)(v53 - 8);
  __chkstk_darwin(v53);
  v57 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4F30);
  __chkstk_darwin(v6);
  v8 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for JSONObject(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v56 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v52 = (char *)&v50 - v13;
  __chkstk_darwin(v14);
  v51 = (char *)&v50 - v15;
  __chkstk_darwin(v16);
  v18 = (char *)&v50 - v17;
  v19 = type metadata accessor for JSONArray(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)&v50 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  v54 = a1;
  v23 = JSONObject.subscript.getter(0x736E6F69746361, 0xE700000000000000);
  JSONObject.array.getter(v23);
  v55 = v10;
  v24 = *(void (**)(char *, uint64_t))(v10 + 8);
  v25 = v9;
  v26 = v24;
  v24(v18, v25);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v8, 1, v19) == 1)
  {
    sub_1459C((uint64_t)v8, &qword_3B4F30);
    v27 = _swiftEmptyArrayStorage;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v22, v8, v19);
    v28 = type metadata accessor for Action(0);
    __chkstk_darwin(v28);
    v29 = v59;
    *(&v50 - 2) = v30;
    *(&v50 - 1) = v29;
    v31 = v60;
    v32 = JSONArray.compactMap<A>(_:)(sub_9105C);
    v60 = v31;
    v27 = (_QWORD *)sub_2450E0(v32);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
  }
  v34 = v53;
  v33 = v54;
  v35 = v51;
  v36 = v52;
  *(_QWORD *)(v3 + OBJC_IVAR____TtC8ShelfKit15TabChangeAction_actions) = v27;
  v37 = JSONObject.subscript.getter(0x697461676976616ELL, 0xED00006261546E6FLL);
  v38 = JSONObject.string.getter(v37);
  if (v39)
    v40 = _s8ShelfKit13NavigationTabO11stringValueACSS_tcfC_0(v38, v39);
  else
    v40 = 11;
  v26(v35, v25);
  *(_QWORD *)(v3 + OBJC_IVAR____TtC8ShelfKit15TabChangeAction_navigationTab) = v40;
  v41 = JSONObject.subscript.getter(0x6F6F526F54706F70, 0xE900000000000074);
  v42 = JSONObject.BOOL.getter(v41);
  v26(v36, v25);
  *(_BYTE *)(v3 + OBJC_IVAR____TtC8ShelfKit15TabChangeAction_popToRoot) = v42 & 1;
  *(_BYTE *)(v3 + OBJC_IVAR____TtC8ShelfKit15TabChangeAction_preserveTransientView) = 0;
  *(_BYTE *)(v3 + OBJC_IVAR____TtC8ShelfKit15TabChangeAction_userInitiated) = 0;
  *(_BYTE *)(v3 + OBJC_IVAR____TtC8ShelfKit15TabChangeAction_suppressMetrics) = 0;
  swift_release();
  v43 = v26;
  v44 = v56;
  (*(void (**)(char *, char *, uint64_t))(v55 + 16))(v56, v33, v25);
  v45 = (uint64_t)v57;
  v46 = v58;
  v47 = v59;
  (*(void (**)(char *, uint64_t, uint64_t))(v58 + 16))(v57, v59, v34);
  v48 = Action.init(deserializing:using:)(v44, v45);
  (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v47, v34);
  v43(v33, v25);
  return v48;
}

void TabChangeAction.init(uniqueId:title:presentationStyle:actionMetrics:impressionMetrics:)()
{
  _swift_stdlib_reportUnimplementedInitializer("ShelfKit.TabChangeAction", 24, "init(uniqueId:title:presentationStyle:actionMetrics:impressionMetrics:)", 71, 0);
  __break(1u);
}

uint64_t sub_2B27B0()
{
  uint64_t v0;

  sub_267A8(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit15TabChangeAction_navigationTab));
  return swift_bridgeObjectRelease();
}

uint64_t TabChangeAction.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics;
  v2 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_1459C(v0 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics, (uint64_t *)&unk_3B8790);
  sub_267A8(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit15TabChangeAction_navigationTab));
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t TabChangeAction.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics;
  v2 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_1459C(v0 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics, (uint64_t *)&unk_3B8790);
  sub_267A8(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit15TabChangeAction_navigationTab));
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_2B2910(_QWORD *a1, char a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *i;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  _BOOL8 v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  Swift::String v45;
  Swift::String v46;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v3 = a1[2];
  if (!v3)
    return swift_bridgeObjectRelease();
  v7 = a1[4];
  v6 = a1[5];
  swift_bridgeObjectRetain();
  v51 = v7;
  v8 = (_QWORD *)*a3;
  v9 = sub_29D38(v7);
  v11 = v8[2];
  v12 = (v10 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
    goto LABEL_24;
  v14 = v9;
  v15 = v10;
  v16 = v8[3];
  sub_26794(v6);
  if (v16 >= v13)
  {
    if ((a2 & 1) != 0)
    {
      if ((v15 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      sub_232A4C();
      if ((v15 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v22 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v14 >> 6) + 64) |= 1 << v14;
    v23 = 8 * v14;
    *(_QWORD *)(v22[6] + v23) = v7;
    *(_QWORD *)(v22[7] + v23) = v6;
    v24 = v22[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (v25)
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    v22[2] = v26;
    v27 = v3 - 1;
    if (v3 == 1)
      return swift_bridgeObjectRelease_n(a1, 2);
    for (i = a1 + 7; ; i += 2)
    {
      v29 = *(i - 1);
      v6 = *i;
      v51 = v29;
      v30 = (_QWORD *)*a3;
      v31 = sub_29D38(v29);
      v33 = v30[2];
      v34 = (v32 & 1) == 0;
      v35 = v33 + v34;
      if (__OFADD__(v33, v34))
        break;
      v36 = v31;
      v37 = v32;
      v38 = v30[3];
      sub_26794(v6);
      if (v38 < v35)
      {
        sub_22FEA4(v35, 1);
        v39 = sub_29D38(v29);
        if ((v37 & 1) != (v40 & 1))
          goto LABEL_26;
        v36 = v39;
      }
      if ((v37 & 1) != 0)
        goto LABEL_10;
      v41 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v36 >> 6) + 64) |= 1 << v36;
      v42 = 8 * v36;
      *(_QWORD *)(v41[6] + v42) = v29;
      *(_QWORD *)(v41[7] + v42) = v6;
      v43 = v41[2];
      v25 = __OFADD__(v43, 1);
      v44 = v43 + 1;
      if (v25)
        goto LABEL_25;
      v41[2] = v44;
      if (!--v27)
        return swift_bridgeObjectRelease_n(a1, 2);
    }
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  sub_22FEA4(v13, a2 & 1);
  v17 = sub_29D38(v7);
  if ((v15 & 1) == (v18 & 1))
  {
    v14 = v17;
    if ((v15 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    v20 = swift_allocError(&type metadata for _MergeError, &protocol witness table for _MergeError, 0, 0);
    swift_willThrow(v20);
    v50 = v20;
    swift_errorRetain(v20);
    v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2B08);
    if ((swift_dynamicCast(v21, &v50, v21, &type metadata for _MergeError, 0) & 1) == 0)
    {
      swift_bridgeObjectRelease();
      sub_267A8(v6);
      swift_bridgeObjectRelease();
      return swift_errorRelease(v50);
    }
    goto LABEL_27;
  }
LABEL_26:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Int);
  __break(1u);
LABEL_27:
  v48 = 0;
  v49 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v45._object = (void *)0x8000000000315DD0;
  v45._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v45);
  _print_unlocked<A, B>(_:_:)(&v51, &v48, &type metadata for Int, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v46._countAndFlagsBits = 39;
  v46._object = (void *)0xE100000000000000;
  String.append(_:)(v46);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v48, v49, "Swift/NativeDictionary.swift", 28, 2, 783, 0);
  __break(1u);
  return result;
}

BOOL _s8ShelfKit13NavigationTabO2eeoiySbAC_ACtFZ_0(_QWORD *a1, int *a2)
{
  switch((unint64_t)a1)
  {
    case 1uLL:
      return a2 == (int *)((char *)&dword_0 + 1);
    case 2uLL:
      return a2 == (int *)((char *)&dword_0 + 2);
    case 3uLL:
      return a2 == (int *)((char *)&dword_0 + 3);
    case 4uLL:
      return a2 == &dword_4;
    case 5uLL:
      return a2 == (int *)((char *)&dword_4 + 1);
    case 6uLL:
      return a2 == (int *)((char *)&dword_4 + 2);
    case 7uLL:
      return a2 == (int *)((char *)&dword_4 + 3);
    case 8uLL:
      return a2 == &dword_8;
    case 9uLL:
      return a2 == (int *)((char *)&dword_8 + 1);
    case 0xAuLL:
      return a2 == (int *)((char *)&dword_8 + 2);
    case 0xBuLL:
      return a2 == (int *)((char *)&dword_8 + 3);
    case 0xCuLL:
      return a2 == &dword_C;
    case 0xDuLL:
      return a2 == (int *)((char *)&dword_C + 1);
    case 0xEuLL:
      return a2 == (int *)((char *)&dword_C + 2);
    case 0xFuLL:
      return a2 == (int *)((char *)&dword_C + 3);
    case 0x10uLL:
      return a2 == &dword_10;
    case 0x11uLL:
      return a2 == (int *)((char *)&dword_10 + 1);
    default:
      if ((unint64_t)a2 - 1 < 0x11)
        return 0;
      if (a1)
      {
        return a2 && _s8ShelfKit13StationDetailC2eeoiySbAC_ACtFZ_0(a1, a2);
      }
      else if (a2)
      {
        sub_267A8(0);
        return 0;
      }
      else
      {
        return 1;
      }
  }
}

uint64_t _s8ShelfKit13NavigationTabO11stringValueACSS_tcfC_0(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;

  if (a1 == 0x73776F6873 && a2 == 0xE500000000000000)
  {
    v5 = 0xE500000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x73776F6873, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 1;
  }
  if (a1 == 0x736C656E6E616863 && a2 == 0xE800000000000000)
  {
    v7 = 0xE800000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x736C656E6E616863, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x69726F6765746163 && a2 == 0xEA00000000007365)
  {
    v8 = 0xEA00000000007365;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x69726F6765746163, 0xEA00000000007365, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x64616F6C6E776F64 && a2 == 0xEA00000000006465)
  {
    v9 = 0xEA00000000006465;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x64616F6C6E776F64, 0xEA00000000006465, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x7472616843706F74 && a2 == 0xE900000000000073)
  {
    v10 = 0xE900000000000073;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7472616843706F74, 0xE900000000000073, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_32;
  }
  if (a1 == 0x6F546E7265646F6DLL && a2 == 0xEF73747261684370)
  {
    v11 = 0xEF73747261684370;
LABEL_38:
    swift_bridgeObjectRelease(v11);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F546E7265646F6DLL, 0xEF73747261684370, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_38;
  }
  if (a1 == 0x6E6F6974617473 && a2 == 0xE700000000000000)
  {
    v12 = 0xE700000000000000;
LABEL_44:
    swift_bridgeObjectRelease(v12);
    return 0;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F6974617473, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_44;
  }
  if (a1 == 0x7972617262696CLL && a2 == 0xE700000000000000)
  {
    v13 = 0xE700000000000000;
LABEL_50:
    swift_bridgeObjectRelease(v13);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7972617262696CLL, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_50;
  }
  if (a1 == 0x6E657473696CLL && a2 == 0xE600000000000000)
  {
    v14 = 0xE600000000000000;
LABEL_56:
    swift_bridgeObjectRelease(v14);
    return 8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E657473696CLL, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
    goto LABEL_56;
  }
  if (a1 == 0x676F6C61746163 && a2 == 0xE700000000000000)
  {
    v15 = 0xE700000000000000;
LABEL_62:
    swift_bridgeObjectRelease(v15);
    return 9;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x676F6C61746163, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
    goto LABEL_62;
  }
  if (a1 == 0x7265666E69 && a2 == 0xE500000000000000)
  {
    v16 = 0xE500000000000000;
LABEL_68:
    swift_bridgeObjectRelease(v16);
    return 10;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7265666E69, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v16 = a2;
    goto LABEL_68;
  }
  if (a1 == 0x64657463656C6573 && a2 == 0xE800000000000000)
  {
    v17 = 0xE800000000000000;
LABEL_74:
    swift_bridgeObjectRelease(v17);
    return 11;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x64657463656C6573, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v17 = a2;
    goto LABEL_74;
  }
  if (a1 == 0x686372616573 && a2 == 0xE600000000000000)
  {
    v18 = 0xE600000000000000;
LABEL_80:
    swift_bridgeObjectRelease(v18);
    return 12;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x686372616573, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v18 = a2;
    goto LABEL_80;
  }
  if (a1 == 0x676E6964616F6CLL && a2 == 0xE700000000000000)
  {
    v19 = 0xE700000000000000;
LABEL_86:
    swift_bridgeObjectRelease(v19);
    return 13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x676E6964616F6CLL, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v19 = a2;
    goto LABEL_86;
  }
  if (a1 == 0x79616C50696E696DLL && a2 == 0xEA00000000007265)
  {
    v20 = 0xEA00000000007265;
LABEL_92:
    swift_bridgeObjectRelease(v20);
    return 14;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x79616C50696E696DLL, 0xEA00000000007265, a1, a2, 0) & 1) != 0)
  {
    v20 = a2;
    goto LABEL_92;
  }
  if (a1 == 0x6B72616D6B6F6F62 && a2 == 0xE900000000000073)
  {
    v21 = 0xE900000000000073;
LABEL_98:
    swift_bridgeObjectRelease(v21);
    return 15;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6B72616D6B6F6F62, 0xE900000000000073, a1, a2, 0) & 1) != 0)
  {
    v21 = a2;
    goto LABEL_98;
  }
  if (a1 == 0x704574736574616CLL && a2 == 0xEE007365646F7369)
  {
    v22 = 0xEE007365646F7369;
LABEL_104:
    swift_bridgeObjectRelease(v22);
    return 16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x704574736574616CLL, 0xEE007365646F7369, a1, a2, 0) & 1) != 0)
  {
    v22 = a2;
    goto LABEL_104;
  }
  if (a1 == 0x796C746E65636572 && a2 == 0xEF64657461647055)
  {
    swift_bridgeObjectRelease(0xEF64657461647055);
    return 17;
  }
  else
  {
    v23 = _stringCompareWithSmolCheck(_:_:expecting:)(0x796C746E65636572, 0xEF64657461647055, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v23 & 1) != 0)
      return 17;
    else
      return 11;
  }
}

uint64_t sub_2B354C(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, char a5, int a6, int a7, int a8, unsigned __int8 a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  _BYTE *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE v35[12];
  int v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;

  v11 = v10;
  v38 = a7;
  v39 = a8;
  v36 = a6;
  v43 = a2;
  v41 = a1;
  v42 = a9;
  v37 = a10;
  v40 = type metadata accessor for UUID(0);
  v15 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin(v40);
  v17 = &v35[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v18);
  v20 = &v35[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v21 = type metadata accessor for ActionMetrics(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = __chkstk_darwin(v21);
  v25 = &v35[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
  *(_QWORD *)(v11 + OBJC_IVAR____TtC8ShelfKit15TabChangeAction_navigationTab) = a3;
  v26 = _swiftEmptyArrayStorage;
  if (a4)
    v26 = a4;
  *(_QWORD *)(v11 + OBJC_IVAR____TtC8ShelfKit15TabChangeAction_actions) = v26;
  *(_BYTE *)(v11 + OBJC_IVAR____TtC8ShelfKit15TabChangeAction_popToRoot) = a5;
  *(_BYTE *)(v11 + OBJC_IVAR____TtC8ShelfKit15TabChangeAction_preserveTransientView) = v36;
  *(_BYTE *)(v11 + OBJC_IVAR____TtC8ShelfKit15TabChangeAction_userInitiated) = v38;
  *(_BYTE *)(v11 + OBJC_IVAR____TtC8ShelfKit15TabChangeAction_suppressMetrics) = v39;
  v27 = v37;
  (*(void (**)(_BYTE *, uint64_t, uint64_t, __n128))(v22 + 16))(v25, v37, v21, v23);
  v28 = type metadata accessor for ImpressionMetrics(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v20, 1, 1, v28);
  v29 = sub_26794(a3);
  UUID.init()(v29);
  v30 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
  v32 = v31;
  (*(void (**)(_BYTE *, uint64_t))(v15 + 8))(v17, v40);
  *(_QWORD *)(v11 + 16) = v30;
  *(_QWORD *)(v11 + 24) = v32;
  v33 = v43;
  *(_QWORD *)(v11 + 32) = v41;
  *(_QWORD *)(v11 + 40) = v33;
  *(_BYTE *)(v11 + 48) = v42;
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v22 + 32))(v11 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v25, v21);
  sub_23AB8((uint64_t)v20, v11 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics);
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v27, v21);
  return v11;
}

unint64_t sub_2B379C()
{
  unint64_t result;

  result = qword_3C6930;
  if (!qword_3C6930)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for NavigationTab);
    atomic_store(result, (unint64_t *)&qword_3C6930);
  }
  return result;
}

unint64_t sub_2B37E4()
{
  unint64_t result;

  result = qword_3C6938;
  if (!qword_3C6938)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_3C6940);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A]);
    atomic_store(result, (unint64_t *)&qword_3C6938);
  }
  return result;
}

unint64_t destroy for NavigationTab(unint64_t *a1)
{
  unint64_t result;
  int v2;

  result = *a1;
  v2 = -1;
  if (result < 0xFFFFFFFF)
    v2 = result;
  if ((v2 + 1) <= 1)
    return swift_release(result);
  return result;
}

uint64_t *_s8ShelfKit13NavigationTabOwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  LODWORD(v4) = -1;
  if ((unint64_t)*a2 < 0xFFFFFFFF)
    v4 = *a2;
  if ((v4 + 1) <= 1)
    v3 = swift_retain(v3);
  *a1 = v3;
  return a1;
}

uint64_t *assignWithCopy for NavigationTab(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;

  v3 = *a1;
  LODWORD(v4) = -1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v5) = -1;
  else
    v5 = *a1;
  v6 = v5 + 1;
  v7 = *a2;
  if ((unint64_t)*a2 < 0xFFFFFFFF)
    v4 = *a2;
  v8 = v4 + 1;
  if (v6 > 1)
  {
    *a1 = v7;
    if (v8 <= 1)
      swift_retain(v7);
  }
  else if (v8 > 1)
  {
    swift_release(v3);
    *a1 = *a2;
  }
  else
  {
    *a1 = v7;
    swift_retain(v7);
    swift_release(v3);
  }
  return a1;
}

unint64_t *assignWithTake for NavigationTab(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  unsigned int v6;
  unint64_t v7;
  unsigned int v8;

  v3 = *a1;
  LODWORD(v4) = -1;
  if (v3 >= 0xFFFFFFFF)
    v5 = -1;
  else
    v5 = v3;
  v6 = v5 + 1;
  v7 = *a2;
  if (*a2 < 0xFFFFFFFF)
    v4 = *a2;
  v8 = v4 + 1;
  if (v6 > 1)
    goto LABEL_11;
  if (v8 > 1)
  {
    swift_release(v3);
LABEL_11:
    *a1 = v7;
    return a1;
  }
  *a1 = v7;
  swift_release(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationTab(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;

  if (!a2)
    return 0;
  if (a2 > 0x7FFFFFED && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 2147483630);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) < 2)
    LODWORD(v3) = 0;
  if (v3 >= 0x12)
    return (v3 - 17);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for NavigationTab(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFEE)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 2147483630;
    if (a3 >= 0x7FFFFFEE)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFEE)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2 + 17;
  }
  return result;
}

uint64_t sub_2B3A5C(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  if ((v1 + 1) >= 2)
    return v1;
  else
    return 0;
}

_QWORD *sub_2B3A7C(_QWORD *result, unsigned int a2)
{
  if (a2 > 0x7FFFFFFE)
  {
    *result = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
  }
  else if (a2)
  {
    *result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for NavigationTab()
{
  return &type metadata for NavigationTab;
}

uint64_t sub_2B3ABC()
{
  return type metadata accessor for TabChangeAction(0);
}

uint64_t type metadata accessor for TabChangeAction(uint64_t a1)
{
  uint64_t result;

  result = qword_3C6970;
  if (!qword_3C6970)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TabChangeAction);
  return result;
}

uint64_t sub_2B3B00(uint64_t a1)
{
  _QWORD v2[6];

  v2[0] = &unk_304C28;
  v2[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v2[2] = &unk_304C40;
  v2[3] = &unk_304C40;
  v2[4] = &unk_304C40;
  v2[5] = &unk_304C40;
  return swift_updateClassMetadata2(a1, 256, 6, v2, a1 + 160);
}

uint64_t method lookup function for TabChangeAction(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for TabChangeAction);
}

uint64_t dispatch thunk of TabChangeAction.__allocating_init(title:navigationTab:actions:popToRoot:preserveTransientView:userInitiated:suppressMetrics:presentationStyle:actionMetrics:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 208))();
}

uint64_t static ErrorModel.offline(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  id v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v56;
  char *v57;
  void *v58;
  uint64_t v59;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  Swift::String v72;
  Swift::String v73;

  v63 = a1;
  v68 = a3;
  v4 = type metadata accessor for UUID(0);
  v66 = *(_QWORD *)(v4 - 8);
  v67 = v4;
  __chkstk_darwin(v4);
  v65 = (char *)&v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (int *)type metadata accessor for ActionButton(0);
  v64 = *((_QWORD *)v6 - 1);
  __chkstk_darwin(v6);
  v8 = (unint64_t *)((char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v9);
  v11 = (char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for ActionMetrics(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
  __chkstk_darwin(v15);
  v17 = (char *)&v56 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = v17;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3848);
  __chkstk_darwin(v18);
  v62 = (uint64_t)&v56 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = (void *)objc_opt_self(NSBundle);
  v21 = objc_msgSend(v20, "mainBundle");
  v72._object = (void *)0xE000000000000000;
  v22._object = (void *)0x8000000000315DF0;
  v22._countAndFlagsBits = 0xD00000000000001ALL;
  v23._countAndFlagsBits = 0;
  v23._object = (void *)0xE000000000000000;
  v72._countAndFlagsBits = 0;
  v24 = NSLocalizedString(_:tableName:bundle:value:comment:)(v22, (Swift::String_optional)0, (NSBundle)v21, v23, v72);
  object = v24._object;
  countAndFlagsBits = v24._countAndFlagsBits;

  v25 = objc_msgSend(v20, "mainBundle");
  v73._object = (void *)0xE000000000000000;
  v26._countAndFlagsBits = 0x45525F524F525245;
  v26._object = (void *)0xEB00000000595254;
  v27._countAndFlagsBits = 0;
  v27._object = (void *)0xE000000000000000;
  v73._countAndFlagsBits = 0;
  v28 = NSLocalizedString(_:tableName:bundle:value:comment:)(v26, (Swift::String_optional)0, (NSBundle)v25, v27, v73);
  v58 = v28._object;
  v59 = v28._countAndFlagsBits;

  v29 = type metadata accessor for ArtworkModel(0);
  v30 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56);
  v30(v17, 1, 1, v29);
  v31 = swift_retain();
  static ActionMetrics.notInstrumented.getter(v31);
  v32 = type metadata accessor for ClosureAction(0);
  swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
  v33 = sub_213C1C(0, 0, 32, (uint64_t)v14, v63, a2);
  swift_release(a2);
  v70 = v32;
  v71 = sub_F1C0(&qword_3B2768, (void (*)(uint64_t))type metadata accessor for ClosureAction, (uint64_t)&protocol conformance descriptor for Action);
  *(_QWORD *)&v69 = v33;
  v34 = type metadata accessor for ImpressionMetrics(0);
  v35 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56);
  v35(v11, 1, 1, v34);
  v36 = _s8ShelfKit12ActionButtonV2IDVAEycfC_0();
  v38 = v37;
  v39 = (uint64_t)v8 + v6[6];
  v30((char *)v39, 1, 1, v29);
  v40 = v6[7];
  *((_BYTE *)v8 + v40) = 2;
  v41 = (uint64_t)v8 + v6[9];
  v35((char *)v41, 1, 1, v34);
  *v8 = v36;
  v8[1] = v38;
  v42 = (uint64_t)v57;
  v43 = (unint64_t)v58;
  v8[2] = v59;
  v8[3] = v43;
  sub_3C454(v42, v39, &qword_3BEB70);
  *((_BYTE *)v8 + v40) = 2;
  sub_F4D8(&v69, (uint64_t)v8 + v6[8]);
  sub_3C454((uint64_t)v11, v41, (uint64_t *)&unk_3B8790);
  v44 = v62;
  sub_167290((uint64_t)v8, v62);
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v64 + 56))(v44, 0, 1, v6);
  v45 = (uint64_t)v11;
  v46 = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v35)(v11, 1, 1, v34);
  v47 = v65;
  UUID.init()(v46);
  v48 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
  v50 = v49;
  (*(void (**)(char *, uint64_t))(v66 + 8))(v47, v67);
  v51 = v68;
  *v68 = v48;
  v51[1] = v50;
  v52 = (uint64_t)object;
  v51[2] = countAndFlagsBits;
  v51[3] = v52;
  v53 = v51;
  v54 = type metadata accessor for ErrorModel(0);
  sub_15BD4(v44, (uint64_t)v53 + *(int *)(v54 + 28), &qword_3B3848);
  return sub_15BD4(v45, (uint64_t)v53 + *(int *)(v54 + 24), (uint64_t *)&unk_3B8790);
}

uint64_t ErrorModel.impressionMetrics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for ErrorModel(0);
  return sub_267BC(v1 + *(int *)(v3 + 24), a1, (uint64_t *)&unk_3B8790);
}

uint64_t ErrorModel.button.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for ErrorModel(0);
  return sub_267BC(v1 + *(int *)(v3 + 28), a1, &qword_3B3848);
}

uint64_t ErrorModel.init(id:message:button:impressionMetrics:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v14 = type metadata accessor for UUID(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v18 = (char *)&v22 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a2)
  {
    UUID.init()(v16);
    a1 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
    a2 = v19;
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  }
  *a7 = a1;
  a7[1] = a2;
  a7[2] = a3;
  a7[3] = a4;
  v20 = type metadata accessor for ErrorModel(0);
  sub_15BD4(a5, (uint64_t)a7 + *(int *)(v20 + 28), &qword_3B3848);
  return sub_15BD4(a6, (uint64_t)a7 + *(int *)(v20 + 24), (uint64_t *)&unk_3B8790);
}

uint64_t sub_2B41A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_267BC(v2 + *(int *)(a1 + 24), a2, (uint64_t *)&unk_3B8790);
}

uint64_t type metadata accessor for ErrorModel(uint64_t a1)
{
  uint64_t result;

  result = qword_3C6AD0;
  if (!qword_3C6AD0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ErrorModel);
  return result;
}

uint64_t sub_2B4208(uint64_t a1)
{
  uint64_t result;

  result = sub_F1C0(&qword_3C6A70, (void (*)(uint64_t))type metadata accessor for ErrorModel, (uint64_t)&protocol conformance descriptor for ErrorModel);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2B4244()
{
  return sub_F1C0(&qword_3C6A70, (void (*)(uint64_t))type metadata accessor for ErrorModel, (uint64_t)&protocol conformance descriptor for ErrorModel);
}

uint64_t *initializeBufferWithCopyOfBuffer for ErrorModel(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  int *v28;
  uint64_t v29;
  unsigned int (*v30)(_QWORD *, uint64_t, int *);
  uint64_t v31;
  _QWORD *v32;
  unsigned int (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  id *v38;
  int v39;
  id v40;
  id *v41;
  int v42;
  id v43;
  id *v44;
  int v45;
  id v46;
  id *v47;
  int v48;
  id v49;
  id *v50;
  int v51;
  id v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  void (*v65)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  _QWORD *v73;
  unsigned int (*v74)(char *, uint64_t, uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    v9 = *(int *)(a3 + 24);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for ImpressionMetrics(0);
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v14(v11, 1, v12))
    {
      v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    v17 = *(int *)(a3 + 28);
    v18 = (uint64_t *)((char *)v4 + v17);
    v19 = (uint64_t *)((char *)a2 + v17);
    v20 = (int *)type metadata accessor for ActionButton(0);
    v21 = *((_QWORD *)v20 - 1);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v21 + 48))(v19, 1, v20))
    {
      v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3848);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      v75 = v12;
      v76 = v21;
      v73 = v18;
      v74 = v14;
      v77 = v13;
      v23 = v19[1];
      *v18 = *v19;
      v18[1] = v23;
      v24 = v19[3];
      v18[2] = v19[2];
      v18[3] = v24;
      v25 = v20[6];
      v26 = (_QWORD *)((char *)v18 + v25);
      v27 = (_QWORD *)((char *)v19 + v25);
      v28 = (int *)type metadata accessor for ArtworkModel(0);
      v29 = *((_QWORD *)v28 - 1);
      v30 = *(unsigned int (**)(_QWORD *, uint64_t, int *))(v29 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v30(v27, 1, v28))
      {
        v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
        memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
        v32 = v73;
        v33 = v74;
      }
      else
      {
        v34 = v27[1];
        *v26 = *v27;
        v26[1] = v34;
        v35 = *((unsigned __int8 *)v27 + 32);
        swift_bridgeObjectRetain();
        if (v35 == 255)
        {
          *((_OWORD *)v26 + 1) = *((_OWORD *)v27 + 1);
          *((_BYTE *)v26 + 32) = *((_BYTE *)v27 + 32);
        }
        else
        {
          v37 = v27[2];
          v36 = v27[3];
          sub_3D464(v37, v36, v35);
          v26[2] = v37;
          v26[3] = v36;
          *((_BYTE *)v26 + 32) = v35;
        }
        v32 = v73;
        *(_OWORD *)(v26 + 5) = *(_OWORD *)(v27 + 5);
        v38 = (id *)(v27 + 7);
        v39 = *((unsigned __int8 *)v27 + 64);
        if (v39 == 255)
        {
          v26[7] = *v38;
          *((_BYTE *)v26 + 64) = *((_BYTE *)v27 + 64);
        }
        else
        {
          v40 = *v38;
          sub_3D47C(*v38, *((_BYTE *)v27 + 64));
          v26[7] = v40;
          *((_BYTE *)v26 + 64) = v39;
        }
        v41 = (id *)(v27 + 9);
        v42 = *((unsigned __int8 *)v27 + 80);
        if (v42 == 255)
        {
          v26[9] = *v41;
          *((_BYTE *)v26 + 80) = *((_BYTE *)v27 + 80);
        }
        else
        {
          v43 = *v41;
          sub_3D47C(*v41, *((_BYTE *)v27 + 80));
          v26[9] = v43;
          *((_BYTE *)v26 + 80) = v42;
        }
        v44 = (id *)(v27 + 11);
        v45 = *((unsigned __int8 *)v27 + 96);
        if (v45 == 255)
        {
          v26[11] = *v44;
          *((_BYTE *)v26 + 96) = *((_BYTE *)v27 + 96);
        }
        else
        {
          v46 = *v44;
          sub_3D47C(*v44, *((_BYTE *)v27 + 96));
          v26[11] = v46;
          *((_BYTE *)v26 + 96) = v45;
        }
        v47 = (id *)(v27 + 13);
        v48 = *((unsigned __int8 *)v27 + 112);
        if (v48 == 255)
        {
          v26[13] = *v47;
          *((_BYTE *)v26 + 112) = *((_BYTE *)v27 + 112);
        }
        else
        {
          v49 = *v47;
          sub_3D47C(*v47, *((_BYTE *)v27 + 112));
          v26[13] = v49;
          *((_BYTE *)v26 + 112) = v48;
        }
        v50 = (id *)(v27 + 15);
        v51 = *((unsigned __int8 *)v27 + 128);
        if (v51 == 255)
        {
          v26[15] = *v50;
          *((_BYTE *)v26 + 128) = *((_BYTE *)v27 + 128);
        }
        else
        {
          v52 = *v50;
          sub_3D47C(*v50, *((_BYTE *)v27 + 128));
          v26[15] = v52;
          *((_BYTE *)v26 + 128) = v51;
        }
        *((_BYTE *)v26 + 129) = *((_BYTE *)v27 + 129);
        v53 = v28[11];
        v54 = (char *)v26 + v53;
        v55 = (char *)v27 + v53;
        v56 = type metadata accessor for ArtworkCrop(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v56 - 8) + 16))(v54, v55, v56);
        v57 = v28[12];
        v58 = (_QWORD *)((char *)v26 + v57);
        v59 = (_QWORD *)((char *)v27 + v57);
        v60 = v59[1];
        *v58 = *v59;
        v58[1] = v60;
        *((_BYTE *)v26 + v28[13]) = *((_BYTE *)v27 + v28[13]);
        *((_BYTE *)v26 + v28[14]) = *((_BYTE *)v27 + v28[14]);
        *((_BYTE *)v26 + v28[15]) = *((_BYTE *)v27 + v28[15]);
        v61 = v28[16];
        v62 = (_QWORD *)((char *)v26 + v61);
        v63 = (_QWORD *)((char *)v27 + v61);
        v64 = v63[1];
        *v62 = *v63;
        v62[1] = v64;
        v65 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v29 + 56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v65(v26, 0, 1, v28);
        v33 = v74;
      }
      *((_BYTE *)v32 + v20[7]) = *((_BYTE *)v19 + v20[7]);
      v66 = v20[8];
      v67 = *(_OWORD *)((char *)v19 + v66 + 24);
      *(_OWORD *)((char *)v32 + v66 + 24) = v67;
      (**(void (***)(void))(v67 - 8))();
      v68 = v20[9];
      v69 = (char *)v32 + v68;
      v70 = (char *)v19 + v68;
      if (v33(v70, 1, v75))
      {
        v71 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
        memcpy(v69, v70, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v77 + 16))(v69, v70, v75);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v77 + 56))(v69, 0, 1, v75);
      }
      (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v76 + 56))(v32, 0, 1, v20);
    }
  }
  return v4;
}

uint64_t destroy for ErrorModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  int *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for ImpressionMetrics(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v7(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  v8 = a1 + *(int *)(a2 + 28);
  v9 = (int *)type metadata accessor for ActionButton(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v9 - 1) + 48))(v8, 1, v9);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v11 = v8 + v9[6];
    v12 = type metadata accessor for ArtworkModel(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v11, 1, v12))
    {
      swift_bridgeObjectRelease();
      v13 = *(unsigned __int8 *)(v11 + 32);
      if (v13 != 255)
        sub_3B5BC(*(_QWORD *)(v11 + 16), *(_QWORD *)(v11 + 24), v13);
      v14 = *(unsigned __int8 *)(v11 + 64);
      if (v14 != 255)
        sub_3D624(*(id *)(v11 + 56), v14);
      v15 = *(unsigned __int8 *)(v11 + 80);
      if (v15 != 255)
        sub_3D624(*(id *)(v11 + 72), v15);
      v16 = *(unsigned __int8 *)(v11 + 96);
      if (v16 != 255)
        sub_3D624(*(id *)(v11 + 88), v16);
      v17 = *(unsigned __int8 *)(v11 + 112);
      if (v17 != 255)
        sub_3D624(*(id *)(v11 + 104), v17);
      v18 = *(unsigned __int8 *)(v11 + 128);
      if (v18 != 255)
        sub_3D624(*(id *)(v11 + 120), v18);
      v19 = v11 + *(int *)(v12 + 44);
      v20 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v19, v20);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    __swift_destroy_boxed_opaque_existential_1((_QWORD *)(v8 + v9[8]));
    v21 = v8 + v9[9];
    result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v7)(v21, 1, v5);
    if (!(_DWORD)result)
      return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v21, v5);
  }
  return result;
}

_QWORD *initializeWithCopy for ErrorModel(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  int *v26;
  uint64_t v27;
  unsigned int (*v28)(_QWORD *, uint64_t, int *);
  uint64_t v29;
  unsigned int (*v30)(char *, uint64_t, uint64_t);
  _QWORD *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  id *v36;
  int v37;
  id v38;
  id *v39;
  int v40;
  id v41;
  id *v42;
  int v43;
  id v44;
  id *v45;
  int v46;
  id v47;
  id *v48;
  int v49;
  id v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  void (*v63)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int (*v74)(char *, uint64_t, uint64_t);
  uint64_t v75;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  v8 = *(int *)(a3 + 24);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for ImpressionMetrics(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v13(v10, 1, v11))
  {
    v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v15 = *(int *)(a3 + 28);
  v16 = (_QWORD *)((char *)a1 + v15);
  v17 = (_QWORD *)((char *)a2 + v15);
  v18 = (int *)type metadata accessor for ActionButton(0);
  v19 = *((_QWORD *)v18 - 1);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v19 + 48))(v17, 1, v18))
  {
    v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3848);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    v72 = v11;
    v73 = v19;
    v74 = v13;
    v75 = v12;
    v21 = v17[1];
    *v16 = *v17;
    v16[1] = v21;
    v22 = v17[3];
    v16[2] = v17[2];
    v16[3] = v22;
    v23 = v18[6];
    v71 = v16;
    v24 = (_QWORD *)((char *)v16 + v23);
    v25 = (_QWORD *)((char *)v17 + v23);
    v26 = (int *)type metadata accessor for ArtworkModel(0);
    v27 = *((_QWORD *)v26 - 1);
    v28 = *(unsigned int (**)(_QWORD *, uint64_t, int *))(v27 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v28(v25, 1, v26))
    {
      v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
      v30 = v74;
      v31 = v71;
    }
    else
    {
      v32 = v25[1];
      *v24 = *v25;
      v24[1] = v32;
      v33 = *((unsigned __int8 *)v25 + 32);
      swift_bridgeObjectRetain();
      if (v33 == 255)
      {
        *((_OWORD *)v24 + 1) = *((_OWORD *)v25 + 1);
        *((_BYTE *)v24 + 32) = *((_BYTE *)v25 + 32);
      }
      else
      {
        v35 = v25[2];
        v34 = v25[3];
        sub_3D464(v35, v34, v33);
        v24[2] = v35;
        v24[3] = v34;
        *((_BYTE *)v24 + 32) = v33;
      }
      v31 = v71;
      *(_OWORD *)(v24 + 5) = *(_OWORD *)(v25 + 5);
      v36 = (id *)(v25 + 7);
      v37 = *((unsigned __int8 *)v25 + 64);
      if (v37 == 255)
      {
        v24[7] = *v36;
        *((_BYTE *)v24 + 64) = *((_BYTE *)v25 + 64);
      }
      else
      {
        v38 = *v36;
        sub_3D47C(*v36, *((_BYTE *)v25 + 64));
        v24[7] = v38;
        *((_BYTE *)v24 + 64) = v37;
      }
      v39 = (id *)(v25 + 9);
      v40 = *((unsigned __int8 *)v25 + 80);
      if (v40 == 255)
      {
        v24[9] = *v39;
        *((_BYTE *)v24 + 80) = *((_BYTE *)v25 + 80);
      }
      else
      {
        v41 = *v39;
        sub_3D47C(*v39, *((_BYTE *)v25 + 80));
        v24[9] = v41;
        *((_BYTE *)v24 + 80) = v40;
      }
      v42 = (id *)(v25 + 11);
      v43 = *((unsigned __int8 *)v25 + 96);
      if (v43 == 255)
      {
        v24[11] = *v42;
        *((_BYTE *)v24 + 96) = *((_BYTE *)v25 + 96);
      }
      else
      {
        v44 = *v42;
        sub_3D47C(*v42, *((_BYTE *)v25 + 96));
        v24[11] = v44;
        *((_BYTE *)v24 + 96) = v43;
      }
      v45 = (id *)(v25 + 13);
      v46 = *((unsigned __int8 *)v25 + 112);
      if (v46 == 255)
      {
        v24[13] = *v45;
        *((_BYTE *)v24 + 112) = *((_BYTE *)v25 + 112);
      }
      else
      {
        v47 = *v45;
        sub_3D47C(*v45, *((_BYTE *)v25 + 112));
        v24[13] = v47;
        *((_BYTE *)v24 + 112) = v46;
      }
      v48 = (id *)(v25 + 15);
      v49 = *((unsigned __int8 *)v25 + 128);
      if (v49 == 255)
      {
        v24[15] = *v48;
        *((_BYTE *)v24 + 128) = *((_BYTE *)v25 + 128);
      }
      else
      {
        v50 = *v48;
        sub_3D47C(*v48, *((_BYTE *)v25 + 128));
        v24[15] = v50;
        *((_BYTE *)v24 + 128) = v49;
      }
      *((_BYTE *)v24 + 129) = *((_BYTE *)v25 + 129);
      v51 = v26[11];
      v52 = (char *)v24 + v51;
      v53 = (char *)v25 + v51;
      v54 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v54 - 8) + 16))(v52, v53, v54);
      v55 = v26[12];
      v56 = (_QWORD *)((char *)v24 + v55);
      v57 = (_QWORD *)((char *)v25 + v55);
      v58 = v57[1];
      *v56 = *v57;
      v56[1] = v58;
      *((_BYTE *)v24 + v26[13]) = *((_BYTE *)v25 + v26[13]);
      *((_BYTE *)v24 + v26[14]) = *((_BYTE *)v25 + v26[14]);
      *((_BYTE *)v24 + v26[15]) = *((_BYTE *)v25 + v26[15]);
      v59 = v26[16];
      v60 = (_QWORD *)((char *)v24 + v59);
      v61 = (_QWORD *)((char *)v25 + v59);
      v62 = v61[1];
      *v60 = *v61;
      v60[1] = v62;
      v63 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v27 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v63(v24, 0, 1, v26);
      v30 = v74;
    }
    *((_BYTE *)v31 + v18[7]) = *((_BYTE *)v17 + v18[7]);
    v64 = v18[8];
    v65 = *(_OWORD *)((char *)v17 + v64 + 24);
    *(_OWORD *)((char *)v31 + v64 + 24) = v65;
    (**(void (***)(void))(v65 - 8))();
    v66 = v18[9];
    v67 = (char *)v31 + v66;
    v68 = (char *)v17 + v66;
    if (v30(v68, 1, v72))
    {
      v69 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
      memcpy(v67, v68, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v75 + 16))(v67, v68, v72);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v75 + 56))(v67, 0, 1, v72);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v73 + 56))(v31, 0, 1, v18);
  }
  return a1;
}

_QWORD *assignWithCopy for ErrorModel(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(_QWORD *, uint64_t, uint64_t);
  int v21;
  int v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  int *v26;
  uint64_t v27;
  unsigned int (*v28)(_QWORD *, uint64_t, int *);
  uint64_t v29;
  uint64_t v30;
  unsigned int (*v31)(char *, uint64_t, uint64_t);
  _QWORD *v32;
  size_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  unsigned __int8 *v38;
  int *v39;
  uint64_t (*v40)(char *, uint64_t, int *);
  int v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  id *v52;
  int v53;
  id v54;
  id v55;
  id *v56;
  int v57;
  id v58;
  id v59;
  id *v60;
  int v61;
  id v62;
  id v63;
  id *v64;
  int v65;
  id v66;
  id v67;
  id *v68;
  int v69;
  id v70;
  id v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  void (*v82)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v91;
  __int128 *v92;
  __int128 *v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unsigned __int8 v99;
  __int128 v100;
  id *v101;
  int v102;
  id v103;
  id v104;
  id *v105;
  int v106;
  id v107;
  id v108;
  id *v109;
  int v110;
  id v111;
  id v112;
  id *v113;
  int v114;
  id v115;
  id v116;
  id *v117;
  int v118;
  id v119;
  id v120;
  uint64_t v121;
  char *v122;
  unsigned __int8 *v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  unsigned __int8 *v127;
  uint64_t v128;
  char *v129;
  unsigned __int8 *v130;
  void (*v131)(char *, _QWORD, uint64_t, int *);
  uint64_t v132;
  uint64_t v133;
  unsigned __int8 v134;
  __int128 v135;
  id *v136;
  id *v137;
  int v138;
  id v139;
  void *v140;
  char v141;
  id v142;
  unsigned __int8 v143;
  id v144;
  id *v145;
  id *v146;
  int v147;
  id v148;
  void *v149;
  char v150;
  id v151;
  unsigned __int8 v152;
  id v153;
  id *v154;
  id *v155;
  int v156;
  id v157;
  void *v158;
  char v159;
  id v160;
  unsigned __int8 v161;
  id v162;
  id *v163;
  id *v164;
  int v165;
  id v166;
  void *v167;
  char v168;
  id v169;
  unsigned __int8 v170;
  id v171;
  id *v172;
  id *v173;
  int v174;
  id v175;
  void *v176;
  char v177;
  id v178;
  unsigned __int8 v179;
  id v180;
  uint64_t v181;
  char *v182;
  unsigned __int8 *v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  unsigned __int8 *v187;
  uint64_t v188;
  char *v189;
  unsigned __int8 *v190;
  uint64_t v191;
  char *v192;
  char *v193;
  int v194;
  int v195;
  uint64_t v196;
  _QWORD *v197;
  uint64_t v198;
  uint64_t v199;
  int *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t (*v203)(char *, uint64_t, uint64_t);
  uint64_t (*v204)(char *, uint64_t, uint64_t);
  int *v205;
  int *v206;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for ImpressionMetrics(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  v15 = *(int *)(a3 + 28);
  v16 = (_QWORD *)((char *)a1 + v15);
  v17 = (_QWORD *)((char *)a2 + v15);
  v18 = type metadata accessor for ActionButton(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v19 + 48);
  v21 = v20(v16, 1, v18);
  v22 = v20(v17, 1, v18);
  if (!v21)
  {
    if (v22)
    {
      sub_145D8((uint64_t)v16, type metadata accessor for ActionButton);
      goto LABEL_13;
    }
    v204 = v11;
    *v16 = *v17;
    v16[1] = v17[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v16[2] = v17[2];
    v16[3] = v17[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v206 = (int *)v18;
    v36 = *(int *)(v18 + 24);
    v37 = (char *)v16 + v36;
    v38 = (unsigned __int8 *)v17 + v36;
    v39 = (int *)type metadata accessor for ArtworkModel(0);
    v198 = *((_QWORD *)v39 - 1);
    v40 = *(uint64_t (**)(char *, uint64_t, int *))(v198 + 48);
    v41 = v40(v37, 1, v39);
    v200 = v39;
    v42 = v40((char *)v38, 1, v39);
    if (v41)
    {
      if (!v42)
      {
        v43 = v10;
        v202 = v9;
        *(_QWORD *)v37 = *(_QWORD *)v38;
        *((_QWORD *)v37 + 1) = *((_QWORD *)v38 + 1);
        v44 = v38[32];
        swift_bridgeObjectRetain();
        if (v44 == 255)
        {
          v100 = *((_OWORD *)v38 + 1);
          v37[32] = v38[32];
          *((_OWORD *)v37 + 1) = v100;
        }
        else
        {
          v46 = *((_QWORD *)v38 + 2);
          v45 = *((_QWORD *)v38 + 3);
          sub_3D464(v46, v45, v44);
          *((_QWORD *)v37 + 2) = v46;
          *((_QWORD *)v37 + 3) = v45;
          v37[32] = v44;
        }
        *((_QWORD *)v37 + 5) = *((_QWORD *)v38 + 5);
        *((_QWORD *)v37 + 6) = *((_QWORD *)v38 + 6);
        v101 = (id *)(v38 + 56);
        v102 = v38[64];
        if (v102 == 255)
        {
          v104 = *v101;
          v37[64] = v38[64];
          *((_QWORD *)v37 + 7) = v104;
        }
        else
        {
          v103 = *v101;
          sub_3D47C(*v101, v38[64]);
          *((_QWORD *)v37 + 7) = v103;
          v37[64] = v102;
        }
        v10 = v43;
        v105 = (id *)(v38 + 72);
        v106 = v38[80];
        if (v106 == 255)
        {
          v108 = *v105;
          v37[80] = v38[80];
          *((_QWORD *)v37 + 9) = v108;
        }
        else
        {
          v107 = *v105;
          sub_3D47C(*v105, v38[80]);
          *((_QWORD *)v37 + 9) = v107;
          v37[80] = v106;
        }
        v109 = (id *)(v38 + 88);
        v110 = v38[96];
        if (v110 == 255)
        {
          v112 = *v109;
          v37[96] = v38[96];
          *((_QWORD *)v37 + 11) = v112;
        }
        else
        {
          v111 = *v109;
          sub_3D47C(*v109, v38[96]);
          *((_QWORD *)v37 + 11) = v111;
          v37[96] = v110;
        }
        v113 = (id *)(v38 + 104);
        v114 = v38[112];
        if (v114 == 255)
        {
          v116 = *v113;
          v37[112] = v38[112];
          *((_QWORD *)v37 + 13) = v116;
        }
        else
        {
          v115 = *v113;
          sub_3D47C(*v113, v38[112]);
          *((_QWORD *)v37 + 13) = v115;
          v37[112] = v114;
        }
        v117 = (id *)(v38 + 120);
        v118 = v38[128];
        if (v118 == 255)
        {
          v120 = *v117;
          v37[128] = v38[128];
          *((_QWORD *)v37 + 15) = v120;
        }
        else
        {
          v119 = *v117;
          sub_3D47C(*v117, v38[128]);
          *((_QWORD *)v37 + 15) = v119;
          v37[128] = v118;
        }
        v37[129] = v38[129];
        v121 = v39[11];
        v122 = &v37[v121];
        v123 = &v38[v121];
        v124 = type metadata accessor for ArtworkCrop(0);
        (*(void (**)(char *, unsigned __int8 *, uint64_t))(*(_QWORD *)(v124 - 8) + 16))(v122, v123, v124);
        v125 = v39[12];
        v126 = &v37[v125];
        v127 = &v38[v125];
        *(_QWORD *)v126 = *(_QWORD *)v127;
        *((_QWORD *)v126 + 1) = *((_QWORD *)v127 + 1);
        v37[v39[13]] = v38[v39[13]];
        v37[v39[14]] = v38[v39[14]];
        v37[v39[15]] = v38[v39[15]];
        v128 = v39[16];
        v129 = &v37[v128];
        v130 = &v38[v128];
        *(_QWORD *)v129 = *(_QWORD *)v130;
        *((_QWORD *)v129 + 1) = *((_QWORD *)v130 + 1);
        v131 = *(void (**)(char *, _QWORD, uint64_t, int *))(v198 + 56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v131(v37, 0, 1, v200);
        v9 = v202;
        goto LABEL_107;
      }
    }
    else
    {
      if (!v42)
      {
        v91 = v10;
        *(_QWORD *)v37 = *(_QWORD *)v38;
        *((_QWORD *)v37 + 1) = *((_QWORD *)v38 + 1);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v92 = (__int128 *)(v37 + 16);
        v93 = (__int128 *)(v38 + 16);
        v94 = v38[32];
        if (v37[32] == 255)
        {
          if (v94 == 255)
          {
            v135 = *v93;
            v37[32] = v38[32];
            *v92 = v135;
          }
          else
          {
            v133 = *((_QWORD *)v38 + 2);
            v132 = *((_QWORD *)v38 + 3);
            sub_3D464(v133, v132, v38[32]);
            *((_QWORD *)v37 + 2) = v133;
            *((_QWORD *)v37 + 3) = v132;
            v37[32] = v94;
          }
        }
        else if (v94 == 255)
        {
          sub_3E43C((uint64_t)(v37 + 16));
          v134 = v38[32];
          *v92 = *v93;
          v37[32] = v134;
        }
        else
        {
          v96 = *((_QWORD *)v38 + 2);
          v95 = *((_QWORD *)v38 + 3);
          sub_3D464(v96, v95, v38[32]);
          v97 = *((_QWORD *)v37 + 2);
          v98 = *((_QWORD *)v37 + 3);
          *((_QWORD *)v37 + 2) = v96;
          *((_QWORD *)v37 + 3) = v95;
          v99 = v37[32];
          v37[32] = v94;
          sub_3B5BC(v97, v98, v99);
        }
        *((_QWORD *)v37 + 5) = *((_QWORD *)v38 + 5);
        *((_QWORD *)v37 + 6) = *((_QWORD *)v38 + 6);
        v136 = (id *)(v37 + 56);
        v137 = (id *)(v38 + 56);
        v138 = v38[64];
        if (v37[64] == 255)
        {
          if (v138 == 255)
          {
            v144 = *v137;
            v37[64] = v38[64];
            *v136 = v144;
          }
          else
          {
            v142 = *v137;
            sub_3D47C(*v137, v38[64]);
            *((_QWORD *)v37 + 7) = v142;
            v37[64] = v138;
          }
        }
        else if (v138 == 255)
        {
          sub_3E470((uint64_t)(v37 + 56));
          v143 = v38[64];
          *v136 = *v137;
          v37[64] = v143;
        }
        else
        {
          v139 = *v137;
          sub_3D47C(*v137, v38[64]);
          v140 = (void *)*((_QWORD *)v37 + 7);
          *((_QWORD *)v37 + 7) = v139;
          v141 = v37[64];
          v37[64] = v138;
          sub_3D624(v140, v141);
        }
        v145 = (id *)(v37 + 72);
        v146 = (id *)(v38 + 72);
        v147 = v38[80];
        if (v37[80] == 255)
        {
          if (v147 == 255)
          {
            v153 = *v146;
            v37[80] = v38[80];
            *v145 = v153;
          }
          else
          {
            v151 = *v146;
            sub_3D47C(*v146, v38[80]);
            *((_QWORD *)v37 + 9) = v151;
            v37[80] = v147;
          }
        }
        else if (v147 == 255)
        {
          sub_3E470((uint64_t)(v37 + 72));
          v152 = v38[80];
          *v145 = *v146;
          v37[80] = v152;
        }
        else
        {
          v148 = *v146;
          sub_3D47C(*v146, v38[80]);
          v149 = (void *)*((_QWORD *)v37 + 9);
          *((_QWORD *)v37 + 9) = v148;
          v150 = v37[80];
          v37[80] = v147;
          sub_3D624(v149, v150);
        }
        v154 = (id *)(v37 + 88);
        v155 = (id *)(v38 + 88);
        v156 = v38[96];
        if (v37[96] == 255)
        {
          if (v156 == 255)
          {
            v162 = *v155;
            v37[96] = v38[96];
            *v154 = v162;
          }
          else
          {
            v160 = *v155;
            sub_3D47C(*v155, v38[96]);
            *((_QWORD *)v37 + 11) = v160;
            v37[96] = v156;
          }
        }
        else if (v156 == 255)
        {
          sub_3E470((uint64_t)(v37 + 88));
          v161 = v38[96];
          *v154 = *v155;
          v37[96] = v161;
        }
        else
        {
          v157 = *v155;
          sub_3D47C(*v155, v38[96]);
          v158 = (void *)*((_QWORD *)v37 + 11);
          *((_QWORD *)v37 + 11) = v157;
          v159 = v37[96];
          v37[96] = v156;
          sub_3D624(v158, v159);
        }
        v163 = (id *)(v37 + 104);
        v164 = (id *)(v38 + 104);
        v165 = v38[112];
        if (v37[112] == 255)
        {
          if (v165 == 255)
          {
            v171 = *v164;
            v37[112] = v38[112];
            *v163 = v171;
          }
          else
          {
            v169 = *v164;
            sub_3D47C(*v164, v38[112]);
            *((_QWORD *)v37 + 13) = v169;
            v37[112] = v165;
          }
        }
        else if (v165 == 255)
        {
          sub_3E470((uint64_t)(v37 + 104));
          v170 = v38[112];
          *v163 = *v164;
          v37[112] = v170;
        }
        else
        {
          v166 = *v164;
          sub_3D47C(*v164, v38[112]);
          v167 = (void *)*((_QWORD *)v37 + 13);
          *((_QWORD *)v37 + 13) = v166;
          v168 = v37[112];
          v37[112] = v165;
          sub_3D624(v167, v168);
        }
        v172 = (id *)(v37 + 120);
        v173 = (id *)(v38 + 120);
        v174 = v38[128];
        if (v37[128] == 255)
        {
          if (v174 == 255)
          {
            v180 = *v173;
            v37[128] = v38[128];
            *v172 = v180;
          }
          else
          {
            v178 = *v173;
            sub_3D47C(*v173, v38[128]);
            *((_QWORD *)v37 + 15) = v178;
            v37[128] = v174;
          }
        }
        else if (v174 == 255)
        {
          sub_3E470((uint64_t)(v37 + 120));
          v179 = v38[128];
          *v172 = *v173;
          v37[128] = v179;
        }
        else
        {
          v175 = *v173;
          sub_3D47C(*v173, v38[128]);
          v176 = (void *)*((_QWORD *)v37 + 15);
          *((_QWORD *)v37 + 15) = v175;
          v177 = v37[128];
          v37[128] = v174;
          sub_3D624(v176, v177);
        }
        v37[129] = v38[129];
        v181 = v200[11];
        v182 = &v37[v181];
        v183 = &v38[v181];
        v184 = type metadata accessor for ArtworkCrop(0);
        (*(void (**)(char *, unsigned __int8 *, uint64_t))(*(_QWORD *)(v184 - 8) + 24))(v182, v183, v184);
        v185 = v200[12];
        v186 = &v37[v185];
        v187 = &v38[v185];
        *(_QWORD *)v186 = *(_QWORD *)v187;
        *((_QWORD *)v186 + 1) = *((_QWORD *)v187 + 1);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v37[v200[13]] = v38[v200[13]];
        v37[v200[14]] = v38[v200[14]];
        v37[v200[15]] = v38[v200[15]];
        v188 = v200[16];
        v189 = &v37[v188];
        v190 = &v38[v188];
        *(_QWORD *)v189 = *(_QWORD *)v190;
        *((_QWORD *)v189 + 1) = *((_QWORD *)v190 + 1);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v10 = v91;
        goto LABEL_107;
      }
      sub_145D8((uint64_t)v37, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
    }
    v50 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
    memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
LABEL_107:
    *((_BYTE *)v16 + v206[7]) = *((_BYTE *)v17 + v206[7]);
    __swift_assign_boxed_opaque_existential_1((_QWORD *)((char *)v16 + v206[8]), (_QWORD *)((char *)v17 + v206[8]));
    v191 = v206[9];
    v192 = (char *)v16 + v191;
    v193 = (char *)v17 + v191;
    v194 = v204(v192, 1, v9);
    v195 = v204(v193, 1, v9);
    if (v194)
    {
      if (!v195)
      {
        (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v192, v193, v9);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v192, 0, 1, v9);
        return a1;
      }
    }
    else
    {
      if (!v195)
      {
        (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v192, v193, v9);
        return a1;
      }
      (*(void (**)(char *, uint64_t))(v10 + 8))(v192, v9);
    }
    v33 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790) - 8) + 64);
    v34 = v192;
    v35 = v193;
    goto LABEL_14;
  }
  if (v22)
  {
LABEL_13:
    v33 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B3848) - 8) + 64);
    v34 = (char *)v16;
    v35 = (char *)v17;
LABEL_14:
    memcpy(v34, v35, v33);
    return a1;
  }
  v201 = v9;
  v203 = v11;
  v197 = v17;
  v199 = v10;
  *v16 = *v17;
  v16[1] = v17[1];
  v16[2] = v17[2];
  v16[3] = v17[3];
  v205 = (int *)v18;
  v23 = *(int *)(v18 + 24);
  v24 = (_QWORD *)((char *)v16 + v23);
  v25 = (_QWORD *)((char *)v17 + v23);
  v26 = (int *)type metadata accessor for ArtworkModel(0);
  v27 = *((_QWORD *)v26 - 1);
  v28 = *(unsigned int (**)(_QWORD *, uint64_t, int *))(v27 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v28(v25, 1, v26))
  {
    v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    v30 = v201;
    v31 = (unsigned int (*)(char *, uint64_t, uint64_t))v11;
    v32 = v197;
  }
  else
  {
    v196 = v27;
    *v24 = *v25;
    v24[1] = v25[1];
    v47 = *((unsigned __int8 *)v25 + 32);
    swift_bridgeObjectRetain();
    if (v47 == 255)
    {
      v51 = *((_OWORD *)v25 + 1);
      *((_BYTE *)v24 + 32) = *((_BYTE *)v25 + 32);
      *((_OWORD *)v24 + 1) = v51;
    }
    else
    {
      v49 = v25[2];
      v48 = v25[3];
      sub_3D464(v49, v48, v47);
      v24[2] = v49;
      v24[3] = v48;
      *((_BYTE *)v24 + 32) = v47;
    }
    v32 = v197;
    v24[5] = v25[5];
    v24[6] = v25[6];
    v52 = (id *)(v25 + 7);
    v53 = *((unsigned __int8 *)v25 + 64);
    if (v53 == 255)
    {
      v55 = *v52;
      *((_BYTE *)v24 + 64) = *((_BYTE *)v25 + 64);
      v24[7] = v55;
    }
    else
    {
      v54 = *v52;
      sub_3D47C(*v52, *((_BYTE *)v25 + 64));
      v24[7] = v54;
      *((_BYTE *)v24 + 64) = v53;
    }
    v10 = v199;
    v56 = (id *)(v25 + 9);
    v57 = *((unsigned __int8 *)v25 + 80);
    if (v57 == 255)
    {
      v59 = *v56;
      *((_BYTE *)v24 + 80) = *((_BYTE *)v25 + 80);
      v24[9] = v59;
    }
    else
    {
      v58 = *v56;
      sub_3D47C(*v56, *((_BYTE *)v25 + 80));
      v24[9] = v58;
      *((_BYTE *)v24 + 80) = v57;
    }
    v60 = (id *)(v25 + 11);
    v61 = *((unsigned __int8 *)v25 + 96);
    if (v61 == 255)
    {
      v63 = *v60;
      *((_BYTE *)v24 + 96) = *((_BYTE *)v25 + 96);
      v24[11] = v63;
    }
    else
    {
      v62 = *v60;
      sub_3D47C(*v60, *((_BYTE *)v25 + 96));
      v24[11] = v62;
      *((_BYTE *)v24 + 96) = v61;
    }
    v64 = (id *)(v25 + 13);
    v65 = *((unsigned __int8 *)v25 + 112);
    if (v65 == 255)
    {
      v67 = *v64;
      *((_BYTE *)v24 + 112) = *((_BYTE *)v25 + 112);
      v24[13] = v67;
    }
    else
    {
      v66 = *v64;
      sub_3D47C(*v64, *((_BYTE *)v25 + 112));
      v24[13] = v66;
      *((_BYTE *)v24 + 112) = v65;
    }
    v68 = (id *)(v25 + 15);
    v69 = *((unsigned __int8 *)v25 + 128);
    if (v69 == 255)
    {
      v71 = *v68;
      *((_BYTE *)v24 + 128) = *((_BYTE *)v25 + 128);
      v24[15] = v71;
    }
    else
    {
      v70 = *v68;
      sub_3D47C(*v68, *((_BYTE *)v25 + 128));
      v24[15] = v70;
      *((_BYTE *)v24 + 128) = v69;
    }
    *((_BYTE *)v24 + 129) = *((_BYTE *)v25 + 129);
    v72 = v26[11];
    v73 = (char *)v24 + v72;
    v74 = (char *)v25 + v72;
    v75 = type metadata accessor for ArtworkCrop(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v75 - 8) + 16))(v73, v74, v75);
    v76 = v26[12];
    v77 = (_QWORD *)((char *)v24 + v76);
    v78 = (_QWORD *)((char *)v25 + v76);
    *v77 = *v78;
    v77[1] = v78[1];
    *((_BYTE *)v24 + v26[13]) = *((_BYTE *)v25 + v26[13]);
    *((_BYTE *)v24 + v26[14]) = *((_BYTE *)v25 + v26[14]);
    *((_BYTE *)v24 + v26[15]) = *((_BYTE *)v25 + v26[15]);
    v79 = v26[16];
    v80 = (_QWORD *)((char *)v24 + v79);
    v81 = (_QWORD *)((char *)v25 + v79);
    *v80 = *v81;
    v80[1] = v81[1];
    v82 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v196 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v82(v24, 0, 1, v26);
    v30 = v201;
    v31 = (unsigned int (*)(char *, uint64_t, uint64_t))v203;
  }
  *((_BYTE *)v16 + v205[7]) = *((_BYTE *)v32 + v205[7]);
  v83 = v205[8];
  v84 = (char *)v16 + v83;
  v85 = *(_QWORD *)((char *)v32 + v83 + 24);
  *((_QWORD *)v84 + 3) = v85;
  *((_QWORD *)v84 + 4) = *(_QWORD *)((char *)v32 + v83 + 32);
  (**(void (***)(void))(v85 - 8))();
  v86 = v205[9];
  v87 = (char *)v16 + v86;
  v88 = (char *)v32 + v86;
  if (v31(v88, 1, v30))
  {
    v89 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
    memcpy(v87, v88, *(_QWORD *)(*(_QWORD *)(v89 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v87, v88, v30);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v87, 0, 1, v30);
  }
  (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v19 + 56))(v16, 0, 1, v205);
  return a1;
}

_OWORD *initializeWithTake for ErrorModel(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  _OWORD *v22;
  _OWORD *v23;
  int *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  __int128 v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v38;
  char *v39;
  uint64_t v40;
  unsigned int (*v41)(char *, uint64_t, uint64_t);

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = *(int *)(a3 + 24);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for ImpressionMetrics(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  if (v12(v9, 1, v10))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v14 = *(int *)(a3 + 28);
  v15 = (_OWORD *)((char *)a1 + v14);
  v16 = (_OWORD *)((char *)a2 + v14);
  v17 = (int *)type metadata accessor for ActionButton(0);
  v18 = *((_QWORD *)v17 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v18 + 48))(v16, 1, v17))
  {
    v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3848);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    v41 = v12;
    v20 = v16[1];
    *v15 = *v16;
    v15[1] = v20;
    v21 = v17[6];
    v22 = (_OWORD *)((char *)v15 + v21);
    v23 = (_OWORD *)((char *)v16 + v21);
    v24 = (int *)type metadata accessor for ArtworkModel(0);
    v40 = *((_QWORD *)v24 - 1);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v40 + 48))(v23, 1, v24))
    {
      v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
      memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    else
    {
      v26 = v23[1];
      *v22 = *v23;
      v22[1] = v26;
      *((_BYTE *)v22 + 32) = *((_BYTE *)v23 + 32);
      *(_OWORD *)((char *)v22 + 40) = *(_OWORD *)((char *)v23 + 40);
      *((_QWORD *)v22 + 7) = *((_QWORD *)v23 + 7);
      *((_BYTE *)v22 + 64) = *((_BYTE *)v23 + 64);
      *(_OWORD *)((char *)v22 + 113) = *(_OWORD *)((char *)v23 + 113);
      *(_OWORD *)((char *)v22 + 104) = *(_OWORD *)((char *)v23 + 104);
      *(_OWORD *)((char *)v22 + 88) = *(_OWORD *)((char *)v23 + 88);
      *(_OWORD *)((char *)v22 + 72) = *(_OWORD *)((char *)v23 + 72);
      *((_BYTE *)v22 + 129) = *((_BYTE *)v23 + 129);
      v27 = v24[11];
      v38 = (char *)v23 + v27;
      v39 = (char *)v22 + v27;
      v28 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(v39, v38, v28);
      *(_OWORD *)((char *)v22 + v24[12]) = *(_OWORD *)((char *)v23 + v24[12]);
      *((_BYTE *)v22 + v24[13]) = *((_BYTE *)v23 + v24[13]);
      *((_BYTE *)v22 + v24[14]) = *((_BYTE *)v23 + v24[14]);
      *((_BYTE *)v22 + v24[15]) = *((_BYTE *)v23 + v24[15]);
      *(_OWORD *)((char *)v22 + v24[16]) = *(_OWORD *)((char *)v23 + v24[16]);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v40 + 56))(v22, 0, 1, v24);
    }
    *((_BYTE *)v15 + v17[7]) = *((_BYTE *)v16 + v17[7]);
    v29 = v17[8];
    v30 = (char *)v15 + v29;
    v31 = (char *)v16 + v29;
    v32 = *((_OWORD *)v31 + 1);
    *(_OWORD *)v30 = *(_OWORD *)v31;
    *((_OWORD *)v30 + 1) = v32;
    *((_QWORD *)v30 + 4) = *((_QWORD *)v31 + 4);
    v33 = v17[9];
    v34 = (char *)v15 + v33;
    v35 = (char *)v16 + v33;
    if (v41(v35, 1, v10))
    {
      v36 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
      memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v34, v35, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v34, 0, 1, v10);
    }
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v18 + 56))(v15, 0, 1, v17);
  }
  return a1;
}

_QWORD *assignWithTake for ErrorModel(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(char *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  int *v20;
  uint64_t v21;
  uint64_t (*v22)(_QWORD *, uint64_t, int *);
  int v23;
  int v24;
  __int128 v25;
  uint64_t v26;
  _OWORD *v27;
  _OWORD *v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  size_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t (*v41)(uint64_t, uint64_t, uint64_t);
  int v42;
  int v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  __int128 v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  __int128 v65;
  uint64_t v66;
  char *v67;
  char *v68;
  int v69;
  int v70;
  uint64_t v71;
  _OWORD *v72;
  int v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  int v78;
  int v79;
  void *v80;
  _QWORD *v81;
  int v82;
  int v83;
  void *v84;
  _QWORD *v85;
  int v86;
  int v87;
  void *v88;
  _QWORD *v89;
  int v90;
  int v91;
  void *v92;
  _QWORD *v93;
  int v94;
  int v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  int *v113;
  char *v114;
  unsigned int (*v115)(char *, uint64_t, uint64_t);
  uint64_t (*v116)(char *, uint64_t, uint64_t);
  uint64_t v117;
  uint64_t v118;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  v8 = *(int *)(a3 + 24);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for ImpressionMetrics(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v11);
LABEL_6:
    v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 40))(v9, v10, v11);
LABEL_7:
  v17 = *(int *)(a3 + 28);
  v18 = (_QWORD *)((char *)a1 + v17);
  v19 = (_QWORD *)((char *)a2 + v17);
  v20 = (int *)type metadata accessor for ActionButton(0);
  v21 = *((_QWORD *)v20 - 1);
  v22 = *(uint64_t (**)(_QWORD *, uint64_t, int *))(v21 + 48);
  v23 = v22(v18, 1, v20);
  v24 = v22(v19, 1, v20);
  if (!v23)
  {
    if (v24)
    {
      sub_145D8((uint64_t)v18, type metadata accessor for ActionButton);
      goto LABEL_13;
    }
    v116 = v13;
    v118 = v12;
    v35 = v19[1];
    *v18 = *v19;
    v18[1] = v35;
    swift_bridgeObjectRelease();
    v36 = v19[3];
    v18[2] = v19[2];
    v18[3] = v36;
    swift_bridgeObjectRelease();
    v37 = v20[6];
    v38 = (uint64_t)v18 + v37;
    v39 = (char *)v19 + v37;
    v40 = type metadata accessor for ArtworkModel(0);
    v111 = *(_QWORD *)(v40 - 8);
    v41 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v111 + 48);
    v42 = v41(v38, 1, v40);
    v113 = (int *)v40;
    v43 = v41((uint64_t)v39, 1, v40);
    if (v42)
    {
      if (!v43)
      {
        v44 = *((_OWORD *)v39 + 1);
        *(_OWORD *)v38 = *(_OWORD *)v39;
        *(_OWORD *)(v38 + 16) = v44;
        *(_BYTE *)(v38 + 32) = v39[32];
        *(_OWORD *)(v38 + 40) = *(_OWORD *)(v39 + 40);
        *(_QWORD *)(v38 + 56) = *((_QWORD *)v39 + 7);
        *(_BYTE *)(v38 + 64) = v39[64];
        *(_OWORD *)(v38 + 113) = *(_OWORD *)(v39 + 113);
        *(_OWORD *)(v38 + 104) = *(_OWORD *)(v39 + 104);
        *(_OWORD *)(v38 + 88) = *(_OWORD *)(v39 + 88);
        *(_OWORD *)(v38 + 72) = *(_OWORD *)(v39 + 72);
        *(_BYTE *)(v38 + 129) = v39[129];
        v45 = *(int *)(v40 + 44);
        v46 = v38 + v45;
        v47 = &v39[v45];
        v48 = type metadata accessor for ArtworkCrop(0);
        (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v48 - 8) + 32))(v46, v47, v48);
        *(_OWORD *)(v38 + v113[12]) = *(_OWORD *)&v39[v113[12]];
        *(_BYTE *)(v38 + v113[13]) = v39[v113[13]];
        *(_BYTE *)(v38 + v113[14]) = v39[v113[14]];
        *(_BYTE *)(v38 + v113[15]) = v39[v113[15]];
        *(_OWORD *)(v38 + v113[16]) = *(_OWORD *)&v39[v113[16]];
        (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v111 + 56))(v38, 0, 1, v113);
LABEL_28:
        *((_BYTE *)v18 + v20[7]) = *((_BYTE *)v19 + v20[7]);
        v62 = v20[8];
        v63 = (char *)v18 + v62;
        v64 = (char *)v19 + v62;
        __swift_destroy_boxed_opaque_existential_1((_QWORD *)((char *)v18 + v62));
        v65 = *((_OWORD *)v64 + 1);
        *(_OWORD *)v63 = *(_OWORD *)v64;
        *((_OWORD *)v63 + 1) = v65;
        *((_QWORD *)v63 + 4) = *((_QWORD *)v64 + 4);
        v66 = v20[9];
        v67 = (char *)v18 + v66;
        v68 = (char *)v19 + v66;
        v69 = v116(v67, 1, v11);
        v70 = v116(v68, 1, v11);
        if (v69)
        {
          if (!v70)
          {
            (*(void (**)(char *, char *, uint64_t))(v118 + 32))(v67, v68, v11);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v118 + 56))(v67, 0, 1, v11);
            return a1;
          }
        }
        else
        {
          if (!v70)
          {
            (*(void (**)(char *, char *, uint64_t))(v118 + 40))(v67, v68, v11);
            return a1;
          }
          (*(void (**)(char *, uint64_t))(v118 + 8))(v67, v11);
        }
        v32 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790) - 8) + 64);
        v33 = v67;
        v34 = v68;
        goto LABEL_14;
      }
LABEL_27:
      v61 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
      memcpy((void *)v38, v39, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
      goto LABEL_28;
    }
    if (v43)
    {
      sub_145D8(v38, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
      goto LABEL_27;
    }
    v71 = *((_QWORD *)v39 + 1);
    *(_QWORD *)v38 = *(_QWORD *)v39;
    *(_QWORD *)(v38 + 8) = v71;
    swift_bridgeObjectRelease();
    v72 = v39 + 16;
    v73 = *(unsigned __int8 *)(v38 + 32);
    if (v73 != 255)
    {
      v74 = v39[32];
      if (v74 != 255)
      {
        v75 = *(_QWORD *)(v38 + 16);
        v76 = *(_QWORD *)(v38 + 24);
        *(_OWORD *)(v38 + 16) = *v72;
        *(_BYTE *)(v38 + 32) = v74;
        sub_3B5BC(v75, v76, v73);
        goto LABEL_40;
      }
      sub_3E43C(v38 + 16);
    }
    *(_OWORD *)(v38 + 16) = *v72;
    *(_BYTE *)(v38 + 32) = v39[32];
LABEL_40:
    *(_OWORD *)(v38 + 40) = *(_OWORD *)(v39 + 40);
    v77 = v39 + 56;
    v78 = *(unsigned __int8 *)(v38 + 64);
    if (v78 != 255)
    {
      v79 = v39[64];
      if (v79 != 255)
      {
        v80 = *(void **)(v38 + 56);
        *(_QWORD *)(v38 + 56) = *v77;
        *(_BYTE *)(v38 + 64) = v79;
        sub_3D624(v80, v78);
        goto LABEL_45;
      }
      sub_3E470(v38 + 56);
    }
    *(_QWORD *)(v38 + 56) = *v77;
    *(_BYTE *)(v38 + 64) = v39[64];
LABEL_45:
    v81 = v39 + 72;
    v82 = *(unsigned __int8 *)(v38 + 80);
    if (v82 != 255)
    {
      v83 = v39[80];
      if (v83 != 255)
      {
        v84 = *(void **)(v38 + 72);
        *(_QWORD *)(v38 + 72) = *v81;
        *(_BYTE *)(v38 + 80) = v83;
        sub_3D624(v84, v82);
        goto LABEL_50;
      }
      sub_3E470(v38 + 72);
    }
    *(_QWORD *)(v38 + 72) = *v81;
    *(_BYTE *)(v38 + 80) = v39[80];
LABEL_50:
    v85 = v39 + 88;
    v86 = *(unsigned __int8 *)(v38 + 96);
    if (v86 != 255)
    {
      v87 = v39[96];
      if (v87 != 255)
      {
        v88 = *(void **)(v38 + 88);
        *(_QWORD *)(v38 + 88) = *v85;
        *(_BYTE *)(v38 + 96) = v87;
        sub_3D624(v88, v86);
        goto LABEL_55;
      }
      sub_3E470(v38 + 88);
    }
    *(_QWORD *)(v38 + 88) = *v85;
    *(_BYTE *)(v38 + 96) = v39[96];
LABEL_55:
    v89 = v39 + 104;
    v90 = *(unsigned __int8 *)(v38 + 112);
    if (v90 != 255)
    {
      v91 = v39[112];
      if (v91 != 255)
      {
        v92 = *(void **)(v38 + 104);
        *(_QWORD *)(v38 + 104) = *v89;
        *(_BYTE *)(v38 + 112) = v91;
        sub_3D624(v92, v90);
        goto LABEL_60;
      }
      sub_3E470(v38 + 104);
    }
    *(_QWORD *)(v38 + 104) = *v89;
    *(_BYTE *)(v38 + 112) = v39[112];
LABEL_60:
    v93 = v39 + 120;
    v94 = *(unsigned __int8 *)(v38 + 128);
    if (v94 != 255)
    {
      v95 = v39[128];
      if (v95 != 255)
      {
        v96 = *(void **)(v38 + 120);
        *(_QWORD *)(v38 + 120) = *v93;
        *(_BYTE *)(v38 + 128) = v95;
        sub_3D624(v96, v94);
LABEL_65:
        *(_BYTE *)(v38 + 129) = v39[129];
        v97 = v113[11];
        v98 = v38 + v97;
        v99 = &v39[v97];
        v100 = type metadata accessor for ArtworkCrop(0);
        (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v100 - 8) + 40))(v98, v99, v100);
        v101 = v113[12];
        v102 = (_QWORD *)(v38 + v101);
        v103 = &v39[v101];
        v105 = *(_QWORD *)v103;
        v104 = *((_QWORD *)v103 + 1);
        *v102 = v105;
        v102[1] = v104;
        swift_bridgeObjectRelease();
        *(_BYTE *)(v38 + v113[13]) = v39[v113[13]];
        *(_BYTE *)(v38 + v113[14]) = v39[v113[14]];
        *(_BYTE *)(v38 + v113[15]) = v39[v113[15]];
        v106 = v113[16];
        v107 = (_QWORD *)(v38 + v106);
        v108 = &v39[v106];
        v110 = *(_QWORD *)v108;
        v109 = *((_QWORD *)v108 + 1);
        *v107 = v110;
        v107[1] = v109;
        swift_bridgeObjectRelease();
        goto LABEL_28;
      }
      sub_3E470(v38 + 120);
    }
    *(_QWORD *)(v38 + 120) = *v93;
    *(_BYTE *)(v38 + 128) = v39[128];
    goto LABEL_65;
  }
  if (v24)
  {
LABEL_13:
    v32 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B3848) - 8) + 64);
    v33 = (char *)v18;
    v34 = (char *)v19;
LABEL_14:
    memcpy(v33, v34, v32);
    return a1;
  }
  v115 = (unsigned int (*)(char *, uint64_t, uint64_t))v13;
  v117 = v12;
  v25 = *((_OWORD *)v19 + 1);
  *(_OWORD *)v18 = *(_OWORD *)v19;
  *((_OWORD *)v18 + 1) = v25;
  v26 = v20[6];
  v27 = (_OWORD *)((char *)v18 + v26);
  v28 = (_OWORD *)((char *)v19 + v26);
  v29 = (int *)type metadata accessor for ArtworkModel(0);
  v30 = *((_QWORD *)v29 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v30 + 48))(v28, 1, v29))
  {
    v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    v49 = v28[1];
    *v27 = *v28;
    v27[1] = v49;
    *((_BYTE *)v27 + 32) = *((_BYTE *)v28 + 32);
    *(_OWORD *)((char *)v27 + 40) = *(_OWORD *)((char *)v28 + 40);
    *((_QWORD *)v27 + 7) = *((_QWORD *)v28 + 7);
    *((_BYTE *)v27 + 64) = *((_BYTE *)v28 + 64);
    *(_OWORD *)((char *)v27 + 113) = *(_OWORD *)((char *)v28 + 113);
    *(_OWORD *)((char *)v27 + 104) = *(_OWORD *)((char *)v28 + 104);
    *(_OWORD *)((char *)v27 + 88) = *(_OWORD *)((char *)v28 + 88);
    *(_OWORD *)((char *)v27 + 72) = *(_OWORD *)((char *)v28 + 72);
    *((_BYTE *)v27 + 129) = *((_BYTE *)v28 + 129);
    v50 = v29[11];
    v112 = (char *)v28 + v50;
    v114 = (char *)v27 + v50;
    v51 = type metadata accessor for ArtworkCrop(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v51 - 8) + 32))(v114, v112, v51);
    *(_OWORD *)((char *)v27 + v29[12]) = *(_OWORD *)((char *)v28 + v29[12]);
    *((_BYTE *)v27 + v29[13]) = *((_BYTE *)v28 + v29[13]);
    *((_BYTE *)v27 + v29[14]) = *((_BYTE *)v28 + v29[14]);
    *((_BYTE *)v27 + v29[15]) = *((_BYTE *)v28 + v29[15]);
    *(_OWORD *)((char *)v27 + v29[16]) = *(_OWORD *)((char *)v28 + v29[16]);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v30 + 56))(v27, 0, 1, v29);
  }
  *((_BYTE *)v18 + v20[7]) = *((_BYTE *)v19 + v20[7]);
  v52 = v20[8];
  v53 = (char *)v18 + v52;
  v54 = (char *)v19 + v52;
  v55 = *((_OWORD *)v54 + 1);
  *(_OWORD *)v53 = *(_OWORD *)v54;
  *((_OWORD *)v53 + 1) = v55;
  *((_QWORD *)v53 + 4) = *((_QWORD *)v54 + 4);
  v56 = v20[9];
  v57 = (char *)v18 + v56;
  v58 = (char *)v19 + v56;
  if (v115(v58, 1, v11))
  {
    v59 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
    memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v117 + 32))(v57, v58, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v117 + 56))(v57, 0, 1, v11);
  }
  (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v21 + 56))(v18, 0, 1, v20);
  return a1;
}

uint64_t getEnumTagSinglePayload for ErrorModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_2B687C);
}

uint64_t sub_2B687C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 24);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3848);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 28);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for ErrorModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_2B6930);
}

uint64_t sub_2B6930(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 24);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3848);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 28);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void sub_2B69D4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[4];

  v6[0] = &unk_304D10;
  v6[1] = &unk_304D10;
  sub_3EE70(319, (unint64_t *)&qword_3B2250, (uint64_t (*)(uint64_t))&type metadata accessor for ImpressionMetrics);
  if (v3 <= 0x3F)
  {
    v6[2] = *(_QWORD *)(v2 - 8) + 64;
    sub_3EE70(319, (unint64_t *)&unk_3C6AE0, type metadata accessor for ActionButton);
    if (v5 <= 0x3F)
    {
      v6[3] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 4, v6, a1 + 16);
    }
  }
}

uint64_t PodcastOfferAction.init(podcastOffer:adamId:displaySuccessHUD:)(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v27;
  int v28;
  uint64_t v29;

  v5 = v4;
  v27 = a3;
  v28 = a4;
  v29 = a1;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for ActionMetrics(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v16);
  v18 = (char *)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_A8FA0(a1, v5 + OBJC_IVAR____TtC8ShelfKit18PodcastOfferAction_podcastOffer);
  v19 = v5 + OBJC_IVAR____TtC8ShelfKit18PodcastOfferAction_adamId;
  *(_QWORD *)v19 = a2;
  *(_BYTE *)(v19 + 8) = v27 & 1;
  *(_BYTE *)(v5 + OBJC_IVAR____TtC8ShelfKit18PodcastOfferAction_displaySuccessHUD) = v28;
  v20 = type metadata accessor for ImpressionMetrics(0);
  v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v18, 1, 1, v20);
  v22 = static ActionMetrics.notInstrumented.getter(v21);
  UUID.init()(v22);
  v23 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
  v25 = v24;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  *(_QWORD *)(v5 + 16) = v23;
  *(_QWORD *)(v5 + 24) = v25;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = 0;
  *(_BYTE *)(v5 + 48) = 48;
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v5 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v15, v12);
  sub_23AB8((uint64_t)v18, v5 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics);
  sub_A952C(v29);
  return v5;
}

uint64_t PodcastOfferAction.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics;
  v2 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_23B00(v0 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics);
  sub_A952C(v0 + OBJC_IVAR____TtC8ShelfKit18PodcastOfferAction_podcastOffer);
  return v0;
}

void PodcastOfferAction.init(uniqueId:title:presentationStyle:actionMetrics:impressionMetrics:)()
{
  _swift_stdlib_reportUnimplementedInitializer("ShelfKit.PodcastOfferAction", 27, "init(uniqueId:title:presentationStyle:actionMetrics:impressionMetrics:)", 71, 0);
  __break(1u);
}

uint64_t sub_2B6D0C()
{
  uint64_t v0;
  unsigned __int8 *v1;
  _BYTE v3[24];

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC8ShelfKit18PodcastOfferAction_displaySuccessHUD);
  swift_beginAccess(v0 + OBJC_IVAR____TtC8ShelfKit18PodcastOfferAction_displaySuccessHUD, v3, 0, 0);
  return *v1;
}

uint64_t sub_2B6D50(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;
  _BYTE v5[24];

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC8ShelfKit18PodcastOfferAction_displaySuccessHUD);
  result = swift_beginAccess(v3, v5, 1, 0);
  *v3 = a1;
  return result;
}

uint64_t (*sub_2B6D98(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC8ShelfKit18PodcastOfferAction_displaySuccessHUD, a1, 33, 0);
  return j__swift_endAccess;
}

char *PodcastOfferAction.__allocating_init(deserializing:using:)(char *a1, uint64_t a2)
{
  uint64_t v2;

  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  return PodcastOfferAction.init(deserializing:using:)(a1, a2);
}

uint64_t PodcastOfferAction.podcastOffer.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_A8FA0(v1 + OBJC_IVAR____TtC8ShelfKit18PodcastOfferAction_podcastOffer, a1);
}

uint64_t PodcastOfferAction.adamId.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit18PodcastOfferAction_adamId);
}

uint64_t PodcastOfferAction.__allocating_init(podcastOffer:adamId:displaySuccessHUD:)(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  int v29;
  int v30;

  v5 = v4;
  v29 = a3;
  v30 = a4;
  v28 = a1;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for ActionMetrics(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v16);
  v18 = (char *)&v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  sub_A8FA0(a1, v19 + OBJC_IVAR____TtC8ShelfKit18PodcastOfferAction_podcastOffer);
  v20 = v19 + OBJC_IVAR____TtC8ShelfKit18PodcastOfferAction_adamId;
  *(_QWORD *)v20 = a2;
  *(_BYTE *)(v20 + 8) = v29 & 1;
  *(_BYTE *)(v19 + OBJC_IVAR____TtC8ShelfKit18PodcastOfferAction_displaySuccessHUD) = v30;
  v21 = type metadata accessor for ImpressionMetrics(0);
  v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v18, 1, 1, v21);
  v23 = static ActionMetrics.notInstrumented.getter(v22);
  UUID.init()(v23);
  v24 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
  v26 = v25;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  *(_QWORD *)(v19 + 16) = v24;
  *(_QWORD *)(v19 + 24) = v26;
  *(_QWORD *)(v19 + 32) = 0;
  *(_QWORD *)(v19 + 40) = 0;
  *(_BYTE *)(v19 + 48) = 48;
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v19 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v15, v12);
  sub_23AB8((uint64_t)v18, v19 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics);
  sub_A952C(v28);
  return v19;
}

char *PodcastOfferAction.init(deserializing:using:)(char *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t, uint64_t);
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t *v52;
  void (*v53)(char *, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v4 = v3;
  v5 = v2;
  v55 = a2;
  v54 = type metadata accessor for JSONContext(0);
  v56 = *(_QWORD *)(v54 - 8);
  v7 = __chkstk_darwin(v54);
  v48 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v53 = (void (*)(char *, uint64_t))((char *)&v44 - v9);
  v10 = type metadata accessor for ShowOffer(0);
  __chkstk_darwin(v10);
  v52 = (uint64_t *)((char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = type metadata accessor for JSONObject(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v47 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  v51 = (char *)&v44 - v17;
  __chkstk_darwin(v16);
  v19 = (char *)&v44 - v18;
  swift_retain(v5);
  v20 = a1;
  v21 = JSONObject.subscript.getter(0x64496D616461, 0xE600000000000000);
  v22 = JSONObject.string.getter(v21);
  v24 = v23;
  if (v23)
  {
    v25 = static AdamID.parse(_:)(v22, v23);
    if (v3)
    {
      v26 = swift_bridgeObjectRelease();
      v27 = static AdamID.empty.getter(v26);
      swift_errorRelease(v3);
      v4 = 0;
    }
    else
    {
      v27 = v25;
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    v27 = 0;
  }
  v28 = *(void (**)(char *, uint64_t))(v13 + 8);
  v28(v19, v12);
  v29 = v5 + OBJC_IVAR____TtC8ShelfKit18PodcastOfferAction_adamId;
  *(_QWORD *)v29 = v27;
  *(_BYTE *)(v29 + 8) = v24 == 0;
  v30 = v51;
  v50 = v20;
  JSONObject.subscript.getter(0x4F74736163646F70, 0xEC00000072656666);
  v31 = v5;
  v49 = v12;
  v32 = v56;
  v33 = *(void (**)(char *, uint64_t, uint64_t))(v56 + 16);
  v34 = (uint64_t)v53;
  v35 = v55;
  v45 = v13;
  v46 = v33;
  v36 = v54;
  v33((char *)v53, v55, v54);
  v37 = v52;
  ShowOffer.init(deserializing:using:)(v30, v34, v52);
  if (v4)
  {
    swift_release(v31);
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v35, v36);
    v28(v50, v49);
    v38 = type metadata accessor for PodcastOfferAction(0);
    swift_deallocPartialClassInstance(v31, v38, *(unsigned int *)(*(_QWORD *)v31 + 48), *(unsigned __int16 *)(*(_QWORD *)v31 + 52));
  }
  else
  {
    v53 = v28;
    sub_A9430((uint64_t)v37, v31 + OBJC_IVAR____TtC8ShelfKit18PodcastOfferAction_podcastOffer);
    *(_BYTE *)(v31 + OBJC_IVAR____TtC8ShelfKit18PodcastOfferAction_displaySuccessHUD) = 1;
    swift_release(v31);
    v39 = v47;
    v40 = v49;
    v41 = v50;
    (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v47, v50, v49);
    v42 = (uint64_t)v48;
    v46(v48, v35, v36);
    v30 = (char *)Action.init(deserializing:using:)(v39, v42);
    (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v35, v36);
    v53(v41, v40);
  }
  return v30;
}

uint64_t type metadata accessor for PodcastOfferAction(uint64_t a1)
{
  uint64_t result;

  result = qword_3C6B40;
  if (!qword_3C6B40)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PodcastOfferAction);
  return result;
}

uint64_t sub_2B742C()
{
  uint64_t v0;

  return sub_A952C(v0 + OBJC_IVAR____TtC8ShelfKit18PodcastOfferAction_podcastOffer);
}

uint64_t PodcastOfferAction.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics;
  v2 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_23B00(v0 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics);
  sub_A952C(v0 + OBJC_IVAR____TtC8ShelfKit18PodcastOfferAction_podcastOffer);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_2B74C4@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v3;
  uint64_t result;
  _BYTE v5[24];

  v3 = (_BYTE *)(*a1 + OBJC_IVAR____TtC8ShelfKit18PodcastOfferAction_displaySuccessHUD);
  result = swift_beginAccess(v3, v5, 0, 0);
  *a2 = *v3;
  return result;
}

uint64_t sub_2B7514(char *a1, _QWORD *a2)
{
  char v2;
  _BYTE *v3;
  uint64_t result;
  _BYTE v5[24];

  v2 = *a1;
  v3 = (_BYTE *)(*a2 + OBJC_IVAR____TtC8ShelfKit18PodcastOfferAction_displaySuccessHUD);
  result = swift_beginAccess(v3, v5, 1, 0);
  *v3 = v2;
  return result;
}

uint64_t sub_2B7560()
{
  return type metadata accessor for PodcastOfferAction(0);
}

uint64_t sub_2B7568(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for ShowOffer(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_304D68;
    v4[2] = &unk_304D80;
    result = swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 160);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for PodcastOfferAction(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for PodcastOfferAction);
}

uint64_t dispatch thunk of PodcastOfferAction.__allocating_init(podcastOffer:adamId:displaySuccessHUD:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v3 + 208))(a1, a2, a3 & 1);
}

_QWORD *ExternalUrlAction.__allocating_init(title:urlString:isSensitive:presentationStyle:requiresSignedInUser:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7)
{
  uint64_t v7;

  swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  return ExternalUrlAction.init(title:urlString:isSensitive:presentationStyle:requiresSignedInUser:)(a1, a2, a3, a4, a5, a6, a7);
}

_QWORD *ExternalUrlAction.init(title:urlString:isSensitive:presentationStyle:requiresSignedInUser:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7)
{
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;

  v8 = v7;
  v35 = a5;
  v36 = a7;
  v42 = a6;
  v43 = a2;
  v41 = a1;
  v34 = *v7;
  v40 = type metadata accessor for UUID(0);
  v38 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin(v40);
  v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = type metadata accessor for ActionMetrics(0);
  v37 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39);
  v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v15);
  v17 = (char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
  __chkstk_darwin(v18);
  v20 = (char *)&v33 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for URL(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = (char *)&v33 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  URL.init(string:)(a3, a4);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21) == 1)
  {
    swift_release();
    swift_bridgeObjectRelease();
    sub_1459C((uint64_t)v20, &qword_3B4370);
    swift_deallocPartialClassInstance(v8, v34, *(unsigned int *)(*v8 + 48), *(unsigned __int16 *)(*v8 + 52));
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v24, v20, v21);
    (*(void (**)(uint64_t, char *, uint64_t))(v22 + 16))((uint64_t)v8 + OBJC_IVAR____TtC8ShelfKit17ExternalUrlAction_url, v24, v21);
    *((_BYTE *)v8 + OBJC_IVAR____TtC8ShelfKit17ExternalUrlAction_isSensitive) = v35 & 1;
    *((_BYTE *)v8 + OBJC_IVAR____TtC8ShelfKit17ExternalUrlAction_requiresSignedInUser) = v36 & 1;
    swift_release();
    v25 = type metadata accessor for ImpressionMetrics(0);
    v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v17, 1, 1, v25);
    v27 = static ActionMetrics.notInstrumented.getter(v26);
    UUID.init()(v27);
    v28 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
    v30 = v29;
    (*(void (**)(char *, uint64_t))(v38 + 8))(v12, v40);
    v8[2] = v28;
    v8[3] = v30;
    v31 = v43;
    v8[4] = v41;
    v8[5] = v31;
    *((_BYTE *)v8 + 48) = v42;
    (*(void (**)(uint64_t, char *, uint64_t))(v37 + 32))((uint64_t)v8 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v14, v39);
    sub_23AB8((uint64_t)v17, (uint64_t)v8 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v24, v21);
  }
  return v8;
}

uint64_t ExternalUrlAction.__allocating_init(deserializing:using:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  return ExternalUrlAction.init(deserializing:using:)(a1, a2);
}

uint64_t ExternalUrlAction.init(deserializing:using:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  char *v36;
  uint64_t v37;
  char v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(uint64_t, uint64_t);
  uint64_t v57;

  v3 = v2;
  v54 = a2;
  v49 = *v3;
  v53 = type metadata accessor for JSONContext(0);
  v57 = *(_QWORD *)(v53 - 8);
  __chkstk_darwin(v53);
  v50 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
  __chkstk_darwin(v6);
  v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for JSONObject(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v48 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v46 = (char *)&v45 - v13;
  __chkstk_darwin(v14);
  v16 = (char *)&v45 - v15;
  __chkstk_darwin(v17);
  v19 = (char *)&v45 - v18;
  v20 = type metadata accessor for URL(0);
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v52 = (char *)&v45 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  v55 = a1;
  v23 = JSONObject.subscript.getter(7107189, 0xE300000000000000);
  JSONObject.url.getter(v23);
  v47 = v10;
  v24 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
  v25 = v9;
  v56 = v24;
  v24((uint64_t)v19, v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v8, 1, v20) == 1)
  {
    sub_1459C((uint64_t)v8, &qword_3B4370);
    v26 = type metadata accessor for JSONError(0);
    v27 = sub_1E468();
    swift_allocError(v26, v27, 0, 0);
    v29 = v28;
    v30 = *v3;
    swift_release();
    *v29 = 7107189;
    v29[1] = 0xE300000000000000;
    v29[2] = v30;
    v31 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v26 - 8) + 104))(v29, enum case for JSONError.missingProperty(_:), v26);
    swift_willThrow(v31);
    (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v54, v53);
    v56(v55, v25);
    swift_deallocPartialClassInstance(v3, v49, *(unsigned int *)(*v3 + 48), *(unsigned __int16 *)(*v3 + 52));
  }
  else
  {
    v32 = v52;
    (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v52, v8, v20);
    (*(void (**)(uint64_t, char *, uint64_t))(v21 + 16))((uint64_t)v3 + OBJC_IVAR____TtC8ShelfKit17ExternalUrlAction_url, v32, v20);
    v33 = v55;
    v34 = JSONObject.subscript.getter(0x7469736E65537369, 0xEB00000000657669);
    LOBYTE(v32) = JSONObject.BOOL.getter(v34);
    v35 = (void (*)(char *, uint64_t))v56;
    v56((uint64_t)v16, v9);
    *((_BYTE *)v3 + OBJC_IVAR____TtC8ShelfKit17ExternalUrlAction_isSensitive) = v32 & 1;
    v36 = v46;
    v37 = JSONObject.subscript.getter(0xD000000000000014, 0x8000000000315E70);
    v38 = JSONObject.BOOL.getter(v37);
    v35(v36, v25);
    *((_BYTE *)v3 + OBJC_IVAR____TtC8ShelfKit17ExternalUrlAction_requiresSignedInUser) = v38 & 1;
    swift_release();
    v39 = v48;
    (*(void (**)(char *, uint64_t, uint64_t))(v47 + 16))(v48, v33, v25);
    v26 = (uint64_t)v50;
    v41 = v53;
    v40 = v54;
    (*(void (**)(char *, uint64_t, uint64_t))(v57 + 16))(v50, v54, v53);
    v42 = v51;
    v43 = Action.init(deserializing:using:)(v39, v26);
    if (!v42)
      v26 = v43;
    (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v40, v41);
    v56(v33, v25);
    (*(void (**)(char *, uint64_t))(v21 + 8))(v52, v20);
  }
  return v26;
}

uint64_t ExternalUrlAction.url.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC8ShelfKit17ExternalUrlAction_url;
  v4 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ExternalUrlAction.isSensitive.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8ShelfKit17ExternalUrlAction_isSensitive);
}

uint64_t ExternalUrlAction.requiresSignedInUser.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8ShelfKit17ExternalUrlAction_requiresSignedInUser);
}

void ExternalUrlAction.init(uniqueId:title:presentationStyle:actionMetrics:impressionMetrics:)()
{
  _swift_stdlib_reportUnimplementedInitializer("ShelfKit.ExternalUrlAction", 26, "init(uniqueId:title:presentationStyle:actionMetrics:impressionMetrics:)", 71, 0);
  __break(1u);
}

uint64_t sub_2B7EEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC8ShelfKit17ExternalUrlAction_url;
  v2 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
}

uint64_t ExternalUrlAction.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics;
  v2 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_1459C(v0 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics, (uint64_t *)&unk_3B8790);
  v3 = v0 + OBJC_IVAR____TtC8ShelfKit17ExternalUrlAction_url;
  v4 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  return v0;
}

uint64_t ExternalUrlAction.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics;
  v2 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_1459C(v0 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics, (uint64_t *)&unk_3B8790);
  v3 = v0 + OBJC_IVAR____TtC8ShelfKit17ExternalUrlAction_url;
  v4 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_2B806C()
{
  return type metadata accessor for ExternalUrlAction(0);
}

uint64_t type metadata accessor for ExternalUrlAction(uint64_t a1)
{
  uint64_t result;

  result = qword_3C6C68;
  if (!qword_3C6C68)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ExternalUrlAction);
  return result;
}

uint64_t sub_2B80B0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_304DD8;
    v4[2] = &unk_304DD8;
    result = swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 160);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for ExternalUrlAction(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for ExternalUrlAction);
}

uint64_t dispatch thunk of ExternalUrlAction.__allocating_init(title:urlString:isSensitive:presentationStyle:requiresSignedInUser:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 184))();
}

unint64_t static GroupedSearchResultsIntent.kind.getter()
{
  return 0xD00000000000001ALL;
}

uint64_t sub_2B8158(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_2B82B4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_2B8180(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_2B82B4();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_2B81A8(_QWORD *a1@<X8>)
{
  *a1 = 0xD00000000000001ALL;
  a1[1] = 0x8000000000304DE0;
}

uint64_t GroupedSearchResultsIntent.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C6D50);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = v1[1];
  v9 = a1[3];
  v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  v11 = sub_2B82B4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for GroupedSearchResultsIntent.CodingKeys, &type metadata for GroupedSearchResultsIntent.CodingKeys, v11, v9, v10);
  KeyedEncodingContainer.encode(_:forKey:)(v7, v8, v12, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_2B82B4()
{
  unint64_t result;

  result = qword_3C6D58;
  if (!qword_3C6D58)
  {
    result = swift_getWitnessTable(&unk_304FFC);
    atomic_store(result, (unint64_t *)&qword_3C6D58);
  }
  return result;
}

unint64_t sub_2B82FC()
{
  unint64_t result;

  result = qword_3C6D60;
  if (!qword_3C6D60)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for GroupedSearchResultsIntent);
    atomic_store(result, (unint64_t *)&qword_3C6D60);
  }
  return result;
}

unint64_t sub_2B8348()
{
  unint64_t result;

  result = qword_3C6D68;
  if (!qword_3C6D68)
  {
    type metadata accessor for GroupedSearchResultsPage(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for GroupedSearchResultsPage);
    atomic_store(result, (unint64_t *)&qword_3C6D68);
  }
  return result;
}

uint64_t sub_2B8390(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_2B8570();
  return CustomJSValueConvertible<>.jsRepresentation(in:)(a1, a2, a3, v6);
}

ValueMetadata *type metadata accessor for GroupedSearchResultsIntent()
{
  return &type metadata for GroupedSearchResultsIntent;
}

uint64_t storeEnumTagSinglePayload for GroupedSearchResultsIntent.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_2B843C + 4 * byte_304DF0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_2B845C + 4 * byte_304DF5[v4]))();
}

_BYTE *sub_2B843C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_2B845C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_2B8464(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_2B846C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_2B8474(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_2B847C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for GroupedSearchResultsIntent.CodingKeys()
{
  return &type metadata for GroupedSearchResultsIntent.CodingKeys;
}

unint64_t sub_2B849C()
{
  unint64_t result;

  result = qword_3C6D70;
  if (!qword_3C6D70)
  {
    result = swift_getWitnessTable(&unk_304FD4);
    atomic_store(result, (unint64_t *)&qword_3C6D70);
  }
  return result;
}

unint64_t sub_2B84E4()
{
  unint64_t result;

  result = qword_3C6D78;
  if (!qword_3C6D78)
  {
    result = swift_getWitnessTable(&unk_304F44);
    atomic_store(result, (unint64_t *)&qword_3C6D78);
  }
  return result;
}

unint64_t sub_2B852C()
{
  unint64_t result;

  result = qword_3C6D80;
  if (!qword_3C6D80)
  {
    result = swift_getWitnessTable(&unk_304F6C);
    atomic_store(result, (unint64_t *)&qword_3C6D80);
  }
  return result;
}

unint64_t sub_2B8570()
{
  unint64_t result;

  result = qword_3C6D88;
  if (!qword_3C6D88)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for GroupedSearchResultsIntent);
    atomic_store(result, (unint64_t *)&qword_3C6D88);
  }
  return result;
}

uint64_t static DefaultPaginationPageSizes.shows.getter()
{
  return sub_2B8654(&qword_3B02D8, (uint64_t)&qword_3C6D98);
}

void sub_2B85D0()
{
  id v0;
  char *v1;
  uint64_t v2;

  v0 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
  v1 = (char *)objc_msgSend(v0, "userInterfaceIdiom");

  v2 = 100;
  if (v1 == (_BYTE *)&dword_0 + 1)
    v2 = 200;
  qword_3C6D90 = v2;
}

uint64_t static DefaultPaginationPageSizes.episodes.getter()
{
  return sub_2B8654(&qword_3B02D0, (uint64_t)&qword_3C6D90);
}

uint64_t sub_2B8654(_QWORD *a1, uint64_t a2)
{
  if (*a1 != -1)
    swift_once();
  return *(_QWORD *)a2;
}

void sub_2B868C()
{
  id v0;
  char *v1;
  uint64_t v2;

  v0 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
  v1 = (char *)objc_msgSend(v0, "userInterfaceIdiom");

  v2 = 50;
  if (v1 == (_BYTE *)&dword_0 + 1)
    v2 = 100;
  qword_3C6D98 = v2;
}

ValueMetadata *type metadata accessor for DefaultPaginationPageSizes()
{
  return &type metadata for DefaultPaginationPageSizes;
}

uint64_t ViewModel.getImpressionMetrics(with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v22[2];
  uint64_t v23;
  _QWORD v24[3];
  uint64_t v25;
  uint64_t v26;

  v9 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin(a1);
  v11 = (char *)v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of ViewModel.impressionMetrics.getter(a2, a3, v13);
  v16 = type metadata accessor for ImpressionMetrics(0);
  v17 = *(_QWORD *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {
    sub_1459C((uint64_t)v15, (uint64_t *)&unk_3B8790);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v4, a2);
    v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C6DA0);
    if (swift_dynamicCast(v22, v11, a2, v18, 6))
    {
      sub_F4D8(v22, (uint64_t)v24);
      v19 = v25;
      v20 = v26;
      __swift_project_boxed_opaque_existential_1(v24, v25);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(a1, v19, v20);
      return __swift_destroy_boxed_opaque_existential_1(v24);
    }
    else
    {
      v23 = 0;
      memset(v22, 0, sizeof(v22));
      sub_1459C((uint64_t)v22, &qword_3C6DA8);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56))(a4, 1, 1, v16);
    }
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(a4, v15, v16);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v17 + 56))(a4, 0, 1, v16);
  }
}

uint64_t FetchPageIntent.init(url:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
}

uint64_t static FetchPageIntent.kind.getter()
{
  return 0x6761506863746546;
}

uint64_t FetchActionIntent.url.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t sub_2B8978()
{
  return 7107189;
}

uint64_t sub_2B8988@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 7107189 && a2 == 0xE300000000000000)
  {
    result = swift_bridgeObjectRelease(0xE300000000000000);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(7107189, 0xE300000000000000, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_2B8A0C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_2B8B94();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_2B8A34(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_2B8B94();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_2B8A5C(_QWORD *a1@<X8>)
{
  *a1 = 0x6761506863746546;
  a1[1] = 0xEF746E65746E4965;
}

uint64_t FetchPageIntent.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C6DB0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v8);
  v10 = sub_2B8B94();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for FetchPageIntent.CodingKeys, &type metadata for FetchPageIntent.CodingKeys, v10, v8, v9);
  type metadata accessor for URL(0);
  sub_F1C0(&qword_3B52C8, (void (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v2);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_2B8B94()
{
  unint64_t result;

  result = qword_3C6DB8;
  if (!qword_3C6DB8)
  {
    result = swift_getWitnessTable(&unk_30527C);
    atomic_store(result, (unint64_t *)&qword_3C6DB8);
  }
  return result;
}

uint64_t sub_2B8BD8()
{
  return sub_F1C0(&qword_3C6DC0, (void (*)(uint64_t))type metadata accessor for FetchPageIntent, (uint64_t)&protocol conformance descriptor for FetchPageIntent);
}

uint64_t type metadata accessor for FetchPageIntent(uint64_t a1)
{
  uint64_t result;

  result = qword_3C6E20;
  if (!qword_3C6E20)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for FetchPageIntent);
  return result;
}

uint64_t sub_2B8C40()
{
  return sub_F1C0(&qword_3BB468, (void (*)(uint64_t))type metadata accessor for FetchPageIntent, (uint64_t)&protocol conformance descriptor for FetchPageIntent);
}

uint64_t sub_2B8C6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_F1C0(&qword_3C6E70, (void (*)(uint64_t))type metadata accessor for FetchPageIntent, (uint64_t)&protocol conformance descriptor for FetchPageIntent);
  return CustomJSValueConvertible<>.jsRepresentation(in:)(a1, a2, a3, v6);
}

uint64_t initializeBufferWithCopyOfBuffer for FetchPageIntent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URL(0);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t destroy for FetchPageIntent(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t initializeWithCopy for FetchPageIntent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for FetchPageIntent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for FetchPageIntent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for FetchPageIntent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for FetchPageIntent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_2B8E6C);
}

uint64_t sub_2B8E6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for FetchPageIntent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_2B8EB4);
}

uint64_t sub_2B8EB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_2B8EF4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FetchPageIntent.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_2B8F9C + 4 * asc_30507C[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_2B8FBC + 4 * byte_305081[v4]))();
}

_BYTE *sub_2B8F9C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_2B8FBC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_2B8FC4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_2B8FCC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_2B8FD4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_2B8FDC(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for FetchPageIntent.CodingKeys()
{
  return &type metadata for FetchPageIntent.CodingKeys;
}

unint64_t sub_2B8FFC()
{
  unint64_t result;

  result = qword_3C6E58;
  if (!qword_3C6E58)
  {
    result = swift_getWitnessTable(&unk_305254);
    atomic_store(result, (unint64_t *)&qword_3C6E58);
  }
  return result;
}

unint64_t sub_2B9044()
{
  unint64_t result;

  result = qword_3C6E60;
  if (!qword_3C6E60)
  {
    result = swift_getWitnessTable(&unk_3051C4);
    atomic_store(result, (unint64_t *)&qword_3C6E60);
  }
  return result;
}

unint64_t sub_2B908C()
{
  unint64_t result;

  result = qword_3C6E68;
  if (!qword_3C6E68)
  {
    result = swift_getWitnessTable(&unk_3051EC);
    atomic_store(result, (unint64_t *)&qword_3C6E68);
  }
  return result;
}

_QWORD *NetworkObserver.__allocating_init()()
{
  id v0;
  uint64_t v1;
  _QWORD *v2;

  v0 = objc_msgSend((id)objc_opt_self(IMNetworkObserver), "sharedInstance");
  v1 = type metadata accessor for NetworkObserver();
  v2 = (_QWORD *)swift_allocObject(v1, 80, 7);
  return sub_2BA108(v0, v2);
}

uint64_t type metadata accessor for NetworkObserver()
{
  return objc_opt_self(_TtC8ShelfKit15NetworkObserver);
}

uint64_t NetworkObserver.remoteServerReachabilityPublisher.getter()
{
  unint64_t v0;

  v0 = sub_3289C();
  return Publisher.eraseToAnyPublisher()(&type metadata for NetworkObserver.NetworkObserverPublisher, v0);
}

_QWORD *NetworkObserver.__allocating_init(asPartOf:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B44B8);
  BaseObjectGraph.inject<A>(_:)(&v4, v0, v0);
  v1 = v4;
  swift_getObjectType();
  v2 = sub_2BA0CC(v1);
  swift_release();
  return v2;
}

uint64_t sub_2B91F4@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  char v2;

  switch(result)
  {
    case 1:
      *a2 = 1;
      break;
    case 2:
      *a2 = 2;
      break;
    case 3:
      *a2 = 3;
      break;
    case 4:
      *a2 = 4;
      break;
    case 5:
      *a2 = 5;
      break;
    case 6:
      *a2 = 6;
      break;
    case 7:
      *a2 = 7;
      break;
    case 8:
      *a2 = 8;
      break;
    default:
      if (result == 1000)
        v2 = 9;
      else
        v2 = 0;
      *a2 = v2;
      break;
  }
  return result;
}

unint64_t NetworkObserver.NetworkError.errorDescription.getter()
{
  return 0xD00000000000002ELL;
}

uint64_t NetworkObserver.deinit()
{
  uint64_t v0;
  id v1;

  v1 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  objc_msgSend(v1, "removeObserver:", v0);

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  sub_6FC38(v0 + 24);
  __swift_destroy_boxed_opaque_existential_1((_QWORD *)(v0 + 40));
  return v0;
}

uint64_t NetworkObserver.__deallocating_deinit()
{
  uint64_t v0;
  id v1;

  v1 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  objc_msgSend(v1, "removeObserver:", v0);

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  sub_6FC38(v0 + 24);
  __swift_destroy_boxed_opaque_existential_1((_QWORD *)(v0 + 40));
  return swift_deallocClassInstance(v0, 80, 7);
}

uint64_t sub_2B9388()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 24, v2, 0, 0);
  return swift_unknownObjectWeakLoadStrong(v0 + 24);
}

uint64_t sub_2B93CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v6[24];

  swift_beginAccess(v2 + 24, v6, 1, 0);
  *(_QWORD *)(v2 + 32) = a2;
  swift_unknownObjectWeakAssign(v2 + 24, a1);
  return swift_unknownObjectRelease(a1);
}

void (*sub_2B942C(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t Strong;
  uint64_t v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  swift_beginAccess(v1 + 24, v3, 33, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1 + 24);
  v5 = *(_QWORD *)(v1 + 32);
  v3[3] = Strong;
  v3[4] = v5;
  return sub_2B9498;
}

void sub_2B9498(uint64_t a1, char a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD **)a1;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  *(_QWORD *)(v5 + 32) = *(_QWORD *)(*(_QWORD *)a1 + 32);
  swift_unknownObjectWeakAssign(v5 + 24, v4);
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRelease(v3[3]);
    swift_endAccess(v3);
  }
  else
  {
    swift_endAccess(v3);
    swift_unknownObjectRelease(v4);
  }
  free(v3);
}

uint64_t sub_2B9508(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  _BYTE v5[24];
  __int128 v6[2];

  sub_150C8(a1, (uint64_t)v6);
  v3 = (_QWORD *)(*a2 + 40);
  swift_beginAccess(v3, v5, 33, 0);
  __swift_destroy_boxed_opaque_existential_1(v3);
  sub_F4D8(v6, (uint64_t)v3);
  return swift_endAccess(v5);
}

uint64_t sub_2B956C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  v3 = v1 + 40;
  swift_beginAccess(v3, v5, 0, 0);
  return sub_150C8(v3, a1);
}

uint64_t sub_2B95B4(__int128 *a1)
{
  uint64_t v1;
  _QWORD *v3;
  _BYTE v5[24];

  v3 = (_QWORD *)(v1 + 40);
  swift_beginAccess(v3, v5, 33, 0);
  __swift_destroy_boxed_opaque_existential_1(v3);
  sub_F4D8(a1, (uint64_t)v3);
  return swift_endAccess(v5);
}

uint64_t (*sub_2B960C(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + 40, a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t sub_2B9648(uint64_t a1, void (*a2)(uint64_t, _QWORD))
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  _BYTE v7[24];

  v4 = a1 + 24;
  swift_beginAccess(a1 + 24, v7, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v4);
  if (result)
  {
    v6 = result;
    a2(result, *(_QWORD *)(a1 + 32));
    return swift_unknownObjectRelease(v6);
  }
  return result;
}

uint64_t sub_2B96B4@<X0>(char *a1@<X8>)
{
  uint64_t v1;

  return sub_2B91F4((uint64_t)objc_msgSend(*(id *)(v1 + 16), "networkType"), a1);
}

id sub_2B96E4()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), "networkReachabilityFlags");
}

id sub_2B96F4()
{
  uint64_t v0;

  return objc_msgSend((id)objc_opt_self(IMNetworkObserver), "isLikelyToReachRemoteServerWithReachabilityFlags:", objc_msgSend(*(id *)(v0 + 16), "networkReachabilityFlags"));
}

uint64_t SCNetworkReachabilityFlags.debugSummary.getter(int a1)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  Swift::String v38;
  Swift::String v39;

  if ((a1 & 1) == 0)
  {
    v2 = _swiftEmptyArrayStorage;
    if ((a1 & 2) == 0)
      goto LABEL_12;
    goto LABEL_7;
  }
  v2 = sub_10644(0, 1, 1, _swiftEmptyArrayStorage);
  v4 = v2[2];
  v3 = v2[3];
  if (v4 >= v3 >> 1)
    v2 = sub_10644((_QWORD *)(v3 > 1), v4 + 1, 1, v2);
  v2[2] = v4 + 1;
  v5 = &v2[2 * v4];
  v5[4] = 0xD000000000000014;
  v5[5] = 0x8000000000315FC0;
  if ((a1 & 2) != 0)
  {
LABEL_7:
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      v2 = sub_10644(0, v2[2] + 1, 1, v2);
    v7 = v2[2];
    v6 = v2[3];
    if (v7 >= v6 >> 1)
      v2 = sub_10644((_QWORD *)(v6 > 1), v7 + 1, 1, v2);
    v2[2] = v7 + 1;
    v8 = &v2[2 * v7];
    v8[4] = 0x626168636165722ELL;
    v8[5] = 0xEA0000000000656CLL;
  }
LABEL_12:
  if ((a1 & 4) != 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      v2 = sub_10644(0, v2[2] + 1, 1, v2);
    v10 = v2[2];
    v9 = v2[3];
    if (v10 >= v9 >> 1)
      v2 = sub_10644((_QWORD *)(v9 > 1), v10 + 1, 1, v2);
    v2[2] = v10 + 1;
    v11 = &v2[2 * v10];
    v11[4] = 0xD000000000000013;
    v11[5] = 0x8000000000315FA0;
    if ((a1 & 8) == 0)
    {
LABEL_14:
      if ((a1 & 0x10) == 0)
        goto LABEL_15;
      goto LABEL_31;
    }
  }
  else if ((a1 & 8) == 0)
  {
    goto LABEL_14;
  }
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_10644(0, v2[2] + 1, 1, v2);
  v13 = v2[2];
  v12 = v2[3];
  if (v13 >= v12 >> 1)
    v2 = sub_10644((_QWORD *)(v12 > 1), v13 + 1, 1, v2);
  v2[2] = v13 + 1;
  v14 = &v2[2 * v13];
  v14[4] = 0xD000000000000014;
  v14[5] = 0x8000000000315F80;
  if ((a1 & 0x10) == 0)
  {
LABEL_15:
    if ((a1 & 0x20) == 0)
      goto LABEL_16;
    goto LABEL_36;
  }
LABEL_31:
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_10644(0, v2[2] + 1, 1, v2);
  v16 = v2[2];
  v15 = v2[3];
  if (v16 >= v15 >> 1)
    v2 = sub_10644((_QWORD *)(v15 > 1), v16 + 1, 1, v2);
  v2[2] = v16 + 1;
  v17 = &v2[2 * v16];
  v17[4] = 0xD000000000000015;
  v17[5] = 0x8000000000315F60;
  if ((a1 & 0x20) == 0)
  {
LABEL_16:
    if ((a1 & 0x10000) == 0)
      goto LABEL_17;
    goto LABEL_41;
  }
LABEL_36:
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_10644(0, v2[2] + 1, 1, v2);
  v19 = v2[2];
  v18 = v2[3];
  if (v19 >= v18 >> 1)
    v2 = sub_10644((_QWORD *)(v18 > 1), v19 + 1, 1, v2);
  v2[2] = v19 + 1;
  v20 = &v2[2 * v19];
  v20[4] = 0xD000000000000013;
  v20[5] = 0x8000000000315F40;
  if ((a1 & 0x10000) == 0)
  {
LABEL_17:
    if ((a1 & 0x20000) == 0)
      goto LABEL_18;
    goto LABEL_46;
  }
LABEL_41:
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_10644(0, v2[2] + 1, 1, v2);
  v22 = v2[2];
  v21 = v2[3];
  if (v22 >= v21 >> 1)
    v2 = sub_10644((_QWORD *)(v21 > 1), v22 + 1, 1, v2);
  v2[2] = v22 + 1;
  v23 = &v2[2 * v22];
  v23[4] = 0x6C61636F4C73692ELL;
  v23[5] = 0xEF73736572646441;
  if ((a1 & 0x20000) == 0)
  {
LABEL_18:
    if ((a1 & 0x40000) == 0)
      goto LABEL_19;
    goto LABEL_51;
  }
LABEL_46:
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_10644(0, v2[2] + 1, 1, v2);
  v25 = v2[2];
  v24 = v2[3];
  if (v25 >= v24 >> 1)
    v2 = sub_10644((_QWORD *)(v24 > 1), v25 + 1, 1, v2);
  v2[2] = v25 + 1;
  v26 = &v2[2 * v25];
  v26[4] = 0x636572694473692ELL;
  v26[5] = 0xE900000000000074;
  if ((a1 & 0x40000) == 0)
  {
LABEL_19:
    if ((a1 & 8) == 0)
      goto LABEL_61;
    goto LABEL_56;
  }
LABEL_51:
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_10644(0, v2[2] + 1, 1, v2);
  v28 = v2[2];
  v27 = v2[3];
  if (v28 >= v27 >> 1)
    v2 = sub_10644((_QWORD *)(v27 > 1), v28 + 1, 1, v2);
  v2[2] = v28 + 1;
  v29 = &v2[2 * v28];
  v29[4] = 0x4E41575773692ELL;
  v29[5] = 0xE700000000000000;
  if ((a1 & 8) != 0)
  {
LABEL_56:
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      v2 = sub_10644(0, v2[2] + 1, 1, v2);
    v31 = v2[2];
    v30 = v2[3];
    if (v31 >= v30 >> 1)
      v2 = sub_10644((_QWORD *)(v30 > 1), v31 + 1, 1, v2);
    v2[2] = v31 + 1;
    v32 = &v2[2 * v31];
    v32[4] = 0xD000000000000014;
    v32[5] = 0x8000000000315F20;
  }
LABEL_61:
  v33 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3BC430);
  v34 = sub_707E4();
  v35 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v33, v34);
  v37 = v36;
  swift_bridgeObjectRelease();
  v38._countAndFlagsBits = v35;
  v38._object = v37;
  String.append(_:)(v38);
  swift_bridgeObjectRelease();
  v39._countAndFlagsBits = 93;
  v39._object = (void *)0xE100000000000000;
  String.append(_:)(v39);
  return 91;
}

uint64_t sub_2B9E50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD v13[5];

  v7 = type metadata accessor for NetworkObserver.NetworkObserverSubscription(0, a3, a4, a4);
  v8 = swift_retain();
  v11 = sub_2BAB48(v8, a1, v9, v10);
  swift_release();
  v13[3] = v7;
  v13[4] = swift_getWitnessTable(&unk_3055CC);
  v13[0] = v11;
  dispatch thunk of Subscriber.receive(subscription:)(v13, a3, a4);
  return __swift_destroy_boxed_opaque_existential_1(v13);
}

uint64_t sub_2B9EF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return sub_2B9E50(a1, *v3, a2, a3);
}

uint64_t sub_2B9F08()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  char *v7;
  _BYTE v9[24];
  char v10[24];

  v1 = *(_QWORD *)(*v0 + 80);
  v2 = type metadata accessor for Optional(0, v1);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v9[-v4];
  v6 = v0[2];
  swift_beginAccess(v6 + 24, v10, 1, 0);
  *(_QWORD *)(v6 + 32) = 0;
  swift_unknownObjectWeakAssign(v6 + 24, 0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 56))(v5, 1, 1, v1);
  v7 = (char *)v0 + *(_QWORD *)(*v0 + 112);
  swift_beginAccess(v7, v9, 33, 0);
  (*(void (**)(char *, _BYTE *, uint64_t))(v3 + 40))(v7, v5, v2);
  return swift_endAccess(v9);
}

uint64_t *sub_2BA004()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  swift_release(v0[2]);

  v2 = (uint64_t)v0 + *(_QWORD *)(*v0 + 112);
  v3 = type metadata accessor for Optional(0, *(_QWORD *)(v1 + 80));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  return v0;
}

uint64_t sub_2BA068()
{
  uint64_t *v0;

  v0 = sub_2BA004();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_2BA08C()
{
  return sub_2B9F08();
}

uint64_t sub_2BA0AC()
{
  return CustomCombineIdentifierConvertible<>.combineIdentifier.getter();
}

_QWORD *sub_2BA0CC(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = type metadata accessor for NetworkObserver();
  v3 = (_QWORD *)swift_allocObject(v2, 80, 7);
  return sub_2BA6AC(a1, v3);
}

_QWORD *sub_2BA108(void *a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t v8;

  a2[4] = 0;
  swift_unknownObjectWeakInit(a2 + 3, 0);
  v4 = sub_676C8();
  v5 = static OS_dispatch_queue.main.getter();
  a2[8] = v4;
  a2[9] = &protocol witness table for OS_dispatch_queue;
  a2[5] = v5;
  a2[2] = a1;
  v6 = (void *)objc_opt_self(NSNotificationCenter);
  swift_unknownObjectRetain(a1);
  v7 = objc_msgSend(v6, "defaultCenter");
  v8 = IMNetworkReachabilityFlagsChangedNotification;
  swift_retain(a2);
  objc_msgSend(v7, "addObserver:selector:name:object:", a2, "networkReachabilityDidChange:", v8, a1);

  swift_release(a2);
  return a2;
}

unint64_t sub_2BA1F4()
{
  unint64_t result;

  result = qword_3C6E78;
  if (!qword_3C6E78)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for NetworkObserver.NetworkType);
    atomic_store(result, (unint64_t *)&qword_3C6E78);
  }
  return result;
}

unint64_t sub_2BA23C()
{
  unint64_t result;

  result = qword_3C6E80;
  if (!qword_3C6E80)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for NetworkObserver.NetworkError);
    atomic_store(result, (unint64_t *)&qword_3C6E80);
  }
  return result;
}

unint64_t sub_2BA284()
{
  unint64_t result;

  result = qword_3C6E88;
  if (!qword_3C6E88)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for NetworkObserver.NetworkError);
    atomic_store(result, (unint64_t *)&qword_3C6E88);
  }
  return result;
}

uint64_t sub_2BA2C8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  char v7[24];

  v3 = *a1;
  v4 = *a1 + 24;
  swift_beginAccess(v4, v7, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v4);
  v6 = *(_QWORD *)(v3 + 32);
  *a2 = result;
  a2[1] = v6;
  return result;
}

uint64_t sub_2BA320(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v7[24];

  v2 = *a1;
  v3 = a1[1];
  v4 = *a2;
  v5 = *a2 + 24;
  swift_beginAccess(v5, v7, 1, 0);
  *(_QWORD *)(v4 + 32) = v3;
  return swift_unknownObjectWeakAssign(v5, v2);
}

uint64_t sub_2BA378@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _BYTE v5[24];

  v3 = *a1 + 40;
  swift_beginAccess(v3, v5, 0, 0);
  return sub_150C8(v3, a2);
}

uint64_t method lookup function for NetworkObserver(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for NetworkObserver);
}

uint64_t dispatch thunk of NetworkObserver.delegate.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of NetworkObserver.networkType.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t getEnumTagSinglePayload for NetworkObserver.NetworkType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF7)
    goto LABEL_17;
  if (a2 + 9 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 9) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 9;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 9;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 9;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xA;
  v8 = v6 - 10;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for NetworkObserver.NetworkType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_2BA4C8 + 4 * byte_3052DD[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_2BA4FC + 4 * byte_3052D8[v4]))();
}

uint64_t sub_2BA4FC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2BA504(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2BA50CLL);
  return result;
}

uint64_t sub_2BA518(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2BA520);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_2BA524(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2BA52C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NetworkObserver.NetworkType()
{
  return &type metadata for NetworkObserver.NetworkType;
}

uint64_t storeEnumTagSinglePayload for NetworkObserver.NetworkError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_2BA588 + 4 * byte_3052E2[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_2BA5A8 + 4 * byte_3052E7[v4]))();
}

_BYTE *sub_2BA588(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_2BA5A8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_2BA5B0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_2BA5B8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_2BA5C0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_2BA5C8(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for NetworkObserver.NetworkError()
{
  return &type metadata for NetworkObserver.NetworkError;
}

uint64_t sub_2BA5E4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  result = type metadata accessor for Optional(319, *(_QWORD *)(a1 + 80));
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    result = swift_initClassMetadata2(a1, 0, 3, v4, a1 + 96);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for NetworkObserver.NetworkObserverSubscription(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NetworkObserver.NetworkObserverSubscription);
}

ValueMetadata *type metadata accessor for NetworkObserver.NetworkObserverPublisher()
{
  return &type metadata for NetworkObserver.NetworkObserverPublisher;
}

uint64_t sub_2BA68C()
{
  return swift_getWitnessTable(&unk_3055A4);
}

uint64_t sub_2BA69C()
{
  return swift_getWitnessTable(&unk_30557C);
}

_QWORD *sub_2BA6AC(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t v8;

  a2[4] = 0;
  swift_unknownObjectWeakInit(a2 + 3, 0);
  v4 = sub_676C8();
  v5 = static OS_dispatch_queue.main.getter(v4);
  a2[8] = v4;
  a2[9] = &protocol witness table for OS_dispatch_queue;
  a2[5] = v5;
  a2[2] = a1;
  v6 = (void *)objc_opt_self(NSNotificationCenter);
  swift_unknownObjectRetain(a1);
  v7 = objc_msgSend(v6, "defaultCenter");
  v8 = IMNetworkReachabilityFlagsChangedNotification;
  swift_retain(a2);
  objc_msgSend(v7, "addObserver:selector:name:object:", a2, "networkReachabilityDidChange:", v8, a1);

  swift_release(a2);
  swift_unknownObjectRelease(a1);
  return a2;
}

uint64_t sub_2BA798(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(char *, uint64_t);
  char *v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  char v22;
  _BYTE v23[24];

  v21 = *v1;
  v2 = *(_QWORD *)(v21 + 80);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(a1);
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Optional(0, v2);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v20 - v11;
  v13 = objc_msgSend((id)objc_opt_self(IMNetworkObserver), "isLikelyToReachRemoteServerWithReachabilityFlags:", objc_msgSend(*(id *)(v1[2] + 16), "networkReachabilityFlags"));
  v14 = *(_QWORD *)(*v1 + 112);
  v15 = (uint64_t)v1 + v14;
  if ((v13 & 1) == 0)
  {
    swift_beginAccess((char *)v1 + v14, v23, 0, 0);
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v12, v15, v6);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v12, 1, v2))
    {
      v16 = *(uint64_t (**)(char *, uint64_t))(v7 + 8);
      v17 = v12;
      goto LABEL_6;
    }
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v5, v12, v2);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
    v22 = objc_msgSend((id)v1[3], "isEnabled") ^ 1;
LABEL_9:
    dispatch thunk of Subscriber.receive(_:)(&v22, v2, *(_QWORD *)(v21 + 88));
    v16 = *(uint64_t (**)(char *, uint64_t))(v3 + 8);
    v17 = v5;
    v18 = v2;
    return v16(v17, v18);
  }
  swift_beginAccess((char *)v1 + v14, v23, 0, 0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v15, v6);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v10, 1, v2))
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v5, v10, v2);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    v22 = 1;
    goto LABEL_9;
  }
  v16 = *(uint64_t (**)(char *, uint64_t))(v7 + 8);
  v17 = v10;
LABEL_6:
  v18 = v6;
  return v16(v17, v18);
}

char *sub_2BA9DC(uint64_t a1, uint64_t a2)
{
  char *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, uint64_t, uint64_t, uint64_t);
  char *v12;
  void (*v13)(char *, char *, uint64_t);
  _BYTE v16[24];

  v5 = *(_QWORD *)(*(_QWORD *)v2 + 80);
  v6 = type metadata accessor for Optional(0, v5);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = &v16[-v8 - 8];
  *((_QWORD *)v2 + 3) = objc_msgSend(objc_allocWithZone((Class)ASKAirplaneModeInquiry), "init");
  v10 = *(_QWORD *)(v5 - 8);
  v11 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
  v11(&v2[*(_QWORD *)(*(_QWORD *)v2 + 112)], 1, 1, v5);
  *((_QWORD *)v2 + 2) = a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v9, a2, v5);
  v11(v9, 0, 1, v5);
  v12 = &v2[*(_QWORD *)(*(_QWORD *)v2 + 112)];
  swift_beginAccess(v12, v16, 33, 0);
  v13 = *(void (**)(char *, char *, uint64_t))(v7 + 40);
  swift_retain(a1);
  v13(v12, v9, v6);
  swift_endAccess(v16);
  swift_beginAccess(a1 + 24, v16, 1, 0);
  *(_QWORD *)(a1 + 32) = &off_38F0B0;
  swift_unknownObjectWeakAssign(a1 + 24, v2);
  return v2;
}

char *sub_2BAB48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;

  v7 = type metadata accessor for NetworkObserver.NetworkObserverSubscription(0, *(_QWORD *)(v4 + 80), *(_QWORD *)(v4 + 88), a4);
  swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  return sub_2BA9DC(a1, a2);
}

uint64_t sub_2BAB98(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t ObjectType;

  ObjectType = swift_getObjectType(a1);
  return (*(uint64_t (**)(id, uint64_t, uint64_t))(a2 + 8))(objc_msgSend(*(id *)(v2 + 16), "networkReachabilityFlags"), ObjectType, a2);
}

uint64_t sub_2BABEC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_2BAC18()
{
  uint64_t v0;

  return sub_2B9648(*(_QWORD *)(v0 + 16), *(void (**)(uint64_t, _QWORD))(v0 + 24));
}

void EpisodeListType.title.getter()
{
  uint64_t v0;
  _QWORD v1[8];

  sub_1A0A14(v0, (uint64_t)v1);
  __asm { BR              X11 }
}

uint64_t sub_2BAC6C()
{
  id v0;
  Swift::String v1;
  Swift::String v2;
  uint64_t countAndFlagsBits;
  Swift::String v5;

  v0 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v5._object = (void *)0xE000000000000000;
  v1._countAndFlagsBits = 0x5345444F53495045;
  v1._object = (void *)0xE800000000000000;
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  v5._countAndFlagsBits = 0;
  countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v1, (Swift::String_optional)0, (NSBundle)v0, v2, v5)._countAndFlagsBits;

  return countAndFlagsBits;
}

void EpisodeListType.shelfItemKind.getter()
{
  uint64_t v0;
  _QWORD v1[8];

  sub_1A0A14(v0, (uint64_t)v1);
  __asm { BR              X11 }
}

uint64_t sub_2BAF8C@<X0>(__int16 a1@<W8>)
{
  if ((a1 & 0x100) != 0)
    return 3;
  else
    return 7;
}

uint64_t EpisodeListType.desiredClickActionType.getter@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  __int16 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  char v14;
  uint64_t v15;
  _QWORD *boxed_opaque_existential_2Tm;
  char v17;
  _QWORD v19[5];
  _QWORD v20[9];
  _BYTE v21[72];

  v2 = v1;
  sub_1A0A14(v1, (uint64_t)v20);
  v4 = v20[0];
  v5 = type metadata accessor for PodcastsBagFeatureFlags.Key(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v19[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = sub_1A0A14(v2, (uint64_t)v21);
  if (v21[64] == 5)
  {
    if ((v4 & 0x100) != 0)
      v10 = 3;
    else
      v10 = 7;
    v11 = ModernShelf.ItemKind.rawValue.getter(v10);
    if (v11 != 0x4865646F73697065 || v12 != 0xEB000000006F7265)
      _stringCompareWithSmolCheck(_:_:expecting:)(v11, v12, 0x4865646F73697065, 0xEB000000006F7265, 0);
    swift_bridgeObjectRelease();
    v15 = type metadata accessor for Podcasts(0);
    v19[3] = v15;
    v19[4] = sub_24DB34();
    boxed_opaque_existential_2Tm = __swift_allocate_boxed_opaque_existential_2Tm(v19);
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v15 - 8) + 104))(boxed_opaque_existential_2Tm, enum case for Podcasts.upNextTapToShowDetailExperiment(_:), v15);
    LOBYTE(v15) = isFeatureEnabled(_:)(v19);
    result = __swift_destroy_boxed_opaque_existential_1(v19);
    if ((v15 & 1) != 0)
    {
      v14 = 3;
    }
    else
    {
      (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for PodcastsBagFeatureFlags.Key.upNextTapToShowDetail(_:), v5);
      v17 = static PodcastsBagFeatureFlags.isEnabled(_:)(v8);
      result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v17 & 1) != 0)
        v14 = 3;
      else
        v14 = 1;
    }
  }
  else
  {
    v14 = 4;
  }
  *a1 = v14;
  return result;
}

uint64_t EpisodeSortType.imageForSort(with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  id v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  uint64_t countAndFlagsBits;
  void *object;
  unint64_t v12;
  id v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  Swift::String v22;
  Swift::String v23;

  if ((EpisodeSortType.isAscending.getter() & 1) != 0 && (EpisodeSortType.baseSortTypeMatches(other:)(a1, a2) & 1) != 0)
  {
    v6 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v22._object = (void *)0xE000000000000000;
    v7._object = (void *)0x800000000030B460;
    v7._countAndFlagsBits = 0xD000000000000021;
    v8._countAndFlagsBits = 0;
    v8._object = (void *)0xE000000000000000;
    v22._countAndFlagsBits = 0;
    v9 = NSLocalizedString(_:tableName:bundle:value:comment:)(v7, (Swift::String_optional)0, (NSBundle)v6, v8, v22);
    countAndFlagsBits = v9._countAndFlagsBits;
    object = v9._object;

    v12 = 0xEA00000000007075;
  }
  else
  {
    if ((EpisodeSortType.isDescending.getter(a1) & 1) == 0
      || (EpisodeSortType.baseSortTypeMatches(other:)(a1, a2) & 1) == 0)
    {
      v17 = type metadata accessor for ArtworkModel(0);
      v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56);
      v19 = a3;
      v20 = 1;
      return v18(v19, v20, 1, v17);
    }
    v13 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v23._object = (void *)0xE000000000000000;
    v14._object = (void *)0x800000000030B490;
    v14._countAndFlagsBits = 0xD000000000000021;
    v15._countAndFlagsBits = 0;
    v15._object = (void *)0xE000000000000000;
    v23._countAndFlagsBits = 0;
    v16 = NSLocalizedString(_:tableName:bundle:value:comment:)(v14, (Swift::String_optional)0, (NSBundle)v13, v15, v23);
    countAndFlagsBits = v16._countAndFlagsBits;
    object = v16._object;

    v12 = 0xEC0000006E776F64;
  }
  ArtworkModel.init(glyphName:accessibilityTitle:isCustomSymbol:isMulticolorSymbol:)(0x2E6E6F7276656863, v12, countAndFlagsBits, object, 0, 0);
  v17 = type metadata accessor for ArtworkModel(0);
  v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56);
  v19 = a3;
  v20 = 0;
  return v18(v19, v20, 1, v17);
}

void EpisodeSortType.displayTitle.getter(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_2BB3F0()
{
  id v0;
  Swift::String v1;
  Swift::String v2;
  uint64_t countAndFlagsBits;
  Swift::String v5;

  v0 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v1._countAndFlagsBits = 0xD000000000000022;
  v5._object = (void *)0xEE0064656873696CLL;
  v1._object = (void *)0x800000000030B3F0;
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  v5._countAndFlagsBits = 0x6275502065746144;
  countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v1, (Swift::String_optional)0, (NSBundle)v0, v2, v5)._countAndFlagsBits;

  return countAndFlagsBits;
}

uint64_t EpisodeListType.groupedFlowDestination(podcastUUID:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;

  v4 = v3;
  sub_1A0A14(v4, (uint64_t)&v13);
  if (v21 != 9)
    goto LABEL_6;
  v8 = v17 | v16 | v15;
  if (!(v19 | v20 | v13 | v18 | v8 | v14))
  {
    *(_QWORD *)a3 = a1;
    *(_QWORD *)(a3 + 8) = a2;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    v9 = 1;
    goto LABEL_8;
  }
  if (v13 != 4 || v19 | v20 | v18 | v8 | v14)
  {
LABEL_6:
    v10 = type metadata accessor for FlowDestination(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(a3, 1, 1, v10);
  }
  *(_QWORD *)a3 = a1;
  *(_QWORD *)(a3 + 8) = a2;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  v9 = 6;
LABEL_8:
  *(_BYTE *)(a3 + 64) = v9;
  v12 = type metadata accessor for FlowDestination(0);
  swift_storeEnumTagMultiPayload(a3, v12, 8);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(a3, 0, 1, v12);
  return swift_bridgeObjectRetain();
}

double EpisodeListType.singleShowListType(showUuid:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  double result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;

  v4 = v3;
  sub_1A0A14(v4, (uint64_t)&v13);
  if (v21 == 9)
  {
    v8 = v17 | v16 | v15;
    if (!(v19 | v20 | v13 | v18 | v8 | v14))
    {
      v10 = 1;
      goto LABEL_8;
    }
    v9 = 0;
    v10 = -1;
    if (v13 != 4)
    {
      v11 = 0;
      goto LABEL_9;
    }
    v11 = 0;
    if (!(v19 | v20 | v18 | v8 | v14))
    {
      v10 = 6;
LABEL_8:
      swift_bridgeObjectRetain();
      v9 = a1;
      v11 = a2;
    }
  }
  else
  {
    v9 = 0;
    v11 = 0;
    v10 = -1;
  }
LABEL_9:
  *(_QWORD *)a3 = v9;
  *(_QWORD *)(a3 + 8) = v11;
  result = 0.0;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_BYTE *)(a3 + 64) = v10;
  return result;
}

uint64_t EpisodeListType.groupedShowListType(hidePlayedEpisodes:)(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;

  sub_1A0A14(v1, (uint64_t)&v7);
  if (v15 != 9)
    return 0;
  v3 = v11 | v10 | v9;
  if (!(v13 | v14 | v7 | v12 | v3 | v8))
  {
    v5 = (a1 & 1) == 0;
    v6 = 3;
LABEL_8:
    if (v5)
      return v6;
    else
      return v6 + 1;
  }
  result = 0;
  if (v7 == 4 && !(v13 | v14 | v12 | v3 | v8))
  {
    v5 = (a1 & 1) == 0;
    v6 = 5;
    goto LABEL_8;
  }
  return result;
}

uint64_t EpisodeListType.groupedShowLockupStyle(hidePlayedEpisodes:)@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  _QWORD v19[8];
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;

  v3 = v2;
  sub_1A0A14(v3, (uint64_t)v19);
  v7 = v19[0];
  v6 = v19[1];
  v9 = v19[2];
  v8 = v19[3];
  v11 = v19[4];
  v10 = v19[5];
  v12 = v19[6];
  v17 = v19[7];
  v18 = v20;
  result = sub_1A0A14(v3, (uint64_t)&v21);
  if (v29 != 9)
    goto LABEL_6;
  v14 = v25 | v24 | v23;
  if (!(v27 | v28 | v21 | v26 | v14 | v22))
  {
    v15 = (a1 & 1) == 0;
    v16 = 8;
    goto LABEL_8;
  }
  if (v21 != 4 || v27 | v28 | v26 | v14 | v22)
  {
LABEL_6:
    *(_QWORD *)a2 = 2;
    *(_OWORD *)(a2 + 8) = 0u;
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 56) = 0u;
    *(_OWORD *)(a2 + 65) = 0u;
    return result;
  }
  v15 = (a1 & 1) == 0;
  v16 = 10;
LABEL_8:
  if (!v15)
    ++v16;
  *(_QWORD *)a2 = (65792 * v16) | 0x10000000;
  *(_QWORD *)(a2 + 8) = (v16 << 8) | 0x10101010100000;
  *(_QWORD *)(a2 + 16) = v7;
  *(_QWORD *)(a2 + 24) = v6;
  *(_QWORD *)(a2 + 32) = v9;
  *(_QWORD *)(a2 + 40) = v8;
  *(_QWORD *)(a2 + 48) = v11;
  *(_QWORD *)(a2 + 56) = v10;
  *(_QWORD *)(a2 + 64) = v12;
  *(_QWORD *)(a2 + 72) = v17;
  *(_BYTE *)(a2 + 80) = v18;
  return result;
}

void EpisodeListType.shelfItemPresentation.getter()
{
  uint64_t v0;
  _QWORD v1[8];

  sub_1A0A14(v0, (uint64_t)v1);
  __asm { BR              X12 }
}

void sub_2BBB1C(__int16 a1@<W8>)
{
  uint64_t v1;
  char v2;

  if ((a1 & 0x100) != 0)
    v2 = 3;
  else
    v2 = 7;
  *(_BYTE *)v1 = v2;
  *(_BYTE *)(v1 + 1) = 0;
  *(_WORD *)(v1 + 6) = 256;
  *(_DWORD *)(v1 + 2) = 0;
  *(_QWORD *)(v1 + 8) = 1;
}

uint64_t LibraryActionControllerProtocol.subscribe(feedUrl:adamId:location:explicit:displaySuccessHUD:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(a9 + 40))(a1, a2, a3 & 1);
}

uint64_t ShowsSortType.artworkForSort(currentSort:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;

  if (ShowsSortType.isAscending()() && (ShowsSortType.baseSortTypeMatches(otherSort:)(a1, a2) & 1) != 0)
  {
    sub_2BC1D0(a1);
    v7 = v6;
    v9 = v8;
    v10 = 0xEA00000000007075;
  }
  else
  {
    if (!ShowsSortType.isDescending()() || (ShowsSortType.baseSortTypeMatches(otherSort:)(a1, a2) & 1) == 0)
    {
      v13 = type metadata accessor for ArtworkModel(0);
      v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56);
      v15 = a3;
      v16 = 1;
      return v14(v15, v16, 1, v13);
    }
    sub_2BC1D0(a1);
    v7 = v11;
    v9 = v12;
    v10 = 0xEC0000006E776F64;
  }
  ArtworkModel.init(glyphName:accessibilityTitle:isCustomSymbol:isMulticolorSymbol:)(0x2E6E6F7276656863, v10, v7, v9, 0, 0);
  v13 = type metadata accessor for ArtworkModel(0);
  v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56);
  v15 = a3;
  v16 = 0;
  return v14(v15, v16, 1, v13);
}

void ShowsSortType.displayTitle.getter(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_2BBD0C()
{
  id v0;
  Swift::String v1;
  Swift::String v2;
  uint64_t countAndFlagsBits;
  Swift::String v5;

  v0 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v5._object = (void *)0xE000000000000000;
  v1._countAndFlagsBits = 0x5F59425F54524F53;
  v1._object = (void *)0xED0000454C544954;
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  v5._countAndFlagsBits = 0;
  countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v1, (Swift::String_optional)0, (NSBundle)v0, v2, v5)._countAndFlagsBits;

  return countAndFlagsBits;
}

uint64_t ShowsSortType.showLockupStyle.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(void))((char *)sub_2BBEB8 + 4 * byte_305680[a1]))();
}

double sub_2BBEB8@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_WORD *)a1 = 256;
  *(_BYTE *)(a1 + 2) = 12;
  *(_WORD *)(a1 + 7) = 0;
  *(_DWORD *)(a1 + 3) = 16;
  *(_DWORD *)(a1 + 9) = 67240705;
  *(_WORD *)(a1 + 13) = 4108;
  result = 0.0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_BYTE *)(a1 + 80) = -1;
  return result;
}

Swift::Void __swiftcall LibraryActionControllerProtocol.makeAndSendMetricsEvent(episodeUuid:actionType:pageType:)(Swift::String episodeUuid, ShelfKit::MetricsLabel actionType, ShelfKit::MetricsPageType pageType)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *object;
  uint64_t countAndFlagsBits;
  char v9;
  _BYTE v10[134];
  char v11;
  char v12;
  _OWORD v13[8];

  v5 = v4;
  v6 = v3;
  object = episodeUuid._object;
  countAndFlagsBits = episodeUuid._countAndFlagsBits;
  v9 = *(_BYTE *)pageType;
  v12 = *(_BYTE *)actionType;
  v11 = v9;
  sub_1FB80(v13);
  sub_B5B2C((uint64_t)v13, (uint64_t)v10);
  (*(void (**)(uint64_t, void *, char *, char *, _QWORD, _QWORD, _QWORD, _QWORD, _BYTE *, uint64_t, uint64_t))(v5 + 304))(countAndFlagsBits, object, &v12, &v11, 0, 0, 0, 0, v10, v6, v5);
}

Swift::Void __swiftcall LibraryActionControllerProtocol.makeAndSendMetricsEvent(adamId:actionType:pageType:)(Swift::String adamId, ShelfKit::MetricsLabel actionType, ShelfKit::MetricsPageType pageType)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *object;
  uint64_t countAndFlagsBits;
  char v9;
  _BYTE v10[134];
  char v11;
  char v12;
  _OWORD v13[8];

  v5 = v4;
  v6 = v3;
  object = adamId._object;
  countAndFlagsBits = adamId._countAndFlagsBits;
  v9 = *(_BYTE *)pageType;
  v12 = *(_BYTE *)actionType;
  v11 = v9;
  sub_1FB80(v13);
  sub_B5B2C((uint64_t)v13, (uint64_t)v10);
  (*(void (**)(uint64_t, void *, char *, char *, _QWORD, _QWORD, _QWORD, _QWORD, _BYTE *, uint64_t, uint64_t))(v5 + 296))(countAndFlagsBits, object, &v12, &v11, 0, 0, 0, 0, v10, v6, v5);
}

Swift::Void __swiftcall LibraryActionControllerProtocol.makeAndSendMetricsEvent(podcastUuid:actionType:pageType:)(Swift::String podcastUuid, ShelfKit::MetricsLabel actionType, ShelfKit::MetricsPageType pageType)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *object;
  uint64_t countAndFlagsBits;
  char v9;
  _BYTE v10[134];
  char v11;
  char v12;
  _OWORD v13[8];

  v5 = v4;
  v6 = v3;
  object = podcastUuid._object;
  countAndFlagsBits = podcastUuid._countAndFlagsBits;
  v9 = *(_BYTE *)pageType;
  v12 = *(_BYTE *)actionType;
  v11 = v9;
  sub_1FB80(v13);
  sub_B5B2C((uint64_t)v13, (uint64_t)v10);
  (*(void (**)(uint64_t, void *, char *, char *, _QWORD, _QWORD, _QWORD, _QWORD, _BYTE *, uint64_t, uint64_t))(v5 + 312))(countAndFlagsBits, object, &v12, &v11, 0, 0, 0, 0, v10, v6, v5);
}

uint64_t FeedUpdateResult.description.getter()
{
  _QWORD *v0;
  int v1;

  v1 = (*v0 >> 57) & 0x78 | *v0 & 7;
  if (v1 == 127)
    return 0x64657070696B732ELL;
  if (v1 == 95)
    return 0x656873696E69662ELL;
  return 0x6572756C6961662ELL;
}

uint64_t sub_2BC1BC(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return LibraryActionControllerProtocol.subscribe(feedUrl:adamId:location:explicit:displaySuccessHUD:)(a1, a2, a3 & 1, a4, a5, a6, a7, a8, a9);
}

void sub_2BC1D0(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_2BC208()
{
  id v0;
  Swift::String v1;
  Swift::String v2;
  uint64_t countAndFlagsBits;
  Swift::String v5;

  v0 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v5._object = (void *)0xE000000000000000;
  v1._object = (void *)0x8000000000316140;
  v1._countAndFlagsBits = 0xD000000000000021;
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  v5._countAndFlagsBits = 0;
  countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v1, (Swift::String_optional)0, (NSBundle)v0, v2, v5)._countAndFlagsBits;

  return countAndFlagsBits;
}

void sub_2BC300()
{
  id v0;

  v0 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  JUMPOUT(0x2BC2BCLL);
}

uint64_t storeEnumTagSinglePayload for FeedUpdateContext(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 130 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 130) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0x7E)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0x7D)
    return ((uint64_t (*)(void))((char *)&loc_2BC3B8 + 4 * byte_30568D[v4]))();
  *a1 = a2 - 126;
  return ((uint64_t (*)(void))((char *)sub_2BC3EC + 4 * byte_305688[v4]))();
}

uint64_t sub_2BC3EC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2BC3F4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2BC3FCLL);
  return result;
}

uint64_t sub_2BC414(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2BC41CLL);
  *(_BYTE *)result = 2 * (((-a2 >> 2) & 0x1F) - 32 * a2);
  return result;
}

uint64_t sub_2BC420(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2BC428(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FeedUpdateContext()
{
  return &type metadata for FeedUpdateContext;
}

uint64_t getEnumTagSinglePayload for FeedUpdateResult(uint64_t a1, unsigned int a2)
{
  int v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7C && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 124);
  v3 = ((*(_QWORD *)a1 >> 57) >> 5) | (4 * ((*(_QWORD *)a1 >> 57) & 0x18 | *(_QWORD *)a1 & 7));
  v4 = v3 ^ 0x7F;
  v5 = 128 - v3;
  if (v4 >= 0x7D)
    v5 = 0;
  if (v5 >= 3)
    return v5 - 2;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for FeedUpdateResult(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7B)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 124;
    if (a3 >= 0x7C)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7C)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = ((32 * (126 - a2)) | ((126 - a2) >> 2) | ((unint64_t)((32 * (126 - a2)) | ((126 - a2) >> 2)) << 57)) & 0xF000000000000007;
  }
  return result;
}

ValueMetadata *type metadata accessor for FeedUpdateResult()
{
  return &type metadata for FeedUpdateResult;
}

unint64_t *initializeBufferWithCopyOfBuffer for FeedUpdateError(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  v3 = *a2;
  sub_28C1E4(*a2);
  *a1 = v3;
  return a1;
}

unint64_t destroy for FeedUpdateError(unint64_t *a1)
{
  return sub_28C22C(*a1);
}

unint64_t *assignWithCopy for FeedUpdateError(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *a2;
  sub_28C1E4(*a2);
  v4 = *a1;
  *a1 = v3;
  sub_28C22C(v4);
  return a1;
}

unint64_t *assignWithTake for FeedUpdateError(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  v3 = *a1;
  *a1 = *a2;
  sub_28C22C(v3);
  return a1;
}

uint64_t sub_2BC5B0(_QWORD *a1)
{
  uint64_t v1;

  v1 = *a1 >> 62;
  if (v1 <= 1)
    return v1;
  else
    return (*a1 >> 3) + 2;
}

unint64_t *sub_2BC5CC(unint64_t *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  if (a2 < 2)
  {
    v2 = *result & 0xFFFFFFFFFFFFFF8;
    v3 = a2 << 62;
  }
  else
  {
    v2 = 8 * (a2 - 2);
    v3 = 0x8000000000000000;
  }
  *result = v2 | v3;
  return result;
}

ValueMetadata *type metadata accessor for FeedUpdateError()
{
  return &type metadata for FeedUpdateError;
}

uint64_t dispatch thunk of LibraryActionControllerProtocol.pubDateLimitPublisher(forListType:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;
  uint64_t (*v4)(_OWORD *);
  __int128 v5;
  __int128 v6;
  _OWORD v8[4];
  char v9;

  v3 = *(_BYTE *)(a1 + 64);
  v4 = *(uint64_t (**)(_OWORD *))(a3 + 16);
  v5 = *(_OWORD *)(a1 + 16);
  v8[0] = *(_OWORD *)a1;
  v8[1] = v5;
  v6 = *(_OWORD *)(a1 + 48);
  v8[2] = *(_OWORD *)(a1 + 32);
  v8[3] = v6;
  v9 = v3;
  return v4(v8);
}

uint64_t dispatch thunk of LibraryActionControllerProtocol.episodeSortTypePublisher(forListType:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;
  uint64_t (*v4)(_OWORD *);
  __int128 v5;
  __int128 v6;
  _OWORD v8[4];
  char v9;

  v3 = *(_BYTE *)(a1 + 64);
  v4 = *(uint64_t (**)(_OWORD *))(a3 + 24);
  v5 = *(_OWORD *)(a1 + 16);
  v8[0] = *(_OWORD *)a1;
  v8[1] = v5;
  v6 = *(_OWORD *)(a1 + 48);
  v8[2] = *(_OWORD *)(a1 + 32);
  v8[3] = v6;
  v9 = v3;
  return v4(v8);
}

uint64_t dispatch thunk of LibraryActionControllerProtocol.hidesPlayedEpisodesPublisher(forListType:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;
  uint64_t (*v4)(_OWORD *);
  __int128 v5;
  __int128 v6;
  _OWORD v8[4];
  char v9;

  v3 = *(_BYTE *)(a1 + 64);
  v4 = *(uint64_t (**)(_OWORD *))(a3 + 32);
  v5 = *(_OWORD *)(a1 + 16);
  v8[0] = *(_OWORD *)a1;
  v8[1] = v5;
  v6 = *(_OWORD *)(a1 + 48);
  v8[2] = *(_OWORD *)(a1 + 32);
  v8[3] = v6;
  v9 = v3;
  return v4(v8);
}

uint64_t dispatch thunk of LibraryActionControllerProtocol.turnOffAutoDownloads(podcast:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 80))();
}

uint64_t dispatch thunk of LibraryActionControllerProtocol.turnOffAutoDownloadsForTesting(context:uuid:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 96))();
}

uint64_t dispatch thunk of LibraryActionControllerProtocol.turnOnAutoDownloadsForTesting(context:uuid:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 104))();
}

uint64_t dispatch thunk of LibraryActionControllerProtocol.updateAllFeeds()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 152))();
}

uint64_t dispatch thunk of LibraryActionControllerProtocol.updateStation(stationUuid:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 160))();
}

uint64_t dispatch thunk of LibraryActionControllerProtocol.deleteAllRecentlyUnfollowedShows()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 176))();
}

uint64_t dispatch thunk of LibraryActionControllerProtocol.deleteRecentlyUnfollowedShow(uuid:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 184))();
}

uint64_t dispatch thunk of LibraryActionControllerProtocol.showsSortOrder.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 200))();
}

uint64_t dispatch thunk of LibraryActionControllerProtocol.setSortType(forShows:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 208))();
}

uint64_t dispatch thunk of LibraryActionControllerProtocol.setShowTypeForPodcast(_:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 224))();
}

uint64_t dispatch thunk of LibraryActionControllerProtocol.changeOrder(station:episodes:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 240))();
}

uint64_t dispatch thunk of LibraryActionControllerProtocol.changeOrder(station:stationShows:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 248))();
}

uint64_t dispatch thunk of LibraryActionControllerProtocol.create(station:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 256))();
}

uint64_t dispatch thunk of LibraryActionControllerProtocol.setSortOrder(forStation:order:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 272))();
}

uint64_t dispatch thunk of LibraryActionControllerProtocol.setHidePlayedEpisodes(forStation:hidePlayedEpisodes:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 280))();
}

uint64_t dispatch thunk of LibraryActionControllerProtocol.delete(episode:fromStation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 288))();
}

uint64_t dispatch thunk of LibraryActionControllerProtocol.makeAndSendMetricsEvent(adamId:actionType:pageType:pageId:targetType:location:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return (*(uint64_t (**)(void))(a11 + 296))();
}

uint64_t dispatch thunk of LibraryActionControllerProtocol.makeAndSendMetricsEvent(episodeUuid:actionType:pageType:pageId:targetType:location:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return (*(uint64_t (**)(void))(a11 + 304))();
}

uint64_t dispatch thunk of LibraryActionControllerProtocol.makeAndSendMetricsEvent(podcastUuid:actionType:pageType:pageId:targetType:location:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return (*(uint64_t (**)(void))(a11 + 312))();
}

uint64_t dispatch thunk of LibraryActionControllerProtocol.setMetricsController(metricsController:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 320))();
}

uint64_t dispatch thunk of LibraryActionControllerProtocol.metricsController.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 328))();
}

uint64_t dispatch thunk of LibraryActionControllerProtocol.download(episodeOffers:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 352))();
}

uint64_t dispatch thunk of LibraryActionControllerProtocol.cancelAllDownloads(userInitiated:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 360))();
}

uint64_t dispatch thunk of LibraryActionControllerProtocol.cancel(download:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 368))();
}

uint64_t dispatch thunk of LibraryActionControllerProtocol.cancel(download:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 376))();
}

uint64_t dispatch thunk of LibraryActionControllerProtocol.removeDownload(episode:shouldAllowAutomaticRedownloads:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 392))();
}

uint64_t dispatch thunk of LibraryActionControllerProtocol.removeDownload(adamId:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 400))();
}

uint64_t dispatch thunk of LibraryActionControllerProtocol.isBookmarkedEpisode(forEpisodeUUID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 416))();
}

uint64_t dispatch thunk of LibraryActionControllerProtocol.bookmark(episodeUUIDs:showHUDConfirmation:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 424))();
}

uint64_t dispatch thunk of LibraryActionControllerProtocol.bookmark(episodeOffers:showHUDConfirmation:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 432))();
}

uint64_t dispatch thunk of LibraryActionControllerProtocol.removeEpisodesFromBookmarks(forEpisodeUUIDs:showHUDConfirmation:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 440))();
}

uint64_t dispatch thunk of LibraryActionControllerProtocol.removeEpisodesFromBookmarks(episodeOffers:showHUDConfirmation:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 448))();
}

uint64_t dispatch thunk of LibraryActionControllerProtocol.removeEpisodesFromBookmarks(storeIds:showHUDConfirmation:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 456))();
}

uint64_t dispatch thunk of LibraryActionControllerProtocol.removeEpisodesFromBookmarks(podcastUuid:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 464))();
}

uint64_t dispatch thunk of LibraryActionControllerProtocol.removeAllRecoveredEpisodes(inPodcastUuid:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 472))();
}

uint64_t dispatch thunk of LibraryActionControllerProtocol.blockingPodcastsCount(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 480))();
}

uint64_t dispatch thunk of LibraryActionControllerProtocol.removeRecoveredEpisodes(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 488))();
}

uint64_t dispatch thunk of LibraryActionControllerProtocol.hasEpisodesThatAreNotVisuallyPlayed(baseEpisodesPredicate:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 496))();
}

uint64_t dispatch thunk of LibraryActionControllerProtocol.handleMarkingEpisodesAsPlayed(source:baseEpisodesPredicate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 504))();
}

uint64_t dispatch thunk of LibraryActionControllerProtocol.markAllAsPlayedSheetAction(episodesPredicate:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 512))();
}

uint64_t dispatch thunk of LibraryActionControllerProtocol.markEpisodesAsPlayed(baseEpisodesPredicate:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 520))();
}

uint64_t dispatch thunk of LibraryActionControllerProtocol.hasDownloadedEpisodes(podcastUuid:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 528))();
}

uint64_t dispatch thunk of LibraryActionControllerProtocol.hasDownloadedEpisodes()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 536))();
}

uint64_t dispatch thunk of LibraryActionControllerProtocol.handleRemovingAllDownloadsFromShow(podcastUuid:shouldAllowAutomaticRedownloads:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 544))();
}

uint64_t dispatch thunk of LibraryActionControllerProtocol.handleRemovingAllDownloadsFromAllShows()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 552))();
}

uint64_t dispatch thunk of LibraryActionControllerProtocol.downloadedEpisodesCountForShow(podcastUuid:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 560))();
}

uint64_t dispatch thunk of LibraryActionControllerProtocol.downloadedEpisodesCountForAllShows()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 568))();
}

uint64_t dispatch thunk of LibraryActionControllerProtocol.hasSavedEpisodes(podcastUuid:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 576))();
}

uint64_t dispatch thunk of LibraryActionControllerProtocol.savedEpisodesCount(podcastUuid:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 584))();
}

uint64_t dispatch thunk of LibraryActionControllerProtocol.hasLibraryEpisodesToRemove(podcastUuid:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 592))();
}

uint64_t dispatch thunk of LibraryActionControllerProtocol.hasAtLeastNEpisodesPartiallyPlayedInLastTwoMonths(podcastUuid:number:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 600))();
}

uint64_t dispatch thunk of LibraryActionControllerProtocol.hasAtLeastNEpisodesPartiallyPlayedInLastTwoMonths(podcastStoreId:number:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 608))();
}

uint64_t dispatch thunk of LibraryActionControllerProtocol.markUpsellBannerAsDismissed(episodeStoreTrackId:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 616))();
}

uint64_t dispatch thunk of LibraryActionControllerProtocol.removeShowFromLibrary(podcastUuid:shouldRemoveBookmarks:shouldAllowAutomaticRedownloads:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 624))();
}

uint64_t dispatch thunk of LibraryActionControllerProtocol.podcastTitleFromUuid(uuid:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 632))();
}

uint64_t dispatch thunk of LibraryActionControllerProtocol.mark(episodeUUIDS:as:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 640))();
}

uint64_t dispatch thunk of LibraryActionControllerProtocol.mark(episodeOffers:as:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 648))();
}

uint64_t dispatch thunk of LibraryActionControllerProtocol.removeFromUpNext(uuids:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 656))();
}

uint64_t dispatch thunk of LibraryActionControllerProtocol.transcriptReportAConcern(episode:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 664))();
}

uint64_t dispatch thunk of LibraryActionControllerProtocol.showHUDForBookmark()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 672))();
}

uint64_t dispatch thunk of LibraryActionControllerProtocol.showHUDForRemovedBookmark()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 680))();
}

uint64_t dispatch thunk of LibraryActionControllerProtocol.showHUDForSubscribed()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 688))();
}

uint64_t sub_2BC8E8(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  char *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  int64_t v11;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  char v22;

  if ((unint64_t)a1 >> 62)
    goto LABEL_33;
  v2 = *(_QWORD *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain();
  while (v2)
  {
    v3 = _swiftEmptyArrayStorage;
    v4 = 4;
    while (1)
    {
      v5 = (a1 & 0xC000000000000001) != 0
         ? (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v4 - 4)
         : (char *)*(id *)(a1 + 8 * v4);
      v6 = v5;
      v7 = v4 - 3;
      if (__OFADD__(v4 - 4, 1))
        break;
      v8 = *(_QWORD *)&v5[OBJC_IVAR____TtC8ShelfKit5Shelf_items];
      swift_bridgeObjectRetain();

      v9 = *(_QWORD *)(v8 + 16);
      v10 = v3[2];
      v11 = v10 + v9;
      if (__OFADD__(v10, v9))
        goto LABEL_29;
      isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(v3);
      if ((_DWORD)isUniquelyReferenced_nonNull_native && v11 <= v3[3] >> 1)
      {
        if (*(_QWORD *)(v8 + 16))
          goto LABEL_19;
      }
      else
      {
        if (v10 <= v11)
          v13 = v10 + v9;
        else
          v13 = v10;
        v3 = sub_11488(isUniquelyReferenced_nonNull_native, v13, 1, v3);
        if (*(_QWORD *)(v8 + 16))
        {
LABEL_19:
          v14 = v3[2];
          if ((v3[3] >> 1) - v14 < v9)
            goto LABEL_31;
          v15 = (unint64_t)&v3[5 * v14 + 4];
          if (v8 + 32 < v15 + 40 * v9 && v15 < v8 + 32 + 40 * v9)
          {
            v22 = 2;
            result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v22, 1092, 0);
            __break(1u);
            return result;
          }
          __swift_instantiateConcreteTypeFromMangledName(&qword_3B0948);
          swift_arrayInitWithCopy(v15);
          if (v9)
          {
            v17 = v3[2];
            v18 = __OFADD__(v17, v9);
            v19 = v17 + v9;
            if (v18)
              goto LABEL_32;
            v3[2] = v19;
          }
          goto LABEL_5;
        }
      }
      if (v9)
        goto LABEL_30;
LABEL_5:
      swift_bridgeObjectRelease();
      ++v4;
      if (v7 == v2)
        goto LABEL_38;
    }
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    if (a1 < 0)
      v20 = a1;
    else
      v20 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v2 = _CocoaArrayWrapper.endIndex.getter(v20);
  }
  v3 = _swiftEmptyArrayStorage;
LABEL_38:
  swift_bridgeObjectRelease();
  return (uint64_t)v3;
}

uint64_t sub_2BCB24(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;

  v3 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (char *)&v25 - v8;
  result = (uint64_t)objc_msgSend((id)objc_opt_self(PFClientUtil), "supportsLocalLibrary");
  if ((result & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + 16);
    if (v11)
    {
      v12 = *(_QWORD *)(v1 + 24);
      if (v12)
      {
        swift_retain();
        swift_retain();
        v13 = sub_2BCDCC();
        v14 = sub_2BD078(v13);
        ThinClientEpisodeStateRepository.reportEpisodeState(_:)((Swift::OpaquePointer)v14);
        v15 = sub_2BD408((uint64_t)v14, v13);
        swift_bridgeObjectRelease();
        ThinClientEpisodeStateRepository.requestEpisodeStateIfNeeded(for:)(v15);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_2BD610(a1);
        sub_2BD6EC(a1);
        swift_release(v11);
        return swift_release(v12);
      }
      else
      {
        sub_1F470();
        v20 = swift_retain();
        v21 = static OS_os_log.episodeStatesLogger.getter(v20);
        v22 = Logger.logObject.getter(v21);
        v23 = static os_log_type_t.fault.getter(v22);
        if (os_log_type_enabled(v22, v23))
        {
          v24 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v24 = 0;
          _os_log_impl(&dword_0, v22, v23, "This is a thin client but we don't have a ThinClientPodcastStateRepository injected. This will cause the thin client to entirely miss most of the state.", v24, 2u);
          swift_slowDealloc(v24, -1, -1);
        }

        swift_release(v11);
        return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v9, v3);
      }
    }
    else
    {
      sub_1F470();
      v16 = ((uint64_t (*)(void))static OS_os_log.episodeStatesLogger.getter)();
      v17 = Logger.logObject.getter(v16);
      v18 = static os_log_type_t.fault.getter(v17);
      if (os_log_type_enabled(v17, (os_log_type_t)v18))
      {
        v19 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v19 = 0;
        _os_log_impl(&dword_0, v17, (os_log_type_t)v18, "This is a thin client but we don't have a ThinClientEpisodeStateRepository injected. This will cause the thin client to entirely miss most of the state.", v19, 2u);
        swift_slowDealloc(v19, -1, -1);
      }

      return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    }
  }
  return result;
}

uint64_t type metadata accessor for StorePageStateController()
{
  return objc_opt_self(_TtC8ShelfKit24StorePageStateController);
}

uint64_t sub_2BCDCC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t i;
  char *v6;
  void *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[40];
  _QWORD v28[5];
  unint64_t v29;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = _swiftEmptyArrayStorage;
  v28[0] = _swiftEmptyArrayStorage;
  if ((unint64_t)v1 >> 62)
  {
    if (v1 < 0)
      v15 = v1;
    else
      v15 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter(v15);
    v3 = result;
    if (result)
      goto LABEL_3;
  }
  else
  {
    v3 = *(_QWORD *)((char *)&dword_10 + (v1 & 0xFFFFFFFFFFFFF8));
    result = swift_bridgeObjectRetain();
    if (v3)
    {
LABEL_3:
      if (v3 < 1)
      {
        __break(1u);
        return result;
      }
      for (i = 0; i != v3; ++i)
      {
        if ((v1 & 0xC000000000000001) != 0)
          v6 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(i);
        else
          v6 = (char *)*(id *)(v1 + 8 * i + 32);
        v7 = v6;
        v8 = ShelfContentType.modernItemKind.getter(*(_QWORD *)&v6[OBJC_IVAR____TtC8ShelfKit5Shelf_contentType]);
        if (v8 != 65
          && ((ModernShelf.ItemKind.modelType.getter(v8),
               v10 = v9,
               v11 = type metadata accessor for LegacyEpisodeLockup(0),
               v10 == v11)
           || (v11 = type metadata accessor for LibraryEpisodeLockup(0), v10 == v11)))
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v11);
          v12 = *(_QWORD *)(v28[0] + 16);
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v12);
          v13 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v12, v7);
          specialized ContiguousArray._endMutation()(v13);
        }
        else
        {

        }
      }
      swift_bridgeObjectRelease();
      v14 = (_QWORD *)v28[0];
      goto LABEL_20;
    }
  }
  swift_bridgeObjectRelease();
  v14 = _swiftEmptyArrayStorage;
LABEL_20:
  v16 = sub_2BC8E8((uint64_t)v14);
  swift_release(v14);
  v29 = (unint64_t)_swiftEmptyArrayStorage;
  v17 = *(_QWORD *)(v16 + 16);
  if (!v17)
    goto LABEL_31;
  v18 = v16 + 32;
  swift_bridgeObjectRetain();
  do
  {
    sub_150C8(v18, (uint64_t)v28);
    sub_150C8((uint64_t)v28, (uint64_t)v27);
    v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0948);
    v20 = type metadata accessor for LegacyEpisodeLockup(0);
    if (!swift_dynamicCast(&v26, v27, v19, v20, 6))
      goto LABEL_23;
    v21 = v26;
    if ((AdamID.isEmpty.getter(*(_QWORD *)(v26 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup_adamId)) & 1) != 0)
    {
      swift_release(v21);
LABEL_23:
      __swift_destroy_boxed_opaque_existential_1(v28);
      goto LABEL_24;
    }
    v22 = __swift_destroy_boxed_opaque_existential_1(v28);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v22);
    v24 = *(_QWORD *)((char *)&dword_10 + (v29 & 0xFFFFFFFFFFFFFF8));
    v23 = *(_QWORD *)((char *)&dword_18 + (v29 & 0xFFFFFFFFFFFFFF8));
    if (v24 >= v23 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v23 > 1, v24 + 1, 1);
    v25 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v24, v21);
    specialized Array._endMutation()(v25);
LABEL_24:
    v18 += 40;
    --v17;
  }
  while (v17);
  swift_bridgeObjectRelease();
  v2 = (_QWORD *)v29;
LABEL_31:
  swift_bridgeObjectRelease();
  return (uint64_t)v2;
}

_QWORD *sub_2BD078(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  Swift::UInt64 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  Swift::UInt64 v17;
  Swift::UInt64 v18;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v20;
  uint64_t v21;
  _BOOL8 v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *result;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  _QWORD *v41;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BA278);
  __chkstk_darwin(v2);
  v4 = (uint64_t)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ThinClientEpisodeStateModel(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v40 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v39 = (char *)&v34 - v9;
  if ((unint64_t)a1 >> 62)
  {
LABEL_28:
    if (a1 < 0)
      v32 = a1;
    else
      v32 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v10 = _CocoaArrayWrapper.endIndex.getter(v32);
    if (v10)
      goto LABEL_3;
  }
  else
  {
    v10 = *(_QWORD *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8));
    swift_bridgeObjectRetain();
    if (v10)
    {
LABEL_3:
      v38 = a1 & 0xC000000000000001;
      v11 = &_swiftEmptyDictionarySingleton;
      v12 = 4;
      v35 = v4;
      v36 = a1;
      v37 = v5;
      v34 = v10;
      while (1)
      {
        v13 = v12 - 4;
        if (v38)
        {
          v14 = specialized _ArrayBuffer._getElementSlowPath(_:)(v12 - 4);
          v15 = v12 - 3;
          if (__OFADD__(v13, 1))
            goto LABEL_25;
        }
        else
        {
          v14 = *(_QWORD *)(a1 + 8 * v12);
          swift_retain();
          v15 = v12 - 3;
          if (__OFADD__(v13, 1))
          {
LABEL_25:
            __break(1u);
LABEL_26:
            __break(1u);
LABEL_27:
            __break(1u);
            goto LABEL_28;
          }
        }
        sub_2BD880(v14 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_thinClientEpisodeState, v4);
        if ((*(unsigned int (**)(uint64_t, uint64_t, unint64_t))(v6 + 48))(v4, 1, v5) != 1)
          break;
        sub_1459C(v4, &qword_3BA278);
        swift_release(v14);
LABEL_5:
        ++v12;
        if (v15 == v10)
        {
          swift_bridgeObjectRelease();
          return v11;
        }
      }
      a1 = *(_QWORD *)(v6 + 32);
      v16 = v39;
      ((void (*)(char *, uint64_t, unint64_t))a1)(v39, v4, v5);
      v17 = v6;
      v6 = *(_QWORD *)(v14 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup_adamId);
      v18 = v17;
      (*(void (**)(char *, char *, unint64_t))(v17 + 16))(v40, v16, v5);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v11);
      v41 = v11;
      v5 = sub_29C48(v6);
      v21 = v11[2];
      v22 = (v20 & 1) == 0;
      v23 = v21 + v22;
      if (__OFADD__(v21, v22))
        goto LABEL_26;
      v4 = v20;
      if (v11[3] < v23)
      {
        sub_22E9C4(v23, isUniquelyReferenced_nonNull_native);
        v24 = sub_29C48(v6);
        if ((v4 & 1) != (v25 & 1))
        {
          result = (_QWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for AdamID);
          __break(1u);
          return result;
        }
        v5 = v24;
        v26 = v41;
        if ((v4 & 1) == 0)
          goto LABEL_21;
LABEL_19:
        v6 = v18;
        v27 = v26[7] + *(_QWORD *)(v18 + 72) * v5;
        v5 = v37;
        (*(void (**)(unint64_t, char *, unint64_t))(v18 + 40))(v27, v40, v37);
LABEL_23:
        v11 = v41;
        swift_bridgeObjectRelease();
        (*(void (**)(char *, unint64_t))(v6 + 8))(v39, v5);
        swift_release(v14);
        v4 = v35;
        a1 = v36;
        v10 = v34;
        goto LABEL_5;
      }
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v26 = v41;
        if ((v20 & 1) != 0)
          goto LABEL_19;
      }
      else
      {
        sub_231D60();
        v26 = v41;
        if ((v4 & 1) != 0)
          goto LABEL_19;
      }
LABEL_21:
      v26[(v5 >> 6) + 8] |= 1 << v5;
      *(_QWORD *)(v26[6] + 8 * v5) = v6;
      v6 = v18;
      v28 = v26[7] + *(_QWORD *)(v18 + 72) * v5;
      v5 = v37;
      ((void (*)(unint64_t, char *, unint64_t))a1)(v28, v40, v37);
      v29 = v26[2];
      v30 = __OFADD__(v29, 1);
      v31 = v29 + 1;
      if (v30)
        goto LABEL_27;
      v26[2] = v31;
      goto LABEL_23;
    }
  }
  swift_bridgeObjectRelease();
  return &_swiftEmptyDictionarySingleton;
}

uint64_t sub_2BD408(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;

  v3 = swift_bridgeObjectRetain();
  v4 = sub_2CC358(v3);
  if ((unint64_t)a2 >> 62)
  {
    if (a2 < 0)
      v18 = a2;
    else
      v18 = a2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v5 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease();
  }
  else
  {
    v5 = *(_QWORD *)((char *)&dword_10 + (a2 & 0xFFFFFFFFFFFFF8));
  }
  if (v5)
  {
    result = sub_180848(0, v5 & ~(v5 >> 63), 0);
    if (v5 < 0)
    {
      __break(1u);
      return result;
    }
    if ((a2 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v5; ++i)
      {
        v8 = specialized _ArrayBuffer._getElementSlowPath(_:)(i);
        v9 = *(_QWORD *)(v8 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup_adamId);
        swift_unknownObjectRelease(v8);
        v11 = _swiftEmptyArrayStorage[2];
        v10 = _swiftEmptyArrayStorage[3];
        if (v11 >= v10 >> 1)
          sub_180848(v10 > 1, v11 + 1, 1);
        _swiftEmptyArrayStorage[2] = v11 + 1;
        _swiftEmptyArrayStorage[v11 + 4] = v9;
      }
    }
    else
    {
      v12 = (_QWORD *)(a2 + 32);
      v13 = _swiftEmptyArrayStorage[2];
      do
      {
        v14 = *(_QWORD *)(*v12 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup_adamId);
        v15 = _swiftEmptyArrayStorage[3];
        if (v13 >= v15 >> 1)
          sub_180848(v15 > 1, v13 + 1, 1);
        _swiftEmptyArrayStorage[2] = v13 + 1;
        _swiftEmptyArrayStorage[v13 + 4] = v14;
        ++v12;
        ++v13;
        --v5;
      }
      while (v5);
    }
  }
  v16 = sub_2CF5BC((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v4 + 16) <= *(_QWORD *)(v16 + 16) >> 3)
  {
    sub_2CEAF8(v4);
    swift_bridgeObjectRelease();
    return v16;
  }
  else
  {
    v17 = sub_2CEC58(v4, v16);
    swift_bridgeObjectRelease();
    return (uint64_t)v17;
  }
}

uint64_t sub_2BD610(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char v6;
  uint64_t result;
  int v8;
  uint64_t v9;

  v2 = type metadata accessor for InteractionContext.Page(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D8BD0(a1 + OBJC_IVAR____TtC8ShelfKit4Page_pageContext, (uint64_t)v4);
  if (swift_getEnumCaseMultiPayload(v4, v2) != 2)
    return sub_1D8B8C((uint64_t)v4);
  v5 = *(_QWORD *)v4;
  v6 = v4[8];
  result = swift_bridgeObjectRelease();
  if ((v6 & 1) == 0)
  {
    v8 = *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC8ShelfKit4Page_mapiInLibrary);
    if (v8 != 2)
      return ThinClientEpisodeStateRepository.updateLocalBookmarkState(_:to:)(v5, v8 & 1);
  }
  return result;
}

uint64_t sub_2BD6EC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t result;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t inited;
  unint64_t v15;
  uint64_t v16;
  _BYTE v17[80];

  v2 = type metadata accessor for InteractionContext.Page(0);
  __chkstk_darwin(v2);
  v4 = &v17[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1D8BD0(a1 + OBJC_IVAR____TtC8ShelfKit4Page_pageContext, (uint64_t)v4);
  if (swift_getEnumCaseMultiPayload(v4, v2) != 3)
    return sub_1D8B8C((uint64_t)v4);
  v5 = *(_QWORD *)v4;
  v6 = v4[8];
  swift_bridgeObjectRelease();
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7DD0);
  result = sub_1459C((uint64_t)&v4[*(int *)(v7 + 64)], &qword_3B0CC8);
  if ((v6 & 1) == 0)
  {
    v9 = *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC8ShelfKit4Page_mapiInLibrary);
    if (v9 != 2)
    {
      v10 = v9 & 1;
      if ((v9 & 1) != 0)
        v11 = 0x64696C61766E69;
      else
        v11 = 0;
      if ((v9 & 1) != 0)
        v12 = 0xE700000000000000;
      else
        v12 = 0;
      v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C70C0);
      inited = swift_initStackObject(v13, v17);
      *(_QWORD *)(inited + 32) = v5;
      *(_OWORD *)(inited + 16) = xmmword_2EA0D0;
      *(_QWORD *)(inited + 40) = v10;
      *(_QWORD *)(inited + 48) = v11;
      *(_QWORD *)(inited + 64) = 0;
      *(_QWORD *)(inited + 72) = 0;
      *(_QWORD *)(inited + 56) = v12;
      v15 = sub_2897D0((_QWORD *)inited);
      swift_setDeallocating(inited);
      v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C70C8);
      swift_arrayDestroy(inited + 32, 1, v16);
      ThinClientPodcastStateRepository.reportPodcastState(_:)((Swift::OpaquePointer)v15);
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t sub_2BD880(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BA278);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_2BD8C8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  Swift::String v30;
  Swift::String v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  int *v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t v64;
  _BYTE v65[12];
  int v66;
  uint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD v75[6];
  _OWORD v76[2];
  uint64_t v77;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
  __chkstk_darwin(v4);
  v6 = &v65[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v73 = type metadata accessor for UUID(0);
  v71 = *(_QWORD *)(v73 - 8);
  __chkstk_darwin(v73);
  v8 = &v65[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v72 = type metadata accessor for ActionMetrics(0);
  v70 = *(_QWORD *)(v72 - 8);
  __chkstk_darwin(v72);
  v10 = &v65[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v11);
  v13 = &v65[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = type metadata accessor for Locale(0);
  __chkstk_darwin(v14);
  v16 = &v65[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v17);
  v19 = &v65[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v20 = type metadata accessor for String.LocalizationValue.StringInterpolation(0);
  __chkstk_darwin(v20);
  v22 = &v65[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v23 = objc_msgSend(a1, "color");
  if (v23)
  {
    v24 = v23;
    v69 = v6;
    v74 = a2;
    v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
    v27 = v26;

    v66 = HexColor.init(_:)(v25, v27);
    v77 = 0;
    memset(v76, 0, sizeof(v76));
    if (MTCategory.followedShowsCount.getter() < 1)
    {
      v67 = 0;
      v68 = 0;
    }
    else
    {
      String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)(15, 1);
      v30._countAndFlagsBits = 0;
      v30._object = (void *)0xE000000000000000;
      String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v30);
      v75[0] = MTCategory.followedShowsCount.getter();
      String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:specifier:)(v75, 1684827173, 0xE400000000000000, &type metadata for Int, &protocol witness table for Int);
      v31._countAndFlagsBits = 0x65776F6C6C6F4620;
      v31._object = (void *)0xEF73776F68532064;
      String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v31);
      v32 = String.LocalizationValue.init(stringInterpolation:)(v22);
      static Locale.current.getter(v32);
      v33 = String.init(localized:table:bundle:locale:comment:)(v19, 0, 0, 0, v16, 0, 0, 256);
      v67 = v34;
      v68 = v33;
      v35 = type metadata accessor for ImpressionMetrics(0);
      v36 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v13, 1, 1, v35);
      static ActionMetrics.notInstrumented.getter(v36);
      v37 = type metadata accessor for Action(0);
      v38 = swift_allocObject(v37, *(unsigned int *)(v37 + 48), *(unsigned __int16 *)(v37 + 52));
      UUID.init()(v38);
      v39 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
      v41 = v40;
      (*(void (**)(_BYTE *, uint64_t))(v71 + 8))(v8, v73);
      *(_QWORD *)(v38 + 16) = v39;
      *(_QWORD *)(v38 + 24) = v41;
      *(_QWORD *)(v38 + 32) = 0;
      *(_QWORD *)(v38 + 40) = 0;
      *(_BYTE *)(v38 + 48) = 32;
      (*(void (**)(uint64_t, _BYTE *, uint64_t))(v70 + 32))(v38 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v10, v72);
      sub_15BD4((uint64_t)v13, v38 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics, (uint64_t *)&unk_3B8790);
      v75[3] = v37;
      v75[4] = sub_F1C0((unint64_t *)&qword_3B28E8, (void (*)(uint64_t))type metadata accessor for Action, (uint64_t)&protocol conformance descriptor for Action);
      v75[0] = v38;
      sub_1459C((uint64_t)v76, &qword_3B0C50);
      sub_15BD4((uint64_t)v75, (uint64_t)v76, &qword_3B0C50);
    }
    v42 = objc_msgSend(a1, "url");
    if (v42)
    {
      v43 = v42;
      v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
      v46 = v45;

      v47 = (uint64_t)v69;
      URL.init(string:)(v44, v46);
      swift_bridgeObjectRelease();
    }
    else
    {
      v48 = type metadata accessor for URL(0);
      v47 = (uint64_t)v69;
      (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 56))(v69, 1, 1, v48);
    }
    v75[0] = AdamID.init(rawValue:)(objc_msgSend(a1, "adamID"));
    v49 = sub_144B4();
    v50 = BinaryInteger.description.getter(&type metadata for UInt64, v49);
    v52 = v51;
    v53 = MTCategory.isFavorited.getter();
    v54 = (int *)type metadata accessor for CategoryListItem(0);
    v55 = v74;
    sub_2BE71C(a1, v74 + v54[6]);
    v56 = objc_msgSend(a1, "name");
    v57 = static String._unconditionallyBridgeFromObjectiveC(_:)(v56);
    v59 = v58;

    v60 = v55 + v54[12];
    v61 = type metadata accessor for ImpressionMetrics(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 56))(v60, 1, 1, v61);
    *(_QWORD *)v55 = v50;
    *(_QWORD *)(v55 + 8) = v52;
    *(_BYTE *)(v55 + 16) = v53 & 1;
    *(_DWORD *)(v55 + v54[7]) = v66;
    v62 = (uint64_t *)(v55 + v54[8]);
    *v62 = v57;
    v62[1] = v59;
    v63 = (uint64_t *)(v55 + v54[9]);
    v64 = v67;
    *v63 = v68;
    v63[1] = v64;
    sub_15BD4(v47, v55 + v54[10], &qword_3B4370);
    sub_15BD4((uint64_t)v76, v55 + v54[11], &qword_3B0C50);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, int *))(*((_QWORD *)v54 - 1) + 56))(v55, 0, 1, v54);
  }
  else
  {

    v28 = type metadata accessor for CategoryListItem(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(a2, 1, 1, v28);
  }
}

uint64_t CategoryListItem.artwork.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for CategoryListItem(0);
  return sub_267BC(v1 + *(int *)(v3 + 24), a1, &qword_3BEB70);
}

uint64_t type metadata accessor for CategoryListItem(uint64_t a1)
{
  uint64_t result;

  result = qword_3C7138;
  if (!qword_3C7138)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CategoryListItem);
  return result;
}

uint64_t CategoryListItem.color.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + *(int *)(type metadata accessor for CategoryListItem(0) + 28));
}

uint64_t CategoryListItem.title.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CategoryListItem(0) + 32));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CategoryListItem.subtitle.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CategoryListItem(0) + 36));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CategoryListItem.url.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for CategoryListItem(0);
  return sub_267BC(v1 + *(int *)(v3 + 40), a1, &qword_3B4370);
}

uint64_t CategoryListItem.playAction.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for CategoryListItem(0);
  return sub_267BC(v1 + *(int *)(v3 + 44), a1, &qword_3B0C50);
}

uint64_t CategoryListItem.impressionMetrics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for CategoryListItem(0);
  return sub_267BC(v1 + *(int *)(v3 + 48), a1, (uint64_t *)&unk_3B8790);
}

uint64_t CategoryListItem.init(id:isFavorited:artwork:color:title:subtitle:url:playAction:impressionMetrics:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  int *v19;
  _QWORD *v20;
  _QWORD *v21;

  *(_QWORD *)a9 = a1;
  *(_QWORD *)(a9 + 8) = a2;
  *(_BYTE *)(a9 + 16) = a3;
  v19 = (int *)type metadata accessor for CategoryListItem(0);
  sub_15BD4(a4, a9 + v19[6], &qword_3BEB70);
  *(_DWORD *)(a9 + v19[7]) = a5;
  v20 = (_QWORD *)(a9 + v19[8]);
  *v20 = a6;
  v20[1] = a7;
  v21 = (_QWORD *)(a9 + v19[9]);
  *v21 = a8;
  v21[1] = a10;
  sub_15BD4(a11, a9 + v19[10], &qword_3B4370);
  sub_15BD4(a12, a9 + v19[11], &qword_3B0C50);
  return sub_15BD4(a13, a9 + v19[12], (uint64_t *)&unk_3B8790);
}

uint64_t sub_2BE1AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_267BC(v2 + *(int *)(a1 + 48), a2, (uint64_t *)&unk_3B8790);
}

uint64_t CategoryListItem.clickAction.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t result;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;

  v2 = (uint64_t)v1;
  v56 = a1;
  v55 = type metadata accessor for CategoryListItem(0);
  __chkstk_darwin(v55);
  v4 = (char *)&v47 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v7 = (uint64_t *)((char *)&v47 - v6);
  v8 = type metadata accessor for Logger(0);
  v53 = *(_QWORD *)(v8 - 8);
  v54 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ActionMetrics(0);
  __chkstk_darwin(v11);
  v50 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = type metadata accessor for FlowDestination(0);
  __chkstk_darwin(v48);
  v49 = (uint64_t *)((char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v52 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
  __chkstk_darwin(v52);
  v51 = (uint64_t)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v17 = (char *)&v47 - v16;
  v18 = type metadata accessor for URL(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v47 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = *v1;
  v23 = *(_QWORD *)(v2 + 8);
  swift_bridgeObjectRetain();
  v24 = AdamID.init(_:)(v22, v23);
  if ((v25 & 1) == 0)
  {
    v26 = v24;
    sub_267BC(v2 + *(int *)(v55 + 40), (uint64_t)v17, &qword_3B4370);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v21, v17, v18);
      v39 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B6FA0);
      v40 = (uint64_t)v49;
      v41 = (char *)v49 + *(int *)(v39 + 48);
      *v49 = v26;
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v41, v21, v18);
      v42 = swift_storeEnumTagMultiPayload(v40, v48, 32);
      LOBYTE(v58) = 0;
      LOBYTE(v57) = 0;
      v43 = (uint64_t)v50;
      static ActionMetrics.notInstrumented.getter(v42);
      v44 = type metadata accessor for FlowAction(0);
      swift_allocObject(v44, *(unsigned int *)(v44 + 48), *(unsigned __int16 *)(v44 + 52));
      v45 = FlowAction.init(_:id:title:presentationContext:animationBehavior:presentationStyle:destinationPageHeader:actionMetrics:)(v40, 0, 0, 0, 0, (char *)&v58, 0, 48, (char *)&v57, v43);
      v46 = v56;
      v56[3] = v44;
      v46[4] = sub_F1C0((unint64_t *)&qword_3B0C40, (void (*)(uint64_t))type metadata accessor for FlowAction, (uint64_t)&protocol conformance descriptor for Action);
      *v46 = v45;
      return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v21, v18);
    }
    v24 = sub_1459C((uint64_t)v17, &qword_3B4370);
  }
  static Logger.interests.getter(v24);
  sub_2BF8F0(v2, (uint64_t)v7);
  v27 = sub_2BF8F0(v2, (uint64_t)v4);
  v28 = Logger.logObject.getter(v27);
  v29 = static os_log_type_t.default.getter(v28);
  if (os_log_type_enabled(v28, v29))
  {
    v30 = swift_slowAlloc(22, -1);
    v31 = swift_slowAlloc(64, -1);
    v58 = v31;
    *(_DWORD *)v30 = 136315394;
    v50 = v10;
    v32 = *v7;
    v33 = v7[1];
    swift_bridgeObjectRetain();
    v57 = sub_69298(v32, v33, &v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58);
    swift_bridgeObjectRelease();
    sub_145D8((uint64_t)v7, type metadata accessor for CategoryListItem);
    *(_WORD *)(v30 + 12) = 2080;
    v34 = v51;
    sub_267BC((uint64_t)&v4[*(int *)(v55 + 40)], v51, &qword_3B4370);
    v35 = String.init<A>(describing:)(v34, v52);
    v57 = sub_69298(v35, v36, &v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58);
    swift_bridgeObjectRelease();
    sub_145D8((uint64_t)v4, type metadata accessor for CategoryListItem);
    _os_log_impl(&dword_0, v28, v29, "Cannot create Flow Action to navigate to category page because of missing properties. AdamID: %s, Category Page URL: %s", (uint8_t *)v30, 0x16u);
    swift_arrayDestroy(v31, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v31, -1, -1);
    swift_slowDealloc(v30, -1, -1);

    result = (*(uint64_t (**)(char *, uint64_t))(v53 + 8))(v50, v54);
  }
  else
  {
    sub_145D8((uint64_t)v7, type metadata accessor for CategoryListItem);
    sub_145D8((uint64_t)v4, type metadata accessor for CategoryListItem);

    result = (*(uint64_t (**)(char *, uint64_t))(v53 + 8))(v10, v54);
  }
  v38 = v56;
  v56[4] = 0;
  *(_OWORD *)v38 = 0u;
  *((_OWORD *)v38 + 1) = 0u;
  return result;
}

uint64_t sub_2BE71C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  double v19;
  uint64_t v20;
  char v21;
  double v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  int v31;
  _OWORD v33[4];

  v4 = type metadata accessor for ArtworkCrop(0);
  __chkstk_darwin(v4);
  v6 = (char *)v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = objc_msgSend(a1, "color");
  if (v7)
  {
    v8 = v7;
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    v11 = v10;

    v12 = objc_msgSend(a1, "artworkTemplateURL");
    if (v12)
    {
      v13 = v12;
      v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
      v16 = v15;

      v17 = MTCategory.artworkWidth.getter();
      if ((v18 & 1) == 0)
      {
        v19 = *(double *)&v17;
        v20 = MTCategory.artworkHeight.getter();
        if ((v21 & 1) == 0)
        {
          v22 = *(double *)&v20;
          v24 = (void *)Color.init(descriptor:)(v9, v11);
          v26 = v25;
          v33[0] = xmmword_3057D0;
          memset(&v33[1], 0, 41);
          v27 = sub_3D47C(v24, v25);
          v28 = static ArtworkCrop.boundingBox.getter(v27);
          BYTE2(v31) = 0;
          LOWORD(v31) = static ArtworkFormat.preferredFormat.getter(v28);
          ArtworkModel.init(template:width:height:libraryEntity:backgroundColor:textColors:style:crop:accessibilityTitle:format:isCustomSymbol:isMulticolorSymbol:imageStoreIdentifier:)(v14, v16, 0, 0, 255, v24, v26, v33, v19, v22, 3, v6, 0, 0, v31, 0, 0);
          sub_3D624(v24, v26);
          v29 = type metadata accessor for ArtworkModel(0);
          return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(a2, 0, 1, v29);
        }
      }
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  v23 = type metadata accessor for ArtworkModel(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(a2, 1, 1, v23);
}

void CategoryListItem.init(deserializing:using:)()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000057, 0x8000000000316220, "ShelfKit/CategoryListItem.swift", 31, 2, 208, 0);
  __break(1u);
}

uint64_t CategoryListItem.clickSender.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  _QWORD *boxed_opaque_existential_2Tm;

  a1[3] = type metadata accessor for CategoryListItem(0);
  boxed_opaque_existential_2Tm = __swift_allocate_boxed_opaque_existential_2Tm(a1);
  return sub_2BF8F0(v1, (uint64_t)boxed_opaque_existential_2Tm);
}

uint64_t sub_2BE9E4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *boxed_opaque_existential_2Tm;

  a2[3] = a1;
  boxed_opaque_existential_2Tm = __swift_allocate_boxed_opaque_existential_2Tm(a2);
  return sub_2BF8F0(v2, (uint64_t)boxed_opaque_existential_2Tm);
}

uint64_t _s8ShelfKit16CategoryListItemV2eeoiySbAC_ACtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  int v53;
  int v54;
  int *v55;
  uint64_t *v56;
  uint64_t v57;
  unsigned int (*v58)(uint64_t *, uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  int *v76;
  int *v77;
  BOOL v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  char v84;
  char v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int (*v99)(uint64_t, uint64_t, uint64_t);
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  void (*v106)(char *, uint64_t);
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int (*v112)(uint64_t, uint64_t, uint64_t);
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  void (*v117)(char *, uint64_t);
  uint64_t v118;
  char *v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t *v131;
  int *v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;

  v4 = type metadata accessor for ImpressionMetrics(0);
  v123 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v119 = (char *)&v118 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v6);
  v120 = (uint64_t)&v118 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v122 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C3F58);
  __chkstk_darwin(v122);
  v124 = (uint64_t)&v118 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  v127 = v9;
  v128 = v10;
  __chkstk_darwin(v9);
  v121 = (char *)&v118 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
  __chkstk_darwin(v12);
  v125 = (uint64_t)&v118 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v126 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B6F88);
  __chkstk_darwin(v126);
  v129 = (uint64_t)&v118 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
  v16 = __chkstk_darwin(v15);
  v131 = (uint64_t *)((char *)&v118 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v16);
  v130 = (uint64_t *)((char *)&v118 - v18);
  v132 = (int *)type metadata accessor for CategoryListItem(0);
  v19 = __chkstk_darwin(v132);
  v141 = (uint64_t)&v118 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v19);
  v142 = (uint64_t)&v118 - v22;
  v23 = __chkstk_darwin(v21);
  v139 = (uint64_t)&v118 - v24;
  v25 = __chkstk_darwin(v23);
  v135 = (char *)&v118 - v26;
  v27 = __chkstk_darwin(v25);
  v138 = (uint64_t)&v118 - v28;
  v29 = __chkstk_darwin(v27);
  v140 = (uint64_t)&v118 - v30;
  v31 = __chkstk_darwin(v29);
  v137 = (uint64_t)&v118 - v32;
  v33 = __chkstk_darwin(v31);
  v136 = (uint64_t)&v118 - v34;
  v35 = __chkstk_darwin(v33);
  v133 = (uint64_t)&v118 - v36;
  v37 = __chkstk_darwin(v35);
  v134 = (uint64_t)&v118 - v38;
  v39 = __chkstk_darwin(v37);
  v41 = (char *)&v118 - v40;
  v42 = __chkstk_darwin(v39);
  v44 = (char *)&v118 - v43;
  v45 = __chkstk_darwin(v42);
  v47 = (char *)&v118 - v46;
  __chkstk_darwin(v45);
  v49 = (char *)&v118 - v48;
  v50 = a1[1];
  v51 = a2[1];
  if (*a1 == *a2 && v50 == v51)
  {
    sub_2BF8F0((uint64_t)a1, (uint64_t)&v118 - v48);
    sub_2BF8F0((uint64_t)a2, (uint64_t)v47);
  }
  else
  {
    v52 = _stringCompareWithSmolCheck(_:_:expecting:)(*a1, v50, *a2, v51, 0);
    sub_2BF8F0((uint64_t)a1, (uint64_t)v49);
    sub_2BF8F0((uint64_t)a2, (uint64_t)v47);
    if ((v52 & 1) == 0)
    {
      sub_145D8((uint64_t)v47, type metadata accessor for CategoryListItem);
      sub_145D8((uint64_t)v49, type metadata accessor for CategoryListItem);
      sub_2BF8F0((uint64_t)a1, (uint64_t)v44);
      sub_2BF8F0((uint64_t)a2, (uint64_t)v41);
      goto LABEL_9;
    }
  }
  v118 = v4;
  v53 = v49[16];
  sub_145D8((uint64_t)v49, type metadata accessor for CategoryListItem);
  v54 = v47[16];
  sub_145D8((uint64_t)v47, type metadata accessor for CategoryListItem);
  sub_2BF8F0((uint64_t)a1, (uint64_t)v44);
  sub_2BF8F0((uint64_t)a2, (uint64_t)v41);
  if (v53 != v54)
  {
LABEL_9:
    sub_145D8((uint64_t)v41, type metadata accessor for CategoryListItem);
    sub_145D8((uint64_t)v44, type metadata accessor for CategoryListItem);
LABEL_20:
    v66 = v134;
    v68 = (uint64_t)v135;
    v70 = v139;
    v69 = v140;
    v67 = v133;
LABEL_21:
    sub_2BF8F0((uint64_t)a1, v66);
    sub_2BF8F0((uint64_t)a2, v67);
LABEL_22:
    sub_145D8(v67, type metadata accessor for CategoryListItem);
    sub_145D8(v66, type metadata accessor for CategoryListItem);
    v71 = v136;
    sub_2BF8F0((uint64_t)a1, v136);
    v72 = v137;
    sub_2BF8F0((uint64_t)a2, v137);
LABEL_23:
    sub_145D8(v71, type metadata accessor for CategoryListItem);
    sub_145D8(v72, type metadata accessor for CategoryListItem);
    sub_2BF8F0((uint64_t)a1, v69);
    v73 = v138;
    sub_2BF8F0((uint64_t)a2, v138);
LABEL_24:
    sub_145D8(v73, type metadata accessor for CategoryListItem);
    sub_145D8(v69, type metadata accessor for CategoryListItem);
LABEL_25:
    sub_2BF8F0((uint64_t)a1, v68);
    sub_2BF8F0((uint64_t)a2, v70);
LABEL_26:
    sub_145D8(v70, type metadata accessor for CategoryListItem);
    sub_145D8(v68, type metadata accessor for CategoryListItem);
LABEL_27:
    sub_2BF8F0((uint64_t)a1, v142);
    sub_2BF8F0((uint64_t)a2, v141);
LABEL_28:
    sub_145D8(v141, type metadata accessor for CategoryListItem);
    sub_145D8(v142, type metadata accessor for CategoryListItem);
    goto LABEL_29;
  }
  v55 = v132;
  v56 = v130;
  sub_267BC((uint64_t)&v44[v132[6]], (uint64_t)v130, &qword_3BEB70);
  v57 = type metadata accessor for ArtworkModel(0);
  v58 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 48);
  if (v58(v56, 1, v57) == 1)
  {
    sub_1459C((uint64_t)v56, &qword_3BEB70);
    v59 = 0;
    v60 = 0;
  }
  else
  {
    v59 = *v56;
    v60 = v56[1];
    swift_bridgeObjectRetain();
    sub_145D8((uint64_t)v56, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
  }
  v61 = (uint64_t)&v41[v55[6]];
  v62 = v131;
  sub_267BC(v61, (uint64_t)v131, &qword_3BEB70);
  if (v58(v62, 1, v57) == 1)
  {
    sub_1459C((uint64_t)v62, &qword_3BEB70);
    if (!v60)
    {
      v63 = 0;
      goto LABEL_31;
    }
LABEL_19:
    swift_bridgeObjectRetain();
    sub_145D8((uint64_t)v41, type metadata accessor for CategoryListItem);
    sub_145D8((uint64_t)v44, type metadata accessor for CategoryListItem);
    swift_bridgeObjectRelease_n(v60, 2);
    goto LABEL_20;
  }
  v64 = (uint64_t)v62;
  v65 = *v62;
  v63 = *(_QWORD *)(v64 + 8);
  swift_bridgeObjectRetain();
  sub_145D8(v64, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
  if (!v60)
  {
LABEL_31:
    v67 = v133;
    v66 = v134;
    sub_145D8((uint64_t)v41, type metadata accessor for CategoryListItem);
    sub_145D8((uint64_t)v44, type metadata accessor for CategoryListItem);
    if (v63)
    {
      swift_bridgeObjectRelease();
      v68 = (uint64_t)v135;
      v70 = v139;
      v69 = v140;
      goto LABEL_21;
    }
    goto LABEL_33;
  }
  if (!v63)
    goto LABEL_19;
  if (v59 == v65 && v60 == v63)
  {
    swift_bridgeObjectRelease();
    sub_145D8((uint64_t)v41, type metadata accessor for CategoryListItem);
    sub_145D8((uint64_t)v44, type metadata accessor for CategoryListItem);
    swift_bridgeObjectRelease();
    v67 = v133;
    v66 = v134;
LABEL_33:
    sub_2BF8F0((uint64_t)a1, v66);
    sub_2BF8F0((uint64_t)a2, v67);
    v68 = (uint64_t)v135;
    v70 = v139;
    v76 = v132;
    goto LABEL_34;
  }
  v84 = _stringCompareWithSmolCheck(_:_:expecting:)(v59, v60, v65, v63, 0);
  swift_bridgeObjectRelease();
  sub_145D8((uint64_t)v41, type metadata accessor for CategoryListItem);
  sub_145D8((uint64_t)v44, type metadata accessor for CategoryListItem);
  swift_bridgeObjectRelease();
  v66 = v134;
  sub_2BF8F0((uint64_t)a1, v134);
  v67 = v133;
  sub_2BF8F0((uint64_t)a2, v133);
  v68 = (uint64_t)v135;
  v70 = v139;
  v69 = v140;
  v76 = v132;
  if ((v84 & 1) == 0)
    goto LABEL_22;
LABEL_34:
  v77 = v76;
  v78 = sub_1E0488(*(_DWORD *)(v66 + v76[7]), *(_DWORD *)(v67 + v76[7]));
  sub_145D8(v67, type metadata accessor for CategoryListItem);
  v69 = v140;
  sub_145D8(v66, type metadata accessor for CategoryListItem);
  v71 = v136;
  sub_2BF8F0((uint64_t)a1, v136);
  v72 = v137;
  sub_2BF8F0((uint64_t)a2, v137);
  if (!v78)
    goto LABEL_23;
  v79 = v77[8];
  v80 = *(_QWORD *)(v71 + v79);
  v81 = *(_QWORD *)(v71 + v79 + 8);
  v82 = (_QWORD *)(v72 + v79);
  v83 = v82[1];
  if (v80 == *v82 && v81 == v83)
  {
    sub_145D8(v71, type metadata accessor for CategoryListItem);
    sub_145D8(v72, type metadata accessor for CategoryListItem);
    sub_2BF8F0((uint64_t)a1, v69);
    v73 = v138;
    sub_2BF8F0((uint64_t)a2, v138);
  }
  else
  {
    v85 = _stringCompareWithSmolCheck(_:_:expecting:)(v80, v81, *v82, v83, 0);
    sub_145D8(v71, type metadata accessor for CategoryListItem);
    v69 = v140;
    sub_145D8(v72, type metadata accessor for CategoryListItem);
    sub_2BF8F0((uint64_t)a1, v69);
    v73 = v138;
    sub_2BF8F0((uint64_t)a2, v138);
    if ((v85 & 1) == 0)
      goto LABEL_24;
  }
  v86 = v132[9];
  v87 = (_QWORD *)(v69 + v86);
  v88 = v69;
  v89 = *(_QWORD *)(v69 + v86 + 8);
  v90 = (_QWORD *)(v73 + v86);
  v91 = v90[1];
  if (!v89)
  {
    swift_bridgeObjectRetain();
    sub_145D8(v73, type metadata accessor for CategoryListItem);
    sub_145D8(v88, type metadata accessor for CategoryListItem);
    if (!v91)
      goto LABEL_47;
LABEL_49:
    swift_bridgeObjectRelease();
    v70 = v139;
    goto LABEL_25;
  }
  if (!v91)
  {
    swift_bridgeObjectRetain();
    sub_145D8(v73, type metadata accessor for CategoryListItem);
    sub_145D8(v140, type metadata accessor for CategoryListItem);
    goto LABEL_49;
  }
  if (*v87 == *v90 && v89 == v91)
  {
    swift_bridgeObjectRetain();
    sub_145D8(v138, type metadata accessor for CategoryListItem);
    sub_145D8(v140, type metadata accessor for CategoryListItem);
    swift_bridgeObjectRelease();
LABEL_47:
    sub_2BF8F0((uint64_t)a1, v68);
    v70 = v139;
    sub_2BF8F0((uint64_t)a2, v139);
    goto LABEL_51;
  }
  v92 = _stringCompareWithSmolCheck(_:_:expecting:)(*v87, v89, *v90, v90[1], 0);
  swift_bridgeObjectRetain();
  sub_145D8(v138, type metadata accessor for CategoryListItem);
  sub_145D8(v140, type metadata accessor for CategoryListItem);
  swift_bridgeObjectRelease();
  sub_2BF8F0((uint64_t)a1, v68);
  v70 = v139;
  sub_2BF8F0((uint64_t)a2, v139);
  if ((v92 & 1) == 0)
    goto LABEL_26;
LABEL_51:
  v93 = v132[10];
  v94 = v70 + v93;
  v95 = v129;
  v96 = v129 + *(int *)(v126 + 48);
  v97 = v70;
  sub_267BC(v68 + v93, v129, &qword_3B4370);
  sub_267BC(v94, v96, &qword_3B4370);
  v98 = v127;
  v99 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v128 + 48);
  if (v99(v95, 1, v127) == 1)
  {
    sub_145D8(v97, type metadata accessor for CategoryListItem);
    v95 = v129;
    sub_145D8(v68, type metadata accessor for CategoryListItem);
    if (v99(v96, 1, v98) == 1)
    {
      sub_1459C(v95, &qword_3B4370);
      sub_2BF8F0((uint64_t)a1, v142);
      sub_2BF8F0((uint64_t)a2, v141);
      goto LABEL_58;
    }
LABEL_56:
    sub_1459C(v95, &qword_3B6F88);
    goto LABEL_27;
  }
  v100 = v125;
  sub_267BC(v95, v125, &qword_3B4370);
  if (v99(v96, 1, v98) == 1)
  {
    sub_145D8(v139, type metadata accessor for CategoryListItem);
    sub_145D8(v68, type metadata accessor for CategoryListItem);
    (*(void (**)(uint64_t, uint64_t))(v128 + 8))(v100, v98);
    goto LABEL_56;
  }
  v101 = v128;
  v102 = v121;
  (*(void (**)(char *, uint64_t, uint64_t))(v128 + 32))(v121, v96, v98);
  v103 = sub_F1C0((unint64_t *)&qword_3B0B08, (void (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  v104 = v98;
  v105 = dispatch thunk of static Equatable.== infix(_:_:)(v100, v102, v98, v103);
  v106 = *(void (**)(char *, uint64_t))(v101 + 8);
  v106(v102, v104);
  sub_145D8(v139, type metadata accessor for CategoryListItem);
  sub_145D8(v68, type metadata accessor for CategoryListItem);
  v106((char *)v100, v104);
  sub_1459C(v129, &qword_3B4370);
  sub_2BF8F0((uint64_t)a1, v142);
  sub_2BF8F0((uint64_t)a2, v141);
  if ((v105 & 1) == 0)
    goto LABEL_28;
LABEL_58:
  v107 = v132[12];
  v108 = v141 + v107;
  v109 = v124;
  v110 = v124 + *(int *)(v122 + 48);
  sub_267BC(v142 + v107, v124, (uint64_t *)&unk_3B8790);
  sub_267BC(v108, v110, (uint64_t *)&unk_3B8790);
  v111 = v123;
  v112 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v123 + 48);
  v113 = v118;
  if (v112(v109, 1, v118) == 1)
  {
    sub_145D8(v141, type metadata accessor for CategoryListItem);
    sub_145D8(v142, type metadata accessor for CategoryListItem);
    if (v112(v110, 1, v113) == 1)
    {
      sub_1459C(v109, (uint64_t *)&unk_3B8790);
      v74 = 1;
      return v74 & 1;
    }
  }
  else
  {
    v114 = v120;
    sub_267BC(v109, v120, (uint64_t *)&unk_3B8790);
    if (v112(v110, 1, v113) != 1)
    {
      v115 = v119;
      (*(void (**)(char *, uint64_t, uint64_t))(v111 + 32))(v119, v110, v113);
      v116 = sub_F1C0(&qword_3C3F60, (void (*)(uint64_t))&type metadata accessor for ImpressionMetrics, (uint64_t)&protocol conformance descriptor for ImpressionMetrics);
      v74 = dispatch thunk of static Equatable.== infix(_:_:)(v114, v115, v113, v116);
      v117 = *(void (**)(char *, uint64_t))(v111 + 8);
      v117(v115, v113);
      sub_145D8(v141, type metadata accessor for CategoryListItem);
      sub_145D8(v142, type metadata accessor for CategoryListItem);
      v117((char *)v114, v113);
      sub_1459C(v109, (uint64_t *)&unk_3B8790);
      return v74 & 1;
    }
    sub_145D8(v141, type metadata accessor for CategoryListItem);
    sub_145D8(v142, type metadata accessor for CategoryListItem);
    (*(void (**)(uint64_t, uint64_t))(v111 + 8))(v114, v113);
  }
  sub_1459C(v109, &qword_3C3F58);
LABEL_29:
  v74 = 0;
  return v74 & 1;
}

uint64_t sub_2BF8F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CategoryListItem(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_2BF934(uint64_t a1)
{
  uint64_t result;

  result = sub_F1C0(&qword_3C70D0, (void (*)(uint64_t))type metadata accessor for CategoryListItem, (uint64_t)&protocol conformance descriptor for CategoryListItem);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2BF970()
{
  return sub_F1C0(&qword_3C70D0, (void (*)(uint64_t))type metadata accessor for CategoryListItem, (uint64_t)&protocol conformance descriptor for CategoryListItem);
}

uint64_t sub_2BF99C(uint64_t a1)
{
  uint64_t result;

  result = sub_F1C0(&qword_3C70D8, (void (*)(uint64_t))type metadata accessor for CategoryListItem, (uint64_t)&protocol conformance descriptor for CategoryListItem);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for CategoryListItem(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  int *v11;
  uint64_t v12;
  unsigned int (*v13)(_QWORD *, uint64_t, int *);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  id *v20;
  int v21;
  id v22;
  id *v23;
  int v24;
  id v25;
  id *v26;
  int v27;
  id v28;
  id *v29;
  int v30;
  id v31;
  id *v32;
  int v33;
  id v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  void (*v47)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int (*v61)(char *, uint64_t, uint64_t);
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v8 = a3[6];
    v9 = (_QWORD *)(a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    v11 = (int *)type metadata accessor for ArtworkModel(0);
    v12 = *((_QWORD *)v11 - 1);
    v13 = *(unsigned int (**)(_QWORD *, uint64_t, int *))(v12 + 48);
    swift_bridgeObjectRetain();
    if (v13(v10, 1, v11))
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v16 = v10[1];
      *v9 = *v10;
      v9[1] = v16;
      v17 = *((unsigned __int8 *)v10 + 32);
      swift_bridgeObjectRetain();
      if (v17 == 255)
      {
        *((_OWORD *)v9 + 1) = *((_OWORD *)v10 + 1);
        *((_BYTE *)v9 + 32) = *((_BYTE *)v10 + 32);
      }
      else
      {
        v18 = v10[2];
        v19 = v10[3];
        sub_3D464(v18, v19, v17);
        v9[2] = v18;
        v9[3] = v19;
        *((_BYTE *)v9 + 32) = v17;
      }
      *(_OWORD *)(v9 + 5) = *(_OWORD *)(v10 + 5);
      v20 = (id *)(v10 + 7);
      v21 = *((unsigned __int8 *)v10 + 64);
      if (v21 == 255)
      {
        v9[7] = *v20;
        *((_BYTE *)v9 + 64) = *((_BYTE *)v10 + 64);
      }
      else
      {
        v22 = *v20;
        sub_3D47C(*v20, *((_BYTE *)v10 + 64));
        v9[7] = v22;
        *((_BYTE *)v9 + 64) = v21;
      }
      v23 = (id *)(v10 + 9);
      v24 = *((unsigned __int8 *)v10 + 80);
      if (v24 == 255)
      {
        v9[9] = *v23;
        *((_BYTE *)v9 + 80) = *((_BYTE *)v10 + 80);
      }
      else
      {
        v25 = *v23;
        sub_3D47C(*v23, *((_BYTE *)v10 + 80));
        v9[9] = v25;
        *((_BYTE *)v9 + 80) = v24;
      }
      v26 = (id *)(v10 + 11);
      v27 = *((unsigned __int8 *)v10 + 96);
      if (v27 == 255)
      {
        v9[11] = *v26;
        *((_BYTE *)v9 + 96) = *((_BYTE *)v10 + 96);
      }
      else
      {
        v28 = *v26;
        sub_3D47C(*v26, *((_BYTE *)v10 + 96));
        v9[11] = v28;
        *((_BYTE *)v9 + 96) = v27;
      }
      v29 = (id *)(v10 + 13);
      v30 = *((unsigned __int8 *)v10 + 112);
      if (v30 == 255)
      {
        v9[13] = *v29;
        *((_BYTE *)v9 + 112) = *((_BYTE *)v10 + 112);
      }
      else
      {
        v31 = *v29;
        sub_3D47C(*v29, *((_BYTE *)v10 + 112));
        v9[13] = v31;
        *((_BYTE *)v9 + 112) = v30;
      }
      v32 = (id *)(v10 + 15);
      v33 = *((unsigned __int8 *)v10 + 128);
      if (v33 == 255)
      {
        v9[15] = *v32;
        *((_BYTE *)v9 + 128) = *((_BYTE *)v10 + 128);
      }
      else
      {
        v34 = *v32;
        sub_3D47C(*v32, *((_BYTE *)v10 + 128));
        v9[15] = v34;
        *((_BYTE *)v9 + 128) = v33;
      }
      *((_BYTE *)v9 + 129) = *((_BYTE *)v10 + 129);
      v35 = v11[11];
      v36 = (char *)v9 + v35;
      v37 = (char *)v10 + v35;
      v38 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 16))(v36, v37, v38);
      v39 = v11[12];
      v40 = (_QWORD *)((char *)v9 + v39);
      v41 = (_QWORD *)((char *)v10 + v39);
      v42 = v41[1];
      *v40 = *v41;
      v40[1] = v42;
      *((_BYTE *)v9 + v11[13]) = *((_BYTE *)v10 + v11[13]);
      *((_BYTE *)v9 + v11[14]) = *((_BYTE *)v10 + v11[14]);
      *((_BYTE *)v9 + v11[15]) = *((_BYTE *)v10 + v11[15]);
      v43 = v11[16];
      v44 = (_QWORD *)((char *)v9 + v43);
      v45 = (_QWORD *)((char *)v10 + v43);
      v46 = v45[1];
      *v44 = *v45;
      v44[1] = v46;
      v47 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v12 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v47(v9, 0, 1, v11);
    }
    v48 = a3[8];
    *(_DWORD *)((char *)v4 + a3[7]) = *(_DWORD *)((char *)a2 + a3[7]);
    v49 = (_QWORD *)((char *)v4 + v48);
    v50 = (uint64_t *)((char *)a2 + v48);
    v51 = v50[1];
    *v49 = *v50;
    v49[1] = v51;
    v52 = a3[9];
    v53 = a3[10];
    v54 = (_QWORD *)((char *)v4 + v52);
    v55 = (uint64_t *)((char *)a2 + v52);
    v56 = v55[1];
    *v54 = *v55;
    v54[1] = v56;
    v57 = (char *)v4 + v53;
    v58 = (char *)a2 + v53;
    v59 = type metadata accessor for URL(0);
    v60 = *(_QWORD *)(v59 - 8);
    v61 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v60 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v61(v58, 1, v59))
    {
      v62 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
      memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v60 + 16))(v57, v58, v59);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v60 + 56))(v57, 0, 1, v59);
    }
    v63 = a3[11];
    v64 = (char *)v4 + v63;
    v65 = (uint64_t)a2 + v63;
    v66 = *(uint64_t *)((char *)a2 + v63 + 24);
    if (v66)
    {
      v67 = *(_QWORD *)(v65 + 32);
      *((_QWORD *)v64 + 3) = v66;
      *((_QWORD *)v64 + 4) = v67;
      (**(void (***)(void))(v66 - 8))();
    }
    else
    {
      v68 = *(_OWORD *)(v65 + 16);
      *(_OWORD *)v64 = *(_OWORD *)v65;
      *((_OWORD *)v64 + 1) = v68;
      *((_QWORD *)v64 + 4) = *(_QWORD *)(v65 + 32);
    }
    v69 = a3[12];
    v70 = (char *)v4 + v69;
    v71 = (char *)a2 + v69;
    v72 = type metadata accessor for ImpressionMetrics(0);
    v73 = *(_QWORD *)(v72 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v73 + 48))(v71, 1, v72))
    {
      v74 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
      memcpy(v70, v71, *(_QWORD *)(*(_QWORD *)(v74 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v73 + 16))(v70, v71, v72);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v73 + 56))(v70, 0, 1, v72);
    }
  }
  return v4;
}

uint64_t destroy for CategoryListItem(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;

  swift_bridgeObjectRelease();
  v4 = a1 + a2[6];
  v5 = type metadata accessor for ArtworkModel(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5))
  {
    swift_bridgeObjectRelease();
    v6 = *(unsigned __int8 *)(v4 + 32);
    if (v6 != 255)
      sub_3B5BC(*(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), v6);
    v7 = *(unsigned __int8 *)(v4 + 64);
    if (v7 != 255)
      sub_3D624(*(id *)(v4 + 56), v7);
    v8 = *(unsigned __int8 *)(v4 + 80);
    if (v8 != 255)
      sub_3D624(*(id *)(v4 + 72), v8);
    v9 = *(unsigned __int8 *)(v4 + 96);
    if (v9 != 255)
      sub_3D624(*(id *)(v4 + 88), v9);
    v10 = *(unsigned __int8 *)(v4 + 112);
    if (v10 != 255)
      sub_3D624(*(id *)(v4 + 104), v10);
    v11 = *(unsigned __int8 *)(v4 + 128);
    if (v11 != 255)
      sub_3D624(*(id *)(v4 + 120), v11);
    v12 = v4 + *(int *)(v5 + 44);
    v13 = type metadata accessor for ArtworkCrop(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v14 = a1 + a2[10];
  v15 = type metadata accessor for URL(0);
  v16 = *(_QWORD *)(v15 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v14, v15);
  v17 = (_QWORD *)(a1 + a2[11]);
  if (v17[3])
    __swift_destroy_boxed_opaque_existential_1(v17);
  v18 = a1 + a2[12];
  v19 = type metadata accessor for ImpressionMetrics(0);
  v20 = *(_QWORD *)(v19 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 8))(v18, v19);
  return result;
}

uint64_t initializeWithCopy for CategoryListItem(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  int *v10;
  uint64_t v11;
  unsigned int (*v12)(_QWORD *, uint64_t, int *);
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  id *v18;
  int v19;
  id v20;
  id *v21;
  int v22;
  id v23;
  id *v24;
  int v25;
  id v26;
  id *v27;
  int v28;
  id v29;
  id *v30;
  int v31;
  id v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  void (*v45)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  void *v55;
  const void *v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int (*v59)(const void *, uint64_t, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  void *v68;
  const void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v7 = a3[6];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  v10 = (int *)type metadata accessor for ArtworkModel(0);
  v11 = *((_QWORD *)v10 - 1);
  v12 = *(unsigned int (**)(_QWORD *, uint64_t, int *))(v11 + 48);
  swift_bridgeObjectRetain();
  if (v12(v9, 1, v10))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v14 = v9[1];
    *v8 = *v9;
    v8[1] = v14;
    v15 = *((unsigned __int8 *)v9 + 32);
    swift_bridgeObjectRetain();
    if (v15 == 255)
    {
      *((_OWORD *)v8 + 1) = *((_OWORD *)v9 + 1);
      *((_BYTE *)v8 + 32) = *((_BYTE *)v9 + 32);
    }
    else
    {
      v16 = v9[2];
      v17 = v9[3];
      sub_3D464(v16, v17, v15);
      v8[2] = v16;
      v8[3] = v17;
      *((_BYTE *)v8 + 32) = v15;
    }
    *(_OWORD *)(v8 + 5) = *(_OWORD *)(v9 + 5);
    v18 = (id *)(v9 + 7);
    v19 = *((unsigned __int8 *)v9 + 64);
    if (v19 == 255)
    {
      v8[7] = *v18;
      *((_BYTE *)v8 + 64) = *((_BYTE *)v9 + 64);
    }
    else
    {
      v20 = *v18;
      sub_3D47C(*v18, *((_BYTE *)v9 + 64));
      v8[7] = v20;
      *((_BYTE *)v8 + 64) = v19;
    }
    v21 = (id *)(v9 + 9);
    v22 = *((unsigned __int8 *)v9 + 80);
    if (v22 == 255)
    {
      v8[9] = *v21;
      *((_BYTE *)v8 + 80) = *((_BYTE *)v9 + 80);
    }
    else
    {
      v23 = *v21;
      sub_3D47C(*v21, *((_BYTE *)v9 + 80));
      v8[9] = v23;
      *((_BYTE *)v8 + 80) = v22;
    }
    v24 = (id *)(v9 + 11);
    v25 = *((unsigned __int8 *)v9 + 96);
    if (v25 == 255)
    {
      v8[11] = *v24;
      *((_BYTE *)v8 + 96) = *((_BYTE *)v9 + 96);
    }
    else
    {
      v26 = *v24;
      sub_3D47C(*v24, *((_BYTE *)v9 + 96));
      v8[11] = v26;
      *((_BYTE *)v8 + 96) = v25;
    }
    v27 = (id *)(v9 + 13);
    v28 = *((unsigned __int8 *)v9 + 112);
    if (v28 == 255)
    {
      v8[13] = *v27;
      *((_BYTE *)v8 + 112) = *((_BYTE *)v9 + 112);
    }
    else
    {
      v29 = *v27;
      sub_3D47C(*v27, *((_BYTE *)v9 + 112));
      v8[13] = v29;
      *((_BYTE *)v8 + 112) = v28;
    }
    v30 = (id *)(v9 + 15);
    v31 = *((unsigned __int8 *)v9 + 128);
    if (v31 == 255)
    {
      v8[15] = *v30;
      *((_BYTE *)v8 + 128) = *((_BYTE *)v9 + 128);
    }
    else
    {
      v32 = *v30;
      sub_3D47C(*v30, *((_BYTE *)v9 + 128));
      v8[15] = v32;
      *((_BYTE *)v8 + 128) = v31;
    }
    *((_BYTE *)v8 + 129) = *((_BYTE *)v9 + 129);
    v33 = v10[11];
    v34 = (char *)v8 + v33;
    v35 = (char *)v9 + v33;
    v36 = type metadata accessor for ArtworkCrop(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 16))(v34, v35, v36);
    v37 = v10[12];
    v38 = (_QWORD *)((char *)v8 + v37);
    v39 = (_QWORD *)((char *)v9 + v37);
    v40 = v39[1];
    *v38 = *v39;
    v38[1] = v40;
    *((_BYTE *)v8 + v10[13]) = *((_BYTE *)v9 + v10[13]);
    *((_BYTE *)v8 + v10[14]) = *((_BYTE *)v9 + v10[14]);
    *((_BYTE *)v8 + v10[15]) = *((_BYTE *)v9 + v10[15]);
    v41 = v10[16];
    v42 = (_QWORD *)((char *)v8 + v41);
    v43 = (_QWORD *)((char *)v9 + v41);
    v44 = v43[1];
    *v42 = *v43;
    v42[1] = v44;
    v45 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v11 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v45(v8, 0, 1, v10);
  }
  v46 = a3[8];
  *(_DWORD *)(a1 + a3[7]) = *(_DWORD *)(a2 + a3[7]);
  v47 = (_QWORD *)(a1 + v46);
  v48 = (_QWORD *)(a2 + v46);
  v49 = v48[1];
  *v47 = *v48;
  v47[1] = v49;
  v50 = a3[9];
  v51 = a3[10];
  v52 = (_QWORD *)(a1 + v50);
  v53 = (_QWORD *)(a2 + v50);
  v54 = v53[1];
  *v52 = *v53;
  v52[1] = v54;
  v55 = (void *)(a1 + v51);
  v56 = (const void *)(a2 + v51);
  v57 = type metadata accessor for URL(0);
  v58 = *(_QWORD *)(v57 - 8);
  v59 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v58 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v59(v56, 1, v57))
  {
    v60 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
    memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v58 + 16))(v55, v56, v57);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v58 + 56))(v55, 0, 1, v57);
  }
  v61 = a3[11];
  v62 = a1 + v61;
  v63 = a2 + v61;
  v64 = *(_QWORD *)(a2 + v61 + 24);
  if (v64)
  {
    v65 = *(_QWORD *)(v63 + 32);
    *(_QWORD *)(v62 + 24) = v64;
    *(_QWORD *)(v62 + 32) = v65;
    (**(void (***)(void))(v64 - 8))();
  }
  else
  {
    v66 = *(_OWORD *)(v63 + 16);
    *(_OWORD *)v62 = *(_OWORD *)v63;
    *(_OWORD *)(v62 + 16) = v66;
    *(_QWORD *)(v62 + 32) = *(_QWORD *)(v63 + 32);
  }
  v67 = a3[12];
  v68 = (void *)(a1 + v67);
  v69 = (const void *)(a2 + v67);
  v70 = type metadata accessor for ImpressionMetrics(0);
  v71 = *(_QWORD *)(v70 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v71 + 48))(v69, 1, v70))
  {
    v72 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
    memcpy(v68, v69, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v71 + 16))(v68, v69, v70);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v71 + 56))(v68, 0, 1, v70);
  }
  return a1;
}

uint64_t assignWithCopy for CategoryListItem(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, int *);
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  __int128 *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 v25;
  __int128 v26;
  id *v27;
  int v28;
  id v29;
  id v30;
  id *v31;
  int v32;
  id v33;
  id v34;
  id *v35;
  int v36;
  id v37;
  id v38;
  id *v39;
  int v40;
  id v41;
  id v42;
  id *v43;
  int v44;
  id v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  void (*v57)(uint64_t, _QWORD, uint64_t, int *);
  uint64_t v58;
  uint64_t v59;
  char v60;
  __int128 v61;
  id *v62;
  id *v63;
  int v64;
  id v65;
  void *v66;
  char v67;
  id v68;
  char v69;
  id v70;
  id *v71;
  id *v72;
  int v73;
  id v74;
  void *v75;
  char v76;
  id v77;
  char v78;
  id v79;
  id *v80;
  id *v81;
  int v82;
  id v83;
  void *v84;
  char v85;
  id v86;
  char v87;
  id v88;
  id *v89;
  id *v90;
  int v91;
  id v92;
  void *v93;
  char v94;
  id v95;
  char v96;
  id v97;
  id *v98;
  id *v99;
  int v100;
  id v101;
  void *v102;
  char v103;
  id v104;
  char v105;
  id v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  _QWORD *v113;
  uint64_t v114;
  _QWORD *v115;
  _QWORD *v116;
  uint64_t v117;
  _BYTE *v118;
  _BYTE *v119;
  uint64_t v120;
  _QWORD *v121;
  _QWORD *v122;
  uint64_t v123;
  _QWORD *v124;
  _QWORD *v125;
  uint64_t v126;
  void *v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t (*v131)(void *, uint64_t, uint64_t);
  int v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  __int128 *v137;
  uint64_t v138;
  __int128 v139;
  __int128 v140;
  uint64_t v141;
  void *v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t (*v146)(void *, uint64_t, uint64_t);
  int v147;
  int v148;
  uint64_t v149;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = a3[6];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = (int *)type metadata accessor for ArtworkModel(0);
  v10 = *((_QWORD *)v9 - 1);
  v11 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      *(_QWORD *)v7 = *(_QWORD *)v8;
      *(_QWORD *)(v7 + 8) = *(_QWORD *)(v8 + 8);
      v14 = *(unsigned __int8 *)(v8 + 32);
      swift_bridgeObjectRetain();
      if (v14 == 255)
      {
        v26 = *(_OWORD *)(v8 + 16);
        *(_BYTE *)(v7 + 32) = *(_BYTE *)(v8 + 32);
        *(_OWORD *)(v7 + 16) = v26;
      }
      else
      {
        v15 = *(_QWORD *)(v8 + 16);
        v16 = *(_QWORD *)(v8 + 24);
        sub_3D464(v15, v16, v14);
        *(_QWORD *)(v7 + 16) = v15;
        *(_QWORD *)(v7 + 24) = v16;
        *(_BYTE *)(v7 + 32) = v14;
      }
      *(_QWORD *)(v7 + 40) = *(_QWORD *)(v8 + 40);
      *(_QWORD *)(v7 + 48) = *(_QWORD *)(v8 + 48);
      v27 = (id *)(v8 + 56);
      v28 = *(unsigned __int8 *)(v8 + 64);
      if (v28 == 255)
      {
        v30 = *v27;
        *(_BYTE *)(v7 + 64) = *(_BYTE *)(v8 + 64);
        *(_QWORD *)(v7 + 56) = v30;
      }
      else
      {
        v29 = *v27;
        sub_3D47C(*v27, *(_BYTE *)(v8 + 64));
        *(_QWORD *)(v7 + 56) = v29;
        *(_BYTE *)(v7 + 64) = v28;
      }
      v31 = (id *)(v8 + 72);
      v32 = *(unsigned __int8 *)(v8 + 80);
      if (v32 == 255)
      {
        v34 = *v31;
        *(_BYTE *)(v7 + 80) = *(_BYTE *)(v8 + 80);
        *(_QWORD *)(v7 + 72) = v34;
      }
      else
      {
        v33 = *v31;
        sub_3D47C(*v31, *(_BYTE *)(v8 + 80));
        *(_QWORD *)(v7 + 72) = v33;
        *(_BYTE *)(v7 + 80) = v32;
      }
      v35 = (id *)(v8 + 88);
      v36 = *(unsigned __int8 *)(v8 + 96);
      if (v36 == 255)
      {
        v38 = *v35;
        *(_BYTE *)(v7 + 96) = *(_BYTE *)(v8 + 96);
        *(_QWORD *)(v7 + 88) = v38;
      }
      else
      {
        v37 = *v35;
        sub_3D47C(*v35, *(_BYTE *)(v8 + 96));
        *(_QWORD *)(v7 + 88) = v37;
        *(_BYTE *)(v7 + 96) = v36;
      }
      v39 = (id *)(v8 + 104);
      v40 = *(unsigned __int8 *)(v8 + 112);
      if (v40 == 255)
      {
        v42 = *v39;
        *(_BYTE *)(v7 + 112) = *(_BYTE *)(v8 + 112);
        *(_QWORD *)(v7 + 104) = v42;
      }
      else
      {
        v41 = *v39;
        sub_3D47C(*v39, *(_BYTE *)(v8 + 112));
        *(_QWORD *)(v7 + 104) = v41;
        *(_BYTE *)(v7 + 112) = v40;
      }
      v43 = (id *)(v8 + 120);
      v44 = *(unsigned __int8 *)(v8 + 128);
      if (v44 == 255)
      {
        v46 = *v43;
        *(_BYTE *)(v7 + 128) = *(_BYTE *)(v8 + 128);
        *(_QWORD *)(v7 + 120) = v46;
      }
      else
      {
        v45 = *v43;
        sub_3D47C(*v43, *(_BYTE *)(v8 + 128));
        *(_QWORD *)(v7 + 120) = v45;
        *(_BYTE *)(v7 + 128) = v44;
      }
      *(_BYTE *)(v7 + 129) = *(_BYTE *)(v8 + 129);
      v47 = v9[11];
      v48 = v7 + v47;
      v49 = v8 + v47;
      v50 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 16))(v48, v49, v50);
      v51 = v9[12];
      v52 = (_QWORD *)(v7 + v51);
      v53 = (_QWORD *)(v8 + v51);
      *v52 = *v53;
      v52[1] = v53[1];
      *(_BYTE *)(v7 + v9[13]) = *(_BYTE *)(v8 + v9[13]);
      *(_BYTE *)(v7 + v9[14]) = *(_BYTE *)(v8 + v9[14]);
      *(_BYTE *)(v7 + v9[15]) = *(_BYTE *)(v8 + v9[15]);
      v54 = v9[16];
      v55 = (_QWORD *)(v7 + v54);
      v56 = (_QWORD *)(v8 + v54);
      *v55 = *v56;
      v55[1] = v56[1];
      v57 = *(void (**)(uint64_t, _QWORD, uint64_t, int *))(v10 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v57(v7, 0, 1, v9);
      goto LABEL_68;
    }
LABEL_7:
    v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
    memcpy((void *)v7, (const void *)v8, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_68;
  }
  if (v13)
  {
    sub_145D8(v7, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
    goto LABEL_7;
  }
  *(_QWORD *)v7 = *(_QWORD *)v8;
  *(_QWORD *)(v7 + 8) = *(_QWORD *)(v8 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v18 = (__int128 *)(v7 + 16);
  v19 = (__int128 *)(v8 + 16);
  v20 = *(unsigned __int8 *)(v8 + 32);
  if (*(unsigned __int8 *)(v7 + 32) == 255)
  {
    if (v20 == 255)
    {
      v61 = *v19;
      *(_BYTE *)(v7 + 32) = *(_BYTE *)(v8 + 32);
      *v18 = v61;
    }
    else
    {
      v58 = *(_QWORD *)(v8 + 16);
      v59 = *(_QWORD *)(v8 + 24);
      sub_3D464(v58, v59, *(_BYTE *)(v8 + 32));
      *(_QWORD *)(v7 + 16) = v58;
      *(_QWORD *)(v7 + 24) = v59;
      *(_BYTE *)(v7 + 32) = v20;
    }
  }
  else if (v20 == 255)
  {
    sub_3E43C(v7 + 16);
    v60 = *(_BYTE *)(v8 + 32);
    *v18 = *v19;
    *(_BYTE *)(v7 + 32) = v60;
  }
  else
  {
    v21 = *(_QWORD *)(v8 + 16);
    v22 = *(_QWORD *)(v8 + 24);
    sub_3D464(v21, v22, *(_BYTE *)(v8 + 32));
    v23 = *(_QWORD *)(v7 + 16);
    v24 = *(_QWORD *)(v7 + 24);
    *(_QWORD *)(v7 + 16) = v21;
    *(_QWORD *)(v7 + 24) = v22;
    v25 = *(_BYTE *)(v7 + 32);
    *(_BYTE *)(v7 + 32) = v20;
    sub_3B5BC(v23, v24, v25);
  }
  *(_QWORD *)(v7 + 40) = *(_QWORD *)(v8 + 40);
  *(_QWORD *)(v7 + 48) = *(_QWORD *)(v8 + 48);
  v62 = (id *)(v7 + 56);
  v63 = (id *)(v8 + 56);
  v64 = *(unsigned __int8 *)(v8 + 64);
  if (*(unsigned __int8 *)(v7 + 64) == 255)
  {
    if (v64 == 255)
    {
      v70 = *v63;
      *(_BYTE *)(v7 + 64) = *(_BYTE *)(v8 + 64);
      *v62 = v70;
    }
    else
    {
      v68 = *v63;
      sub_3D47C(*v63, *(_BYTE *)(v8 + 64));
      *(_QWORD *)(v7 + 56) = v68;
      *(_BYTE *)(v7 + 64) = v64;
    }
  }
  else if (v64 == 255)
  {
    sub_3E470(v7 + 56);
    v69 = *(_BYTE *)(v8 + 64);
    *v62 = *v63;
    *(_BYTE *)(v7 + 64) = v69;
  }
  else
  {
    v65 = *v63;
    sub_3D47C(*v63, *(_BYTE *)(v8 + 64));
    v66 = *(void **)(v7 + 56);
    *(_QWORD *)(v7 + 56) = v65;
    v67 = *(_BYTE *)(v7 + 64);
    *(_BYTE *)(v7 + 64) = v64;
    sub_3D624(v66, v67);
  }
  v71 = (id *)(v7 + 72);
  v72 = (id *)(v8 + 72);
  v73 = *(unsigned __int8 *)(v8 + 80);
  if (*(unsigned __int8 *)(v7 + 80) == 255)
  {
    if (v73 == 255)
    {
      v79 = *v72;
      *(_BYTE *)(v7 + 80) = *(_BYTE *)(v8 + 80);
      *v71 = v79;
    }
    else
    {
      v77 = *v72;
      sub_3D47C(*v72, *(_BYTE *)(v8 + 80));
      *(_QWORD *)(v7 + 72) = v77;
      *(_BYTE *)(v7 + 80) = v73;
    }
  }
  else if (v73 == 255)
  {
    sub_3E470(v7 + 72);
    v78 = *(_BYTE *)(v8 + 80);
    *v71 = *v72;
    *(_BYTE *)(v7 + 80) = v78;
  }
  else
  {
    v74 = *v72;
    sub_3D47C(*v72, *(_BYTE *)(v8 + 80));
    v75 = *(void **)(v7 + 72);
    *(_QWORD *)(v7 + 72) = v74;
    v76 = *(_BYTE *)(v7 + 80);
    *(_BYTE *)(v7 + 80) = v73;
    sub_3D624(v75, v76);
  }
  v80 = (id *)(v7 + 88);
  v81 = (id *)(v8 + 88);
  v82 = *(unsigned __int8 *)(v8 + 96);
  if (*(unsigned __int8 *)(v7 + 96) == 255)
  {
    if (v82 == 255)
    {
      v88 = *v81;
      *(_BYTE *)(v7 + 96) = *(_BYTE *)(v8 + 96);
      *v80 = v88;
    }
    else
    {
      v86 = *v81;
      sub_3D47C(*v81, *(_BYTE *)(v8 + 96));
      *(_QWORD *)(v7 + 88) = v86;
      *(_BYTE *)(v7 + 96) = v82;
    }
  }
  else if (v82 == 255)
  {
    sub_3E470(v7 + 88);
    v87 = *(_BYTE *)(v8 + 96);
    *v80 = *v81;
    *(_BYTE *)(v7 + 96) = v87;
  }
  else
  {
    v83 = *v81;
    sub_3D47C(*v81, *(_BYTE *)(v8 + 96));
    v84 = *(void **)(v7 + 88);
    *(_QWORD *)(v7 + 88) = v83;
    v85 = *(_BYTE *)(v7 + 96);
    *(_BYTE *)(v7 + 96) = v82;
    sub_3D624(v84, v85);
  }
  v89 = (id *)(v7 + 104);
  v90 = (id *)(v8 + 104);
  v91 = *(unsigned __int8 *)(v8 + 112);
  if (*(unsigned __int8 *)(v7 + 112) == 255)
  {
    if (v91 == 255)
    {
      v97 = *v90;
      *(_BYTE *)(v7 + 112) = *(_BYTE *)(v8 + 112);
      *v89 = v97;
    }
    else
    {
      v95 = *v90;
      sub_3D47C(*v90, *(_BYTE *)(v8 + 112));
      *(_QWORD *)(v7 + 104) = v95;
      *(_BYTE *)(v7 + 112) = v91;
    }
  }
  else if (v91 == 255)
  {
    sub_3E470(v7 + 104);
    v96 = *(_BYTE *)(v8 + 112);
    *v89 = *v90;
    *(_BYTE *)(v7 + 112) = v96;
  }
  else
  {
    v92 = *v90;
    sub_3D47C(*v90, *(_BYTE *)(v8 + 112));
    v93 = *(void **)(v7 + 104);
    *(_QWORD *)(v7 + 104) = v92;
    v94 = *(_BYTE *)(v7 + 112);
    *(_BYTE *)(v7 + 112) = v91;
    sub_3D624(v93, v94);
  }
  v98 = (id *)(v7 + 120);
  v99 = (id *)(v8 + 120);
  v100 = *(unsigned __int8 *)(v8 + 128);
  if (*(unsigned __int8 *)(v7 + 128) == 255)
  {
    if (v100 == 255)
    {
      v106 = *v99;
      *(_BYTE *)(v7 + 128) = *(_BYTE *)(v8 + 128);
      *v98 = v106;
    }
    else
    {
      v104 = *v99;
      sub_3D47C(*v99, *(_BYTE *)(v8 + 128));
      *(_QWORD *)(v7 + 120) = v104;
      *(_BYTE *)(v7 + 128) = v100;
    }
  }
  else if (v100 == 255)
  {
    sub_3E470(v7 + 120);
    v105 = *(_BYTE *)(v8 + 128);
    *v98 = *v99;
    *(_BYTE *)(v7 + 128) = v105;
  }
  else
  {
    v101 = *v99;
    sub_3D47C(*v99, *(_BYTE *)(v8 + 128));
    v102 = *(void **)(v7 + 120);
    *(_QWORD *)(v7 + 120) = v101;
    v103 = *(_BYTE *)(v7 + 128);
    *(_BYTE *)(v7 + 128) = v100;
    sub_3D624(v102, v103);
  }
  *(_BYTE *)(v7 + 129) = *(_BYTE *)(v8 + 129);
  v107 = v9[11];
  v108 = v7 + v107;
  v109 = v8 + v107;
  v110 = type metadata accessor for ArtworkCrop(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v110 - 8) + 24))(v108, v109, v110);
  v111 = v9[12];
  v112 = (_QWORD *)(v7 + v111);
  v113 = (_QWORD *)(v8 + v111);
  *v112 = *v113;
  v112[1] = v113[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(v7 + v9[13]) = *(_BYTE *)(v8 + v9[13]);
  *(_BYTE *)(v7 + v9[14]) = *(_BYTE *)(v8 + v9[14]);
  *(_BYTE *)(v7 + v9[15]) = *(_BYTE *)(v8 + v9[15]);
  v114 = v9[16];
  v115 = (_QWORD *)(v7 + v114);
  v116 = (_QWORD *)(v8 + v114);
  *v115 = *v116;
  v115[1] = v116[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_68:
  v117 = a3[7];
  v118 = (_BYTE *)(a1 + v117);
  v119 = (_BYTE *)(a2 + v117);
  *v118 = *v119;
  v118[1] = v119[1];
  v118[2] = v119[2];
  v118[3] = v119[3];
  v120 = a3[8];
  v121 = (_QWORD *)(a1 + v120);
  v122 = (_QWORD *)(a2 + v120);
  *v121 = *v122;
  v121[1] = v122[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v123 = a3[9];
  v124 = (_QWORD *)(a1 + v123);
  v125 = (_QWORD *)(a2 + v123);
  *v124 = *v125;
  v124[1] = v125[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v126 = a3[10];
  v127 = (void *)(a1 + v126);
  v128 = (void *)(a2 + v126);
  v129 = type metadata accessor for URL(0);
  v130 = *(_QWORD *)(v129 - 8);
  v131 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v130 + 48);
  v132 = v131(v127, 1, v129);
  v133 = v131(v128, 1, v129);
  if (v132)
  {
    if (!v133)
    {
      (*(void (**)(void *, void *, uint64_t))(v130 + 16))(v127, v128, v129);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v130 + 56))(v127, 0, 1, v129);
      goto LABEL_74;
    }
    goto LABEL_73;
  }
  if (v133)
  {
    (*(void (**)(void *, uint64_t))(v130 + 8))(v127, v129);
LABEL_73:
    v134 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
    memcpy(v127, v128, *(_QWORD *)(*(_QWORD *)(v134 - 8) + 64));
    goto LABEL_74;
  }
  (*(void (**)(void *, void *, uint64_t))(v130 + 24))(v127, v128, v129);
LABEL_74:
  v135 = a3[11];
  v136 = a1 + v135;
  v137 = (__int128 *)(a2 + v135);
  v138 = *(_QWORD *)(a2 + v135 + 24);
  if (*(_QWORD *)(a1 + v135 + 24))
  {
    if (v138)
    {
      __swift_assign_boxed_opaque_existential_1((_QWORD *)v136, v137);
      goto LABEL_81;
    }
    __swift_destroy_boxed_opaque_existential_1((_QWORD *)v136);
  }
  else if (v138)
  {
    *(_QWORD *)(v136 + 24) = v138;
    *(_QWORD *)(v136 + 32) = *((_QWORD *)v137 + 4);
    (**(void (***)(uint64_t, __int128 *))(v138 - 8))(v136, v137);
    goto LABEL_81;
  }
  v139 = *v137;
  v140 = v137[1];
  *(_QWORD *)(v136 + 32) = *((_QWORD *)v137 + 4);
  *(_OWORD *)v136 = v139;
  *(_OWORD *)(v136 + 16) = v140;
LABEL_81:
  v141 = a3[12];
  v142 = (void *)(a1 + v141);
  v143 = (void *)(a2 + v141);
  v144 = type metadata accessor for ImpressionMetrics(0);
  v145 = *(_QWORD *)(v144 - 8);
  v146 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v145 + 48);
  v147 = v146(v142, 1, v144);
  v148 = v146(v143, 1, v144);
  if (!v147)
  {
    if (!v148)
    {
      (*(void (**)(void *, void *, uint64_t))(v145 + 24))(v142, v143, v144);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v145 + 8))(v142, v144);
    goto LABEL_86;
  }
  if (v148)
  {
LABEL_86:
    v149 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
    memcpy(v142, v143, *(_QWORD *)(*(_QWORD *)(v149 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v145 + 16))(v142, v143, v144);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v145 + 56))(v142, 0, 1, v144);
  return a1;
}

uint64_t initializeWithTake for CategoryListItem(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  void *v29;
  const void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = a3[6];
  v7 = (_OWORD *)(a1 + v6);
  v8 = (_OWORD *)(a2 + v6);
  v9 = (int *)type metadata accessor for ArtworkModel(0);
  v10 = *((_QWORD *)v9 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v10 + 48))(v8, 1, v9))
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    v12 = v8[1];
    *v7 = *v8;
    v7[1] = v12;
    *((_BYTE *)v7 + 32) = *((_BYTE *)v8 + 32);
    *(_OWORD *)((char *)v7 + 40) = *(_OWORD *)((char *)v8 + 40);
    *((_QWORD *)v7 + 7) = *((_QWORD *)v8 + 7);
    *((_BYTE *)v7 + 64) = *((_BYTE *)v8 + 64);
    *(_OWORD *)((char *)v7 + 113) = *(_OWORD *)((char *)v8 + 113);
    *(_OWORD *)((char *)v7 + 104) = *(_OWORD *)((char *)v8 + 104);
    *(_OWORD *)((char *)v7 + 88) = *(_OWORD *)((char *)v8 + 88);
    *(_OWORD *)((char *)v7 + 72) = *(_OWORD *)((char *)v8 + 72);
    *((_BYTE *)v7 + 129) = *((_BYTE *)v8 + 129);
    v13 = v9[11];
    v14 = (char *)v7 + v13;
    v15 = (char *)v8 + v13;
    v16 = type metadata accessor for ArtworkCrop(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
    *(_OWORD *)((char *)v7 + v9[12]) = *(_OWORD *)((char *)v8 + v9[12]);
    *((_BYTE *)v7 + v9[13]) = *((_BYTE *)v8 + v9[13]);
    *((_BYTE *)v7 + v9[14]) = *((_BYTE *)v8 + v9[14]);
    *((_BYTE *)v7 + v9[15]) = *((_BYTE *)v8 + v9[15]);
    *(_OWORD *)((char *)v7 + v9[16]) = *(_OWORD *)((char *)v8 + v9[16]);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v10 + 56))(v7, 0, 1, v9);
  }
  v17 = a3[8];
  *(_DWORD *)(a1 + a3[7]) = *(_DWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v17) = *(_OWORD *)(a2 + v17);
  v18 = a3[10];
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  v19 = (void *)(a1 + v18);
  v20 = (const void *)(a2 + v18);
  v21 = type metadata accessor for URL(0);
  v22 = *(_QWORD *)(v21 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
  {
    v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v22 + 32))(v19, v20, v21);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  }
  v24 = a3[11];
  v25 = a3[12];
  v26 = a1 + v24;
  v27 = a2 + v24;
  v28 = *(_OWORD *)(v27 + 16);
  *(_OWORD *)v26 = *(_OWORD *)v27;
  *(_OWORD *)(v26 + 16) = v28;
  *(_QWORD *)(v26 + 32) = *(_QWORD *)(v27 + 32);
  v29 = (void *)(a1 + v25);
  v30 = (const void *)(a2 + v25);
  v31 = type metadata accessor for ImpressionMetrics(0);
  v32 = *(_QWORD *)(v31 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
  {
    v33 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v32 + 32))(v29, v30, v31);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
  }
  return a1;
}

uint64_t assignWithTake for CategoryListItem(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, int *);
  int v13;
  int v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(void *, uint64_t, uint64_t);
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  void *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(void *, uint64_t, uint64_t);
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v54;
  _OWORD *v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  int v61;
  int v62;
  void *v63;
  _QWORD *v64;
  int v65;
  int v66;
  void *v67;
  _QWORD *v68;
  int v69;
  int v70;
  void *v71;
  _QWORD *v72;
  int v73;
  int v74;
  void *v75;
  _QWORD *v76;
  int v77;
  int v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v7 = a3[6];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = (int *)type metadata accessor for ArtworkModel(0);
  v11 = *((_QWORD *)v10 - 1);
  v12 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      v15 = *(_OWORD *)(v9 + 16);
      *(_OWORD *)v8 = *(_OWORD *)v9;
      *(_OWORD *)(v8 + 16) = v15;
      *(_BYTE *)(v8 + 32) = *(_BYTE *)(v9 + 32);
      *(_OWORD *)(v8 + 40) = *(_OWORD *)(v9 + 40);
      *(_QWORD *)(v8 + 56) = *(_QWORD *)(v9 + 56);
      *(_BYTE *)(v8 + 64) = *(_BYTE *)(v9 + 64);
      *(_OWORD *)(v8 + 113) = *(_OWORD *)(v9 + 113);
      *(_OWORD *)(v8 + 104) = *(_OWORD *)(v9 + 104);
      *(_OWORD *)(v8 + 88) = *(_OWORD *)(v9 + 88);
      *(_OWORD *)(v8 + 72) = *(_OWORD *)(v9 + 72);
      *(_BYTE *)(v8 + 129) = *(_BYTE *)(v9 + 129);
      v16 = v10[11];
      v17 = v8 + v16;
      v18 = v9 + v16;
      v19 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v17, v18, v19);
      *(_OWORD *)(v8 + v10[12]) = *(_OWORD *)(v9 + v10[12]);
      *(_BYTE *)(v8 + v10[13]) = *(_BYTE *)(v9 + v10[13]);
      *(_BYTE *)(v8 + v10[14]) = *(_BYTE *)(v9 + v10[14]);
      *(_BYTE *)(v8 + v10[15]) = *(_BYTE *)(v9 + v10[15]);
      *(_OWORD *)(v8 + v10[16]) = *(_OWORD *)(v9 + v10[16]);
      (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    sub_145D8(v8, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
LABEL_6:
    v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
    memcpy((void *)v8, (const void *)v9, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  v54 = *(_QWORD *)(v9 + 8);
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_QWORD *)(v8 + 8) = v54;
  swift_bridgeObjectRelease();
  v55 = (_OWORD *)(v9 + 16);
  v56 = *(unsigned __int8 *)(v8 + 32);
  if (v56 != 255)
  {
    v57 = *(unsigned __int8 *)(v9 + 32);
    if (v57 != 255)
    {
      v58 = *(_QWORD *)(v8 + 16);
      v59 = *(_QWORD *)(v8 + 24);
      *(_OWORD *)(v8 + 16) = *v55;
      *(_BYTE *)(v8 + 32) = v57;
      sub_3B5BC(v58, v59, v56);
      goto LABEL_29;
    }
    sub_3E43C(v8 + 16);
  }
  *(_OWORD *)(v8 + 16) = *v55;
  *(_BYTE *)(v8 + 32) = *(_BYTE *)(v9 + 32);
LABEL_29:
  *(_OWORD *)(v8 + 40) = *(_OWORD *)(v9 + 40);
  v60 = (_QWORD *)(v9 + 56);
  v61 = *(unsigned __int8 *)(v8 + 64);
  if (v61 != 255)
  {
    v62 = *(unsigned __int8 *)(v9 + 64);
    if (v62 != 255)
    {
      v63 = *(void **)(v8 + 56);
      *(_QWORD *)(v8 + 56) = *v60;
      *(_BYTE *)(v8 + 64) = v62;
      sub_3D624(v63, v61);
      goto LABEL_34;
    }
    sub_3E470(v8 + 56);
  }
  *(_QWORD *)(v8 + 56) = *v60;
  *(_BYTE *)(v8 + 64) = *(_BYTE *)(v9 + 64);
LABEL_34:
  v64 = (_QWORD *)(v9 + 72);
  v65 = *(unsigned __int8 *)(v8 + 80);
  if (v65 != 255)
  {
    v66 = *(unsigned __int8 *)(v9 + 80);
    if (v66 != 255)
    {
      v67 = *(void **)(v8 + 72);
      *(_QWORD *)(v8 + 72) = *v64;
      *(_BYTE *)(v8 + 80) = v66;
      sub_3D624(v67, v65);
      goto LABEL_39;
    }
    sub_3E470(v8 + 72);
  }
  *(_QWORD *)(v8 + 72) = *v64;
  *(_BYTE *)(v8 + 80) = *(_BYTE *)(v9 + 80);
LABEL_39:
  v68 = (_QWORD *)(v9 + 88);
  v69 = *(unsigned __int8 *)(v8 + 96);
  if (v69 != 255)
  {
    v70 = *(unsigned __int8 *)(v9 + 96);
    if (v70 != 255)
    {
      v71 = *(void **)(v8 + 88);
      *(_QWORD *)(v8 + 88) = *v68;
      *(_BYTE *)(v8 + 96) = v70;
      sub_3D624(v71, v69);
      goto LABEL_44;
    }
    sub_3E470(v8 + 88);
  }
  *(_QWORD *)(v8 + 88) = *v68;
  *(_BYTE *)(v8 + 96) = *(_BYTE *)(v9 + 96);
LABEL_44:
  v72 = (_QWORD *)(v9 + 104);
  v73 = *(unsigned __int8 *)(v8 + 112);
  if (v73 != 255)
  {
    v74 = *(unsigned __int8 *)(v9 + 112);
    if (v74 != 255)
    {
      v75 = *(void **)(v8 + 104);
      *(_QWORD *)(v8 + 104) = *v72;
      *(_BYTE *)(v8 + 112) = v74;
      sub_3D624(v75, v73);
      goto LABEL_49;
    }
    sub_3E470(v8 + 104);
  }
  *(_QWORD *)(v8 + 104) = *v72;
  *(_BYTE *)(v8 + 112) = *(_BYTE *)(v9 + 112);
LABEL_49:
  v76 = (_QWORD *)(v9 + 120);
  v77 = *(unsigned __int8 *)(v8 + 128);
  if (v77 == 255)
  {
LABEL_53:
    *(_QWORD *)(v8 + 120) = *v76;
    *(_BYTE *)(v8 + 128) = *(_BYTE *)(v9 + 128);
    goto LABEL_54;
  }
  v78 = *(unsigned __int8 *)(v9 + 128);
  if (v78 == 255)
  {
    sub_3E470(v8 + 120);
    goto LABEL_53;
  }
  v79 = *(void **)(v8 + 120);
  *(_QWORD *)(v8 + 120) = *v76;
  *(_BYTE *)(v8 + 128) = v78;
  sub_3D624(v79, v77);
LABEL_54:
  *(_BYTE *)(v8 + 129) = *(_BYTE *)(v9 + 129);
  v80 = v10[11];
  v81 = v8 + v80;
  v82 = v9 + v80;
  v83 = type metadata accessor for ArtworkCrop(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v83 - 8) + 40))(v81, v82, v83);
  v84 = v10[12];
  v85 = (_QWORD *)(v8 + v84);
  v86 = (uint64_t *)(v9 + v84);
  v88 = *v86;
  v87 = v86[1];
  *v85 = v88;
  v85[1] = v87;
  swift_bridgeObjectRelease();
  *(_BYTE *)(v8 + v10[13]) = *(_BYTE *)(v9 + v10[13]);
  *(_BYTE *)(v8 + v10[14]) = *(_BYTE *)(v9 + v10[14]);
  *(_BYTE *)(v8 + v10[15]) = *(_BYTE *)(v9 + v10[15]);
  v89 = v10[16];
  v90 = (_QWORD *)(v8 + v89);
  v91 = (uint64_t *)(v9 + v89);
  v93 = *v91;
  v92 = v91[1];
  *v90 = v93;
  v90[1] = v92;
  swift_bridgeObjectRelease();
LABEL_7:
  v21 = a3[8];
  *(_DWORD *)(a1 + a3[7]) = *(_DWORD *)(a2 + a3[7]);
  v22 = (_QWORD *)(a1 + v21);
  v23 = (uint64_t *)(a2 + v21);
  v25 = *v23;
  v24 = v23[1];
  *v22 = v25;
  v22[1] = v24;
  swift_bridgeObjectRelease();
  v26 = a3[9];
  v27 = (_QWORD *)(a1 + v26);
  v28 = (uint64_t *)(a2 + v26);
  v30 = *v28;
  v29 = v28[1];
  *v27 = v30;
  v27[1] = v29;
  swift_bridgeObjectRelease();
  v31 = a3[10];
  v32 = (void *)(a1 + v31);
  v33 = (void *)(a2 + v31);
  v34 = type metadata accessor for URL(0);
  v35 = *(_QWORD *)(v34 - 8);
  v36 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v35 + 48);
  v37 = v36(v32, 1, v34);
  v38 = v36(v33, 1, v34);
  if (v37)
  {
    if (!v38)
    {
      (*(void (**)(void *, void *, uint64_t))(v35 + 32))(v32, v33, v34);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v38)
  {
    (*(void (**)(void *, uint64_t))(v35 + 8))(v32, v34);
LABEL_12:
    v39 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v35 + 40))(v32, v33, v34);
LABEL_13:
  v40 = a3[11];
  v41 = a1 + v40;
  v42 = a2 + v40;
  if (*(_QWORD *)(a1 + v40 + 24))
    __swift_destroy_boxed_opaque_existential_1((_QWORD *)v41);
  v43 = *(_OWORD *)(v42 + 16);
  *(_OWORD *)v41 = *(_OWORD *)v42;
  *(_OWORD *)(v41 + 16) = v43;
  *(_QWORD *)(v41 + 32) = *(_QWORD *)(v42 + 32);
  v44 = a3[12];
  v45 = (void *)(a1 + v44);
  v46 = (void *)(a2 + v44);
  v47 = type metadata accessor for ImpressionMetrics(0);
  v48 = *(_QWORD *)(v47 - 8);
  v49 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v48 + 48);
  v50 = v49(v45, 1, v47);
  v51 = v49(v46, 1, v47);
  if (!v50)
  {
    if (!v51)
    {
      (*(void (**)(void *, void *, uint64_t))(v48 + 40))(v45, v46, v47);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v48 + 8))(v45, v47);
    goto LABEL_20;
  }
  if (v51)
  {
LABEL_20:
    v52 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
    memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v48 + 32))(v45, v46, v47);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
  return a1;
}

uint64_t getEnumTagSinglePayload for CategoryListItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_2C182C);
}

uint64_t sub_2C182C(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = a3[6];
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        v10 = v12;
        v11 = a3[10];
      }
      else
      {
        v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a3[12];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for CategoryListItem(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_2C1908);
}

uint64_t sub_2C1908(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[6];
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[10];
      }
      else
      {
        v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a4[12];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void sub_2C19D4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[9];

  v8[0] = &unk_305948;
  v8[1] = &unk_305960;
  sub_3EE70(319, (unint64_t *)&qword_3B28A0, (uint64_t (*)(uint64_t))&type metadata accessor for ArtworkModel);
  if (v3 <= 0x3F)
  {
    v8[2] = *(_QWORD *)(v2 - 8) + 64;
    v8[3] = &unk_305978;
    v8[4] = &unk_305948;
    v8[5] = &unk_305990;
    sub_3EE70(319, (unint64_t *)&qword_3B1C30, (uint64_t (*)(uint64_t))&type metadata accessor for URL);
    if (v5 <= 0x3F)
    {
      v8[6] = *(_QWORD *)(v4 - 8) + 64;
      v8[7] = &unk_3059A8;
      sub_3EE70(319, (unint64_t *)&qword_3B2250, (uint64_t (*)(uint64_t))&type metadata accessor for ImpressionMetrics);
      if (v7 <= 0x3F)
      {
        v8[8] = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 256, 9, v8, a1 + 16);
      }
    }
  }
}

uint64_t sub_2C1AD4(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char isUniquelyReferenced_nonNull_native;
  uint64_t v10;

  swift_bridgeObjectRetain(a3);
  swift_retain(a4);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
  v10 = *a1;
  *a1 = 0x8000000000000000;
  sub_1E068(a4, a2, a3, isUniquelyReferenced_nonNull_native);
  *a1 = v10;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2C1B78(_QWORD *a1)
{
  uint64_t result;

  result = swift_bridgeObjectRelease(*a1);
  *a1 = &_swiftEmptyDictionarySingleton;
  return result;
}

uint64_t type metadata accessor for SearchLockupCache()
{
  return objc_opt_self(_TtC8ShelfKit17SearchLockupCache);
}

uint64_t FetchActionIntent.init(url:isIncomingURL:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t result;

  v6 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a3, a1, v6);
  result = type metadata accessor for FetchActionIntent(0);
  *(_BYTE *)(a3 + *(int *)(result + 20)) = a2;
  return result;
}

uint64_t type metadata accessor for FetchActionIntent(uint64_t a1)
{
  uint64_t result;

  result = qword_3C7298;
  if (!qword_3C7298)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for FetchActionIntent);
  return result;
}

unint64_t static FetchActionIntent.kind.getter()
{
  return 0xD000000000000011;
}

uint64_t FetchActionIntent.isIncomingURL.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for FetchActionIntent(0) + 20));
}

uint64_t static FetchActionIntent.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t ActionIntent;
  char v5;

  if ((_s8ShelfKit15FetchPageIntentV2eeoiySbAC_ACtFZ_0() & 1) != 0)
  {
    ActionIntent = type metadata accessor for FetchActionIntent(0);
    v5 = *(_BYTE *)(a1 + *(int *)(ActionIntent + 20)) ^ *(_BYTE *)(a2 + *(int *)(ActionIntent + 20)) ^ 1;
  }
  else
  {
    v5 = 0;
  }
  return v5 & 1;
}

void sub_2C1CFC(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000011;
  a1[1] = 0x80000000003059F0;
}

uint64_t sub_2C1D1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;

  if ((_s8ShelfKit15FetchPageIntentV2eeoiySbAC_ACtFZ_0() & 1) != 0)
    v6 = *(_BYTE *)(a1 + *(int *)(a3 + 20)) ^ *(_BYTE *)(a2 + *(int *)(a3 + 20)) ^ 1;
  else
    v6 = 0;
  return v6 & 1;
}

uint64_t sub_2C1D78(char *a1, char *a2)
{
  return sub_1E180C(*a1, *a2);
}

Swift::Int sub_2C1D84()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  if (v1)
    v2 = 0x696D6F636E497369;
  else
    v2 = 7107189;
  if (v1)
    v3 = 0xED00006C7255676ELL;
  else
    v3 = 0xE300000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_2C1E08(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0x696D6F636E497369;
  else
    v2 = 7107189;
  if (*v1)
    v3 = 0xED00006C7255676ELL;
  else
    v3 = 0xE300000000000000;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_2C1E68()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  if (v1)
    v2 = 0x696D6F636E497369;
  else
    v2 = 7107189;
  if (v1)
    v3 = 0xED00006C7255676ELL;
  else
    v3 = 0xE300000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_2C1EE8@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;
  char v7;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_3761D8, v3);
  result = swift_bridgeObjectRelease(v4);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

void sub_2C1F44(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 7107189;
  if (*v1)
    v2 = 0x696D6F636E497369;
  v3 = 0xE300000000000000;
  if (*v1)
    v3 = 0xED00006C7255676ELL;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_2C1F88()
{
  _BYTE *v0;

  if (*v0)
    return 0x696D6F636E497369;
  else
    return 7107189;
}

uint64_t sub_2C1FC8@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  void *object;
  Swift::String v3;
  Swift::Int v5;
  uint64_t result;
  char v7;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_3761D8, v3);
  result = swift_bridgeObjectRelease(object);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

uint64_t sub_2C2028(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_2C21C8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_2C2050(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_2C21C8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t FetchActionIntent.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _BYTE v15[2];

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C7230);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 2];
  v9 = a1[3];
  v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  v11 = sub_2C21C8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for FetchActionIntent.CodingKeys, &type metadata for FetchActionIntent.CodingKeys, v11, v9, v10);
  v15[1] = 0;
  type metadata accessor for URL(0);
  sub_F1C0(&qword_3B52C8, (void (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3);
  if (!v2)
  {
    v12 = *(unsigned __int8 *)(v3 + *(int *)(type metadata accessor for FetchActionIntent(0) + 20));
    v15[0] = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v12, v15, v5);
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_2C21C8()
{
  unint64_t result;

  result = qword_3C7238;
  if (!qword_3C7238)
  {
    result = swift_getWitnessTable(&unk_305C2C);
    atomic_store(result, (unint64_t *)&qword_3C7238);
  }
  return result;
}

uint64_t sub_2C220C(_QWORD *a1)
{
  return FetchActionIntent.encode(to:)(a1);
}

uint64_t sub_2C2220(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_F1C0(&qword_3C72E8, (void (*)(uint64_t))type metadata accessor for FetchActionIntent, (uint64_t)&protocol conformance descriptor for FetchActionIntent);
  return CustomJSValueConvertible<>.jsRepresentation(in:)(a1, a2, a3, v6);
}

_QWORD *initializeBufferWithCopyOfBuffer for FetchActionIntent(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v8);
  }
  else
  {
    v7 = type metadata accessor for URL(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

uint64_t initializeWithCopy for FetchActionIntent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithCopy for FetchActionIntent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t initializeWithTake for FetchActionIntent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for FetchActionIntent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t getEnumTagSinglePayload for FetchActionIntent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_2C2498);
}

uint64_t sub_2C2498(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 2)
    return ((v9 + 2147483646) & 0x7FFFFFFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for FetchActionIntent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_2C2530);
}

uint64_t sub_2C2530(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 1;
  return result;
}

uint64_t sub_2C25A8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_305B18;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FetchActionIntent.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_2C2664 + 4 * byte_305A05[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_2C2698 + 4 * asc_305A00[v4]))();
}

uint64_t sub_2C2698(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2C26A0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2C26A8);
  return result;
}

uint64_t sub_2C26B4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2C26BCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_2C26C0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2C26C8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FetchActionIntent.CodingKeys()
{
  return &type metadata for FetchActionIntent.CodingKeys;
}

unint64_t sub_2C26E8()
{
  unint64_t result;

  result = qword_3C72D0;
  if (!qword_3C72D0)
  {
    result = swift_getWitnessTable(&unk_305C04);
    atomic_store(result, (unint64_t *)&qword_3C72D0);
  }
  return result;
}

unint64_t sub_2C2730()
{
  unint64_t result;

  result = qword_3C72D8;
  if (!qword_3C72D8)
  {
    result = swift_getWitnessTable(&unk_305B3C);
    atomic_store(result, (unint64_t *)&qword_3C72D8);
  }
  return result;
}

unint64_t sub_2C2778()
{
  unint64_t result;

  result = qword_3C72E0;
  if (!qword_3C72E0)
  {
    result = swift_getWitnessTable(&unk_305B64);
    atomic_store(result, (unint64_t *)&qword_3C72E0);
  }
  return result;
}

uint64_t AppLaunchMetricsEvent.__allocating_init()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = swift_allocObject(v0, 178, 7);
  AppLaunchMetricsEvent.init()();
  return v1;
}

uint64_t AppLaunchMetricsEvent.metricsData.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char isUniquelyReferenced_nonNull_native;
  id v5;
  unint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t result;
  double v13;
  double v14;
  id v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  int v41;
  uint64_t v42;
  id v43;
  char v44;
  _QWORD v45[3];
  _QWORD v46[3];
  _QWORD v47[3];
  _QWORD v48[3];
  _QWORD v49[3];
  _QWORD v50[3];
  _QWORD v51[3];
  _QWORD v52[3];
  _QWORD v53[3];
  _OWORD v54[2];
  __int128 v55;
  void *v56;
  _BYTE v57[24];
  uint64_t v58;

  v1 = v0;
  swift_beginAccess(v0 + 16, v57, 0, 0);
  v2 = *(_QWORD *)(v0 + 16);
  v56 = &type metadata for String;
  *(_QWORD *)&v55 = 0x636E75614C707061;
  *((_QWORD *)&v55 + 1) = 0xE900000000000068;
  sub_1F460(&v55, v54);
  v3 = swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v3);
  sub_1D728(v54, 0x707954746E657665, 0xE900000000000065, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  v5 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", 2);
  v6 = sub_91020();
  v56 = (void *)v6;
  *(_QWORD *)&v55 = v5;
  sub_1F460(&v55, v54);
  v7 = swift_isUniquelyReferenced_nonNull_native(v2);
  sub_1D728(v54, 0x726556746E657665, 0xEC0000006E6F6973, v7);
  swift_bridgeObjectRelease();
  v56 = &type metadata for String;
  *(_QWORD *)&v55 = 0xD000000000000014;
  *((_QWORD *)&v55 + 1) = 0x80000000003162B0;
  sub_1F460(&v55, v54);
  v8 = swift_isUniquelyReferenced_nonNull_native(v2);
  v53[0] = v2;
  sub_1D728(v54, 0x6369706F74, 0xE500000000000000, v8);
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(v1 + 32);
  v10 = *(_QWORD *)(v1 + 40);
  v56 = &type metadata for String;
  *(_QWORD *)&v55 = v9;
  *((_QWORD *)&v55 + 1) = v10;
  sub_1F460(&v55, v54);
  swift_bridgeObjectRetain();
  v11 = swift_isUniquelyReferenced_nonNull_native(v2);
  v53[0] = v2;
  sub_1D728(v54, 0xD000000000000014, 0x80000000003162D0, v11);
  v58 = v2;
  result = swift_bridgeObjectRelease();
  v13 = *(double *)(v1 + 48);
  if (v13 <= 0.0)
    goto LABEL_7;
  v14 = v13 * 1000.0;
  if ((~*(_QWORD *)&v14 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v14 <= -9.22337204e18)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  if (v14 >= 9.22337204e18)
  {
LABEL_38:
    __break(1u);
    return result;
  }
  v15 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithLongLong:", (uint64_t)v14);
  if (!v15)
  {
LABEL_7:
    sub_1D560(0xD000000000000010, 0x80000000003162F0, &v55);
    sub_298FC((uint64_t)&v55);
    goto LABEL_8;
  }
  v56 = (void *)v6;
  *(_QWORD *)&v55 = v15;
  sub_1F460(&v55, v54);
  v16 = swift_isUniquelyReferenced_nonNull_native(v2);
  v53[0] = v2;
  sub_1D728(v54, 0xD000000000000010, 0x80000000003162F0, v16);
  v58 = v2;
  swift_bridgeObjectRelease();
LABEL_8:
  swift_beginAccess(v1 + 56, v53, 0, 0);
  v17 = sub_B453C(*(_QWORD *)(v1 + 56), *(_BYTE *)(v1 + 64));
  if (v17)
  {
    v56 = (void *)v6;
    *(_QWORD *)&v55 = v17;
    sub_1F460(&v55, v54);
    v18 = v58;
    v19 = swift_isUniquelyReferenced_nonNull_native(v58);
    v52[0] = v18;
    sub_1D728(v54, 0x7472617453676162, 0xEC000000656D6954, v19);
    v58 = v18;
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1D560(0x7472617453676162, 0xEC000000656D6954, &v55);
    sub_298FC((uint64_t)&v55);
  }
  swift_beginAccess(v1 + 72, v52, 0, 0);
  v20 = sub_B453C(*(_QWORD *)(v1 + 72), *(_BYTE *)(v1 + 80));
  if (v20)
  {
    v56 = (void *)v6;
    *(_QWORD *)&v55 = v20;
    sub_1F460(&v55, v54);
    v21 = v58;
    v22 = swift_isUniquelyReferenced_nonNull_native(v58);
    v51[0] = v21;
    sub_1D728(v54, 0x756C696146676162, 0xEE00656D69546572, v22);
    v58 = v21;
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1D560(0x756C696146676162, 0xEE00656D69546572, &v55);
    sub_298FC((uint64_t)&v55);
  }
  swift_beginAccess(v1 + 88, v51, 0, 0);
  v23 = sub_B453C(*(_QWORD *)(v1 + 88), *(_BYTE *)(v1 + 96));
  if (v23)
  {
    v56 = (void *)v6;
    *(_QWORD *)&v55 = v23;
    sub_1F460(&v55, v54);
    v24 = v58;
    v25 = swift_isUniquelyReferenced_nonNull_native(v58);
    v50[0] = v24;
    sub_1D728(v54, 0x6563637553676162, 0xEE00656D69547373, v25);
    v58 = v24;
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1D560(0x6563637553676162, 0xEE00656D69547373, &v55);
    sub_298FC((uint64_t)&v55);
  }
  swift_beginAccess(v1 + 104, v50, 0, 0);
  v26 = sub_B453C(*(_QWORD *)(v1 + 104), *(_BYTE *)(v1 + 112));
  if (v26)
  {
    v56 = (void *)v6;
    *(_QWORD *)&v55 = v26;
    sub_1F460(&v55, v54);
    v27 = v58;
    v28 = swift_isUniquelyReferenced_nonNull_native(v58);
    v49[0] = v27;
    sub_1D728(v54, 0xD000000000000010, 0x8000000000316310, v28);
    v58 = v27;
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1D560(0xD000000000000010, 0x8000000000316310, &v55);
    sub_298FC((uint64_t)&v55);
  }
  swift_beginAccess(v1 + 120, v49, 0, 0);
  v29 = sub_B453C(*(_QWORD *)(v1 + 120), *(_BYTE *)(v1 + 128));
  if (v29)
  {
    v56 = (void *)v6;
    *(_QWORD *)&v55 = v29;
    sub_1F460(&v55, v54);
    v30 = v58;
    v31 = swift_isUniquelyReferenced_nonNull_native(v58);
    v48[0] = v30;
    sub_1D728(v54, 0x457075746553736ALL, 0xEE00656D6954646ELL, v31);
    v58 = v30;
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1D560(0x457075746553736ALL, 0xEE00656D6954646ELL, &v55);
    sub_298FC((uint64_t)&v55);
  }
  swift_beginAccess(v1 + 136, v48, 0, 0);
  v32 = sub_B453C(*(_QWORD *)(v1 + 136), *(_BYTE *)(v1 + 144));
  if (v32)
  {
    v56 = (void *)v6;
    *(_QWORD *)&v55 = v32;
    sub_1F460(&v55, v54);
    v33 = v58;
    v34 = swift_isUniquelyReferenced_nonNull_native(v58);
    v47[0] = v33;
    sub_1D728(v54, 0xD000000000000011, 0x8000000000316330, v34);
    v58 = v33;
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1D560(0xD000000000000011, 0x8000000000316330, &v55);
    sub_298FC((uint64_t)&v55);
  }
  swift_beginAccess(v1 + 152, v47, 0, 0);
  v35 = sub_B453C(*(_QWORD *)(v1 + 152), *(_BYTE *)(v1 + 160));
  if (v35)
  {
    v56 = (void *)v6;
    *(_QWORD *)&v55 = v35;
    sub_1F460(&v55, v54);
    v36 = v58;
    v37 = swift_isUniquelyReferenced_nonNull_native(v58);
    v46[0] = v36;
    sub_1D728(v54, 0xD000000000000011, 0x8000000000316350, v37);
    v58 = v36;
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1D560(0xD000000000000011, 0x8000000000316350, &v55);
    sub_298FC((uint64_t)&v55);
  }
  swift_beginAccess(v1 + 168, v46, 0, 0);
  v38 = sub_B453C(*(_QWORD *)(v1 + 168), *(_BYTE *)(v1 + 176));
  if (v38)
  {
    v56 = (void *)v6;
    *(_QWORD *)&v55 = v38;
    sub_1F460(&v55, v54);
    v39 = v58;
    v40 = swift_isUniquelyReferenced_nonNull_native(v58);
    v45[0] = v39;
    sub_1D728(v54, 0xD000000000000019, 0x8000000000316370, v40);
    v58 = v39;
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1D560(0xD000000000000019, 0x8000000000316370, &v55);
    sub_298FC((uint64_t)&v55);
  }
  swift_beginAccess(v1 + 177, v45, 0, 0);
  v41 = *(unsigned __int8 *)(v1 + 177);
  if (v41 == 2)
  {
    v42 = v58;
  }
  else
  {
    v43 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithBool:", v41 & 1);
    v56 = (void *)v6;
    *(_QWORD *)&v55 = v43;
    sub_1F460(&v55, v54);
    v42 = v58;
    v44 = swift_isUniquelyReferenced_nonNull_native(v58);
    sub_1D728(v54, 0xD000000000000014, 0x8000000000316390, v44);
    swift_bridgeObjectRelease();
  }
  return MetricsData.init(topic:shouldFlush:fields:includingFields:excludingFields:)(0xD000000000000014, 0x800000000030DA90, 0, v42, &_swiftEmptySetSingleton, &_swiftEmptySetSingleton);
}

uint64_t AppLaunchMetricsEvent.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;

  v1 = qword_3B02E0;
  swift_retain();
  if (v1 != -1)
    swift_once(&qword_3B02E0, sub_2C34BC);
  v2 = *(_QWORD *)algn_3C72F8;
  *(_QWORD *)(v0 + 32) = qword_3C72F0;
  *(_QWORD *)(v0 + 40) = v2;
  v3 = (void *)objc_opt_self(NSProcessInfo);
  swift_bridgeObjectRetain();
  v4 = objc_msgSend(v3, "processInfo");
  objc_msgSend(v4, "ask_launchTime");
  v6 = v5;

  *(_QWORD *)(v0 + 48) = v6;
  *(_QWORD *)(v0 + 56) = 0;
  *(_BYTE *)(v0 + 64) = 1;
  *(_QWORD *)(v0 + 72) = 0;
  *(_BYTE *)(v0 + 80) = 1;
  *(_QWORD *)(v0 + 88) = 0;
  *(_BYTE *)(v0 + 96) = 1;
  *(_QWORD *)(v0 + 104) = 0;
  *(_BYTE *)(v0 + 112) = 1;
  *(_QWORD *)(v0 + 120) = 0;
  *(_BYTE *)(v0 + 128) = 1;
  *(_QWORD *)(v0 + 136) = 0;
  *(_BYTE *)(v0 + 144) = 1;
  *(_QWORD *)(v0 + 152) = 0;
  *(_BYTE *)(v0 + 160) = 1;
  *(_QWORD *)(v0 + 168) = 0;
  *(_WORD *)(v0 + 176) = 513;
  swift_release(v0);
  *(_QWORD *)(v0 + 16) = sub_287F38((uint64_t)_swiftEmptyArrayStorage);
  *(_QWORD *)(v0 + 24) = &off_375B38;
  return v0;
}

uint64_t AppLaunchMetricsEvent.__allocating_init(deserializing:using:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_allocObject(v2, 178, 7);
  return AppLaunchMetricsEvent.init(deserializing:using:)(a1, a2);
}

uint64_t AppLaunchMetricsEvent.init(deserializing:using:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v5 = *v2;
  v6 = qword_3B02E0;
  swift_retain();
  if (v6 != -1)
    swift_once(&qword_3B02E0, sub_2C34BC);
  v7 = *(_QWORD *)algn_3C72F8;
  v2[4] = qword_3C72F0;
  v2[5] = v7;
  v8 = (void *)objc_opt_self(NSProcessInfo);
  swift_bridgeObjectRetain();
  v9 = objc_msgSend(v8, "processInfo");
  objc_msgSend(v9, "ask_launchTime");
  v11 = v10;

  v2[6] = v11;
  v2[7] = 0;
  *((_BYTE *)v2 + 64) = 1;
  v2[9] = 0;
  *((_BYTE *)v2 + 80) = 1;
  v2[11] = 0;
  *((_BYTE *)v2 + 96) = 1;
  v2[13] = 0;
  *((_BYTE *)v2 + 112) = 1;
  v2[15] = 0;
  *((_BYTE *)v2 + 128) = 1;
  v2[17] = 0;
  *((_BYTE *)v2 + 144) = 1;
  v2[19] = 0;
  *((_BYTE *)v2 + 160) = 1;
  v2[21] = 0;
  *((_WORD *)v2 + 88) = 513;
  v12 = type metadata accessor for JSONError(0);
  v13 = sub_1E468();
  swift_allocError(v12, v13, 0, 0);
  v14 = *v2;
  *v15 = 0xD000000000000015;
  v15[1] = 0x8000000000305C60;
  v15[2] = v14;
  v16 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(v15, enum case for JSONError.unknownType(_:), v12);
  swift_willThrow(v16);
  v17 = type metadata accessor for JSONContext(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(a2, v17);
  v18 = type metadata accessor for JSONObject(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(a1, v18);
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocPartialClassInstance(v2, v5, 178, 7);
}

uint64_t sub_2C34BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  v0 = type metadata accessor for UUID(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init()(v4);
  v5 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
  v7 = v6;
  result = (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  qword_3C72F0 = v5;
  *(_QWORD *)algn_3C72F8 = v7;
  return result;
}

uint64_t static AppLaunchMetricsEvent.launchCorrelationKey.getter()
{
  uint64_t v0;

  if (qword_3B02E0 != -1)
    swift_once(&qword_3B02E0, sub_2C34BC);
  v0 = qword_3C72F0;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t AppLaunchMetricsEvent.bagStartTime.getter()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 56, v2, 0, 0);
  return *(_QWORD *)(v0 + 56);
}

uint64_t AppLaunchMetricsEvent.bagFailureTime.getter()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 72, v2, 0, 0);
  return *(_QWORD *)(v0 + 72);
}

uint64_t AppLaunchMetricsEvent.bagSuccessTime.getter()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 88, v2, 0, 0);
  return *(_QWORD *)(v0 + 88);
}

uint64_t AppLaunchMetricsEvent.jsSetupStartTime.getter()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 104, v2, 0, 0);
  return *(_QWORD *)(v0 + 104);
}

uint64_t AppLaunchMetricsEvent.jsSetupEndTime.getter()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 120, v2, 0, 0);
  return *(_QWORD *)(v0 + 120);
}

uint64_t AppLaunchMetricsEvent.launchFailureTime.getter()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 136, v2, 0, 0);
  return *(_QWORD *)(v0 + 136);
}

uint64_t AppLaunchMetricsEvent.launchSuccessTime.getter()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 152, v2, 0, 0);
  return *(_QWORD *)(v0 + 152);
}

uint64_t AppLaunchMetricsEvent.lastBackgroundRefreshTime.getter()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 168, v2, 0, 0);
  return *(_QWORD *)(v0 + 168);
}

uint64_t AppLaunchMetricsEvent.wasMediaTokenExpired.getter()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 177, v2, 0, 0);
  return *(unsigned __int8 *)(v0 + 177);
}

unint64_t AppLaunchMetricsEvent.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  Swift::String v12;
  Swift::String v13;
  uint64_t v15;
  unint64_t v16;
  uint64_t (*v17)@<X0>(Swift::String *@<X0>, _QWORD *@<X8>);
  uint64_t v18;

  v0 = type metadata accessor for MetricsData(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = AppLaunchMetricsEvent.metricsData.getter();
  v5 = MetricsData.fields.getter(v4);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  v16 = v5;
  v17 = sub_2C38B8;
  v18 = 0;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C7300);
  v7 = sub_2C39F4();
  v8 = sub_65CC4();
  v9 = Sequence<>.joined(separator:)(8236, 0xE200000000000000, v6, v7, v8);
  v11 = v10;
  swift_bridgeObjectRelease();
  v16 = 0;
  v17 = (uint64_t (*)@<X0>(Swift::String *@<X0>, _QWORD *@<X8>))0xE000000000000000;
  _StringGuts.grow(_:)(25);
  swift_bridgeObjectRelease();
  v16 = 0xD000000000000016;
  v17 = (uint64_t (*)@<X0>(Swift::String *@<X0>, _QWORD *@<X8>))0x80000000003163B0;
  v12._countAndFlagsBits = v9;
  v12._object = v11;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 41;
  v13._object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  return v16;
}

uint64_t sub_2C38B8@<X0>(Swift::String *a1@<X0>, _QWORD *a2@<X8>)
{
  Swift::String v4;
  uint64_t result;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v7 = 0;
  v8 = 0xE000000000000000;
  String.append(_:)(*a1);
  v4._countAndFlagsBits = 8250;
  v4._object = (void *)0xE200000000000000;
  String.append(_:)(v4);
  result = _print_unlocked<A, B>(_:_:)(&a1[1], &v7, (char *)&type metadata for Any + 8, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v6 = v8;
  *a2 = v7;
  a2[1] = v6;
  return result;
}

void AppLaunchMetricsEvent.init(eventFields:invocationPoints:)()
{
  _swift_stdlib_reportUnimplementedInitializer("ShelfKit.AppLaunchMetricsEvent", 30, "init(eventFields:invocationPoints:)", 35, 0);
  __break(1u);
}

uint64_t sub_2C396C()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
}

_QWORD *AppLaunchMetricsEvent.deinit()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[2]);
  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  return v0;
}

uint64_t AppLaunchMetricsEvent.__deallocating_deinit()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[2]);
  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  return swift_deallocClassInstance(v0, 178, 7);
}

unint64_t sub_2C39D4()
{
  return AppLaunchMetricsEvent.description.getter();
}

unint64_t sub_2C39F4()
{
  unint64_t result;

  result = qword_3C7308;
  if (!qword_3C7308)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_3C7300);
    result = swift_getWitnessTable(&protocol conformance descriptor for LazyMapSequence<A, B>);
    atomic_store(result, (unint64_t *)&qword_3C7308);
  }
  return result;
}

uint64_t type metadata accessor for AppLaunchMetricsEvent()
{
  return objc_opt_self(_TtC8ShelfKit21AppLaunchMetricsEvent);
}

uint64_t method lookup function for AppLaunchMetricsEvent(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for AppLaunchMetricsEvent);
}

uint64_t dispatch thunk of AppLaunchMetricsEvent.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 248))();
}

uint64_t dispatch thunk of AppLaunchMetricsEvent.__allocating_init(deserializing:using:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 256))();
}

unint64_t static FetchShelfIntent.kind.getter()
{
  return 0xD000000000000010;
}

uint64_t sub_2C3AA8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_2C3C28();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_2C3AD0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_2C3C28();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_2C3AF8(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000010;
  a1[1] = 0x8000000000305D60;
}

uint64_t FetchShelfIntent.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C7458);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v8);
  v10 = sub_2C3C28();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for FetchShelfIntent.CodingKeys, &type metadata for FetchShelfIntent.CodingKeys, v10, v8, v9);
  type metadata accessor for URL(0);
  sub_F1C0(&qword_3B52C8, (void (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v2);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_2C3C28()
{
  unint64_t result;

  result = qword_3C7460;
  if (!qword_3C7460)
  {
    result = swift_getWitnessTable(&unk_305F78);
    atomic_store(result, (unint64_t *)&qword_3C7460);
  }
  return result;
}

uint64_t sub_2C3C6C()
{
  return sub_F1C0(&qword_3C7468, (void (*)(uint64_t))type metadata accessor for FetchShelfIntent, (uint64_t)&protocol conformance descriptor for FetchShelfIntent);
}

uint64_t type metadata accessor for FetchShelfIntent(uint64_t a1)
{
  uint64_t result;

  result = qword_3C74C8;
  if (!qword_3C74C8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for FetchShelfIntent);
  return result;
}

uint64_t sub_2C3CD4()
{
  return sub_F1C0(&qword_3BB480, (void (*)(uint64_t))type metadata accessor for FetchShelfIntent, (uint64_t)&protocol conformance descriptor for FetchShelfIntent);
}

uint64_t sub_2C3D00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_F1C0(&qword_3C7518, (void (*)(uint64_t))type metadata accessor for FetchShelfIntent, (uint64_t)&protocol conformance descriptor for FetchShelfIntent);
  return CustomJSValueConvertible<>.jsRepresentation(in:)(a1, a2, a3, v6);
}

uint64_t getEnumTagSinglePayload for FetchShelfIntent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_2C3D80);
}

uint64_t sub_2C3D80(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for FetchShelfIntent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_2C3DC8);
}

uint64_t sub_2C3DC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t storeEnumTagSinglePayload for FetchShelfIntent.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_2C3E48 + 4 * byte_305D70[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_2C3E68 + 4 * byte_305D75[v4]))();
}

_BYTE *sub_2C3E48(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_2C3E68(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_2C3E70(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_2C3E78(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_2C3E80(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_2C3E88(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for FetchShelfIntent.CodingKeys()
{
  return &type metadata for FetchShelfIntent.CodingKeys;
}

unint64_t sub_2C3EA8()
{
  unint64_t result;

  result = qword_3C7500;
  if (!qword_3C7500)
  {
    result = swift_getWitnessTable(&unk_305F50);
    atomic_store(result, (unint64_t *)&qword_3C7500);
  }
  return result;
}

unint64_t sub_2C3EF0()
{
  unint64_t result;

  result = qword_3C7508;
  if (!qword_3C7508)
  {
    result = swift_getWitnessTable(&unk_305EC0);
    atomic_store(result, (unint64_t *)&qword_3C7508);
  }
  return result;
}

unint64_t sub_2C3F38()
{
  unint64_t result;

  result = qword_3C7510;
  if (!qword_3C7510)
  {
    result = swift_getWitnessTable(&unk_305EE8);
    atomic_store(result, (unint64_t *)&qword_3C7510);
  }
  return result;
}

void LazyJSFlowDestination.destination.getter(uint64_t a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  int *v7;
  _BYTE v8[16];
  _BYTE v9[32];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
  __chkstk_darwin(v3);
  v5 = &v8[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = *v1;
  v7 = (int *)type metadata accessor for LazyJSFlowDestination(0);
  sub_267BC((uint64_t)&v1[v7[5]], (uint64_t)v5, &qword_3B4370);
  sub_267BC((uint64_t)&v1[v7[6]], (uint64_t)v9, (uint64_t *)&unk_3BC540);
  v8[15] = v1[v7[7]];
  sub_2C4DAC(v6, (uint64_t)v5, (uint64_t)v9, a1);
}

uint64_t type metadata accessor for LazyJSFlowDestination(uint64_t a1)
{
  return sub_1F9D4(a1, qword_3C7588, (uint64_t)&nominal type descriptor for LazyJSFlowDestination);
}

uint64_t sub_2C4060@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  unint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int8 v43;
  uint64_t v44;

  v40 = a3;
  v36 = a2;
  v4 = type metadata accessor for JSONContext(0);
  v37 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v38 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4720);
  __chkstk_darwin(v6);
  v41 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
  __chkstk_darwin(v8);
  v42 = (uint64_t)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for JSONObject(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v16 = (char *)&v34 - v15;
  __chkstk_darwin(v17);
  v19 = (char *)&v34 - v18;
  v20 = JSONObject.subscript.getter(1701273968, 0xE400000000000000);
  v21 = JSONObject.string.getter(v20);
  v34 = v22;
  v35 = v21;
  v23 = *(void (**)(char *, uint64_t))(v11 + 8);
  v23(v19, v10);
  v24 = JSONObject.subscript.getter(0x6C725565676170, 0xE700000000000000);
  JSONObject.url.getter(v24);
  v25 = v16;
  v26 = v36;
  v23(v25, v10);
  v27 = v41;
  JSONObject.subscript.getter(0x6174614465676170, 0xE800000000000000);
  v28 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56);
  v29 = v37;
  v28(v27, 0, 1, v10);
  v30 = *(void (**)(char *, uint64_t, uint64_t))(v29 + 16);
  v31 = (uint64_t)v38;
  v39 = v4;
  v30(v38, v26, v4);
  JSONObject.subscript.getter(0x6E696769726FLL, 0xE600000000000000);
  v32 = sub_2C9E80();
  JSONObject.stringEnum<A>(or:)(&v44, sub_BE128, 0, &type metadata for FlowOrigin, v32);
  v23(v13, v10);
  v43 = v44;
  LazyJSFlowDestination.init(pageString:pageUrl:pageDataJSON:context:origin:)(v35, v34, v42, v41, v31, &v43, v40);
  (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v26, v39);
  return ((uint64_t (*)(uint64_t, uint64_t))v23)(a1, v10);
}

NSObject_optional __swiftcall LazyJSFlowDestination.appEntityAnnotation()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Bool v6;
  objc_class *v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;
  NSObject_optional result;

  v1 = type metadata accessor for LazyJSFlowDestination(0);
  sub_267BC(v0 + *(int *)(v1 + 24), (uint64_t)v11, (uint64_t *)&unk_3BC540);
  if (!v12)
  {
    sub_1459C((uint64_t)v11, (uint64_t *)&unk_3BC540);
    v8 = 0u;
    v9 = 0u;
    v10 = 0;
    goto LABEL_7;
  }
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C7528);
  if ((swift_dynamicCast(&v8, v11, (char *)&type metadata for Any + 8, v2, 6) & 1) == 0)
  {
    v10 = 0;
    v8 = 0u;
    v9 = 0u;
    goto LABEL_7;
  }
  if (!*((_QWORD *)&v9 + 1))
  {
LABEL_7:
    sub_1459C((uint64_t)&v8, &qword_3C7520);
    v5 = 0;
    goto LABEL_8;
  }
  sub_F4D8(&v8, (uint64_t)v11);
  v3 = v12;
  v4 = v13;
  __swift_project_boxed_opaque_existential_1(v11, v12);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v3, v4);
  __swift_destroy_boxed_opaque_existential_1(v11);
LABEL_8:
  v7 = (objc_class *)v5;
  result.value.isa = v7;
  result.is_nil = v6;
  return result;
}

uint64_t LazyJSFlowDestination.init(pageString:pageUrl:pageDataJSON:context:origin:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned __int8 *a6@<X5>, _BYTE *a7@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  _BYTE *v46;
  _OWORD v47[2];
  uint64_t v48[4];
  uint64_t v49;

  v46 = a7;
  v49 = a5;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4720);
  __chkstk_darwin(v12);
  v14 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for JSONObject(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2 && (v44 = *a6, v19 = sub_2C8F8C(a1, a2), v19 != 38))
  {
    v28 = v19;
    v29 = v46;
    *v46 = v19;
    v30 = type metadata accessor for LazyJSFlowDestination(0);
    v31 = (uint64_t)&v29[*(int *)(v30 + 20)];
    v32 = a3;
    v43 = v31;
    sub_267BC(a3, v31, &qword_3B4370);
    sub_267BC(a4, (uint64_t)v14, &qword_3B4720);
    v33 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15);
    v42 = v30;
    if (v33 == 1)
    {
      memset(v47, 0, sizeof(v47));
      JSONObject.init(wrapping:)(v47);
      sub_1459C((uint64_t)v14, &qword_3B4720);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v18, v14, v15);
    }
    v34 = v49;
    v35 = v45;
    sub_2C478C(v28, (uint64_t)v18, v49, v48);
    if (!v35)
    {
      v38 = type metadata accessor for JSONContext(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 8))(v34, v38);
      sub_1459C(a4, &qword_3B4720);
      sub_1459C(v32, &qword_3B4370);
      (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
      v39 = v42;
      v40 = v46;
      result = sub_15BD4((uint64_t)v48, (uint64_t)&v46[*(int *)(v42 + 24)], (uint64_t *)&unk_3BC540);
      v40[*(int *)(v39 + 28)] = v44;
      return result;
    }
    v36 = type metadata accessor for JSONContext(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 8))(v34, v36);
    sub_1459C(a4, &qword_3B4720);
    sub_1459C(v32, &qword_3B4370);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    v27 = v43;
  }
  else
  {
    v20 = type metadata accessor for JSONError(0);
    v21 = sub_F1C0((unint64_t *)&qword_3B0CB0, (void (*)(uint64_t))&type metadata accessor for JSONError, (uint64_t)&protocol conformance descriptor for JSONError);
    swift_allocError(v20, v21, 0, 0);
    v23 = v22;
    v24 = type metadata accessor for LazyJSFlowDestination(0);
    *v23 = 1701273968;
    v23[1] = 0xE400000000000000;
    v23[2] = v24;
    v25 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v20 - 8) + 104))(v23, enum case for JSONError.missingProperty(_:), v20);
    swift_willThrow(v25);
    v26 = type metadata accessor for JSONContext(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(v49, v26);
    sub_1459C(a4, &qword_3B4720);
    v27 = a3;
  }
  return sub_1459C(v27, &qword_3B4370);
}

uint64_t sub_2C478C@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t result;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  _QWORD *boxed_opaque_existential_2Tm;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t *v66;
  void (*v67)(char *, uint64_t, uint64_t);
  char *v68;
  uint64_t v69;
  void (*v70)(char *, uint64_t, uint64_t);
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  char *v78;
  uint64_t *v79;
  char *v80;
  char *v81;
  char *v82;
  uint64_t v83;
  char *v84;
  char *v85;
  char *v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;

  v91 = a3;
  LODWORD(v94) = a1;
  v83 = type metadata accessor for LazyModel._State(0);
  __chkstk_darwin(v83);
  v84 = (char *)&v79 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for JSONContext(0);
  v8 = *(_QWORD *)(v7 - 8);
  v92 = v7;
  v93 = v8;
  __chkstk_darwin(v7);
  v87 = (char *)&v79 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v88 = (char *)&v79 - v11;
  __chkstk_darwin(v12);
  v86 = (char *)&v79 - v13;
  __chkstk_darwin(v14);
  v85 = (char *)&v79 - v15;
  __chkstk_darwin(v16);
  v80 = (char *)&v79 - v17;
  __chkstk_darwin(v18);
  v82 = (char *)&v79 - v19;
  v20 = type metadata accessor for JSONObject(0);
  v89 = *(_QWORD *)(v20 - 8);
  v90 = v20;
  __chkstk_darwin(v20);
  v22 = (char *)&v79 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v25 = (char *)&v79 - v24;
  __chkstk_darwin(v26);
  v28 = (char *)&v79 - v27;
  __chkstk_darwin(v29);
  v31 = (char *)&v79 - v30;
  __chkstk_darwin(v32);
  v34 = (char *)&v79 - v33;
  __chkstk_darwin(v35);
  v81 = (char *)&v79 - v36;
  __chkstk_darwin(v37);
  v39 = (char *)&v79 - v38;
  v40 = a2;
  result = JSONObject.isNull.getter(v41);
  if ((result & 1) != 0)
  {
    *(_OWORD *)a4 = 0u;
    *((_OWORD *)a4 + 1) = 0u;
  }
  else
  {
    v79 = a4;
    switch((char)v94)
    {
      case 17:
        v43 = JSONObject.subscript.getter(2038063468, 0xE400000000000000);
        v44 = JSONObject.BOOL.getter(v43);
        v45 = v89;
        v46 = v90;
        v47 = *(void (**)(char *, uint64_t))(v89 + 8);
        v47(v39, v90);
        v48 = type metadata accessor for Page(0);
        if (v44 == 2 || (v44 & 1) != 0)
        {
          v94 = sub_F1C0((unint64_t *)&qword_3B1B78, (void (*)(uint64_t))type metadata accessor for Page, (uint64_t)&protocol conformance descriptor for Page);
          v88 = (char *)v48;
          v67 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 16);
          v68 = v81;
          v67(v81, v40, v46);
          v69 = v92;
          v70 = *(void (**)(char *, uint64_t, uint64_t))(v93 + 16);
          v71 = v82;
          v70(v82, v91, v92);
          v72 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C75D8);
          v73 = (uint64_t)v84;
          v74 = &v84[*(int *)(v72 + 48)];
          v67(v84, (uint64_t)v68, v46);
          v70(v74, (uint64_t)v71, v69);
          swift_storeEnumTagMultiPayload(v73, v83, 0);
          v75 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C75E0);
          v76 = swift_allocObject(v75, ((*(unsigned int *)(v75 + 48) + 3) & 0x1FFFFFFFCLL) + 4, *(unsigned __int16 *)(v75 + 52) | 3);
          *(_DWORD *)(v76 + ((*(unsigned int *)(*(_QWORD *)v76 + 48) + 3) & 0x1FFFFFFFCLL)) = 0;
          sub_2C9E3C(v73, v76 + *(_QWORD *)(class metadata base offset for ManagedBuffer + *(_QWORD *)v76 + 16));
          sub_2C9A04(v73);
          (*(void (**)(char *, uint64_t))(v93 + 8))(v71, v69);
          result = ((uint64_t (*)(char *, uint64_t))v47)(v68, v46);
          v77 = v79;
          v78 = v88;
          *v79 = v76;
          v77[1] = (uint64_t)v78;
          v77[2] = v94;
          v77[3] = (uint64_t)&type metadata for LazyModel;
        }
        else
        {
          (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v34, v40, v46);
          v49 = (uint64_t)v80;
          (*(void (**)(char *, uint64_t, uint64_t))(v93 + 16))(v80, v91, v92);
          v50 = v95;
          result = Page.__allocating_init(deserializing:using:)((uint64_t)v34, v49);
          if (!v50)
          {
            v51 = v79;
            v79[3] = v48;
            *v51 = result;
          }
        }
        break;
      case 22:
        v53 = type metadata accessor for Page(0);
        (*(void (**)(char *, uint64_t, uint64_t))(v89 + 16))(v31, v40, v90);
        v54 = (uint64_t)v85;
        (*(void (**)(char *, uint64_t, uint64_t))(v93 + 16))(v85, v91, v92);
        v55 = v95;
        result = Page.__allocating_init(deserializing:using:)((uint64_t)v31, v54);
        if (!v55)
          goto LABEL_13;
        break;
      case 27:
        v53 = type metadata accessor for UpsellInformation(0);
        (*(void (**)(char *, uint64_t, uint64_t))(v89 + 16))(v28, v40, v90);
        v56 = (uint64_t)v86;
        (*(void (**)(char *, uint64_t, uint64_t))(v93 + 16))(v86, v91, v92);
        v57 = v95;
        result = (uint64_t)UpsellInformation.__allocating_init(deserializing:using:)(v28, v56);
        if (!v57)
        {
LABEL_13:
          v58 = v79;
          v79[3] = v53;
          *v58 = result;
        }
        break;
      case 33:
        (*(void (**)(char *, uint64_t, uint64_t))(v89 + 16))(v25, a2, v90);
        v59 = (uint64_t)v88;
        (*(void (**)(char *, uint64_t, uint64_t))(v93 + 16))(v88, v91, v92);
        v60 = type metadata accessor for TranscriptRequestInformation(0);
        v61 = v79;
        v79[3] = v60;
        boxed_opaque_existential_2Tm = __swift_allocate_boxed_opaque_existential_2Tm(v61);
        v63 = v95;
        result = TranscriptRequestInformation.init(deserializing:using:)((uint64_t)v25, v59, (uint64_t)boxed_opaque_existential_2Tm);
        if (v63)
          result = (uint64_t)__swift_deallocate_boxed_opaque_existential_2(v61);
        break;
      case 37:
        (*(void (**)(char *, uint64_t, uint64_t))(v89 + 16))(v22, a2, v90);
        v64 = v87;
        (*(void (**)(char *, uint64_t, uint64_t))(v93 + 16))(v87, v91, v92);
        v65 = v95;
        result = AdamID.init(deserializing:using:)(v22, v64);
        if (!v65)
        {
          v66 = v79;
          v79[3] = (uint64_t)&type metadata for AdamID;
          *v66 = result;
        }
        break;
      default:
        v52 = v79;
        *(_OWORD *)v79 = 0u;
        *((_OWORD *)v52 + 1) = 0u;
        break;
    }
  }
  return result;
}

void sub_2C4DAC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  _QWORD v73[23];
  uint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;

  v97 = a3;
  v98 = a2;
  v96 = a1;
  v94 = a4;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2C18);
  __chkstk_darwin(v4);
  v82 = (char *)v73 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = type metadata accessor for EpisodeOffer(0);
  v80 = *(_QWORD *)(v81 - 8);
  __chkstk_darwin(v81);
  v73[8] = (char *)v73 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2C40);
  __chkstk_darwin(v7);
  v75 = (char *)v73 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = type metadata accessor for TranscriptRequestInformation(0);
  v73[22] = *(_QWORD *)(v74 - 8);
  __chkstk_darwin(v74);
  v73[17] = (char *)v73 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for URLQueryItem(0);
  v11 = *(_QWORD *)(v10 - 8);
  v86 = v10;
  v87 = v11;
  __chkstk_darwin(v10);
  v85 = (char *)v73 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v73[18] = (char *)v73 - v14;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0CC0);
  __chkstk_darwin(v15);
  v73[1] = (char *)v73 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v73[0] = (char *)v73 - v18;
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0CB8);
  __chkstk_darwin(v19);
  v73[16] = (char *)v73 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v73[7] = (char *)v73 - v22;
  v84 = type metadata accessor for URLComponents(0);
  v83 = *(_QWORD *)(v84 - 8);
  __chkstk_darwin(v84);
  v73[11] = (char *)v73 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v73[5] = (char *)v73 - v25;
  v26 = type metadata accessor for Logger(0);
  v90 = *(_QWORD *)(v26 - 8);
  v91 = v26;
  __chkstk_darwin(v26);
  v73[20] = (char *)v73 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v78 = (char *)v73 - v29;
  __chkstk_darwin(v30);
  v79 = (char *)v73 - v31;
  __chkstk_darwin(v32);
  v73[14] = (char *)v73 - v33;
  __chkstk_darwin(v34);
  v77 = (char *)v73 - v35;
  __chkstk_darwin(v36);
  v76 = (char *)v73 - v37;
  __chkstk_darwin(v38);
  v73[9] = (char *)v73 - v39;
  __chkstk_darwin(v40);
  __chkstk_darwin(v41);
  v73[10] = (char *)v73 - v42;
  __chkstk_darwin(v43);
  v73[4] = (char *)v73 - v44;
  __chkstk_darwin(v45);
  v73[6] = (char *)v73 - v46;
  __chkstk_darwin(v47);
  v73[15] = (char *)v73 - v48;
  __chkstk_darwin(v49);
  v73[3] = (char *)v73 - v50;
  __chkstk_darwin(v51);
  v73[2] = (char *)v73 - v52;
  __chkstk_darwin(v53);
  v73[13] = (char *)v73 - v54;
  __chkstk_darwin(v55);
  v73[12] = (char *)v73 - v56;
  v57 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
  __chkstk_darwin(v57);
  __chkstk_darwin(v58);
  __chkstk_darwin(v59);
  __chkstk_darwin(v60);
  v61 = type metadata accessor for URL(0);
  v62 = *(_QWORD *)(v61 - 8);
  v88 = v61;
  v89 = v62;
  __chkstk_darwin(v61);
  __chkstk_darwin(v63);
  v73[21] = (char *)v73 - v64;
  __chkstk_darwin(v65);
  v73[19] = (char *)v73 - v66;
  __chkstk_darwin(v67);
  v93 = type metadata accessor for FlowDestination(0);
  __chkstk_darwin(v93);
  __chkstk_darwin(v68);
  __chkstk_darwin(v69);
  v92 = (char *)v73 - v70;
  v71 = (char *)sub_2C54AC + 4 * word_305FE6[v96];
  v95 = v72;
  __asm { BR              X10 }
}

uint64_t sub_2C54AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 - 160);
  v2 = sub_2C8058(v1, type metadata accessor for Page);
  sub_1459C(v1, (uint64_t *)&unk_3BC540);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B6F78);
  v4 = *(uint64_t **)(v0 - 200);
  v5 = (uint64_t)v4 + *(int *)(v3 + 48);
  *v4 = v2;
  sub_15BD4(*(_QWORD *)(v0 - 152), v5, &qword_3B4370);
  v6 = *(_QWORD *)(v0 - 192);
  swift_storeEnumTagMultiPayload(v4, v6, 3);
  v7 = *(_QWORD *)(v0 - 184);
  sub_3C56C((uint64_t)v4, v7, type metadata accessor for FlowDestination);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v0 - 176) + 56))(v7, 0, 1, v6);
}

void sub_2C5E5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  __n128 v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint8_t *v11;

  v2 = *(_QWORD *)(v1 - 160);
  v3 = sub_2C8058(v2, type metadata accessor for UpsellInformation);
  if (v3)
  {
    v4 = v3;
    sub_1459C(v2, (uint64_t *)&unk_3BC540);
    sub_1459C(*(_QWORD *)(v1 - 152), &qword_3B4370);
    **(_QWORD **)(v1 - 200) = v4;
    JUMPOUT(0x2C5E00);
  }
  v5 = static Logger.navigation.getter(0);
  v6 = Logger.logObject.getter(v5);
  v8 = static os_log_type_t.debug.getter(v7);
  v9 = os_log_type_enabled(v6, v8);
  v10 = *(_QWORD *)(v1 - 152);
  if (v9)
  {
    v11 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v11 = 0;
    _os_log_impl(&dword_0, v6, v8, "Missing upsellInformation data", v11, 2u);
    swift_slowDealloc(v11, -1, -1);
  }

  sub_1459C(v2, (uint64_t *)&unk_3BC540);
  sub_1459C(v10, &qword_3B4370);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 216) + 8))(v0, *(_QWORD *)(v1 - 208));
  JUMPOUT(0x2C5E20);
}

void sub_2C5EB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  __n128 v6;
  os_log_type_t v7;
  _BOOL4 v8;
  uint64_t v9;
  uint8_t *v10;

  v1 = *(_QWORD *)(v0 - 160);
  v2 = sub_2C8058(v1, (uint64_t (*)(_QWORD))type metadata accessor for LongDescription);
  if (v2)
  {
    v3 = v2;
    sub_1459C(v1, (uint64_t *)&unk_3BC540);
    sub_1459C(*(_QWORD *)(v0 - 152), &qword_3B4370);
    **(_QWORD **)(v0 - 200) = v3;
    JUMPOUT(0x2C5E00);
  }
  v4 = static Logger.navigation.getter(0);
  v5 = Logger.logObject.getter(v4);
  v7 = static os_log_type_t.debug.getter(v6);
  v8 = os_log_type_enabled(v5, v7);
  v9 = *(_QWORD *)(v0 - 152);
  if (v8)
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl(&dword_0, v5, v7, "Missing longDescription data", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  sub_1459C(v1, (uint64_t *)&unk_3BC540);
  sub_1459C(v9, &qword_3B4370);
  JUMPOUT(0x2C6DFCLL);
}

void sub_2C5F04()
{
  uint64_t v0;

  sub_1459C(*(_QWORD *)(v0 - 160), (uint64_t *)&unk_3BC540);
  sub_1459C(*(_QWORD *)(v0 - 152), &qword_3B4370);
  JUMPOUT(0x2C5E00);
}

void sub_2C5F38()
{
  uint64_t v0;

  sub_1459C(*(_QWORD *)(v0 - 160), (uint64_t *)&unk_3BC540);
  sub_1459C(*(_QWORD *)(v0 - 152), &qword_3B4370);
  JUMPOUT(0x2C5E00);
}

void sub_2C5F6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  __n128 v8;
  os_log_type_t v9;
  uint8_t *v10;

  v1 = *(_QWORD *)(v0 - 160);
  sub_267BC(v1, v0 - 136, (uint64_t *)&unk_3BC540);
  if (*(_QWORD *)(v0 - 112))
  {
    v2 = type metadata accessor for UpsellInformation(0);
    v3 = swift_dynamicCast(v0 - 96, v0 - 136, (char *)&type metadata for Any + 8, v2, 6);
    v4 = *(_QWORD *)(v0 - 152);
    if ((v3 & 1) != 0)
    {
      v5 = *(_QWORD *)(v0 - 96);
      sub_1459C(v1, (uint64_t *)&unk_3BC540);
      sub_1459C(v4, &qword_3B4370);
      **(_QWORD **)(v0 - 200) = v5;
      JUMPOUT(0x2C5E00);
    }
  }
  else
  {
    v3 = sub_1459C(v0 - 136, (uint64_t *)&unk_3BC540);
  }
  v6 = static Logger.navigation.getter(v3);
  v7 = Logger.logObject.getter(v6);
  v9 = static os_log_type_t.debug.getter(v8);
  if (os_log_type_enabled(v7, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl(&dword_0, v7, v9, "Could not get channel data for single subscription confirmation sheet", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  sub_1459C(v1, (uint64_t *)&unk_3BC540);
  JUMPOUT(0x2C6DECLL);
}

void sub_2C6000()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  __n128 v8;
  os_log_type_t v9;

  v1 = *(_QWORD *)(v0 - 160);
  sub_267BC(v1, v0 - 136, (uint64_t *)&unk_3BC540);
  if (*(_QWORD *)(v0 - 112))
  {
    v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0A18);
    v3 = swift_dynamicCast(v0 - 96, v0 - 136, (char *)&type metadata for Any + 8, v2, 6);
    v4 = *(_QWORD *)(v0 - 152);
    if ((v3 & 1) != 0)
    {
      v5 = *(_QWORD *)(v0 - 96);
      sub_1459C(v1, (uint64_t *)&unk_3BC540);
      sub_1459C(v4, &qword_3B4370);
      **(_QWORD **)(v0 - 200) = v5;
      JUMPOUT(0x2C5E00);
    }
  }
  else
  {
    v3 = sub_1459C(v0 - 136, (uint64_t *)&unk_3BC540);
  }
  v6 = static Logger.navigation.getter(v3);
  v7 = Logger.logObject.getter(v6);
  v9 = static os_log_type_t.debug.getter(v8);
  if (os_log_type_enabled(v7, v9))
  {
    *(_WORD *)swift_slowAlloc(2, -1) = 0;
    JUMPOUT(0x2C6DA8);
  }
  JUMPOUT(0x2C6DCCLL);
}

void sub_2C6098()
{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  __n128 v8;
  os_log_type_t v9;
  uint8_t *v10;
  void (*v11)(char *, char *, uint64_t);
  char *v12;

  v1 = *(char **)(v0 - 336);
  v2 = *(_QWORD *)(v0 - 160);
  sub_2C8230(v2, v1);
  v3 = *(_QWORD *)(v0 - 352);
  v4 = *(_QWORD *)(v0 - 344);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v1, 1, v4) == 1)
  {
    v5 = sub_1459C((uint64_t)v1, &qword_3B2C40);
    v6 = static Logger.navigation.getter(v5);
    v7 = Logger.logObject.getter(v6);
    v9 = static os_log_type_t.debug.getter(v8);
    if (os_log_type_enabled(v7, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v10 = 0;
      _os_log_impl(&dword_0, v7, v9, "Missing Info to request full transcript", v10, 2u);
      swift_slowDealloc(v10, -1, -1);
    }

    sub_1459C(v2, (uint64_t *)&unk_3BC540);
    JUMPOUT(0x2C6DECLL);
  }
  sub_1459C(v2, (uint64_t *)&unk_3BC540);
  sub_1459C(*(_QWORD *)(v0 - 152), &qword_3B4370);
  v11 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
  v12 = *(char **)(v0 - 392);
  v11(v12, v1, v4);
  v11(*(char **)(v0 - 200), v12, v4);
  JUMPOUT(0x2C5E00);
}

void sub_2C6150()
{
  uint64_t v0;

  sub_1459C(*(_QWORD *)(v0 - 160), (uint64_t *)&unk_3BC540);
  sub_1459C(*(_QWORD *)(v0 - 152), &qword_3B4370);
  JUMPOUT(0x2C5E00);
}

void sub_2C6184()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  __n128 v14;
  os_log_type_t v15;
  uint8_t *v16;

  v1 = *(_QWORD *)(v0 - 160);
  sub_267BC(v1, v0 - 136, (uint64_t *)&unk_3BC540);
  if (*(_QWORD *)(v0 - 112))
  {
    v2 = *(_QWORD *)(v0 - 280);
    v3 = *(_QWORD *)(v0 - 288);
    v4 = swift_dynamicCast(v2, v0 - 136, (char *)&type metadata for Any + 8, v3, 6);
    v5 = *(_QWORD *)(v0 - 296);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(v2, v4 ^ 1u, 1, v3);
    v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v2, 1, v3);
    v7 = *(_QWORD *)(v0 - 152);
    if (v6 != 1)
    {
      sub_1459C(v1, (uint64_t *)&unk_3BC540);
      sub_1459C(v7, &qword_3B4370);
      v8 = v2;
      v9 = *(_QWORD *)(v0 - 464);
      sub_3C56C(v8, v9, type metadata accessor for EpisodeOffer);
      v10 = *(_QWORD *)(v0 - 200);
      sub_3C56C(v9, v10, type metadata accessor for EpisodeOffer);
      swift_storeEnumTagMultiPayload(v10, *(_QWORD *)(v0 - 192), 30);
      JUMPOUT(0x2C5E08);
    }
  }
  else
  {
    sub_1459C(v0 - 136, (uint64_t *)&unk_3BC540);
    v2 = *(_QWORD *)(v0 - 280);
    (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 - 296) + 56))(v2, 1, 1, *(_QWORD *)(v0 - 288));
  }
  v11 = sub_1459C(v2, &qword_3B2C18);
  v12 = static Logger.navigation.getter(v11);
  v13 = Logger.logObject.getter(v12);
  v15 = static os_log_type_t.debug.getter(v14);
  if (os_log_type_enabled(v13, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v16 = 0;
    _os_log_impl(&dword_0, v13, v15, "Missing episode offer to build NP view", v16, 2u);
    swift_slowDealloc(v16, -1, -1);
  }

  sub_1459C(v1, (uint64_t *)&unk_3BC540);
  JUMPOUT(0x2C6DECLL);
}

void sub_2C6288()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  NSObject *v8;
  __n128 v9;
  os_log_type_t v10;
  uint8_t *v11;

  v1 = *(_QWORD *)(v0 - 160);
  sub_267BC(v1, v0 - 136, (uint64_t *)&unk_3BC540);
  if (*(_QWORD *)(v0 - 112))
  {
    v2 = swift_dynamicCast(v0 - 96, v0 - 136, (char *)&type metadata for Any + 8, &type metadata for AdamID, 6);
    v3 = *(_QWORD *)(v0 - 152);
    if ((v2 & 1) != 0)
    {
      v4 = *(_QWORD *)(v0 - 96);
      sub_1459C(v1, (uint64_t *)&unk_3BC540);
      sub_1459C(v3, &qword_3B4370);
      v6 = *(_QWORD **)(v0 - 200);
      v5 = *(_QWORD *)(v0 - 192);
      v6[1] = 0;
      v6[2] = 0;
      *v6 = v4;
      swift_storeEnumTagMultiPayload(v6, v5, 31);
      JUMPOUT(0x2C5E08);
    }
  }
  else
  {
    v2 = sub_1459C(v0 - 136, (uint64_t *)&unk_3BC540);
  }
  v7 = static Logger.navigation.getter(v2);
  v8 = Logger.logObject.getter(v7);
  v10 = static os_log_type_t.debug.getter(v9);
  if (os_log_type_enabled(v8, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v11 = 0;
    _os_log_impl(&dword_0, v8, v10, "Missing app adam ID to build inAppProductPage", v11, 2u);
    swift_slowDealloc(v11, -1, -1);
  }

  sub_1459C(v1, (uint64_t *)&unk_3BC540);
  JUMPOUT(0x2C6DECLL);
}

void sub_2C6320()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  __n128 v12;
  os_log_type_t v13;
  uint8_t *v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  _QWORD *v17;
  char *v18;

  v3 = *(_QWORD *)(v2 - 160);
  sub_267BC(v3, v2 - 136, (uint64_t *)&unk_3BC540);
  if (*(_QWORD *)(v2 - 112))
  {
    v4 = swift_dynamicCast(v2 - 96, v2 - 136, (char *)&type metadata for Any + 8, &type metadata for AdamID, 6);
    v5 = *(_QWORD *)(v2 - 152);
    if ((v4 & 1) != 0)
    {
      v6 = *(_QWORD *)(v2 - 96);
      sub_267BC(*(_QWORD *)(v2 - 152), v0, &qword_3B4370);
      v8 = *(_QWORD *)(v2 - 232);
      v7 = *(_QWORD *)(v2 - 224);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v0, 1, v8) != 1)
      {
        sub_1459C(v3, (uint64_t *)&unk_3BC540);
        sub_1459C(v5, &qword_3B4370);
        v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32);
        v15(v1, v0, v8);
        v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B6FA0);
        v17 = *(_QWORD **)(v2 - 200);
        v18 = (char *)v17 + *(int *)(v16 + 48);
        *v17 = v6;
        v15((uint64_t)v18, v1, v8);
        JUMPOUT(0x2C70E4);
      }
      v4 = sub_1459C(v0, &qword_3B4370);
    }
  }
  else
  {
    v4 = sub_1459C(v2 - 136, (uint64_t *)&unk_3BC540);
    v5 = *(_QWORD *)(v2 - 152);
  }
  v9 = *(_QWORD *)(v2 - 368);
  v10 = static Logger.navigation.getter(v4);
  v11 = Logger.logObject.getter(v10);
  v13 = static os_log_type_t.debug.getter(v12);
  if (os_log_type_enabled(v11, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v14 = 0;
    _os_log_impl(&dword_0, v11, v13, "Missing app adam ID or pageUrl to flow destionation for category page.", v14, 2u);
    swift_slowDealloc(v14, -1, -1);
  }

  sub_1459C(v3, (uint64_t *)&unk_3BC540);
  sub_1459C(v5, &qword_3B4370);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v2 - 216) + 8))(v9, *(_QWORD *)(v2 - 208));
  JUMPOUT(0x2C5E20);
}

uint64_t sub_2C7A68(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_2C7A98 + 4 * byte_306032[a1]))(0x6E657473696CLL, 0xE600000000000000);
}

uint64_t sub_2C7A98()
{
  return 0x7972617262696CLL;
}

uint64_t sub_2C7AB0()
{
  return 0x547972617262696CLL;
}

uint64_t sub_2C7ACC()
{
  return 0x73776F6873;
}

uint64_t sub_2C7AE0()
{
  return 0x796C746E65636572;
}

unint64_t sub_2C7D8C()
{
  return 0xD000000000000012;
}

unint64_t sub_2C7DA4()
{
  return 0xD00000000000001ELL;
}

unint64_t sub_2C7DBC()
{
  return 0xD000000000000020;
}

void sub_2C7DD4()
{
  JUMPOUT(0x2C7DE8);
}

unint64_t sub_2C7DF4()
{
  return 0xD000000000000010;
}

uint64_t sub_2C7E3C()
{
  return 0x79726F6765746163;
}

uint64_t sub_2C7E54(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  v2 = *a2;
  v3 = sub_2C7A68(*a1);
  v5 = v4;
  v6 = sub_2C7A68(v2);
  if (v3 == v6 && v5 == v7)
    v9 = 1;
  else
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

Swift::Int sub_2C7EDC()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  v2 = sub_2C7A68(v1);
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_2C7F3C(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = sub_2C7A68(*v1);
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease();
}

Swift::Int sub_2C7F7C()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  v2 = sub_2C7A68(v1);
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_2C7FD8@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_2C8F8C(*a1, a1[1]);
  *a2 = result;
  return result;
}

uint64_t sub_2C8004@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_2C7A68(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_2C802C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_2C8F8C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2C8050()
{
  unsigned __int8 *v0;

  return sub_2C7A68(*v0);
}

uint64_t sub_2C8058(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  os_unfair_lock_s *v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  char v16[24];
  uint64_t v17;

  sub_267BC(a1, (uint64_t)&v13, (uint64_t *)&unk_3BC540);
  if (v15)
  {
    sub_1F460(&v13, v16);
    sub_1F460(v16, &v13);
    v4 = a2(0);
    if ((swift_dynamicCast(&v12, &v13, (char *)&type metadata for Any + 8, v4, 6) & 1) != 0)
      return v12;
  }
  else
  {
    sub_1459C((uint64_t)&v13, (uint64_t *)&unk_3BC540);
  }
  sub_267BC(a1, (uint64_t)v16, (uint64_t *)&unk_3BC540);
  if (!v17)
  {
    sub_1459C((uint64_t)v16, (uint64_t *)&unk_3BC540);
    return 0;
  }
  if ((swift_dynamicCast(&v13, v16, (char *)&type metadata for Any + 8, &type metadata for LazyModel, 6) & 1) == 0)
    return 0;
  v6 = v13;
  v7 = v14;
  v8 = a2(0);
  if (*((_QWORD *)&v6 + 1) != v8)
  {
    swift_release(v6);
    return 0;
  }
  v9 = v8;
  v10 = (_QWORD *)(v6 + *(_QWORD *)(class metadata base offset for ManagedBuffer + *(_QWORD *)v6 + 16));
  v11 = (os_unfair_lock_s *)(v6 + ((*(unsigned int *)(*(_QWORD *)v6 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v11);
  sub_2C85C4(v10, v6, v9, v7, v16);
  os_unfair_lock_unlock(v11);
  swift_release(v6);
  if ((swift_dynamicCast(&v13, v16, (char *)&type metadata for Any + 8, v9, 6) & 1) == 0)
    return 0;
  result = v13;
  if (!(_QWORD)v13)
    return 0;
  return result;
}

uint64_t sub_2C8230@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char v17;
  void (*v18)(char *, _QWORD, uint64_t, uint64_t);
  void (*v19)(char *, char *, uint64_t);
  uint64_t *v21;
  __int128 *v22;
  uint64_t v23;
  uint64_t *v24;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  os_unfair_lock_s *v28;
  int v29;
  void (*v30)(char *, _QWORD, uint64_t, uint64_t);
  void (*v31)(char *, char *, uint64_t);
  _QWORD v32[2];
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2C40);
  __chkstk_darwin(v4);
  v6 = (char *)v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (char *)v32 - v8;
  v10 = type metadata accessor for TranscriptRequestInformation(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v16 = (char *)v32 - v15;
  sub_267BC(a1, (uint64_t)&v33, (uint64_t *)&unk_3BC540);
  if (v35)
  {
    sub_1F460(&v33, &v36);
    sub_1F460(&v36, &v33);
    v17 = swift_dynamicCast(v9, &v33, (char *)&type metadata for Any + 8, v10, 6);
    v18 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56);
    if ((v17 & 1) != 0)
    {
      v18(v9, 0, 1, v10);
      v19 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
      v19(v16, v9, v10);
      v19(a2, v16, v10);
      return ((uint64_t (*)(char *, _QWORD, uint64_t, uint64_t))v18)(a2, 0, 1, v10);
    }
    v18(v9, 1, 1, v10);
    v21 = &qword_3B2C40;
    v22 = (__int128 *)v9;
  }
  else
  {
    v21 = (uint64_t *)&unk_3BC540;
    v22 = &v33;
  }
  sub_1459C((uint64_t)v22, v21);
  sub_267BC(a1, (uint64_t)&v36, (uint64_t *)&unk_3BC540);
  if (!v37)
  {
    v24 = (uint64_t *)&unk_3BC540;
    v25 = (char *)&v36;
    goto LABEL_13;
  }
  if ((swift_dynamicCast(&v33, &v36, (char *)&type metadata for Any + 8, &type metadata for LazyModel, 6) & 1) != 0)
  {
    v23 = v33;
    if (*((_QWORD *)&v33 + 1) != v10)
    {
      swift_release();
      return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(a2, 1, 1, v10);
    }
    v32[0] = v32;
    v26 = v34;
    v27 = (_QWORD *)(v33 + *(_QWORD *)(class metadata base offset for ManagedBuffer + *(_QWORD *)v33 + 16));
    v28 = (os_unfair_lock_s *)(v33 + ((*(unsigned int *)(*(_QWORD *)v33 + 48) + 3) & 0x1FFFFFFFCLL));
    os_unfair_lock_lock(v28);
    sub_2C85C4(v27, v23, v10, v26, (char *)&v36);
    os_unfair_lock_unlock(v28);
    swift_release();
    v29 = swift_dynamicCast(v6, &v36, (char *)&type metadata for Any + 8, v10, 6);
    v30 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56);
    v30(v6, v29 ^ 1u, 1, v10);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v6, 1, v10) != 1)
    {
      v31 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
      v31(v13, v6, v10);
      v31(a2, v13, v10);
      return ((uint64_t (*)(char *, _QWORD, uint64_t, uint64_t))v30)(a2, 0, 1, v10);
    }
    v24 = &qword_3B2C40;
    v25 = v6;
LABEL_13:
    sub_1459C((uint64_t)v25, v24);
  }
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(a2, 1, 1, v10);
}

uint64_t sub_2C85C4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 *v24;
  uint64_t EnumCaseMultiPayload;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  char *v63;
  _QWORD *boxed_opaque_existential_2Tm;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  char *v69;
  _QWORD *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  char *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94[3];
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;

  v82 = a4;
  v83 = a5;
  v85 = a3;
  v86 = a2;
  v6 = type metadata accessor for Logger(0);
  v87 = *(_QWORD *)(v6 - 8);
  v88 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v79 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v84 = (char *)&v79 - v10;
  v11 = type metadata accessor for JSONContext(0);
  v89 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = (char *)&v79 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v90 = (char *)&v79 - v15;
  v93 = type metadata accessor for JSONObject(0);
  v16 = *(_QWORD *)(v93 - 8);
  __chkstk_darwin(v93);
  v18 = (char *)&v79 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v21 = (char *)&v79 - v20;
  v22 = type metadata accessor for LazyModel._State(0);
  __chkstk_darwin(v22);
  v24 = (__int128 *)((char *)&v79 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  v91 = a1;
  sub_2C9E3C((uint64_t)a1, (uint64_t)v24);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v24, v22);
  if ((_DWORD)EnumCaseMultiPayload)
  {
    if ((_DWORD)EnumCaseMultiPayload == 1)
    {
      v26 = *(_QWORD *)v24;
      v27 = v84;
      static Logger.js.getter(EnumCaseMultiPayload);
      v28 = v86;
      swift_retain();
      swift_errorRetain(v26);
      swift_retain();
      v29 = swift_errorRetain(v26);
      v30 = Logger.logObject.getter(v29);
      v31 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v30, v31))
      {
        v32 = swift_slowAlloc(22, -1);
        v33 = (uint64_t *)swift_slowAlloc(8, -1);
        v93 = swift_slowAlloc(32, -1);
        v94[0] = v93;
        *(_DWORD *)v32 = 136315394;
        v34 = _typeName(_:qualified:)(v85, 0);
        v97 = sub_69298(v34, v35, v94);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &v98);
        swift_release_n(v28, 2);
        swift_bridgeObjectRelease();
        *(_WORD *)(v32 + 12) = 2112;
        swift_errorRetain(v26);
        v36 = _swift_stdlib_bridgeErrorToNSError(v26);
        v97 = v36;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &v98);
        *v33 = v36;
        swift_errorRelease(v26);
        swift_errorRelease(v26);
        _os_log_impl(&dword_0, v30, v31, "LazyModel: Object of type %s previously failed to decode with %@", (uint8_t *)v32, 0x16u);
        v37 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8E70);
        swift_arrayDestroy(v33, 1, v37);
        swift_slowDealloc(v33, -1, -1);
        v38 = v93;
        swift_arrayDestroy(v93, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v38, -1, -1);
        swift_slowDealloc(v32, -1, -1);

        v39 = (*(uint64_t (**)(char *, uint64_t))(v87 + 8))(v84, v88);
      }
      else
      {
        swift_release_n(v28, 2);
        swift_errorRelease(v26);
        swift_errorRelease(v26);

        v39 = (*(uint64_t (**)(char *, uint64_t))(v87 + 8))(v27, v88);
      }
      return swift_willThrow(v39);
    }
    else
    {
      sub_F4D8(v24, (uint64_t)v94);
      v61 = v95;
      v62 = __swift_project_boxed_opaque_existential_1(v94, v95);
      v63 = v83;
      *((_QWORD *)v83 + 3) = v61;
      boxed_opaque_existential_2Tm = __swift_allocate_boxed_opaque_existential_2Tm(v63);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v61 - 8) + 16))(boxed_opaque_existential_2Tm, v62, v61);
      return __swift_destroy_boxed_opaque_existential_1(v94);
    }
  }
  else
  {
    v84 = (char *)v22;
    v81 = v8;
    sub_2C9A04((uint64_t)v91);
    v40 = (char *)v24 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3C75D8) + 48);
    v41 = v93;
    (*(void (**)(char *, __int128 *, uint64_t))(v16 + 32))(v21, v24, v93);
    v43 = v89;
    v42 = v90;
    (*(void (**)(char *, char *, uint64_t))(v89 + 32))(v90, v40, v11);
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v18, v21, v41);
    (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v13, v42, v11);
    v44 = v85;
    v45 = v82;
    v95 = v85;
    v96 = v82;
    __swift_allocate_boxed_opaque_existential_2Tm(v94);
    v46 = v92;
    dispatch thunk of ExpressibleByJSON.init(deserializing:using:)(v18, v13, v44, v45);
    v47 = v11;
    if (v46)
    {
      v83 = v21;
      v92 = v16;
      v48 = __swift_deallocate_boxed_opaque_existential_2(v94);
      v49 = v81;
      static Logger.js.getter(v48);
      v50 = v86;
      swift_retain();
      swift_errorRetain(v46);
      swift_retain();
      v51 = swift_errorRetain(v46);
      v52 = Logger.logObject.getter(v51);
      v53 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v52, v53))
      {
        v54 = swift_slowAlloc(22, -1);
        v80 = (uint64_t *)swift_slowAlloc(8, -1);
        v82 = swift_slowAlloc(32, -1);
        v94[0] = v82;
        *(_DWORD *)v54 = 136315394;
        v55 = _typeName(_:qualified:)(v44, 0);
        v97 = sub_69298(v55, v56, v94);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &v98);
        swift_release_n(v50, 2);
        swift_bridgeObjectRelease();
        *(_WORD *)(v54 + 12) = 2112;
        swift_errorRetain(v46);
        v57 = _swift_stdlib_bridgeErrorToNSError(v46);
        v97 = v57;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &v98);
        v58 = v80;
        *v80 = v57;
        v47 = v11;
        swift_errorRelease(v46);
        swift_errorRelease(v46);
        _os_log_impl(&dword_0, v52, v53, "LazyModel: Object of type %s failed to decode with %@", (uint8_t *)v54, 0x16u);
        v59 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8E70);
        swift_arrayDestroy(v58, 1, v59);
        swift_slowDealloc(v58, -1, -1);
        v60 = v82;
        swift_arrayDestroy(v82, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v60, -1, -1);
        swift_slowDealloc(v54, -1, -1);

        (*(void (**)(char *, uint64_t))(v87 + 8))(v81, v88);
      }
      else
      {
        swift_release_n(v50, 2);
        swift_errorRelease(v46);
        swift_errorRelease(v46);

        (*(void (**)(char *, uint64_t))(v87 + 8))(v49, v88);
      }
      v72 = v89;
      v71 = v90;
      v74 = v92;
      v73 = v93;
      v75 = v91;
      v77 = v83;
      v76 = v84;
      *v91 = v46;
      swift_storeEnumTagMultiPayload(v75, v76, 1);
      v78 = swift_errorRetain(v46);
      swift_willThrow(v78);
      (*(void (**)(char *, uint64_t))(v72 + 8))(v71, v47);
      return (*(uint64_t (**)(char *, uint64_t))(v74 + 8))(v77, v73);
    }
    else
    {
      v66 = v91;
      sub_150C8((uint64_t)v94, (uint64_t)v91);
      swift_storeEnumTagMultiPayload(v66, v84, 2);
      v67 = v95;
      v68 = __swift_project_boxed_opaque_existential_1(v94, v95);
      v69 = v83;
      *((_QWORD *)v83 + 3) = v67;
      v70 = __swift_allocate_boxed_opaque_existential_2Tm(v69);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v67 - 8) + 16))(v70, v68, v67);
      (*(void (**)(char *, uint64_t))(v43 + 8))(v90, v11);
      (*(void (**)(char *, uint64_t))(v16 + 8))(v21, v93);
      return __swift_destroy_boxed_opaque_existential_1(v94);
    }
  }
}

uint64_t sub_2C8D8C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  int EnumCaseMultiPayload;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v19[40];
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  _QWORD v23[5];

  v2 = type metadata accessor for JSONObject(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v19[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = type metadata accessor for LazyModel._State(0);
  __chkstk_darwin(v6);
  v8 = (__int128 *)&v19[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  OSAllocatedUnfairLock.current.getter(v8, a1, v6);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v8, v6);
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      sub_2C9A04((uint64_t)v8);
      return 0;
    }
    sub_F4D8(v8, (uint64_t)v23);
    sub_150C8((uint64_t)v23, (uint64_t)v19);
    v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0948);
    v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C7528);
    if (!swift_dynamicCast(&v20, v19, v13, v14, 6))
    {
      v22 = 0;
      v20 = 0u;
      v21 = 0u;
      __swift_destroy_boxed_opaque_existential_1(v23);
      sub_1459C((uint64_t)&v20, &qword_3C7520);
      return 0;
    }
    v15 = *((_QWORD *)&v21 + 1);
    v16 = v22;
    __swift_project_boxed_opaque_existential_1(&v20, *((uint64_t *)&v21 + 1));
    v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8))(v15, v16);
    __swift_destroy_boxed_opaque_existential_1(v23);
    __swift_destroy_boxed_opaque_existential_1(&v20);
  }
  else
  {
    v10 = (char *)v8 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3C75D8) + 48);
    (*(void (**)(_BYTE *, __int128 *, uint64_t))(v3 + 32))(v5, v8, v2);
    v11 = sub_2C9A40();
    (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v5, v2);
    v12 = type metadata accessor for JSONContext(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v10, v12);
  }
  return v11;
}

uint64_t sub_2C8F80()
{
  uint64_t *v0;

  return sub_2C8D8C(*v0);
}

uint64_t sub_2C8F8C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = _findStringSwitchCaseWithCache(cases:string:cache:)(&off_372C38, a1, a2, &unk_3B0300);
  swift_bridgeObjectRelease(a2);
  if (v3 >= 0x26)
    return 38;
  else
    return v3;
}

_QWORD *initializeBufferWithCopyOfBuffer for LazyJSFlowDestination(_BYTE *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  _BYTE *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _OWORD *v16;
  uint64_t v17;
  __int128 v18;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *(_BYTE *)a2;
    v7 = a3[5];
    v8 = &a1[v7];
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for URL(0);
    v11 = *(_QWORD *)(v10 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    v14 = a3[6];
    v15 = (char *)v4 + v14;
    v16 = (_OWORD *)((char *)a2 + v14);
    v17 = *(_QWORD *)((char *)a2 + v14 + 24);
    if (v17)
    {
      *((_QWORD *)v15 + 3) = v17;
      (**(void (***)(void))(v17 - 8))();
    }
    else
    {
      v18 = v16[1];
      *(_OWORD *)v15 = *v16;
      *((_OWORD *)v15 + 1) = v18;
    }
    *((_BYTE *)v4 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  }
  return v4;
}

_QWORD *destroy for LazyJSFlowDestination(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *result;

  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  result = (_QWORD *)(a1 + *(int *)(a2 + 24));
  if (result[3])
    return (_QWORD *)__swift_destroy_boxed_opaque_existential_1(result);
  return result;
}

_BYTE *initializeWithCopy for LazyJSFlowDestination(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  _OWORD *v14;
  uint64_t v15;
  __int128 v16;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v12 = a3[6];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = *(_QWORD *)&a2[v12 + 24];
  if (v15)
  {
    *((_QWORD *)v13 + 3) = v15;
    (**(void (***)(void))(v15 - 8))();
  }
  else
  {
    v16 = v14[1];
    *(_OWORD *)v13 = *v14;
    *((_OWORD *)v13 + 1) = v16;
  }
  a1[a3[7]] = a2[a3[7]];
  return a1;
}

_BYTE *assignWithCopy for LazyJSFlowDestination(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(_BYTE *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  uint64_t v18;
  __int128 v19;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  v15 = a3[6];
  v16 = &a1[v15];
  v17 = &a2[v15];
  v18 = *(_QWORD *)&a2[v15 + 24];
  if (!*(_QWORD *)&a1[v15 + 24])
  {
    if (v18)
    {
      *((_QWORD *)v16 + 3) = v18;
      (**(void (***)(_BYTE *, _BYTE *))(v18 - 8))(v16, v17);
      goto LABEL_14;
    }
LABEL_13:
    v19 = *((_OWORD *)v17 + 1);
    *(_OWORD *)v16 = *(_OWORD *)v17;
    *((_OWORD *)v16 + 1) = v19;
    goto LABEL_14;
  }
  if (!v18)
  {
    __swift_destroy_boxed_opaque_existential_1(v16);
    goto LABEL_13;
  }
  __swift_assign_boxed_opaque_existential_0(v16, v17);
LABEL_14:
  a1[a3[7]] = a2[a3[7]];
  return a1;
}

_BYTE *initializeWithTake for LazyJSFlowDestination(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  __int128 v16;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v12 = a3[6];
  v13 = a3[7];
  v14 = &a1[v12];
  v15 = &a2[v12];
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  a1[v13] = a2[v13];
  return a1;
}

_BYTE *assignWithTake for LazyJSFlowDestination(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(_BYTE *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  __int128 v17;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 32))(v7, v8, v9);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 40))(v7, v8, v9);
LABEL_7:
  v15 = a3[6];
  v16 = &a1[v15];
  if (*(_QWORD *)&a1[v15 + 24])
    __swift_destroy_boxed_opaque_existential_1(&a1[v15]);
  v17 = *(_OWORD *)&a2[v15 + 16];
  *v16 = *(_OWORD *)&a2[v15];
  v16[1] = v17;
  a1[a3[7]] = a2[a3[7]];
  return a1;
}

uint64_t getEnumTagSinglePayload for LazyJSFlowDestination(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_2C9658);
}

uint64_t sub_2C9658(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 24);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for LazyJSFlowDestination(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_2C96F8);
}

uint64_t sub_2C96F8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 20), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24) + 24) = a2;
  return result;
}

void sub_2C977C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = &unk_306098;
  sub_28C74(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    v4[2] = &unk_3060B0;
    v4[3] = &unk_3060C8;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
  }
}

uint64_t getEnumTagSinglePayload for FlowPage(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xDB)
    goto LABEL_17;
  if (a2 + 37 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 37) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 37;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 37;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 37;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x26;
  v8 = v6 - 38;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for FlowPage(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 37 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 37) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xDB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xDA)
    return ((uint64_t (*)(void))((char *)&loc_2C98E0 + 4 * byte_30605D[v4]))();
  *a1 = a2 + 37;
  return ((uint64_t (*)(void))((char *)sub_2C9914 + 4 * byte_306058[v4]))();
}

uint64_t sub_2C9914(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2C991C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2C9924);
  return result;
}

uint64_t sub_2C9930(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2C9938);
  *(_BYTE *)result = a2 + 37;
  return result;
}

uint64_t sub_2C993C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2C9944(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FlowPage()
{
  return &type metadata for FlowPage;
}

unint64_t sub_2C9964()
{
  unint64_t result;

  result = qword_3C75C8;
  if (!qword_3C75C8)
  {
    result = swift_getWitnessTable(&unk_306164);
    atomic_store(result, (unint64_t *)&qword_3C75C8);
  }
  return result;
}

unint64_t sub_2C99AC()
{
  unint64_t result;

  result = qword_3C75D0;
  if (!qword_3C75D0)
  {
    result = swift_getWitnessTable(&unk_30619C);
    atomic_store(result, (unint64_t *)&qword_3C75D0);
  }
  return result;
}

uint64_t type metadata accessor for LazyModel._State(uint64_t a1)
{
  return sub_1F9D4(a1, qword_3C7660, (uint64_t)&nominal type descriptor for LazyModel._State);
}

uint64_t sub_2C9A04(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for LazyModel._State(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_2C9A40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  void (*v34)(uint64_t);
  unint64_t *v35;
  void *v36;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;

  v0 = type metadata accessor for AppEntityVisualState(0);
  __chkstk_darwin(v0);
  v43 = (char *)&v42 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for JSONObject(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v8 = (char *)&v42 - v7;
  __chkstk_darwin(v9);
  v11 = (char *)&v42 - v10;
  v12 = JSONObject.subscript.getter(0x6D61644165676170, 0xEA00000000006449);
  v13 = JSONObject.string.getter(v12);
  v15 = v14;
  v16 = *(void (**)(char *, uint64_t))(v3 + 8);
  v16(v11, v2);
  if (!v15)
    return 0;
  swift_bridgeObjectRetain();
  v17 = JSONObject.subscript.getter(0x416C656E6E616863, 0xED000064496D6164);
  v18 = JSONObject.string.getter(v17);
  v20 = v19;
  v16(v8, v2);
  if (!v20)
  {
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  if (v13 != v18 || v15 != v20)
  {
    v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v13, v15, v18, v20, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v22 & 1) != 0)
      goto LABEL_18;
LABEL_10:
    swift_bridgeObjectRetain();
    v23 = JSONObject.subscript.getter(0x6D616441776F6873, 0xEA00000000006449);
    v24 = JSONObject.string.getter(v23);
    v26 = v25;
    v16(v5, v2);
    if (v26)
    {
      if (v13 == v24 && v15 == v26)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        v28 = _stringCompareWithSmolCheck(_:_:expecting:)(v13, v15, v24, v26, 0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v28 & 1) == 0)
        {
          swift_bridgeObjectRelease();
          return 0;
        }
      }
      v44 = _swiftEmptyArrayStorage;
      v38 = sub_F1C0((unint64_t *)&qword_3B1D18, (void (*)(uint64_t))&type metadata accessor for AppEntityVisualState, (uint64_t)&protocol conformance descriptor for AppEntityVisualState);
      v39 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B1D20);
      v40 = sub_29210();
      v32 = v43;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v44, v39, v40, v0, v38);
      v33 = type metadata accessor for ShowEntity(0);
      v34 = (void (*)(uint64_t))&type metadata accessor for ShowEntity;
      v44 = (_QWORD *)v13;
      v45 = v15;
      objc_allocWithZone((Class)type metadata accessor for AppEntityViewAnnotation(0));
      v35 = &qword_3B9668;
      v36 = &protocol conformance descriptor for ShowEntity;
      goto LABEL_23;
    }
    swift_bridgeObjectRelease_n(v15, 2);
    return 0;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_18:
  v44 = _swiftEmptyArrayStorage;
  v29 = sub_F1C0((unint64_t *)&qword_3B1D18, (void (*)(uint64_t))&type metadata accessor for AppEntityVisualState, (uint64_t)&protocol conformance descriptor for AppEntityVisualState);
  v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B1D20);
  v31 = sub_29210();
  v32 = v43;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v44, v30, v31, v0, v29);
  v33 = type metadata accessor for ChannelEntity(0);
  v34 = (void (*)(uint64_t))&type metadata accessor for ChannelEntity;
  v44 = (_QWORD *)v13;
  v45 = v15;
  objc_allocWithZone((Class)type metadata accessor for AppEntityViewAnnotation(0));
  v35 = &qword_3BDFB0;
  v36 = &protocol conformance descriptor for ChannelEntity;
LABEL_23:
  v41 = sub_F1C0(v35, v34, (uint64_t)v36);
  return AppEntityViewAnnotation.init<A>(entityType:identifier:state:)(v33, &v44, v32, v33, v41);
}

uint64_t sub_2C9E3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LazyModel._State(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_2C9E80()
{
  unint64_t result;

  result = qword_3C75E8;
  if (!qword_3C75E8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for FlowOrigin);
    atomic_store(result, (unint64_t *)&qword_3C75E8);
  }
  return result;
}

uint64_t sub_2C9EC4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v12 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      v13 = *(_OWORD *)(a2 + 3);
      *(_OWORD *)(a1 + 24) = v13;
      (**(void (***)(uint64_t, uint64_t *))(v13 - 8))(a1, a2);
      v9 = a1;
      v10 = a3;
      v11 = 2;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v8 = *a2;
      swift_errorRetain(v8);
      *(_QWORD *)a1 = v8;
      v9 = a1;
      v10 = a3;
      v11 = 1;
    }
    else
    {
      v14 = type metadata accessor for JSONObject(0);
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(a1, a2, v14);
      v15 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3C75D8) + 48);
      v16 = a1 + v15;
      v17 = (uint64_t)a2 + v15;
      v18 = type metadata accessor for JSONContext(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
      v9 = a1;
      v10 = a3;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
  }
  return a1;
}

uint64_t sub_2C9FF4(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  char *v5;
  uint64_t v6;

  result = swift_getEnumCaseMultiPayload(a1, a2);
  switch((_DWORD)result)
  {
    case 2:
      return __swift_destroy_boxed_opaque_existential_1(a1);
    case 1:
      return swift_errorRelease(*a1);
    case 0:
      v4 = type metadata accessor for JSONObject(0);
      (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
      v5 = (char *)a1 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3C75D8) + 48);
      v6 = type metadata accessor for JSONContext(0);
      return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  }
  return result;
}

uint64_t sub_2CA094(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 2)
  {
    v11 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v11;
    (**(void (***)(uint64_t, uint64_t *))(v11 - 8))(a1, a2);
    v8 = a1;
    v9 = a3;
    v10 = 2;
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v7 = *a2;
    swift_errorRetain(v7);
    *(_QWORD *)a1 = v7;
    v8 = a1;
    v9 = a3;
    v10 = 1;
  }
  else
  {
    v12 = type metadata accessor for JSONObject(0);
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
    v13 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3C75D8) + 48);
    v14 = a1 + v13;
    v15 = (uint64_t)a2 + v13;
    v16 = type metadata accessor for JSONContext(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
    v8 = a1;
    v9 = a3;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  return a1;
}

uint64_t *sub_2CA198(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  if (a1 != a2)
  {
    sub_2C9A04((uint64_t)a1);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      v11 = a2[3];
      a1[3] = v11;
      a1[4] = a2[4];
      (**(void (***)(uint64_t *, uint64_t *))(v11 - 8))(a1, a2);
      v8 = a1;
      v9 = a3;
      v10 = 2;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v7 = *a2;
      swift_errorRetain(v7);
      *a1 = v7;
      v8 = a1;
      v9 = a3;
      v10 = 1;
    }
    else
    {
      v12 = type metadata accessor for JSONObject(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
      v13 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3C75D8) + 48);
      v14 = (char *)a1 + v13;
      v15 = (char *)a2 + v13;
      v16 = type metadata accessor for JSONContext(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
      v8 = a1;
      v9 = a3;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  return a1;
}

char *sub_2CA2B0(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  if (swift_getEnumCaseMultiPayload(a2, a3))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v6 = type metadata accessor for JSONObject(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3C75D8) + 48);
    v8 = &a1[v7];
    v9 = &a2[v7];
    v10 = type metadata accessor for JSONContext(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
    swift_storeEnumTagMultiPayload(a1, a3, 0);
  }
  return a1;
}

char *sub_2CA370(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  if (a1 != a2)
  {
    sub_2C9A04((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload(a2, a3))
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v6 = type metadata accessor for JSONObject(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3C75D8) + 48);
      v8 = &a1[v7];
      v9 = &a2[v7];
      v10 = type metadata accessor for JSONContext(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
      swift_storeEnumTagMultiPayload(a1, a3, 0);
    }
  }
  return a1;
}

uint64_t sub_2CA440(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _BYTE v7[32];
  _QWORD v8[3];

  v2 = type metadata accessor for JSONObject(319);
  if (v3 <= 0x3F)
  {
    v4 = type metadata accessor for JSONContext(319);
    if (v5 > 0x3F)
    {
      return v4;
    }
    else
    {
      swift_getTupleTypeLayout2(v7, *(_QWORD *)(v2 - 8) + 64, *(_QWORD *)(v4 - 8) + 64);
      v8[0] = v7;
      v8[1] = "\b";
      v8[2] = &unk_306218;
      swift_initEnumMetadataMultiPayload(a1, 256, 3, v8);
      return 0;
    }
  }
  return v2;
}

uint64_t initializeBufferWithCopyOfBuffer for LazyModel(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  __int128 v4;

  v3 = *((_QWORD *)a2 + 2);
  v4 = *a2;
  *(_OWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 16) = v3;
  swift_retain(v4);
  return a1;
}

uint64_t *assignWithCopy for LazyModel(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
  return a1;
}

_QWORD *assignWithTake for LazyModel(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  swift_release(*a1);
  v4 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = v4;
  return a1;
}

ValueMetadata *type metadata accessor for LazyModel()
{
  return &type metadata for LazyModel;
}

uint64_t sub_2CA5C4(uint64_t a1)
{
  _BYTE v2[8];
  __int128 v3;

  v2[0] = *(_BYTE *)a1;
  v3 = *(_OWORD *)(a1 + 8);
  return State.init(wrappedValue:)(v2, &type metadata for SizeClassProxy);
}

uint64_t sub_2CA5FC(char *a1)
{
  char *v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  _BYTE v7[8];
  __int128 v8;
  char v9;
  __int128 v10;
  uint64_t v11;

  v2 = *a1;
  v3 = *((_QWORD *)v1 + 3);
  v9 = *v1;
  v10 = *(_OWORD *)(v1 + 8);
  v11 = v3;
  v7[0] = v2;
  v8 = *(_OWORD *)(a1 + 8);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C7718);
  return State.wrappedValue.setter(v7, v4, v5);
}

__n128 SizeClassReader.init(content:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __n128 result;
  char v7;
  __n128 v8;
  uint64_t v9;
  _BYTE v10[8];
  double v11;
  uint64_t v12;

  v10[0] = SizeClass.init(width:)(300.0);
  v11 = SizeClass.margins(width:)(300.0);
  v12 = 0x4072C00000000000;
  State.init(wrappedValue:)(v10, &type metadata for SizeClassProxy);
  result = v8;
  *(_BYTE *)a3 = v7;
  *(__n128 *)(a3 + 8) = v8;
  *(_QWORD *)(a3 + 24) = v9;
  *(_QWORD *)(a3 + 32) = a1;
  *(_QWORD *)(a3 + 40) = a2;
  return result;
}

uint64_t SizeClassReader.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t (*v19)(_BYTE *);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t WitnessTable;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  __int128 v47;
  _BYTE v48[32];
  __int128 v49;
  _BYTE v50[8];
  __int128 v51;
  uint64_t v52;

  v34 = a1;
  v39 = a2;
  v3 = *(_QWORD *)(a1 + 16);
  v35 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(a1);
  v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ModifiedContent(0, v3, &type metadata for _FlexFrameLayout);
  v37 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v33 - v7;
  v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_3B5480);
  v10 = type metadata accessor for ModifiedContent(255, v6, v9);
  v36 = v10;
  v11 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_3B5490);
  v12 = type metadata accessor for ModifiedContent(0, v10, v11);
  v38 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v33 = (uint64_t)&v33 - v16;
  v17 = v2[2];
  v18 = *v2;
  *(_OWORD *)&v48[16] = v2[1];
  v49 = v17;
  *(_OWORD *)v48 = v18;
  v19 = (uint64_t (*)(_BYTE *))v17;
  v50[0] = v18;
  v51 = *(_OWORD *)&v48[8];
  v52 = *(_QWORD *)&v48[24];
  __swift_instantiateConcreteTypeFromMangledName(&qword_3C7718);
  State.wrappedValue.getter(&v46);
  v50[0] = v46;
  v51 = v47;
  v20 = v19(v50);
  v21 = static Alignment.center.getter(v20);
  v22 = *(_QWORD *)(v34 + 24);
  View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(0, 1, 0, 1, 0x7FF0000000000000, 0, 0, 1, 0, 1, 0, 1, v21, v23, v3, v22);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v5, v3);
  v24 = swift_allocObject(&unk_38F9B8, 80, 7);
  *(_QWORD *)(v24 + 16) = v3;
  *(_QWORD *)(v24 + 24) = v22;
  v25 = *(_OWORD *)&v48[16];
  *(_OWORD *)(v24 + 32) = *(_OWORD *)v48;
  *(_OWORD *)(v24 + 48) = v25;
  *(_OWORD *)(v24 + 64) = v49;
  sub_2CABBC((uint64_t)v48);
  v44 = v22;
  v45 = &protocol witness table for _FlexFrameLayout;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>);
  View.withSizing(callback:)((uint64_t)sub_2CABB0, v24, v6, WitnessTable, (uint64_t)v14);
  swift_release();
  (*(void (**)(char *, uint64_t))(v37 + 8))(v8, v6);
  v27 = sub_32914(&qword_3B5478, &qword_3B5480, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
  v42 = WitnessTable;
  v43 = v27;
  v28 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>);
  v29 = sub_32914(&qword_3B5488, &qword_3B5490, (uint64_t)&protocol conformance descriptor for _PreferenceActionModifier<A>);
  v40 = v28;
  v41 = v29;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>);
  v30 = v33;
  sub_135B90((uint64_t)v14, v12, v33);
  v31 = *(void (**)(char *, uint64_t))(v38 + 8);
  v31(v14, v12);
  sub_133078(v30, v12, v39);
  return ((uint64_t (*)(uint64_t, uint64_t))v31)(v30, v12);
}

_QWORD *sub_2CAAA8(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  _QWORD *result;
  uint64_t v9;
  char v10;
  double v11;
  _QWORD v12[2];
  double v13;

  __swift_instantiateConcreteTypeFromMangledName(&qword_3C7718);
  result = State.wrappedValue.getter(v12);
  if (v13 != a4)
  {
    type metadata accessor for SizeClassReader(0, a2, a3, v9);
    sub_2CABBC(a1);
    v10 = SizeClass.init(width:)(a4);
    v11 = SizeClass.margins(width:)(a4);
    LOBYTE(v12[0]) = v10;
    *(double *)&v12[1] = v11;
    v13 = a4;
    sub_2CA5FC((char *)v12);
    return (_QWORD *)sub_2CAFB4(a1);
  }
  return result;
}

uint64_t sub_2CAB84()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 56));
  swift_release(*(_QWORD *)(v0 + 72));
  return swift_deallocObject(v0, 80, 7);
}

_QWORD *sub_2CABB0(double a1)
{
  uint64_t v1;

  return sub_2CAAA8(v1 + 32, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_2CABBC(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 40);
  swift_retain(*(_QWORD *)(a1 + 24));
  swift_retain(v2);
  return a1;
}

uint64_t sub_2CABF0(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &opaque type descriptor for <<opaque return type of SizeClassReader.body>>, 1);
}

uint64_t getEnumTagSinglePayload for SizeClassProxy(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xF9 && a1[24])
    return (*(_DWORD *)a1 + 249);
  v3 = *a1;
  v4 = v3 >= 8;
  v5 = v3 - 8;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for SizeClassProxy(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF8)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 249;
    if (a3 >= 0xF9)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0xF9)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 7;
  }
  return result;
}

ValueMetadata *type metadata accessor for SizeClassProxy()
{
  return &type metadata for SizeClassProxy;
}

uint64_t sub_2CACC0(uint64_t a1)
{
  swift_release(*(_QWORD *)(a1 + 24));
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_2CACE8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v3 = *(_QWORD *)(a2 + 40);
  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 40) = v3;
  swift_retain(v4);
  swift_retain(v3);
  return a1;
}

uint64_t sub_2CAD38(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v5;
  swift_retain(v5);
  swift_release(v4);
  v7 = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v6;
  swift_retain(v6);
  swift_release(v8);
  return a1;
}

uint64_t sub_2CADAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release(*(_QWORD *)(a1 + 24));
  v4 = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v4;
  swift_release(v5);
  return a1;
}

uint64_t sub_2CAE00(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_2CAE48(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for SizeClassReader(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SizeClassReader);
}

uint64_t sub_2CAEA0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = type metadata accessor for ModifiedContent(255, *a1, &type metadata for _FlexFrameLayout);
  v2 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_3B5480);
  v3 = type metadata accessor for ModifiedContent(255, v1, v2);
  v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_3B5490);
  type metadata accessor for ModifiedContent(255, v3, v4);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>);
  sub_32914(&qword_3B5478, &qword_3B5480, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>);
  sub_32914(&qword_3B5488, &qword_3B5490, (uint64_t)&protocol conformance descriptor for _PreferenceActionModifier<A>);
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>);
}

uint64_t sub_2CAFB4(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  swift_release(*(_QWORD *)(a1 + 40));
  swift_release(v2);
  return a1;
}

uint64_t JSONContext.withActionKinds()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a1;
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C1E40);
  v20 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v2 = (char *)&v17 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for AnyActionTypes(0);
  v19 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C0C68);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for JSONContext(0);
  v10 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_212CC4();
  v23[0] = &type metadata for ActionKinds;
  v23[1] = v13;
  static JSONContext.Property<A>.actionKindTable.getter();
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C0D00);
  JSONContext.addingValue<A>(_:forProperty:)(v23, v9, v14);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v15 = AnyActionTypes.init(_:)(&type metadata for ActionKinds, v13);
  static JSONContext.Property<A>.actionTypes.getter(v15);
  JSONContext.addingValue<A>(_:forProperty:)(v5, v2, v3);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v2, v22);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v5, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v18);
}

uint64_t JSONContext.withIntentKinds()()
{
  uint64_t v0;
  uint64_t v1;
  __n128 v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BB430);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AnyIntentTypes(0, v2);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_126124();
  v10 = AnyIntentTypes.init(_:)(&type metadata for IntentKinds, v9);
  static JSONContext.Property<A>.intentTypes.getter(v10);
  JSONContext.addingValue<A>(_:forProperty:)(v8, v4, v5);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t ManageCategoriesPage.pageMetrics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ManageCategoriesPage(0) + 20);
  v4 = type metadata accessor for PageMetrics(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for ManageCategoriesPage(uint64_t a1)
{
  uint64_t result;

  result = qword_3C77C0;
  if (!qword_3C77C0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ManageCategoriesPage);
  return result;
}

uint64_t ManageCategoriesPage.init(sections:pageMetrics:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  char *v4;
  uint64_t v5;

  *a3 = a1;
  v4 = (char *)a3 + *(int *)(type metadata accessor for ManageCategoriesPage(0) + 20);
  v5 = type metadata accessor for PageMetrics(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(v4, a2, v5);
}

uint64_t sub_2CB3A8()
{
  _BYTE *v0;

  if (*v0)
    return 0x7274654D65676170;
  else
    return 0x736E6F6974636573;
}

uint64_t sub_2CB3EC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_2CBFB8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2CB410(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_2CB5F8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_2CB438(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_2CB5F8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ManageCategoriesPage.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  _BYTE v14[8];
  uint64_t v15;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C7720);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v14[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = a1[3];
  v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  v11 = sub_2CB5F8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ManageCategoriesPage.CodingKeys, &type metadata for ManageCategoriesPage.CodingKeys, v11, v9, v10);
  v15 = *v3;
  v14[7] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_3C7730);
  sub_2CB8C8(&qword_3C7738, &qword_3C7740, (uint64_t)&protocol conformance descriptor for CategorySection, (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v15);
  if (!v2)
  {
    v12 = (char *)v3 + *(int *)(type metadata accessor for ManageCategoriesPage(0) + 20);
    v14[6] = 1;
    type metadata accessor for PageMetrics(0);
    sub_F1C0(&qword_3C7748, (void (*)(uint64_t))&type metadata accessor for PageMetrics, (uint64_t)&protocol conformance descriptor for PageMetrics);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v12);
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_2CB5F8()
{
  unint64_t result;

  result = qword_3C7728;
  if (!qword_3C7728)
  {
    result = swift_getWitnessTable(&unk_306498);
    atomic_store(result, (unint64_t *)&qword_3C7728);
  }
  return result;
}

uint64_t ManageCategoriesPage.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  _QWORD *v28;
  char v29;
  char v30;
  uint64_t v31;

  v24 = a2;
  v25 = type metadata accessor for PageMetrics(0);
  v23 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v4 = (uint64_t *)((char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C7750);
  v5 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ManageCategoriesPage(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v11 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v12);
  v13 = sub_2CB5F8();
  v26 = v7;
  v14 = v28;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ManageCategoriesPage.CodingKeys, &type metadata for ManageCategoriesPage.CodingKeys, v13, v12, v11);
  if (v14)
    return __swift_destroy_boxed_opaque_existential_1(a1);
  v28 = a1;
  v15 = v10;
  v16 = v25;
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C7730);
  v30 = 0;
  sub_2CB8C8(&qword_3C7758, &qword_3B2E00, (uint64_t)&protocol conformance descriptor for CategorySection, (uint64_t)&protocol conformance descriptor for <A> [A]);
  v18 = v17;
  v19 = v27;
  v20 = v26;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v31, v18);
  *(_QWORD *)v15 = v31;
  v29 = 1;
  sub_F1C0(&qword_3C7760, (void (*)(uint64_t))&type metadata accessor for PageMetrics, (uint64_t)&protocol conformance descriptor for PageMetrics);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v4, v16);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v20, v19);
  (*(void (**)(char *, _QWORD *, uint64_t))(v23 + 32))(&v15[*(int *)(v8 + 20)], v4, v16);
  sub_2CB94C((uint64_t)v15, v24);
  __swift_destroy_boxed_opaque_existential_1(v28);
  return sub_2CB990((uint64_t)v15);
}

uint64_t sub_2CB8C8(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_3C7730);
    sub_F1C0(a2, (void (*)(uint64_t))type metadata accessor for CategorySection, a3);
    result = swift_getWitnessTable(a4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_2CB94C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ManageCategoriesPage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_2CB990(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ManageCategoriesPage(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_2CB9CC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ManageCategoriesPage.init(from:)(a1, a2);
}

uint64_t sub_2CB9E0(_QWORD *a1)
{
  return ManageCategoriesPage.encode(to:)(a1);
}

uint64_t sub_2CB9F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return sub_46510(a1, a2, a3);
}

uint64_t *initializeBufferWithCopyOfBuffer for ManageCategoriesPage(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain(v4);
  }
  else
  {
    v5 = a1;
    v6 = *(int *)(a3 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for PageMetrics(0);
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain(v4);
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t destroy for ManageCategoriesPage(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*a1);
  v4 = (char *)a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for PageMetrics(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t *initializeWithCopy for ManageCategoriesPage(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);

  v4 = *a2;
  *a1 = *a2;
  v5 = *(int *)(a3 + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for PageMetrics(0);
  v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain(v4);
  v9(v6, v7, v8);
  return a1;
}

uint64_t *assignWithCopy for ManageCategoriesPage(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for PageMetrics(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  return a1;
}

_QWORD *initializeWithTake for ManageCategoriesPage(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for PageMetrics(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t *assignWithTake for ManageCategoriesPage(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for PageMetrics(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for ManageCategoriesPage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_2CBCA0);
}

uint64_t sub_2CBCA0(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for PageMetrics(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for ManageCategoriesPage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_2CBD28);
}

char *sub_2CBD28(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for PageMetrics(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_2CBD9C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  result = type metadata accessor for PageMetrics(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ManageCategoriesPage.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_2CBE60 + 4 * byte_3062F5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_2CBE94 + 4 * byte_3062F0[v4]))();
}

uint64_t sub_2CBE94(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2CBE9C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2CBEA4);
  return result;
}

uint64_t sub_2CBEB0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2CBEB8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_2CBEBC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2CBEC4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ManageCategoriesPage.CodingKeys()
{
  return &type metadata for ManageCategoriesPage.CodingKeys;
}

unint64_t sub_2CBEE4()
{
  unint64_t result;

  result = qword_3C77F8;
  if (!qword_3C77F8)
  {
    result = swift_getWitnessTable(&unk_306470);
    atomic_store(result, (unint64_t *)&qword_3C77F8);
  }
  return result;
}

unint64_t sub_2CBF2C()
{
  unint64_t result;

  result = qword_3C7800;
  if (!qword_3C7800)
  {
    result = swift_getWitnessTable(&unk_3063E0);
    atomic_store(result, (unint64_t *)&qword_3C7800);
  }
  return result;
}

unint64_t sub_2CBF74()
{
  unint64_t result;

  result = qword_3C7808;
  if (!qword_3C7808)
  {
    result = swift_getWitnessTable(&unk_306408);
    atomic_store(result, (unint64_t *)&qword_3C7808);
  }
  return result;
}

uint64_t sub_2CBFB8(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x736E6F6974636573 && a2 == 0xE800000000000000)
  {
    v5 = 0xE800000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x736E6F6974636573, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x7274654D65676170 && a2 == 0xEB00000000736369)
  {
    swift_bridgeObjectRelease(0xEB00000000736369);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7274654D65676170, 0xEB00000000736369, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t UnbookmarkEpisodeAction.actionMetrics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for UnbookmarkEpisodeAction(0) + 20);
  v4 = type metadata accessor for ActionMetrics(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for UnbookmarkEpisodeAction(uint64_t a1)
{
  uint64_t result;

  result = qword_3C7870;
  if (!qword_3C7870)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for UnbookmarkEpisodeAction);
  return result;
}

uint64_t UnbookmarkEpisodeAction.actionMetrics.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for UnbookmarkEpisodeAction(0) + 20);
  v4 = type metadata accessor for ActionMetrics(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

void (__swiftcall *UnbookmarkEpisodeAction.actionMetrics.modify())()
{
  type metadata accessor for UnbookmarkEpisodeAction(0);
  return FindOrCreateEpisodeOfferContentIDsIntentsIntentImplementation.init();
}

uint64_t UnbookmarkEpisodeAction.intent.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0918);
  v2 = swift_allocObject(v1, 56, 7);
  *(_OWORD *)(v2 + 16) = xmmword_2EA0D0;
  *(_QWORD *)(v2 + 32) = *v0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 48) = 0;
  return UnbookmarkEpisodeIntent.init(episodeIdentifiers:)(v2);
}

uint64_t UnbookmarkEpisodeAction.init(adamID:actionMetrics:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  char *v4;
  uint64_t v5;

  *a3 = a1;
  v4 = (char *)a3 + *(int *)(type metadata accessor for UnbookmarkEpisodeAction(0) + 20);
  v5 = type metadata accessor for ActionMetrics(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(v4, a2, v5);
}

uint64_t sub_2CC254()
{
  return sub_F1C0(&qword_3C7810, (void (*)(uint64_t))type metadata accessor for UnbookmarkEpisodeAction, (uint64_t)&protocol conformance descriptor for UnbookmarkEpisodeAction);
}

uint64_t sub_2CC280(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of UnbookmarkEpisodeAction.intent>>, 1);
}

uint64_t getEnumTagSinglePayload for UnbookmarkEpisodeAction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_2CC29C);
}

uint64_t sub_2CC29C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a3 + 20);
  v5 = type metadata accessor for ActionMetrics(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for UnbookmarkEpisodeAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_2CC2E8);
}

uint64_t sub_2CC2E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + *(int *)(a4 + 20);
  v6 = type metadata accessor for ActionMetrics(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, a2, a2, v6);
}

uint64_t sub_2CC32C()
{
  return sub_F1C0(qword_3B7068, (void (*)(uint64_t))&type metadata accessor for UnbookmarkEpisodeIntent, (uint64_t)&protocol conformance descriptor for UnbookmarkEpisodeIntent);
}

uint64_t sub_2CC358(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t result;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  Swift::UInt64 v16;
  uint64_t v17;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = sub_136858();
  result = Set.init(minimumCapacity:)(v2, &type metadata for AdamID, v3);
  v5 = 0;
  v17 = result;
  v6 = a1 + 64;
  v7 = 1 << *(_BYTE *)(a1 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a1 + 64);
  v10 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      v11 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v12 = v11 | (v5 << 6);
      goto LABEL_5;
    }
    v13 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v13 >= v10)
      goto LABEL_23;
    v14 = *(_QWORD *)(v6 + 8 * v13);
    ++v5;
    if (!v14)
    {
      v5 = v13 + 1;
      if (v13 + 1 >= v10)
        goto LABEL_23;
      v14 = *(_QWORD *)(v6 + 8 * v5);
      if (!v14)
      {
        v5 = v13 + 2;
        if (v13 + 2 >= v10)
          goto LABEL_23;
        v14 = *(_QWORD *)(v6 + 8 * v5);
        if (!v14)
        {
          v5 = v13 + 3;
          if (v13 + 3 >= v10)
            goto LABEL_23;
          v14 = *(_QWORD *)(v6 + 8 * v5);
          if (!v14)
            break;
        }
      }
    }
LABEL_22:
    v9 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v5 << 6);
LABEL_5:
    result = sub_9C390(&v16, *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v12));
  }
  v15 = v13 + 4;
  if (v15 >= v10)
  {
LABEL_23:
    swift_release(a1);
    return v17;
  }
  v14 = *(_QWORD *)(v6 + 8 * v15);
  if (v14)
  {
    v5 = v15;
    goto LABEL_22;
  }
  while (1)
  {
    v5 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v5 >= v10)
      goto LABEL_23;
    v14 = *(_QWORD *)(v6 + 8 * v5);
    ++v15;
    if (v14)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

_QWORD *sub_2CC4CC(uint64_t a1)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  id v5;
  void *v6;
  id v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if ((unint64_t)a1 >> 62)
    goto LABEL_15;
  v2 = *(_QWORD *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8));
  while (1)
  {
    if (!v2)
      return _swiftEmptyArrayStorage;
    result = (_QWORD *)sub_180A84(0, v2 & ~(v2 >> 63), 0);
    if (v2 < 0)
      break;
    v4 = 0;
    while (v2 != v4)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4);
      else
        v5 = *(id *)(a1 + 8 * v4 + 32);
      v6 = v5;
      v7 = objc_msgSend(v5, "storeTrackId");

      v9 = _swiftEmptyArrayStorage[2];
      v8 = _swiftEmptyArrayStorage[3];
      if (v9 >= v8 >> 1)
        sub_180A84(v8 > 1, v9 + 1, 1);
      ++v4;
      _swiftEmptyArrayStorage[2] = v9 + 1;
      _swiftEmptyArrayStorage[v9 + 4] = v7;
      if (v2 == v4)
        return _swiftEmptyArrayStorage;
    }
    __break(1u);
LABEL_15:
    if (a1 < 0)
      v10 = a1;
    else
      v10 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v2 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

_QWORD *sub_2CC62C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  id v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((unint64_t)a1 >> 62)
    goto LABEL_14;
  v2 = *(_QWORD *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8));
  while (1)
  {
    result = _swiftEmptyArrayStorage;
    if (!v2)
      break;
    result = (_QWORD *)specialized ContiguousArray.reserveCapacity(_:)(v2);
    if (v2 < 0)
    {
      __break(1u);
      return result;
    }
    v4 = 0;
    while (v2 != v4)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, a1);
      else
        v5 = *(id *)(a1 + 8 * v4 + 32);
      v6 = v5;
      ++v4;
      v7 = objc_msgSend(v5, "objectID");

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v8);
      v9 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v9);
      v10 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v9, v7);
      specialized ContiguousArray._endMutation()(v10);
      if (v2 == v4)
        return _swiftEmptyArrayStorage;
    }
    __break(1u);
LABEL_14:
    if (a1 < 0)
      v11 = a1;
    else
      v11 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v11);
    swift_bridgeObjectRelease(a1);
  }
  return result;
}

uint64_t FindOrCreateLocalEpisodeContentIDsIntentImplementation.perform(_:objectGraph:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;

  v2[12] = a1;
  v2[13] = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8C50);
  v4 = (_QWORD *)swift_task_alloc(async function pointer to BaseObjectGraph.inject<A>(_:)[1]);
  v2[14] = v4;
  *v4 = v2;
  v4[1] = sub_2CC7E8;
  return BaseObjectGraph.inject<A>(_:)(v2 + 2, v3, v3);
}

uint64_t sub_2CC7E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 112);
  *(_QWORD *)(*(_QWORD *)v1 + 120) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_2CCCA4;
  else
    v3 = sub_2CC84C;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_2CC84C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  FindOrCreateLocalEpisodeContentIDsIntent.identifiers.getter();
  v1 = Array<A>.popAdamIDs()();
  v3 = v2;
  swift_bridgeObjectRelease();
  v0[16] = v1;
  v0[17] = v3;
  v4 = (_QWORD *)swift_task_alloc(dword_3C78C4);
  v0[18] = v4;
  *v4 = v0;
  v4[1] = sub_2CC8C4;
  return sub_2CCD64(v1);
}

uint64_t sub_2CC8C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *(_QWORD **)v3;
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 144);
  v4[19] = a1;
  v4[20] = a2;
  v4[21] = v2;
  swift_task_dealloc(v5);
  swift_bridgeObjectRelease();
  if (v2)
  {
    swift_bridgeObjectRelease();
    v6 = sub_2CCCB0;
  }
  else
  {
    v6 = sub_2CC94C;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_2CC94C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v0 + 56) = *(_QWORD *)(v0 + 152);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0A90);
  v2 = sub_D47D4();
  v3 = Collection.isNotEmpty.getter(v1, v2);
  v4 = *(_QWORD *)(v0 + 152);
  if ((v3 & 1) != 0)
  {
    v5 = *(_QWORD *)(v0 + 40);
    v6 = *(_QWORD *)(v0 + 48);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 16), v5);
    *(_QWORD *)(v0 + 72) = v4;
    v7 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of IntentDispatcher.dispatch<A>(_:objectGraph:)[1]);
    *(_QWORD *)(v0 + 176) = v7;
    v8 = sub_160C0();
    *v7 = v0;
    v7[1] = sub_2CCA84;
    return dispatch thunk of IntentDispatcher.dispatch<A>(_:objectGraph:)(v0 + 64, v0 + 72, *(_QWORD *)(v0 + 104), &type metadata for FetchEpisodeOffersIntent, v8, v5, v6);
  }
  else
  {
    v10 = *(_QWORD *)(v0 + 160);
    v11 = *(_QWORD *)(v0 + 136);
    swift_bridgeObjectRelease();
    sub_1E4394(v10);
    __swift_destroy_boxed_opaque_existential_1((_QWORD *)(v0 + 16));
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v11);
  }
}

uint64_t sub_2CCA84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 176);
  *(_QWORD *)(*(_QWORD *)v1 + 184) = v0;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease();
  if (v0)
  {
    swift_bridgeObjectRelease();
    v3 = sub_2CCCE4;
  }
  else
  {
    v3 = sub_2CCB04;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_2CCB04()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;

  v1 = v0[8];
  v0[24] = v1;
  v2 = v0[5];
  v3 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v2);
  v0[11] = v1;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of IntentDispatcher.dispatch<A>(_:objectGraph:)[1]);
  v0[25] = v4;
  v5 = sub_CAF08();
  *v4 = v0;
  v4[1] = sub_2CCBB0;
  return dispatch thunk of IntentDispatcher.dispatch<A>(_:objectGraph:)(v0 + 10, v0 + 11, v0[13], &type metadata for FindOrCreateEpisodeOfferContentIDsIntent, v5, v2, v3);
}

uint64_t sub_2CCBB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 200);
  *(_QWORD *)(*(_QWORD *)v1 + 208) = v0;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease();
  if (v0)
  {
    swift_bridgeObjectRelease();
    v3 = sub_2CCD24;
  }
  else
  {
    v3 = sub_2CCC30;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_2CCC30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 136);
  sub_1E4394(*(_QWORD *)(v0 + 160));
  sub_1E4394(v1);
  __swift_destroy_boxed_opaque_existential_1((_QWORD *)(v0 + 16));
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v3);
}

uint64_t sub_2CCCA4()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2CCCB0()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1((_QWORD *)(v0 + 16));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2CCCE4()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((_QWORD *)(v0 + 16));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2CCD24()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((_QWORD *)(v0 + 16));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2CCD64(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1[5] = a1;
  v2 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType(0);
  v1[6] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[7] = v3;
  v1[8] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for TaskPriority(0);
  v1[9] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v1[10] = v5;
  v1[11] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B68D0);
  v7 = (_QWORD *)swift_task_alloc(async function pointer to BaseObjectGraph.inject<A>(_:)[1]);
  v1[12] = v7;
  *v7 = v1;
  v7[1] = sub_2CCE30;
  return BaseObjectGraph.inject<A>(_:)(v1 + 4, v6, v6);
}

uint64_t sub_2CCE30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 96);
  *(_QWORD *)(*(_QWORD *)v1 + 104) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_2CD498;
  else
    v3 = sub_2CCE94;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_2CCE94()
{
  _QWORD *v0;
  uint64_t ObjectType;
  _QWORD *v2;

  v0[14] = v0[4];
  ObjectType = swift_getObjectType();
  j___sScTss5NeverORszABRs_rlE15currentPriorityScPvgZ();
  v2 = (_QWORD *)swift_task_alloc(async function pointer to NSManagedObjectContextProvider.managedObjectContext(for:)[1]);
  v0[15] = v2;
  *v2 = v0;
  v2[1] = sub_2CCF14;
  return NSManagedObjectContextProvider.managedObjectContext(for:)(v0[11], ObjectType);
}

uint64_t sub_2CCF14(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 112);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 120);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  v6 = *(_QWORD *)(*(_QWORD *)v1 + 72);
  *(_QWORD *)(*(_QWORD *)v1 + 128) = a1;
  swift_task_dealloc(v2);
  swift_unknownObjectRelease(v3);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  return swift_task_switch(sub_2CCF98, 0, 0);
}

uint64_t sub_2CCF98()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  _QWORD *v17;
  uint64_t v18;

  v1 = v0[5];
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    specialized ContiguousArray.reserveCapacity(_:)(v2);
    v3 = (uint64_t *)(v1 + 32);
    do
    {
      v4 = *v3++;
      v5 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithUnsignedLongLong:", v4);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v5);
      v6 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v6);
      v7 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v6, v5);
      specialized ContiguousArray._endMutation()(v7);
      --v2;
    }
    while (v2);
  }
  v8 = (void *)v0[16];
  v10 = v0[7];
  v9 = v0[8];
  v11 = v0[6];
  v12 = sub_2CF62C((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease();
  v13 = swift_allocObject(&unk_38FCC0, 32, 7);
  *(_QWORD *)(v13 + 16) = v12;
  *(_QWORD *)(v13 + 24) = v8;
  v14 = swift_allocObject(&unk_38FCE8, 32, 7);
  v0[17] = v14;
  *(_QWORD *)(v14 + 16) = sub_2CF7B0;
  *(_QWORD *)(v14 + 24) = v13;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v10 + 104))(v9, enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:), v11);
  v15 = async function pointer to NSManagedObjectContext.perform<A>(schedule:_:)[1];
  v16 = v8;
  v17 = (_QWORD *)swift_task_alloc(v15);
  v0[18] = v17;
  v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3C7900);
  *v17 = v0;
  v17[1] = sub_2CD13C;
  return NSManagedObjectContext.perform<A>(schedule:_:)(v0 + 2, v0[8], sub_296EB0, v14, v18);
}

uint64_t sub_2CD13C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 144);
  *(_QWORD *)(*(_QWORD *)v1 + 152) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(_QWORD, _QWORD))(v2[7] + 8))(v2[8], v2[6]);
  swift_release();
  if (v0)
    v4 = sub_2CD4D8;
  else
    v4 = sub_2CD1C4;
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_2CD1C4()
{
  uint64_t v0;
  uint64_t v1;
  int64_t v2;
  uint64_t i;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(v0 + 16);
  v25 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    sub_180848(0, v2, 0);
    for (i = 0; i != v2; ++i)
    {
      v4 = AdamID.init(rawValue:)(*(_QWORD *)(v1 + 8 * i + 32) & ~(*(uint64_t *)(v1 + 8 * i + 32) >> 63));
      v6 = _swiftEmptyArrayStorage[2];
      v5 = _swiftEmptyArrayStorage[3];
      if (v6 >= v5 >> 1)
        sub_180848(v5 > 1, v6 + 1, 1);
      _swiftEmptyArrayStorage[2] = v6 + 1;
      _swiftEmptyArrayStorage[v6 + 4] = v4;
    }
  }
  swift_bridgeObjectRelease();
  v7 = sub_2CF5BC((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease();
  if ((unint64_t)v25 >> 62)
  {
    if (v25 < 0)
      v17 = v25;
    else
      v17 = v25 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v8 = _CocoaArrayWrapper.endIndex.getter(v17);
    swift_bridgeObjectRelease();
    if (v8)
      goto LABEL_8;
LABEL_21:
    swift_bridgeObjectRelease();
    goto LABEL_22;
  }
  v8 = *(_QWORD *)((char *)&dword_10 + (v25 & 0xFFFFFFFFFFFFF8));
  if (!v8)
    goto LABEL_21;
LABEL_8:
  result = sub_1808DC(0, v8 & ~(v8 >> 63), 0);
  if (v8 < 0)
  {
    __break(1u);
    return result;
  }
  v24 = v0;
  v10 = 0;
  v11 = v25;
  do
  {
    if ((v25 & 0xC000000000000001) != 0)
      v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v10);
    else
      v12 = *(id *)(v11 + 8 * v10 + 32);
    v13 = v12;
    v15 = _swiftEmptyArrayStorage[2];
    v14 = _swiftEmptyArrayStorage[3];
    if (v15 >= v14 >> 1)
    {
      sub_1808DC(v14 > 1, v15 + 1, 1);
      v11 = v25;
    }
    ++v10;
    _swiftEmptyArrayStorage[2] = v15 + 1;
    v16 = &_swiftEmptyArrayStorage[3 * v15];
    v16[4] = v13;
    v16[5] = 0;
    *((_BYTE *)v16 + 48) = 2;
  }
  while (v8 != v10);
  swift_bridgeObjectRelease();
  v0 = v24;
LABEL_22:
  v18 = swift_bridgeObjectRetain();
  v19 = sub_2CF5BC(v18);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v7 + 16) <= *(_QWORD *)(v19 + 16) >> 3)
    sub_2CEAF8(v7);
  else
    v19 = (uint64_t)sub_2CEC58(v7, v19);
  swift_bridgeObjectRelease();
  v20 = *(void **)(v0 + 128);
  v21 = *(_QWORD *)(v0 + 88);
  v22 = *(_QWORD *)(v0 + 64);
  v23 = sub_1FC0F4(v19);
  swift_bridgeObjectRelease();

  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(_QWORD *, _QWORD *))(v0 + 8))(v23, _swiftEmptyArrayStorage);
}

uint64_t sub_2CD498()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2CD4D8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_2CD524()
{
  unint64_t result;

  result = qword_3C3240;
  if (!qword_3C3240)
  {
    type metadata accessor for FindOrCreateLocalEpisodeContentIDsIntent(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for FindOrCreateLocalEpisodeContentIDsIntent);
    atomic_store(result, (unint64_t *)&qword_3C3240);
  }
  return result;
}

_QWORD *sub_2CD56C()
{
  _QWORD *v0;
  _QWORD *v1;
  id v2;
  NSString v3;
  id v4;
  void *v5;
  Class isa;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = v0;
  static String._unconditionallyBridgeFromObjectiveC(_:)(kMTEpisodeEntityName);
  v2 = objc_allocWithZone((Class)NSFetchRequest);
  v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v4 = objc_msgSend(v2, "initWithEntityName:", v3);

  v5 = (void *)objc_opt_self(MTEpisode);
  sub_327F8(0, (unint64_t *)&qword_3C7F30, NSNumber_ptr);
  sub_2CF7EC();
  isa = Set._bridgeToObjectiveC()().super.isa;
  v7 = objc_msgSend(v5, "predicateForEpisodeStoreTrackIds:", isa);

  objc_msgSend(v4, "setPredicate:", v7);
  v8 = sub_327F8(0, (unint64_t *)&qword_3B7988, MTEpisode_ptr);
  v9 = NSManagedObjectContext.fetch<A>(_:)(v4, v8);
  if (!v0)
  {
    v10 = v9;
    v1 = sub_2CC4CC(v9);
    sub_2CC62C(v10);
    swift_bridgeObjectRelease();
  }

  return v1;
}

uint64_t sub_2CD704(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;

  *(_QWORD *)(v3 + 16) = a1;
  v6 = (_QWORD *)swift_task_alloc(dword_3C78B4);
  *(_QWORD *)(v3 + 24) = v6;
  *v6 = v3;
  v6[1] = sub_81DB0;
  return FindOrCreateLocalEpisodeContentIDsIntentImplementation.perform(_:objectGraph:)(a2, a3);
}

ValueMetadata *type metadata accessor for FindOrCreateLocalEpisodeContentIDsIntentImplementation()
{
  return &type metadata for FindOrCreateLocalEpisodeContentIDsIntentImplementation;
}

void *sub_2CD76C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  uint64_t v10;
  unint64_t v11;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t *v25;

  v1 = v0;
  v2 = type metadata accessor for MetricsFieldInclusionRequest(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_3C7950);
  v6 = *v0;
  v7 = static _SetStorage.copy(original:)(*v0);
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = (void *)swift_release(v6);
LABEL_30:
    *v1 = v8;
    return result;
  }
  v25 = v1;
  result = (void *)(v7 + 56);
  v10 = v6 + 56;
  v11 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 56 + 8 * v11)
    result = memmove(result, (const void *)(v6 + 56), 8 * v11);
  v13 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v14 = 1 << *(_BYTE *)(v6 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v6 + 56);
  v17 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v19 = v18 | (v13 << 6);
      goto LABEL_12;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v21 >= v17)
      goto LABEL_28;
    v22 = *(_QWORD *)(v10 + 8 * v21);
    ++v13;
    if (!v22)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v17)
        goto LABEL_28;
      v22 = *(_QWORD *)(v10 + 8 * v13);
      if (!v22)
      {
        v13 = v21 + 2;
        if (v21 + 2 >= v17)
          goto LABEL_28;
        v22 = *(_QWORD *)(v10 + 8 * v13);
        if (!v22)
          break;
      }
    }
LABEL_27:
    v16 = (v22 - 1) & v22;
    v19 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_12:
    v20 = *(_QWORD *)(v3 + 72) * v19;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(_QWORD *)(v6 + 48) + v20, v2);
    result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v8 + 48) + v20, v5, v2);
  }
  v23 = v21 + 3;
  if (v23 >= v17)
  {
LABEL_28:
    result = (void *)swift_release(v6);
    v1 = v25;
    goto LABEL_30;
  }
  v22 = *(_QWORD *)(v10 + 8 * v23);
  if (v22)
  {
    v13 = v23;
    goto LABEL_27;
  }
  while (1)
  {
    v13 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v13 >= v17)
      goto LABEL_28;
    v22 = *(_QWORD *)(v10 + 8 * v13);
    ++v23;
    if (v22)
      goto LABEL_27;
  }
LABEL_32:
  __break(1u);
  return result;
}

void *sub_2CD990()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_3B60A0);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    result = (void *)swift_bridgeObjectRetain(v18);
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_2CDB40()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_3B60C0);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_2CDCD4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_3B60A8);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_2CDE68()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_3B6098);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_2CDFFC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3C7940);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    result = (void *)swift_retain();
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

id sub_2CE1A4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3C7930);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_28;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
      {
        v9 = v18 + 2;
        if (v18 + 2 >= v13)
          goto LABEL_28;
        v19 = *(_QWORD *)(v6 + 8 * v9);
        if (!v19)
          break;
      }
    }
LABEL_27:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    result = v17;
  }
  v20 = v18 + 3;
  if (v20 >= v13)
    goto LABEL_28;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

Swift::Int sub_2CE34C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  Swift::Int result;
  _BYTE *v9;
  unint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  Swift::UInt64 v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  unint64_t *v28;
  uint64_t v29[9];

  v4 = a4;
  if (!a3)
  {
    v9 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release(v4);
    return (Swift::Int)v9;
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_3B6098);
  result = static _SetStorage.allocate(capacity:)(v5);
  v9 = (_BYTE *)result;
  v28 = a1;
  if (a2 < 1)
    v10 = 0;
  else
    v10 = *a1;
  v11 = 0;
  v12 = result + 56;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    v15 = v11 + 1;
    if (__OFADD__(v11, 1))
      goto LABEL_39;
    if (v15 >= a2)
      goto LABEL_36;
    v16 = v28[v15];
    ++v11;
    if (!v16)
    {
      v11 = v15 + 1;
      if (v15 + 1 >= a2)
        goto LABEL_36;
      v16 = v28[v11];
      if (!v16)
      {
        v11 = v15 + 2;
        if (v15 + 2 >= a2)
          goto LABEL_36;
        v16 = v28[v11];
        if (!v16)
          break;
      }
    }
LABEL_23:
    v10 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    v18 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v14);
    Hasher.init(_seed:)(v29);
    Hasher._combine(_:)(v18);
    result = Hasher._finalize()();
    v19 = -1 << v9[32];
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v12 + 8 * (v20 >> 6))) != 0)
    {
      v22 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v12 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v23 = 0;
      v24 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v25 = v21 == v24;
        if (v21 == v24)
          v21 = 0;
        v23 |= v25;
        v26 = *(_QWORD *)(v12 + 8 * v21);
      }
      while (v26 == -1);
      v22 = __clz(__rbit64(~v26)) + (v21 << 6);
    }
    *(_QWORD *)(v12 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    *(_QWORD *)(*((_QWORD *)v9 + 6) + 8 * v22) = v18;
    ++*((_QWORD *)v9 + 2);
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5)
      goto LABEL_36;
  }
  v17 = v15 + 3;
  if (v17 >= a2)
    goto LABEL_36;
  v16 = v28[v17];
  if (v16)
  {
    v11 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v11 >= a2)
      goto LABEL_36;
    v16 = v28[v11];
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

Swift::Int sub_2CE5B4(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  Swift::Int result;
  _BYTE *v9;
  unint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  unint64_t *v33;
  uint64_t v34;
  _QWORD v35[9];

  v4 = a4;
  if (!a3)
  {
    v9 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release(v4);
    return (Swift::Int)v9;
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v4;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3C7940);
  result = static _SetStorage.allocate(capacity:)(v5);
  v9 = (_BYTE *)result;
  v33 = a1;
  v34 = a2;
  if (a2 < 1)
    v10 = 0;
  else
    v10 = *a1;
  v11 = 0;
  v12 = result + 56;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    v15 = v11 + 1;
    if (__OFADD__(v11, 1))
      goto LABEL_39;
    if (v15 >= v34)
      goto LABEL_36;
    v16 = v33[v15];
    ++v11;
    if (!v16)
    {
      v11 = v15 + 1;
      if (v15 + 1 >= v34)
        goto LABEL_36;
      v16 = v33[v11];
      if (!v16)
      {
        v11 = v15 + 2;
        if (v15 + 2 >= v34)
          goto LABEL_36;
        v16 = v33[v11];
        if (!v16)
          break;
      }
    }
LABEL_23:
    v10 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    v18 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v14);
    Hasher.init(_seed:)(v35);
    v19 = *(void **)(v18 + 32);
    swift_retain();
    v20 = objc_msgSend(v19, "identifier");
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v23 = v22;

    String.hash(into:)(v35, v21, v23);
    swift_bridgeObjectRelease();
    result = Hasher._finalize()();
    v24 = -1 << v9[32];
    v25 = result & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v12 + 8 * (v25 >> 6))) != 0)
    {
      v27 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v12 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v30 = v26 == v29;
        if (v26 == v29)
          v26 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v12 + 8 * v26);
      }
      while (v31 == -1);
      v27 = __clz(__rbit64(~v31)) + (v26 << 6);
    }
    *(_QWORD *)(v12 + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v27;
    *(_QWORD *)(*((_QWORD *)v9 + 6) + 8 * v27) = v18;
    ++*((_QWORD *)v9 + 2);
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5)
      goto LABEL_36;
  }
  v17 = v15 + 3;
  if (v17 >= v34)
    goto LABEL_36;
  v16 = v33[v17];
  if (v16)
  {
    v11 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v11 >= v34)
      goto LABEL_36;
    v16 = v33[v11];
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

Swift::Int sub_2CE864(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  Swift::Int result;
  _BYTE *v8;
  unint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v30;
  _QWORD v32[9];

  v4 = a4;
  if (!a3)
  {
    v8 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release(v4);
    return (Swift::Int)v8;
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_3B60A0);
  result = static _SetStorage.allocate(capacity:)(v5);
  v8 = (_BYTE *)result;
  v30 = a2;
  if (a2 < 1)
    v9 = 0;
  else
    v9 = *a1;
  v10 = 0;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    v14 = v10 + 1;
    if (__OFADD__(v10, 1))
      goto LABEL_39;
    if (v14 >= v30)
      goto LABEL_36;
    v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      v10 = v14 + 1;
      if (v14 + 1 >= v30)
        goto LABEL_36;
      v15 = a1[v10];
      if (!v15)
      {
        v10 = v14 + 2;
        if (v14 + 2 >= v30)
          goto LABEL_36;
        v15 = a1[v10];
        if (!v15)
          break;
      }
    }
LABEL_23:
    v9 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    v17 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v13);
    v18 = *v17;
    v19 = v17[1];
    Hasher.init(_seed:)(v32);
    swift_bridgeObjectRetain();
    String.hash(into:)(v32, v18, v19);
    result = Hasher._finalize()();
    v20 = -1 << v8[32];
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6))) != 0)
    {
      v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v26 = v22 == v25;
        if (v22 == v25)
          v22 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v11 + 8 * v22);
      }
      while (v27 == -1);
      v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(_QWORD *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    v28 = (_QWORD *)(*((_QWORD *)v8 + 6) + 16 * v23);
    *v28 = v18;
    v28[1] = v19;
    ++*((_QWORD *)v8 + 2);
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5)
      goto LABEL_36;
  }
  v16 = v14 + 3;
  if (v16 >= v30)
    goto LABEL_36;
  v15 = a1[v16];
  if (v15)
  {
    v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    v10 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v10 >= v30)
      goto LABEL_36;
    v15 = a1[v10];
    ++v16;
    if (v15)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_2CEAF8(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;

  if (!*(_QWORD *)(*(_QWORD *)v1 + 16))
    return result;
  v2 = result;
  v3 = result + 56;
  v4 = 1 << *(_BYTE *)(result + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(result + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v8 = 0;
  while (1)
  {
    if (v6)
    {
      v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v10 = v9 | (v8 << 6);
      goto LABEL_6;
    }
    v11 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v11 >= v7)
      return swift_release(v2);
    v12 = *(_QWORD *)(v3 + 8 * v11);
    ++v8;
    if (!v12)
    {
      v8 = v11 + 1;
      if (v11 + 1 >= v7)
        return swift_release(v2);
      v12 = *(_QWORD *)(v3 + 8 * v8);
      if (!v12)
      {
        v8 = v11 + 2;
        if (v11 + 2 >= v7)
          return swift_release(v2);
        v12 = *(_QWORD *)(v3 + 8 * v8);
        if (!v12)
        {
          v8 = v11 + 3;
          if (v11 + 3 >= v7)
            return swift_release(v2);
          v12 = *(_QWORD *)(v3 + 8 * v8);
          if (!v12)
            break;
        }
      }
    }
LABEL_23:
    v6 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v8 << 6);
LABEL_6:
    result = sub_2CF000(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v10));
  }
  v13 = v11 + 4;
  if (v13 >= v7)
    return swift_release(v2);
  v12 = *(_QWORD *)(v3 + 8 * v13);
  if (v12)
  {
    v8 = v13;
    goto LABEL_23;
  }
  while (1)
  {
    v8 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v8 >= v7)
      return swift_release(v2);
    v12 = *(_QWORD *)(v3 + 8 * v8);
    ++v13;
    if (v12)
      goto LABEL_23;
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_2CEC58(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  Swift::UInt64 v18;
  Swift::Int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  size_t v24;
  uint64_t isStackAllocationSafe;
  uint64_t v26;
  char *v27;
  Swift::Int v28;
  void *v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34[9];
  uint64_t v35[5];

  v2 = a2;
  if (*(_QWORD *)(a2 + 16))
  {
    v4 = 0;
    v6 = a1 + 56;
    v5 = *(_QWORD *)(a1 + 56);
    v7 = -1 << *(_BYTE *)(a1 + 32);
    v33 = ~v7;
    if (-v7 < 64)
      v8 = ~(-1 << -(char)v7);
    else
      v8 = -1;
    v9 = v8 & v5;
    v10 = (unint64_t)(63 - v7) >> 6;
    v11 = a2 + 56;
    while (1)
    {
      do
      {
        if (v9)
        {
          v12 = __clz(__rbit64(v9));
          v9 &= v9 - 1;
          v13 = v12 | (v4 << 6);
        }
        else
        {
          v14 = v4 + 1;
          if (__OFADD__(v4, 1))
          {
            __break(1u);
            goto LABEL_37;
          }
          if (v14 >= v10)
            goto LABEL_35;
          v15 = *(_QWORD *)(v6 + 8 * v14);
          v16 = v4 + 1;
          if (!v15)
          {
            v16 = v4 + 2;
            if (v4 + 2 >= v10)
              goto LABEL_35;
            v15 = *(_QWORD *)(v6 + 8 * v16);
            if (!v15)
            {
              v16 = v4 + 3;
              if (v4 + 3 >= v10)
                goto LABEL_35;
              v15 = *(_QWORD *)(v6 + 8 * v16);
              if (!v15)
              {
                v16 = v4 + 4;
                if (v4 + 4 >= v10)
                  goto LABEL_35;
                v15 = *(_QWORD *)(v6 + 8 * v16);
                if (!v15)
                {
                  v17 = v4 + 5;
                  if (v4 + 5 >= v10)
                  {
LABEL_35:
                    v31 = swift_bridgeObjectRetain();
                    sub_15498(v31);
                    return (void *)v2;
                  }
                  v15 = *(_QWORD *)(v6 + 8 * v17);
                  if (!v15)
                  {
                    while (1)
                    {
                      v16 = v17 + 1;
                      if (__OFADD__(v17, 1))
                        break;
                      if (v16 >= v10)
                        goto LABEL_35;
                      v15 = *(_QWORD *)(v6 + 8 * v16);
                      ++v17;
                      if (v15)
                        goto LABEL_23;
                    }
LABEL_37:
                    __break(1u);
                  }
                  v16 = v4 + 5;
                }
              }
            }
          }
LABEL_23:
          v9 = (v15 - 1) & v15;
          v13 = __clz(__rbit64(v15)) + (v16 << 6);
          v4 = v16;
        }
        v18 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v13);
        Hasher.init(_seed:)(v34);
        Hasher._combine(_:)(v18);
        v19 = Hasher._finalize()();
        v20 = -1 << *(_BYTE *)(v2 + 32);
        v21 = v19 & ~v20;
      }
      while (((*(_QWORD *)(v11 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) == 0);
      v22 = *(_QWORD *)(v2 + 48);
      if (*(_QWORD *)(v22 + 8 * v21) == v18)
        break;
      while (1)
      {
        v21 = (v21 + 1) & ~v20;
        if (((*(_QWORD *)(v11 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) == 0)
          break;
        if (*(_QWORD *)(v22 + 8 * v21) == v18)
          goto LABEL_28;
      }
    }
LABEL_28:
    v35[0] = a1;
    v35[1] = v6;
    v35[2] = v33;
    v35[3] = v4;
    v35[4] = v9;
    v23 = (unint64_t)(63 - v20) >> 6;
    v24 = 8 * v23;
    isStackAllocationSafe = swift_bridgeObjectRetain();
    if (v23 < 0x81
      || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(v24, 8), (_DWORD)isStackAllocationSafe))
    {
      __chkstk_darwin(isStackAllocationSafe);
      v27 = (char *)&v32 - v26;
      memcpy((char *)&v32 - v26, (const void *)(v2 + 56), v24);
      v28 = sub_2CF124((Swift::Int)v27, v23, v2, v21, v35);
      swift_release(v2);
      sub_15498(v35[0]);
    }
    else
    {
      v29 = (void *)swift_slowAlloc(v24, -1);
      memcpy(v29, (const void *)(v2 + 56), v24);
      v28 = sub_2CF124((Swift::Int)v29, v23, v2, v21, v35);
      swift_release(v2);
      sub_15498(v35[0]);
      swift_slowDealloc(v29, -1, -1);
    }
    return (void *)v28;
  }
  else
  {
    swift_release(a2);
    return &_swiftEmptySetSingleton;
  }
}

uint64_t sub_2CF000(Swift::UInt64 a1)
{
  _QWORD *v1;
  uint64_t v3;
  Swift::Int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[9];

  v3 = *v1;
  Hasher.init(_seed:)(v13);
  Hasher._combine(_:)(a1);
  v4 = Hasher._finalize()();
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = v4 & ~v5;
  if (((*(_QWORD *)(v3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
    return 0;
  v7 = *(_QWORD *)(v3 + 48);
  if (*(_QWORD *)(v7 + 8 * v6) != a1)
  {
    v8 = ~v5;
    do
    {
      v6 = (v6 + 1) & v8;
      if (((*(_QWORD *)(v3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
        return 0;
    }
    while (*(_QWORD *)(v7 + 8 * v6) != a1);
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  v10 = *v1;
  v13[0] = *v1;
  *v1 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_2CDE68();
    v10 = v13[0];
  }
  v11 = *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * v6);
  sub_2CF380(v6);
  *v1 = v13[0];
  swift_bridgeObjectRelease();
  return v11;
}

Swift::Int sub_2CF124(Swift::Int result, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  unint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  int64_t v20;
  int64_t v21;
  uint64_t v22;
  unint64_t v23;
  int64_t v24;
  Swift::UInt64 v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t i;
  unint64_t v30;
  uint64_t v33[9];

  v7 = (unint64_t *)result;
  v8 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  v9 = v8 - 1;
  v10 = a3 + 56;
  while (1)
  {
    v15 = a5[3];
    v16 = a5[4];
    if (!v16)
      break;
    v17 = (v16 - 1) & v16;
    v18 = __clz(__rbit64(v16)) | (v15 << 6);
LABEL_22:
    v25 = *(_QWORD *)(*(_QWORD *)(*a5 + 48) + 8 * v18);
    a5[3] = v15;
    a5[4] = v17;
    Hasher.init(_seed:)(v33);
    Hasher._combine(_:)(v25);
    result = Hasher._finalize()();
    v26 = -1 << *(_BYTE *)(a3 + 32);
    v27 = result & ~v26;
    v11 = v27 >> 6;
    v12 = 1 << v27;
    if (((1 << v27) & *(_QWORD *)(v10 + 8 * (v27 >> 6))) != 0)
    {
      v28 = *(_QWORD *)(a3 + 48);
      if (*(_QWORD *)(v28 + 8 * v27) == v25)
      {
LABEL_3:
        v13 = v11;
        v14 = v7[v11];
        v7[v13] = v14 & ~v12;
        if ((v12 & v14) != 0)
        {
          if (__OFSUB__(v9--, 1))
            goto LABEL_34;
          if (!v9)
            return (Swift::Int)&_swiftEmptySetSingleton;
        }
      }
      else
      {
        for (i = v27 + 1; ; i = v30 + 1)
        {
          v30 = i & ~v26;
          if (((*(_QWORD *)(v10 + ((v30 >> 3) & 0xFFFFFFFFFFFFF8)) >> v30) & 1) == 0)
            break;
          if (*(_QWORD *)(v28 + 8 * v30) == v25)
          {
            v11 = v30 >> 6;
            v12 = 1 << v30;
            goto LABEL_3;
          }
        }
      }
    }
  }
  v19 = v15 + 1;
  if (!__OFADD__(v15, 1))
  {
    v20 = (unint64_t)(a5[2] + 64) >> 6;
    v21 = a5[3];
    if (v19 >= v20)
      goto LABEL_31;
    v22 = a5[1];
    v23 = *(_QWORD *)(v22 + 8 * v19);
    if (!v23)
    {
      v21 = v15 + 1;
      if (v15 + 2 >= v20)
        goto LABEL_31;
      v23 = *(_QWORD *)(v22 + 8 * (v15 + 2));
      if (v23)
      {
        v19 = v15 + 2;
      }
      else
      {
        v21 = v15 + 2;
        if (v15 + 3 >= v20)
          goto LABEL_31;
        v23 = *(_QWORD *)(v22 + 8 * (v15 + 3));
        if (v23)
        {
          v19 = v15 + 3;
        }
        else
        {
          v19 = v15 + 4;
          v21 = v15 + 3;
          if (v15 + 4 >= v20)
            goto LABEL_31;
          v23 = *(_QWORD *)(v22 + 8 * v19);
          if (!v23)
          {
            v21 = v20 - 1;
            v24 = v15 + 5;
            while (v20 != v24)
            {
              v23 = *(_QWORD *)(v22 + 8 * v24++);
              if (v23)
              {
                v19 = v24 - 1;
                goto LABEL_21;
              }
            }
LABEL_31:
            a5[3] = v21;
            a5[4] = 0;
            swift_retain();
            return sub_2CE34C(v7, a2, v9, a3);
          }
        }
      }
    }
LABEL_21:
    v17 = (v23 - 1) & v23;
    v18 = __clz(__rbit64(v23)) + (v19 << 6);
    v15 = v19;
    goto LABEL_22;
  }
  __break(1u);
LABEL_34:
  __break(1u);
  return result;
}

unint64_t sub_2CF380(unint64_t result)
{
  _QWORD *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::UInt64 v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  _QWORD v18[9];

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain(*v1);
    v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v6);
        Hasher.init(_seed:)(v18);
        Hasher._combine(_:)(v10);
        v11 = Hasher._finalize()() & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v11 < v9)
            goto LABEL_5;
        }
        else if (v11 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v11)
        {
LABEL_11:
          v12 = *(_QWORD *)(v3 + 48);
          v13 = (_QWORD *)(v12 + 8 * v2);
          v14 = (_QWORD *)(v12 + 8 * v6);
          if (v2 != v6 || (v2 = v6, v13 >= v14 + 1))
          {
            *v13 = *v14;
            v2 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release(v3);
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v15 = *(_QWORD *)(v3 + 16);
  v16 = __OFSUB__(v15, 1);
  v17 = v15 - 1;
  if (v16)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v17;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t sub_2CF528(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7[2];
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  result = Set.init(minimumCapacity:)(v2, &type metadata for String, &protocol witness table for String);
  v8 = result;
  if (v2)
  {
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      swift_bridgeObjectRetain(*v4);
      sub_9BFD0(v7, v5, v6);
      swift_bridgeObjectRelease(v7[1]);
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_2CF5BC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t result;
  Swift::UInt64 *v5;
  Swift::UInt64 v6;
  Swift::UInt64 v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = sub_136858();
  result = Set.init(minimumCapacity:)(v2, &type metadata for AdamID, v3);
  v8 = result;
  if (v2)
  {
    v5 = (Swift::UInt64 *)(a1 + 32);
    do
    {
      v6 = *v5++;
      sub_9C390(&v7, v6);
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_2CF62C(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  void **v11;
  void *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;

  v2 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v13 = a1;
    else
      v13 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v3 = _CocoaArrayWrapper.endIndex.getter(v13);
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = *(_QWORD *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8));
  }
  v4 = sub_327F8(0, (unint64_t *)&qword_3C7F30, NSNumber_ptr);
  v5 = sub_2CF7EC();
  result = Set.init(minimumCapacity:)(v3, v4, v5);
  v15 = result;
  if (v2)
  {
    if (a1 < 0)
      v8 = a1;
    else
      v8 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter(v8);
    result = swift_bridgeObjectRelease();
    if (!v7)
      return v15;
  }
  else
  {
    v7 = *(_QWORD *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8));
    if (!v7)
      return v15;
  }
  if (v7 >= 1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v7; ++i)
      {
        v10 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(i);
        sub_9C828((Swift::Int *)&v14, v10);

      }
    }
    else
    {
      v11 = (void **)(a1 + 32);
      do
      {
        v12 = *v11++;
        sub_9C828((Swift::Int *)&v14, v12);

        --v7;
      }
      while (v7);
    }
    return v15;
  }
  __break(1u);
  return result;
}

uint64_t sub_2CF784()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

_QWORD *sub_2CF7B0()
{
  return sub_2CD56C();
}

uint64_t sub_2CF7C8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

unint64_t sub_2CF7EC()
{
  unint64_t result;

  result = qword_3C7920;
  if (!qword_3C7920)
  {
    sub_327F8(255, (unint64_t *)&qword_3C7F30, NSNumber_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject);
    atomic_store(result, (unint64_t *)&qword_3C7920);
  }
  return result;
}

uint64_t RecentlySearchedHeader.init(impressionMetrics:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  *a2 = 0xD000000000000018;
  a2[1] = 0x800000000030E0C0;
  v3 = (uint64_t)a2 + *(int *)(type metadata accessor for RecentlySearchedHeader(0) + 20);
  return sub_23AB8(a1, v3);
}

uint64_t type metadata accessor for RecentlySearchedHeader(uint64_t a1)
{
  uint64_t result;

  result = qword_3C79B8;
  if (!qword_3C79B8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RecentlySearchedHeader);
  return result;
}

uint64_t RecentlySearchedHeader.impressionMetrics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for RecentlySearchedHeader(0) + 20);
  return sub_23A70(v3, a1);
}

unint64_t sub_2CF900(uint64_t a1)
{
  unint64_t result;

  result = sub_2CF924();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_2CF924()
{
  unint64_t result;

  result = qword_3C7958;
  if (!qword_3C7958)
  {
    type metadata accessor for RecentlySearchedHeader(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for RecentlySearchedHeader);
    atomic_store(result, (unint64_t *)&qword_3C7958);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for RecentlySearchedHeader(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_2CF978);
}

uint64_t sub_2CF978(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for RecentlySearchedHeader(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_2CFA04);
}

uint64_t sub_2CFA04(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

void sub_2CFA7C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_3066D8;
  sub_34090(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
  }
}

uint64_t ChannelDetail.uberArtwork.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_14554(v1 + OBJC_IVAR____TtC8ShelfKit13ChannelDetail_uberArtwork, a1);
}

uint64_t ChannelDetail.logoArtwork.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_14554(v1 + OBJC_IVAR____TtC8ShelfKit13ChannelDetail_logoArtwork, a1);
}

uint64_t ChannelDetail.iconArtwork.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_14554(v1 + OBJC_IVAR____TtC8ShelfKit13ChannelDetail_iconArtwork, a1);
}

void *ChannelDetail.backgroundColor.getter()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC8ShelfKit13ChannelDetail_backgroundColor);
  sub_C5CB0(v1, *(_BYTE *)(v0 + OBJC_IVAR____TtC8ShelfKit13ChannelDetail_backgroundColor + 8));
  return v1;
}

uint64_t sub_2CFB6C()
{
  uint64_t v0;
  uint64_t result;

  result = *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit13ChannelDetail_availableShowCount);
  if (result <= 0)
    return *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit13ChannelDetail_showCount);
  return result;
}

BOOL sub_2CFB94()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit13ChannelDetail_availableShowCount);
  if (v1 <= 0)
    v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit13ChannelDetail_showCount);
  return v1 > 1;
}

BOOL sub_2CFBC0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit13ChannelDetail_availableShowCount);
  if (v1 <= 0)
    v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit13ChannelDetail_showCount);
  return v1 < 2;
}

uint64_t ChannelDetail.__allocating_init(adamId:title:subtitle:displayType:uberArtwork:logoArtwork:iconArtwork:backgroundColor:showCount:availableShowCount:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  char v19;
  uint64_t v20;

  v19 = a2 & 1;
  v20 = swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  ChannelDetail.init(adamId:title:subtitle:displayType:uberArtwork:logoArtwork:iconArtwork:backgroundColor:showCount:availableShowCount:)(a1, v19, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
  return v20;
}

uint64_t ChannelDetail.init(adamId:title:subtitle:displayType:uberArtwork:logoArtwork:iconArtwork:backgroundColor:showCount:availableShowCount:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  uint64_t v21;

  if ((a2 & 1) != 0)
    a1 = static AdamID.empty.getter(a1);
  *(_QWORD *)(v14 + 16) = a1;
  *(_QWORD *)(v14 + 24) = a3;
  *(_QWORD *)(v14 + 32) = a4;
  *(_QWORD *)(v14 + 40) = a5;
  *(_QWORD *)(v14 + 48) = a6;
  *(_BYTE *)(v14 + 56) = a7;
  sub_58F4C(a8, v14 + OBJC_IVAR____TtC8ShelfKit13ChannelDetail_uberArtwork);
  sub_58F4C(a9, v14 + OBJC_IVAR____TtC8ShelfKit13ChannelDetail_logoArtwork);
  sub_58F4C(a10, v14 + OBJC_IVAR____TtC8ShelfKit13ChannelDetail_iconArtwork);
  v21 = v14 + OBJC_IVAR____TtC8ShelfKit13ChannelDetail_backgroundColor;
  *(_QWORD *)v21 = a11;
  *(_BYTE *)(v21 + 8) = a12;
  *(_QWORD *)(v14 + OBJC_IVAR____TtC8ShelfKit13ChannelDetail_showCount) = a13;
  *(_QWORD *)(v14 + OBJC_IVAR____TtC8ShelfKit13ChannelDetail_availableShowCount) = a14;
  return v14;
}

uint64_t ChannelDetail.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_59040(v0 + OBJC_IVAR____TtC8ShelfKit13ChannelDetail_uberArtwork);
  sub_59040(v0 + OBJC_IVAR____TtC8ShelfKit13ChannelDetail_logoArtwork);
  sub_59040(v0 + OBJC_IVAR____TtC8ShelfKit13ChannelDetail_iconArtwork);
  sub_C5CC4(*(id *)(v0 + OBJC_IVAR____TtC8ShelfKit13ChannelDetail_backgroundColor), *(_BYTE *)(v0 + OBJC_IVAR____TtC8ShelfKit13ChannelDetail_backgroundColor + 8));
  return v0;
}

uint64_t ChannelDetail.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_59040(v0 + OBJC_IVAR____TtC8ShelfKit13ChannelDetail_uberArtwork);
  sub_59040(v0 + OBJC_IVAR____TtC8ShelfKit13ChannelDetail_logoArtwork);
  sub_59040(v0 + OBJC_IVAR____TtC8ShelfKit13ChannelDetail_iconArtwork);
  sub_C5CC4(*(id *)(v0 + OBJC_IVAR____TtC8ShelfKit13ChannelDetail_backgroundColor), *(_BYTE *)(v0 + OBJC_IVAR____TtC8ShelfKit13ChannelDetail_backgroundColor + 8));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_2CFE9C()
{
  return type metadata accessor for ChannelDetail(0);
}

uint64_t type metadata accessor for ChannelDetail(uint64_t a1)
{
  uint64_t result;

  result = qword_3C7A28;
  if (!qword_3C7A28)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ChannelDetail);
  return result;
}

void sub_2CFEE0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[4];
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  char *v9;
  char *v10;

  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[1] = &unk_306750;
  v4[2] = &unk_306750;
  v4[3] = &unk_306768;
  sub_5971C(319);
  if (v3 <= 0x3F)
  {
    v5 = *(_QWORD *)(v2 - 8) + 64;
    v6 = v5;
    v7 = v5;
    v8 = &unk_306780;
    v9 = (char *)&value witness table for Builtin.Int64 + 64;
    v10 = (char *)&value witness table for Builtin.Int64 + 64;
    swift_updateClassMetadata2(a1, 256, 10, v4, a1 + 80);
  }
}

uint64_t method lookup function for ChannelDetail(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for ChannelDetail);
}

uint64_t dispatch thunk of ChannelDetail.__allocating_init(adamId:title:subtitle:displayType:uberArtwork:logoArtwork:iconArtwork:backgroundColor:showCount:availableShowCount:)(uint64_t a1, char a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v2 + 184))(a1, a2 & 1);
}

id MetricsPageViewController.__allocating_init(asPartOf:wrapping:with:)(uint64_t a1, void *a2, __int128 *a3)
{
  objc_class *v3;
  id v7;

  v7 = objc_allocWithZone(v3);
  return MetricsPageViewController.init(asPartOf:wrapping:with:)(a1, a2, a3);
}

id MetricsPageViewController.init(asPartOf:wrapping:with:)(uint64_t a1, void *a2, __int128 *a3)
{
  void *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  __int128 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  id v34;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  objc_class *ObjectType;
  objc_super v43;
  char v44;
  _OWORD v45[2];
  uint64_t v46;
  char v47;
  uint64_t v48;

  v41 = a2;
  ObjectType = (objc_class *)swift_getObjectType();
  v6 = type metadata accessor for ScalarDictionary(0);
  v38 = *(_QWORD *)(v6 - 8);
  v39 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v36 - v10;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4A58);
  __chkstk_darwin(v12);
  v14 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *a3;
  v36 = a3[1];
  v37 = v15;
  v16 = *((_QWORD *)a3 + 4);
  v17 = *((_BYTE *)a3 + 40);
  v18 = *((_QWORD *)a3 + 6);
  v19 = type metadata accessor for MetricsController(0);
  swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
  v20 = v3;
  v40 = a1;
  v21 = swift_retain();
  v22 = MetricsController.init(asPartOf:)(v21);
  v45[0] = v37;
  v45[1] = v36;
  v46 = v16;
  v47 = v17;
  v48 = v18;
  ScalarDictionary.init()(v22);
  v23 = sub_C97A8((uint64_t)_swiftEmptyArrayStorage);
  v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B89A0);
  v25 = type metadata accessor for PageMetrics.Instruction(0);
  v26 = swift_allocObject(v24, ((*(unsigned __int8 *)(*(_QWORD *)(v25 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v25 - 8) + 80))+ 2 * *(_QWORD *)(*(_QWORD *)(v25 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v25 - 8) + 80) | 7);
  *(_OWORD *)(v26 + 16) = xmmword_2EA080;
  v44 = 0;
  PageMetrics.Instruction.init(eventType:)(&v44);
  v44 = 1;
  PageMetrics.Instruction.init(eventType:)(&v44);
  v27 = MetricsPageFields.metricsFields.getter();
  v29 = v38;
  v28 = v39;
  (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v8, v11, v39);
  PageMetrics.init(instructions:pageFields:custom:clickLocationFields:)(v26, v27, v8, v23);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v11, v28);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v30 = type metadata accessor for PageMetrics(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v14, 0, 1, v30);
  v31 = v22 + OBJC_IVAR____TtC8ShelfKit17MetricsController_pageMetrics;
  swift_beginAccess(v22 + OBJC_IVAR____TtC8ShelfKit17MetricsController_pageMetrics, v45, 33, 0);
  sub_C993C((uint64_t)v14, v31);
  swift_endAccess(v45);
  sub_C6FE0();
  sub_2D0D88((uint64_t)v14);
  *(_QWORD *)&v20[OBJC_IVAR____TtC8ShelfKit25MetricsPageViewController_metricsController] = v22;
  v32 = v41;
  *(_QWORD *)&v20[OBJC_IVAR____TtC8ShelfKit25MetricsPageViewController_viewController] = v41;
  swift_retain();
  v33 = v32;

  v43.receiver = v20;
  v43.super_class = ObjectType;
  v34 = objc_msgSendSuper2(&v43, "initWithNibName:bundle:", 0, 0);
  swift_release();
  swift_release();

  return v34;
}

id MetricsPageViewController.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_msgSend(objc_allocWithZone(v1), "initWithCoder:", a1);

  return v3;
}

void MetricsPageViewController.init(coder:)()
{
  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRelease(0xE000000000000000);
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x800000000030B670, "ShelfKit/MetricsPageViewController.swift", 40, 2, 42, 0);
  __break(1u);
}

Swift::Void __swiftcall MetricsPageViewController.viewDidLoad()()
{
  char *v0;
  void *v1;
  id v2;
  void *v3;
  id v4;
  void *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  id v18;
  id v19;
  objc_super v20;

  v20.receiver = v0;
  v20.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v20, "viewDidLoad");
  v1 = *(void **)&v0[OBJC_IVAR____TtC8ShelfKit25MetricsPageViewController_viewController];
  objc_msgSend(v0, "addChildViewController:", v1);
  v2 = objc_msgSend(v1, "view");
  if (!v2)
  {
    __break(1u);
    goto LABEL_7;
  }
  v3 = v2;
  v4 = objc_msgSend(v0, "view");
  if (!v4)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  v5 = v4;
  objc_msgSend(v4, "bounds");
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v13 = v12;

  objc_msgSend(v3, "setFrame:", v7, v9, v11, v13);
  v14 = objc_msgSend(v0, "view");
  if (!v14)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v15 = v14;
  v16 = objc_msgSend(v1, "view");
  if (v16)
  {
    v17 = v16;
    objc_msgSend(v15, "addSubview:", v16);

    v18 = objc_msgSend(v0, "navigationItem");
    v19 = objc_msgSend(v1, "title");
    objc_msgSend(v18, "setTitle:", v19);

    objc_msgSend(v1, "didMoveToParentViewController:", v0);
    return;
  }
LABEL_9:
  __break(1u);
}

Swift::Void __swiftcall MetricsPageViewController.viewWillAppear(_:)(Swift::Bool a1)
{
  char *v1;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  os_unfair_lock_s *v8;
  os_unfair_lock_s *v9;
  os_unfair_lock_s *v10;
  objc_super v11;

  v11.receiver = v1;
  v11.super_class = (Class)swift_getObjectType();
  v3 = objc_msgSendSuper2(&v11, "viewWillAppear:", a1);
  v4 = *(_QWORD *)&v1[OBJC_IVAR____TtC8ShelfKit25MetricsPageViewController_metricsController];
  if (*(_QWORD *)(v4 + 16))
    v3 = (id)DynamicImpressionsCalculator.isVisible.setter(1);
  v5 = PageContextTracker.value.getter(v3);
  v7 = v6;
  v8 = *(os_unfair_lock_s **)(v4 + OBJC_IVAR____TtC8ShelfKit17MetricsController_pageContext);
  v9 = v8 + 4;
  v10 = v8 + 8;
  os_unfair_lock_lock(v8 + 8);
  sub_C7BC0(v9, v5, v7);
  os_unfair_lock_unlock(v10);
  swift_bridgeObjectRelease();
}

Swift::Void __swiftcall MetricsPageViewController.viewDidAppear(_:)(Swift::Bool a1)
{
  char *v1;
  objc_class *ObjectType;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  int v9;
  uint64_t Strong;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[24];
  _BYTE v16[24];
  objc_super v17;

  ObjectType = (objc_class *)swift_getObjectType();
  v4 = type metadata accessor for PageMetrics.InvocationPoint(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v15[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17.receiver = v1;
  v17.super_class = ObjectType;
  objc_msgSendSuper2(&v17, "viewDidAppear:", a1);
  v8 = *(_QWORD *)(*(_QWORD *)&v1[OBJC_IVAR____TtC8ShelfKit25MetricsPageViewController_metricsController]
                 + OBJC_IVAR____TtC8ShelfKit17MetricsController_pageEnterGate);
  if (v8)
  {
    swift_beginAccess(v8 + 32, v16, 1, 0);
    v9 = *(unsigned __int8 *)(v8 + 32);
    *(_BYTE *)(v8 + 32) = 1;
    if (v9 != 1)
    {
      swift_beginAccess(v8 + 34, v15, 0, 0);
      if (*(_BYTE *)(v8 + 34) == 1)
      {
        Strong = swift_unknownObjectWeakLoadStrong(v8 + 16);
        if (Strong)
        {
          v11 = Strong;
          v12 = *(_QWORD *)(v8 + 24);
          v13 = swift_getObjectType();
          v14 = swift_retain(v8);
          static PageMetrics.InvocationPoint.pageEnter.getter(v14);
          (*(void (**)(_BYTE *, uint64_t, uint64_t))(v12 + 8))(v7, v13, v12);
          swift_unknownObjectRelease(v11);
          (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
          swift_release(v8);
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
}

Swift::Void __swiftcall MetricsPageViewController.viewWillDisappear(_:)(Swift::Bool a1)
{
  char *v1;
  objc_class *ObjectType;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  os_unfair_lock_s *v14;
  _BYTE v16[24];
  objc_super v17;

  ObjectType = (objc_class *)swift_getObjectType();
  v4 = type metadata accessor for PageMetrics.InvocationPoint(0);
  v5 = *(_QWORD *)(v4 - 8);
  *(_QWORD *)&v6 = __chkstk_darwin(v4).n128_u64[0];
  v8 = &v16[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v17.receiver = v1;
  v17.super_class = ObjectType;
  objc_msgSendSuper2(&v17, "viewWillDisappear:", a1, v6);
  v9 = *(_QWORD *)&v1[OBJC_IVAR____TtC8ShelfKit25MetricsPageViewController_metricsController];
  v10 = *(_QWORD *)(v9 + OBJC_IVAR____TtC8ShelfKit17MetricsController_pageEnterGate);
  if (v10)
  {
    swift_beginAccess(v10 + 32, v16, 1, 0);
    *(_BYTE *)(v10 + 32) = 0;
    if (*(_QWORD *)(v9 + 16))
      v11 = DynamicImpressionsCalculator.isVisible.setter(0);
    static PageMetrics.InvocationPoint.pageExit.getter(v11);
    MetricsController.sendEvents(for:)((uint64_t)v8);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    v12 = *(_QWORD *)(*(_QWORD *)(v9 + 24) + OBJC_IVAR____TtC8ShelfKit15MetricsActivity_state);
    v13 = v12 + *(_QWORD *)(class metadata base offset for ManagedBuffer + *(_QWORD *)v12 + 16);
    v14 = (os_unfair_lock_s *)(v12 + ((*(unsigned int *)(*(_QWORD *)v12 + 48) + 3) & 0x1FFFFFFFCLL));
    os_unfair_lock_lock(v14);
    sub_13D0C4(v13, 0);
    os_unfair_lock_unlock(v14);
  }
  else
  {
    __break(1u);
  }
}

Swift::Void __swiftcall MetricsPageViewController.viewDidDisappear(_:)(Swift::Bool a1)
{
  void *v1;
  objc_super v3;

  v3.receiver = v1;
  v3.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v3, "viewDidDisappear:", a1);
}

Swift::Void __swiftcall MetricsPageViewController.viewWillLayoutSubviews()()
{
  char *v0;
  id v1;
  void *v2;
  id v3;
  void *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  objc_super v13;

  v13.receiver = v0;
  v13.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v13, "viewWillLayoutSubviews");
  v1 = objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC8ShelfKit25MetricsPageViewController_viewController], "view");
  if (v1)
  {
    v2 = v1;
    v3 = objc_msgSend(v0, "view");
    if (v3)
    {
      v4 = v3;
      objc_msgSend(v3, "bounds");
      v6 = v5;
      v8 = v7;
      v10 = v9;
      v12 = v11;

      objc_msgSend(v2, "setFrame:", v6, v8, v10, v12);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void MetricsPageViewController.init(nibName:bundle:)()
{
  _swift_stdlib_reportUnimplementedInitializer("ShelfKit.MetricsPageViewController", 34, "init(nibName:bundle:)", 21, 0);
  __break(1u);
}

uint64_t sub_2D0D88(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4A58);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for MetricsPageViewController()
{
  return objc_opt_self(_TtC8ShelfKit25MetricsPageViewController);
}

uint64_t method lookup function for MetricsPageViewController(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for MetricsPageViewController);
}

uint64_t LibraryEpisodeOfferAction.init(episodeUuid:contentId:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  _QWORD *v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;

  v5 = v4;
  v31 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for ActionMetrics(0);
  v13 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v16);
  v18 = (char *)&v30 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = (_QWORD *)(v5 + OBJC_IVAR____TtC8ShelfKit25LibraryEpisodeOfferAction_episodeUuid);
  *v19 = a1;
  v19[1] = a2;
  v20 = swift_retain();
  if ((a4 & 1) != 0 || static AdamID.empty.getter(v20) == a3)
  {
    a3 = 0;
    v21 = 1;
  }
  else
  {
    v21 = 0;
  }
  v22 = v5 + OBJC_IVAR____TtC8ShelfKit25LibraryEpisodeOfferAction_contentId;
  *(_QWORD *)v22 = a3;
  *(_BYTE *)(v22 + 8) = v21;
  swift_release();
  v23 = type metadata accessor for ImpressionMetrics(0);
  v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v18, 1, 1, v23);
  v25 = static ActionMetrics.notInstrumented.getter(v24);
  UUID.init()(v25);
  v26 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
  v28 = v27;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v31);
  *(_QWORD *)(v5 + 16) = v26;
  *(_QWORD *)(v5 + 24) = v28;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = 0;
  *(_BYTE *)(v5 + 48) = 32;
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v5 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v15, v30);
  sub_23AB8((uint64_t)v18, v5 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics);
  return v5;
}

uint64_t LibraryEpisodeOfferAction.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics;
  v2 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_23B00(v0 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics);
  swift_bridgeObjectRelease();
  return v0;
}

void LibraryEpisodeOfferAction.init(uniqueId:title:presentationStyle:actionMetrics:impressionMetrics:)()
{
  _swift_stdlib_reportUnimplementedInitializer("ShelfKit.LibraryEpisodeOfferAction", 34, "init(uniqueId:title:presentationStyle:actionMetrics:impressionMetrics:)", 71, 0);
  __break(1u);
}

uint64_t LibraryEpisodeOfferAction.__allocating_init(episodeUuid:contentId:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;

  v5 = v4;
  v32 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = type metadata accessor for ActionMetrics(0);
  v13 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v16);
  v18 = (char *)&v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  v20 = v19;
  v21 = (_QWORD *)(v19 + OBJC_IVAR____TtC8ShelfKit25LibraryEpisodeOfferAction_episodeUuid);
  *v21 = a1;
  v21[1] = a2;
  if ((a4 & 1) != 0 || static AdamID.empty.getter(v19) == a3)
  {
    a3 = 0;
    v22 = 1;
  }
  else
  {
    v22 = 0;
  }
  v23 = v20 + OBJC_IVAR____TtC8ShelfKit25LibraryEpisodeOfferAction_contentId;
  *(_QWORD *)v23 = a3;
  *(_BYTE *)(v23 + 8) = v22;
  v24 = type metadata accessor for ImpressionMetrics(0);
  v25 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v18, 1, 1, v24);
  v26 = static ActionMetrics.notInstrumented.getter(v25);
  UUID.init()(v26);
  v27 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
  v29 = v28;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v32);
  *(_QWORD *)(v20 + 16) = v27;
  *(_QWORD *)(v20 + 24) = v29;
  *(_QWORD *)(v20 + 32) = 0;
  *(_QWORD *)(v20 + 40) = 0;
  *(_BYTE *)(v20 + 48) = 32;
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v20 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v15, v31);
  sub_23AB8((uint64_t)v18, v20 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics);
  return v20;
}

uint64_t LibraryEpisodeOfferAction.episodeUuid.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit25LibraryEpisodeOfferAction_episodeUuid);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit25LibraryEpisodeOfferAction_episodeUuid + 8));
  return v1;
}

uint64_t LibraryEpisodeOfferAction.contentId.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit25LibraryEpisodeOfferAction_contentId);
}

void LibraryEpisodeOfferAction.init(deserializing:using:)()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000033, 0x800000000030A500, "ShelfKit/LibraryEpisodeOfferAction.swift", 40, 2, 31, 0);
  __break(1u);
}

uint64_t sub_2D1324()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit25LibraryEpisodeOfferAction_episodeUuid + 8));
}

uint64_t LibraryEpisodeOfferAction.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics;
  v2 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_23B00(v0 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics);
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_2D13C4()
{
  return type metadata accessor for LibraryEpisodeOfferAction(0);
}

uint64_t type metadata accessor for LibraryEpisodeOfferAction(uint64_t a1)
{
  uint64_t result;

  result = qword_3C7B70;
  if (!qword_3C7B70)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LibraryEpisodeOfferAction);
  return result;
}

uint64_t sub_2D1408(uint64_t a1)
{
  _QWORD v2[2];

  v2[0] = &unk_306820;
  v2[1] = &unk_306838;
  return swift_updateClassMetadata2(a1, 256, 2, v2, a1 + 160);
}

uint64_t method lookup function for LibraryEpisodeOfferAction(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for LibraryEpisodeOfferAction);
}

uint64_t dispatch thunk of LibraryEpisodeOfferAction.__allocating_init(episodeUuid:contentId:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v4 + 176))(a1, a2, a3, a4 & 1);
}

unint64_t static FetchTranscriptRequestInformationIntent.kind.getter()
{
  return 0xD000000000000027;
}

uint64_t FetchTranscriptRequestInformationIntent.priceType.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for FetchTranscriptRequestInformationIntent(0) + 20);
  v4 = type metadata accessor for PriceType(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for FetchTranscriptRequestInformationIntent(uint64_t a1)
{
  uint64_t result;

  result = qword_3C7CC8;
  if (!qword_3C7CC8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for FetchTranscriptRequestInformationIntent);
  return result;
}

uint64_t FetchTranscriptRequestInformationIntent.init(adamID:priceType:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  char *v4;
  uint64_t v5;

  *a3 = a1;
  v4 = (char *)a3 + *(int *)(type metadata accessor for FetchTranscriptRequestInformationIntent(0) + 20);
  v5 = type metadata accessor for PriceType(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(v4, a2, v5);
}

void sub_2D1558(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000027;
  a1[1] = 0x8000000000306840;
}

uint64_t sub_2D1578(char *a1, char *a2)
{
  return sub_1E0494(*a1, *a2);
}

Swift::Int sub_2D1584()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  if (v1)
    v2 = 0x7079546563697270;
  else
    v2 = 0x64496D616461;
  if (v1)
    v3 = 0xE900000000000065;
  else
    v3 = 0xE600000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_2D1604(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0x7079546563697270;
  else
    v2 = 0x64496D616461;
  if (*v1)
    v3 = 0xE900000000000065;
  else
    v3 = 0xE600000000000000;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_2D1660()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  if (v1)
    v2 = 0x7079546563697270;
  else
    v2 = 0x64496D616461;
  if (v1)
    v3 = 0xE900000000000065;
  else
    v3 = 0xE600000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_2D16DC@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;
  char v7;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_376228, v3);
  result = swift_bridgeObjectRelease(v4);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

void sub_2D1738(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x64496D616461;
  if (*v1)
    v2 = 0x7079546563697270;
  v3 = 0xE600000000000000;
  if (*v1)
    v3 = 0xE900000000000065;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_2D1778()
{
  _BYTE *v0;

  if (*v0)
    return 0x7079546563697270;
  else
    return 0x64496D616461;
}

uint64_t sub_2D17B4@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  void *object;
  Swift::String v3;
  Swift::Int v5;
  uint64_t result;
  char v7;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_376228, v3);
  result = swift_bridgeObjectRelease(object);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

uint64_t sub_2D1814(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_2D19D0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_2D183C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_2D19D0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t FetchTranscriptRequestInformationIntent.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  _BYTE v14[8];
  uint64_t v15;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C7C50);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v14[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = a1[3];
  v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  v11 = sub_2D19D0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for FetchTranscriptRequestInformationIntent.CodingKeys, &type metadata for FetchTranscriptRequestInformationIntent.CodingKeys, v11, v9, v10);
  v15 = *v3;
  v14[7] = 0;
  sub_13E9C();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v15);
  if (!v2)
  {
    v12 = (char *)v3 + *(int *)(type metadata accessor for FetchTranscriptRequestInformationIntent(0) + 20);
    v14[6] = 1;
    type metadata accessor for PriceType(0);
    sub_F1C0(&qword_3C7C60, (void (*)(uint64_t))&type metadata accessor for PriceType, (uint64_t)&protocol conformance descriptor for PriceType);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v12);
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_2D19D0()
{
  unint64_t result;

  result = qword_3C7C58;
  if (!qword_3C7C58)
  {
    result = swift_getWitnessTable(&unk_306A80);
    atomic_store(result, (unint64_t *)&qword_3C7C58);
  }
  return result;
}

uint64_t sub_2D1A14()
{
  return sub_F1C0(&qword_3C7C68, (void (*)(uint64_t))type metadata accessor for FetchTranscriptRequestInformationIntent, (uint64_t)&protocol conformance descriptor for FetchTranscriptRequestInformationIntent);
}

uint64_t sub_2D1A40()
{
  return sub_F1C0(&qword_3BB490, (void (*)(uint64_t))type metadata accessor for FetchTranscriptRequestInformationIntent, (uint64_t)&protocol conformance descriptor for FetchTranscriptRequestInformationIntent);
}

uint64_t sub_2D1A6C()
{
  return sub_F1C0(&qword_3B8A28, (void (*)(uint64_t))&type metadata accessor for TranscriptRequestInformation, (uint64_t)&protocol conformance descriptor for TranscriptRequestInformation);
}

uint64_t sub_2D1A98(_QWORD *a1)
{
  return FetchTranscriptRequestInformationIntent.encode(to:)(a1);
}

uint64_t sub_2D1AAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_F1C0(&qword_3C7D18, (void (*)(uint64_t))type metadata accessor for FetchTranscriptRequestInformationIntent, (uint64_t)&protocol conformance descriptor for FetchTranscriptRequestInformationIntent);
  return CustomJSValueConvertible<>.jsRepresentation(in:)(a1, a2, a3, v6);
}

uint64_t *initializeBufferWithCopyOfBuffer for FetchTranscriptRequestInformationIntent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v9);
  }
  else
  {
    *a1 = *a2;
    v5 = *(int *)(a3 + 20);
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    v8 = type metadata accessor for PriceType(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t destroy for FetchTranscriptRequestInformationIntent(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 20);
  v3 = type metadata accessor for PriceType(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

_QWORD *initializeWithCopy for FetchTranscriptRequestInformationIntent(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for PriceType(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

_QWORD *assignWithCopy for FetchTranscriptRequestInformationIntent(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for PriceType(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

_QWORD *initializeWithTake for FetchTranscriptRequestInformationIntent(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for PriceType(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_QWORD *assignWithTake for FetchTranscriptRequestInformationIntent(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for PriceType(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for FetchTranscriptRequestInformationIntent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_2D1D5C);
}

uint64_t sub_2D1D5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a3 + 20);
  v5 = type metadata accessor for PriceType(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for FetchTranscriptRequestInformationIntent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_2D1DA8);
}

uint64_t sub_2D1DA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + *(int *)(a4 + 20);
  v6 = type metadata accessor for PriceType(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, a2, a2, v6);
}

uint64_t sub_2D1DEC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  result = type metadata accessor for PriceType(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FetchTranscriptRequestInformationIntent.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_2D1EB0 + 4 * byte_306855[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_2D1EE4 + 4 * byte_306850[v4]))();
}

uint64_t sub_2D1EE4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2D1EEC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2D1EF4);
  return result;
}

uint64_t sub_2D1F00(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2D1F08);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_2D1F0C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2D1F14(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FetchTranscriptRequestInformationIntent.CodingKeys()
{
  return &type metadata for FetchTranscriptRequestInformationIntent.CodingKeys;
}

unint64_t sub_2D1F34()
{
  unint64_t result;

  result = qword_3C7D00;
  if (!qword_3C7D00)
  {
    result = swift_getWitnessTable(&unk_306A58);
    atomic_store(result, (unint64_t *)&qword_3C7D00);
  }
  return result;
}

unint64_t sub_2D1F7C()
{
  unint64_t result;

  result = qword_3C7D08;
  if (!qword_3C7D08)
  {
    result = swift_getWitnessTable(&unk_306990);
    atomic_store(result, (unint64_t *)&qword_3C7D08);
  }
  return result;
}

unint64_t sub_2D1FC4()
{
  unint64_t result;

  result = qword_3C7D10;
  if (!qword_3C7D10)
  {
    result = swift_getWitnessTable(&unk_3069B8);
    atomic_store(result, (unint64_t *)&qword_3C7D10);
  }
  return result;
}

uint64_t sub_2D2008()
{
  return static AnyActionTypes.makeInstance(byDeserializing:using:)();
}

uint64_t sub_2D201C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t result;

  result = sub_17AC14(a1, a2);
  if (!v3)
    *a3 = result;
  return result;
}

uint64_t OpenExternalAppAction.requiresSignedInUser.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8ShelfKit21OpenExternalAppAction_requiresSignedInUser);
}

uint64_t OpenExternalAppAction.bundleId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit21OpenExternalAppAction_bundleId);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit21OpenExternalAppAction_bundleId + 8));
  return v1;
}

uint64_t OpenExternalAppAction.__allocating_init(bundleId:requiresSignedInUser:)(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v27[12];
  int v28;

  v4 = v3;
  v28 = a3;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = &v27[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = type metadata accessor for ActionMetrics(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = &v27[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v15);
  v17 = &v27[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v18 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v19 = (_QWORD *)(v18 + OBJC_IVAR____TtC8ShelfKit21OpenExternalAppAction_bundleId);
  *v19 = a1;
  v19[1] = a2;
  *(_BYTE *)(v18 + OBJC_IVAR____TtC8ShelfKit21OpenExternalAppAction_requiresSignedInUser) = v28;
  v20 = type metadata accessor for ImpressionMetrics(0);
  v21 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v17, 1, 1, v20);
  v22 = static ActionMetrics.notInstrumented.getter(v21);
  UUID.init()(v22);
  v23 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
  v25 = v24;
  (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v7);
  *(_QWORD *)(v18 + 16) = v23;
  *(_QWORD *)(v18 + 24) = v25;
  *(_QWORD *)(v18 + 32) = 0;
  *(_QWORD *)(v18 + 40) = 0;
  *(_BYTE *)(v18 + 48) = 32;
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v12 + 32))(v18 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v14, v11);
  sub_23AB8((uint64_t)v17, v18 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics);
  return v18;
}

uint64_t OpenExternalAppAction.init(bundleId:requiresSignedInUser:)(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v26[12];
  int v27;

  v4 = v3;
  v27 = a3;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = &v26[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = type metadata accessor for ActionMetrics(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = &v26[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v15);
  v17 = &v26[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v18 = (_QWORD *)(v4 + OBJC_IVAR____TtC8ShelfKit21OpenExternalAppAction_bundleId);
  *v18 = a1;
  v18[1] = a2;
  *(_BYTE *)(v4 + OBJC_IVAR____TtC8ShelfKit21OpenExternalAppAction_requiresSignedInUser) = v27;
  v19 = type metadata accessor for ImpressionMetrics(0);
  v20 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v17, 1, 1, v19);
  v21 = static ActionMetrics.notInstrumented.getter(v20);
  UUID.init()(v21);
  v22 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
  v24 = v23;
  (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v7);
  *(_QWORD *)(v4 + 16) = v22;
  *(_QWORD *)(v4 + 24) = v24;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = 0;
  *(_BYTE *)(v4 + 48) = 32;
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v12 + 32))(v4 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v14, v11);
  sub_23AB8((uint64_t)v17, v4 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics);
  return v4;
}

void OpenExternalAppAction.init(deserializing:using:)()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000033, 0x800000000030A500, "ShelfKit/OpenExternalAppAction.swift", 36, 2, 30, 0);
  __break(1u);
}

void OpenExternalAppAction.init(uniqueId:title:presentationStyle:actionMetrics:impressionMetrics:)()
{
  _swift_stdlib_reportUnimplementedInitializer("ShelfKit.OpenExternalAppAction", 30, "init(uniqueId:title:presentationStyle:actionMetrics:impressionMetrics:)", 71, 0);
  __break(1u);
}

uint64_t sub_2D248C()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit21OpenExternalAppAction_bundleId + 8));
}

uint64_t OpenExternalAppAction.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics;
  v2 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_23B00(v0 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t OpenExternalAppAction.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics;
  v2 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_23B00(v0 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics);
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_2D25AC()
{
  return type metadata accessor for OpenExternalAppAction(0);
}

uint64_t type metadata accessor for OpenExternalAppAction(uint64_t a1)
{
  uint64_t result;

  result = qword_3C7D48;
  if (!qword_3C7D48)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for OpenExternalAppAction);
  return result;
}

uint64_t sub_2D25F0(uint64_t a1)
{
  _QWORD v2[2];

  v2[0] = &unk_306B08;
  v2[1] = &unk_306B20;
  return swift_updateClassMetadata2(a1, 256, 2, v2, a1 + 160);
}

uint64_t method lookup function for OpenExternalAppAction(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for OpenExternalAppAction);
}

void *sub_2D2644@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  void *result;
  char v15;

  v5 = (_QWORD *)*v2;
  if ((swift_isUniquelyReferenced_nonNull_native(*v2) & 1) == 0)
    v5 = sub_1E508(v5);
  v6 = v5[2];
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    v7 = v6 - 1;
    v8 = &v5[4 * a1];
    v10 = *((_BYTE *)v8 + 32);
    v9 = v8 + 4;
    v11 = *((_BYTE *)v9 + 1);
    v12 = v9[3];
    *(_BYTE *)a2 = v10;
    *(_BYTE *)(a2 + 1) = v11;
    *(_OWORD *)(a2 + 8) = *(_OWORD *)(v9 + 1);
    *(_QWORD *)(a2 + 24) = v12;
    v13 = v6 - 1 - a1;
    if (v13 >= 0)
    {
      result = memmove(v9, v9 + 4, 32 * v13);
      v5[2] = v7;
      *v2 = v5;
      return result;
    }
  }
  v15 = 2;
  result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v15, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_2D2738(unint64_t a1)
{
  _QWORD *v1;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  char v10;

  v3 = (_QWORD *)*v1;
  if ((swift_isUniquelyReferenced_nonNull_native(*v1) & 1) == 0)
    v3 = sub_1E5C4(v3);
  v4 = v3[2];
  if (v4 <= a1)
  {
    __break(1u);
  }
  else
  {
    v5 = v4 - 1;
    v6 = v4 - 1 - a1;
    if (v6 >= 0)
    {
      v7 = &v3[a1];
      v8 = v7[4];
      memmove(v7 + 4, v7 + 5, 8 * v6);
      v3[2] = v5;
      *v1 = v3;
      return v8;
    }
  }
  v10 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v10, 1046, 0);
  __break(1u);
  return result;
}

NSAttributedString __swiftcall NSAttributedString.init(nqml:configuration:)(Swift::String nqml, ShelfKit::NqmlConfiguration *configuration)
{
  uint64_t v2;
  uint64_t v3;
  void *object;
  uint64_t countAndFlagsBits;
  Class isa;
  uint64_t v7;
  __int128 v8;
  id v9;
  char *v10;
  uint64_t v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  void *v18;
  id v19;
  uint64_t v21;
  __int128 v22;
  Class v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;

  v3 = v2;
  object = nqml._object;
  countAndFlagsBits = nqml._countAndFlagsBits;
  isa = configuration->paragraphStyle.super.isa;
  v7 = configuration->listItemBullet._countAndFlagsBits;
  v21 = configuration->newline._countAndFlagsBits;
  v22 = *(_OWORD *)&configuration->newline._object;
  v23 = isa;
  v24 = v7;
  v8 = *(_OWORD *)&configuration->markAttributes._rawValue;
  v25 = *(_OWORD *)&configuration->listItemBullet._object;
  v26 = v8;
  v9 = objc_allocWithZone((Class)type metadata accessor for NqmlStringGenerator());
  v10 = sub_2D2DBC(countAndFlagsBits, (uint64_t)object, &v21);
  objc_msgSend(*(id *)&v10[OBJC_IVAR____TtC8ShelfKitP33_04B892DBC0BBAEFCE9764D2FF13A23A619NqmlStringGenerator_parser], "parse");
  v11 = OBJC_IVAR____TtC8ShelfKitP33_04B892DBC0BBAEFCE9764D2FF13A23A619NqmlStringGenerator_accumulator;
  v12 = objc_msgSend(*(id *)&v10[OBJC_IVAR____TtC8ShelfKitP33_04B892DBC0BBAEFCE9764D2FF13A23A619NqmlStringGenerator_accumulator], "mutableString");
  if (qword_3B02F0 != -1)
    swift_once(&qword_3B02F0, sub_2D2BE4);
  sub_142580((void *)qword_3C7E38);

  v13 = *(void **)&v10[v11];
  v14 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v3));
  v15 = objc_allocWithZone((Class)type metadata accessor for LanguageAwareString(0));
  v16 = v13;
  v17 = (void *)LanguageAwareString.init(_:baseParagraphStyle:)();
  v18 = (void *)dispatch thunk of LanguageAwareString.attributedString.getter();

  v19 = objc_msgSend(v14, "initWithAttributedString:", v18);
  return (NSAttributedString)v19;
}

uint64_t type metadata accessor for NqmlStringGenerator()
{
  return objc_opt_self(_TtC8ShelfKitP33_04B892DBC0BBAEFCE9764D2FF13A23A619NqmlStringGenerator);
}

void __swiftcall NqmlConfiguration.init(font:)(ShelfKit::NqmlConfiguration *__return_ptr retstr, UIFont font)
{
  void *v4;
  void *v5;
  void *v6;
  objc_class *v7;
  objc_class *v8;
  double v9;
  double v10;
  id v11;
  id v12;
  Class isa;
  id v14;

  v4 = (void *)sub_2881B4((uint64_t)_swiftEmptyArrayStorage);
  v5 = (void *)sub_2882F8((uint64_t)_swiftEmptyArrayStorage);
  v6 = (void *)objc_opt_self(NSParagraphStyle);
  v7 = font.super.isa;
  v8 = (objc_class *)objc_msgSend(v6, "defaultParagraphStyle");
  -[objc_class pointSize](v7, "pointSize");
  v10 = v9;
  v11 = objc_msgSend(objc_allocWithZone((Class)NSMutableParagraphStyle), "init");
  objc_msgSend(v11, "setFirstLineHeadIndent:", 0.0);
  objc_msgSend(v11, "setHeadIndent:", v10);
  objc_msgSend(v11, "setDefaultTabInterval:", v10);
  sub_288198((uint64_t)_swiftEmptyArrayStorage);
  v12 = objc_allocWithZone((Class)NSTextTab);
  type metadata accessor for OptionKey(0);
  sub_F1C0((unint64_t *)&qword_3B06A8, type metadata accessor for OptionKey, (uint64_t)&unk_2E94A4);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v14 = objc_msgSend(v12, "initWithTextAlignment:location:options:", 4, isa, v10);

  objc_msgSend(v11, "addTabStop:", v14);
  retstr->newline._countAndFlagsBits = 10;
  retstr->newline._object = (void *)0xE100000000000000;
  retstr->font.super.isa = v7;
  retstr->paragraphStyle.super.isa = v8;
  retstr->listItemBullet._countAndFlagsBits = 547520738;
  retstr->listItemBullet._object = (void *)0xA400000000000000;
  retstr->listItemStyle.super.isa = (Class)v11;
  retstr->markAttributes._rawValue = v4;
  retstr->markFontAttributes._rawValue = v5;
}

id sub_2D2B6C()
{
  id v0;
  id result;

  v0 = objc_allocWithZone((Class)NSRegularExpression);
  result = sub_2D426C(0x745C725C6E5C5B28, 0xEC000000292B5D20, 0);
  qword_3C7E30 = (uint64_t)result;
  return result;
}

uint64_t sub_2D2BE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  Class isa;
  uint64_t result;
  uint64_t v7;

  v0 = type metadata accessor for CharacterSet(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  static CharacterSet.whitespacesAndNewlines.getter(v2);
  isa = CharacterSet._bridgeToObjectiveC()().super.isa;
  result = (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  qword_3C7E38 = (uint64_t)isa;
  return result;
}

NSString sub_2D2C68()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_3C7E40 = (uint64_t)result;
  return result;
}

id static NSAttributedStringKey.marked.getter()
{
  if (qword_3B02F8 != -1)
    swift_once(&qword_3B02F8, sub_2D2C68);
  return (id)qword_3C7E40;
}

void NqmlConfiguration.font.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
}

void NqmlConfiguration.paragraphStyle.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = a1;
}

id NqmlConfiguration.listItemStyle.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 48);
}

void NqmlConfiguration.listItemStyle.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 48) = a1;
}

uint64_t NqmlConfiguration.markAttributes.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + 56));
  *(_QWORD *)(v1 + 56) = a1;
  return result;
}

uint64_t NqmlConfiguration.markFontAttributes.getter()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 64));
}

uint64_t NqmlConfiguration.markFontAttributes.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + 64));
  *(_QWORD *)(v1 + 64) = a1;
  return result;
}

void (__swiftcall *NqmlConfiguration.markFontAttributes.modify())()
{
  return FindOrCreateEpisodeOfferContentIDsIntentsIntentImplementation.init();
}

char *sub_2D2DBC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  char *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  char *v10;
  id v11;
  NSString v12;
  id v13;
  char *v14;
  char *v15;
  objc_super v17;

  v5 = *a3;
  v6 = a3[3];
  v7 = a3[4];
  v8 = OBJC_IVAR____TtC8ShelfKitP33_04B892DBC0BBAEFCE9764D2FF13A23A619NqmlStringGenerator_accumulator;
  v9 = objc_allocWithZone((Class)NSMutableAttributedString);
  v10 = v3;
  *(_QWORD *)&v3[v8] = objc_msgSend(v9, "init");
  *(_QWORD *)&v10[OBJC_IVAR____TtC8ShelfKitP33_04B892DBC0BBAEFCE9764D2FF13A23A619NqmlStringGenerator_attributeStack] = _swiftEmptyArrayStorage;
  v10[OBJC_IVAR____TtC8ShelfKitP33_04B892DBC0BBAEFCE9764D2FF13A23A619NqmlStringGenerator_didParseEverything] = 1;
  v11 = objc_allocWithZone((Class)ASKNQMLParser);
  v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v13 = objc_msgSend(v11, "initWithString:", v12);

  *(_QWORD *)&v10[OBJC_IVAR____TtC8ShelfKitP33_04B892DBC0BBAEFCE9764D2FF13A23A619NqmlStringGenerator_parser] = v13;
  v14 = &v10[OBJC_IVAR____TtC8ShelfKitP33_04B892DBC0BBAEFCE9764D2FF13A23A619NqmlStringGenerator_configuration];
  *(_QWORD *)v14 = v5;
  *(_OWORD *)(v14 + 8) = *(_OWORD *)(a3 + 1);
  *((_QWORD *)v14 + 3) = v6;
  *((_QWORD *)v14 + 4) = v7;
  *(_OWORD *)(v14 + 40) = *(_OWORD *)(a3 + 5);
  *(_OWORD *)(v14 + 56) = *(_OWORD *)(a3 + 7);

  v17.receiver = v10;
  v17.super_class = (Class)type metadata accessor for NqmlStringGenerator();
  v15 = (char *)objc_msgSendSuper2(&v17, "init");
  objc_msgSend(*(id *)&v15[OBJC_IVAR____TtC8ShelfKitP33_04B892DBC0BBAEFCE9764D2FF13A23A619NqmlStringGenerator_parser], "setDelegate:", v15);
  return v15;
}

uint64_t destroy for NqmlConfiguration(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 56));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 64));
}

_QWORD *initializeWithCopy for NqmlConfiguration(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  id v11;
  id v12;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = (void *)a2[2];
  v5 = (void *)a2[3];
  a1[2] = v4;
  a1[3] = v5;
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  v8 = (void *)a2[6];
  v7 = a2[7];
  a1[6] = v8;
  a1[7] = v7;
  v9 = a2[8];
  a1[8] = v9;
  swift_bridgeObjectRetain(v3);
  v10 = v4;
  v11 = v5;
  swift_bridgeObjectRetain(v6);
  v12 = v8;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v9);
  return a1;
}

_QWORD *assignWithCopy for NqmlConfiguration(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = (void *)a2[2];
  v7 = (void *)a1[2];
  a1[2] = v6;
  v8 = v6;

  v9 = (void *)a2[3];
  v10 = (void *)a1[3];
  a1[3] = v9;
  v11 = v9;

  a1[4] = a2[4];
  v12 = a2[5];
  v13 = a1[5];
  a1[5] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  v14 = (void *)a2[6];
  v15 = (void *)a1[6];
  a1[6] = v14;
  v16 = v14;

  v17 = a2[7];
  v18 = a1[7];
  a1[7] = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v18);
  v19 = a2[8];
  v20 = a1[8];
  a1[8] = v19;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease(v20);
  return a1;
}

__n128 __swift_memcpy72_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

_QWORD *assignWithTake for NqmlConfiguration(_QWORD *a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;

  *a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(a1[1]);
  v4 = (void *)a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);

  v5 = (void *)a1[3];
  a1[3] = *(_QWORD *)(a2 + 24);

  a1[4] = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease(a1[5]);
  v6 = (void *)a1[6];
  *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 40);

  swift_bridgeObjectRelease(a1[7]);
  v7 = a1[8];
  *(_OWORD *)(a1 + 7) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for NqmlConfiguration(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 72))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NqmlConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for NqmlConfiguration()
{
  return &type metadata for NqmlConfiguration;
}

uint64_t sub_2D322C(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  int64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  void *v20;
  id v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  uint64_t v25;
  _BOOL8 v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  id v34;
  char v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v40;
  unint64_t v41;
  uint64_t result;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  int64_t v46;
  _OWORD v47[2];
  uint64_t v48;
  void *v49;
  _OWORD v50[2];
  char v51[32];

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKitP33_04B892DBC0BBAEFCE9764D2FF13A23A619NqmlStringGenerator_attributeStack);
  swift_beginAccess(v1 + OBJC_IVAR____TtC8ShelfKitP33_04B892DBC0BBAEFCE9764D2FF13A23A619NqmlStringGenerator_attributeStack, v51, 0, 0);
  v4 = *(_QWORD *)(*v3 + 16);
  if (!v4)
  {
    swift_beginAccess(v3, &v49, 33, 0);
    v38 = (_QWORD *)*v3;
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v38);
    *v3 = v38;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v38 = sub_1190C(0, v38[2] + 1, 1, v38);
      *v3 = v38;
    }
    v41 = v38[2];
    v40 = v38[3];
    if (v41 >= v40 >> 1)
    {
      v38 = sub_1190C((_QWORD *)(v40 > 1), v41 + 1, 1, v38);
      *v3 = v38;
    }
    v38[2] = v41 + 1;
    v38[v41 + 4] = a1;
    return swift_endAccess(&v49);
  }
  v5 = *(_QWORD **)(*v3 + 8 * v4 + 24);
  v44 = v3;
  v45 = a1 + 8;
  v6 = 1 << *((_BYTE *)a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & a1[8];
  v9 = v50;
  v46 = (unint64_t)(v6 + 63) >> 6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10 = 0;
  while (1)
  {
    if (v8)
    {
      v12 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v13 = v12 | (v10 << 6);
LABEL_9:
      v14 = a1[7];
      *(_QWORD *)&v47[0] = *(_QWORD *)(a1[6] + 8 * v13);
      v15 = *(void **)&v47[0];
      sub_1FB98(v14 + 32 * v13, (uint64_t)v47 + 8);
      v16 = v15;
      goto LABEL_28;
    }
    v17 = v10 + 1;
    if (__OFADD__(v10, 1))
      goto LABEL_52;
    if (v17 < v46)
    {
      v18 = v45[v17];
      if (v18)
        goto LABEL_13;
      v19 = v10 + 2;
      ++v10;
      if (v17 + 1 < v46)
      {
        v18 = v45[v19];
        if (v18)
          goto LABEL_16;
        v10 = v17 + 1;
        if (v17 + 2 < v46)
        {
          v18 = v45[v17 + 2];
          if (v18)
          {
            v17 += 2;
LABEL_13:
            v8 = (v18 - 1) & v18;
            v13 = __clz(__rbit64(v18)) + (v17 << 6);
            v10 = v17;
            goto LABEL_9;
          }
          v19 = v17 + 3;
          v10 = v17 + 2;
          if (v17 + 3 < v46)
          {
            v18 = v45[v19];
            if (!v18)
            {
              while (1)
              {
                v17 = v19 + 1;
                if (__OFADD__(v19, 1))
                  break;
                if (v17 >= v46)
                {
                  v10 = v46 - 1;
                  goto LABEL_27;
                }
                v18 = v45[v17];
                ++v19;
                if (v18)
                  goto LABEL_13;
              }
              __break(1u);
LABEL_55:
              type metadata accessor for Key(0);
              result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v43);
              __break(1u);
              return result;
            }
LABEL_16:
            v17 = v19;
            goto LABEL_13;
          }
        }
      }
    }
LABEL_27:
    v8 = 0;
    v48 = 0;
    memset(v47, 0, sizeof(v47));
LABEL_28:
    sub_2D4364((uint64_t)v47, (uint64_t)&v49);
    v20 = v49;
    if (!v49)
      break;
    sub_1F460(v50, v47);
    v21 = v20;
    v22 = swift_isUniquelyReferenced_nonNull_native(v5);
    v24 = sub_29818((uint64_t)v21);
    v25 = v5[2];
    v26 = (v23 & 1) == 0;
    v27 = v25 + v26;
    if (__OFADD__(v25, v26))
    {
      __break(1u);
LABEL_51:
      __break(1u);
LABEL_52:
      __break(1u);
      goto LABEL_53;
    }
    v28 = v23;
    if (v5[3] >= v27)
    {
      if ((v22 & 1) != 0)
      {
        if ((v23 & 1) != 0)
          goto LABEL_5;
      }
      else
      {
        sub_232DA4();
        if ((v28 & 1) != 0)
          goto LABEL_5;
      }
    }
    else
    {
      sub_230474(v27, v22);
      v29 = sub_29818((uint64_t)v21);
      if ((v28 & 1) != (v30 & 1))
        goto LABEL_55;
      v24 = v29;
      if ((v28 & 1) != 0)
      {
LABEL_5:
        v11 = (_QWORD *)(v5[7] + 32 * v24);
        __swift_destroy_boxed_opaque_existential_1(v11);
        sub_1F460(v47, v11);
        goto LABEL_6;
      }
    }
    v5[(v24 >> 6) + 8] |= 1 << v24;
    *(_QWORD *)(v5[6] + 8 * v24) = v21;
    sub_1F460(v47, (_OWORD *)(v5[7] + 32 * v24));
    v31 = v5[2];
    v32 = __OFADD__(v31, 1);
    v33 = v31 + 1;
    if (v32)
      goto LABEL_51;
    v5[2] = v33;
    v34 = v21;
LABEL_6:

    swift_bridgeObjectRelease();
  }
  swift_release();
  v9 = v44;
  swift_beginAccess(v44, &v49, 33, 0);
  a1 = (_QWORD *)*v44;
  v35 = swift_isUniquelyReferenced_nonNull_native(*v44);
  *v44 = a1;
  if ((v35 & 1) != 0)
    goto LABEL_41;
LABEL_53:
  a1 = sub_1190C(0, a1[2] + 1, 1, a1);
  *v9 = a1;
LABEL_41:
  v37 = a1[2];
  v36 = a1[3];
  if (v37 >= v36 >> 1)
  {
    a1 = sub_1190C((_QWORD *)(v36 > 1), v37 + 1, 1, a1);
    *v9 = a1;
  }
  a1[2] = v37 + 1;
  a1[v37 + 4] = v5;
  return swift_endAccess(&v49);
}

void sub_2D36BC()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSString v5;
  Class isa;
  id v7;
  _BYTE v8[24];

  v1 = *(void **)(v0 + OBJC_IVAR____TtC8ShelfKitP33_04B892DBC0BBAEFCE9764D2FF13A23A619NqmlStringGenerator_accumulator);
  v2 = v0 + OBJC_IVAR____TtC8ShelfKitP33_04B892DBC0BBAEFCE9764D2FF13A23A619NqmlStringGenerator_attributeStack;
  swift_beginAccess(v0 + OBJC_IVAR____TtC8ShelfKitP33_04B892DBC0BBAEFCE9764D2FF13A23A619NqmlStringGenerator_attributeStack, v8, 0, 0);
  if (*(_QWORD *)(*(_QWORD *)v2 + 16))
  {
    v3 = objc_allocWithZone((Class)NSAttributedString);
    v4 = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v5 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    type metadata accessor for Key(0);
    sub_F1C0((unint64_t *)&qword_3C7F00, type metadata accessor for Key, (uint64_t)&unk_2E9460);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v7 = objc_msgSend(v3, "initWithString:attributes:", v5, isa);

    objc_msgSend(v4, "appendAttributedString:", v7);
  }
  else
  {
    __break(1u);
  }
}

id sub_2D3808()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSString *v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v10;
  _BYTE v11[24];
  __int128 v12;
  __int128 v13;

  v1 = v0;
  v2 = v0 + OBJC_IVAR____TtC8ShelfKitP33_04B892DBC0BBAEFCE9764D2FF13A23A619NqmlStringGenerator_attributeStack;
  swift_beginAccess(v2, v11, 0, 0);
  v3 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  if (!v3 || (v4 = *(_QWORD *)(*(_QWORD *)v2 + 8 * v3 + 24), !*(_QWORD *)(v4 + 16)))
  {
    v12 = 0u;
    v13 = 0u;
LABEL_10:
    sub_298FC((uint64_t)&v12);
    return objc_retain(*(id *)(v1
                             + OBJC_IVAR____TtC8ShelfKitP33_04B892DBC0BBAEFCE9764D2FF13A23A619NqmlStringGenerator_configuration
                             + 16));
  }
  swift_bridgeObjectRetain();
  v5 = NSFontAttributeName;
  v6 = sub_29818((uint64_t)v5);
  if ((v7 & 1) != 0)
  {
    sub_1FB98(*(_QWORD *)(v4 + 56) + 32 * v6, (uint64_t)&v12);
  }
  else
  {
    v12 = 0u;
    v13 = 0u;
  }

  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v13 + 1))
    goto LABEL_10;
  v8 = sub_327F8(0, (unint64_t *)&qword_3B3240, UIFont_ptr);
  if (swift_dynamicCast(&v10, &v12, (char *)&type metadata for Any + 8, v8, 6))
    return (id)v10;
  return objc_retain(*(id *)(v1
                           + OBJC_IVAR____TtC8ShelfKitP33_04B892DBC0BBAEFCE9764D2FF13A23A619NqmlStringGenerator_configuration
                           + 16));
}

id sub_2D393C(int a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  id v7;
  id v8;
  __n128 v9;
  void *v10;
  Class isa;
  id v12;
  double v13;
  id v14;
  id v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  int v20;
  id v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  os_log_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  os_log_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_2D3808();
  v7 = objc_msgSend(v6, "fontDescriptor");
  v8 = objc_msgSend(v7, "fontDescriptorWithSymbolicTraits:", objc_msgSend(v7, "symbolicTraits") | a1);
  if (v8
    && (v10 = v8,
        type metadata accessor for AttributeName(0),
        sub_F1C0(&qword_3B0688, type metadata accessor for AttributeName, (uint64_t)&unk_2E93D0),
        isa = Dictionary._bridgeToObjectiveC()().super.isa,
        v12 = objc_msgSend(v10, "fontDescriptorByAddingAttributes:", isa),
        v10,
        isa,
        v12))
  {
    objc_msgSend(v6, "pointSize");
    v14 = objc_msgSend((id)objc_opt_self(UIFont), "fontWithDescriptor:size:", v12, v13);

    return v14;
  }
  else
  {
    static Logger.ui.getter(v9);
    v16 = v6;
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.info.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      v19 = swift_slowAlloc(22, -1);
      v30 = (_QWORD *)swift_slowAlloc(8, -1);
      v32 = swift_slowAlloc(32, -1);
      v35 = (uint64_t)v16;
      v36 = v32;
      *(_DWORD *)v19 = 138412546;
      v31 = v17;
      v33 = v3;
      v34 = v2;
      v20 = a1;
      v21 = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36);
      v22 = v30;
      *v30 = v16;

      *(_WORD *)(v19 + 12) = 2080;
      LODWORD(v35) = v20;
      type metadata accessor for SymbolicTraits(0);
      v24 = String.init<A>(describing:)(&v35, v23);
      v35 = sub_69298(v24, v25, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36);
      swift_bridgeObjectRelease();
      v26 = v31;
      _os_log_impl(&dword_0, v31, v18, "Font %@ does not support traits %s", (uint8_t *)v19, 0x16u);
      v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8E70);
      swift_arrayDestroy(v22, 1, v27);
      swift_slowDealloc(v22, -1, -1);
      v28 = v32;
      swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1, -1);
      swift_slowDealloc(v19, -1, -1);

      (*(void (**)(char *, uint64_t))(v33 + 8))(v5, v34);
      return v21;
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    }
    return v16;
  }
}

id sub_2D4194()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for NqmlStringGenerator();
  return objc_msgSendSuper2(&v2, "dealloc");
}

id sub_2D426C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  NSString v6;
  id v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  id v13;

  v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v13 = 0;
  v7 = objc_msgSend(v3, "initWithPattern:options:error:", v6, a3, &v13);

  v8 = v13;
  if (v7)
  {
    v9 = v13;
  }
  else
  {
    v10 = v13;
    _convertNSErrorToError(_:)(v8);

    swift_willThrow(v11);
  }
  return v7;
}

uint64_t sub_2D4344(uint64_t (*a1)(void))
{
  uint64_t v1;

  v1 = a1();
  return _swift_stdlib_bridgeErrorToNSError(v1);
}

uint64_t sub_2D4364(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C7F08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_2D43AC()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  v1 = (_QWORD *)*v0;
  result = swift_isUniquelyReferenced_nonNull_native(*v0);
  if ((result & 1) != 0)
  {
    v3 = v1[2];
    if (v3)
    {
LABEL_3:
      v4 = v3 - 1;
      result = v1[v4 + 4];
      v1[2] = v4;
      *v0 = v1;
      return result;
    }
  }
  else
  {
    result = (uint64_t)sub_1E5C4(v1);
    v1 = (_QWORD *)result;
    v3 = *(_QWORD *)(result + 16);
    if (v3)
      goto LABEL_3;
  }
  __break(1u);
  return result;
}

id sub_2D4408(uint64_t a1, void *a2)
{
  __CFString *v3;
  uint64_t v4;
  char v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  NSString *v9;
  char isUniquelyReferenced_nonNull_native;
  id v11;
  __CFString *v13;
  uint64_t v14;
  char v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  NSString *v24;
  BOOL v25;
  uint64_t v26;
  char v27;
  _QWORD *v28;
  id v29;
  id v30;
  Class isa;
  id v32;
  id v33;
  unsigned __int8 *v34;
  int v35;
  _QWORD v36[5];
  id v37;
  _QWORD *v38;
  _OWORD v39[2];
  __int128 v40;
  void *v41;

  if (!*(_QWORD *)(a1 + 16))
    return a2;
  v37 = a2;
  v3 = CFSTR("font-name");
  v4 = sub_29788(v3);
  if ((v5 & 1) != 0)
  {
    v6 = (uint64_t *)(*(_QWORD *)(a1 + 56) + 16 * v4);
    v8 = *v6;
    v7 = v6[1];
    swift_bridgeObjectRetain();

    v41 = &type metadata for String;
    *(_QWORD *)&v40 = v8;
    *((_QWORD *)&v40 + 1) = v7;
    sub_1F460(&v40, v39);
    v9 = UIFontDescriptorNameAttribute;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
    v38 = &_swiftEmptyDictionarySingleton;
    sub_1E2B4(v39, v9, isUniquelyReferenced_nonNull_native);

    swift_bridgeObjectRelease();
    v11 = objc_msgSend(objc_allocWithZone((Class)UIFontDescriptor), "init");
    if (!*(_QWORD *)(a1 + 16))
      goto LABEL_21;
  }
  else
  {

    v11 = 0;
    if (!*(_QWORD *)(a1 + 16))
      goto LABEL_21;
  }
  v13 = CFSTR("font-size");
  v14 = sub_29788(v13);
  if ((v15 & 1) != 0)
  {
    v16 = (uint64_t *)(*(_QWORD *)(a1 + 56) + 16 * v14);
    v18 = *v16;
    v17 = v16[1];
    swift_bridgeObjectRetain();

    *(_QWORD *)&v39[0] = 0;
    __chkstk_darwin(v19);
    v36[2] = v39;
    if ((v17 & 0x1000000000000000) != 0 || !(v17 & 0x2000000000000000 | v18 & 0x1000000000000000))
    {
      _StringGuts._slowWithCString<A>(_:)(&v38, sub_2D53A8, v36, v18, v17, &type metadata for Bool);
      swift_bridgeObjectRelease();
      if ((v38 & 1) == 0)
        goto LABEL_21;
LABEL_14:
      v41 = &type metadata for CGFloat;
      *(_QWORD *)&v40 = *(_QWORD *)&v39[0];
      sub_1F460(&v40, v39);
      v24 = UIFontDescriptorSizeAttribute;
      goto LABEL_22;
    }
    __chkstk_darwin(v20);
    if ((v17 & 0x2000000000000000) == 0)
    {
      if ((v18 & 0x1000000000000000) != 0)
      {
        v21 = (v17 & 0xFFFFFFFFFFFFFFFLL) + 32;
        v22 = v18 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v21 = _StringObject.sharedUTF8.getter(v18, v17);
      }
      v23 = sub_1EB00(v21, v22, (void (*)(uint64_t *__return_ptr))sub_2D53C0);
      swift_bridgeObjectRelease();
      if ((v23 & 1) == 0)
        goto LABEL_21;
      goto LABEL_14;
    }
    *(_QWORD *)&v40 = v18;
    *((_QWORD *)&v40 + 1) = v17 & 0xFFFFFFFFFFFFFFLL;
    v25 = v18 > 0x20u || ((1 << v18) & 0x100003E01) == 0;
    if (v25 && (v34 = (unsigned __int8 *)_swift_stdlib_strtod_clocale(&v40, v39)) != 0)
    {
      v35 = *v34;
      swift_bridgeObjectRelease();
      if (!v35)
        goto LABEL_14;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  else
  {

  }
LABEL_21:
  v24 = UIFontDescriptorSizeAttribute;
  objc_msgSend(v37, "pointSize");
  v41 = &type metadata for CGFloat;
  *(_QWORD *)&v40 = v26;
  sub_1F460(&v40, v39);
LABEL_22:
  v27 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  v38 = &_swiftEmptyDictionarySingleton;
  sub_1E2B4(v39, v24, v27);
  v28 = v38;

  swift_bridgeObjectRelease();
  if (v28[2])
  {
    if (v11)
      v29 = v11;
    else
      v29 = objc_msgSend(v37, "fontDescriptor");
    type metadata accessor for AttributeName(0);
    sub_F1C0(&qword_3B0688, type metadata accessor for AttributeName, (uint64_t)&unk_2E93D0);
    v30 = v11;
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v32 = objc_msgSend(v29, "fontDescriptorByAddingAttributes:", isa);

    v33 = objc_msgSend((id)objc_opt_self(UIFont), "fontWithDescriptor:size:", v32, 0.0);
    return v33;
  }
  else
  {
    swift_bridgeObjectRelease();

    return v37;
  }
}

uint64_t sub_2D48A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v2 = v1;
  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.ui.getter(v6);
  swift_errorRetain(a1);
  v9 = swift_errorRetain(a1);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v21 = v2;
    v12 = swift_slowAlloc(12, -1);
    v20 = v4;
    v13 = (uint8_t *)v12;
    v14 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v13 = 138412290;
    swift_errorRetain(a1);
    v15 = _swift_stdlib_bridgeErrorToNSError(a1);
    v22 = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23);
    *v14 = v15;
    v2 = v21;
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl(&dword_0, v10, v11, "init(nqml:) could not fully parse string, reason: %@", v13, 0xCu);
    v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8E70);
    swift_arrayDestroy(v14, 1, v16);
    swift_slowDealloc(v14, -1, -1);
    v17 = v13;
    v4 = v20;
    swift_slowDealloc(v17, -1, -1);
  }
  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }

  result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  *(_BYTE *)(v2 + OBJC_IVAR____TtC8ShelfKitP33_04B892DBC0BBAEFCE9764D2FF13A23A619NqmlStringGenerator_didParseEverything) = 0;
  return result;
}

void sub_2D4A7C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t inited;
  uint64_t v8;
  uint64_t v9;
  NSString *v10;
  NSString *v11;
  unint64_t v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  id v19;
  uint64_t v20;
  NSString *v21;
  id v22;
  _QWORD *v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  const NSAttributedStringKey *v30;
  id v31;
  uint64_t v32;
  NSAttributedStringKey v33;
  id v34;
  NSString *v35;
  id v36;
  uint64_t v37;
  NSString *v38;
  id v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  NSString *v43;
  id v44;
  NSString *v45;
  id v46;
  _QWORD *v47;
  uint64_t v48;
  id v49;
  id v50;
  _QWORD *v51;
  NSString *v52;
  id v53;
  char isUniquelyReferenced_nonNull_native;
  void *v55;
  id v56;
  char v57;
  char v58[72];
  char v59[48];
  char v60[72];
  char v61[72];
  char v62[112];
  char v63[112];
  char v64[112];
  _QWORD *v65;
  _OWORD v66[2];
  __int128 v67;
  uint64_t v68;

  v3 = v2;
  objc_msgSend(*(id *)(v3 + OBJC_IVAR____TtC8ShelfKitP33_04B892DBC0BBAEFCE9764D2FF13A23A619NqmlStringGenerator_accumulator), "beginEditing");
  switch(a1)
  {
    case 0:
      v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C7F38);
      inited = swift_initStackObject(v6, v60);
      *(_OWORD *)(inited + 16) = xmmword_2EA0D0;
      *(_QWORD *)(inited + 32) = UIFontDescriptorTraitsAttribute;
      v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C7F40);
      v9 = swift_initStackObject(v8, v59);
      *(_OWORD *)(v9 + 16) = xmmword_2EA0D0;
      *(_QWORD *)(v9 + 32) = UIFontWeightTrait;
      *(UIFontWeight *)(v9 + 40) = UIFontWeightSemibold;
      v10 = UIFontDescriptorTraitsAttribute;
      v11 = UIFontWeightTrait;
      v12 = sub_2890DC(v9);
      *(_QWORD *)(inited + 64) = __swift_instantiateConcreteTypeFromMangledName(&qword_3C7F48);
      *(_QWORD *)(inited + 40) = v12;
      sub_2882F8(inited);
      v13 = sub_2D393C(0);
      swift_bridgeObjectRelease();
      v14 = sub_2D4408(a2, v13);

      v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C7F10);
      v16 = swift_initStackObject(v15, v58);
      v17 = v16;
      v18 = xmmword_2EA0D0;
      goto LABEL_4;
    case 1:
      sub_2882F8((uint64_t)_swiftEmptyArrayStorage);
      v19 = sub_2D393C(1);
      swift_bridgeObjectRelease();
      v14 = sub_2D4408(a2, v19);

      v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C7F10);
      v16 = swift_initStackObject(v20, v61);
      v17 = v16;
      v18 = xmmword_2EA0D0;
LABEL_4:
      *(_OWORD *)(v16 + 16) = v18;
      *(_QWORD *)(v16 + 32) = NSFontAttributeName;
      *(_QWORD *)(v17 + 64) = sub_327F8(0, (unint64_t *)&qword_3B3240, UIFont_ptr);
      *(_QWORD *)(v17 + 40) = v14;
      v21 = NSFontAttributeName;
      v22 = v14;
      v23 = (_QWORD *)sub_2881B4(v17);
      sub_2D322C(v23);

      swift_bridgeObjectRelease();
      return;
    case 2:
      v24 = sub_2D3808();
      v25 = sub_2D4408(a2, v24);

      v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C7F10);
      v27 = swift_initStackObject(v26, v62);
      v28 = v27;
      v29 = xmmword_2EA080;
      v30 = &NSUnderlineStyleAttributeName;
      goto LABEL_7;
    case 3:
      v31 = sub_2D3808();
      v25 = sub_2D4408(a2, v31);

      v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C7F10);
      v27 = swift_initStackObject(v32, v63);
      v28 = v27;
      v29 = xmmword_2EA080;
      v30 = &NSStrikethroughStyleAttributeName;
LABEL_7:
      *(_OWORD *)(v27 + 16) = v29;
      v33 = *v30;
      *(NSAttributedStringKey *)(v27 + 32) = *v30;
      v34 = objc_allocWithZone((Class)NSNumber);
      v35 = v33;
      v36 = objc_msgSend(v34, "initWithInteger:", 1);
      v37 = sub_327F8(0, (unint64_t *)&qword_3C7F30, NSNumber_ptr);
      *(_QWORD *)(v28 + 40) = v36;
      *(_QWORD *)(v28 + 64) = v37;
      *(_QWORD *)(v28 + 72) = NSFontAttributeName;
      *(_QWORD *)(v28 + 104) = sub_327F8(0, (unint64_t *)&qword_3B3240, UIFont_ptr);
      *(_QWORD *)(v28 + 80) = v25;
      v38 = NSFontAttributeName;
      goto LABEL_9;
    case 4:
      v39 = sub_2D3808();
      v25 = sub_2D4408(a2, v39);

      v40 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C7F10);
      v28 = swift_initStackObject(v40, v64);
      *(_OWORD *)(v28 + 16) = xmmword_2EA080;
      *(_QWORD *)(v28 + 32) = NSParagraphStyleAttributeName;
      v41 = *(void **)(v3
                     + OBJC_IVAR____TtC8ShelfKitP33_04B892DBC0BBAEFCE9764D2FF13A23A619NqmlStringGenerator_configuration
                     + 24);
      v42 = sub_327F8(0, (unint64_t *)&unk_3C7F18, NSParagraphStyle_ptr);
      *(_QWORD *)(v28 + 40) = v41;
      *(_QWORD *)(v28 + 64) = v42;
      *(_QWORD *)(v28 + 72) = NSFontAttributeName;
      *(_QWORD *)(v28 + 104) = sub_327F8(0, (unint64_t *)&qword_3B3240, UIFont_ptr);
      *(_QWORD *)(v28 + 80) = v25;
      v43 = NSParagraphStyleAttributeName;
      v44 = v41;
      v45 = NSFontAttributeName;
LABEL_9:
      v46 = v25;
      v47 = (_QWORD *)sub_2881B4(v28);
      sub_2D322C(v47);

      swift_bridgeObjectRelease();
      break;
    case 5:
      v48 = v3 + OBJC_IVAR____TtC8ShelfKitP33_04B892DBC0BBAEFCE9764D2FF13A23A619NqmlStringGenerator_configuration;
      v49 = sub_2D393C(0);
      v50 = sub_2D4408(a2, v49);

      v51 = *(_QWORD **)(v48 + 56);
      v68 = sub_327F8(0, (unint64_t *)&qword_3B3240, UIFont_ptr);
      *(_QWORD *)&v67 = v50;
      sub_1F460(&v67, v66);
      swift_bridgeObjectRetain();
      v52 = NSFontAttributeName;
      v53 = v50;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v51);
      v65 = v51;
      sub_1E194(v66, v52, isUniquelyReferenced_nonNull_native);

      swift_bridgeObjectRelease();
      if (qword_3B02F8 != -1)
        swift_once(&qword_3B02F8, sub_2D2C68);
      v55 = (void *)qword_3C7E40;
      v68 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C7F28);
      *(_QWORD *)&v67 = a2;
      sub_1F460(&v67, v66);
      v56 = v55;
      swift_bridgeObjectRetain();
      v57 = swift_isUniquelyReferenced_nonNull_native(v51);
      sub_1E194(v66, v56, v57);

      swift_bridgeObjectRelease();
      sub_2D322C(v51);
      swift_bridgeObjectRelease();

      break;
    default:
      return;
  }
}

uint64_t sub_2D5020(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t result;
  uint64_t v5;
  _BYTE v6[24];

  if (a1 == 4)
    sub_2D36BC();
  v2 = (_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKitP33_04B892DBC0BBAEFCE9764D2FF13A23A619NqmlStringGenerator_attributeStack);
  swift_beginAccess(v1 + OBJC_IVAR____TtC8ShelfKitP33_04B892DBC0BBAEFCE9764D2FF13A23A619NqmlStringGenerator_attributeStack, v6, 33, 0);
  v3 = (_QWORD *)*v2;
  if (!*(_QWORD *)(*v2 + 16))
  {
    __break(1u);
LABEL_8:
    result = (uint64_t)sub_1E5C4(v3);
    v3 = (_QWORD *)result;
    v5 = *(_QWORD *)(result + 16);
    if (v5)
      goto LABEL_6;
    goto LABEL_9;
  }
  result = swift_isUniquelyReferenced_nonNull_native(*v2);
  if ((result & 1) == 0)
    goto LABEL_8;
  v5 = v3[2];
  if (v5)
  {
LABEL_6:
    v3[2] = v5 - 1;
    *v2 = v3;
    swift_endAccess(v6);
    swift_bridgeObjectRelease();
    return (uint64_t)objc_msgSend(*(id *)(v1+ OBJC_IVAR____TtC8ShelfKitP33_04B892DBC0BBAEFCE9764D2FF13A23A619NqmlStringGenerator_accumulator), "endEditing");
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_2D50FC()
{
  id v0;
  NSString v1;
  id v2;
  void *v3;
  id v4;
  NSString v5;

  v0 = objc_allocWithZone((Class)NSMutableString);
  swift_bridgeObjectRetain();
  v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v2 = objc_msgSend(v0, "initWithString:", v1);

  if (qword_3B02E8 != -1)
    swift_once(&qword_3B02E8, sub_2D2B6C);
  v3 = (void *)qword_3C7E30;
  if (qword_3C7E30)
  {
    v4 = objc_msgSend(v2, "length");
    v5 = String._bridgeToObjectiveC()();
    objc_msgSend(v3, "replaceMatchesInString:options:range:withTemplate:", v2, 0, 0, v4, v5);

  }
  static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  sub_2D36BC();

  return swift_bridgeObjectRelease();
}

uint64_t sub_2D5210()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t inited;
  void *v3;
  NSString *v4;
  id v5;
  _QWORD *v6;
  _BYTE v8[72];

  objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC8ShelfKitP33_04B892DBC0BBAEFCE9764D2FF13A23A619NqmlStringGenerator_accumulator), "beginEditing");
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C7F10);
  inited = swift_initStackObject(v1, v8);
  *(_OWORD *)(inited + 16) = xmmword_2EA0D0;
  *(_QWORD *)(inited + 32) = NSParagraphStyleAttributeName;
  v3 = *(void **)(v0
                + OBJC_IVAR____TtC8ShelfKitP33_04B892DBC0BBAEFCE9764D2FF13A23A619NqmlStringGenerator_configuration
                + 48);
  *(_QWORD *)(inited + 64) = sub_327F8(0, (unint64_t *)&unk_3C7F18, NSParagraphStyle_ptr);
  *(_QWORD *)(inited + 40) = v3;
  v4 = NSParagraphStyleAttributeName;
  v5 = v3;
  v6 = (_QWORD *)sub_2881B4(inited);
  sub_2D322C(v6);
  return swift_bridgeObjectRelease();
}

uint64_t sub_2D52D4()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t result;
  uint64_t v4;
  _BYTE v5[24];

  sub_2D36BC();
  v1 = (_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKitP33_04B892DBC0BBAEFCE9764D2FF13A23A619NqmlStringGenerator_attributeStack);
  swift_beginAccess(v0 + OBJC_IVAR____TtC8ShelfKitP33_04B892DBC0BBAEFCE9764D2FF13A23A619NqmlStringGenerator_attributeStack, v5, 33, 0);
  v2 = (_QWORD *)*v1;
  if (!*(_QWORD *)(*v1 + 16))
  {
    __break(1u);
LABEL_6:
    result = (uint64_t)sub_1E5C4(v2);
    v2 = (_QWORD *)result;
    v4 = *(_QWORD *)(result + 16);
    if (v4)
      goto LABEL_4;
    goto LABEL_7;
  }
  result = swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((result & 1) == 0)
    goto LABEL_6;
  v4 = v2[2];
  if (v4)
  {
LABEL_4:
    v2[2] = v4 - 1;
    *v1 = v2;
    swift_endAccess(v5);
    swift_bridgeObjectRelease();
    return (uint64_t)objc_msgSend(*(id *)(v0+ OBJC_IVAR____TtC8ShelfKitP33_04B892DBC0BBAEFCE9764D2FF13A23A619NqmlStringGenerator_accumulator), "endEditing");
  }
LABEL_7:
  __break(1u);
  return result;
}

_BYTE *sub_2D53A8@<X0>(_BYTE *a1@<X0>, BOOL *a2@<X8>)
{
  return sub_1E5D8(a1, a2);
}

_QWORD *sub_2D53C0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;

  return sub_1EB54(*(_QWORD *(**)(uint64_t *__return_ptr))(v1 + 16), a1);
}

unint64_t static FetchSearchEpisodeLockupsIntent.kind.getter()
{
  return 0xD00000000000001FLL;
}

uint64_t sub_2D53F4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_2D5624();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_2D541C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_2D5624();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_2D5444(_QWORD *a1@<X8>)
{
  *a1 = 0xD00000000000001FLL;
  a1[1] = 0x8000000000306BA0;
}

uint64_t FetchSearchEpisodeLockupsIntent.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C7F50);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = a1[3];
  v9 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v8);
  v10 = sub_2D5624();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for FetchSearchEpisodeLockupsIntent.CodingKeys, &type metadata for FetchSearchEpisodeLockupsIntent.CodingKeys, v10, v8, v9);
  v13 = v7;
  __swift_instantiateConcreteTypeFromMangledName(&qword_3B0A90);
  sub_16138(&qword_3B0A98, &qword_3B0A90, (void (*)(void))sub_13E9C, (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v13);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_2D558C(_QWORD *a1)
{
  return FetchSearchEpisodeLockupsIntent.encode(to:)(a1);
}

uint64_t sub_2D55A0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_126594();
  return IntentModel<>.kind.getter(a1, v2);
}

uint64_t sub_2D55C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_2D58B4();
  return CustomJSValueConvertible<>.jsRepresentation(in:)(a1, a2, a3, v6);
}

unint64_t sub_2D5624()
{
  unint64_t result;

  result = qword_3C7F58;
  if (!qword_3C7F58)
  {
    result = swift_getWitnessTable(&unk_306E00);
    atomic_store(result, (unint64_t *)&qword_3C7F58);
  }
  return result;
}

unint64_t sub_2D566C()
{
  unint64_t result;

  result = qword_3C7F60;
  if (!qword_3C7F60)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for FetchSearchEpisodeLockupsIntent);
    atomic_store(result, (unint64_t *)&qword_3C7F60);
  }
  return result;
}

uint64_t sub_2D56B4()
{
  return sub_16138(&qword_3C7F68, &qword_3B0A28, (void (*)(void))sub_2D56E8, (uint64_t)&protocol conformance descriptor for <A> [A]);
}

unint64_t sub_2D56E8()
{
  unint64_t result;

  result = qword_3B2E38;
  if (!qword_3B2E38)
  {
    type metadata accessor for LegacyEpisodeLockup(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for LegacyLockup);
    atomic_store(result, (unint64_t *)&qword_3B2E38);
  }
  return result;
}

ValueMetadata *type metadata accessor for FetchSearchEpisodeLockupsIntent()
{
  return &type metadata for FetchSearchEpisodeLockupsIntent;
}

uint64_t storeEnumTagSinglePayload for FetchSearchEpisodeLockupsIntent.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_2D5780 + 4 * asc_306BB0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_2D57A0 + 4 * byte_306BB5[v4]))();
}

_BYTE *sub_2D5780(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_2D57A0(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_2D57A8(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_2D57B0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_2D57B8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_2D57C0(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for FetchSearchEpisodeLockupsIntent.CodingKeys()
{
  return &type metadata for FetchSearchEpisodeLockupsIntent.CodingKeys;
}

unint64_t sub_2D57E0()
{
  unint64_t result;

  result = qword_3C7F70;
  if (!qword_3C7F70)
  {
    result = swift_getWitnessTable(&unk_306DD8);
    atomic_store(result, (unint64_t *)&qword_3C7F70);
  }
  return result;
}

unint64_t sub_2D5828()
{
  unint64_t result;

  result = qword_3C7F78;
  if (!qword_3C7F78)
  {
    result = swift_getWitnessTable(&unk_306D48);
    atomic_store(result, (unint64_t *)&qword_3C7F78);
  }
  return result;
}

unint64_t sub_2D5870()
{
  unint64_t result;

  result = qword_3C7F80;
  if (!qword_3C7F80)
  {
    result = swift_getWitnessTable(&unk_306D70);
    atomic_store(result, (unint64_t *)&qword_3C7F80);
  }
  return result;
}

unint64_t sub_2D58B4()
{
  unint64_t result;

  result = qword_3C7F88;
  if (!qword_3C7F88)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for FetchSearchEpisodeLockupsIntent);
    atomic_store(result, (unint64_t *)&qword_3C7F88);
  }
  return result;
}

uint64_t OverflowAction.model.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_150C8(v1 + OBJC_IVAR____TtC8ShelfKit14OverflowAction_model, a1);
}

uint64_t OverflowAction.cellType.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit14OverflowAction_cellType);
}

uint64_t OverflowAction.objectGraph.getter()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit14OverflowAction_objectGraph));
}

uint64_t OverflowAction.__allocating_init(model:cellType:asPartOf:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v26;
  uint64_t v27;

  v4 = v3;
  v26 = a1;
  v27 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ActionMetrics(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v15);
  v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  sub_150C8((uint64_t)a1, v18 + OBJC_IVAR____TtC8ShelfKit14OverflowAction_model);
  *(_QWORD *)(v18 + OBJC_IVAR____TtC8ShelfKit14OverflowAction_cellType) = a2;
  *(_QWORD *)(v18 + OBJC_IVAR____TtC8ShelfKit14OverflowAction_objectGraph) = a3;
  v19 = type metadata accessor for ImpressionMetrics(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v17, 1, 1, v19);
  v20 = swift_retain();
  v21 = static ActionMetrics.notInstrumented.getter(v20);
  UUID.init()(v21);
  v22 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
  v24 = v23;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v27);
  *(_QWORD *)(v18 + 16) = v22;
  *(_QWORD *)(v18 + 24) = v24;
  *(_QWORD *)(v18 + 32) = 0;
  *(_QWORD *)(v18 + 40) = 0;
  *(_BYTE *)(v18 + 48) = 32;
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v18 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v14, v11);
  sub_23AB8((uint64_t)v17, v18 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v26);
  return v18;
}

uint64_t OverflowAction.init(model:cellType:asPartOf:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v25;
  uint64_t v26;

  v4 = v3;
  v25 = a1;
  v26 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ActionMetrics(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v15);
  v17 = (char *)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_150C8((uint64_t)a1, v4 + OBJC_IVAR____TtC8ShelfKit14OverflowAction_model);
  *(_QWORD *)(v4 + OBJC_IVAR____TtC8ShelfKit14OverflowAction_cellType) = a2;
  *(_QWORD *)(v4 + OBJC_IVAR____TtC8ShelfKit14OverflowAction_objectGraph) = a3;
  v18 = type metadata accessor for ImpressionMetrics(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 1, 1, v18);
  v19 = swift_retain();
  v20 = static ActionMetrics.notInstrumented.getter(v19);
  UUID.init()(v20);
  v21 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
  v23 = v22;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v26);
  *(_QWORD *)(v4 + 16) = v21;
  *(_QWORD *)(v4 + 24) = v23;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = 0;
  *(_BYTE *)(v4 + 48) = 32;
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v4 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v14, v11);
  sub_23AB8((uint64_t)v17, v4 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v25);
  return v4;
}

void OverflowAction.init(deserializing:using:)()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000033, 0x800000000030A500, "ShelfKit/OverflowAction.swift", 29, 2, 32, 0);
  __break(1u);
}

void OverflowAction.init(uniqueId:title:presentationStyle:actionMetrics:impressionMetrics:)()
{
  _swift_stdlib_reportUnimplementedInitializer("ShelfKit.OverflowAction", 23, "init(uniqueId:title:presentationStyle:actionMetrics:impressionMetrics:)", 71, 0);
  __break(1u);
}

uint64_t sub_2D5D7C()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1((_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit14OverflowAction_model));
  return swift_release();
}

uint64_t OverflowAction.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics;
  v2 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_23B00(v0 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics);
  __swift_destroy_boxed_opaque_existential_1((_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit14OverflowAction_model));
  swift_release();
  return v0;
}

uint64_t OverflowAction.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics;
  v2 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_23B00(v0 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics);
  __swift_destroy_boxed_opaque_existential_1((_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit14OverflowAction_model));
  swift_release();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_2D5ECC()
{
  return type metadata accessor for OverflowAction(0);
}

uint64_t type metadata accessor for OverflowAction(uint64_t a1)
{
  uint64_t result;

  result = qword_3C7FB8;
  if (!qword_3C7FB8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for OverflowAction);
  return result;
}

uint64_t sub_2D5F10(uint64_t a1)
{
  _QWORD v2[3];

  v2[0] = &unk_306EA0;
  v2[1] = (char *)&value witness table for Builtin.NativeObject.Type + 64;
  v2[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  return swift_updateClassMetadata2(a1, 256, 3, v2, a1 + 160);
}

uint64_t method lookup function for OverflowAction(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for OverflowAction);
}

uint64_t dispatch thunk of OverflowAction.__allocating_init(model:cellType:asPartOf:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 184))();
}

uint64_t FindShowEpisodesIntentImplementation.perform(_:objectGraph:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType(0);
  *(_QWORD *)(v1 + 32) = v3;
  v4 = *(_QWORD *)(v3 - 8);
  *(_QWORD *)(v1 + 40) = v4;
  *(_QWORD *)(v1 + 48) = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for TaskPriority(0);
  *(_QWORD *)(v1 + 56) = v5;
  v6 = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v1 + 64) = v6;
  *(_QWORD *)(v1 + 72) = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_OWORD *)(v1 + 80) = *(_OWORD *)(a1 + 24);
  *(_BYTE *)(v1 + 176) = *(_BYTE *)(a1 + 40);
  *(_QWORD *)(v1 + 96) = *(_QWORD *)(a1 + 48);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B68D0);
  v8 = (_QWORD *)swift_task_alloc(async function pointer to BaseObjectGraph.inject<A>(_:)[1]);
  *(_QWORD *)(v1 + 104) = v8;
  *v8 = v1;
  v8[1] = sub_2D6064;
  return BaseObjectGraph.inject<A>(_:)(v1 + 16, v7, v7);
}

uint64_t sub_2D6064()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 104);
  *(_QWORD *)(*(_QWORD *)v1 + 112) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_2D64A4;
  else
    v3 = sub_2D60C8;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_2D60C8()
{
  _QWORD *v0;
  uint64_t ObjectType;
  _QWORD *v2;

  v0[15] = v0[2];
  ObjectType = swift_getObjectType();
  j___sScTss5NeverORszABRs_rlE15currentPriorityScPvgZ();
  v2 = (_QWORD *)swift_task_alloc(async function pointer to NSManagedObjectContextProvider.managedObjectContext(for:)[1]);
  v0[16] = v2;
  *v2 = v0;
  v2[1] = sub_2D6148;
  return NSManagedObjectContextProvider.managedObjectContext(for:)(v0[9], ObjectType);
}

uint64_t sub_2D6148(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 120);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 128);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 64);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 72);
  v6 = *(_QWORD *)(*(_QWORD *)v1 + 56);
  *(_QWORD *)(*(_QWORD *)v1 + 136) = a1;
  swift_task_dealloc(v2);
  swift_unknownObjectRelease(v3);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  return swift_task_switch(sub_2D61CC, 0, 0);
}

id sub_2D61CC()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  id v3;
  NSString v4;
  id v5;
  id result;
  NSArray v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  _QWORD *v16;
  uint64_t v17;

  v1 = *(_BYTE *)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 80);
  static String._unconditionallyBridgeFromObjectiveC(_:)(kMTEpisodeEntityName);
  v3 = objc_allocWithZone((Class)NSFetchRequest);
  v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v5 = objc_msgSend(v3, "initWithEntityName:", v4);
  *(_QWORD *)(v0 + 144) = v5;

  result = objc_msgSend(v5, "setPredicate:", v2);
  if ((v1 & 1) == 0)
  {
    if ((*(_QWORD *)(v0 + 88) & 0x8000000000000000) != 0)
    {
      __break(1u);
      return result;
    }
    objc_msgSend(v5, "setFetchLimit:");
  }
  if (*(_QWORD *)(v0 + 96))
  {
    sub_327F8(0, (unint64_t *)&qword_3BE8C0, NSSortDescriptor_ptr);
    v7.super.isa = Array._bridgeToObjectiveC()().super.isa;
  }
  else
  {
    v7.super.isa = 0;
  }
  v8 = *(void **)(v0 + 136);
  v10 = *(_QWORD *)(v0 + 40);
  v9 = *(_QWORD *)(v0 + 48);
  v11 = *(_QWORD *)(v0 + 32);
  objc_msgSend(v5, "setSortDescriptors:", v7.super.isa);

  objc_msgSend(v5, "setResultType:", 1);
  v12 = swift_allocObject(&unk_390270, 32, 7);
  *(_QWORD *)(v0 + 152) = v12;
  *(_QWORD *)(v12 + 16) = v8;
  *(_QWORD *)(v12 + 24) = v5;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v10 + 104))(v9, enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:), v11);
  v13 = async function pointer to NSManagedObjectContext.perform<A>(schedule:_:)[1];
  v14 = v8;
  v15 = v5;
  v16 = (_QWORD *)swift_task_alloc(v13);
  *(_QWORD *)(v0 + 160) = v16;
  v17 = __swift_instantiateConcreteTypeFromMangledName(qword_3B7970);
  *v16 = v0;
  v16[1] = sub_2D63B0;
  return (id)NSManagedObjectContext.perform<A>(schedule:_:)(v0 + 24, *(_QWORD *)(v0 + 48), sub_2D6768, v12, v17);
}

uint64_t sub_2D63B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 160);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 40);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 48);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 32);
  *(_QWORD *)(*(_QWORD *)v1 + 168) = v0;
  swift_task_dealloc(v2);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  swift_release();
  if (v0)
    v6 = sub_2D64E4;
  else
    v6 = sub_2D6444;
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_2D6444()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(void **)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 48);

  v4 = *(_QWORD *)(v0 + 24);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v4);
}

uint64_t sub_2D64A4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2D64E4()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;

  v1 = *(void **)(v0 + 144);

  v2 = *(_QWORD *)(v0 + 48);
  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2D6530@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  id v17;
  _QWORD *v18;
  uint64_t v19;

  v5 = sub_327F8(0, (unint64_t *)&unk_3C4440, NSManagedObjectID_ptr);
  result = NSManagedObjectContext.fetch<A>(_:)(a1, v5);
  if (v2)
    return result;
  v7 = result;
  if (!((unint64_t)result >> 62))
  {
    v8 = *(_QWORD *)((char *)&dword_10 + (result & 0xFFFFFFFFFFFFF8));
    if (v8)
      goto LABEL_4;
LABEL_20:
    result = swift_bridgeObjectRelease();
    *a2 = _swiftEmptyArrayStorage;
    return result;
  }
  if (result < 0)
    v19 = result;
  else
    v19 = result & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  v8 = _CocoaArrayWrapper.endIndex.getter(v19);
  swift_bridgeObjectRelease();
  if (!v8)
    goto LABEL_20;
LABEL_4:
  result = sub_1808DC(0, v8 & ~(v8 >> 63), 0);
  if (v8 < 0)
  {
    __break(1u);
  }
  else
  {
    if ((v7 & 0xC000000000000001) != 0)
    {
      v9 = 0;
      do
      {
        v10 = specialized _ArrayBuffer._getElementSlowPath(_:)(v9);
        v12 = _swiftEmptyArrayStorage[2];
        v11 = _swiftEmptyArrayStorage[3];
        if (v12 >= v11 >> 1)
          sub_1808DC(v11 > 1, v12 + 1, 1);
        ++v9;
        _swiftEmptyArrayStorage[2] = v12 + 1;
        v13 = &_swiftEmptyArrayStorage[3 * v12];
        v13[4] = v10;
        v13[5] = 0;
        *((_BYTE *)v13 + 48) = 2;
      }
      while (v8 != v9);
    }
    else
    {
      v14 = 0;
      do
      {
        v15 = _swiftEmptyArrayStorage[2];
        v16 = _swiftEmptyArrayStorage[3];
        v17 = *(id *)(v7 + 8 * v14 + 32);
        if (v15 >= v16 >> 1)
          sub_1808DC(v16 > 1, v15 + 1, 1);
        ++v14;
        _swiftEmptyArrayStorage[2] = v15 + 1;
        v18 = &_swiftEmptyArrayStorage[3 * v15];
        v18[4] = v17;
        v18[5] = 0;
        *((_BYTE *)v18 + 48) = 2;
      }
      while (v8 != v14);
    }
    result = swift_bridgeObjectRelease();
    *a2 = _swiftEmptyArrayStorage;
  }
  return result;
}

uint64_t sub_2D673C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_2D6768@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_2D6530(*(_QWORD *)(v1 + 24), a1);
}

unint64_t sub_2D6784()
{
  unint64_t result;

  result = qword_3C80B0;
  if (!qword_3C80B0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for FindShowEpisodesIntent);
    atomic_store(result, (unint64_t *)&qword_3C80B0);
  }
  return result;
}

uint64_t sub_2D67C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;

  *(_QWORD *)(v2 + 16) = a1;
  v4 = (_QWORD *)swift_task_alloc(dword_3C80A4);
  *(_QWORD *)(v2 + 24) = v4;
  *v4 = v2;
  v4[1] = sub_81DB0;
  return FindShowEpisodesIntentImplementation.perform(_:objectGraph:)(a2);
}

ValueMetadata *type metadata accessor for FindShowEpisodesIntentImplementation()
{
  return &type metadata for FindShowEpisodesIntentImplementation;
}

uint64_t EntitlementsActionProviding.entitlementsAction.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  id v8;
  char v9;
  char v10;
  id v11;
  id v12;
  int v13;
  uint64_t v14;

  v4 = (*(uint64_t (**)(void))(a2 + 8))();
  if (!v5)
    return 0;
  v6 = v4;
  v7 = v5;
  v8 = objc_msgSend((id)objc_opt_self(UITraitCollection), "currentTraitCollection");
  v9 = UITraitCollection.interfaceIdiomIsMac.getter(v8);

  v10 = objc_msgSend((id)objc_opt_self(PFClientUtil), "isRunningOnVisionOS");
  v11 = objc_allocWithZone((Class)LSApplicationRecord);
  swift_bridgeObjectRetain();
  v12 = sub_2D8194(v6, v7, 0);
  if (v12)
  {

    v13 = 1;
  }
  else
  {
    v13 = 0;
  }
  v14 = sub_2D69B8(v9 & 1, v10, v13, v6, v7, a1, a2);
  if (!v14)
  {
    v14 = sub_2D7370(v9 & 1, v13, v6, v7, a1, a2);
    if (!v14)
      v14 = sub_2D7B60(v9 & 1, v13, v6, v7, a1, a2);
  }
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t sub_2D69B8(char a1, char a2, int a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  _QWORD *boxed_opaque_existential_2Tm;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(_BYTE *, uint64_t);
  _BYTE *v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __n128 v59;
  uint64_t v60;
  void (*v61)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v62;
  uint64_t v63;
  void (*v64)(uint64_t, uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(uint64_t *, _QWORD);
  _QWORD *v69;
  _QWORD *v70;
  unint64_t v71;
  uint64_t result;
  void (*v73)(_BYTE *, _QWORD);
  _BYTE v74[12];
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _BYTE *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _BYTE v85[32];
  uint64_t v86;
  _BYTE v87[24];
  _BYTE v88[24];
  char v89[24];
  uint64_t v90[3];
  void *v91;
  unint64_t v92;

  v81 = a7;
  v80 = a6;
  v82 = a4;
  LODWORD(v84) = a3;
  v78 = type metadata accessor for ActionMetrics(0);
  v77 = *(_QWORD *)(v78 - 8);
  __chkstk_darwin(v78);
  v79 = &v74[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = type metadata accessor for FlowDestination(0);
  __chkstk_darwin(v11);
  v13 = (uint64_t *)&v74[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = type metadata accessor for Logger(0);
  v83 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v16 = &v74[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v17);
  v19 = &v74[-v18];
  __chkstk_darwin(v20);
  v23 = &v74[-v22];
  if ((a1 & 1) != 0
    || (a2 & 1) != 0
    || (v84 & 1) != 0
    || (v24 = type metadata accessor for Podcasts(0),
        v91 = (void *)v24,
        v92 = sub_24DB34(),
        boxed_opaque_existential_2Tm = __swift_allocate_boxed_opaque_existential_2Tm(v90),
        (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v24 - 8) + 104))(boxed_opaque_existential_2Tm, enum case for Podcasts.inAppProductPage(_:), v24), LOBYTE(v24) = isFeatureEnabled(_:)(v90), v21 = __swift_destroy_boxed_opaque_existential_1(v90), (v24 & 1) == 0))
  {
    static Logger.purchases.getter(v21);
    v38 = swift_bridgeObjectRetain_n(a5, 2);
    v39 = Logger.logObject.getter(v38);
    v40 = static os_log_type_t.default.getter(v39);
    if (os_log_type_enabled(v39, v40))
    {
      v41 = swift_slowAlloc(30, -1);
      v42 = swift_slowAlloc(32, -1);
      v90[0] = v42;
      *(_DWORD *)v41 = 136315906;
      swift_bridgeObjectRetain();
      v86 = sub_69298(v82, a5, v90);
      v76 = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, v87);
      swift_bridgeObjectRelease_n(a5, 3);
      *(_WORD *)(v41 + 12) = 1024;
      LODWORD(v86) = a1 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, (char *)&v86 + 4);
      *(_WORD *)(v41 + 18) = 1024;
      LODWORD(v86) = a2 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, (char *)&v86 + 4);
      *(_WORD *)(v41 + 24) = 1024;
      LODWORD(v86) = v84 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, (char *)&v86 + 4);
      _os_log_impl(&dword_0, v39, v40, "Not displaying SKStoreProductViewController for bundleID: %s - isMac: %{BOOL}d, isVisionOS: %{BOOL}d, applicationIsInstalled: %{BOOL}d", (uint8_t *)v41, 0x1Eu);
      swift_arrayDestroy(v42, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v42, -1, -1);
      swift_slowDealloc(v41, -1, -1);

      (*(void (**)(_BYTE *, uint64_t))(v83 + 8))(v16, v76);
      return 0;
    }

    swift_bridgeObjectRelease_n(a5, 2);
    v43 = *(void (**)(_BYTE *, uint64_t))(v83 + 8);
    v44 = v16;
LABEL_21:
    v43(v44, v14);
    return 0;
  }
  v26 = (*(uint64_t (**)(uint64_t))(v81 + 16))(v80);
  if ((v27 & 1) != 0)
  {
    static Logger.purchases.getter(v26);
    v45 = swift_bridgeObjectRetain_n(a5, 2);
    v46 = Logger.logObject.getter(v45);
    v47 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v46, v47))
    {
      v48 = (uint8_t *)swift_slowAlloc(12, -1);
      v49 = swift_slowAlloc(32, -1);
      v90[0] = v49;
      *(_DWORD *)v48 = 136315138;
      swift_bridgeObjectRetain();
      v86 = sub_69298(v82, a5, v90);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, v87);
      swift_bridgeObjectRelease_n(a5, 3);
      _os_log_impl(&dword_0, v46, v47, "Cannot display SKStoreProductViewController because we don't have the adamID of the app. bundleID: %s", v48, 0xCu);
      swift_arrayDestroy(v49, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v49, -1, -1);
      swift_slowDealloc(v48, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a5, 2);
    }
    v43 = *(void (**)(_BYTE *, uint64_t))(v83 + 8);
    v44 = v19;
    goto LABEL_21;
  }
  v28 = v26;
  static Logger.purchases.getter(v26);
  v29 = swift_bridgeObjectRetain_n(a5, 2);
  v30 = Logger.logObject.getter(v29);
  v31 = static os_log_type_t.default.getter(v30);
  v32 = v31;
  if (os_log_type_enabled(v30, v31))
  {
    v33 = swift_slowAlloc(40, -1);
    v84 = swift_slowAlloc(64, -1);
    v90[0] = v84;
    *(_DWORD *)v33 = 136316162;
    v86 = v28;
    v34 = sub_144B4();
    v75 = v32;
    v35 = BinaryInteger.description.getter(&type metadata for UInt64, v34);
    v86 = sub_69298(v35, v36, v90);
    v76 = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, v87);
    swift_bridgeObjectRelease();
    *(_WORD *)(v33 + 12) = 2080;
    swift_bridgeObjectRetain();
    v86 = sub_69298(v82, a5, v90);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, v87);
    swift_bridgeObjectRelease_n(a5, 3);
    *(_WORD *)(v33 + 22) = 1024;
    LODWORD(v86) = 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, (char *)&v86 + 4);
    *(_WORD *)(v33 + 28) = 1024;
    LODWORD(v86) = 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, (char *)&v86 + 4);
    *(_WORD *)(v33 + 34) = 1024;
    LODWORD(v86) = 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, (char *)&v86 + 4);
    _os_log_impl(&dword_0, v30, (os_log_type_t)v75, "Creating FlowAction to display SKStoreProductViewController for appAdamID: %s - bundleID: %s, isMac: %{BOOL}d, isVisionOS: %{BOOL}d, applicationIsInstalled: %{BOOL}d", (uint8_t *)v33, 0x28u);
    v37 = v84;
    swift_arrayDestroy(v84, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1, -1);
    swift_slowDealloc(v33, -1, -1);

    (*(void (**)(_BYTE *, uint64_t))(v83 + 8))(v23, v76);
  }
  else
  {

    swift_bridgeObjectRelease_n(a5, 2);
    (*(void (**)(_BYTE *, uint64_t))(v83 + 8))(v23, v14);
  }
  v50 = v80;
  v51 = (*(uint64_t (**)(uint64_t, uint64_t))(v81 + 24))(v80, v81);
  *v13 = v28;
  v13[1] = v51;
  v13[2] = v52;
  v53 = swift_storeEnumTagMultiPayload(v13, v11, 31);
  LOBYTE(v90[0]) = 0;
  LOBYTE(v86) = 0;
  v54 = (uint64_t)v79;
  static ActionMetrics.notInstrumented.getter(v53);
  v55 = type metadata accessor for FlowAction(0);
  swift_allocObject(v55, *(unsigned int *)(v55 + 48), *(unsigned __int16 *)(v55 + 52));
  v56 = FlowAction.init(_:id:title:presentationContext:animationBehavior:presentationStyle:destinationPageHeader:actionMetrics:)((uint64_t)v13, 0, 0, 0, 0, (char *)v90, 0, 48, (char *)&v86, v54);
  v57 = sub_2D7FF4(v50);
  if (!v57)
    return v56;
  v58 = v57 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics;
  v59 = swift_beginAccess(v57 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v89, 0, 0);
  v60 = v77;
  v61 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v77 + 16);
  v62 = v78;
  v61(v54, v58, v78, v59);
  v63 = v56 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics;
  swift_beginAccess(v56 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v90, 33, 0);
  v64 = *(void (**)(uint64_t, uint64_t, uint64_t))(v60 + 40);
  swift_retain();
  v64(v63, v54, v62);
  swift_endAccess(v90);
  swift_release();
  v65 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v61)(v54, v63, v62);
  v66 = ActionMetrics.data.getter(v65);
  (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v54, v62);
  v67 = *(_QWORD *)(v66 + 16);
  swift_bridgeObjectRelease();
  if (!v67)
  {
    swift_release();
    return v56;
  }
  v91 = &type metadata for String;
  v90[0] = 0x65726F7453707061;
  v90[1] = 0xE800000000000000;
  swift_beginAccess(v63, v88, 33, 0);
  swift_retain();
  v68 = (void (*)(uint64_t *, _QWORD))ActionMetrics.data.modify(&v86);
  v70 = v69;
  v71 = *v69;
  result = swift_isUniquelyReferenced_nonNull_native(*v69);
  *v70 = v71;
  if ((result & 1) != 0)
  {
    if (*(_QWORD *)(v71 + 16))
    {
LABEL_18:
      type metadata accessor for MetricsData(0);
      v73 = (void (*)(_BYTE *, _QWORD))MetricsData.fields.modify(v85);
      sub_166FC((uint64_t)v90, 0x65526E6F69746361, 0xEC000000746C7573);
      v73(v85, 0);
      v68(&v86, 0);
      swift_endAccess(v88);
      swift_release();
      swift_release();
      return v56;
    }
  }
  else
  {
    result = sub_1E3D4(v71);
    *v70 = result;
    if (*(_QWORD *)(result + 16))
      goto LABEL_18;
  }
  __break(1u);
  return result;
}

uint64_t sub_2D7370(uint64_t a1, int a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  char v8;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t result;
  uint64_t v46;
  uint64_t v47;
  __n128 v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t, uint64_t, __n128);
  char *v51;
  uint64_t v52;
  char *v53;
  void (*v54)(char *, char *, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(uint64_t *, _QWORD);
  _QWORD *v59;
  _QWORD *v60;
  unint64_t v61;
  void (*v62)(_BYTE *, _QWORD);
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _BYTE v74[32];
  uint64_t v75;
  _BYTE v76[24];
  _BYTE v77[24];
  uint64_t v78;
  _QWORD v79[3];
  char v80[32];

  v72 = a6;
  v70 = a3;
  LODWORD(v73) = a2;
  v8 = a1;
  v10 = *(_QWORD *)(a5 - 8);
  __chkstk_darwin(a1);
  v12 = (char *)&v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = type metadata accessor for ActionMetrics(0);
  v68 = *(_QWORD *)(v69 - 8);
  __chkstk_darwin(v69);
  v67 = (char *)&v63 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Logger(0);
  v71 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v16 = (char *)&v63 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v63 - v20;
  if ((v8 & 1) != 0 || (v73 & 1) == 0 || (v18 = (*(uint64_t (**)(uint64_t, __n128))(v72 + 32))(a5, v19), !v22))
  {
LABEL_8:
    static Logger.purchases.getter(v18);
    v32 = a5;
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v6, a5);
    v33 = swift_bridgeObjectRetain_n(a4, 2);
    v34 = Logger.logObject.getter(v33);
    v35 = static os_log_type_t.default.getter(v34);
    if (os_log_type_enabled(v34, v35))
    {
      v36 = swift_slowAlloc(28, -1);
      v69 = v32;
      v37 = v36;
      v38 = swift_slowAlloc(64, -1);
      v75 = v38;
      *(_DWORD *)v37 = 136315650;
      swift_bridgeObjectRetain();
      v78 = sub_69298(v70, a4, &v75);
      v70 = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, v79);
      swift_bridgeObjectRelease_n(a4, 3);
      *(_WORD *)(v37 + 12) = 1024;
      LODWORD(v78) = v73 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, (char *)&v78 + 4);
      *(_WORD *)(v37 + 18) = 2080;
      v39 = v69;
      v78 = (*(uint64_t (**)(uint64_t))(v72 + 32))(v69);
      v79[0] = v40;
      v41 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2420);
      v42 = String.init<A>(describing:)(&v78, v41);
      v78 = sub_69298(v42, v43, &v75);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, v79);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v39);
      _os_log_impl(&dword_0, v34, v35, "Not creating ExternalUrlAction for deeplink into offer for bundleID: %s - applicationIsInstalled: %{BOOL}d, externalAppOfferDeeplink: %s", (uint8_t *)v37, 0x1Cu);
      swift_arrayDestroy(v38, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v38, -1, -1);
      swift_slowDealloc(v37, -1, -1);

      (*(void (**)(char *, uint64_t))(v71 + 8))(v16, v70);
    }
    else
    {
      swift_bridgeObjectRelease_n(a4, 2);
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v32);

      (*(void (**)(char *, uint64_t))(v71 + 8))(v16, v14);
    }
    return 0;
  }
  v23 = v22;
  v66 = v6;
  v24 = v18;
  v25 = type metadata accessor for ExternalUrlAction(0);
  swift_allocObject(v25, *(unsigned int *)(v25 + 48), *(unsigned __int16 *)(v25 + 52));
  swift_bridgeObjectRetain();
  v64 = v24;
  v26 = ExternalUrlAction.init(title:urlString:isSensitive:presentationStyle:requiresSignedInUser:)(0, 0, v24, v23, 0, 0, 1);
  v65 = v26;
  if (!v26)
  {
    v18 = swift_bridgeObjectRelease();
    v6 = v66;
    goto LABEL_8;
  }
  static Logger.purchases.getter(v26);
  swift_bridgeObjectRetain_n(a4, 2);
  v27 = swift_bridgeObjectRetain();
  v28 = Logger.logObject.getter(v27);
  v29 = static os_log_type_t.default.getter(v28);
  if (os_log_type_enabled(v28, v29))
  {
    v30 = swift_slowAlloc(28, -1);
    v73 = swift_slowAlloc(64, -1);
    v78 = v73;
    *(_DWORD *)v30 = 136315650;
    swift_bridgeObjectRetain();
    v75 = sub_69298(v70, a4, &v78);
    v70 = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, v76);
    swift_bridgeObjectRelease_n(a4, 3);
    *(_WORD *)(v30 + 12) = 1024;
    LODWORD(v75) = 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, (char *)&v75 + 4);
    *(_WORD *)(v30 + 18) = 2080;
    swift_bridgeObjectRetain();
    v75 = sub_69298(v64, v23, &v78);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, v76);
    swift_bridgeObjectRelease_n(v23, 3);
    _os_log_impl(&dword_0, v28, v29, "Creating ExternalUrlAction for deeplink into offer for bundleID: %s - applicationIsInstalled: %{BOOL}d, externalAppOfferDeeplink: %s", (uint8_t *)v30, 0x1Cu);
    v31 = v73;
    swift_arrayDestroy(v73, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v31, -1, -1);
    swift_slowDealloc(v30, -1, -1);

    (*(void (**)(char *, uint64_t))(v71 + 8))(v21, v70);
  }
  else
  {

    swift_bridgeObjectRelease_n(v23, 2);
    swift_bridgeObjectRelease_n(a4, 2);
    (*(void (**)(char *, uint64_t))(v71 + 8))(v21, v14);
  }
  v46 = sub_2D7FF4(a5);
  if (!v46)
    return (uint64_t)v65;
  v47 = v46 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics;
  v48 = swift_beginAccess(v46 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v80, 0, 0);
  v49 = v68;
  v50 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v68 + 16);
  v51 = v67;
  v52 = v69;
  v50(v67, v47, v69, v48);
  v44 = v65;
  v53 = (char *)v65 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics;
  swift_beginAccess((char *)v65 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, &v78, 33, 0);
  v54 = *(void (**)(char *, char *, uint64_t))(v49 + 40);
  swift_retain();
  v54(v53, v51, v52);
  swift_endAccess(&v78);
  swift_release();
  v55 = ((uint64_t (*)(char *, char *, uint64_t))v50)(v51, v53, v52);
  v56 = ActionMetrics.data.getter(v55);
  (*(void (**)(char *, uint64_t))(v49 + 8))(v51, v52);
  v57 = *(_QWORD *)(v56 + 16);
  swift_bridgeObjectRelease();
  if (!v57)
  {
    swift_release();
    return (uint64_t)v44;
  }
  v79[2] = &type metadata for String;
  v78 = 7368801;
  v79[0] = 0xE300000000000000;
  swift_beginAccess(v53, v77, 33, 0);
  swift_retain();
  v58 = (void (*)(uint64_t *, _QWORD))ActionMetrics.data.modify(&v75);
  v60 = v59;
  v61 = *v59;
  result = swift_isUniquelyReferenced_nonNull_native(*v59);
  *v60 = v61;
  if ((result & 1) != 0)
  {
    if (*(_QWORD *)(v61 + 16))
    {
LABEL_18:
      type metadata accessor for MetricsData(0);
      v62 = (void (*)(_BYTE *, _QWORD))MetricsData.fields.modify(v74);
      sub_166FC((uint64_t)&v78, 0x65526E6F69746361, 0xEC000000746C7573);
      v62(v74, 0);
      v58(&v75, 0);
      swift_endAccess(v77);
      swift_release();
      swift_release();
      return (uint64_t)v44;
    }
  }
  else
  {
    result = sub_1E3D4(v61);
    *v60 = result;
    if (*(_QWORD *)(result + 16))
      goto LABEL_18;
  }
  __break(1u);
  return result;
}

uint64_t sub_2D7B60(char a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t (*v21)(uint64_t, uint64_t, __n128);
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  void (*v38)(uint64_t, _BYTE *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  __n128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(_BYTE *, _QWORD);
  _QWORD *v46;
  _QWORD *v47;
  unint64_t v48;
  uint64_t result;
  void (*v50)(_BYTE *, _QWORD);
  _BYTE v51[12];
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59[24];
  _BYTE v60[32];
  _BYTE v61[32];
  _BYTE v62[24];
  _QWORD v63[4];
  char v64[32];

  v54 = a4;
  v53 = a3;
  v55 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v55 - 8);
  __chkstk_darwin(v55);
  v13 = &v51[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = type metadata accessor for ActionMetrics(0);
  v58 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v16 = &v51[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  v18 = __chkstk_darwin(v17);
  v20 = &v51[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v21 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(a6 + 40);
  v57 = v6;
  v56 = a5;
  if ((v21(a5, a6, v18) & 1) != 0 || (a1 & 1) != 0 || (a2 & 1) == 0)
  {
    v23 = sub_2D7FF4(v56);
    v33 = v58;
    if ((a2 & 1) == 0)
      return v23;
  }
  else
  {
    v52 = a2;
    v22 = type metadata accessor for OpenExternalAppAction(0);
    v23 = swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
    v24 = (_QWORD *)(v23 + OBJC_IVAR____TtC8ShelfKit21OpenExternalAppAction_bundleId);
    v25 = v54;
    *v24 = v53;
    v24[1] = v25;
    *(_BYTE *)(v23 + OBJC_IVAR____TtC8ShelfKit21OpenExternalAppAction_requiresSignedInUser) = 1;
    v26 = type metadata accessor for ImpressionMetrics(0);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v20, 1, 1, v26);
    v27 = swift_bridgeObjectRetain();
    v28 = static ActionMetrics.notInstrumented.getter(v27);
    UUID.init()(v28);
    v29 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
    v30 = v14;
    v32 = v31;
    (*(void (**)(_BYTE *, uint64_t))(v11 + 8))(v13, v55);
    *(_QWORD *)(v23 + 16) = v29;
    *(_QWORD *)(v23 + 24) = v32;
    v14 = v30;
    *(_QWORD *)(v23 + 32) = 0;
    *(_QWORD *)(v23 + 40) = 0;
    *(_BYTE *)(v23 + 48) = 32;
    v33 = v58;
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v58 + 32))(v23 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v16, v30);
    sub_23AB8((uint64_t)v20, v23 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics);
    v34 = sub_2D7FF4(v56);
    if (v34)
    {
      v35 = v34 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics;
      v36 = swift_beginAccess(v34 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v59, 0, 0);
      (*(void (**)(_BYTE *, uint64_t, uint64_t, __n128))(v33 + 16))(v16, v35, v30, v36);
      v37 = v23 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics;
      swift_beginAccess(v23 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v63, 33, 0);
      v38 = *(void (**)(uint64_t, _BYTE *, uint64_t))(v33 + 40);
      swift_retain();
      v39 = v37;
      v14 = v30;
      v38(v39, v16, v30);
      swift_endAccess(v63);
      swift_release();
      swift_release();
    }
    if ((v52 & 1) == 0)
      return v23;
  }
  if (!v23)
    return v23;
  v40 = v23 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics;
  v41 = swift_beginAccess(v23 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v64, 0, 0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, __n128))(v33 + 16))(v16, v40, v14, v41);
  v42 = swift_retain();
  v43 = ActionMetrics.data.getter(v42);
  (*(void (**)(_BYTE *, uint64_t))(v33 + 8))(v16, v14);
  v44 = *(_QWORD *)(v43 + 16);
  swift_bridgeObjectRelease();
  if (!v44)
  {
LABEL_14:
    swift_release();
    return v23;
  }
  v63[3] = &type metadata for String;
  v63[0] = 7368801;
  v63[1] = 0xE300000000000000;
  swift_beginAccess(v40, v62, 33, 0);
  v45 = (void (*)(_BYTE *, _QWORD))ActionMetrics.data.modify(v61);
  v47 = v46;
  v48 = *v46;
  result = swift_isUniquelyReferenced_nonNull_native(*v46);
  *v47 = v48;
  if ((result & 1) != 0)
  {
    if (*(_QWORD *)(v48 + 16))
    {
LABEL_13:
      type metadata accessor for MetricsData(0);
      v50 = (void (*)(_BYTE *, _QWORD))MetricsData.fields.modify(v60);
      sub_166FC((uint64_t)v63, 0x65526E6F69746361, 0xEC000000746C7573);
      v50(v60, 0);
      v45(v61, 0);
      swift_endAccess(v62);
      goto LABEL_14;
    }
  }
  else
  {
    result = sub_1E3D4(v48);
    *v47 = result;
    if (*(_QWORD *)(result + 16))
      goto LABEL_13;
  }
  __break(1u);
  return result;
}

uint64_t sub_2D7FF4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t, __n128);
  uint64_t v15;
  char *v16;
  uint64_t *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  char *v24;

  v2 = v1;
  __chkstk_darwin(a1);
  v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v8 = (char *)&v23 - v7;
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v23 - v11;
  v14 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v13 + 16);
  v14((char *)&v23 - v11, v2, a1, v10);
  v15 = type metadata accessor for UpsellBanner(0);
  if (swift_dynamicCast(&v24, v12, a1, v15, 6))
  {
    v16 = v24;
    v17 = &OBJC_IVAR____TtC8ShelfKit12UpsellBanner_action;
LABEL_7:
    v20 = *(_QWORD *)&v16[*v17];
    swift_retain();
    swift_release();
    return v20;
  }
  ((void (*)(char *, uint64_t, uint64_t))v14)(v8, v2, a1);
  v18 = type metadata accessor for UpsellInformation(0);
  if (!swift_dynamicCast(&v24, v8, a1, v18, 6))
  {
    ((void (*)(char *, uint64_t, uint64_t))v14)(v5, v2, a1);
    v21 = type metadata accessor for ShowHeader(0);
    if (!swift_dynamicCast(&v24, v5, a1, v21, 6))
      return 0;
    v16 = v24;
    v17 = &OBJC_IVAR____TtC8ShelfKit10ShowHeader_secondaryButtonAction;
    goto LABEL_7;
  }
  v19 = v24;
  v20 = *(_QWORD *)&v24[OBJC_IVAR____TtC8ShelfKit17UpsellInformation_externalUrlAction];
  swift_retain();

  return v20;
}

id sub_2D8194(uint64_t a1, uint64_t a2, char a3)
{
  void *v3;
  NSString v6;
  id v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  id v13;

  v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v13 = 0;
  v7 = objc_msgSend(v3, "initWithBundleIdentifier:allowPlaceholder:error:", v6, a3 & 1, &v13);

  v8 = v13;
  if (v7)
  {
    v9 = v13;
  }
  else
  {
    v10 = v13;
    _convertNSErrorToError(_:)(v8);

    swift_willThrow(v11);
  }
  return v7;
}

void sub_2D826C(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2);
  __asm { BR              X10 }
}

Swift::Int sub_2D82B0()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0xD000000000000014, 0x8000000000309140);
  swift_bridgeObjectRelease(0x8000000000309140);
  return Hasher._finalize()();
}

void sub_2D8368(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2);
  __asm { BR              X10 }
}

Swift::Int sub_2D83B8()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x7473616F74, 0xE500000000000000);
  swift_bridgeObjectRelease(0xE500000000000000);
  return Hasher._finalize()();
}

void sub_2D8430(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2);
  __asm { BR              X10 }
}

Swift::Int sub_2D848C()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0xD000000000000010, 0x8000000000309780);
  swift_bridgeObjectRelease(0x8000000000309780);
  return Hasher._finalize()();
}

void sub_2D8508(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2);
  __asm { BR              X10 }
}

Swift::Int sub_2D8560()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x617461646174656DLL, 0xE800000000000000);
  swift_bridgeObjectRelease(0xE800000000000000);
  return Hasher._finalize()();
}

void sub_2D85F0(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2);
  __asm { BR              X10 }
}

Swift::Int sub_2D863C()
{
  uint64_t v1;

  String.hash(into:)(&v1, 25705, 0xE200000000000000);
  swift_bridgeObjectRelease(0xE200000000000000);
  return Hasher._finalize()();
}

void sub_2D86B4(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2);
  __asm { BR              X10 }
}

Swift::Int sub_2D86F8()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x656C746974, 0xE500000000000000);
  swift_bridgeObjectRelease(0xE500000000000000);
  return Hasher._finalize()();
}

void sub_2D8784(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2);
  __asm { BR              X10 }
}

Swift::Int sub_2D87D4()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x644972657375, 0xE600000000000000);
  swift_bridgeObjectRelease(0xE600000000000000);
  return Hasher._finalize()();
}

void sub_2D8870(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_2D88B0(uint64_t a1)
{
  String.hash(into:)(a1, 0x644972657375, 0xE600000000000000);
  return swift_bridgeObjectRelease(0xE600000000000000);
}

void sub_2D8938(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_2D896C(uint64_t a1)
{
  String.hash(into:)(a1, 0xD000000000000014, 0x8000000000309140);
  return swift_bridgeObjectRelease(0x8000000000309140);
}

void sub_2D8A10(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_2D8A48(uint64_t a1)
{
  String.hash(into:)(a1, 1414745936, 0xE400000000000000);
  return swift_bridgeObjectRelease(0xE400000000000000);
}

void sub_2D8AE0(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_2D8B1C(uint64_t a1)
{
  uint64_t v1;

  String.hash(into:)(a1, 0x70756B636F4CLL, v1);
  return swift_bridgeObjectRelease(v1);
}

void sub_2D8BE0(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_2D8C28(uint64_t a1)
{
  String.hash(into:)(a1, 0xD000000000000013, 0x8000000000308CD0);
  return swift_bridgeObjectRelease(0x8000000000308CD0);
}

void sub_2D8CE0(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_2D8D2C(uint64_t a1)
{
  String.hash(into:)(a1, 0xD000000000000010, 0x8000000000309780);
  return swift_bridgeObjectRelease(0x8000000000309780);
}

void sub_2D8D94(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_2D8DC8(uint64_t a1)
{
  String.hash(into:)(a1, 0x656C746974, 0xE500000000000000);
  return swift_bridgeObjectRelease(0xE500000000000000);
}

void sub_2D8E40(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  __asm { BR              X10 }
}

Swift::Int sub_2D8E88()
{
  uint64_t v1;

  String.hash(into:)(&v1, 25705, 0xE200000000000000);
  swift_bridgeObjectRelease(0xE200000000000000);
  return Hasher._finalize()();
}

void sub_2D8F00(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  __asm { BR              X10 }
}

Swift::Int sub_2D8F40()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x656C746974, 0xE500000000000000);
  swift_bridgeObjectRelease(0xE500000000000000);
  return Hasher._finalize()();
}

void sub_2D8FCC(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  __asm { BR              X10 }
}

Swift::Int sub_2D901C()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x7469784565676170, 0xE800000000000000);
  swift_bridgeObjectRelease(0xE800000000000000);
  return Hasher._finalize()();
}

void sub_2D90CC(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  __asm { BR              X10 }
}

Swift::Int sub_2D9120()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x617461646174656DLL, 0xE800000000000000);
  swift_bridgeObjectRelease(0xE800000000000000);
  return Hasher._finalize()();
}

void sub_2D91B0(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  __asm { BR              X10 }
}

Swift::Int sub_2D9208()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0xD000000000000010, 0x8000000000309780);
  swift_bridgeObjectRelease(0x8000000000309780);
  return Hasher._finalize()();
}

void sub_2D9284(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  __asm { BR              X10 }
}

Swift::Int sub_2D92D8()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0xD000000000000013, 0x8000000000308CD0);
  swift_bridgeObjectRelease(0x8000000000308CD0);
  return Hasher._finalize()();
}

void sub_2D93A4(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  __asm { BR              X10 }
}

Swift::Int sub_2D93F0()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x7473616F74, 0xE500000000000000);
  swift_bridgeObjectRelease(0xE500000000000000);
  return Hasher._finalize()();
}

void sub_2D9468(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  __asm { BR              X10 }
}

Swift::Int sub_2D94B0()
{
  uint64_t v0;
  uint64_t v2;

  String.hash(into:)(&v2, 0x70756B636F4CLL, v0);
  swift_bridgeObjectRelease(v0);
  return Hasher._finalize()();
}

void sub_2D9588(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  __asm { BR              X10 }
}

Swift::Int sub_2D95CC()
{
  uint64_t v1;

  String.hash(into:)(&v1, 1414745936, 0xE400000000000000);
  swift_bridgeObjectRelease(0xE400000000000000);
  return Hasher._finalize()();
}

void sub_2D9678(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  __asm { BR              X10 }
}

Swift::Int sub_2D96B8()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0xD000000000000014, 0x8000000000309140);
  swift_bridgeObjectRelease(0x8000000000309140);
  return Hasher._finalize()();
}

void sub_2D9770(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  __asm { BR              X10 }
}

Swift::Int sub_2D97B8()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x736C656E6E616863, 0xE800000000000000);
  swift_bridgeObjectRelease(0xE800000000000000);
  return Hasher._finalize()();
}

void sub_2D9878(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  __asm { BR              X10 }
}

Swift::Int sub_2D98C4()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x644972657375, 0xE600000000000000);
  swift_bridgeObjectRelease(0xE600000000000000);
  return Hasher._finalize()();
}

void __swiftcall RecommendationsMetadata.Analytics.init(clientID:userID:userAllowsPersonalization:userIsManagedAccount:userIsUnder13:)(ShelfKit::RecommendationsMetadata::Analytics *__return_ptr retstr, Swift::String_optional clientID, Swift::String_optional userID, Swift::Bool userAllowsPersonalization, Swift::Bool userIsManagedAccount, Swift::Bool userIsUnder13)
{
  retstr->clientID = clientID;
  retstr->userID = userID;
  retstr->userAllowsPersonalization = userAllowsPersonalization;
  retstr->userIsManagedAccount = userIsManagedAccount;
  retstr->userIsUnder13 = userIsUnder13;
}

void __swiftcall RecommendationsMetadata.init(analytics:categories:channels:episodes:shows:)(ShelfKit::RecommendationsMetadata *__return_ptr retstr, ShelfKit::RecommendationsMetadata::Analytics *analytics, ShelfKit::RecommendationsMetadata::Categories categories, ShelfKit::RecommendationsMetadata::Channels channels, ShelfKit::RecommendationsMetadata::Episodes episodes, ShelfKit::RecommendationsMetadata::Shows shows)
{
  Swift::Bool userAllowsPersonalization;
  Swift::Bool userIsManagedAccount;
  Swift::Bool userIsUnder13;
  void *v9;
  void *v10;
  Swift::String_optional userID;

  userAllowsPersonalization = analytics->userAllowsPersonalization;
  userIsManagedAccount = analytics->userIsManagedAccount;
  userIsUnder13 = analytics->userIsUnder13;
  v9 = *(void **)channels.subscribed._rawValue;
  v10 = (void *)*((_QWORD *)channels.disliked._rawValue + 2);
  userID = analytics->userID;
  retstr->analytics.clientID = analytics->clientID;
  retstr->analytics.userID = userID;
  retstr->analytics.userAllowsPersonalization = userAllowsPersonalization;
  retstr->analytics.userIsManagedAccount = userIsManagedAccount;
  retstr->analytics.userIsUnder13 = userIsUnder13;
  retstr->categories = *(ShelfKit::RecommendationsMetadata::Categories *)categories.liked._rawValue;
  retstr->channels = *(ShelfKit::RecommendationsMetadata::Channels *)categories.disliked._rawValue;
  retstr->episodes.recentlyPlayed._rawValue = v9;
  *(_OWORD *)&retstr->shows.followed._rawValue = *(_OWORD *)channels.disliked._rawValue;
  retstr->shows.disliked._rawValue = v10;
}

uint64_t RecommendationsMetadata.Analytics.userIsManagedAccount.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 33);
}

uint64_t RecommendationsMetadata.Analytics.userIsUnder13.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 34);
}

BOOL static RecommendationsMetadata.Categories.Metadata.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a1 == *(_QWORD *)a2 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
}

ShelfKit::RecommendationsMetadata::Categories __swiftcall RecommendationsMetadata.Categories.init(from:)(Swift::OpaquePointer from)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t (*v15)(char *, char *, uint64_t, __n128);
  _QWORD *v16;
  uint64_t v17;
  uint64_t i;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  void *v27;
  void *v28;
  ShelfKit::RecommendationsMetadata::Categories result;
  void *rawValue;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v3 = v1;
  v4 = type metadata accessor for Date(0);
  v33 = *(_QWORD *)(v4 - 8);
  v34 = v4;
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&rawValue - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for InterestModel(0, v5);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&rawValue - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *((_QWORD *)from._rawValue + 2);
  if (v13)
  {
    rawValue = from._rawValue;
    v31 = v3;
    v14 = (char *)from._rawValue
        + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    v35 = *(_QWORD *)(v9 + 72);
    v15 = *(uint64_t (**)(char *, char *, uint64_t, __n128))(v9 + 16);
    v16 = _swiftEmptyArrayStorage;
    v17 = v9;
    v32 = v9;
    for (i = v15(v12, v14, v8, v10); ; i = v15(v12, v14, v8, v19))
    {
      v20 = InterestModel.adamID.getter(i);
      v21 = AdamID.isEmpty.getter(v20);
      if ((v21 & 1) != 0)
      {
        (*(void (**)(char *, uint64_t))(v17 + 8))(v12, v8);
      }
      else
      {
        v22 = InterestModel.interestValueUpdatedDate.getter(v21);
        v23 = Date.timeIntervalSince1970.getter(v22);
        (*(void (**)(char *, uint64_t))(v33 + 8))(v7, v34);
        (*(void (**)(char *, uint64_t))(v17 + 8))(v12, v8);
        if ((swift_isUniquelyReferenced_nonNull_native(v16) & 1) == 0)
          v16 = sub_11920(0, v16[2] + 1, 1, v16);
        v25 = v16[2];
        v24 = v16[3];
        if (v25 >= v24 >> 1)
          v16 = sub_11920((_QWORD *)(v24 > 1), v25 + 1, 1, v16);
        v19.n128_f64[0] = floor(v23 * 1000.0);
        v16[2] = v25 + 1;
        v26 = &v16[2 * v25];
        v26[4] = v20;
        v26[5] = v19.n128_u64[0];
        v17 = v32;
      }
      v14 += v35;
      if (!--v13)
        break;
    }
    v27 = (void *)swift_bridgeObjectRelease();
    v3 = v31;
  }
  else
  {
    v27 = (void *)swift_bridgeObjectRelease();
    v16 = _swiftEmptyArrayStorage;
  }
  *v3 = v16;
  v3[1] = _swiftEmptyArrayStorage;
  result.disliked._rawValue = v28;
  result.liked._rawValue = v27;
  return result;
}

uint64_t static RecommendationsMetadata.Categories.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  return sub_2D9F34(a1, a2, (uint64_t (*)(uint64_t, uint64_t))sub_12DEC);
}

uint64_t sub_2D9C48()
{
  _BYTE *v0;

  if (*v0)
    return 0x64656B696C736964;
  else
    return 0x64656B696CLL;
}

uint64_t sub_2D9C80@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_2DF7BC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2D9CA4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_2DE340();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_2D9CCC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_2DE340();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_2D9CF4(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_2DA050(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))sub_12DEC);
}

ShelfKit::RecommendationsMetadata::Channels __swiftcall RecommendationsMetadata.Channels.init(from:)(Swift::OpaquePointer from)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  _QWORD *v10;
  uint64_t i;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  unint64_t v18;
  unint64_t v19;
  double *v20;
  _QWORD *v21;
  unint64_t rawValue;
  ShelfKit::RecommendationsMetadata::Channels result;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;

  v3 = v1;
  v4 = type metadata accessor for Date(0);
  v26 = *(_QWORD *)(v4 - 8);
  v27 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((unint64_t)from._rawValue >> 62)
  {
    if ((uint64_t)from._rawValue < 0)
      rawValue = (unint64_t)from._rawValue;
    else
      rawValue = (unint64_t)from._rawValue & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v8 = (void *)_CocoaArrayWrapper.endIndex.getter(rawValue);
    v7 = (uint64_t)v8;
  }
  else
  {
    v7 = *(_QWORD *)((char *)&dword_10 + ((unint64_t)from._rawValue & 0xFFFFFFFFFFFFF8));
    v8 = (void *)swift_bridgeObjectRetain();
  }
  v10 = _swiftEmptyArrayStorage;
  v25 = v3;
  if (v7)
  {
    if (v7 < 1)
    {
      __break(1u);
      goto LABEL_23;
    }
    for (i = 0; i != v7; ++i)
    {
      if (((unint64_t)from._rawValue & 0xC000000000000001) != 0)
        v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i);
      else
        v12 = *((id *)from._rawValue + i + 4);
      v13 = v12;
      v14 = (uint64_t)objc_msgSend(v12, "storeId");
      v15 = AdamID.init(rawValue:)(v14 & ~(v14 >> 63));
      if ((AdamID.isEmpty.getter(v15) & 1) != 0)
      {

      }
      else
      {
        v16 = Date.init(timeIntervalSinceReferenceDate:)(objc_msgSend(v13, "subscriptionEnabledDate"));
        v17 = Date.timeIntervalSince1970.getter(v16);
        (*(void (**)(char *, uint64_t))(v26 + 8))(v6, v27);

        if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0)
          v10 = sub_11A2C(0, v10[2] + 1, 1, v10);
        v19 = v10[2];
        v18 = v10[3];
        if (v19 >= v18 >> 1)
          v10 = sub_11A2C((_QWORD *)(v18 > 1), v19 + 1, 1, v10);
        v10[2] = v19 + 1;
        v20 = (double *)&v10[3 * v19];
        *((_QWORD *)v20 + 4) = v15;
        v20[5] = floor(v17 * 1000.0);
        *((_BYTE *)v20 + 48) = 0;
      }
    }
  }
  v8 = (void *)swift_bridgeObjectRelease_n(from._rawValue, 2);
  v21 = v25;
  *v25 = v10;
  v21[1] = _swiftEmptyArrayStorage;
LABEL_23:
  result.disliked._rawValue = v9;
  result.subscribed._rawValue = v8;
  return result;
}

uint64_t static RecommendationsMetadata.Channels.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  return sub_2D9F34(a1, a2, sub_12E60);
}

uint64_t sub_2D9F34(uint64_t *a1, uint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v4;

  v3 = a1[1];
  v4 = a2[1];
  if ((a3(*a1, *a2) & 1) != 0)
    return a3(v3, v4);
  else
    return 0;
}

uint64_t sub_2D9F90()
{
  _BYTE *v0;

  if (*v0)
    return 0x64656B696C736964;
  else
    return 0x6269726373627573;
}

uint64_t sub_2D9FD0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_2DF8A4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2D9FF4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_2DE3C8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_2DA01C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_2DE3C8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_2DA044(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_2DA050(a1, a2, a3, a4, sub_12E60);
}

uint64_t sub_2DA050(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1[1];
  v6 = a2[1];
  if ((a5(*a1, *a2) & 1) != 0)
    return a5(v5, v6);
  else
    return 0;
}

uint64_t RecommendationsMetadata.Episodes.Metadata.timestamp.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

ShelfKit::RecommendationsMetadata::Episodes __swiftcall RecommendationsMetadata.Episodes.init(from:)(Swift::OpaquePointer from)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  ShelfKit::RecommendationsMetadata::Episodes result;
  char *v9;
  _QWORD *v10;
  char **v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  id v18;
  double v19;
  double v20;
  float v21;
  float v22;
  unint64_t v23;
  unint64_t v24;
  double *v25;
  unint64_t rawValue;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;

  v3 = v1;
  v4 = type metadata accessor for Date(0);
  v29 = *(_QWORD *)(v4 - 8);
  v30 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!((unint64_t)from._rawValue >> 62))
  {
    v7 = *(char **)((char *)&dword_10 + ((unint64_t)from._rawValue & 0xFFFFFFFFFFFFF8));
    result.recentlyPlayed._rawValue = (void *)swift_bridgeObjectRetain();
    v28 = v3;
    if (v7)
      goto LABEL_3;
LABEL_20:
    v10 = _swiftEmptyArrayStorage;
LABEL_21:
    result.recentlyPlayed._rawValue = (void *)swift_bridgeObjectRelease_n(from._rawValue, 2);
    *v28 = v10;
    return result;
  }
  if ((uint64_t)from._rawValue < 0)
    rawValue = (unint64_t)from._rawValue;
  else
    rawValue = (unint64_t)from._rawValue & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  result.recentlyPlayed._rawValue = (void *)_CocoaArrayWrapper.endIndex.getter(rawValue);
  v7 = (char *)result.recentlyPlayed._rawValue;
  v28 = v3;
  if (!result.recentlyPlayed._rawValue)
    goto LABEL_20;
LABEL_3:
  if ((uint64_t)v7 >= 1)
  {
    v9 = 0;
    v10 = _swiftEmptyArrayStorage;
    v11 = &selRef__tabBarController_sidebar_visibilityDidChangeForTabs_;
    do
    {
      if (((unint64_t)from._rawValue & 0xC000000000000001) != 0)
        v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v9);
      else
        v12 = *((id *)from._rawValue + (_QWORD)v9 + 4);
      v13 = v12;
      v14 = (uint64_t)objc_msgSend(v12, v11[426]);
      v15 = AdamID.init(rawValue:)(v14 & ~(v14 >> 63));
      if ((AdamID.isEmpty.getter(v15) & 1) != 0)
      {

      }
      else
      {
        v16 = Date.init(timeIntervalSinceReferenceDate:)(objc_msgSend(v13, "lastDatePlayed"));
        v17 = Date.timeIntervalSince1970.getter(v16);
        (*(void (**)(char *, uint64_t))(v29 + 8))(v6, v30);
        v18 = objc_msgSend(v13, "playState");
        objc_msgSend(v13, "duration");
        v20 = v19;
        objc_msgSend(v13, "playhead");
        v22 = v21;

        if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0)
          v10 = sub_11B54(0, v10[2] + 1, 1, v10);
        v24 = v10[2];
        v23 = v10[3];
        if (v24 >= v23 >> 1)
          v10 = sub_11B54((_QWORD *)(v23 > 1), v24 + 1, 1, v10);
        v10[2] = v24 + 1;
        v25 = (double *)&v10[7 * v24];
        *((_QWORD *)v25 + 4) = v15;
        v25[5] = floor(v17 * 1000.0);
        *((_BYTE *)v25 + 48) = 0;
        *((_BYTE *)v25 + 49) = v18 == 0;
        v25[7] = floor(v20 * 1000.0);
        *((_BYTE *)v25 + 64) = 0;
        v25[9] = floorf(v22 * 1000.0);
        *((_BYTE *)v25 + 80) = 0;
        v11 = &selRef__tabBarController_sidebar_visibilityDidChangeForTabs_;
      }
      ++v9;
    }
    while (v7 != v9);
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

uint64_t static RecommendationsMetadata.Episodes.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  return sub_12E64(*a1, *a2);
}

uint64_t sub_2DA368()
{
  return 0x796C746E65636572;
}

uint64_t sub_2DA38C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x796C746E65636572 && a2 == 0xEE00646579616C50)
  {
    result = swift_bridgeObjectRelease(0xEE00646579616C50);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x796C746E65636572, 0xEE00646579616C50, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_2DA444(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_2DE450();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_2DA46C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_2DE450();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t _s8ShelfKit23RecommendationsMetadataV8ChannelsV0D0V2eeoiySbAG_AGtFZ_0(uint64_t a1, uint64_t a2)
{
  char v2;

  if (*(_QWORD *)a1 != *(_QWORD *)a2)
    return 0;
  v2 = *(_BYTE *)(a2 + 16);
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 16) & 1) == 0)
      return 0;
  }
  else
  {
    if (*(double *)(a1 + 8) != *(double *)(a2 + 8))
      v2 = 1;
    if ((v2 & 1) != 0)
      return 0;
  }
  return 1;
}

uint64_t sub_2DA4D8(uint64_t a1, uint64_t a2)
{
  char v2;

  if (*(_QWORD *)a1 == *(_QWORD *)a2)
  {
    v2 = *(_BYTE *)(a2 + 16);
    if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    {
      if (*(_BYTE *)(a2 + 16))
        return 1;
    }
    else
    {
      if (*(double *)(a1 + 8) != *(double *)(a2 + 8))
        v2 = 1;
      if ((v2 & 1) == 0)
        return 1;
    }
  }
  return 0;
}

ShelfKit::RecommendationsMetadata::Shows __swiftcall RecommendationsMetadata.Shows.init(from:)(Swift::OpaquePointer from)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char **v13;
  _QWORD *v14;
  double *v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  _QWORD *v27;
  unint64_t rawValue;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  ShelfKit::RecommendationsMetadata::Shows result;

  v3 = v1;
  v4 = type metadata accessor for Date(0);
  v30 = *(_QWORD *)(v4 - 8);
  v31 = v4;
  __chkstk_darwin(v4);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((unint64_t)from._rawValue >> 62)
  {
    if ((uint64_t)from._rawValue < 0)
      rawValue = (unint64_t)from._rawValue;
    else
      rawValue = (unint64_t)from._rawValue & 0xFFFFFFFFFFFFFF8;
    v5 = (void *)_CocoaArrayWrapper.endIndex.getter(rawValue);
    v10 = (uint64_t)v5;
    if (v5)
      goto LABEL_3;
LABEL_28:
    v5 = (void *)swift_bridgeObjectRelease();
    v27 = _swiftEmptyArrayStorage;
    v12 = _swiftEmptyArrayStorage;
    goto LABEL_29;
  }
  v10 = *(_QWORD *)((char *)&dword_10 + ((unint64_t)from._rawValue & 0xFFFFFFFFFFFFF8));
  if (!v10)
    goto LABEL_28;
LABEL_3:
  if (v10 < 1)
  {
    __break(1u);
    goto LABEL_31;
  }
  v29 = v3;
  v11 = 0;
  v12 = _swiftEmptyArrayStorage;
  v13 = &selRef__tabBarController_sidebar_visibilityDidChangeForTabs_;
  v32 = _swiftEmptyArrayStorage;
  do
  {
    if (((unint64_t)from._rawValue & 0xC000000000000001) != 0)
      v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v11);
    else
      v16 = *((id *)from._rawValue + v11 + 4);
    v17 = v16;
    v18 = (uint64_t)objc_msgSend(v16, v13[455], v29);
    v19 = AdamID.init(rawValue:)(v18 & ~(v18 >> 63));
    if ((AdamID.isEmpty.getter(v19) & 1) == 0)
    {
      v20 = Date.init(timeIntervalSinceReferenceDate:)(objc_msgSend(v17, "addedDate"));
      v21 = Date.timeIntervalSince1970.getter(v20);
      (*(void (**)(char *, uint64_t))(v30 + 8))(v9, v31);
      if (objc_msgSend(v17, "subscribed"))
      {
        if ((swift_isUniquelyReferenced_nonNull_native(v12) & 1) == 0)
          v12 = sub_11C78(0, v12[2] + 1, 1, v12);
        v23 = v12[2];
        v22 = v12[3];
        v24 = v23 + 1;
        if (v23 >= v22 >> 1)
        {
          v14 = sub_11C78((_QWORD *)(v22 > 1), v23 + 1, 1, v12);
          v12 = v14;
        }
        else
        {
          v14 = v12;
        }
      }
      else
      {
        v25 = v32;
        if ((swift_isUniquelyReferenced_nonNull_native(v32) & 1) != 0)
          v14 = v25;
        else
          v14 = sub_11C78(0, v25[2] + 1, 1, v25);
        v23 = v14[2];
        v26 = v14[3];
        v24 = v23 + 1;
        if (v23 >= v26 >> 1)
          v14 = sub_11C78((_QWORD *)(v26 > 1), v23 + 1, 1, v14);
        v32 = v14;
      }
      v14[2] = v24;
      v15 = (double *)&v14[3 * v23];
      *((_QWORD *)v15 + 4) = v19;
      v15[5] = floor(v21 * 1000.0);
      *((_BYTE *)v15 + 48) = 0;
      v13 = &selRef__tabBarController_sidebar_visibilityDidChangeForTabs_;
    }
    ++v11;

  }
  while (v10 != v11);
  v5 = (void *)swift_bridgeObjectRelease();
  v3 = v29;
  v27 = v32;
LABEL_29:
  *v3 = v12;
  v3[1] = v27;
  v3[2] = _swiftEmptyArrayStorage;
LABEL_31:
  result.disliked._rawValue = v7;
  result.unfollowed._rawValue = v6;
  result.followed._rawValue = v5;
  return result;
}

uint64_t static RecommendationsMetadata.Shows.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[1];
  v3 = a1[2];
  v4 = a2[1];
  v5 = a2[2];
  if ((sub_12E60(*a1, *a2) & 1) != 0 && (sub_12E60(v2, v4) & 1) != 0)
    return sub_12E60(v3, v5);
  else
    return 0;
}

uint64_t sub_2DA834()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x776F6C6C6F666E75;
  if (*v0 != 1)
    v1 = 0x64656B696C736964;
  if (*v0)
    return v1;
  else
    return 0x6465776F6C6C6F66;
}

uint64_t sub_2DA894@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_2DF9A0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2DA8B8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_2DE4D8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_2DA8E0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_2DE4D8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t RecommendationsMetadata.analytics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  __int128 v6;
  uint64_t v7;

  v2 = *(_QWORD *)(v1 + 24);
  v3 = *(_BYTE *)(v1 + 32);
  v4 = *(_BYTE *)(v1 + 33);
  v5 = *(_BYTE *)(v1 + 34);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  v6 = *(_OWORD *)(v1 + 8);
  *(_OWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 24) = v2;
  *(_BYTE *)(a1 + 32) = v3;
  *(_BYTE *)(a1 + 33) = v4;
  *(_BYTE *)(a1 + 34) = v5;
  v7 = v6;
  swift_bridgeObjectRetain(v2);
  return swift_bridgeObjectRetain(v7);
}

uint64_t RecommendationsMetadata.categories.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v1 + 40);
  v3 = *(_QWORD *)(v1 + 48);
  *a1 = v2;
  a1[1] = v3;
  swift_bridgeObjectRetain(v2);
  return swift_bridgeObjectRetain(v3);
}

uint64_t RecommendationsMetadata.channels.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v1 + 56);
  v3 = *(_QWORD *)(v1 + 64);
  *a1 = v2;
  a1[1] = v3;
  swift_bridgeObjectRetain(v2);
  return swift_bridgeObjectRetain(v3);
}

uint64_t RecommendationsMetadata.episodes.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 72);
  *a1 = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t RecommendationsMetadata.shows.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = v1[10];
  v3 = v1[11];
  v4 = v1[12];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  return swift_bridgeObjectRetain(v4);
}

uint64_t sub_2DA9F0(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_2DAA24 + 4 * byte_30701D[a1]))(0x6449746E65696C63, 0xE800000000000000);
}

uint64_t sub_2DAA24()
{
  return 0x644972657375;
}

unint64_t sub_2DAA38()
{
  return 0xD000000000000019;
}

unint64_t sub_2DAA58()
{
  return 0xD000000000000014;
}

uint64_t sub_2DAA74()
{
  return 0x6E55734972657375;
}

uint64_t sub_2DAA98(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_2DAACC + 4 * byte_307022[a1]))(0x6449746E65696C63, 0xE800000000000000);
}

uint64_t sub_2DAACC()
{
  return 0x644972657375;
}

unint64_t sub_2DAAE0()
{
  return 0xD000000000000019;
}

unint64_t sub_2DAB00()
{
  return 0xD000000000000014;
}

uint64_t sub_2DAB1C()
{
  return 0x6E55734972657375;
}

uint64_t sub_2DAB40()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_2DAB74 + 4 * byte_307027[*v0]))(0x636974796C616E61, 0xE900000000000073);
}

uint64_t sub_2DAB74()
{
  return 0x69726F6765746163;
}

uint64_t sub_2DAB90()
{
  return 0x736C656E6E616863;
}

uint64_t sub_2DABA8()
{
  return 0x7365646F73697065;
}

uint64_t sub_2DABC0()
{
  return 0x73776F6873;
}

uint64_t sub_2DABD4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_2DFB00(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2DABF8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_2DE560();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_2DAC20(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_2DE560();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_2DAC48(char *a1)
{
  sub_1E0808(*a1);
}

void sub_2DAC54()
{
  char *v0;

  sub_2D8784(*v0);
}

void sub_2DAC5C(uint64_t a1)
{
  char *v1;

  sub_2D8870(a1, *v1);
}

void sub_2DAC64(uint64_t a1)
{
  char *v1;

  sub_2D9878(a1, *v1);
}

unint64_t sub_2DAC6C@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  Swift::OpaquePointer v3;
  unint64_t result;

  v3._rawValue = &off_376278;
  result = sub_2DFD2C(*a1, v3);
  *a2 = result;
  return result;
}

uint64_t sub_2DACA0@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_2DA9F0(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_2DACC8()
{
  unsigned __int8 *v0;

  return sub_2DAA98(*v0);
}

unint64_t sub_2DACD0@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  Swift::OpaquePointer v3;
  unint64_t result;

  v3._rawValue = &off_376278;
  result = sub_2DFD2C(a1, v3);
  *a2 = result;
  return result;
}

uint64_t sub_2DACFC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_2DE1EC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_2DAD24(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_2DE1EC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t RecommendationsMetadata.Analytics.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C80C0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v9 = v1[1];
  v10 = v1[2];
  v24 = v1[3];
  v25 = v10;
  LODWORD(v10) = *((unsigned __int8 *)v1 + 32);
  v22 = *((unsigned __int8 *)v1 + 33);
  v23 = v10;
  HIDWORD(v21) = *((unsigned __int8 *)v1 + 34);
  v11 = a1[3];
  v12 = a1[4];
  v13 = a1;
  v15 = v14;
  __swift_project_boxed_opaque_existential_1(v13, v11);
  v16 = sub_2DE1EC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for RecommendationsMetadata.Analytics.CodingKeys, &type metadata for RecommendationsMetadata.Analytics.CodingKeys, v16, v11, v12);
  v30 = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v8, v9, &v30, v15);
  if (!v2)
  {
    v17 = v22;
    v18 = v23;
    v19 = HIDWORD(v21);
    v29 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v25, v24, &v29, v15);
    v28 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v18, &v28, v15);
    v27 = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v17, &v27, v15);
    v26 = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v19, &v26, v15);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v15);
}

uint64_t RecommendationsMetadata.Analytics.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  char v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C80D0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  v11 = sub_2DE1EC();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for RecommendationsMetadata.Analytics.CodingKeys, &type metadata for RecommendationsMetadata.Analytics.CodingKeys, v11, v9, v10);
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1(a1);
  v31 = 0;
  v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v31, v5);
  v14 = v13;
  v26 = v12;
  v30 = 1;
  swift_bridgeObjectRetain();
  v15 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v30, v5);
  v17 = v16;
  v24 = v15;
  v29 = 2;
  swift_bridgeObjectRetain();
  v25 = v17;
  v23 = KeyedDecodingContainer.decode(_:forKey:)(&v29, v5);
  v28 = 3;
  v22 = KeyedDecodingContainer.decode(_:forKey:)(&v28, v5);
  v27 = 4;
  LOBYTE(v17) = KeyedDecodingContainer.decode(_:forKey:)(&v27, v5);
  v23 &= 1u;
  v19 = v22 & 1;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v20 = v17 & 1;
  v21 = v25;
  *(_QWORD *)a2 = v26;
  *(_QWORD *)(a2 + 8) = v14;
  *(_QWORD *)(a2 + 16) = v24;
  *(_QWORD *)(a2 + 24) = v21;
  *(_BYTE *)(a2 + 32) = v23;
  *(_BYTE *)(a2 + 33) = v19;
  *(_BYTE *)(a2 + 34) = v20;
  __swift_destroy_boxed_opaque_existential_1(a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2DB19C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return RecommendationsMetadata.Analytics.init(from:)(a1, a2);
}

uint64_t sub_2DB1B0(_QWORD *a1)
{
  return RecommendationsMetadata.Analytics.encode(to:)(a1);
}

uint64_t sub_2DB1C4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1E0B50(*a1, *a2);
}

uint64_t sub_2DB1DC@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_376310;
  return sub_1CDABC(v2, a1, a2);
}

void sub_2DB1E8(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x64496D616461;
  if (*v1)
    v2 = 0x6D617473656D6974;
  v3 = 0xE600000000000000;
  if (*v1)
    v3 = 0xE900000000000070;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_2DB228()
{
  _BYTE *v0;

  if (*v0)
    return 0x6D617473656D6974;
  else
    return 0x64496D616461;
}

uint64_t sub_2DB264@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_376310;
  return sub_2DC050(a1, v2, a2);
}

uint64_t sub_2DB270(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_2DE230();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_2DB298(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_2DE230();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t RecommendationsMetadata.Categories.Metadata.encode(to:)(_QWORD *a1)
{
  double *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  double v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  double v15;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C80D8);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v9 = v1[1];
  v10 = a1[3];
  v11 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v10);
  v12 = sub_2DE230();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for RecommendationsMetadata.Categories.Metadata.CodingKeys, &type metadata for RecommendationsMetadata.Categories.Metadata.CodingKeys, v12, v10, v11);
  v15 = v8;
  HIBYTE(v14) = 0;
  sub_13E9C();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v15);
  if (!v2)
  {
    BYTE6(v14) = 1;
    KeyedEncodingContainer.encode(_:forKey:)((char *)&v14 + 6, v4, v9);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t RecommendationsMetadata.Categories.Metadata.init(from:)@<X0>(_QWORD *a1@<X0>, double *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v15;
  uint64_t v16;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C80E8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  v11 = sub_2DE230();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for RecommendationsMetadata.Categories.Metadata.CodingKeys, &type metadata for RecommendationsMetadata.Categories.Metadata.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    HIBYTE(v15) = 0;
    sub_14088();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v16, &type metadata for AdamID);
    v12 = v16;
    BYTE6(v15) = 1;
    v13 = KeyedDecodingContainer.decode(_:forKey:)((char *)&v15 + 6, v5);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *(_QWORD *)a2 = v12;
    a2[1] = v13;
  }
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t sub_2DB56C@<X0>(_QWORD *a1@<X0>, double *a2@<X8>)
{
  return RecommendationsMetadata.Categories.Metadata.init(from:)(a1, a2);
}

uint64_t sub_2DB580(_QWORD *a1)
{
  return RecommendationsMetadata.Categories.Metadata.encode(to:)(a1);
}

uint64_t sub_2DB594@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_376360;
  return sub_1CDABC(v2, a1, a2);
}

uint64_t sub_2DB5A0@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_376360;
  return sub_2DC050(a1, v2, a2);
}

uint64_t sub_2DB5AC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_2DE274();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_2DB5D4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_2DE274();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t RecommendationsMetadata.Channels.Metadata.encode(to:)(_QWORD *a1)
{
  return sub_2DC128(a1, &qword_3C80F0, (uint64_t (*)(void))sub_2DE274, (uint64_t)&type metadata for RecommendationsMetadata.Channels.Metadata.CodingKeys);
}

uint64_t RecommendationsMetadata.Channels.Metadata.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2DC29C(a1, &qword_3C8100, (uint64_t (*)(void))sub_2DE274, (uint64_t)&type metadata for RecommendationsMetadata.Channels.Metadata.CodingKeys, a2);
}

uint64_t sub_2DB654@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return RecommendationsMetadata.Channels.Metadata.init(from:)(a1, a2);
}

uint64_t sub_2DB668(_QWORD *a1)
{
  return RecommendationsMetadata.Channels.Metadata.encode(to:)(a1);
}

void sub_2DB67C(char *a1)
{
  sub_1E09C0(*a1);
}

void sub_2DB688()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2);
  __asm { BR              X9 }
}

Swift::Int sub_2DB6D0()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x6D617473656D6974, 0xE900000000000070);
  swift_bridgeObjectRelease(0xE900000000000070);
  return Hasher._finalize()();
}

void sub_2DB758()
{
  __asm { BR              X10 }
}

uint64_t sub_2DB790(uint64_t a1)
{
  String.hash(into:)(a1, 0x6D617473656D6974, 0xE900000000000070);
  return swift_bridgeObjectRelease(0xE900000000000070);
}

void sub_2DB804()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2);
  __asm { BR              X9 }
}

Swift::Int sub_2DB848()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x6D617473656D6974, 0xE900000000000070);
  swift_bridgeObjectRelease(0xE900000000000070);
  return Hasher._finalize()();
}

unint64_t sub_2DB8D0@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  Swift::OpaquePointer v3;
  unint64_t result;

  v3._rawValue = &off_3763B0;
  result = sub_2DFD2C(*a1, v3);
  *a2 = result;
  return result;
}

uint64_t sub_2DB904()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_2DB930 + 4 * byte_30703B[*v0]))();
}

void sub_2DB930(_QWORD *a1@<X8>)
{
  *a1 = 0x6D617473656D6974;
  a1[1] = 0xE900000000000070;
}

void sub_2DB950(_QWORD *a1@<X8>)
{
  *a1 = 0x656C706D6F437369;
  a1[1] = 0xEA00000000006574;
}

void sub_2DB970(_QWORD *a1@<X8>)
{
  *a1 = 0x6E6F697461727564;
  a1[1] = 0xE800000000000000;
}

uint64_t sub_2DB99C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_2DB9C8 + 4 * byte_307040[*v0]))(0x64496D616461, 0xE600000000000000);
}

uint64_t sub_2DB9C8()
{
  return 0x6D617473656D6974;
}

uint64_t sub_2DB9E4()
{
  return 0x656C706D6F437369;
}

uint64_t sub_2DBA00()
{
  return 0x6E6F697461727564;
}

uint64_t sub_2DBA18()
{
  return 0x6E6F697469736F70;
}

unint64_t sub_2DBA30@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  Swift::OpaquePointer v3;
  unint64_t result;

  v3._rawValue = &off_3763B0;
  result = sub_2DFD2C(a1, v3);
  *a2 = result;
  return result;
}

uint64_t sub_2DBA5C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_2DE2B8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_2DBA84(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_2DE2B8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t RecommendationsMetadata.Episodes.Metadata.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  char v27;
  char v28;
  _BYTE v29[2];
  uint64_t v30;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C8108);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v25 = v1[1];
  v9 = *((unsigned __int8 *)v1 + 16);
  v23 = *((unsigned __int8 *)v1 + 17);
  v24 = v9;
  v22 = v1[3];
  v21 = *((unsigned __int8 *)v1 + 32);
  v20 = v1[5];
  v19 = *((unsigned __int8 *)v1 + 48);
  v10 = a1[3];
  v11 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v10);
  v12 = sub_2DE2B8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for RecommendationsMetadata.Episodes.Metadata.CodingKeys, &type metadata for RecommendationsMetadata.Episodes.Metadata.CodingKeys, v12, v10, v11);
  v30 = v8;
  v29[1] = 0;
  sub_13E9C();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v30);
  if (!v2)
  {
    v13 = v23;
    v14 = v21;
    v15 = v22;
    v16 = v20;
    v29[0] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v25, v24, v29, v4);
    v28 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v13, &v28, v4);
    v27 = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v15, v14, &v27, v4);
    v26 = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16, v19, &v26, v4);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t RecommendationsMetadata.Episodes.Metadata.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  int v17;
  uint64_t v19;
  char *v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  char v31;
  _BYTE v32[2];
  uint64_t v33;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C8118);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  v11 = sub_2DE2B8();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for RecommendationsMetadata.Episodes.Metadata.CodingKeys, &type metadata for RecommendationsMetadata.Episodes.Metadata.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v32[1] = 0;
    sub_14088();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v33, &type metadata for AdamID);
    v12 = v33;
    v32[0] = 1;
    v13 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v32, v5);
    v15 = v14;
    v27 = v13;
    v28 = v12;
    v31 = 2;
    LOBYTE(v12) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v31, v5);
    v30 = 3;
    v16 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v30, v5);
    v25 = v17;
    v26 = v16;
    v29 = 4;
    v19 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v29, v5);
    v20 = v8;
    v22 = v21;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v20, v5);
    v23 = v27;
    *(_QWORD *)a2 = v28;
    *(_QWORD *)(a2 + 8) = v23;
    *(_BYTE *)(a2 + 16) = v15 & 1;
    *(_BYTE *)(a2 + 17) = v12;
    *(_QWORD *)(a2 + 24) = v26;
    *(_BYTE *)(a2 + 32) = v25 & 1;
    *(_QWORD *)(a2 + 40) = v19;
    *(_BYTE *)(a2 + 48) = v22 & 1;
  }
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t sub_2DBEB8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return RecommendationsMetadata.Episodes.Metadata.init(from:)(a1, a2);
}

uint64_t sub_2DBECC(_QWORD *a1)
{
  return RecommendationsMetadata.Episodes.Metadata.encode(to:)(a1);
}

Swift::Int sub_2DBEE0()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  if (v1)
    v2 = 0x6D617473656D6974;
  else
    v2 = 0x64496D616461;
  if (v1)
    v3 = 0xE900000000000070;
  else
    v3 = 0xE600000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_2DBF60(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0x6D617473656D6974;
  else
    v2 = 0x64496D616461;
  if (*v1)
    v3 = 0xE900000000000070;
  else
    v3 = 0xE600000000000000;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_2DBFBC()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  if (v1)
    v2 = 0x6D617473656D6974;
  else
    v2 = 0x64496D616461;
  if (v1)
    v3 = 0xE900000000000070;
  else
    v3 = 0xE600000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_2DC038@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_376448;
  return sub_1CDABC(v2, a1, a2);
}

uint64_t sub_2DC044@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_376448;
  return sub_2DC050(a1, v2, a2);
}

uint64_t sub_2DC050@<X0>(Swift::String string@<0:X0, 8:X1>, Swift::OpaquePointer cases@<0:X4>, char *a3@<X8>)
{
  void *object;
  Swift::String v4;
  Swift::Int v6;
  uint64_t result;
  char v8;

  object = string._object;
  v4._countAndFlagsBits = string._countAndFlagsBits;
  v4._object = object;
  v6 = _findStringSwitchCase(cases:string:)(cases, v4);
  result = swift_bridgeObjectRelease(object);
  if (v6 == 1)
    v8 = 1;
  else
    v8 = 2;
  if (!v6)
    v8 = 0;
  *a3 = v8;
  return result;
}

uint64_t sub_2DC0AC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_2DE2FC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_2DC0D4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_2DE2FC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t RecommendationsMetadata.Shows.Metadata.encode(to:)(_QWORD *a1)
{
  return sub_2DC128(a1, &qword_3C8120, (uint64_t (*)(void))sub_2DE2FC, (uint64_t)&type metadata for RecommendationsMetadata.Shows.Metadata.CodingKeys);
}

uint64_t sub_2DC128(_QWORD *a1, uint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v22[2];
  uint64_t v23;

  v8 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v21 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *v4;
  v19 = v4[1];
  v18 = *((unsigned __int8 *)v4 + 16);
  v12 = a1[3];
  v13 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v12);
  v14 = a3();
  dispatch thunk of Encoder.container<A>(keyedBy:)(a4, a4, v14, v12, v13);
  v23 = v11;
  v22[1] = 0;
  sub_13E9C();
  v15 = v20;
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v23);
  if (!v15)
  {
    v22[0] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v19, v18, v22, v8);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v10, v8);
}

uint64_t RecommendationsMetadata.Shows.Metadata.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2DC29C(a1, &qword_3C8130, (uint64_t (*)(void))sub_2DE2FC, (uint64_t)&type metadata for RecommendationsMetadata.Shows.Metadata.CodingKeys, a2);
}

uint64_t sub_2DC29C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[2];
  uint64_t v27;

  v24 = a5;
  v25 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v9 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v12);
  v14 = a3();
  dispatch thunk of Decoder.container<A>(keyedBy:)(a4, a4, v14, v12, v13);
  if (!v5)
  {
    v15 = v9;
    v16 = v24;
    v26[1] = 0;
    sub_14088();
    v17 = v25;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v27, &type metadata for AdamID);
    v18 = v27;
    v26[0] = 1;
    v20 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v26, v17);
    v22 = v21;
    (*(void (**)(char *, uint64_t))(v15 + 8))(v11, v17);
    *(_QWORD *)v16 = v18;
    *(_QWORD *)(v16 + 8) = v20;
    *(_BYTE *)(v16 + 16) = v22 & 1;
  }
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t sub_2DC418@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return RecommendationsMetadata.Shows.Metadata.init(from:)(a1, a2);
}

uint64_t sub_2DC42C(_QWORD *a1)
{
  return RecommendationsMetadata.Shows.Metadata.encode(to:)(a1);
}

uint64_t RecommendationsMetadata.Categories.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  char v14;
  uint64_t v15;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C8138);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v13 = v1[1];
  v9 = a1[3];
  v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  v11 = sub_2DE340();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for RecommendationsMetadata.Categories.CodingKeys, &type metadata for RecommendationsMetadata.Categories.CodingKeys, v11, v9, v10);
  v15 = v8;
  v14 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_3C8148);
  sub_16138(&qword_3C8150, &qword_3C8148, (void (*)(void))sub_2DE384, (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v15);
  if (!v2)
  {
    v15 = v13;
    v14 = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v15);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t RecommendationsMetadata.Categories.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v17;
  char v18;
  uint64_t v19;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C8160);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  v11 = sub_2DE340();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for RecommendationsMetadata.Categories.CodingKeys, &type metadata for RecommendationsMetadata.Categories.CodingKeys, v11, v9, v10);
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1(a1);
  v17 = a2;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C8148);
  v18 = 0;
  sub_16138(&qword_3C8168, &qword_3C8148, (void (*)(void))sub_559CC, (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v19, v12);
  v13 = v19;
  v18 = 1;
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v19, v12);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v14 = v19;
  v15 = v17;
  *v17 = v13;
  v15[1] = v14;
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_1(a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2DC79C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return RecommendationsMetadata.Categories.init(from:)(a1, a2);
}

uint64_t sub_2DC7B0(_QWORD *a1)
{
  return RecommendationsMetadata.Categories.encode(to:)(a1);
}

uint64_t RecommendationsMetadata.Channels.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  char v14;
  uint64_t v15;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C8170);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v13 = v1[1];
  v9 = a1[3];
  v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  v11 = sub_2DE3C8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for RecommendationsMetadata.Channels.CodingKeys, &type metadata for RecommendationsMetadata.Channels.CodingKeys, v11, v9, v10);
  v15 = v8;
  v14 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_3C8180);
  sub_16138(&qword_3C8188, &qword_3C8180, (void (*)(void))sub_2DE40C, (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v15);
  if (!v2)
  {
    v15 = v13;
    v14 = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v15);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t RecommendationsMetadata.Channels.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v17;
  char v18;
  uint64_t v19;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C8198);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  v11 = sub_2DE3C8();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for RecommendationsMetadata.Channels.CodingKeys, &type metadata for RecommendationsMetadata.Channels.CodingKeys, v11, v9, v10);
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1(a1);
  v17 = a2;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C8180);
  v18 = 0;
  sub_16138(&qword_3C81A0, &qword_3C8180, (void (*)(void))sub_55988, (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v19, v12);
  v13 = v19;
  v18 = 1;
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v19, v12);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v14 = v19;
  v15 = v17;
  *v17 = v13;
  v15[1] = v14;
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_1(a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2DCB20@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return RecommendationsMetadata.Channels.init(from:)(a1, a2);
}

uint64_t sub_2DCB34(_QWORD *a1)
{
  return RecommendationsMetadata.Channels.encode(to:)(a1);
}

uint64_t RecommendationsMetadata.Episodes.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C81A8);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = a1[3];
  v9 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v8);
  v10 = sub_2DE450();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for RecommendationsMetadata.Episodes.CodingKeys, &type metadata for RecommendationsMetadata.Episodes.CodingKeys, v10, v8, v9);
  v13 = v7;
  __swift_instantiateConcreteTypeFromMangledName(&qword_3C81B8);
  sub_16138(&qword_3C81C0, &qword_3C81B8, (void (*)(void))sub_2DE494, (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v13);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t RecommendationsMetadata.Episodes.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C81D0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  v11 = sub_2DE450();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for RecommendationsMetadata.Episodes.CodingKeys, &type metadata for RecommendationsMetadata.Episodes.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C81B8);
    sub_16138(&qword_3C81D8, &qword_3C81B8, (void (*)(void))sub_55944, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v15, v12);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v15;
  }
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t sub_2DCDB8@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return RecommendationsMetadata.Episodes.init(from:)(a1, a2);
}

uint64_t sub_2DCDCC(_QWORD *a1)
{
  return RecommendationsMetadata.Episodes.encode(to:)(a1);
}

uint64_t RecommendationsMetadata.Shows.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C81E0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v1;
  v8 = v1[1];
  v16 = v1[2];
  v17 = v8;
  v10 = a1[3];
  v11 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v10);
  v12 = sub_2DE4D8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for RecommendationsMetadata.Shows.CodingKeys, &type metadata for RecommendationsMetadata.Shows.CodingKeys, v12, v10, v11);
  v19 = v9;
  v18 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_3C81F0);
  sub_16138(&qword_3C81F8, &qword_3C81F0, (void (*)(void))sub_2DE51C, (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v19);
  if (!v2)
  {
    v13 = v16;
    v19 = v17;
    v18 = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v19);
    v19 = v13;
    v18 = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v19);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t RecommendationsMetadata.Shows.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  uint64_t v22;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C8208);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  v11 = sub_2DE4D8();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for RecommendationsMetadata.Shows.CodingKeys, &type metadata for RecommendationsMetadata.Shows.CodingKeys, v11, v9, v10);
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1(a1);
  v20 = a2;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C81F0);
  v21 = 0;
  sub_16138(&qword_3C8210, &qword_3C81F0, (void (*)(void))sub_55900, (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v22, v12);
  v13 = v22;
  v21 = 1;
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v22, v12);
  v21 = 2;
  v19 = v22;
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v22, v12);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v14 = v22;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v16 = v19;
  v15 = v20;
  *v20 = v13;
  v15[1] = v16;
  v15[2] = v14;
  __swift_destroy_boxed_opaque_existential_1(a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2DD214@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return RecommendationsMetadata.Shows.init(from:)(a1, a2);
}

uint64_t sub_2DD228(_QWORD *a1)
{
  return RecommendationsMetadata.Shows.encode(to:)(a1);
}

uint64_t RecommendationsMetadata.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  int v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  char v34;
  int v35;
  char v36;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C8218);
  v25 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = *v1;
  v7 = *((_QWORD *)v1 + 2);
  v6 = *((_QWORD *)v1 + 3);
  v8 = *((_BYTE *)v1 + 32);
  v35 = *((unsigned __int8 *)v1 + 33);
  v26 = *((unsigned __int8 *)v1 + 34);
  v24 = *(__int128 *)((char *)v1 + 40);
  v9 = *(__int128 *)((char *)v1 + 56);
  v10 = *((_QWORD *)v1 + 9);
  v20 = v1[5];
  v21 = v9;
  v22 = *((_QWORD *)v1 + 12);
  v23 = v10;
  v11 = a1[3];
  v12 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v11);
  v13 = sub_2DE560();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for RecommendationsMetadata.CodingKeys, &type metadata for RecommendationsMetadata.CodingKeys, v13, v11, v12);
  v29 = v27;
  v30 = v7;
  v31 = v6;
  v32 = v8;
  v33 = v35;
  v34 = v26;
  v14 = v5;
  v36 = 0;
  sub_2DE5A4();
  v15 = v28;
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v29);
  if (v15)
    return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v5, v3);
  v17 = v22;
  v18 = v23;
  v19 = v25;
  v29 = v24;
  v36 = 1;
  sub_2DE5E8();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v29);
  v29 = v21;
  v36 = 2;
  sub_2DE62C();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v29);
  *(_QWORD *)&v29 = v18;
  v36 = 3;
  sub_2DE670();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v29);
  v29 = v20;
  v30 = v17;
  v36 = 4;
  sub_2DE6B4();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v29);
  return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v14, v3);
}

uint64_t RecommendationsMetadata.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int8 v47;
  unsigned __int8 v48;
  unsigned __int8 v49;
  int v50;
  char v51;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_3C8250);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  v11 = sub_2DE560();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for RecommendationsMetadata.CodingKeys, &type metadata for RecommendationsMetadata.CodingKeys, v11, v9, v10);
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1(a1);
  v51 = 0;
  sub_55A10();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v43, &type metadata for RecommendationsMetadata.Analytics);
  v12 = v44;
  v41 = v43;
  v13 = v46;
  v38 = a2;
  v39 = v45;
  v50 = v47;
  v37 = v48;
  v14 = v49;
  v51 = 1;
  sub_558BC();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v43, &type metadata for RecommendationsMetadata.Categories);
  v31 = v14;
  v33 = v13;
  v34 = v12;
  v15 = v43;
  v16 = v44;
  v51 = 2;
  sub_55878();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v32 = 0;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v43, &type metadata for RecommendationsMetadata.Channels);
  v35 = v16;
  v36 = v15;
  v17 = v43;
  v18 = v44;
  v51 = 3;
  sub_55834();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v43, &type metadata for RecommendationsMetadata.Episodes);
  v42 = v18;
  v20 = v43;
  v51 = 4;
  sub_557F0();
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v43, &type metadata for RecommendationsMetadata.Shows);
  v40 = v20;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v21 = v44;
  v32 = v43;
  v30 = v45;
  v22 = v34;
  swift_bridgeObjectRetain();
  v23 = v33;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v24 = v35;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v25 = v42;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v26 = v36;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v27 = v38;
  *v38 = v41;
  v27[1] = v22;
  v27[2] = v39;
  v27[3] = v23;
  *((_BYTE *)v27 + 32) = v50;
  *((_BYTE *)v27 + 33) = v37;
  *((_BYTE *)v27 + 34) = v31;
  v27[5] = v26;
  v27[6] = v24;
  v27[7] = v17;
  v27[8] = v25;
  v28 = v32;
  v27[9] = v40;
  v27[10] = v28;
  v29 = v30;
  v27[11] = v21;
  v27[12] = v29;
  __swift_destroy_boxed_opaque_existential_1(a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2DDA1C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return RecommendationsMetadata.init(from:)(a1, a2);
}

uint64_t sub_2DDA30(_QWORD *a1)
{
  return RecommendationsMetadata.encode(to:)(a1);
}

uint64_t sub_2DDA44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_2DE5A4();
  return CustomJSValueConvertible<>.jsRepresentation(in:)(a1, a2, a3, v6);
}

uint64_t sub_2DDAA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_2DE384();
  return CustomJSValueConvertible<>.jsRepresentation(in:)(a1, a2, a3, v6);
}

uint64_t sub_2DDAFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_2DE40C();
  return CustomJSValueConvertible<>.jsRepresentation(in:)(a1, a2, a3, v6);
}

uint64_t sub_2DDB58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_2DE494();
  return CustomJSValueConvertible<>.jsRepresentation(in:)(a1, a2, a3, v6);
}

uint64_t sub_2DDBB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_2DE51C();
  return CustomJSValueConvertible<>.jsRepresentation(in:)(a1, a2, a3, v6);
}

uint64_t sub_2DDC10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_2DE5E8();
  return CustomJSValueConvertible<>.jsRepresentation(in:)(a1, a2, a3, v6);
}

uint64_t sub_2DDC6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_2DE62C();
  return CustomJSValueConvertible<>.jsRepresentation(in:)(a1, a2, a3, v6);
}

uint64_t sub_2DDCC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_2DE670();
  return CustomJSValueConvertible<>.jsRepresentation(in:)(a1, a2, a3, v6);
}

uint64_t sub_2DDD24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_2DE6B4();
  return CustomJSValueConvertible<>.jsRepresentation(in:)(a1, a2, a3, v6);
}

uint64_t sub_2DDD80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_26F28();
  return CustomJSValueConvertible<>.jsRepresentation(in:)(a1, a2, a3, v6);
}

uint64_t sub_2DDDDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_475E0(a1, a2, a3);
}

uint64_t sub_2DDDF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return sub_4685C(a1, a2, a3);
}

uint64_t sub_2DDE04@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  return sub_46EF4(a1, a2, a3);
}

uint64_t sub_2DDE18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_4726C(a1, a2, a3);
}

uint64_t sub_2DDE2C@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  return sub_46BA8(a1, a2, a3);
}

uint64_t sub_2DDE40@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  return sub_46B84(a1, a2, a3);
}

uint64_t sub_2DDE54@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  return sub_47248(a1, a2, a3);
}

uint64_t sub_2DDE68@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return sub_475BC(a1, a2, a3);
}

uint64_t sub_2DDE7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_46BCC(a1, a2, a3);
}

uint64_t sub_2DDE90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_47918(a1, a2, a3);
}

uint64_t _s8ShelfKit23RecommendationsMetadataV8EpisodesV0D0V2eeoiySbAG_AGtFZ_0(uint64_t a1, uint64_t a2)
{
  int v2;
  double v3;
  char v4;
  double v5;
  char v6;
  char v7;
  int v8;
  char v9;
  char v10;
  uint64_t result;
  _BOOL4 v12;

  if (*(_QWORD *)a1 != *(_QWORD *)a2)
    return 0;
  v2 = *(unsigned __int8 *)(a1 + 17);
  v3 = *(double *)(a1 + 24);
  v4 = *(_BYTE *)(a1 + 32);
  v5 = *(double *)(a1 + 40);
  v6 = *(_BYTE *)(a1 + 48);
  v7 = *(_BYTE *)(a2 + 16);
  v8 = *(unsigned __int8 *)(a2 + 17);
  v9 = *(_BYTE *)(a2 + 32);
  v10 = *(_BYTE *)(a2 + 48);
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 16))
      return 0;
  }
  else
  {
    if (*(double *)(a1 + 8) != *(double *)(a2 + 8))
      v7 = 1;
    if ((v7 & 1) != 0)
      return 0;
  }
  if (v2 == 2)
  {
    if (v8 != 2)
      return 0;
  }
  else
  {
    result = 0;
    v12 = (v2 & 1) == 0;
    if (v8 == 2 || ((v12 ^ v8) & 1) == 0)
      return result;
  }
  if ((v4 & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 32))
      return 0;
  }
  else
  {
    if (v3 != *(double *)(a2 + 24))
      v9 = 1;
    if ((v9 & 1) != 0)
      return 0;
  }
  if ((v6 & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 48) & 1) == 0)
      return 0;
  }
  else
  {
    if (v5 != *(double *)(a2 + 40))
      v10 = 1;
    if ((v10 & 1) != 0)
      return 0;
  }
  return 1;
}

uint64_t _s8ShelfKit23RecommendationsMetadataV9AnalyticsV2eeoiySbAE_AEtFZ_0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  char v16;
  uint64_t result;
  char v18;

  v3 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  v6 = *((unsigned __int8 *)a1 + 32);
  v7 = *((unsigned __int8 *)a1 + 33);
  v8 = *((unsigned __int8 *)a1 + 34);
  v9 = *(_QWORD *)(a2 + 8);
  v10 = *(_QWORD *)(a2 + 16);
  v11 = *(_QWORD *)(a2 + 24);
  v12 = *(unsigned __int8 *)(a2 + 32);
  v13 = *(unsigned __int8 *)(a2 + 33);
  v14 = *(unsigned __int8 *)(a2 + 34);
  if (!v3)
  {
    if (v9)
      return 0;
    goto LABEL_8;
  }
  if (!v9)
    return 0;
  v15 = *a1;
  if (v15 == *(_QWORD *)a2 && v3 == v9
    || (v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v3, *(_QWORD *)a2, v9, 0), result = 0, (v16 & 1) != 0))
  {
LABEL_8:
    if (v5)
    {
      if (v11)
      {
        if (v4 != v10 || v5 != v11)
        {
          v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v10, v11, 0);
          result = 0;
          if ((v18 & 1) == 0 || ((v6 ^ v12) & 1) != 0)
            return result;
LABEL_19:
          if (((v7 ^ v13) & 1) == 0)
            return v8 ^ v14 ^ 1u;
          return result;
        }
LABEL_18:
        result = 0;
        if (v6 != v12)
          return result;
        goto LABEL_19;
      }
    }
    else if (!v11)
    {
      goto LABEL_18;
    }
    return 0;
  }
  return result;
}

BOOL _s8ShelfKit23RecommendationsMetadataV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD v27[2];
  char v28;
  char v29;
  char v30;
  _OWORD v31[2];
  char v32;
  char v33;
  char v34;

  v2 = *(_BYTE *)(a1 + 32);
  v3 = *(_BYTE *)(a1 + 33);
  v4 = *(_BYTE *)(a1 + 34);
  v26 = *(_QWORD *)(a1 + 40);
  v25 = *(_QWORD *)(a1 + 48);
  v24 = *(_QWORD *)(a1 + 56);
  v23 = *(_QWORD *)(a1 + 64);
  v22 = *(_QWORD *)(a1 + 72);
  v5 = *(_QWORD *)(a1 + 88);
  v21 = *(_QWORD *)(a1 + 80);
  v6 = *(_QWORD *)(a1 + 96);
  v7 = *(_BYTE *)(a2 + 32);
  v8 = *(_BYTE *)(a2 + 33);
  v9 = *(_BYTE *)(a2 + 34);
  v11 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v12 = *(_QWORD *)(a2 + 56);
  v13 = *(_QWORD *)(a2 + 64);
  v15 = *(_QWORD *)(a2 + 72);
  v14 = *(_QWORD *)(a2 + 80);
  v17 = *(_QWORD *)(a2 + 88);
  v16 = *(_QWORD *)(a2 + 96);
  v18 = *(_OWORD *)(a1 + 16);
  v31[0] = *(_OWORD *)a1;
  v31[1] = v18;
  v32 = v2;
  v33 = v3;
  v34 = v4;
  v19 = *(_OWORD *)(a2 + 16);
  v27[0] = *(_OWORD *)a2;
  v27[1] = v19;
  v28 = v7;
  v29 = v8;
  v30 = v9;
  return (_s8ShelfKit23RecommendationsMetadataV9AnalyticsV2eeoiySbAE_AEtFZ_0((uint64_t *)v31, (uint64_t)v27) & 1) != 0
      && sub_12DEC(v26, v11)
      && sub_12DEC(v25, v10)
      && (sub_12E60(v24, v12) & 1) != 0
      && (sub_12E60(v23, v13) & 1) != 0
      && (sub_12E64(v22, v15) & 1) != 0
      && (sub_12E60(v21, v14) & 1) != 0
      && (sub_12E60(v5, v17) & 1) != 0
      && (sub_12E60(v6, v16) & 1) != 0;
}

unint64_t sub_2DE1EC()
{
  unint64_t result;

  result = qword_3C80C8;
  if (!qword_3C80C8)
  {
    result = swift_getWitnessTable(&unk_308524);
    atomic_store(result, (unint64_t *)&qword_3C80C8);
  }
  return result;
}

unint64_t sub_2DE230()
{
  unint64_t result;

  result = qword_3C80E0;
  if (!qword_3C80E0)
  {
    result = swift_getWitnessTable(&unk_3084D4);
    atomic_store(result, (unint64_t *)&qword_3C80E0);
  }
  return result;
}

unint64_t sub_2DE274()
{
  unint64_t result;

  result = qword_3C80F8;
  if (!qword_3C80F8)
  {
    result = swift_getWitnessTable(&unk_308484);
    atomic_store(result, (unint64_t *)&qword_3C80F8);
  }
  return result;
}

unint64_t sub_2DE2B8()
{
  unint64_t result;

  result = qword_3C8110;
  if (!qword_3C8110)
  {
    result = swift_getWitnessTable(&unk_308434);
    atomic_store(result, (unint64_t *)&qword_3C8110);
  }
  return result;
}

unint64_t sub_2DE2FC()
{
  unint64_t result;

  result = qword_3C8128;
  if (!qword_3C8128)
  {
    result = swift_getWitnessTable(&unk_3083E4);
    atomic_store(result, (unint64_t *)&qword_3C8128);
  }
  return result;
}

unint64_t sub_2DE340()
{
  unint64_t result;

  result = qword_3C8140;
  if (!qword_3C8140)
  {
    result = swift_getWitnessTable(&unk_308394);
    atomic_store(result, (unint64_t *)&qword_3C8140);
  }
  return result;
}

unint64_t sub_2DE384()
{
  unint64_t result;

  result = qword_3C8158;
  if (!qword_3C8158)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for RecommendationsMetadata.Categories.Metadata);
    atomic_store(result, (unint64_t *)&qword_3C8158);
  }
  return result;
}

unint64_t sub_2DE3C8()
{
  unint64_t result;

  result = qword_3C8178;
  if (!qword_3C8178)
  {
    result = swift_getWitnessTable(&unk_308344);
    atomic_store(result, (unint64_t *)&qword_3C8178);
  }
  return result;
}

unint64_t sub_2DE40C()
{
  unint64_t result;

  result = qword_3C8190;
  if (!qword_3C8190)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for RecommendationsMetadata.Channels.Metadata);
    atomic_store(result, (unint64_t *)&qword_3C8190);
  }
  return result;
}

unint64_t sub_2DE450()
{
  unint64_t result;

  result = qword_3C81B0;
  if (!qword_3C81B0)
  {
    result = swift_getWitnessTable(&unk_3082F4);
    atomic_store(result, (unint64_t *)&qword_3C81B0);
  }
  return result;
}

unint64_t sub_2DE494()
{
  unint64_t result;

  result = qword_3C81C8;
  if (!qword_3C81C8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for RecommendationsMetadata.Episodes.Metadata);
    atomic_store(result, (unint64_t *)&qword_3C81C8);
  }
  return result;
}

unint64_t sub_2DE4D8()
{
  unint64_t result;

  result = qword_3C81E8;
  if (!qword_3C81E8)
  {
    result = swift_getWitnessTable(&unk_3082A4);
    atomic_store(result, (unint64_t *)&qword_3C81E8);
  }
  return result;
}

unint64_t sub_2DE51C()
{
  unint64_t result;

  result = qword_3C8200;
  if (!qword_3C8200)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for RecommendationsMetadata.Shows.Metadata);
    atomic_store(result, (unint64_t *)&qword_3C8200);
  }
  return result;
}

unint64_t sub_2DE560()
{
  unint64_t result;

  result = qword_3C8220;
  if (!qword_3C8220)
  {
    result = swift_getWitnessTable(&unk_308254);
    atomic_store(result, (unint64_t *)&qword_3C8220);
  }
  return result;
}

unint64_t sub_2DE5A4()
{
  unint64_t result;

  result = qword_3C8228;
  if (!qword_3C8228)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for RecommendationsMetadata.Analytics);
    atomic_store(result, (unint64_t *)&qword_3C8228);
  }
  return result;
}

unint64_t sub_2DE5E8()
{
  unint64_t result;

  result = qword_3C8230;
  if (!qword_3C8230)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for RecommendationsMetadata.Categories);
    atomic_store(result, (unint64_t *)&qword_3C8230);
  }
  return result;
}

unint64_t sub_2DE62C()
{
  unint64_t result;

  result = qword_3C8238;
  if (!qword_3C8238)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for RecommendationsMetadata.Channels);
    atomic_store(result, (unint64_t *)&qword_3C8238);
  }
  return result;
}

unint64_t sub_2DE670()
{
  unint64_t result;

  result = qword_3C8240;
  if (!qword_3C8240)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for RecommendationsMetadata.Episodes);
    atomic_store(result, (unint64_t *)&qword_3C8240);
  }
  return result;
}

unint64_t sub_2DE6B4()
{
  unint64_t result;

  result = qword_3C8248;
  if (!qword_3C8248)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for RecommendationsMetadata.Shows);
    atomic_store(result, (unint64_t *)&qword_3C8248);
  }
  return result;
}

ValueMetadata *type metadata accessor for RecommendationsMetadata()
{
  return &type metadata for RecommendationsMetadata;
}

uint64_t initializeWithCopy for RecommendationsMetadata.Analytics(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_WORD *)(a1 + 33) = *(_WORD *)(a2 + 33);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t assignWithCopy for RecommendationsMetadata.Analytics(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  return a1;
}

__n128 __swift_memcpy35_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 31) = *(_DWORD *)(a2 + 31);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for RecommendationsMetadata.Analytics(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  return a1;
}

uint64_t getEnumTagSinglePayload for RecommendationsMetadata.Analytics(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 35))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for RecommendationsMetadata.Analytics(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 34) = 0;
    *(_WORD *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 35) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 35) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for RecommendationsMetadata.Analytics()
{
  return &type metadata for RecommendationsMetadata.Analytics;
}

ValueMetadata *type metadata accessor for RecommendationsMetadata.Categories()
{
  return &type metadata for RecommendationsMetadata.Categories;
}

ValueMetadata *type metadata accessor for RecommendationsMetadata.Categories.Metadata()
{
  return &type metadata for RecommendationsMetadata.Categories.Metadata;
}

ValueMetadata *type metadata accessor for RecommendationsMetadata.Channels()
{
  return &type metadata for RecommendationsMetadata.Channels;
}

ValueMetadata *type metadata accessor for RecommendationsMetadata.Channels.Metadata()
{
  return &type metadata for RecommendationsMetadata.Channels.Metadata;
}

ValueMetadata *type metadata accessor for RecommendationsMetadata.Episodes()
{
  return &type metadata for RecommendationsMetadata.Episodes;
}

uint64_t getEnumTagSinglePayload for RecommendationsMetadata.Episodes.Metadata(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 49))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 17);
  if (v3 >= 2)
    v4 = ((v3 + 2147483646) & 0x7FFFFFFF) - 1;
  else
    v4 = -2;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for RecommendationsMetadata.Episodes.Metadata(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 49) = 0;
    if (a2)
      *(_BYTE *)(result + 17) = a2 + 2;
  }
  return result;
}

ValueMetadata *type metadata accessor for RecommendationsMetadata.Episodes.Metadata()
{
  return &type metadata for RecommendationsMetadata.Episodes.Metadata;
}

uint64_t destroy for RecommendationsMetadata.Shows(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  swift_bridgeObjectRelease(a1[1]);
  return swift_bridgeObjectRelease(a1[2]);
}

uint64_t *_s8ShelfKit23RecommendationsMetadataV5ShowsVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[2];
  a1[2] = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t *assignWithCopy for RecommendationsMetadata.Shows(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a2[2];
  v9 = a1[2];
  a1[2] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

_QWORD *assignWithTake for RecommendationsMetadata.Shows(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease(v4);
  v5 = a1[2];
  a1[2] = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v5);
  return a1;
}

ValueMetadata *type metadata accessor for RecommendationsMetadata.Shows()
{
  return &type metadata for RecommendationsMetadata.Shows;
}

uint64_t getEnumTagSinglePayload for RecommendationsMetadata.Shows.Metadata(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for RecommendationsMetadata.Shows.Metadata(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 17) = v3;
  return result;
}

ValueMetadata *type metadata accessor for RecommendationsMetadata.Shows.Metadata()
{
  return &type metadata for RecommendationsMetadata.Shows.Metadata;
}

ValueMetadata *type metadata accessor for RecommendationsMetadata.CodingKeys()
{
  return &type metadata for RecommendationsMetadata.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for RecommendationsMetadata.Shows.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_2DEC44 + 4 * byte_30704A[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_2DEC78 + 4 * byte_307045[v4]))();
}

uint64_t sub_2DEC78(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2DEC80(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2DEC88);
  return result;
}

uint64_t sub_2DEC94(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2DEC9CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_2DECA0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2DECA8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RecommendationsMetadata.Shows.CodingKeys()
{
  return &type metadata for RecommendationsMetadata.Shows.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for RecommendationsMetadata.Episodes.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_2DED04 + 4 * byte_30704F[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_2DED24 + 4 * byte_307054[v4]))();
}

_BYTE *sub_2DED04(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_2DED24(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_2DED2C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_2DED34(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_2DED3C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_2DED44(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for RecommendationsMetadata.Episodes.CodingKeys()
{
  return &type metadata for RecommendationsMetadata.Episodes.CodingKeys;
}

ValueMetadata *type metadata accessor for RecommendationsMetadata.Channels.CodingKeys()
{
  return &type metadata for RecommendationsMetadata.Channels.CodingKeys;
}

ValueMetadata *type metadata accessor for RecommendationsMetadata.Categories.CodingKeys()
{
  return &type metadata for RecommendationsMetadata.Categories.CodingKeys;
}

ValueMetadata *type metadata accessor for RecommendationsMetadata.Shows.Metadata.CodingKeys()
{
  return &type metadata for RecommendationsMetadata.Shows.Metadata.CodingKeys;
}

ValueMetadata *type metadata accessor for RecommendationsMetadata.Episodes.Metadata.CodingKeys()
{
  return &type metadata for RecommendationsMetadata.Episodes.Metadata.CodingKeys;
}

ValueMetadata *type metadata accessor for RecommendationsMetadata.Channels.Metadata.CodingKeys()
{
  return &type metadata for RecommendationsMetadata.Channels.Metadata.CodingKeys;
}

uint64_t _s8ShelfKit23RecommendationsMetadataV8ChannelsV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_2DEE00 + 4 * byte_30705E[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_2DEE34 + 4 * byte_307059[v4]))();
}

uint64_t sub_2DEE34(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2DEE3C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2DEE44);
  return result;
}

uint64_t sub_2DEE50(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2DEE58);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_2DEE5C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2DEE64(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RecommendationsMetadata.Categories.Metadata.CodingKeys()
{
  return &type metadata for RecommendationsMetadata.Categories.Metadata.CodingKeys;
}

uint64_t _s8ShelfKit23RecommendationsMetadataV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_2DEECC + 4 * byte_307068[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_2DEF00 + 4 * byte_307063[v4]))();
}

uint64_t sub_2DEF00(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2DEF08(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2DEF10);
  return result;
}

uint64_t sub_2DEF1C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2DEF24);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_2DEF28(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2DEF30(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RecommendationsMetadata.Analytics.CodingKeys()
{
  return &type metadata for RecommendationsMetadata.Analytics.CodingKeys;
}

unint64_t sub_2DEF50()
{
  unint64_t result;

  result = qword_3C8258;
  if (!qword_3C8258)
  {
    result = swift_getWitnessTable(&unk_307AD4);
    atomic_store(result, (unint64_t *)&qword_3C8258);
  }
  return result;
}

unint64_t sub_2DEF98()
{
  unint64_t result;

  result = qword_3C8260;
  if (!qword_3C8260)
  {
    result = swift_getWitnessTable(&unk_307BC4);
    atomic_store(result, (unint64_t *)&qword_3C8260);
  }
  return result;
}

unint64_t sub_2DEFE0()
{
  unint64_t result;

  result = qword_3C8268;
  if (!qword_3C8268)
  {
    result = swift_getWitnessTable(&unk_307CB4);
    atomic_store(result, (unint64_t *)&qword_3C8268);
  }
  return result;
}

unint64_t sub_2DF028()
{
  unint64_t result;

  result = qword_3C8270;
  if (!qword_3C8270)
  {
    result = swift_getWitnessTable(&unk_307DA4);
    atomic_store(result, (unint64_t *)&qword_3C8270);
  }
  return result;
}

unint64_t sub_2DF070()
{
  unint64_t result;

  result = qword_3C8278;
  if (!qword_3C8278)
  {
    result = swift_getWitnessTable(&unk_307E94);
    atomic_store(result, (unint64_t *)&qword_3C8278);
  }
  return result;
}

unint64_t sub_2DF0B8()
{
  unint64_t result;

  result = qword_3C8280;
  if (!qword_3C8280)
  {
    result = swift_getWitnessTable(&unk_307F4C);
    atomic_store(result, (unint64_t *)&qword_3C8280);
  }
  return result;
}

unint64_t sub_2DF100()
{
  unint64_t result;

  result = qword_3C8288;
  if (!qword_3C8288)
  {
    result = swift_getWitnessTable(&unk_308004);
    atomic_store(result, (unint64_t *)&qword_3C8288);
  }
  return result;
}

unint64_t sub_2DF148()
{
  unint64_t result;

  result = qword_3C8290;
  if (!qword_3C8290)
  {
    result = swift_getWitnessTable(&unk_3080BC);
    atomic_store(result, (unint64_t *)&qword_3C8290);
  }
  return result;
}

unint64_t sub_2DF190()
{
  unint64_t result;

  result = qword_3C8298;
  if (!qword_3C8298)
  {
    result = swift_getWitnessTable(&unk_308174);
    atomic_store(result, (unint64_t *)&qword_3C8298);
  }
  return result;
}

unint64_t sub_2DF1D8()
{
  unint64_t result;

  result = qword_3C82A0;
  if (!qword_3C82A0)
  {
    result = swift_getWitnessTable(&unk_30822C);
    atomic_store(result, (unint64_t *)&qword_3C82A0);
  }
  return result;
}

unint64_t sub_2DF220()
{
  unint64_t result;

  result = qword_3C82A8;
  if (!qword_3C82A8)
  {
    result = swift_getWitnessTable(&unk_30819C);
    atomic_store(result, (unint64_t *)&qword_3C82A8);
  }
  return result;
}

unint64_t sub_2DF268()
{
  unint64_t result;

  result = qword_3C82B0;
  if (!qword_3C82B0)
  {
    result = swift_getWitnessTable(&unk_3081C4);
    atomic_store(result, (unint64_t *)&qword_3C82B0);
  }
  return result;
}

unint64_t sub_2DF2B0()
{
  unint64_t result;

  result = qword_3C82B8;
  if (!qword_3C82B8)
  {
    result = swift_getWitnessTable(&unk_3080E4);
    atomic_store(result, (unint64_t *)&qword_3C82B8);
  }
  return result;
}

unint64_t sub_2DF2F8()
{
  unint64_t result;

  result = qword_3C82C0;
  if (!qword_3C82C0)
  {
    result = swift_getWitnessTable(&unk_30810C);
    atomic_store(result, (unint64_t *)&qword_3C82C0);
  }
  return result;
}

unint64_t sub_2DF340()
{
  unint64_t result;

  result = qword_3C82C8;
  if (!qword_3C82C8)
  {
    result = swift_getWitnessTable(&unk_30802C);
    atomic_store(result, (unint64_t *)&qword_3C82C8);
  }
  return result;
}

unint64_t sub_2DF388()
{
  unint64_t result;

  result = qword_3C82D0;
  if (!qword_3C82D0)
  {
    result = swift_getWitnessTable(&unk_308054);
    atomic_store(result, (unint64_t *)&qword_3C82D0);
  }
  return result;
}

unint64_t sub_2DF3D0()
{
  unint64_t result;

  result = qword_3C82D8;
  if (!qword_3C82D8)
  {
    result = swift_getWitnessTable(&unk_307F74);
    atomic_store(result, (unint64_t *)&qword_3C82D8);
  }
  return result;
}

unint64_t sub_2DF418()
{
  unint64_t result;

  result = qword_3C82E0;
  if (!qword_3C82E0)
  {
    result = swift_getWitnessTable(&unk_307F9C);
    atomic_store(result, (unint64_t *)&qword_3C82E0);
  }
  return result;
}

unint64_t sub_2DF460()
{
  unint64_t result;

  result = qword_3C82E8;
  if (!qword_3C82E8)
  {
    result = swift_getWitnessTable(&unk_307EBC);
    atomic_store(result, (unint64_t *)&qword_3C82E8);
  }
  return result;
}

unint64_t sub_2DF4A8()
{
  unint64_t result;

  result = qword_3C82F0;
  if (!qword_3C82F0)
  {
    result = swift_getWitnessTable(&unk_307EE4);
    atomic_store(result, (unint64_t *)&qword_3C82F0);
  }
  return result;
}

unint64_t sub_2DF4F0()
{
  unint64_t result;

  result = qword_3C82F8;
  if (!qword_3C82F8)
  {
    result = swift_getWitnessTable(&unk_307DCC);
    atomic_store(result, (unint64_t *)&qword_3C82F8);
  }
  return result;
}

unint64_t sub_2DF538()
{
  unint64_t result;

  result = qword_3C8300;
  if (!qword_3C8300)
  {
    result = swift_getWitnessTable(&unk_307DF4);
    atomic_store(result, (unint64_t *)&qword_3C8300);
  }
  return result;
}

unint64_t sub_2DF580()
{
  unint64_t result;

  result = qword_3C8308;
  if (!qword_3C8308)
  {
    result = swift_getWitnessTable(&unk_307CDC);
    atomic_store(result, (unint64_t *)&qword_3C8308);
  }
  return result;
}

unint64_t sub_2DF5C8()
{
  unint64_t result;

  result = qword_3C8310;
  if (!qword_3C8310)
  {
    result = swift_getWitnessTable(&unk_307D04);
    atomic_store(result, (unint64_t *)&qword_3C8310);
  }
  return result;
}

unint64_t sub_2DF610()
{
  unint64_t result;

  result = qword_3C8318;
  if (!qword_3C8318)
  {
    result = swift_getWitnessTable(&unk_307BEC);
    atomic_store(result, (unint64_t *)&qword_3C8318);
  }
  return result;
}

unint64_t sub_2DF658()
{
  unint64_t result;

  result = qword_3C8320;
  if (!qword_3C8320)
  {
    result = swift_getWitnessTable(&unk_307C14);
    atomic_store(result, (unint64_t *)&qword_3C8320);
  }
  return result;
}

unint64_t sub_2DF6A0()
{
  unint64_t result;

  result = qword_3C8328;
  if (!qword_3C8328)
  {
    result = swift_getWitnessTable(&unk_307AFC);
    atomic_store(result, (unint64_t *)&qword_3C8328);
  }
  return result;
}

unint64_t sub_2DF6E8()
{
  unint64_t result;

  result = qword_3C8330;
  if (!qword_3C8330)
  {
    result = swift_getWitnessTable(&unk_307B24);
    atomic_store(result, (unint64_t *)&qword_3C8330);
  }
  return result;
}

unint64_t sub_2DF730()
{
  unint64_t result;

  result = qword_3C8338;
  if (!qword_3C8338)
  {
    result = swift_getWitnessTable(&unk_307A0C);
    atomic_store(result, (unint64_t *)&qword_3C8338);
  }
  return result;
}

unint64_t sub_2DF778()
{
  unint64_t result;

  result = qword_3C8340;
  if (!qword_3C8340)
  {
    result = swift_getWitnessTable(&unk_307A34);
    atomic_store(result, (unint64_t *)&qword_3C8340);
  }
  return result;
}

uint64_t sub_2DF7BC(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x64656B696CLL && a2 == 0xE500000000000000)
  {
    v5 = 0xE500000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x64656B696CLL, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x64656B696C736964 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease(0xE800000000000000);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x64656B696C736964, 0xE800000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_2DF8A4(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x6269726373627573 && a2 == 0xEA00000000006465)
  {
    v5 = 0xEA00000000006465;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6269726373627573, 0xEA00000000006465, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x64656B696C736964 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease(0xE800000000000000);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x64656B696C736964, 0xE800000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_2DF9A0(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x6465776F6C6C6F66 && a2 == 0xE800000000000000)
  {
    v5 = 0xE800000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6465776F6C6C6F66, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x776F6C6C6F666E75 && a2 == 0xEA00000000006465)
  {
    v7 = 0xEA00000000006465;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x776F6C6C6F666E75, 0xEA00000000006465, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x64656B696C736964 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease(0xE800000000000000);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x64656B696C736964, 0xE800000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_2DFB00(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;

  if (a1 == 0x636974796C616E61 && a2 == 0xE900000000000073)
  {
    v5 = 0xE900000000000073;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x636974796C616E61, 0xE900000000000073, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x69726F6765746163 && a2 == 0xEA00000000007365)
  {
    v7 = 0xEA00000000007365;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x69726F6765746163, 0xEA00000000007365, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x736C656E6E616863 && a2 == 0xE800000000000000)
  {
    v8 = 0xE800000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x736C656E6E616863, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x7365646F73697065 && a2 == 0xE800000000000000)
  {
    v9 = 0xE800000000000000;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7365646F73697065, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x73776F6873 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease(0xE500000000000000);
    return 4;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x73776F6873, 0xE500000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

unint64_t sub_2DFD2C(Swift::String string, Swift::OpaquePointer cases)
{
  void *object;
  Swift::String v3;
  unint64_t v5;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)(cases, v3);
  swift_bridgeObjectRelease(object);
  if (v5 >= 5)
    return 5;
  else
    return v5;
}

uint64_t _s8ShelfKit15FetchPageIntentV2eeoiySbAC_ACtFZ_0()
{
  return static URL.== infix(_:_:)();
}

uint64_t _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0()
{
  return UUID.uuidString.getter();
}

uint64_t _s8ShelfKit19ActionRunnerOptionsCfd_0()
{
  return BaseObjectGraph.deinit();
}

uint64_t _sSa8ShelfKitE18observerErrorValueSayxGvgZ_0()
{
  return Array.init()();
}

id objc_msgSend_OSLogObject(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "OSLogObject");
}

id objc_msgSend_URL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URL");
}

id objc_msgSend_URLSession(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLSession");
}

id objc_msgSend_URLWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLWithString:");
}

id objc_msgSend_UTF8String(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "UTF8String");
}

id objc_msgSend__commonInit(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_commonInit");
}

id objc_msgSend__loadReason(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_loadReason");
}

id objc_msgSend__markAsHasRequestedImages(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_markAsHasRequestedImages");
}

id objc_msgSend__parserContext(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_parserContext");
}

id objc_msgSend__setLoadReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setLoadReason:");
}

id objc_msgSend_aa_primaryAppleAccount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "aa_primaryAppleAccount");
}

id objc_msgSend_accessQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accessQueue");
}

id objc_msgSend_accountPropertyForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountPropertyForKey:");
}

id objc_msgSend_accountStore(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountStore");
}

id objc_msgSend_activeAccount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activeAccount");
}

id objc_msgSend_activeAccountFromDefaultStore(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activeAccountFromDefaultStore");
}

id objc_msgSend_addObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObject:");
}

id objc_msgSend_addObserver_selector_name_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserver:selector:name:object:");
}

id objc_msgSend_addOperation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addOperation:");
}

id objc_msgSend_addOperationWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addOperationWithBlock:");
}

id objc_msgSend_addResource_forCacheKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addResource:forCacheKey:");
}

id objc_msgSend_airplaneMode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "airplaneMode");
}

id objc_msgSend_airplaneModeInquiryDidObserveChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "airplaneModeInquiryDidObserveChange:");
}

id objc_msgSend_allValues(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allValues");
}

id objc_msgSend_ams_DSID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_DSID");
}

id objc_msgSend_ams_activeiTunesAccount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_activeiTunesAccount");
}

id objc_msgSend_ams_cookiesForURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_cookiesForURL:");
}

id objc_msgSend_ams_localiTunesAccount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_localiTunesAccount");
}

id objc_msgSend_ams_sharedAccountStore(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_sharedAccountStore");
}

id objc_msgSend_ams_storefront(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_storefront");
}

id objc_msgSend_appBootstrapHandler(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appBootstrapHandler");
}

id objc_msgSend_arrayByAddingObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayByAddingObject:");
}

id objc_msgSend_arrayWithObjects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObjects:count:");
}

id objc_msgSend_ask_generalLogConfig(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ask_generalLogConfig");
}

id objc_msgSend_ask_processStartTime(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ask_processStartTime");
}

id objc_msgSend_block(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "block");
}

id objc_msgSend_BOOLValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "BOOLValue");
}

id objc_msgSend_bundle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bundle");
}

id objc_msgSend_bundleIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bundleIdentifier");
}

id objc_msgSend_bundleWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bundleWithIdentifier:");
}

id objc_msgSend_cacheKey(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cacheKey");
}

id objc_msgSend_cacheOptions(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cacheOptions");
}

id objc_msgSend_cachedResources(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cachedResources");
}

id objc_msgSend_cancel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancel");
}

id objc_msgSend_cancelAllRequests(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelAllRequests");
}

id objc_msgSend_cancelPreviousPerformRequestsWithTarget_selector_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelPreviousPerformRequestsWithTarget:selector:object:");
}

id objc_msgSend_characterDirectionForLanguage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "characterDirectionForLanguage:");
}

id objc_msgSend_componentsSeparatedByString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "componentsSeparatedByString:");
}

id objc_msgSend_configureProfilePictureStoreAndNotifyIfNeeded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configureProfilePictureStoreAndNotifyIfNeeded");
}

id objc_msgSend_connectionTypeHeader(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectionTypeHeader");
}

id objc_msgSend_contactWithDisplayName_emailOrPhoneNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contactWithDisplayName:emailOrPhoneNumber:");
}

id objc_msgSend_containsObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsObject:");
}

id objc_msgSend_copy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copy");
}

id objc_msgSend_copyWithZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyWithZone:");
}

id objc_msgSend_count(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "count");
}

id objc_msgSend_countByEnumeratingWithState_objects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countByEnumeratingWithState:objects:count:");
}

id objc_msgSend_currentProcess(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentProcess");
}

id objc_msgSend_currentQualityOfService(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentQualityOfService");
}

id objc_msgSend_dataConsumer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataConsumer");
}

id objc_msgSend_dataConsumerQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataConsumerQueue");
}

id objc_msgSend_dataTaskWithRequest_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataTaskWithRequest:completionHandler:");
}

id objc_msgSend_date(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "date");
}

id objc_msgSend_defaultCenter(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultCenter");
}

id objc_msgSend_defaultSessionConfiguration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultSessionConfiguration");
}

id objc_msgSend_defaultSettings(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultSettings");
}

id objc_msgSend_delayCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "delayCount");
}

id objc_msgSend_delegate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "delegate");
}

id objc_msgSend_dictionary(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionary");
}

id objc_msgSend_dictionaryWithObjects_forKeys_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithObjects:forKeys:count:");
}

id objc_msgSend_didChangeValueForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didChangeValueForKey:");
}

id objc_msgSend_didCompleteWithResource_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didCompleteWithResource:error:");
}

id objc_msgSend_didFinishTaskWithData_response_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didFinishTaskWithData:response:error:");
}

id objc_msgSend_didLoadResource_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didLoadResource:error:");
}

id objc_msgSend_doesNotRecognizeSelector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "doesNotRecognizeSelector:");
}

id objc_msgSend_doubleValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "doubleValue");
}

id objc_msgSend_drawInRect_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "drawInRect:");
}

id objc_msgSend_errorWithDomain_code_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorWithDomain:code:userInfo:");
}

id objc_msgSend_finishLoadForRequest_withResource_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "finishLoadForRequest:withResource:error:");
}

id objc_msgSend_firstObject(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "firstObject");
}

id objc_msgSend_floatForKey_fromURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "floatForKey:fromURL:");
}

id objc_msgSend_formattedValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "formattedValue");
}

id objc_msgSend_handler(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handler");
}

id objc_msgSend_handlerTokens(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handlerTokens");
}

id objc_msgSend_hasManagedStateChangedFromAccount_toAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasManagedStateChangedFromAccount:toAccount:");
}

id objc_msgSend_hasPendingNotification(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasPendingNotification");
}

id objc_msgSend_hasRequestedImages(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasRequestedImages");
}

id objc_msgSend_hasStorefrontChangedFromAccount_toAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasStorefrontChangedFromAccount:toAccount:");
}

id objc_msgSend_hash(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hash");
}

id objc_msgSend_heightFromURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "heightFromURL:");
}

id objc_msgSend_host(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "host");
}

id objc_msgSend_imageNamed_inBundle_compatibleWithTraitCollection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageNamed:inBundle:compatibleWithTraitCollection:");
}

id objc_msgSend_imageRequest_didFailWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageRequest:didFailWithError:");
}

id objc_msgSend_imageRequest_didLoadImage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageRequest:didLoadImage:");
}

id objc_msgSend_imageWithActions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageWithActions:");
}

id objc_msgSend_initWithAppleAccount_store_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAppleAccount:store:");
}

id objc_msgSend_initWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBlock:");
}

id objc_msgSend_initWithBundle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBundle:");
}

id objc_msgSend_initWithBytes_length_encoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBytes:length:encoding:");
}

id objc_msgSend_initWithData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithData:");
}

id objc_msgSend_initWithHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithHandler:");
}

id objc_msgSend_initWithKeyOptions_valueOptions_capacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithKeyOptions:valueOptions:capacity:");
}

id objc_msgSend_initWithMonogramResourceURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMonogramResourceURL:");
}

id objc_msgSend_initWithResourceName_searchBundles_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithResourceName:searchBundles:");
}

id objc_msgSend_initWithSettings_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSettings:");
}

id objc_msgSend_initWithSize_format_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSize:format:");
}

id objc_msgSend_initWithURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithURL:");
}

id objc_msgSend_initWithURL_resolvingAgainstBaseURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithURL:resolvingAgainstBaseURL:");
}

id objc_msgSend_initWithURLRequest_URLSession_dataConsumer_dataConsumerQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithURLRequest:URLSession:dataConsumer:dataConsumerQueue:");
}

id objc_msgSend_initWithURLRequest_dataConsumer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithURLRequest:dataConsumer:");
}

id objc_msgSend_initWithUTF8String_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUTF8String:");
}

id objc_msgSend_initalsFromURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initalsFromURL:");
}

id objc_msgSend_isCancelled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isCancelled");
}

id objc_msgSend_isEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEnabled");
}

id objc_msgSend_isEnabledForDevice(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEnabledForDevice");
}

id objc_msgSend_isEqual_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqual:");
}

id objc_msgSend_isEqualToString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToString:");
}

id objc_msgSend_isIdle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isIdle");
}

id objc_msgSend_isInBackground(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isInBackground");
}

id objc_msgSend_isMonogramRequest(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isMonogramRequest");
}

id objc_msgSend_isRTL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isRTL");
}

id objc_msgSend_isRendering(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isRendering");
}

id objc_msgSend_isResourceRequest(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isResourceRequest");
}

id objc_msgSend_isRunningOnInternalOS(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isRunningOnInternalOS");
}

id objc_msgSend_isSupported(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSupported");
}

id objc_msgSend_length(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "length");
}

id objc_msgSend_lengthOfBytesUsingEncoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lengthOfBytesUsingEncoding:");
}

id objc_msgSend_localAccount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localAccount");
}

id objc_msgSend_mainBundle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mainBundle");
}

id objc_msgSend_makeLoadOperation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "makeLoadOperation");
}

id objc_msgSend_makeObjectsPerformSelector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "makeObjectsPerformSelector:");
}

id objc_msgSend_makeUniqueKey(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "makeUniqueKey");
}

id objc_msgSend_monogram(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "monogram");
}

id objc_msgSend_monogramConfig(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "monogramConfig");
}

id objc_msgSend_monogramWithURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "monogramWithURL:");
}

id objc_msgSend_name(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "name");
}

id objc_msgSend_nameFromURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nameFromURL:");
}

id objc_msgSend_notificationQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notificationQueue");
}

id objc_msgSend_notify(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notify");
}

id objc_msgSend_notifyIfNeeded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notifyIfNeeded");
}

id objc_msgSend_notifyQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notifyQueue");
}

id objc_msgSend_numberFormatter(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberFormatter");
}

id objc_msgSend_numberFromString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberFromString:");
}

id objc_msgSend_numberWithBool_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithBool:");
}

id objc_msgSend_numberWithInt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithInt:");
}

id objc_msgSend_numberWithInteger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithInteger:");
}

id objc_msgSend_numberWithUnsignedLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedLong:");
}

id objc_msgSend_objectEnumerator(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectEnumerator");
}

id objc_msgSend_objectForData_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForData:error:");
}

id objc_msgSend_objectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKey:");
}

id objc_msgSend_objectForKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKeyedSubscript:");
}

id objc_msgSend_outputBlock(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "outputBlock");
}

id objc_msgSend_parser_didEndElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parser:didEndElement:");
}

id objc_msgSend_parser_didEndListOfStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parser:didEndListOfStyle:");
}

id objc_msgSend_parser_didFindCharacters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parser:didFindCharacters:");
}

id objc_msgSend_parser_didStartElement_attributes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parser:didStartElement:attributes:");
}

id objc_msgSend_parser_didStartListOfStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parser:didStartListOfStyle:");
}

id objc_msgSend_parser_parseErrorOccurred_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parser:parseErrorOccurred:");
}

id objc_msgSend_parserDidEndDocument_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parserDidEndDocument:");
}

id objc_msgSend_parserDidEndListElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parserDidEndListElement:");
}

id objc_msgSend_parserDidFindNewline_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parserDidFindNewline:");
}

id objc_msgSend_parserDidStartDocument_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parserDidStartDocument:");
}

id objc_msgSend_parserDidStartListElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parserDidStartListElement:");
}

id objc_msgSend_pendingOperations(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pendingOperations");
}

id objc_msgSend_performSelector_withObject_afterDelay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performSelector:withObject:afterDelay:");
}

id objc_msgSend_performSelector_withObject_afterDelay_inModes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performSelector:withObject:afterDelay:inModes:");
}

id objc_msgSend_performSelectorOnMainThread_withObject_waitUntilDone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performSelectorOnMainThread:withObject:waitUntilDone:");
}

id objc_msgSend_postDidBeginLoadingIfIdle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postDidBeginLoadingIfIdle");
}

id objc_msgSend_postDidIdleIfIdle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postDidIdleIfIdle");
}

id objc_msgSend_postDidLoadAllForReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postDidLoadAllForReason:");
}

id objc_msgSend_postNotificationName_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postNotificationName:object:");
}

id objc_msgSend_postNotificationName_object_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postNotificationName:object:userInfo:");
}

id objc_msgSend_preferencesURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "preferencesURL");
}

id objc_msgSend_preferredLanguages(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "preferredLanguages");
}

id objc_msgSend_primaryAccountName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "primaryAccountName");
}

id objc_msgSend_profilePictureForAccountOwnerWithoutMonogramFallback(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "profilePictureForAccountOwnerWithoutMonogramFallback");
}

id objc_msgSend_profilePictureStore(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "profilePictureStore");
}

id objc_msgSend_queryItems(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queryItems");
}

id objc_msgSend_queuePriority(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queuePriority");
}

id objc_msgSend_radiosPreferences(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "radiosPreferences");
}

id objc_msgSend_raise_format_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "raise:format:");
}

id objc_msgSend_removeAllObjects(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeAllObjects");
}

id objc_msgSend_removeObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObject:");
}

id objc_msgSend_removeObjectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectForKey:");
}

id objc_msgSend_removeObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObserver:");
}

id objc_msgSend_renderMonogramForString_scope_imageHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "renderMonogramForString:scope:imageHandler:");
}

id objc_msgSend_reportErrorWithCode_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reportErrorWithCode:userInfo:");
}

id objc_msgSend_reportParseError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reportParseError:");
}

id objc_msgSend_reprioritizeOperations(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reprioritizeOperations");
}

id objc_msgSend_requestKey(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestKey");
}

id objc_msgSend_requestKeyForCacheKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestKeyForCacheKey:");
}

id objc_msgSend_requestQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestQueue");
}

id objc_msgSend_requestsByCacheKey(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestsByCacheKey");
}

id objc_msgSend_resource(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resource");
}

id objc_msgSend_resourceName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resourceName");
}

id objc_msgSend_resume(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resume");
}

id objc_msgSend_retainAspectRatio(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "retainAspectRatio");
}

id objc_msgSend_scale(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scale");
}

id objc_msgSend_scheme(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scheme");
}

id objc_msgSend_scopeWithPointSize_scale_rightToLeft_style_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scopeWithPointSize:scale:rightToLeft:style:");
}

id objc_msgSend_searchBundles(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "searchBundles");
}

id objc_msgSend_sessionWithConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sessionWithConfiguration:");
}

id objc_msgSend_setAccountStore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccountStore:");
}

id objc_msgSend_setActiveAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActiveAccount:");
}

id objc_msgSend_setAppBootstrapHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAppBootstrapHandler:");
}

id objc_msgSend_setCategory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCategory:");
}

id objc_msgSend_setCountLimit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCountLimit:");
}

id objc_msgSend_setDelayCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDelayCount:");
}

id objc_msgSend_setDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDelegate:");
}

id objc_msgSend_setHTTPAdditionalHeaders_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHTTPAdditionalHeaders:");
}

id objc_msgSend_setHasPendingNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasPendingNotification:");
}

id objc_msgSend_setHasRequestedImages_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasRequestedImages:");
}

id objc_msgSend_setIsRendering_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsRendering:");
}

id objc_msgSend_setLocalAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLocalAccount:");
}

id objc_msgSend_setMonogramConfig_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMonogramConfig:");
}

id objc_msgSend_setMonogramType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMonogramType:");
}

id objc_msgSend_setObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKey:");
}

id objc_msgSend_setObject_forKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKeyedSubscript:");
}

id objc_msgSend_setOutputBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOutputBlock:");
}

id objc_msgSend_setPictureDiameter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPictureDiameter:");
}

id objc_msgSend_setPrimaryAccountName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPrimaryAccountName:");
}

id objc_msgSend_setPriority_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPriority:");
}

id objc_msgSend_setProfilePictureStore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProfilePictureStore:");
}

id objc_msgSend_setQualityOfService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setQualityOfService:");
}

id objc_msgSend_setQueuePriority_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setQueuePriority:");
}

id objc_msgSend_setScale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScale:");
}

id objc_msgSend_setSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSize:");
}

id objc_msgSend_setStoreAccountName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStoreAccountName:");
}

id objc_msgSend_setSubsystem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSubsystem:");
}

id objc_msgSend_setTotalDataAvailable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTotalDataAvailable:");
}

id objc_msgSend_setTotalDataCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTotalDataCapacity:");
}

id objc_msgSend_setTotalDiskCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTotalDiskCapacity:");
}

id objc_msgSend_setTotalSystemAvailable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTotalSystemAvailable:");
}

id objc_msgSend_setTotalSystemCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTotalSystemCapacity:");
}

id objc_msgSend_setType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setType:");
}

id objc_msgSend_setValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValue:");
}

id objc_msgSend_setWithObjects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithObjects:");
}

id objc_msgSend_set_parserContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "set_parserContext:");
}

id objc_msgSend_sharedConfig(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedConfig");
}

id objc_msgSend_sharedInstance(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedInstance");
}

id objc_msgSend_size(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "size");
}

id objc_msgSend_state(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "state");
}

id objc_msgSend_storeAccountName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storeAccountName");
}

id objc_msgSend_string(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "string");
}

id objc_msgSend_stringFromContact_style_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringFromContact:style:");
}

id objc_msgSend_stringWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithFormat:");
}

id objc_msgSend_task(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "task");
}

id objc_msgSend_timeIntervalSince1970(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeIntervalSince1970");
}

id objc_msgSend_type(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "type");
}

id objc_msgSend_updateLoadReason_forOperation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateLoadReason:forOperation:");
}

id objc_msgSend_urlRequest(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "urlRequest");
}

id objc_msgSend_userAgentForProcessInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userAgentForProcessInfo:");
}

id objc_msgSend_username(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "username");
}

id objc_msgSend_value(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "value");
}

id objc_msgSend_valueForKey_fromURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueForKey:fromURL:");
}

id objc_msgSend_weakObjectsHashTable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weakObjectsHashTable");
}

id objc_msgSend_widthFromURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "widthFromURL:");
}

id objc_msgSend_willChangeValueForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "willChangeValueForKey:");
}
