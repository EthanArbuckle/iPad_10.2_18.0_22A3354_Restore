_QWORD *AddFavoriteCategoriesTipProvider.deinit()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[4]);
  return v0;
}

uint64_t LongDescriptionPresenter.__deallocating_deinit()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[4]);
  return swift_deallocClassInstance(v0, 41, 7);
}

uint64_t sub_107638(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v12[2];
  int v13;
  char v14;

  v2 = v1;
  v4 = type metadata accessor for PageContent(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v12[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *a1;
  v12[0] = 0;
  v12[1] = 0;
  v13 = 0;
  v14 = 5;
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8770);
  swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  *(_QWORD *)(v2 + 24) = CurrentValueSubject.init(_:)(v12);
  *v6 = 0;
  swift_storeEnumTagMultiPayload(v6, v4, 0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B27B0);
  swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  *(_QWORD *)(v2 + 32) = CurrentValueSubject.init(_:)(v6);
  *(_BYTE *)(v2 + 40) = 1;
  *(_QWORD *)(v2 + 16) = v7;
  return v2;
}

uint64_t sub_107730(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ModernPage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_107774(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_726D8(&qword_3B9E28, a2, (void (*)(uint64_t))type metadata accessor for LongDescriptionPresenter, (uint64_t)&protocol conformance descriptor for LongDescriptionPresenter);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for LongDescriptionPresenter()
{
  return objc_opt_self(_TtC8ShelfKit24LongDescriptionPresenter);
}

uint64_t sub_1077D0(uint64_t a1, uint64_t a2)
{
  return sub_726D8(&qword_3B9E30, a2, (void (*)(uint64_t))type metadata accessor for LongDescriptionPresenter, (uint64_t)&protocol conformance descriptor for LongDescriptionPresenter);
}

uint64_t method lookup function for LongDescriptionPresenter(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for LongDescriptionPresenter);
}

ValueMetadata *type metadata accessor for LongDescriptionPresenter.Configuration()
{
  return &type metadata for LongDescriptionPresenter.Configuration;
}

uint64_t LibraryEpisodeLockup.metricsChannelAdamId.getter()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_episodeEntitlementState) == 2)
    return *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit20LibraryEpisodeLockup_channelAdamId);
  else
    return 0;
}

uint64_t LibraryEpisodeLockup.uuid.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit20LibraryEpisodeLockup_uuid);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit20LibraryEpisodeLockup_uuid + 8));
  return v1;
}

uint64_t LibraryEpisodeLockup.podcastUuid.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit20LibraryEpisodeLockup_podcastUuid);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit20LibraryEpisodeLockup_podcastUuid + 8));
  return v1;
}

uint64_t LibraryEpisodeLockup.podcastAdamId.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit20LibraryEpisodeLockup_podcastAdamId);
}

uint64_t LibraryEpisodeLockup.channelAdamId.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit20LibraryEpisodeLockup_channelAdamId);
}

uint64_t LibraryEpisodeLockup.presentDetailsAction.getter()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit20LibraryEpisodeLockup_presentDetailsAction));
}

uint64_t LibraryEpisodeLockup.assetFileUrl.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_267BC(v1 + OBJC_IVAR____TtC8ShelfKit20LibraryEpisodeLockup_assetFileUrl, a1, &qword_3B4370);
}

uint64_t LibraryEpisodeLockup.__allocating_init(uuid:podcastUuid:podcastAdamId:channelAdamId:adamId:episodeType:duration:seasonNumber:episodeNumber:mediaType:icon:showUberArtwork:episodeArtwork:title:subtitles:ordinal:rating:buttonAction:clickAction:titleAction:summaryAction:playAction:contextAction:previewAction:presentDetailsAction:subtitleAction:caption:summary:isExplicit:showTypeIsSerial:isMultiEpisode:playedTextStyle:assetFileUrl:releaseDate:episodeEntitlementState:hasFreeVersion:subscriptionName:channelName:showTitle:showDisplayType:listenNowReason:listContext:referenceTime:playerTime:impressionMetrics:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, _QWORD *a8, char a9, unsigned __int8 a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, unsigned __int8 a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,unint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,unsigned __int8 a39,unsigned __int8 a40,unsigned __int8 a41,unsigned __int8 *a42,uint64_t a43,uint64_t a44,uint64_t a45,unsigned __int8 a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,unsigned __int8 a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,char a59,uint64_t a60)
{
  uint64_t v60;
  uint64_t v61;
  int v63;

  v63 = a7 & 1;
  swift_allocObject(v60, *(unsigned int *)(v60 + 48), *(unsigned __int16 *)(v60 + 52));
  v61 = sub_109128(a1, a2, a3, a4, a5, a6, v63, a8, a9 & 1, a10, a11, a12 & 1, a13, a14 & 1, a15, a16 & 1, a17, a18, a19,
          a20,
          a21,
          a22,
          a23,
          a24,
          a25,
          a26 | ((HIDWORD(a26) & 1) << 32),
          a27,
          a28,
          a29,
          a30,
          a31,
          a32,
          a33,
          a34,
          a35,
          a36,
          a37,
          a38,
          a39,
          a40,
          a41,
          a42,
          a43,
          a44,
          a45,
          a46,
          a47,
          a48,
          a49,
          a50,
          a51,
          a52,
          a53,
          a54,
          a55,
          a56,
          a57 & 1,
          a58,
          a59 & 1,
          a60);

  swift_release(a34);
  swift_release(a30);
  swift_release(a29);
  return v61;
}

uint64_t LibraryEpisodeLockup.init(uuid:podcastUuid:podcastAdamId:channelAdamId:adamId:episodeType:duration:seasonNumber:episodeNumber:mediaType:icon:showUberArtwork:episodeArtwork:title:subtitles:ordinal:rating:buttonAction:clickAction:titleAction:summaryAction:playAction:contextAction:previewAction:presentDetailsAction:subtitleAction:caption:summary:isExplicit:showTypeIsSerial:isMultiEpisode:playedTextStyle:assetFileUrl:releaseDate:episodeEntitlementState:hasFreeVersion:subscriptionName:channelName:showTitle:showDisplayType:listenNowReason:listContext:referenceTime:playerTime:impressionMetrics:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, _QWORD *a8, char a9, unsigned __int8 a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, unsigned __int8 a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,unint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,unsigned __int8 a39,unsigned __int8 a40,unsigned __int8 a41,unsigned __int8 *a42,uint64_t a43,uint64_t a44,uint64_t a45,unsigned __int8 a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,unsigned __int8 a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,char a59,uint64_t a60)
{
  uint64_t v60;

  v60 = sub_109128(a1, a2, a3, a4, a5, a6, a7 & 1, a8, a9 & 1, a10, a11, a12 & 1, a13, a14 & 1, a15, a16 & 1, a17, a18, a19,
          a20,
          a21,
          a22,
          a23,
          a24,
          a25,
          a26 | ((HIDWORD(a26) & 1) << 32),
          a27,
          a28,
          a29,
          a30,
          a31,
          a32,
          a33,
          a34,
          a35,
          a36,
          a37,
          a38,
          a39,
          a40,
          a41,
          a42,
          a43,
          a44,
          a45,
          a46,
          a47,
          a48,
          a49,
          a50,
          a51,
          a52,
          a53,
          a54,
          a55,
          a56,
          a57 & 1,
          a58,
          a59 & 1,
          a60);

  swift_release(a34);
  swift_release(a30);
  swift_release(a29);
  return v60;
}

void LibraryEpisodeLockup.init(deserializing:using:)()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000033, 0x800000000030A500, "ShelfKit/LibraryEpisodeLockup.swift", 35, 2, 134, 0);
  __break(1u);
}

uint64_t LibraryEpisodeLockup.variant(clickActionType:)(char *a1)
{
  uint64_t v1;
  unsigned __int8 v3;
  _BYTE v4[40];

  sub_107EEC(*a1);
  v3 = 2;
  v1 = sub_108198((uint64_t)v4, &v3);
  sub_1459C((uint64_t)v4, &qword_3B0C50);
  return v1;
}

void sub_107EEC(char a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = type metadata accessor for ActionMetrics(0);
  __chkstk_darwin(v2);
  v3 = type metadata accessor for FlowDestination(0);
  __chkstk_darwin(v3);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3C88);
  __chkstk_darwin(v4);
  __asm { BR              X10 }
}

uint64_t sub_107FD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v5 = v1 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup__playAction;
  swift_beginAccess(v1 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup__playAction, v4 - 88, 0, 0);
  sub_267BC(v5, v3, &qword_3B3C88);
  Lazy.wrappedValue.getter((_QWORD *)(v4 - 96), v2);
  result = sub_1459C(v3, &qword_3B3C88);
  v7 = *(_QWORD *)(v4 - 96);
  if (v7)
  {
    *(_QWORD *)(v0 + 24) = type metadata accessor for Action(0);
    result = sub_109F30((unint64_t *)&qword_3B28E8, (void (*)(uint64_t))type metadata accessor for Action);
    *(_QWORD *)(v0 + 32) = result;
    *(_QWORD *)v0 = v7;
  }
  else
  {
    *(_QWORD *)(v0 + 32) = 0;
    *(_OWORD *)v0 = 0u;
    *(_OWORD *)(v0 + 16) = 0u;
  }
  return result;
}

uint64_t sub_108198(uint64_t a1, unsigned __int8 *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  int v74;
  int v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  int v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  int v103;
  _QWORD *v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char v122;
  uint64_t v123;
  unsigned __int8 v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _BYTE v130[8];
  uint64_t v131;
  _BYTE v132[8];

  v3 = v2;
  v6 = *v2;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BA270);
  __chkstk_darwin(v7);
  v113 = (uint64_t)&v66 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v9);
  v114 = (uint64_t *)((char *)&v66 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B24F8);
  __chkstk_darwin(v11);
  v93 = (uint64_t)&v66 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B81E8);
  __chkstk_darwin(v13);
  v117 = (uint64_t)&v66 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3D88);
  __chkstk_darwin(v15);
  v118 = (uint64_t *)((char *)&v66 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
  __chkstk_darwin(v17);
  v121 = (uint64_t)&v66 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3C88);
  __chkstk_darwin(v19);
  v21 = (char *)&v66 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
  __chkstk_darwin(v22);
  v120 = (uint64_t)&v66 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v119 = (uint64_t)&v66 - v25;
  __chkstk_darwin(v26);
  v28 = *a2;
  v116 = v6;
  v115 = v7;
  v87 = a1;
  if (v28 == 2)
    v29 = *((unsigned __int8 *)v3 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_playedTextStyle);
  else
    v29 = v28 & 1;
  LODWORD(v79) = v29;
  v30 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC8ShelfKit20LibraryEpisodeLockup_uuid + 8);
  v111 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC8ShelfKit20LibraryEpisodeLockup_uuid);
  v31 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC8ShelfKit20LibraryEpisodeLockup_podcastUuid + 8);
  v109 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC8ShelfKit20LibraryEpisodeLockup_podcastUuid);
  v107 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC8ShelfKit20LibraryEpisodeLockup_podcastAdamId);
  v106 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC8ShelfKit20LibraryEpisodeLockup_channelAdamId);
  v105 = *((unsigned __int8 *)v3 + OBJC_IVAR____TtC8ShelfKit20LibraryEpisodeLockup_channelAdamId + 8);
  v104 = *(_QWORD **)((char *)v3 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup_adamId);
  v103 = *((unsigned __int8 *)v3 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_episodeType);
  v102 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_duration);
  v101 = *((unsigned __int8 *)v3 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_duration + 8);
  v100 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_seasonNumber);
  v99 = *((unsigned __int8 *)v3 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_seasonNumber + 8);
  v98 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_episodeNumber);
  v97 = *((unsigned __int8 *)v3 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_episodeNumber + 8);
  v96 = *((unsigned __int8 *)v3 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_mediaType);
  v112 = (uint64_t)&v66 - v27;
  sub_267BC((uint64_t)v3 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup_icon, (uint64_t)&v66 - v27, &qword_3BEB70);
  sub_267BC((uint64_t)v3 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_showUberArtwork, v119, &qword_3BEB70);
  sub_267BC((uint64_t)v3 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_episodeArtwork, v120, &qword_3BEB70);
  v32 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup_title + 8);
  v95 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup_title);
  v33 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup_subtitles);
  v34 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup_ordinal + 8);
  v91 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup_ordinal);
  v89 = *(unsigned int *)((char *)v3 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup_rating);
  v88 = *((unsigned __int8 *)v3 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup_rating + 4);
  v35 = (uint64_t)v3 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup__buttonAction;
  swift_beginAccess((char *)v3 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup__buttonAction, v132, 0, 0);
  sub_267BC(v35, (uint64_t)v21, &qword_3B3C88);
  v90 = v34;
  swift_bridgeObjectRetain();
  v110 = v30;
  swift_bridgeObjectRetain();
  v108 = v31;
  swift_bridgeObjectRetain();
  v94 = v32;
  swift_bridgeObjectRetain();
  v92 = v33;
  swift_bridgeObjectRetain();
  Lazy.wrappedValue.getter(&v131, v19);
  sub_1459C((uint64_t)v21, &qword_3B3C88);
  v86 = v131;
  sub_267BC(v87, (uint64_t)&v131, &qword_3B0C50);
  v36 = (uint64_t)v3 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup__titleAction;
  swift_beginAccess((char *)v3 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup__titleAction, v130, 0, 0);
  sub_267BC(v36, (uint64_t)v21, &qword_3B3C88);
  Lazy.wrappedValue.getter(&v129, v19);
  sub_1459C((uint64_t)v21, &qword_3B3C88);
  v87 = v129;
  v37 = (uint64_t)v3 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup__summaryAction;
  swift_beginAccess((char *)v3 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup__summaryAction, &v129, 0, 0);
  sub_267BC(v37, (uint64_t)v21, &qword_3B3C88);
  Lazy.wrappedValue.getter(&v128, v19);
  sub_1459C((uint64_t)v21, &qword_3B3C88);
  v85 = v128;
  v38 = (uint64_t)v3 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup__playAction;
  swift_beginAccess((char *)v3 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup__playAction, &v128, 0, 0);
  sub_267BC(v38, (uint64_t)v21, &qword_3B3C88);
  Lazy.wrappedValue.getter(&v127, v19);
  sub_1459C((uint64_t)v21, &qword_3B3C88);
  v84 = v127;
  v39 = (uint64_t)v3 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup__contextAction;
  swift_beginAccess((char *)v3 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup__contextAction, &v127, 0, 0);
  sub_267BC(v39, (uint64_t)v21, &qword_3B3C88);
  Lazy.wrappedValue.getter(&v126, v19);
  sub_1459C((uint64_t)v21, &qword_3B3C88);
  v82 = v126;
  v40 = (uint64_t)v3 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup__previewAction;
  swift_beginAccess((char *)v3 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup__previewAction, &v126, 0, 0);
  sub_267BC(v40, (uint64_t)v21, &qword_3B3C88);
  Lazy.wrappedValue.getter(&v125, v19);
  sub_1459C((uint64_t)v21, &qword_3B3C88);
  v81 = v125;
  v41 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC8ShelfKit20LibraryEpisodeLockup_presentDetailsAction);
  v42 = (uint64_t)v3 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup__subtitleAction;
  swift_beginAccess((char *)v3 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup__subtitleAction, &v125, 0, 0);
  sub_267BC(v42, (uint64_t)v21, &qword_3B3C88);
  v83 = v41;
  swift_retain();
  Lazy.wrappedValue.getter(&v123, v19);
  sub_1459C((uint64_t)v21, &qword_3B3C88);
  v80 = v123;
  v43 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_caption + 8);
  v78 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_caption);
  v44 = *(void **)((char *)v3 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_summary);
  v75 = *((unsigned __int8 *)v3 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup_isExplicit);
  v74 = *((unsigned __int8 *)v3 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_showTypeIsSerial);
  v124 = v79;
  sub_267BC((uint64_t)v3 + OBJC_IVAR____TtC8ShelfKit20LibraryEpisodeLockup_assetFileUrl, v121, &qword_3B4370);
  v45 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup_lazyReleaseDate);
  v77 = v43;
  v76 = v44;
  if (v45)
  {
    v79 = v44;
    swift_bridgeObjectRetain();
    LazyDate.value.getter(v118);
  }
  else
  {
    v46 = type metadata accessor for Date(0);
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v118, 1, 1, v46);
    v79 = v44;
    swift_bridgeObjectRetain();
  }
  v73 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_episodeEntitlementState);
  v72 = *((unsigned __int8 *)v3 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_hasFreeVersion);
  v47 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_subscriptionName + 8);
  v71 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_subscriptionName);
  v48 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_channelName + 8);
  v70 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_channelName);
  v49 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_showTitle + 8);
  v69 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_showTitle);
  v68 = *((unsigned __int8 *)v3 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_showDisplayType);
  sub_267BC((uint64_t)v3 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_listenNowReason, v117, &qword_3B81E8);
  v50 = v93;
  sub_267BC((uint64_t)v3 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_listContext, v93, &qword_3B24F8);
  v67 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_referenceTime);
  v51 = *((_BYTE *)v3 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_referenceTime + 8);
  v52 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_playerTime);
  v53 = *((_BYTE *)v3 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_playerTime + 8);
  v54 = (uint64_t)v3 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup__impressionMetrics;
  swift_beginAccess((char *)v3 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup__impressionMetrics, &v123, 0, 0);
  v55 = v54;
  v56 = v113;
  sub_267BC(v55, v113, &qword_3BA270);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v57 = v114;
  Lazy.wrappedValue.getter(v114, v115);
  sub_1459C(v56, &qword_3BA270);
  swift_allocObject(v116, *(unsigned int *)(v116 + 48), *(unsigned __int16 *)(v116 + 52));
  v122 = v88;
  v65 = (uint64_t)v57;
  v64 = v52;
  v63 = v48;
  v58 = v83;
  v59 = v85;
  v60 = v87;
  v61 = sub_109128(v111, v110, v109, v108, v107, v106, v105, v104, 0, v103, v102, v101, v100, v99, v98, v97, v96, v112, v119,
          v120,
          v95,
          v94,
          v92,
          v91,
          v90,
          v89 | ((unint64_t)v88 << 32),
          v86,
          (uint64_t)&v131,
          v87,
          v85,
          v84,
          v82,
          v81,
          v83,
          v80,
          v78,
          v77,
          v76,
          v75,
          v74,
          0,
          &v124,
          v121,
          (uint64_t)v118,
          v73,
          v72,
          v71,
          v47,
          v70,
          v63,
          v69,
          v49,
          v68,
          v117,
          v50,
          v67,
          v51,
          v64,
          v53,
          v65);
  swift_release(v58);

  swift_release(v59);
  swift_release(v60);
  return v61;
}

uint64_t LibraryEpisodeLockup.with(playedTextStyle:)(unsigned __int8 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  unsigned __int8 v12;
  _BYTE v13[24];
  _QWORD v14[5];

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B9EF0);
  __chkstk_darwin(v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *a1;
  v8 = v2 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup__clickAction;
  swift_beginAccess(v2 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup__clickAction, v13, 0, 0);
  sub_267BC(v8, (uint64_t)v6, &qword_3B9EF0);
  Lazy.wrappedValue.getter(v14, v4);
  sub_1459C((uint64_t)v6, &qword_3B9EF0);
  v12 = v7;
  v9 = sub_108198((uint64_t)v14, &v12);
  sub_1459C((uint64_t)v14, &qword_3B0C50);
  return v9;
}

void LibraryEpisodeLockup.init(adamId:episodeNumber:seasonNumber:episodeType:mediaType:icon:showUberArtwork:episodeArtwork:title:subtitles:ordinal:rating:buttonAction:clickAction:titleAction:summaryAction:playAction:contextAction:previewAction:subtitleAction:caption:summary:secondSummary:transcript:isExplicit:duration:isMultiEpisode:playedTextStyle:episodeEntitlementState:hasFreeVersion:subscriptionName:channelName:showTitle:showDisplayType:shelfUniqueId:releaseDate:showTypeIsSerial:listenNowReason:listContext:referenceTime:playerTime:thinClientEpisodeState:impressionMetrics:)()
{
  _swift_stdlib_reportUnimplementedInitializer("ShelfKit.LibraryEpisodeLockup", 29, "init(adamId:episodeNumber:seasonNumber:episodeType:mediaType:icon:showUberArtwork:episodeArtwork:title:subtitles:ordinal:rating:buttonAction:clickAction:titleAction:summaryAction:playAction:contextAction:previewAction:subtitleAction:caption:summary:secondSummary:transcript:isExplicit:duration:isMultiEpisode:playedTextStyle:episodeEntitlementState:hasFreeVersion:subscriptionName:channelName:showTitle:showDisplayType:shelfUniqueId:releaseDate:showTypeIsSerial:listenNowReason:listContext:referenceTime:playerTime:thinClientEpisodeState:impressionMetrics:)", 557, 0);
  __break(1u);
}

uint64_t sub_108FD4()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit20LibraryEpisodeLockup_presentDetailsAction));
  return sub_1459C(v0 + OBJC_IVAR____TtC8ShelfKit20LibraryEpisodeLockup_assetFileUrl, &qword_3B4370);
}

uint64_t LibraryEpisodeLockup.deinit()
{
  uint64_t v0;

  v0 = LegacyEpisodeLockup.deinit();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit20LibraryEpisodeLockup_presentDetailsAction));
  sub_1459C(v0 + OBJC_IVAR____TtC8ShelfKit20LibraryEpisodeLockup_assetFileUrl, &qword_3B4370);
  return v0;
}

uint64_t LibraryEpisodeLockup.__deallocating_deinit()
{
  uint64_t v0;

  v0 = LegacyEpisodeLockup.deinit();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit20LibraryEpisodeLockup_presentDetailsAction));
  sub_1459C(v0 + OBJC_IVAR____TtC8ShelfKit20LibraryEpisodeLockup_assetFileUrl, &qword_3B4370);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_109128(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, _QWORD *a8, unsigned __int8 a9, unsigned __int8 a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, unsigned __int8 a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,unint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,unsigned __int8 a39,unsigned __int8 a40,unsigned __int8 a41,unsigned __int8 *a42,uint64_t a43,uint64_t a44,uint64_t a45,unsigned __int8 a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,unsigned __int8 a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,char a59,uint64_t a60)
{
  uint64_t v60;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _BYTE *v81;
  uint64_t *v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  Swift::String v86;
  uint64_t v87;
  void *v88;
  Swift::String v89;
  Swift::String v90;
  Swift::String v91;
  Swift::String v92;
  uint64_t v93;
  void *v94;
  Swift::String v95;
  Swift::String v96;
  uint64_t v97;
  uint64_t v98;
  void *object;
  uint64_t countAndFlagsBits;
  Swift::String v101;
  Swift::String v102;
  uint64_t v103;
  _BYTE *v104;
  _BYTE *v105;
  _BYTE *v106;
  uint64_t v107;
  _BYTE *v108;
  uint64_t v109;
  _BYTE *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _BYTE *v114;
  uint64_t v115;
  _BYTE v117[12];
  int v118;
  int v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  int v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  void *v149;
  int v150;
  _BYTE *v151;
  int v152;
  _BYTE *v153;
  _BYTE *v154;
  _BYTE *v155;
  _BYTE *v156;
  _BYTE *v157;
  _BYTE *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  int v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  _QWORD *v170;
  _BYTE *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;

  v170 = a8;
  LODWORD(v169) = a7;
  v167 = a6;
  v162 = a5;
  v160 = a4;
  v159 = a3;
  v166 = a60;
  v168 = a55;
  v174 = a54;
  v175 = a44;
  v172 = a45;
  v173 = a21;
  v176 = a28;
  v177 = a20;
  v178 = a19;
  v179 = a18;
  v165 = a17;
  v161 = a15;
  v163 = a13;
  v164 = a10;
  v152 = a9;
  v63 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v63);
  v158 = &v117[-((v64 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v65 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BA278);
  __chkstk_darwin(v65);
  v156 = &v117[-((v66 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v67 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B24F8);
  __chkstk_darwin(v67);
  v154 = &v117[-((v68 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v69 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3D88);
  __chkstk_darwin(v69);
  v153 = &v117[-((v70 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v71 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
  __chkstk_darwin(v71);
  v157 = &v117[-((v72 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v73);
  v155 = &v117[-v74];
  __chkstk_darwin(v75);
  v171 = &v117[-v76];
  v77 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B81E8);
  __chkstk_darwin(v77);
  v151 = &v117[-((v78 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v79);
  v81 = &v117[-v80];
  v150 = *a42;
  v82 = (uint64_t *)(v60 + OBJC_IVAR____TtC8ShelfKit20LibraryEpisodeLockup_uuid);
  *v82 = a1;
  v82[1] = a2;
  v83 = (_QWORD *)(v60 + OBJC_IVAR____TtC8ShelfKit20LibraryEpisodeLockup_podcastUuid);
  v84 = v160;
  *v83 = v159;
  v83[1] = v84;
  *(_QWORD *)(v60 + OBJC_IVAR____TtC8ShelfKit20LibraryEpisodeLockup_podcastAdamId) = v162;
  v85 = v60 + OBJC_IVAR____TtC8ShelfKit20LibraryEpisodeLockup_channelAdamId;
  *(_QWORD *)v85 = v167;
  *(_BYTE *)(v85 + 8) = v169 & 1;
  *(_QWORD *)(v60 + OBJC_IVAR____TtC8ShelfKit20LibraryEpisodeLockup_presentDetailsAction) = a34;
  v169 = v60;
  v167 = a43;
  sub_267BC(a43, v60 + OBJC_IVAR____TtC8ShelfKit20LibraryEpisodeLockup_assetFileUrl, &qword_3B4370);
  v180 = a1;
  v181 = a2;
  swift_retain();
  swift_bridgeObjectRetain();
  v86._countAndFlagsBits = 45;
  v86._object = (void *)0xE100000000000000;
  String.append(_:)(v86);
  v159 = a36;
  if (a37)
    v87 = a36;
  else
    v87 = 7104878;
  if (a37)
    v88 = (void *)a37;
  else
    v88 = (void *)0xE300000000000000;
  v160 = a37;
  swift_bridgeObjectRetain();
  v89._countAndFlagsBits = v87;
  v89._object = v88;
  String.append(_:)(v89);
  swift_bridgeObjectRelease();
  v90._countAndFlagsBits = 45;
  v90._object = (void *)0xE100000000000000;
  String.append(_:)(v90);
  v182 = v172;
  v91._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int64, &protocol witness table for Int64);
  String.append(_:)(v91);
  swift_bridgeObjectRelease();
  v92._countAndFlagsBits = 45;
  v92._object = (void *)0xE100000000000000;
  String.append(_:)(v92);
  if (a22)
    v93 = v173;
  else
    v93 = 7104878;
  if (a22)
    v94 = (void *)a22;
  else
    v94 = (void *)0xE300000000000000;
  v162 = a22;
  swift_bridgeObjectRetain();
  v95._countAndFlagsBits = v93;
  v95._object = v94;
  String.append(_:)(v95);
  swift_bridgeObjectRelease();
  v96._countAndFlagsBits = 45;
  v96._object = (void *)0xE100000000000000;
  String.append(_:)(v96);
  sub_267BC(v174, (uint64_t)v81, &qword_3B81E8);
  v97 = type metadata accessor for EpisodeListenNowReason(0);
  v98 = *(_QWORD *)(v97 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v98 + 48))(v81, 1, v97) == 1)
  {
    sub_1459C((uint64_t)v81, &qword_3B81E8);
    object = (void *)0xE400000000000000;
    countAndFlagsBits = 1701736302;
  }
  else
  {
    v101 = EpisodeListenNowReason.stringDescriptionForPrototypeUpNext()();
    countAndFlagsBits = v101._countAndFlagsBits;
    object = v101._object;
    (*(void (**)(_BYTE *, uint64_t))(v98 + 8))(v81, v97);
  }
  v135 = a58;
  v134 = a56;
  v133 = a53;
  v132 = a52;
  v131 = a51;
  v130 = a50;
  v129 = a49;
  v127 = a48;
  v126 = a47;
  v136 = a46;
  v137 = a41;
  v128 = a40;
  v138 = a39;
  v149 = a38;
  v148 = a35;
  v147 = a33;
  v146 = a32;
  v145 = a31;
  v144 = a30;
  v143 = a29;
  v142 = a27;
  v124 = a26;
  v141 = a25;
  v140 = a24;
  v139 = a23;
  v123 = a11;
  v102._countAndFlagsBits = countAndFlagsBits;
  v102._object = object;
  String.append(_:)(v102);
  v103 = swift_bridgeObjectRelease();
  v122 = v180;
  v121 = v181;
  if ((v152 & 1) != 0)
    v170 = (_QWORD *)static AdamID.empty.getter(v103);
  v119 = a59 & 1;
  v118 = a57 & 1;
  v125 = a16 & 1;
  v152 = a14 & 1;
  v120 = a12 & 1;
  sub_267BC(v179, (uint64_t)v171, &qword_3BEB70);
  v104 = v155;
  sub_267BC(v178, (uint64_t)v155, &qword_3BEB70);
  v105 = v157;
  sub_267BC(v177, (uint64_t)v157, &qword_3BEB70);
  sub_267BC(v176, (uint64_t)&v180, &qword_3B0C50);
  LOBYTE(v182) = v150;
  v106 = v153;
  sub_267BC(v175, (uint64_t)v153, &qword_3B3D88);
  v107 = v174;
  v108 = v151;
  sub_267BC(v174, (uint64_t)v151, &qword_3B81E8);
  v109 = v168;
  v110 = v154;
  sub_267BC(v168, (uint64_t)v154, &qword_3B24F8);
  v111 = type metadata accessor for ThinClientEpisodeStateModel(0);
  v112 = (uint64_t)v156;
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v111 - 8) + 56))(v156, 1, 1, v111);
  v113 = v166;
  v114 = v158;
  sub_267BC(v166, (uint64_t)v158, (uint64_t *)&unk_3B8790);
  v115 = sub_163E34(v170, v161, v125, v163, v152, v164, v165, (uint64_t)v171, (uint64_t)v104, (uint64_t)v105, v173, v162, v139, v140, v141, v124 | ((HIDWORD(v124) & 1) << 32), v142, (uint64_t)&v180, v143,
           v144,
           v145,
           v146,
           v147,
           v148,
           v159,
           v160,
           v149,
           0,
           0,
           v138 & 1,
           v123,
           v120,
           v137 & 1,
           (unsigned __int8 *)&v182,
           v172,
           v136 & 1,
           v126,
           v127,
           v129,
           v130,
           v131,
           v132,
           v133,
           v122,
           v121,
           (uint64_t)v106,
           v128 & 1,
           (uint64_t)v108,
           (uint64_t)v110,
           v134,
           v118,
           v135,
           v119,
           v112,
           (uint64_t)v114);
  sub_1459C(v113, (uint64_t *)&unk_3B8790);
  sub_1459C(v109, &qword_3B24F8);
  sub_1459C(v107, &qword_3B81E8);
  sub_1459C(v175, &qword_3B3D88);
  sub_1459C(v167, &qword_3B4370);
  sub_1459C(v176, &qword_3B0C50);
  sub_1459C(v177, &qword_3BEB70);
  sub_1459C(v178, &qword_3BEB70);
  sub_1459C(v179, &qword_3BEB70);
  return v115;
}

uint64_t sub_109BA4()
{
  return type metadata accessor for LibraryEpisodeLockup(0);
}

uint64_t type metadata accessor for LibraryEpisodeLockup(uint64_t a1)
{
  uint64_t result;

  result = qword_3B9F20;
  if (!qword_3B9F20)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LibraryEpisodeLockup);
  return result;
}

void sub_109BE8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[6];

  v4[0] = &unk_2F5C18;
  v4[1] = &unk_2F5C18;
  v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[3] = &unk_2F5C30;
  v4[4] = &unk_2F5C48;
  sub_28C74(319);
  if (v3 <= 0x3F)
  {
    v4[5] = *(_QWORD *)(v2 - 8) + 64;
    swift_updateClassMetadata2(a1, 256, 6, v4, a1 + 752);
  }
}

uint64_t method lookup function for LibraryEpisodeLockup(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for LibraryEpisodeLockup);
}

uint64_t dispatch thunk of LibraryEpisodeLockup.__allocating_init(uuid:podcastUuid:podcastAdamId:channelAdamId:adamId:episodeType:duration:seasonNumber:episodeNumber:mediaType:icon:showUberArtwork:episodeArtwork:title:subtitles:ordinal:rating:buttonAction:clickAction:titleAction:summaryAction:playAction:contextAction:previewAction:presentDetailsAction:subtitleAction:caption:summary:isExplicit:showTypeIsSerial:isMultiEpisode:playedTextStyle:assetFileUrl:releaseDate:episodeEntitlementState:hasFreeVersion:subscriptionName:channelName:showTitle:showDisplayType:listenNowReason:listContext:referenceTime:playerTime:impressionMetrics:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,unint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54)
{
  uint64_t v54;

  LOBYTE(a9) = a9 & 1;
  LOBYTE(a11) = a11 & 1;
  LOBYTE(a15) = a15 & 1;
  LOBYTE(a13) = a13 & 1;
  LOBYTE(a53) = a53 & 1;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v54 + 800))(a1, a2, a3, a4, a5, a6, a7 & 1, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24 | ((HIDWORD(a24) & 1) << 32),
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50,
           a51,
           a52,
           a53,
           a54);
}

uint64_t sub_109F30(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result;

  result = *a1;
  if (!result)
  {
    a2(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for Action);
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for LibraryRefreshType()
{
  return &type metadata for LibraryRefreshType;
}

uint64_t sub_109F84()
{
  uint64_t v0;
  objc_class *v1;
  unint64_t v2;
  unint64_t v3;
  NSBundle v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t countAndFlagsBits;
  unint64_t v10;

  if (*(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8ShelfKit17ShowListPresenter_libraryRefreshType + 16) > 1u)
  {
    v1 = (objc_class *)objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v10 = 0xED00007364656546;
    v2 = 0x800000000030F4B0;
    v3 = 0xD000000000000011;
LABEL_6:
    v4.super.isa = v1;
    v5 = 0;
    v6 = 0xE000000000000000;
    v7 = 0x2068736572666552;
    goto LABEL_7;
  }
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC8ShelfKit17ShowListPresenter_libraryRefreshType + 16))
  {
    v1 = (objc_class *)objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v10 = 0xEF6E6F6974617453;
    v3 = 0x5F48534552464552;
    v2 = 0xEF4E4F4954415453;
    goto LABEL_6;
  }
  v1 = (objc_class *)objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v10 = 0x800000000030F4F0;
  v2 = 0x800000000030F4D0;
  v3 = 0xD000000000000011;
  v4.super.isa = v1;
  v5 = 0;
  v6 = 0xE000000000000000;
  v7 = 0xD000000000000011;
LABEL_7:
  countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v3, (Swift::String_optional)0, v4, *(Swift::String *)&v5, *(Swift::String *)&v7)._countAndFlagsBits;

  return countAndFlagsBits;
}

void sub_10A124()
{
  __asm { BR              X10 }
}

uint64_t sub_10A158()
{
  id v0;
  Swift::String v1;
  Swift::String v2;
  uint64_t countAndFlagsBits;
  Swift::String v5;

  v0 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v5._object = (void *)0xED00007364656546;
  v1._object = (void *)0x800000000030F4B0;
  v1._countAndFlagsBits = 0xD000000000000011;
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  v5._countAndFlagsBits = 0x2068736572666552;
  countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v1, (Swift::String_optional)0, (NSBundle)v0, v2, v5)._countAndFlagsBits;

  return countAndFlagsBits;
}

void sub_10A280()
{
  uint64_t v0;
  uint64_t v1;
  id v2;

  swift_bridgeObjectRetain();
  sub_3B5A8(v0, v1, 1u);
  v2 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  JUMPOUT(0x10A1A8);
}

uint64_t sub_10A320()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[3];
  unint64_t v12;
  void *v13;
  id v14[5];

  v1 = v0;
  v2 = *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8ShelfKit17ShowListPresenter_libraryRefreshType + 16);
  if (v2 == 255 || v2 == 2 && *(_OWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit17ShowListPresenter_libraryRefreshType) == 0)
  {
    v3 = *(_QWORD *)(v0 + 16);
    v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BA280);
    swift_retain();
    BaseObjectGraph.inject<A>(_:)(v14, v4, v4);
    swift_release(v3);
    v5 = v14[0];
    objc_msgSend(v14[0], "syncEverything");
    swift_unknownObjectRelease(v5);
  }
  v6 = *(_QWORD *)(v1 + 16);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BC3F0);
  swift_retain();
  BaseObjectGraph.inject<A>(_:)(v14, v7, v7);
  swift_release(v6);
  v8 = sub_10ABA8(v1, v14);
  v9 = swift_allocObject(&unk_3812A8, 24, 7);
  swift_weakInit(v9 + 16);
  v12 = sub_676C8();
  v13 = &protocol witness table for OS_dispatch_queue;
  v11[0] = static OS_dispatch_queue.main.getter(v12);
  Promise.then(getResult:on:)(sub_10B174, v9, v11);
  swift_release(v8);
  swift_release(v9);
  __swift_destroy_boxed_opaque_existential_1(v11);
  return __swift_destroy_boxed_opaque_existential_1(v14);
}

uint64_t sub_10A48C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];
  unint64_t v11;
  void *v12;
  id v13[3];
  uint64_t v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BA280);
  swift_retain();
  BaseObjectGraph.inject<A>(_:)(v13, v2, v2);
  swift_release(v1);
  v3 = v13[0];
  objc_msgSend(v13[0], "syncEverything");
  swift_unknownObjectRelease(v3);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BC3F0);
  swift_retain();
  BaseObjectGraph.inject<A>(_:)(v13, v4, v4);
  swift_release(v1);
  v5 = v14;
  v6 = v15;
  __swift_project_boxed_opaque_existential_1(v13, v14);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 152))(v5, v6);
  v8 = swift_allocObject(&unk_381280, 24, 7);
  swift_weakInit(v8 + 16);
  v11 = sub_676C8();
  v12 = &protocol witness table for OS_dispatch_queue;
  v10[0] = static OS_dispatch_queue.main.getter(v11);
  Promise.then(getResult:on:)(sub_10AFCC, v8, v10);
  swift_release(v7);
  swift_release(v8);
  __swift_destroy_boxed_opaque_existential_1(v10);
  return __swift_destroy_boxed_opaque_existential_1(v13);
}

uint64_t sub_10A5DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  unint64_t v13;
  void *v14;
  _QWORD v15[3];
  uint64_t v16;
  uint64_t v17;

  v1 = v0;
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit28ModernStationDetailPresenter_objectGraph);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BC3F0);
  swift_retain();
  BaseObjectGraph.inject<A>(_:)(v15, v3, v3);
  swift_release(v2);
  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit28ModernStationDetailPresenter_stationUuid);
  v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit28ModernStationDetailPresenter_stationUuid + 8);
  v6 = v16;
  v7 = v17;
  __swift_project_boxed_opaque_existential_1(v15, v16);
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 160);
  swift_bridgeObjectRetain();
  v9 = v8(v4, v5, v6, v7);
  swift_bridgeObjectRelease();
  v10 = swift_allocObject(&unk_381258, 24, 7);
  swift_weakInit(v10 + 16);
  v13 = sub_676C8();
  v14 = &protocol witness table for OS_dispatch_queue;
  v12[0] = static OS_dispatch_queue.main.getter(v13);
  Promise.then(getResult:on:)(sub_10B16C, v10, v12);
  swift_release(v9);
  swift_release(v10);
  __swift_destroy_boxed_opaque_existential_1(v12);
  return __swift_destroy_boxed_opaque_existential_1(v15);
}

uint64_t sub_10A728()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];
  unint64_t v11;
  void *v12;
  id v13[3];
  uint64_t v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_objectGraph);
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BA280);
  swift_retain();
  BaseObjectGraph.inject<A>(_:)(v13, v2, v2);
  swift_release(v1);
  v3 = v13[0];
  objc_msgSend(v13[0], "syncEverything");
  swift_unknownObjectRelease(v3);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BC3F0);
  swift_retain();
  BaseObjectGraph.inject<A>(_:)(v13, v4, v4);
  swift_release(v1);
  v5 = v14;
  v6 = v15;
  __swift_project_boxed_opaque_existential_1(v13, v14);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 152))(v5, v6);
  v8 = swift_allocObject(&unk_381230, 24, 7);
  swift_weakInit(v8 + 16);
  v11 = sub_676C8();
  v12 = &protocol witness table for OS_dispatch_queue;
  v10[0] = static OS_dispatch_queue.main.getter(v11);
  Promise.then(getResult:on:)(sub_10B14C, v8, v10);
  swift_release(v7);
  swift_release(v8);
  __swift_destroy_boxed_opaque_existential_1(v10);
  return __swift_destroy_boxed_opaque_existential_1(v13);
}

uint64_t sub_10A884()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  unint64_t v13;
  void *v14;
  _QWORD v15[3];
  uint64_t v16;
  uint64_t v17;

  v1 = v0;
  v2 = *(_QWORD *)(v0 + 72);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BC3F0);
  swift_retain();
  BaseObjectGraph.inject<A>(_:)(v15, v3, v3);
  swift_release(v2);
  v4 = *(_QWORD *)(v1 + 24);
  v5 = *(_QWORD *)(v1 + 32);
  v6 = v16;
  v7 = v17;
  __swift_project_boxed_opaque_existential_1(v15, v16);
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 136);
  swift_bridgeObjectRetain();
  v9 = v8(v4, v5, 1, v6, v7);
  swift_bridgeObjectRelease();
  v10 = swift_allocObject(&unk_381208, 24, 7);
  swift_weakInit(v10 + 16);
  v13 = sub_676C8();
  v14 = &protocol witness table for OS_dispatch_queue;
  v12[0] = static OS_dispatch_queue.main.getter(v13);
  Promise.then(getResult:on:)(sub_10AFCC, v10, v12);
  swift_release(v9);
  swift_release(v10);
  __swift_destroy_boxed_opaque_existential_1(v12);
  return __swift_destroy_boxed_opaque_existential_1(v15);
}

void sub_10A9BC()
{
  __asm { BR              X10 }
}

uint64_t sub_10A9FC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v34[3];
  unint64_t v35;
  void *v36;
  id v37[11];

  v25 = *(_QWORD *)(v24 + 16);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BA280);
  swift_retain();
  BaseObjectGraph.inject<A>(_:)(v37, v26, v26);
  swift_release(v25);
  v27 = v37[0];
  objc_msgSend(v37[0], "syncEverything");
  swift_unknownObjectRelease(v27);
  v28 = *(_QWORD *)(v24 + 16);
  v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BC3F0);
  swift_retain();
  BaseObjectGraph.inject<A>(_:)(v37, v29, v29);
  swift_release(v28);
  sub_10ACC4(v24);
  v31 = v30;
  v32 = swift_allocObject(&unk_3811E0, 24, 7);
  swift_weakInit(v32 + 16);
  v35 = sub_676C8();
  v36 = &protocol witness table for OS_dispatch_queue;
  v34[0] = static OS_dispatch_queue.main.getter(v35);
  Promise.then(getResult:on:)(sub_10AFC4, v32, v34);
  swift_release(v31);
  swift_release(v32);
  __swift_destroy_boxed_opaque_existential_1(v34);
  return __swift_destroy_boxed_opaque_existential_1(v37);
}

uint64_t sub_10AB40(uint64_t a1, uint64_t a2)
{
  return sub_10ADD0(a1, a2, 0xD000000000000011, (void *)0x800000000030F4B0, (void *)0xED00007364656546);
}

uint64_t sub_10AB70(uint64_t a1, uint64_t a2)
{
  return sub_10ADD0(a1, a2, 0x5F48534552464552, (void *)0xEF4E4F4954415453, (void *)0xEF6E6F6974617453);
}

uint64_t sub_10ABA8(uint64_t a1, _QWORD *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t, uint64_t);

  v2 = (uint64_t *)(a1 + OBJC_IVAR____TtC8ShelfKit17ShowListPresenter_libraryRefreshType);
  if (*(unsigned __int8 *)(a1 + OBJC_IVAR____TtC8ShelfKit17ShowListPresenter_libraryRefreshType + 16) > 1u)
  {
    v12 = a2[3];
    v13 = a2[4];
    __swift_project_boxed_opaque_existential_1(a2, v12);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 152))(v12, v13);
  }
  else
  {
    v3 = *v2;
    v4 = v2[1];
    v5 = a2[3];
    v6 = a2[4];
    if (*(_BYTE *)(a1 + OBJC_IVAR____TtC8ShelfKit17ShowListPresenter_libraryRefreshType + 16))
    {
      __swift_project_boxed_opaque_existential_1(a2, a2[3]);
      v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 160);
      sub_3D464(v3, v4, 1u);
      v8 = v15(v3, v4, v5, v6);
      v9 = v3;
      v10 = v4;
      v11 = 1;
    }
    else
    {
      __swift_project_boxed_opaque_existential_1(a2, a2[3]);
      v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 136);
      sub_3D464(v3, v4, 0);
      v8 = v7(v3, v4, 1, v5, v6);
      v9 = v3;
      v10 = v4;
      v11 = 0;
    }
    sub_3B5A8(v9, v10, v11);
    return v8;
  }
}

void sub_10ACC4(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_10ACFC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[3];
  v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 152))(v1, v2);
}

uint64_t sub_10ADD0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  id v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t countAndFlagsBits;
  Swift::String v13;

  v8 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v13._object = a5;
  v9._countAndFlagsBits = a3;
  v9._object = a4;
  v10._countAndFlagsBits = 0;
  v10._object = (void *)0xE000000000000000;
  v13._countAndFlagsBits = 0x2068736572666552;
  countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v9, (Swift::String_optional)0, (NSBundle)v8, v10, v13)._countAndFlagsBits;

  return countAndFlagsBits;
}

uint64_t sub_10AE74()
{
  id v0;
  Swift::String v1;
  Swift::String v2;
  uint64_t countAndFlagsBits;
  Swift::String v5;

  v0 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v5._object = (void *)0x800000000030F4F0;
  v1._object = (void *)0x800000000030F4D0;
  v1._countAndFlagsBits = 0xD000000000000011;
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  v5._countAndFlagsBits = 0xD000000000000011;
  countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v1, (Swift::String_optional)0, (NSBundle)v0, v2, v5)._countAndFlagsBits;

  return countAndFlagsBits;
}

uint64_t sub_10AF2C()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10AF50(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  _BYTE v6[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v6, 0, 0);
  result = swift_weakLoadStrong(v2);
  if (result)
  {
    v4 = result;
    v5 = ModernEpisodesPresenter.refreshControls.getter();
    swift_release(v4);
    CurrentValueSubject.send(_:)();
    return swift_release(v5);
  }
  return result;
}

uint64_t sub_10AFC4(uint64_t a1)
{
  uint64_t v1;

  return sub_10AF50(a1, v1);
}

uint64_t sub_10AFCC()
{
  uint64_t v0;

  return sub_10B0D8(v0);
}

uint64_t sub_10AFE4(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  _BYTE v5[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v5, 0, 0);
  result = swift_weakLoadStrong(v1);
  if (result)
  {
    v3 = result;
    v4 = *(_QWORD *)(result + 120);
    swift_retain(v4);
    swift_release(v3);
    CurrentValueSubject.send(_:)();
    return swift_release(v4);
  }
  return result;
}

uint64_t sub_10B058(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _BYTE v7[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v7, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    v6 = *(_QWORD *)(result + *a2);
    swift_retain(v6);
    swift_release(v5);
    CurrentValueSubject.send(_:)();
    return swift_release(v6);
  }
  return result;
}

uint64_t sub_10B0D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  _BYTE v5[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v5, 0, 0);
  result = swift_weakLoadStrong(v1);
  if (result)
  {
    v3 = result;
    v4 = *(_QWORD *)(result + 64);
    swift_retain(v4);
    swift_release(v3);
    CurrentValueSubject.send(_:)();
    return swift_release(v4);
  }
  return result;
}

uint64_t sub_10B14C()
{
  uint64_t v0;

  return sub_10B058(v0, &OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_refreshControls);
}

uint64_t sub_10B16C()
{
  uint64_t v0;

  return sub_10AFE4(v0);
}

uint64_t sub_10B174()
{
  uint64_t v0;

  return sub_10B058(v0, &OBJC_IVAR____TtC8ShelfKit17ShowListPresenter_refreshControls);
}

uint64_t EpisodeCaption.init(episode:graph:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  v6 = type metadata accessor for CaptionGenerator(0);
  swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  swift_retain();
  v7 = swift_retain();
  v8 = sub_10BB04(v7, a2);
  v9 = sub_F1C0(&qword_3BA288, (void (*)(uint64_t))type metadata accessor for CaptionGenerator, (uint64_t)&unk_2F5DC0);
  v10 = ObservedObject.init(wrappedValue:)(v8, v6, v9);
  v12 = v11;
  swift_release(a1);
  result = swift_release(a2);
  *a3 = v10;
  a3[1] = v12;
  return result;
}

uint64_t type metadata accessor for CaptionGenerator(uint64_t a1)
{
  uint64_t result;

  result = qword_3BA308;
  if (!qword_3BA308)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CaptionGenerator);
  return result;
}

uint64_t sub_10B29C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  char v54;
  uint64_t v55;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char v63;
  _QWORD v64[2];

  v1 = *(_QWORD *)(v0 + 8);
  KeyPath = swift_getKeyPath(&off_2F5E40);
  v3 = swift_getKeyPath(&unk_2F5E68);
  v4 = swift_retain();
  static Published.subscript.getter(v64, v4, KeyPath, v3);
  swift_release(v1);
  swift_release(KeyPath);
  swift_release(v3);
  if (LOBYTE(v64[0]) == 1)
  {
    v5 = Image.init(systemName:)(0x72616D6B63656863, 0xE90000000000006BLL);
    v6 = Text.init(_:)(v5);
    v8 = v7;
    v10 = v9 & 1;
    v12 = static Text.+ infix(_:_:)(v6, v7, v9 & 1, v11, 32, 0xE100000000000000, 0, _swiftEmptyArrayStorage);
    v14 = v13;
    v16 = v15;
    v18 = v17;
    sub_3EF90(v6, v8, v10);
    swift_bridgeObjectRelease();
    v19 = sub_110CC(0, 1, 1, _swiftEmptyArrayStorage);
    v21 = v19[2];
    v20 = v19[3];
    if (v21 >= v20 >> 1)
      v19 = sub_110CC((_QWORD *)(v20 > 1), v21 + 1, 1, v19);
    v19[2] = v21 + 1;
    v22 = &v19[4 * v21];
    v22[4] = v12;
    v22[5] = v14;
    *((_BYTE *)v22 + 48) = v16 & 1;
    v22[7] = v18;
  }
  else
  {
    v19 = _swiftEmptyArrayStorage;
  }
  v23 = swift_getKeyPath(&unk_2F5DF8);
  v24 = swift_getKeyPath(&unk_2F5E20);
  v25 = swift_retain();
  static Published.subscript.getter(v64, v25, v23, v24);
  swift_release(v1);
  swift_release(v23);
  swift_release(v24);
  if (v64[1])
  {
    v26 = sub_65CC4();
    v27 = Text.init<A>(_:)(v64, &type metadata for String, v26);
    v29 = v28;
    v31 = v30;
    v33 = v32;
    if ((swift_isUniquelyReferenced_nonNull_native(v19) & 1) == 0)
      v19 = sub_110CC(0, v19[2] + 1, 1, v19);
    v35 = v19[2];
    v34 = v19[3];
    v36 = v35 + 1;
    if (v35 >= v34 >> 1)
      v19 = sub_110CC((_QWORD *)(v34 > 1), v35 + 1, 1, v19);
    v19[2] = v36;
    v37 = &v19[4 * v35];
    v37[4] = v27;
    v37[5] = v29;
    *((_BYTE *)v37 + 48) = v31 & 1;
    v37[7] = v33;
  }
  else
  {
    v36 = v19[2];
    if (!v36)
    {
      v43 = 0;
      goto LABEL_18;
    }
  }
  v39 = v19[4];
  v38 = v19[5];
  v40 = *((_BYTE *)v19 + 48);
  v41 = v19[7];
  swift_bridgeObjectRetain_n(v19, 2);
  sub_3EF80(v39, v38, v40);
  swift_bridgeObjectRetain();
  v42 = v36 - 1;
  v57 = v19;
  if (v36 == 1)
  {
    v43 = v39;
  }
  else
  {
    v44 = v19 + 11;
    v45 = v41;
    v46 = v41;
    v63 = v40;
    do
    {
      v61 = v45;
      v62 = v42;
      v47 = *(v44 - 3);
      v48 = *(v44 - 2);
      v49 = *((unsigned __int8 *)v44 - 8);
      v50 = *v44;
      v44 += 4;
      sub_3EF80(v47, v48, v49);
      swift_bridgeObjectRetain();
      sub_10CD0C(v39, v38, v40, v45);
      v59 = static Text.+ infix(_:_:)(v39, v38, v63 & 1, v46, v47, v48, v49, v50);
      v60 = v51;
      v58 = v52;
      v54 = v53 & 1;
      sub_3EF90(v39, v38, v63 & 1);
      swift_bridgeObjectRelease();
      v55 = v48;
      v43 = v59;
      sub_3EF90(v47, v55, v49);
      swift_bridgeObjectRelease();
      sub_10CD3C(v39, v38, v40, v61);
      v63 = v54;
      v40 = v54;
      v45 = v58;
      v46 = v58;
      v38 = v60;
      v39 = v59;
      v42 = v62 - 1;
    }
    while (v62 != 1);
  }
  swift_bridgeObjectRelease_n(v57, 2);
LABEL_18:
  swift_bridgeObjectRelease();
  return v43;
}

uint64_t EpisodeCaption.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t KeyPath;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v3 = type metadata accessor for Image.Scale(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v46 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BA290);
  __chkstk_darwin(v6);
  v8 = (uint64_t *)((char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BA298);
  __chkstk_darwin(v9);
  v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BA2A0);
  __chkstk_darwin(v12);
  v14 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BA2A8);
  v49 = *(_QWORD *)(v15 - 8);
  v50 = v15;
  __chkstk_darwin(v15);
  v17 = (char *)&v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = v1[1];
  v51 = *v1;
  v52 = v18;
  v19 = sub_10B29C();
  if (!v22)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v49 + 56))(a1, 1, 1, v50);
  v23 = v22;
  v42 = v21 & 1;
  v44 = v4;
  v24 = enum case for Text.Case.uppercase(_:);
  v47 = v19;
  v48 = v20;
  v25 = type metadata accessor for Text.Case(0);
  v43 = v3;
  v26 = v25;
  v45 = a1;
  v27 = *(_QWORD *)(v25 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v27 + 104))(v11, v24, v25);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v11, 0, 1, v26);
  KeyPath = swift_getKeyPath(&unk_2F5CC0);
  sub_267BC((uint64_t)v11, (uint64_t)v8 + *(int *)(v6 + 28), &qword_3BA298);
  *v8 = KeyPath;
  sub_267BC((uint64_t)v8, (uint64_t)&v14[*(int *)(v12 + 36)], &qword_3BA290);
  v29 = v47;
  v30 = v48;
  *(_QWORD *)v14 = v47;
  *((_QWORD *)v14 + 1) = v30;
  v31 = v42;
  v14[16] = v42;
  *((_QWORD *)v14 + 3) = v23;
  sub_3EF80(v29, v30, v31);
  swift_bridgeObjectRetain();
  sub_1459C((uint64_t)v8, &qword_3BA290);
  sub_1459C((uint64_t)v11, &qword_3BA298);
  v33 = v43;
  v32 = v44;
  v34 = v46;
  (*(void (**)(char *, _QWORD, uint64_t))(v44 + 104))(v46, enum case for Image.Scale.small(_:), v43);
  v35 = swift_getKeyPath(&unk_2F5CF0);
  v36 = v50;
  v37 = (uint64_t *)&v17[*(int *)(v50 + 36)];
  v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BA2B0);
  (*(void (**)(char *, char *, uint64_t))(v32 + 16))((char *)v37 + *(int *)(v38 + 28), v34, v33);
  *v37 = v35;
  sub_267BC((uint64_t)v14, (uint64_t)v17, &qword_3BA2A0);
  sub_3EF90(v47, v48, v31);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v32 + 8))(v34, v33);
  sub_1459C((uint64_t)v14, &qword_3BA2A0);
  v39 = v45;
  sub_10CA70((uint64_t)v17, v45);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v49 + 56))(v39, 0, 1, v36);
}

uint64_t sub_10BA20()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&off_2F5E40);
  v2 = swift_getKeyPath(&unk_2F5E68);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

uint64_t sub_10BA94()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_2F5DF8);
  v2 = swift_getKeyPath(&unk_2F5E20);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

uint64_t sub_10BB04(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void (*v26)(uint64_t, char *, uint64_t);
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t KeyPath;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD v104[3];
  _QWORD v105[3];
  uint64_t v106;
  uint64_t v107;

  v102 = a1;
  v103 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BA488);
  v97 = *(_QWORD *)(v3 - 8);
  v98 = v3;
  __chkstk_darwin(v3);
  v96 = (char *)&v85 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BA490);
  v100 = *(_QWORD *)(v5 - 8);
  v101 = v5;
  __chkstk_darwin(v5);
  v99 = (char *)&v85 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for EyebrowBuilder.Style(0);
  v93 = *(_QWORD *)(v7 - 8);
  v94 = v7;
  __chkstk_darwin(v7);
  v89 = (char *)&v85 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B24D8);
  __chkstk_darwin(v9);
  v95 = (char *)&v85 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B24F8);
  __chkstk_darwin(v11);
  v87 = (char *)&v85 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = type metadata accessor for EyebrowBuilder.ListContext(0);
  v88 = *(_QWORD *)(v91 - 8);
  __chkstk_darwin(v91);
  v92 = (char *)&v85 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for EpisodePlayState(0);
  __chkstk_darwin(v14);
  v16 = (char *)&v85 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B23A8);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (char *)&v85 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B23B8);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = (char *)&v85 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = v2 + OBJC_IVAR____TtC8ShelfKitP33_1C50B632EEB7FDE02039B0DAEB007ECB16CaptionGenerator__played;
  LOBYTE(v105[0]) = 0;
  Published.init(initialValue:)(v105, &type metadata for Bool);
  v26 = *(void (**)(uint64_t, char *, uint64_t))(v22 + 32);
  v27 = v2;
  v28 = v24;
  v29 = v103;
  v26(v25, v28, v21);
  v30 = v2 + OBJC_IVAR____TtC8ShelfKitP33_1C50B632EEB7FDE02039B0DAEB007ECB16CaptionGenerator__caption;
  v105[0] = 0;
  v105[1] = 0;
  v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2420);
  Published.init(initialValue:)(v105, v31);
  (*(void (**)(uint64_t, char *, uint64_t))(v18 + 32))(v30, v20, v17);
  v32 = v2 + OBJC_IVAR____TtC8ShelfKitP33_1C50B632EEB7FDE02039B0DAEB007ECB16CaptionGenerator_subscriptions;
  *(_QWORD *)(v2 + OBJC_IVAR____TtC8ShelfKitP33_1C50B632EEB7FDE02039B0DAEB007ECB16CaptionGenerator_subscriptions) = _swiftEmptyArrayStorage;
  v33 = OBJC_IVAR____TtC8ShelfKitP33_1C50B632EEB7FDE02039B0DAEB007ECB16CaptionGenerator_playStateMachine;
  *(_QWORD *)(v2 + OBJC_IVAR____TtC8ShelfKitP33_1C50B632EEB7FDE02039B0DAEB007ECB16CaptionGenerator_playStateMachine) = 0;
  v34 = OBJC_IVAR____TtC8ShelfKitP33_1C50B632EEB7FDE02039B0DAEB007ECB16CaptionGenerator_playStatePublisher;
  swift_storeEnumTagMultiPayload(v16, v14, 5);
  v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B24E0);
  swift_allocObject(v35, *(unsigned int *)(v35 + 48), *(unsigned __int16 *)(v35 + 52));
  *(_QWORD *)(v2 + v34) = CurrentValueSubject.init(_:)(v16);
  v85 = v33;
  v90 = v34;
  if (v29)
  {
    v36 = type metadata accessor for ExplicitContentPresenter(0);
    swift_retain();
    v37 = BaseObjectGraph.inject<A>(_:)(v105, v36, v36);
    v38 = v105[0];
    v86 = ExplicitContentPresenter.symbol.getter(v37);
    v40 = v39;
    swift_release(v29);
    swift_release(v38);
  }
  else
  {
    v86 = 0;
    v40 = 0;
  }
  v41 = v102;
  v42 = v89;
  v43 = v88;
  v44 = (uint64_t)v87;
  v106 = type metadata accessor for LegacyEpisodeLockup(0);
  v107 = sub_F1C0(&qword_3B2500, (void (*)(uint64_t))type metadata accessor for LegacyEpisodeLockup, (uint64_t)&protocol conformance descriptor for LegacyEpisodeLockup);
  v105[0] = v41;
  sub_267BC(v41 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_listContext, v44, &qword_3B24F8);
  v45 = v91;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v44, 1, v91) == 1)
  {
    v46 = v92;
    (*(void (**)(char *, _QWORD, uint64_t))(v43 + 104))(v92, enum case for EyebrowBuilder.ListContext.single(_:), v45);
    swift_retain();
    sub_1459C(v44, &qword_3B24F8);
  }
  else
  {
    v46 = v92;
    (*(void (**)(char *, uint64_t, uint64_t))(v43 + 32))(v92, v44, v45);
    swift_retain();
  }
  v47 = type metadata accessor for AbbreviatedTimeIntervalFormatter.Configuration(0);
  v48 = v95;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 56))(v95, 1, 1, v47);
  (*(void (**)(char *, _QWORD, uint64_t))(v93 + 104))(v42, enum case for EyebrowBuilder.Style.default(_:), v94);
  v49 = type metadata accessor for EyebrowBuilder(0);
  swift_allocObject(v49, *(unsigned int *)(v49 + 48), *(unsigned __int16 *)(v49 + 52));
  v50 = EyebrowBuilder.init(episode:context:style:uppercase:explicitSymbol:abbreviatedPubDateConfig:showsSubscriptionBadge:hostingViewHasLimitedSpace:)(v105, v46, v42, 1, v86, v40, v48, 0, 0);
  v51 = v90;
  v104[0] = *(_QWORD *)(v27 + v90);
  v52 = v104[0];
  v53 = sub_32914((unint64_t *)&qword_3B24E8, &qword_3B24E0, (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
  swift_retain();
  EyebrowBuilder.captionPublisher<A>(playStatePublisher:)(v105, v104, v35, v53);
  swift_release(v52);
  swift_release(v50);
  v54 = v106;
  v55 = v107;
  __swift_project_boxed_opaque_existential_1(v105, v106);
  v56 = swift_allocObject(&unk_381360, 24, 7);
  swift_weakInit(v56 + 16);
  v57 = Publisher<>.sink(receiveValue:)(sub_10CD90, v56, v54, v55);
  swift_release(v56);
  swift_beginAccess(v32, v104, 33, 0);
  v58 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2088);
  v59 = sub_32914(&qword_3B2090, &qword_3B2088, (uint64_t)&protocol conformance descriptor for [A]);
  AnyCancellable.store<A>(in:)(v32, v58, v59);
  swift_endAccess(v104);
  swift_release(v57);
  __swift_destroy_boxed_opaque_existential_1(v105);
  v105[0] = *(_QWORD *)(v27 + v51);
  KeyPath = swift_getKeyPath(&unk_2F5E88);
  swift_retain();
  v61 = v96;
  Publisher.map<A>(_:)(KeyPath, v35, v53);
  swift_release(KeyPath);
  swift_release(v105[0]);
  v62 = sub_32914(&qword_3BA498, &qword_3BA488, (uint64_t)&protocol conformance descriptor for Publishers.MapKeyPath<A, B>);
  v63 = v98;
  v64 = v99;
  Publisher<>.removeDuplicates()(v98, v62, &protocol witness table for Bool);
  (*(void (**)(char *, uint64_t))(v97 + 8))(v61, v63);
  v65 = swift_allocObject(&unk_381360, 24, 7);
  swift_weakInit(v65 + 16);
  v66 = sub_32914(&qword_3BA4A0, &qword_3BA490, (uint64_t)&protocol conformance descriptor for Publishers.RemoveDuplicates<A>);
  v67 = v101;
  v68 = Publisher<>.sink(receiveValue:)(sub_10CDC4, v65, v101, v66);
  swift_release(v65);
  (*(void (**)(char *, uint64_t))(v100 + 8))(v64, v67);
  swift_beginAccess(v32, v105, 33, 0);
  AnyCancellable.store<A>(in:)(v32, v58, v59);
  swift_endAccess(v105);
  swift_release(v68);
  v69 = v103;
  if (v103)
  {
    v70 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B23C0);
    v71 = type metadata accessor for BaseObjectGraph(0);
    swift_retain();
    inject<A, B>(_:from:)(v105, v70, v69, v70, v71);
    v72 = v105[0];
    v73 = type metadata accessor for LibraryEpisodeLockup(0);
    v74 = v102;
    v75 = swift_dynamicCastClass(v102, v73);
    if (v75)
    {
      v76 = *(_QWORD *)(v75 + OBJC_IVAR____TtC8ShelfKit20LibraryEpisodeLockup_uuid);
      v77 = *(_QWORD *)(v75 + OBJC_IVAR____TtC8ShelfKit20LibraryEpisodeLockup_uuid + 8);
      swift_retain();
      swift_bridgeObjectRetain();
      v78 = dispatch thunk of EpisodeStateController.stateMachine(for:)(v76, v77, 1);
      swift_release(v74);
      swift_bridgeObjectRelease();
    }
    else
    {
      v78 = dispatch thunk of EpisodeStateController.stateMachine(for:)(*(_QWORD *)(v74 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup_adamId), 0, 0);
    }
    v79 = v85;
    v80 = *(_QWORD *)(v27 + v85);
    *(_QWORD *)(v27 + v85) = v78;
    swift_release(v80);
    v81 = *(_QWORD *)(v27 + v79);
    if (v81)
    {
      v82 = swift_allocObject(&unk_381360, 24, 7);
      swift_weakInit(v82 + 16);
      swift_retain();
      v83 = swift_retain();
      dispatch thunk of EpisodeStateMachine.addStateTransitionObserver(_:action:)(v83, sub_10CDCC, v82);
      swift_release(v81);
      swift_release(v27);
      swift_release(v82);
    }
    swift_release(v72);
    swift_release(v74);
    swift_release_n(v69, 2);
  }
  else
  {
    swift_release(v102);
  }
  return v27;
}

uint64_t sub_10C448(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  _QWORD v9[2];
  _BYTE v10[24];

  v3 = *a1;
  v2 = a1[1];
  v4 = a2 + 16;
  swift_beginAccess(a2 + 16, v10, 0, 0);
  result = swift_weakLoadStrong(v4);
  if (result)
  {
    v6 = result;
    KeyPath = swift_getKeyPath(&unk_2F5DF8);
    v8 = swift_getKeyPath(&unk_2F5E20);
    v9[0] = v3;
    v9[1] = v2;
    swift_bridgeObjectRetain(v2);
    return static Published.subscript.setter(v9, v6, KeyPath, v8);
  }
  return result;
}

uint64_t sub_10C4E4(char *a1, uint64_t a2)
{
  char v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  char v8;
  _BYTE v9[24];

  v2 = *a1;
  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v9, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    KeyPath = swift_getKeyPath(&off_2F5E40);
    v7 = swift_getKeyPath(&unk_2F5E68);
    v8 = v2;
    return static Published.subscript.setter(&v8, v5, KeyPath, v7);
  }
  return result;
}

uint64_t sub_10C56C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  _BYTE v10[24];

  v3 = type metadata accessor for EpisodePlayState(0);
  __chkstk_darwin(v3);
  v5 = &v10[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  a2 += 16;
  swift_beginAccess(a2, v10, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (result)
  {
    v7 = result;
    v8 = *(_QWORD *)(result
                   + OBJC_IVAR____TtC8ShelfKitP33_1C50B632EEB7FDE02039B0DAEB007ECB16CaptionGenerator_playStatePublisher);
    swift_retain();
    swift_release(v7);
    dispatch thunk of EpisodeStateMachine.currentState.getter(v5);
    CurrentValueSubject.send(_:)();
    swift_release(v8);
    return sub_36668((uint64_t)v5);
  }
  return result;
}

uint64_t sub_10C638()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0 + OBJC_IVAR____TtC8ShelfKitP33_1C50B632EEB7FDE02039B0DAEB007ECB16CaptionGenerator__played;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B23B8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = v0 + OBJC_IVAR____TtC8ShelfKitP33_1C50B632EEB7FDE02039B0DAEB007ECB16CaptionGenerator__caption;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B23A8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  swift_bridgeObjectRelease();
  swift_release(*(_QWORD *)(v0
                          + OBJC_IVAR____TtC8ShelfKitP33_1C50B632EEB7FDE02039B0DAEB007ECB16CaptionGenerator_playStateMachine));
  swift_release(*(_QWORD *)(v0
                          + OBJC_IVAR____TtC8ShelfKitP33_1C50B632EEB7FDE02039B0DAEB007ECB16CaptionGenerator_playStatePublisher));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10C6E8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for CaptionGenerator(0);
  result = ObservableObject<>.objectWillChange.getter(v2);
  *a1 = result;
  return result;
}

uint64_t sub_10C724@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&off_2F5E40);
  v5 = swift_getKeyPath(&unk_2F5E68);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(KeyPath);
  result = swift_release(v5);
  *a2 = v7;
  return result;
}

uint64_t sub_10C7A0(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  char v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&off_2F5E40);
  v5 = swift_getKeyPath(&unk_2F5E68);
  v7 = v2;
  swift_retain(v3);
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

double sub_10C810@<D0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  __int128 v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_2F5DF8);
  v5 = swift_getKeyPath(&unk_2F5E20);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(KeyPath);
  swift_release(v5);
  result = *(double *)&v7;
  *a2 = v7;
  return result;
}

uint64_t sub_10C88C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  _QWORD v8[2];

  v3 = *a1;
  v2 = a1[1];
  v4 = *a2;
  KeyPath = swift_getKeyPath(&unk_2F5DF8);
  v6 = swift_getKeyPath(&unk_2F5E20);
  v8[0] = v3;
  v8[1] = v2;
  swift_bridgeObjectRetain(v2);
  swift_retain(v4);
  return static Published.subscript.setter(v8, v4, KeyPath, v6);
}

uint64_t sub_10C90C()
{
  return EnvironmentValues.textCase.getter();
}

uint64_t sub_10C92C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BA298);
  __chkstk_darwin(v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_267BC(a1, (uint64_t)v4, &qword_3BA298);
  return EnvironmentValues.textCase.setter(v4);
}

uint64_t sub_10C9B0()
{
  return EnvironmentValues.imageScale.getter();
}

uint64_t sub_10C9D0()
{
  return EnvironmentValues.imageScale.getter();
}

uint64_t sub_10C9F0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = type metadata accessor for Image.Scale(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v5 + 16))(v4, a1);
  return EnvironmentValues.imageScale.setter(v4);
}

uint64_t sub_10CA70(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BA2A8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10CAB8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of EpisodeCaption.body>>, 1);
}

ValueMetadata *type metadata accessor for EpisodeCaption()
{
  return &type metadata for EpisodeCaption;
}

uint64_t sub_10CAD8()
{
  return type metadata accessor for CaptionGenerator(0);
}

void sub_10CAE0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[5];

  sub_36558();
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_36500(319);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      v6[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v6[3] = "\b";
      v6[4] = (char *)&value witness table for Builtin.NativeObject + 64;
      swift_updateClassMetadata2(a1, 256, 5, v6, a1 + 80);
    }
  }
}

unint64_t sub_10CB90()
{
  unint64_t result;

  result = qword_3BA458;
  if (!qword_3BA458)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_3BA460);
    sub_10CBF4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?);
    atomic_store(result, (unint64_t *)&qword_3BA458);
  }
  return result;
}

unint64_t sub_10CBF4()
{
  unint64_t result;

  result = qword_3BA468;
  if (!qword_3BA468)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_3BA2A8);
    sub_10CC78();
    sub_32914(&qword_3BA480, &qword_3BA2B0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>);
    atomic_store(result, (unint64_t *)&qword_3BA468);
  }
  return result;
}

unint64_t sub_10CC78()
{
  unint64_t result;

  result = qword_3BA470;
  if (!qword_3BA470)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_3BA2A0);
    sub_32914(&qword_3BA478, &qword_3BA290, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>);
    atomic_store(result, (unint64_t *)&qword_3BA470);
  }
  return result;
}

uint64_t sub_10CD0C(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    sub_3EF80(result, a2, a3 & 1);
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_10CD3C(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    sub_3EF90(result, a2, a3 & 1);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10CD6C()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10CD90(uint64_t *a1)
{
  uint64_t v1;

  return sub_10C448(a1, v1);
}

uint64_t sub_10CD98@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EpisodePlayState.isEpisodePlayed.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_10CDC4(char *a1)
{
  uint64_t v1;

  return sub_10C4E4(a1, v1);
}

uint64_t sub_10CDCC(uint64_t a1)
{
  uint64_t v1;

  return sub_10C56C(a1, v1);
}

uint64_t ArtworkLoader.publisher(for:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t result;
  uint64_t v38;
  id v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;

  v2 = v1;
  v48 = a1;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BA4A8);
  v4 = *(_QWORD *)(v3 - 8);
  v42 = v3;
  v43 = v4;
  __chkstk_darwin(v3);
  v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BA4B0);
  v46 = *(_QWORD *)(v44 - 8);
  __chkstk_darwin(v44);
  v40 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BA4B8);
  v47 = *(_QWORD *)(v45 - 8);
  __chkstk_darwin(v45);
  v41 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v38 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  v11 = __chkstk_darwin(v38);
  v12 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v14 = (char *)&v38 - v13;
  v49 = 0;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BA4C0);
  swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
  v16 = CurrentValueSubject.init(_:)(&v49);
  v17 = ArtworkRequest.artworkLoaderConfig.getter();
  swift_retain();
  v18 = (void *)ArtworkLoader.fetchArtwork(using:forReason:closestMatch:checkCacheSynchronously:completionHandler:)((uint64_t)v14, v17, 2, 1, 1, sub_10D218, v16);
  v39 = v18;
  swift_release(v17);
  swift_release(v16);
  v49 = (uint64_t)v18;
  CurrentValueSubject.send(_:)();
  v49 = v16;
  v19 = v38;
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v14, v38);
  v20 = *(unsigned __int8 *)(v9 + 80);
  v21 = (v20 + 24) & ~v20;
  v22 = swift_allocObject(&unk_3813F8, v21 + v10, v20 | 7);
  *(_QWORD *)(v22 + 16) = v2;
  v23 = v12;
  v24 = v19;
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v22 + v21, v23, v19);
  v25 = sub_32914(&qword_3BA4C8, &qword_3BA4C0, (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
  swift_retain();
  Publisher.handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)(0, 0, 0, 0, 0, 0, sub_10D294, v22, 0, 0, v15, v25);
  swift_release(v22);
  v26 = sub_10D2E0();
  v27 = sub_32914(&qword_3BA4D8, &qword_3BA4A8, (uint64_t)&protocol conformance descriptor for Publishers.HandleEvents<A>);
  v28 = v40;
  v29 = v42;
  Publisher.compactMap<A>(_:)(sub_10D2D4, 0, v42, v26, v27);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v6, v29);
  v30 = sub_32914(&qword_3BA4E0, &qword_3BA4B0, (uint64_t)&protocol conformance descriptor for Publishers.CompactMap<A, B>);
  v31 = v41;
  v32 = v44;
  Publisher.prefix(_:)(1, v44, v30);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v28, v32);
  v33 = sub_32914(&qword_3BA4E8, &qword_3BA4B8, (uint64_t)&protocol conformance descriptor for Publishers.Output<A>);
  v34 = v45;
  v35 = v31;
  v36 = Publisher.bufferedMulticast()(v45, v33);
  swift_release(v16);

  (*(void (**)(char *, uint64_t))(v47 + 8))(v35, v34);
  result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v14, v24);
  *v48 = v36;
  return result;
}

uint64_t sub_10D1C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  if (!a3)
    return CurrentValueSubject.send(_:)();
  v5 = a3;
  swift_errorRetain(a3);
  CurrentValueSubject.send(completion:)(&v5);
  return swift_errorRelease(a3);
}

uint64_t sub_10D218(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10D1C0(a1, a2, a3);
}

uint64_t sub_10D220()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10D294()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  return ArtworkLoader.forgetFetch(forRequestIdentifier:)(v0 + ((v1 + 24) & ~v1));
}

id sub_10D2D4@<X0>(void **a1@<X0>, _QWORD *a2@<X8>)
{
  void *v2;

  v2 = *a1;
  *a2 = v2;
  return v2;
}

unint64_t sub_10D2E0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_3BA4D0;
  if (!qword_3BA4D0)
  {
    v1 = objc_opt_self(UIImage);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_3BA4D0);
  }
  return result;
}

uint64_t sub_10D320(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of ArtworkLoader.fetch(asset:)>>, 1);
}

uint64_t sub_10D330@<X0>(uint64_t *a1@<X8>)
{
  return ArtworkLoader.publisher(for:)(a1);
}

uint64_t sub_10D350()
{
  return sub_32914(&qword_3B6290, &qword_3B6288, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
}

uint64_t LibraryPresenter.headerButtonItems.getter()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 24, v2, 0, 0);
  return swift_retain(*(_QWORD *)(v0 + 24));
}

uint64_t LibraryPresenter.headerButtonItems.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + 24, v5, 1, 0);
  v3 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v1 + 24) = a1;
  return swift_release(v3);
}

uint64_t LibraryPresenter.interactionContextPage.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_14510(v1 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_interactionContextPage, a1, (uint64_t (*)(_QWORD))&type metadata accessor for InteractionContext.Page);
}

uint64_t LibraryPresenter.refreshControls.getter()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_refreshControls));
}

uint64_t LibraryPresenter.hasLoadedContent.getter()
{
  uint64_t v0;
  _QWORD *v1;
  _BYTE v3[24];

  v1 = (_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_hasLoadedContent);
  swift_beginAccess(v0 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_hasLoadedContent, v3, 0, 0);
  return swift_retain(*v1);
}

uint64_t LibraryPresenter.hasLoadedContent.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_hasLoadedContent);
  swift_beginAccess(v3, v6, 1, 0);
  v4 = *v3;
  *v3 = a1;
  return swift_release(v4);
}

uint64_t (*LibraryPresenter.hasLoadedContent.modify(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_hasLoadedContent, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t sub_10D50C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (**v21)();
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  _QWORD *boxed_opaque_existential_2Tm;
  uint64_t v27;
  unint64_t *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  Swift::String v53;
  Swift::String v54;
  Swift::String v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  int *v66;
  uint64_t v67;
  unint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t countAndFlagsBits;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *object;
  void (*v99)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  _QWORD v108[5];
  unsigned __int8 v109[24];
  uint64_t v110;
  uint64_t v111;
  Swift::String v112;

  v1 = v0;
  v103 = type metadata accessor for ActionMenu(0);
  __chkstk_darwin(v103);
  v100 = (unint64_t *)((char *)&v89 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v102 = type metadata accessor for ActionMenu.Item(0);
  __chkstk_darwin(v102);
  v4 = (unint64_t *)((char *)&v89 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = type metadata accessor for ActionMetrics(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v89 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
  __chkstk_darwin(v8);
  v101 = (uint64_t)&v89 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v106 = (char *)&v89 - v11;
  __chkstk_darwin(v12);
  v14 = (char *)&v89 - v13;
  v15 = type metadata accessor for HeaderButtonItem(0);
  v107 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v104 = (uint64_t)&v89 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v105 = (uint64_t)&v89 - v18;
  __chkstk_darwin(v19);
  v21 = (uint64_t (**)())((char *)&v89 - v20);
  __chkstk_darwin(v22);
  v24 = (char *)&v89 - v23;
  v25 = type metadata accessor for Podcasts(0);
  v110 = v25;
  v111 = sub_F1C0((unint64_t *)&qword_3B33B8, (void (*)(uint64_t))&type metadata accessor for Podcasts, (uint64_t)&protocol conformance descriptor for Podcasts);
  boxed_opaque_existential_2Tm = __swift_allocate_boxed_opaque_existential_2Tm(v109);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v25 - 8) + 104))(boxed_opaque_existential_2Tm, enum case for Podcasts.profilePictureAllTabs(_:), v25);
  LOBYTE(v25) = isFeatureEnabled(_:)(v109);
  v27 = __swift_destroy_boxed_opaque_existential_1(v109);
  if ((v25 & 1) != 0)
  {
    v28 = v4;
    v29 = v7;
    *v24 = 1;
    v30 = v15;
    swift_storeEnumTagMultiPayload(v24, v15, 9);
    v31 = sub_111D8(0, 1, 1, (unint64_t)_swiftEmptyArrayStorage);
    v33 = *(_QWORD *)(v31 + 16);
    v32 = *(_QWORD *)(v31 + 24);
    v34 = (_QWORD *)v31;
    if (v33 >= v32 >> 1)
      v34 = (_QWORD *)sub_111D8(v32 > 1, v33 + 1, 1, v31);
    v34[2] = v33 + 1;
    v27 = sub_3C56C((uint64_t)v24, (uint64_t)v34+ ((*(unsigned __int8 *)(v107 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v107 + 80))+ *(_QWORD *)(v107 + 72) * v33, type metadata accessor for HeaderButtonItem);
    v15 = v30;
    v7 = v29;
    v4 = v28;
  }
  else
  {
    v34 = _swiftEmptyArrayStorage;
  }
  v35 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_isLibraryEmpty);
  if (v35 == 2 || (v35 & 1) != 0)
  {
    swift_beginAccess(v1 + 24, v109, 0, 0);
    v43 = *(_QWORD *)(v1 + 24);
    v108[0] = v34;
    swift_retain();
    CurrentValueSubject.send(_:)();
    swift_bridgeObjectRelease();
    return swift_release(v43);
  }
  else
  {
    CurrentValueSubject.value.getter(v109, v27);
    if (v109[0] == 1)
    {
      swift_bridgeObjectRelease();
      v36 = swift_allocObject(&unk_381458, 24, 7);
      swift_weakInit(v36 + 16);
      *v21 = sub_118C74;
      v21[1] = (uint64_t (*)())v36;
      swift_storeEnumTagMultiPayload(v21, v15, 4);
      swift_beginAccess(v1 + 24, v109, 0, 0);
      v37 = *(_QWORD *)(v1 + 24);
      v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8800);
      v39 = *(unsigned __int8 *)(v107 + 80);
      v40 = (v39 + 32) & ~v39;
      v41 = swift_allocObject(v38, v40 + *(_QWORD *)(v107 + 72), v39 | 7);
      *(_OWORD *)(v41 + 16) = xmmword_2EA0D0;
      sub_14510((uint64_t)v21, v41 + v40, type metadata accessor for HeaderButtonItem);
      v108[0] = v41;
      swift_retain();
      CurrentValueSubject.send(_:)();
      swift_bridgeObjectRelease();
      swift_release(v37);
      v42 = (uint64_t)v21;
    }
    else
    {
      ArtworkModel.init(glyphName:accessibilityTitle:isCustomSymbol:isMulticolorSymbol:)(0x73697370696C6C65, 0xE800000000000000, 0, 0, 0, 0);
      v97 = type metadata accessor for ArtworkModel(0);
      v99 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v97 - 8) + 56);
      v99(v14, 0, 1, v97);
      v45 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0928);
      v93 = type metadata accessor for ActionMenu.Child(0);
      v46 = *(_QWORD *)(v93 - 8);
      v95 = v15;
      v47 = *(_QWORD *)(v46 + 72);
      v48 = *(unsigned __int8 *)(v46 + 80);
      v49 = (v48 + 32) & ~v48;
      v50 = swift_allocObject(v45, v49 + 3 * v47, v48 | 7);
      v94 = v50;
      *(_OWORD *)(v50 + 16) = xmmword_2EFAE0;
      v51 = v50 + v49;
      sub_113548(v51);
      sub_113A44(v51 + v47);
      v92 = v51 + 2 * v47;
      v52 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v112._object = (void *)0xEC00000079726172;
      v53._countAndFlagsBits = 0x42494C5F54494445;
      v53._object = (void *)0xEC00000059524152;
      v54._countAndFlagsBits = 0;
      v54._object = (void *)0xE000000000000000;
      v112._countAndFlagsBits = 0x62694C2074696445;
      v55 = NSLocalizedString(_:tableName:bundle:value:comment:)(v53, (Swift::String_optional)0, (NSBundle)v52, v54, v112);
      countAndFlagsBits = v55._countAndFlagsBits;
      object = v55._object;

      v56 = (uint64_t)v106;
      v57 = v97;
      v99(v106, 1, 1, v97);
      v58 = swift_allocObject(&unk_381458, 24, 7);
      v96 = v1;
      swift_weakInit(v58 + 16);
      v59 = swift_retain();
      static ActionMetrics.notInstrumented.getter(v59);
      v60 = type metadata accessor for ClosureAction(0);
      swift_allocObject(v60, *(unsigned int *)(v60 + 48), *(unsigned __int16 *)(v60 + 52));
      v61 = sub_213C1C(0, 0, 32, (uint64_t)v7, (uint64_t)sub_118C6C, v58);
      swift_release_n(v58, 2);
      v110 = v60;
      v111 = sub_F1C0(&qword_3B2768, (void (*)(uint64_t))type metadata accessor for ClosureAction, (uint64_t)&protocol conformance descriptor for Action);
      *(_QWORD *)v109 = v61;
      v62 = _s8ShelfKit10ActionMenuV2IDVAEycfC_0();
      v64 = v63;
      v65 = v101;
      sub_267BC(v56, v101, &qword_3BEB70);
      sub_267BC((uint64_t)v109, (uint64_t)v108, &qword_3B0C50);
      v66 = (int *)v102;
      v67 = (uint64_t)v4 + *(int *)(v102 + 24);
      v68 = v100;
      v99((char *)v67, 1, 1, v57);
      v69 = v66[7];
      *((_BYTE *)v4 + v69) = 2;
      v70 = v66[9];
      v90 = v14;
      v71 = (uint64_t)v4 + v70;
      *(_QWORD *)(v71 + 32) = 0;
      *(_OWORD *)v71 = 0u;
      *(_OWORD *)(v71 + 16) = 0u;
      *v4 = v62;
      v4[1] = v64;
      v72 = (unint64_t)object;
      v4[2] = countAndFlagsBits;
      v4[3] = v72;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_3C454(v65, v67, &qword_3BEB70);
      *((_BYTE *)v4 + v69) = 2;
      *((_BYTE *)v4 + v66[8]) = 1;
      sub_3C454((uint64_t)v108, v71, &qword_3B0C50);
      v73 = v92;
      sub_3C56C((uint64_t)v4, v92, type metadata accessor for ActionMenu.Item);
      swift_storeEnumTagMultiPayload(v73, v93, 0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v74 = (uint64_t)v106;
      sub_1459C((uint64_t)v106, &qword_3BEB70);
      sub_1459C((uint64_t)v109, &qword_3B0C50);
      v75 = _s8ShelfKit10ActionMenuV2IDVAEycfC_0();
      v77 = v76;
      v78 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B27F8) + 48);
      v79 = (uint64_t)v90;
      sub_267BC((uint64_t)v90, v74, &qword_3BEB70);
      v80 = v103;
      v81 = (uint64_t)v68 + *(int *)(v103 + 28);
      v99((char *)v81, 1, 1, v97);
      *v68 = v75;
      v68[1] = v77;
      v68[2] = 0;
      v68[3] = 0xE000000000000000;
      v68[4] = 0;
      v68[5] = 0;
      swift_bridgeObjectRetain();
      v82 = v94;
      swift_bridgeObjectRetain();
      sub_3C454(v74, v81, &qword_3BEB70);
      *(unint64_t *)((char *)v68 + *(int *)(v80 + 32)) = v82;
      v83 = v105;
      sub_3C56C((uint64_t)v68, v105, type metadata accessor for ActionMenu);
      *(_BYTE *)(v83 + v78) = 2;
      swift_storeEnumTagMultiPayload(v83, v95, 6);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1459C(v79, &qword_3BEB70);
      v84 = v104;
      sub_14510(v83, v104, type metadata accessor for HeaderButtonItem);
      if ((swift_isUniquelyReferenced_nonNull_native(v34) & 1) == 0)
        v34 = (_QWORD *)sub_111D8(0, v34[2] + 1, 1, (unint64_t)v34);
      v86 = v34[2];
      v85 = v34[3];
      v87 = v96;
      if (v86 >= v85 >> 1)
        v34 = (_QWORD *)sub_111D8(v85 > 1, v86 + 1, 1, (unint64_t)v34);
      v34[2] = v86 + 1;
      sub_3C56C(v84, (uint64_t)v34+ ((*(unsigned __int8 *)(v107 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v107 + 80))+ *(_QWORD *)(v107 + 72) * v86, type metadata accessor for HeaderButtonItem);
      swift_beginAccess(v87 + 24, v109, 0, 0);
      v88 = *(_QWORD *)(v87 + 24);
      v108[0] = v34;
      swift_retain();
      CurrentValueSubject.send(_:)();
      swift_bridgeObjectRelease();
      swift_release(v88);
      v42 = v83;
    }
    return sub_145D8(v42, type metadata accessor for HeaderButtonItem);
  }
}

uint64_t LibraryPresenter.isEditing.getter()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_isEditing));
}

uint64_t LibraryPresenter.reorderingExtension.getter@<X0>(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  void (__swiftcall *v10)();
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t *, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter____lazy_storage___reorderingExtension);
  v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter____lazy_storage___reorderingExtension);
  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter____lazy_storage___reorderingExtension + 8);
  v6 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter____lazy_storage___reorderingExtension + 16);
  v7 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter____lazy_storage___reorderingExtension + 24);
  v8 = (uint64_t (*)(uint64_t, uint64_t))v5;
  v9 = v4;
  v10 = (void (__swiftcall *)())v6;
  v12 = v3[4];
  v11 = v3[5];
  v13 = v7;
  v14 = (uint64_t (*)(uint64_t *, uint64_t))v12;
  v15 = v11;
  if (v5 == 1)
  {
    v25 = v6;
    v26 = v4;
    v23 = v3[5];
    v24 = v7;
    v9 = swift_allocObject(&unk_381458, 24, 7);
    swift_weakInit(v9 + 16);
    v15 = swift_allocObject(&unk_381458, 24, 7);
    swift_weakInit(v15 + 16);
    v16 = *v3;
    v21 = v3[2];
    v22 = v3[1];
    v19 = v3[4];
    v20 = v3[3];
    v18 = v3[5];
    v8 = sub_10E1AC;
    *v3 = (uint64_t)sub_10E1AC;
    v3[1] = v9;
    v10 = FindOrCreateEpisodeOfferContentIDsIntentsIntentImplementation.init();
    v3[2] = (uint64_t)FindOrCreateEpisodeOfferContentIDsIntentsIntentImplementation.init();
    v3[3] = 0;
    v14 = sub_10E3D0;
    v3[4] = (uint64_t)sub_10E3D0;
    v3[5] = v15;
    swift_retain();
    swift_retain();
    sub_3AEF8(v16, v22, v21, v20, v19, v18);
    v11 = v23;
    v7 = v24;
    v6 = v25;
    v4 = v26;
    v13 = 0;
  }
  *a1 = v8;
  a1[1] = (uint64_t (*)(uint64_t, uint64_t))v9;
  a1[2] = (uint64_t (*)(uint64_t, uint64_t))v10;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))v13;
  a1[4] = (uint64_t (*)(uint64_t, uint64_t))v14;
  a1[5] = (uint64_t (*)(uint64_t, uint64_t))v15;
  return sub_3AF44(v5, v4, v6, v7, v12, v11);
}

uint64_t sub_10E058()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10E07C(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  v6 = a1[4];
  v7 = a1[5];
  v8 = (uint64_t *)(*a2 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter____lazy_storage___reorderingExtension);
  v9 = *v8;
  v10 = v8[1];
  v11 = v8[2];
  v12 = v8[3];
  v13 = v8[4];
  v14 = v8[5];
  *v8 = *a1;
  v8[1] = v3;
  v8[2] = v4;
  v8[3] = v5;
  v8[4] = v6;
  v8[5] = v7;
  sub_3AF54(v2, v3, v4, v5, v6, v7);
  return sub_3AEF8(v9, v10, v11, v12, v13, v14);
}

uint64_t LibraryPresenter.reorderingExtension.setter(_OWORD *a1)
{
  uint64_t v1;
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;

  v2 = (_OWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter____lazy_storage___reorderingExtension);
  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter____lazy_storage___reorderingExtension);
  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter____lazy_storage___reorderingExtension + 8);
  v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter____lazy_storage___reorderingExtension + 16);
  v6 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter____lazy_storage___reorderingExtension + 24);
  v7 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter____lazy_storage___reorderingExtension + 32);
  v8 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter____lazy_storage___reorderingExtension + 40);
  v9 = a1[1];
  *v2 = *a1;
  v2[1] = v9;
  v2[2] = a1[2];
  return sub_3AEF8(v4, v3, v5, v6, v7, v8);
}

uint64_t sub_10E12C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t Strong;
  uint64_t v7;
  char v8;
  _BYTE v10[24];

  v5 = a3 + 16;
  swift_beginAccess(a3 + 16, v10, 0, 0);
  Strong = swift_weakLoadStrong(v5);
  if (Strong)
  {
    v7 = Strong;
    v8 = sub_10E1B4(a1, a2);
    swift_release(v7);
  }
  else
  {
    v8 = 0;
  }
  return v8 & 1;
}

uint64_t sub_10E1AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_10E12C(a1, a2, v2);
}

uint64_t sub_10E1B4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  _BYTE v16[15];
  uint64_t v17;

  v3 = type metadata accessor for ModernShelf(0);
  __chkstk_darwin(v3);
  v5 = &v16[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v6);
  v8 = &v16[-v7];
  CurrentValueSubject.value.getter(&v17, v9);
  v10 = v17;
  sub_14510(a2, (uint64_t)v8, type metadata accessor for ModernShelf);
  if (v10 == 1)
  {
    v11 = v8[1];
    if (*v8 == 0xD000000000000029 && v11 == 0x800000000030F860)
    {
      sub_14510((uint64_t)v8, (uint64_t)v5, type metadata accessor for ModernShelf);
      v12 = 1;
    }
    else
    {
      v13 = _stringCompareWithSmolCheck(_:_:expecting:)(*v8, v11, 0xD000000000000029, 0x800000000030F860, 0);
      sub_14510((uint64_t)v8, (uint64_t)v5, type metadata accessor for ModernShelf);
      if ((v13 & 1) != 0 || (v14 = v5[1], *v5 == 0xD000000000000026) && v14 == 0x800000000030F890)
        v12 = 1;
      else
        v12 = _stringCompareWithSmolCheck(_:_:expecting:)(*v5, v14, 0xD000000000000026, 0x800000000030F890, 0);
    }
    sub_145D8((uint64_t)v8, type metadata accessor for ModernShelf);
  }
  else
  {
    v12 = 0;
    v5 = v8;
  }
  sub_145D8((uint64_t)v5, type metadata accessor for ModernShelf);
  return v12 & 1;
}

uint64_t sub_10E360(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  _BYTE v8[24];

  v5 = a3 + 16;
  swift_beginAccess(a3 + 16, v8, 0, 0);
  result = swift_weakLoadStrong(v5);
  if (result)
  {
    v7 = result;
    sub_10E3D8(a1, a2);
    return swift_release(v7);
  }
  return result;
}

uint64_t sub_10E3D0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_10E360(a1, a2, v2);
}

uint64_t sub_10E3D8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t result;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unsigned __int8 *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t ObjectType;
  uint64_t v85;
  uint64_t v86;
  _QWORD v87[2];
  uint64_t v88;
  unsigned __int8 *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  _QWORD v99[5];
  _QWORD v100[3];
  uint64_t v101;
  uint64_t v102;

  v88 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
  __chkstk_darwin(v3);
  v91 = (uint64_t)v87 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = type metadata accessor for LazyJSFlowDestination(0);
  __chkstk_darwin(v90);
  v89 = (unsigned __int8 *)v87 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = type metadata accessor for FlowAction.DestinationType(0);
  __chkstk_darwin(v94);
  v7 = (char *)v87 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BA920);
  __chkstk_darwin(v8);
  v96 = (uint64_t)v87 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v97 = (char *)v87 - v11;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BA918);
  __chkstk_darwin(v12);
  v14 = (char *)v87 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v17 = (char *)v87 - v16;
  v18 = type metadata accessor for Link(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v93 = (_QWORD *)((char *)v87 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v21);
  v92 = (char *)v87 - v22;
  __chkstk_darwin(v23);
  v25 = (char *)v87 - v24;
  __chkstk_darwin(v26);
  v95 = (uint64_t)v87 - v27;
  __chkstk_darwin(v28);
  v30 = (char *)v87 - v29;
  v32 = *a1;
  v31 = a1[1];
  if ((v32 != 0xD000000000000029 || v31 != 0x800000000030F860)
    && (_stringCompareWithSmolCheck(_:_:expecting:)(v32, v31, 0xD000000000000029, 0x800000000030F860, 0) & 1) == 0)
  {
    if (v32 == 0xD000000000000026 && v31 == 0x800000000030F890
      || (result = _stringCompareWithSmolCheck(_:_:expecting:)(v32, v31, 0xD000000000000026, 0x800000000030F890, 0), (result & 1) != 0))
    {
      v74 = *(_QWORD *)(v88 + 16);
      if (v74)
      {
        v75 = v88 + 32;
        swift_bridgeObjectRetain();
        v76 = _swiftEmptyArrayStorage;
        do
        {
          sub_150C8(v75, (uint64_t)v100);
          sub_150C8((uint64_t)v100, (uint64_t)v99);
          v77 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0A50);
          v78 = swift_dynamicCast(v14, v99, v77, v18, 6);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v14, v78 ^ 1u, 1, v18);
          __swift_destroy_boxed_opaque_existential_1(v100);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v14, 1, v18) == 1)
          {
            sub_1459C((uint64_t)v14, &qword_3BA918);
          }
          else
          {
            v79 = (uint64_t)v92;
            sub_3C56C((uint64_t)v14, (uint64_t)v92, type metadata accessor for Link);
            sub_3C56C(v79, (uint64_t)v93, type metadata accessor for Link);
            if ((swift_isUniquelyReferenced_nonNull_native(v76) & 1) == 0)
              v76 = (_QWORD *)sub_11200(0, v76[2] + 1, 1, (unint64_t)v76);
            v81 = v76[2];
            v80 = v76[3];
            if (v81 >= v80 >> 1)
              v76 = (_QWORD *)sub_11200(v80 > 1, v81 + 1, 1, (unint64_t)v76);
            v76[2] = v81 + 1;
            sub_3C56C((uint64_t)v93, (uint64_t)v76+ ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80))+ *(_QWORD *)(v19 + 72) * v81, type metadata accessor for Link);
          }
          v75 += 40;
          --v74;
        }
        while (v74);
        swift_bridgeObjectRelease();
      }
      else
      {
        v76 = _swiftEmptyArrayStorage;
      }
      sub_116ADC((uint64_t)v76);
      return swift_bridgeObjectRelease();
    }
    return result;
  }
  v92 = v7;
  v33 = *(_QWORD *)(v88 + 16);
  if (v33)
  {
    v34 = v88 + 32;
    swift_bridgeObjectRetain();
    v35 = _swiftEmptyArrayStorage;
    do
    {
      sub_150C8(v34, (uint64_t)v100);
      sub_150C8((uint64_t)v100, (uint64_t)v99);
      v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0A50);
      v37 = swift_dynamicCast(v17, v99, v36, v18, 6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v17, v37 ^ 1u, 1, v18);
      __swift_destroy_boxed_opaque_existential_1(v100);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) == 1)
      {
        sub_1459C((uint64_t)v17, &qword_3BA918);
      }
      else
      {
        sub_3C56C((uint64_t)v17, (uint64_t)v30, type metadata accessor for Link);
        sub_3C56C((uint64_t)v30, v95, type metadata accessor for Link);
        if ((swift_isUniquelyReferenced_nonNull_native(v35) & 1) == 0)
          v35 = (_QWORD *)sub_11200(0, v35[2] + 1, 1, (unint64_t)v35);
        v39 = v35[2];
        v38 = v35[3];
        if (v39 >= v38 >> 1)
          v35 = (_QWORD *)sub_11200(v38 > 1, v39 + 1, 1, (unint64_t)v35);
        v35[2] = v39 + 1;
        sub_3C56C(v95, (uint64_t)v35+ ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80))+ *(_QWORD *)(v19 + 72) * v39, type metadata accessor for Link);
      }
      v34 += 40;
      --v33;
    }
    while (v33);
    swift_bridgeObjectRelease();
    v40 = (uint64_t)_swiftEmptyArrayStorage;
  }
  else
  {
    v35 = _swiftEmptyArrayStorage;
    v40 = (uint64_t)_swiftEmptyArrayStorage;
  }
  v99[0] = _swiftEmptyArrayStorage;
  v41 = v35[2];
  v42 = (uint64_t)v97;
  if (v41)
  {
    v43 = (uint64_t)v35 + ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80));
    v95 = *(_QWORD *)(v19 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_14510(v43, (uint64_t)v25, type metadata accessor for Link);
      sub_267BC((uint64_t)&v25[*(int *)(v18 + 36)], (uint64_t)v100, &qword_3B0C50);
      if (v101)
      {
        v45 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2E40);
        v46 = type metadata accessor for FlowAction(0);
        if ((swift_dynamicCast(&v98, v100, v45, v46, 6) & 1) != 0)
          goto LABEL_25;
      }
      else
      {
        sub_1459C((uint64_t)v100, &qword_3B0C50);
      }
      v98 = 0;
LABEL_25:
      v47 = sub_145D8((uint64_t)v25, type metadata accessor for Link);
      v48 = v98;
      if (v98)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v47);
        v50 = *(_QWORD *)((char *)&dword_10 + (v99[0] & 0xFFFFFFFFFFFFFF8));
        v49 = *(_QWORD *)((char *)&dword_18 + (v99[0] & 0xFFFFFFFFFFFFFF8));
        if (v50 >= v49 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v49 > 1, v50 + 1, 1);
        v44 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v50, v48);
        specialized Array._endMutation()(v44);
      }
      v43 += v95;
      --v41;
      v42 = (uint64_t)v97;
      if (!v41)
      {
        swift_bridgeObjectRelease();
        v40 = v99[0];
        break;
      }
    }
  }
  swift_bridgeObjectRelease();
  v51 = (uint64_t)v92;
  v52 = v96;
  if ((unint64_t)v40 >> 62)
  {
    if (v40 < 0)
      v82 = v40;
    else
      v82 = v40 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter(v82);
    v53 = result;
    if (result)
      goto LABEL_31;
LABEL_70:
    v93 = _swiftEmptyArrayStorage;
LABEL_71:
    swift_bridgeObjectRelease_n(v40, 2);
    v83 = *(_QWORD *)(v87[1] + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_libraryDataProvider + 8);
    ObjectType = swift_getObjectType();
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v83 + 16))(v100, ObjectType, v83);
    v85 = v101;
    v86 = v102;
    __swift_project_boxed_opaque_existential_1(v100, v101);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(v86 + 232))(v93, v85, v86);
    swift_bridgeObjectRelease();
    return __swift_destroy_boxed_opaque_existential_1(v100);
  }
  v53 = *(_QWORD *)((char *)&dword_10 + (v40 & 0xFFFFFFFFFFFFF8));
  result = swift_bridgeObjectRetain();
  if (!v53)
    goto LABEL_70;
LABEL_31:
  if (v53 >= 1)
  {
    v55 = 0;
    v56 = v40 & 0xC000000000000001;
    v93 = _swiftEmptyArrayStorage;
    v95 = v40;
    while (1)
    {
      if (v56)
      {
        v57 = specialized _ArrayBuffer._getElementSlowPath(_:)(v55);
      }
      else
      {
        v57 = *(_QWORD *)(v40 + 8 * v55 + 32);
        swift_retain();
      }
      sub_14510(v57 + OBJC_IVAR____TtC8ShelfKit10FlowAction_destinationType, v51, type metadata accessor for FlowAction.DestinationType);
      if (swift_getEnumCaseMultiPayload(v51, v94) == 1)
      {
        v58 = v89;
        sub_3C56C(v51, (uint64_t)v89, type metadata accessor for LazyJSFlowDestination);
        v60 = v90;
        v59 = v91;
        v61 = *v58;
        sub_267BC((uint64_t)&v58[*(int *)(v90 + 20)], v91, &qword_3B4370);
        sub_267BC((uint64_t)&v58[*(int *)(v60 + 24)], (uint64_t)v100, (uint64_t *)&unk_3BC540);
        v62 = *(int *)(v60 + 28);
        v51 = (uint64_t)v92;
        LOBYTE(v99[0]) = v58[v62];
        v63 = v59;
        v52 = v96;
        sub_2C4DAC(v61, v63, (uint64_t)v100, v96);
        v64 = (uint64_t)v58;
        v42 = (uint64_t)v97;
        sub_145D8(v64, type metadata accessor for LazyJSFlowDestination);
      }
      else
      {
        sub_3C56C(v51, v52, type metadata accessor for FlowDestination);
        v65 = type metadata accessor for FlowDestination(0);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 56))(v52, 0, 1, v65);
      }
      sub_15BD4(v52, v42, &qword_3BA920);
      v66 = type metadata accessor for FlowDestination(0);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 48))(v42, 1, v66) == 1)
      {
        sub_1459C(v42, &qword_3BA920);
      }
      else
      {
        if (swift_getEnumCaseMultiPayload(v42, v66) == 13)
        {
          v67 = *(_QWORD *)v42;
          v69 = *(_QWORD *)(*(_QWORD *)v42 + 16);
          v68 = *(_QWORD *)(*(_QWORD *)v42 + 24);
          swift_bridgeObjectRetain();
          swift_release(v57);
          swift_release(v67);
          if ((swift_isUniquelyReferenced_nonNull_native(v93) & 1) == 0)
            v93 = sub_10644(0, v93[2] + 1, 1, v93);
          v71 = v93[2];
          v70 = v93[3];
          if (v71 >= v70 >> 1)
            v93 = sub_10644((_QWORD *)(v70 > 1), v71 + 1, 1, v93);
          v72 = v93;
          v93[2] = v71 + 1;
          v73 = &v72[2 * v71];
          v73[4] = v69;
          v73[5] = v68;
          v51 = (uint64_t)v92;
          v52 = v96;
          goto LABEL_35;
        }
        sub_145D8(v42, type metadata accessor for FlowDestination);
      }
      swift_release(v57);
LABEL_35:
      ++v55;
      v40 = v95;
      if (v53 == v55)
        goto LABEL_71;
    }
  }
  __break(1u);
  return result;
}

void (*LibraryPresenter.reorderingExtension.modify(uint64_t (***a1)(uint64_t a1, uint64_t a2)))(uint64_t **a1, char a2)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t (**v3)(uint64_t, uint64_t);

  v3 = (uint64_t (**)(uint64_t, uint64_t))malloc(0x38uLL);
  *a1 = v3;
  v3[6] = v1;
  LibraryPresenter.reorderingExtension.getter(v3);
  return sub_10EEE8;
}

void sub_10EEE8(uint64_t **a1, char a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = *a1;
  v4 = (*a1)[5];
  v5 = (*a1)[6];
  v6 = **a1;
  v7 = v3[1];
  v8 = v3[2];
  v9 = v3[3];
  v10 = v3[4];
  v11 = (uint64_t *)(v5 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter____lazy_storage___reorderingExtension);
  v12 = *v11;
  v13 = v11[1];
  v14 = v11[2];
  v15 = v11[3];
  v16 = v11[4];
  v17 = v11[5];
  *v11 = v6;
  v11[1] = v7;
  v11[2] = v8;
  v11[3] = v9;
  v11[4] = v10;
  v11[5] = v4;
  if ((a2 & 1) != 0)
  {
    sub_3AF54(v6, v7, v8, v9, v10, v4);
    sub_3AEF8(v12, v13, v14, v15, v16, v17);
    sub_3AF08(*v3, v3[1], v3[2], v3[3], v3[4], v3[5]);
  }
  else
  {
    sub_3AEF8(v12, v13, v14, v15, v16, v17);
  }
  free(v3);
}

uint64_t LibraryPresenter.deletableExtension.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _QWORD *);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter____lazy_storage___deletableExtension);
  v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter____lazy_storage___deletableExtension);
  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter____lazy_storage___deletableExtension + 8);
  v6 = (uint64_t (*)(uint64_t, _QWORD *))v5;
  v7 = v3[2];
  v8 = v3[3];
  v9 = v4;
  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v7;
  v11 = v8;
  if (v5 == 1)
  {
    v17 = v4;
    v9 = swift_allocObject(&unk_381458, 24, 7);
    swift_weakInit(v9 + 16);
    v11 = swift_allocObject(&unk_381458, 24, 7);
    swift_weakInit(v11 + 16);
    v12 = *v3;
    v15 = v3[2];
    v16 = v3[1];
    v14 = v3[3];
    v6 = sub_10F208;
    *v3 = (uint64_t)sub_10F208;
    v3[1] = v9;
    v10 = sub_10F210;
    v3[2] = (uint64_t)sub_10F210;
    v3[3] = v11;
    swift_retain();
    swift_retain();
    sub_3AF98(v12, v16, v15, v14);
    v4 = v17;
  }
  *a1 = v6;
  a1[1] = v9;
  a1[2] = v10;
  a1[3] = v11;
  return sub_3AFD8(v5, v4, v7, v8);
}

uint64_t sub_10F0D0(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  v6 = (uint64_t *)(*a2 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter____lazy_storage___deletableExtension);
  v7 = *v6;
  v8 = v6[1];
  v9 = v6[2];
  v10 = v6[3];
  *v6 = *a1;
  v6[1] = v3;
  v6[2] = v4;
  v6[3] = v5;
  sub_3AFE8(v2, v3, v4, v5);
  return sub_3AF98(v7, v8, v9, v10);
}

uint64_t LibraryPresenter.deletableExtension.setter(_OWORD *a1)
{
  uint64_t v1;
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  v2 = (_OWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter____lazy_storage___deletableExtension);
  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter____lazy_storage___deletableExtension);
  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter____lazy_storage___deletableExtension + 8);
  v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter____lazy_storage___deletableExtension + 16);
  v6 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter____lazy_storage___deletableExtension + 24);
  v7 = a1[1];
  *v2 = *a1;
  v2[1] = v7;
  return sub_3AF98(v4, v3, v5, v6);
}

uint64_t sub_10F158(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t Strong;
  uint64_t v6;
  uint64_t v7;
  char v8;
  _BYTE v10[24];

  v4 = a3 + 16;
  swift_beginAccess(a3 + 16, v10, 0, 0);
  Strong = swift_weakLoadStrong(v4);
  if (Strong)
  {
    v6 = Strong;
    v7 = a2[1];
    if (*a2 == 0xD000000000000029 && v7 == 0x800000000030F860)
      v8 = 1;
    else
      v8 = _stringCompareWithSmolCheck(_:_:expecting:)(*a2, v7, 0xD000000000000029, 0x800000000030F860, 0);
    swift_release(v6);
  }
  else
  {
    v8 = 0;
  }
  return v8 & 1;
}

uint64_t sub_10F208(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  return sub_10F158(a1, a2, v2);
}

uint64_t sub_10F210(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_110228(a1, a2, a3, v3, (void (*)(uint64_t, uint64_t, uint64_t))sub_10F230);
}

uint64_t sub_10F230(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char v25;
  void (*v26)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v32)(uint64_t);
  uint64_t v33;
  uint64_t v34;
  id v35;
  Swift::String v36;
  Swift::String v37;
  Swift::String v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  Swift::String v47;
  Swift::String v48;
  Swift::String v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  id v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  void *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD v90[3];
  uint64_t v91;
  Swift::String v92;
  Swift::String v93;

  v86 = a3;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2820);
  __chkstk_darwin(v4);
  v87 = (char *)&v77 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = type metadata accessor for UUID(0);
  v83 = *(_QWORD *)(v85 - 8);
  __chkstk_darwin(v85);
  v7 = (char *)&v77 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v8);
  v84 = (char *)&v77 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ActionMetrics(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v77 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BA920);
  __chkstk_darwin(v14);
  v16 = (uint64_t *)((char *)&v77 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BA918);
  __chkstk_darwin(v17);
  v19 = (char *)&v77 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for Link(0);
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v23 = (char *)&v77 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_150C8(a1, (uint64_t)v90);
  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0A50);
  v25 = swift_dynamicCast(v19, v90, v24, v20, 6);
  v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56);
  if ((v25 & 1) == 0)
  {
    v26(v19, 1, 1, v20);
    return sub_1459C((uint64_t)v19, &qword_3BA918);
  }
  v26(v19, 0, 1, v20);
  sub_3C56C((uint64_t)v19, (uint64_t)v23, type metadata accessor for Link);
  sub_267BC((uint64_t)&v23[*(int *)(v20 + 36)], (uint64_t)v90, &qword_3B0C50);
  if (!v91)
  {
    sub_1459C((uint64_t)v90, &qword_3B0C50);
    goto LABEL_8;
  }
  v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2E40);
  v28 = type metadata accessor for FlowAction(0);
  if ((swift_dynamicCast(&v89, v90, v27, v28, 6) & 1) == 0)
  {
LABEL_8:
    v32 = type metadata accessor for Link;
    v33 = (uint64_t)v23;
    return sub_145D8(v33, v32);
  }
  v29 = v89;
  sub_2A22FC((uint64_t)v16);
  v30 = type metadata accessor for FlowDestination(0);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 48))(v16, 1, v30) == 1)
  {
    sub_145D8((uint64_t)v23, type metadata accessor for Link);
    swift_release(v29);
    return sub_1459C((uint64_t)v16, &qword_3BA920);
  }
  if (swift_getEnumCaseMultiPayload(v16, v30) == 13)
  {
    v34 = *v16;
    v78 = (id)objc_opt_self(NSBundle);
    v35 = objc_msgSend(v78, "mainBundle");
    v92._object = (void *)0xE000000000000000;
    v36._object = (void *)0x800000000030F8E0;
    v36._countAndFlagsBits = 0xD000000000000026;
    v37._countAndFlagsBits = 0;
    v37._object = (void *)0xE000000000000000;
    v92._countAndFlagsBits = 0;
    v38 = NSLocalizedString(_:tableName:bundle:value:comment:)(v36, (Swift::String_optional)0, (NSBundle)v35, v37, v92);
    v81 = v29;

    v39 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8E10);
    v40 = swift_allocObject(v39, 72, 7);
    *(_OWORD *)(v40 + 16) = xmmword_2EA0D0;
    v41 = v34;
    v82 = v34;
    v42 = *(_QWORD *)(v34 + 32);
    v43 = *(_QWORD *)(v41 + 40);
    *(_QWORD *)(v40 + 56) = &type metadata for String;
    *(_QWORD *)(v40 + 64) = sub_22F20();
    *(_QWORD *)(v40 + 32) = v42;
    *(_QWORD *)(v40 + 40) = v43;
    swift_bridgeObjectRetain();
    v44 = static String.localizedStringWithFormat(_:_:)(v38._countAndFlagsBits, v38._object, v40);
    v79 = v45;
    v80 = v44;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v46 = objc_msgSend(v78, "mainBundle");
    v93._object = (void *)0xE000000000000000;
    v47._countAndFlagsBits = 0x535F4554454C4544;
    v47._object = (void *)0xEE004E4F49544154;
    v48._countAndFlagsBits = 0;
    v48._object = (void *)0xE000000000000000;
    v93._countAndFlagsBits = 0;
    v49 = NSLocalizedString(_:tableName:bundle:value:comment:)(v47, (Swift::String_optional)0, (NSBundle)v46, v48, v93);

    v50 = swift_allocObject(&unk_381458, 24, 7);
    swift_weakInit(v50 + 16);
    v51 = swift_allocObject(&unk_3815E8, 32, 7);
    v52 = v82;
    *(_QWORD *)(v51 + 16) = v50;
    *(_QWORD *)(v51 + 24) = v52;
    swift_retain();
    v53 = swift_retain();
    static ActionMetrics.notInstrumented.getter(v53);
    v54 = type metadata accessor for ClosureAction(0);
    swift_allocObject(v54, *(unsigned int *)(v54 + 48), *(unsigned __int16 *)(v54 + 52));
    v55 = sub_213C1C(v49._countAndFlagsBits, (uint64_t)v49._object, 1, (uint64_t)v13, (uint64_t)sub_118DBC, v51);
    swift_release(v50);
    swift_release(v51);
    v56 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BC590);
    v57 = swift_allocObject(v56, 40, 7);
    *(_OWORD *)(v57 + 16) = xmmword_2EF430;
    *(_QWORD *)(v57 + 32) = v55;
    v90[0] = v57;
    specialized Array._endMutation()(v57);
    v58 = v90[0];
    v59 = type metadata accessor for SheetAction(0);
    v60 = swift_allocObject(v59, *(unsigned int *)(v59 + 48), *(unsigned __int16 *)(v59 + 52));
    *(_QWORD *)(v60 + OBJC_IVAR____TtC8ShelfKit11SheetAction_actions) = v58;
    v61 = (uint64_t *)(v60 + OBJC_IVAR____TtC8ShelfKit11SheetAction_sheetTitle);
    v62 = v79;
    *v61 = v80;
    v61[1] = v62;
    v63 = (_QWORD *)(v60 + OBJC_IVAR____TtC8ShelfKit11SheetAction_message);
    *v63 = 0;
    v63[1] = 0;
    *(_BYTE *)(v60 + OBJC_IVAR____TtC8ShelfKit11SheetAction_isCancelable) = 1;
    v64 = type metadata accessor for ImpressionMetrics(0);
    v65 = (uint64_t)v84;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 56))(v84, 1, 1, v64);
    v66 = swift_retain();
    v67 = static ActionMetrics.notInstrumented.getter(v66);
    UUID.init()(v67);
    v68 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
    v70 = v69;
    (*(void (**)(char *, uint64_t))(v83 + 8))(v7, v85);
    *(_QWORD *)(v60 + 16) = v68;
    *(_QWORD *)(v60 + 24) = v70;
    *(_QWORD *)(v60 + 32) = 0;
    *(_QWORD *)(v60 + 40) = 0;
    *(_BYTE *)(v60 + 48) = 32;
    (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v60 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v13, v10);
    sub_15BD4(v65, v60 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics, (uint64_t *)&unk_3B8790);
    v91 = sub_327F8(0, (unint64_t *)&qword_3B18F0, UIResponder_ptr);
    v71 = v86;
    v90[0] = v86;
    swift_retain();
    v72 = v71;
    v73 = (void *)UIResponder.firstViewInResponderChain.getter();
    v74 = type metadata accessor for ClickLocationElement(0);
    v75 = (uint64_t)v87;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v74 - 8) + 56))(v87, 1, 1, v74);
    v76 = sub_11807C(v60, (uint64_t)v90, v73, v75, v88);
    swift_release(v82);
    swift_release(v55);
    swift_release(v60);
    swift_release(v76);
    swift_release(v81);

    sub_1459C(v75, &qword_3B2820);
    sub_145D8((uint64_t)v23, type metadata accessor for Link);
    sub_1459C((uint64_t)v90, (uint64_t *)&unk_3BC540);
    return swift_release(v60);
  }
  sub_145D8((uint64_t)v23, type metadata accessor for Link);
  swift_release(v29);
  v32 = type metadata accessor for FlowDestination;
  v33 = (uint64_t)v16;
  return sub_145D8(v33, v32);
}

void (*LibraryPresenter.deletableExtension.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  LibraryPresenter.deletableExtension.getter(v3);
  return sub_10FA4C;
}

void sub_10FA4C(uint64_t **a1, char a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *a1;
  v4 = (*a1)[3];
  v5 = (*a1)[4];
  v6 = **a1;
  v7 = v3[1];
  v8 = v3[2];
  v9 = (uint64_t *)(v5 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter____lazy_storage___deletableExtension);
  v10 = *v9;
  v11 = v9[1];
  v12 = v9[2];
  v13 = v9[3];
  *v9 = v6;
  v9[1] = v7;
  v9[2] = v8;
  v9[3] = v4;
  if ((a2 & 1) != 0)
  {
    sub_3AFE8(v6, v7, v8, v4);
    sub_3AF98(v10, v11, v12, v13);
    sub_3AFA8(*v3, v3[1], v3[2], v3[3]);
  }
  else
  {
    sub_3AF98(v10, v11, v12, v13);
  }
  free(v3);
}

_QWORD *LibraryPresenter.multiSelectableExtension.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = OBJC_IVAR____TtC8ShelfKit16LibraryPresenter____lazy_storage___multiSelectableExtension;
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter____lazy_storage___multiSelectableExtension);
  v3 = (_QWORD *)v2;
  if (v2 == 1)
  {
    v4 = swift_allocObject(&unk_381458, 24, 7);
    swift_weakInit(v4 + 16);
    v5 = swift_allocObject(&unk_381458, 24, 7);
    swift_weakInit(v5 + 16);
    v6 = swift_allocObject(&unk_381458, 24, 7);
    swift_weakInit(v6 + 16);
    v7 = swift_allocObject(&unk_381458, 24, 7);
    swift_weakInit(v7 + 16);
    v8 = swift_allocObject(&unk_381458, 24, 7);
    swift_weakInit(v8 + 16);
    v9 = type metadata accessor for MultiSelectableExtension();
    v3 = (_QWORD *)swift_allocObject(v9, 112, 7);
    v3[12] = 0;
    v3[13] = 0;
    v3[2] = sub_10FD20;
    v3[3] = v4;
    v3[4] = sub_10FEA0;
    v3[5] = v5;
    v3[6] = sub_10FF80;
    v3[7] = v6;
    v3[8] = sub_10FFF8;
    v3[9] = v7;
    v3[10] = sub_1102AC;
    v3[11] = v8;
    v10 = *(_QWORD *)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v3;
    swift_retain();
    sub_11805C(v10);
  }
  sub_11806C(v2);
  return v3;
}

uint64_t LibraryPresenter.multiSelectableExtension.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter____lazy_storage___multiSelectableExtension);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter____lazy_storage___multiSelectableExtension) = a1;
  return sub_11805C(v2);
}

uint64_t sub_10FC70(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t Strong;
  uint64_t v6;
  uint64_t v7;
  char v8;
  _BYTE v10[24];

  v4 = a3 + 16;
  swift_beginAccess(a3 + 16, v10, 0, 0);
  Strong = swift_weakLoadStrong(v4);
  if (Strong)
  {
    v6 = Strong;
    v7 = a2[1];
    if (*a2 == 0xD000000000000026 && v7 == 0x800000000030F890)
      v8 = 1;
    else
      v8 = _stringCompareWithSmolCheck(_:_:expecting:)(*a2, v7, 0xD000000000000026, 0x800000000030F890, 0);
    swift_release(v6);
  }
  else
  {
    v8 = 0;
  }
  return v8 & 1;
}

uint64_t sub_10FD20(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  return sub_10FC70(a1, a2, v2);
}

uint64_t sub_10FD28(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t Strong;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  _BYTE v16[24];

  v5 = type metadata accessor for ModernShelf(0);
  __chkstk_darwin(v5);
  v7 = &v16[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  a3 += 16;
  swift_beginAccess(a3, v16, 0, 0);
  Strong = swift_weakLoadStrong(a3);
  if (Strong)
  {
    v9 = Strong;
    v10 = a2[1];
    if (*a2 == 0xD000000000000026 && v10 == 0x800000000030F890)
    {
      sub_14510((uint64_t)a2, (uint64_t)v7, type metadata accessor for ModernShelf);
      v11 = 1;
    }
    else
    {
      v12 = _stringCompareWithSmolCheck(_:_:expecting:)(*a2, v10, 0xD000000000000026, 0x800000000030F890, 0);
      sub_14510((uint64_t)a2, (uint64_t)v7, type metadata accessor for ModernShelf);
      if ((v12 & 1) != 0 || (v13 = v7[1], *v7 == 0xD000000000000029) && v13 == 0x800000000030F860)
        v11 = 1;
      else
        v11 = _stringCompareWithSmolCheck(_:_:expecting:)(*v7, v13, 0xD000000000000029, 0x800000000030F860, 0);
    }
    sub_145D8((uint64_t)v7, type metadata accessor for ModernShelf);
    swift_release(v9);
  }
  else
  {
    v11 = 0;
  }
  return v11 & 1;
}

uint64_t sub_10FEA0(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  return sub_10FD28(a1, a2, v2);
}

uint64_t sub_10FEA8(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t Strong;
  uint64_t v6;
  uint64_t v7;
  char v8;
  _QWORD v10[3];

  v4 = a3 + 16;
  swift_beginAccess(a3 + 16, (char *)v10 + 1, 0, 0);
  Strong = swift_weakLoadStrong(v4);
  if (Strong)
  {
    v6 = Strong;
    CurrentValueSubject.value.getter(v10, Strong);
    if (LOBYTE(v10[0]) != 1 || (v7 = a2[1], *a2 == 0xD000000000000026) && v7 == 0x800000000030F890)
      v8 = 1;
    else
      v8 = _stringCompareWithSmolCheck(_:_:expecting:)(*a2, v7, 0xD000000000000026, 0x800000000030F890, 0);
    swift_release(v6);
  }
  else
  {
    v8 = 0;
  }
  return v8 & 1;
}

uint64_t sub_10FF80(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  return sub_10FEA8(a1, a2, v2);
}

uint64_t sub_10FF88(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  _BYTE v8[24];

  v5 = a3 + 16;
  swift_beginAccess(a3 + 16, v8, 0, 0);
  result = swift_weakLoadStrong(v5);
  if (result)
  {
    v7 = result;
    sub_110000(a1, a2);
    return swift_release(v7);
  }
  return result;
}

uint64_t sub_10FFF8(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  return sub_10FF88(a1, a2, v2);
}

uint64_t sub_110000(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  char v16;
  void (*v17)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD v23[5];

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BA918);
  __chkstk_darwin(v5);
  v7 = (char *)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0) + 8;
  v8 = type metadata accessor for Link(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0) + 8;
  result = (uint64_t)CurrentValueSubject.value.getter(v23, v12);
  if (LOBYTE(v23[0]) == 1)
  {
    if ((v14 = a2[1], *a2 == 0xD000000000000026) && v14 == 0x800000000030F890
      || (result = _stringCompareWithSmolCheck(_:_:expecting:)(*a2, v14, 0xD000000000000026, 0x800000000030F890, 0), (result & 1) != 0))
    {
      sub_150C8(a1, (uint64_t)v23);
      v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0A50);
      v16 = swift_dynamicCast(v7, v23, v15, v8, 6);
      v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
      if ((v16 & 1) != 0)
      {
        v17(v7, 0, 1, v8);
        v18 = sub_3C56C((uint64_t)v7, (uint64_t)v11, type metadata accessor for Link);
        v19 = OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_libraryItems;
        v20 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_libraryItems);
        __chkstk_darwin(v18);
        *(&v22 - 2) = (uint64_t)v11;
        *((_BYTE *)&v22 - 8) = 0;
        swift_bridgeObjectRetain();
        v21 = sub_3F918((void (*)(uint64_t))sub_118E24, (uint64_t)(&v22 - 4), v20);
        swift_bridgeObjectRelease();
        *(_QWORD *)(v2 + v19) = v21;
        swift_bridgeObjectRelease();
        return sub_145D8((uint64_t)v11, type metadata accessor for Link);
      }
      else
      {
        v17(v7, 1, 1, v8);
        return sub_1459C((uint64_t)v7, &qword_3BA918);
      }
    }
  }
  return result;
}

uint64_t sub_110228(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  _BYTE v12[24];

  v9 = a4 + 16;
  swift_beginAccess(a4 + 16, v12, 0, 0);
  result = swift_weakLoadStrong(v9);
  if (result)
  {
    v11 = result;
    a5(a1, a2, a3);
    return swift_release(v11);
  }
  return result;
}

uint64_t sub_1102AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_110228(a1, a2, a3, v3, (void (*)(uint64_t, uint64_t, uint64_t))sub_1102CC);
}

uint64_t sub_1102CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  int v15;
  void (*v16)(__int128 *, uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  __int128 *v23;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[5];

  v4 = v3;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BA918);
  __chkstk_darwin(v7);
  v9 = (__int128 *)((char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = type metadata accessor for Link(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_150C8(a1, (uint64_t)&v27);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0A50);
  v15 = swift_dynamicCast(v9, &v27, v14, v10, 6);
  v16 = *(void (**)(__int128 *, uint64_t, uint64_t, uint64_t))(v11 + 56);
  if (!v15)
  {
    v16(v9, 1, 1, v10);
    v22 = &qword_3BA918;
    v23 = v9;
    return sub_1459C((uint64_t)v23, v22);
  }
  v16(v9, 0, 1, v10);
  v17 = sub_3C56C((uint64_t)v9, (uint64_t)v13, type metadata accessor for Link);
  v18 = CurrentValueSubject.value.getter(&v27, v17);
  if ((v27 & 1) == 0)
  {
    sub_267BC((uint64_t)&v13[*(int *)(v10 + 36)], (uint64_t)&v27, &qword_3B0C50);
    if (v28)
    {
      sub_F4D8(&v27, (uint64_t)v30);
      sub_150C8((uint64_t)v30, (uint64_t)&v27);
      v29 = a3;
      swift_retain();
      v25 = ActionPerformer.callAsFunction()();
      swift_release(v25);
      sub_23740(&v27);
      __swift_destroy_boxed_opaque_existential_1(v30);
      return sub_145D8((uint64_t)v13, type metadata accessor for Link);
    }
    sub_145D8((uint64_t)v13, type metadata accessor for Link);
    v22 = &qword_3B0C50;
    v23 = &v27;
    return sub_1459C((uint64_t)v23, v22);
  }
  v19 = OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_libraryItems;
  v20 = *(_QWORD *)(v4 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_libraryItems);
  __chkstk_darwin(v18);
  *(&v26 - 2) = (uint64_t)v13;
  *((_BYTE *)&v26 - 8) = 1;
  swift_bridgeObjectRetain();
  v21 = sub_3F918((void (*)(uint64_t))sub_118D70, (uint64_t)(&v26 - 4), v20);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v4 + v19) = v21;
  swift_bridgeObjectRelease();
  return sub_145D8((uint64_t)v13, type metadata accessor for Link);
}

uint64_t (*LibraryPresenter.multiSelectableExtension.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = LibraryPresenter.multiSelectableExtension.getter();
  return sub_110564;
}

uint64_t sub_110564(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  v2 = a1[1];
  v4 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter____lazy_storage___multiSelectableExtension);
  *(_QWORD *)(v2 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter____lazy_storage___multiSelectableExtension) = *a1;
  if ((a2 & 1) == 0)
    return sub_11805C(v4);
  swift_retain();
  sub_11805C(v4);
  return swift_release(v3);
}

uint64_t LibraryPresenter.__allocating_init(asPartOf:with:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  v3 = sub_118330(a1);
  swift_release(a1);
  return v3;
}

uint64_t LibraryPresenter.init(asPartOf:with:)(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_118330(a1);
  swift_release(a1);
  return v2;
}

Swift::Void __swiftcall LibraryPresenter.viewDidLoad()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[3];

  v1 = v0;
  v9[0] = *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_updatedShowsPublisher);
  v2 = swift_allocObject(&unk_381458, 24, 7);
  swift_weakInit(v2 + 16);
  swift_retain();
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4E98);
  v4 = sub_32914(&qword_3B76C8, &qword_3B4E98, (uint64_t)&protocol conformance descriptor for AnyPaginatedPublisher<A, B>);
  v5 = Publisher<>.sink(receiveValue:)(sub_11891C, v2, v3, v4);
  swift_release(v2);
  swift_release(v9[0]);
  v6 = v1 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_subscriptions;
  swift_beginAccess(v1 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_subscriptions, v9, 33, 0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2088);
  v8 = sub_32914(&qword_3B2090, &qword_3B2088, (uint64_t)&protocol conformance descriptor for [A]);
  AnyCancellable.store<A>(in:)(v6, v7, v8);
  swift_endAccess(v9);
  swift_release(v5);
  sub_110EC8();
  sub_111538();
  sub_111730();
  sub_111978();
  sub_111CA0();
  sub_11209C();
}

uint64_t sub_110784(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t Strong;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  Swift::String v36;
  Swift::String v37;
  Swift::String v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _BYTE *v63;
  uint64_t v65;
  _BYTE *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74[3];
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  _BYTE v78[32];
  Swift::String v79;

  v3 = type metadata accessor for PageContent(0);
  __chkstk_darwin(v3);
  v66 = (char *)&v65 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B35D0);
  __chkstk_darwin(v5);
  v65 = (uint64_t)&v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v7);
  v72 = (char *)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
  __chkstk_darwin(v9);
  v70 = (char *)&v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
  __chkstk_darwin(v11);
  v13 = (char *)&v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3740);
  __chkstk_darwin(v14);
  v16 = (char *)&v65 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3BF7E0);
  __chkstk_darwin(v17);
  v19 = (char *)&v65 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0C38);
  __chkstk_darwin(v20);
  v68 = (uint64_t)&v65 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = (int *)type metadata accessor for ModernShelf(0);
  v73 = *((_QWORD *)v22 - 1);
  __chkstk_darwin(v22);
  v24 = (uint64_t *)((char *)&v65 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v25);
  v71 = (uint64_t)&v65 - v26;
  v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8660);
  __chkstk_darwin(v27);
  v29 = (uint64_t *)((char *)&v65 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_beginAccess(a2 + 16, v78, 0, 0);
  v69 = a2 + 16;
  Strong = swift_weakLoadStrong(a2 + 16);
  if (Strong)
  {
    v31 = Strong;
    v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4EB0);
    if ((FRPOutput.hasMore.getter(v32) & 1) != 0)
    {
      static ModernShelf.loadingShelf(id:)(0xD00000000000001BLL, 0x800000000030F710, v29);
      v33 = 0;
    }
    else
    {
      v33 = 1;
    }
    (*(void (**)(_QWORD *, uint64_t, uint64_t, int *))(v73 + 56))(v29, v33, 1, v22);
    v34 = v31 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_recentlyUpdatedHasMoreShelf;
    swift_beginAccess(v31 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_recentlyUpdatedHasMoreShelf, &v75, 33, 0);
    sub_3C454((uint64_t)v29, v34, &qword_3B8660);
    swift_endAccess(&v75);
    swift_release(v31);
  }
  v35 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v67 = 0x800000000030F8C0;
  v79._object = (void *)0x800000000030F8C0;
  v36._object = (void *)0x800000000030AFD0;
  v36._countAndFlagsBits = 0xD000000000000010;
  v37._countAndFlagsBits = 0;
  v37._object = (void *)0xE000000000000000;
  v79._countAndFlagsBits = 0xD000000000000010;
  v38 = NSLocalizedString(_:tableName:bundle:value:comment:)(v36, (Swift::String_optional)0, (NSBundle)v35, v37, v79);

  v39 = type metadata accessor for ActionMenu(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v19, 1, 1, v39);
  v40 = type metadata accessor for Header.PrimaryAction(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v16, 1, 1, v40);
  v41 = type metadata accessor for ArtworkModel(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v13, 1, 1, v41);
  v42 = v68;
  Header.init(title:subtitle:subtitleSymbolName:displaySubtitleAsEyebrow:hasColoredBackground:titleContextMenu:primaryAction:secondaryButtons:artwork:)(v38._countAndFlagsBits, (uint64_t)v38._object, 0, 0, 0, 0, 0, 0, v68, (uint64_t)v19, (uint64_t)v16, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)v13);
  v43 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4EB0);
  FRPOutput.content.getter(v43);
  v44 = sub_2454F0(v74[0]);
  swift_bridgeObjectRelease();
  v45 = type metadata accessor for URL(0);
  v46 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56);
  v47 = (uint64_t)v70;
  v46(v70, 1, 1, v45);
  v48 = type metadata accessor for ImpressionMetrics(0);
  v75 = 0u;
  v76 = 0u;
  v77 = 0;
  v49 = (uint64_t)v72;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 56))(v72, 1, 1, v48);
  v50 = v22[8];
  *((_BYTE *)v24 + v50) = 3;
  v51 = (uint64_t)v24 + v22[9];
  v46((char *)v51, 1, 1, v45);
  *v24 = 0xD000000000000010;
  v24[1] = v67;
  sub_15BD4(v42, (uint64_t)v24 + v22[5], &qword_3B0C38);
  v52 = (char *)v24 + v22[6];
  *(_WORD *)v52 = 24;
  *((_WORD *)v52 + 3) = 256;
  *(_DWORD *)(v52 + 2) = 0;
  *((_QWORD *)v52 + 1) = 1;
  *(_QWORD *)((char *)v24 + v22[7]) = v44;
  sub_3C454(v47, v51, &qword_3B4370);
  *((_BYTE *)v24 + v22[10]) = 1;
  *((_BYTE *)v24 + v22[11]) = 0;
  v53 = (uint64_t)v24 + v22[12];
  if (*((_QWORD *)&v76 + 1))
  {
    sub_F4D8(&v75, v53);
  }
  else
  {
    v54 = (unint64_t)v76;
    *(_OWORD *)v53 = v75;
    *(_OWORD *)(v53 + 16) = v54;
    *(_QWORD *)(v53 + 32) = v77;
  }
  sub_15BD4(v49, (uint64_t)v24 + v22[13], (uint64_t *)&unk_3B8790);
  *((_BYTE *)v24 + v50) = 3;
  v55 = (uint64_t)v24;
  v56 = v71;
  sub_3C56C(v55, v71, type metadata accessor for ModernShelf);
  v57 = v69;
  swift_beginAccess(v69, &v75, 0, 0);
  v58 = swift_weakLoadStrong(v57);
  if (v58)
  {
    v59 = v58;
    v60 = v65;
    sub_14510(v56, v65, type metadata accessor for ModernShelf);
    (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v73 + 56))(v60, 0, 2, v22);
    v61 = v59 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_recentlyUpdatedShelf;
    swift_beginAccess(v59 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_recentlyUpdatedShelf, v74, 33, 0);
    sub_C600C(v60, v61, &qword_3B35D0);
    swift_endAccess(v74);
    swift_beginAccess(v59 + 16, v74, 0, 0);
    v62 = *(_QWORD *)(v59 + 16);
    swift_retain();
    v63 = v66;
    sub_112254(v66);
    CurrentValueSubject.value.setter(v63);
    swift_release(v62);
    sub_1459C(v60, &qword_3B35D0);
    swift_release(v59);
  }
  return sub_145D8(v56, type metadata accessor for ModernShelf);
}

uint64_t sub_110EC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  void (*v28)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t);
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  void (*v56)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  id v72[5];

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2B18);
  __chkstk_darwin(v1);
  v60 = (char *)&v55 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BA8D8);
  __chkstk_darwin(v3);
  v59 = (char *)&v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(0);
  v57 = *(_QWORD *)(v70 - 8);
  v5 = v57;
  __chkstk_darwin(v70);
  v58 = (char *)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4518);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BA8E0);
  v64 = *(_QWORD *)(v61 - 8);
  __chkstk_darwin(v61);
  v12 = (char *)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BA8E8);
  v14 = *(_QWORD *)(v13 - 8);
  v65 = v13;
  v66 = v14;
  __chkstk_darwin(v13);
  v71 = (char *)&v55 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BA8F0);
  v69 = *(_QWORD *)(v67 - 8);
  __chkstk_darwin(v67);
  v62 = v0;
  v63 = (char *)&v55 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = v0;
  v18 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_objectGraph);
  v19 = (void *)objc_opt_self(NSUserDefaults);
  swift_retain();
  v68 = sub_20E104(v18, (uint64_t)objc_msgSend(v19, "standardUserDefaults"), 0);
  swift_release(v18);
  v72[0] = (id)sub_20AD78();
  v72[3] = *(id *)(v17 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_isEditing);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B20D0);
  v21 = sub_32914(&qword_3B2138, &qword_3B20D0, (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
  Publisher<>.removeDuplicates()(v20, v21, &protocol witness table for Bool);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BA8F8);
  v23 = sub_32914(&qword_3BC420, &qword_3BA8F8, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v24 = sub_32914(&qword_3B4648, &qword_3B4518, (uint64_t)&protocol conformance descriptor for Publishers.RemoveDuplicates<A>);
  v25 = v12;
  Publisher.combineLatest<A>(_:)(v10, v22, v7, v23, v24);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v26 = swift_release(v72[0]);
  v27 = v58;
  OS_dispatch_queue.SchedulerTimeType.Stride.init(floatLiteral:)(v26, 0.0);
  v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v29 = (uint64_t)v59;
  v30 = v70;
  v28(v59, 1, 1, v70);
  v31 = sub_327F8(0, (unint64_t *)&qword_3B8710, OS_dispatch_queue_ptr);
  v72[0] = (id)static OS_dispatch_queue.main.getter(v31);
  v32 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  v56 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56);
  v33 = (uint64_t)v60;
  v56(v60, 1, 1, v32);
  v34 = sub_32914(&qword_3BA900, &qword_3BA8E0, (uint64_t)&protocol conformance descriptor for Publishers.CombineLatest<A, B>);
  v55 = sub_E50C0((unint64_t *)&qword_3B2B60, (unint64_t *)&qword_3B8710, OS_dispatch_queue_ptr, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  v35 = v61;
  Publisher.delay<A>(for:tolerance:scheduler:options:)(v27, v29, v72, v33, v61, v31, v34, v55);
  sub_1459C(v33, &qword_3B2B18);

  sub_1459C(v29, &qword_3BA8D8);
  v36 = *(void (**)(char *, uint64_t))(v57 + 8);
  v36(v27, v30);
  v37 = (*(uint64_t (**)(char *, uint64_t))(v64 + 8))(v25, v35);
  v38 = v27;
  v39 = OS_dispatch_queue.SchedulerTimeType.Stride.init(floatLiteral:)(v37, 0.01);
  v72[0] = (id)static OS_dispatch_queue.main.getter(v39);
  v56((char *)v33, 1, 1, v32);
  v40 = sub_32914(&qword_3BA908, &qword_3BA8E8, (uint64_t)&protocol conformance descriptor for Publishers.Delay<A, B>);
  v41 = v63;
  v42 = v27;
  v43 = v65;
  v44 = v71;
  Publisher.debounce<A>(for:scheduler:options:)(v42, v72, v33, v65, v31, v40, v55);
  sub_1459C(v33, &qword_3B2B18);

  v36(v38, v70);
  (*(void (**)(char *, uint64_t))(v66 + 8))(v44, v43);
  v45 = swift_allocObject(&unk_381458, 24, 7);
  v46 = v62;
  swift_weakInit(v45 + 16);
  v47 = swift_allocObject(&unk_3815C0, 32, 7);
  *(_QWORD *)(v47 + 16) = sub_118D20;
  *(_QWORD *)(v47 + 24) = v45;
  v48 = sub_32914(&qword_3BA910, &qword_3BA8F0, (uint64_t)&protocol conformance descriptor for Publishers.Debounce<A, B>);
  v49 = v67;
  v50 = Publisher<>.sink(receiveValue:)(sub_118D4C, v47, v67, v48);
  swift_release(v47);
  (*(void (**)(char *, uint64_t))(v69 + 8))(v41, v49);
  v51 = v46 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_subscriptions;
  swift_beginAccess(v46 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_subscriptions, v72, 33, 0);
  v52 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2088);
  v53 = sub_32914(&qword_3B2090, &qword_3B2088, (uint64_t)&protocol conformance descriptor for [A]);
  AnyCancellable.store<A>(in:)(v51, v52, v53);
  swift_endAccess(v72);
  swift_release(v68);
  return swift_release(v50);
}

uint64_t sub_111538()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t ObjectType;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v18[3];

  v1 = v0;
  v2 = type metadata accessor for ObserverQueue(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v18[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_libraryDataProvider + 8);
  ObjectType = swift_getObjectType();
  if (qword_3B00A0 != -1)
    swift_once(&qword_3B00A0, sub_88A50);
  v18[0] = qword_3B5018;
  v7 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v5 + 200))(v18, ObjectType, v5);
  swift_storeEnumTagMultiPayload(v4, v2, 2);
  v8 = sub_836F4((uint64_t)v4);
  swift_release(v7);
  sub_145D8((uint64_t)v4, type metadata accessor for ObserverQueue);
  v18[0] = v8;
  v9 = swift_allocObject(&unk_381458, 24, 7);
  swift_weakInit(v9 + 16);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4D78);
  v11 = sub_32914(&qword_3B4D88, &qword_3B4D78, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v12 = Publisher<>.sink(receiveValue:)(sub_118D18, v9, v10, v11);
  swift_release(v9);
  swift_release(v18[0]);
  v13 = v1 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_subscriptions;
  swift_beginAccess(v13, v18, 33, 0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2088);
  v15 = sub_32914(&qword_3B2090, &qword_3B2088, (uint64_t)&protocol conformance descriptor for [A]);
  AnyCancellable.store<A>(in:)(v13, v14, v15);
  swift_endAccess(v18);
  return swift_release(v12);
}

uint64_t sub_111730()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  _QWORD v20[3];

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BA8B8);
  v19 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v20[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20[0] = *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_isEditing);
  v5 = swift_allocObject(&unk_381458, 24, 7);
  swift_weakInit(v5 + 16);
  v6 = swift_retain();
  v7 = static Subscribers.Demand.unlimited.getter(v6);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B20D0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B36F0);
  v10 = sub_32914(&qword_3B2138, &qword_3B20D0, (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
  v11 = sub_32914(&qword_3B36F8, &qword_3B36F0, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher<>.flatMap<A>(maxPublishers:_:)(v7, sub_118D08, v5, v8, v9, v10, v11);
  swift_release(v5);
  swift_release(v20[0]);
  v12 = swift_allocObject(&unk_381458, 24, 7);
  swift_weakInit(v12 + 16);
  v13 = sub_32914(&qword_3BA8C0, &qword_3BA8B8, (uint64_t)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
  v14 = Publisher<>.sink(receiveValue:)(sub_118D10, v12, v2, v13);
  swift_release(v12);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v4, v2);
  v15 = v1 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_subscriptions;
  swift_beginAccess(v15, v20, 33, 0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2088);
  v17 = sub_32914(&qword_3B2090, &qword_3B2088, (uint64_t)&protocol conformance descriptor for [A]);
  AnyCancellable.store<A>(in:)(v15, v16, v17);
  swift_endAccess(v20);
  return swift_release(v14);
}

uint64_t sub_111978()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[3];

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BA898);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BA8A0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = static Podcasts.isRecentlyUnfollowedEnabled()(v9);
  if ((result & 1) != 0)
  {
    v11 = v0;
    v35[0] = *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_isEditing);
    v12 = swift_allocObject(&unk_381458, 24, 7);
    swift_weakInit(v12 + 16);
    v13 = swift_retain();
    v31 = static Subscribers.Demand.unlimited.getter(v13);
    v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B20D0);
    v32 = v2;
    v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3628);
    v34 = v6;
    v16 = v15;
    v17 = sub_32914(&qword_3B2138, &qword_3B20D0, (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
    v33 = v5;
    v18 = v17;
    v19 = sub_32914(&qword_3B3638, &qword_3B3628, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
    Publisher<>.flatMap<A>(maxPublishers:_:)(v31, sub_118CF0, v12, v14, v16, v18, v19);
    swift_release(v12);
    swift_release(v35[0]);
    v20 = swift_allocObject(&unk_381458, 24, 7);
    swift_weakInit(v20 + 16);
    v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8660);
    v22 = sub_32914(&qword_3BA8A8, &qword_3BA898, (uint64_t)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
    Publisher.map<A>(_:)(sub_118CF8, v20, v1, v21, v22);
    swift_release(v20);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v4, v1);
    v23 = swift_allocObject(&unk_381458, 24, 7);
    swift_weakInit(v23 + 16);
    v24 = sub_32914(&qword_3BA8B0, &qword_3BA8A0, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
    v25 = v33;
    v26 = Publisher<>.sink(receiveValue:)(sub_118D00, v23, v33, v24);
    swift_release(v23);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v8, v25);
    v27 = v11 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_subscriptions;
    swift_beginAccess(v11 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_subscriptions, v35, 33, 0);
    v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2088);
    v29 = sub_32914(&qword_3B2090, &qword_3B2088, (uint64_t)&protocol conformance descriptor for [A]);
    AnyCancellable.store<A>(in:)(v27, v28, v29);
    swift_endAccess(v35);
    return swift_release(v26);
  }
  return result;
}

uint64_t sub_111CA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v36[2];
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40[3];

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2B18);
  __chkstk_darwin(v1);
  v3 = (char *)v36 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BA838);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36[0] = __swift_instantiateConcreteTypeFromMangledName(&qword_3BA840);
  v37 = *(_QWORD *)(v36[0] - 8);
  __chkstk_darwin(v36[0]);
  v9 = (char *)v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BA848);
  v11 = *(_QWORD *)(v10 - 8);
  v38 = v10;
  v39 = v11;
  __chkstk_darwin(v10);
  v13 = (char *)v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_libraryTipProvider + 24);
  v14 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_libraryTipProvider + 32);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_libraryTipProvider), v15);
  v16 = (void *)dispatch thunk of TipProvider.tips.getter(v15, v14);
  v40[0] = v16;
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BA850);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BA858);
  v19 = sub_32914(&qword_3BA860, &qword_3BA850, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.map<A>(_:)(sub_115E50, 0, v17, v18, v19);
  swift_release(v16);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BA868);
  v21 = sub_32914(&qword_3BA870, &qword_3BA838, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  Publisher.compactMap<A>(_:)(sub_115F1C, 0, v4, v20, v21);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v22 = sub_327F8(0, (unint64_t *)&qword_3B8710, OS_dispatch_queue_ptr);
  v40[0] = (id)static OS_dispatch_queue.main.getter(v22);
  v23 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v3, 1, 1, v23);
  v24 = sub_32914(&qword_3BA878, &qword_3BA840, (uint64_t)&protocol conformance descriptor for Publishers.CompactMap<A, B>);
  v25 = sub_E50C0((unint64_t *)&qword_3B2B60, (unint64_t *)&qword_3B8710, OS_dispatch_queue_ptr, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  v26 = v36[0];
  Publisher.receive<A>(on:options:)(v40, v3, v36[0], v22, v24, v25);
  sub_1459C((uint64_t)v3, &qword_3B2B18);

  (*(void (**)(char *, uint64_t))(v37 + 8))(v9, v26);
  v27 = swift_allocObject(&unk_381458, 24, 7);
  v28 = v36[1];
  swift_weakInit(v27 + 16);
  v29 = sub_32914(&qword_3BA880, &qword_3BA848, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v30 = v38;
  v31 = Publisher<>.sink(receiveValue:)(sub_118CE8, v27, v38, v29);
  swift_release(v27);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v13, v30);
  v32 = v28 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_subscriptions;
  swift_beginAccess(v28 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_subscriptions, v40, 33, 0);
  v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2088);
  v34 = sub_32914(&qword_3B2090, &qword_3B2088, (uint64_t)&protocol conformance descriptor for [A]);
  AnyCancellable.store<A>(in:)(v32, v33, v34);
  swift_endAccess(v40);
  return swift_release(v31);
}

uint64_t sub_11209C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t ObjectType;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v18[3];

  v1 = v0;
  v2 = type metadata accessor for ObserverQueue(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v18[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_libraryDataProvider + 8);
  ObjectType = swift_getObjectType();
  v7 = LibraryDataProviderProtocol.fetchShowCountObserver()(ObjectType, v5);
  swift_storeEnumTagMultiPayload(v4, v2, 2);
  v8 = sub_830E4((uint64_t)v4);
  swift_release(v7);
  sub_145D8((uint64_t)v4, type metadata accessor for ObserverQueue);
  v18[0] = v8;
  v9 = swift_allocObject(&unk_381458, 24, 7);
  swift_weakInit(v9 + 16);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4BB8);
  v11 = sub_32914(&qword_3B4BC0, &qword_3B4BB8, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v12 = Publisher<>.sink(receiveValue:)(sub_118C64, v9, v10, v11);
  swift_release(v9);
  swift_release(v18[0]);
  v13 = v1 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_subscriptions;
  swift_beginAccess(v13, v18, 33, 0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2088);
  v15 = sub_32914(&qword_3B2090, &qword_3B2088, (uint64_t)&protocol conformance descriptor for [A]);
  AnyCancellable.store<A>(in:)(v13, v14, v15);
  swift_endAccess(v18);
  return swift_release(v12);
}

uint64_t sub_112254@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  int v52;
  _BYTE *v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t *v59;
  __n128 v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  _BYTE *v65;
  uint64_t v66;
  id v67;
  char *v68;
  char v69;
  _QWORD *v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  _QWORD *v86;
  unint64_t v87;
  unint64_t v88;
  _QWORD *v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  _QWORD *v119;
  _BYTE *v120;
  uint64_t v121;
  uint64_t *v122;
  __n128 v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  void (*v127)(char *, _QWORD, uint64_t, __n128);
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  _QWORD *v132;
  uint64_t v133;
  void *v134;
  void *v135;
  Swift::String v136;
  Swift::String v137;
  uint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  _QWORD *v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  _BYTE *v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  char *v160;
  unsigned int (*v161)(char *, uint64_t, _QWORD *);
  char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  _QWORD *v186;
  uint64_t v187;
  _BYTE *v188;
  char v189;
  unint64_t v190;
  _QWORD *v191;
  _QWORD *v192;
  uint64_t v193;
  uint64_t v194;
  char v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  char v199[24];
  char v200[24];
  char v201[24];
  char v202[24];
  char v203[24];
  char v204[24];
  char v205;

  v188 = a1;
  v2 = type metadata accessor for ScalarDictionary(0);
  v169 = *(_QWORD *)(v2 - 8);
  v170 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v159 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v168 = (char *)&v159 - v6;
  v7 = type metadata accessor for PageMetrics(0);
  v175 = *(_QWORD *)(v7 - 8);
  v176 = v7;
  __chkstk_darwin(v7);
  v174 = (char *)&v159 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v173 = type metadata accessor for PageID(0);
  v171 = *(_QWORD *)(v173 - 8);
  __chkstk_darwin(v173);
  v182 = (char *)&v159 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v172 = type metadata accessor for ModernPage(0);
  __chkstk_darwin(v172);
  v11 = (char *)&v159 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v183 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B35D0);
  __chkstk_darwin(v183);
  v181 = (uint64_t)&v159 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v167 = (uint64_t)&v159 - v14;
  __chkstk_darwin(v15);
  v178 = (uint64_t)&v159 - v16;
  __chkstk_darwin(v17);
  v185 = (uint64_t)&v159 - v18;
  __chkstk_darwin(v19);
  v184 = (uint64_t)&v159 - v20;
  __chkstk_darwin(v21);
  v177 = (uint64_t)&v159 - v22;
  __chkstk_darwin(v23);
  v25 = (char *)&v159 - v24;
  v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8660);
  __chkstk_darwin(v26);
  v179 = (char *)&v159 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v165 = (uint64_t)&v159 - v29;
  __chkstk_darwin(v30);
  v32 = (char *)&v159 - v31;
  __chkstk_darwin(v33);
  v35 = (char *)&v159 - v34;
  v36 = (_QWORD *)type metadata accessor for ModernShelf(0);
  v37 = *(v36 - 1);
  v186 = v36;
  v187 = v37;
  __chkstk_darwin(v36);
  v180 = (uint64_t)&v159 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v39);
  v166 = (uint64_t)&v159 - v40;
  __chkstk_darwin(v41);
  v43 = (char *)&v159 - v42;
  __chkstk_darwin(v44);
  v46 = (char *)&v159 - v45;
  v47 = type metadata accessor for ExtendedLaunchStatus(0);
  __chkstk_darwin(v47);
  v51 = (char *)&v159 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_isLibraryEmpty);
  if (v52 == 2)
  {
    v53 = v188;
    *v188 = 0;
    v54 = type metadata accessor for PageContent(0);
    return swift_storeEnumTagMultiPayload(v53, v54, 0);
  }
  v56 = v1;
  v162 = v51;
  v163 = v49;
  v164 = v48;
  if ((v52 & 1) != 0)
  {
    v59 = (uint64_t *)(v1 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_hasLoadedContent);
    v60 = swift_beginAccess(v56 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_hasLoadedContent, &v190, 0, 0);
    v61 = *v59;
    v63 = v162;
    v62 = v163;
    v64 = v164;
    (*(void (**)(char *, _QWORD, uint64_t, __n128))(v163 + 104))(v162, enum case for ExtendedLaunchStatus.finishedLoading(_:), v164, v60);
    swift_retain();
    CurrentValueSubject.send(_:)();
    swift_release(v61);
    (*(void (**)(char *, uint64_t))(v62 + 8))(v63, v64);
    v65 = v188;
    *(_QWORD *)v188 = *(_QWORD *)(v56 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_recentlyUnfollowedShowsCount);
    v66 = type metadata accessor for PageContent(0);
    *((_QWORD *)v65 + 1) = 0;
    *((_QWORD *)v65 + 2) = 0;
    return swift_storeEnumTagMultiPayload(v65, v66, 2);
  }
  v160 = v11;
  v205 = 0;
  v57 = v1 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_libraryTipShelf;
  swift_beginAccess(v1 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_libraryTipShelf, v204, 0, 0);
  sub_267BC(v57, (uint64_t)v35, &qword_3B8660);
  v58 = v186;
  v161 = *(unsigned int (**)(char *, uint64_t, _QWORD *))(v187 + 48);
  if (v161(v35, 1, v186) != 1)
  {
    sub_3C56C((uint64_t)v35, (uint64_t)v46, type metadata accessor for ModernShelf);
    v67 = objc_msgSend((id)objc_opt_self(UITraitCollection), "currentTraitCollection");
    v68 = (char *)objc_msgSend(v67, "horizontalSizeClass");

    if (v68 == (_BYTE *)&dword_0 + 2)
    {
      v69 = _stringCompareWithSmolCheck(_:_:expecting:)(0x72616265646973, 0xE700000000000000, 0x726142626174, 0xE600000000000000, 0);
      swift_bridgeObjectRelease();
      v58 = v186;
      if ((v69 & 1) == 0)
      {
        sub_145D8((uint64_t)v46, type metadata accessor for ModernShelf);
        goto LABEL_10;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      v58 = v186;
    }
    v159 = v4;
    sub_14510((uint64_t)v46, (uint64_t)v25, type metadata accessor for ModernShelf);
    (*(void (**)(char *, _QWORD, uint64_t, _QWORD *))(v187 + 56))(v25, 0, 2, v58);
    v71 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3BF7B0);
    Loadable.map<A>(_:)(&v190, sub_192A50, 0, v183, v71);
    v72 = v190;
    sub_644D8(v190);
    v70 = sub_10E28(0, 1, 1, _swiftEmptyArrayStorage);
    v74 = v70[2];
    v73 = v70[3];
    if (v74 >= v73 >> 1)
      v70 = sub_10E28((_QWORD *)(v73 > 1), v74 + 1, 1, v70);
    v70[2] = v74 + 1;
    v70[v74 + 4] = v72;
    sub_64510(v72);
    sub_1459C((uint64_t)v25, &qword_3B35D0);
    sub_145D8((uint64_t)v46, type metadata accessor for ModernShelf);
    v4 = v159;
    v58 = v186;
    goto LABEL_15;
  }
  sub_1459C((uint64_t)v35, &qword_3B8660);
LABEL_10:
  v70 = _swiftEmptyArrayStorage;
LABEL_15:
  v75 = v1;
  v76 = v1 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_recentlyUnfollowedTipShelf;
  swift_beginAccess(v56 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_recentlyUnfollowedTipShelf, v203, 0, 0);
  sub_267BC(v76, (uint64_t)v32, &qword_3B8660);
  if (v161(v32, 1, v58) == 1)
  {
    sub_1459C((uint64_t)v32, &qword_3B8660);
    v77 = v183;
  }
  else
  {
    sub_3C56C((uint64_t)v32, (uint64_t)v43, type metadata accessor for ModernShelf);
    v78 = v177;
    sub_14510((uint64_t)v43, v177, type metadata accessor for ModernShelf);
    (*(void (**)(uint64_t, _QWORD, uint64_t, _QWORD *))(v187 + 56))(v78, 0, 2, v58);
    v79 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3BF7B0);
    v77 = v183;
    Loadable.map<A>(_:)(&v190, sub_192A50, 0, v183, v79);
    v80 = v190;
    sub_644D8(v190);
    if ((swift_isUniquelyReferenced_nonNull_native(v70) & 1) == 0)
      v70 = sub_10E28(0, v70[2] + 1, 1, v70);
    v82 = v70[2];
    v81 = v70[3];
    if (v82 >= v81 >> 1)
      v70 = sub_10E28((_QWORD *)(v81 > 1), v82 + 1, 1, v70);
    v70[2] = v82 + 1;
    v70[v82 + 4] = v80;
    sub_64510(v80);
    sub_1459C(v177, &qword_3B35D0);
    sub_145D8((uint64_t)v43, type metadata accessor for ModernShelf);
    v58 = v186;
  }
  v83 = v75 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_linksShelf;
  swift_beginAccess(v75 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_linksShelf, v202, 0, 0);
  sub_267BC(v83, v184, &qword_3B35D0);
  v84 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3BF7B0);
  Loadable.map<A>(_:)(&v190, sub_192A50, 0, v77, v84);
  v85 = v190;
  sub_644D8(v190);
  v86 = _swiftEmptyArrayStorage;
  if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
    v86 = sub_10E28(0, _swiftEmptyArrayStorage[2] + 1, 1, _swiftEmptyArrayStorage);
  v88 = v86[2];
  v87 = v86[3];
  v186 = v86;
  if (v88 >= v87 >> 1)
    v186 = sub_10E28((_QWORD *)(v87 > 1), v88 + 1, 1, v186);
  v89 = v186;
  v186[2] = v88 + 1;
  v89[v88 + 4] = v85;
  sub_644D8(v85);
  if ((swift_isUniquelyReferenced_nonNull_native(v70) & 1) == 0)
    v70 = sub_10E28(0, v70[2] + 1, 1, v70);
  v91 = v70[2];
  v90 = v70[3];
  if (v91 >= v90 >> 1)
    v70 = sub_10E28((_QWORD *)(v90 > 1), v91 + 1, 1, v70);
  v70[2] = v91 + 1;
  v70[v91 + 4] = v85;
  sub_64510(v85);
  sub_1459C(v184, &qword_3B35D0);
  v92 = v75 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_stationsShelf;
  swift_beginAccess(v75 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_stationsShelf, v201, 0, 0);
  sub_267BC(v92, v185, &qword_3B35D0);
  Loadable.map<A>(_:)(&v190, sub_192A50, 0, v77, v84);
  v93 = v190;
  sub_644D8(v190);
  if ((swift_isUniquelyReferenced_nonNull_native(v70) & 1) == 0)
    v70 = sub_10E28(0, v70[2] + 1, 1, v70);
  v95 = v70[2];
  v94 = v70[3];
  if (v95 >= v94 >> 1)
    v70 = sub_10E28((_QWORD *)(v94 > 1), v95 + 1, 1, v70);
  v70[2] = v95 + 1;
  v70[v95 + 4] = v93;
  sub_64510(v93);
  v96 = sub_1459C(v185, &qword_3B35D0);
  CurrentValueSubject.value.getter(&v190, v96);
  if ((v190 & 1) == 0)
  {
    v97 = v75 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_recentlyUpdatedShelf;
    swift_beginAccess(v75 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_recentlyUpdatedShelf, v200, 0, 0);
    sub_267BC(v97, v178, &qword_3B35D0);
    Loadable.map<A>(_:)(&v190, sub_192A50, 0, v77, v84);
    v98 = v190;
    sub_644D8(v190);
    if ((swift_isUniquelyReferenced_nonNull_native(v70) & 1) == 0)
      v70 = sub_10E28(0, v70[2] + 1, 1, v70);
    v100 = v70[2];
    v99 = v70[3];
    if (v100 >= v99 >> 1)
      v70 = sub_10E28((_QWORD *)(v99 > 1), v100 + 1, 1, v70);
    v70[2] = v100 + 1;
    v70[v100 + 4] = v98;
    sub_64510(v98);
    sub_1459C(v178, &qword_3B35D0);
    v101 = v75 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_recentlyUpdatedHasMoreShelf;
    swift_beginAccess(v75 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_recentlyUpdatedHasMoreShelf, v199, 0, 0);
    v102 = v165;
    sub_267BC(v101, v165, &qword_3B8660);
    if (v161((char *)v102, 1, v58) == 1)
    {
      sub_1459C(v102, &qword_3B8660);
    }
    else
    {
      v103 = v102;
      v104 = v166;
      sub_3C56C(v103, v166, type metadata accessor for ModernShelf);
      v105 = v104;
      v106 = v167;
      sub_14510(v105, v167, type metadata accessor for ModernShelf);
      (*(void (**)(uint64_t, _QWORD, uint64_t, _QWORD *))(v187 + 56))(v106, 0, 2, v58);
      Loadable.map<A>(_:)(&v190, sub_192A50, 0, v77, v84);
      v107 = v190;
      sub_644D8(v190);
      if ((swift_isUniquelyReferenced_nonNull_native(v70) & 1) == 0)
        v70 = sub_10E28(0, v70[2] + 1, 1, v70);
      v109 = v70[2];
      v108 = v70[3];
      if (v109 >= v108 >> 1)
        v70 = sub_10E28((_QWORD *)(v108 > 1), v109 + 1, 1, v70);
      v70[2] = v109 + 1;
      v70[v109 + 4] = v107;
      sub_64510(v107);
      sub_1459C(v167, &qword_3B35D0);
      sub_145D8(v166, type metadata accessor for ModernShelf);
    }
  }
  v110 = (uint64_t)v179;
  v111 = v75 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_recentlyUnfollowedLinkShelf;
  swift_beginAccess(v75 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_recentlyUnfollowedLinkShelf, &v198, 0, 0);
  sub_267BC(v111, v110, &qword_3B8660);
  if (v161((char *)v110, 1, v58) == 1)
  {
    sub_1459C(v110, &qword_3B8660);
  }
  else
  {
    v112 = v110;
    v113 = v180;
    sub_3C56C(v112, v180, type metadata accessor for ModernShelf);
    v114 = v113;
    v115 = v181;
    sub_14510(v114, v181, type metadata accessor for ModernShelf);
    (*(void (**)(uint64_t, _QWORD, uint64_t, _QWORD *))(v187 + 56))(v115, 0, 2, v58);
    Loadable.map<A>(_:)(&v190, sub_192A50, 0, v77, v84);
    v116 = v190;
    sub_644D8(v190);
    if ((swift_isUniquelyReferenced_nonNull_native(v70) & 1) == 0)
      v70 = sub_10E28(0, v70[2] + 1, 1, v70);
    v118 = v70[2];
    v117 = v70[3];
    if (v118 >= v117 >> 1)
      v70 = sub_10E28((_QWORD *)(v117 > 1), v118 + 1, 1, v70);
    v70[2] = v118 + 1;
    v70[v118 + 4] = v116;
    sub_64510(v116);
    sub_1459C(v181, &qword_3B35D0);
    sub_145D8(v180, type metadata accessor for ModernShelf);
  }
  LOBYTE(v190) = v205;
  v119 = v186;
  v191 = v186;
  v192 = v70;
  if ((ModernShelfListBuilder.areAnyImportantShelvesStillLoading.getter() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v120 = v188;
    *v188 = 0;
    v121 = type metadata accessor for PageContent(0);
    return swift_storeEnumTagMultiPayload(v120, v121, 0);
  }
  else
  {
    v122 = (uint64_t *)(v75 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_hasLoadedContent);
    v123 = swift_beginAccess(v75 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_hasLoadedContent, &v197, 0, 0);
    v124 = *v122;
    v126 = v162;
    v125 = v163;
    v127 = *(void (**)(char *, _QWORD, uint64_t, __n128))(v163 + 104);
    v186 = v119;
    v128 = v164;
    v127(v162, enum case for ExtendedLaunchStatus.finishedLoading(_:), v164, v123);
    swift_retain();
    CurrentValueSubject.send(_:)();
    swift_release(v124);
    v129 = (*(uint64_t (**)(char *, uint64_t))(v125 + 8))(v126, v128);
    v130 = static MetricsPageType.landing.getter(v129);
    v132 = v131;
    v133 = ((uint64_t (*)(void))static MetricsPageID.library.getter)();
    v135 = v134;
    v190 = v130;
    v191 = v132;
    v136._countAndFlagsBits = 95;
    v136._object = (void *)0xE100000000000000;
    String.append(_:)(v136);
    v137._countAndFlagsBits = v133;
    v137._object = v135;
    String.append(_:)(v137);
    swift_bridgeObjectRelease();
    v138 = PageID.init(with:)(v190, v191);
    v139 = static MetricsPageID.library.getter(v138);
    v141 = v140;
    v142 = static MetricsPageType.landing.getter(v139);
    v190 = v139;
    v191 = v141;
    v192 = (_QWORD *)v142;
    v193 = v143;
    v194 = 0;
    v195 = 0;
    v196 = 0;
    v144 = v168;
    ScalarDictionary.init()(v142);
    v145 = sub_C97A8((uint64_t)_swiftEmptyArrayStorage);
    v146 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B89A0);
    v147 = type metadata accessor for PageMetrics.Instruction(0);
    v148 = swift_allocObject(v146, ((*(unsigned __int8 *)(*(_QWORD *)(v147 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v147 - 8) + 80))+ 2 * *(_QWORD *)(*(_QWORD *)(v147 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v147 - 8) + 80) | 7);
    *(_OWORD *)(v148 + 16) = xmmword_2EA080;
    v189 = 0;
    PageMetrics.Instruction.init(eventType:)(&v189);
    v189 = 1;
    PageMetrics.Instruction.init(eventType:)(&v189);
    v149 = MetricsPageFields.metricsFields.getter();
    v151 = v169;
    v150 = v170;
    (*(void (**)(char *, char *, uint64_t))(v169 + 16))(v4, v144, v170);
    v152 = v174;
    PageMetrics.init(instructions:pageFields:custom:clickLocationFields:)(v148, v149, v4, v145);
    (*(void (**)(char *, uint64_t))(v151 + 8))(v144, v150);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    LOBYTE(v190) = v205;
    v191 = v186;
    v192 = v70;
    v153 = ModernShelfListBuilder.buildList()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v154 = (uint64_t)v160;
    (*(void (**)(char *, char *, uint64_t))(v171 + 32))(v160, v182, v173);
    v155 = v172;
    (*(void (**)(uint64_t, char *, uint64_t))(v175 + 32))(v154 + *(int *)(v172 + 20), v152, v176);
    *(_QWORD *)(v154 + *(int *)(v155 + 24)) = v153;
    __swift_instantiateConcreteTypeFromMangledName(&qword_3B89B0);
    v156 = v188;
    v157 = sub_14510(v154, (uint64_t)v188, type metadata accessor for ModernPage);
    static PageRenderContentTypes.unspecified.getter(v157);
    v158 = type metadata accessor for PageContent(0);
    swift_storeEnumTagMultiPayload(v156, v158, 3);
    return sub_145D8(v154, type metadata accessor for ModernPage);
  }
}

uint64_t sub_1133E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t *v12;
  _BYTE v13[24];
  _BYTE v14[24];
  _BYTE v15[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v15, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  if (Strong)
  {
    v3 = Strong;
    v4 = *(_QWORD *)(Strong + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_isEditing);
    swift_retain();
    swift_release(v3);
    v14[0] = 0;
    CurrentValueSubject.send(_:)();
    swift_release(v4);
  }
  swift_beginAccess(v1, v14, 0, 0);
  v5 = swift_weakLoadStrong(v1);
  if (v5)
  {
    v6 = v5;
    sub_10D50C(v5);
    swift_release(v6);
  }
  swift_beginAccess(v1, v13, 0, 0);
  result = swift_weakLoadStrong(v1);
  if (result)
  {
    v8 = result;
    v9 = *(_QWORD *)(result + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_objectGraph);
    v10 = (void *)objc_opt_self(NSUserDefaults);
    swift_retain();
    v11 = sub_20E104(v9, (uint64_t)objc_msgSend(v10, "standardUserDefaults"), 0);
    swift_release(v9);
    v12 = (uint64_t *)swift_bridgeObjectRetain();
    sub_20CB6C(v12);
    swift_release(v8);
    swift_release(v11);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_113548@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  id v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  id v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  int *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t object;
  uint64_t countAndFlagsBits;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE v50[40];
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  Swift::String v54;
  Swift::String v55;
  Swift::String v56;
  Swift::String v57;

  v48 = a1;
  v47 = type metadata accessor for ActionMenu.Item(0);
  __chkstk_darwin(v47);
  v3 = (unint64_t *)((char *)&object - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
  __chkstk_darwin(v4);
  v46 = (uint64_t)&object - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v49 = (uint64_t)&object - v7;
  v8 = v1 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_libraryActionController;
  v9 = swift_allocObject(&unk_381458, 24, 7);
  swift_weakInit(v9 + 16);
  sub_150C8(v8, (uint64_t)&v51);
  v10 = swift_allocObject(&unk_381598, 64, 7);
  sub_F4D8(&v51, v10 + 16);
  *(_QWORD *)(v10 + 56) = v9;
  v11 = (void *)objc_opt_self(NSBundle);
  swift_retain();
  v12 = objc_msgSend(v11, "mainBundle");
  v54._object = (void *)0xE000000000000000;
  v13._countAndFlagsBits = 0xD000000000000011;
  v13._object = (void *)0x800000000030B0B0;
  v14._countAndFlagsBits = 0;
  v14._object = (void *)0xE000000000000000;
  v54._countAndFlagsBits = 0;
  v15 = NSLocalizedString(_:tableName:bundle:value:comment:)(v13, (Swift::String_optional)0, (NSBundle)v12, v14, v54);
  object = (unint64_t)v15._object;
  countAndFlagsBits = v15._countAndFlagsBits;

  v16 = objc_msgSend(v11, "mainBundle");
  v55._object = (void *)0xE000000000000000;
  v17._countAndFlagsBits = 0x425F574F4C4C4F46;
  v17._object = (void *)0xED00004E4F545455;
  v18._countAndFlagsBits = 0;
  v18._object = (void *)0xE000000000000000;
  v55._countAndFlagsBits = 0;
  v19 = NSLocalizedString(_:tableName:bundle:value:comment:)(v17, (Swift::String_optional)0, (NSBundle)v16, v18, v55);

  v20 = objc_msgSend(v11, "mainBundle");
  v21._countAndFlagsBits = 0xD000000000000017;
  v56._object = (void *)0xE000000000000000;
  v21._object = (void *)0x800000000030B0D0;
  v22._countAndFlagsBits = 0;
  v22._object = (void *)0xE000000000000000;
  v56._countAndFlagsBits = 0;
  v23 = NSLocalizedString(_:tableName:bundle:value:comment:)(v21, (Swift::String_optional)0, (NSBundle)v20, v22, v56);

  v24 = type metadata accessor for TextFieldAction(0);
  swift_allocObject(v24, *(unsigned int *)(v24 + 48), *(unsigned __int16 *)(v24 + 52));
  v25 = sub_E3210(countAndFlagsBits, object, 0, 0, v19._countAndFlagsBits, (uint64_t)v19._object, v23._countAndFlagsBits, (uint64_t)v23._object, 0, 0, 1u, 1, 0x20u, (uint64_t)sub_118CD4, v10);
  swift_release(v9);
  swift_release(v10);
  v26 = objc_msgSend(v11, "mainBundle");
  v57._object = (void *)0xE000000000000000;
  v27._countAndFlagsBits = 0xD000000000000011;
  v27._object = (void *)0x800000000030B0B0;
  v28._countAndFlagsBits = 0;
  v28._object = (void *)0xE000000000000000;
  v57._countAndFlagsBits = 0;
  v29 = NSLocalizedString(_:tableName:bundle:value:comment:)(v27, (Swift::String_optional)0, (NSBundle)v26, v28, v57);
  object = v29._countAndFlagsBits;

  v30 = type metadata accessor for ArtworkModel(0);
  v31 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56);
  v32 = v49;
  v31(v49, 1, 1, v30);
  v52 = v24;
  v53 = sub_F1C0(&qword_3B2810, (void (*)(uint64_t))type metadata accessor for TextFieldAction, (uint64_t)&protocol conformance descriptor for Action);
  countAndFlagsBits = v25;
  *(_QWORD *)&v51 = v25;
  swift_retain();
  v33 = _s8ShelfKit10ActionMenuV2IDVAEycfC_0();
  v35 = v34;
  v36 = v46;
  sub_267BC(v32, v46, &qword_3BEB70);
  sub_267BC((uint64_t)&v51, (uint64_t)v50, &qword_3B0C50);
  v37 = (int *)v47;
  v38 = (uint64_t)v3 + *(int *)(v47 + 24);
  v31(v38, 1, 1, v30);
  v39 = v37[7];
  *((_BYTE *)v3 + v39) = 2;
  v40 = (uint64_t)v3 + v37[9];
  *(_QWORD *)(v40 + 32) = 0;
  *(_OWORD *)v40 = 0u;
  *(_OWORD *)(v40 + 16) = 0u;
  *v3 = v33;
  v3[1] = v35;
  v3[2] = object;
  v3[3] = (unint64_t)v29._object;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_3C454(v36, v38, &qword_3BEB70);
  *((_BYTE *)v3 + v39) = 2;
  *((_BYTE *)v3 + v37[8]) = 1;
  sub_3C454((uint64_t)v50, v40, &qword_3B0C50);
  v41 = v48;
  sub_3C56C((uint64_t)v3, v48, type metadata accessor for ActionMenu.Item);
  v42 = type metadata accessor for ActionMenu.Child(0);
  swift_storeEnumTagMultiPayload(v41, v42, 0);
  swift_release(countAndFlagsBits);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1459C(v49, &qword_3BEB70);
  return sub_1459C((uint64_t)&v51, &qword_3B0C50);
}

uint64_t sub_113A44@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  id v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  id v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  int *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  void *v43;
  unint64_t object;
  uint64_t countAndFlagsBits;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE v50[40];
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  Swift::String v54;
  Swift::String v55;
  Swift::String v56;
  Swift::String v57;

  v48 = a1;
  v47 = type metadata accessor for ActionMenu.Item(0);
  __chkstk_darwin(v47);
  v3 = (unint64_t *)((char *)&v42 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
  __chkstk_darwin(v4);
  v46 = (uint64_t)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v49 = (uint64_t)&v42 - v7;
  v8 = (void *)objc_opt_self(NSBundle);
  v9 = objc_msgSend(v8, "mainBundle");
  v54._object = (void *)0xE000000000000000;
  v10._countAndFlagsBits = 0x544154535F57454ELL;
  v10._object = (void *)0xEB000000004E4F49;
  v11._countAndFlagsBits = 0;
  v11._object = (void *)0xE000000000000000;
  v54._countAndFlagsBits = 0;
  v12 = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, (Swift::String_optional)0, (NSBundle)v9, v11, v54);
  object = (unint64_t)v12._object;
  countAndFlagsBits = v12._countAndFlagsBits;

  v13 = objc_msgSend(v8, "mainBundle");
  v55._object = (void *)0xE000000000000000;
  v14._countAndFlagsBits = 0x4154535F45564153;
  v14._object = (void *)0xEC0000004E4F4954;
  v15._countAndFlagsBits = 0;
  v15._object = (void *)0xE000000000000000;
  v55._countAndFlagsBits = 0;
  v16 = NSLocalizedString(_:tableName:bundle:value:comment:)(v14, (Swift::String_optional)0, (NSBundle)v13, v15, v55);
  v43 = v16._object;

  v17 = objc_msgSend(v8, "mainBundle");
  v56._object = (void *)0xE000000000000000;
  v18._object = (void *)0x800000000030F820;
  v18._countAndFlagsBits = 0xD00000000000001DLL;
  v19._countAndFlagsBits = 0;
  v19._object = (void *)0xE000000000000000;
  v56._countAndFlagsBits = 0;
  v20 = NSLocalizedString(_:tableName:bundle:value:comment:)(v18, (Swift::String_optional)0, (NSBundle)v17, v19, v56);

  sub_150C8(v1 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_libraryActionController, (uint64_t)&v51);
  v21 = swift_allocObject(&unk_381570, 56, 7);
  sub_F4D8(&v51, v21 + 16);
  v22 = type metadata accessor for TextFieldAction(0);
  swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
  v23 = sub_E3210(countAndFlagsBits, object, 0, 0, v16._countAndFlagsBits, (uint64_t)v43, v20._countAndFlagsBits, (uint64_t)v20._object, 0, 0, 1u, 0, 0x20u, (uint64_t)sub_118CA0, v21);
  swift_release(v21);
  v24 = objc_msgSend(v8, "mainBundle");
  v57._object = (void *)0xE000000000000000;
  v25._countAndFlagsBits = 0x544154535F57454ELL;
  v25._object = (void *)0xEB000000004E4F49;
  v26._countAndFlagsBits = 0;
  v26._object = (void *)0xE000000000000000;
  v57._countAndFlagsBits = 0;
  v27 = NSLocalizedString(_:tableName:bundle:value:comment:)(v25, (Swift::String_optional)0, (NSBundle)v24, v26, v57);
  object = v27._countAndFlagsBits;

  v28 = type metadata accessor for ArtworkModel(0);
  v29 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56);
  v30 = v49;
  v29(v49, 1, 1, v28);
  v52 = v22;
  v53 = sub_F1C0(&qword_3B2810, (void (*)(uint64_t))type metadata accessor for TextFieldAction, (uint64_t)&protocol conformance descriptor for Action);
  countAndFlagsBits = v23;
  *(_QWORD *)&v51 = v23;
  swift_retain();
  v31 = _s8ShelfKit10ActionMenuV2IDVAEycfC_0();
  v33 = v32;
  v34 = v46;
  sub_267BC(v30, v46, &qword_3BEB70);
  sub_267BC((uint64_t)&v51, (uint64_t)v50, &qword_3B0C50);
  v35 = (int *)v47;
  v36 = (uint64_t)v3 + *(int *)(v47 + 24);
  v29(v36, 1, 1, v28);
  v37 = v35[7];
  *((_BYTE *)v3 + v37) = 2;
  v38 = (uint64_t)v3 + v35[9];
  *(_QWORD *)(v38 + 32) = 0;
  *(_OWORD *)v38 = 0u;
  *(_OWORD *)(v38 + 16) = 0u;
  *v3 = v31;
  v3[1] = v33;
  v3[2] = object;
  v3[3] = (unint64_t)v27._object;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_3C454(v34, v36, &qword_3BEB70);
  *((_BYTE *)v3 + v37) = 2;
  *((_BYTE *)v3 + v35[8]) = 1;
  sub_3C454((uint64_t)v50, v38, &qword_3B0C50);
  v39 = v48;
  sub_3C56C((uint64_t)v3, v48, type metadata accessor for ActionMenu.Item);
  v40 = type metadata accessor for ActionMenu.Child(0);
  swift_storeEnumTagMultiPayload(v39, v40, 0);
  swift_release(countAndFlagsBits);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1459C(v49, &qword_3BEB70);
  return sub_1459C((uint64_t)&v51, &qword_3B0C50);
}

uint64_t sub_113EF4(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t Strong;
  uint64_t v25;
  uint64_t v26;
  _QWORD v28[5];
  _BYTE v29[24];

  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
  __chkstk_darwin(v8);
  v10 = (char *)v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)v28 - v12;
  v14 = type metadata accessor for URL(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a2)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v15 + 56))(v13, 1, 1, v14, v16);
    goto LABEL_5;
  }
  swift_bridgeObjectRetain();
  URL.init(string:)(a1, a2);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
LABEL_5:
    sub_1459C((uint64_t)v13, &qword_3B4370);
    return 0;
  }
  v19 = a4 + 16;
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v13, v14);
  v20 = a3[3];
  v21 = a3[4];
  __swift_project_boxed_opaque_existential_1(a3, v20);
  (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v10, v18, v14);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v10, 0, 1, v14);
  v22 = LibraryActionControllerProtocol.subscribe(feedUrl:adamId:location:explicit:displaySuccessHUD:)((uint64_t)v10, 0, 1, 0, 0, 0, 1, v20, v21);
  sub_1459C((uint64_t)v10, &qword_3B4370);
  v23 = swift_allocObject(&unk_381458, 24, 7);
  swift_beginAccess(v19, v29, 0, 0);
  Strong = swift_weakLoadStrong(v19);
  swift_weakInit(v23 + 16);
  swift_release(Strong);
  v25 = sub_327F8(0, (unint64_t *)&qword_3B8710, OS_dispatch_queue_ptr);
  v26 = static OS_dispatch_queue.main.getter(v25);
  v28[3] = v25;
  v28[4] = &protocol witness table for OS_dispatch_queue;
  v28[0] = v26;
  Promise.then(perform:orCatchError:on:)(sub_118CE0, v23, sub_114274, 0, v28);
  swift_release(v22);
  swift_release(v23);
  __swift_destroy_boxed_opaque_existential_1(v28);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  return 0;
}

uint64_t sub_1141A4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[24];
  _BYTE v10[24];

  v3 = type metadata accessor for PageContent(0);
  __chkstk_darwin(v3);
  v5 = &v9[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  a2 += 16;
  swift_beginAccess(a2, v10, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (result)
  {
    v7 = result;
    swift_beginAccess(result + 16, v9, 0, 0);
    v8 = *(_QWORD *)(v7 + 16);
    swift_retain();
    sub_112254(v5);
    CurrentValueSubject.value.setter(v5);
    swift_release(v7);
    return swift_release(v8);
  }
  return result;
}

uint64_t sub_114274(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint8_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint8_t *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.rssFeedUpdater.getter(v4);
  swift_errorRetain(a1);
  v7 = swift_errorRetain(a1);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = swift_slowAlloc(12, -1);
    v17 = v2;
    v11 = (uint8_t *)v10;
    v12 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v11 = 138412290;
    swift_errorRetain(a1);
    v13 = _swift_stdlib_bridgeErrorToNSError(a1);
    v18 = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19);
    *v12 = v13;
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl(&dword_0, v8, v9, "unable to add podcast: %@", v11, 0xCu);
    v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8E70);
    swift_arrayDestroy(v12, 1, v14);
    swift_slowDealloc(v12, -1, -1);
    v15 = v11;
    v2 = v17;
    swift_slowDealloc(v15, -1, -1);
  }
  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
}

uint64_t sub_114434(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v28[13];
  __int16 v29;
  unsigned __int8 v30;

  v6 = type metadata accessor for ActionMetrics(0);
  __chkstk_darwin(v6);
  v8 = &v28[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for FlowDestination(0);
  v10 = __chkstk_darwin(v9);
  v12 = &v28[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (!a2)
    return 0;
  if (String.count.getter(a1, a2, v10) < 1)
    return 0;
  v13 = a3[3];
  v14 = a3[4];
  __swift_project_boxed_opaque_existential_1(a3, v13);
  v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 256))(a1, a2, v13, v14);
  if (!v15)
    return 0;
  v16 = (_QWORD *)v15;
  v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3BC560);
  v18 = swift_allocObject(v17, 112, 7);
  *(_OWORD *)(v18 + 16) = xmmword_2EA080;
  v19 = type metadata accessor for FlowAction(0);
  v30 = 1;
  v20 = sub_59080(v16, &v30, 0);
  *(_QWORD *)(v18 + 56) = v19;
  v21 = sub_F1C0((unint64_t *)&qword_3B0C40, (void (*)(uint64_t))type metadata accessor for FlowAction, (uint64_t)&protocol conformance descriptor for Action);
  *(_QWORD *)(v18 + 64) = v21;
  *(_QWORD *)(v18 + 32) = v20;
  v22 = v16[3];
  *v12 = v16[2];
  v12[1] = v22;
  swift_storeEnumTagMultiPayload(v12, v9, 14);
  v29 = 0;
  v23 = swift_bridgeObjectRetain();
  static ActionMetrics.notInstrumented.getter(v23);
  swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
  v24 = FlowAction.init(_:id:title:presentationContext:animationBehavior:presentationStyle:destinationPageHeader:actionMetrics:)((uint64_t)v12, 0, 0, 0, 0, (char *)&v29 + 1, 0, 48, (char *)&v29, (uint64_t)v8);
  *(_QWORD *)(v18 + 96) = v19;
  *(_QWORD *)(v18 + 104) = v21;
  *(_QWORD *)(v18 + 72) = v24;
  v25 = type metadata accessor for CompoundAction(0);
  swift_allocObject(v25, *(unsigned int *)(v25 + 48), *(unsigned __int16 *)(v25 + 52));
  v26 = CompoundAction.init(title:actions:presentationStyle:)(0, 0, v18, 0);
  swift_release(v16);
  return v26;
}

uint64_t sub_114674(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  char v7[24];
  _BYTE v8[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v8, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  if (Strong)
  {
    v3 = Strong;
    v4 = *(_QWORD *)(Strong + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_isEditing);
    swift_retain();
    swift_release(v3);
    v7[0] = 1;
    CurrentValueSubject.send(_:)();
    swift_release(v4);
  }
  swift_beginAccess(v1, v7, 0, 0);
  result = swift_weakLoadStrong(v1);
  if (result)
  {
    v6 = result;
    sub_10D50C(result);
    return swift_release(v6);
  }
  return result;
}

uint64_t sub_11472C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _BYTE *v60;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  _QWORD *v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BA918);
  __chkstk_darwin(v3);
  v5 = (uint64_t *)((char *)&v62 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = type metadata accessor for Link(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v75 = (uint64_t *)((char *)&v62 - v11);
  v12 = type metadata accessor for TabMenu.Item(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v62 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for PageContent(0);
  __chkstk_darwin(v16);
  v69 = (char *)&v62 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B35D0);
  __chkstk_darwin(v18);
  v68 = (uint64_t)&v62 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v20);
  v66 = (char *)&v62 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
  __chkstk_darwin(v22);
  v64 = (char *)&v62 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0C38);
  __chkstk_darwin(v24);
  v63 = (char *)&v62 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = type metadata accessor for ModernShelf(0);
  v65 = *(_QWORD *)(v72 - 8);
  __chkstk_darwin(v72);
  v71 = (char *)&v62 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v67 = (uint64_t)&v62 - v28;
  v29 = *(_QWORD *)(a1 + 16);
  v70 = v1;
  if (v29)
  {
    v30 = a1 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
    v31 = *(_QWORD *)(v13 + 72);
    v62 = a1;
    swift_bridgeObjectRetain();
    v32 = _swiftEmptyArrayStorage;
    v73 = v9;
    v74 = v6;
    do
    {
      sub_14510(v30, (uint64_t)v15, type metadata accessor for TabMenu.Item);
      static Link.libraryLink(from:)((uint64_t)v15, v5);
      sub_145D8((uint64_t)v15, type metadata accessor for TabMenu.Item);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
      {
        sub_1459C((uint64_t)v5, &qword_3BA918);
      }
      else
      {
        v33 = v75;
        sub_3C56C((uint64_t)v5, (uint64_t)v75, type metadata accessor for Link);
        sub_3C56C((uint64_t)v33, (uint64_t)v9, type metadata accessor for Link);
        if ((swift_isUniquelyReferenced_nonNull_native(v32) & 1) == 0)
          v32 = (_QWORD *)sub_11200(0, v32[2] + 1, 1, (unint64_t)v32);
        v35 = v32[2];
        v34 = v32[3];
        if (v35 >= v34 >> 1)
          v32 = (_QWORD *)sub_11200(v34 > 1, v35 + 1, 1, (unint64_t)v32);
        v32[2] = v35 + 1;
        v9 = v73;
        sub_3C56C((uint64_t)v73, (uint64_t)v32+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v35, type metadata accessor for Link);
        v6 = v74;
      }
      v30 += v31;
      --v29;
    }
    while (v29);
    swift_bridgeObjectRelease();
  }
  else
  {
    v32 = _swiftEmptyArrayStorage;
  }
  v36 = type metadata accessor for Header(0);
  v37 = (uint64_t)v63;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v63, 1, 1, v36);
  v75 = sub_245AA8((uint64_t)v32);
  swift_bridgeObjectRelease();
  v38 = type metadata accessor for URL(0);
  v39 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56);
  v40 = (uint64_t)v64;
  v41 = v39(v64, 1, 1, v38);
  v78 = 0;
  v76 = 0u;
  v77 = 0u;
  v42 = static MetricsTargetType.swoosh.getter(v41);
  v43 = (uint64_t)v66;
  static ImpressionMetrics.shelf(id:idType:uniqueID:impressionType:name:)(0x736B6E694CLL, 0xE500000000000000, 0, 0, 0xD000000000000026, 0x800000000030F890, v42, v44, 0, 0);
  swift_bridgeObjectRelease();
  v45 = type metadata accessor for ImpressionMetrics(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v43, 0, 1, v45);
  v47 = v71;
  v46 = (int *)v72;
  v48 = *(int *)(v72 + 32);
  v71[v48] = 3;
  v49 = (uint64_t)v47 + v46[9];
  v39((char *)v49, 1, 1, v38);
  *v47 = 0xD000000000000026;
  v47[1] = 0x800000000030F890;
  sub_15BD4(v37, (uint64_t)v47 + v46[5], &qword_3B0C38);
  v50 = (char *)v47 + v46[6];
  *(_WORD *)v50 = 18;
  *((_WORD *)v50 + 3) = 256;
  *(_DWORD *)(v50 + 2) = 0;
  *((_QWORD *)v50 + 1) = 1;
  *(_QWORD *)((char *)v47 + v46[7]) = v75;
  sub_3C454(v40, v49, &qword_3B4370);
  *((_BYTE *)v47 + v46[10]) = 1;
  *((_BYTE *)v47 + v46[11]) = 0;
  v51 = (uint64_t)v47 + v46[12];
  if (*((_QWORD *)&v77 + 1))
  {
    sub_F4D8(&v76, v51);
  }
  else
  {
    v52 = (unint64_t)v77;
    *(_OWORD *)v51 = v76;
    *(_OWORD *)(v51 + 16) = v52;
    *(_QWORD *)(v51 + 32) = v78;
  }
  v53 = v70;
  v54 = (uint64_t)v71;
  v55 = v72;
  sub_15BD4(v43, (uint64_t)&v71[*(int *)(v72 + 52)], (uint64_t *)&unk_3B8790);
  *(_BYTE *)(v54 + v48) = 3;
  v56 = v67;
  sub_3C56C(v54, v67, type metadata accessor for ModernShelf);
  v57 = v68;
  sub_14510(v56, v68, type metadata accessor for ModernShelf);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v65 + 56))(v57, 0, 2, v55);
  v58 = v53 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_linksShelf;
  swift_beginAccess(v53 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_linksShelf, &v76, 33, 0);
  sub_C600C(v57, v58, &qword_3B35D0);
  swift_endAccess(&v76);
  swift_beginAccess(v53 + 16, &v76, 0, 0);
  v59 = *(_QWORD *)(v53 + 16);
  swift_retain();
  v60 = v69;
  sub_112254(v69);
  CurrentValueSubject.value.setter(v60);
  swift_release(v59);
  sub_1459C(v57, &qword_3B35D0);
  return sub_145D8(v56, type metadata accessor for ModernShelf);
}

uint64_t static Link.libraryLink(from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
  __chkstk_darwin(v4);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for FlowDestination(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  switch(*(_QWORD *)(a1 + *(int *)(type metadata accessor for TabMenu.Item(0) + 28)))
  {
    case 1:
      swift_storeEnumTagMultiPayload(v9, v7, 46);
      v10 = URL.init(string:)(0xD000000000000018, 0x800000000030F580);
      v11 = static MetricsTargetID.shows.getter(v10);
      goto LABEL_10;
    case 2:
      swift_storeEnumTagMultiPayload(v9, v7, 39);
      v13 = URL.init(string:)(0xD00000000000001BLL, 0x800000000030F640);
      v11 = static MetricsTargetID.channels.getter(v13);
      goto LABEL_10;
    case 3:
      swift_storeEnumTagMultiPayload(v9, v7, 40);
      v14 = URL.init(string:)(0xD00000000000001DLL, 0x800000000030F620);
      v11 = static MetricsTargetID.categories.getter(v14);
      goto LABEL_10;
    case 4:
      *((_OWORD *)v9 + 2) = 0u;
      *((_OWORD *)v9 + 3) = 0u;
      *(_OWORD *)v9 = 0u;
      *((_OWORD *)v9 + 1) = 0u;
      v9[64] = 9;
      swift_storeEnumTagMultiPayload(v9, v7, 8);
      v15 = URL.init(string:)(0xD00000000000001DLL, 0x800000000030F600);
      v11 = static MetricsTargetID.downloaded.getter(v15);
      goto LABEL_10;
    case 0xFLL:
      *(_QWORD *)v9 = 4;
      *(_OWORD *)(v9 + 8) = 0u;
      *(_OWORD *)(v9 + 24) = 0u;
      *(_OWORD *)(v9 + 40) = 0u;
      *((_QWORD *)v9 + 7) = 0;
      v9[64] = 9;
      swift_storeEnumTagMultiPayload(v9, v7, 8);
      v20 = URL.init(string:)(0xD000000000000018, 0x800000000030F660);
      v11 = static MetricsTargetID.saved.getter(v20);
      goto LABEL_10;
    case 0x10:
      *(_QWORD *)v9 = 3;
      *(_OWORD *)(v9 + 8) = 0u;
      *(_OWORD *)(v9 + 24) = 0u;
      *(_OWORD *)(v9 + 40) = 0u;
      *((_QWORD *)v9 + 7) = 0;
      v9[64] = 9;
      swift_storeEnumTagMultiPayload(v9, v7, 8);
      v18 = URL.init(string:)(0xD000000000000022, 0x800000000030F5D0);
      v11 = static MetricsTargetID.latestEpisodes.getter(v18);
      goto LABEL_10;
    case 0x11:
      swift_storeEnumTagMultiPayload(v9, v7, 44);
      v19 = URL.init(string:)(0xD000000000000023, 0x800000000030F5A0);
      v11 = static MetricsTargetID.recentlyUpdated.getter(v19);
LABEL_10:
      sub_1179E8(a1, (uint64_t)v9, (uint64_t)v6, v11, v12, a2);
      swift_bridgeObjectRelease();
      sub_1459C((uint64_t)v6, &qword_3B4370);
      sub_145D8((uint64_t)v9, type metadata accessor for FlowDestination);
      v21 = type metadata accessor for Link(0);
      result = (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(a2, 0, 1, v21);
      break;
    default:
      v16 = type metadata accessor for Link(0);
      result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(a2, 1, 1, v16);
      break;
  }
  return result;
}

uint64_t sub_115198(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  _QWORD *v15;
  uint64_t result;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  void (*v38)(_BYTE *);
  _BYTE v39[4];
  int v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  _QWORD *v48;
  char v49[24];

  v6 = type metadata accessor for IndexPath(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = &v39[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v47 = type metadata accessor for TabMenu.Item(0);
  v10 = *(_QWORD *)(v47 - 8);
  __chkstk_darwin(v47);
  v46 = &v39[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v12);
  v14 = &v39[-v13];
  v15 = *(_QWORD **)(a1 + 8);
  a3 += 16;
  swift_beginAccess(a3, v49, 0, 0);
  result = swift_weakLoadStrong(a3);
  v45 = result;
  if (!result)
    return result;
  v41 = v9;
  v42 = v7;
  v43 = v6;
  v40 = a2;
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    v17 = v15;
    goto LABEL_17;
  }
  v17 = _swiftEmptyArrayStorage;
  v48 = _swiftEmptyArrayStorage;
  v18 = v15[2];
  result = swift_bridgeObjectRetain();
  if (!v18)
  {
LABEL_16:
    swift_bridgeObjectRelease();
LABEL_17:
    v27 = v45;
    sub_11472C((uint64_t)v17);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v27 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_libraryItems) = v15;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v29 = v42;
    v28 = v43;
    v30 = v41;
    if ((v40 & 1) != 0)
    {
      v31 = v15[2];
      if (v31)
      {
        v32 = 0;
        v33 = (char *)v15
            + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
        v34 = *(_QWORD *)(v10 + 72);
        do
        {
          if (v33[*(int *)(v47 + 36)] == 1)
          {
            v35 = LibraryPresenter.multiSelectableExtension.getter();
            if (v35)
            {
              v36 = v35;
              swift_beginAccess(v35 + 12, &v48, 0, 0);
              v38 = (void (*)(_BYTE *))v36[12];
              v37 = v36[13];
              sub_76C34((uint64_t)v38, v37);
              swift_release(v36);
              if (v38)
              {
                IndexPath.init(item:section:)(v32, 0);
                v38(v30);
                sub_327A0((uint64_t)v38, v37);
                (*(void (**)(_BYTE *, uint64_t))(v29 + 8))(v30, v28);
              }
            }
          }
          ++v32;
          v33 += v34;
        }
        while (v31 != v32);
      }
    }
    return swift_release(v45);
  }
  v19 = 0;
  v20 = _swiftEmptyArrayStorage;
  v44 = v15;
  while (v19 < v15[2])
  {
    v21 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    v22 = *(_QWORD *)(v10 + 72);
    sub_14510((uint64_t)v15 + v21 + v22 * v19, (uint64_t)v14, type metadata accessor for TabMenu.Item);
    if (v14[*(int *)(v47 + 36)] == 1)
    {
      v23 = v10;
      v24 = v18;
      sub_3C56C((uint64_t)v14, (uint64_t)v46, type metadata accessor for TabMenu.Item);
      if ((swift_isUniquelyReferenced_nonNull_native(v20) & 1) == 0)
        sub_180924(0, v20[2] + 1, 1);
      v20 = v48;
      v26 = v48[2];
      v25 = v48[3];
      if (v26 >= v25 >> 1)
      {
        sub_180924(v25 > 1, v26 + 1, 1);
        v20 = v48;
      }
      v20[2] = v26 + 1;
      result = sub_3C56C((uint64_t)v46, (uint64_t)v20 + v21 + v26 * v22, type metadata accessor for TabMenu.Item);
      v18 = v24;
      v10 = v23;
      v15 = v44;
    }
    else
    {
      result = sub_145D8((uint64_t)v14, type metadata accessor for TabMenu.Item);
    }
    if (v18 == ++v19)
    {
      v17 = v48;
      goto LABEL_16;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_115510(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t result;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  char *v60;
  char *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  _BYTE *v67;
  char *v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  char v73;

  v2 = type metadata accessor for Link(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (uint64_t *)((char *)&v58 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = type metadata accessor for PageContent(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B35D0);
  __chkstk_darwin(v9);
  v11 = (char *)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v12);
  v65 = (char *)&v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
  __chkstk_darwin(v14);
  v61 = (char *)&v58 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0C38);
  __chkstk_darwin(v16);
  v60 = (char *)&v58 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = type metadata accessor for ModernShelf(0);
  v18 = *(_QWORD *)(v64 - 8);
  __chkstk_darwin(v64);
  v20 = (char *)&v58 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v23 = (char *)&v58 - v22;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v55 = a1;
    else
      v55 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v56 = _CocoaArrayWrapper.endIndex.getter(v55);
    v57 = a1;
    v25 = v56;
    v24 = v57;
    swift_bridgeObjectRelease();
  }
  else
  {
    v24 = a1;
    v25 = *(_QWORD *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8));
  }
  v26 = _swiftEmptyArrayStorage;
  v67 = v8;
  v68 = v11;
  v66 = v23;
  v62 = v20;
  v63 = v18;
  if (v25)
  {
    *(_QWORD *)&v70 = _swiftEmptyArrayStorage;
    result = sub_18096C(0, v25 & ~(v25 >> 63), 0);
    if (v25 < 0)
    {
      __break(1u);
      return result;
    }
    v28 = 0;
    v26 = (_QWORD *)v70;
    do
    {
      if ((v24 & 0xC000000000000001) != 0)
        v29 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(v28);
      else
        v29 = (_QWORD *)swift_retain();
      v73 = 1;
      Link.init(station:presentationContext:showChevron:)(v29, &v73, 1, v5);
      *(_QWORD *)&v70 = v26;
      v31 = v26[2];
      v30 = v26[3];
      if (v31 >= v30 >> 1)
      {
        sub_18096C(v30 > 1, v31 + 1, 1);
        v26 = (_QWORD *)v70;
      }
      ++v28;
      v26[2] = v31 + 1;
      sub_3C56C((uint64_t)v5, (uint64_t)v26+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(_QWORD *)(v3 + 72) * v31, type metadata accessor for Link);
    }
    while (v25 != v28);
  }
  v32 = type metadata accessor for Header(0);
  v33 = (uint64_t)v60;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v60, 1, 1, v32);
  v59 = sub_245AA8((uint64_t)v26);
  swift_bridgeObjectRelease();
  v34 = type metadata accessor for URL(0);
  v35 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56);
  v36 = (uint64_t)v61;
  v37 = v35(v61, 1, 1, v34);
  v72 = 0;
  v70 = 0u;
  v71 = 0u;
  v38 = static MetricsTargetType.swoosh.getter(v37);
  v39 = (uint64_t)v65;
  static ImpressionMetrics.shelf(id:idType:uniqueID:impressionType:name:)(0x736E6F6974617453, 0xE800000000000000, 0, 0, 0xD000000000000029, 0x800000000030F860, v38, v40, 0, 0);
  swift_bridgeObjectRelease();
  v41 = type metadata accessor for ImpressionMetrics(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v39, 0, 1, v41);
  v42 = (int *)v64;
  v43 = *(int *)(v64 + 32);
  v44 = v62;
  *((_BYTE *)v62 + v43) = 3;
  v45 = (uint64_t)v44 + v42[9];
  v35((char *)v45, 1, 1, v34);
  *v44 = 0xD000000000000029;
  v44[1] = 0x800000000030F860;
  sub_15BD4(v33, (uint64_t)v44 + v42[5], &qword_3B0C38);
  v46 = (char *)v44 + v42[6];
  *(_WORD *)v46 = 18;
  *((_WORD *)v46 + 3) = 256;
  *(_DWORD *)(v46 + 2) = 0;
  *((_QWORD *)v46 + 1) = 1;
  *(_QWORD *)((char *)v44 + v42[7]) = v59;
  sub_3C454(v36, v45, &qword_3B4370);
  *((_BYTE *)v44 + v42[10]) = 1;
  *((_BYTE *)v44 + v42[11]) = 0;
  v47 = (uint64_t)v44 + v42[12];
  if (*((_QWORD *)&v71 + 1))
  {
    sub_F4D8(&v70, v47);
  }
  else
  {
    v48 = (unint64_t)v71;
    *(_OWORD *)v47 = v70;
    *(_OWORD *)(v47 + 16) = v48;
    *(_QWORD *)(v47 + 32) = v72;
  }
  v50 = (uint64_t)v68;
  v49 = v69;
  sub_15BD4(v39, (uint64_t)v44 + v42[13], (uint64_t *)&unk_3B8790);
  *((_BYTE *)v44 + v43) = 3;
  v51 = (uint64_t)v66;
  sub_3C56C((uint64_t)v44, (uint64_t)v66, type metadata accessor for ModernShelf);
  sub_14510(v51, v50, type metadata accessor for ModernShelf);
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v63 + 56))(v50, 0, 2, v42);
  v52 = v49 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_stationsShelf;
  swift_beginAccess(v49 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_stationsShelf, &v70, 33, 0);
  sub_C600C(v50, v52, &qword_3B35D0);
  swift_endAccess(&v70);
  swift_beginAccess(v49 + 16, &v70, 0, 0);
  v53 = *(_QWORD *)(v49 + 16);
  swift_retain();
  v54 = v67;
  sub_112254(v67);
  CurrentValueSubject.value.setter(v54);
  swift_release(v53);
  sub_1459C(v50, &qword_3B35D0);
  return sub_145D8(v51, type metadata accessor for ModernShelf);
}

uint64_t sub_115B0C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  _BYTE v6[24];

  v2 = *a1;
  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v6, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    sub_115510(v2);
    return swift_release(v5);
  }
  return result;
}

uint64_t sub_115B68@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char v13;
  uint64_t Strong;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[24];

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8660);
  __chkstk_darwin(v6);
  v8 = &v24[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BA8C8);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v24[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = *a1;
  a2 += 16;
  swift_beginAccess(a2, v24, 0, 0);
  Strong = swift_weakLoadStrong(a2);
  if (Strong)
  {
    v15 = Strong;
    if ((v13 & 1) == 0)
    {
      v20 = AddFavoriteCategoriesSearchTipProvider.addFavoriteCategoriesSearchTipShelf.getter();
      v23 = v20;
      v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B35B8);
      v22 = sub_32914(&qword_3B35C0, &qword_3B35B8, (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
      v18 = Publisher.eraseToAnyPublisher()(v21, v22);
      swift_release(v20);
      result = swift_release(v15);
      goto LABEL_6;
    }
    swift_release(Strong);
  }
  v16 = type metadata accessor for ModernShelf(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v8, 1, 1, v16);
  Just.init(_:)(v8, v6);
  v17 = sub_32914(&qword_3BA8D0, &qword_3BA8C8, (uint64_t)&protocol conformance descriptor for Just<A>);
  v18 = Publisher.eraseToAnyPublisher()(v9, v17);
  result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
LABEL_6:
  *a3 = v18;
  return result;
}

uint64_t sub_115D40(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];
  _BYTE v12[24];

  v4 = type metadata accessor for PageContent(0);
  __chkstk_darwin(v4);
  v6 = &v11[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  a2 += 16;
  swift_beginAccess(a2, v12, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (result)
  {
    v8 = result;
    v9 = result + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_recentlyUnfollowedTipShelf;
    swift_beginAccess(result + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_recentlyUnfollowedTipShelf, v11, 33, 0);
    sub_C600C(a1, v9, &qword_3B8660);
    swift_endAccess(v11);
    swift_beginAccess(v8 + 16, v11, 0, 0);
    v10 = *(_QWORD *)(v8 + 16);
    swift_retain();
    sub_112254(v6);
    CurrentValueSubject.value.setter(v6);
    swift_release(v8);
    return swift_release(v10);
  }
  return result;
}

uint64_t sub_115E50@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char v10;
  _QWORD *v11;
  uint64_t v13;

  v4 = type metadata accessor for TipGroup(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *a1;
  (*(void (**)(char *, _QWORD, uint64_t, __n128))(v5 + 104))(v8, enum case for TipGroup.downloads(_:), v4, v6);
  if (*(_QWORD *)(v9 + 16) && (sub_29AE0((uint64_t)v8), (v10 & 1) != 0))
    v11 = (_QWORD *)swift_bridgeObjectRetain();
  else
    v11 = _swiftEmptyArrayStorage;
  *a2 = v11;
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t sub_115F1C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t result;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25[2];
  _QWORD v26[3];
  uint64_t v27;
  uint64_t v28;

  v2 = a2;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v4 = _swiftEmptyArrayStorage;
  if (v3)
  {
    v5 = *(_QWORD *)a1 + 32;
    swift_bridgeObjectRetain();
    v6 = _swiftEmptyArrayStorage;
    do
    {
      sub_150C8(v5, (uint64_t)v26);
      sub_150C8((uint64_t)v26, (uint64_t)v25);
      v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BA888);
      v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B09A8);
      if ((swift_dynamicCast(&v22, v25, v7, v8, 6) & 1) == 0)
      {
        v24 = 0;
        v22 = 0u;
        v23 = 0u;
      }
      __swift_destroy_boxed_opaque_existential_1(v26);
      if (*((_QWORD *)&v23 + 1))
      {
        sub_F4D8(&v22, (uint64_t)v25);
        sub_F4D8(v25, (uint64_t)&v22);
        if ((swift_isUniquelyReferenced_nonNull_native(v6) & 1) == 0)
          v6 = sub_11214(0, v6[2] + 1, 1, v6);
        v10 = v6[2];
        v9 = v6[3];
        if (v10 >= v9 >> 1)
          v6 = sub_11214((_QWORD *)(v9 > 1), v10 + 1, 1, v6);
        v6[2] = v10 + 1;
        sub_F4D8(&v22, (uint64_t)&v6[5 * v10 + 4]);
      }
      else
      {
        sub_1459C((uint64_t)&v22, &qword_3BA890);
      }
      v5 += 40;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    v2 = a2;
    v4 = _swiftEmptyArrayStorage;
  }
  else
  {
    v6 = _swiftEmptyArrayStorage;
  }
  *(_QWORD *)&v25[0] = _swiftEmptyArrayStorage;
  v11 = v6[2];
  if (v11)
  {
    v12 = (uint64_t)(v6 + 4);
    swift_bridgeObjectRetain();
    do
    {
      sub_150C8(v12, (uint64_t)v26);
      v14 = v27;
      v15 = v28;
      __swift_project_boxed_opaque_existential_1(v26, v27);
      v16 = dispatch thunk of AMSDialogTip.dialogRequest()(v14, v15);
      v17 = __swift_destroy_boxed_opaque_existential_1(v26);
      if (v16)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v17);
        v19 = *(_QWORD *)((char *)&dword_10 + (*(_QWORD *)&v25[0] & 0xFFFFFFFFFFFFFF8));
        v18 = *(_QWORD *)((char *)&dword_18 + (*(_QWORD *)&v25[0] & 0xFFFFFFFFFFFFFF8));
        if (v19 >= v18 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
        v13 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v19, v16);
        specialized Array._endMutation()(v13);
      }
      v12 += 40;
      --v11;
    }
    while (v11);
    swift_bridgeObjectRelease();
    v4 = *(_QWORD **)&v25[0];
  }
  result = swift_bridgeObjectRelease();
  *v2 = v4;
  return result;
}

uint64_t sub_11619C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  char *v35;
  id v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t, uint64_t, int *);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  char *v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  char v57[24];

  v4 = type metadata accessor for PageContent(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (int *)type metadata accessor for ModernShelf(0);
  v8 = *((_QWORD *)v7 - 1);
  __chkstk_darwin(v7);
  v10 = (uint64_t *)((char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v11);
  v13 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
  __chkstk_darwin(v14);
  v16 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0C38);
  __chkstk_darwin(v17);
  v19 = (char *)&v48 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8660);
  __chkstk_darwin(v20);
  v53 = (uint64_t)&v48 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = *a1;
  a2 += 16;
  swift_beginAccess(a2, v57, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (result)
  {
    v24 = result;
    if ((unint64_t)v22 >> 62)
    {
      if (v22 < 0)
        v43 = v22;
      else
        v43 = v22 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
      result = _CocoaArrayWrapper.endIndex.getter(v43);
      if (result)
        goto LABEL_4;
    }
    else
    {
      v25 = *(_QWORD *)((char *)&dword_10 + (v22 & 0xFFFFFFFFFFFFF8));
      result = swift_bridgeObjectRetain();
      if (v25)
      {
LABEL_4:
        v50 = v8;
        v51 = v6;
        v52 = v13;
        if ((v22 & 0xC000000000000001) != 0)
        {
          v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0);
        }
        else
        {
          if (!*(_QWORD *)((char *)&dword_10 + (v22 & 0xFFFFFFFFFFFFF8)))
          {
            __break(1u);
            return result;
          }
          v26 = *(id *)(v22 + 32);
        }
        v27 = v26;
        swift_bridgeObjectRelease();
        v28 = type metadata accessor for Header(0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v19, 1, 1, v28);
        v29 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8750);
        v30 = swift_allocObject(v29, 72, 7);
        *(_OWORD *)(v30 + 16) = xmmword_2EA0D0;
        *(_QWORD *)(v30 + 56) = sub_327F8(0, (unint64_t *)&qword_3B7DB0, AMSDialogRequest_ptr);
        *(_QWORD *)(v30 + 64) = sub_E50C0((unint64_t *)&qword_3B8760, (unint64_t *)&qword_3B7DB0, AMSDialogRequest_ptr, (uint64_t)&protocol conformance descriptor for AMSDialogRequest);
        *(_QWORD *)(v30 + 32) = v27;
        v31 = type metadata accessor for URL(0);
        v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56);
        v32(v16, 1, 1, v31);
        v33 = type metadata accessor for ImpressionMetrics(0);
        v54 = 0u;
        v55 = 0u;
        v56 = 0;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v52, 1, 1, v33);
        v49 = v7[8];
        *((_BYTE *)v10 + v49) = 3;
        v34 = (uint64_t)v10 + v7[9];
        v32((char *)v34, 1, 1, v31);
        *v10 = 0xD00000000000001CLL;
        v10[1] = 0x800000000030F840;
        sub_15BD4((uint64_t)v19, (uint64_t)v10 + v7[5], &qword_3B0C38);
        v35 = (char *)v10 + v7[6];
        *(_WORD *)v35 = 53;
        *((_WORD *)v35 + 3) = 256;
        *(_DWORD *)(v35 + 2) = 0;
        *((_QWORD *)v35 + 1) = 1;
        *(_QWORD *)((char *)v10 + v7[7]) = v30;
        v36 = v27;
        sub_3C454((uint64_t)v16, v34, &qword_3B4370);
        *((_BYTE *)v10 + v7[10]) = 1;
        *((_BYTE *)v10 + v7[11]) = 0;
        v37 = (uint64_t)v10 + v7[12];
        if (*((_QWORD *)&v55 + 1))
        {
          sub_F4D8(&v54, v37);
        }
        else
        {
          v38 = (unint64_t)v55;
          *(_OWORD *)v37 = v54;
          *(_OWORD *)(v37 + 16) = v38;
          *(_QWORD *)(v37 + 32) = v56;
        }
        v39 = v50;
        sub_15BD4((uint64_t)v52, (uint64_t)v10 + v7[13], (uint64_t *)&unk_3B8790);
        *((_BYTE *)v10 + v49) = 3;
        v40 = (uint64_t)v10;
        v41 = v53;
        sub_3C56C(v40, v53, type metadata accessor for ModernShelf);

        (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v39 + 56))(v41, 0, 1, v7);
        v42 = v24 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_libraryTipShelf;
        swift_beginAccess(v24 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_libraryTipShelf, &v54, 33, 0);
        sub_3C454(v41, v42, &qword_3B8660);
        swift_endAccess(&v54);
        v6 = v51;
        goto LABEL_16;
      }
    }
    swift_bridgeObjectRelease();
    v44 = *(void (**)(uint64_t, uint64_t, uint64_t, int *))(v8 + 56);
    v45 = v53;
    v44(v53, 1, 1, v7);
    v46 = v24 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_libraryTipShelf;
    swift_beginAccess(v24 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_libraryTipShelf, &v54, 33, 0);
    sub_3C454(v45, v46, &qword_3B8660);
    swift_endAccess(&v54);
LABEL_16:
    swift_beginAccess(v24 + 16, &v54, 0, 0);
    v47 = *(_QWORD *)(v24 + 16);
    swift_retain();
    sub_112254(v6);
    CurrentValueSubject.value.setter(v6);
    swift_release(v24);
    return swift_release(v47);
  }
  return result;
}

uint64_t sub_116700@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char v10;
  uint64_t Strong;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v22[24];

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B68D8);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = &v22[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v10 = *a1;
  a2 += 16;
  swift_beginAccess(a2, v22, 0, 0);
  Strong = swift_weakLoadStrong(a2);
  if (Strong)
  {
    v12 = Strong;
    if ((v10 & 1) == 0)
    {
      v16 = *(_QWORD *)(Strong + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_libraryObserverProvider + 24);
      v17 = *(_QWORD *)(Strong + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_libraryObserverProvider + 32);
      __swift_project_boxed_opaque_existential_1((_QWORD *)(Strong + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_libraryObserverProvider), v16);
      v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(v16, v17);
      v21 = v18;
      v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3628);
      v20 = sub_32914(&qword_3B3638, &qword_3B3628, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
      v14 = Publisher.eraseToAnyPublisher()(v19, v20);
      swift_release(v18);
      result = swift_release(v12);
      goto LABEL_6;
    }
    swift_release(Strong);
  }
  v21 = 0;
  Just.init(_:)(&v21, &type metadata for Int);
  v13 = sub_32914((unint64_t *)&unk_3B68E0, &qword_3B68D8, (uint64_t)&protocol conformance descriptor for Just<A>);
  v14 = Publisher.eraseToAnyPublisher()(v6, v13);
  result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
LABEL_6:
  *a3 = v14;
  return result;
}

uint64_t sub_116890@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t Strong;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  _BYTE v11[24];

  v4 = *a1;
  v5 = a2 + 16;
  swift_beginAccess(a2 + 16, v11, 0, 0);
  Strong = swift_weakLoadStrong(v5);
  if (Strong)
  {
    v7 = Strong;
    *(_QWORD *)(Strong + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_recentlyUnfollowedShowsCount) = v4;
    if (v4 <= 0)
    {
      v10 = type metadata accessor for ModernShelf(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(a3, 1, 1, v10);
    }
    else
    {
      type metadata accessor for RecentlyUnfollowedLinkProvider();
      sub_154A0(v4, a3);
    }
    return swift_release(v7);
  }
  else
  {
    v8 = type metadata accessor for ModernShelf(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(a3, 1, 1, v8);
  }
}

uint64_t sub_11696C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[24];
  _BYTE v15[24];

  v4 = type metadata accessor for PageContent(0);
  __chkstk_darwin(v4);
  v6 = &v14[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8660);
  __chkstk_darwin(v7);
  v9 = &v14[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  a2 += 16;
  swift_beginAccess(a2, v15, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (result)
  {
    v11 = result;
    sub_267BC(a1, (uint64_t)v9, &qword_3B8660);
    v12 = v11 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_recentlyUnfollowedLinkShelf;
    swift_beginAccess(v11 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_recentlyUnfollowedLinkShelf, v14, 33, 0);
    sub_C600C((uint64_t)v9, v12, &qword_3B8660);
    swift_endAccess(v14);
    swift_beginAccess(v11 + 16, v14, 0, 0);
    v13 = *(_QWORD *)(v11 + 16);
    swift_retain();
    sub_112254(v6);
    CurrentValueSubject.value.setter(v6);
    swift_release(v13);
    sub_1459C((uint64_t)v9, &qword_3B8660);
    return swift_release(v11);
  }
  return result;
}

uint64_t sub_116ADC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  Swift::String v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  Swift::String v31;
  uint64_t v32;
  uint64_t v33;
  Swift::String v34;
  uint64_t v35;
  uint64_t v36;
  Swift::String v37;
  uint64_t v38;
  char v39;
  void (*v40)(char *, uint64_t, uint64_t, uint64_t);
  char *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD v47[2];
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  _OWORD v64[2];
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  unint64_t v68;

  v60 = type metadata accessor for TabMenu.Item(0);
  v2 = *(_QWORD *)(v60 - 8);
  __chkstk_darwin(v60);
  v54 = (uint64_t)v47 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v6 = (char *)v47 - v5;
  v7 = type metadata accessor for Link(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (_QWORD *)((char *)v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BC390);
  __chkstk_darwin(v11);
  v13 = (char *)v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = &unk_3BA000;
  v53 = *(_QWORD *)(a1 + 16);
  if (!v53)
  {
    v16 = _swiftEmptyArrayStorage;
    goto LABEL_64;
  }
  v52 = OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_libraryItems;
  v51 = a1 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  v50 = *(_QWORD *)(v8 + 72);
  v47[1] = a1;
  swift_bridgeObjectRetain();
  v15 = 0;
  v16 = _swiftEmptyArrayStorage;
  v59 = (char *)&type metadata for Any + 8;
  v49 = v2;
  v48 = v13;
  while (2)
  {
    v17 = *(_QWORD *)(v55 + v52);
    sub_14510(v51 + v50 * v15, (uint64_t)v10, type metadata accessor for Link);
    v18 = *(_QWORD *)(v17 + 16);
    if (!v18)
    {
      swift_bridgeObjectRetain();
LABEL_53:
      v40 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56);
      v41 = v13;
      v42 = 1;
      goto LABEL_56;
    }
    v57 = v15;
    v58 = v16;
    v19 = v17 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
    v56 = v17;
    swift_bridgeObjectRetain_n(v17, 2);
    v61 = *(_QWORD *)(v2 + 72);
    v20 = v60;
    while (1)
    {
      sub_14510(v19, (uint64_t)v6, type metadata accessor for TabMenu.Item);
      v21 = *(int *)(v20 + 28);
      v22 = 0xE500000000000000;
      v23 = 0x73776F6873;
      switch(*(_QWORD *)&v6[v21])
      {
        case 1:
          break;
        case 2:
          v22 = 0xE800000000000000;
          v23 = 0x736C656E6E616863;
          break;
        case 3:
          v22 = 0xEA00000000007365;
          v23 = 0x69726F6765746163;
          break;
        case 4:
          v23 = 0x64616F6C6E776F64;
          v22 = 0xEA00000000006465;
          break;
        case 5:
          v23 = 0x7472616843706F74;
          goto LABEL_23;
        case 6:
          v22 = 0xEF73747261684370;
          v23 = 0x6F546E7265646F6DLL;
          break;
        case 7:
          v22 = 0xE700000000000000;
          v23 = 0x7972617262696CLL;
          break;
        case 8:
          v22 = 0xE600000000000000;
          v23 = 0x6E657473696CLL;
          break;
        case 9:
          v22 = 0xE700000000000000;
          v23 = 0x676F6C61746163;
          break;
        case 0xALL:
          v23 = 0x7265666E69;
          break;
        case 0xBLL:
          v22 = 0xE800000000000000;
          v23 = 0x64657463656C6573;
          break;
        case 0xCLL:
          v22 = 0xE600000000000000;
          v23 = 0x686372616573;
          break;
        case 0xDLL:
          v22 = 0xE700000000000000;
          v23 = 0x676E6964616F6CLL;
          break;
        case 0xELL:
          v22 = 0xEA00000000007265;
          v23 = 0x79616C50696E696DLL;
          break;
        case 0xFLL:
          v23 = 0x6B72616D6B6F6F62;
LABEL_23:
          v22 = 0xE900000000000073;
          break;
        case 0x10:
          v22 = 0xEE007365646F7369;
          v23 = 0x704574736574616CLL;
          break;
        case 0x11:
          v22 = 0xEF64657461647055;
          v23 = 0x796C746E65636572;
          break;
        default:
          v22 = 0xE700000000000000;
          v23 = 0x6E6F6974617473;
          break;
      }
      v67 = v23;
      v68 = v22;
      v24 = v6[*(int *)(v20 + 40)];
      *((_QWORD *)&v66 + 1) = &type metadata for Bool;
      LOBYTE(v65) = v24;
      sub_267BC((uint64_t)&v65, (uint64_t)&v62, (uint64_t *)&unk_3BC540);
      if (v63)
      {
        sub_1F460(&v62, v64);
        sub_1FB98((uint64_t)v64, (uint64_t)&v62);
        v25._countAndFlagsBits = String.init<A>(describing:)(&v62, (char *)&type metadata for Any + 8);
        String.append(_:)(v25);
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1(v64);
      }
      else
      {
        sub_1459C((uint64_t)&v62, (uint64_t *)&unk_3BC540);
      }
      sub_1459C((uint64_t)&v65, (uint64_t *)&unk_3BC540);
      v26 = *(_QWORD **)&v6[v21];
      if ((unint64_t)v26 - 1 <= 0x10)
      {
        v28 = v67;
        v27 = v68;
        goto LABEL_47;
      }
      if (!v26)
      {
        v28 = v67;
        v27 = v68;
        goto LABEL_42;
      }
      v29 = v26[2];
      v30 = v26[3];
      *((_QWORD *)&v66 + 1) = &type metadata for String;
      *(_QWORD *)&v65 = v29;
      *((_QWORD *)&v65 + 1) = v30;
      sub_267BC((uint64_t)&v65, (uint64_t)&v62, (uint64_t *)&unk_3BC540);
      if (v63)
      {
        sub_1F460(&v62, v64);
        sub_1FB98((uint64_t)v64, (uint64_t)&v62);
        sub_26794((uint64_t)v26);
        swift_bridgeObjectRetain();
        v31._countAndFlagsBits = String.init<A>(describing:)(&v62, (char *)&type metadata for Any + 8);
        String.append(_:)(v31);
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1(v64);
      }
      else
      {
        sub_26794((uint64_t)v26);
        swift_bridgeObjectRetain();
        sub_1459C((uint64_t)&v62, (uint64_t *)&unk_3BC540);
      }
      sub_1459C((uint64_t)&v65, (uint64_t *)&unk_3BC540);
      v32 = v26[4];
      v33 = v26[5];
      *((_QWORD *)&v66 + 1) = &type metadata for String;
      *(_QWORD *)&v65 = v32;
      *((_QWORD *)&v65 + 1) = v33;
      sub_267BC((uint64_t)&v65, (uint64_t)&v62, (uint64_t *)&unk_3BC540);
      if (v63)
      {
        sub_1F460(&v62, v64);
        sub_1FB98((uint64_t)v64, (uint64_t)&v62);
        swift_bridgeObjectRetain();
        v34._countAndFlagsBits = String.init<A>(describing:)(&v62, (char *)&type metadata for Any + 8);
        String.append(_:)(v34);
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1(v64);
      }
      else
      {
        swift_bridgeObjectRetain();
        sub_1459C((uint64_t)&v62, (uint64_t *)&unk_3BC540);
      }
      sub_267A8((uint64_t)v26);
      sub_1459C((uint64_t)&v65, (uint64_t *)&unk_3BC540);
      v35 = *(_QWORD *)&v6[v21];
      v28 = v67;
      v27 = v68;
      if ((unint64_t)(v35 - 1) >= 0x11)
      {
        if (v35)
        {
          v36 = *(_QWORD *)(v35 + OBJC_IVAR____TtC8ShelfKit13StationDetail_episodeCount);
          *((_QWORD *)&v66 + 1) = &type metadata for Int;
          *(_QWORD *)&v65 = v36;
LABEL_43:
          sub_267BC((uint64_t)&v65, (uint64_t)&v62, (uint64_t *)&unk_3BC540);
          if (v63)
          {
            sub_1F460(&v62, v64);
            sub_1FB98((uint64_t)v64, (uint64_t)&v62);
            swift_retain();
            v37._countAndFlagsBits = String.init<A>(describing:)(&v62, v59);
            String.append(_:)(v37);
            swift_bridgeObjectRelease();
            __swift_destroy_boxed_opaque_existential_1(v64);
            sub_267A8(v35);
            v28 = v67;
            v27 = v68;
          }
          else
          {
            sub_1459C((uint64_t)&v62, (uint64_t *)&unk_3BC540);
          }
          sub_1459C((uint64_t)&v65, (uint64_t *)&unk_3BC540);
          goto LABEL_47;
        }
LABEL_42:
        v35 = 0;
        v65 = 0u;
        v66 = 0u;
        goto LABEL_43;
      }
LABEL_47:
      v38 = v10[1];
      if (v28 == *v10 && v27 == v38)
        break;
      v39 = _stringCompareWithSmolCheck(_:_:expecting:)(v28, v27, *v10, v38, 0);
      swift_bridgeObjectRelease();
      if ((v39 & 1) != 0)
        goto LABEL_55;
      sub_145D8((uint64_t)v6, type metadata accessor for TabMenu.Item);
      v19 += v61;
      if (!--v18)
      {
        swift_bridgeObjectRelease();
        v2 = v49;
        v13 = v48;
        v15 = v57;
        v16 = v58;
        goto LABEL_53;
      }
    }
    swift_bridgeObjectRelease();
LABEL_55:
    v2 = v49;
    v13 = v48;
    v15 = v57;
    v16 = v58;
    swift_bridgeObjectRelease();
    sub_3C56C((uint64_t)v6, (uint64_t)v13, type metadata accessor for TabMenu.Item);
    v40 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56);
    v41 = v13;
    v42 = 0;
LABEL_56:
    v43 = v60;
    v40(v41, v42, 1, v60);
    swift_bridgeObjectRelease();
    sub_145D8((uint64_t)v10, type metadata accessor for Link);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v13, 1, v43) == 1)
    {
      sub_1459C((uint64_t)v13, &qword_3BC390);
    }
    else
    {
      sub_3C56C((uint64_t)v13, v54, type metadata accessor for TabMenu.Item);
      if ((swift_isUniquelyReferenced_nonNull_native(v16) & 1) == 0)
        v16 = (_QWORD *)sub_111EC(0, v16[2] + 1, 1, (unint64_t)v16);
      v45 = v16[2];
      v44 = v16[3];
      if (v45 >= v44 >> 1)
        v16 = (_QWORD *)sub_111EC(v44 > 1, v45 + 1, 1, (unint64_t)v16);
      v16[2] = v45 + 1;
      sub_3C56C(v54, (uint64_t)v16+ ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(_QWORD *)(v2 + 72) * v45, type metadata accessor for TabMenu.Item);
    }
    if (++v15 != v53)
      continue;
    break;
  }
  swift_bridgeObjectRelease();
  v14 = (_QWORD *)&unk_3BA000;
LABEL_64:
  *(_QWORD *)(v55 + v14[174]) = v16;
  return swift_bridgeObjectRelease();
}

uint64_t sub_117418@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v12;
  uint64_t v14;
  int *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  char v22;
  char v23;
  _QWORD *v24;

  v8 = TabMenu.Item.shelfUniqueID.getter();
  v10 = a2[1];
  if (v8 == *a2 && v9 == v10)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v8, v9, *a2, v10, 0);
    swift_bridgeObjectRelease();
    if ((v12 & 1) == 0)
      return sub_14510(a1, a4, type metadata accessor for TabMenu.Item);
  }
  v14 = type metadata accessor for Glyph(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(a4, a1, v14);
  v15 = (int *)type metadata accessor for TabMenu.Item(0);
  v16 = (uint64_t *)(a1 + v15[6]);
  v18 = *v16;
  v17 = v16[1];
  v19 = *(_QWORD *)(a1 + v15[7]);
  v20 = *(_BYTE *)(a1 + v15[8]);
  sub_267BC(a1 + v15[5], a4 + v15[5], (uint64_t *)&unk_3BC5B0);
  v21 = *(_BYTE *)(a1 + v15[10]);
  v22 = *(_BYTE *)(a1 + v15[11]);
  v23 = *(_BYTE *)(a1 + v15[12]);
  v24 = (_QWORD *)(a4 + v15[6]);
  *v24 = v18;
  v24[1] = v17;
  *(_QWORD *)(a4 + v15[7]) = v19;
  *(_BYTE *)(a4 + v15[8]) = v20;
  *(_BYTE *)(a4 + v15[9]) = a3 & 1;
  *(_BYTE *)(a4 + v15[10]) = v21;
  *(_BYTE *)(a4 + v15[11]) = v22;
  *(_BYTE *)(a4 + v15[12]) = v23;
  swift_bridgeObjectRetain();
  return sub_26794(v19);
}

uint64_t sub_117578(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  int v10;
  uint64_t v11;
  _BYTE v12[24];
  _BYTE v13[24];

  v4 = type metadata accessor for PageContent(0);
  __chkstk_darwin(v4);
  v6 = &v12[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = *a1;
  a2 += 16;
  swift_beginAccess(a2, v13, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (result)
  {
    v9 = result;
    v10 = *(unsigned __int8 *)(result + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_isLibraryEmpty);
    *(_BYTE *)(result + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_isLibraryEmpty) = v7 == 0;
    if (v10 == 2 || ((v10 & 1) == 0) == (v7 == 0))
    {
      sub_10D50C();
      swift_beginAccess(v9 + 16, v12, 0, 0);
      v11 = *(_QWORD *)(v9 + 16);
      swift_retain();
      sub_112254(v6);
      CurrentValueSubject.value.setter(v6);
      swift_release(v9);
      result = v11;
    }
    return swift_release(result);
  }
  return result;
}

_QWORD *LibraryPresenter.deinit()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[4]);
  sub_145D8((uint64_t)v0 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_interactionContextPage, (uint64_t (*)(_QWORD))&type metadata accessor for InteractionContext.Page);
  swift_release(*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_refreshControls));
  swift_release(*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_hasLoadedContent));
  swift_release(*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_objectGraph));
  swift_unknownObjectRelease(*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_libraryDataProvider));
  __swift_destroy_boxed_opaque_existential_1((_QWORD *)((char *)v0
                                                      + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_libraryObserverProvider));
  __swift_destroy_boxed_opaque_existential_1((_QWORD *)((char *)v0
                                                      + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_libraryActionController));
  __swift_destroy_boxed_opaque_existential_1((_QWORD *)((char *)v0
                                                      + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_storeDataProvider));
  swift_release(*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_recentlyUnfollowedTipProvider));
  __swift_destroy_boxed_opaque_existential_1((_QWORD *)((char *)v0
                                                      + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_libraryTipProvider));
  swift_release(*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_updatedShowsPublisher));
  swift_bridgeObjectRelease();
  sub_1459C((uint64_t)v0 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_recentlyUpdatedShelf, &qword_3B35D0);
  sub_1459C((uint64_t)v0 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_recentlyUpdatedHasMoreShelf, &qword_3B8660);
  sub_1459C((uint64_t)v0 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_recentlyUnfollowedTipShelf, &qword_3B8660);
  sub_1459C((uint64_t)v0 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_libraryTipShelf, &qword_3B8660);
  sub_1459C((uint64_t)v0 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_recentlyUnfollowedLinkShelf, &qword_3B8660);
  swift_bridgeObjectRelease();
  swift_release(*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_isEditing));
  sub_3AEF8(*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter____lazy_storage___reorderingExtension), *(_QWORD *)((char *)v0 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter____lazy_storage___reorderingExtension + 8), *(_QWORD *)((char *)v0 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter____lazy_storage___reorderingExtension + 16), *(_QWORD *)((char *)v0 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter____lazy_storage___reorderingExtension + 24), *(_QWORD *)((char *)v0 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter____lazy_storage___reorderingExtension + 32), *(_QWORD *)((char *)v0 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter____lazy_storage___reorderingExtension + 40));
  sub_3AF98(*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter____lazy_storage___deletableExtension), *(_QWORD *)((char *)v0 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter____lazy_storage___deletableExtension + 8), *(_QWORD *)((char *)v0 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter____lazy_storage___deletableExtension + 16), *(_QWORD *)((char *)v0 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter____lazy_storage___deletableExtension + 24));
  sub_11805C(*(_QWORD *)((char *)v0
                       + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter____lazy_storage___multiSelectableExtension));
  sub_1459C((uint64_t)v0 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_linksShelf, &qword_3B35D0);
  sub_1459C((uint64_t)v0 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_stationsShelf, &qword_3B35D0);
  return v0;
}

uint64_t LibraryPresenter.__deallocating_deinit()
{
  uint64_t v0;

  LibraryPresenter.deinit();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1178C8@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return sub_14510(*v1 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_interactionContextPage, a1, (uint64_t (*)(_QWORD))&type metadata accessor for InteractionContext.Page);
}

uint64_t LibraryPresenter.paginatedPublisher.getter()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_updatedShowsPublisher));
}

uint64_t sub_11790C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_updatedShowsPublisher);
  *a1 = v2;
  return swift_retain(v2);
}

uint64_t sub_117920(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t ObjectType;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v14, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    v6 = *(_QWORD *)(result + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_libraryDataProvider);
    v7 = *(_QWORD *)(result + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_libraryDataProvider + 8);
    swift_unknownObjectRetain(v6);
    swift_release(v5);
    ObjectType = swift_getObjectType();
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v7 + 16))(v11, ObjectType, v7);
    swift_unknownObjectRelease(v6);
    v9 = v12;
    v10 = v13;
    __swift_project_boxed_opaque_existential_1(v11, v12);
    (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(v10 + 264))(*(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), v9, v10);
    return __swift_destroy_boxed_opaque_existential_1(v11);
  }
  return result;
}

uint64_t sub_1179E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91[25];
  uint64_t v92;
  uint64_t v93;

  v86 = a4;
  v87 = a5;
  v83 = a3;
  v79 = a2;
  v8 = type metadata accessor for ScalarDictionary(0);
  __chkstk_darwin(v8);
  v85 = (char *)&v72 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for MetricsData.Configuration(0);
  v81 = *(_QWORD *)(v10 - 8);
  v82 = v10;
  __chkstk_darwin(v10);
  v80 = (char *)&v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for ActionMetrics(0);
  __chkstk_darwin(v12);
  v84 = (char *)&v72 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for FlowDestination(0);
  __chkstk_darwin(v14);
  v88 = (uint64_t)&v72 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
  __chkstk_darwin(v16);
  v90 = (uint64_t)&v72 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = type metadata accessor for ArtworkModel(0);
  v74 = *(_QWORD *)(v75 - 8);
  v18 = __chkstk_darwin(v75);
  v89 = (uint64_t)&v72 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = type metadata accessor for Glyph.Settings(0, v18);
  v20 = *(_QWORD *)(v78 - 8);
  __chkstk_darwin(v78);
  v22 = (char *)&v72 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3BC5B0);
  __chkstk_darwin(v23);
  v25 = (char *)&v72 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for Glyph(0);
  v27 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v29 = (char *)&v72 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = (int *)type metadata accessor for TabMenu.Item(0);
  sub_267BC(a1 + v30[5], (uint64_t)v25, (uint64_t *)&unk_3BC5B0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26) == 1)
  {
    v31 = sub_1459C((uint64_t)v25, (uint64_t *)&unk_3BC5B0);
LABEL_6:
    v37 = Glyph.settings.getter(v31);
    v34 = Glyph.Settings.name.getter(v37);
    v36 = v38;
    (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v78);
    goto LABEL_7;
  }
  v32 = (*(uint64_t (**)(char *, char *, uint64_t))(v27 + 32))(v29, v25, v26);
  if (*(_BYTE *)(a1 + v30[10]) != 1)
  {
    v31 = (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v29, v26);
    goto LABEL_6;
  }
  v33 = Glyph.settings.getter(v32);
  v34 = Glyph.Settings.name.getter(v33);
  v36 = v35;
  (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v78);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v29, v26);
LABEL_7:
  v39 = v89;
  ArtworkModel.init(glyphName:accessibilityTitle:isCustomSymbol:isMulticolorSymbol:)(v34, v36, 0, 0, *(unsigned __int8 *)(a1 + v30[10]), *(unsigned __int8 *)(a1 + v30[10]));
  v40 = TabMenu.Item.shelfUniqueID.getter();
  v77 = v41;
  v78 = v40;
  v42 = (uint64_t *)(a1 + v30[6]);
  v43 = v42[1];
  v76 = *v42;
  v73 = v43;
  v44 = v90;
  sub_14510(v39, v90, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v74 + 56))(v44, 0, 1, v75);
  sub_14510(v79, v88, type metadata accessor for FlowDestination);
  v45 = swift_bridgeObjectRetain();
  v46 = static MetricsTargetType.link.getter(v45);
  v48 = v47;
  v49 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0930);
  v50 = type metadata accessor for MetricsData(0);
  v51 = swift_allocObject(v49, ((*(unsigned __int8 *)(*(_QWORD *)(v50 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v50 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v50 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v50 - 8) + 80) | 7);
  *(_OWORD *)(v51 + 16) = xmmword_2EA0D0;
  v52 = static MetricsActionType.navigate.getter();
  v54 = v53;
  v55 = v80;
  static MetricsData.Configuration.podcasts.getter(v52);
  v56 = v86;
  v57 = v87;
  static MetricsData.clickData(targetID:targetType:actionType:actionContext:actionResult:actionURL:fields:configuration:)(v86, v87, v46, v48, v52, v54, 0, 0, 0, 0, v83, &_swiftEmptyDictionarySingleton, v55);
  swift_bridgeObjectRelease();
  v58 = (*(uint64_t (**)(char *, uint64_t))(v81 + 8))(v55, v82);
  v59 = v85;
  ScalarDictionary.init()(v58);
  v60 = (uint64_t)v84;
  ActionMetrics.init(data:custom:)(v51, v59);
  swift_bridgeObjectRelease();
  *(_WORD *)v91 = 0;
  v61 = type metadata accessor for FlowAction(0);
  swift_allocObject(v61, *(unsigned int *)(v61 + 48), *(unsigned __int16 *)(v61 + 52));
  v62 = FlowAction.init(_:id:title:presentationContext:animationBehavior:presentationStyle:destinationPageHeader:actionMetrics:)(v88, 0, 0, 0, 0, &v91[1], 0, 48, v91, v60);
  v92 = v61;
  v93 = sub_F1C0((unint64_t *)&qword_3B0C40, (void (*)(uint64_t))type metadata accessor for FlowAction, (uint64_t)&protocol conformance descriptor for Action);
  *(_QWORD *)&v91[1] = v62;
  v63 = (int *)type metadata accessor for Link(0);
  v64 = (char *)a6 + v63[10];
  v65 = static MetricsTargetType.link.getter(v63);
  static ImpressionMetrics.shelfItem(id:idType:uniqueID:impressionType:kind:name:)(v56, v57, 0, 0, 0, 0, v65, v66, 0, 0, *v42, v42[1]);
  swift_bridgeObjectRelease();
  v67 = type metadata accessor for ImpressionMetrics(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v67 - 8) + 56))(v64, 0, 1, v67);
  v68 = (char *)a6 + v63[11];
  *((_QWORD *)v68 + 4) = 0;
  *(_OWORD *)v68 = 0u;
  *((_OWORD *)v68 + 1) = 0u;
  v69 = v77;
  *a6 = v78;
  a6[1] = v69;
  v70 = v73;
  a6[2] = v76;
  a6[3] = v70;
  a6[4] = 0;
  a6[5] = 0;
  sub_15BD4(v90, (uint64_t)a6 + v63[7], &qword_3BEB70);
  *((_BYTE *)a6 + v63[8]) = 8;
  sub_15BD4((uint64_t)&v91[1], (uint64_t)a6 + v63[9], &qword_3B0C50);
  return sub_145D8(v89, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
}

uint64_t sub_11805C(uint64_t result)
{
  if (result != 1)
    return swift_release(result);
  return result;
}

uint64_t sub_11806C(uint64_t result)
{
  if (result != 1)
    return swift_retain(result);
  return result;
}

uint64_t sub_11807C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  id v32;
  _QWORD v33[6];
  _QWORD v34[5];

  v31 = a2;
  v32 = a3;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2820);
  __chkstk_darwin(v8);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ClickLocationElement(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  __chkstk_darwin(v11);
  v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v17 = (char *)&v30 - v16;
  v34[3] = type metadata accessor for SheetAction(0);
  v34[4] = sub_F1C0(&qword_3B2808, (void (*)(uint64_t))type metadata accessor for SheetAction, (uint64_t)&protocol conformance descriptor for Action);
  v34[0] = a1;
  v18 = *(_QWORD *)(a5 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_objectGraph);
  sub_267BC(a4, (uint64_t)v10, &qword_3B2820);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    swift_retain();
    swift_retain();
    sub_1459C((uint64_t)v10, &qword_3B2820);
  }
  else
  {
    v19 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
    v19(v17, v10, v11);
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v14, v17, v11);
    v20 = *(unsigned __int8 *)(v12 + 80);
    v21 = (v20 + 16) & ~v20;
    v22 = swift_allocObject(&unk_381610, v21 + v13, v20 | 7);
    v19((char *)(v22 + v21), v14, v11);
    swift_retain_n(v18, 2);
    swift_retain();
    v23 = BaseObjectGraph.transformingMetricsFieldsContext(with:)(sub_3C658, v22);
    swift_release_n(v18, 2);
    swift_release(v22);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v17, v11);
    v18 = v23;
  }
  type metadata accessor for ActionRunnerOptions(0);
  v24 = swift_retain();
  v25 = BaseObjectGraph.__allocating_init(_:)(v24);
  sub_267BC(v31, (uint64_t)v33, (uint64_t *)&unk_3BC540);
  v33[4] = v32;
  v26 = v32;
  v27 = _s8ShelfKit19ActionRunnerOptionsC04withC6OriginyACXDAA0cG0VSgF_0((uint64_t)v33);
  sub_1459C((uint64_t)v33, &qword_3B18E8);
  swift_release(v25);
  sub_150C8((uint64_t)v34, (uint64_t)v33);
  v33[5] = v27;
  v28 = ActionPerformer.callAsFunction()();
  swift_release(v18);
  sub_23740(v33);
  __swift_destroy_boxed_opaque_existential_1(v34);
  return v28;
}

uint64_t sub_118330(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t (**object)(_QWORD, uint64_t, uint64_t, Swift::String *, uint64_t, uint64_t, void *);
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t ObjectType;
  uint64_t v44;
  Swift::String v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  char v50;
  Swift::String v51;

  v2 = v1;
  v4 = type metadata accessor for ExtendedLaunchStatus(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for PageContent(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *v10 = 0;
  swift_storeEnumTagMultiPayload(v10, v11, 0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B27B0);
  swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  *(_QWORD *)(v2 + 16) = CurrentValueSubject.init(_:)(v10);
  v45._countAndFlagsBits = (uint64_t)_swiftEmptyArrayStorage;
  v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8780);
  swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  *(_QWORD *)(v2 + 24) = CurrentValueSubject.init(_:)(&v45);
  v14 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v51._object = (void *)0xE700000000000000;
  v15._countAndFlagsBits = 0x494C5F454C544954;
  v15._object = (void *)0xED00005952415242;
  v16._countAndFlagsBits = 0;
  v16._object = (void *)0xE000000000000000;
  v51._countAndFlagsBits = 0x7972617262694CLL;
  v17 = NSLocalizedString(_:tableName:bundle:value:comment:)(v15, (Swift::String_optional)0, (NSBundle)v14, v16, v51);

  v45 = v17;
  LODWORD(v46) = 0;
  BYTE4(v46) = 3;
  v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8770);
  swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
  *(_QWORD *)(v2 + 32) = CurrentValueSubject.init(_:)(&v45);
  *(_BYTE *)(v2 + 40) = 1;
  v19 = v2 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_interactionContextPage;
  v20 = type metadata accessor for InteractionContext.Page(0);
  swift_storeEnumTagMultiPayload(v19, v20, 11);
  v21 = OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_refreshControls;
  LOBYTE(v45._countAndFlagsBits) = 1;
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2770);
  swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
  *(_QWORD *)(v2 + v21) = CurrentValueSubject.init(_:)(&v45);
  v23 = OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_hasLoadedContent;
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for ExtendedLaunchStatus.loading(_:), v4);
  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4448);
  swift_allocObject(v24, *(unsigned int *)(v24 + 48), *(unsigned __int16 *)(v24 + 52));
  *(_QWORD *)(v2 + v23) = CurrentValueSubject.init(_:)(v7);
  *(_BYTE *)(v2 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_isLibraryEmpty) = 2;
  *(_QWORD *)(v2 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_subscriptions) = _swiftEmptyArrayStorage;
  v25 = v2 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_recentlyUpdatedShelf;
  v26 = type metadata accessor for ModernShelf(0);
  v27 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56);
  v27(v25, 1, 2, v26);
  v27(v2 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_recentlyUpdatedHasMoreShelf, 1, 1, v26);
  v27(v2 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_recentlyUnfollowedTipShelf, 1, 1, v26);
  v27(v2 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_libraryTipShelf, 1, 1, v26);
  v27(v2 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_recentlyUnfollowedLinkShelf, 1, 1, v26);
  *(_QWORD *)(v2 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_recentlyUnfollowedShowsCount) = 0;
  *(_QWORD *)(v2 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_libraryItems) = _swiftEmptyArrayStorage;
  v28 = OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_isEditing;
  LOBYTE(v45._countAndFlagsBits) = 0;
  v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B20D0);
  swift_allocObject(v29, *(unsigned int *)(v29 + 48), *(unsigned __int16 *)(v29 + 52));
  *(_QWORD *)(v2 + v28) = CurrentValueSubject.init(_:)(&v45);
  v30 = v2 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_storageControllerObserver;
  *(_QWORD *)v30 = 0;
  *(_BYTE *)(v30 + 8) = 1;
  v31 = v2 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter____lazy_storage___reorderingExtension;
  *(_QWORD *)v31 = 1;
  *(_QWORD *)(v31 + 40) = 0;
  *(_OWORD *)(v31 + 24) = 0u;
  *(_OWORD *)(v31 + 8) = 0u;
  v32 = (_QWORD *)(v2 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter____lazy_storage___deletableExtension);
  *v32 = 1;
  v32[1] = 0;
  v32[2] = 0;
  v32[3] = 0;
  *(_QWORD *)(v2 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter____lazy_storage___multiSelectableExtension) = 1;
  v27(v2 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_linksShelf, 1, 2, v26);
  v27(v2 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_stationsShelf, 1, 2, v26);
  *(_QWORD *)(v2 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_objectGraph) = a1;
  v33 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3BF760);
  swift_retain();
  BaseObjectGraph.inject<A>(_:)(&v45, v33, v33);
  object = (uint64_t (**)(_QWORD, uint64_t, uint64_t, Swift::String *, uint64_t, uint64_t, void *))v45._object;
  v35 = (uint64_t *)(v2 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_libraryDataProvider);
  *v35 = v45._countAndFlagsBits;
  v35[1] = (uint64_t)object;
  v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4F28);
  BaseObjectGraph.inject<A>(_:)(&v45, v36, v36);
  sub_F4D8((__int128 *)&v45._countAndFlagsBits, v2 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_libraryObserverProvider);
  v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BC3F0);
  BaseObjectGraph.inject<A>(_:)(&v45, v37, v37);
  sub_F4D8((__int128 *)&v45._countAndFlagsBits, v2 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_libraryActionController);
  v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BE9F0);
  BaseObjectGraph.inject<A>(_:)(&v45, v38, v38);
  sub_F4D8((__int128 *)&v45._countAndFlagsBits, v2 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_storeDataProvider);
  v39 = type metadata accessor for RecentlyUnfollowedTipProvider();
  swift_allocObject(v39, 80, 7);
  v40 = swift_retain();
  *(_QWORD *)(v2 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_recentlyUnfollowedTipProvider) = RecentlyUnfollowedTipProvider.init(asPartOf:)(v40);
  v41 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8E00);
  BaseObjectGraph.inject<A>(_:)(&v45, v41, v41);
  sub_F4D8((__int128 *)&v45._countAndFlagsBits, v2 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_libraryTipProvider);
  ObjectType = swift_getObjectType();
  LOWORD(v45._countAndFlagsBits) = 256;
  BYTE2(v45._countAndFlagsBits) = 7;
  *(_WORD *)((char *)&v45._countAndFlagsBits + 7) = 0;
  *(_DWORD *)((char *)&v45._countAndFlagsBits + 3) = 16;
  *(_DWORD *)((char *)&v45._object + 1) = 50463489;
  *(_WORD *)((char *)&v45._object + 5) = 4103;
  v46 = 0u;
  v47 = 0u;
  v48 = 0u;
  v49 = 0u;
  v50 = -1;
  *(_QWORD *)(v2 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter_updatedShowsPublisher) = object[23](0, 1, 2, &v45, 50, ObjectType, object);
  sub_10D50C();
  return v2;
}

uint64_t sub_11891C(uint64_t a1)
{
  uint64_t v1;

  return sub_110784(a1, v1);
}

uint64_t sub_118924(uint64_t a1)
{
  uint64_t result;

  result = sub_F1C0(&qword_3BA648, (void (*)(uint64_t))type metadata accessor for LibraryPresenter, (uint64_t)&protocol conformance descriptor for LibraryPresenter);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for LibraryPresenter(uint64_t a1)
{
  uint64_t result;

  result = qword_3BA6C0;
  if (!qword_3BA6C0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LibraryPresenter);
  return result;
}

uint64_t sub_11899C()
{
  return sub_F1C0(&qword_3BA650, (void (*)(uint64_t))type metadata accessor for LibraryPresenter, (uint64_t)&protocol conformance descriptor for LibraryPresenter);
}

uint64_t sub_1189C8()
{
  return sub_32914(&qword_3B4EA0, &qword_3B4E98, (uint64_t)&protocol conformance descriptor for AnyPaginatedPublisher<A, B>);
}

double sub_1189F4@<D0>(_OWORD *a1@<X8>)
{
  __int128 v2;
  double result;
  _OWORD v4[2];
  __int128 v5;

  LibraryPresenter.reorderingExtension.getter((uint64_t (**)(uint64_t, uint64_t))v4);
  v2 = v4[1];
  *a1 = v4[0];
  a1[1] = v2;
  result = *(double *)&v5;
  a1[2] = v5;
  return result;
}

double sub_118A38@<D0>(_OWORD *a1@<X8>)
{
  double result;
  __int128 v3;
  _OWORD v4[2];

  LibraryPresenter.deletableExtension.getter(v4);
  result = *(double *)v4;
  v3 = v4[1];
  *a1 = v4[0];
  a1[1] = v3;
  return result;
}

_QWORD *sub_118A74@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = LibraryPresenter.multiSelectableExtension.getter();
  *a1 = result;
  return result;
}

uint64_t sub_118A9C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*a2 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter____lazy_storage___multiSelectableExtension);
  *(_QWORD *)(*a2 + OBJC_IVAR____TtC8ShelfKit16LibraryPresenter____lazy_storage___multiSelectableExtension) = *a1;
  swift_retain();
  return sub_11805C(v2);
}

uint64_t sub_118AD4()
{
  return type metadata accessor for LibraryPresenter(0);
}

void sub_118ADC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD v9[18];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;

  v9[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v9[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v9[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  v9[3] = &unk_2F60D8;
  v2 = type metadata accessor for InteractionContext.Page(319);
  if (v3 <= 0x3F)
  {
    v9[4] = *(_QWORD *)(v2 - 8) + 64;
    v9[5] = (char *)&value witness table for Builtin.NativeObject + 64;
    v9[6] = (char *)&value witness table for Builtin.NativeObject + 64;
    v9[7] = (char *)&value witness table for Builtin.NativeObject + 64;
    v9[8] = &unk_2F60F0;
    v9[9] = &unk_2F6108;
    v9[10] = &unk_2F6108;
    v9[11] = &unk_2F6108;
    v9[12] = (char *)&value witness table for Builtin.NativeObject + 64;
    v9[13] = &unk_2F6108;
    v9[14] = (char *)&value witness table for Builtin.NativeObject + 64;
    v9[15] = &unk_2F6120;
    v9[16] = (char *)&value witness table for Builtin.BridgeObject + 64;
    sub_6409C(319, (unint64_t *)&unk_3B75B8, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Loadable);
    if (v5 <= 0x3F)
    {
      v6 = *(_QWORD *)(v4 - 8) + 64;
      v9[17] = v6;
      sub_6409C(319, (unint64_t *)&qword_3B3460, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
      if (v8 <= 0x3F)
      {
        v10 = *(_QWORD *)(v7 - 8) + 64;
        v11 = v10;
        v12 = v10;
        v13 = v10;
        v14 = (char *)&value witness table for Builtin.Int64 + 64;
        v15 = (char *)&value witness table for Builtin.BridgeObject + 64;
        v16 = (char *)&value witness table for Builtin.NativeObject + 64;
        v17 = &unk_2F6138;
        v18 = &unk_2F6150;
        v19 = &unk_2F6168;
        v20 = &unk_2F6180;
        v21 = v6;
        v22 = v6;
        swift_updateClassMetadata2(a1, 256, 31, v9, a1 + 80);
      }
    }
  }
}

uint64_t method lookup function for LibraryPresenter(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for LibraryPresenter);
}

uint64_t dispatch thunk of LibraryTabElementGroupManager.__allocating_init(asPartOf:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 328))();
}

uint64_t sub_118C64(uint64_t *a1)
{
  uint64_t v1;

  return sub_117578(a1, v1);
}

uint64_t sub_118C6C()
{
  uint64_t v0;

  return sub_114674(v0);
}

uint64_t sub_118C74()
{
  uint64_t v0;

  return sub_1133E4(v0);
}

uint64_t sub_118C7C()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1((_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_118CA0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_114434(a1, a2, (_QWORD *)(v2 + 16));
}

uint64_t sub_118CA8()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1((_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_118CD4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_113EF4(a1, a2, (_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 56));
}

uint64_t sub_118CE0(uint64_t a1)
{
  uint64_t v1;

  return sub_1141A4(a1, v1);
}

uint64_t sub_118CE8(uint64_t *a1)
{
  uint64_t v1;

  return sub_11619C(a1, v1);
}

uint64_t sub_118CF0@<X0>(char *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_116700(a1, v2, a2);
}

uint64_t sub_118CF8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_116890(a1, v2, a2);
}

uint64_t sub_118D00(uint64_t a1)
{
  uint64_t v1;

  return sub_11696C(a1, v1);
}

uint64_t sub_118D08@<X0>(char *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_115B68(a1, v2, a2);
}

uint64_t sub_118D10(uint64_t a1)
{
  uint64_t v1;

  return sub_115D40(a1, v1);
}

uint64_t sub_118D18(uint64_t *a1)
{
  uint64_t v1;

  return sub_115B0C(a1, v1);
}

uint64_t sub_118D20(uint64_t a1, int a2)
{
  uint64_t v2;

  return sub_115198(a1, a2, v2);
}

uint64_t sub_118D28()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_118D4C(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v1 + 16))(a1, *(unsigned __int8 *)(a1 + 16));
}

uint64_t sub_118D70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_117418(a1, *(_QWORD **)(v2 + 16), *(_BYTE *)(v2 + 24), a2);
}

uint64_t sub_118D90()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_118DBC()
{
  uint64_t v0;

  return sub_117920(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_118DC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for ClickLocationElement(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_118E24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_118D70(a1, a2);
}

uint64_t StoreImageProvider.assetCaches.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for AssetCaches(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t StoreImageProvider.init(asPartOf:)@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  void *v22;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3BF730);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BA928);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for AssetDownloaders(0, v10);
  v14 = BaseObjectGraph.inject<A>(_:)(&v22, v13, v13);
  v15 = v22;
  AssetDownloaders.storeArtworkSource.getter(v14);
  v16 = sub_32914((unint64_t *)&qword_3BF740, (uint64_t *)&unk_3BF730, (uint64_t)&protocol conformance descriptor for ForegroundSessionSource<A>);
  AssetSource.eraseToAnyAssetSource()(v4, v16);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v17 = type metadata accessor for AssetCaches(0);
  BaseObjectGraph.inject<A>(_:)(a2, v17, v17);
  sub_676C8();
  v18 = static OS_dispatch_queue.uiAssetPreparationQueue.getter();
  swift_release(a1);

  v19 = type metadata accessor for StoreImageProvider(0);
  result = (*(uint64_t (**)(char *, char *, uint64_t))(v9 + 32))(&a2[*(int *)(v19 + 20)], v12, v8);
  *(_QWORD *)&a2[*(int *)(v19 + 24)] = v18;
  return result;
}

uint64_t StoreImageProvider.init(source:assetCaches:workQueue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v8 = type metadata accessor for StoreImageProvider(0);
  v9 = a4 + *(int *)(v8 + 20);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BA928);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v9, a1, v10);
  v11 = type metadata accessor for AssetCaches(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a4, a2, v11);
  *(_QWORD *)(a4 + *(int *)(v8 + 24)) = a3;
  return result;
}

uint64_t type metadata accessor for StoreImageProvider(uint64_t a1)
{
  uint64_t result;

  result = qword_3BA9A8;
  if (!qword_3BA9A8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for StoreImageProvider);
  return result;
}

uint64_t StoreImageProvider.load(artwork:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = type metadata accessor for ArtworkRequest(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(v2);
  v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BA930);
  v28 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BA938);
  v29 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B6280);
  v11 = swift_allocObject(v10, 44, 7);
  *(_QWORD *)(v11 + 24) = 0;
  *(_QWORD *)(v11 + 32) = 0;
  *(_QWORD *)(v11 + 16) = 0;
  *(_DWORD *)(v11 + 40) = 0;
  sub_1193E8(a1, (uint64_t)v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  v12 = *(unsigned __int8 *)(v3 + 80);
  v13 = (v12 + 24) & ~v12;
  v14 = (v4 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  v15 = swift_allocObject(&unk_3816C0, v14 + 17, v12 | 7);
  *(_QWORD *)(v15 + 16) = v11;
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(v15 + v13, v5, v2);
  v16 = v15 + v14;
  *(_QWORD *)v16 = "StoreImageProvider";
  *(_QWORD *)(v16 + 8) = 18;
  *(_BYTE *)(v16 + 16) = 2;
  v17 = swift_allocObject(&unk_3816E8, 41, 7);
  *(_QWORD *)(v17 + 16) = v11;
  *(_QWORD *)(v17 + 24) = "StoreImageProvider";
  *(_QWORD *)(v17 + 32) = 18;
  *(_BYTE *)(v17 + 40) = 2;
  v18 = swift_allocObject(&unk_381710, 41, 7);
  *(_QWORD *)(v18 + 16) = v11;
  *(_QWORD *)(v18 + 24) = "StoreImageProvider";
  *(_QWORD *)(v18 + 32) = 18;
  *(_BYTE *)(v18 + 40) = 2;
  v19 = swift_allocObject(&unk_381738, 41, 7);
  *(_QWORD *)(v19 + 16) = v11;
  *(_QWORD *)(v19 + 24) = "StoreImageProvider";
  *(_QWORD *)(v19 + 32) = 18;
  *(_BYTE *)(v19 + 40) = 2;
  v20 = sub_32914(&qword_3BA940, &qword_3BA930, (uint64_t)&protocol conformance descriptor for EmitLifecycle<A>);
  swift_retain_n(v11, 4);
  v21 = v26;
  Publisher.handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)(sub_119C7C, v15, sub_A2D90, v17, sub_A324C, v18, sub_A3A14, v19, 0, 0, v26, v20);
  swift_release(v15);
  swift_release(v17);
  swift_release(v18);
  swift_release(v19);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v7, v21);
  v22 = sub_32914(&qword_3BA948, &qword_3BA938, (uint64_t)&protocol conformance descriptor for Publishers.HandleEvents<A>);
  v23 = v27;
  v24 = Publisher.eraseToAnyPublisher()(v27, v22);
  swift_release(v11);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v9, v23);
  return v24;
}

uint64_t sub_1193E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  _QWORD *v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t OpaqueTypeConformance2;
  uint64_t v69;
  char v70;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD v101[7];
  uint64_t v102;

  v99 = a2;
  v98 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BA9F0);
  v100 = *(_QWORD *)(v98 - 8);
  __chkstk_darwin(v98);
  v97 = (char *)&v72 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B9B40);
  v6 = *(_QWORD *)(v5 - 8);
  v95 = v5;
  v96 = v6;
  __chkstk_darwin(v5);
  v94 = (char *)&v72 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ArtworkRequest(0);
  v78 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v72 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BA9F8);
  v81 = *(_QWORD *)(v79 - 8);
  __chkstk_darwin(v79);
  v75 = (char *)&v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)&v72 - v13;
  v82 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BAA00);
  v83 = *(_QWORD *)(v82 - 8);
  __chkstk_darwin(v82);
  v74 = (char *)&v72 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BAA08);
  v85 = *(_QWORD *)(v84 - 8);
  __chkstk_darwin(v84);
  v76 = (char *)&v72 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BAA10);
  v87 = *(_QWORD *)(v86 - 8);
  __chkstk_darwin(v86);
  v77 = (char *)&v72 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BAA18);
  v93 = *(_QWORD *)(v90 - 8);
  __chkstk_darwin(v90);
  v80 = (char *)&v72 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BAA20);
  v92 = *(_QWORD *)(v91 - 8);
  __chkstk_darwin(v91);
  v89 = (char *)&v72 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = static ArtworkFormat.preferredFormat.getter(v20);
  v88 = a1;
  ArtworkRequest.with(format:)(v21);
  v22 = type metadata accessor for StoreImageProvider(0);
  v23 = v2 + *(int *)(v22 + 20);
  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BA928);
  v25 = sub_32914(&qword_3BAA28, &qword_3BA928, (uint64_t)&protocol conformance descriptor for AnyAssetSource<A, B>);
  AssetMetadata.fetch<A>(source:)(v23, v8, v24, &protocol witness table for ArtworkRequest, v25);
  v26 = v8;
  (*(void (**)(char *, uint64_t))(v78 + 8))(v10, v8);
  v27 = v75;
  AssetMetadata.fetch<A>(source:)(v23, v26, v24, &protocol witness table for ArtworkRequest, v25);
  v28 = sub_32914(&qword_3BAA30, &qword_3BA9F8, (uint64_t)&protocol conformance descriptor for AssetSourceStep<A, B>);
  v29 = v74;
  v30 = v79;
  AssetProcessingStep.fallback<A>(to:rethrow:)(v27, 0, v79, v79, v28, v28);
  v31 = *(void (**)(char *, uint64_t))(v81 + 8);
  v31(v27, v30);
  v31(v14, v30);
  v32 = *(int *)(v22 + 24);
  v33 = v73;
  v34 = *(_QWORD *)(v73 + v32);
  v35 = sub_32914(&qword_3BAA38, &qword_3BAA00, (uint64_t)&protocol conformance descriptor for FallbackProcessingStep<A, B>);
  v36 = v76;
  v37 = v34;
  v38 = v82;
  AssetProcessingStep.receive(on:)(v37, v82, v35);
  (*(void (**)(char *, uint64_t))(v83 + 8))(v29, v38);
  v39 = sub_32914(&qword_3BAA40, &qword_3BAA08, (uint64_t)&protocol conformance descriptor for ReceiveOnAssetProcessingStep<A>);
  v40 = v77;
  v41 = v84;
  AssetProcessingStep<>.prepareImageForDestination()(v84, v39);
  (*(void (**)(char *, uint64_t))(v85 + 8))(v36, v41);
  v42 = *(_QWORD *)(v33 + v32);
  v43 = sub_32914(&qword_3BAA48, &qword_3BAA10, (uint64_t)&protocol conformance descriptor for PrepareUIImageProcessingStep<A>);
  v44 = v80;
  v45 = v42;
  v46 = v86;
  AssetProcessingStep.subscribe(on:)(v45, v86, v43);
  v47 = (*(uint64_t (**)(char *, uint64_t))(v87 + 8))(v40, v46);
  v48 = v94;
  AssetCaches.preparedArtwork.getter(v47);
  v49 = v95;
  v50 = CacheDomain.memory.getter(v95);
  (*(void (**)(char *, uint64_t))(v96 + 8))(v48, v49);
  v101[0] = v50;
  LOBYTE(v102) = 4;
  v51 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BAA50);
  v52 = sub_32914(&qword_3BAA58, &qword_3BAA18, (uint64_t)&protocol conformance descriptor for SubscribeOnAssetProcessingStep<A>);
  v53 = sub_32914(&qword_3BAA60, &qword_3BAA50, (uint64_t)&protocol conformance descriptor for InMemoryAssetCache<A, B>);
  v54 = sub_11A784(&qword_3BAA68, (uint64_t)&protocol conformance descriptor for PreparedArtworkRequest);
  v55 = sub_11A784(&qword_3BAA70, (uint64_t)&protocol conformance descriptor for PreparedArtworkRequest);
  v56 = sub_11A784(&qword_3BAA78, (uint64_t)&protocol conformance descriptor for PreparedArtworkRequest);
  v57 = v89;
  v58 = v90;
  AssetProcessingStep<>.cache<A>(_:format:overwrite:)(v101, &v102, 1, v90, v51, v52, v53, v54, v55, v56);
  swift_release(v50);
  v59 = v44;
  v60 = v58;
  (*(void (**)(char *, uint64_t))(v93 + 8))(v59, v58);
  v61 = v97;
  v62 = v91;
  CacheAssetProcessingStep.publisher.getter(v91);
  (*(void (**)(char *, uint64_t))(v92 + 8))(v57, v62);
  v63 = ArtworkRequest.trace.getter(&v102);
  v64 = (void *)ArtworkRequest.key.getter(v63);
  v65 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
  v67 = v66;

  v101[0] = type metadata accessor for PreparedArtworkRequest(255);
  v101[1] = v60;
  v101[2] = v51;
  v101[3] = v54;
  v101[4] = v55;
  v101[5] = v52;
  v101[6] = v53;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v101, &opaque type descriptor for <<opaque return type of CacheAssetProcessingStep.publisher>>, 1);
  v69 = v98;
  v70 = static EmitLifecycle.defaultVerbosity.getter(v98, OpaqueTypeConformance2);
  Publisher.emitLifecycle(for:name:definesInterval:context:verbose:)(&v102, "StoreImageFetch", 15, 2, 0, v65, v67, v70 & 1, v69, OpaqueTypeConformance2);
  swift_bridgeObjectRelease();
  sub_A3A24((uint64_t)&v102);
  return (*(uint64_t (**)(char *, uint64_t))(v100 + 8))(v61, v69);
}

void sub_119B8C(uint64_t a1, os_unfair_lock_s *a2, void (*a3)(char *, uint64_t), const char *a4, uint64_t a5, int a6)
{
  uint64_t v10;
  os_unfair_lock_s *v11;

  v10 = (uint64_t)&a2[4];
  v11 = a2 + 10;
  os_unfair_lock_lock(a2 + 10);
  sub_119CD8(v10, a3, a4, a5, a6);
  os_unfair_lock_unlock(v11);
}

uint64_t sub_119BFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for ArtworkRequest(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 17;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

void sub_119C7C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for ArtworkRequest(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  sub_119B8C(a1, *(os_unfair_lock_s **)(v1 + 16), (void (*)(char *, uint64_t))(v1 + v4), *(const char **)v5, *(_QWORD *)(v5 + 8), *(unsigned __int8 *)(v5 + 16));
}

void sub_119CD8(uint64_t a1, void (*a2)(char *, uint64_t), const char *a3, uint64_t a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  objc_class *v28;
  objc_class *v29;
  uint64_t v30;
  uint64_t v31;
  objc_class *v32;
  char v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  Class isa;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t *v48;
  char *v49;
  void (*v50)(char *, char *, uint64_t);
  uint8_t *v51;
  uint64_t v52;
  uint64_t v53;
  os_signpost_id_t v54;
  os_log_t v55;
  uint64_t v56;
  uint8_t *v57;
  void (*v58)(char *, char *, uint64_t);
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  char *v67;
  os_log_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(char *, uint64_t);
  char *v77;
  uint64_t v78;
  uint64_t v79[3];
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  v77 = (char *)a3;
  LODWORD(v75) = a5;
  v76 = a2;
  v74 = type metadata accessor for OSSignpostID(0);
  v5 = *(_QWORD *)(v74 - 8);
  __chkstk_darwin(v74);
  v7 = (char *)&v64 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v64 - v9;
  v11 = type metadata accessor for OSSignposter(0);
  v12 = *(NSObject **)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v64 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v17 = (char *)&v64 - v16;
  v18 = type metadata accessor for UUID(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v23 = (char *)&v64 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*v21)
  {
    v65 = v20;
    v66 = v21;
    v67 = v14;
    v68 = v12;
    v72 = v7;
    v73 = v17;
    v70 = v11;
    v71 = v10;
    v69 = v5;
    v24 = v74;
    ArtworkRequest.trace.getter(v79);
    v25 = v80;
    if (v80)
    {
      v26 = v81;
      __swift_project_boxed_opaque_existential_1(v79, v80);
      v27 = dispatch thunk of Trace.identifier.getter(v25, v26);
      v29 = v28;
      v30 = __swift_destroy_boxed_opaque_existential_1(v79);
    }
    else
    {
      v31 = sub_A3A24((uint64_t)v79);
      UUID.init()(v31);
      v27 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
      v29 = v32;
      v30 = (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v23, v65);
    }
    v33 = v75;
    v34 = static OSSignposter.artwork.getter(v30);
    v35 = v67;
    v36 = static OSSignposter.artwork.getter(v34);
    v37 = OSSignposter.logHandle.getter(v36);
    v38 = v71;
    OSSignpostID.init(log:)(v37);
    isa = v68[1].isa;
    v40 = v70;
    ((void (*)(char *, uint64_t))isa)(v35, v70);
    v41 = swift_bridgeObjectRetain_n(v29, 2);
    v42 = OSSignposter.logHandle.getter(v41);
    LODWORD(v74) = static os_signpost_type_t.begin.getter(v42);
    v43 = OS_os_log.signpostsEnabled.getter();
    v44 = v78;
    v45 = v69;
    v75 = v27;
    v76 = (void (*)(char *, uint64_t))isa;
    if ((v43 & 1) == 0)
    {
      swift_bridgeObjectRelease_n(v29, 2);

      isa = v29;
      v48 = v66;
      v49 = v72;
      (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v72, v38, v24);
LABEL_15:
      v59 = type metadata accessor for OSSignpostIntervalState(0);
      swift_allocObject(v59, *(unsigned int *)(v59 + 48), *(unsigned __int16 *)(v59 + 52));
      v60 = OSSignpostIntervalState.init(id:isOpen:)(v49, 1);
      v61 = v38;
      v62 = v60;
      (*(void (**)(char *, uint64_t))(v45 + 8))(v61, v24);
      v76(v73, v40);
      v63 = v75;
      *v48 = v62;
      v48[1] = v63;
      v48[2] = (uint64_t)isa;
      return;
    }
    v68 = v42;
    v46 = v72;
    if ((v33 & 1) == 0)
    {
      isa = v29;
      if (v77)
      {
        v47 = v27;
LABEL_14:
        v50 = *(void (**)(char *, char *, uint64_t))(v45 + 16);
        v50(v46, v38, v24);
        v51 = (uint8_t *)swift_slowAlloc(12, -1);
        v52 = swift_slowAlloc(32, -1);
        v79[0] = v52;
        *(_DWORD *)v51 = 136315138;
        swift_bridgeObjectRetain();
        v82 = sub_69298(v47, (unint64_t)isa, v79);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83);
        v53 = swift_bridgeObjectRelease_n(isa, 3);
        v54 = OSSignpostID.rawValue.getter(v53);
        v55 = v68;
        _os_signpost_emit_with_name_impl(&dword_0, v68, (os_signpost_type_t)v74, v54, v77, "[identifier=%{name=identifier}s] StoreImageProviderFetch", v51, 0xCu);
        swift_arrayDestroy(v52, 1, (char *)&type metadata for Any + 8);
        v56 = v52;
        v49 = v72;
        swift_slowDealloc(v56, -1, -1);
        v57 = v51;
        v38 = v71;
        swift_slowDealloc(v57, -1, -1);

        (*(void (**)(char *, uint64_t))(v45 + 8))(v49, v24);
        v58 = v50;
        v48 = v66;
        v40 = v70;
        v58(v49, v38, v24);
        goto LABEL_15;
      }
      goto LABEL_19;
    }
    if ((unint64_t)v77 >> 32)
    {
      __break(1u);
    }
    else
    {
      if (v77 >> 11 == 27)
      {
LABEL_18:
        __break(1u);
LABEL_19:
        swift_bridgeObjectRelease_n(isa, 2);
        __break(1u);
        return;
      }
      if (v77 >> 16 <= 0x10)
      {
        v47 = v27;
        isa = v29;
        v77 = sub_2441C8();
        v78 = v44;
        goto LABEL_14;
      }
    }
    __break(1u);
    goto LABEL_18;
  }
}

uint64_t sub_11A154()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 41, 7);
}

uint64_t *initializeBufferWithCopyOfBuffer for StoreImageProvider(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for AssetCaches(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BA928);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = *(int *)(a3 + 24);
    v13 = *(void **)((char *)a2 + v12);
    *(uint64_t *)((char *)a1 + v12) = (uint64_t)v13;
    v14 = v13;
  }
  return a1;
}

void destroy for StoreImageProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = type metadata accessor for AssetCaches(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BA928);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);

}

uint64_t initializeWithCopy for StoreImageProvider(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;

  v6 = type metadata accessor for AssetCaches(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BA928);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = *(void **)(a2 + v11);
  *(_QWORD *)(a1 + v11) = v12;
  v13 = v12;
  return a1;
}

uint64_t assignWithCopy for StoreImageProvider(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;

  v6 = type metadata accessor for AssetCaches(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BA928);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = *(void **)(a2 + v11);
  v13 = *(void **)(a1 + v11);
  *(_QWORD *)(a1 + v11) = v12;
  v14 = v12;

  return a1;
}

uint64_t initializeWithTake for StoreImageProvider(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for AssetCaches(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BA928);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  *(_QWORD *)(a1 + *(int *)(a3 + 24)) = *(_QWORD *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t assignWithTake for StoreImageProvider(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v6 = type metadata accessor for AssetCaches(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BA928);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = *(void **)(a1 + v11);
  *(_QWORD *)(a1 + v11) = *(_QWORD *)(a2 + v11);

  return a1;
}

uint64_t getEnumTagSinglePayload for StoreImageProvider(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_11A530);
}

uint64_t sub_11A530(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;

  v6 = type metadata accessor for AssetCaches(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BA928);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + *(int *)(a3 + 24));
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t storeEnumTagSinglePayload for StoreImageProvider(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_11A5E8);
}

uint64_t sub_11A5E8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = type metadata accessor for AssetCaches(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = __swift_instantiateConcreteTypeFromMangledName(&qword_3BA928);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  return result;
}

void sub_11A690(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[3];

  v2 = type metadata accessor for AssetCaches(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_11A720(319);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      v6[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
      swift_initStructMetadata(a1, 256, 3, v6, a1 + 16);
    }
  }
}

void sub_11A720(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!qword_3BA9B8)
  {
    v2 = type metadata accessor for ArtworkRequest(255);
    v3 = type metadata accessor for ArtworkContent(255);
    v4 = type metadata accessor for AnyAssetSource(a1, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_3BA9B8);
  }
}

uint64_t sub_11A784(unint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  if (!result)
  {
    type metadata accessor for PreparedArtworkRequest(255);
    result = swift_getWitnessTable(a2);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t View.asTransitionSourceView(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[2];

  v4[0] = 0xD00000000000001ELL;
  v4[1] = 0x800000000030F920;
  return View.matchedTransitionSource<A>(id:in:)(v4, a1, a2, &type metadata for String, a3, &protocol witness table for String);
}

uint64_t View.asTransitionSourceView(in:clipShape:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t OpaqueTypeConformance2;
  _BYTE v10[16];
  uint64_t v11;
  _QWORD v12[2];
  _QWORD v13[2];

  v13[0] = 0xD00000000000001ELL;
  v13[1] = 0x800000000030F920;
  v11 = a2;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BAA80);
  v12[0] = type metadata accessor for EmptyMatchedTransitionSourceConfiguration(255);
  v12[1] = &protocol witness table for EmptyMatchedTransitionSourceConfiguration;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v12, &opaque type descriptor for <<opaque return type of MatchedTransitionSourceConfiguration.clipShape(_:)>>, 1);
  View.matchedTransitionSource<A, B>(id:in:configuration:)(v13, a1, sub_11A900, v10, a3, &type metadata for String, v7, a4, &protocol witness table for String, OpaqueTypeConformance2);
  return swift_bridgeObjectRelease();
}

uint64_t sub_11A900()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = type metadata accessor for EmptyMatchedTransitionSourceConfiguration(0);
  return MatchedTransitionSourceConfiguration.clipShape(_:)(v1, v2, &protocol witness table for EmptyMatchedTransitionSourceConfiguration);
}

uint64_t sub_11A950(_QWORD *a1)
{
  uint64_t v1;
  _QWORD v3[4];

  v1 = a1[1];
  v3[0] = *a1;
  v3[1] = &type metadata for String;
  v3[2] = v1;
  v3[3] = &protocol witness table for String;
  return swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of View.matchedTransitionSource<A>(id:in:)>>, 1);
}

uint64_t sub_11A998(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t OpaqueTypeConformance2;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;

  v1 = *a1;
  v2 = a1[1];
  v3 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_3BAA80);
  v6 = type metadata accessor for EmptyMatchedTransitionSourceConfiguration(255);
  v7 = &protocol witness table for EmptyMatchedTransitionSourceConfiguration;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v6, &opaque type descriptor for <<opaque return type of MatchedTransitionSourceConfiguration.clipShape(_:)>>, 1);
  v6 = v1;
  v7 = &type metadata for String;
  v8 = v3;
  v9 = v2;
  v10 = &protocol witness table for String;
  v11 = OpaqueTypeConformance2;
  return swift_getOpaqueTypeConformance2(&v6, &opaque type descriptor for <<opaque return type of View.matchedTransitionSource<A, B>(id:in:configuration:)>>, 1);
}

uint64_t RefreshRecommendationsAction.__allocating_init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v1 = v0;
  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ActionMetrics(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v10);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  v14 = type metadata accessor for ImpressionMetrics(0);
  v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v12, 1, 1, v14);
  v16 = static ActionMetrics.notInstrumented.getter(v15);
  UUID.init()(v16);
  v17 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
  v19 = v18;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  *(_QWORD *)(v13 + 16) = v17;
  *(_QWORD *)(v13 + 24) = v19;
  *(_QWORD *)(v13 + 32) = 0;
  *(_QWORD *)(v13 + 40) = 0;
  *(_BYTE *)(v13 + 48) = 32;
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v13 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v9, v6);
  sub_23AB8((uint64_t)v12, v13 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics);
  return v13;
}

uint64_t RefreshRecommendationsAction.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v1 = v0;
  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ActionMetrics(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v10);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for ImpressionMetrics(0);
  v14 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
  v15 = static ActionMetrics.notInstrumented.getter(v14);
  UUID.init()(v15);
  v16 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
  v18 = v17;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  *(_QWORD *)(v1 + 16) = v16;
  *(_QWORD *)(v1 + 24) = v18;
  *(_QWORD *)(v1 + 32) = 0;
  *(_QWORD *)(v1 + 40) = 0;
  *(_BYTE *)(v1 + 48) = 32;
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v1 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v9, v6);
  sub_23AB8((uint64_t)v12, v1 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics);
  return v1;
}

void RefreshRecommendationsAction.init(deserializing:using:)()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000033, 0x800000000030A500, "ShelfKit/RefreshRecommendationsAction.swift", 43, 2, 22, 0);
  __break(1u);
}

void RefreshRecommendationsAction.init(uniqueId:title:presentationStyle:actionMetrics:impressionMetrics:)()
{
  _swift_stdlib_reportUnimplementedInitializer("ShelfKit.RefreshRecommendationsAction", 37, "init(uniqueId:title:presentationStyle:actionMetrics:impressionMetrics:)", 71, 0);
  __break(1u);
}

uint64_t sub_11ADCC()
{
  return type metadata accessor for RefreshRecommendationsAction(0);
}

uint64_t type metadata accessor for RefreshRecommendationsAction(uint64_t a1)
{
  uint64_t result;

  result = qword_3BAAB0;
  if (!qword_3BAAB0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RefreshRecommendationsAction);
  return result;
}

uint64_t method lookup function for RefreshRecommendationsAction(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for RefreshRecommendationsAction);
}

uint64_t ShowEntity.init(offer:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t result;
  void *v37;
  id v38;
  void *v39;
  char *v40;
  void (*v41)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, char *, uint64_t);
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;

  v56 = a2;
  v3 = (int *)type metadata accessor for ShowOffer(0);
  __chkstk_darwin(v3);
  v55 = (uint64_t)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v48 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
  __chkstk_darwin(v8);
  v59 = (uint64_t)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3D88);
  __chkstk_darwin(v10);
  v58 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
  __chkstk_darwin(v12);
  v14 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v53 = (uint64_t)&v47 - v16;
  __chkstk_darwin(v17);
  v19 = (char *)&v47 - v18;
  v20 = *a1;
  v60 = *a1;
  v21 = sub_144B4();
  v22 = BinaryInteger.description.getter(&type metadata for UInt64, v21);
  v51 = v23;
  v52 = v22;
  v24 = (uint64_t)a1 + v3[13];
  v54 = v19;
  sub_267BC(v24, (uint64_t)v19, &qword_3B4370);
  v25 = *((unsigned __int8 *)a1 + v3[10]);
  if (v25 == 2)
  {
    v57 = 0;
  }
  else
  {
    v26 = ContentRating.rawValue.getter(v25 & 1);
    v28 = v27;
    v57 = 1;
    v30 = ContentRating.rawValue.getter(1);
    if (v26 != v30 || v28 != v29)
      v57 = _stringCompareWithSmolCheck(_:_:expecting:)(v26, v28, v30, v29, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v32 = a1[1];
  v31 = a1[2];
  v33 = (uint64_t *)((char *)a1 + v3[8]);
  v34 = v33[1];
  v50 = *v33;
  v35 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v58, 1, 1, v35);
  sub_267BC((uint64_t)a1 + v3[7], v59, &qword_3BEB70);
  result = objc_opt_self(MTPodcast);
  if (v20 < 0)
  {
    __break(1u);
  }
  else
  {
    v37 = (void *)result;
    v49 = v32;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v38 = objc_msgSend(v37, "storeCleanURLForAdamID:", v20);
    if (v38)
    {
      v39 = v38;
      v40 = v48;
      static URL._unconditionallyBridgeFromObjectiveC(_:)(v38);

      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v14, v40, v5);
      v41 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
      v41(v14, 0, 1, v5);
    }
    else
    {
      v41 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
      v41(v14, 1, 1, v5);
    }
    v42 = v55;
    sub_A8FA0((uint64_t)a1, v55);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v14, 1, v5) == 1)
    {
      v43 = v53;
      sub_267BC(v42 + v3[13], v53, &qword_3B4370);
      sub_A952C(v42);
      sub_2828C((uint64_t)v14);
    }
    else
    {
      sub_A952C(v42);
      v44 = *(void (**)(uint64_t, char *, uint64_t))(v6 + 32);
      v43 = v53;
      v44(v53, v14, v5);
      v41((char *)v43, 0, 1, v5);
    }
    if (v34)
      v45 = v34;
    else
      v45 = 0xE000000000000000;
    v46 = v50;
    if (!v34)
      v46 = 0;
    ShowEntity.init(id:objectID:uuid:adamID:feedURL:explicit:title:description:provider:lastDatePlayed:followed:notificationsEnabled:hidePlayedEpisodes:removePlayedDownloads:artworkModel:artworkData:shareURL:)(v52, v51, 0, 0, 0, v20, v54, v57 & 1, v49, v31, 0, 0xE000000000000000, v46, v45, v58, 0, v59, 0, 0xF000000000000000,
      v43);
    return sub_A952C((uint64_t)a1);
  }
  return result;
}

uint64_t MacSearchPresenter.interactionContextPage.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_14510(v1 + OBJC_IVAR____TtC8ShelfKit18MacSearchPresenter_interactionContextPage, a1, (uint64_t (*)(_QWORD))&type metadata accessor for InteractionContext.Page);
}

void MacSearchPresenter.dependenciesDidChange(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  os_unfair_lock_s *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 24) + 16);
  v2 = v1 + *(_QWORD *)(class metadata base offset for ManagedBuffer + *(_QWORD *)v1 + 16);
  v3 = (os_unfair_lock_s *)(v1 + ((*(unsigned int *)(*(_QWORD *)v1 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v3);
  sub_28D5E0(v2);
  os_unfair_lock_unlock(v3);
}

_QWORD *MacSearchPresenter.__allocating_init(asPartOf:with:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  v3 = sub_11D544(a1);
  swift_release(a1);
  return v3;
}

_QWORD *MacSearchPresenter.init(asPartOf:with:)(uint64_t a1)
{
  _QWORD *v2;

  v2 = sub_11D544(a1);
  swift_release(a1);
  return v2;
}

Swift::Void __swiftcall MacSearchPresenter.viewDidLoad()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  double v16;
  double v17;
  double *v18;
  double v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  id v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD v106[3];
  __int128 v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  uint64_t v111;
  char v112[8];

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BAB80);
  v101 = *(_QWORD *)(v2 - 8);
  v102 = v2;
  __chkstk_darwin(v2);
  v100 = (char *)&v83 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BAB88);
  v104 = *(_QWORD *)(v4 - 8);
  v105 = v4;
  __chkstk_darwin(v4);
  v103 = (char *)&v83 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2B18);
  __chkstk_darwin(v6);
  v97 = (char *)&v83 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B35D8);
  v86 = *(_QWORD *)(v87 - 8);
  __chkstk_darwin(v87);
  v85 = (char *)&v83 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4A10);
  v92 = *(_QWORD *)(v93 - 8);
  __chkstk_darwin(v93);
  v90 = (char *)&v83 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4A18);
  v95 = *(_QWORD *)(v96 - 8);
  __chkstk_darwin(v96);
  v94 = (char *)&v83 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BAB90);
  v84 = *(_QWORD *)(v83 - 8);
  *(_QWORD *)&v11 = __chkstk_darwin(v83).n128_u64[0];
  v13 = (char *)&v83 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(char **)((char *)v0 + OBJC_IVAR____TtC8ShelfKit18MacSearchPresenter_searchHeaderView);
  v15 = (char *)objc_msgSend(v14, "effectiveUserInterfaceLayoutDirection", v11);
  if (v15 == (_BYTE *)&dword_0 + 1)
    v16 = 40.0;
  else
    v16 = 15.0;
  if (v15 == (_BYTE *)&dword_0 + 1)
    v17 = 15.0;
  else
    v17 = 40.0;
  v18 = (double *)&v14[OBJC_IVAR____TtC8ShelfKit16SearchHeaderView_pageMarginInsets];
  *(_QWORD *)&v19 = swift_beginAccess(&v14[OBJC_IVAR____TtC8ShelfKit16SearchHeaderView_pageMarginInsets], v112, 1, 0).n128_u64[0];
  *v18 = 0.0;
  v18[1] = v17;
  v18[2] = 0.0;
  v18[3] = v16;
  objc_msgSend(v14, "setNeedsLayout", v19);
  sub_327F8(0, (unint64_t *)&qword_3B89D8, UIAction_ptr);
  v20 = swift_allocObject(&unk_3817B8, 24, 7);
  swift_weakInit(v20 + 16);
  v21 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(0, 0xE000000000000000, 0, 0, 0, 0, 0, 0, 0, 0, 0, sub_11DAE0, v20);
  v22 = *(void **)&v14[OBJC_IVAR____TtC8ShelfKit16SearchHeaderView_searchScopeControl];
  v99 = v21;
  objc_msgSend(v22, "addAction:forControlEvents:");
  *(_QWORD *)&v107 = v1[13];
  v106[0] = *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC8ShelfKit18MacSearchPresenter_searchRequest);
  v23 = v106[0];
  v111 = *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC8ShelfKit18MacSearchPresenter_isShowingLanding);
  v98 = v107;
  swift_retain();
  v91 = v23;
  swift_retain();
  swift_retain();
  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B27B0);
  v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BABB0);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B20D0);
  v27 = sub_32914(&qword_3B27C0, &qword_3B27B0, (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
  v28 = sub_32914(&qword_3BABB8, &qword_3BABB0, (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
  v29 = sub_32914(&qword_3B2138, &qword_3B20D0, (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
  v89 = v25;
  v88 = v28;
  Publishers.CombineLatest3.init(_:_:_:)(&v107, v106, &v111, v24, v25, v26, v27, v28, v29);
  v30 = swift_allocObject(&unk_3817E0, 24, 7);
  *(_QWORD *)(v30 + 16) = v14;
  v31 = swift_allocObject(&unk_381808, 32, 7);
  *(_QWORD *)(v31 + 16) = sub_11DB0C;
  *(_QWORD *)(v31 + 24) = v30;
  v32 = sub_32914(&qword_3BABC0, &qword_3BAB90, (uint64_t)&protocol conformance descriptor for Publishers.CombineLatest3<A, B, C>);
  v33 = v14;
  v34 = v83;
  v35 = Publisher<>.sink(receiveValue:)(sub_11DB38, v31, v83, v32);
  swift_release(v31);
  (*(void (**)(char *, uint64_t))(v84 + 8))(v13, v34);
  v36 = v1 + 12;
  swift_beginAccess(v1 + 12, &v107, 33, 0);
  AnyCancellable.store(in:)(v1 + 12);
  swift_endAccess(&v107);
  swift_release(v35);
  v37 = *(_QWORD *)(v1[9] + 16);
  *(_QWORD *)&v107 = v37;
  v38 = qword_3B0080;
  swift_retain();
  if (v38 != -1)
    swift_once(&qword_3B0080, sub_73178);
  v39 = qword_3B3FA0;
  v40 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B35F8);
  v41 = sub_32914(&qword_3B3600, &qword_3B35F8, (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
  v42 = Publisher.emitSignpostEvent(log:name:)(v39, "metadata", 8, 2, v40, v41);
  swift_release(v37);
  *(_QWORD *)&v107 = v42;
  v43 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3608);
  v44 = sub_32914(&qword_3B3610, &qword_3B3608, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v45 = v85;
  Publisher.compactMap<A>(_:)(sub_730F4, 0, v43, &type metadata for RecommendationsMetadata, v44);
  swift_release(v42);
  v46 = sub_32914(&qword_3B3618, &qword_3B35D8, (uint64_t)&protocol conformance descriptor for Publishers.CompactMap<A, B>);
  v47 = v87;
  v48 = Publisher.eraseToAnyPublisher()(v87, v46);
  (*(void (**)(char *, uint64_t))(v86 + 8))(v45, v47);
  v106[0] = v48;
  sub_150C8((uint64_t)(v1 + 4), (uint64_t)&v107);
  v49 = swift_allocObject(&unk_381830, 56, 7);
  v50 = sub_F4D8(&v107, v49 + 16);
  v51 = static Subscribers.Demand.unlimited.getter(v50);
  v52 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3620);
  v53 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4A20);
  v54 = sub_32914(&qword_3B3630, &qword_3B3620, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v55 = sub_32914(&qword_3BEB60, &qword_3B4A20, (uint64_t)&protocol conformance descriptor for Future<A, B>);
  v56 = v90;
  Publisher<>.flatMap<A>(maxPublishers:_:)(v51, sub_80A9C, v49, v52, v53, v54, v55);
  swift_release(v49);
  swift_release(v106[0]);
  v57 = sub_327F8(0, (unint64_t *)&qword_3B8710, OS_dispatch_queue_ptr);
  *(_QWORD *)&v107 = static OS_dispatch_queue.main.getter(v57);
  v58 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  v59 = (uint64_t)v97;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 56))(v97, 1, 1, v58);
  v60 = sub_32914(&qword_3B4A28, &qword_3B4A10, (uint64_t)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
  v61 = sub_436CC();
  v62 = v94;
  v63 = v93;
  Publisher.receive<A>(on:options:)(&v107, v59, v93, v57, v60, v61);
  sub_1459C(v59, &qword_3B2B18);

  (*(void (**)(char *, uint64_t))(v92 + 8))(v56, v63);
  v64 = v1[10];
  v65 = sub_32914(&qword_3B4A30, &qword_3B4A18, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  swift_retain();
  v66 = v96;
  v67 = Publisher<>.sink(receiveValue:)(sub_80AA4, v64, v96, v65);
  swift_release(v64);
  (*(void (**)(char *, uint64_t))(v95 + 8))(v62, v66);
  swift_beginAccess(v1 + 12, &v107, 33, 0);
  AnyCancellable.store(in:)(v1 + 12);
  swift_endAccess(&v107);
  swift_release(v67);
  v107 = 1uLL;
  v108 = 0;
  v109 = 0;
  v110 = 0x80;
  v106[0] = SearchController.publisher(for:)((uint64_t)&v107);
  v68 = v1[11];
  swift_retain();
  v69 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B46C8);
  v70 = sub_32914(&qword_3B46E0, &qword_3B46C8, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v71 = Publisher<>.sink(receiveValue:)(sub_11DB64, v68, v69, v70);
  swift_release(v68);
  swift_release(v106[0]);
  swift_beginAccess(v1 + 12, v106, 33, 0);
  AnyCancellable.store(in:)(v1 + 12);
  swift_endAccess(v106);
  swift_release(v71);
  v106[0] = v91;
  v72 = swift_allocObject(&unk_3817B8, 24, 7);
  swift_weakInit(v72 + 16);
  swift_retain();
  v73 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B45B8);
  v74 = v100;
  Publisher.map<A>(_:)(sub_11DB6C, v72, v89, v73, v88);
  swift_release(v72);
  swift_release(v106[0]);
  v75 = sub_32914(&qword_3BABC8, &qword_3BAB80, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v76 = sub_32914(&qword_3B45D0, &qword_3B45B8, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v77 = v102;
  v78 = v103;
  Publisher<>.switchToLatest()(v102, v75, v76);
  (*(void (**)(char *, uint64_t))(v101 + 8))(v74, v77);
  v79 = sub_32914(&qword_3BABD0, &qword_3BAB88, (uint64_t)&protocol conformance descriptor for Publishers.SwitchToLatest<A, B>);
  v80 = v98;
  swift_retain();
  v81 = v105;
  v82 = Publisher<>.sink(receiveValue:)(j___s7Combine19CurrentValueSubjectC4sendyyxF, v80, v105, v79);
  swift_release(v80);
  (*(void (**)(char *, uint64_t))(v104 + 8))(v78, v81);
  swift_beginAccess(v36, v106, 33, 0);
  AnyCancellable.store(in:)(v36);
  swift_endAccess(v106);

  swift_release(v82);
}

uint64_t sub_11BEEC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  _BYTE v19[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v19, 0, 0);
  result = swift_weakLoadStrong(v2);
  if (!result)
    return result;
  v4 = result;
  v5 = (uint64_t)objc_msgSend(*(id *)(*(_QWORD *)(result + OBJC_IVAR____TtC8ShelfKit18MacSearchPresenter_searchHeaderView)+ OBJC_IVAR____TtC8ShelfKit16SearchHeaderView_searchScopeControl), "selectedSegmentIndex");
  v6 = v5;
  if (qword_3B0198 == -1)
  {
    if (v5 < 0)
    {
LABEL_7:
      if (qword_3B0190 != -1)
        v5 = swift_once(&qword_3B0190, sub_196060);
      v7 = &byte_3BF278;
      goto LABEL_10;
    }
  }
  else
  {
    v5 = swift_once(&qword_3B0198, sub_1960D4);
    if (v6 < 0)
      goto LABEL_7;
  }
  if (v6 >= *(_QWORD *)((char *)off_3BF280[0] + (unint64_t)&dword_10))
    goto LABEL_7;
  v7 = (char *)off_3BF280[0] + v6 + 32;
LABEL_10:
  v8 = *v7;
  *(_BYTE *)(v4 + OBJC_IVAR____TtC8ShelfKit18MacSearchPresenter_scope) = *v7;
  CurrentValueSubject.value.getter(&v14, v5);
  v9 = v14;
  v10 = v15;
  v11 = v16;
  v12 = v17;
  v13 = v18;
  if (v18 <= 0xFDu && (v18 & 0xC0) == 0x40)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_11DD78(v9, v10, v11, v12, v13);
    v13 = v8 | 0x40;
  }
  v14 = v9;
  v15 = v10;
  v16 = v11;
  v17 = v12;
  v18 = v13;
  CurrentValueSubject.value.setter(&v14);
  return swift_release(v4);
}

uint64_t sub_11C084(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 v23;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE v35[24];
  _BYTE v36[40];
  _BYTE v37[40];
  _QWORD v38[4];
  char v39;

  v34 = a2;
  v7 = type metadata accessor for ModernPage(0);
  __chkstk_darwin(v7);
  v9 = &v35[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v10 = type metadata accessor for PageContent(0);
  __chkstk_darwin(v10);
  v12 = &v35[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BAE20);
  __chkstk_darwin(v13);
  v15 = &v35[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v17 = *(int *)(v16 + 48);
  sub_14510(a1, (uint64_t)v15, type metadata accessor for PageContent);
  v15[v17] = a3;
  if (swift_getEnumCaseMultiPayload(v15, v10) != 3)
    goto LABEL_4;
  sub_14510((uint64_t)v15, (uint64_t)v12, type metadata accessor for PageContent);
  v18 = &v12[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B89B0) + 48)];
  if ((a3 & 1) != 0)
  {
    v19 = type metadata accessor for PageRenderContentTypes(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v18, v19);
    sub_145D8((uint64_t)v12, type metadata accessor for ModernPage);
LABEL_4:
    v20 = a4 + OBJC_IVAR____TtC8ShelfKit16SearchHeaderView_searchTerm;
    swift_beginAccess(a4 + OBJC_IVAR____TtC8ShelfKit16SearchHeaderView_searchTerm, v38, 1, 0);
    v21 = *(_QWORD *)v20;
    v22 = *(_QWORD *)(v20 + 8);
    *(_QWORD *)v20 = 0;
    *(_QWORD *)(v20 + 8) = 0;
    v23 = *(_BYTE *)(v20 + 16);
    *(_BYTE *)(v20 + 16) = -1;
    sub_3B5A8(v21, v22, v23);
    sub_59EEC();
    return sub_1459C((uint64_t)v15, &qword_3BAE20);
  }
  sub_3C56C((uint64_t)v12, (uint64_t)v9, type metadata accessor for ModernPage);
  if (*(_QWORD *)(*(_QWORD *)&v9[*(int *)(v7 + 24)] + 16))
  {
    sub_11DD30(v34, (uint64_t)v36);
    if (v36[32] <= 0xFDu
      && (sub_80AAC((uint64_t)v36, (uint64_t)v37), sub_80AAC((uint64_t)v37, (uint64_t)v38), (v39 & 0xC0) == 0x40))
    {
      v39 &= 0x3Fu;
      v26 = v38[0];
      v25 = v38[1];
      swift_bridgeObjectRetain();
      v27 = 1;
    }
    else
    {
      v26 = 0;
      v25 = 0;
      v27 = -1;
    }
    v28 = a4 + OBJC_IVAR____TtC8ShelfKit16SearchHeaderView_searchTerm;
    swift_beginAccess(a4 + OBJC_IVAR____TtC8ShelfKit16SearchHeaderView_searchTerm, v35, 1, 0);
    v29 = *(_QWORD *)v28;
    v30 = *(_QWORD *)(v28 + 8);
    *(_QWORD *)v28 = v26;
    *(_QWORD *)(v28 + 8) = v25;
    v31 = *(_BYTE *)(v28 + 16);
    *(_BYTE *)(v28 + 16) = v27;
  }
  else
  {
    v32 = a4 + OBJC_IVAR____TtC8ShelfKit16SearchHeaderView_searchTerm;
    swift_beginAccess(a4 + OBJC_IVAR____TtC8ShelfKit16SearchHeaderView_searchTerm, v38, 1, 0);
    v29 = *(_QWORD *)v32;
    v30 = *(_QWORD *)(v32 + 8);
    *(_QWORD *)v32 = 0;
    *(_QWORD *)(v32 + 8) = 0;
    v31 = *(_BYTE *)(v32 + 16);
    *(_BYTE *)(v32 + 16) = 2;
  }
  sub_3B5A8(v29, v30, v31);
  sub_59EEC();
  sub_145D8((uint64_t)v9, type metadata accessor for ModernPage);
  v33 = type metadata accessor for PageRenderContentTypes(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v33 - 8) + 8))(v18, v33);
  return sub_145D8((uint64_t)v15, type metadata accessor for PageContent);
}

uint64_t sub_11C39C(uint64_t a1, uint64_t (*a2)(uint64_t, _BYTE *, _QWORD))
{
  uint64_t v4;
  _BYTE v6[40];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BAE10);
  sub_11DD30(a1 + *(int *)(v4 + 48), (uint64_t)v6);
  return a2(a1, v6, *(unsigned __int8 *)(a1 + *(int *)(v4 + 64)));
}

uint64_t sub_11C404(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v15;

  v2 = type metadata accessor for PageContent(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for SearchContent(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ModernPage(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_14510(a1, (uint64_t)v7, type metadata accessor for SearchContent);
  if (swift_getEnumCaseMultiPayload(v7, v5) == 2)
  {
    sub_3C56C((uint64_t)v7, (uint64_t)v10, type metadata accessor for ModernPage);
    __swift_instantiateConcreteTypeFromMangledName(&qword_3B89B0);
    v11 = sub_14510((uint64_t)v10, (uint64_t)v4, type metadata accessor for ModernPage);
    static PageRenderContentTypes.unspecified.getter(v11);
    swift_storeEnumTagMultiPayload(v4, v2, 3);
    CurrentValueSubject.send(_:)();
    sub_145D8((uint64_t)v4, type metadata accessor for PageContent);
    v12 = (uint64_t)v10;
    v13 = type metadata accessor for ModernPage;
  }
  else
  {
    v13 = type metadata accessor for SearchContent;
    v12 = (uint64_t)v7;
  }
  return sub_145D8(v12, v13);
}

uint64_t sub_11C598@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t Strong;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t result;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  char v54[24];
  _QWORD v55[4];
  char v56;

  v52 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BADC8);
  v50 = *(_QWORD *)(v5 - 8);
  v51 = v5;
  __chkstk_darwin(v5);
  v49 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BADD0);
  v44 = *(_QWORD *)(v7 - 8);
  v45 = v7;
  __chkstk_darwin(v7);
  v43 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BADD8);
  v47 = *(_QWORD *)(v9 - 8);
  v48 = v9;
  __chkstk_darwin(v9);
  v46 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BADE0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *a1;
  v16 = a1[1];
  v17 = a1[2];
  v18 = a1[3];
  a2 += 16;
  v19 = *((unsigned __int8 *)a1 + 32);
  swift_beginAccess(a2, v54, 0, 0);
  Strong = swift_weakLoadStrong(a2);
  if (Strong)
  {
    v21 = (_QWORD *)Strong;
    if (v19 <= 0xFD)
    {
      v55[0] = v15;
      v55[1] = v16;
      v55[2] = v17;
      v55[3] = v18;
      v56 = v19;
      LOBYTE(v53) = 0;
      CurrentValueSubject.value.setter(&v53);
      v37 = v21[3];
      swift_retain();
      v38 = SearchController.publisher(for:)((uint64_t)v55);
      swift_release(v37);
      v53 = v38;
      v39 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B46C8);
      v40 = type metadata accessor for PageContent(0);
      v41 = sub_32914(&qword_3B46E0, &qword_3B46C8, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
      v29 = v49;
      Publisher.map<A>(_:)(sub_11C9B0, 0, v39, v40, v41);
      swift_release(v38);
      v42 = sub_32914(&qword_3BAE00, &qword_3BADC8, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
      v31 = v51;
      v32 = Publisher.eraseToAnyPublisher()(v51, v42);
      swift_release(v21);
      v33 = v50;
    }
    else
    {
      LOBYTE(v55[0]) = 1;
      CurrentValueSubject.value.setter(v55);
      v22 = v21[11];
      v55[0] = v21[10];
      v53 = v22;
      swift_retain();
      swift_retain();
      v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B27B0);
      v24 = sub_32914(&qword_3B27C0, &qword_3B27B0, (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
      v25 = v43;
      Publishers.CombineLatest.init(_:_:)(v55, &v53, v23, v23, v24, v24);
      v26 = type metadata accessor for PageContent(0);
      v27 = sub_32914(&qword_3BADF0, &qword_3BADD0, (uint64_t)&protocol conformance descriptor for Publishers.CombineLatest<A, B>);
      v28 = v45;
      v29 = v46;
      Publisher.map<A>(_:)(sub_11D02C, 0, v45, v26, v27);
      (*(void (**)(char *, uint64_t))(v44 + 8))(v25, v28);
      v30 = sub_32914(&qword_3BADF8, &qword_3BADD8, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
      v31 = v48;
      v32 = Publisher.eraseToAnyPublisher()(v48, v30);
      swift_release(v21);
      v33 = v47;
    }
    result = (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v29, v31);
  }
  else
  {
    v34 = type metadata accessor for PageContent(0);
    Empty.init(completeImmediately:)(1, v34, &type metadata for Never, &protocol witness table for Never);
    v35 = sub_32914(&qword_3BADE8, &qword_3BADE0, (uint64_t)&protocol conformance descriptor for Empty<A, B>);
    v32 = Publisher.eraseToAnyPublisher()(v11, v35);
    result = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
  *v52 = v32;
  return result;
}

void sub_11C9B0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t (*v5)(_QWORD);
  uint64_t v6;

  v2 = type metadata accessor for SearchContent(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_14510(a1, (uint64_t)v4, v5);
  sub_11CA30((uint64_t)v4);
}

void sub_11CA30(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t (*v8)(_QWORD);
  char *v9;
  uint64_t v10;

  v2 = type metadata accessor for GroupedSearchResultsPage(0);
  __chkstk_darwin(v2);
  __chkstk_darwin(v3);
  v4 = type metadata accessor for ModernPage(0);
  __chkstk_darwin(v4);
  v5 = type metadata accessor for SearchContent(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_14510(a1, (uint64_t)v7, v8);
  v9 = (char *)sub_11CB48 + 4 * byte_2F6280[swift_getEnumCaseMultiPayload(v7, v5)];
  __asm { BR              X10 }
}

uint64_t sub_11CB48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_3C56C(v3, v2, type metadata accessor for ModernPage);
  __swift_instantiateConcreteTypeFromMangledName(&qword_3B89B0);
  v4 = sub_14510(v2, v0, type metadata accessor for ModernPage);
  static PageRenderContentTypes.unspecified.getter(v4);
  v5 = type metadata accessor for PageContent(0);
  swift_storeEnumTagMultiPayload(v0, v5, 3);
  sub_145D8(v1, type metadata accessor for SearchContent);
  return sub_145D8(v2, type metadata accessor for ModernPage);
}

uint64_t sub_11CD28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  void (*v24)(char *, char *, uint64_t);
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;

  v35 = a2;
  v5 = type metadata accessor for PageContent(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v32 - v9;
  v34 = type metadata accessor for PageRenderContentTypes(0);
  v11 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  v37 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for ModernPage(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v18 = (char *)&v32 - v17;
  __chkstk_darwin(v19);
  v21 = (char *)&v32 - v20;
  v36 = a1;
  sub_14510(a1, (uint64_t)v10, type metadata accessor for PageContent);
  if (swift_getEnumCaseMultiPayload(v10, v5) == 3)
  {
    v32 = v13;
    v33 = a3;
    v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B89B0);
    v23 = &v10[*(int *)(v22 + 48)];
    sub_3C56C((uint64_t)v10, (uint64_t)v21, type metadata accessor for ModernPage);
    v24 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
    v25 = v34;
    v24(v37, v23, v34);
    sub_14510(v35, (uint64_t)v7, type metadata accessor for PageContent);
    if (swift_getEnumCaseMultiPayload(v7, v5) == 3)
    {
      v26 = &v7[*(int *)(v22 + 48)];
      sub_3C56C((uint64_t)v7, (uint64_t)v18, type metadata accessor for ModernPage);
      (*(void (**)(char *, uint64_t))(v11 + 8))(v26, v25);
      sub_14510((uint64_t)v21, (uint64_t)v15, type metadata accessor for ModernPage);
      v27 = v25;
      v28 = *(_QWORD *)&v18[*(int *)(v32 + 24)];
      swift_bridgeObjectRetain();
      sub_6B6BC(0, 0, v28);
      swift_bridgeObjectRelease();
      sub_145D8((uint64_t)v18, type metadata accessor for ModernPage);
      sub_145D8((uint64_t)v21, type metadata accessor for ModernPage);
      v29 = v33;
      v30 = (char *)(v33 + *(int *)(v22 + 48));
      sub_3C56C((uint64_t)v15, v33, type metadata accessor for ModernPage);
      v24(v30, v37, v27);
      return swift_storeEnumTagMultiPayload(v29, v5, 3);
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v37, v25);
    sub_145D8((uint64_t)v21, type metadata accessor for ModernPage);
    a3 = v33;
  }
  else
  {
    v7 = v10;
  }
  sub_145D8((uint64_t)v7, type metadata accessor for PageContent);
  return sub_14510(v36, a3, type metadata accessor for PageContent);
}

uint64_t sub_11D02C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = a1 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3BAE08) + 48);
  return sub_11CD28(a1, v4, a2);
}

Swift::Void __swiftcall MacSearchPresenter.viewWillAppear()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = static MetricsPageContext.search.getter();
  v2 = v1;
  PageContextTracker.push(_:)(v0);
  swift_bridgeObjectRelease(v2);
}

Swift::Void __swiftcall MacSearchPresenter.viewDidDisappear()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v7;
  uint64_t v8;
  uint64_t v9;

  v0 = PageContextTracker.value.getter();
  v2 = v1;
  v3 = static MetricsPageContext.search.getter();
  v5 = v4;
  if (!v2)
    goto LABEL_10;
  if (v0 == v3 && v2 == v4)
  {
    swift_bridgeObjectRelease(v2);
    v8 = swift_bridgeObjectRelease(v5);
    goto LABEL_9;
  }
  v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v0, v2, v3, v4, 0);
  swift_bridgeObjectRelease(v2);
  v8 = swift_bridgeObjectRelease(v5);
  if ((v7 & 1) != 0)
  {
LABEL_9:
    PageContextTracker.pop()(v8);
    v5 = v9;
LABEL_10:
    swift_bridgeObjectRelease(v5);
  }
}

_QWORD *MacSearchPresenter.deinit()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  __swift_destroy_boxed_opaque_existential_1(v0 + 4);
  swift_release(v0[9]);
  swift_release(v0[10]);
  swift_release(v0[11]);
  swift_bridgeObjectRelease();
  swift_release(v0[13]);
  swift_release(v0[14]);
  sub_145D8((uint64_t)v0 + OBJC_IVAR____TtC8ShelfKit18MacSearchPresenter_interactionContextPage, (uint64_t (*)(_QWORD))&type metadata accessor for InteractionContext.Page);
  swift_release(*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC8ShelfKit18MacSearchPresenter_searchRequest));

  swift_release(*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC8ShelfKit18MacSearchPresenter_isShowingLanding));
  return v0;
}

uint64_t MacSearchPresenter.__deallocating_deinit()
{
  uint64_t v0;

  MacSearchPresenter.deinit();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

void sub_11D200()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  os_unfair_lock_s *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 24) + 16);
  v2 = v1 + *(_QWORD *)(class metadata base offset for ManagedBuffer + *(_QWORD *)v1 + 16);
  v3 = (os_unfair_lock_s *)(v1 + ((*(unsigned int *)(*(_QWORD *)v1 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v3);
  sub_11DD18(v2);
  os_unfair_lock_unlock(v3);
}

uint64_t sub_11D27C@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return sub_14510(*v1 + OBJC_IVAR____TtC8ShelfKit18MacSearchPresenter_interactionContextPage, a1, (uint64_t (*)(_QWORD))&type metadata accessor for InteractionContext.Page);
}

uint64_t MacSearchPresenter.perform(searchAction:sender:)(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  _QWORD v7[4];
  char v8;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  v4 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0)
    v4 = v3 & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    v5 = *(_BYTE *)(v1 + OBJC_IVAR____TtC8ShelfKit18MacSearchPresenter_scope) | 0x40;
    swift_bridgeObjectRetain_n(*(_QWORD *)(a1 + 16), 2);
  }
  else
  {
    v3 = 0;
    v2 = 0;
    v5 = -2;
  }
  v7[0] = v3;
  v7[1] = v2;
  v7[2] = v3;
  v7[3] = v2;
  v8 = v5;
  return CurrentValueSubject.value.setter(v7);
}

uint64_t sub_11D344(uint64_t a1)
{
  return MacSearchPresenter.perform(searchAction:sender:)(a1);
}

uint64_t sub_11D364@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  _QWORD *v27;

  v4 = type metadata accessor for PageMetrics(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v26 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for PageID(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for GroupedSearchResultsPage(0);
  v11 = *(_QWORD *)(a1 + *(int *)(v25 + 20));
  v12 = _swiftEmptyArrayStorage;
  v27 = _swiftEmptyArrayStorage;
  v13 = *(_QWORD *)(v11 + 16);
  if (v13)
  {
    v21 = v7;
    v22 = v5;
    v23 = v4;
    v24 = a2;
    swift_bridgeObjectRetain();
    v14 = (uint64_t *)(v11 + 64);
    do
    {
      v15 = *v14;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      v16 = Page.modernShelves.getter();
      sub_1E3E60(v16);
      swift_release(v15);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v14 += 5;
      --v13;
    }
    while (v13);
    swift_bridgeObjectRelease();
    v12 = v27;
    v4 = v23;
    a2 = v24;
    v7 = v21;
    v5 = v22;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, v7);
  v17 = v26;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v26, a1 + *(int *)(v25 + 24), v4);
  sub_145D8(a1, type metadata accessor for GroupedSearchResultsPage);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(a2, v10, v7);
  v18 = type metadata accessor for ModernPage(0);
  result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a2 + *(int *)(v18 + 20), v17, v4);
  *(_QWORD *)(a2 + *(int *)(v18 + 24)) = v12;
  return result;
}

_QWORD *sub_11D544(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  int64_t v29;
  _QWORD *v30;
  uint64_t v31;
  char v32;
  objc_class *v33;
  unint64_t v34;
  unint64_t v35;
  NSBundle v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  Swift::String v40;
  unint64_t v41;
  unint64_t v42;
  id v43;
  char *v44;
  uint64_t v45;
  char v46;
  id v47;
  void *v48;
  uint64_t v49;
  id v50;
  unint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  __int128 v55;
  __int128 v56;
  char v57;

  v3 = type metadata accessor for ModernPage(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for PageContent(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *v8 = 0;
  swift_storeEnumTagMultiPayload(v8, v6, 0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B27B0);
  swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  v10 = CurrentValueSubject.init(_:)(v8);
  v1[10] = v10;
  v11 = static PageID.searchFocus.getter(v10);
  static PageMetrics.notInstrumented.getter(v11);
  *(_QWORD *)&v5[*(int *)(v3 + 24)] = _swiftEmptyArrayStorage;
  __swift_instantiateConcreteTypeFromMangledName(&qword_3B89B0);
  v12 = sub_14510((uint64_t)v5, (uint64_t)v8, type metadata accessor for ModernPage);
  static PageRenderContentTypes.unspecified.getter(v12);
  swift_storeEnumTagMultiPayload(v8, v6, 3);
  sub_145D8((uint64_t)v5, type metadata accessor for ModernPage);
  swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  v1[11] = CurrentValueSubject.init(_:)(v8);
  v1[12] = &_swiftEmptySetSingleton;
  *v8 = 0;
  v13 = v6;
  v14 = v1;
  swift_storeEnumTagMultiPayload(v8, v13, 0);
  swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  v1[13] = CurrentValueSubject.init(_:)(v8);
  v15 = (char *)v1 + OBJC_IVAR____TtC8ShelfKit18MacSearchPresenter_interactionContextPage;
  v16 = type metadata accessor for InteractionContext.Page(0);
  swift_storeEnumTagMultiPayload(v15, v16, 15);
  v17 = OBJC_IVAR____TtC8ShelfKit18MacSearchPresenter_searchRequest;
  v55 = 0u;
  v56 = 0u;
  v57 = -2;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BABB0);
  swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
  *(_QWORD *)((char *)v14 + v17) = CurrentValueSubject.init(_:)(&v55);
  v19 = OBJC_IVAR____TtC8ShelfKit18MacSearchPresenter_scope;
  *((_BYTE *)v14 + OBJC_IVAR____TtC8ShelfKit18MacSearchPresenter_scope) = 1;
  v20 = OBJC_IVAR____TtC8ShelfKit18MacSearchPresenter_isShowingLanding;
  LOBYTE(v55) = 0;
  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B20D0);
  swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
  *(_QWORD *)((char *)v14 + v20) = CurrentValueSubject.init(_:)(&v55);
  v22 = type metadata accessor for PageContextTracker(0);
  BaseObjectGraph.injectIfAvailable<A>(_:)(v22, v22);
  v23 = v55;
  if (!(_QWORD)v55)
    v23 = static PageContextTracker.shared.getter();
  v14[2] = v23;
  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BE9F0);
  BaseObjectGraph.inject<A>(_:)(&v55, v24, v24);
  sub_F4D8(&v55, (uint64_t)(v14 + 4));
  v25 = type metadata accessor for RecommendationsMetadataProvider(0);
  BaseObjectGraph.inject<A>(_:)(&v55, v25, v25);
  v14[9] = v55;
  v26 = type metadata accessor for SearchController(0);
  swift_allocObject(v26, *(unsigned int *)(v26 + 48), *(unsigned __int16 *)(v26 + 52));
  swift_retain();
  v27 = sub_28FEBC();
  swift_release(a1);
  v14[3] = v27;
  if (qword_3B0198 != -1)
    swift_once(&qword_3B0198, sub_1960D4);
  v28 = off_3BF280[0];
  v29 = *(_QWORD *)((char *)off_3BF280[0] + (unint64_t)&dword_10);
  v30 = _swiftEmptyArrayStorage;
  if (v29)
  {
    v53 = v19;
    v54 = v14;
    *(_QWORD *)&v55 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    sub_1807B0(0, v29, 0);
    v31 = 0;
    v30 = (_QWORD *)v55;
    do
    {
      v32 = *((_BYTE *)v28 + v31 + 32);
      v33 = (objc_class *)objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      if ((v32 & 1) != 0)
      {
        v52 = 0xEC00000073747361;
        v34 = 0xD000000000000013;
        v35 = 0x800000000030C990;
        v36.super.isa = v33;
        v37 = 0;
        v38 = 0xE000000000000000;
        v39 = 0x63646F50206C6C41;
      }
      else
      {
        v34 = 0xD000000000000015;
        v52 = 0xEC00000079726172;
        v35 = 0x800000000030C9B0;
        v36.super.isa = v33;
        v37 = 0;
        v38 = 0xE000000000000000;
        v39 = 0x62694C2072756F59;
      }
      v40 = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v34, (Swift::String_optional)0, v36, *(Swift::String *)&v37, *(Swift::String *)&v39);

      *(_QWORD *)&v55 = v30;
      v42 = v30[2];
      v41 = v30[3];
      if (v42 >= v41 >> 1)
      {
        sub_1807B0(v41 > 1, v42 + 1, 1);
        v30 = (_QWORD *)v55;
      }
      ++v31;
      v30[2] = v42 + 1;
      *(Swift::String *)&v30[2 * v42 + 4] = v40;
    }
    while (v29 != v31);
    swift_bridgeObjectRelease();
    v19 = v53;
    v14 = v54;
  }
  v43 = objc_allocWithZone((Class)type metadata accessor for SearchHeaderView());
  v44 = SearchHeaderView.init(searchScopeTitles:)((uint64_t)v30);
  v45 = OBJC_IVAR____TtC8ShelfKit18MacSearchPresenter_searchHeaderView;
  *(_QWORD *)((char *)v14 + OBJC_IVAR____TtC8ShelfKit18MacSearchPresenter_searchHeaderView) = v44;
  v46 = *((_BYTE *)v14 + v19);
  v47 = *(id *)&v44[OBJC_IVAR____TtC8ShelfKit16SearchHeaderView_searchScopeControl];
  objc_msgSend(v47, "setSelectedSegmentIndex:", SearchScope.index.getter(v46));

  v48 = *(void **)((char *)v14 + v45);
  v55 = (unint64_t)v48;
  LODWORD(v56) = 0;
  BYTE4(v56) = 4;
  v49 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8770);
  swift_allocObject(v49, *(unsigned int *)(v49 + 48), *(unsigned __int16 *)(v49 + 52));
  v50 = v48;
  v14[14] = CurrentValueSubject.init(_:)(&v55);
  return v14;
}

uint64_t sub_11DABC()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_11DAE0(uint64_t a1)
{
  uint64_t v1;

  return sub_11BEEC(a1, v1);
}

uint64_t sub_11DAE8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_11DB0C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;

  return sub_11C084(a1, a2, a3, *(_QWORD *)(v3 + 16));
}

uint64_t sub_11DB14()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_11DB38(uint64_t a1)
{
  uint64_t v1;

  return sub_11C39C(a1, *(uint64_t (**)(uint64_t, _BYTE *, _QWORD))(v1 + 16));
}

uint64_t sub_11DB40()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1((_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_11DB64(uint64_t a1)
{
  return sub_11C404(a1);
}

uint64_t sub_11DB6C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_11C598(a1, v2, a2);
}

uint64_t sub_11DB78(uint64_t a1)
{
  uint64_t result;

  result = sub_11DBAC(&qword_3BACA0, (uint64_t)&protocol conformance descriptor for MacSearchPresenter);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_11DBAC(unint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  if (!result)
  {
    type metadata accessor for MacSearchPresenter(255);
    result = swift_getWitnessTable(a2);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for MacSearchPresenter(uint64_t a1)
{
  uint64_t result;

  result = qword_3BACD8;
  if (!qword_3BACD8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MacSearchPresenter);
  return result;
}

uint64_t sub_11DC28()
{
  return sub_11DBAC(&qword_3BACA8, (uint64_t)&protocol conformance descriptor for MacSearchPresenter);
}

uint64_t sub_11DC4C()
{
  return type metadata accessor for MacSearchPresenter(0);
}

uint64_t sub_11DC54(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[14];

  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[2] = &unk_2F63C8;
  v4[3] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[4] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[5] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[6] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[7] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[8] = (char *)&value witness table for Builtin.NativeObject + 64;
  result = type metadata accessor for InteractionContext.Page(319);
  if (v3 <= 0x3F)
  {
    v4[9] = *(_QWORD *)(result - 8) + 64;
    v4[10] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[11] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[12] = &unk_2F63E0;
    v4[13] = (char *)&value witness table for Builtin.NativeObject + 64;
    return swift_updateClassMetadata2(a1, 256, 14, v4, a1 + 80);
  }
  return result;
}

uint64_t method lookup function for MacSearchPresenter(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for MacSearchPresenter);
}

uint64_t sub_11DD18(uint64_t a1)
{
  return sub_28D5E0(a1);
}

uint64_t sub_11DD30(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BAE18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_11DD78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 <= 0xFDu)
    return sub_11DD8C(a1, a2, a3, a4, a5);
  return a1;
}

uint64_t sub_11DD8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  uint64_t result;

  if (!(a5 >> 6))
    return swift_bridgeObjectRelease(a2);
  if (a5 >> 6 == 1)
  {
    swift_bridgeObjectRelease(a2);
    return swift_bridgeObjectRelease(a4);
  }
  return result;
}

uint64_t MarkAsUnplayedEpisodeAction.actionMetrics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for MarkAsUnplayedEpisodeAction(0) + 20);
  v4 = type metadata accessor for ActionMetrics(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for MarkAsUnplayedEpisodeAction(uint64_t a1)
{
  uint64_t result;

  result = qword_3BAE88;
  if (!qword_3BAE88)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MarkAsUnplayedEpisodeAction);
  return result;
}

double MarkAsUnplayedEpisodeAction.intent.getter@<D0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  double result;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0918);
  v4 = swift_allocObject(v3, 56, 7);
  *(_QWORD *)&result = 1;
  *(_OWORD *)(v4 + 16) = xmmword_2EA0D0;
  *(_QWORD *)(v4 + 32) = *v1;
  *(_QWORD *)(v4 + 40) = 0;
  *(_BYTE *)(v4 + 48) = 0;
  *a1 = v4;
  return result;
}

uint64_t MarkAsUnplayedEpisodeAction.init(adamID:actionMetrics:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  char *v4;
  uint64_t v5;

  *a3 = a1;
  v4 = (char *)a3 + *(int *)(type metadata accessor for MarkAsUnplayedEpisodeAction(0) + 20);
  v5 = type metadata accessor for ActionMetrics(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(v4, a2, v5);
}

unint64_t sub_11DF00()
{
  unint64_t result;

  result = qword_3BAE28;
  if (!qword_3BAE28)
  {
    type metadata accessor for MarkAsUnplayedEpisodeAction(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for MarkAsUnplayedEpisodeAction);
    atomic_store(result, (unint64_t *)&qword_3BAE28);
  }
  return result;
}

uint64_t sub_11DF48(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of MarkAsUnplayedEpisodeAction.intent>>, 1);
}

uint64_t getEnumTagSinglePayload for MarkAsUnplayedEpisodeAction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_11DF64);
}

uint64_t sub_11DF64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a3 + 20);
  v5 = type metadata accessor for ActionMetrics(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for MarkAsUnplayedEpisodeAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_11DFB0);
}

uint64_t sub_11DFB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + *(int *)(a4 + 20);
  v6 = type metadata accessor for ActionMetrics(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, a2, a2, v6);
}

unint64_t sub_11DFF8()
{
  unint64_t result;

  result = qword_3BAEC0;
  if (!qword_3BAEC0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MarkAsUnplayedEpisodeIntent);
    atomic_store(result, (unint64_t *)&qword_3BAEC0);
  }
  return result;
}

uint64_t SearchExtension.__allocating_init(scopes:hidesSearchBarWhenScrolling:)(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;

  v5 = swift_allocObject(v2, 65, 7);
  v6 = sub_11E824(a1, a2, v5);
  swift_release(v5);
  return v6;
}

void __swiftcall SearchExtensionTerm.copy(with:)(ShelfKit::SearchExtensionTerm_optional *__return_ptr retstr, ShelfKit::SearchExtensionTerm::State with)
{
  uint64_t *v2;
  void *v3;
  uint64_t v4;
  void *v5;

  v3 = (void *)v2[1];
  v4 = v2[2];
  v5 = (void *)v2[3];
  retstr->value.term._countAndFlagsBits = *v2;
  retstr->value.term._object = v3;
  retstr->value.searchPrefix._countAndFlagsBits = v4;
  retstr->value.searchPrefix._object = v5;
  retstr->value.state = with;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v5);
}

void __swiftcall SearchExtensionTerm.init(term:searchPrefix:state:)(ShelfKit::SearchExtensionTerm_optional *__return_ptr retstr, Swift::String_optional term, Swift::String_optional searchPrefix, ShelfKit::SearchExtensionTerm::State state)
{
  void *object;
  uint64_t countAndFlagsBits;

  if (term.value._object)
  {
    object = term.value._object;
    countAndFlagsBits = term.value._countAndFlagsBits;
    if (!searchPrefix.value._object)
    {
      swift_bridgeObjectRetain(term.value._object);
      searchPrefix.value._countAndFlagsBits = countAndFlagsBits;
      searchPrefix.value._object = object;
    }
    retstr->value.term._countAndFlagsBits = countAndFlagsBits;
    retstr->value.term._object = object;
    retstr->value.searchPrefix = searchPrefix.value;
    retstr->value.state = state;
  }
  else
  {
    swift_bridgeObjectRelease(searchPrefix.value._object);
    retstr->value.state = ShelfKit_SearchExtensionTerm_State_active;
    retstr->value.term = 0u;
    retstr->value.searchPrefix = 0u;
  }
}

uint64_t SearchExtension.hidesSearchBarWhenScrolling.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 64);
}

uint64_t SearchExtension.init(scopes:hidesSearchBarWhenScrolling:)(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = sub_11E824(a1, a2, v2);
  swift_release(v2);
  return v3;
}

uint64_t sub_11E174()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  swift_release(v0[6]);
  return swift_release(v0[7]);
}

_QWORD *SearchExtension.deinit()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  swift_release(v0[6]);
  swift_release(v0[7]);
  return v0;
}

uint64_t SearchExtension.__deallocating_deinit()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  swift_release(v0[6]);
  swift_release(v0[7]);
  return swift_deallocClassInstance(v0, 65, 7);
}

uint64_t RecommendationsMetadata.Analytics.userAllowsPersonalization.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t SearchExtensionScope.placeholderText.getter()
{
  uint64_t v0;
  int v1;
  objc_class *v2;
  unint64_t v3;
  unint64_t v4;
  NSBundle v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t countAndFlagsBits;
  unint64_t v11;

  v1 = *(unsigned __int8 *)(v0 + 32);
  v2 = (objc_class *)objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  if (v1 == 1)
  {
    v3 = 0xD000000000000015;
    v11 = 0xEC00000079726172;
    v4 = 0x800000000030C9B0;
    v5.super.isa = v2;
    v6 = 0;
    v7 = 0xE000000000000000;
    v8 = 0x62694C2072756F59;
  }
  else
  {
    v8 = 0xD000000000000019;
    v11 = 0x800000000030FAA0;
    v4 = 0x800000000030FA80;
    v3 = 0xD000000000000012;
    v5.super.isa = v2;
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v3, (Swift::String_optional)0, v5, *(Swift::String *)&v6, *(Swift::String *)&v8)._countAndFlagsBits;

  return countAndFlagsBits;
}

void SearchExtensionScope.hash(into:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::UInt8 v7;

  v3 = *v1;
  v4 = v1[1];
  v5 = v1[2];
  v6 = v1[3];
  v7 = *((_BYTE *)v1 + 32);
  swift_bridgeObjectRetain(v4);
  String.hash(into:)(a1, v3, v4);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRetain(v6);
  String.hash(into:)(a1, v5, v6);
  swift_bridgeObjectRelease(v6);
  Hasher._combine(_:)(v7);
}

Swift::Int SearchExtensionScope.hashValue.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::UInt8 v5;
  _QWORD v7[9];

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  v5 = *((_BYTE *)v0 + 32);
  Hasher.init(_seed:)(v7);
  swift_bridgeObjectRetain(v2);
  String.hash(into:)(v7, v1, v2);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRetain(v4);
  String.hash(into:)(v7, v3, v4);
  swift_bridgeObjectRelease(v4);
  Hasher._combine(_:)(v5);
  return Hasher._finalize()();
}

Swift::Int sub_11E474()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::UInt8 v5;
  _QWORD v7[9];

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  v5 = *((_BYTE *)v0 + 32);
  Hasher.init(_seed:)(v7);
  swift_bridgeObjectRetain(v2);
  String.hash(into:)(v7, v1, v2);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRetain(v4);
  String.hash(into:)(v7, v3, v4);
  swift_bridgeObjectRelease(v4);
  Hasher._combine(_:)(v5);
  return Hasher._finalize()();
}

void SearchExtensionTerm.hash(into:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::UInt v7;

  v3 = *v1;
  v4 = v1[1];
  v5 = v1[2];
  v6 = v1[3];
  v7 = *((unsigned __int8 *)v1 + 32);
  swift_bridgeObjectRetain(v4);
  String.hash(into:)(a1, v3, v4);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRetain(v6);
  String.hash(into:)(a1, v5, v6);
  swift_bridgeObjectRelease(v6);
  Hasher._combine(_:)(v7);
}

Swift::Int SearchExtensionTerm.hashValue.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::UInt v5;
  _QWORD v7[9];

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  v5 = *((unsigned __int8 *)v0 + 32);
  Hasher.init(_seed:)(v7);
  swift_bridgeObjectRetain(v2);
  String.hash(into:)(v7, v1, v2);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRetain(v4);
  String.hash(into:)(v7, v3, v4);
  swift_bridgeObjectRelease(v4);
  Hasher._combine(_:)(v5);
  return Hasher._finalize()();
}

Swift::Int sub_11E630()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::UInt v5;
  _QWORD v7[9];

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  v5 = *((unsigned __int8 *)v0 + 32);
  Hasher.init(_seed:)(v7);
  swift_bridgeObjectRetain(v2);
  String.hash(into:)(v7, v1, v2);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRetain(v4);
  String.hash(into:)(v7, v3, v4);
  swift_bridgeObjectRelease(v4);
  Hasher._combine(_:)(v5);
  return Hasher._finalize()();
}

double static SearchExtensionTerm.emptyActiveTerm.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = xmmword_2F64B0;
  *(_OWORD *)(a1 + 16) = xmmword_2F64B0;
  *(_BYTE *)(a1 + 32) = 0;
  return result;
}

BOOL _s8ShelfKit19SearchExtensionTermV2eeoiySbAC_ACtFZ_0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  char v14;
  _BOOL8 result;
  char v17;

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v7 = a1[3];
  v8 = *((unsigned __int8 *)a1 + 32);
  v9 = *(_QWORD *)(a2 + 8);
  v10 = *(_QWORD *)(a2 + 16);
  v11 = *(_QWORD *)(a2 + 24);
  v12 = *(unsigned __int8 *)(a2 + 32);
  v13 = v4 == *(_QWORD *)a2 && v5 == v9;
  if (v13
    || (v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *(_QWORD *)a2, v9, 0), result = 0, (v14 & 1) != 0))
  {
    if (v6 == v10 && v7 == v11)
      return v8 == v12;
    v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v7, v10, v11, 0);
    result = 0;
    if ((v17 & 1) != 0)
      return v8 == v12;
  }
  return result;
}

uint64_t _s8ShelfKit20SearchExtensionScopeV2eeoiySbAC_ACtFZ_0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  char v14;
  uint64_t result;
  char v17;

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v7 = a1[3];
  v8 = *((unsigned __int8 *)a1 + 32);
  v9 = *(_QWORD *)(a2 + 8);
  v10 = *(_QWORD *)(a2 + 16);
  v11 = *(_QWORD *)(a2 + 24);
  v12 = *(unsigned __int8 *)(a2 + 32);
  v13 = v4 == *(_QWORD *)a2 && v5 == v9;
  if (v13
    || (v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *(_QWORD *)a2, v9, 0), result = 0, (v14 & 1) != 0))
  {
    if (v6 == v10 && v7 == v11)
      return v8 ^ v12 ^ 1u;
    v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v7, v10, v11, 0);
    result = 0;
    if ((v17 & 1) != 0)
      return v8 ^ v12 ^ 1u;
  }
  return result;
}

uint64_t sub_11E824(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  __int128 v11;
  char v12;

  v12 = 0;
  v10 = 0u;
  v11 = 0u;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B45E8);
  swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  swift_retain(a3);
  *(_QWORD *)(a3 + 24) = CurrentValueSubject.init(_:)(&v10);
  v12 = 0;
  v10 = 0u;
  v11 = 0u;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4668);
  swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  *(_QWORD *)(a3 + 32) = CurrentValueSubject.init(_:)(&v10);
  LOBYTE(v10) = 0;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B20D0);
  swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  *(_QWORD *)(a3 + 40) = CurrentValueSubject.init(_:)(&v10);
  LOBYTE(v10) = 1;
  swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  *(_QWORD *)(a3 + 48) = CurrentValueSubject.init(_:)(&v10);
  LOBYTE(v10) = 0;
  swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  *(_QWORD *)(a3 + 56) = CurrentValueSubject.init(_:)(&v10);
  *(_QWORD *)(a3 + 16) = a1;
  *(_BYTE *)(a3 + 64) = a2;
  return a3;
}

unint64_t sub_11E960()
{
  unint64_t result;

  result = qword_3BAEC8;
  if (!qword_3BAEC8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SearchExtensionTerm.State);
    atomic_store(result, (unint64_t *)&qword_3BAEC8);
  }
  return result;
}

uint64_t type metadata accessor for SearchExtension()
{
  return objc_opt_self(_TtC8ShelfKit15SearchExtension);
}

uint64_t method lookup function for SearchExtension(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for SearchExtension);
}

uint64_t dispatch thunk of SearchExtension.__allocating_init(scopes:hidesSearchBarWhenScrolling:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t assignWithCopy for SearchExtensionScope(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t assignWithTake for SearchExtensionScope(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

ValueMetadata *type metadata accessor for SearchExtensionScope()
{
  return &type metadata for SearchExtensionScope;
}

uint64_t _s8ShelfKit20SearchExtensionScopeVwcp_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

ValueMetadata *type metadata accessor for SearchExtensionTerm()
{
  return &type metadata for SearchExtensionTerm;
}

uint64_t storeEnumTagSinglePayload for SearchExtensionTerm.State(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_11EB5C + 4 * byte_2F64C5[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_11EB90 + 4 * byte_2F64C0[v4]))();
}

uint64_t sub_11EB90(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_11EB98(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x11EBA0);
  return result;
}

uint64_t sub_11EBAC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x11EBB4);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_11EBB8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_11EBC0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SearchExtensionTerm.State()
{
  return &type metadata for SearchExtensionTerm.State;
}

uint64_t ShelfKitBootstrap.buildForegroundDependencies(basedOn:)(uint64_t a1)
{
  id *v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  double (*v21)(char *, uint64_t);
  __n128 v22;
  uint64_t v23;
  NSObject *v24;
  os_signpost_type_t v25;
  void (*v26)(char *, char *, uint64_t);
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint8_t *v30;
  os_signpost_id_t v31;
  uint8_t *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double (*v50)(char *, uint64_t);
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;

  v54 = a1;
  v55 = type metadata accessor for PodcastsUIBootstrap(0);
  v53 = *(_QWORD *)(v55 - 8);
  __chkstk_darwin(v55);
  v3 = (char *)&v50 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OSSignposter(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v50 - v9;
  v11 = type metadata accessor for OSSignpostID(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v50 - v17;
  v51 = *v1;
  v19 = static OSSignposter.bootstrap.getter(v16);
  v20 = OSSignposter.logHandle.getter(v19);
  v56 = v18;
  OSSignpostID.init(log:)(v20);
  v21 = *(double (**)(char *, uint64_t))(v5 + 8);
  v52 = v4;
  v22.n128_f64[0] = v21(v10, v4);
  v23 = static OSSignposter.bootstrap.getter(v22);
  v24 = OSSignposter.logHandle.getter(v23);
  v25 = static os_signpost_type_t.begin.getter(v24);
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v26 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
    v26(v14, v56, v11);
    v27 = (uint8_t *)swift_slowAlloc(2, -1);
    v50 = v21;
    v28 = v12;
    v29 = v11;
    v30 = v27;
    *(_WORD *)v27 = 0;
    v31 = OSSignpostID.rawValue.getter(v27);
    _os_signpost_emit_with_name_impl(&dword_0, v24, v25, v31, "ShelfKitBootstrap.foreground", "", v30, 2u);
    v32 = v30;
    v11 = v29;
    v12 = v28;
    v21 = v50;
    swift_slowDealloc(v32, -1, -1);

    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
  else
  {

    v26 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
  }
  v33 = v56;
  v26(v14, v56, v11);
  v34 = type metadata accessor for OSSignpostIntervalState(0);
  swift_allocObject(v34, *(unsigned int *)(v34 + 48), *(unsigned __int16 *)(v34 + 52));
  v35 = OSSignpostIntervalState.init(id:isOpen:)(v14, 1);
  v21(v7, v52);
  PodcastsUIBootstrap.init(process:)(v51);
  v36 = PodcastsUIBootstrap.buildForegroundDependencies(basedOn:)(v54);
  (*(void (**)(char *, uint64_t))(v53 + 8))(v3, v55);
  v37 = objc_msgSend((id)objc_opt_self(PFClientUtil), "supportsLocalLibrary");
  v38 = BaseObjectGraph.conditionalIf(_:do:else:)(v37, sub_11EFE8, 0, j__swift_retain, 0);
  swift_release(v36);
  v39 = type metadata accessor for ASKBagContract(0);
  v40 = v11;
  v41 = BaseObjectGraph.satisfying<A>(_:with:)(v39, sub_11F24C, 0, v39);
  swift_release(v38);
  v42 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BAFB0);
  v43 = BaseObjectGraph.satisfying<A>(_:with:)(v42, sub_11F374, 0, v42);
  swift_release(v41);
  v44 = type metadata accessor for StorePageStateController();
  v45 = BaseObjectGraph.satisfying<A>(_:with:)(v44, sub_11F3D0, 0, v44);
  swift_release(v43);
  v46 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BAFB8);
  v47 = BaseObjectGraph.satisfying<A>(_:with:)(v46, sub_11F46C, 0, v46);
  swift_release(v45);
  v48 = BaseObjectGraph.withName(_:)(0xD000000000000015, 0x800000000030FB70);
  swift_release(v47);
  sub_1202A4("ShelfKitBootstrap.foreground", 28, 2, v35);
  swift_release(v35);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v33, v40);
  return v48;
}

uint64_t sub_11EFE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  id v6;
  id v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v12;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4F28);
  v1 = BaseObjectGraph.satisfying<A>(_:with:)(v0, sub_11F138, 0, v0);
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BB110);
  v3 = BaseObjectGraph.satisfying<A>(_:with:)(v2, sub_11F1F0, 0, v2);
  swift_release(v1);
  v4 = type metadata accessor for RecentlySearchedStorage();
  v5 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "_applePodcastsFoundationSharedUserDefaults");
  v6 = objc_msgSend((id)objc_opt_self(MTDB), "sharedInstance");
  v7 = objc_msgSend(v6, "privateQueueContext");

  v8 = (_QWORD *)swift_allocObject(v4, 96, 7);
  v9 = sub_31110((uint64_t)v5, v7, v8);

  v12 = v9;
  v10 = BaseObjectGraph.satisfying<A>(_:with:)(v4, &v12, v4);
  swift_release(v9);
  swift_release(v3);
  return v10;
}

uint64_t sub_11F138@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  v4 = type metadata accessor for LibraryObserverProvider();
  v5 = swift_allocObject(v4, 24, 7);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B68D0);
  v7 = type metadata accessor for BaseObjectGraph(0);
  swift_retain();
  inject<A, B>(_:from:)(&v9, v6, a1, v6, v7);
  result = swift_release(a1);
  *(_QWORD *)(v5 + 16) = v9;
  a2[3] = v4;
  a2[4] = (uint64_t)&protocol witness table for LibraryObserverProvider;
  *a2 = v5;
  return result;
}

uint64_t sub_11F1F0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = type metadata accessor for CategoryObserverProvider(0);
  v5 = swift_retain(a1);
  result = CategoryObserverProvider.init(asPartOf:)(v5);
  a2[3] = v4;
  a2[4] = (uint64_t)&protocol witness table for CategoryObserverProvider;
  *a2 = result;
  return result;
}

uint64_t sub_11F24C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  objc_class *v11;
  char *v12;
  id v13;
  void (*v14)(char *, uint64_t);
  uint64_t result;
  objc_super v16;

  v2 = type metadata accessor for Bag(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - v7;
  BaseObjectGraph.inject<A>(_:)((id *)((char *)&v16.receiver - v7), v9, v9);
  v10 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
  v10(v5, v8, v2);
  v11 = (objc_class *)type metadata accessor for ASKBagContract(0);
  v12 = (char *)objc_allocWithZone(v11);
  v10(&v12[OBJC_IVAR____TtC8ShelfKit14ASKBagContract_bag], v5, v2);
  v16.receiver = v12;
  v16.super_class = v11;
  v13 = objc_msgSendSuper2(&v16, "init");
  v14 = *(void (**)(char *, uint64_t))(v3 + 8);
  v14(v5, v2);
  result = ((uint64_t (*)(char *, uint64_t))v14)(v8, v2);
  *a1 = v13;
  return result;
}

char *sub_11F374@<X0>(char **a1@<X8>)
{
  id v2;
  uint64_t v3;
  char *result;

  v2 = objc_allocWithZone((Class)type metadata accessor for HighlightsProvider());
  v3 = swift_retain();
  result = HighlightsProvider.init(asPartOf:)(v3);
  *a1 = result;
  a1[1] = (char *)&protocol witness table for HighlightsProvider;
  return result;
}

uint64_t sub_11F3D0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v4 = type metadata accessor for ThinClientEpisodeStateRepository(0);
  swift_retain();
  BaseObjectGraph.injectIfAvailable<A>(_:)(v4, v4);
  v5 = type metadata accessor for ThinClientPodcastStateRepository(0);
  BaseObjectGraph.injectIfAvailable<A>(_:)(v5, v5);
  swift_release(a1);
  v6 = type metadata accessor for StorePageStateController();
  result = swift_allocObject(v6, 32, 7);
  *(_QWORD *)(result + 16) = v9;
  *(_QWORD *)(result + 24) = v8;
  *a2 = result;
  return result;
}

uint64_t sub_11F46C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BAFB8);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_11F540((uint64_t)v5);
  v6 = sub_327F8(0, (unint64_t *)&qword_3B8710, OS_dispatch_queue_ptr);
  v7 = static OS_dispatch_queue.main.getter(v6);
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 16))(a1, v5, v2);
  ActionDispatcher.targetQueue.setter(v7, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_11F540@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  void (*v42)(char *, char *, uint64_t);
  uint64_t v43;
  void (*v44)(char *, uint64_t);
  void (*v45)(char *, uint64_t);
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  void (*v55)(char *, char *, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(char *, uint64_t);
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t updated;
  uint64_t v77;
  char *v78;
  char *v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  char *v91;
  void (*v92)(char *, uint64_t);
  uint64_t v94;
  uint64_t v95;
  char *v96;
  void (*v97)(char *, uint64_t);
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  char *v120;
  char *v121;
  char *v122;
  char *v123;
  char *v124;

  v117 = a1;
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BB098);
  v2 = *(_QWORD *)(v1 - 8);
  v115 = v1;
  v116 = v2;
  __chkstk_darwin(v1);
  v114 = (char *)&v94 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BB0A0);
  v5 = *(_QWORD *)(v4 - 8);
  v112 = v4;
  v113 = v5;
  __chkstk_darwin(v4);
  v111 = (char *)&v94 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v108 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BB0A8);
  v110 = *(_QWORD *)(v108 - 8);
  v7 = __chkstk_darwin(v108);
  v107 = (char *)&v94 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DismissPurgedEpisodesActionImplementation(0, v7);
  v10 = *(_QWORD *)(v9 - 8);
  v104 = v9;
  v105 = v10;
  v11 = __chkstk_darwin(v9);
  v103 = (char *)&v94 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101 = type metadata accessor for RestorePurgedEpisodesActionImplementation(0, v11);
  v102 = *(_QWORD *)(v101 - 8);
  v13 = __chkstk_darwin(v101);
  v100 = (char *)&v94 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = type metadata accessor for AcceptDanglingDownloadsActionImplementation(0, v13);
  v99 = *(_QWORD *)(v98 - 8);
  v15 = __chkstk_darwin(v98);
  v96 = (char *)&v94 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for ApplyEpisodeLimitRecommendationActionImplementation(0, v15);
  v95 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v19 = (char *)&v94 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BAFB8);
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v109 = (char *)&v94 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v118 = (char *)&v94 - v24;
  __chkstk_darwin(v25);
  v122 = (char *)&v94 - v26;
  __chkstk_darwin(v27);
  v123 = (char *)&v94 - v28;
  __chkstk_darwin(v29);
  v124 = (char *)&v94 - v30;
  __chkstk_darwin(v31);
  v33 = (char *)&v94 - v32;
  __chkstk_darwin(v34);
  v36 = (char *)&v94 - v35;
  v38 = __chkstk_darwin(v37);
  v40 = (char *)&v94 - v39;
  ApplyEpisodeLimitRecommendationActionImplementation.init()(v38);
  v41 = type metadata accessor for BaseObjectGraph(0);
  ((void (*)(void))ActionDispatcher.init())();
  v106 = v21;
  v42 = *(void (**)(char *, char *, uint64_t))(v21 + 16);
  v121 = v40;
  v42(v40, v36, v20);
  v43 = sub_F1C0(&qword_3BB0B0, (void (*)(uint64_t))&type metadata accessor for ApplyEpisodeLimitRecommendationActionImplementation, (uint64_t)&protocol conformance descriptor for ApplyEpisodeLimitRecommendationActionImplementation);
  ActionDispatcher.add<A>(_:)(v19, v20, v17, v43);
  v44 = *(void (**)(char *, uint64_t))(v21 + 8);
  v44(v36, v20);
  v45 = v44;
  v46 = (*(uint64_t (**)(char *, uint64_t))(v95 + 8))(v19, v17);
  v47 = v96;
  AcceptDanglingDownloadsActionImplementation.init()(v46);
  ActionDispatcher.init()(v41);
  v119 = v36;
  v42(v36, v33, v20);
  v48 = sub_F1C0(&qword_3BB0B8, (void (*)(uint64_t))&type metadata accessor for AcceptDanglingDownloadsActionImplementation, (uint64_t)&protocol conformance descriptor for AcceptDanglingDownloadsActionImplementation);
  v49 = v47;
  v50 = v47;
  v51 = v98;
  ActionDispatcher.add<A>(_:)(v49, v20, v98, v48);
  v44(v33, v20);
  v52 = (*(uint64_t (**)(char *, uint64_t))(v99 + 8))(v50, v51);
  v53 = v100;
  RestorePurgedEpisodesActionImplementation.init()(v52);
  v54 = v124;
  ActionDispatcher.init()(v41);
  v120 = v33;
  v42(v33, v54, v20);
  v55 = v42;
  v56 = sub_F1C0(&qword_3BB0C0, (void (*)(uint64_t))&type metadata accessor for RestorePurgedEpisodesActionImplementation, (uint64_t)&protocol conformance descriptor for RestorePurgedEpisodesActionImplementation);
  v57 = v101;
  ActionDispatcher.add<A>(_:)(v53, v20, v101, v56);
  v45(v54, v20);
  v58 = (*(uint64_t (**)(char *, uint64_t))(v102 + 8))(v53, v57);
  v59 = v103;
  DismissPurgedEpisodesActionImplementation.init()(v58);
  v60 = v123;
  ActionDispatcher.init()(v41);
  v55(v54, v60, v20);
  v61 = sub_F1C0(&qword_3BB0C8, (void (*)(uint64_t))&type metadata accessor for DismissPurgedEpisodesActionImplementation, (uint64_t)&protocol conformance descriptor for DismissPurgedEpisodesActionImplementation);
  v62 = v104;
  ActionDispatcher.add<A>(_:)(v59, v20, v104, v61);
  v45(v60, v20);
  v63 = v45;
  (*(void (**)(char *, uint64_t))(v105 + 8))(v59, v62);
  v64 = type metadata accessor for RemoveEpisodesDownloadAction(0);
  v65 = sub_F1C0(&qword_3BB0D0, (void (*)(uint64_t))&type metadata accessor for RemoveEpisodesDownloadAction, (uint64_t)&protocol conformance descriptor for RemoveEpisodesDownloadAction);
  v66 = v107;
  IntentDelegatingActionImplementation.init()(v64, v65);
  v67 = v122;
  ActionDispatcher.init()(v41);
  v55(v60, v67, v20);
  v68 = sub_121DBC(&qword_3BB0D8, &qword_3BB0A8);
  v69 = v108;
  ActionDispatcher.add<A>(_:)(v66, v20, v108, v68);
  v63(v67, v20);
  (*(void (**)(char *, uint64_t))(v110 + 8))(v66, v69);
  v70 = type metadata accessor for DownloadEpisodesAction(0);
  v71 = sub_F1C0(&qword_3BB0E0, (void (*)(uint64_t))&type metadata accessor for DownloadEpisodesAction, (uint64_t)&protocol conformance descriptor for DownloadEpisodesAction);
  v72 = v111;
  IntentDelegatingActionImplementation.init()(v70, v71);
  v73 = v118;
  v94 = v41;
  ActionDispatcher.init()(v41);
  v55(v67, v73, v20);
  v74 = sub_121DBC(&qword_3BB0E8, &qword_3BB0A0);
  v75 = v112;
  ActionDispatcher.add<A>(_:)(v72, v20, v112, v74);
  v63(v73, v20);
  v97 = v63;
  (*(void (**)(char *, uint64_t))(v113 + 8))(v72, v75);
  updated = type metadata accessor for UpdateEpisodeDownloadBehaviorAction(0);
  v77 = sub_F1C0(&qword_3BB0F0, (void (*)(uint64_t))&type metadata accessor for UpdateEpisodeDownloadBehaviorAction, (uint64_t)&protocol conformance descriptor for UpdateEpisodeDownloadBehaviorAction);
  v78 = v114;
  IntentDelegatingActionImplementation.init()(updated, v77);
  v79 = v109;
  ActionDispatcher.init()(v41);
  v80 = v73;
  v81 = v79;
  v55(v80, v79, v20);
  v82 = sub_121DBC(&qword_3BB0F8, &qword_3BB098);
  v83 = v115;
  ActionDispatcher.add<A>(_:)(v78, v20, v115, v82);
  v63(v81, v20);
  (*(void (**)(char *, uint64_t))(v116 + 8))(v78, v83);
  v84 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3BB100);
  v85 = *(_QWORD *)(v106 + 72);
  v86 = *(unsigned __int8 *)(v106 + 80);
  v87 = (v86 + 32) & ~v86;
  v116 = swift_allocObject(v84, v87 - v85 + 8 * v85, v86 | 7);
  v88 = v116 + v87;
  v55((char *)v88, v121, v20);
  v55((char *)(v88 + v85), v119, v20);
  v55((char *)(v88 + 2 * v85), v120, v20);
  v55((char *)(v88 + 3 * v85), v124, v20);
  v55((char *)(v88 + 4 * v85), v123, v20);
  v55((char *)(v88 + 5 * v85), v122, v20);
  v89 = v118;
  v55((char *)(v88 + 6 * v85), v118, v20);
  ActionDispatcher.init()(v94);
  ActionDispatcher.add(contentsOf:)(v88, v20);
  ActionDispatcher.add(contentsOf:)(v88 + v85, v20);
  ActionDispatcher.add(contentsOf:)(v88 + 2 * v85, v20);
  ActionDispatcher.add(contentsOf:)(v88 + 3 * v85, v20);
  ActionDispatcher.add(contentsOf:)(v88 + 4 * v85, v20);
  ActionDispatcher.add(contentsOf:)(v88 + 5 * v85, v20);
  ActionDispatcher.add(contentsOf:)(v88 + 6 * v85, v20);
  v90 = v116;
  swift_setDeallocating(v116);
  swift_arrayDestroy(v88, 7, v20);
  swift_deallocClassInstance(v90, 32, 7);
  v91 = v89;
  v92 = v97;
  v97(v91, v20);
  v92(v122, v20);
  v92(v123, v20);
  v92(v124, v20);
  v92(v120, v20);
  v92(v119, v20);
  return ((uint64_t (*)(char *, uint64_t))v92)(v121, v20);
}

uint64_t ShelfKitBootstrap.buildBackgroundDependencies()()
{
  id *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  double (*v21)(char *, uint64_t);
  __n128 v22;
  uint64_t v23;
  NSObject *v24;
  os_signpost_type_t v25;
  void (*v26)(char *, char *, uint64_t);
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint8_t *v30;
  os_signpost_id_t v31;
  uint8_t *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  double (*v51)(char *, uint64_t);
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;

  v1 = type metadata accessor for PodcastsUIBootstrap(0);
  v54 = *(_QWORD *)(v1 - 8);
  v55 = v1;
  __chkstk_darwin(v1);
  v3 = (char *)&v50 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OSSignposter(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v50 - v9;
  v11 = type metadata accessor for OSSignpostID(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v50 - v17;
  v52 = *v0;
  v19 = static OSSignposter.bootstrap.getter(v16);
  v20 = OSSignposter.logHandle.getter(v19);
  v56 = v18;
  OSSignpostID.init(log:)(v20);
  v21 = *(double (**)(char *, uint64_t))(v5 + 8);
  v53 = v4;
  v22.n128_f64[0] = v21(v10, v4);
  v23 = static OSSignposter.bootstrap.getter(v22);
  v24 = OSSignposter.logHandle.getter(v23);
  v25 = static os_signpost_type_t.begin.getter(v24);
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v26 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
    v26(v14, v56, v11);
    v27 = (uint8_t *)swift_slowAlloc(2, -1);
    v51 = v21;
    v28 = v12;
    v29 = v11;
    v30 = v27;
    *(_WORD *)v27 = 0;
    v31 = OSSignpostID.rawValue.getter(v27);
    _os_signpost_emit_with_name_impl(&dword_0, v24, v25, v31, "ShelfKitBootstrap.background", "", v30, 2u);
    v32 = v30;
    v11 = v29;
    v12 = v28;
    v21 = v51;
    swift_slowDealloc(v32, -1, -1);

    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
  else
  {

    v26 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
  }
  v33 = v56;
  v26(v14, v56, v11);
  v34 = type metadata accessor for OSSignpostIntervalState(0);
  swift_allocObject(v34, *(unsigned int *)(v34 + 48), *(unsigned __int16 *)(v34 + 52));
  v35 = OSSignpostIntervalState.init(id:isOpen:)(v14, 1);
  v21(v7, v53);
  v36 = PodcastsUIBootstrap.init(process:)(v52);
  v37 = PodcastsUIBootstrap.buildBackgroundDependencies()(v36);
  (*(void (**)(char *, uint64_t))(v54 + 8))(v3, v55);
  v38 = objc_msgSend((id)objc_opt_self(PFClientUtil), "supportsLocalLibrary");
  v39 = BaseObjectGraph.conditionalIf(_:do:else:)(v38, sub_12057C, 0, sub_120C64, 0);
  swift_release(v37);
  v40 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3BAFC0);
  v41 = v11;
  v42 = BaseObjectGraph.satisfying<A>(_:with:)(v40, sub_120F60, 0, v40);
  swift_release(v39);
  v43 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BE9F0);
  v44 = BaseObjectGraph.satisfying<A>(_:with:)(v43, sub_121004, 0, v43);
  swift_release(v42);
  v45 = type metadata accessor for MetricsPipeline(0);
  v46 = BaseObjectGraph.satisfying<A>(_:with:)(v45, sub_1210D8, 0, v45);
  swift_release(v44);
  v47 = BaseObjectGraph.map(_:)(sub_121A28, 0);
  swift_release(v46);
  v48 = BaseObjectGraph.withName(_:)(0xD000000000000020, 0x800000000030FBB0);
  swift_release(v47);
  sub_1202A4("ShelfKitBootstrap.background", 28, 2, v35);
  swift_release(v35);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v33, v41);
  return v48;
}

char *sub_1202A4(const char *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  char *result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  char *v29;
  uint8_t *v30;
  os_signpost_id_t v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  int v38;
  char *v39;

  v38 = a3;
  v39 = (char *)a1;
  v5 = type metadata accessor for OSSignpostError(0);
  v35 = *(_QWORD *)(v5 - 8);
  v36 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OSSignpostID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v37 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v33 - v12;
  v14 = type metadata accessor for OSSignposter(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = static OSSignposter.bootstrap.getter(v16);
  v20 = OSSignposter.logHandle.getter(v19);
  v21 = OSSignpostIntervalState.signpostID.getter();
  v34 = static os_signpost_type_t.end.getter(v21);
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    goto LABEL_5;
  v33 = v15;
  v22 = v9;
  if ((v38 & 1) == 0)
  {
    if (!v39)
    {
      __break(1u);
LABEL_5:

      (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v8);
      return (char *)(*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v14);
    }
    goto LABEL_10;
  }
  result = v39;
  if ((unint64_t)v39 >> 32)
  {
    __break(1u);
    goto LABEL_16;
  }
  if (v39 >> 11 == 27)
  {
LABEL_17:
    __break(1u);
    return result;
  }
  if (v39 >> 16 > 0x10)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v39 = sub_2441C8();
LABEL_10:
  v24 = swift_retain();
  checkForErrorAndConsumeState(state:)(v24);
  swift_release(a4);
  v26 = v35;
  v25 = v36;
  if ((*(unsigned int (**)(char *, uint64_t))(v35 + 88))(v7, v36) == enum case for OSSignpostError.doubleEnd(_:))
  {
    v27 = "[Error] Interval already ended";
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v26 + 8))(v7, v25);
    v27 = "";
  }
  v28 = v14;
  v29 = v37;
  (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v37, v13, v8);
  v30 = (uint8_t *)swift_slowAlloc(2, -1);
  *(_WORD *)v30 = 0;
  v31 = OSSignpostID.rawValue.getter(v30);
  _os_signpost_emit_with_name_impl(&dword_0, v20, (os_signpost_type_t)v34, v31, v39, v27, v30, 2u);
  swift_slowDealloc(v30, -1, -1);

  v32 = *(void (**)(char *, uint64_t))(v22 + 8);
  v32(v13, v8);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v18, v28);
  return (char *)((uint64_t (*)(char *, uint64_t))v32)(v29, v8);
}

uint64_t sub_12057C()
{
  return BaseObjectGraph.chainingIntentDispatcher(dispatcher:)(sub_1205A8, 0);
}

uint64_t sub_1205A8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v38;
  unint64_t v39;
  void (*v40)(char *, uint64_t);
  __n128 v41;
  unint64_t v42;
  __n128 v43;
  unint64_t v44;
  __n128 v45;
  unint64_t v46;
  __n128 v47;
  unint64_t v48;
  char *v49;
  __n128 v50;
  unint64_t v51;
  char *v52;
  __n128 v53;
  unint64_t v54;
  char *v55;
  __n128 v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  __n128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  __n128 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(void);
  uint64_t v75;
  __n128 v76;
  uint64_t v77;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  char *v95;
  char *v96;

  v86 = a1;
  v1 = type metadata accessor for RemoveEpisodesDownloadIntentImplementation(0);
  v2 = *(_QWORD *)(v1 - 8);
  v84 = v1;
  v85 = v2;
  v3 = __chkstk_darwin(v1);
  v83 = (char *)&v79 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DownloadEpisodesIntentImplementation(0, v3);
  v6 = *(_QWORD *)(v5 - 8);
  v81 = v5;
  v82 = v6;
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v79 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for NativeIntentDispatcher(0, v7);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v80 = (char *)&v79 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v96 = (char *)&v79 - v14;
  __chkstk_darwin(v15);
  v95 = (char *)&v79 - v16;
  __chkstk_darwin(v17);
  v88 = (char *)&v79 - v18;
  __chkstk_darwin(v19);
  v87 = (char *)&v79 - v20;
  __chkstk_darwin(v21);
  v23 = (char *)&v79 - v22;
  __chkstk_darwin(v24);
  v26 = (char *)&v79 - v25;
  __chkstk_darwin(v27);
  v29 = (char *)&v79 - v28;
  __chkstk_darwin(v30);
  v32 = (char *)&v79 - v31;
  __chkstk_darwin(v33);
  v35 = (char *)&v79 - v34;
  v37 = __chkstk_darwin(v36);
  v94 = (char *)&v79 - v38;
  NativeIntentDispatcher.init()(v37);
  v39 = sub_121B9C();
  NativeIntentDispatcher.registering<A>(_:)(v39, &type metadata for FollowFeedIntentImplementation, v39);
  v40 = *(void (**)(char *, uint64_t))(v11 + 8);
  v93 = v35;
  v40(v35, v10);
  NativeIntentDispatcher.init()(v41);
  v42 = sub_121BE0();
  NativeIntentDispatcher.registering<A>(_:)(v42, &type metadata for FindShowEpisodesIntentImplementation, v42);
  v92 = v32;
  v40(v32, v10);
  NativeIntentDispatcher.init()(v43);
  v44 = sub_121C24();
  NativeIntentDispatcher.registering<A>(_:)(v44, &type metadata for FetchShowLatestCatalogEpisodesIntentImplementation, v44);
  v91 = v29;
  v40(v29, v10);
  NativeIntentDispatcher.init()(v45);
  v46 = sub_121C68();
  NativeIntentDispatcher.registering<A>(_:)(v46, &type metadata for FetchUpNextEpisodesIntentImplementation, v46);
  v89 = v26;
  v40(v26, v10);
  NativeIntentDispatcher.init()(v47);
  v48 = sub_121CAC();
  NativeIntentDispatcher.registering<A>(_:)(v48, &type metadata for FindOrCreateLocalEpisodeContentIDsIntentImplementation, v48);
  v90 = v23;
  v40(v23, v10);
  v49 = v87;
  NativeIntentDispatcher.init()(v50);
  v51 = sub_121CF0();
  NativeIntentDispatcher.registering<A>(_:)(v51, &type metadata for FindOrCreateEpisodeOfferContentIDsIntentsIntentImplementation, v51);
  v40(v49, v10);
  v52 = v88;
  NativeIntentDispatcher.init()(v53);
  v54 = sub_121D34();
  NativeIntentDispatcher.registering<A>(_:)(v54, &type metadata for BookmarkEpisodeIntentImplementation, v54);
  v40(v52, v10);
  v55 = v95;
  NativeIntentDispatcher.init()(v56);
  v57 = sub_121D78();
  NativeIntentDispatcher.registering<A>(_:)(v57, &type metadata for UnbookmarkEpisodeIntentImplementation, v57);
  v58 = ((uint64_t (*)(char *, uint64_t))v40)(v55, v10);
  DownloadEpisodesIntentImplementation.init()(v58);
  v59 = v96;
  NativeIntentDispatcher.init()(v60);
  v61 = sub_F1C0(&qword_3BB080, (void (*)(uint64_t))&type metadata accessor for DownloadEpisodesIntentImplementation, (uint64_t)&protocol conformance descriptor for DownloadEpisodesIntentImplementation);
  v62 = v81;
  NativeIntentDispatcher.registering<A>(_:)(v9, v81, v61);
  v40(v59, v10);
  v63 = (*(uint64_t (**)(char *, uint64_t))(v82 + 8))(v9, v62);
  v64 = v83;
  RemoveEpisodesDownloadIntentImplementation.init()(v63);
  v65 = v80;
  NativeIntentDispatcher.init()(v66);
  v67 = sub_F1C0((unint64_t *)&unk_3BB088, (void (*)(uint64_t))&type metadata accessor for RemoveEpisodesDownloadIntentImplementation, (uint64_t)&protocol conformance descriptor for RemoveEpisodesDownloadIntentImplementation);
  v68 = v84;
  NativeIntentDispatcher.registering<A>(_:)(v64, v84, v67);
  v40(v65, v10);
  (*(void (**)(char *, uint64_t))(v85 + 8))(v64, v68);
  v69 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BB038);
  v70 = *(_QWORD *)(v11 + 72);
  v71 = *(unsigned __int8 *)(v11 + 80);
  v72 = (v71 + 32) & ~v71;
  v85 = swift_allocObject(v69, v72 + 10 * v70, v71 | 7);
  v73 = v85 + v72;
  v74 = *(void (**)(void))(v11 + 16);
  ((void (*)(uint64_t, char *, uint64_t))v74)(v85 + v72, v94, v10);
  v84 = v73 + v70;
  v74();
  v83 = (char *)(v73 + 2 * v70);
  v74();
  v82 = v73 + 3 * v70;
  v74();
  v81 = v73 + 4 * v70;
  v74();
  ((void (*)(uint64_t, char *, uint64_t))v74)(v73 + 5 * v70, v90, v10);
  ((void (*)(uint64_t, char *, uint64_t))v74)(v73 + 6 * v70, v49, v10);
  ((void (*)(uint64_t, char *, uint64_t))v74)(v73 + 7 * v70, v52, v10);
  v75 = v73 + 8 * v70;
  ((void (*)(uint64_t, char *, uint64_t))v74)(v75, v95, v10);
  ((void (*)(uint64_t, char *, uint64_t))v74)(v73 + 9 * v70, v96, v10);
  NativeIntentDispatcher.init()(v76);
  NativeIntentDispatcher.register(contentsOf:)(v73);
  NativeIntentDispatcher.register(contentsOf:)(v84);
  NativeIntentDispatcher.register(contentsOf:)(v83);
  NativeIntentDispatcher.register(contentsOf:)(v82);
  NativeIntentDispatcher.register(contentsOf:)(v81);
  NativeIntentDispatcher.register(contentsOf:)(v73 + 5 * v70);
  NativeIntentDispatcher.register(contentsOf:)(v73 + 6 * v70);
  NativeIntentDispatcher.register(contentsOf:)(v73 + 7 * v70);
  NativeIntentDispatcher.register(contentsOf:)(v75);
  NativeIntentDispatcher.register(contentsOf:)(v73 + 9 * v70);
  v77 = v85;
  swift_setDeallocating(v85);
  swift_arrayDestroy(v73, 10, v10);
  swift_deallocClassInstance(v77, 32, 7);
  v40(v96, v10);
  v40(v95, v10);
  v40(v88, v10);
  v40(v87, v10);
  v40(v90, v10);
  v40(v89, v10);
  v40(v91, v10);
  v40(v92, v10);
  v40(v93, v10);
  return ((uint64_t (*)(char *, uint64_t))v40)(v94, v10);
}

uint64_t sub_120C64()
{
  return BaseObjectGraph.chainingIntentDispatcher(dispatcher:)(sub_120C90, 0);
}

uint64_t sub_120C90@<X0>(uint64_t a1@<X8>, __n128 a2@<Q0>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  double (*v20)(char *, uint64_t);
  __n128 v21;
  unint64_t v22;
  __n128 v23;
  unint64_t v24;
  __n128 v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double (*v32)(uint64_t, char *, uint64_t);
  char *v33;
  __n128 v34;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;

  v40 = a1;
  v2 = type metadata accessor for NativeIntentDispatcher(0, a2);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v8 = (char *)&v36 - v7;
  __chkstk_darwin(v9);
  v11 = (char *)&v36 - v10;
  __chkstk_darwin(v12);
  v14 = (char *)&v36 - v13;
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v36 - v17;
  NativeIntentDispatcher.init()(v16);
  v19 = sub_121A8C();
  v39 = v18;
  NativeIntentDispatcher.registering<A>(_:)(v19, &type metadata for ThinClientBookmarkEpisodeIntentImplementation, v19);
  v20 = *(double (**)(char *, uint64_t))(v3 + 8);
  v21.n128_f64[0] = v20(v14, v2);
  NativeIntentDispatcher.init()(v21);
  v22 = sub_121AD0();
  v38 = v14;
  NativeIntentDispatcher.registering<A>(_:)(v22, &type metadata for ThinClientUnbookmarkEpisodeIntentImplementation, v22);
  v41 = v11;
  v23.n128_f64[0] = v20(v11, v2);
  NativeIntentDispatcher.init()(v23);
  v24 = sub_121B14();
  NativeIntentDispatcher.registering<A>(_:)(v24, &type metadata for ThinClientMarkAsPlayedEpisodeIntentImplementation, v24);
  v37 = v8;
  v25.n128_f64[0] = v20(v8, v2);
  NativeIntentDispatcher.init()(v25);
  v26 = sub_121B58();
  NativeIntentDispatcher.registering<A>(_:)(v26, &type metadata for ThinClientMarkAsUnplayedEpisodeIntentImplementation, v26);
  v20(v5, v2);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BB038);
  v28 = *(_QWORD *)(v3 + 72);
  v29 = *(unsigned __int8 *)(v3 + 80);
  v30 = (v29 + 32) & ~v29;
  v31 = swift_allocObject(v27, v30 + 4 * v28, v29 | 7);
  v32 = *(double (**)(uint64_t, char *, uint64_t))(v3 + 16);
  v32(v31 + v30, v18, v2);
  v32(v31 + v30 + v28, v14, v2);
  v32(v31 + v30 + 2 * v28, v41, v2);
  v33 = v37;
  v34.n128_f64[0] = v32(v31 + v30 + 3 * v28, v37, v2);
  NativeIntentDispatcher.init()(v34);
  NativeIntentDispatcher.register(contentsOf:)(v31 + v30);
  NativeIntentDispatcher.register(contentsOf:)(v31 + v30 + v28);
  NativeIntentDispatcher.register(contentsOf:)(v31 + v30 + 2 * v28);
  NativeIntentDispatcher.register(contentsOf:)(v31 + v30 + 3 * v28);
  swift_setDeallocating(v31);
  swift_arrayDestroy(v31 + v30, 4, v2);
  swift_deallocClassInstance(v31, 32, 7);
  v20(v33, v2);
  v20(v41, v2);
  v20(v38, v2);
  return ((uint64_t (*)(char *, uint64_t))v20)(v39, v2);
}

uint64_t sub_120F60@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v4 = sub_327F8(0, (unint64_t *)&unk_3BF6A0, ACAccountStore_ptr);
  swift_retain();
  BaseObjectGraph.inject<A>(_:)(&v8, v4, v4);
  swift_release(a1);
  v5 = v8;
  v6 = type metadata accessor for JSStoreDataCache();
  result = swift_allocObject(v6, 24, 7);
  *(_QWORD *)(result + 16) = v5;
  a2[3] = v6;
  a2[4] = (uint64_t)&protocol witness table for JSStoreDataCache;
  *a2 = result;
  return result;
}

uint64_t sub_121004@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v4 = type metadata accessor for JSStoreDataProvider();
  v5 = (_QWORD *)swift_allocObject(v4, 104, 7);
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3BAFC0);
  swift_retain();
  BaseObjectGraph.inject<A>(_:)(v5 + 2, v6, v6);
  v7 = type metadata accessor for ExplicitContentPresenter(0);
  BaseObjectGraph.inject<A>(_:)(&v10, v7, v7);
  v5[7] = v10;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8C50);
  BaseObjectGraph.inject<A>(_:)(v5 + 8, v8, v8);
  result = swift_release(a1);
  a2[3] = v4;
  a2[4] = &off_387AC8;
  *a2 = v5;
  return result;
}

uint64_t sub_1210D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t (*v38)(char *, char *, uint64_t);
  id v39;
  id v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t);
  uint64_t v43;
  void (*v44)(char *, uint64_t);
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  char *v67;
  ValueMetadata *v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *boxed_opaque_existential_2Tm;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  void (*v85)(char *, uint64_t);
  char *v86;
  char *v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t (*v106)(char *, char *, uint64_t);
  char *v107;
  char *v108;
  char *v109;
  uint64_t v110;
  _QWORD v111[5];
  id v112;
  ValueMetadata *matched;
  void *v114;

  v105 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3BAFD0);
  v4 = __chkstk_darwin(v3);
  v104 = (char *)&v85 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for PodcastsMetricsEventRecorder(0, v4);
  v102 = *(_QWORD *)(v6 - 8);
  v103 = v6;
  v7 = __chkstk_darwin(v6);
  v101 = (char *)&v85 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = type metadata accessor for JSMetricsEventLinter(0, v7);
  v99 = *(_QWORD *)(v100 - 8);
  __chkstk_darwin(v100);
  v109 = (char *)&v85 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = type metadata accessor for MetricsFieldExclusionRequest(0);
  v93 = *(_QWORD *)(v91 - 8);
  __chkstk_darwin(v91);
  v90 = (char *)&v85 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = type metadata accessor for MetricsFieldInclusionRequest(0);
  v95 = *(_QWORD *)(v88 - 8);
  v11 = __chkstk_darwin(v88);
  v13 = (char *)&v85 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v110 = type metadata accessor for MetricsFieldsAggregator(0, v11);
  v14 = *(_QWORD *)(v110 - 8);
  __chkstk_darwin(v110);
  v16 = (char *)&v85 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v19 = (char *)&v85 - v18;
  __chkstk_darwin(v20);
  v87 = (char *)&v85 - v21;
  __chkstk_darwin(v22);
  v89 = (char *)&v85 - v23;
  __chkstk_darwin(v24);
  v86 = (char *)&v85 - v25;
  __chkstk_darwin(v26);
  v107 = (char *)&v85 - v27;
  __chkstk_darwin(v28);
  v108 = (char *)&v85 - v29;
  v30 = type metadata accessor for Bag(0);
  v31 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v33 = (char *)&v85 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v34);
  v36 = (char *)&v85 - v35;
  v98 = a1;
  BaseObjectGraph.inject<A>(_:)((void (**)(char *, uint64_t))((char *)&v85 - v35), v37, v37);
  v96 = v31;
  v38 = *(uint64_t (**)(char *, char *, uint64_t))(v31 + 16);
  v92 = v36;
  v97 = v30;
  v106 = v38;
  v38(v33, v36, v30);
  v39 = objc_msgSend((id)objc_opt_self(ACAccountStore), "ams_sharedAccountStore");
  matched = (ValueMetadata *)sub_327F8(0, (unint64_t *)&unk_3BF6A0, ACAccountStore_ptr);
  v114 = &protocol witness table for ACAccountStore;
  v112 = v39;
  v40 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v94 = v33;
  MetricsFieldsAggregator.init(bag:accountProvider:bundle:)(v33, &v112, v40);
  matched = (ValueMetadata *)type metadata accessor for ClickLocationFieldsProvider(0);
  v114 = (void *)sub_F1C0((unint64_t *)&unk_3BAFE0, (void (*)(uint64_t))&type metadata accessor for ClickLocationFieldsProvider, (uint64_t)&protocol conformance descriptor for ClickLocationFieldsProvider);
  __swift_allocate_boxed_opaque_existential_2Tm(&v112);
  v41 = ClickLocationFieldsProvider.init()();
  static MetricsFieldInclusionRequest.clickLocation.getter(v41);
  MetricsFieldsAggregator.addingOptInProvider(_:forRequest:)(&v112, v13);
  v42 = *(void (**)(char *, uint64_t))(v95 + 8);
  v43 = v88;
  v42(v13, v88);
  v95 = v14;
  v44 = *(void (**)(char *, uint64_t))(v14 + 8);
  v45 = v110;
  v44(v16, v110);
  __swift_destroy_boxed_opaque_existential_1(&v112);
  matched = &type metadata for CrossfireReferralFieldsProvider;
  v114 = (void *)sub_121A48();
  static MetricsFieldInclusionRequest.crossfireReferral.getter(v114);
  v46 = v87;
  MetricsFieldsAggregator.addingOptInProvider(_:forRequest:)(&v112, v13);
  v47 = v43;
  v42(v13, v43);
  v44(v19, v45);
  __swift_destroy_boxed_opaque_existential_1(&v112);
  matched = (ValueMetadata *)type metadata accessor for SearchFiltersFieldsProvider(0);
  v114 = (void *)sub_F1C0((unint64_t *)&unk_3BAFF0, (void (*)(uint64_t))&type metadata accessor for SearchFiltersFieldsProvider, (uint64_t)&protocol conformance descriptor for SearchFiltersFieldsProvider);
  __swift_allocate_boxed_opaque_existential_2Tm(&v112);
  v48 = SearchFiltersFieldsProvider.init()();
  static MetricsFieldInclusionRequest.searchFilters.getter(v48);
  v49 = v89;
  MetricsFieldsAggregator.addingOptInProvider(_:forRequest:)(&v112, v13);
  v42(v13, v47);
  v44(v46, v45);
  __swift_destroy_boxed_opaque_existential_1(&v112);
  type metadata accessor for AnalyticsIdentifierManager(0);
  v50 = static AnalyticsIdentifierManager.clientInfo.getter();
  v51 = static AnalyticsIdentifierManager.resetInterval.getter();
  type metadata accessor for Unstable.Accounts(0);
  v52 = static Unstable.Accounts.shared.getter();
  v53 = static AMSMetricsIdentifierFieldsProvider.metricsKeys.getter();
  matched = (ValueMetadata *)type metadata accessor for AMSMetricsIdentifierFieldsProvider(0);
  v114 = &protocol witness table for AMSMetricsIdentifierFieldsProvider;
  __swift_allocate_boxed_opaque_existential_2Tm(&v112);
  v54 = AMSMetricsIdentifierFieldsProvider.init(accounts:clientInfo:resetInterval:keys:)(v52, v50, v53, v51);
  v55 = v90;
  static MetricsFieldExclusionRequest.amsMetricsID.getter(v54);
  v56 = v86;
  v57 = v49;
  MetricsFieldsAggregator.addingOptOutProvider(_:forRequest:)(&v112, v55);
  v58 = v55;
  v59 = v91;
  v93 = *(_QWORD *)(v93 + 8);
  ((void (*)(char *))v93)(v55);
  v44(v57, v45);
  __swift_destroy_boxed_opaque_existential_1(&v112);
  matched = (ValueMetadata *)type metadata accessor for PageContextFieldsProvider(0);
  v114 = (void *)sub_F1C0((unint64_t *)&unk_3BF6C0, (void (*)(uint64_t))&type metadata accessor for PageContextFieldsProvider, (uint64_t)&protocol conformance descriptor for PageContextFieldsProvider);
  __swift_allocate_boxed_opaque_existential_2Tm(&v112);
  PageContextFieldsProvider.init()();
  if (qword_3B0070 != -1)
    swift_once(&qword_3B0070, sub_6BACC);
  v60 = __swift_project_value_buffer(v59, (uint64_t)qword_3B3C48);
  v61 = v107;
  MetricsFieldsAggregator.addingOptOutProvider(_:forRequest:)(&v112, v60);
  v44(v56, v45);
  __swift_destroy_boxed_opaque_existential_1(&v112);
  matched = (ValueMetadata *)type metadata accessor for XPAccountsMatchFieldsProvider(0);
  v114 = (void *)sub_F1C0((unint64_t *)&unk_3BB000, (void (*)(uint64_t))&type metadata accessor for XPAccountsMatchFieldsProvider, (uint64_t)&protocol conformance descriptor for XPAccountsMatchFieldsProvider);
  __swift_allocate_boxed_opaque_existential_2Tm(&v112);
  v85 = v44;
  v62 = swift_retain();
  v63 = XPAccountsMatchFieldsProvider.init(asPartOf:)(v62);
  static MetricsFieldExclusionRequest.xpAccountsMatch.getter(v63);
  v64 = v108;
  v65 = v61;
  MetricsFieldsAggregator.addingOptOutProvider(_:forRequest:)(&v112, v58);
  ((void (*)(char *, uint64_t))v93)(v58, v59);
  v44(v61, v45);
  __swift_destroy_boxed_opaque_existential_1(&v112);
  v66 = sub_F1C0((unint64_t *)&unk_3BF6D0, (void (*)(uint64_t))&type metadata accessor for JSMetricsEventLinter, (uint64_t)&protocol conformance descriptor for JSMetricsEventLinter);
  v67 = v109;
  v68 = (ValueMetadata *)v100;
  BaseObjectGraph.inject<A>(_:)(v100, v100, v66);
  v69 = v94;
  v70 = v92;
  v71 = v97;
  v72 = v106(v94, v92, v97);
  v73 = static MetricsTopic.main.getter(v72);
  v74 = v101;
  PodcastsMetricsEventRecorder.init(bag:defaultTopic:)(v69, v73, v75);
  v98 = type metadata accessor for StandardMetricsFieldsBuilder(0);
  (*(void (**)(char *, char *, uint64_t))(v95 + 16))(v65, v64, v110);
  matched = v68;
  v114 = (void *)sub_F1C0(&qword_3BB010, (void (*)(uint64_t))&type metadata accessor for JSMetricsEventLinter, (uint64_t)&protocol conformance descriptor for JSMetricsEventLinter);
  v76 = __swift_allocate_boxed_opaque_existential_2Tm(&v112);
  v77 = v99;
  (*(void (**)(_QWORD *, char *, ValueMetadata *))(v99 + 16))(v76, v67, v68);
  v78 = v103;
  v111[3] = v103;
  v111[4] = sub_F1C0((unint64_t *)&unk_3BF6E0, (void (*)(uint64_t))&type metadata accessor for PodcastsMetricsEventRecorder, (uint64_t)&protocol conformance descriptor for PodcastsMetricsEventRecorder);
  boxed_opaque_existential_2Tm = __swift_allocate_boxed_opaque_existential_2Tm(v111);
  v80 = v102;
  (*(void (**)(_QWORD *, char *, uint64_t))(v102 + 16))(boxed_opaque_existential_2Tm, v74, v78);
  v81 = v104;
  v106(v104, v70, v71);
  v82 = v70;
  v83 = v96;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v96 + 56))(v81, 0, 1, v71);
  MetricsPipeline.init(builderType:aggregator:linter:recorder:bag:)(v98, &protocol witness table for StandardMetricsFieldsBuilder, v107, &v112, v111, v81);
  (*(void (**)(char *, uint64_t))(v80 + 8))(v74, v78);
  (*(void (**)(char *, ValueMetadata *))(v77 + 8))(v109, v68);
  v85(v108, v110);
  return (*(uint64_t (**)(char *, uint64_t))(v83 + 8))(v82, v71);
}

ValueMetadata *type metadata accessor for ShelfKitBootstrap()
{
  return &type metadata for ShelfKitBootstrap;
}

unint64_t sub_121A48()
{
  unint64_t result;

  result = qword_3BF6B0;
  if (!qword_3BF6B0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CrossfireReferralFieldsProvider);
    atomic_store(result, (unint64_t *)&qword_3BF6B0);
  }
  return result;
}

unint64_t sub_121A8C()
{
  unint64_t result;

  result = qword_3BB018;
  if (!qword_3BB018)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ThinClientBookmarkEpisodeIntentImplementation);
    atomic_store(result, (unint64_t *)&qword_3BB018);
  }
  return result;
}

unint64_t sub_121AD0()
{
  unint64_t result;

  result = qword_3BB020;
  if (!qword_3BB020)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ThinClientUnbookmarkEpisodeIntentImplementation);
    atomic_store(result, (unint64_t *)&qword_3BB020);
  }
  return result;
}

unint64_t sub_121B14()
{
  unint64_t result;

  result = qword_3BB028;
  if (!qword_3BB028)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ThinClientMarkAsPlayedEpisodeIntentImplementation);
    atomic_store(result, (unint64_t *)&qword_3BB028);
  }
  return result;
}

unint64_t sub_121B58()
{
  unint64_t result;

  result = qword_3BB030;
  if (!qword_3BB030)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ThinClientMarkAsUnplayedEpisodeIntentImplementation);
    atomic_store(result, (unint64_t *)&qword_3BB030);
  }
  return result;
}

unint64_t sub_121B9C()
{
  unint64_t result;

  result = qword_3BB040;
  if (!qword_3BB040)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for FollowFeedIntentImplementation);
    atomic_store(result, (unint64_t *)&qword_3BB040);
  }
  return result;
}

unint64_t sub_121BE0()
{
  unint64_t result;

  result = qword_3BB048;
  if (!qword_3BB048)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for FindShowEpisodesIntentImplementation);
    atomic_store(result, (unint64_t *)&qword_3BB048);
  }
  return result;
}

unint64_t sub_121C24()
{
  unint64_t result;

  result = qword_3BB050;
  if (!qword_3BB050)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for FetchShowLatestCatalogEpisodesIntentImplementation);
    atomic_store(result, (unint64_t *)&qword_3BB050);
  }
  return result;
}

unint64_t sub_121C68()
{
  unint64_t result;

  result = qword_3BB058;
  if (!qword_3BB058)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for FetchUpNextEpisodesIntentImplementation);
    atomic_store(result, (unint64_t *)&qword_3BB058);
  }
  return result;
}

unint64_t sub_121CAC()
{
  unint64_t result;

  result = qword_3BB060;
  if (!qword_3BB060)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for FindOrCreateLocalEpisodeContentIDsIntentImplementation);
    atomic_store(result, (unint64_t *)&qword_3BB060);
  }
  return result;
}

unint64_t sub_121CF0()
{
  unint64_t result;

  result = qword_3BB068;
  if (!qword_3BB068)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for FindOrCreateEpisodeOfferContentIDsIntentsIntentImplementation);
    atomic_store(result, (unint64_t *)&qword_3BB068);
  }
  return result;
}

unint64_t sub_121D34()
{
  unint64_t result;

  result = qword_3BB070;
  if (!qword_3BB070)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for BookmarkEpisodeIntentImplementation);
    atomic_store(result, (unint64_t *)&qword_3BB070);
  }
  return result;
}

unint64_t sub_121D78()
{
  unint64_t result;

  result = qword_3BB078;
  if (!qword_3BB078)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UnbookmarkEpisodeIntentImplementation);
    atomic_store(result, (unint64_t *)&qword_3BB078);
  }
  return result;
}

uint64_t sub_121DBC(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;

  result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for IntentDelegatingActionImplementation<A>);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t AddFavoriteCategoriesTipProvider.__allocating_init(asPartOf:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = swift_allocObject(v1, 40, 7);
  AddFavoriteCategoriesTipProvider.init(asPartOf:)(a1);
  return v3;
}

uint64_t AddFavoriteCategoriesTipProvider.init(asPartOf:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  os_unfair_lock_s *v20;
  uint64_t v22;
  uint64_t v23;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8530);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = a1;
  swift_retain(a1);
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
    && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
  {
    v8 = (void *)sub_B3484((uint64_t)_swiftEmptyArrayStorage);
  }
  else
  {
    v8 = &_swiftEmptySetSingleton;
  }
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3748);
  v10 = swift_allocObject(v9, 28, 7);
  *(_DWORD *)(v10 + 24) = 0;
  *(_QWORD *)(v10 + 16) = v8;
  *(_QWORD *)(v2 + 32) = v10;
  v11 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "_applePodcastsFoundationSharedUserDefaults");
  v12 = NSUserDefaults.BOOLPublisher(forKey:)(0xD00000000000002ELL, 0x800000000030FBE0);

  v23 = v12;
  v13 = swift_allocObject(&unk_381B50, 24, 7);
  swift_weakInit(v13 + 16);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2120);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8660);
  v16 = sub_32914(&qword_3B2128, &qword_3B2120, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.map<A>(_:)(sub_122214, v13, v14, v15, v16);
  swift_release(v13);
  swift_release(v23);
  v17 = swift_allocObject(&unk_381B50, 24, 7);
  swift_weakInit(v17 + 16);
  v18 = sub_32914(&qword_3B8568, &qword_3B8530, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v19 = Publisher<>.sink(receiveValue:)(sub_E4C1C, v17, v4, v18);
  swift_release(v17);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v20 = *(os_unfair_lock_s **)(v2 + 32);
  swift_retain(v20);
  os_unfair_lock_lock(v20 + 6);
  sub_635EC();
  os_unfair_lock_unlock(v20 + 6);
  swift_release(v19);
  swift_release(v20);
  swift_release(a1);
  return v2;
}

uint64_t sub_1220D0()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1220F4@<X0>(char *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  char v5;
  uint64_t v6;
  _QWORD *boxed_opaque_existential_2Tm;
  uint64_t Strong;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[5];

  v5 = *a1;
  v6 = type metadata accessor for Podcasts(0);
  v14[3] = v6;
  v14[4] = sub_F1C0((unint64_t *)&qword_3B33B8, (void (*)(uint64_t))&type metadata accessor for Podcasts, (uint64_t)&protocol conformance descriptor for Podcasts);
  boxed_opaque_existential_2Tm = __swift_allocate_boxed_opaque_existential_2Tm(v14);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(boxed_opaque_existential_2Tm, enum case for Podcasts.ponderosa(_:), v6);
  LOBYTE(v6) = isFeatureEnabled(_:)(v14);
  __swift_destroy_boxed_opaque_existential_1(v14);
  if ((v6 & 1) != 0 && (v5 & 1) == 0)
  {
    v11 = a2 + 16;
    swift_beginAccess(v11, v14, 0, 0);
    Strong = swift_weakLoadStrong(v11);
    if (Strong)
    {
      v12 = Strong;
      sub_12221C(a3);
      swift_release(v12);
      v13 = type metadata accessor for ModernShelf(0);
      return (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(a3, 0, 1, v13);
    }
  }
  else
  {
    Strong = 0;
  }
  v9 = type metadata accessor for ModernShelf(Strong);
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(a3, 1, 1, v9);
}

uint64_t sub_122214@<X0>(char *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_1220F4(a1, v2, a2);
}

void sub_12221C(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  id v9;
  Swift::String v10;
  Swift::String v11;
  void *object;
  id v13;
  Swift::String v14;
  Swift::String v15;
  void *v16;
  id v17;
  NSString v18;
  NSString v19;
  id v20;
  uint64_t (*v21)(_QWORD);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  NSString v26;
  uint64_t v27;
  uint64_t v28;
  NSURL *v29;
  void *v30;
  void *v31;
  void *v32;
  id v33;
  Swift::String v34;
  uint64_t v35;
  Swift::String v36;
  void *v37;
  NSString v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSString v43;
  id v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t (*v51)(char *, _QWORD, uint64_t);
  unsigned int v52;
  id v53;
  id v54;
  _QWORD *v55;
  __int16 v56;
  int v57;
  __int16 v58;
  uint64_t v59;
  Swift::String v60;
  Swift::String v61;
  Swift::String v62;

  v55 = a1;
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
  __chkstk_darwin(v1);
  v3 = (char *)&v50 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for TipType(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (void *)objc_opt_self(NSBundle);
  v9 = objc_msgSend(v8, "mainBundle");
  v60._countAndFlagsBits = 0xD000000000000015;
  v10._countAndFlagsBits = 0xD00000000000001ELL;
  v60._object = (void *)0x800000000030FC90;
  v10._object = (void *)0x800000000030FC70;
  v11._countAndFlagsBits = 0;
  v11._object = (void *)0xE000000000000000;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, (Swift::String_optional)0, (NSBundle)v9, v11, v60)._object;

  v54 = v8;
  v13 = objc_msgSend(v8, "mainBundle");
  v61._countAndFlagsBits = 0xD000000000000038;
  v61._object = (void *)0x800000000030FCB0;
  v14._object = (void *)0x800000000030B320;
  v14._countAndFlagsBits = 0xD000000000000020;
  v15._countAndFlagsBits = 0;
  v15._object = (void *)0xE000000000000000;
  v16 = NSLocalizedString(_:tableName:bundle:value:comment:)(v14, (Swift::String_optional)0, (NSBundle)v13, v15, v61)._object;

  v17 = objc_allocWithZone((Class)AMSDialogRequest);
  v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v16);
  v20 = objc_msgSend(v17, "initWithTitle:message:", v18, v19);

  v21 = *(uint64_t (**)(_QWORD))(v5 + 104);
  v52 = enum case for TipType.addFavoriteCategories(_:);
  v51 = (uint64_t (*)(char *, _QWORD, uint64_t))v21;
  v22 = v21(v7);
  TipType.rawValue.getter(v22);
  v24 = v23;
  v25 = *(void (**)(char *, uint64_t))(v5 + 8);
  v25(v7, v4);
  v26 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v24);
  objc_msgSend(v20, "setIdentifier:", v26);

  objc_msgSend(v20, "setStyle:", 4);
  URL.init(string:)(0xD000000000000012, 0x800000000030B350);
  v27 = type metadata accessor for URL(0);
  v28 = *(_QWORD *)(v27 - 8);
  v30 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v3, 1, v27) != 1)
  {
    URL._bridgeToObjectiveC()(v29);
    v30 = v31;
    (*(void (**)(char *, uint64_t))(v28 + 8))(v3, v27);
  }
  objc_msgSend(v20, "setIconURL:", v30);

  v32 = (void *)objc_opt_self(AMSDialogAction);
  v53 = objc_msgSend(v32, "actionWithTitle:style:", 0, 2);
  objc_msgSend(v20, "addButtonAction:");
  v33 = objc_msgSend(v54, "mainBundle");
  v62._countAndFlagsBits = 0xD000000000000017;
  v62._object = (void *)0x800000000030FD20;
  v34._object = (void *)0x800000000030FCF0;
  v35 = 0xE000000000000000;
  v34._countAndFlagsBits = 0xD000000000000020;
  v36._countAndFlagsBits = 0;
  v36._object = (void *)0xE000000000000000;
  v37 = NSLocalizedString(_:tableName:bundle:value:comment:)(v34, (Swift::String_optional)0, (NSBundle)v33, v36, v62)._object;

  v38 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v37);
  v39 = objc_msgSend(v32, "actionWithTitle:style:", v38, 0);

  v40 = v51(v7, v52, v4);
  TipType.rawValue.getter(v40);
  v42 = v41;
  v25(v7, v4);
  v43 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v42);
  objc_msgSend(v39, "setIdentifier:", v43);

  objc_msgSend(v20, "addButtonAction:", v39);
  v44 = objc_msgSend(v20, "identifier");
  if (v44)
  {
    v45 = v44;
    v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
    v35 = v47;

  }
  else
  {
    v46 = 0;
  }
  v56 = 53;
  v58 = 256;
  v57 = 0;
  v59 = 1;
  v48 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8750);
  v49 = swift_allocObject(v48, 72, 7);
  *(_OWORD *)(v49 + 16) = xmmword_2EA0D0;
  *(_QWORD *)(v49 + 56) = sub_327F8(0, (unint64_t *)&qword_3B7DB0, AMSDialogRequest_ptr);
  *(_QWORD *)(v49 + 64) = sub_E667C();
  *(_QWORD *)(v49 + 32) = v20;
  ModernShelf.init(id:title:itemPresentation:items:)(v46, v35, 0, 0, (unsigned __int8 *)&v56, v49, v55);

}

_QWORD *AddFavoriteCategoriesTipProvider.handle(tipAction:from:)(void *a1, void *a2)
{
  id v4;
  NSString v5;
  _QWORD *result;

  v4 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "_applePodcastsFoundationSharedUserDefaults");
  v5 = String._bridgeToObjectiveC()();
  objc_msgSend(v4, "setBool:forKey:", 1, v5);

  result = objc_msgSend(a1, "style");
  if (result != (_QWORD *)((char *)&dword_0 + 2))
    return sub_12283C(a2);
  return result;
}

_QWORD *sub_12283C(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  NSString v25;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[6];

  v2 = type metadata accessor for FlowDestination(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ActionMetrics(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v27 - v10;
  type metadata accessor for ActionRunnerOptions(0);
  v12 = swift_retain();
  v13 = BaseObjectGraph.__allocating_init(_:)(v12);
  v29 = sub_327F8(0, &qword_3B8638, UIViewController_ptr);
  *(_QWORD *)&v28 = a1;
  v14 = objc_msgSend(a1, "view");
  sub_236BC((uint64_t)&v28, (uint64_t)v31);
  v31[4] = v14;
  v15 = v14;
  v16 = _s8ShelfKit19ActionRunnerOptionsC04withC6OriginyACXDAA0cG0VSgF_0((uint64_t)v31);
  sub_1459C((uint64_t)v31, &qword_3B18E8);

  swift_release(v13);
  v17 = sub_1459C((uint64_t)&v28, (uint64_t *)&unk_3BC540);
  static ActionMetrics.notInstrumented.getter(v17);
  v18 = objc_msgSend((id)objc_opt_self(UITraitCollection), "currentTraitCollection");
  v19 = objc_msgSend(v18, "userInterfaceIdiom");

  if (v19)
    v20 = 5;
  else
    v20 = 4;
  swift_storeEnumTagMultiPayload(v4, v2, 51);
  LOBYTE(v31[0]) = v20;
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v8, v11, v5);
  LOBYTE(v28) = 0;
  v21 = type metadata accessor for FlowAction(0);
  swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
  v22 = FlowAction.init(_:id:title:presentationContext:animationBehavior:presentationStyle:destinationPageHeader:actionMetrics:)((uint64_t)v4, 0, 0, 0, 0, (char *)v31, 0, 48, (char *)&v28, (uint64_t)v8);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
  v29 = v21;
  v30 = sub_F1C0((unint64_t *)&qword_3B0C40, (void (*)(uint64_t))type metadata accessor for FlowAction, (uint64_t)&protocol conformance descriptor for Action);
  *(_QWORD *)&v28 = v22;
  sub_F4D8(&v28, (uint64_t)v31);
  v31[5] = v16;
  swift_retain();
  v23 = ActionPerformer.callAsFunction()();
  swift_release(v23);
  v24 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "_applePodcastsFoundationSharedUserDefaults");
  v25 = String._bridgeToObjectiveC()();
  objc_msgSend(v24, "setBool:forKey:", 1, v25);
  swift_release(v16);

  return sub_23740(v31);
}

uint64_t AddFavoriteCategoriesTipProvider.__deallocating_deinit()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[4]);
  return swift_deallocClassInstance(v0, 40, 7);
}

uint64_t sub_122B88@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = AddFavoriteCategoriesSearchTipProvider.addFavoriteCategoriesSearchTipShelf.getter();
  *a1 = result;
  return result;
}

uint64_t sub_122BB0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *(_QWORD *)(*(_QWORD *)a2 + 16);
  *(_QWORD *)(*(_QWORD *)a2 + 16) = v2;
  swift_retain(v2);
  return swift_release(v3);
}

uint64_t type metadata accessor for AddFavoriteCategoriesTipProvider()
{
  return objc_opt_self(_TtC8ShelfKit32AddFavoriteCategoriesTipProvider);
}

uint64_t method lookup function for AddFavoriteCategoriesTipProvider(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for AddFavoriteCategoriesTipProvider);
}

uint64_t dispatch thunk of AddFavoriteCategoriesTipProvider.__allocating_init(asPartOf:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t PlayQueueAction.contentId.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit15PlayQueueAction_contentId);
}

uint64_t PlayQueueAction.episodeOffer.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1E3E8(v1 + OBJC_IVAR____TtC8ShelfKit15PlayQueueAction_episodeOffer, a1);
}

uint64_t PlayQueueAction.queueEpisodeIds.getter()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit15PlayQueueAction_queueEpisodeIds));
}

uint64_t PlayQueueAction.__allocating_init(adamId:episodeOffer:queueEpisodeIds:actionMetrics:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v5 = v4;
  v28 = a1;
  v29 = a2;
  v30 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v12);
  v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for ActionMetrics(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  *(_QWORD *)(v19 + OBJC_IVAR____TtC8ShelfKit15PlayQueueAction_contentId) = v28;
  sub_1E3E8(a2, v19 + OBJC_IVAR____TtC8ShelfKit15PlayQueueAction_episodeOffer);
  *(_QWORD *)(v19 + OBJC_IVAR____TtC8ShelfKit15PlayQueueAction_queueEpisodeIds) = a3;
  v20 = a4;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a4, v15);
  v21 = type metadata accessor for ImpressionMetrics(0);
  v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v14, 1, 1, v21);
  UUID.init()(v22);
  v23 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
  v25 = v24;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v30);
  *(_QWORD *)(v19 + 16) = v23;
  *(_QWORD *)(v19 + 24) = v25;
  *(_QWORD *)(v19 + 32) = 0;
  *(_QWORD *)(v19 + 40) = 0;
  *(_BYTE *)(v19 + 48) = 32;
  (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(v19 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v18, v15);
  sub_23AB8((uint64_t)v14, v19 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v20, v15);
  sub_1E42C(v29);
  return v19;
}

uint64_t PlayQueueAction.init(adamId:episodeOffer:queueEpisodeIds:actionMetrics:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v5 = v4;
  v26 = a3;
  v27 = a2;
  v28 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v12);
  v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for ActionMetrics(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v5 + OBJC_IVAR____TtC8ShelfKit15PlayQueueAction_contentId) = a1;
  sub_1E3E8(a2, v5 + OBJC_IVAR____TtC8ShelfKit15PlayQueueAction_episodeOffer);
  *(_QWORD *)(v5 + OBJC_IVAR____TtC8ShelfKit15PlayQueueAction_queueEpisodeIds) = v26;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a4, v15);
  v19 = type metadata accessor for ImpressionMetrics(0);
  v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v14, 1, 1, v19);
  UUID.init()(v20);
  v21 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
  v23 = v22;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v28);
  *(_QWORD *)(v5 + 16) = v21;
  *(_QWORD *)(v5 + 24) = v23;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = 0;
  *(_BYTE *)(v5 + 48) = 32;
  (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(v5 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v18, v15);
  sub_23AB8((uint64_t)v14, v5 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(a4, v15);
  sub_1E42C(v27);
  return v5;
}

uint64_t PlayQueueAction.__allocating_init(deserializing:using:)(char *a1, uint64_t a2)
{
  uint64_t v2;

  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  return PlayQueueAction.init(deserializing:using:)(a1, a2);
}

uint64_t PlayQueueAction.init(deserializing:using:)(char *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(_QWORD, _QWORD);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(_QWORD, _QWORD);
  char *v40;
  void (*v41)(char *, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  char *v46;
  uint64_t v47;
  char *v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  void (*v59)(_QWORD, _QWORD);
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;

  v3 = v2;
  v61 = *v3;
  v62 = a2;
  v63 = type metadata accessor for JSONContext(0);
  v65 = *(_QWORD *)(v63 - 8);
  __chkstk_darwin(v63);
  v6 = (char *)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v58 = (char *)&v53 - v8;
  __chkstk_darwin(v9);
  v11 = (char *)&v53 - v10;
  v12 = type metadata accessor for EpisodeOffer(0);
  __chkstk_darwin(v12);
  v60 = (uint64_t *)((char *)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = type metadata accessor for JSONObject(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v57 = (char *)&v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v56 = (char *)&v53 - v18;
  __chkstk_darwin(v19);
  v21 = (char *)&v53 - v20;
  __chkstk_darwin(v22);
  v24 = (char *)&v53 - v23;
  swift_retain();
  v64 = a1;
  v25 = JSONObject.subscript.getter(0x49746E65746E6F63, 0xE900000000000064);
  v26 = JSONObject.string.getter(v25);
  if (v27)
  {
    v54 = v6;
    v28 = v59;
    v29 = static AdamID.parse(_:)(v26, v27);
    if (v28)
    {
      v30 = swift_bridgeObjectRelease();
      v31 = static AdamID.empty.getter(v30);
      swift_errorRelease(v28);
    }
    else
    {
      v31 = v29;
      swift_bridgeObjectRelease();
    }
    v53 = v15;
    v39 = *(void (**)(_QWORD, _QWORD))(v15 + 8);
    v55 = v14;
    v59 = v39;
    v39(v24, v14);
    *(uint64_t *)((char *)v3 + OBJC_IVAR____TtC8ShelfKit15PlayQueueAction_contentId) = v31;
    v40 = v64;
    JSONObject.subscript.getter(0x4F65646F73697065, 0xEC00000072656666);
    v41 = *(void (**)(char *, uint64_t, uint64_t))(v65 + 16);
    v42 = v62;
    v43 = v63;
    v41(v11, v62, v63);
    v44 = v60;
    EpisodeOffer.init(deserializing:using:)((uint64_t)v21, (uint64_t)v11, v60);
    sub_1E4B0((uint64_t)v44, (uint64_t)v3 + OBJC_IVAR____TtC8ShelfKit15PlayQueueAction_episodeOffer);
    v46 = v56;
    v47 = v42;
    JSONObject.subscript.getter(0x6970456575657571, 0xEF73644965646F73);
    v48 = v58;
    v41(v58, v42, v43);
    v49 = sub_55FA4();
    *(uint64_t *)((char *)v3 + OBJC_IVAR____TtC8ShelfKit15PlayQueueAction_queueEpisodeIds) = Array<A>.init(tryDeserializing:using:)(v46, v48, &type metadata for AdamID, v49);
    swift_release(v3);
    v50 = v57;
    v51 = v55;
    (*(void (**)(char *, char *, uint64_t))(v53 + 16))(v57, v40, v55);
    v52 = (uint64_t)v54;
    v41(v54, v47, v43);
    v38 = Action.init(deserializing:using:)(v50, v52);
    (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v47, v43);
    v59(v40, v51);
  }
  else
  {
    v32 = *(void (**)(char *, uint64_t))(v15 + 8);
    v32(v24, v14);
    swift_release(v3);
    v33 = type metadata accessor for JSONError(0);
    v34 = sub_1E468();
    swift_allocError(v33, v34, 0, 0);
    *v35 = 0x49746E65746E6F63;
    v35[1] = 0xE900000000000064;
    v36 = v61;
    v35[2] = v61;
    v37 = (*(uint64_t (**)(void))(*(_QWORD *)(v33 - 8) + 104))();
    swift_willThrow(v37);
    v38 = v36;
    (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v62, v63);
    v32(v64, v14);
    swift_deallocPartialClassInstance(v3, v36, *(unsigned int *)(*v3 + 48), *(unsigned __int16 *)(*v3 + 52));
  }
  return v38;
}

void PlayQueueAction.init(uniqueId:title:presentationStyle:actionMetrics:impressionMetrics:)()
{
  _swift_stdlib_reportUnimplementedInitializer("ShelfKit.PlayQueueAction", 24, "init(uniqueId:title:presentationStyle:actionMetrics:impressionMetrics:)", 71, 0);
  __break(1u);
}

uint64_t sub_123580()
{
  uint64_t v0;

  sub_1E42C(v0 + OBJC_IVAR____TtC8ShelfKit15PlayQueueAction_episodeOffer);
  return swift_bridgeObjectRelease();
}

uint64_t PlayQueueAction.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics;
  v2 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_23B00(v0 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics);
  sub_1E42C(v0 + OBJC_IVAR____TtC8ShelfKit15PlayQueueAction_episodeOffer);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t PlayQueueAction.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics;
  v2 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_23B00(v0 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics);
  sub_1E42C(v0 + OBJC_IVAR____TtC8ShelfKit15PlayQueueAction_episodeOffer);
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t PlayQueueAction.playPauseAction.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  void (*v20)(char *, uint64_t, uint64_t, __n128);
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char v37[24];

  v1 = v0;
  v2 = type metadata accessor for UUID(0);
  v35 = *(_QWORD *)(v2 - 8);
  v36 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v5);
  v34 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ActionMetrics(0);
  v33 = *(_QWORD *)(v7 - 8);
  v8 = v33;
  __chkstk_darwin(v7);
  v32 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v12 = (char *)&v32 - v11;
  v13 = type metadata accessor for EpisodeOffer(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit15PlayQueueAction_contentId);
  sub_1E3E8(v1 + OBJC_IVAR____TtC8ShelfKit15PlayQueueAction_episodeOffer, (uint64_t)v15);
  v17 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit15PlayQueueAction_queueEpisodeIds);
  v18 = v1 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics;
  v19 = swift_beginAccess(v1 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v37, 0, 0);
  v20 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v8 + 16);
  v20(v12, v18, v7, v19);
  v21 = type metadata accessor for PlayPauseQueueAction(0);
  v22 = swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
  *(_QWORD *)(v22 + OBJC_IVAR____TtC8ShelfKit20PlayPauseQueueAction_contentId) = v16;
  sub_1E3E8((uint64_t)v15, v22 + OBJC_IVAR____TtC8ShelfKit20PlayPauseQueueAction_episodeOffer);
  *(_QWORD *)(v22 + OBJC_IVAR____TtC8ShelfKit20PlayPauseQueueAction_queueEpisodeIds) = v17;
  *(_QWORD *)(v22 + OBJC_IVAR____TtC8ShelfKit20PlayPauseQueueAction_state) = 1;
  v23 = v32;
  ((void (*)(char *, char *, uint64_t))v20)(v32, v12, v7);
  v24 = type metadata accessor for ImpressionMetrics(0);
  v25 = (uint64_t)v34;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v34, 1, 1, v24);
  swift_retain();
  v26 = swift_bridgeObjectRetain();
  UUID.init()(v26);
  v27 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
  v29 = v28;
  (*(void (**)(char *, uint64_t))(v35 + 8))(v4, v36);
  *(_QWORD *)(v22 + 16) = v27;
  *(_QWORD *)(v22 + 24) = v29;
  *(_QWORD *)(v22 + 32) = 0;
  *(_QWORD *)(v22 + 40) = 0;
  *(_BYTE *)(v22 + 48) = 32;
  v30 = v33;
  (*(void (**)(uint64_t, char *, uint64_t))(v33 + 32))(v22 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v23, v7);
  sub_23AB8(v25, v22 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v12, v7);
  sub_1E42C((uint64_t)v15);
  swift_release(v1);
  return v22;
}

uint64_t PlayQueueAction.episodeAdamID.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit15PlayQueueAction_contentId);
}

uint64_t PlayQueueAction.episodeIdentifier.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit15PlayQueueAction_contentId);
}

uint64_t sub_1239F0@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return sub_1E3E8(*v1 + OBJC_IVAR____TtC8ShelfKit15PlayQueueAction_episodeOffer, a1);
}

uint64_t sub_123A08()
{
  return PlayQueueAction.playPauseAction.getter();
}

uint64_t sub_123A28()
{
  _QWORD *v0;

  return *(_QWORD *)(*v0 + OBJC_IVAR____TtC8ShelfKit15PlayQueueAction_contentId);
}

uint64_t sub_123A40()
{
  _QWORD *v0;

  return *(_QWORD *)(*v0 + OBJC_IVAR____TtC8ShelfKit15PlayQueueAction_contentId);
}

uint64_t sub_123A5C()
{
  return type metadata accessor for PlayQueueAction(0);
}

uint64_t type metadata accessor for PlayQueueAction(uint64_t a1)
{
  uint64_t result;

  result = qword_3BB1F0;
  if (!qword_3BB1F0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PlayQueueAction);
  return result;
}

uint64_t sub_123AA0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  result = type metadata accessor for EpisodeOffer(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    result = swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 160);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for PlayQueueAction(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for PlayQueueAction);
}

uint64_t dispatch thunk of PlayQueueAction.__allocating_init(adamId:episodeOffer:queueEpisodeIds:actionMetrics:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 184))();
}

uint64_t ContextMetricsAction.__allocating_init(title:targetId:podcastStoreId:targetType:actionContext:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v10 = v9;
  v41 = a7;
  v42 = a8;
  v39 = a5;
  v40 = a6;
  v38 = a4;
  v45 = a1;
  v46 = a2;
  v44 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v44 - 8);
  __chkstk_darwin(v44);
  v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = type metadata accessor for ActionMetrics(0);
  v15 = *(_QWORD *)(v43 - 8);
  __chkstk_darwin(v43);
  v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v18);
  v20 = (char *)&v37 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
  v22 = *a9;
  v23 = (_QWORD *)(v21 + OBJC_IVAR____TtC8ShelfKit20ContextMetricsAction_targetId);
  *v23 = 0;
  v23[1] = 0;
  v24 = (_QWORD *)(v21 + OBJC_IVAR____TtC8ShelfKit20ContextMetricsAction_podcastStoreId);
  *v24 = 0;
  v24[1] = 0;
  v25 = v38;
  *v23 = a3;
  v23[1] = v25;
  swift_retain();
  swift_bridgeObjectRelease();
  v26 = v40;
  *v24 = v39;
  v24[1] = v26;
  swift_bridgeObjectRelease();
  v27 = (_QWORD *)(v21 + OBJC_IVAR____TtC8ShelfKit20ContextMetricsAction_targetType);
  v28 = v42;
  *v27 = v41;
  v27[1] = v28;
  *(_BYTE *)(v21 + OBJC_IVAR____TtC8ShelfKit20ContextMetricsAction_actionContext) = v22;
  swift_release(v21);
  v29 = type metadata accessor for ImpressionMetrics(0);
  v30 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v20, 1, 1, v29);
  v31 = static ActionMetrics.notInstrumented.getter(v30);
  UUID.init()(v31);
  v32 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
  v34 = v33;
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v44);
  *(_QWORD *)(v21 + 16) = v32;
  *(_QWORD *)(v21 + 24) = v34;
  v35 = v46;
  *(_QWORD *)(v21 + 32) = v45;
  *(_QWORD *)(v21 + 40) = v35;
  *(_BYTE *)(v21 + 48) = 32;
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(v21 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v17, v43);
  sub_15BD4((uint64_t)v20, v21 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics, (uint64_t *)&unk_3B8790);
  return v21;
}

uint64_t ContextMetricsAction.init(title:targetId:podcastStoreId:targetType:actionContext:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v10 = v9;
  v38 = a7;
  v39 = a8;
  v36 = a5;
  v37 = a6;
  v43 = a1;
  v44 = a2;
  v42 = type metadata accessor for UUID(0);
  v40 = *(_QWORD *)(v42 - 8);
  __chkstk_darwin(v42);
  v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = type metadata accessor for ActionMetrics(0);
  v15 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v41);
  v17 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v18);
  v20 = (char *)&v35 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = *a9;
  v22 = (_QWORD *)(v10 + OBJC_IVAR____TtC8ShelfKit20ContextMetricsAction_targetId);
  *v22 = 0;
  v22[1] = 0;
  v23 = (_QWORD *)(v10 + OBJC_IVAR____TtC8ShelfKit20ContextMetricsAction_podcastStoreId);
  *v23 = 0;
  v23[1] = 0;
  *v22 = a3;
  v22[1] = a4;
  swift_retain();
  swift_bridgeObjectRelease();
  v24 = v37;
  *v23 = v36;
  v23[1] = v24;
  swift_bridgeObjectRelease();
  v25 = (_QWORD *)(v10 + OBJC_IVAR____TtC8ShelfKit20ContextMetricsAction_targetType);
  v26 = v39;
  *v25 = v38;
  v25[1] = v26;
  *(_BYTE *)(v10 + OBJC_IVAR____TtC8ShelfKit20ContextMetricsAction_actionContext) = v21;
  swift_release(v10);
  v27 = type metadata accessor for ImpressionMetrics(0);
  v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v20, 1, 1, v27);
  v29 = static ActionMetrics.notInstrumented.getter(v28);
  UUID.init()(v29);
  v30 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
  v32 = v31;
  (*(void (**)(char *, uint64_t))(v40 + 8))(v14, v42);
  *(_QWORD *)(v10 + 16) = v30;
  *(_QWORD *)(v10 + 24) = v32;
  v33 = v44;
  *(_QWORD *)(v10 + 32) = v43;
  *(_QWORD *)(v10 + 40) = v33;
  *(_BYTE *)(v10 + 48) = 32;
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(v10 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v17, v41);
  sub_15BD4((uint64_t)v20, v10 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics, (uint64_t *)&unk_3B8790);
  return v10;
}

void ContextMetricsAction.__allocating_init(deserializing:using:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  v2 = (_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit20ContextMetricsAction_targetId);
  *v2 = 0;
  v2[1] = 0;
  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit20ContextMetricsAction_podcastStoreId);
  *v3 = 0;
  v3[1] = 0;
  swift_release(v1);
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000033, 0x800000000030A500, "ShelfKit/ContextMetricsAction.swift", 35, 2, 33, 0);
  __break(1u);
}

void ContextMetricsAction.init(deserializing:using:)()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit20ContextMetricsAction_targetId);
  *v1 = 0;
  v1[1] = 0;
  v2 = (_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit20ContextMetricsAction_podcastStoreId);
  *v2 = 0;
  v2[1] = 0;
  swift_release(v0);
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000033, 0x800000000030A500, "ShelfKit/ContextMetricsAction.swift", 35, 2, 33, 0);
  __break(1u);
}

void ContextMetricsAction.init(uniqueId:title:presentationStyle:actionMetrics:impressionMetrics:)()
{
  _swift_stdlib_reportUnimplementedInitializer("ShelfKit.ContextMetricsAction", 29, "init(uniqueId:title:presentationStyle:actionMetrics:impressionMetrics:)", 71, 0);
  __break(1u);
}

uint64_t sub_1240E8()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit20ContextMetricsAction_targetId + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit20ContextMetricsAction_podcastStoreId + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit20ContextMetricsAction_targetType + 8));
}

uint64_t ContextMetricsAction.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics;
  v2 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_1459C(v0 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics, (uint64_t *)&unk_3B8790);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t ContextMetricsAction.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics;
  v2 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_1459C(v0 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics, (uint64_t *)&unk_3B8790);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t ContextMetricsAction.metricsId(sender:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit20ContextMetricsAction_targetId + 8);
  if (v1)
    v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit20ContextMetricsAction_targetId);
  else
    v2 = 0;
  swift_bridgeObjectRetain(v1);
  return v2;
}

uint64_t ContextMetricsAction.metricsName(sender:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 40);
  if (v1)
    v2 = *(_QWORD *)(v0 + 32);
  else
    v2 = 0;
  swift_bridgeObjectRetain(v1);
  return v2;
}

uint64_t ContextMetricsActionContext.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0x6F697463656C6573;
  else
    return 0x75747865746E6F63;
}

uint64_t ContextMetricsAction.generateItemLevelLocationFields(locationPosition:sender:interactionView:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;

  switch(a3)
  {
    case 2:
    case 3:
    case 4:
    case 7:
      v7 = static MetricsTargetType.lockup.getter(a1, a2);
      break;
    case 6:
      v7 = static MetricsTargetType.button.getter(a1, a2);
      break;
    default:
      v7 = static MetricsTargetType.powerSwooshItem.getter(a1, a2);
      break;
  }
  v9 = *(_QWORD *)(v4 + OBJC_IVAR____TtC8ShelfKit20ContextMetricsAction_targetId + 8);
  if (!v9)
  {
    v10 = 0;
    v11 = 0xE000000000000000;
    v12 = *(_QWORD *)(v4 + 40);
    if (v12)
      goto LABEL_7;
LABEL_9:
    v13 = 0;
    v14 = 0xE000000000000000;
    goto LABEL_10;
  }
  v10 = *(_QWORD *)(v4 + OBJC_IVAR____TtC8ShelfKit20ContextMetricsAction_targetId);
  v11 = *(_QWORD *)(v4 + OBJC_IVAR____TtC8ShelfKit20ContextMetricsAction_targetId + 8);
  v12 = *(_QWORD *)(v4 + 40);
  if (!v12)
    goto LABEL_9;
LABEL_7:
  v13 = *(_QWORD *)(v4 + 32);
  v14 = v12;
LABEL_10:
  *(_QWORD *)a4 = v10;
  *(_QWORD *)(a4 + 8) = v11;
  *(_BYTE *)(a4 + 16) = 1;
  *(_QWORD *)(a4 + 24) = a1;
  *(_QWORD *)(a4 + 32) = v7;
  *(_QWORD *)(a4 + 40) = v8;
  *(_QWORD *)(a4 + 48) = v13;
  *(_QWORD *)(a4 + 56) = v14;
  swift_bridgeObjectRetain(v12);
  return swift_bridgeObjectRetain(v9);
}

uint64_t sub_124448()
{
  return _s8ShelfKit20ContextMetricsActionC37generateClickEventWithItemLevelFields6sender15interactionViewAA0gdH0CypSg_10PodcastsUI011InteractionC0V0O0OtF_0();
}

uint64_t sub_124468@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  return ContextMetricsAction.generateItemLevelLocationFields(locationPosition:sender:interactionView:)(a1, a2, a3, a4);
}

uint64_t sub_124488()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (uint64_t *)(*v0 + OBJC_IVAR____TtC8ShelfKit20ContextMetricsAction_targetId);
  v2 = v1[1];
  if (v2)
    v3 = *v1;
  else
    v3 = 0;
  swift_bridgeObjectRetain(v2);
  return v3;
}

ShelfKit::ContextMetricsActionContext_optional __swiftcall ContextMetricsActionContext.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  Swift::Int v5;
  ShelfKit::ContextMetricsActionContext_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_373D40, v3);
  result.value = swift_bridgeObjectRelease(object);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *v4 = v7;
  return result;
}

uint64_t sub_124538(char *a1, char *a2)
{
  return sub_1E3588(*a1, *a2);
}

Swift::Int sub_124544()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  if (v1)
    v2 = 0x6F697463656C6573;
  else
    v2 = 0x75747865746E6F63;
  if (v1)
    v3 = 0xED0000756E654D6ELL;
  else
    v3 = 0xEA00000000006C61;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_1245D4(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0x6F697463656C6573;
  else
    v2 = 0x75747865746E6F63;
  if (*v1)
    v3 = 0xED0000756E654D6ELL;
  else
    v3 = 0xEA00000000006C61;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_124640()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  if (v1)
    v2 = 0x6F697463656C6573;
  else
    v2 = 0x75747865746E6F63;
  if (v1)
    v3 = 0xED0000756E654D6ELL;
  else
    v3 = 0xEA00000000006C61;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

ShelfKit::ContextMetricsActionContext_optional sub_1246CC(Swift::String *a1)
{
  return ContextMetricsActionContext.init(rawValue:)(*a1);
}

void sub_1246D8(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x75747865746E6F63;
  if (*v1)
    v2 = 0x6F697463656C6573;
  v3 = 0xEA00000000006C61;
  if (*v1)
    v3 = 0xED0000756E654D6ELL;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_124728@<X0>(_OWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  int64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  void (*v19)(_OWORD *);
  uint64_t result;
  _OWORD v21[3];
  _OWORD v22[3];
  __int128 v23;
  _OWORD v24[2];

  v3 = *v1;
  v4 = v1[1];
  v6 = v1[2];
  v5 = v1[3];
  v7 = v5;
  v8 = v1[4];
  if (v8)
  {
    v9 = (v8 - 1) & v8;
    v10 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_3:
    v11 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v10);
    v13 = *v11;
    v12 = v11[1];
    sub_1FB98(*(_QWORD *)(v3 + 56) + 32 * v10, (uint64_t)v24);
    *(_QWORD *)&v23 = v13;
    *((_QWORD *)&v23 + 1) = v12;
    swift_bridgeObjectRetain(v12);
    goto LABEL_23;
  }
  v14 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    return result;
  }
  v15 = (unint64_t)(v6 + 64) >> 6;
  if (v14 < v15)
  {
    v16 = *(_QWORD *)(v4 + 8 * v14);
    if (v16)
    {
LABEL_7:
      v9 = (v16 - 1) & v16;
      v10 = __clz(__rbit64(v16)) + (v14 << 6);
      v7 = v14;
      goto LABEL_3;
    }
    v17 = v5 + 2;
    v7 = v5 + 1;
    if (v5 + 2 < v15)
    {
      v16 = *(_QWORD *)(v4 + 8 * v17);
      if (v16)
      {
LABEL_10:
        v14 = v17;
        goto LABEL_7;
      }
      v7 = v5 + 2;
      if (v5 + 3 < v15)
      {
        v16 = *(_QWORD *)(v4 + 8 * (v5 + 3));
        if (v16)
        {
          v14 = v5 + 3;
          goto LABEL_7;
        }
        v17 = v5 + 4;
        v7 = v5 + 3;
        if (v5 + 4 < v15)
        {
          v16 = *(_QWORD *)(v4 + 8 * v17);
          if (v16)
            goto LABEL_10;
          v14 = v5 + 5;
          v7 = v5 + 4;
          if (v5 + 5 < v15)
          {
            v16 = *(_QWORD *)(v4 + 8 * v14);
            if (v16)
              goto LABEL_7;
            v7 = v15 - 1;
            v18 = v5 + 6;
            while (v15 != v18)
            {
              v16 = *(_QWORD *)(v4 + 8 * v18++);
              if (v16)
              {
                v14 = v18 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }
  v9 = 0;
  memset(v24, 0, sizeof(v24));
  v23 = 0u;
LABEL_23:
  *v1 = v3;
  v1[1] = v4;
  v1[2] = v6;
  v1[3] = v7;
  v1[4] = v9;
  v19 = (void (*)(_OWORD *))v1[5];
  result = sub_15BD4((uint64_t)&v23, (uint64_t)v22, &qword_3BB408);
  if (*((_QWORD *)&v22[0] + 1))
  {
    v21[0] = v22[0];
    v21[1] = v22[1];
    v21[2] = v22[2];
    v19(v21);
    return sub_1459C((uint64_t)v21, &qword_3BB410);
  }
  else
  {
    a1[1] = 0u;
    a1[2] = 0u;
    *a1 = 0u;
  }
  return result;
}

uint64_t _s8ShelfKit20ContextMetricsActionC37generateClickEventWithItemLevelFields6sender15interactionViewAA0gdH0CypSg_10PodcastsUI011InteractionC0V0O0OtF_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t inited;
  unint64_t v16;
  BOOL v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v26;
  char v27;
  unint64_t v28;
  char v29;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _BYTE v35[24];
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  _OWORD v41[8];

  v1 = v0;
  v34 = type metadata accessor for MetricsActivity.State(0);
  __chkstk_darwin(v34);
  v33 = (uint64_t *)((char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit20ContextMetricsAction_targetId + 8))
  {
    v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit20ContextMetricsAction_targetId);
    v4 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit20ContextMetricsAction_targetId + 8);
  }
  else
  {
    v3 = 0;
    v4 = 0xE000000000000000;
  }
  v5 = *(_QWORD *)(v1 + 32);
  v6 = *(void **)(v1 + 40);
  v32 = v5;
  if (v6)
    v7 = v5;
  else
    v7 = 0;
  if (v6)
    v8 = v6;
  else
    v8 = (void *)0xE000000000000000;
  v9 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit20ContextMetricsAction_targetType);
  v10 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit20ContextMetricsAction_targetType + 8);
  LOBYTE(v36) = 19;
  sub_1FB80(v41);
  sub_15BD4((uint64_t)v41, (uint64_t)&v39, &qword_3B1808);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11 = sub_B2EB8(v3, v4, v7, v8, v9, v10, 0, 0, (Swift::String)0, (unsigned __int8 *)&v36, 0, (uint64_t)&v39);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v12 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit20ContextMetricsAction_podcastStoreId + 8);
  if (v12)
  {
    v13 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit20ContextMetricsAction_podcastStoreId);
    *((_QWORD *)&v40 + 1) = &type metadata for String;
    *(_QWORD *)&v39 = v13;
    *((_QWORD *)&v39 + 1) = v12;
  }
  else
  {
    v39 = 0u;
    v40 = 0u;
  }
  swift_beginAccess(v11 + 16, &v36, 33, 0);
  swift_retain();
  swift_bridgeObjectRetain();
  sub_166FC((uint64_t)&v39, 0x5374736163646F70, 0xEE00644965726F74);
  swift_endAccess(&v36);
  swift_release(v11);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BB3F8);
  inited = swift_initStackObject(v14, &v38);
  *(_OWORD *)(inited + 16) = xmmword_2EA080;
  *(_QWORD *)(inited + 32) = 0x65546E6F69746361;
  *(_QWORD *)(inited + 40) = 0xEA00000000007478;
  *(_QWORD *)(inited + 48) = v32;
  *(_QWORD *)(inited + 56) = v6;
  strcpy((char *)(inited + 64), "actionSubtype");
  *(_WORD *)(inited + 78) = -4864;
  *(_OWORD *)(inited + 80) = xmmword_2F69A0;
  swift_bridgeObjectRetain();
  swift_retain();
  v16 = sub_2887F0(inited);
  *((_QWORD *)&v40 + 1) = __swift_instantiateConcreteTypeFromMangledName(&qword_3BB400);
  *(_QWORD *)&v39 = v16;
  swift_beginAccess(v11 + 16, &v36, 33, 0);
  sub_166FC((uint64_t)&v39, 0x65446E6F69746361, 0xED0000736C696174);
  swift_endAccess(&v36);
  swift_release(v11);
  v17 = *(_BYTE *)(v1 + OBJC_IVAR____TtC8ShelfKit20ContextMetricsAction_actionContext) == 0;
  v18 = 0x75747865746E6F63;
  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC8ShelfKit20ContextMetricsAction_actionContext))
    v18 = 0x6F697463656C6573;
  v19 = 0xED0000756E654D6ELL;
  *((_QWORD *)&v40 + 1) = &type metadata for String;
  if (v17)
    v19 = 0xEA00000000006C61;
  *(_QWORD *)&v39 = v18;
  *((_QWORD *)&v39 + 1) = v19;
  swift_beginAccess(v11 + 16, &v36, 33, 0);
  swift_retain();
  sub_166FC((uint64_t)&v39, 0x6F436E6F69746361, 0xED0000747865746ELL);
  swift_endAccess(&v36);
  swift_release(v11);
  if (qword_3B0108 != -1)
    swift_once(&qword_3B0108, sub_13CAD4);
  v21 = v33;
  v20 = v34;
  OSAllocatedUnfairLock.current.getter(v33, *(_QWORD *)(qword_3BBC50 + OBJC_IVAR____TtC8ShelfKit15MetricsActivity_state), v34);
  v22 = *(_QWORD *)((char *)v21 + *(int *)(v20 + 28));
  swift_bridgeObjectRetain();
  sub_B4A20((uint64_t)v21);
  v23 = _s8ShelfKit12MetricsEventC04pageC6FieldsySDySSypGSgAFFZ_0(v22);
  if (v23)
  {
    v24 = (uint64_t)v23;
    swift_beginAccess(v11 + 16, &v39, 33, 0);
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v11 + 16));
    *(_QWORD *)&v36 = *(_QWORD *)(v11 + 16);
    *(_QWORD *)(v11 + 16) = 0x8000000000000000;
    sub_B2918(v24, (uint64_t)sub_B28D8, 0, isUniquelyReferenced_nonNull_native, (uint64_t *)&v36);
    *(_QWORD *)(v11 + 16) = v36;
    swift_bridgeObjectRelease();
    swift_endAccess(&v39);
    swift_release(v11);
  }
  if (!v22)
  {
    v39 = 0u;
    v40 = 0u;
    sub_1459C((uint64_t)&v39, (uint64_t *)&unk_3BC540);
    v36 = 0u;
    v37 = 0u;
LABEL_40:
    sub_1459C((uint64_t)&v36, (uint64_t *)&unk_3BC540);
    return v11;
  }
  if (!*(_QWORD *)(v22 + 16))
  {
    v39 = 0u;
    v40 = 0u;
LABEL_33:
    sub_1459C((uint64_t)&v39, (uint64_t *)&unk_3BC540);
    goto LABEL_34;
  }
  swift_bridgeObjectRetain();
  v26 = sub_29724(0x6F43646572616873, 0xED0000746E65746ELL);
  if ((v27 & 1) != 0)
  {
    sub_1FB98(*(_QWORD *)(v22 + 56) + 32 * v26, (uint64_t)&v39);
  }
  else
  {
    v39 = 0u;
    v40 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v40 + 1))
    goto LABEL_33;
  if (swift_dynamicCast(&v36, &v39, (char *)&type metadata for Any + 8, &type metadata for Bool, 6)
    && (v36 & 1) != 0)
  {
    *((_QWORD *)&v40 + 1) = &type metadata for Bool;
    LOBYTE(v39) = 1;
    swift_beginAccess(v11 + 16, &v36, 33, 0);
    swift_retain();
    sub_166FC((uint64_t)&v39, 0x6F43646572616873, 0xED0000746E65746ELL);
    swift_endAccess(&v36);
    swift_release(v11);
  }
LABEL_34:
  if (*(_QWORD *)(v22 + 16) && (v28 = sub_29724(0x737265746C6966, 0xE700000000000000), (v29 & 1) != 0))
  {
    sub_1FB98(*(_QWORD *)(v22 + 56) + 32 * v28, (uint64_t)&v36);
  }
  else
  {
    v36 = 0u;
    v37 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v37 + 1))
    goto LABEL_40;
  sub_1F460(&v36, &v39);
  sub_1FB98((uint64_t)&v39, (uint64_t)&v36);
  swift_beginAccess(v11 + 16, v35, 33, 0);
  swift_retain();
  sub_166FC((uint64_t)&v36, 0x737265746C6966, 0xE700000000000000);
  swift_endAccess(v35);
  swift_release(v11);
  __swift_destroy_boxed_opaque_existential_1(&v39);
  return v11;
}

unint64_t sub_124FAC()
{
  unint64_t result;

  result = qword_3BB2D8;
  if (!qword_3BB2D8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ContextMetricsActionContext);
    atomic_store(result, (unint64_t *)&qword_3BB2D8);
  }
  return result;
}

uint64_t sub_124FF0()
{
  return type metadata accessor for ContextMetricsAction(0);
}

uint64_t type metadata accessor for ContextMetricsAction(uint64_t a1)
{
  uint64_t result;

  result = qword_3BB308;
  if (!qword_3BB308)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ContextMetricsAction);
  return result;
}

uint64_t sub_125034(uint64_t a1)
{
  _QWORD v2[4];

  v2[0] = &unk_2F6928;
  v2[1] = &unk_2F6928;
  v2[2] = &unk_2F6940;
  v2[3] = &unk_2F6958;
  return swift_updateClassMetadata2(a1, 256, 4, v2, a1 + 160);
}

uint64_t method lookup function for ContextMetricsAction(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for ContextMetricsAction);
}

uint64_t dispatch thunk of ContextMetricsAction.__allocating_init(title:targetId:podcastStoreId:targetType:actionContext:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 192))();
}

uint64_t storeEnumTagSinglePayload for ContextMetricsActionContext(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1250F0 + 4 * byte_2F682B[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_125124 + 4 * byte_2F6826[v4]))();
}

uint64_t sub_125124(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_12512C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x125134);
  return result;
}

uint64_t sub_125140(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x125148);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_12514C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_125154(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ContextMetricsActionContext()
{
  return &type metadata for ContextMetricsActionContext;
}

unint64_t sub_125170()
{
  uint64_t v0;
  uint64_t inited;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t ActionIntent;
  uint64_t v10;
  unint64_t v11;
  uint64_t MoreOfPageIntent;
  uint64_t v13;
  uint64_t PageIntent;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t ShelfIntent;
  uint64_t v20;
  unint64_t v21;
  uint64_t TranscriptRequestInformationIntent;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t result;
  uint64_t v41;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BB448);
  inited = swift_initStackObject(v0, &v41);
  *(_OWORD *)(inited + 16) = xmmword_2F69B0;
  *(_QWORD *)(inited + 32) = 0xD000000000000024;
  *(_QWORD *)(inited + 40) = 0x800000000030FE50;
  v2 = sub_126484();
  *(_QWORD *)(inited + 48) = &type metadata for CategoryPageFromYourShowsShelfIntent;
  *(_QWORD *)(inited + 56) = v2;
  *(_QWORD *)(inited + 64) = 0xD000000000000011;
  *(_QWORD *)(inited + 72) = 0x800000000030FE80;
  v3 = sub_1264C8();
  *(_QWORD *)(inited + 80) = &type metadata for ChannelPageIntent;
  *(_QWORD *)(inited + 88) = v3;
  *(_QWORD *)(inited + 96) = 0xD00000000000001FLL;
  *(_QWORD *)(inited + 104) = 0x800000000030FEA0;
  v4 = sub_64910();
  *(_QWORD *)(inited + 112) = &type metadata for ChannelSubscriptionOffersIntent;
  *(_QWORD *)(inited + 120) = v4;
  *(_QWORD *)(inited + 128) = 0xD00000000000001ELL;
  *(_QWORD *)(inited + 136) = 0x800000000030FEC0;
  v5 = sub_97A8C();
  *(_QWORD *)(inited + 144) = &type metadata for ChannelUpsellInformationIntent;
  *(_QWORD *)(inited + 152) = v5;
  *(_QWORD *)(inited + 160) = 0xD00000000000001ELL;
  *(_QWORD *)(inited + 168) = 0x800000000030FEE0;
  v6 = sub_FC0E4();
  *(_QWORD *)(inited + 176) = &type metadata for EpisodePageFooterShelvesIntent;
  *(_QWORD *)(inited + 184) = v6;
  *(_QWORD *)(inited + 192) = 0xD000000000000019;
  *(_QWORD *)(inited + 200) = 0x800000000030FF00;
  v7 = sub_12650C();
  *(_QWORD *)(inited + 208) = &type metadata for EpisodeUpsellActionIntent;
  *(_QWORD *)(inited + 216) = v7;
  *(_QWORD *)(inited + 224) = 0xD000000000000018;
  *(_QWORD *)(inited + 232) = 0x800000000030FF20;
  v8 = sub_8C0A0();
  *(_QWORD *)(inited + 240) = &type metadata for EpisodeUpsellShelfIntent;
  *(_QWORD *)(inited + 248) = v8;
  *(_QWORD *)(inited + 256) = 0xD000000000000011;
  *(_QWORD *)(inited + 264) = 0x800000000030FF40;
  ActionIntent = type metadata accessor for FetchActionIntent(0);
  v10 = sub_F1C0(&qword_3BB460, (void (*)(uint64_t))type metadata accessor for FetchActionIntent, (uint64_t)&protocol conformance descriptor for FetchActionIntent);
  *(_QWORD *)(inited + 272) = ActionIntent;
  *(_QWORD *)(inited + 280) = v10;
  *(_QWORD *)(inited + 288) = 0xD000000000000018;
  *(_QWORD *)(inited + 296) = 0x800000000030FF60;
  v11 = sub_160C0();
  *(_QWORD *)(inited + 304) = &type metadata for FetchEpisodeOffersIntent;
  *(_QWORD *)(inited + 312) = v11;
  *(_QWORD *)(inited + 320) = 0xD000000000000015;
  *(_QWORD *)(inited + 328) = 0x800000000030FF80;
  MoreOfPageIntent = type metadata accessor for FetchMoreOfPageIntent(0);
  v13 = sub_F1C0(&qword_3B72D8, (void (*)(uint64_t))type metadata accessor for FetchMoreOfPageIntent, (uint64_t)&protocol conformance descriptor for FetchMoreOfPageIntent);
  *(_QWORD *)(inited + 336) = MoreOfPageIntent;
  *(_QWORD *)(inited + 344) = v13;
  *(_QWORD *)(inited + 352) = 0x6761506863746546;
  *(_QWORD *)(inited + 360) = 0xEF746E65746E4965;
  PageIntent = type metadata accessor for FetchPageIntent(0);
  v15 = sub_F1C0(&qword_3BB468, (void (*)(uint64_t))type metadata accessor for FetchPageIntent, (uint64_t)&protocol conformance descriptor for FetchPageIntent);
  *(_QWORD *)(inited + 368) = PageIntent;
  *(_QWORD *)(inited + 376) = v15;
  *(_QWORD *)(inited + 384) = 0xD00000000000001FLL;
  *(_QWORD *)(inited + 392) = 0x800000000030FFA0;
  v16 = sub_126550();
  *(_QWORD *)(inited + 400) = &type metadata for FetchSearchChannelLockupsIntent;
  *(_QWORD *)(inited + 408) = v16;
  *(_QWORD *)(inited + 416) = 0xD00000000000001FLL;
  *(_QWORD *)(inited + 424) = 0x800000000030FFC0;
  v17 = sub_126594();
  *(_QWORD *)(inited + 432) = &type metadata for FetchSearchEpisodeLockupsIntent;
  *(_QWORD *)(inited + 440) = v17;
  *(_QWORD *)(inited + 448) = 0xD00000000000001CLL;
  *(_QWORD *)(inited + 456) = 0x800000000030FFE0;
  v18 = sub_2A7D0();
  *(_QWORD *)(inited + 464) = &type metadata for FetchSearchShowLockupsIntent;
  *(_QWORD *)(inited + 472) = v18;
  *(_QWORD *)(inited + 480) = 0xD000000000000010;
  *(_QWORD *)(inited + 488) = 0x8000000000310000;
  ShelfIntent = type metadata accessor for FetchShelfIntent(0);
  v20 = sub_F1C0(&qword_3BB480, (void (*)(uint64_t))type metadata accessor for FetchShelfIntent, (uint64_t)&protocol conformance descriptor for FetchShelfIntent);
  *(_QWORD *)(inited + 496) = ShelfIntent;
  *(_QWORD *)(inited + 504) = v20;
  *(_QWORD *)(inited + 512) = 0xD000000000000021;
  *(_QWORD *)(inited + 520) = 0x8000000000310020;
  v21 = sub_1265D8();
  *(_QWORD *)(inited + 528) = &type metadata for FetchSmartPlayEpisodeAdamIDIntent;
  *(_QWORD *)(inited + 536) = v21;
  *(_QWORD *)(inited + 544) = 0xD000000000000027;
  *(_QWORD *)(inited + 552) = 0x8000000000310050;
  TranscriptRequestInformationIntent = type metadata accessor for FetchTranscriptRequestInformationIntent(0);
  v23 = sub_F1C0(&qword_3BB490, (void (*)(uint64_t))type metadata accessor for FetchTranscriptRequestInformationIntent, (uint64_t)&protocol conformance descriptor for FetchTranscriptRequestInformationIntent);
  *(_QWORD *)(inited + 560) = TranscriptRequestInformationIntent;
  *(_QWORD *)(inited + 568) = v23;
  *(_QWORD *)(inited + 576) = 0xD000000000000018;
  *(_QWORD *)(inited + 584) = 0x8000000000310080;
  v24 = sub_14118();
  *(_QWORD *)(inited + 592) = &type metadata for FromChannelShelvesIntent;
  *(_QWORD *)(inited + 600) = v24;
  *(_QWORD *)(inited + 608) = 0xD00000000000001ALL;
  *(_QWORD *)(inited + 616) = 0x80000000003100A0;
  v25 = sub_12661C();
  *(_QWORD *)(inited + 624) = &type metadata for GroupedSearchResultsIntent;
  *(_QWORD *)(inited + 632) = v25;
  *(_QWORD *)(inited + 640) = 0xD000000000000017;
  *(_QWORD *)(inited + 648) = 0x80000000003100C0;
  v26 = type metadata accessor for HighlightResourceIntent(0);
  v27 = sub_F1C0(&qword_3BB4A0, (void (*)(uint64_t))type metadata accessor for HighlightResourceIntent, (uint64_t)&protocol conformance descriptor for HighlightResourceIntent);
  *(_QWORD *)(inited + 656) = v26;
  *(_QWORD *)(inited + 664) = v27;
  *(_QWORD *)(inited + 672) = 0xD000000000000014;
  *(_QWORD *)(inited + 680) = 0x80000000003100E0;
  v28 = sub_126660();
  *(_QWORD *)(inited + 688) = &type metadata for HighlightsPageIntent;
  *(_QWORD *)(inited + 696) = v28;
  *(_QWORD *)(inited + 704) = static LibraryStorageTipSuggestedLimitIntent.kind.getter();
  *(_QWORD *)(inited + 712) = v29;
  v30 = type metadata accessor for LibraryStorageTipSuggestedLimitIntent(0);
  v31 = sub_F1C0(&qword_3BB4B0, (void (*)(uint64_t))&type metadata accessor for LibraryStorageTipSuggestedLimitIntent, (uint64_t)&protocol conformance descriptor for LibraryStorageTipSuggestedLimitIntent);
  *(_QWORD *)(inited + 720) = v30;
  *(_QWORD *)(inited + 728) = v31;
  *(_QWORD *)(inited + 736) = static LintMetricsEventIntent.kind.getter();
  *(_QWORD *)(inited + 744) = v32;
  *(_QWORD *)(inited + 752) = type metadata accessor for LintMetricsEventIntent(0);
  *(_QWORD *)(inited + 760) = &protocol witness table for LintMetricsEventIntent;
  *(_QWORD *)(inited + 768) = 0xD00000000000001ALL;
  *(_QWORD *)(inited + 776) = 0x8000000000310100;
  v33 = sub_E3B78();
  *(_QWORD *)(inited + 784) = &type metadata for ManageCategoriesPageIntent;
  *(_QWORD *)(inited + 792) = v33;
  *(_QWORD *)(inited + 800) = 0xD00000000000001CLL;
  *(_QWORD *)(inited + 808) = 0x8000000000310120;
  v34 = sub_1266A4();
  *(_QWORD *)(inited + 816) = &type metadata for RecommendationsShelvesIntent;
  *(_QWORD *)(inited + 824) = v34;
  *(_QWORD *)(inited + 832) = 0xD000000000000015;
  *(_QWORD *)(inited + 840) = 0x8000000000310140;
  v35 = sub_3306C();
  *(_QWORD *)(inited + 848) = &type metadata for SearchHintsPageIntent;
  *(_QWORD *)(inited + 856) = v35;
  *(_QWORD *)(inited + 864) = 0xD000000000000017;
  *(_QWORD *)(inited + 872) = 0x8000000000310160;
  v36 = sub_26FFC();
  *(_QWORD *)(inited + 880) = &type metadata for SearchLandingPageIntent;
  *(_QWORD *)(inited + 888) = v36;
  *(_QWORD *)(inited + 896) = 0xD000000000000018;
  *(_QWORD *)(inited + 904) = 0x8000000000310180;
  v37 = sub_8B84C();
  *(_QWORD *)(inited + 912) = &type metadata for SharedWithYouShelfIntent;
  *(_QWORD *)(inited + 920) = v37;
  *(_QWORD *)(inited + 928) = 0xD000000000000024;
  *(_QWORD *)(inited + 936) = 0x80000000003101A0;
  v38 = sub_1266E8();
  *(_QWORD *)(inited + 944) = &type metadata for ShowPageHeaderAndFooterShelvesIntent;
  *(_QWORD *)(inited + 952) = v38;
  *(_QWORD *)(inited + 960) = 0xD00000000000001ALL;
  *(_QWORD *)(inited + 968) = 0x80000000003101D0;
  v39 = sub_12672C();
  *(_QWORD *)(inited + 976) = &type metadata for UpNextScoringWeightsIntent;
  *(_QWORD *)(inited + 984) = v39;
  result = sub_288910(inited);
  qword_3BB418 = result;
  return result;
}

uint64_t static IntentKinds.table.getter()
{
  if (qword_3B00F8 != -1)
    swift_once(&qword_3B00F8, sub_125170);
  return swift_bridgeObjectRetain();
}

unint64_t sub_1257D4()
{
  unint64_t result;

  result = qword_3BB420;
  if (!qword_3BB420)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for IntentKinds);
    atomic_store(result, (unint64_t *)&qword_3BB420);
  }
  return result;
}

unint64_t sub_125818()
{
  uint64_t v0;
  unint64_t v1;

  if (qword_3B00F8 != -1)
    swift_once(&qword_3B00F8, sub_125170);
  v0 = swift_bridgeObjectRetain();
  v1 = sub_126168(v0);
  swift_bridgeObjectRelease();
  return v1;
}

_QWORD *sub_12587C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1258A0(a1, a2, a3);
}

ValueMetadata *type metadata accessor for IntentKinds()
{
  return &type metadata for IntentKinds;
}

_QWORD *sub_1258A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(char *, uint64_t);
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  _QWORD *boxed_opaque_existential_2Tm;
  uint64_t v90;
  uint64_t *v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  Swift::String v96;
  Swift::String v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  _QWORD *v107;
  _QWORD *v108;
  _QWORD *v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  __int128 v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  __int128 v127;
  _QWORD v128[5];
  uint64_t v129;
  unint64_t v130;
  __int128 v131;
  char *v132;
  uint64_t v133;

  *(_QWORD *)&v127 = a2;
  v116 = a3;
  v4 = type metadata accessor for JSONObject(0);
  v5 = __chkstk_darwin(v4);
  *((_QWORD *)&v115 + 1) = (char *)&v110 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v133 = type metadata accessor for AnyIntentTypes(0, v5);
  v126 = *(_QWORD *)(v133 - 8);
  __chkstk_darwin(v133);
  v120 = (char *)&v110 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BB428);
  __chkstk_darwin(v8);
  v117 = (char *)&v110 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v12 = (uint64_t *)((char *)&v110 - v11);
  v125 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BB430);
  v13 = *(_QWORD *)(v125 - 8);
  __chkstk_darwin(v125);
  v15 = (char *)&v110 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v118 = (char *)&v110 - v17;
  __chkstk_darwin(v18);
  v20 = (char *)&v110 - v19;
  v21 = type metadata accessor for JSONContext(0);
  v22 = *(_QWORD *)(v21 - 8);
  v122 = v21;
  v123 = v22;
  __chkstk_darwin(v21);
  v24 = (char *)&v110 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v27 = (char *)&v110 - v26;
  __chkstk_darwin(v28);
  v124 = (char *)&v110 - v29;
  __chkstk_darwin(v30);
  v32 = (char *)&v110 - v31;
  v33 = a1;
  v34 = dynamic_cast_existential_2_conditional(a1, a1, (uint64_t)&protocol descriptor for IntentModel, (uint64_t)&protocol descriptor for Decodable);
  if (v34)
  {
    *((_QWORD *)&v115 + 1) = v35;
    v117 = v36;
    *(_QWORD *)&v115 = v34;
    v37 = (_QWORD *)v127;
    v38 = *(_QWORD *)(v127 + 24);
    v39 = *(_QWORD *)(v127 + 32);
    __swift_project_boxed_opaque_existential_1((_QWORD *)v127, v38);
    v40 = dispatch thunk of Decoder.userInfo.getter(v38, v39);
    v41 = JSONContext.init(userInfo:)(v40);
    static JSONContext.Property<A>.intentTypes.getter(v41);
    v42 = v133;
    JSONContext.subscript.getter(v12, v20, v133);
    v43 = *(void (**)(char *, uint64_t))(v13 + 8);
    v43(v20, v125);
    LODWORD(v42) = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v126 + 48))(v12, 1, v42);
    sub_1260E4((uint64_t)v12);
    v45 = v122;
    v44 = v123;
    if ((_DWORD)v42 == 1)
    {
      v46 = sub_126124();
      v47 = v120;
      v48 = AnyIntentTypes.init(_:)(v119, v46);
      v49 = v118;
      static JSONContext.Property<A>.intentTypes.getter(v48);
      v50 = v124;
      v51 = v44;
      v52 = v133;
      JSONContext.addingValue<A>(_:forProperty:)(v47, v49, v133);
      v43(v49, v125);
      v53 = v52;
      v44 = v51;
      (*(void (**)(char *, uint64_t))(v126 + 8))(v47, v53);
      (*(void (**)(char *, uint64_t))(v51 + 8))(v32, v45);
      v54 = v50;
      v37 = (_QWORD *)v127;
      (*(void (**)(char *, char *, uint64_t))(v51 + 32))(v32, v54, v45);
    }
    __swift_project_boxed_opaque_existential_1(v37, v37[3]);
    v55 = v124;
    (*(void (**)(char *, char *, uint64_t))(v44 + 16))(v124, v32, v45);
    Dictionary<>.init(jsonContext:)(v55);
    Decoder.withUserInfo(_:)(v128);
    swift_bridgeObjectRelease();
    v56 = v115;
    v131 = v115;
    v57 = v117;
    v132 = v117;
    __swift_allocate_boxed_opaque_existential_2Tm(&v129);
    v58 = v121;
    dispatch thunk of Decodable.init(from:)(v128, v56, v57);
    if (v58)
    {
      (*(void (**)(char *, uint64_t))(v44 + 8))(v32, v45);
      return __swift_deallocate_boxed_opaque_existential_2(&v129);
    }
    v127 = v131;
    v86 = v131;
    v87 = __swift_project_boxed_opaque_existential_1(&v129, v131);
    v88 = (_QWORD *)v116;
    *(_OWORD *)(v116 + 24) = v127;
    boxed_opaque_existential_2Tm = __swift_allocate_boxed_opaque_existential_2Tm(v88);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v86 - 8) + 16))(boxed_opaque_existential_2Tm, v87, v86);
    (*(void (**)(char *, uint64_t))(v44 + 8))(v32, v45);
    return (_QWORD *)__swift_destroy_boxed_opaque_existential_1(&v129);
  }
  v60 = v15;
  v61 = v117;
  v114 = v24;
  *(_QWORD *)&v115 = v27;
  v62 = v133;
  v63 = v33;
  v64 = dynamic_cast_existential_2_conditional(v33, v33, (uint64_t)&protocol descriptor for ExpressibleByJSON, (uint64_t)&protocol descriptor for IntentModel);
  if (v64)
  {
    v111 = v66;
    v112 = v65;
    v113 = v64;
    v67 = *(_QWORD *)(v127 + 24);
    v68 = *(_QWORD *)(v127 + 32);
    __swift_project_boxed_opaque_existential_1((_QWORD *)v127, v67);
    v69 = dispatch thunk of Decoder.userInfo.getter(v67, v68);
    v70 = JSONContext.init(userInfo:)(v69);
    static JSONContext.Property<A>.intentTypes.getter(v70);
    v71 = (uint64_t)v61;
    JSONContext.subscript.getter(v61, v60, v62);
    v72 = *(void (**)(char *, uint64_t))(v13 + 8);
    v73 = v125;
    v72(v60, v125);
    v74 = v126;
    v75 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v126 + 48))(v71, 1, v62);
    sub_1260E4(v71);
    v76 = v122;
    if (v75 == 1)
    {
      v77 = sub_126124();
      v78 = v120;
      v79 = AnyIntentTypes.init(_:)(v119, v77);
      v80 = v118;
      static JSONContext.Property<A>.intentTypes.getter(v79);
      v81 = v124;
      v82 = v115;
      JSONContext.addingValue<A>(_:forProperty:)(v78, v80, v62);
      v72(v80, v73);
      (*(void (**)(char *, uint64_t))(v74 + 8))(v78, v62);
      v83 = v123;
      (*(void (**)(uint64_t, uint64_t))(v123 + 8))(v82, v76);
      (*(void (**)(uint64_t, char *, uint64_t))(v83 + 32))(v82, v81, v76);
    }
    sub_150C8(v127, (uint64_t)v128);
    v84 = *((_QWORD *)&v115 + 1);
    v85 = v121;
    JSONObject.init(from:)(v128);
    if (v85)
      return (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(v123 + 8))(v115, v76);
    v99 = v123;
    v100 = v114;
    v101 = v115;
    (*(void (**)(char *, _QWORD, uint64_t))(v123 + 16))(v114, v115, v76);
    v102 = v76;
    v103 = v113;
    v104 = v112;
    *(_QWORD *)&v131 = v113;
    *((_QWORD *)&v131 + 1) = v112;
    v132 = v111;
    __swift_allocate_boxed_opaque_existential_2Tm(&v129);
    dispatch thunk of ExpressibleByJSON.init(deserializing:using:)(v84, v100, v103, v104);
    v105 = v131;
    v106 = v132;
    v107 = __swift_project_boxed_opaque_existential_1(&v129, v131);
    v108 = (_QWORD *)v116;
    *(_QWORD *)(v116 + 24) = v105;
    v108[4] = v106;
    v109 = __swift_allocate_boxed_opaque_existential_2Tm(v108);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v105 - 8) + 16))(v109, v107, v105);
    (*(void (**)(uint64_t, uint64_t))(v99 + 8))(v101, v102);
    return (_QWORD *)__swift_destroy_boxed_opaque_existential_1(&v129);
  }
  v90 = type metadata accessor for DecodingError(0);
  swift_allocError(v90, &protocol witness table for DecodingError, 0, 0);
  v92 = v91;
  __swift_instantiateConcreteTypeFromMangledName(&qword_3B0B38);
  *v92 = v63;
  v93 = *(_QWORD *)(v127 + 24);
  v94 = *(_QWORD *)(v127 + 32);
  __swift_project_boxed_opaque_existential_1((_QWORD *)v127, v93);
  v95 = dispatch thunk of Decoder.codingPath.getter(v93, v94);
  v129 = 0;
  v130 = 0xE000000000000000;
  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease();
  v129 = 60;
  v130 = 0xE100000000000000;
  v96._countAndFlagsBits = _typeName(_:qualified:)(v63, 0);
  String.append(_:)(v96);
  swift_bridgeObjectRelease();
  v97._object = (void *)0x800000000030A3B0;
  v97._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v97);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v95, v129, v130, 0);
  v98 = (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v90 - 8) + 104))(v92, enum case for DecodingError.typeMismatch(_:), v90);
  return (_QWORD *)swift_willThrow(v98);
}

uint64_t sub_1260E4(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BB428);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_126124()
{
  unint64_t result;

  result = qword_3BB438;
  if (!qword_3BB438)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for IntentKinds);
    atomic_store(result, (unint64_t *)&qword_3BB438);
  }
  return result;
}

unint64_t sub_126168(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t result;
  int64_t i;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  int64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t *v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  unint64_t v37;
  __int128 v38;
  uint64_t v39;

  v1 = a1;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_3B0B40);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v36 = v1 + 64;
  v4 = -1 << *(_BYTE *)(v1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(v1 + 64);
  v35 = (unint64_t)(63 - v4) >> 6;
  result = swift_bridgeObjectRetain();
  i = 0;
  v9 = (uint64_t *)&unk_3BB440;
  v10 = (uint64_t *)&unk_3B0B50;
  if (v6)
    goto LABEL_10;
LABEL_11:
  v18 = i + 1;
  if (__OFADD__(i, 1))
    goto LABEL_36;
  if (v18 >= v35)
    goto LABEL_33;
  v19 = *(_QWORD *)(v36 + 8 * v18);
  v20 = i + 1;
  if (!v19)
  {
    v20 = i + 2;
    if (i + 2 >= v35)
      goto LABEL_33;
    v19 = *(_QWORD *)(v36 + 8 * v20);
    if (!v19)
    {
      v20 = i + 3;
      if (i + 3 >= v35)
        goto LABEL_33;
      v19 = *(_QWORD *)(v36 + 8 * v20);
      if (!v19)
      {
        v20 = i + 4;
        if (i + 4 >= v35)
          goto LABEL_33;
        v19 = *(_QWORD *)(v36 + 8 * v20);
        if (!v19)
        {
          v20 = i + 5;
          if (i + 5 >= v35)
            goto LABEL_33;
          v19 = *(_QWORD *)(v36 + 8 * v20);
          if (!v19)
          {
            v20 = i + 6;
            if (i + 6 >= v35)
              goto LABEL_33;
            v19 = *(_QWORD *)(v36 + 8 * v20);
            v21 = i + 6;
            if (!v19)
            {
              while (1)
              {
                v20 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_37;
                if (v20 >= v35)
                  break;
                v19 = *(_QWORD *)(v36 + 8 * v20);
                ++v21;
                if (v19)
                  goto LABEL_27;
              }
LABEL_33:
              sub_15498(v1);
              return (unint64_t)v3;
            }
          }
        }
      }
    }
  }
LABEL_27:
  v6 = (v19 - 1) & v19;
  v17 = __clz(__rbit64(v19)) + (v20 << 6);
  for (i = v20; ; v17 = v16 | (i << 6))
  {
    v22 = 16 * v17;
    v23 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v17);
    v25 = *v23;
    v24 = v23[1];
    v38 = *(_OWORD *)(*(_QWORD *)(v1 + 56) + v22);
    swift_bridgeObjectRetain();
    v26 = __swift_instantiateConcreteTypeFromMangledName(v9);
    v27 = __swift_instantiateConcreteTypeFromMangledName(v10);
    swift_dynamicCast(&v39, &v38, v26, v27, 7);
    v28 = v39;
    result = sub_211DC0(v25, v24);
    v29 = result;
    if ((v30 & 1) != 0)
    {
      v37 = v6;
      v11 = v1;
      v12 = i;
      v13 = v10;
      v14 = v9;
      v15 = (uint64_t *)(v3[6] + 16 * result);
      result = swift_bridgeObjectRelease();
      *v15 = v25;
      v15[1] = v24;
      v9 = v14;
      v10 = v13;
      i = v12;
      v1 = v11;
      v6 = v37;
      *(_QWORD *)(v3[7] + 8 * v29) = v28;
      if (!v37)
        goto LABEL_11;
      goto LABEL_10;
    }
    if (v3[2] >= v3[3])
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v31 = (uint64_t *)(v3[6] + 16 * result);
    *v31 = v25;
    v31[1] = v24;
    *(_QWORD *)(v3[7] + 8 * result) = v28;
    v32 = v3[2];
    v33 = __OFADD__(v32, 1);
    v34 = v32 + 1;
    if (v33)
      goto LABEL_35;
    v3[2] = v34;
    if (!v6)
      goto LABEL_11;
LABEL_10:
    v16 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
  return result;
}

unint64_t sub_126484()
{
  unint64_t result;

  result = qword_3BF780;
  if (!qword_3BF780)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CategoryPageFromYourShowsShelfIntent);
    atomic_store(result, (unint64_t *)&qword_3BF780);
  }
  return result;
}

unint64_t sub_1264C8()
{
  unint64_t result;

  result = qword_3BB450;
  if (!qword_3BB450)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ChannelPageIntent);
    atomic_store(result, (unint64_t *)&qword_3BB450);
  }
  return result;
}

unint64_t sub_12650C()
{
  unint64_t result;

  result = qword_3BB458;
  if (!qword_3BB458)
  {
    result = swift_getWitnessTable("͢\b");
    atomic_store(result, (unint64_t *)&qword_3BB458);
  }
  return result;
}

unint64_t sub_126550()
{
  unint64_t result;

  result = qword_3BB470;
  if (!qword_3BB470)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for FetchSearchChannelLockupsIntent);
    atomic_store(result, (unint64_t *)&qword_3BB470);
  }
  return result;
}

unint64_t sub_126594()
{
  unint64_t result;

  result = qword_3BB478;
  if (!qword_3BB478)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for FetchSearchEpisodeLockupsIntent);
    atomic_store(result, (unint64_t *)&qword_3BB478);
  }
  return result;
}

unint64_t sub_1265D8()
{
  unint64_t result;

  result = qword_3BB488;
  if (!qword_3BB488)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for FetchSmartPlayEpisodeAdamIDIntent);
    atomic_store(result, (unint64_t *)&qword_3BB488);
  }
  return result;
}

unint64_t sub_12661C()
{
  unint64_t result;

  result = qword_3BB498;
  if (!qword_3BB498)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for GroupedSearchResultsIntent);
    atomic_store(result, (unint64_t *)&qword_3BB498);
  }
  return result;
}

unint64_t sub_126660()
{
  unint64_t result;

  result = qword_3BB4A8;
  if (!qword_3BB4A8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for HighlightsPageIntent);
    atomic_store(result, (unint64_t *)&qword_3BB4A8);
  }
  return result;
}

unint64_t sub_1266A4()
{
  unint64_t result;

  result = qword_3BB4B8;
  if (!qword_3BB4B8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for RecommendationsShelvesIntent);
    atomic_store(result, (unint64_t *)&qword_3BB4B8);
  }
  return result;
}

unint64_t sub_1266E8()
{
  unint64_t result;

  result = qword_3BB4C0;
  if (!qword_3BB4C0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ShowPageHeaderAndFooterShelvesIntent);
    atomic_store(result, (unint64_t *)&qword_3BB4C0);
  }
  return result;
}

unint64_t sub_12672C()
{
  unint64_t result;

  result = qword_3BB4C8;
  if (!qword_3BB4C8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UpNextScoringWeightsIntent);
    atomic_store(result, (unint64_t *)&qword_3BB4C8);
  }
  return result;
}

uint64_t MetricsPage.pageEvent.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v2 = (*(uint64_t (**)(void))(a2 + 8))();
  if ((unint64_t)v2 >> 62)
    goto LABEL_15;
  for (i = *(_QWORD *)((char *)&dword_10 + (v2 & 0xFFFFFFFFFFFFF8)); i; i = _CocoaArrayWrapper.endIndex.getter(v12))
  {
    v4 = 4;
    while (1)
    {
      v5 = v4 - 4;
      if ((v2 & 0xC000000000000001) == 0)
        break;
      v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(v4 - 4);
      v7 = v4 - 3;
      if (__OFADD__(v5, 1))
        goto LABEL_14;
LABEL_9:
      v8 = type metadata accessor for PageMetricsEvent();
      v9 = swift_dynamicCastClass(v6, v8);
      if (v9)
      {
        v10 = v9;
        swift_bridgeObjectRelease();
        return v10;
      }
      swift_release(v6);
      ++v4;
      if (v7 == i)
        goto LABEL_11;
    }
    v6 = *(_QWORD *)(v2 + 8 * v4);
    swift_retain();
    v7 = v4 - 3;
    if (!__OFADD__(v5, 1))
      goto LABEL_9;
LABEL_14:
    __break(1u);
LABEL_15:
    if (v2 < 0)
      v12 = v2;
    else
      v12 = v2 & 0xFFFFFFFFFFFFFF8;
  }
LABEL_11:
  swift_bridgeObjectRelease();
  return 0;
}

void PresentNowPlayingAction.init(uniqueId:title:presentationStyle:actionMetrics:impressionMetrics:)()
{
  _swift_stdlib_reportUnimplementedInitializer("ShelfKit.PresentNowPlayingAction", 32, "init(uniqueId:title:presentationStyle:actionMetrics:impressionMetrics:)", 71, 0);
  __break(1u);
}

uint64_t sub_126898()
{
  return type metadata accessor for PresentNowPlayingAction(0);
}

uint64_t type metadata accessor for PresentNowPlayingAction(uint64_t a1)
{
  uint64_t result;

  result = qword_3BB4F8;
  if (!qword_3BB4F8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PresentNowPlayingAction);
  return result;
}

uint64_t method lookup function for PresentNowPlayingAction(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for PresentNowPlayingAction);
}

uint64_t ShowOffer.init(deserializing:using:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(char *, uint64_t);
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  int v70;
  char *v71;
  uint64_t v72;
  unsigned __int8 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  void (*v78)(char *, uint64_t, uint64_t);
  uint64_t v79;
  char *v80;
  uint64_t v81;
  void (*v82)(char *, uint64_t, uint64_t);
  void (*v83)(char *, uint64_t);
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  int *v111;
  _QWORD *v112;
  void (*v113)(char *, uint64_t, uint64_t);
  _QWORD *v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  _QWORD *v120;
  char *v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t result;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  void (*v129)(char *, uint64_t);
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void (*v135)(char *, uint64_t, uint64_t);
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  char *v140;
  char *v141;
  char *v142;
  char *v143;
  char *v144;
  char *v145;
  char *v146;
  char *v147;
  char *v148;
  char *v149;
  char *v150;
  char *v151;
  uint64_t *v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  int v159;
  unsigned __int8 v160;
  unsigned __int8 v161;

  v152 = a3;
  v158 = a2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
  v5 = __chkstk_darwin(v4);
  v151 = (char *)&v128 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v150 = (char *)&v128 - v8;
  __chkstk_darwin(v7);
  v149 = (char *)&v128 - v9;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
  __chkstk_darwin(v10);
  v155 = (uint64_t)&v128 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for JSONContext(0);
  v156 = *(_QWORD *)(v12 - 8);
  v157 = v12;
  __chkstk_darwin(v12);
  v154 = (char *)&v128 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for JSONObject(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v128 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v16);
  v148 = (char *)&v128 - v20;
  v21 = __chkstk_darwin(v19);
  v147 = (char *)&v128 - v22;
  v23 = __chkstk_darwin(v21);
  v146 = (char *)&v128 - v24;
  v25 = __chkstk_darwin(v23);
  v145 = (char *)&v128 - v26;
  v27 = __chkstk_darwin(v25);
  v144 = (char *)&v128 - v28;
  v29 = __chkstk_darwin(v27);
  v143 = (char *)&v128 - v30;
  v31 = __chkstk_darwin(v29);
  v142 = (char *)&v128 - v32;
  v33 = __chkstk_darwin(v31);
  v141 = (char *)&v128 - v34;
  v35 = __chkstk_darwin(v33);
  v140 = (char *)&v128 - v36;
  v37 = __chkstk_darwin(v35);
  v39 = (char *)&v128 - v38;
  v40 = __chkstk_darwin(v37);
  v42 = (char *)&v128 - v41;
  v43 = __chkstk_darwin(v40);
  v45 = (char *)&v128 - v44;
  __chkstk_darwin(v43);
  v47 = (char *)&v128 - v46;
  v48 = JSONObject.subscript.getter(0x64496D616461, 0xE600000000000000);
  v49 = JSONObject.string.getter(v48);
  if (!v50)
  {
    v55 = *(void (**)(char *, uint64_t))(v15 + 8);
    v55(v47, v14);
    v56 = type metadata accessor for JSONError(0);
    v57 = sub_F1C0((unint64_t *)&qword_3B0CB0, (void (*)(uint64_t))&type metadata accessor for JSONError, (uint64_t)&protocol conformance descriptor for JSONError);
    swift_allocError(v56, v57, 0, 0);
    v59 = v58;
    v60 = type metadata accessor for ShowOffer(0);
    *v59 = 0x64496D616461;
    v61 = 0xE600000000000000;
LABEL_15:
    v59[1] = v61;
    v59[2] = v60;
    v127 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v56 - 8) + 104))(v59, enum case for JSONError.missingProperty(_:), v56);
    swift_willThrow(v127);
    (*(void (**)(uint64_t, uint64_t))(v156 + 8))(v158, v157);
    return ((uint64_t (*)(char *, uint64_t))v55)(a1, v14);
  }
  v51 = v50;
  v139 = v18;
  v52 = v153;
  v53 = static AdamID.parse(_:)(v49, v50);
  if (v52)
  {
    v54 = swift_bridgeObjectRelease(v51);
    v138 = static AdamID.empty.getter(v54);
    swift_errorRelease(v52);
    v153 = 0;
  }
  else
  {
    v138 = v53;
    v153 = 0;
    swift_bridgeObjectRelease(v51);
  }
  v55 = *(void (**)(char *, uint64_t))(v15 + 8);
  v55(v47, v14);
  v62 = JSONObject.subscript.getter(0x656C746974, 0xE500000000000000);
  v63 = JSONObject.string.getter(v62);
  v65 = v64;
  v55(v45, v14);
  v66 = v154;
  v137 = v65;
  if (!v65)
  {
    v56 = type metadata accessor for JSONError(0);
    v125 = sub_F1C0((unint64_t *)&qword_3B0CB0, (void (*)(uint64_t))&type metadata accessor for JSONError, (uint64_t)&protocol conformance descriptor for JSONError);
    swift_allocError(v56, v125, 0, 0);
    v59 = v126;
    v60 = type metadata accessor for ShowOffer(0);
    *v59 = 0x656C746974;
    v61 = 0xE500000000000000;
    goto LABEL_15;
  }
  v136 = v63;
  JSONObject.subscript.getter(0x52746E65746E6F63, 0xED0000676E697461);
  v135 = *(void (**)(char *, uint64_t, uint64_t))(v156 + 16);
  v135(v66, v158, v157);
  sub_E9CA0();
  ExpressibleByJSON.init(tryDeserializing:using:)(v42, v66, &type metadata for ContentRating);
  if (v161 == 2)
  {
    v67 = JSONObject.subscript.getter(0x63696C7078457369, 0xEA00000000007469);
    v68 = JSONObject.BOOL.getter(v67);
    v55(v39, v14);
    if ((v68 & 1) != 0)
      v161 = 1;
  }
  v69 = JSONObject.subscript.getter(0x6269726373627573, 0xEC000000656C6261);
  v70 = JSONObject.BOOL.getter(v69);
  v55(v42, v14);
  if (v70 == 2)
  {
    v71 = v140;
    v72 = JSONObject.subscript.getter(0xD000000000000012, 0x8000000000310250);
    v73 = JSONObject.BOOL.getter(v72);
    v70 = v73;
    v55(v71, v14);
    if (v73 != 2)
      v70 = (v73 & 1) == 0;
  }
  LODWORD(v140) = v70;
  JSONObject.subscript.getter(0x65707954776F6873, 0xE800000000000000);
  v129 = v55;
  v74 = v158;
  v75 = v157;
  v76 = v14;
  v77 = a1;
  v78 = v135;
  ((void (*)(char *))v135)(v66);
  sub_127924();
  ExpressibleByJSON.init(tryDeserializing:using:)(v42, v66, &type metadata for ShowType);
  v159 = v160;
  v79 = type metadata accessor for ArtworkModel(0);
  JSONObject.subscript.getter(0x6B726F77747261, 0xE700000000000000);
  v78(v66, v74, v75);
  sub_F1C0((unint64_t *)&qword_3B2828, (void (*)(uint64_t))&type metadata accessor for ArtworkModel, (uint64_t)&protocol conformance descriptor for ArtworkModel);
  ExpressibleByJSON.init(tryDeserializing:using:)(v42, v66, v79);
  v80 = v141;
  v81 = JSONObject.subscript.getter(0x726F68747561, 0xE600000000000000);
  v154 = (char *)JSONObject.string.getter(v81);
  v135 = v82;
  v83 = v129;
  v129(v80, v76);
  v84 = v142;
  v85 = JSONObject.subscript.getter(0x79726F6765746163, 0xE800000000000000);
  v141 = (char *)JSONObject.string.getter(v85);
  v134 = v86;
  v83(v84, v76);
  LODWORD(v142) = v161;
  v87 = v143;
  v88 = JSONObject.subscript.getter(0x5479616C70736964, 0xEB00000000657079);
  v133 = JSONObject.string.getter(v88);
  v132 = v89;
  v83(v87, v76);
  v90 = v144;
  v91 = JSONObject.subscript.getter(0x4C65676150637A64, 0xEF6E6F697461636FLL);
  v143 = (char *)JSONObject.string.getter(v91);
  v131 = v92;
  v83(v90, v76);
  v93 = v145;
  v94 = JSONObject.subscript.getter(0x6C725564656566, 0xE700000000000000);
  v95 = (uint64_t)v149;
  JSONObject.url.getter(v94);
  v83(v93, v76);
  v96 = v146;
  v97 = JSONObject.subscript.getter(0x72656469766F7270, 0xE800000000000000);
  v98 = JSONObject.string.getter(v97);
  v144 = v99;
  v145 = (char *)v98;
  v83(v96, v76);
  v100 = v147;
  v101 = JSONObject.subscript.getter(0x72656469766F7270, 0xEA00000000006449);
  v146 = (char *)JSONObject.string.getter(v101);
  v130 = v102;
  v83(v100, v76);
  v103 = v148;
  v104 = JSONObject.subscript.getter(0x72656469766F7270, 0xEB000000006C7255);
  v105 = (uint64_t)v150;
  JSONObject.url.getter(v104);
  v83(v103, v76);
  v106 = v139;
  v107 = JSONObject.subscript.getter(0x6C725565726F7473, 0xE800000000000000);
  v108 = (uint64_t)v151;
  JSONObject.url.getter(v107);
  (*(void (**)(uint64_t, uint64_t))(v156 + 8))(v158, v157);
  v83(v77, v76);
  v83(v106, v76);
  v109 = v152;
  v110 = v136;
  *v152 = v138;
  v109[1] = v110;
  v109[2] = v137;
  *((_BYTE *)v109 + 24) = v159 & 1;
  v111 = (int *)type metadata accessor for ShowOffer(0);
  sub_15BD4(v155, (uint64_t)v109 + v111[7], &qword_3BEB70);
  v112 = (uint64_t *)((char *)v109 + v111[8]);
  v113 = v135;
  *v112 = v154;
  v112[1] = v113;
  v114 = (uint64_t *)((char *)v109 + v111[9]);
  v115 = v134;
  *v114 = v141;
  v114[1] = v115;
  *((_BYTE *)v109 + v111[10]) = (_BYTE)v142;
  v116 = (uint64_t *)((char *)v109 + v111[11]);
  v117 = v132;
  *v116 = v133;
  v116[1] = v117;
  v118 = (uint64_t *)((char *)v109 + v111[12]);
  v119 = v131;
  *v118 = v143;
  v118[1] = v119;
  sub_15BD4(v95, (uint64_t)v109 + v111[13], &qword_3B4370);
  v120 = (uint64_t *)((char *)v109 + v111[14]);
  v121 = v144;
  *v120 = v145;
  v120[1] = v121;
  v122 = (uint64_t *)((char *)v109 + v111[15]);
  v123 = v130;
  *v122 = v146;
  v122[1] = v123;
  sub_15BD4(v105, (uint64_t)v109 + v111[16], &qword_3B4370);
  result = sub_15BD4(v108, (uint64_t)v109 + v111[17], &qword_3B4370);
  *((_BYTE *)v109 + v111[18]) = (_BYTE)v140;
  return result;
}

uint64_t ShowOffer.isExplicit.getter()
{
  uint64_t v0;
  int v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ShowOffer(0) + 40));
  if (v1 == 2)
  {
    v2 = 0;
  }
  else
  {
    v3 = ContentRating.rawValue.getter(v1 & 1);
    v5 = v4;
    v2 = 1;
    v6 = ContentRating.rawValue.getter(1);
    if (v3 != v6 || v5 != v7)
      v2 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v2 & 1;
}

uint64_t ShowOffer.showType.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t ShowOffer.artwork.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for ShowOffer(0);
  return sub_267BC(v1 + *(int *)(v3 + 28), a1, &qword_3BEB70);
}

uint64_t ShowOffer.author.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for ShowOffer(0) + 32));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ShowOffer.category.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for ShowOffer(0) + 36));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ShowOffer.contentRating.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ShowOffer(0) + 40));
}

uint64_t ShowOffer.displayType.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for ShowOffer(0) + 44));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ShowOffer.dzcPageLocation.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for ShowOffer(0) + 48));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ShowOffer.feedUrl.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for ShowOffer(0);
  return sub_267BC(v1 + *(int *)(v3 + 52), a1, &qword_3B4370);
}

uint64_t ShowOffer.provider.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for ShowOffer(0) + 56));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ShowOffer.providerId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for ShowOffer(0) + 60));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ShowOffer.providerUrl.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for ShowOffer(0);
  return sub_267BC(v1 + *(int *)(v3 + 64), a1, &qword_3B4370);
}

uint64_t ShowOffer.storeUrl.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for ShowOffer(0);
  return sub_267BC(v1 + *(int *)(v3 + 68), a1, &qword_3B4370);
}

uint64_t ShowOffer.subscribable.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ShowOffer(0) + 72));
}

uint64_t ShowOffer.init(adamId:title:showType:artwork:author:category:contentRating:displayType:dzcPageLocation:feedUrl:provider:providerId:providerUrl:storeUrl:subscribable:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  int *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t result;

  *(_QWORD *)a9 = a1;
  *(_QWORD *)(a9 + 8) = a2;
  *(_QWORD *)(a9 + 16) = a3;
  *(_BYTE *)(a9 + 24) = a4 & 1;
  v26 = (int *)type metadata accessor for ShowOffer(0);
  sub_15BD4(a5, a9 + v26[7], &qword_3BEB70);
  v27 = (_QWORD *)(a9 + v26[8]);
  *v27 = a6;
  v27[1] = a7;
  v28 = (_QWORD *)(a9 + v26[9]);
  *v28 = a8;
  v28[1] = a10;
  *(_BYTE *)(a9 + v26[10]) = a11;
  v29 = (_QWORD *)(a9 + v26[11]);
  *v29 = a12;
  v29[1] = a13;
  v30 = (_QWORD *)(a9 + v26[12]);
  *v30 = a14;
  v30[1] = a15;
  sub_15BD4(a16, a9 + v26[13], &qword_3B4370);
  v31 = (_QWORD *)(a9 + v26[14]);
  *v31 = a17;
  v31[1] = a18;
  v32 = (_QWORD *)(a9 + v26[15]);
  *v32 = a19;
  v32[1] = a20;
  sub_15BD4(a21, a9 + v26[16], &qword_3B4370);
  result = sub_15BD4(a22, a9 + v26[17], &qword_3B4370);
  *(_BYTE *)(a9 + v26[18]) = a23;
  return result;
}

uint64_t type metadata accessor for ShowOffer(uint64_t a1)
{
  uint64_t result;

  result = qword_3BB628;
  if (!qword_3BB628)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ShowOffer);
  return result;
}

unint64_t sub_127924()
{
  unint64_t result;

  result = qword_3BB5C8;
  if (!qword_3BB5C8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ShowType);
    atomic_store(result, (unint64_t *)&qword_3BB5C8);
  }
  return result;
}

uint64_t sub_127968@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return ShowOffer.init(deserializing:using:)(a1, a2, a3);
}

_QWORD *initializeBufferWithCopyOfBuffer for ShowOffer(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  int *v10;
  uint64_t v11;
  unsigned int (*v12)(_QWORD *, uint64_t, int *);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  id *v19;
  int v20;
  id v21;
  id *v22;
  int v23;
  id v24;
  id *v25;
  int v26;
  id v27;
  id *v28;
  int v29;
  id v30;
  id *v31;
  int v32;
  id v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  void (*v46)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  int *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int (*v68)(char *, uint64_t, uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  char *__dst;
  int *v89;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
    v7 = a3[7];
    v8 = (_QWORD *)(a1 + v7);
    v9 = (uint64_t *)((char *)a2 + v7);
    v10 = (int *)type metadata accessor for ArtworkModel(0);
    v11 = *((_QWORD *)v10 - 1);
    v12 = *(unsigned int (**)(_QWORD *, uint64_t, int *))(v11 + 48);
    swift_bridgeObjectRetain();
    if (v12(v9, 1, v10))
    {
      v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      v15 = v9[1];
      *v8 = *v9;
      v8[1] = v15;
      v16 = *((unsigned __int8 *)v9 + 32);
      swift_bridgeObjectRetain();
      if (v16 == 255)
      {
        *((_OWORD *)v8 + 1) = *((_OWORD *)v9 + 1);
        *((_BYTE *)v8 + 32) = *((_BYTE *)v9 + 32);
      }
      else
      {
        v17 = v9[2];
        v18 = v9[3];
        sub_3D464(v17, v18, v16);
        v8[2] = v17;
        v8[3] = v18;
        *((_BYTE *)v8 + 32) = v16;
      }
      *(_OWORD *)(v8 + 5) = *(_OWORD *)(v9 + 5);
      v19 = (id *)(v9 + 7);
      v20 = *((unsigned __int8 *)v9 + 64);
      if (v20 == 255)
      {
        v8[7] = *v19;
        *((_BYTE *)v8 + 64) = *((_BYTE *)v9 + 64);
      }
      else
      {
        v21 = *v19;
        sub_3D47C(*v19, *((_BYTE *)v9 + 64));
        v8[7] = v21;
        *((_BYTE *)v8 + 64) = v20;
      }
      v22 = (id *)(v9 + 9);
      v23 = *((unsigned __int8 *)v9 + 80);
      if (v23 == 255)
      {
        v8[9] = *v22;
        *((_BYTE *)v8 + 80) = *((_BYTE *)v9 + 80);
      }
      else
      {
        v24 = *v22;
        sub_3D47C(*v22, *((_BYTE *)v9 + 80));
        v8[9] = v24;
        *((_BYTE *)v8 + 80) = v23;
      }
      v25 = (id *)(v9 + 11);
      v26 = *((unsigned __int8 *)v9 + 96);
      if (v26 == 255)
      {
        v8[11] = *v25;
        *((_BYTE *)v8 + 96) = *((_BYTE *)v9 + 96);
      }
      else
      {
        v27 = *v25;
        sub_3D47C(*v25, *((_BYTE *)v9 + 96));
        v8[11] = v27;
        *((_BYTE *)v8 + 96) = v26;
      }
      v28 = (id *)(v9 + 13);
      v29 = *((unsigned __int8 *)v9 + 112);
      if (v29 == 255)
      {
        v8[13] = *v28;
        *((_BYTE *)v8 + 112) = *((_BYTE *)v9 + 112);
      }
      else
      {
        v30 = *v28;
        sub_3D47C(*v28, *((_BYTE *)v9 + 112));
        v8[13] = v30;
        *((_BYTE *)v8 + 112) = v29;
      }
      v31 = (id *)(v9 + 15);
      v32 = *((unsigned __int8 *)v9 + 128);
      if (v32 == 255)
      {
        v8[15] = *v31;
        *((_BYTE *)v8 + 128) = *((_BYTE *)v9 + 128);
      }
      else
      {
        v33 = *v31;
        sub_3D47C(*v31, *((_BYTE *)v9 + 128));
        v8[15] = v33;
        *((_BYTE *)v8 + 128) = v32;
      }
      *((_BYTE *)v8 + 129) = *((_BYTE *)v9 + 129);
      v34 = v10[11];
      v35 = (char *)v8 + v34;
      v36 = (char *)v9 + v34;
      v37 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 16))(v35, v36, v37);
      v38 = v10[12];
      v39 = (_QWORD *)((char *)v8 + v38);
      v40 = (_QWORD *)((char *)v9 + v38);
      v41 = v40[1];
      *v39 = *v40;
      v39[1] = v41;
      *((_BYTE *)v8 + v10[13]) = *((_BYTE *)v9 + v10[13]);
      *((_BYTE *)v8 + v10[14]) = *((_BYTE *)v9 + v10[14]);
      *((_BYTE *)v8 + v10[15]) = *((_BYTE *)v9 + v10[15]);
      v42 = v10[16];
      v43 = (_QWORD *)((char *)v8 + v42);
      v44 = (_QWORD *)((char *)v9 + v42);
      v45 = v44[1];
      *v43 = *v44;
      v43[1] = v45;
      v46 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v11 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v46(v8, 0, 1, v10);
    }
    v47 = a3[8];
    v48 = a3[9];
    v49 = (_QWORD *)((char *)v4 + v47);
    v50 = (uint64_t *)((char *)a2 + v47);
    v51 = v50[1];
    *v49 = *v50;
    v49[1] = v51;
    v52 = (_QWORD *)((char *)v4 + v48);
    v53 = (uint64_t *)((char *)a2 + v48);
    v54 = v53[1];
    *v52 = *v53;
    v52[1] = v54;
    v55 = a3[11];
    *((_BYTE *)v4 + a3[10]) = *((_BYTE *)a2 + a3[10]);
    v56 = (_QWORD *)((char *)v4 + v55);
    v57 = (uint64_t *)((char *)a2 + v55);
    v58 = a3;
    v59 = v57[1];
    *v56 = *v57;
    v56[1] = v59;
    v60 = v58[12];
    v61 = v58[13];
    v89 = v58;
    v62 = (_QWORD *)((char *)v4 + v60);
    v63 = (uint64_t *)((char *)a2 + v60);
    v64 = v63[1];
    *v62 = *v63;
    v62[1] = v64;
    __dst = (char *)v4 + v61;
    v65 = (char *)a2 + v61;
    v66 = type metadata accessor for URL(0);
    v67 = *(_QWORD *)(v66 - 8);
    v68 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v67 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v68(v65, 1, v66))
    {
      v69 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
      memcpy(__dst, v65, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v67 + 16))(__dst, v65, v66);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v67 + 56))(__dst, 0, 1, v66);
    }
    v70 = v67;
    v71 = v89[14];
    v72 = v89[15];
    v73 = (_QWORD *)((char *)v4 + v71);
    v74 = (uint64_t *)((char *)a2 + v71);
    v75 = v74[1];
    *v73 = *v74;
    v73[1] = v75;
    v76 = (_QWORD *)((char *)v4 + v72);
    v77 = (uint64_t *)((char *)a2 + v72);
    v78 = v77[1];
    *v76 = *v77;
    v76[1] = v78;
    v79 = v89[16];
    v80 = (char *)v4 + v79;
    v81 = (char *)a2 + v79;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v68(v81, 1, v66))
    {
      v82 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
      memcpy(v80, v81, *(_QWORD *)(*(_QWORD *)(v82 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v70 + 16))(v80, v81, v66);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v70 + 56))(v80, 0, 1, v66);
    }
    v83 = v89[17];
    v84 = (char *)v4 + v83;
    v85 = (char *)a2 + v83;
    if (v68((char *)a2 + v83, 1, v66))
    {
      v86 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
      memcpy(v84, v85, *(_QWORD *)(*(_QWORD *)(v86 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v70 + 16))(v84, v85, v66);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v70 + 56))(v84, 0, 1, v66);
    }
    *((_BYTE *)v4 + v89[18]) = *((_BYTE *)a2 + v89[18]);
  }
  return v4;
}

uint64_t destroy for ShowOffer(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t result;

  swift_bridgeObjectRelease();
  v4 = a1 + a2[7];
  v5 = type metadata accessor for ArtworkModel(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5))
  {
    swift_bridgeObjectRelease();
    v6 = *(unsigned __int8 *)(v4 + 32);
    if (v6 != 255)
      sub_3B5BC(*(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), v6);
    v7 = *(unsigned __int8 *)(v4 + 64);
    if (v7 != 255)
      sub_3D624(*(id *)(v4 + 56), v7);
    v8 = *(unsigned __int8 *)(v4 + 80);
    if (v8 != 255)
      sub_3D624(*(id *)(v4 + 72), v8);
    v9 = *(unsigned __int8 *)(v4 + 96);
    if (v9 != 255)
      sub_3D624(*(id *)(v4 + 88), v9);
    v10 = *(unsigned __int8 *)(v4 + 112);
    if (v10 != 255)
      sub_3D624(*(id *)(v4 + 104), v10);
    v11 = *(unsigned __int8 *)(v4 + 128);
    if (v11 != 255)
      sub_3D624(*(id *)(v4 + 120), v11);
    v12 = v4 + *(int *)(v5 + 44);
    v13 = type metadata accessor for ArtworkCrop(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v14 = a1 + a2[13];
  v15 = type metadata accessor for URL(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  if (!v17(v14, 1, v15))
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v14, v15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v18 = a1 + a2[16];
  if (!v17(v18, 1, v15))
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v18, v15);
  v19 = a1 + a2[17];
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v17)(v19, 1, v15);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8))(v19, v15);
  return result;
}

uint64_t initializeWithCopy for ShowOffer(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  int *v9;
  uint64_t v10;
  unsigned int (*v11)(_QWORD *, uint64_t, int *);
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  id *v17;
  int v18;
  id v19;
  id *v20;
  int v21;
  id v22;
  id *v23;
  int v24;
  id v25;
  id *v26;
  int v27;
  id v28;
  id *v29;
  int v30;
  id v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  void (*v44)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  const void *v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int (*v65)(const void *, uint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  const void *v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  const void *v81;
  uint64_t v82;
  void *__dst;
  int *v85;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v6 = a3[7];
  v7 = (_QWORD *)(a1 + v6);
  v8 = (_QWORD *)(a2 + v6);
  v9 = (int *)type metadata accessor for ArtworkModel(0);
  v10 = *((_QWORD *)v9 - 1);
  v11 = *(unsigned int (**)(_QWORD *, uint64_t, int *))(v10 + 48);
  swift_bridgeObjectRetain();
  if (v11(v8, 1, v9))
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v13 = v8[1];
    *v7 = *v8;
    v7[1] = v13;
    v14 = *((unsigned __int8 *)v8 + 32);
    swift_bridgeObjectRetain();
    if (v14 == 255)
    {
      *((_OWORD *)v7 + 1) = *((_OWORD *)v8 + 1);
      *((_BYTE *)v7 + 32) = *((_BYTE *)v8 + 32);
    }
    else
    {
      v15 = v8[2];
      v16 = v8[3];
      sub_3D464(v15, v16, v14);
      v7[2] = v15;
      v7[3] = v16;
      *((_BYTE *)v7 + 32) = v14;
    }
    *(_OWORD *)(v7 + 5) = *(_OWORD *)(v8 + 5);
    v17 = (id *)(v8 + 7);
    v18 = *((unsigned __int8 *)v8 + 64);
    if (v18 == 255)
    {
      v7[7] = *v17;
      *((_BYTE *)v7 + 64) = *((_BYTE *)v8 + 64);
    }
    else
    {
      v19 = *v17;
      sub_3D47C(*v17, *((_BYTE *)v8 + 64));
      v7[7] = v19;
      *((_BYTE *)v7 + 64) = v18;
    }
    v20 = (id *)(v8 + 9);
    v21 = *((unsigned __int8 *)v8 + 80);
    if (v21 == 255)
    {
      v7[9] = *v20;
      *((_BYTE *)v7 + 80) = *((_BYTE *)v8 + 80);
    }
    else
    {
      v22 = *v20;
      sub_3D47C(*v20, *((_BYTE *)v8 + 80));
      v7[9] = v22;
      *((_BYTE *)v7 + 80) = v21;
    }
    v23 = (id *)(v8 + 11);
    v24 = *((unsigned __int8 *)v8 + 96);
    if (v24 == 255)
    {
      v7[11] = *v23;
      *((_BYTE *)v7 + 96) = *((_BYTE *)v8 + 96);
    }
    else
    {
      v25 = *v23;
      sub_3D47C(*v23, *((_BYTE *)v8 + 96));
      v7[11] = v25;
      *((_BYTE *)v7 + 96) = v24;
    }
    v26 = (id *)(v8 + 13);
    v27 = *((unsigned __int8 *)v8 + 112);
    if (v27 == 255)
    {
      v7[13] = *v26;
      *((_BYTE *)v7 + 112) = *((_BYTE *)v8 + 112);
    }
    else
    {
      v28 = *v26;
      sub_3D47C(*v26, *((_BYTE *)v8 + 112));
      v7[13] = v28;
      *((_BYTE *)v7 + 112) = v27;
    }
    v29 = (id *)(v8 + 15);
    v30 = *((unsigned __int8 *)v8 + 128);
    if (v30 == 255)
    {
      v7[15] = *v29;
      *((_BYTE *)v7 + 128) = *((_BYTE *)v8 + 128);
    }
    else
    {
      v31 = *v29;
      sub_3D47C(*v29, *((_BYTE *)v8 + 128));
      v7[15] = v31;
      *((_BYTE *)v7 + 128) = v30;
    }
    *((_BYTE *)v7 + 129) = *((_BYTE *)v8 + 129);
    v32 = v9[11];
    v33 = (char *)v7 + v32;
    v34 = (char *)v8 + v32;
    v35 = type metadata accessor for ArtworkCrop(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(v33, v34, v35);
    v36 = v9[12];
    v37 = (_QWORD *)((char *)v7 + v36);
    v38 = (_QWORD *)((char *)v8 + v36);
    v39 = v38[1];
    *v37 = *v38;
    v37[1] = v39;
    *((_BYTE *)v7 + v9[13]) = *((_BYTE *)v8 + v9[13]);
    *((_BYTE *)v7 + v9[14]) = *((_BYTE *)v8 + v9[14]);
    *((_BYTE *)v7 + v9[15]) = *((_BYTE *)v8 + v9[15]);
    v40 = v9[16];
    v41 = (_QWORD *)((char *)v7 + v40);
    v42 = (_QWORD *)((char *)v8 + v40);
    v43 = v42[1];
    *v41 = *v42;
    v41[1] = v43;
    v44 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v10 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v44(v7, 0, 1, v9);
  }
  v45 = a3[8];
  v46 = a3[9];
  v47 = (_QWORD *)(a1 + v45);
  v48 = (_QWORD *)(a2 + v45);
  v49 = v48[1];
  *v47 = *v48;
  v47[1] = v49;
  v50 = (_QWORD *)(a1 + v46);
  v51 = (_QWORD *)(a2 + v46);
  v52 = v51[1];
  *v50 = *v51;
  v50[1] = v52;
  v53 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  v54 = (_QWORD *)(a1 + v53);
  v55 = (_QWORD *)(a2 + v53);
  v56 = v55[1];
  *v54 = *v55;
  v54[1] = v56;
  v57 = a3[12];
  v58 = a3[13];
  v59 = (_QWORD *)(a1 + v57);
  v60 = (_QWORD *)(a2 + v57);
  v61 = v60[1];
  *v59 = *v60;
  v59[1] = v61;
  __dst = (void *)(a1 + v58);
  v85 = a3;
  v62 = (const void *)(a2 + v58);
  v63 = type metadata accessor for URL(0);
  v64 = *(_QWORD *)(v63 - 8);
  v65 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v64 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v65(v62, 1, v63))
  {
    v66 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
    memcpy(__dst, v62, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v64 + 16))(__dst, v62, v63);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v64 + 56))(__dst, 0, 1, v63);
  }
  v67 = v85[14];
  v68 = v85[15];
  v69 = (_QWORD *)(a1 + v67);
  v70 = (_QWORD *)(a2 + v67);
  v71 = v70[1];
  *v69 = *v70;
  v69[1] = v71;
  v72 = (_QWORD *)(a1 + v68);
  v73 = (_QWORD *)(a2 + v68);
  v74 = v73[1];
  *v72 = *v73;
  v72[1] = v74;
  v75 = v85[16];
  v76 = (void *)(a1 + v75);
  v77 = (const void *)(a2 + v75);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v65(v77, 1, v63))
  {
    v78 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
    memcpy(v76, v77, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v64 + 16))(v76, v77, v63);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v64 + 56))(v76, 0, 1, v63);
  }
  v79 = v85[17];
  v80 = (void *)(a1 + v79);
  v81 = (const void *)(a2 + v79);
  if (v65((const void *)(a2 + v79), 1, v63))
  {
    v82 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
    memcpy(v80, v81, *(_QWORD *)(*(_QWORD *)(v82 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v64 + 16))(v80, v81, v63);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v64 + 56))(v80, 0, 1, v63);
  }
  *(_BYTE *)(a1 + v85[18]) = *(_BYTE *)(a2 + v85[18]);
  return a1;
}

uint64_t assignWithCopy for ShowOffer(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, int *);
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  __int128 *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 v25;
  __int128 v26;
  id *v27;
  int v28;
  id v29;
  id v30;
  id *v31;
  int v32;
  id v33;
  id v34;
  id *v35;
  int v36;
  id v37;
  id v38;
  id *v39;
  int v40;
  id v41;
  id v42;
  id *v43;
  int v44;
  id v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  void (*v57)(uint64_t, _QWORD, uint64_t, int *);
  uint64_t v58;
  uint64_t v59;
  char v60;
  __int128 v61;
  id *v62;
  id *v63;
  int v64;
  id v65;
  void *v66;
  char v67;
  id v68;
  char v69;
  id v70;
  id *v71;
  id *v72;
  int v73;
  id v74;
  void *v75;
  char v76;
  id v77;
  char v78;
  id v79;
  id *v80;
  id *v81;
  int v82;
  id v83;
  void *v84;
  char v85;
  id v86;
  char v87;
  id v88;
  id *v89;
  id *v90;
  int v91;
  id v92;
  void *v93;
  char v94;
  id v95;
  char v96;
  id v97;
  id *v98;
  id *v99;
  int v100;
  id v101;
  void *v102;
  char v103;
  id v104;
  char v105;
  id v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  _QWORD *v113;
  uint64_t v114;
  _QWORD *v115;
  _QWORD *v116;
  uint64_t v117;
  _QWORD *v118;
  _QWORD *v119;
  uint64_t v120;
  _QWORD *v121;
  _QWORD *v122;
  uint64_t v123;
  _QWORD *v124;
  _QWORD *v125;
  uint64_t v126;
  _QWORD *v127;
  _QWORD *v128;
  uint64_t v129;
  void *v130;
  void *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t (*v134)(void *, uint64_t, uint64_t);
  int v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  _QWORD *v140;
  uint64_t v141;
  _QWORD *v142;
  _QWORD *v143;
  uint64_t v144;
  void *v145;
  void *v146;
  int v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  void *v151;
  void *v152;
  int v153;
  int v154;
  uint64_t v155;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v6 = a3[7];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = (int *)type metadata accessor for ArtworkModel(0);
  v10 = *((_QWORD *)v9 - 1);
  v11 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      *(_QWORD *)v7 = *(_QWORD *)v8;
      *(_QWORD *)(v7 + 8) = *(_QWORD *)(v8 + 8);
      v14 = *(unsigned __int8 *)(v8 + 32);
      swift_bridgeObjectRetain();
      if (v14 == 255)
      {
        v26 = *(_OWORD *)(v8 + 16);
        *(_BYTE *)(v7 + 32) = *(_BYTE *)(v8 + 32);
        *(_OWORD *)(v7 + 16) = v26;
      }
      else
      {
        v15 = *(_QWORD *)(v8 + 16);
        v16 = *(_QWORD *)(v8 + 24);
        sub_3D464(v15, v16, v14);
        *(_QWORD *)(v7 + 16) = v15;
        *(_QWORD *)(v7 + 24) = v16;
        *(_BYTE *)(v7 + 32) = v14;
      }
      *(_QWORD *)(v7 + 40) = *(_QWORD *)(v8 + 40);
      *(_QWORD *)(v7 + 48) = *(_QWORD *)(v8 + 48);
      v27 = (id *)(v8 + 56);
      v28 = *(unsigned __int8 *)(v8 + 64);
      if (v28 == 255)
      {
        v30 = *v27;
        *(_BYTE *)(v7 + 64) = *(_BYTE *)(v8 + 64);
        *(_QWORD *)(v7 + 56) = v30;
      }
      else
      {
        v29 = *v27;
        sub_3D47C(*v27, *(_BYTE *)(v8 + 64));
        *(_QWORD *)(v7 + 56) = v29;
        *(_BYTE *)(v7 + 64) = v28;
      }
      v31 = (id *)(v8 + 72);
      v32 = *(unsigned __int8 *)(v8 + 80);
      if (v32 == 255)
      {
        v34 = *v31;
        *(_BYTE *)(v7 + 80) = *(_BYTE *)(v8 + 80);
        *(_QWORD *)(v7 + 72) = v34;
      }
      else
      {
        v33 = *v31;
        sub_3D47C(*v31, *(_BYTE *)(v8 + 80));
        *(_QWORD *)(v7 + 72) = v33;
        *(_BYTE *)(v7 + 80) = v32;
      }
      v35 = (id *)(v8 + 88);
      v36 = *(unsigned __int8 *)(v8 + 96);
      if (v36 == 255)
      {
        v38 = *v35;
        *(_BYTE *)(v7 + 96) = *(_BYTE *)(v8 + 96);
        *(_QWORD *)(v7 + 88) = v38;
      }
      else
      {
        v37 = *v35;
        sub_3D47C(*v35, *(_BYTE *)(v8 + 96));
        *(_QWORD *)(v7 + 88) = v37;
        *(_BYTE *)(v7 + 96) = v36;
      }
      v39 = (id *)(v8 + 104);
      v40 = *(unsigned __int8 *)(v8 + 112);
      if (v40 == 255)
      {
        v42 = *v39;
        *(_BYTE *)(v7 + 112) = *(_BYTE *)(v8 + 112);
        *(_QWORD *)(v7 + 104) = v42;
      }
      else
      {
        v41 = *v39;
        sub_3D47C(*v39, *(_BYTE *)(v8 + 112));
        *(_QWORD *)(v7 + 104) = v41;
        *(_BYTE *)(v7 + 112) = v40;
      }
      v43 = (id *)(v8 + 120);
      v44 = *(unsigned __int8 *)(v8 + 128);
      if (v44 == 255)
      {
        v46 = *v43;
        *(_BYTE *)(v7 + 128) = *(_BYTE *)(v8 + 128);
        *(_QWORD *)(v7 + 120) = v46;
      }
      else
      {
        v45 = *v43;
        sub_3D47C(*v43, *(_BYTE *)(v8 + 128));
        *(_QWORD *)(v7 + 120) = v45;
        *(_BYTE *)(v7 + 128) = v44;
      }
      *(_BYTE *)(v7 + 129) = *(_BYTE *)(v8 + 129);
      v47 = v9[11];
      v48 = v7 + v47;
      v49 = v8 + v47;
      v50 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 16))(v48, v49, v50);
      v51 = v9[12];
      v52 = (_QWORD *)(v7 + v51);
      v53 = (_QWORD *)(v8 + v51);
      *v52 = *v53;
      v52[1] = v53[1];
      *(_BYTE *)(v7 + v9[13]) = *(_BYTE *)(v8 + v9[13]);
      *(_BYTE *)(v7 + v9[14]) = *(_BYTE *)(v8 + v9[14]);
      *(_BYTE *)(v7 + v9[15]) = *(_BYTE *)(v8 + v9[15]);
      v54 = v9[16];
      v55 = (_QWORD *)(v7 + v54);
      v56 = (_QWORD *)(v8 + v54);
      *v55 = *v56;
      v55[1] = v56[1];
      v57 = *(void (**)(uint64_t, _QWORD, uint64_t, int *))(v10 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v57(v7, 0, 1, v9);
      goto LABEL_68;
    }
LABEL_7:
    v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
    memcpy((void *)v7, (const void *)v8, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_68;
  }
  if (v13)
  {
    sub_3E4A4(v7);
    goto LABEL_7;
  }
  *(_QWORD *)v7 = *(_QWORD *)v8;
  *(_QWORD *)(v7 + 8) = *(_QWORD *)(v8 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v18 = (__int128 *)(v7 + 16);
  v19 = (__int128 *)(v8 + 16);
  v20 = *(unsigned __int8 *)(v8 + 32);
  if (*(unsigned __int8 *)(v7 + 32) == 255)
  {
    if (v20 == 255)
    {
      v61 = *v19;
      *(_BYTE *)(v7 + 32) = *(_BYTE *)(v8 + 32);
      *v18 = v61;
    }
    else
    {
      v58 = *(_QWORD *)(v8 + 16);
      v59 = *(_QWORD *)(v8 + 24);
      sub_3D464(v58, v59, *(_BYTE *)(v8 + 32));
      *(_QWORD *)(v7 + 16) = v58;
      *(_QWORD *)(v7 + 24) = v59;
      *(_BYTE *)(v7 + 32) = v20;
    }
  }
  else if (v20 == 255)
  {
    sub_3E43C(v7 + 16);
    v60 = *(_BYTE *)(v8 + 32);
    *v18 = *v19;
    *(_BYTE *)(v7 + 32) = v60;
  }
  else
  {
    v21 = *(_QWORD *)(v8 + 16);
    v22 = *(_QWORD *)(v8 + 24);
    sub_3D464(v21, v22, *(_BYTE *)(v8 + 32));
    v23 = *(_QWORD *)(v7 + 16);
    v24 = *(_QWORD *)(v7 + 24);
    *(_QWORD *)(v7 + 16) = v21;
    *(_QWORD *)(v7 + 24) = v22;
    v25 = *(_BYTE *)(v7 + 32);
    *(_BYTE *)(v7 + 32) = v20;
    sub_3B5BC(v23, v24, v25);
  }
  *(_QWORD *)(v7 + 40) = *(_QWORD *)(v8 + 40);
  *(_QWORD *)(v7 + 48) = *(_QWORD *)(v8 + 48);
  v62 = (id *)(v7 + 56);
  v63 = (id *)(v8 + 56);
  v64 = *(unsigned __int8 *)(v8 + 64);
  if (*(unsigned __int8 *)(v7 + 64) == 255)
  {
    if (v64 == 255)
    {
      v70 = *v63;
      *(_BYTE *)(v7 + 64) = *(_BYTE *)(v8 + 64);
      *v62 = v70;
    }
    else
    {
      v68 = *v63;
      sub_3D47C(*v63, *(_BYTE *)(v8 + 64));
      *(_QWORD *)(v7 + 56) = v68;
      *(_BYTE *)(v7 + 64) = v64;
    }
  }
  else if (v64 == 255)
  {
    sub_3E470(v7 + 56);
    v69 = *(_BYTE *)(v8 + 64);
    *v62 = *v63;
    *(_BYTE *)(v7 + 64) = v69;
  }
  else
  {
    v65 = *v63;
    sub_3D47C(*v63, *(_BYTE *)(v8 + 64));
    v66 = *(void **)(v7 + 56);
    *(_QWORD *)(v7 + 56) = v65;
    v67 = *(_BYTE *)(v7 + 64);
    *(_BYTE *)(v7 + 64) = v64;
    sub_3D624(v66, v67);
  }
  v71 = (id *)(v7 + 72);
  v72 = (id *)(v8 + 72);
  v73 = *(unsigned __int8 *)(v8 + 80);
  if (*(unsigned __int8 *)(v7 + 80) == 255)
  {
    if (v73 == 255)
    {
      v79 = *v72;
      *(_BYTE *)(v7 + 80) = *(_BYTE *)(v8 + 80);
      *v71 = v79;
    }
    else
    {
      v77 = *v72;
      sub_3D47C(*v72, *(_BYTE *)(v8 + 80));
      *(_QWORD *)(v7 + 72) = v77;
      *(_BYTE *)(v7 + 80) = v73;
    }
  }
  else if (v73 == 255)
  {
    sub_3E470(v7 + 72);
    v78 = *(_BYTE *)(v8 + 80);
    *v71 = *v72;
    *(_BYTE *)(v7 + 80) = v78;
  }
  else
  {
    v74 = *v72;
    sub_3D47C(*v72, *(_BYTE *)(v8 + 80));
    v75 = *(void **)(v7 + 72);
    *(_QWORD *)(v7 + 72) = v74;
    v76 = *(_BYTE *)(v7 + 80);
    *(_BYTE *)(v7 + 80) = v73;
    sub_3D624(v75, v76);
  }
  v80 = (id *)(v7 + 88);
  v81 = (id *)(v8 + 88);
  v82 = *(unsigned __int8 *)(v8 + 96);
  if (*(unsigned __int8 *)(v7 + 96) == 255)
  {
    if (v82 == 255)
    {
      v88 = *v81;
      *(_BYTE *)(v7 + 96) = *(_BYTE *)(v8 + 96);
      *v80 = v88;
    }
    else
    {
      v86 = *v81;
      sub_3D47C(*v81, *(_BYTE *)(v8 + 96));
      *(_QWORD *)(v7 + 88) = v86;
      *(_BYTE *)(v7 + 96) = v82;
    }
  }
  else if (v82 == 255)
  {
    sub_3E470(v7 + 88);
    v87 = *(_BYTE *)(v8 + 96);
    *v80 = *v81;
    *(_BYTE *)(v7 + 96) = v87;
  }
  else
  {
    v83 = *v81;
    sub_3D47C(*v81, *(_BYTE *)(v8 + 96));
    v84 = *(void **)(v7 + 88);
    *(_QWORD *)(v7 + 88) = v83;
    v85 = *(_BYTE *)(v7 + 96);
    *(_BYTE *)(v7 + 96) = v82;
    sub_3D624(v84, v85);
  }
  v89 = (id *)(v7 + 104);
  v90 = (id *)(v8 + 104);
  v91 = *(unsigned __int8 *)(v8 + 112);
  if (*(unsigned __int8 *)(v7 + 112) == 255)
  {
    if (v91 == 255)
    {
      v97 = *v90;
      *(_BYTE *)(v7 + 112) = *(_BYTE *)(v8 + 112);
      *v89 = v97;
    }
    else
    {
      v95 = *v90;
      sub_3D47C(*v90, *(_BYTE *)(v8 + 112));
      *(_QWORD *)(v7 + 104) = v95;
      *(_BYTE *)(v7 + 112) = v91;
    }
  }
  else if (v91 == 255)
  {
    sub_3E470(v7 + 104);
    v96 = *(_BYTE *)(v8 + 112);
    *v89 = *v90;
    *(_BYTE *)(v7 + 112) = v96;
  }
  else
  {
    v92 = *v90;
    sub_3D47C(*v90, *(_BYTE *)(v8 + 112));
    v93 = *(void **)(v7 + 104);
    *(_QWORD *)(v7 + 104) = v92;
    v94 = *(_BYTE *)(v7 + 112);
    *(_BYTE *)(v7 + 112) = v91;
    sub_3D624(v93, v94);
  }
  v98 = (id *)(v7 + 120);
  v99 = (id *)(v8 + 120);
  v100 = *(unsigned __int8 *)(v8 + 128);
  if (*(unsigned __int8 *)(v7 + 128) == 255)
  {
    if (v100 == 255)
    {
      v106 = *v99;
      *(_BYTE *)(v7 + 128) = *(_BYTE *)(v8 + 128);
      *v98 = v106;
    }
    else
    {
      v104 = *v99;
      sub_3D47C(*v99, *(_BYTE *)(v8 + 128));
      *(_QWORD *)(v7 + 120) = v104;
      *(_BYTE *)(v7 + 128) = v100;
    }
  }
  else if (v100 == 255)
  {
    sub_3E470(v7 + 120);
    v105 = *(_BYTE *)(v8 + 128);
    *v98 = *v99;
    *(_BYTE *)(v7 + 128) = v105;
  }
  else
  {
    v101 = *v99;
    sub_3D47C(*v99, *(_BYTE *)(v8 + 128));
    v102 = *(void **)(v7 + 120);
    *(_QWORD *)(v7 + 120) = v101;
    v103 = *(_BYTE *)(v7 + 128);
    *(_BYTE *)(v7 + 128) = v100;
    sub_3D624(v102, v103);
  }
  *(_BYTE *)(v7 + 129) = *(_BYTE *)(v8 + 129);
  v107 = v9[11];
  v108 = v7 + v107;
  v109 = v8 + v107;
  v110 = type metadata accessor for ArtworkCrop(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v110 - 8) + 24))(v108, v109, v110);
  v111 = v9[12];
  v112 = (_QWORD *)(v7 + v111);
  v113 = (_QWORD *)(v8 + v111);
  *v112 = *v113;
  v112[1] = v113[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(v7 + v9[13]) = *(_BYTE *)(v8 + v9[13]);
  *(_BYTE *)(v7 + v9[14]) = *(_BYTE *)(v8 + v9[14]);
  *(_BYTE *)(v7 + v9[15]) = *(_BYTE *)(v8 + v9[15]);
  v114 = v9[16];
  v115 = (_QWORD *)(v7 + v114);
  v116 = (_QWORD *)(v8 + v114);
  *v115 = *v116;
  v115[1] = v116[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_68:
  v117 = a3[8];
  v118 = (_QWORD *)(a1 + v117);
  v119 = (_QWORD *)(a2 + v117);
  *v118 = *v119;
  v118[1] = v119[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v120 = a3[9];
  v121 = (_QWORD *)(a1 + v120);
  v122 = (_QWORD *)(a2 + v120);
  *v121 = *v122;
  v121[1] = v122[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  v123 = a3[11];
  v124 = (_QWORD *)(a1 + v123);
  v125 = (_QWORD *)(a2 + v123);
  *v124 = *v125;
  v124[1] = v125[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v126 = a3[12];
  v127 = (_QWORD *)(a1 + v126);
  v128 = (_QWORD *)(a2 + v126);
  *v127 = *v128;
  v127[1] = v128[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v129 = a3[13];
  v130 = (void *)(a1 + v129);
  v131 = (void *)(a2 + v129);
  v132 = type metadata accessor for URL(0);
  v133 = *(_QWORD *)(v132 - 8);
  v134 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v133 + 48);
  v135 = v134(v130, 1, v132);
  v136 = v134(v131, 1, v132);
  if (v135)
  {
    if (!v136)
    {
      (*(void (**)(void *, void *, uint64_t))(v133 + 16))(v130, v131, v132);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v133 + 56))(v130, 0, 1, v132);
      goto LABEL_74;
    }
    goto LABEL_73;
  }
  if (v136)
  {
    (*(void (**)(void *, uint64_t))(v133 + 8))(v130, v132);
LABEL_73:
    v137 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
    memcpy(v130, v131, *(_QWORD *)(*(_QWORD *)(v137 - 8) + 64));
    goto LABEL_74;
  }
  (*(void (**)(void *, void *, uint64_t))(v133 + 24))(v130, v131, v132);
LABEL_74:
  v138 = a3[14];
  v139 = (_QWORD *)(a1 + v138);
  v140 = (_QWORD *)(a2 + v138);
  *v139 = *v140;
  v139[1] = v140[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v141 = a3[15];
  v142 = (_QWORD *)(a1 + v141);
  v143 = (_QWORD *)(a2 + v141);
  *v142 = *v143;
  v142[1] = v143[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v144 = a3[16];
  v145 = (void *)(a1 + v144);
  v146 = (void *)(a2 + v144);
  v147 = v134((void *)(a1 + v144), 1, v132);
  v148 = v134(v146, 1, v132);
  if (v147)
  {
    if (!v148)
    {
      (*(void (**)(void *, void *, uint64_t))(v133 + 16))(v145, v146, v132);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v133 + 56))(v145, 0, 1, v132);
      goto LABEL_80;
    }
    goto LABEL_79;
  }
  if (v148)
  {
    (*(void (**)(void *, uint64_t))(v133 + 8))(v145, v132);
LABEL_79:
    v149 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
    memcpy(v145, v146, *(_QWORD *)(*(_QWORD *)(v149 - 8) + 64));
    goto LABEL_80;
  }
  (*(void (**)(void *, void *, uint64_t))(v133 + 24))(v145, v146, v132);
LABEL_80:
  v150 = a3[17];
  v151 = (void *)(a1 + v150);
  v152 = (void *)(a2 + v150);
  v153 = v134((void *)(a1 + v150), 1, v132);
  v154 = v134(v152, 1, v132);
  if (!v153)
  {
    if (!v154)
    {
      (*(void (**)(void *, void *, uint64_t))(v133 + 24))(v151, v152, v132);
      goto LABEL_86;
    }
    (*(void (**)(void *, uint64_t))(v133 + 8))(v151, v132);
    goto LABEL_85;
  }
  if (v154)
  {
LABEL_85:
    v155 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
    memcpy(v151, v152, *(_QWORD *)(*(_QWORD *)(v155 - 8) + 64));
    goto LABEL_86;
  }
  (*(void (**)(void *, void *, uint64_t))(v133 + 16))(v151, v152, v132);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v133 + 56))(v151, 0, 1, v132);
LABEL_86:
  *(_BYTE *)(a1 + a3[18]) = *(_BYTE *)(a2 + a3[18]);
  return a1;
}

uint64_t initializeWithTake for ShowOffer(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int (*v24)(const void *, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  const void *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  const void *v33;
  uint64_t v34;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v6 = a3[7];
  v7 = (_OWORD *)(a1 + v6);
  v8 = (_OWORD *)(a2 + v6);
  v9 = (int *)type metadata accessor for ArtworkModel(0);
  v10 = *((_QWORD *)v9 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v10 + 48))(v8, 1, v9))
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    v12 = v8[1];
    *v7 = *v8;
    v7[1] = v12;
    *((_BYTE *)v7 + 32) = *((_BYTE *)v8 + 32);
    *(_OWORD *)((char *)v7 + 40) = *(_OWORD *)((char *)v8 + 40);
    *((_QWORD *)v7 + 7) = *((_QWORD *)v8 + 7);
    *((_BYTE *)v7 + 64) = *((_BYTE *)v8 + 64);
    *(_OWORD *)((char *)v7 + 113) = *(_OWORD *)((char *)v8 + 113);
    *(_OWORD *)((char *)v7 + 104) = *(_OWORD *)((char *)v8 + 104);
    *(_OWORD *)((char *)v7 + 88) = *(_OWORD *)((char *)v8 + 88);
    *(_OWORD *)((char *)v7 + 72) = *(_OWORD *)((char *)v8 + 72);
    *((_BYTE *)v7 + 129) = *((_BYTE *)v8 + 129);
    v13 = v9[11];
    v14 = (char *)v7 + v13;
    v15 = (char *)v8 + v13;
    v16 = type metadata accessor for ArtworkCrop(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
    *(_OWORD *)((char *)v7 + v9[12]) = *(_OWORD *)((char *)v8 + v9[12]);
    *((_BYTE *)v7 + v9[13]) = *((_BYTE *)v8 + v9[13]);
    *((_BYTE *)v7 + v9[14]) = *((_BYTE *)v8 + v9[14]);
    *((_BYTE *)v7 + v9[15]) = *((_BYTE *)v8 + v9[15]);
    *(_OWORD *)((char *)v7 + v9[16]) = *(_OWORD *)((char *)v8 + v9[16]);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v10 + 56))(v7, 0, 1, v9);
  }
  v17 = a3[9];
  *(_OWORD *)(a1 + a3[8]) = *(_OWORD *)(a2 + a3[8]);
  *(_OWORD *)(a1 + v17) = *(_OWORD *)(a2 + v17);
  v18 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_OWORD *)(a1 + v18) = *(_OWORD *)(a2 + v18);
  v19 = a3[13];
  *(_OWORD *)(a1 + a3[12]) = *(_OWORD *)(a2 + a3[12]);
  v20 = (void *)(a1 + v19);
  v21 = (const void *)(a2 + v19);
  v22 = type metadata accessor for URL(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v23 + 48);
  if (v24(v21, 1, v22))
  {
    v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v23 + 32))(v20, v21, v22);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  }
  v26 = a3[15];
  *(_OWORD *)(a1 + a3[14]) = *(_OWORD *)(a2 + a3[14]);
  *(_OWORD *)(a1 + v26) = *(_OWORD *)(a2 + v26);
  v27 = a3[16];
  v28 = (void *)(a1 + v27);
  v29 = (const void *)(a2 + v27);
  if (v24((const void *)(a2 + v27), 1, v22))
  {
    v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v23 + 32))(v28, v29, v22);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v28, 0, 1, v22);
  }
  v31 = a3[17];
  v32 = (void *)(a1 + v31);
  v33 = (const void *)(a2 + v31);
  if (v24((const void *)(a2 + v31), 1, v22))
  {
    v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v23 + 32))(v32, v33, v22);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v32, 0, 1, v22);
  }
  *(_BYTE *)(a1 + a3[18]) = *(_BYTE *)(a2 + a3[18]);
  return a1;
}

uint64_t assignWithTake for ShowOffer(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, int *);
  int v12;
  int v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(void *, uint64_t, uint64_t);
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  void *v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  void *v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v72;
  _OWORD *v73;
  int v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  int v79;
  int v80;
  void *v81;
  _QWORD *v82;
  int v83;
  int v84;
  void *v85;
  _QWORD *v86;
  int v87;
  int v88;
  void *v89;
  _QWORD *v90;
  int v91;
  int v92;
  void *v93;
  _QWORD *v94;
  int v95;
  int v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v6 = a3[7];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = (int *)type metadata accessor for ArtworkModel(0);
  v10 = *((_QWORD *)v9 - 1);
  v11 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      v14 = *(_OWORD *)(v8 + 16);
      *(_OWORD *)v7 = *(_OWORD *)v8;
      *(_OWORD *)(v7 + 16) = v14;
      *(_BYTE *)(v7 + 32) = *(_BYTE *)(v8 + 32);
      *(_OWORD *)(v7 + 40) = *(_OWORD *)(v8 + 40);
      *(_QWORD *)(v7 + 56) = *(_QWORD *)(v8 + 56);
      *(_BYTE *)(v7 + 64) = *(_BYTE *)(v8 + 64);
      *(_OWORD *)(v7 + 113) = *(_OWORD *)(v8 + 113);
      *(_OWORD *)(v7 + 104) = *(_OWORD *)(v8 + 104);
      *(_OWORD *)(v7 + 88) = *(_OWORD *)(v8 + 88);
      *(_OWORD *)(v7 + 72) = *(_OWORD *)(v8 + 72);
      *(_BYTE *)(v7 + 129) = *(_BYTE *)(v8 + 129);
      v15 = v9[11];
      v16 = v7 + v15;
      v17 = v8 + v15;
      v18 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
      *(_OWORD *)(v7 + v9[12]) = *(_OWORD *)(v8 + v9[12]);
      *(_BYTE *)(v7 + v9[13]) = *(_BYTE *)(v8 + v9[13]);
      *(_BYTE *)(v7 + v9[14]) = *(_BYTE *)(v8 + v9[14]);
      *(_BYTE *)(v7 + v9[15]) = *(_BYTE *)(v8 + v9[15]);
      *(_OWORD *)(v7 + v9[16]) = *(_OWORD *)(v8 + v9[16]);
      (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    sub_3E4A4(v7);
LABEL_6:
    v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
    memcpy((void *)v7, (const void *)v8, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  v72 = *(_QWORD *)(v8 + 8);
  *(_QWORD *)v7 = *(_QWORD *)v8;
  *(_QWORD *)(v7 + 8) = v72;
  swift_bridgeObjectRelease();
  v73 = (_OWORD *)(v8 + 16);
  v74 = *(unsigned __int8 *)(v7 + 32);
  if (v74 != 255)
  {
    v75 = *(unsigned __int8 *)(v8 + 32);
    if (v75 != 255)
    {
      v76 = *(_QWORD *)(v7 + 16);
      v77 = *(_QWORD *)(v7 + 24);
      *(_OWORD *)(v7 + 16) = *v73;
      *(_BYTE *)(v7 + 32) = v75;
      sub_3B5BC(v76, v77, v74);
      goto LABEL_34;
    }
    sub_3E43C(v7 + 16);
  }
  *(_OWORD *)(v7 + 16) = *v73;
  *(_BYTE *)(v7 + 32) = *(_BYTE *)(v8 + 32);
LABEL_34:
  *(_OWORD *)(v7 + 40) = *(_OWORD *)(v8 + 40);
  v78 = (_QWORD *)(v8 + 56);
  v79 = *(unsigned __int8 *)(v7 + 64);
  if (v79 != 255)
  {
    v80 = *(unsigned __int8 *)(v8 + 64);
    if (v80 != 255)
    {
      v81 = *(void **)(v7 + 56);
      *(_QWORD *)(v7 + 56) = *v78;
      *(_BYTE *)(v7 + 64) = v80;
      sub_3D624(v81, v79);
      goto LABEL_39;
    }
    sub_3E470(v7 + 56);
  }
  *(_QWORD *)(v7 + 56) = *v78;
  *(_BYTE *)(v7 + 64) = *(_BYTE *)(v8 + 64);
LABEL_39:
  v82 = (_QWORD *)(v8 + 72);
  v83 = *(unsigned __int8 *)(v7 + 80);
  if (v83 != 255)
  {
    v84 = *(unsigned __int8 *)(v8 + 80);
    if (v84 != 255)
    {
      v85 = *(void **)(v7 + 72);
      *(_QWORD *)(v7 + 72) = *v82;
      *(_BYTE *)(v7 + 80) = v84;
      sub_3D624(v85, v83);
      goto LABEL_44;
    }
    sub_3E470(v7 + 72);
  }
  *(_QWORD *)(v7 + 72) = *v82;
  *(_BYTE *)(v7 + 80) = *(_BYTE *)(v8 + 80);
LABEL_44:
  v86 = (_QWORD *)(v8 + 88);
  v87 = *(unsigned __int8 *)(v7 + 96);
  if (v87 != 255)
  {
    v88 = *(unsigned __int8 *)(v8 + 96);
    if (v88 != 255)
    {
      v89 = *(void **)(v7 + 88);
      *(_QWORD *)(v7 + 88) = *v86;
      *(_BYTE *)(v7 + 96) = v88;
      sub_3D624(v89, v87);
      goto LABEL_49;
    }
    sub_3E470(v7 + 88);
  }
  *(_QWORD *)(v7 + 88) = *v86;
  *(_BYTE *)(v7 + 96) = *(_BYTE *)(v8 + 96);
LABEL_49:
  v90 = (_QWORD *)(v8 + 104);
  v91 = *(unsigned __int8 *)(v7 + 112);
  if (v91 != 255)
  {
    v92 = *(unsigned __int8 *)(v8 + 112);
    if (v92 != 255)
    {
      v93 = *(void **)(v7 + 104);
      *(_QWORD *)(v7 + 104) = *v90;
      *(_BYTE *)(v7 + 112) = v92;
      sub_3D624(v93, v91);
      goto LABEL_54;
    }
    sub_3E470(v7 + 104);
  }
  *(_QWORD *)(v7 + 104) = *v90;
  *(_BYTE *)(v7 + 112) = *(_BYTE *)(v8 + 112);
LABEL_54:
  v94 = (_QWORD *)(v8 + 120);
  v95 = *(unsigned __int8 *)(v7 + 128);
  if (v95 == 255)
  {
LABEL_58:
    *(_QWORD *)(v7 + 120) = *v94;
    *(_BYTE *)(v7 + 128) = *(_BYTE *)(v8 + 128);
    goto LABEL_59;
  }
  v96 = *(unsigned __int8 *)(v8 + 128);
  if (v96 == 255)
  {
    sub_3E470(v7 + 120);
    goto LABEL_58;
  }
  v97 = *(void **)(v7 + 120);
  *(_QWORD *)(v7 + 120) = *v94;
  *(_BYTE *)(v7 + 128) = v96;
  sub_3D624(v97, v95);
LABEL_59:
  *(_BYTE *)(v7 + 129) = *(_BYTE *)(v8 + 129);
  v98 = v9[11];
  v99 = v7 + v98;
  v100 = v8 + v98;
  v101 = type metadata accessor for ArtworkCrop(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v101 - 8) + 40))(v99, v100, v101);
  v102 = v9[12];
  v103 = (_QWORD *)(v7 + v102);
  v104 = (uint64_t *)(v8 + v102);
  v106 = *v104;
  v105 = v104[1];
  *v103 = v106;
  v103[1] = v105;
  swift_bridgeObjectRelease();
  *(_BYTE *)(v7 + v9[13]) = *(_BYTE *)(v8 + v9[13]);
  *(_BYTE *)(v7 + v9[14]) = *(_BYTE *)(v8 + v9[14]);
  *(_BYTE *)(v7 + v9[15]) = *(_BYTE *)(v8 + v9[15]);
  v107 = v9[16];
  v108 = (_QWORD *)(v7 + v107);
  v109 = (uint64_t *)(v8 + v107);
  v111 = *v109;
  v110 = v109[1];
  *v108 = v111;
  v108[1] = v110;
  swift_bridgeObjectRelease();
LABEL_7:
  v20 = a3[8];
  v21 = (_QWORD *)(a1 + v20);
  v22 = (uint64_t *)(a2 + v20);
  v24 = *v22;
  v23 = v22[1];
  *v21 = v24;
  v21[1] = v23;
  swift_bridgeObjectRelease();
  v25 = a3[9];
  v26 = (_QWORD *)(a1 + v25);
  v27 = (uint64_t *)(a2 + v25);
  v29 = *v27;
  v28 = v27[1];
  *v26 = v29;
  v26[1] = v28;
  swift_bridgeObjectRelease();
  v30 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  v31 = (_QWORD *)(a1 + v30);
  v32 = (uint64_t *)(a2 + v30);
  v34 = *v32;
  v33 = v32[1];
  *v31 = v34;
  v31[1] = v33;
  swift_bridgeObjectRelease();
  v35 = a3[12];
  v36 = (_QWORD *)(a1 + v35);
  v37 = (uint64_t *)(a2 + v35);
  v39 = *v37;
  v38 = v37[1];
  *v36 = v39;
  v36[1] = v38;
  swift_bridgeObjectRelease();
  v40 = a3[13];
  v41 = (void *)(a1 + v40);
  v42 = (void *)(a2 + v40);
  v43 = type metadata accessor for URL(0);
  v44 = *(_QWORD *)(v43 - 8);
  v45 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v44 + 48);
  v46 = v45(v41, 1, v43);
  v47 = v45(v42, 1, v43);
  if (v46)
  {
    if (!v47)
    {
      (*(void (**)(void *, void *, uint64_t))(v44 + 32))(v41, v42, v43);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v41, 0, 1, v43);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v47)
  {
    (*(void (**)(void *, uint64_t))(v44 + 8))(v41, v43);
LABEL_12:
    v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
    memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v44 + 40))(v41, v42, v43);
LABEL_13:
  v49 = a3[14];
  v50 = (_QWORD *)(a1 + v49);
  v51 = (uint64_t *)(a2 + v49);
  v53 = *v51;
  v52 = v51[1];
  *v50 = v53;
  v50[1] = v52;
  swift_bridgeObjectRelease();
  v54 = a3[15];
  v55 = (_QWORD *)(a1 + v54);
  v56 = (uint64_t *)(a2 + v54);
  v58 = *v56;
  v57 = v56[1];
  *v55 = v58;
  v55[1] = v57;
  swift_bridgeObjectRelease();
  v59 = a3[16];
  v60 = (void *)(a1 + v59);
  v61 = (void *)(a2 + v59);
  v62 = v45((void *)(a1 + v59), 1, v43);
  v63 = v45(v61, 1, v43);
  if (v62)
  {
    if (!v63)
    {
      (*(void (**)(void *, void *, uint64_t))(v44 + 32))(v60, v61, v43);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v60, 0, 1, v43);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v63)
  {
    (*(void (**)(void *, uint64_t))(v44 + 8))(v60, v43);
LABEL_18:
    v64 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
    memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(void *, void *, uint64_t))(v44 + 40))(v60, v61, v43);
LABEL_19:
  v65 = a3[17];
  v66 = (void *)(a1 + v65);
  v67 = (void *)(a2 + v65);
  v68 = v45((void *)(a1 + v65), 1, v43);
  v69 = v45(v67, 1, v43);
  if (!v68)
  {
    if (!v69)
    {
      (*(void (**)(void *, void *, uint64_t))(v44 + 40))(v66, v67, v43);
      goto LABEL_25;
    }
    (*(void (**)(void *, uint64_t))(v44 + 8))(v66, v43);
    goto LABEL_24;
  }
  if (v69)
  {
LABEL_24:
    v70 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
    memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(void *, void *, uint64_t))(v44 + 32))(v66, v67, v43);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v66, 0, 1, v43);
LABEL_25:
  *(_BYTE *)(a1 + a3[18]) = *(_BYTE *)(a2 + a3[18]);
  return a1;
}

uint64_t getEnumTagSinglePayload for ShowOffer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_129BBC);
}

uint64_t sub_129BBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 28);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 52);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for ShowOffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_129C70);
}

uint64_t sub_129C70(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 28);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 52);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void sub_129D14(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[9];
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v6[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v6[1] = &unk_2F6B60;
  v6[2] = &unk_2F6B78;
  sub_3EE70(319, (unint64_t *)&qword_3B28A0, (uint64_t (*)(uint64_t))&type metadata accessor for ArtworkModel);
  if (v3 <= 0x3F)
  {
    v6[3] = *(_QWORD *)(v2 - 8) + 64;
    v6[4] = &unk_2F6B90;
    v6[5] = &unk_2F6B90;
    v6[6] = &unk_2F6BA8;
    v6[7] = &unk_2F6B90;
    v6[8] = &unk_2F6B90;
    sub_3EE70(319, (unint64_t *)&qword_3B1C30, (uint64_t (*)(uint64_t))&type metadata accessor for URL);
    if (v5 <= 0x3F)
    {
      v7 = *(_QWORD *)(v4 - 8) + 64;
      v8 = &unk_2F6B90;
      v9 = &unk_2F6B90;
      v10 = v7;
      v11 = v7;
      v12 = &unk_2F6BA8;
      swift_initStructMetadata(a1, 256, 15, v6, a1 + 16);
    }
  }
}

uint64_t ChannelOfferAction.buyParams.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit18ChannelOfferAction_buyParams);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit18ChannelOfferAction_buyParams + 8));
  return v1;
}

uint64_t ChannelOfferAction.channelAdamId.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit18ChannelOfferAction_channelAdamId);
}

uint64_t ChannelOfferAction.showAdamId.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit18ChannelOfferAction_showAdamId);
}

uint64_t ChannelOfferAction.completionHandlers.getter()
{
  uint64_t v0;
  _QWORD *v1;
  _BYTE v3[24];

  v1 = (_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit18ChannelOfferAction_completionHandlers);
  swift_beginAccess(v0 + OBJC_IVAR____TtC8ShelfKit18ChannelOfferAction_completionHandlers, v3, 0, 0);
  return swift_bridgeObjectRetain(*v1);
}

uint64_t ChannelOfferAction.completionHandlers.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC8ShelfKit18ChannelOfferAction_completionHandlers);
  swift_beginAccess(v3, v6, 1, 0);
  v4 = *v3;
  *v3 = a1;
  return swift_bridgeObjectRelease(v4);
}

uint64_t (*ChannelOfferAction.completionHandlers.modify(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC8ShelfKit18ChannelOfferAction_completionHandlers, a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t ChannelOfferAction.__allocating_init(deserializing:using:)(char *a1, uint64_t a2)
{
  uint64_t v2;

  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  return ChannelOfferAction.init(deserializing:using:)(a1, a2);
}

uint64_t ChannelOfferAction.init(deserializing:using:)(char *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  char *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t);
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v63;
  char *v64;
  char *v65;
  void (*v66)(char *, uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;

  v4 = v3;
  v5 = v2;
  v69 = a2;
  v67 = *(_QWORD *)v5;
  v68 = type metadata accessor for JSONContext(0);
  v71 = *(_QWORD *)(v68 - 8);
  __chkstk_darwin(v68);
  v65 = (char *)&v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for JSONObject(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v64 = (char *)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v63 - v12;
  __chkstk_darwin(v14);
  v16 = (char *)&v63 - v15;
  __chkstk_darwin(v17);
  v19 = (char *)&v63 - v18;
  v66 = (void (*)(char *, uint64_t))OBJC_IVAR____TtC8ShelfKit18ChannelOfferAction_completionHandlers;
  *(_QWORD *)(v5 + OBJC_IVAR____TtC8ShelfKit18ChannelOfferAction_completionHandlers) = _swiftEmptyArrayStorage;
  swift_retain();
  v70 = a1;
  v20 = JSONObject.subscript.getter(0x6D61726150797562, 0xE900000000000073);
  v21 = JSONObject.string.getter(v20);
  v23 = v22;
  v63 = v9;
  v24 = *(void (**)(char *, uint64_t))(v9 + 8);
  v24(v19, v8);
  if (!v23)
  {
    v35 = type metadata accessor for JSONError(0);
    v36 = sub_1E468();
    swift_allocError(v35, v36, 0, 0);
    v38 = v37;
    v39 = *(_QWORD *)v5;
    swift_release(v5);
    *v38 = 0x6D61726150797562;
    v38[1] = 0xE900000000000073;
    v38[2] = v39;
    v40 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v35 - 8) + 104))(v38, enum case for JSONError.missingProperty(_:), v35);
    swift_willThrow(v40);
    (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v69, v68);
    v24(v70, v8);
    swift_bridgeObjectRelease();
    swift_deallocPartialClassInstance(v5, v67, *(unsigned int *)(*(_QWORD *)v5 + 48), *(unsigned __int16 *)(*(_QWORD *)v5 + 52));
    return v5;
  }
  v66 = v24;
  v67 = v8;
  v25 = v69;
  v26 = v70;
  v27 = (uint64_t *)(v5 + OBJC_IVAR____TtC8ShelfKit18ChannelOfferAction_buyParams);
  *v27 = v21;
  v27[1] = v23;
  v28 = JSONObject.subscript.getter(0x416C656E6E616863, 0xED000064496D6164);
  v29 = JSONObject.string.getter(v28);
  v31 = v30;
  if (v30)
  {
    v32 = static AdamID.parse(_:)(v29, v30);
    if (v3)
    {
      v33 = swift_bridgeObjectRelease();
      v34 = static AdamID.empty.getter(v33);
      swift_errorRelease(v3);
      v4 = 0;
    }
    else
    {
      v34 = v32;
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    v34 = 0;
  }
  v66(v16, v67);
  v41 = v5 + OBJC_IVAR____TtC8ShelfKit18ChannelOfferAction_channelAdamId;
  *(_QWORD *)v41 = v34;
  *(_BYTE *)(v41 + 8) = v31 == 0;
  v42 = JSONObject.subscript.getter(0x6D616441776F6873, 0xEA00000000006449);
  v43 = JSONObject.string.getter(v42);
  v45 = v44;
  if (v44)
  {
    v46 = v4;
    v47 = v26;
    v48 = v25;
    v49 = static AdamID.parse(_:)(v43, v44);
    if (!v46)
    {
      v51 = v49;
      swift_bridgeObjectRelease();
      v52 = v68;
      v53 = v66;
      v69 = 0;
      goto LABEL_14;
    }
    v50 = swift_bridgeObjectRelease();
    v51 = static AdamID.empty.getter(v50);
    swift_errorRelease(v46);
    v69 = 0;
  }
  else
  {
    v69 = v4;
    v47 = v26;
    v48 = v25;
    v51 = 0;
  }
  v52 = v68;
  v53 = v66;
LABEL_14:
  v54 = v13;
  v55 = v67;
  v53(v54, v67);
  v56 = v5 + OBJC_IVAR____TtC8ShelfKit18ChannelOfferAction_showAdamId;
  *(_QWORD *)v56 = v51;
  *(_BYTE *)(v56 + 8) = v45 == 0;
  swift_release(v5);
  v57 = v64;
  (*(void (**)(char *, char *, uint64_t))(v63 + 16))(v64, v47, v55);
  v58 = v71;
  v59 = (uint64_t)v65;
  (*(void (**)(char *, uint64_t, uint64_t))(v71 + 16))(v65, v48, v52);
  v60 = v69;
  v61 = Action.init(deserializing:using:)(v57, v59);
  if (!v60)
    v5 = v61;
  (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v48, v52);
  v53(v47, v55);
  return v5;
}

void ChannelOfferAction.init(uniqueId:title:presentationStyle:actionMetrics:impressionMetrics:)()
{
  _swift_stdlib_reportUnimplementedInitializer("ShelfKit.ChannelOfferAction", 27, "init(uniqueId:title:presentationStyle:actionMetrics:impressionMetrics:)", 71, 0);
  __break(1u);
}

uint64_t sub_12A454()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit18ChannelOfferAction_buyParams + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit18ChannelOfferAction_completionHandlers));
}

uint64_t ChannelOfferAction.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics;
  v2 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_23B00(v0 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t ChannelOfferAction.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics;
  v2 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_23B00(v0 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t (*sub_12A5B0(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC8ShelfKit18ChannelOfferAction_completionHandlers, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t sub_12A5F4()
{
  return type metadata accessor for ChannelOfferAction(0);
}

uint64_t type metadata accessor for ChannelOfferAction(uint64_t a1)
{
  uint64_t result;

  result = qword_3BB6C0;
  if (!qword_3BB6C0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ChannelOfferAction);
  return result;
}

uint64_t sub_12A638(uint64_t a1)
{
  _QWORD v2[4];

  v2[0] = &unk_2F6C08;
  v2[1] = &unk_2F6C20;
  v2[2] = &unk_2F6C20;
  v2[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
  return swift_updateClassMetadata2(a1, 256, 4, v2, a1 + 160);
}

id TabMenu.Item.tabBarElement(asPartOf:interfaceMode:)(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v26[2];
  _QWORD *v27;
  _QWORD v28[3];
  uint64_t v29;
  uint64_t v30;

  v4 = type metadata accessor for TabMenu.Item(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AutomationSemantics(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(v2 + *(int *)(v4 + 28));
  if (v12 == 7)
  {
    v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BB7A8);
    BaseObjectGraph.inject<A>(_:)(v28, v20, v20);
    v21 = v29;
    v22 = v30;
    __swift_project_boxed_opaque_existential_1(v28, v29);
    v13 = (id)(*(uint64_t (**)(uint64_t, uint64_t))(v22 + 8))(v21, v22);
    __swift_destroy_boxed_opaque_existential_1(v28);
  }
  else if (v12 == 12)
  {
    v13 = objc_msgSend((id)objc_opt_self(_UITabElement), "_searchElement");
    v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BC390);
    v26[0] = (uint64_t)__swift_allocate_boxed_opaque_existential_2Tm(v28);
    v14 = 1;
    v15 = TabMenu.Group.items(for:)(1, 0);
    v16 = TabMenu.Group.items(for:)(1, 1);
    v27 = v15;
    sub_1E406C((uint64_t)v16);
    v17 = sub_12AE98((uint64_t)v27, &dword_C);
    swift_bridgeObjectRelease();
    if (v17[2])
    {
      v18 = v26[0];
      sub_963D4((uint64_t)v17 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)), v26[0]);
      v14 = 0;
      v19 = v18;
    }
    else
    {
      v19 = v26[0];
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(v19, v14, 1, v4);
    swift_bridgeObjectRelease();
    static AutomationSemantics.tabBar(tabName:)(v28);
    __swift_destroy_boxed_opaque_existential_1(v28);
    v24 = sub_327F8(0, (unint64_t *)&unk_3BC550, _UITabElement_ptr);
    UIAccessibilityIdentification.setAutomationSemantics(_:)(v11, v24);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  else
  {
    sub_963D4(v2, (uint64_t)v7);
    v23 = objc_allocWithZone((Class)type metadata accessor for TabElement(0));
    return sub_96010((uint64_t)v7, a2 & 1);
  }
  return v13;
}

uint64_t _UITab.tabMenuItem.getter@<X0>(uint64_t a1@<X8>)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v3 = type metadata accessor for TabElement(0);
  v4 = swift_dynamicCastClass(v1, v3);
  if (v4)
  {
    sub_963D4(v4 + OBJC_IVAR____TtC8ShelfKit10TabElement_tabItem, a1);
    v5 = type metadata accessor for TabMenu.Item(0);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(a1, 0, 1, v5);
  }
  v7 = objc_msgSend(v1, "_identifier");
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  v10 = v9;

  v11 = _s8ShelfKit13NavigationTabO11stringValueACSS_tcfC_0(v8, v10);
  if (v11 > 0x11)
    goto LABEL_12;
  if (((1 << v11) & 0x3F7FE) == 0)
  {
    if (v11 == 11)
    {
      v23 = type metadata accessor for TabMenu.Item(0);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(a1, 1, 1, v23);
    }
LABEL_12:
    sub_267A8(v11);
  }
  v12 = objc_msgSend(v1, "_identifier");
  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  v15 = v14;

  v16 = (int *)_s8ShelfKit13NavigationTabO11stringValueACSS_tcfC_0(v13, v15);
  v17 = TabMenu.Group.items(for:)(1, 0);
  v18 = TabMenu.Group.items(for:)(1, 1);
  sub_1E406C((uint64_t)v18);
  sub_26794((uint64_t)v16);
  v19 = sub_12AE98((uint64_t)v17, v16);
  sub_267A8((uint64_t)v16);
  swift_bridgeObjectRelease();
  v20 = v19[2];
  v21 = type metadata accessor for TabMenu.Item(0);
  v22 = *(_QWORD *)(v21 - 8);
  if (v20)
  {
    sub_963D4((uint64_t)v19 + ((*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80)), a1);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v22 + 56))(a1, 0, 1, v21);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 56))(a1, 1, 1, v21);
  }
  swift_bridgeObjectRelease();
  return sub_267A8((uint64_t)v16);
}

uint64_t _UITab.navigationTab.getter()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v1 = type metadata accessor for TabElement(0);
  v2 = swift_dynamicCastClass(v0, v1);
  if (v2)
  {
    v3 = v2 + OBJC_IVAR____TtC8ShelfKit10TabElement_tabItem;
    v4 = *(_QWORD *)(v3 + *(int *)(type metadata accessor for TabMenu.Item(0) + 28));
    sub_26794(v4);
    return v4;
  }
  else
  {
    v6 = objc_msgSend(v0, "_identifier");
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
    v9 = v8;

    return _s8ShelfKit13NavigationTabO11stringValueACSS_tcfC_0(v7, v9);
  }
}

uint64_t _UITab.tabElement(matching:)(unint64_t a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v30;
  uint64_t v31;
  id v32;
  uint64_t v34;

  v3 = objc_opt_self(_UITabElementGroup);
  v4 = swift_dynamicCastObjCClass(v1, v3);
  if (v4)
  {
    v5 = (void *)v4;
    v6 = v1;
    v7 = objc_msgSend(v5, "_children");
    v8 = sub_327F8(0, &qword_3BC3C0, _UITab_ptr);
    v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v7, v8);

    if ((unint64_t)v9 >> 62)
      goto LABEL_33;
    v10 = *(_QWORD *)((char *)&dword_10 + (v9 & 0xFFFFFFFFFFFFF8));
    while (v10)
    {
      v11 = 4;
      while (1)
      {
        v12 = (v9 & 0xC000000000000001) != 0
            ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v11 - 4)
            : *(id *)(v9 + 8 * v11);
        v13 = v12;
        v14 = v11 - 3;
        if (__OFADD__(v11 - 4, 1))
          break;
        v15 = _UITab.tabElement(matching:)(a1);

        if (v15)
        {

          swift_bridgeObjectRelease();
          return v15;
        }
        ++v11;
        if (v14 == v10)
          goto LABEL_11;
      }
      __break(1u);
LABEL_33:
      if (v9 < 0)
        v34 = v9;
      else
        v34 = v9 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
      v10 = _CocoaArrayWrapper.endIndex.getter(v34);
      swift_bridgeObjectRelease();
    }
LABEL_11:

    swift_bridgeObjectRelease();
    return 0;
  }
  if (a1 >= 0x12)
  {
    v24 = *(_QWORD *)(a1 + 16);
    v19 = *(_QWORD *)(a1 + 24);
    sub_26794(a1);
    sub_26794(a1);
    swift_bridgeObjectRetain();
    v25 = objc_msgSend(v1, "_identifier");
    v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
    v28 = v27;

    if (v24 == v26 && v19 == v28)
    {
      sub_267A8(a1);
      sub_267A8(a1);
LABEL_28:
      swift_bridgeObjectRelease_n(v19, 2);
      goto LABEL_29;
    }
    v30 = _stringCompareWithSmolCheck(_:_:expecting:)(v24, v19, v26, v28, 0);
    sub_267A8(a1);
    sub_267A8(a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v30 & 1) != 0)
      goto LABEL_29;
  }
  v16 = objc_msgSend(v1, "_identifier");
  v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
  v19 = v18;

  v20 = NavigationTab.stringValue.getter(a1);
  if (v17 == v20 && v19 == v21)
    goto LABEL_28;
  v23 = _stringCompareWithSmolCheck(_:_:expecting:)(v17, v19, v20, v21, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v23 & 1) == 0)
    return 0;
LABEL_29:
  v31 = objc_opt_self(_UITabElement);
  v15 = swift_dynamicCastObjCClass(v1, v31);
  if (v15)
    v32 = v1;
  return v15;
}

_QWORD *sub_12AE98(uint64_t a1, int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  int *v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD v32[2];
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;

  v6 = type metadata accessor for TabMenu.Item(0);
  __chkstk_darwin(v6);
  v36 = (uint64_t)v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)v32 - v10;
  result = _swiftEmptyArrayStorage;
  v37 = _swiftEmptyArrayStorage;
  v13 = *(_QWORD *)(a1 + 16);
  if (v13)
  {
    v32[1] = v2;
    v14 = *(_QWORD *)(v9 + 72);
    v35 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    v15 = a1 + v35;
    v33 = (unint64_t)a2 - 1;
    v16 = _swiftEmptyArrayStorage;
    v34 = v6;
    while (2)
    {
      sub_963D4(v15, (uint64_t)v11);
      v17 = *(_QWORD **)&v11[*(int *)(v6 + 28)];
      switch((unint64_t)v17)
      {
        case 1uLL:
          if (a2 != (int *)((char *)&dword_0 + 1))
            goto LABEL_5;
          goto LABEL_57;
        case 2uLL:
          if (a2 == (int *)((char *)&dword_0 + 2))
            goto LABEL_57;
          goto LABEL_5;
        case 3uLL:
          if (a2 == (int *)((char *)&dword_0 + 3))
            goto LABEL_57;
          goto LABEL_5;
        case 4uLL:
          if (a2 == &dword_4)
            goto LABEL_57;
          goto LABEL_5;
        case 5uLL:
          if (a2 == (int *)((char *)&dword_4 + 1))
            goto LABEL_57;
          goto LABEL_5;
        case 6uLL:
          if (a2 == (int *)((char *)&dword_4 + 2))
            goto LABEL_57;
          goto LABEL_5;
        case 7uLL:
          if (a2 == (int *)((char *)&dword_4 + 3))
            goto LABEL_57;
          goto LABEL_5;
        case 8uLL:
          if (a2 == &dword_8)
            goto LABEL_57;
          goto LABEL_5;
        case 9uLL:
          if (a2 == (int *)((char *)&dword_8 + 1))
            goto LABEL_57;
          goto LABEL_5;
        case 0xAuLL:
          if (a2 == (int *)((char *)&dword_8 + 2))
            goto LABEL_57;
          goto LABEL_5;
        case 0xBuLL:
          if (a2 == (int *)((char *)&dword_8 + 3))
            goto LABEL_57;
          goto LABEL_5;
        case 0xCuLL:
          if (a2 == &dword_C)
            goto LABEL_57;
          goto LABEL_5;
        case 0xDuLL:
          if (a2 == (int *)((char *)&dword_C + 1))
            goto LABEL_57;
          goto LABEL_5;
        case 0xEuLL:
          if (a2 == (int *)((char *)&dword_C + 2))
            goto LABEL_57;
          goto LABEL_5;
        case 0xFuLL:
          if (a2 == (int *)((char *)&dword_C + 3))
            goto LABEL_57;
          goto LABEL_5;
        case 0x10uLL:
          if (a2 == &dword_10)
            goto LABEL_57;
          goto LABEL_5;
        case 0x11uLL:
          if (a2 == (int *)((char *)&dword_10 + 1))
            goto LABEL_57;
          goto LABEL_5;
        default:
          if (v33 < 0x11)
            goto LABEL_5;
          if (v17)
          {
            if (!a2)
              goto LABEL_5;
            v18 = v17[2];
            v19 = v17[3];
            v20 = *((_QWORD *)a2 + 2);
            v21 = *((_QWORD *)a2 + 3);
            v22 = v18 == v20 && v19 == v21;
            if (!v22 && (_stringCompareWithSmolCheck(_:_:expecting:)(v18, v19, v20, v21, 0) & 1) == 0)
              goto LABEL_5;
            v23 = v17[4];
            v24 = v17[5];
            v25 = *((_QWORD *)a2 + 4);
            v26 = *((_QWORD *)a2 + 5);
            v27 = v23 == v25 && v24 == v26;
            if (!v27 && (_stringCompareWithSmolCheck(_:_:expecting:)(v23, v24, v25, v26, 0) & 1) == 0
              || *(_QWORD *)((char *)v17 + OBJC_IVAR____TtC8ShelfKit13StationDetail_episodeCount) != *(_QWORD *)((char *)a2 + OBJC_IVAR____TtC8ShelfKit13StationDetail_episodeCount)
              || *(_QWORD *)((char *)v17 + OBJC_IVAR____TtC8ShelfKit13StationDetail_unplayedCount) != *(_QWORD *)((char *)a2 + OBJC_IVAR____TtC8ShelfKit13StationDetail_unplayedCount))
            {
              goto LABEL_5;
            }
          }
          else if (a2)
          {
            sub_267A8(0);
LABEL_5:
            sub_96398((uint64_t)v11);
            goto LABEL_6;
          }
LABEL_57:
          v28 = v3;
          v29 = a2;
          sub_12B1D0((uint64_t)v11, v36);
          if ((swift_isUniquelyReferenced_nonNull_native(v16) & 1) == 0)
            sub_180924(0, v16[2] + 1, 1);
          v16 = v37;
          v31 = v37[2];
          v30 = v37[3];
          if (v31 >= v30 >> 1)
          {
            sub_180924(v30 > 1, v31 + 1, 1);
            v16 = v37;
          }
          v16[2] = v31 + 1;
          sub_12B1D0(v36, (uint64_t)v16 + v35 + v31 * v14);
          a2 = v29;
          v3 = v28;
          v6 = v34;
LABEL_6:
          v15 += v14;
          if (--v13)
            continue;
          result = v37;
          break;
      }
      break;
    }
  }
  return result;
}

uint64_t sub_12B1D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TabMenu.Item(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t ShareSheetAction.actionMetrics.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for ActionMetrics(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t ShareSheetAction.shareSheetContentSource.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for ShareSheetAction(0) + 20);
  return sub_12B290(v3, a1);
}

uint64_t type metadata accessor for ShareSheetAction(uint64_t a1)
{
  return sub_1F9D4(a1, qword_3BB808, (uint64_t)&nominal type descriptor for ShareSheetAction);
}

uint64_t sub_12B290(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ShareSheetContentSource(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for ShareSheetContentSource(uint64_t a1)
{
  return sub_1F9D4(a1, qword_3BB8B8, (uint64_t)&nominal type descriptor for ShareSheetContentSource);
}

uint64_t ShareSheetAction.referenceTime.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for ShareSheetAction(0) + 24));
}

uint64_t ShareSheetAction.playerTime.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for ShareSheetAction(0) + 28));
}

uint64_t ShareSheetAction.init(shareSheetContentSource:referenceTime:playerTime:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v12 = type metadata accessor for ActionMetrics(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (int *)type metadata accessor for ShareSheetAction(0);
  v17 = sub_12B290(a1, a6 + v16[5]);
  v18 = a6 + v16[6];
  *(_QWORD *)v18 = a2;
  *(_BYTE *)(v18 + 8) = a3 & 1;
  v19 = a6 + v16[7];
  *(_QWORD *)v19 = a4;
  *(_BYTE *)(v19 + 8) = a5 & 1;
  static ActionMetrics.notInstrumented.getter(v17);
  sub_12B42C(a1);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v13 + 32))(a6, v15, v12);
}

uint64_t sub_12B42C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ShareSheetContentSource(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_QWORD *initializeBufferWithCopyOfBuffer for ShareSheetAction(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v3;
  int v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char *v10;
  uint64_t v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  int *v22;
  unsigned int (*v23)(char *, uint64_t, int *);
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  id *v29;
  int v30;
  id v31;
  id *v32;
  int v33;
  id v34;
  id *v35;
  int v36;
  id v37;
  id *v38;
  int v39;
  id v40;
  id *v41;
  int v42;
  id v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  void (*v56)(char *, _QWORD, uint64_t, int *);
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int (*v77)(char *, uint64_t, uint64_t);
  unsigned int (*v78)(char *, uint64_t, uint64_t);
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  void (*v100)(char *, char *, uint64_t);
  uint64_t v101;
  _QWORD *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  _QWORD *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  id *v120;
  int v121;
  id v122;
  id *v123;
  int v124;
  id v125;
  id *v126;
  int v127;
  id v128;
  id *v129;
  int v130;
  id v131;
  id *v132;
  int v133;
  id v134;
  uint64_t v135;
  char *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  char *v145;
  uint64_t v146;
  void (*v147)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v148;
  _QWORD *v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  char *v154;
  uint64_t v155;
  char *v156;
  char *v157;
  uint64_t v158;
  char *v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  unsigned int (*v163)(char *, uint64_t, uint64_t);
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  char *v168;
  char *v169;
  char *v170;
  uint64_t v172;
  char *__dst;
  char *v174;
  unsigned int (*v175)(char *, uint64_t, int *);
  int *v176;
  int *v177;
  uint64_t v178;
  _QWORD *v179;
  int *v180;
  _QWORD *v181;
  _QWORD *v182;
  int *v183;

  v3 = a2;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = a3;
    v7 = type metadata accessor for ActionMetrics(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, v3, v7);
    v8 = v6[5];
    v9 = (_QWORD *)((char *)a1 + v8);
    v10 = (char *)v3 + v8;
    v11 = type metadata accessor for ShareSheetContentSource(0);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      v12 = *(void **)v10;
      *v9 = *(_QWORD *)v10;
      v13 = v12;
      v14 = 1;
    }
    else
    {
      v178 = v11;
      v181 = v3;
      *(_OWORD *)v9 = *(_OWORD *)v10;
      v9[2] = *((_QWORD *)v10 + 2);
      v177 = (int *)type metadata accessor for EpisodeOffer(0);
      v16 = v177[6];
      v179 = v9;
      v17 = (char *)v9 + v16;
      v174 = v10;
      v18 = &v10[v16];
      *(_OWORD *)v17 = *(_OWORD *)&v10[v16];
      *((_QWORD *)v17 + 2) = *(_QWORD *)&v10[v16 + 16];
      v17[24] = v10[v16 + 24];
      v183 = (int *)type metadata accessor for ShowOffer(0);
      v19 = v183[7];
      v20 = &v17[v19];
      v21 = &v18[v19];
      v22 = (int *)type metadata accessor for ArtworkModel(0);
      v172 = *((_QWORD *)v22 - 1);
      v23 = *(unsigned int (**)(char *, uint64_t, int *))(v172 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v175 = v23;
      v182 = a1;
      v180 = v6;
      v176 = v22;
      if (v23(v21, 1, v22))
      {
        v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
        memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
      }
      else
      {
        v25 = *((_QWORD *)v21 + 1);
        *(_QWORD *)v20 = *(_QWORD *)v21;
        *((_QWORD *)v20 + 1) = v25;
        v26 = v21[32];
        swift_bridgeObjectRetain();
        if (v26 == 255)
        {
          *((_OWORD *)v20 + 1) = *((_OWORD *)v21 + 1);
          v20[32] = v21[32];
        }
        else
        {
          v27 = *((_QWORD *)v21 + 2);
          v28 = *((_QWORD *)v21 + 3);
          sub_3D464(v27, v28, v26);
          *((_QWORD *)v20 + 2) = v27;
          *((_QWORD *)v20 + 3) = v28;
          v20[32] = v26;
        }
        *(_OWORD *)(v20 + 40) = *(_OWORD *)(v21 + 40);
        v29 = (id *)(v21 + 56);
        v30 = v21[64];
        if (v30 == 255)
        {
          *((_QWORD *)v20 + 7) = *v29;
          v20[64] = v21[64];
        }
        else
        {
          v31 = *v29;
          sub_3D47C(*v29, v21[64]);
          *((_QWORD *)v20 + 7) = v31;
          v20[64] = v30;
        }
        v32 = (id *)(v21 + 72);
        v33 = v21[80];
        if (v33 == 255)
        {
          *((_QWORD *)v20 + 9) = *v32;
          v20[80] = v21[80];
        }
        else
        {
          v34 = *v32;
          sub_3D47C(*v32, v21[80]);
          *((_QWORD *)v20 + 9) = v34;
          v20[80] = v33;
        }
        v35 = (id *)(v21 + 88);
        v36 = v21[96];
        if (v36 == 255)
        {
          *((_QWORD *)v20 + 11) = *v35;
          v20[96] = v21[96];
        }
        else
        {
          v37 = *v35;
          sub_3D47C(*v35, v21[96]);
          *((_QWORD *)v20 + 11) = v37;
          v20[96] = v36;
        }
        v38 = (id *)(v21 + 104);
        v39 = v21[112];
        if (v39 == 255)
        {
          *((_QWORD *)v20 + 13) = *v38;
          v20[112] = v21[112];
        }
        else
        {
          v40 = *v38;
          sub_3D47C(*v38, v21[112]);
          *((_QWORD *)v20 + 13) = v40;
          v20[112] = v39;
        }
        v41 = (id *)(v21 + 120);
        v42 = v21[128];
        if (v42 == 255)
        {
          *((_QWORD *)v20 + 15) = *v41;
          v20[128] = v21[128];
        }
        else
        {
          v43 = *v41;
          sub_3D47C(*v41, v21[128]);
          *((_QWORD *)v20 + 15) = v43;
          v20[128] = v42;
        }
        v20[129] = v21[129];
        v44 = v22[11];
        v45 = &v20[v44];
        v46 = &v21[v44];
        v47 = type metadata accessor for ArtworkCrop(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v47 - 8) + 16))(v45, v46, v47);
        v48 = v22[12];
        v49 = &v20[v48];
        v50 = &v21[v48];
        v51 = *((_QWORD *)v50 + 1);
        *(_QWORD *)v49 = *(_QWORD *)v50;
        *((_QWORD *)v49 + 1) = v51;
        v20[v22[13]] = v21[v22[13]];
        v20[v22[14]] = v21[v22[14]];
        v20[v22[15]] = v21[v22[15]];
        v52 = v22[16];
        v53 = &v20[v52];
        v54 = &v21[v52];
        v55 = *((_QWORD *)v54 + 1);
        *(_QWORD *)v53 = *(_QWORD *)v54;
        *((_QWORD *)v53 + 1) = v55;
        v56 = *(void (**)(char *, _QWORD, uint64_t, int *))(v172 + 56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v56(v20, 0, 1, v22);
      }
      v57 = v183[8];
      v58 = &v17[v57];
      v59 = &v18[v57];
      v60 = *((_QWORD *)v59 + 1);
      *(_QWORD *)v58 = *(_QWORD *)v59;
      *((_QWORD *)v58 + 1) = v60;
      v61 = v183[9];
      v62 = &v17[v61];
      v63 = &v18[v61];
      v64 = *((_QWORD *)v63 + 1);
      *(_QWORD *)v62 = *(_QWORD *)v63;
      *((_QWORD *)v62 + 1) = v64;
      v17[v183[10]] = v18[v183[10]];
      v65 = v183[11];
      v66 = &v17[v65];
      v67 = &v18[v65];
      v68 = *((_QWORD *)v67 + 1);
      *(_QWORD *)v66 = *(_QWORD *)v67;
      *((_QWORD *)v66 + 1) = v68;
      v69 = v183[12];
      v70 = &v17[v69];
      v71 = &v18[v69];
      v72 = *((_QWORD *)v71 + 1);
      *(_QWORD *)v70 = *(_QWORD *)v71;
      *((_QWORD *)v70 + 1) = v72;
      v73 = v183[13];
      __dst = &v17[v73];
      v74 = &v18[v73];
      v75 = type metadata accessor for URL(0);
      v76 = *(_QWORD *)(v75 - 8);
      v77 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v76 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v78 = v77;
      if (v77(v74, 1, v75))
      {
        v79 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
        memcpy(__dst, v74, *(_QWORD *)(*(_QWORD *)(v79 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v76 + 16))(__dst, v74, v75);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v76 + 56))(__dst, 0, 1, v75);
      }
      v80 = v183[14];
      v81 = &v17[v80];
      v82 = &v18[v80];
      v83 = *((_QWORD *)v82 + 1);
      *(_QWORD *)v81 = *(_QWORD *)v82;
      *((_QWORD *)v81 + 1) = v83;
      v84 = v183[15];
      v85 = &v17[v84];
      v86 = &v18[v84];
      v87 = *((_QWORD *)v86 + 1);
      *(_QWORD *)v85 = *(_QWORD *)v86;
      *((_QWORD *)v85 + 1) = v87;
      v88 = v183[16];
      v89 = &v17[v88];
      v90 = &v18[v88];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v78(v90, 1, v75))
      {
        v91 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
        memcpy(v89, v90, *(_QWORD *)(*(_QWORD *)(v91 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v76 + 16))(v89, v90, v75);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v76 + 56))(v89, 0, 1, v75);
      }
      v92 = v183[17];
      v93 = &v17[v92];
      v94 = &v18[v92];
      if (v78(&v18[v92], 1, v75))
      {
        v95 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
        memcpy(v93, v94, *(_QWORD *)(*(_QWORD *)(v95 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v76 + 16))(v93, v94, v75);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v76 + 56))(v93, 0, 1, v75);
      }
      v17[v183[18]] = v18[v183[18]];
      v96 = v177[7];
      v9 = v179;
      v97 = (char *)v179 + v96;
      v98 = &v174[v96];
      if (v78(&v174[v96], 1, v75))
      {
        v99 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
        memcpy(v97, v98, *(_QWORD *)(*(_QWORD *)(v99 - 8) + 64));
        (*(void (**)(char *, char *, uint64_t))(v76 + 16))((char *)v179 + v177[8], &v174[v177[8]], v75);
      }
      else
      {
        v100 = *(void (**)(char *, char *, uint64_t))(v76 + 16);
        v100(v97, v98, v75);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v76 + 56))(v97, 0, 1, v75);
        v100((char *)v179 + v177[8], &v174[v177[8]], v75);
      }
      *(_QWORD *)((char *)v179 + v177[9]) = *(_QWORD *)&v174[v177[9]];
      v101 = v177[10];
      v102 = (_QWORD *)((char *)v179 + v101);
      v103 = &v174[v101];
      v104 = *((_QWORD *)v103 + 1);
      *v102 = *(_QWORD *)v103;
      v102[1] = v104;
      v105 = v177[11];
      v106 = (_QWORD *)((char *)v179 + v105);
      v107 = &v174[v105];
      v108 = *((_QWORD *)v107 + 1);
      *v106 = *(_QWORD *)v107;
      v106[1] = v108;
      *(_QWORD *)((char *)v179 + v177[12]) = *(_QWORD *)&v174[v177[12]];
      *((_BYTE *)v179 + v177[13]) = v174[v177[13]];
      *((_BYTE *)v179 + v177[14]) = v174[v177[14]];
      v109 = v177[15];
      v110 = (char *)v179 + v109;
      v111 = &v174[v109];
      *(_QWORD *)v110 = *(_QWORD *)v111;
      v110[8] = v111[8];
      v112 = v177[16];
      v113 = (_QWORD *)((char *)v179 + v112);
      v114 = &v174[v112];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      if (v175(v114, 1, v176))
      {
        v115 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
        memcpy(v113, v114, *(_QWORD *)(*(_QWORD *)(v115 - 8) + 64));
      }
      else
      {
        v116 = *((_QWORD *)v114 + 1);
        *v113 = *(_QWORD *)v114;
        v113[1] = v116;
        v117 = v114[32];
        swift_bridgeObjectRetain();
        if (v117 == 255)
        {
          *((_OWORD *)v113 + 1) = *((_OWORD *)v114 + 1);
          *((_BYTE *)v113 + 32) = v114[32];
        }
        else
        {
          v118 = *((_QWORD *)v114 + 2);
          v119 = *((_QWORD *)v114 + 3);
          sub_3D464(v118, v119, v117);
          v113[2] = v118;
          v113[3] = v119;
          *((_BYTE *)v113 + 32) = v117;
        }
        *(_OWORD *)(v113 + 5) = *(_OWORD *)(v114 + 40);
        v120 = (id *)(v114 + 56);
        v121 = v114[64];
        if (v121 == 255)
        {
          v113[7] = *v120;
          *((_BYTE *)v113 + 64) = v114[64];
        }
        else
        {
          v122 = *v120;
          sub_3D47C(*v120, v114[64]);
          v113[7] = v122;
          *((_BYTE *)v113 + 64) = v121;
        }
        v123 = (id *)(v114 + 72);
        v124 = v114[80];
        if (v124 == 255)
        {
          v113[9] = *v123;
          *((_BYTE *)v113 + 80) = v114[80];
        }
        else
        {
          v125 = *v123;
          sub_3D47C(*v123, v114[80]);
          v113[9] = v125;
          *((_BYTE *)v113 + 80) = v124;
        }
        v126 = (id *)(v114 + 88);
        v127 = v114[96];
        if (v127 == 255)
        {
          v113[11] = *v126;
          *((_BYTE *)v113 + 96) = v114[96];
        }
        else
        {
          v128 = *v126;
          sub_3D47C(*v126, v114[96]);
          v113[11] = v128;
          *((_BYTE *)v113 + 96) = v127;
        }
        v129 = (id *)(v114 + 104);
        v130 = v114[112];
        if (v130 == 255)
        {
          v113[13] = *v129;
          *((_BYTE *)v113 + 112) = v114[112];
        }
        else
        {
          v131 = *v129;
          sub_3D47C(*v129, v114[112]);
          v113[13] = v131;
          *((_BYTE *)v113 + 112) = v130;
        }
        v132 = (id *)(v114 + 120);
        v133 = v114[128];
        if (v133 == 255)
        {
          v113[15] = *v132;
          *((_BYTE *)v113 + 128) = v114[128];
        }
        else
        {
          v134 = *v132;
          sub_3D47C(*v132, v114[128]);
          v113[15] = v134;
          *((_BYTE *)v113 + 128) = v133;
        }
        *((_BYTE *)v113 + 129) = v114[129];
        v135 = v176[11];
        v136 = (char *)v113 + v135;
        v137 = &v114[v135];
        v138 = type metadata accessor for ArtworkCrop(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v138 - 8) + 16))(v136, v137, v138);
        v139 = v176[12];
        v140 = (_QWORD *)((char *)v113 + v139);
        v141 = &v114[v139];
        v142 = *((_QWORD *)v141 + 1);
        *v140 = *(_QWORD *)v141;
        v140[1] = v142;
        *((_BYTE *)v113 + v176[13]) = v114[v176[13]];
        *((_BYTE *)v113 + v176[14]) = v114[v176[14]];
        *((_BYTE *)v113 + v176[15]) = v114[v176[15]];
        v143 = v176[16];
        v144 = (_QWORD *)((char *)v113 + v143);
        v145 = &v114[v143];
        v146 = *((_QWORD *)v145 + 1);
        *v144 = *(_QWORD *)v145;
        v144[1] = v146;
        v147 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v172 + 56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v147(v113, 0, 1, v176);
      }
      v148 = v177[17];
      v149 = (_QWORD *)((char *)v179 + v148);
      v150 = &v174[v148];
      v151 = *((_QWORD *)v150 + 1);
      *v149 = *(_QWORD *)v150;
      v149[1] = v151;
      v152 = v177[18];
      v153 = (char *)v179 + v152;
      v154 = &v174[v152];
      v153[8] = v154[8];
      *(_QWORD *)v153 = *(_QWORD *)v154;
      v155 = v177[19];
      v156 = (char *)v179 + v155;
      v157 = &v174[v155];
      *(_QWORD *)v156 = *(_QWORD *)v157;
      v156[8] = v157[8];
      *((_BYTE *)v179 + v177[20]) = v174[v177[20]];
      *((_BYTE *)v179 + v177[21]) = v174[v177[21]];
      v158 = v177[22];
      v159 = (char *)v179 + v158;
      v160 = &v174[v158];
      v161 = type metadata accessor for TranscriptRequestInformation(0);
      v162 = *(_QWORD *)(v161 - 8);
      v163 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v162 + 48);
      swift_bridgeObjectRetain();
      if (v163(v160, 1, v161))
      {
        v164 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2C40);
        memcpy(v159, v160, *(_QWORD *)(*(_QWORD *)(v164 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v162 + 16))(v159, v160, v161);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v162 + 56))(v159, 0, 1, v161);
      }
      v14 = 0;
      v3 = v181;
      a1 = v182;
      v6 = v180;
      v11 = v178;
    }
    swift_storeEnumTagMultiPayload(v9, v11, v14);
    v165 = v6[6];
    v166 = v6[7];
    v167 = (char *)a1 + v165;
    v168 = (char *)v3 + v165;
    *(_QWORD *)v167 = *(_QWORD *)v168;
    v167[8] = v168[8];
    v169 = (char *)a1 + v166;
    v170 = (char *)v3 + v166;
    *(_QWORD *)v169 = *(_QWORD *)v170;
    v169[8] = v170[8];
  }
  return a1;
}

void destroy for ShareSheetAction(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  id *v5;
  uint64_t v6;
  int *v7;
  char *v8;
  int *v9;
  char *v10;
  uint64_t v11;
  unsigned int (*v12)(char *, uint64_t, uint64_t);
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int (*v24)(char *, uint64_t, uint64_t);
  char *v25;
  char *v26;
  char *v27;
  unsigned int v28;
  void (*v29)(char *, uint64_t);
  char *v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;

  v4 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = (id *)(a1 + *(int *)(a2 + 20));
  v6 = type metadata accessor for ShareSheetContentSource(0);
  if (swift_getEnumCaseMultiPayload(v5, v6) == 1)
  {

  }
  else
  {
    swift_bridgeObjectRelease();
    v7 = (int *)type metadata accessor for EpisodeOffer(0);
    v8 = (char *)v5 + v7[6];
    swift_bridgeObjectRelease();
    v9 = (int *)type metadata accessor for ShowOffer(0);
    v10 = &v8[v9[7]];
    v11 = type metadata accessor for ArtworkModel(0);
    v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48);
    if (!v12(v10, 1, v11))
    {
      swift_bridgeObjectRelease();
      v13 = v10[32];
      if (v13 != 255)
        sub_3B5BC(*((_QWORD *)v10 + 2), *((_QWORD *)v10 + 3), v13);
      v14 = v10[64];
      if (v14 != 255)
        sub_3D624(*((id *)v10 + 7), v14);
      v15 = v10[80];
      if (v15 != 255)
        sub_3D624(*((id *)v10 + 9), v15);
      v16 = v10[96];
      if (v16 != 255)
        sub_3D624(*((id *)v10 + 11), v16);
      v17 = v10[112];
      if (v17 != 255)
        sub_3D624(*((id *)v10 + 13), v17);
      v18 = v10[128];
      if (v18 != 255)
        sub_3D624(*((id *)v10 + 15), v18);
      v19 = &v10[*(int *)(v11 + 44)];
      v20 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v19, v20);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v21 = &v8[v9[13]];
    v22 = type metadata accessor for URL(0);
    v23 = *(_QWORD *)(v22 - 8);
    v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48);
    if (!v24(v21, 1, v22))
      (*(void (**)(char *, uint64_t))(v23 + 8))(v21, v22);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v25 = &v8[v9[16]];
    if (!v24(v25, 1, v22))
      (*(void (**)(char *, uint64_t))(v23 + 8))(v25, v22);
    v26 = &v8[v9[17]];
    if (!v24(v26, 1, v22))
      (*(void (**)(char *, uint64_t))(v23 + 8))(v26, v22);
    v27 = (char *)v5 + v7[7];
    v28 = v24(v27, 1, v22);
    v29 = *(void (**)(char *, uint64_t))(v23 + 8);
    if (!v28)
      v29(v27, v22);
    v29((char *)v5 + v7[8], v22);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release(*(id *)((char *)v5 + v7[12]));
    v30 = (char *)v5 + v7[16];
    if (!v12(v30, 1, v11))
    {
      swift_bridgeObjectRelease();
      v31 = v30[32];
      if (v31 != 255)
        sub_3B5BC(*((_QWORD *)v30 + 2), *((_QWORD *)v30 + 3), v31);
      v32 = v30[64];
      if (v32 != 255)
        sub_3D624(*((id *)v30 + 7), v32);
      v33 = v30[80];
      if (v33 != 255)
        sub_3D624(*((id *)v30 + 9), v33);
      v34 = v30[96];
      if (v34 != 255)
        sub_3D624(*((id *)v30 + 11), v34);
      v35 = v30[112];
      if (v35 != 255)
        sub_3D624(*((id *)v30 + 13), v35);
      v36 = v30[128];
      if (v36 != 255)
        sub_3D624(*((id *)v30 + 15), v36);
      v37 = &v30[*(int *)(v11 + 44)];
      v38 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v38 - 8) + 8))(v37, v38);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    v39 = (char *)v5 + v7[22];
    v40 = type metadata accessor for TranscriptRequestInformation(0);
    v41 = *(_QWORD *)(v40 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
      (*(void (**)(char *, uint64_t))(v41 + 8))(v39, v40);
  }
}

uint64_t initializeWithCopy for ShareSheetAction(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  _QWORD *v19;
  unsigned int (*v20)(_QWORD *, uint64_t, int *);
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  id *v26;
  int v27;
  id v28;
  id *v29;
  int v30;
  id v31;
  id *v32;
  int v33;
  id v34;
  id *v35;
  int v36;
  id v37;
  id *v38;
  int v39;
  id v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  _QWORD *v51;
  uint64_t v52;
  void (*v53)(char *, _QWORD, uint64_t, int *);
  uint64_t v54;
  char *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  const void *v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int (*v74)(uint64_t, uint64_t, uint64_t);
  unsigned int (*v75)(uint64_t, uint64_t, uint64_t);
  uint64_t v76;
  uint64_t v77;
  char *v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  const void *v87;
  unsigned int (*v88)(uint64_t, uint64_t, uint64_t);
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  const void *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  const void *v97;
  uint64_t v98;
  void (*v99)(char *, const void *, uint64_t);
  uint64_t v100;
  _QWORD *v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  id *v119;
  int v120;
  id v121;
  id *v122;
  int v123;
  id v124;
  id *v125;
  int v126;
  id v127;
  id *v128;
  int v129;
  id v130;
  id *v131;
  int v132;
  id v133;
  uint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  _QWORD *v144;
  uint64_t v145;
  void (*v146)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v147;
  _QWORD *v148;
  _QWORD *v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  const void *v159;
  uint64_t v160;
  uint64_t v161;
  unsigned int (*v162)(const void *, uint64_t, uint64_t);
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v171;
  char *__dst;
  uint64_t v173;
  unsigned int (*v174)(_QWORD *, uint64_t, int *);
  int *v175;
  uint64_t v176;
  _QWORD *v177;
  int *v178;
  uint64_t v179;
  uint64_t v180;
  int *v181;
  int *v182;

  v6 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = a2 + v7;
  v10 = type metadata accessor for ShareSheetContentSource(0);
  if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
  {
    v11 = *(void **)v9;
    *v8 = *(_QWORD *)v9;
    v12 = v11;
    v13 = 1;
  }
  else
  {
    v176 = v10;
    v178 = a3;
    v179 = a2;
    *(_OWORD *)v8 = *(_OWORD *)v9;
    v8[2] = *(_QWORD *)(v9 + 16);
    v175 = (int *)type metadata accessor for EpisodeOffer(0);
    v14 = v175[6];
    v15 = (char *)v8 + v14;
    v173 = v9;
    v16 = v9 + v14;
    *(_OWORD *)v15 = *(_OWORD *)(v9 + v14);
    *((_QWORD *)v15 + 2) = *(_QWORD *)(v9 + v14 + 16);
    v15[24] = *(_BYTE *)(v9 + v14 + 24);
    v182 = (int *)type metadata accessor for ShowOffer(0);
    v17 = v182[7];
    v18 = &v15[v17];
    v19 = (_QWORD *)(v16 + v17);
    v181 = (int *)type metadata accessor for ArtworkModel(0);
    v171 = *((_QWORD *)v181 - 1);
    v20 = *(unsigned int (**)(_QWORD *, uint64_t, int *))(v171 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v174 = v20;
    v180 = a1;
    v177 = v8;
    if (v20(v19, 1, v181))
    {
      v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      v22 = v19[1];
      *(_QWORD *)v18 = *v19;
      *((_QWORD *)v18 + 1) = v22;
      v23 = *((unsigned __int8 *)v19 + 32);
      swift_bridgeObjectRetain();
      if (v23 == 255)
      {
        *((_OWORD *)v18 + 1) = *((_OWORD *)v19 + 1);
        v18[32] = *((_BYTE *)v19 + 32);
      }
      else
      {
        v24 = v19[2];
        v25 = v19[3];
        sub_3D464(v24, v25, v23);
        *((_QWORD *)v18 + 2) = v24;
        *((_QWORD *)v18 + 3) = v25;
        v18[32] = v23;
      }
      *(_OWORD *)(v18 + 40) = *(_OWORD *)(v19 + 5);
      v26 = (id *)(v19 + 7);
      v27 = *((unsigned __int8 *)v19 + 64);
      if (v27 == 255)
      {
        *((_QWORD *)v18 + 7) = *v26;
        v18[64] = *((_BYTE *)v19 + 64);
      }
      else
      {
        v28 = *v26;
        sub_3D47C(*v26, *((_BYTE *)v19 + 64));
        *((_QWORD *)v18 + 7) = v28;
        v18[64] = v27;
      }
      v29 = (id *)(v19 + 9);
      v30 = *((unsigned __int8 *)v19 + 80);
      if (v30 == 255)
      {
        *((_QWORD *)v18 + 9) = *v29;
        v18[80] = *((_BYTE *)v19 + 80);
      }
      else
      {
        v31 = *v29;
        sub_3D47C(*v29, *((_BYTE *)v19 + 80));
        *((_QWORD *)v18 + 9) = v31;
        v18[80] = v30;
      }
      v32 = (id *)(v19 + 11);
      v33 = *((unsigned __int8 *)v19 + 96);
      if (v33 == 255)
      {
        *((_QWORD *)v18 + 11) = *v32;
        v18[96] = *((_BYTE *)v19 + 96);
      }
      else
      {
        v34 = *v32;
        sub_3D47C(*v32, *((_BYTE *)v19 + 96));
        *((_QWORD *)v18 + 11) = v34;
        v18[96] = v33;
      }
      v35 = (id *)(v19 + 13);
      v36 = *((unsigned __int8 *)v19 + 112);
      if (v36 == 255)
      {
        *((_QWORD *)v18 + 13) = *v35;
        v18[112] = *((_BYTE *)v19 + 112);
      }
      else
      {
        v37 = *v35;
        sub_3D47C(*v35, *((_BYTE *)v19 + 112));
        *((_QWORD *)v18 + 13) = v37;
        v18[112] = v36;
      }
      v38 = (id *)(v19 + 15);
      v39 = *((unsigned __int8 *)v19 + 128);
      if (v39 == 255)
      {
        *((_QWORD *)v18 + 15) = *v38;
        v18[128] = *((_BYTE *)v19 + 128);
      }
      else
      {
        v40 = *v38;
        sub_3D47C(*v38, *((_BYTE *)v19 + 128));
        *((_QWORD *)v18 + 15) = v40;
        v18[128] = v39;
      }
      v18[129] = *((_BYTE *)v19 + 129);
      v41 = v181[11];
      v42 = &v18[v41];
      v43 = (char *)v19 + v41;
      v44 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v44 - 8) + 16))(v42, v43, v44);
      v45 = v181[12];
      v46 = &v18[v45];
      v47 = (_QWORD *)((char *)v19 + v45);
      v48 = v47[1];
      *(_QWORD *)v46 = *v47;
      *((_QWORD *)v46 + 1) = v48;
      v18[v181[13]] = *((_BYTE *)v19 + v181[13]);
      v18[v181[14]] = *((_BYTE *)v19 + v181[14]);
      v18[v181[15]] = *((_BYTE *)v19 + v181[15]);
      v49 = v181[16];
      v50 = &v18[v49];
      v51 = (_QWORD *)((char *)v19 + v49);
      v52 = v51[1];
      *(_QWORD *)v50 = *v51;
      *((_QWORD *)v50 + 1) = v52;
      v53 = *(void (**)(char *, _QWORD, uint64_t, int *))(v171 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v53(v18, 0, 1, v181);
    }
    v54 = v182[8];
    v55 = &v15[v54];
    v56 = (_QWORD *)(v16 + v54);
    v57 = v56[1];
    *(_QWORD *)v55 = *v56;
    *((_QWORD *)v55 + 1) = v57;
    v58 = v182[9];
    v59 = &v15[v58];
    v60 = (_QWORD *)(v16 + v58);
    v61 = v60[1];
    *(_QWORD *)v59 = *v60;
    *((_QWORD *)v59 + 1) = v61;
    v15[v182[10]] = *(_BYTE *)(v16 + v182[10]);
    v62 = v182[11];
    v63 = &v15[v62];
    v64 = (_QWORD *)(v16 + v62);
    v65 = v64[1];
    *(_QWORD *)v63 = *v64;
    *((_QWORD *)v63 + 1) = v65;
    v66 = v182[12];
    v67 = &v15[v66];
    v68 = (_QWORD *)(v16 + v66);
    v69 = v68[1];
    *(_QWORD *)v67 = *v68;
    *((_QWORD *)v67 + 1) = v69;
    v70 = v182[13];
    __dst = &v15[v70];
    v71 = (const void *)(v16 + v70);
    v72 = type metadata accessor for URL(0);
    v73 = *(_QWORD *)(v72 - 8);
    v74 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v73 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v75 = v74;
    if (v74((uint64_t)v71, 1, v72))
    {
      v76 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
      memcpy(__dst, v71, *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, const void *, uint64_t))(v73 + 16))(__dst, v71, v72);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v73 + 56))(__dst, 0, 1, v72);
    }
    v77 = v182[14];
    v78 = &v15[v77];
    v79 = (_QWORD *)(v16 + v77);
    v80 = v79[1];
    *(_QWORD *)v78 = *v79;
    *((_QWORD *)v78 + 1) = v80;
    v81 = v182[15];
    v82 = &v15[v81];
    v83 = (_QWORD *)(v16 + v81);
    v84 = v83[1];
    *(_QWORD *)v82 = *v83;
    *((_QWORD *)v82 + 1) = v84;
    v85 = v182[16];
    v86 = &v15[v85];
    v87 = (const void *)(v16 + v85);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v88 = v75;
    v89 = v75((uint64_t)v87, 1, v72);
    v8 = v177;
    if (v89)
    {
      v90 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
      memcpy(v86, v87, *(_QWORD *)(*(_QWORD *)(v90 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, const void *, uint64_t))(v73 + 16))(v86, v87, v72);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v73 + 56))(v86, 0, 1, v72);
    }
    v91 = v182[17];
    v92 = &v15[v91];
    v93 = (const void *)(v16 + v91);
    if (v88(v16 + v91, 1, v72))
    {
      v94 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
      memcpy(v92, v93, *(_QWORD *)(*(_QWORD *)(v94 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, const void *, uint64_t))(v73 + 16))(v92, v93, v72);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v73 + 56))(v92, 0, 1, v72);
    }
    v15[v182[18]] = *(_BYTE *)(v16 + v182[18]);
    v95 = v175[7];
    v96 = (char *)v177 + v95;
    v97 = (const void *)(v173 + v95);
    if (v88(v173 + v95, 1, v72))
    {
      v98 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
      memcpy(v96, v97, *(_QWORD *)(*(_QWORD *)(v98 - 8) + 64));
      (*(void (**)(char *, uint64_t, uint64_t))(v73 + 16))((char *)v177 + v175[8], v173 + v175[8], v72);
    }
    else
    {
      v99 = *(void (**)(char *, const void *, uint64_t))(v73 + 16);
      v99(v96, v97, v72);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v73 + 56))(v96, 0, 1, v72);
      v99((char *)v177 + v175[8], (const void *)(v173 + v175[8]), v72);
    }
    *(_QWORD *)((char *)v177 + v175[9]) = *(_QWORD *)(v173 + v175[9]);
    v100 = v175[10];
    v101 = (_QWORD *)((char *)v177 + v100);
    v102 = (_QWORD *)(v173 + v100);
    v103 = v102[1];
    *v101 = *v102;
    v101[1] = v103;
    v104 = v175[11];
    v105 = (_QWORD *)((char *)v177 + v104);
    v106 = (_QWORD *)(v173 + v104);
    v107 = v106[1];
    *v105 = *v106;
    v105[1] = v107;
    *(_QWORD *)((char *)v177 + v175[12]) = *(_QWORD *)(v173 + v175[12]);
    *((_BYTE *)v177 + v175[13]) = *(_BYTE *)(v173 + v175[13]);
    *((_BYTE *)v177 + v175[14]) = *(_BYTE *)(v173 + v175[14]);
    v108 = v175[15];
    v109 = (char *)v177 + v108;
    v110 = v173 + v108;
    *(_QWORD *)v109 = *(_QWORD *)v110;
    v109[8] = *(_BYTE *)(v110 + 8);
    v111 = v175[16];
    v112 = (_QWORD *)((char *)v177 + v111);
    v113 = (_QWORD *)(v173 + v111);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    if (v174(v113, 1, v181))
    {
      v114 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
      memcpy(v112, v113, *(_QWORD *)(*(_QWORD *)(v114 - 8) + 64));
    }
    else
    {
      v115 = v113[1];
      *v112 = *v113;
      v112[1] = v115;
      v116 = *((unsigned __int8 *)v113 + 32);
      swift_bridgeObjectRetain();
      if (v116 == 255)
      {
        *((_OWORD *)v112 + 1) = *((_OWORD *)v113 + 1);
        *((_BYTE *)v112 + 32) = *((_BYTE *)v113 + 32);
      }
      else
      {
        v117 = v113[2];
        v118 = v113[3];
        sub_3D464(v117, v118, v116);
        v112[2] = v117;
        v112[3] = v118;
        *((_BYTE *)v112 + 32) = v116;
      }
      *(_OWORD *)(v112 + 5) = *(_OWORD *)(v113 + 5);
      v119 = (id *)(v113 + 7);
      v120 = *((unsigned __int8 *)v113 + 64);
      if (v120 == 255)
      {
        v112[7] = *v119;
        *((_BYTE *)v112 + 64) = *((_BYTE *)v113 + 64);
      }
      else
      {
        v121 = *v119;
        sub_3D47C(*v119, *((_BYTE *)v113 + 64));
        v112[7] = v121;
        *((_BYTE *)v112 + 64) = v120;
      }
      v122 = (id *)(v113 + 9);
      v123 = *((unsigned __int8 *)v113 + 80);
      if (v123 == 255)
      {
        v112[9] = *v122;
        *((_BYTE *)v112 + 80) = *((_BYTE *)v113 + 80);
      }
      else
      {
        v124 = *v122;
        sub_3D47C(*v122, *((_BYTE *)v113 + 80));
        v112[9] = v124;
        *((_BYTE *)v112 + 80) = v123;
      }
      v125 = (id *)(v113 + 11);
      v126 = *((unsigned __int8 *)v113 + 96);
      if (v126 == 255)
      {
        v112[11] = *v125;
        *((_BYTE *)v112 + 96) = *((_BYTE *)v113 + 96);
      }
      else
      {
        v127 = *v125;
        sub_3D47C(*v125, *((_BYTE *)v113 + 96));
        v112[11] = v127;
        *((_BYTE *)v112 + 96) = v126;
      }
      v128 = (id *)(v113 + 13);
      v129 = *((unsigned __int8 *)v113 + 112);
      if (v129 == 255)
      {
        v112[13] = *v128;
        *((_BYTE *)v112 + 112) = *((_BYTE *)v113 + 112);
      }
      else
      {
        v130 = *v128;
        sub_3D47C(*v128, *((_BYTE *)v113 + 112));
        v112[13] = v130;
        *((_BYTE *)v112 + 112) = v129;
      }
      v131 = (id *)(v113 + 15);
      v132 = *((unsigned __int8 *)v113 + 128);
      if (v132 == 255)
      {
        v112[15] = *v131;
        *((_BYTE *)v112 + 128) = *((_BYTE *)v113 + 128);
      }
      else
      {
        v133 = *v131;
        sub_3D47C(*v131, *((_BYTE *)v113 + 128));
        v112[15] = v133;
        *((_BYTE *)v112 + 128) = v132;
      }
      *((_BYTE *)v112 + 129) = *((_BYTE *)v113 + 129);
      v134 = v181[11];
      v135 = (char *)v112 + v134;
      v136 = (char *)v113 + v134;
      v137 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v137 - 8) + 16))(v135, v136, v137);
      v138 = v181[12];
      v139 = (_QWORD *)((char *)v112 + v138);
      v140 = (_QWORD *)((char *)v113 + v138);
      v141 = v140[1];
      *v139 = *v140;
      v139[1] = v141;
      *((_BYTE *)v112 + v181[13]) = *((_BYTE *)v113 + v181[13]);
      *((_BYTE *)v112 + v181[14]) = *((_BYTE *)v113 + v181[14]);
      *((_BYTE *)v112 + v181[15]) = *((_BYTE *)v113 + v181[15]);
      v142 = v181[16];
      v143 = (_QWORD *)((char *)v112 + v142);
      v144 = (_QWORD *)((char *)v113 + v142);
      v145 = v144[1];
      *v143 = *v144;
      v143[1] = v145;
      v146 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v171 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v146(v112, 0, 1, v181);
    }
    v147 = v175[17];
    v148 = (_QWORD *)((char *)v177 + v147);
    v149 = (_QWORD *)(v173 + v147);
    v150 = v149[1];
    *v148 = *v149;
    v148[1] = v150;
    v151 = v175[18];
    v152 = (char *)v177 + v151;
    v153 = v173 + v151;
    v152[8] = *(_BYTE *)(v153 + 8);
    *(_QWORD *)v152 = *(_QWORD *)v153;
    v154 = v175[19];
    v155 = (char *)v177 + v154;
    v156 = v173 + v154;
    *(_QWORD *)v155 = *(_QWORD *)v156;
    v155[8] = *(_BYTE *)(v156 + 8);
    *((_BYTE *)v177 + v175[20]) = *(_BYTE *)(v173 + v175[20]);
    *((_BYTE *)v177 + v175[21]) = *(_BYTE *)(v173 + v175[21]);
    v157 = v175[22];
    v158 = (char *)v177 + v157;
    v159 = (const void *)(v173 + v157);
    v160 = type metadata accessor for TranscriptRequestInformation(0);
    v161 = *(_QWORD *)(v160 - 8);
    v162 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v161 + 48);
    swift_bridgeObjectRetain();
    if (v162(v159, 1, v160))
    {
      v163 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2C40);
      memcpy(v158, v159, *(_QWORD *)(*(_QWORD *)(v163 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, const void *, uint64_t))(v161 + 16))(v158, v159, v160);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v161 + 56))(v158, 0, 1, v160);
    }
    v13 = 0;
    a2 = v179;
    a1 = v180;
    a3 = v178;
    v10 = v176;
  }
  swift_storeEnumTagMultiPayload(v8, v10, v13);
  v164 = a3[6];
  v165 = a3[7];
  v166 = a1 + v164;
  v167 = a2 + v164;
  *(_QWORD *)v166 = *(_QWORD *)v167;
  *(_BYTE *)(v166 + 8) = *(_BYTE *)(v167 + 8);
  v168 = a1 + v165;
  v169 = a2 + v165;
  *(_QWORD *)v168 = *(_QWORD *)v169;
  *(_BYTE *)(v168 + 8) = *(_BYTE *)(v169 + 8);
  return a1;
}

uint64_t assignWithCopy for ShareSheetAction(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _QWORD *v21;
  uint64_t v22;
  unsigned int (*v23)(_QWORD *, uint64_t, int *);
  int *v24;
  uint64_t v25;
  int *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  id *v31;
  int v32;
  id v33;
  id v34;
  id *v35;
  int v36;
  id v37;
  id v38;
  id *v39;
  int v40;
  id v41;
  id v42;
  id *v43;
  int v44;
  id v45;
  id v46;
  id *v47;
  int v48;
  id v49;
  id v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  _QWORD *v57;
  uint64_t v58;
  char *v59;
  _QWORD *v60;
  void (*v61)(char *, _QWORD, uint64_t, int *);
  uint64_t v62;
  char *v63;
  _QWORD *v64;
  uint64_t v65;
  char *v66;
  _QWORD *v67;
  uint64_t v68;
  char *v69;
  _QWORD *v70;
  uint64_t v71;
  char *v72;
  _QWORD *v73;
  uint64_t v74;
  const void *v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int (*v78)(const void *, uint64_t, uint64_t);
  uint64_t v79;
  uint64_t v80;
  char *v81;
  _QWORD *v82;
  uint64_t v83;
  char *v84;
  _QWORD *v85;
  uint64_t v86;
  char *v87;
  const void *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  const void *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  const void *v96;
  uint64_t v97;
  void (*v98)(char *, const void *, uint64_t);
  uint64_t v99;
  char *v100;
  _QWORD *v101;
  uint64_t v102;
  char *v103;
  _QWORD *v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  char *v110;
  _QWORD *v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  __int128 v116;
  id *v117;
  int v118;
  id v119;
  id v120;
  id *v121;
  int v122;
  id v123;
  id v124;
  id *v125;
  int v126;
  id v127;
  id v128;
  id *v129;
  int v130;
  id v131;
  id v132;
  id *v133;
  int v134;
  id v135;
  id v136;
  uint64_t v137;
  char *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  _QWORD *v143;
  uint64_t v144;
  char *v145;
  _QWORD *v146;
  void (*v147)(char *, _QWORD, uint64_t, int *);
  uint64_t v148;
  char *v149;
  _QWORD *v150;
  uint64_t v151;
  char *v152;
  uint64_t *v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  const void *v161;
  uint64_t v162;
  uint64_t v163;
  unsigned int (*v164)(const void *, uint64_t, uint64_t);
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t *v172;
  uint64_t v173;
  uint64_t v175;
  char *__dst;
  char *v177;
  unsigned int (*v178)(_QWORD *, uint64_t, int *);
  int *v179;
  int *v180;
  uint64_t v181;
  uint64_t v182;
  int *v183;
  uint64_t v184;
  uint64_t v185;
  int *v186;

  v6 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  if (a1 != a2)
  {
    v7 = a3[5];
    v8 = (char *)(a1 + v7);
    v9 = a2 + v7;
    sub_12B42C(a1 + v7);
    v10 = type metadata accessor for ShareSheetContentSource(0);
    if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
    {
      v11 = *(void **)v9;
      *(_QWORD *)v8 = *(_QWORD *)v9;
      v12 = v11;
      v13 = v8;
      v14 = v10;
      v15 = 1;
    }
    else
    {
      v182 = v10;
      v183 = a3;
      *(_QWORD *)v8 = *(_QWORD *)v9;
      *((_QWORD *)v8 + 1) = *(_QWORD *)(v9 + 8);
      *((_QWORD *)v8 + 2) = *(_QWORD *)(v9 + 16);
      v180 = (int *)type metadata accessor for EpisodeOffer(0);
      v181 = v9;
      v16 = v180[6];
      v17 = &v8[v16];
      v18 = v9 + v16;
      *(_QWORD *)v17 = *(_QWORD *)v18;
      *((_QWORD *)v17 + 1) = *(_QWORD *)(v18 + 8);
      *((_QWORD *)v17 + 2) = *(_QWORD *)(v18 + 16);
      v17[24] = *(_BYTE *)(v18 + 24);
      v186 = (int *)type metadata accessor for ShowOffer(0);
      v19 = v186[7];
      v20 = &v17[v19];
      v21 = (_QWORD *)(v18 + v19);
      v22 = type metadata accessor for ArtworkModel(0);
      v175 = *(_QWORD *)(v22 - 8);
      v23 = *(unsigned int (**)(_QWORD *, uint64_t, int *))(v175 + 48);
      v24 = (int *)v22;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v178 = v23;
      v184 = a2;
      v185 = a1;
      v179 = v24;
      v177 = v8;
      if (v23(v21, 1, v24))
      {
        v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
        memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
      }
      else
      {
        v26 = v24;
        *(_QWORD *)v20 = *v21;
        *((_QWORD *)v20 + 1) = v21[1];
        v27 = *((unsigned __int8 *)v21 + 32);
        swift_bridgeObjectRetain();
        if (v27 == 255)
        {
          v30 = *((_OWORD *)v21 + 1);
          v20[32] = *((_BYTE *)v21 + 32);
          *((_OWORD *)v20 + 1) = v30;
        }
        else
        {
          v29 = v21[2];
          v28 = v21[3];
          sub_3D464(v29, v28, v27);
          *((_QWORD *)v20 + 2) = v29;
          *((_QWORD *)v20 + 3) = v28;
          v20[32] = v27;
        }
        *((_QWORD *)v20 + 5) = v21[5];
        *((_QWORD *)v20 + 6) = v21[6];
        v31 = (id *)(v21 + 7);
        v32 = *((unsigned __int8 *)v21 + 64);
        if (v32 == 255)
        {
          v34 = *v31;
          v20[64] = *((_BYTE *)v21 + 64);
          *((_QWORD *)v20 + 7) = v34;
        }
        else
        {
          v33 = *v31;
          sub_3D47C(*v31, *((_BYTE *)v21 + 64));
          *((_QWORD *)v20 + 7) = v33;
          v20[64] = v32;
        }
        v35 = (id *)(v21 + 9);
        v36 = *((unsigned __int8 *)v21 + 80);
        if (v36 == 255)
        {
          v38 = *v35;
          v20[80] = *((_BYTE *)v21 + 80);
          *((_QWORD *)v20 + 9) = v38;
        }
        else
        {
          v37 = *v35;
          sub_3D47C(*v35, *((_BYTE *)v21 + 80));
          *((_QWORD *)v20 + 9) = v37;
          v20[80] = v36;
        }
        v39 = (id *)(v21 + 11);
        v40 = *((unsigned __int8 *)v21 + 96);
        if (v40 == 255)
        {
          v42 = *v39;
          v20[96] = *((_BYTE *)v21 + 96);
          *((_QWORD *)v20 + 11) = v42;
        }
        else
        {
          v41 = *v39;
          sub_3D47C(*v39, *((_BYTE *)v21 + 96));
          *((_QWORD *)v20 + 11) = v41;
          v20[96] = v40;
        }
        v43 = (id *)(v21 + 13);
        v44 = *((unsigned __int8 *)v21 + 112);
        if (v44 == 255)
        {
          v46 = *v43;
          v20[112] = *((_BYTE *)v21 + 112);
          *((_QWORD *)v20 + 13) = v46;
        }
        else
        {
          v45 = *v43;
          sub_3D47C(*v43, *((_BYTE *)v21 + 112));
          *((_QWORD *)v20 + 13) = v45;
          v20[112] = v44;
        }
        v47 = (id *)(v21 + 15);
        v48 = *((unsigned __int8 *)v21 + 128);
        if (v48 == 255)
        {
          v50 = *v47;
          v20[128] = *((_BYTE *)v21 + 128);
          *((_QWORD *)v20 + 15) = v50;
        }
        else
        {
          v49 = *v47;
          sub_3D47C(*v47, *((_BYTE *)v21 + 128));
          *((_QWORD *)v20 + 15) = v49;
          v20[128] = v48;
        }
        v20[129] = *((_BYTE *)v21 + 129);
        v51 = v26[11];
        v52 = &v20[v51];
        v53 = (char *)v21 + v51;
        v54 = type metadata accessor for ArtworkCrop(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v54 - 8) + 16))(v52, v53, v54);
        v55 = v26[12];
        v56 = &v20[v55];
        v57 = (_QWORD *)((char *)v21 + v55);
        *(_QWORD *)v56 = *v57;
        *((_QWORD *)v56 + 1) = v57[1];
        v20[v26[13]] = *((_BYTE *)v21 + v26[13]);
        v20[v26[14]] = *((_BYTE *)v21 + v26[14]);
        v20[v26[15]] = *((_BYTE *)v21 + v26[15]);
        v58 = v26[16];
        v59 = &v20[v58];
        v60 = (_QWORD *)((char *)v21 + v58);
        *(_QWORD *)v59 = *v60;
        *((_QWORD *)v59 + 1) = v60[1];
        v61 = *(void (**)(char *, _QWORD, uint64_t, int *))(v175 + 56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v61(v20, 0, 1, v26);
      }
      v62 = v186[8];
      v63 = &v17[v62];
      v64 = (_QWORD *)(v18 + v62);
      *(_QWORD *)v63 = *v64;
      *((_QWORD *)v63 + 1) = v64[1];
      v65 = v186[9];
      v66 = &v17[v65];
      v67 = (_QWORD *)(v18 + v65);
      *(_QWORD *)v66 = *v67;
      *((_QWORD *)v66 + 1) = v67[1];
      v17[v186[10]] = *(_BYTE *)(v18 + v186[10]);
      v68 = v186[11];
      v69 = &v17[v68];
      v70 = (_QWORD *)(v18 + v68);
      *(_QWORD *)v69 = *v70;
      *((_QWORD *)v69 + 1) = v70[1];
      v71 = v186[12];
      v72 = &v17[v71];
      v73 = (_QWORD *)(v18 + v71);
      *(_QWORD *)v72 = *v73;
      *((_QWORD *)v72 + 1) = v73[1];
      v74 = v186[13];
      __dst = &v17[v74];
      v75 = (const void *)(v18 + v74);
      v76 = type metadata accessor for URL(0);
      v77 = *(_QWORD *)(v76 - 8);
      v78 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v77 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v78(v75, 1, v76))
      {
        v79 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
        memcpy(__dst, v75, *(_QWORD *)(*(_QWORD *)(v79 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, const void *, uint64_t))(v77 + 16))(__dst, v75, v76);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v77 + 56))(__dst, 0, 1, v76);
      }
      v80 = v186[14];
      v81 = &v17[v80];
      v82 = (_QWORD *)(v18 + v80);
      *(_QWORD *)v81 = *v82;
      *((_QWORD *)v81 + 1) = v82[1];
      v83 = v186[15];
      v84 = &v17[v83];
      v85 = (_QWORD *)(v18 + v83);
      *(_QWORD *)v84 = *v85;
      *((_QWORD *)v84 + 1) = v85[1];
      v86 = v186[16];
      v87 = &v17[v86];
      v88 = (const void *)(v18 + v86);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v78(v88, 1, v76))
      {
        v89 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
        memcpy(v87, v88, *(_QWORD *)(*(_QWORD *)(v89 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, const void *, uint64_t))(v77 + 16))(v87, v88, v76);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v77 + 56))(v87, 0, 1, v76);
      }
      v90 = v186[17];
      v91 = &v17[v90];
      v92 = (const void *)(v18 + v90);
      if (v78((const void *)(v18 + v90), 1, v76))
      {
        v93 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
        memcpy(v91, v92, *(_QWORD *)(*(_QWORD *)(v93 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, const void *, uint64_t))(v77 + 16))(v91, v92, v76);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v77 + 56))(v91, 0, 1, v76);
      }
      v17[v186[18]] = *(_BYTE *)(v18 + v186[18]);
      v94 = v180[7];
      v95 = &v177[v94];
      v96 = (const void *)(v181 + v94);
      if (v78((const void *)(v181 + v94), 1, v76))
      {
        v97 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
        memcpy(v95, v96, *(_QWORD *)(*(_QWORD *)(v97 - 8) + 64));
        (*(void (**)(char *, uint64_t, uint64_t))(v77 + 16))(&v177[v180[8]], v181 + v180[8], v76);
      }
      else
      {
        v98 = *(void (**)(char *, const void *, uint64_t))(v77 + 16);
        v98(v95, v96, v76);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v77 + 56))(v95, 0, 1, v76);
        v98(&v177[v180[8]], (const void *)(v181 + v180[8]), v76);
      }
      *(_QWORD *)&v177[v180[9]] = *(_QWORD *)(v181 + v180[9]);
      v99 = v180[10];
      v100 = &v177[v99];
      v101 = (_QWORD *)(v181 + v99);
      *(_QWORD *)v100 = *v101;
      *((_QWORD *)v100 + 1) = v101[1];
      v102 = v180[11];
      v103 = &v177[v102];
      v104 = (_QWORD *)(v181 + v102);
      *(_QWORD *)v103 = *v104;
      *((_QWORD *)v103 + 1) = v104[1];
      *(_QWORD *)&v177[v180[12]] = *(_QWORD *)(v181 + v180[12]);
      v177[v180[13]] = *(_BYTE *)(v181 + v180[13]);
      v177[v180[14]] = *(_BYTE *)(v181 + v180[14]);
      v105 = v180[15];
      v106 = &v177[v105];
      v107 = v181 + v105;
      v108 = *(_BYTE *)(v107 + 8);
      *(_QWORD *)v106 = *(_QWORD *)v107;
      v106[8] = v108;
      v109 = v180[16];
      v110 = &v177[v109];
      v111 = (_QWORD *)(v181 + v109);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      if (v178(v111, 1, v179))
      {
        v112 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
        memcpy(v110, v111, *(_QWORD *)(*(_QWORD *)(v112 - 8) + 64));
      }
      else
      {
        *(_QWORD *)v110 = *v111;
        *((_QWORD *)v110 + 1) = v111[1];
        v113 = *((unsigned __int8 *)v111 + 32);
        swift_bridgeObjectRetain();
        if (v113 == 255)
        {
          v116 = *((_OWORD *)v111 + 1);
          v110[32] = *((_BYTE *)v111 + 32);
          *((_OWORD *)v110 + 1) = v116;
        }
        else
        {
          v114 = v111[2];
          v115 = v111[3];
          sub_3D464(v114, v115, v113);
          *((_QWORD *)v110 + 2) = v114;
          *((_QWORD *)v110 + 3) = v115;
          v110[32] = v113;
        }
        *((_QWORD *)v110 + 5) = v111[5];
        *((_QWORD *)v110 + 6) = v111[6];
        v117 = (id *)(v111 + 7);
        v118 = *((unsigned __int8 *)v111 + 64);
        if (v118 == 255)
        {
          v120 = *v117;
          v110[64] = *((_BYTE *)v111 + 64);
          *((_QWORD *)v110 + 7) = v120;
        }
        else
        {
          v119 = *v117;
          sub_3D47C(*v117, *((_BYTE *)v111 + 64));
          *((_QWORD *)v110 + 7) = v119;
          v110[64] = v118;
        }
        v121 = (id *)(v111 + 9);
        v122 = *((unsigned __int8 *)v111 + 80);
        if (v122 == 255)
        {
          v124 = *v121;
          v110[80] = *((_BYTE *)v111 + 80);
          *((_QWORD *)v110 + 9) = v124;
        }
        else
        {
          v123 = *v121;
          sub_3D47C(*v121, *((_BYTE *)v111 + 80));
          *((_QWORD *)v110 + 9) = v123;
          v110[80] = v122;
        }
        v125 = (id *)(v111 + 11);
        v126 = *((unsigned __int8 *)v111 + 96);
        if (v126 == 255)
        {
          v128 = *v125;
          v110[96] = *((_BYTE *)v111 + 96);
          *((_QWORD *)v110 + 11) = v128;
        }
        else
        {
          v127 = *v125;
          sub_3D47C(*v125, *((_BYTE *)v111 + 96));
          *((_QWORD *)v110 + 11) = v127;
          v110[96] = v126;
        }
        v129 = (id *)(v111 + 13);
        v130 = *((unsigned __int8 *)v111 + 112);
        if (v130 == 255)
        {
          v132 = *v129;
          v110[112] = *((_BYTE *)v111 + 112);
          *((_QWORD *)v110 + 13) = v132;
        }
        else
        {
          v131 = *v129;
          sub_3D47C(*v129, *((_BYTE *)v111 + 112));
          *((_QWORD *)v110 + 13) = v131;
          v110[112] = v130;
        }
        v133 = (id *)(v111 + 15);
        v134 = *((unsigned __int8 *)v111 + 128);
        if (v134 == 255)
        {
          v136 = *v133;
          v110[128] = *((_BYTE *)v111 + 128);
          *((_QWORD *)v110 + 15) = v136;
        }
        else
        {
          v135 = *v133;
          sub_3D47C(*v133, *((_BYTE *)v111 + 128));
          *((_QWORD *)v110 + 15) = v135;
          v110[128] = v134;
        }
        v110[129] = *((_BYTE *)v111 + 129);
        v137 = v179[11];
        v138 = &v110[v137];
        v139 = (char *)v111 + v137;
        v140 = type metadata accessor for ArtworkCrop(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v140 - 8) + 16))(v138, v139, v140);
        v141 = v179[12];
        v142 = &v110[v141];
        v143 = (_QWORD *)((char *)v111 + v141);
        *(_QWORD *)v142 = *v143;
        *((_QWORD *)v142 + 1) = v143[1];
        v110[v179[13]] = *((_BYTE *)v111 + v179[13]);
        v110[v179[14]] = *((_BYTE *)v111 + v179[14]);
        v110[v179[15]] = *((_BYTE *)v111 + v179[15]);
        v144 = v179[16];
        v145 = &v110[v144];
        v146 = (_QWORD *)((char *)v111 + v144);
        *(_QWORD *)v145 = *v146;
        *((_QWORD *)v145 + 1) = v146[1];
        v147 = *(void (**)(char *, _QWORD, uint64_t, int *))(v175 + 56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v147(v110, 0, 1, v179);
      }
      v148 = v180[17];
      v149 = &v177[v148];
      v150 = (_QWORD *)(v181 + v148);
      *(_QWORD *)v149 = *v150;
      *((_QWORD *)v149 + 1) = v150[1];
      v151 = v180[18];
      v152 = &v177[v151];
      v153 = (uint64_t *)(v181 + v151);
      v154 = *v153;
      v152[8] = *((_BYTE *)v153 + 8);
      *(_QWORD *)v152 = v154;
      v155 = v180[19];
      v156 = &v177[v155];
      v157 = (uint64_t *)(v181 + v155);
      v158 = *v157;
      v156[8] = *((_BYTE *)v157 + 8);
      *(_QWORD *)v156 = v158;
      v177[v180[20]] = *(_BYTE *)(v181 + v180[20]);
      v177[v180[21]] = *(_BYTE *)(v181 + v180[21]);
      v159 = v180[22];
      v160 = &v177[v159];
      v161 = (const void *)(v181 + v159);
      v162 = type metadata accessor for TranscriptRequestInformation(0);
      v163 = *(_QWORD *)(v162 - 8);
      v164 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v163 + 48);
      swift_bridgeObjectRetain();
      if (v164(v161, 1, v162))
      {
        v165 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2C40);
        memcpy(v160, v161, *(_QWORD *)(*(_QWORD *)(v165 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, const void *, uint64_t))(v163 + 16))(v160, v161, v162);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v163 + 56))(v160, 0, 1, v162);
      }
      a2 = v184;
      a1 = v185;
      v14 = v182;
      a3 = v183;
      v13 = v177;
      v15 = 0;
    }
    swift_storeEnumTagMultiPayload(v13, v14, v15);
  }
  v166 = a3[6];
  v167 = a1 + v166;
  v168 = (uint64_t *)(a2 + v166);
  v169 = *v168;
  *(_BYTE *)(v167 + 8) = *((_BYTE *)v168 + 8);
  *(_QWORD *)v167 = v169;
  v170 = a3[7];
  v171 = a1 + v170;
  v172 = (uint64_t *)(a2 + v170);
  v173 = *v172;
  *(_BYTE *)(v171 + 8) = *((_BYTE *)v172 + 8);
  *(_QWORD *)v171 = v173;
  return a1;
}

uint64_t initializeWithTake for ShareSheetAction(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  int *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  unsigned int (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  void (*v44)(char *, char *, uint64_t);
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  _OWORD *v49;
  _OWORD *v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int (*v76)(char *, uint64_t, int *);
  int *v77;
  int *v78;
  uint64_t v79;
  int *v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int (*v83)(char *, uint64_t, uint64_t);
  char *v84;
  uint64_t v85;

  v6 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  v10 = type metadata accessor for ShareSheetContentSource(0);
  if (swift_getEnumCaseMultiPayload(v9, v10))
  {
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    v79 = v10;
    v80 = a3;
    v81 = a2;
    *v8 = *v9;
    *(_OWORD *)(v8 + 1) = *(_OWORD *)(v9 + 1);
    v77 = (int *)type metadata accessor for EpisodeOffer(0);
    v11 = v77[6];
    v12 = (char *)v8 + v11;
    v13 = (char *)v9 + v11;
    *(_QWORD *)v12 = *(_QWORD *)((char *)v9 + v11);
    *(_OWORD *)(v12 + 8) = *(_OWORD *)((char *)v9 + v11 + 8);
    v12[24] = *((_BYTE *)v9 + v11 + 24);
    v14 = (int *)type metadata accessor for ShowOffer(0);
    v15 = v14[7];
    v16 = &v12[v15];
    v17 = &v13[v15];
    v18 = (int *)type metadata accessor for ArtworkModel(0);
    v19 = *((_QWORD *)v18 - 1);
    v76 = *(unsigned int (**)(char *, uint64_t, int *))(v19 + 48);
    v82 = a1;
    v78 = v18;
    if (v76(v17, 1, v18))
    {
      v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      v21 = *((_OWORD *)v17 + 1);
      *(_OWORD *)v16 = *(_OWORD *)v17;
      *((_OWORD *)v16 + 1) = v21;
      v16[32] = v17[32];
      *(_OWORD *)(v16 + 40) = *(_OWORD *)(v17 + 40);
      *((_QWORD *)v16 + 7) = *((_QWORD *)v17 + 7);
      v16[64] = v17[64];
      *(_OWORD *)(v16 + 113) = *(_OWORD *)(v17 + 113);
      *(_OWORD *)(v16 + 104) = *(_OWORD *)(v17 + 104);
      *(_OWORD *)(v16 + 88) = *(_OWORD *)(v17 + 88);
      *(_OWORD *)(v16 + 72) = *(_OWORD *)(v17 + 72);
      v16[129] = v17[129];
      v22 = v18[11];
      v23 = &v16[v22];
      v84 = &v17[v22];
      v24 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v23, v84, v24);
      *(_OWORD *)&v16[v18[12]] = *(_OWORD *)&v17[v18[12]];
      v16[v18[13]] = v17[v18[13]];
      v16[v18[14]] = v17[v18[14]];
      v16[v18[15]] = v17[v18[15]];
      *(_OWORD *)&v16[v18[16]] = *(_OWORD *)&v17[v18[16]];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v19 + 56))(v16, 0, 1, v18);
    }
    *(_OWORD *)&v12[v14[8]] = *(_OWORD *)&v13[v14[8]];
    *(_OWORD *)&v12[v14[9]] = *(_OWORD *)&v13[v14[9]];
    v12[v14[10]] = v13[v14[10]];
    *(_OWORD *)&v12[v14[11]] = *(_OWORD *)&v13[v14[11]];
    *(_OWORD *)&v12[v14[12]] = *(_OWORD *)&v13[v14[12]];
    v25 = v14[13];
    v26 = &v12[v25];
    v27 = &v13[v25];
    v28 = type metadata accessor for URL(0);
    v29 = *(_QWORD *)(v28 - 8);
    v83 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48);
    v85 = v29;
    if (v83(v27, 1, v28))
    {
      v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
      memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v26, v27, v28);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
    }
    *(_OWORD *)&v12[v14[14]] = *(_OWORD *)&v13[v14[14]];
    *(_OWORD *)&v12[v14[15]] = *(_OWORD *)&v13[v14[15]];
    v31 = v14[16];
    v32 = &v12[v31];
    v33 = &v13[v31];
    v34 = v83;
    if (v83(&v13[v31], 1, v28))
    {
      v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
      memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v85 + 32))(v32, v33, v28);
      v34 = v83;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v85 + 56))(v32, 0, 1, v28);
    }
    v36 = v14[17];
    v37 = &v12[v36];
    v38 = &v13[v36];
    if (v34(&v13[v36], 1, v28))
    {
      v39 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
      memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v85 + 32))(v37, v38, v28);
      v34 = v83;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v85 + 56))(v37, 0, 1, v28);
    }
    v12[v14[18]] = v13[v14[18]];
    v40 = v77[7];
    v41 = (char *)v8 + v40;
    v42 = (char *)v9 + v40;
    if (v34((char *)v9 + v40, 1, v28))
    {
      v43 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
      memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
      v44 = *(void (**)(char *, char *, uint64_t))(v85 + 32);
    }
    else
    {
      v44 = *(void (**)(char *, char *, uint64_t))(v85 + 32);
      v44(v41, v42, v28);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v85 + 56))(v41, 0, 1, v28);
    }
    a2 = v81;
    v44((char *)v8 + v77[8], (char *)v9 + v77[8], v28);
    *(_QWORD *)((char *)v8 + v77[9]) = *(_QWORD *)((char *)v9 + v77[9]);
    *(_OWORD *)((char *)v8 + v77[10]) = *(_OWORD *)((char *)v9 + v77[10]);
    *(_OWORD *)((char *)v8 + v77[11]) = *(_OWORD *)((char *)v9 + v77[11]);
    *(_QWORD *)((char *)v8 + v77[12]) = *(_QWORD *)((char *)v9 + v77[12]);
    *((_BYTE *)v8 + v77[13]) = *((_BYTE *)v9 + v77[13]);
    *((_BYTE *)v8 + v77[14]) = *((_BYTE *)v9 + v77[14]);
    v45 = v77[15];
    v46 = (char *)v8 + v45;
    v47 = (char *)v9 + v45;
    *(_QWORD *)v46 = *(_QWORD *)v47;
    v46[8] = v47[8];
    v48 = v77[16];
    v49 = (_OWORD *)((char *)v8 + v48);
    v50 = (_OWORD *)((char *)v9 + v48);
    if (v76((char *)v9 + v48, 1, v78))
    {
      v51 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
      memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
    }
    else
    {
      v52 = v50[1];
      *v49 = *v50;
      v49[1] = v52;
      *((_BYTE *)v49 + 32) = *((_BYTE *)v50 + 32);
      *(_OWORD *)((char *)v49 + 40) = *(_OWORD *)((char *)v50 + 40);
      *((_QWORD *)v49 + 7) = *((_QWORD *)v50 + 7);
      *((_BYTE *)v49 + 64) = *((_BYTE *)v50 + 64);
      *(_OWORD *)((char *)v49 + 113) = *(_OWORD *)((char *)v50 + 113);
      *(_OWORD *)((char *)v49 + 104) = *(_OWORD *)((char *)v50 + 104);
      *(_OWORD *)((char *)v49 + 88) = *(_OWORD *)((char *)v50 + 88);
      *(_OWORD *)((char *)v49 + 72) = *(_OWORD *)((char *)v50 + 72);
      *((_BYTE *)v49 + 129) = *((_BYTE *)v50 + 129);
      v53 = v78[11];
      v54 = (char *)v49 + v53;
      v55 = (char *)v50 + v53;
      v56 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v56 - 8) + 32))(v54, v55, v56);
      *(_OWORD *)((char *)v49 + v78[12]) = *(_OWORD *)((char *)v50 + v78[12]);
      *((_BYTE *)v49 + v78[13]) = *((_BYTE *)v50 + v78[13]);
      *((_BYTE *)v49 + v78[14]) = *((_BYTE *)v50 + v78[14]);
      *((_BYTE *)v49 + v78[15]) = *((_BYTE *)v50 + v78[15]);
      *(_OWORD *)((char *)v49 + v78[16]) = *(_OWORD *)((char *)v50 + v78[16]);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v19 + 56))(v49, 0, 1, v78);
    }
    *(_OWORD *)((char *)v8 + v77[17]) = *(_OWORD *)((char *)v9 + v77[17]);
    v57 = v77[18];
    v58 = (char *)v8 + v57;
    v59 = (char *)v9 + v57;
    v58[8] = v59[8];
    *(_QWORD *)v58 = *(_QWORD *)v59;
    v60 = v77[19];
    v61 = (char *)v8 + v60;
    v62 = (char *)v9 + v60;
    *(_QWORD *)v61 = *(_QWORD *)v62;
    v61[8] = v62[8];
    *((_BYTE *)v8 + v77[20]) = *((_BYTE *)v9 + v77[20]);
    *((_BYTE *)v8 + v77[21]) = *((_BYTE *)v9 + v77[21]);
    v63 = v77[22];
    v64 = (char *)v8 + v63;
    v65 = (char *)v9 + v63;
    v66 = type metadata accessor for TranscriptRequestInformation(0);
    v67 = *(_QWORD *)(v66 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v67 + 48))(v65, 1, v66))
    {
      v68 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2C40);
      memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v67 + 32))(v64, v65, v66);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v67 + 56))(v64, 0, 1, v66);
    }
    a1 = v82;
    swift_storeEnumTagMultiPayload(v8, v79, 0);
    a3 = v80;
  }
  v69 = a3[6];
  v70 = a3[7];
  v71 = a1 + v69;
  v72 = a2 + v69;
  *(_QWORD *)v71 = *(_QWORD *)v72;
  *(_BYTE *)(v71 + 8) = *(_BYTE *)(v72 + 8);
  v73 = a1 + v70;
  v74 = a2 + v70;
  *(_QWORD *)v73 = *(_QWORD *)v74;
  *(_BYTE *)(v73 + 8) = *(_BYTE *)(v74 + 8);
  return a1;
}

uint64_t assignWithTake for ShareSheetAction(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  int *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  _OWORD *v46;
  _OWORD *v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v73;
  unsigned int (*v74)(char *, uint64_t, int *);
  uint64_t v75;
  int *v76;
  int *v77;
  uint64_t v78;
  int *v79;
  char *__dst;
  char *v81;
  uint64_t v82;
  char *v83;
  unsigned int (*v84)(char *, uint64_t, uint64_t);

  v6 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  if (a1 != a2)
  {
    v7 = a3[5];
    v8 = (_QWORD *)(a1 + v7);
    v9 = (_QWORD *)(a2 + v7);
    sub_12B42C(a1 + v7);
    v10 = type metadata accessor for ShareSheetContentSource(0);
    if (swift_getEnumCaseMultiPayload(v9, v10))
    {
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
    else
    {
      v75 = a2;
      v78 = v10;
      v79 = a3;
      *v8 = *v9;
      *(_OWORD *)(v8 + 1) = *(_OWORD *)(v9 + 1);
      v77 = (int *)type metadata accessor for EpisodeOffer(0);
      v11 = v77[6];
      v12 = (char *)v8 + v11;
      v13 = (char *)v9 + v11;
      *(_QWORD *)v12 = *(_QWORD *)((char *)v9 + v11);
      *(_OWORD *)(v12 + 8) = *(_OWORD *)((char *)v9 + v11 + 8);
      v12[24] = *((_BYTE *)v9 + v11 + 24);
      v14 = (int *)type metadata accessor for ShowOffer(0);
      v15 = v14[7];
      v16 = &v12[v15];
      v17 = &v13[v15];
      v18 = (int *)type metadata accessor for ArtworkModel(0);
      v19 = *((_QWORD *)v18 - 1);
      v74 = *(unsigned int (**)(char *, uint64_t, int *))(v19 + 48);
      v76 = v18;
      v73 = v19;
      if (v74(v17, 1, v18))
      {
        v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
        memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      }
      else
      {
        v21 = *((_OWORD *)v17 + 1);
        *(_OWORD *)v16 = *(_OWORD *)v17;
        *((_OWORD *)v16 + 1) = v21;
        v16[32] = v17[32];
        *(_OWORD *)(v16 + 40) = *(_OWORD *)(v17 + 40);
        *((_QWORD *)v16 + 7) = *((_QWORD *)v17 + 7);
        v16[64] = v17[64];
        *(_OWORD *)(v16 + 113) = *(_OWORD *)(v17 + 113);
        *(_OWORD *)(v16 + 104) = *(_OWORD *)(v17 + 104);
        *(_OWORD *)(v16 + 88) = *(_OWORD *)(v17 + 88);
        *(_OWORD *)(v16 + 72) = *(_OWORD *)(v17 + 72);
        v16[129] = v17[129];
        v22 = v18[11];
        v81 = &v17[v22];
        v83 = &v16[v22];
        v23 = type metadata accessor for ArtworkCrop(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v83, v81, v23);
        *(_OWORD *)&v16[v18[12]] = *(_OWORD *)&v17[v18[12]];
        v16[v18[13]] = v17[v18[13]];
        v16[v18[14]] = v17[v18[14]];
        v16[v18[15]] = v17[v18[15]];
        *(_OWORD *)&v16[v18[16]] = *(_OWORD *)&v17[v18[16]];
        (*(void (**)(char *, _QWORD, uint64_t, int *))(v19 + 56))(v16, 0, 1, v18);
      }
      *(_OWORD *)&v12[v14[8]] = *(_OWORD *)&v13[v14[8]];
      *(_OWORD *)&v12[v14[9]] = *(_OWORD *)&v13[v14[9]];
      v12[v14[10]] = v13[v14[10]];
      *(_OWORD *)&v12[v14[11]] = *(_OWORD *)&v13[v14[11]];
      *(_OWORD *)&v12[v14[12]] = *(_OWORD *)&v13[v14[12]];
      v24 = v14[13];
      __dst = &v12[v24];
      v25 = &v13[v24];
      v26 = type metadata accessor for URL(0);
      v27 = *(_QWORD *)(v26 - 8);
      v84 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48);
      a2 = v75;
      v82 = v27;
      if (v84(v25, 1, v26))
      {
        v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
        memcpy(__dst, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v27 + 32))(__dst, v25, v26);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(__dst, 0, 1, v26);
      }
      *(_OWORD *)&v12[v14[14]] = *(_OWORD *)&v13[v14[14]];
      *(_OWORD *)&v12[v14[15]] = *(_OWORD *)&v13[v14[15]];
      v29 = v14[16];
      v30 = &v12[v29];
      v31 = &v13[v29];
      if (v84(&v13[v29], 1, v26))
      {
        v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
        memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v82 + 32))(v30, v31, v26);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v82 + 56))(v30, 0, 1, v26);
      }
      v33 = v14[17];
      v34 = &v12[v33];
      v35 = &v13[v33];
      if (v84(&v13[v33], 1, v26))
      {
        v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
        memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v82 + 32))(v34, v35, v26);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v82 + 56))(v34, 0, 1, v26);
      }
      v12[v14[18]] = v13[v14[18]];
      v37 = v77[7];
      v38 = (char *)v8 + v37;
      v39 = (char *)v9 + v37;
      if (v84((char *)v9 + v37, 1, v26))
      {
        v40 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
        memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
        (*(void (**)(char *, char *, uint64_t))(v82 + 32))((char *)v8 + v77[8], (char *)v9 + v77[8], v26);
      }
      else
      {
        v41 = *(void (**)(char *, char *, uint64_t))(v82 + 32);
        v41(v38, v39, v26);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v82 + 56))(v38, 0, 1, v26);
        v41((char *)v8 + v77[8], (char *)v9 + v77[8], v26);
      }
      *(_QWORD *)((char *)v8 + v77[9]) = *(_QWORD *)((char *)v9 + v77[9]);
      *(_OWORD *)((char *)v8 + v77[10]) = *(_OWORD *)((char *)v9 + v77[10]);
      *(_OWORD *)((char *)v8 + v77[11]) = *(_OWORD *)((char *)v9 + v77[11]);
      *(_QWORD *)((char *)v8 + v77[12]) = *(_QWORD *)((char *)v9 + v77[12]);
      *((_BYTE *)v8 + v77[13]) = *((_BYTE *)v9 + v77[13]);
      *((_BYTE *)v8 + v77[14]) = *((_BYTE *)v9 + v77[14]);
      v42 = v77[15];
      v43 = (char *)v8 + v42;
      v44 = (char *)v9 + v42;
      *(_QWORD *)v43 = *(_QWORD *)v44;
      v43[8] = v44[8];
      v45 = v77[16];
      v46 = (_OWORD *)((char *)v8 + v45);
      v47 = (_OWORD *)((char *)v9 + v45);
      if (v74((char *)v9 + v45, 1, v76))
      {
        v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
        memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
      }
      else
      {
        v49 = v47[1];
        *v46 = *v47;
        v46[1] = v49;
        *((_BYTE *)v46 + 32) = *((_BYTE *)v47 + 32);
        *(_OWORD *)((char *)v46 + 40) = *(_OWORD *)((char *)v47 + 40);
        *((_QWORD *)v46 + 7) = *((_QWORD *)v47 + 7);
        *((_BYTE *)v46 + 64) = *((_BYTE *)v47 + 64);
        *(_OWORD *)((char *)v46 + 113) = *(_OWORD *)((char *)v47 + 113);
        *(_OWORD *)((char *)v46 + 104) = *(_OWORD *)((char *)v47 + 104);
        *(_OWORD *)((char *)v46 + 88) = *(_OWORD *)((char *)v47 + 88);
        *(_OWORD *)((char *)v46 + 72) = *(_OWORD *)((char *)v47 + 72);
        *((_BYTE *)v46 + 129) = *((_BYTE *)v47 + 129);
        v50 = v76[11];
        v51 = (char *)v46 + v50;
        v52 = (char *)v47 + v50;
        v53 = type metadata accessor for ArtworkCrop(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v53 - 8) + 32))(v51, v52, v53);
        *(_OWORD *)((char *)v46 + v76[12]) = *(_OWORD *)((char *)v47 + v76[12]);
        *((_BYTE *)v46 + v76[13]) = *((_BYTE *)v47 + v76[13]);
        *((_BYTE *)v46 + v76[14]) = *((_BYTE *)v47 + v76[14]);
        *((_BYTE *)v46 + v76[15]) = *((_BYTE *)v47 + v76[15]);
        *(_OWORD *)((char *)v46 + v76[16]) = *(_OWORD *)((char *)v47 + v76[16]);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v73 + 56))(v46, 0, 1, v76);
      }
      *(_OWORD *)((char *)v8 + v77[17]) = *(_OWORD *)((char *)v9 + v77[17]);
      v54 = v77[18];
      v55 = (char *)v8 + v54;
      v56 = (char *)v9 + v54;
      v55[8] = v56[8];
      *(_QWORD *)v55 = *(_QWORD *)v56;
      v57 = v77[19];
      v58 = (char *)v8 + v57;
      v59 = (char *)v9 + v57;
      *(_QWORD *)v58 = *(_QWORD *)v59;
      v58[8] = v59[8];
      *((_BYTE *)v8 + v77[20]) = *((_BYTE *)v9 + v77[20]);
      *((_BYTE *)v8 + v77[21]) = *((_BYTE *)v9 + v77[21]);
      v60 = v77[22];
      v61 = (char *)v8 + v60;
      v62 = (char *)v9 + v60;
      v63 = type metadata accessor for TranscriptRequestInformation(0);
      v64 = *(_QWORD *)(v63 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48))(v62, 1, v63))
      {
        v65 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2C40);
        memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v64 + 32))(v61, v62, v63);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v64 + 56))(v61, 0, 1, v63);
      }
      a3 = v79;
      swift_storeEnumTagMultiPayload(v8, v78, 0);
    }
  }
  v66 = a3[6];
  v67 = a3[7];
  v68 = a1 + v66;
  v69 = a2 + v66;
  *(_QWORD *)v68 = *(_QWORD *)v69;
  *(_BYTE *)(v68 + 8) = *(_BYTE *)(v69 + 8);
  v70 = a1 + v67;
  v71 = a2 + v67;
  *(_QWORD *)v70 = *(_QWORD *)v71;
  *(_BYTE *)(v70 + 8) = *(_BYTE *)(v71 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for ShareSheetAction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_12E964);
}

uint64_t sub_12E964(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = type metadata accessor for ActionMetrics(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = type metadata accessor for ShareSheetContentSource(0);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for ShareSheetAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_12E9E4);
}

uint64_t sub_12E9E4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = type metadata accessor for ActionMetrics(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = type metadata accessor for ShareSheetContentSource(0);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t sub_12EA60(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[4];

  result = type metadata accessor for ActionMetrics(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for ShareSheetContentSource(319);
    if (v4 <= 0x3F)
    {
      v5[1] = *(_QWORD *)(result - 8) + 64;
      v5[2] = "\t";
      v5[3] = "\t";
      swift_initStructMetadata(a1, 256, 4, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

char *initializeBufferWithCopyOfBuffer for ShareSheetContentSource(char *a1, char **a2, uint64_t a3)
{
  int v5;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unsigned int (*v20)(_QWORD *, uint64_t, int *);
  uint64_t v21;
  char *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  id *v27;
  int v28;
  id v29;
  id *v30;
  int v31;
  id v32;
  id *v33;
  int v34;
  id v35;
  id *v36;
  int v37;
  id v38;
  id *v39;
  int v40;
  id v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  void (*v54)(char *, _QWORD, uint64_t, int *);
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int (*v76)(char *, uint64_t, uint64_t);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  void (*v99)(char *, char *, uint64_t);
  uint64_t v100;
  char *v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  char *v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  id *v119;
  int v120;
  id v121;
  id *v122;
  int v123;
  id v124;
  id *v125;
  int v126;
  id v127;
  id *v128;
  int v129;
  id v130;
  id *v131;
  int v132;
  id v133;
  uint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  _QWORD *v144;
  uint64_t v145;
  void (*v146)(char *, _QWORD, uint64_t, int *);
  uint64_t v147;
  char *v148;
  _QWORD *v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  uint64_t v154;
  char *v155;
  char *v156;
  uint64_t v157;
  char *v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  unsigned int (*v162)(char *, uint64_t, uint64_t);
  uint64_t v163;
  uint64_t v165;
  char *__dst;
  unsigned int (*v167)(_QWORD *, uint64_t, int *);
  int *v168;
  char **v169;
  uint64_t v170;
  int *v171;
  char *v172;
  int *v173;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = &v12[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      v7 = *a2;
      *(_QWORD *)a1 = *a2;
      v8 = v7;
      v9 = a1;
      v10 = a3;
      v11 = 1;
    }
    else
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_QWORD *)a1 + 2) = a2[2];
      v168 = (int *)type metadata accessor for EpisodeOffer(0);
      v13 = v168[6];
      v14 = &a1[v13];
      v15 = (char *)a2 + v13;
      *(_OWORD *)v14 = *(_OWORD *)((char *)a2 + v13);
      *((_QWORD *)v14 + 2) = *(char **)((char *)a2 + v13 + 16);
      v14[24] = *((_BYTE *)a2 + v13 + 24);
      v172 = &a1[v13];
      v173 = (int *)type metadata accessor for ShowOffer(0);
      v16 = v173[7];
      v17 = &v14[v16];
      v18 = &v15[v16];
      v19 = type metadata accessor for ArtworkModel(0);
      v165 = *(_QWORD *)(v19 - 8);
      v20 = *(unsigned int (**)(_QWORD *, uint64_t, int *))(v165 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v171 = (int *)v19;
      v167 = v20;
      v169 = a2;
      v170 = a3;
      if (v20(v18, 1, (int *)v19))
      {
        v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
        memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
        v22 = v172;
      }
      else
      {
        v23 = *((_QWORD *)v18 + 1);
        *(_QWORD *)v17 = *(_QWORD *)v18;
        *((_QWORD *)v17 + 1) = v23;
        v24 = v18[32];
        swift_bridgeObjectRetain();
        if (v24 == 255)
        {
          *((_OWORD *)v17 + 1) = *((_OWORD *)v18 + 1);
          v17[32] = v18[32];
        }
        else
        {
          v26 = *((_QWORD *)v18 + 2);
          v25 = *((_QWORD *)v18 + 3);
          sub_3D464(v26, v25, v24);
          *((_QWORD *)v17 + 2) = v26;
          *((_QWORD *)v17 + 3) = v25;
          v17[32] = v24;
        }
        v22 = v172;
        *(_OWORD *)(v17 + 40) = *(_OWORD *)(v18 + 40);
        v27 = (id *)(v18 + 56);
        v28 = v18[64];
        if (v28 == 255)
        {
          *((_QWORD *)v17 + 7) = *v27;
          v17[64] = v18[64];
        }
        else
        {
          v29 = *v27;
          sub_3D47C(*v27, v18[64]);
          *((_QWORD *)v17 + 7) = v29;
          v17[64] = v28;
        }
        v30 = (id *)(v18 + 72);
        v31 = v18[80];
        if (v31 == 255)
        {
          *((_QWORD *)v17 + 9) = *v30;
          v17[80] = v18[80];
        }
        else
        {
          v32 = *v30;
          sub_3D47C(*v30, v18[80]);
          *((_QWORD *)v17 + 9) = v32;
          v17[80] = v31;
        }
        v33 = (id *)(v18 + 88);
        v34 = v18[96];
        if (v34 == 255)
        {
          *((_QWORD *)v17 + 11) = *v33;
          v17[96] = v18[96];
        }
        else
        {
          v35 = *v33;
          sub_3D47C(*v33, v18[96]);
          *((_QWORD *)v17 + 11) = v35;
          v17[96] = v34;
        }
        v36 = (id *)(v18 + 104);
        v37 = v18[112];
        if (v37 == 255)
        {
          *((_QWORD *)v17 + 13) = *v36;
          v17[112] = v18[112];
        }
        else
        {
          v38 = *v36;
          sub_3D47C(*v36, v18[112]);
          *((_QWORD *)v17 + 13) = v38;
          v17[112] = v37;
        }
        v39 = (id *)(v18 + 120);
        v40 = v18[128];
        if (v40 == 255)
        {
          *((_QWORD *)v17 + 15) = *v39;
          v17[128] = v18[128];
        }
        else
        {
          v41 = *v39;
          sub_3D47C(*v39, v18[128]);
          *((_QWORD *)v17 + 15) = v41;
          v17[128] = v40;
        }
        v17[129] = v18[129];
        v42 = v171[11];
        v43 = &v17[v42];
        v44 = &v18[v42];
        v45 = type metadata accessor for ArtworkCrop(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v45 - 8) + 16))(v43, v44, v45);
        v46 = v171[12];
        v47 = &v17[v46];
        v48 = &v18[v46];
        v49 = *((_QWORD *)v48 + 1);
        *(_QWORD *)v47 = *(_QWORD *)v48;
        *((_QWORD *)v47 + 1) = v49;
        v17[v171[13]] = v18[v171[13]];
        v17[v171[14]] = v18[v171[14]];
        v17[v171[15]] = v18[v171[15]];
        v50 = v171[16];
        v51 = &v17[v50];
        v52 = &v18[v50];
        v53 = *((_QWORD *)v52 + 1);
        *(_QWORD *)v51 = *(_QWORD *)v52;
        *((_QWORD *)v51 + 1) = v53;
        v54 = *(void (**)(char *, _QWORD, uint64_t, int *))(v165 + 56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v54(v17, 0, 1, v171);
      }
      v55 = v173[8];
      v56 = &v22[v55];
      v57 = &v15[v55];
      v58 = *((_QWORD *)v57 + 1);
      *(_QWORD *)v56 = *(_QWORD *)v57;
      *((_QWORD *)v56 + 1) = v58;
      v59 = v173[9];
      v60 = &v22[v59];
      v61 = &v15[v59];
      v62 = v22;
      v63 = *((_QWORD *)v61 + 1);
      *(_QWORD *)v60 = *(_QWORD *)v61;
      *((_QWORD *)v60 + 1) = v63;
      v62[v173[10]] = v15[v173[10]];
      v64 = v173[11];
      v65 = &v62[v64];
      v66 = &v15[v64];
      v67 = *((_QWORD *)v66 + 1);
      *(_QWORD *)v65 = *(_QWORD *)v66;
      *((_QWORD *)v65 + 1) = v67;
      v68 = v173[12];
      v69 = &v62[v68];
      v70 = &v15[v68];
      v71 = *((_QWORD *)v70 + 1);
      *(_QWORD *)v69 = *(_QWORD *)v70;
      *((_QWORD *)v69 + 1) = v71;
      v72 = v173[13];
      __dst = &v62[v72];
      v73 = &v15[v72];
      v74 = type metadata accessor for URL(0);
      v75 = *(_QWORD *)(v74 - 8);
      v76 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v75 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v76(v73, 1, v74))
      {
        v77 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
        memcpy(__dst, v73, *(_QWORD *)(*(_QWORD *)(v77 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v75 + 16))(__dst, v73, v74);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v75 + 56))(__dst, 0, 1, v74);
      }
      v78 = v75;
      v79 = v173[14];
      v80 = &v172[v79];
      v81 = &v15[v79];
      v82 = *((_QWORD *)v81 + 1);
      *(_QWORD *)v80 = *(_QWORD *)v81;
      *((_QWORD *)v80 + 1) = v82;
      v83 = v173[15];
      v84 = &v172[v83];
      v85 = &v15[v83];
      v86 = *((_QWORD *)v85 + 1);
      *(_QWORD *)v84 = *(_QWORD *)v85;
      *((_QWORD *)v84 + 1) = v86;
      v87 = v173[16];
      v88 = &v172[v87];
      v89 = &v15[v87];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v76(v89, 1, v74))
      {
        v90 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
        memcpy(v88, v89, *(_QWORD *)(*(_QWORD *)(v90 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v78 + 16))(v88, v89, v74);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v78 + 56))(v88, 0, 1, v74);
      }
      v91 = v173[17];
      v92 = &v172[v91];
      v93 = &v15[v91];
      if (v76(&v15[v91], 1, v74))
      {
        v94 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
        memcpy(v92, v93, *(_QWORD *)(*(_QWORD *)(v94 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v78 + 16))(v92, v93, v74);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v78 + 56))(v92, 0, 1, v74);
      }
      v172[v173[18]] = v15[v173[18]];
      v95 = v168[7];
      v96 = &a1[v95];
      v97 = (char *)v169 + v95;
      if (v76((char *)v169 + v95, 1, v74))
      {
        v98 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
        memcpy(v96, v97, *(_QWORD *)(*(_QWORD *)(v98 - 8) + 64));
        v99 = *(void (**)(char *, char *, uint64_t))(v78 + 16);
      }
      else
      {
        v99 = *(void (**)(char *, char *, uint64_t))(v78 + 16);
        v99(v96, v97, v74);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v78 + 56))(v96, 0, 1, v74);
      }
      v99(&a1[v168[8]], (char *)v169 + v168[8], v74);
      *(_QWORD *)&a1[v168[9]] = *(char **)((char *)v169 + v168[9]);
      v100 = v168[10];
      v101 = &a1[v100];
      v102 = (char **)((char *)v169 + v100);
      v103 = v102[1];
      *(_QWORD *)v101 = *v102;
      *((_QWORD *)v101 + 1) = v103;
      v104 = v168[11];
      v105 = &a1[v104];
      v106 = (char **)((char *)v169 + v104);
      v107 = v106[1];
      *(_QWORD *)v105 = *v106;
      *((_QWORD *)v105 + 1) = v107;
      *(_QWORD *)&a1[v168[12]] = *(char **)((char *)v169 + v168[12]);
      a1[v168[13]] = *((_BYTE *)v169 + v168[13]);
      a1[v168[14]] = *((_BYTE *)v169 + v168[14]);
      v108 = v168[15];
      v109 = &a1[v108];
      v110 = (char *)v169 + v108;
      *(_QWORD *)v109 = *(_QWORD *)v110;
      v109[8] = v110[8];
      v111 = v168[16];
      v112 = &a1[v111];
      v113 = (char **)((char *)v169 + v111);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      if (v167(v113, 1, v171))
      {
        v114 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
        memcpy(v112, v113, *(_QWORD *)(*(_QWORD *)(v114 - 8) + 64));
      }
      else
      {
        v115 = v113[1];
        *(_QWORD *)v112 = *v113;
        *((_QWORD *)v112 + 1) = v115;
        v116 = *((unsigned __int8 *)v113 + 32);
        swift_bridgeObjectRetain();
        if (v116 == 255)
        {
          *((_OWORD *)v112 + 1) = *((_OWORD *)v113 + 1);
          v112[32] = *((_BYTE *)v113 + 32);
        }
        else
        {
          v117 = v113[2];
          v118 = v113[3];
          sub_3D464(v117, v118, v116);
          *((_QWORD *)v112 + 2) = v117;
          *((_QWORD *)v112 + 3) = v118;
          v112[32] = v116;
        }
        *(_OWORD *)(v112 + 40) = *(_OWORD *)(v113 + 5);
        v119 = (id *)(v113 + 7);
        v120 = *((unsigned __int8 *)v113 + 64);
        if (v120 == 255)
        {
          *((_QWORD *)v112 + 7) = *v119;
          v112[64] = *((_BYTE *)v113 + 64);
        }
        else
        {
          v121 = *v119;
          sub_3D47C(*v119, *((_BYTE *)v113 + 64));
          *((_QWORD *)v112 + 7) = v121;
          v112[64] = v120;
        }
        v122 = (id *)(v113 + 9);
        v123 = *((unsigned __int8 *)v113 + 80);
        if (v123 == 255)
        {
          *((_QWORD *)v112 + 9) = *v122;
          v112[80] = *((_BYTE *)v113 + 80);
        }
        else
        {
          v124 = *v122;
          sub_3D47C(*v122, *((_BYTE *)v113 + 80));
          *((_QWORD *)v112 + 9) = v124;
          v112[80] = v123;
        }
        v125 = (id *)(v113 + 11);
        v126 = *((unsigned __int8 *)v113 + 96);
        if (v126 == 255)
        {
          *((_QWORD *)v112 + 11) = *v125;
          v112[96] = *((_BYTE *)v113 + 96);
        }
        else
        {
          v127 = *v125;
          sub_3D47C(*v125, *((_BYTE *)v113 + 96));
          *((_QWORD *)v112 + 11) = v127;
          v112[96] = v126;
        }
        v128 = (id *)(v113 + 13);
        v129 = *((unsigned __int8 *)v113 + 112);
        if (v129 == 255)
        {
          *((_QWORD *)v112 + 13) = *v128;
          v112[112] = *((_BYTE *)v113 + 112);
        }
        else
        {
          v130 = *v128;
          sub_3D47C(*v128, *((_BYTE *)v113 + 112));
          *((_QWORD *)v112 + 13) = v130;
          v112[112] = v129;
        }
        v131 = (id *)(v113 + 15);
        v132 = *((unsigned __int8 *)v113 + 128);
        if (v132 == 255)
        {
          *((_QWORD *)v112 + 15) = *v131;
          v112[128] = *((_BYTE *)v113 + 128);
        }
        else
        {
          v133 = *v131;
          sub_3D47C(*v131, *((_BYTE *)v113 + 128));
          *((_QWORD *)v112 + 15) = v133;
          v112[128] = v132;
        }
        v112[129] = *((_BYTE *)v113 + 129);
        v134 = v171[11];
        v135 = &v112[v134];
        v136 = (char *)v113 + v134;
        v137 = type metadata accessor for ArtworkCrop(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v137 - 8) + 16))(v135, v136, v137);
        v138 = v171[12];
        v139 = &v112[v138];
        v140 = (_QWORD *)((char *)v113 + v138);
        v141 = v140[1];
        *(_QWORD *)v139 = *v140;
        *((_QWORD *)v139 + 1) = v141;
        v112[v171[13]] = *((_BYTE *)v113 + v171[13]);
        v112[v171[14]] = *((_BYTE *)v113 + v171[14]);
        v112[v171[15]] = *((_BYTE *)v113 + v171[15]);
        v142 = v171[16];
        v143 = &v112[v142];
        v144 = (_QWORD *)((char *)v113 + v142);
        v145 = v144[1];
        *(_QWORD *)v143 = *v144;
        *((_QWORD *)v143 + 1) = v145;
        v146 = *(void (**)(char *, _QWORD, uint64_t, int *))(v165 + 56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v146(v112, 0, 1, v171);
      }
      v147 = v168[17];
      v148 = &a1[v147];
      v149 = (char **)((char *)v169 + v147);
      v150 = v149[1];
      *(_QWORD *)v148 = *v149;
      *((_QWORD *)v148 + 1) = v150;
      v151 = v168[18];
      v152 = &a1[v151];
      v153 = (char *)v169 + v151;
      v152[8] = v153[8];
      *(_QWORD *)v152 = *(_QWORD *)v153;
      v154 = v168[19];
      v155 = &a1[v154];
      v156 = (char *)v169 + v154;
      *(_QWORD *)v155 = *(_QWORD *)v156;
      v155[8] = v156[8];
      a1[v168[20]] = *((_BYTE *)v169 + v168[20]);
      a1[v168[21]] = *((_BYTE *)v169 + v168[21]);
      v157 = v168[22];
      v158 = &a1[v157];
      v159 = (char *)v169 + v157;
      v160 = type metadata accessor for TranscriptRequestInformation(0);
      v161 = *(_QWORD *)(v160 - 8);
      v162 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v161 + 48);
      swift_bridgeObjectRetain();
      if (v162(v159, 1, v160))
      {
        v163 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2C40);
        memcpy(v158, v159, *(_QWORD *)(*(_QWORD *)(v163 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v161 + 16))(v158, v159, v160);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v161 + 56))(v158, 0, 1, v160);
      }
      v10 = v170;
      v9 = a1;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
  }
  return a1;
}

void destroy for ShareSheetContentSource(id *a1, uint64_t a2)
{
  int *v3;
  char *v4;
  int *v5;
  char *v6;
  uint64_t v7;
  unsigned int (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int (*v20)(char *, uint64_t, uint64_t);
  char *v21;
  char *v22;
  char *v23;
  unsigned int v24;
  void (*v25)(char *, uint64_t);
  char *v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;

  if (swift_getEnumCaseMultiPayload(a1, a2) == 1)
  {

  }
  else
  {
    swift_bridgeObjectRelease();
    v3 = (int *)type metadata accessor for EpisodeOffer(0);
    v4 = (char *)a1 + v3[6];
    swift_bridgeObjectRelease();
    v5 = (int *)type metadata accessor for ShowOffer(0);
    v6 = &v4[v5[7]];
    v7 = type metadata accessor for ArtworkModel(0);
    v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48);
    if (!v8(v6, 1, v7))
    {
      swift_bridgeObjectRelease();
      v9 = v6[32];
      if (v9 != 255)
        sub_3B5BC(*((_QWORD *)v6 + 2), *((_QWORD *)v6 + 3), v9);
      v10 = v6[64];
      if (v10 != 255)
        sub_3D624(*((id *)v6 + 7), v10);
      v11 = v6[80];
      if (v11 != 255)
        sub_3D624(*((id *)v6 + 9), v11);
      v12 = v6[96];
      if (v12 != 255)
        sub_3D624(*((id *)v6 + 11), v12);
      v13 = v6[112];
      if (v13 != 255)
        sub_3D624(*((id *)v6 + 13), v13);
      v14 = v6[128];
      if (v14 != 255)
        sub_3D624(*((id *)v6 + 15), v14);
      v15 = &v6[*(int *)(v7 + 44)];
      v16 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v17 = &v4[v5[13]];
    v18 = type metadata accessor for URL(0);
    v19 = *(_QWORD *)(v18 - 8);
    v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
    if (!v20(v17, 1, v18))
      (*(void (**)(char *, uint64_t))(v19 + 8))(v17, v18);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v21 = &v4[v5[16]];
    if (!v20(v21, 1, v18))
      (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
    v22 = &v4[v5[17]];
    if (!v20(v22, 1, v18))
      (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v18);
    v23 = (char *)a1 + v3[7];
    v24 = v20(v23, 1, v18);
    v25 = *(void (**)(char *, uint64_t))(v19 + 8);
    if (!v24)
      v25(v23, v18);
    v25((char *)a1 + v3[8], v18);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release(*(id *)((char *)a1 + v3[12]));
    v26 = (char *)a1 + v3[16];
    if (!v8(v26, 1, v7))
    {
      swift_bridgeObjectRelease();
      v27 = v26[32];
      if (v27 != 255)
        sub_3B5BC(*((_QWORD *)v26 + 2), *((_QWORD *)v26 + 3), v27);
      v28 = v26[64];
      if (v28 != 255)
        sub_3D624(*((id *)v26 + 7), v28);
      v29 = v26[80];
      if (v29 != 255)
        sub_3D624(*((id *)v26 + 9), v29);
      v30 = v26[96];
      if (v30 != 255)
        sub_3D624(*((id *)v26 + 11), v30);
      v31 = v26[112];
      if (v31 != 255)
        sub_3D624(*((id *)v26 + 13), v31);
      v32 = v26[128];
      if (v32 != 255)
        sub_3D624(*((id *)v26 + 15), v32);
      v33 = &v26[*(int *)(v7 + 44)];
      v34 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v34 - 8) + 8))(v33, v34);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    v35 = (char *)a1 + v3[22];
    v36 = type metadata accessor for TranscriptRequestInformation(0);
    v37 = *(_QWORD *)(v36 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36))
      (*(void (**)(char *, uint64_t))(v37 + 8))(v35, v36);
  }
}

_QWORD *initializeWithCopy for ShareSheetContentSource(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned int (*v17)(_QWORD *, uint64_t, int *);
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  id *v23;
  int v24;
  id v25;
  id *v26;
  int v27;
  id v28;
  id *v29;
  int v30;
  id v31;
  id *v32;
  int v33;
  id v34;
  id *v35;
  int v36;
  id v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  _QWORD *v48;
  uint64_t v49;
  void (*v50)(char *, _QWORD, uint64_t, int *);
  uint64_t v51;
  char *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  const void *v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int (*v72)(const void *, uint64_t, uint64_t);
  unsigned int (*v73)(const void *, uint64_t, uint64_t);
  uint64_t v74;
  uint64_t v75;
  char *v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  const void *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  const void *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  const void *v93;
  uint64_t v94;
  void (*v95)(char *, const void *, uint64_t);
  uint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  id *v115;
  int v116;
  id v117;
  id *v118;
  int v119;
  id v120;
  id *v121;
  int v122;
  id v123;
  id *v124;
  int v125;
  id v126;
  id *v127;
  int v128;
  id v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  _QWORD *v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  _QWORD *v140;
  uint64_t v141;
  void (*v142)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v143;
  _QWORD *v144;
  _QWORD *v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  const void *v155;
  uint64_t v156;
  uint64_t v157;
  unsigned int (*v158)(const void *, uint64_t, uint64_t);
  uint64_t v159;
  uint64_t v161;
  uint64_t v162;
  unsigned int (*v163)(_QWORD *, uint64_t, int *);
  int *v164;
  uint64_t v165;
  _QWORD *v166;
  int *v167;
  int *v168;

  v3 = a3;
  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    v6 = *(void **)a2;
    *a1 = *(_QWORD *)a2;
    v7 = v6;
    v8 = 1;
  }
  else
  {
    v165 = v3;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = *(_QWORD *)(a2 + 16);
    v9 = type metadata accessor for EpisodeOffer(0);
    v10 = *(int *)(v9 + 24);
    v166 = a1;
    v11 = (char *)a1 + v10;
    v12 = a2 + v10;
    *(_OWORD *)v11 = *(_OWORD *)(a2 + v10);
    *((_QWORD *)v11 + 2) = *(_QWORD *)(a2 + v10 + 16);
    v11[24] = *(_BYTE *)(a2 + v10 + 24);
    v168 = (int *)type metadata accessor for ShowOffer(0);
    v13 = v168[7];
    v14 = &v11[v13];
    v15 = (_QWORD *)(v12 + v13);
    v16 = type metadata accessor for ArtworkModel(0);
    v161 = *(_QWORD *)(v16 - 8);
    v17 = *(unsigned int (**)(_QWORD *, uint64_t, int *))(v161 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v167 = (int *)v16;
    v163 = v17;
    v164 = (int *)v9;
    v162 = a2;
    if (v17(v15, 1, (int *)v16))
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      v19 = v15[1];
      *(_QWORD *)v14 = *v15;
      *((_QWORD *)v14 + 1) = v19;
      v20 = *((unsigned __int8 *)v15 + 32);
      swift_bridgeObjectRetain();
      if (v20 == 255)
      {
        *((_OWORD *)v14 + 1) = *((_OWORD *)v15 + 1);
        v14[32] = *((_BYTE *)v15 + 32);
      }
      else
      {
        v22 = v15[2];
        v21 = v15[3];
        sub_3D464(v22, v21, v20);
        *((_QWORD *)v14 + 2) = v22;
        *((_QWORD *)v14 + 3) = v21;
        v14[32] = v20;
      }
      *(_OWORD *)(v14 + 40) = *(_OWORD *)(v15 + 5);
      v23 = (id *)(v15 + 7);
      v24 = *((unsigned __int8 *)v15 + 64);
      if (v24 == 255)
      {
        *((_QWORD *)v14 + 7) = *v23;
        v14[64] = *((_BYTE *)v15 + 64);
      }
      else
      {
        v25 = *v23;
        sub_3D47C(*v23, *((_BYTE *)v15 + 64));
        *((_QWORD *)v14 + 7) = v25;
        v14[64] = v24;
      }
      v26 = (id *)(v15 + 9);
      v27 = *((unsigned __int8 *)v15 + 80);
      if (v27 == 255)
      {
        *((_QWORD *)v14 + 9) = *v26;
        v14[80] = *((_BYTE *)v15 + 80);
      }
      else
      {
        v28 = *v26;
        sub_3D47C(*v26, *((_BYTE *)v15 + 80));
        *((_QWORD *)v14 + 9) = v28;
        v14[80] = v27;
      }
      v29 = (id *)(v15 + 11);
      v30 = *((unsigned __int8 *)v15 + 96);
      if (v30 == 255)
      {
        *((_QWORD *)v14 + 11) = *v29;
        v14[96] = *((_BYTE *)v15 + 96);
      }
      else
      {
        v31 = *v29;
        sub_3D47C(*v29, *((_BYTE *)v15 + 96));
        *((_QWORD *)v14 + 11) = v31;
        v14[96] = v30;
      }
      v32 = (id *)(v15 + 13);
      v33 = *((unsigned __int8 *)v15 + 112);
      if (v33 == 255)
      {
        *((_QWORD *)v14 + 13) = *v32;
        v14[112] = *((_BYTE *)v15 + 112);
      }
      else
      {
        v34 = *v32;
        sub_3D47C(*v32, *((_BYTE *)v15 + 112));
        *((_QWORD *)v14 + 13) = v34;
        v14[112] = v33;
      }
      v35 = (id *)(v15 + 15);
      v36 = *((unsigned __int8 *)v15 + 128);
      if (v36 == 255)
      {
        *((_QWORD *)v14 + 15) = *v35;
        v14[128] = *((_BYTE *)v15 + 128);
      }
      else
      {
        v37 = *v35;
        sub_3D47C(*v35, *((_BYTE *)v15 + 128));
        *((_QWORD *)v14 + 15) = v37;
        v14[128] = v36;
      }
      v14[129] = *((_BYTE *)v15 + 129);
      v38 = v167[11];
      v39 = &v14[v38];
      v40 = (char *)v15 + v38;
      v41 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 16))(v39, v40, v41);
      v42 = v167[12];
      v43 = &v14[v42];
      v44 = (_QWORD *)((char *)v15 + v42);
      v45 = v44[1];
      *(_QWORD *)v43 = *v44;
      *((_QWORD *)v43 + 1) = v45;
      v14[v167[13]] = *((_BYTE *)v15 + v167[13]);
      v14[v167[14]] = *((_BYTE *)v15 + v167[14]);
      v14[v167[15]] = *((_BYTE *)v15 + v167[15]);
      v46 = v167[16];
      v47 = &v14[v46];
      v48 = (_QWORD *)((char *)v15 + v46);
      v49 = v48[1];
      *(_QWORD *)v47 = *v48;
      *((_QWORD *)v47 + 1) = v49;
      v50 = *(void (**)(char *, _QWORD, uint64_t, int *))(v161 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v50(v14, 0, 1, v167);
    }
    v51 = v168[8];
    v52 = &v11[v51];
    v53 = (_QWORD *)(v12 + v51);
    v54 = v53[1];
    *(_QWORD *)v52 = *v53;
    *((_QWORD *)v52 + 1) = v54;
    v55 = v168[9];
    v56 = &v11[v55];
    v57 = (_QWORD *)(v12 + v55);
    v58 = v57[1];
    *(_QWORD *)v56 = *v57;
    *((_QWORD *)v56 + 1) = v58;
    v11[v168[10]] = *(_BYTE *)(v12 + v168[10]);
    v59 = v168[11];
    v60 = &v11[v59];
    v61 = (_QWORD *)(v12 + v59);
    v62 = v61[1];
    *(_QWORD *)v60 = *v61;
    *((_QWORD *)v60 + 1) = v62;
    v63 = v168[12];
    v64 = &v11[v63];
    v65 = (_QWORD *)(v12 + v63);
    v66 = v65[1];
    *(_QWORD *)v64 = *v65;
    *((_QWORD *)v64 + 1) = v66;
    v67 = v168[13];
    v68 = &v11[v67];
    v69 = (const void *)(v12 + v67);
    v70 = type metadata accessor for URL(0);
    v71 = *(_QWORD *)(v70 - 8);
    v72 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v71 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v73 = v72;
    if (v72(v69, 1, v70))
    {
      v74 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
      memcpy(v68, v69, *(_QWORD *)(*(_QWORD *)(v74 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, const void *, uint64_t))(v71 + 16))(v68, v69, v70);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v71 + 56))(v68, 0, 1, v70);
    }
    a1 = v166;
    v75 = v168[14];
    v76 = &v11[v75];
    v77 = (_QWORD *)(v12 + v75);
    v78 = v77[1];
    *(_QWORD *)v76 = *v77;
    *((_QWORD *)v76 + 1) = v78;
    v79 = v168[15];
    v80 = &v11[v79];
    v81 = (_QWORD *)(v12 + v79);
    v82 = v81[1];
    *(_QWORD *)v80 = *v81;
    *((_QWORD *)v80 + 1) = v82;
    v83 = v168[16];
    v84 = &v11[v83];
    v85 = (const void *)(v12 + v83);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v73(v85, 1, v70))
    {
      v86 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
      memcpy(v84, v85, *(_QWORD *)(*(_QWORD *)(v86 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, const void *, uint64_t))(v71 + 16))(v84, v85, v70);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v71 + 56))(v84, 0, 1, v70);
    }
    v87 = v168[17];
    v88 = &v11[v87];
    v89 = (const void *)(v12 + v87);
    if (v73((const void *)(v12 + v87), 1, v70))
    {
      v90 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
      memcpy(v88, v89, *(_QWORD *)(*(_QWORD *)(v90 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, const void *, uint64_t))(v71 + 16))(v88, v89, v70);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v71 + 56))(v88, 0, 1, v70);
    }
    v11[v168[18]] = *(_BYTE *)(v12 + v168[18]);
    v91 = v164[7];
    v92 = (char *)v166 + v91;
    v93 = (const void *)(v162 + v91);
    if (v73((const void *)(v162 + v91), 1, v70))
    {
      v94 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
      memcpy(v92, v93, *(_QWORD *)(*(_QWORD *)(v94 - 8) + 64));
      (*(void (**)(char *, uint64_t, uint64_t))(v71 + 16))((char *)v166 + v164[8], v162 + v164[8], v70);
    }
    else
    {
      v95 = *(void (**)(char *, const void *, uint64_t))(v71 + 16);
      v95(v92, v93, v70);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v71 + 56))(v92, 0, 1, v70);
      v95((char *)v166 + v164[8], (const void *)(v162 + v164[8]), v70);
    }
    *(_QWORD *)((char *)v166 + v164[9]) = *(_QWORD *)(v162 + v164[9]);
    v96 = v164[10];
    v97 = (_QWORD *)((char *)v166 + v96);
    v98 = (_QWORD *)(v162 + v96);
    v99 = v98[1];
    *v97 = *v98;
    v97[1] = v99;
    v100 = v164[11];
    v101 = (_QWORD *)((char *)v166 + v100);
    v102 = (_QWORD *)(v162 + v100);
    v103 = v102[1];
    *v101 = *v102;
    v101[1] = v103;
    *(_QWORD *)((char *)v166 + v164[12]) = *(_QWORD *)(v162 + v164[12]);
    *((_BYTE *)v166 + v164[13]) = *(_BYTE *)(v162 + v164[13]);
    *((_BYTE *)v166 + v164[14]) = *(_BYTE *)(v162 + v164[14]);
    v104 = v164[15];
    v105 = (char *)v166 + v104;
    v106 = v162 + v104;
    *(_QWORD *)v105 = *(_QWORD *)v106;
    v105[8] = *(_BYTE *)(v106 + 8);
    v107 = v164[16];
    v108 = (_QWORD *)((char *)v166 + v107);
    v109 = (_QWORD *)(v162 + v107);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    if (v163(v109, 1, v167))
    {
      v110 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
      memcpy(v108, v109, *(_QWORD *)(*(_QWORD *)(v110 - 8) + 64));
    }
    else
    {
      v111 = v109[1];
      *v108 = *v109;
      v108[1] = v111;
      v112 = *((unsigned __int8 *)v109 + 32);
      swift_bridgeObjectRetain();
      if (v112 == 255)
      {
        *((_OWORD *)v108 + 1) = *((_OWORD *)v109 + 1);
        *((_BYTE *)v108 + 32) = *((_BYTE *)v109 + 32);
      }
      else
      {
        v113 = v109[2];
        v114 = v109[3];
        sub_3D464(v113, v114, v112);
        v108[2] = v113;
        v108[3] = v114;
        *((_BYTE *)v108 + 32) = v112;
      }
      *(_OWORD *)(v108 + 5) = *(_OWORD *)(v109 + 5);
      v115 = (id *)(v109 + 7);
      v116 = *((unsigned __int8 *)v109 + 64);
      if (v116 == 255)
      {
        v108[7] = *v115;
        *((_BYTE *)v108 + 64) = *((_BYTE *)v109 + 64);
      }
      else
      {
        v117 = *v115;
        sub_3D47C(*v115, *((_BYTE *)v109 + 64));
        v108[7] = v117;
        *((_BYTE *)v108 + 64) = v116;
      }
      v118 = (id *)(v109 + 9);
      v119 = *((unsigned __int8 *)v109 + 80);
      if (v119 == 255)
      {
        v108[9] = *v118;
        *((_BYTE *)v108 + 80) = *((_BYTE *)v109 + 80);
      }
      else
      {
        v120 = *v118;
        sub_3D47C(*v118, *((_BYTE *)v109 + 80));
        v108[9] = v120;
        *((_BYTE *)v108 + 80) = v119;
      }
      v121 = (id *)(v109 + 11);
      v122 = *((unsigned __int8 *)v109 + 96);
      if (v122 == 255)
      {
        v108[11] = *v121;
        *((_BYTE *)v108 + 96) = *((_BYTE *)v109 + 96);
      }
      else
      {
        v123 = *v121;
        sub_3D47C(*v121, *((_BYTE *)v109 + 96));
        v108[11] = v123;
        *((_BYTE *)v108 + 96) = v122;
      }
      v124 = (id *)(v109 + 13);
      v125 = *((unsigned __int8 *)v109 + 112);
      if (v125 == 255)
      {
        v108[13] = *v124;
        *((_BYTE *)v108 + 112) = *((_BYTE *)v109 + 112);
      }
      else
      {
        v126 = *v124;
        sub_3D47C(*v124, *((_BYTE *)v109 + 112));
        v108[13] = v126;
        *((_BYTE *)v108 + 112) = v125;
      }
      v127 = (id *)(v109 + 15);
      v128 = *((unsigned __int8 *)v109 + 128);
      if (v128 == 255)
      {
        v108[15] = *v127;
        *((_BYTE *)v108 + 128) = *((_BYTE *)v109 + 128);
      }
      else
      {
        v129 = *v127;
        sub_3D47C(*v127, *((_BYTE *)v109 + 128));
        v108[15] = v129;
        *((_BYTE *)v108 + 128) = v128;
      }
      *((_BYTE *)v108 + 129) = *((_BYTE *)v109 + 129);
      v130 = v167[11];
      v131 = (char *)v108 + v130;
      v132 = (char *)v109 + v130;
      v133 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v133 - 8) + 16))(v131, v132, v133);
      v134 = v167[12];
      v135 = (_QWORD *)((char *)v108 + v134);
      v136 = (_QWORD *)((char *)v109 + v134);
      v137 = v136[1];
      *v135 = *v136;
      v135[1] = v137;
      *((_BYTE *)v108 + v167[13]) = *((_BYTE *)v109 + v167[13]);
      *((_BYTE *)v108 + v167[14]) = *((_BYTE *)v109 + v167[14]);
      *((_BYTE *)v108 + v167[15]) = *((_BYTE *)v109 + v167[15]);
      v138 = v167[16];
      v139 = (_QWORD *)((char *)v108 + v138);
      v140 = (_QWORD *)((char *)v109 + v138);
      v141 = v140[1];
      *v139 = *v140;
      v139[1] = v141;
      v142 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v161 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v142(v108, 0, 1, v167);
    }
    v143 = v164[17];
    v144 = (_QWORD *)((char *)v166 + v143);
    v145 = (_QWORD *)(v162 + v143);
    v146 = v145[1];
    *v144 = *v145;
    v144[1] = v146;
    v147 = v164[18];
    v148 = (char *)v166 + v147;
    v149 = v162 + v147;
    v148[8] = *(_BYTE *)(v149 + 8);
    *(_QWORD *)v148 = *(_QWORD *)v149;
    v150 = v164[19];
    v151 = (char *)v166 + v150;
    v152 = v162 + v150;
    *(_QWORD *)v151 = *(_QWORD *)v152;
    v151[8] = *(_BYTE *)(v152 + 8);
    *((_BYTE *)v166 + v164[20]) = *(_BYTE *)(v162 + v164[20]);
    *((_BYTE *)v166 + v164[21]) = *(_BYTE *)(v162 + v164[21]);
    v153 = v164[22];
    v154 = (char *)v166 + v153;
    v155 = (const void *)(v162 + v153);
    v156 = type metadata accessor for TranscriptRequestInformation(0);
    v157 = *(_QWORD *)(v156 - 8);
    v158 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v157 + 48);
    swift_bridgeObjectRetain();
    if (v158(v155, 1, v156))
    {
      v159 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2C40);
      memcpy(v154, v155, *(_QWORD *)(*(_QWORD *)(v159 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, const void *, uint64_t))(v157 + 16))(v154, v155, v156);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v157 + 56))(v154, 0, 1, v156);
    }
    v8 = 0;
    v3 = v165;
  }
  swift_storeEnumTagMultiPayload(a1, v3, v8);
  return a1;
}

_QWORD *assignWithCopy for ShareSheetContentSource(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  void *v6;
  id v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  int *v17;
  unsigned int (*v18)(_QWORD *, uint64_t, int *);
  uint64_t v19;
  char *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  id *v25;
  int v26;
  id v27;
  id v28;
  id *v29;
  int v30;
  id v31;
  id v32;
  id *v33;
  int v34;
  id v35;
  id v36;
  id *v37;
  int v38;
  id v39;
  id v40;
  id *v41;
  int v42;
  id v43;
  id v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  void (*v55)(char *, _QWORD, uint64_t, int *);
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int (*v72)(char *, uint64_t, uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  void (*v93)(char *, char *, uint64_t);
  uint64_t v94;
  _QWORD *v95;
  char *v96;
  uint64_t v97;
  _QWORD *v98;
  char *v99;
  uint64_t v100;
  char *v101;
  char *v102;
  char v103;
  uint64_t v104;
  _QWORD *v105;
  char *v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  __int128 v111;
  id *v112;
  int v113;
  id v114;
  id v115;
  id *v116;
  int v117;
  id v118;
  id v119;
  id *v120;
  int v121;
  id v122;
  id v123;
  id *v124;
  int v125;
  id v126;
  id v127;
  id *v128;
  int v129;
  id v130;
  id v131;
  uint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  char *v138;
  uint64_t v139;
  _QWORD *v140;
  char *v141;
  void (*v142)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v143;
  _QWORD *v144;
  char *v145;
  uint64_t v146;
  char *v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  unsigned int (*v159)(char *, uint64_t, uint64_t);
  uint64_t v160;
  uint64_t v162;
  char *__dst;
  unsigned int (*v164)(char *, uint64_t, int *);
  int *v165;
  char *v166;
  uint64_t v167;
  char *v168;
  int *v169;

  if (a1 != a2)
  {
    sub_12B42C((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      v6 = (void *)*a2;
      *a1 = *a2;
      v7 = v6;
      v8 = a1;
      v9 = a3;
      v10 = 1;
    }
    else
    {
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      v165 = (int *)type metadata accessor for EpisodeOffer(0);
      v11 = v165[6];
      v12 = (char *)a1 + v11;
      v13 = (char *)a2 + v11;
      *(_QWORD *)v12 = *(_QWORD *)((char *)a2 + v11);
      *((_QWORD *)v12 + 1) = *(_QWORD *)((char *)a2 + v11 + 8);
      *((_QWORD *)v12 + 2) = *(_QWORD *)((char *)a2 + v11 + 16);
      v12[24] = *((_BYTE *)a2 + v11 + 24);
      v168 = (char *)a1 + v11;
      v169 = (int *)type metadata accessor for ShowOffer(0);
      v14 = v169[7];
      v15 = &v12[v14];
      v16 = &v13[v14];
      v17 = (int *)type metadata accessor for ArtworkModel(0);
      v162 = *((_QWORD *)v17 - 1);
      v18 = *(unsigned int (**)(_QWORD *, uint64_t, int *))(v162 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v164 = v18;
      v166 = (char *)a2;
      v167 = a3;
      if (v18(v16, 1, v17))
      {
        v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
        memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
        v20 = v168;
      }
      else
      {
        *(_QWORD *)v15 = *(_QWORD *)v16;
        *((_QWORD *)v15 + 1) = *((_QWORD *)v16 + 1);
        v21 = v16[32];
        swift_bridgeObjectRetain();
        if (v21 == 255)
        {
          v24 = *((_OWORD *)v16 + 1);
          v15[32] = v16[32];
          *((_OWORD *)v15 + 1) = v24;
        }
        else
        {
          v23 = *((_QWORD *)v16 + 2);
          v22 = *((_QWORD *)v16 + 3);
          sub_3D464(v23, v22, v21);
          *((_QWORD *)v15 + 2) = v23;
          *((_QWORD *)v15 + 3) = v22;
          v15[32] = v21;
        }
        v20 = v168;
        *((_QWORD *)v15 + 5) = *((_QWORD *)v16 + 5);
        *((_QWORD *)v15 + 6) = *((_QWORD *)v16 + 6);
        v25 = (id *)(v16 + 56);
        v26 = v16[64];
        if (v26 == 255)
        {
          v28 = *v25;
          v15[64] = v16[64];
          *((_QWORD *)v15 + 7) = v28;
        }
        else
        {
          v27 = *v25;
          sub_3D47C(*v25, v16[64]);
          *((_QWORD *)v15 + 7) = v27;
          v15[64] = v26;
        }
        v29 = (id *)(v16 + 72);
        v30 = v16[80];
        if (v30 == 255)
        {
          v32 = *v29;
          v15[80] = v16[80];
          *((_QWORD *)v15 + 9) = v32;
        }
        else
        {
          v31 = *v29;
          sub_3D47C(*v29, v16[80]);
          *((_QWORD *)v15 + 9) = v31;
          v15[80] = v30;
        }
        v33 = (id *)(v16 + 88);
        v34 = v16[96];
        if (v34 == 255)
        {
          v36 = *v33;
          v15[96] = v16[96];
          *((_QWORD *)v15 + 11) = v36;
        }
        else
        {
          v35 = *v33;
          sub_3D47C(*v33, v16[96]);
          *((_QWORD *)v15 + 11) = v35;
          v15[96] = v34;
        }
        v37 = (id *)(v16 + 104);
        v38 = v16[112];
        if (v38 == 255)
        {
          v40 = *v37;
          v15[112] = v16[112];
          *((_QWORD *)v15 + 13) = v40;
        }
        else
        {
          v39 = *v37;
          sub_3D47C(*v37, v16[112]);
          *((_QWORD *)v15 + 13) = v39;
          v15[112] = v38;
        }
        v41 = (id *)(v16 + 120);
        v42 = v16[128];
        if (v42 == 255)
        {
          v44 = *v41;
          v15[128] = v16[128];
          *((_QWORD *)v15 + 15) = v44;
        }
        else
        {
          v43 = *v41;
          sub_3D47C(*v41, v16[128]);
          *((_QWORD *)v15 + 15) = v43;
          v15[128] = v42;
        }
        v15[129] = v16[129];
        v45 = v17[11];
        v46 = &v15[v45];
        v47 = &v16[v45];
        v48 = type metadata accessor for ArtworkCrop(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v48 - 8) + 16))(v46, v47, v48);
        v49 = v17[12];
        v50 = &v15[v49];
        v51 = &v16[v49];
        *(_QWORD *)v50 = *(_QWORD *)v51;
        *((_QWORD *)v50 + 1) = *((_QWORD *)v51 + 1);
        v15[v17[13]] = v16[v17[13]];
        v15[v17[14]] = v16[v17[14]];
        v15[v17[15]] = v16[v17[15]];
        v52 = v17[16];
        v53 = &v15[v52];
        v54 = &v16[v52];
        *(_QWORD *)v53 = *(_QWORD *)v54;
        *((_QWORD *)v53 + 1) = *((_QWORD *)v54 + 1);
        v55 = *(void (**)(char *, _QWORD, uint64_t, int *))(v162 + 56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v55(v15, 0, 1, v17);
      }
      v56 = v169[8];
      v57 = &v20[v56];
      v58 = &v13[v56];
      *(_QWORD *)v57 = *(_QWORD *)v58;
      *((_QWORD *)v57 + 1) = *((_QWORD *)v58 + 1);
      v59 = v169[9];
      v60 = &v20[v59];
      v61 = &v13[v59];
      *(_QWORD *)v60 = *(_QWORD *)v61;
      *((_QWORD *)v60 + 1) = *((_QWORD *)v61 + 1);
      v20[v169[10]] = v13[v169[10]];
      v62 = v169[11];
      v63 = &v20[v62];
      v64 = &v13[v62];
      *(_QWORD *)v63 = *(_QWORD *)v64;
      *((_QWORD *)v63 + 1) = *((_QWORD *)v64 + 1);
      v65 = v169[12];
      v66 = &v20[v65];
      v67 = &v13[v65];
      *(_QWORD *)v66 = *(_QWORD *)v67;
      *((_QWORD *)v66 + 1) = *((_QWORD *)v67 + 1);
      v68 = v169[13];
      __dst = &v20[v68];
      v69 = &v13[v68];
      v70 = type metadata accessor for URL(0);
      v71 = *(_QWORD *)(v70 - 8);
      v72 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v71 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v72(v69, 1, v70))
      {
        v73 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
        memcpy(__dst, v69, *(_QWORD *)(*(_QWORD *)(v73 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v71 + 16))(__dst, v69, v70);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v71 + 56))(__dst, 0, 1, v70);
      }
      v74 = v71;
      v75 = v169[14];
      v76 = &v168[v75];
      v77 = &v13[v75];
      *(_QWORD *)v76 = *(_QWORD *)v77;
      *((_QWORD *)v76 + 1) = *((_QWORD *)v77 + 1);
      v78 = v169[15];
      v79 = &v168[v78];
      v80 = &v13[v78];
      *(_QWORD *)v79 = *(_QWORD *)v80;
      *((_QWORD *)v79 + 1) = *((_QWORD *)v80 + 1);
      v81 = v169[16];
      v82 = &v168[v81];
      v83 = &v13[v81];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v72(v83, 1, v70))
      {
        v84 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
        memcpy(v82, v83, *(_QWORD *)(*(_QWORD *)(v84 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v74 + 16))(v82, v83, v70);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v74 + 56))(v82, 0, 1, v70);
      }
      v85 = v169[17];
      v86 = &v168[v85];
      v87 = &v13[v85];
      if (v72(&v13[v85], 1, v70))
      {
        v88 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
        memcpy(v86, v87, *(_QWORD *)(*(_QWORD *)(v88 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v74 + 16))(v86, v87, v70);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v74 + 56))(v86, 0, 1, v70);
      }
      v168[v169[18]] = v13[v169[18]];
      v89 = v165[7];
      v90 = (char *)a1 + v89;
      v91 = &v166[v89];
      if (v72(&v166[v89], 1, v70))
      {
        v92 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
        memcpy(v90, v91, *(_QWORD *)(*(_QWORD *)(v92 - 8) + 64));
        v93 = *(void (**)(char *, char *, uint64_t))(v74 + 16);
      }
      else
      {
        v93 = *(void (**)(char *, char *, uint64_t))(v74 + 16);
        v93(v90, v91, v70);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v74 + 56))(v90, 0, 1, v70);
      }
      v93((char *)a1 + v165[8], &v166[v165[8]], v70);
      *(_QWORD *)((char *)a1 + v165[9]) = *(_QWORD *)&v166[v165[9]];
      v94 = v165[10];
      v95 = (_QWORD *)((char *)a1 + v94);
      v96 = &v166[v94];
      *v95 = *(_QWORD *)v96;
      v95[1] = *((_QWORD *)v96 + 1);
      v97 = v165[11];
      v98 = (_QWORD *)((char *)a1 + v97);
      v99 = &v166[v97];
      *v98 = *(_QWORD *)v99;
      v98[1] = *((_QWORD *)v99 + 1);
      *(_QWORD *)((char *)a1 + v165[12]) = *(_QWORD *)&v166[v165[12]];
      *((_BYTE *)a1 + v165[13]) = v166[v165[13]];
      *((_BYTE *)a1 + v165[14]) = v166[v165[14]];
      v100 = v165[15];
      v101 = (char *)a1 + v100;
      v102 = &v166[v100];
      v103 = v102[8];
      *(_QWORD *)v101 = *(_QWORD *)v102;
      v101[8] = v103;
      v104 = v165[16];
      v105 = (_QWORD *)((char *)a1 + v104);
      v106 = &v166[v104];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      if (v164(v106, 1, v17))
      {
        v107 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
        memcpy(v105, v106, *(_QWORD *)(*(_QWORD *)(v107 - 8) + 64));
      }
      else
      {
        *v105 = *(_QWORD *)v106;
        v105[1] = *((_QWORD *)v106 + 1);
        v108 = v106[32];
        swift_bridgeObjectRetain();
        if (v108 == 255)
        {
          v111 = *((_OWORD *)v106 + 1);
          *((_BYTE *)v105 + 32) = v106[32];
          *((_OWORD *)v105 + 1) = v111;
        }
        else
        {
          v109 = *((_QWORD *)v106 + 2);
          v110 = *((_QWORD *)v106 + 3);
          sub_3D464(v109, v110, v108);
          v105[2] = v109;
          v105[3] = v110;
          *((_BYTE *)v105 + 32) = v108;
        }
        v105[5] = *((_QWORD *)v106 + 5);
        v105[6] = *((_QWORD *)v106 + 6);
        v112 = (id *)(v106 + 56);
        v113 = v106[64];
        if (v113 == 255)
        {
          v115 = *v112;
          *((_BYTE *)v105 + 64) = v106[64];
          v105[7] = v115;
        }
        else
        {
          v114 = *v112;
          sub_3D47C(*v112, v106[64]);
          v105[7] = v114;
          *((_BYTE *)v105 + 64) = v113;
        }
        v116 = (id *)(v106 + 72);
        v117 = v106[80];
        if (v117 == 255)
        {
          v119 = *v116;
          *((_BYTE *)v105 + 80) = v106[80];
          v105[9] = v119;
        }
        else
        {
          v118 = *v116;
          sub_3D47C(*v116, v106[80]);
          v105[9] = v118;
          *((_BYTE *)v105 + 80) = v117;
        }
        v120 = (id *)(v106 + 88);
        v121 = v106[96];
        if (v121 == 255)
        {
          v123 = *v120;
          *((_BYTE *)v105 + 96) = v106[96];
          v105[11] = v123;
        }
        else
        {
          v122 = *v120;
          sub_3D47C(*v120, v106[96]);
          v105[11] = v122;
          *((_BYTE *)v105 + 96) = v121;
        }
        v124 = (id *)(v106 + 104);
        v125 = v106[112];
        if (v125 == 255)
        {
          v127 = *v124;
          *((_BYTE *)v105 + 112) = v106[112];
          v105[13] = v127;
        }
        else
        {
          v126 = *v124;
          sub_3D47C(*v124, v106[112]);
          v105[13] = v126;
          *((_BYTE *)v105 + 112) = v125;
        }
        v128 = (id *)(v106 + 120);
        v129 = v106[128];
        if (v129 == 255)
        {
          v131 = *v128;
          *((_BYTE *)v105 + 128) = v106[128];
          v105[15] = v131;
        }
        else
        {
          v130 = *v128;
          sub_3D47C(*v128, v106[128]);
          v105[15] = v130;
          *((_BYTE *)v105 + 128) = v129;
        }
        *((_BYTE *)v105 + 129) = v106[129];
        v132 = v17[11];
        v133 = (char *)v105 + v132;
        v134 = &v106[v132];
        v135 = type metadata accessor for ArtworkCrop(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v135 - 8) + 16))(v133, v134, v135);
        v136 = v17[12];
        v137 = (_QWORD *)((char *)v105 + v136);
        v138 = &v106[v136];
        *v137 = *(_QWORD *)v138;
        v137[1] = *((_QWORD *)v138 + 1);
        *((_BYTE *)v105 + v17[13]) = v106[v17[13]];
        *((_BYTE *)v105 + v17[14]) = v106[v17[14]];
        *((_BYTE *)v105 + v17[15]) = v106[v17[15]];
        v139 = v17[16];
        v140 = (_QWORD *)((char *)v105 + v139);
        v141 = &v106[v139];
        *v140 = *(_QWORD *)v141;
        v140[1] = *((_QWORD *)v141 + 1);
        v142 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v162 + 56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v142(v105, 0, 1, v17);
      }
      v143 = v165[17];
      v144 = (_QWORD *)((char *)a1 + v143);
      v145 = &v166[v143];
      *v144 = *(_QWORD *)v145;
      v144[1] = *((_QWORD *)v145 + 1);
      v146 = v165[18];
      v147 = (char *)a1 + v146;
      v148 = &v166[v146];
      v149 = *(_QWORD *)v148;
      v147[8] = v148[8];
      *(_QWORD *)v147 = v149;
      v150 = v165[19];
      v151 = (char *)a1 + v150;
      v152 = &v166[v150];
      v153 = *(_QWORD *)v152;
      v151[8] = v152[8];
      *(_QWORD *)v151 = v153;
      *((_BYTE *)a1 + v165[20]) = v166[v165[20]];
      *((_BYTE *)a1 + v165[21]) = v166[v165[21]];
      v154 = v165[22];
      v155 = (char *)a1 + v154;
      v156 = &v166[v154];
      v157 = type metadata accessor for TranscriptRequestInformation(0);
      v158 = *(_QWORD *)(v157 - 8);
      v159 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v158 + 48);
      swift_bridgeObjectRetain();
      if (v159(v156, 1, v157))
      {
        v160 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2C40);
        memcpy(v155, v156, *(_QWORD *)(*(_QWORD *)(v160 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v158 + 16))(v155, v156, v157);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v158 + 56))(v155, 0, 1, v157);
      }
      v9 = v167;
      v8 = a1;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  return a1;
}

_QWORD *initializeWithTake for ShareSheetContentSource(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  unsigned int (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  _OWORD *v46;
  _OWORD *v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int (*v67)(char *, uint64_t, int *);
  uint64_t v68;
  int *v69;
  uint64_t v70;
  char *v71;
  unsigned int (*v72)(char *, uint64_t, uint64_t);
  char *v73;
  uint64_t v74;

  if (swift_getEnumCaseMultiPayload(a2, a3))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v70 = a3;
    *a1 = *a2;
    *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
    v6 = (int *)type metadata accessor for EpisodeOffer(0);
    v7 = v6[6];
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    *(_QWORD *)v8 = *(_QWORD *)((char *)a2 + v7);
    *(_OWORD *)(v8 + 8) = *(_OWORD *)((char *)a2 + v7 + 8);
    v8[24] = *((_BYTE *)a2 + v7 + 24);
    v10 = (int *)type metadata accessor for ShowOffer(0);
    v11 = v10[7];
    v12 = &v8[v11];
    v13 = &v9[v11];
    v14 = (int *)type metadata accessor for ArtworkModel(0);
    v15 = *((_QWORD *)v14 - 1);
    v67 = *(unsigned int (**)(char *, uint64_t, int *))(v15 + 48);
    v68 = v15;
    v69 = v14;
    if (v67(v13, 1, v14))
    {
      v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      v17 = *((_OWORD *)v13 + 1);
      *(_OWORD *)v12 = *(_OWORD *)v13;
      *((_OWORD *)v12 + 1) = v17;
      v12[32] = v13[32];
      *(_OWORD *)(v12 + 40) = *(_OWORD *)(v13 + 40);
      *((_QWORD *)v12 + 7) = *((_QWORD *)v13 + 7);
      v12[64] = v13[64];
      *(_OWORD *)(v12 + 113) = *(_OWORD *)(v13 + 113);
      *(_OWORD *)(v12 + 104) = *(_OWORD *)(v13 + 104);
      *(_OWORD *)(v12 + 88) = *(_OWORD *)(v13 + 88);
      *(_OWORD *)(v12 + 72) = *(_OWORD *)(v13 + 72);
      v12[129] = v13[129];
      v18 = v14[11];
      v71 = &v13[v18];
      v73 = &v12[v18];
      v19 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v73, v71, v19);
      *(_OWORD *)&v12[v14[12]] = *(_OWORD *)&v13[v14[12]];
      v12[v14[13]] = v13[v14[13]];
      v12[v14[14]] = v13[v14[14]];
      v12[v14[15]] = v13[v14[15]];
      *(_OWORD *)&v12[v14[16]] = *(_OWORD *)&v13[v14[16]];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
    }
    *(_OWORD *)&v8[v10[8]] = *(_OWORD *)&v9[v10[8]];
    *(_OWORD *)&v8[v10[9]] = *(_OWORD *)&v9[v10[9]];
    v8[v10[10]] = v9[v10[10]];
    *(_OWORD *)&v8[v10[11]] = *(_OWORD *)&v9[v10[11]];
    *(_OWORD *)&v8[v10[12]] = *(_OWORD *)&v9[v10[12]];
    v20 = v10[13];
    v21 = &v8[v20];
    v22 = &v9[v20];
    v23 = type metadata accessor for URL(0);
    v24 = *(_QWORD *)(v23 - 8);
    v72 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48);
    v74 = v24;
    if (v72(v22, 1, v23))
    {
      v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v21, v22, v23);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
    }
    *(_OWORD *)&v8[v10[14]] = *(_OWORD *)&v9[v10[14]];
    *(_OWORD *)&v8[v10[15]] = *(_OWORD *)&v9[v10[15]];
    v26 = v10[16];
    v27 = &v8[v26];
    v28 = &v9[v26];
    v29 = v72;
    if (v72(&v9[v26], 1, v23))
    {
      v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v74 + 32))(v27, v28, v23);
      v29 = v72;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v74 + 56))(v27, 0, 1, v23);
    }
    v31 = v10[17];
    v32 = &v8[v31];
    v33 = &v9[v31];
    if (v29(&v9[v31], 1, v23))
    {
      v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
      memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
      v35 = v74;
    }
    else
    {
      v36 = v33;
      v35 = v74;
      (*(void (**)(char *, char *, uint64_t))(v74 + 32))(v32, v36, v23);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v74 + 56))(v32, 0, 1, v23);
    }
    v8[v10[18]] = v9[v10[18]];
    v37 = v6[7];
    v38 = (char *)a1 + v37;
    v39 = (char *)a2 + v37;
    if (v29((char *)a2 + v37, 1, v23))
    {
      v40 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
      memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
      v41 = *(void (**)(char *, char *, uint64_t))(v35 + 32);
    }
    else
    {
      v41 = *(void (**)(char *, char *, uint64_t))(v35 + 32);
      v41(v38, v39, v23);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v38, 0, 1, v23);
    }
    v41((char *)a1 + v6[8], (char *)a2 + v6[8], v23);
    *(_QWORD *)((char *)a1 + v6[9]) = *(_QWORD *)((char *)a2 + v6[9]);
    *(_OWORD *)((char *)a1 + v6[10]) = *(_OWORD *)((char *)a2 + v6[10]);
    *(_OWORD *)((char *)a1 + v6[11]) = *(_OWORD *)((char *)a2 + v6[11]);
    *(_QWORD *)((char *)a1 + v6[12]) = *(_QWORD *)((char *)a2 + v6[12]);
    *((_BYTE *)a1 + v6[13]) = *((_BYTE *)a2 + v6[13]);
    *((_BYTE *)a1 + v6[14]) = *((_BYTE *)a2 + v6[14]);
    v42 = v6[15];
    v43 = (char *)a1 + v42;
    v44 = (char *)a2 + v42;
    *(_QWORD *)v43 = *(_QWORD *)v44;
    v43[8] = v44[8];
    v45 = v6[16];
    v46 = (_OWORD *)((char *)a1 + v45);
    v47 = (_OWORD *)((char *)a2 + v45);
    if (v67((char *)a2 + v45, 1, v69))
    {
      v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
      memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
    }
    else
    {
      v49 = v47[1];
      *v46 = *v47;
      v46[1] = v49;
      *((_BYTE *)v46 + 32) = *((_BYTE *)v47 + 32);
      *(_OWORD *)((char *)v46 + 40) = *(_OWORD *)((char *)v47 + 40);
      *((_QWORD *)v46 + 7) = *((_QWORD *)v47 + 7);
      *((_BYTE *)v46 + 64) = *((_BYTE *)v47 + 64);
      *(_OWORD *)((char *)v46 + 113) = *(_OWORD *)((char *)v47 + 113);
      *(_OWORD *)((char *)v46 + 104) = *(_OWORD *)((char *)v47 + 104);
      *(_OWORD *)((char *)v46 + 88) = *(_OWORD *)((char *)v47 + 88);
      *(_OWORD *)((char *)v46 + 72) = *(_OWORD *)((char *)v47 + 72);
      *((_BYTE *)v46 + 129) = *((_BYTE *)v47 + 129);
      v50 = v69[11];
      v51 = (char *)v46 + v50;
      v52 = (char *)v47 + v50;
      v53 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v53 - 8) + 32))(v51, v52, v53);
      *(_OWORD *)((char *)v46 + v69[12]) = *(_OWORD *)((char *)v47 + v69[12]);
      *((_BYTE *)v46 + v69[13]) = *((_BYTE *)v47 + v69[13]);
      *((_BYTE *)v46 + v69[14]) = *((_BYTE *)v47 + v69[14]);
      *((_BYTE *)v46 + v69[15]) = *((_BYTE *)v47 + v69[15]);
      *(_OWORD *)((char *)v46 + v69[16]) = *(_OWORD *)((char *)v47 + v69[16]);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v68 + 56))(v46, 0, 1, v69);
    }
    *(_OWORD *)((char *)a1 + v6[17]) = *(_OWORD *)((char *)a2 + v6[17]);
    v54 = v6[18];
    v55 = (char *)a1 + v54;
    v56 = (char *)a2 + v54;
    v55[8] = v56[8];
    *(_QWORD *)v55 = *(_QWORD *)v56;
    v57 = v6[19];
    v58 = (char *)a1 + v57;
    v59 = (char *)a2 + v57;
    *(_QWORD *)v58 = *(_QWORD *)v59;
    v58[8] = v59[8];
    *((_BYTE *)a1 + v6[20]) = *((_BYTE *)a2 + v6[20]);
    *((_BYTE *)a1 + v6[21]) = *((_BYTE *)a2 + v6[21]);
    v60 = v6[22];
    v61 = (char *)a1 + v60;
    v62 = (char *)a2 + v60;
    v63 = type metadata accessor for TranscriptRequestInformation(0);
    v64 = *(_QWORD *)(v63 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48))(v62, 1, v63))
    {
      v65 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2C40);
      memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v64 + 32))(v61, v62, v63);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v64 + 56))(v61, 0, 1, v63);
    }
    swift_storeEnumTagMultiPayload(a1, v70, 0);
  }
  return a1;
}

_QWORD *assignWithTake for ShareSheetContentSource(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  unsigned int (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  _OWORD *v46;
  _OWORD *v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int (*v67)(char *, uint64_t, int *);
  int *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  unsigned int (*v72)(char *, uint64_t, uint64_t);
  char *v73;
  uint64_t v74;

  if (a1 != a2)
  {
    sub_12B42C((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload(a2, a3))
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v69 = a3;
      *a1 = *a2;
      *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
      v6 = (int *)type metadata accessor for EpisodeOffer(0);
      v7 = v6[6];
      v8 = (char *)a1 + v7;
      v9 = (char *)a2 + v7;
      *(_QWORD *)v8 = *(_QWORD *)((char *)a2 + v7);
      *(_OWORD *)(v8 + 8) = *(_OWORD *)((char *)a2 + v7 + 8);
      v8[24] = *((_BYTE *)a2 + v7 + 24);
      v10 = (int *)type metadata accessor for ShowOffer(0);
      v11 = v10[7];
      v12 = &v8[v11];
      v13 = &v9[v11];
      v14 = (int *)type metadata accessor for ArtworkModel(0);
      v15 = *((_QWORD *)v14 - 1);
      v67 = *(unsigned int (**)(char *, uint64_t, int *))(v15 + 48);
      v68 = v14;
      v70 = v15;
      if (v67(v13, 1, v14))
      {
        v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
        memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
      }
      else
      {
        v17 = *((_OWORD *)v13 + 1);
        *(_OWORD *)v12 = *(_OWORD *)v13;
        *((_OWORD *)v12 + 1) = v17;
        v12[32] = v13[32];
        *(_OWORD *)(v12 + 40) = *(_OWORD *)(v13 + 40);
        *((_QWORD *)v12 + 7) = *((_QWORD *)v13 + 7);
        v12[64] = v13[64];
        *(_OWORD *)(v12 + 113) = *(_OWORD *)(v13 + 113);
        *(_OWORD *)(v12 + 104) = *(_OWORD *)(v13 + 104);
        *(_OWORD *)(v12 + 88) = *(_OWORD *)(v13 + 88);
        *(_OWORD *)(v12 + 72) = *(_OWORD *)(v13 + 72);
        v12[129] = v13[129];
        v18 = v14[11];
        v71 = &v13[v18];
        v73 = &v12[v18];
        v19 = type metadata accessor for ArtworkCrop(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v73, v71, v19);
        *(_OWORD *)&v12[v14[12]] = *(_OWORD *)&v13[v14[12]];
        v12[v14[13]] = v13[v14[13]];
        v12[v14[14]] = v13[v14[14]];
        v12[v14[15]] = v13[v14[15]];
        *(_OWORD *)&v12[v14[16]] = *(_OWORD *)&v13[v14[16]];
        (*(void (**)(char *, _QWORD, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
      }
      *(_OWORD *)&v8[v10[8]] = *(_OWORD *)&v9[v10[8]];
      *(_OWORD *)&v8[v10[9]] = *(_OWORD *)&v9[v10[9]];
      v8[v10[10]] = v9[v10[10]];
      *(_OWORD *)&v8[v10[11]] = *(_OWORD *)&v9[v10[11]];
      *(_OWORD *)&v8[v10[12]] = *(_OWORD *)&v9[v10[12]];
      v20 = v10[13];
      v21 = &v8[v20];
      v22 = &v9[v20];
      v23 = type metadata accessor for URL(0);
      v24 = *(_QWORD *)(v23 - 8);
      v72 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48);
      v74 = v24;
      if (v72(v22, 1, v23))
      {
        v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
        memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v21, v22, v23);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
      }
      *(_OWORD *)&v8[v10[14]] = *(_OWORD *)&v9[v10[14]];
      *(_OWORD *)&v8[v10[15]] = *(_OWORD *)&v9[v10[15]];
      v26 = v10[16];
      v27 = &v8[v26];
      v28 = &v9[v26];
      v29 = v72;
      if (v72(&v9[v26], 1, v23))
      {
        v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
        memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v74 + 32))(v27, v28, v23);
        v29 = v72;
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v74 + 56))(v27, 0, 1, v23);
      }
      v31 = v10[17];
      v32 = &v8[v31];
      v33 = &v9[v31];
      if (v29(&v9[v31], 1, v23))
      {
        v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
        memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
        v35 = v74;
      }
      else
      {
        v36 = v33;
        v35 = v74;
        (*(void (**)(char *, char *, uint64_t))(v74 + 32))(v32, v36, v23);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v74 + 56))(v32, 0, 1, v23);
      }
      v8[v10[18]] = v9[v10[18]];
      v37 = v6[7];
      v38 = (char *)a1 + v37;
      v39 = (char *)a2 + v37;
      if (v29((char *)a2 + v37, 1, v23))
      {
        v40 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
        memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
        v41 = *(void (**)(char *, char *, uint64_t))(v35 + 32);
      }
      else
      {
        v41 = *(void (**)(char *, char *, uint64_t))(v35 + 32);
        v41(v38, v39, v23);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v38, 0, 1, v23);
      }
      v41((char *)a1 + v6[8], (char *)a2 + v6[8], v23);
      *(_QWORD *)((char *)a1 + v6[9]) = *(_QWORD *)((char *)a2 + v6[9]);
      *(_OWORD *)((char *)a1 + v6[10]) = *(_OWORD *)((char *)a2 + v6[10]);
      *(_OWORD *)((char *)a1 + v6[11]) = *(_OWORD *)((char *)a2 + v6[11]);
      *(_QWORD *)((char *)a1 + v6[12]) = *(_QWORD *)((char *)a2 + v6[12]);
      *((_BYTE *)a1 + v6[13]) = *((_BYTE *)a2 + v6[13]);
      *((_BYTE *)a1 + v6[14]) = *((_BYTE *)a2 + v6[14]);
      v42 = v6[15];
      v43 = (char *)a1 + v42;
      v44 = (char *)a2 + v42;
      *(_QWORD *)v43 = *(_QWORD *)v44;
      v43[8] = v44[8];
      v45 = v6[16];
      v46 = (_OWORD *)((char *)a1 + v45);
      v47 = (_OWORD *)((char *)a2 + v45);
      if (v67((char *)a2 + v45, 1, v68))
      {
        v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
        memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
      }
      else
      {
        v49 = v47[1];
        *v46 = *v47;
        v46[1] = v49;
        *((_BYTE *)v46 + 32) = *((_BYTE *)v47 + 32);
        *(_OWORD *)((char *)v46 + 40) = *(_OWORD *)((char *)v47 + 40);
        *((_QWORD *)v46 + 7) = *((_QWORD *)v47 + 7);
        *((_BYTE *)v46 + 64) = *((_BYTE *)v47 + 64);
        *(_OWORD *)((char *)v46 + 113) = *(_OWORD *)((char *)v47 + 113);
        *(_OWORD *)((char *)v46 + 104) = *(_OWORD *)((char *)v47 + 104);
        *(_OWORD *)((char *)v46 + 88) = *(_OWORD *)((char *)v47 + 88);
        *(_OWORD *)((char *)v46 + 72) = *(_OWORD *)((char *)v47 + 72);
        *((_BYTE *)v46 + 129) = *((_BYTE *)v47 + 129);
        v50 = v68[11];
        v51 = (char *)v46 + v50;
        v52 = (char *)v47 + v50;
        v53 = type metadata accessor for ArtworkCrop(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v53 - 8) + 32))(v51, v52, v53);
        *(_OWORD *)((char *)v46 + v68[12]) = *(_OWORD *)((char *)v47 + v68[12]);
        *((_BYTE *)v46 + v68[13]) = *((_BYTE *)v47 + v68[13]);
        *((_BYTE *)v46 + v68[14]) = *((_BYTE *)v47 + v68[14]);
        *((_BYTE *)v46 + v68[15]) = *((_BYTE *)v47 + v68[15]);
        *(_OWORD *)((char *)v46 + v68[16]) = *(_OWORD *)((char *)v47 + v68[16]);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v70 + 56))(v46, 0, 1, v68);
      }
      *(_OWORD *)((char *)a1 + v6[17]) = *(_OWORD *)((char *)a2 + v6[17]);
      v54 = v6[18];
      v55 = (char *)a1 + v54;
      v56 = (char *)a2 + v54;
      v55[8] = v56[8];
      *(_QWORD *)v55 = *(_QWORD *)v56;
      v57 = v6[19];
      v58 = (char *)a1 + v57;
      v59 = (char *)a2 + v57;
      *(_QWORD *)v58 = *(_QWORD *)v59;
      v58[8] = v59[8];
      *((_BYTE *)a1 + v6[20]) = *((_BYTE *)a2 + v6[20]);
      *((_BYTE *)a1 + v6[21]) = *((_BYTE *)a2 + v6[21]);
      v60 = v6[22];
      v61 = (char *)a1 + v60;
      v62 = (char *)a2 + v60;
      v63 = type metadata accessor for TranscriptRequestInformation(0);
      v64 = *(_QWORD *)(v63 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48))(v62, 1, v63))
      {
        v65 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2C40);
        memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v64 + 32))(v61, v62, v63);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v64 + 56))(v61, 0, 1, v63);
      }
      swift_storeEnumTagMultiPayload(a1, v69, 0);
    }
  }
  return a1;
}

uint64_t sub_131D24(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for EpisodeOffer(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
    swift_initEnumMetadataMultiPayload(a1, 256, 2, v4);
    return 0;
  }
  return result;
}

void ModernShelf.ItemKind.modelType.getter(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_131DBC()
{
  uint64_t v0;

  v0 = type metadata accessor for LegacyLockup(0);
  sub_F1C0(&qword_3BB900, (void (*)(uint64_t))type metadata accessor for LegacyLockup, (uint64_t)&protocol conformance descriptor for LegacyLockup);
  return v0;
}

void sub_131E88()
{
  type metadata accessor for Review(0);
  JUMPOUT(0x131E70);
}

void sub_131EB0()
{
  type metadata accessor for ShowHeader(0);
  JUMPOUT(0x131E70);
}

void sub_131ED8()
{
  type metadata accessor for EpisodeHeader(0);
  JUMPOUT(0x131E70);
}

void sub_131F00()
{
  sub_1322D0();
  JUMPOUT(0x131E74);
}

void sub_131F10()
{
  type metadata accessor for Highlight(0);
  JUMPOUT(0x131E70);
}

void sub_131F38()
{
  type metadata accessor for HighlightItem(0);
  JUMPOUT(0x131E70);
}

void sub_131F60()
{
  type metadata accessor for Paragraph(0);
  JUMPOUT(0x131E70);
}

void sub_131F88()
{
  type metadata accessor for SearchHint(0);
  JUMPOUT(0x131E70);
}

void sub_131FB0()
{
  type metadata accessor for ShowHero(0);
  JUMPOUT(0x131E70);
}

void sub_131FD8()
{
  type metadata accessor for EditorialCard(0);
  JUMPOUT(0x131E70);
}

void sub_132000()
{
  type metadata accessor for Showcase(0);
  JUMPOUT(0x131E70);
}

void sub_132028()
{
  type metadata accessor for Brick(0);
  JUMPOUT(0x131E70);
}

void sub_132050()
{
  type metadata accessor for RoomUber(0);
  JUMPOUT(0x131E70);
}

void sub_132078()
{
  type metadata accessor for EmptyModel(0);
  JUMPOUT(0x131E70);
}

void sub_1320A0()
{
  type metadata accessor for Ratings(0);
  JUMPOUT(0x131E70);
}

void sub_1320C8()
{
  type metadata accessor for TapToRate(0);
  JUMPOUT(0x131E70);
}

void sub_1320F0()
{
  type metadata accessor for ReviewActions(0);
  JUMPOUT(0x131E70);
}

void sub_132118()
{
  type metadata accessor for ChannelHeader(0);
  JUMPOUT(0x131E70);
}

void sub_132140()
{
  type metadata accessor for CategoryListItem(0);
  JUMPOUT(0x131E70);
}

void sub_132168()
{
  type metadata accessor for UpsellBanner(0);
  JUMPOUT(0x131E70);
}

void sub_132190()
{
  type metadata accessor for ToggleCellModel(0);
  JUMPOUT(0x131E70);
}

void sub_1321B8()
{
  type metadata accessor for ShowEpisodeCountHeader(0);
  JUMPOUT(0x131E70);
}

void sub_1321E0()
{
  type metadata accessor for EpisodeUpsellBannerModel(0);
  JUMPOUT(0x131E70);
}

void sub_132208()
{
  sub_D7F0C();
  JUMPOUT(0x131E70);
}

void sub_132230()
{
  type metadata accessor for ErrorModel(0);
  JUMPOUT(0x131E70);
}

void sub_132258()
{
  type metadata accessor for TranscriptSnippet(0);
  JUMPOUT(0x131E70);
}

void sub_132280()
{
  type metadata accessor for RecentlySearchedHeader(0);
  JUMPOUT(0x131E70);
}

void sub_1322A8()
{
  type metadata accessor for CategorySelection(0);
  JUMPOUT(0x131E70);
}

unint64_t sub_1322D0()
{
  unint64_t result;

  result = qword_3BB910;
  if (!qword_3BB910)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Label);
    atomic_store(result, (unint64_t *)&qword_3BB910);
  }
  return result;
}

BOOL ModernShelf.ItemKind.hasOrdinal.getter(char a1)
{
  return (a1 & 0xFE) == 44;
}

uint64_t ModernShelf.ItemKind.isEpisodeKind.getter(unsigned __int8 a1)
{
  return (a1 < 9u) & (0x1EFu >> a1);
}

uint64_t ModernShelf.ItemKind.targetType.getter(char a1)
{
  if (a1 == 25 || a1 == 7)
    return static MetricsTargetType.powerSwoosh.getter();
  else
    return static MetricsTargetType.swoosh.getter();
}

_UNKNOWN **static ModernShelf.ItemKind.allCases.getter()
{
  return &off_3743C8;
}

uint64_t ModernShelf.ItemKind.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1323A4 + 4 * word_2F6D7A[a1]))(0x4365646F73697065, 0xEC00000074726168);
}

unint64_t sub_1323A4()
{
  return 0xD000000000000016;
}

uint64_t sub_132A10(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  v2 = *a2;
  v3 = ModernShelf.ItemKind.rawValue.getter(*a1);
  v5 = v4;
  v6 = ModernShelf.ItemKind.rawValue.getter(v2);
  if (v3 == v6 && v5 == v7)
    v9 = 1;
  else
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

uint64_t sub_132A98@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = _s8ShelfKit06ModernA0V8ItemKindO8rawValueAESgSS_tcfC_0(*a1, a1[1]);
  *a2 = result;
  return result;
}

uint64_t sub_132AC4@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = ModernShelf.ItemKind.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_132AEC(_QWORD *a1@<X8>)
{
  *a1 = &off_3743C8;
}

Swift::Int sub_132AFC()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  v2 = ModernShelf.ItemKind.rawValue.getter(v1);
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_132B5C(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = ModernShelf.ItemKind.rawValue.getter(*v1);
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease();
}

Swift::Int sub_132B9C()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  v2 = ModernShelf.ItemKind.rawValue.getter(v1);
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_132BF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_133034();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_132C54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_133034();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t ModernShelf.ItemPresentation.compactHorizontalPresentation.getter@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  __int16 v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = *v1;
  v4 = v1[1];
  v5 = v1[6];
  v6 = *(unsigned int *)(v1 + 2);
  v7 = v1[7];
  v8 = *((_QWORD *)v1 + 1);
  v9 = (v6 << 16) | (v5 << 48);
  if (v4)
    v10 = 256;
  else
    v10 = 0;
  result = sub_132D4C(v3 | (unsigned __int16)v10);
  v12 = 0x100000000000000;
  if (!v7)
    v12 = 0;
  v13 = v12 & 0xFFFFFFFFFFFFFF00 | result | v10 | v9;
  v14 = 512;
  if (result == 65)
  {
    v15 = 0;
  }
  else
  {
    v14 = v13;
    v15 = v8;
  }
  *a1 = v14;
  a1[1] = v15;
  return result;
}

uint64_t sub_132D4C(__int16 a1)
{
  int v2;
  uint64_t result;

  v2 = a1 - 2;
  result = 23;
  switch(v2)
  {
    case 0:
      if ((a1 & 0x100) != 0)
        goto LABEL_12;
      result = 4;
      break;
    case 4:
      if ((a1 & 0x100) != 0)
        goto LABEL_12;
      result = 5;
      break;
    case 5:
      if ((a1 & 0x100) != 0)
        goto LABEL_12;
      result = 3;
      break;
    case 11:
      if ((a1 & 0x100) != 0)
        goto LABEL_12;
      result = 14;
      break;
    case 20:
      return result;
    case 34:
      if ((a1 & 0x100) != 0)
        goto LABEL_12;
      result = 37;
      break;
    case 38:
      result = 32;
      break;
    case 39:
      result = 33;
      break;
    case 40:
      if ((a1 & 0x100) == 0)
        goto LABEL_18;
      result = 43;
      break;
    case 42:
      if ((a1 & 0x100) != 0)
        result = 45;
      else
LABEL_18:
        result = 46;
      break;
    default:
LABEL_12:
      result = 65;
      break;
  }
  return result;
}

uint64_t _s8ShelfKit06ModernA0V8ItemKindO8rawValueAESgSS_tcfC_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = _findStringSwitchCaseWithCache(cases:string:cache:)(&off_373D90, a1, a2, &unk_3B0310);
  swift_bridgeObjectRelease(a2);
  if (v3 >= 0x41)
    return 65;
  else
    return v3;
}

unint64_t sub_132E44()
{
  unint64_t result;

  result = qword_3BB9A8;
  if (!qword_3BB9A8)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_3BB9B0);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A]);
    atomic_store(result, (unint64_t *)&qword_3BB9A8);
  }
  return result;
}

unint64_t sub_132E94()
{
  unint64_t result;

  result = qword_3BB9B8;
  if (!qword_3BB9B8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ModernShelf.ItemKind);
    atomic_store(result, (unint64_t *)&qword_3BB9B8);
  }
  return result;
}

uint64_t _s8ItemKindOwet(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xC0)
    goto LABEL_17;
  if (a2 + 64 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 64) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 64;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 64;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 64;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x41;
  v8 = v6 - 65;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s8ItemKindOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 64 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 64) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xC0)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xBF)
    return ((uint64_t (*)(void))((char *)&loc_132FB4 + 4 * byte_2F6E2C[v4]))();
  *a1 = a2 + 64;
  return ((uint64_t (*)(void))((char *)sub_132FE8 + 4 * byte_2F6E27[v4]))();
}

uint64_t sub_132FE8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_132FF0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x132FF8);
  return result;
}

uint64_t sub_133004(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x13300CLL);
  *(_BYTE *)result = a2 + 64;
  return result;
}

uint64_t sub_133010(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_133018(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ModernShelf.ItemKind()
{
  return &type metadata for ModernShelf.ItemKind;
}

unint64_t sub_133034()
{
  unint64_t result;

  result = qword_3BB9C0;
  if (!qword_3BB9C0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ModernShelf.ItemKind);
    atomic_store(result, (unint64_t *)&qword_3BB9C0);
  }
  return result;
}

uint64_t sub_133078@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, a1);
}

uint64_t sub_133090(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;

  v10 = type metadata accessor for _ConditionalContent.Storage(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v14 - v11;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))((char *)&v14 - v11, a1, a2);
  swift_storeEnumTagMultiPayload(v12, v10, 0);
  return _ConditionalContent<>.init(storage:)(v12, a2, a3, a4, a5);
}

uint64_t sub_133154(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;

  v10 = type metadata accessor for _ConditionalContent.Storage(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v14 - v11;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))((char *)&v14 - v11, a1, a3);
  swift_storeEnumTagMultiPayload(v12, v10, 1);
  return _ConditionalContent<>.init(storage:)(v12, a2, a3, a4, a5);
}

double ArtworkShadow.offset.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

uint64_t ArtworkShadow.init(color:radius:offset:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>)
{
  *(_QWORD *)a2 = result;
  *(double *)(a2 + 8) = a3;
  *(double *)(a2 + 16) = a4;
  *(double *)(a2 + 24) = a5;
  return result;
}

double sub_133230()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v0 = static Color.black.getter();
  v1 = Color.opacity(_:)(0.15);
  swift_release(v0);
  qword_3BB9C8 = v1;
  result = 6.0;
  *(_OWORD *)algn_3BB9D0 = xmmword_2F6F70;
  qword_3BB9E0 = 0x4000000000000000;
  return result;
}

uint64_t static ArtworkShadow.default.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  if (qword_3B0100 != -1)
    swift_once(&qword_3B0100, sub_133230);
  v2 = qword_3BB9E0;
  *(_QWORD *)a1 = qword_3BB9C8;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)algn_3BB9D0;
  *(_QWORD *)(a1 + 24) = v2;
  return swift_retain();
}

uint64_t View.artworkStyle<A>(shape:shadow:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;

  v26 = a5;
  v24 = a7;
  v25 = a3;
  v11 = *(_QWORD *)(a4 - 8);
  __chkstk_darwin(a1);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for ArtworkStyleModifier(0, v14, v15, v14);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v23 - v18;
  v20 = *a2;
  v23 = *(_OWORD *)(a2 + 1);
  v21 = a2[3];
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1, a4);
  v27 = v20;
  v28 = v23;
  v29 = v21;
  sub_13342C((uint64_t)v13, (__int128 *)&v27, a4, a6, (uint64_t)v19);
  swift_retain();
  View.modifier<A>(_:)(v19, v25, v16, v26);
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v19, v16);
}

uint64_t sub_13342C@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  __int128 v17;

  v17 = *a2;
  v8 = *((_QWORD *)a2 + 2);
  v9 = *((_QWORD *)a2 + 3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(a5, a1);
  v11 = (int *)type metadata accessor for ArtworkStyleModifier(0, a3, a4, v10);
  v12 = a5 + v11[9];
  *(_OWORD *)v12 = v17;
  *(_QWORD *)(v12 + 16) = v8;
  *(_QWORD *)(v12 + 24) = v9;
  v13 = (_QWORD *)(a5 + v11[10]);
  *v13 = swift_getKeyPath(&unk_2F70C8);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BBA70);
  swift_storeEnumTagMultiPayload(v13, v14, 0);
  v15 = a5 + v11[11];
  result = swift_getKeyPath(&unk_2F70F8);
  *(_QWORD *)v15 = result;
  *(_BYTE *)(v15 + 8) = 0;
  return result;
}

uint64_t View.artworkStyle<A>(shape:shadowColor:shadowRadius:shadowOffsetY:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7, double a8)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  char *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  double v30;

  v27 = a5;
  v26 = a3;
  v14 = *(_QWORD *)(a4 - 8);
  __chkstk_darwin(a1);
  v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for ArtworkStyleModifier(0, v17, v18, v17);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = __chkstk_darwin(v19);
  v23 = (char *)&v25 - v22;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v14 + 16))(v16, a1, a4, v21);
  *(_QWORD *)&v28 = a2;
  *((double *)&v28 + 1) = a7;
  v29 = 0;
  v30 = a8;
  sub_13342C((uint64_t)v16, &v28, a4, a6, (uint64_t)v23);
  swift_retain();
  View.modifier<A>(_:)(v23, v26, v19, v27);
  return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v23, v19);
}

double sub_133644(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  double v5;

  v2 = v1 + *(int *)(a1 + 44);
  v3 = *(_QWORD *)v2;
  v4 = *(_BYTE *)(v2 + 8);
  sub_A0A18(*(_QWORD *)v2, v4);
  v5 = sub_269FB8(v3, v4);
  sub_A0A6C(v3, v4);
  return v5;
}

uint64_t sub_1336A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;
  void (*v8)(char *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v14;

  v0 = type metadata accessor for ColorScheme(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v6 = (char *)&v14 - v5;
  sub_26A33C((uint64_t)&v14 - v5);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for ColorScheme.dark(_:), v0);
  v7 = static ColorScheme.== infix(_:_:)(v6, v3);
  v8 = *(void (**)(char *, uint64_t))(v1 + 8);
  v8(v3, v0);
  v9 = ((uint64_t (*)(char *, uint64_t))v8)(v6, v0);
  if ((v7 & 1) != 0)
  {
    v10 = static Color.white.getter(v9);
    v11 = 0.1;
  }
  else
  {
    v10 = static Color.black.getter(v9);
    v11 = 0.08;
  }
  v12 = Color.opacity(_:)(v11);
  swift_release(v10);
  return v12;
}

uint64_t sub_1337B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  double *v17;
  double v18;
  double v19;
  double v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t WitnessTable;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, char *, uint64_t);
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  void *v53;

  v39 = a2;
  v34 = *(_QWORD *)(a1 + 16);
  v4 = type metadata accessor for ModifiedContent(0, v34, &type metadata for _ShadowEffect);
  v35 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v33 - v5;
  v7 = type metadata accessor for ModifiedContent(0, v4, &type metadata for _PaddingLayout);
  v36 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v33 - v12;
  v14 = type metadata accessor for _ConditionalContent(0, v7, &type metadata for EmptyView, v11);
  v37 = *(_QWORD *)(v14 - 8);
  v38 = v14;
  __chkstk_darwin(v14);
  v16 = (char *)&v33 - v15;
  v17 = (double *)(v2 + *(int *)(a1 + 36));
  v18 = *v17;
  if (*(_QWORD *)v17)
  {
    v20 = v17[2];
    v19 = v17[3];
    v21 = v17[1];
    v22 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16);
    v23 = swift_retain();
    View.shadow(color:radius:x:y:)(v23, v34, v22, v21, v20, v19);
    v42 = v22;
    v43 = &protocol witness table for _ShadowEffect;
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>);
    View.padding(_:)(v4, WitnessTable, 1.0);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v6, v4);
    v40 = WitnessTable;
    v41 = &protocol witness table for _PaddingLayout;
    v25 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>);
    v26 = v36;
    v27 = *(void (**)(char *, char *, uint64_t))(v36 + 16);
    v27(v13, v9, v7);
    v28 = *(void (**)(char *, uint64_t))(v26 + 8);
    v28(v9, v7);
    v27(v9, v13, v7);
    sub_133090((uint64_t)v9, v7, (uint64_t)&type metadata for EmptyView, v25, (uint64_t)&protocol witness table for EmptyView);
    swift_release(*(_QWORD *)&v18);
    v28(v9, v7);
    v28(v13, v7);
  }
  else
  {
    v22 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16);
    v52 = v22;
    v53 = &protocol witness table for _ShadowEffect;
    v50 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>);
    v51 = &protocol witness table for _PaddingLayout;
    v29 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>);
    sub_133154(v29, v7, (uint64_t)&type metadata for EmptyView, v29, (uint64_t)&protocol witness table for EmptyView);
  }
  v48 = v22;
  v49 = &protocol witness table for _ShadowEffect;
  v46 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>);
  v47 = &protocol witness table for _PaddingLayout;
  v44 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>);
  v45 = &protocol witness table for EmptyView;
  v30 = v38;
  swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>);
  v31 = v37;
  (*(void (**)(uint64_t, char *, uint64_t))(v37 + 16))(v39, v16, v30);
  return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v16, v30);
}

uint64_t ArtworkStyleModifier.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t WitnessTable;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(char *, char *, uint64_t);
  char *v63;
  void (*v64)(char *, uint64_t);
  uint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  void *v104;
  uint64_t v105;
  void *v106;
  _QWORD v107[6];

  v86 = a1;
  v91 = a3;
  v4 = *(_QWORD *)(a2 + 16);
  v92 = a2;
  v5 = type metadata accessor for ModifiedContent(255, v4, &type metadata for _ShadowEffect);
  v6 = type metadata accessor for ModifiedContent(255, v5, &type metadata for _PaddingLayout);
  v8 = type metadata accessor for _ConditionalContent(0, v6, &type metadata for EmptyView, v7);
  v90 = *(_QWORD *)(v8 - 8);
  v9 = __chkstk_darwin(v8);
  v89 = (uint64_t)&v66 - v10;
  v11 = *(_QWORD *)(a2 + 24);
  v107[0] = v4;
  v107[1] = &type metadata for Color;
  v107[2] = &type metadata for EmptyView;
  v107[3] = v11;
  v107[4] = &protocol witness table for Color;
  v107[5] = &protocol witness table for EmptyView;
  v12 = type metadata accessor for StrokeShapeView(0, v107, v9);
  v88 = *(_QWORD *)(v12 - 8);
  v13 = v12;
  __chkstk_darwin(v12);
  v84 = (uint64_t)&v66 - v14;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for ArtworkStyleModifier<A>);
  v16 = type metadata accessor for _ViewModifier_Content(255, a2, WitnessTable);
  v68 = type metadata accessor for _ClipEffect(255, v4, v11);
  v17 = type metadata accessor for ModifiedContent(0, v16, v68);
  v72 = *(_QWORD *)(v17 - 8);
  v18 = __chkstk_darwin(v17);
  v20 = (char *)&v66 - v19;
  v79 = type metadata accessor for _ContentShapeModifier(255, v4, v11, v18);
  v21 = type metadata accessor for ModifiedContent(0, v17, v79);
  v22 = *(_QWORD *)(v21 - 8);
  v73 = v21;
  v83 = v22;
  __chkstk_darwin(v21);
  v67 = (char *)&v66 - v23;
  v77 = v13;
  v78 = swift_getWitnessTable(&protocol conformance descriptor for StrokeShapeView<A, B, C>);
  v82 = type metadata accessor for _OverlayModifier(255, v13, v78);
  v24 = type metadata accessor for ModifiedContent(0, v21, v82);
  v87 = *(_QWORD *)(v24 - 8);
  v71 = v24;
  __chkstk_darwin(v24);
  v70 = (char *)&v66 - v25;
  v105 = *(_QWORD *)(v11 + 16);
  v106 = &protocol witness table for _ShadowEffect;
  v103 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>);
  v104 = &protocol witness table for _PaddingLayout;
  v101 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>);
  v102 = &protocol witness table for EmptyView;
  v74 = v8;
  v75 = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>);
  v80 = type metadata accessor for _BackgroundModifier(255);
  v26 = type metadata accessor for ModifiedContent(0, v24, v80);
  v81 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v69 = (char *)&v66 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v76 = (char *)&v66 - v29;
  v30 = swift_getWitnessTable(&protocol conformance descriptor for _ViewModifier_Content<A>);
  v31 = v85;
  View.clipShape<A>(_:style:)(v85, 256, v16, v4, v30, v11);
  v32 = swift_getWitnessTable(&protocol conformance descriptor for _ClipEffect<A>);
  v99 = v30;
  v100 = v32;
  v33 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>);
  v34 = v67;
  View.contentShape<A>(_:eoFill:)(v31, 0, v17, v4, v33, v11);
  (*(void (**)(char *, uint64_t))(v72 + 8))(v20, v17);
  v35 = v92;
  v36 = sub_1336A0();
  v107[0] = v36;
  v37.n128_f64[0] = 1.0 / sub_133644(v35);
  v38 = v84;
  sub_134240((uint64_t)v107, 1, v4, (uint64_t)&type metadata for Color, v11, (uint64_t)&protocol witness table for Color, v84, v37);
  v39 = swift_release(v36);
  v40 = static Alignment.center.getter(v39);
  v42 = v41;
  v43 = swift_getWitnessTable(&protocol conformance descriptor for _ContentShapeModifier<A>);
  v97 = v33;
  v98 = v43;
  v44 = v73;
  v45 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>);
  v46 = v70;
  v47 = v42;
  v48 = v77;
  View.overlay<A>(_:alignment:)(v38, v40, v47, v44, v77, v45, v78);
  (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v38, v48);
  (*(void (**)(char *, uint64_t))(v83 + 8))(v34, v44);
  v49 = v89;
  v50 = sub_1337B8(v92, v89);
  v51 = static Alignment.center.getter(v50);
  v53 = v52;
  v54 = swift_getWitnessTable(&protocol conformance descriptor for _OverlayModifier<A>);
  v95 = v45;
  v96 = v54;
  v55 = v71;
  v56 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>);
  v57 = v69;
  v58 = v53;
  v59 = v74;
  View.background<A>(_:alignment:)(v49, v51, v58, v55, v74, v56, v75);
  (*(void (**)(uint64_t, uint64_t))(v90 + 8))(v49, v59);
  (*(void (**)(char *, uint64_t))(v87 + 8))(v46, v55);
  v60 = swift_getWitnessTable(&protocol conformance descriptor for _BackgroundModifier<A>);
  v93 = v56;
  v94 = v60;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>);
  v61 = v81;
  v62 = *(void (**)(char *, char *, uint64_t))(v81 + 16);
  v63 = v76;
  v62(v76, v57, v26);
  v64 = *(void (**)(char *, uint64_t))(v61 + 8);
  v64(v57, v26);
  v62(v91, v63, v26);
  return ((uint64_t (*)(char *, uint64_t))v64)(v63, v26);
}

uint64_t sub_134240@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>, __n128 a8@<Q0>)
{
  _QWORD v16[5];

  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v16, 0, 0, _swiftEmptyArrayStorage, a8, 10.0, 0.0);
  sub_1342E4(a1, (uint64_t)v16, a2, a3, a4, a5, a6, a7);
  return sub_135B58((uint64_t)v16);
}

uint64_t sub_1342E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v8;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  int v27;

  v26 = a7;
  v27 = a3;
  v15 = *(_QWORD *)(a5 - 8);
  __chkstk_darwin(a1);
  v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v18);
  v21 = (char *)&v26 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v22 + 16))(v21, v8, v23, v19);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a1, a5);
  swift_bridgeObjectRetain();
  return sub_134410((uint64_t)v21, (uint64_t)v17, a2, v27, v24, a4, a5, (uint64_t)&type metadata for EmptyView, a8, a6, v26, (uint64_t)&protocol witness table for EmptyView);
}

uint64_t sub_134410@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t WitnessTable;
  uint64_t v27;
  char *v28;
  void (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t);
  uint64_t v42;
  char *v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  int v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD v64[5];

  v56 = a4;
  v52 = a3;
  v53 = a2;
  v62 = a9;
  v63 = a1;
  v47 = a11;
  v48 = a10;
  v59 = a5;
  v60 = a12;
  v57 = *(_QWORD *)(a8 - 8);
  v54 = a8;
  __chkstk_darwin(a1);
  v55 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = type metadata accessor for _BackgroundModifier(0);
  v15 = __chkstk_darwin(v61);
  v58 = (char *)&v45 - v16;
  v50 = *(_QWORD *)(a7 - 8);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v45 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = *(_QWORD *)(a6 - 8);
  v20 = v49;
  __chkstk_darwin(v17);
  v22 = (char *)&v45 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for _StrokedShape(0, a6, a10);
  __chkstk_darwin(v23);
  v25 = (char *)&v45 - v24;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _StrokedShape<A>);
  v64[0] = v23;
  v64[1] = a7;
  v64[2] = WitnessTable;
  v64[3] = a11;
  v51 = type metadata accessor for _ShapeView(0, v64);
  __chkstk_darwin(v51);
  v28 = (char *)&v45 - v27;
  v29 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 16);
  v46 = a6;
  v29(v22, v63, a6);
  _StrokedShape.init(shape:style:)(v22, v52, a6, v48);
  v30 = v50;
  v31 = v53;
  (*(void (**)(char *, uint64_t, uint64_t))(v50 + 16))(v19, v53, a7);
  if ((v56 & 1) != 0)
    v32 = 256;
  else
    v32 = 0;
  _ShapeView.init(shape:style:fillStyle:)(v25, v19, v32, v23, a7, WitnessTable, v47);
  v33 = v57;
  v34 = v54;
  v35 = v55;
  v36 = v59;
  v37 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v57 + 16))(v55, v59, v54);
  v38 = static Alignment.center.getter(v37);
  v40 = v39;
  v41 = *(void (**)(uint64_t, uint64_t))(v33 + 8);
  v42 = v34;
  v41(v36, v34);
  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v31, a7);
  (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v63, v46);
  v43 = v58;
  _BackgroundModifier.init(background:alignment:)(v35, v38, v40, v42, v60);
  return ModifiedContent.init(content:modifier:)(v28, v43, v51, v61);
}

BOOL _s8ShelfKit13ArtworkShadowV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  char v8;
  _BOOL8 result;

  v3 = *(double *)(a1 + 8);
  v2 = *(double *)(a1 + 16);
  v4 = *(double *)(a1 + 24);
  v6 = *(double *)(a2 + 8);
  v5 = *(double *)(a2 + 16);
  v7 = *(double *)(a2 + 24);
  v8 = static Color.== infix(_:_:)(*(_QWORD *)a1, *(_QWORD *)a2);
  result = 0;
  if ((v8 & 1) != 0 && v3 == v6)
    return v4 == v7 && v2 == v5;
  return result;
}

uint64_t type metadata accessor for ArtworkStyleModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ArtworkStyleModifier);
}

uint64_t sub_134770(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &opaque type descriptor for <<opaque return type of ArtworkStyleModifier.body(content:)>>, 1);
}

uint64_t initializeWithCopy for ArtworkShadow(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
  swift_retain(v3);
  return a1;
}

uint64_t *assignWithCopy for ArtworkShadow(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  return a1;
}

uint64_t *assignWithTake for ArtworkShadow(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
  a1[3] = a2[3];
  return a1;
}

ValueMetadata *type metadata accessor for ArtworkShadow()
{
  return &type metadata for ArtworkShadow;
}

uint64_t sub_134888(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 32);
}

void sub_134890(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[4];

  v2 = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = " ";
    sub_1357C4(319);
    if (v5 <= 0x3F)
    {
      v6[2] = *(_QWORD *)(v4 - 8) + 64;
      v6[3] = &unk_2F70A0;
      swift_initStructMetadata(a1, 0, 4, v6, a1 + 32);
    }
  }
}

uint64_t *sub_134928(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unsigned int v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v29;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = type metadata accessor for ColorScheme(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = v10 & 0xF8 | 7;
  if (*(_QWORD *)(v9 + 64) <= 8uLL)
    v12 = 8;
  else
    v12 = *(_QWORD *)(v9 + 64);
  v13 = v12 + 8;
  v14 = v10 | *(_DWORD *)(v6 + 80);
  if ((v14 & 0x1000F8) != 0
    || ((v12 + 8 + ((v11 + ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 32) & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 9 > 0x18)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + (((v14 & 0xF8 | 7u) + 16) & ~(unint64_t)(v14 & 0xF8 | 7u)));
    swift_retain();
  }
  else
  {
    v29 = v8;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    v17 = ((unint64_t)a1 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
    v18 = ((unint64_t)a2 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v17 = *(_QWORD *)v18;
    *(_QWORD *)(v17 + 8) = *(_QWORD *)(v18 + 8);
    *(_OWORD *)(v17 + 16) = *(_OWORD *)(v18 + 16);
    v19 = (_QWORD *)((v17 + v11 + 32) & ~v11);
    v20 = (_QWORD *)((v18 + v11 + 32) & ~v11);
    v21 = *((unsigned __int8 *)v20 + v12);
    swift_retain();
    if (v21 >= 2)
    {
      if (v12 <= 3)
        v22 = v12;
      else
        v22 = 4;
      __asm { BR              X11 }
    }
    if (v21 == 1)
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v9 + 16))(v19, v20, v29);
      v23 = 1;
    }
    else
    {
      *v19 = *v20;
      swift_retain();
      v23 = 0;
    }
    *((_BYTE *)v19 + v12) = v23;
    v24 = ((unint64_t)v19 + v13) & 0xFFFFFFFFFFFFFFF8;
    v25 = ((unint64_t)v20 + v13) & 0xFFFFFFFFFFFFFFF8;
    v26 = *(_QWORD *)v25;
    v27 = *(_BYTE *)(v25 + 8);
    sub_A0A18(*(_QWORD *)v25, v27);
    *(_QWORD *)v24 = v26;
    *(_BYTE *)(v24 + 8) = v27;
  }
  return a1;
}

uint64_t sub_134B48(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v3 + 8))();
  v4 = (_QWORD *)((a1 + *(_QWORD *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFFFF8);
  swift_release(*v4);
  v5 = type metadata accessor for ColorScheme(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80) & 0xF8 | 7;
  v8 = (_QWORD *)(((unint64_t)v4 + v7 + 32) & ~v7);
  if (*(_QWORD *)(v6 + 64) <= 8uLL)
    v9 = 8;
  else
    v9 = *(_QWORD *)(v6 + 64);
  v10 = *((unsigned __int8 *)v8 + v9);
  if (v10 >= 2)
  {
    if (v9 <= 3)
      v11 = v9;
    else
      v11 = 4;
    __asm { BR              X13 }
  }
  if (v10 == 1)
    (*(void (**)(_QWORD *, uint64_t))(v6 + 8))(v8, v5);
  else
    swift_release(*v8);
  return sub_A0A6C(*(_QWORD *)(((unint64_t)v8 + v9 + 8) & 0xFFFFFFFFFFFFFFF8), *(_BYTE *)((((unint64_t)v8 + v9 + 8) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_134C68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v7 = *(_QWORD *)v8;
  *(_QWORD *)(v7 + 8) = *(_QWORD *)(v8 + 8);
  *(_OWORD *)(v7 + 16) = *(_OWORD *)(v8 + 16);
  v9 = type metadata accessor for ColorScheme(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_DWORD *)(v10 + 80) & 0xF8;
  v12 = v11 + 39;
  v13 = v11 + 39 + v7;
  v14 = ~v11 & 0xFFFFFFFFFFFFFFF8;
  v15 = (_QWORD *)(v13 & v14);
  v16 = (_QWORD *)((v12 + v8) & v14);
  if (*(_QWORD *)(v10 + 64) <= 8uLL)
    v17 = 8;
  else
    v17 = *(_QWORD *)(v10 + 64);
  v18 = *((unsigned __int8 *)v16 + v17);
  swift_retain();
  if (v18 >= 2)
  {
    if (v17 <= 3)
      v19 = v17;
    else
      v19 = 4;
    __asm { BR              X11 }
  }
  if (v18 == 1)
  {
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v10 + 16))(v15, v16, v9);
    v20 = 1;
  }
  else
  {
    *v15 = *v16;
    swift_retain();
    v20 = 0;
  }
  *((_BYTE *)v15 + v17) = v20;
  v21 = ((unint64_t)v15 + v17 + 8) & 0xFFFFFFFFFFFFFFF8;
  v22 = ((unint64_t)v16 + v17 + 8) & 0xFFFFFFFFFFFFFFF8;
  v23 = *(_QWORD *)v22;
  v24 = *(_BYTE *)(v22 + 8);
  sub_A0A18(*(_QWORD *)v22, v24);
  *(_QWORD *)v21 = v23;
  *(_BYTE *)(v21 + 8) = v24;
  return a1;
}

uint64_t sub_134E08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (uint64_t *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (uint64_t *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = *v7;
  *v7 = *v8;
  swift_retain();
  swift_release(v9);
  v7[1] = v8[1];
  v7[2] = v8[2];
  v7[3] = v8[3];
  v10 = type metadata accessor for ColorScheme(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_DWORD *)(v11 + 80) & 0xF8;
  v13 = v12 + 39;
  v14 = (unint64_t)v7 + v12 + 39;
  v15 = ~v12 & 0xFFFFFFFFFFFFFFF8;
  v16 = v14 & v15;
  v17 = ((unint64_t)v8 + v13) & v15;
  if (*(_QWORD *)(v11 + 64) <= 8uLL)
    v18 = 8;
  else
    v18 = *(_QWORD *)(v11 + 64);
  if (v16 != v17)
  {
    v19 = v10;
    v20 = *(unsigned __int8 *)(v16 + v18);
    if (v20 >= 2)
    {
      if (v18 <= 3)
        v21 = v18;
      else
        v21 = 4;
      __asm { BR              X12 }
    }
    if (v20 == 1)
      (*(void (**)(unint64_t, uint64_t))(v11 + 8))(v16, v10);
    else
      swift_release(*(_QWORD *)v16);
    v22 = *(unsigned __int8 *)(v17 + v18);
    if (v22 >= 2)
    {
      if (v18 <= 3)
        v23 = v18;
      else
        v23 = 4;
      __asm { BR              X12 }
    }
    if (v22 == 1)
    {
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v11 + 16))(v16, v17, v19);
      *(_BYTE *)(v16 + v18) = 1;
    }
    else
    {
      *(_QWORD *)v16 = *(_QWORD *)v17;
      *(_BYTE *)(v16 + v18) = 0;
      swift_retain();
    }
  }
  v24 = ((v16 | 7) + v18 + 1) & 0xFFFFFFFFFFFFFFF8;
  v25 = ((v17 | 7) + v18 + 1) & 0xFFFFFFFFFFFFFFF8;
  v26 = *(_QWORD *)v25;
  v27 = *(_BYTE *)(v25 + 8);
  sub_A0A18(*(_QWORD *)v25, v27);
  v28 = *(_QWORD *)v24;
  v29 = *(_BYTE *)(v24 + 8);
  *(_QWORD *)v24 = v26;
  *(_BYTE *)(v24 + 8) = v27;
  sub_A0A6C(v28, v29);
  return a1;
}

uint64_t sub_135060(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = v8[1];
  *v7 = *v8;
  v7[1] = v9;
  v10 = type metadata accessor for ColorScheme(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_DWORD *)(v11 + 80) & 0xF8;
  v13 = v12 + 39;
  v14 = (unint64_t)v7 + v12 + 39;
  v15 = ~v12 & 0xFFFFFFFFFFFFFFF8;
  v16 = (_QWORD *)(v14 & v15);
  v17 = (_QWORD *)(((unint64_t)v8 + v13) & v15);
  if (*(_QWORD *)(v11 + 64) <= 8uLL)
    v18 = 8;
  else
    v18 = *(_QWORD *)(v11 + 64);
  v19 = *((unsigned __int8 *)v17 + v18);
  if (v19 >= 2)
  {
    if (v18 <= 3)
      v20 = v18;
    else
      v20 = 4;
    __asm { BR              X13 }
  }
  if (v19 == 1)
  {
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v11 + 32))(v16, v17, v10);
    v21 = 1;
  }
  else
  {
    v21 = 0;
    *v16 = *v17;
  }
  *((_BYTE *)v16 + v18) = v21;
  v22 = ((unint64_t)v17 + v18 + 8) & 0xFFFFFFFFFFFFFFF8;
  v23 = *(_QWORD *)v22;
  v24 = ((unint64_t)v16 + v18 + 8) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)(v24 + 8) = *(_BYTE *)(v22 + 8);
  *(_QWORD *)v24 = v23;
  return a1;
}

uint64_t sub_1351C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (uint64_t *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (uint64_t *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = *v7;
  *v7 = *v8;
  swift_release(v9);
  v7[1] = v8[1];
  v7[2] = v8[2];
  v7[3] = v8[3];
  v10 = type metadata accessor for ColorScheme(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_DWORD *)(v11 + 80) & 0xF8;
  v13 = v12 + 39;
  v14 = (unint64_t)v7 + v12 + 39;
  v15 = ~v12 & 0xFFFFFFFFFFFFFFF8;
  v16 = v14 & v15;
  v17 = ((unint64_t)v8 + v13) & v15;
  if (*(_QWORD *)(v11 + 64) <= 8uLL)
    v18 = 8;
  else
    v18 = *(_QWORD *)(v11 + 64);
  if (v16 != v17)
  {
    v19 = v10;
    v20 = *(unsigned __int8 *)(v16 + v18);
    if (v20 >= 2)
    {
      if (v18 <= 3)
        v21 = v18;
      else
        v21 = 4;
      __asm { BR              X12 }
    }
    if (v20 == 1)
      (*(void (**)(unint64_t, uint64_t))(v11 + 8))(v16, v10);
    else
      swift_release(*(_QWORD *)v16);
    v22 = *(unsigned __int8 *)(v17 + v18);
    if (v22 >= 2)
    {
      if (v18 <= 3)
        v23 = v18;
      else
        v23 = 4;
      __asm { BR              X12 }
    }
    if (v22 == 1)
    {
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v11 + 32))(v16, v17, v19);
      v24 = 1;
    }
    else
    {
      v24 = 0;
      *(_QWORD *)v16 = *(_QWORD *)v17;
    }
    *(_BYTE *)(v16 + v18) = v24;
  }
  v25 = ((v16 | 7) + v18 + 1) & 0xFFFFFFFFFFFFFFF8;
  v26 = ((v17 | 7) + v18 + 1) & 0xFFFFFFFFFFFFFFF8;
  v27 = *(_QWORD *)v26;
  LOBYTE(v26) = *(_BYTE *)(v26 + 8);
  v28 = *(_QWORD *)v25;
  v29 = *(_BYTE *)(v25 + 8);
  *(_QWORD *)v25 = v27;
  *(_BYTE *)(v25 + 8) = v26;
  sub_A0A6C(v28, v29);
  return a1;
}

uint64_t sub_135404(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v17;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  if (v7 <= 0x7FFFFFFE)
    v8 = 2147483646;
  else
    v8 = *(_DWORD *)(v6 + 84);
  v9 = *(_QWORD *)(type metadata accessor for ColorScheme(0) - 8);
  LODWORD(v10) = 8;
  if (*(_QWORD *)(v9 + 64) > 8uLL)
    v10 = *(_QWORD *)(v9 + 64);
  if (!a2)
    return 0;
  v11 = *(_QWORD *)(v6 + 64);
  if (v8 < a2)
  {
    v12 = ((v10
          + ((((v11 + 7) & 0xFFFFFFF8) + (*(_DWORD *)(v9 + 80) & 0xF8 | 7) + 32) & ~(*(_DWORD *)(v9 + 80) & 0xF8 | 7))
          + 8) & 0xFFFFFFF8)
        + 9;
    if (v12 < 4)
      v13 = ((a2 - v8 + 255) >> (8 * v12)) + 1;
    else
      v13 = 2;
    if (v13 >= 0x10000)
      v14 = 4;
    else
      v14 = 2;
    if (v13 < 0x100)
      v14 = 1;
    if (v13 >= 2)
      v15 = v14;
    else
      v15 = 0;
    __asm { BR              X13 }
  }
  if (v7 >= 0x7FFFFFFE)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, v7, v5);
  v17 = *(_QWORD *)((a1 + v11 + 7) & 0xFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF)
    LODWORD(v17) = -1;
  if ((v17 + 1) >= 2)
    return v17;
  else
    return 0;
}

void sub_1355AC(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  unsigned int v13;
  int v14;
  int v15;
  unsigned int v16;

  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v7 + 84) <= 0x7FFFFFFEu)
    v8 = 2147483646;
  else
    v8 = *(_DWORD *)(v7 + 84);
  v9 = *(_QWORD *)(type metadata accessor for ColorScheme(0) - 8);
  v10 = 8;
  if (*(_QWORD *)(v9 + 64) > 8uLL)
    v10 = *(_QWORD *)(v9 + 64);
  v11 = *(_DWORD *)(v9 + 80) & 0xF8 | 7;
  v12 = ((v10 + ((((*(_QWORD *)(v7 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + v11 + 32) & ~v11) + 8) & 0xFFFFFFFFFFFFFFF8)
      + 9;
  if (v8 >= a3)
  {
    v15 = 0;
    if (v8 >= a2)
      goto LABEL_19;
  }
  else
  {
    if (v12 <= 3)
      v13 = ((a3 - v8 + 255) >> (8 * v12)) + 1;
    else
      v13 = 2;
    if (v13 >= 0x10000)
      v14 = 4;
    else
      v14 = 2;
    if (v13 < 0x100)
      v14 = 1;
    if (v13 >= 2)
      v15 = v14;
    else
      v15 = 0;
    if (v8 >= a2)
LABEL_19:
      __asm { BR              X11 }
  }
  if (v12 >= 4)
    v16 = ~v8 + a2;
  else
    v16 = (~(_BYTE)v8 + a2);
  bzero(a1, v12);
  if ((_DWORD)v12 == 1)
    *a1 = v16;
  else
    *(_DWORD *)a1 = v16;
  __asm { BR              X10 }
}

void sub_135710()
{
  uint64_t v0;
  char v1;
  uint64_t v2;

  *(_BYTE *)(v0 + v2) = v1;
  JUMPOUT(0x1357A8);
}

void sub_135718()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = 0;
  if (v1)
    JUMPOUT(0x135720);
  JUMPOUT(0x1357A8);
}

void sub_135778()
{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;

  *(_WORD *)(v0 + v2) = v1;
  JUMPOUT(0x1357A8);
}

void sub_135780()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = v1;
  JUMPOUT(0x1357A8);
}

uint64_t sub_135788@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_WORD *)(v3 + v7) = 0;
  if (!(_DWORD)v4)
    goto LABEL_6;
  if (v6 < 0x7FFFFFFE)
  {
    v2 = (_QWORD *)((v3 + a1 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v4 > 0x7FFFFFFE)
      JUMPOUT(0x135794);
    *v2 = v4;
LABEL_6:
    JUMPOUT(0x1357A8);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(v3, v4, v6, v5);
}

void sub_1357C4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_3BBA68)
  {
    v2 = type metadata accessor for ColorScheme(255);
    v3 = type metadata accessor for Environment.Content(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_3BBA68);
  }
}

uint64_t sub_135818(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a1;
  v5 = type metadata accessor for ArtworkStyleModifier(255, a1[1], a1[3], a4);
  type metadata accessor for ModifiedContent(255, v4, v5);
  swift_getWitnessTable(&protocol conformance descriptor for ArtworkStyleModifier<A>);
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>);
}

uint64_t sub_135890(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t WitnessTable;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v23;
  _QWORD v24[7];

  v5 = *a1;
  v4 = a1[1];
  v6 = type metadata accessor for ArtworkStyleModifier(255, *a1, v4, a4);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for ArtworkStyleModifier<A>);
  v8 = type metadata accessor for _ViewModifier_Content(255, v6, WitnessTable);
  v9 = type metadata accessor for _ClipEffect(255, v5, v4);
  v10 = type metadata accessor for ModifiedContent(255, v8, v9);
  v12 = type metadata accessor for _ContentShapeModifier(255, v5, v4, v11);
  v23 = type metadata accessor for ModifiedContent(255, v10, v12);
  v24[0] = v5;
  v24[1] = &type metadata for Color;
  v24[2] = &type metadata for EmptyView;
  v24[3] = v4;
  v24[4] = &protocol witness table for Color;
  v24[5] = &protocol witness table for EmptyView;
  v14 = type metadata accessor for StrokeShapeView(255, v24, v13);
  v15 = swift_getWitnessTable(&protocol conformance descriptor for StrokeShapeView<A, B, C>);
  v16 = type metadata accessor for _OverlayModifier(255, v14, v15);
  v17 = type metadata accessor for ModifiedContent(255, v23, v16);
  v18 = type metadata accessor for ModifiedContent(255, v5, &type metadata for _ShadowEffect);
  v19 = type metadata accessor for ModifiedContent(255, v18, &type metadata for _PaddingLayout);
  type metadata accessor for _ConditionalContent(255, v19, &type metadata for EmptyView, v20);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>);
  swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>);
  v21 = type metadata accessor for _BackgroundModifier(255);
  type metadata accessor for ModifiedContent(255, v17, v21);
  swift_getWitnessTable(&protocol conformance descriptor for _ViewModifier_Content<A>);
  swift_getWitnessTable(&protocol conformance descriptor for _ClipEffect<A>);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>);
  swift_getWitnessTable(&protocol conformance descriptor for _ContentShapeModifier<A>);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>);
  swift_getWitnessTable(&protocol conformance descriptor for _OverlayModifier<A>);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>);
  swift_getWitnessTable(&protocol conformance descriptor for _BackgroundModifier<A>);
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>);
}

uint64_t sub_135B58(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  return a1;
}

uint64_t Category.color.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 24);
}

uint64_t Category.artwork.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for Category(0) + 28);
  return sub_14554(v3, a1);
}

uint64_t type metadata accessor for Category(uint64_t a1)
{
  uint64_t result;

  result = qword_3BBB10;
  if (!qword_3BBB10)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for Category);
  return result;
}

uint64_t Category.init(id:title:color:artwork:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7;

  *(_QWORD *)a6 = a1;
  *(_QWORD *)(a6 + 8) = a2;
  *(_QWORD *)(a6 + 16) = a3;
  *(_DWORD *)(a6 + 24) = a4;
  v7 = a6 + *(int *)(type metadata accessor for Category(0) + 28);
  return sub_58F4C(a5, v7);
}

void Category.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = v1;
  v4 = type metadata accessor for ArtworkModel(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
  __chkstk_darwin(v8);
  v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher._combine(_:)(*(_QWORD *)v2);
  v11 = *(_QWORD *)(v2 + 8);
  v12 = *(_QWORD *)(v2 + 16);
  swift_bridgeObjectRetain();
  String.hash(into:)(a1, v11, v12);
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(bswap32(*(_DWORD *)(v2 + 24)));
  v13 = type metadata accessor for Category(0);
  sub_14554(v2 + *(int *)(v13 + 28), (uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    sub_14614((uint64_t)v10, (uint64_t)v7);
    Hasher._combine(_:)(1u);
    ArtworkModel.hash(into:)(a1);
    sub_145D8((uint64_t)v7, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
  }
}

uint64_t sub_135DB8()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_135DDC + 4 * byte_2F7128[*v0]))(25705, 0xE200000000000000);
}

uint64_t sub_135DDC()
{
  return 0x656C746974;
}

uint64_t sub_135DF0()
{
  return 0x726F6C6F63;
}

uint64_t sub_135E04()
{
  return 0x6B726F77747261;
}

uint64_t sub_135E1C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1380AC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_135E40(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_136718();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_135E68(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_136718();
  return CodingKey.debugDescription.getter(a1, v2);
}

Swift::Int Category.hashValue.getter()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  Category.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int sub_135ED0()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  Category.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t Category.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BBA78);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  v11 = sub_136718();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for Category.CodingKeys, &type metadata for Category.CodingKeys, v11, v9, v10);
  v19 = *v3;
  HIBYTE(v18) = 0;
  sub_13E9C();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v19);
  if (!v2)
  {
    v12 = v3[1];
    v13 = v3[2];
    LOBYTE(v19) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v12, v13, &v19, v5);
    LODWORD(v19) = *((_DWORD *)v3 + 6);
    HIBYTE(v18) = 2;
    sub_13675C();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v19);
    v14 = (uint64_t)v3 + *(int *)(type metadata accessor for Category(0) + 28);
    LOBYTE(v19) = 3;
    v15 = type metadata accessor for ArtworkModel(0);
    v16 = sub_F1C0(&qword_3BBA90, (void (*)(uint64_t))&type metadata accessor for ArtworkModel, (uint64_t)&protocol conformance descriptor for ArtworkModel);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v14, &v19, v5, v15, v16);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t Category.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;

  v24 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
  __chkstk_darwin(v3);
  v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BBA98);
  v6 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Category(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v12);
  v14 = sub_136718();
  v25 = v8;
  v15 = v27;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for Category.CodingKeys, &type metadata for Category.CodingKeys, v14, v12, v13);
  if (v15)
    return __swift_destroy_boxed_opaque_existential_1(a1);
  v16 = v6;
  v28 = 0;
  sub_14088();
  v17 = v25;
  v18 = v26;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v29, &type metadata for AdamID);
  *(_QWORD *)v11 = v29;
  LOBYTE(v29) = 1;
  *((_QWORD *)v11 + 1) = KeyedDecodingContainer.decode(_:forKey:)(&v29, v18);
  *((_QWORD *)v11 + 2) = v19;
  v28 = 2;
  sub_1367A0();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v29, &type metadata for HexColor);
  *((_DWORD *)v11 + 6) = v29;
  v20 = type metadata accessor for ArtworkModel(0);
  LOBYTE(v29) = 3;
  v21 = sub_F1C0(&qword_3BBAA8, (void (*)(uint64_t))&type metadata accessor for ArtworkModel, (uint64_t)&protocol conformance descriptor for ArtworkModel);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v20, &v29, v18, v20, v21);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v17, v18);
  sub_58F4C((uint64_t)v5, (uint64_t)&v11[*(int *)(v9 + 28)]);
  sub_1367E4((uint64_t)v11, v24);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return sub_145D8((uint64_t)v11, type metadata accessor for Category);
}

uint64_t sub_1363C8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return Category.init(from:)(a1, a2);
}

uint64_t sub_1363DC(_QWORD *a1)
{
  return Category.encode(to:)(a1);
}

uint64_t sub_1363F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return sub_48370(a1, a2, a3);
}

BOOL _s8ShelfKit8CategoryV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  _BOOL8 result;
  uint64_t v26;
  uint64_t v27;
  unsigned int (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  char v30;
  uint64_t v31;
  char *v32;

  v4 = type metadata accessor for ArtworkModel(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0B18);
  __chkstk_darwin(v8);
  v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
  __chkstk_darwin(v11);
  v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v16 = (char *)&v31 - v15;
  __chkstk_darwin(v17);
  v19 = (char *)&v31 - v18;
  if (*(_QWORD *)a1 != *(_QWORD *)a2)
    return 0;
  v20 = *(_QWORD *)(a1 + 8);
  v21 = *(_QWORD *)(a1 + 16);
  v22 = *(_QWORD *)(a2 + 8);
  v23 = *(_QWORD *)(a2 + 16);
  if (v20 == v22 && v21 == v23
    || (v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v20, v21, v22, v23, 0), result = 0, (v24 & 1) != 0))
  {
    if (sub_1E0488(*(_DWORD *)(a1 + 24), *(_DWORD *)(a2 + 24)))
    {
      v32 = v7;
      v26 = type metadata accessor for Category(0);
      sub_14554(a1 + *(int *)(v26 + 28), (uint64_t)v19);
      sub_14554(a2 + *(int *)(v26 + 28), (uint64_t)v16);
      v27 = (uint64_t)&v10[*(int *)(v8 + 48)];
      sub_14554((uint64_t)v19, (uint64_t)v10);
      sub_14554((uint64_t)v16, v27);
      v28 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
      if (v28((uint64_t)v10, 1, v4) == 1)
      {
        sub_1459C((uint64_t)v16, &qword_3BEB70);
        sub_1459C((uint64_t)v19, &qword_3BEB70);
        if (v28(v27, 1, v4) == 1)
        {
          sub_1459C((uint64_t)v10, &qword_3BEB70);
          return 1;
        }
      }
      else
      {
        sub_14554((uint64_t)v10, (uint64_t)v13);
        if (v28(v27, 1, v4) != 1)
        {
          v29 = (uint64_t)v32;
          sub_14614(v27, (uint64_t)v32);
          v30 = static ArtworkModel.== infix(_:_:)(v13, v29);
          sub_145D8(v29, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
          sub_1459C((uint64_t)v16, &qword_3BEB70);
          sub_1459C((uint64_t)v19, &qword_3BEB70);
          sub_145D8((uint64_t)v13, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
          sub_1459C((uint64_t)v10, &qword_3BEB70);
          return (v30 & 1) != 0;
        }
        sub_1459C((uint64_t)v16, &qword_3BEB70);
        sub_1459C((uint64_t)v19, &qword_3BEB70);
        sub_145D8((uint64_t)v13, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
      }
      sub_1459C((uint64_t)v10, &qword_3B0B18);
    }
    return 0;
  }
  return result;
}

unint64_t sub_136718()
{
  unint64_t result;

  result = qword_3BBA80;
  if (!qword_3BBA80)
  {
    result = swift_getWitnessTable(&unk_2F737C);
    atomic_store(result, (unint64_t *)&qword_3BBA80);
  }
  return result;
}

unint64_t sub_13675C()
{
  unint64_t result;

  result = qword_3BBA88;
  if (!qword_3BBA88)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for HexColor);
    atomic_store(result, (unint64_t *)&qword_3BBA88);
  }
  return result;
}

unint64_t sub_1367A0()
{
  unint64_t result;

  result = qword_3BBAA0;
  if (!qword_3BBAA0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for HexColor);
    atomic_store(result, (unint64_t *)&qword_3BBAA0);
  }
  return result;
}

uint64_t sub_1367E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Category(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_136828()
{
  return sub_F1C0(&qword_3BBAB0, (void (*)(uint64_t))type metadata accessor for Category, (uint64_t)&protocol conformance descriptor for Category);
}

unint64_t sub_136858()
{
  unint64_t result;

  result = qword_3C7910;
  if (!qword_3C7910)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AdamID);
    atomic_store(result, (unint64_t *)&qword_3C7910);
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for Category(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  int *v8;
  uint64_t v9;
  unsigned int (*v10)(_QWORD *, uint64_t, int *);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  id *v17;
  int v18;
  id v19;
  id *v20;
  int v21;
  id v22;
  id *v23;
  int v24;
  id v25;
  id *v26;
  int v27;
  id v28;
  id *v29;
  int v30;
  id v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  void (*v44)(_QWORD *, _QWORD, uint64_t, int *);

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v12 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v12 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
    v5 = *(int *)(a3 + 28);
    v6 = (_QWORD *)(a1 + v5);
    v7 = (uint64_t *)((char *)a2 + v5);
    v8 = (int *)type metadata accessor for ArtworkModel(0);
    v9 = *((_QWORD *)v8 - 1);
    v10 = *(unsigned int (**)(_QWORD *, uint64_t, int *))(v9 + 48);
    swift_bridgeObjectRetain();
    if (v10(v7, 1, v8))
    {
      v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
      memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
    else
    {
      v13 = v7[1];
      *v6 = *v7;
      v6[1] = v13;
      v14 = *((unsigned __int8 *)v7 + 32);
      swift_bridgeObjectRetain();
      if (v14 == 255)
      {
        *((_OWORD *)v6 + 1) = *((_OWORD *)v7 + 1);
        *((_BYTE *)v6 + 32) = *((_BYTE *)v7 + 32);
      }
      else
      {
        v15 = v7[2];
        v16 = v7[3];
        sub_3D464(v15, v16, v14);
        v6[2] = v15;
        v6[3] = v16;
        *((_BYTE *)v6 + 32) = v14;
      }
      *(_OWORD *)(v6 + 5) = *(_OWORD *)(v7 + 5);
      v17 = (id *)(v7 + 7);
      v18 = *((unsigned __int8 *)v7 + 64);
      if (v18 == 255)
      {
        v6[7] = *v17;
        *((_BYTE *)v6 + 64) = *((_BYTE *)v7 + 64);
      }
      else
      {
        v19 = *v17;
        sub_3D47C(*v17, *((_BYTE *)v7 + 64));
        v6[7] = v19;
        *((_BYTE *)v6 + 64) = v18;
      }
      v20 = (id *)(v7 + 9);
      v21 = *((unsigned __int8 *)v7 + 80);
      if (v21 == 255)
      {
        v6[9] = *v20;
        *((_BYTE *)v6 + 80) = *((_BYTE *)v7 + 80);
      }
      else
      {
        v22 = *v20;
        sub_3D47C(*v20, *((_BYTE *)v7 + 80));
        v6[9] = v22;
        *((_BYTE *)v6 + 80) = v21;
      }
      v23 = (id *)(v7 + 11);
      v24 = *((unsigned __int8 *)v7 + 96);
      if (v24 == 255)
      {
        v6[11] = *v23;
        *((_BYTE *)v6 + 96) = *((_BYTE *)v7 + 96);
      }
      else
      {
        v25 = *v23;
        sub_3D47C(*v23, *((_BYTE *)v7 + 96));
        v6[11] = v25;
        *((_BYTE *)v6 + 96) = v24;
      }
      v26 = (id *)(v7 + 13);
      v27 = *((unsigned __int8 *)v7 + 112);
      if (v27 == 255)
      {
        v6[13] = *v26;
        *((_BYTE *)v6 + 112) = *((_BYTE *)v7 + 112);
      }
      else
      {
        v28 = *v26;
        sub_3D47C(*v26, *((_BYTE *)v7 + 112));
        v6[13] = v28;
        *((_BYTE *)v6 + 112) = v27;
      }
      v29 = (id *)(v7 + 15);
      v30 = *((unsigned __int8 *)v7 + 128);
      if (v30 == 255)
      {
        v6[15] = *v29;
        *((_BYTE *)v6 + 128) = *((_BYTE *)v7 + 128);
      }
      else
      {
        v31 = *v29;
        sub_3D47C(*v29, *((_BYTE *)v7 + 128));
        v6[15] = v31;
        *((_BYTE *)v6 + 128) = v30;
      }
      *((_BYTE *)v6 + 129) = *((_BYTE *)v7 + 129);
      v32 = v8[11];
      v33 = (char *)v6 + v32;
      v34 = (char *)v7 + v32;
      v35 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(v33, v34, v35);
      v36 = v8[12];
      v37 = (_QWORD *)((char *)v6 + v36);
      v38 = (_QWORD *)((char *)v7 + v36);
      v39 = v38[1];
      *v37 = *v38;
      v37[1] = v39;
      *((_BYTE *)v6 + v8[13]) = *((_BYTE *)v7 + v8[13]);
      *((_BYTE *)v6 + v8[14]) = *((_BYTE *)v7 + v8[14]);
      *((_BYTE *)v6 + v8[15]) = *((_BYTE *)v7 + v8[15]);
      v40 = v8[16];
      v41 = (_QWORD *)((char *)v6 + v40);
      v42 = (_QWORD *)((char *)v7 + v40);
      v43 = v42[1];
      *v41 = *v42;
      v41[1] = v43;
      v44 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v9 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v44(v6, 0, 1, v8);
    }
  }
  return v3;
}

uint64_t destroy for Category(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for ArtworkModel(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease();
    v7 = *(unsigned __int8 *)(v4 + 32);
    if (v7 != 255)
      sub_3B5BC(*(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), v7);
    v8 = *(unsigned __int8 *)(v4 + 64);
    if (v8 != 255)
      sub_3D624(*(id *)(v4 + 56), v8);
    v9 = *(unsigned __int8 *)(v4 + 80);
    if (v9 != 255)
      sub_3D624(*(id *)(v4 + 72), v9);
    v10 = *(unsigned __int8 *)(v4 + 96);
    if (v10 != 255)
      sub_3D624(*(id *)(v4 + 88), v10);
    v11 = *(unsigned __int8 *)(v4 + 112);
    if (v11 != 255)
      sub_3D624(*(id *)(v4 + 104), v11);
    v12 = *(unsigned __int8 *)(v4 + 128);
    if (v12 != 255)
      sub_3D624(*(id *)(v4 + 120), v12);
    v13 = v4 + *(int *)(v5 + 44);
    v14 = type metadata accessor for ArtworkCrop(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for Category(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  int *v7;
  uint64_t v8;
  unsigned int (*v9)(_QWORD *, uint64_t, int *);
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  id *v15;
  int v16;
  id v17;
  id *v18;
  int v19;
  id v20;
  id *v21;
  int v22;
  id v23;
  id *v24;
  int v25;
  id v26;
  id *v27;
  int v28;
  id v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  void (*v42)(_QWORD *, _QWORD, uint64_t, int *);

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  v4 = *(int *)(a3 + 28);
  v5 = (_QWORD *)(a1 + v4);
  v6 = (_QWORD *)(a2 + v4);
  v7 = (int *)type metadata accessor for ArtworkModel(0);
  v8 = *((_QWORD *)v7 - 1);
  v9 = *(unsigned int (**)(_QWORD *, uint64_t, int *))(v8 + 48);
  swift_bridgeObjectRetain();
  if (v9(v6, 1, v7))
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    v11 = v6[1];
    *v5 = *v6;
    v5[1] = v11;
    v12 = *((unsigned __int8 *)v6 + 32);
    swift_bridgeObjectRetain();
    if (v12 == 255)
    {
      *((_OWORD *)v5 + 1) = *((_OWORD *)v6 + 1);
      *((_BYTE *)v5 + 32) = *((_BYTE *)v6 + 32);
    }
    else
    {
      v13 = v6[2];
      v14 = v6[3];
      sub_3D464(v13, v14, v12);
      v5[2] = v13;
      v5[3] = v14;
      *((_BYTE *)v5 + 32) = v12;
    }
    *(_OWORD *)(v5 + 5) = *(_OWORD *)(v6 + 5);
    v15 = (id *)(v6 + 7);
    v16 = *((unsigned __int8 *)v6 + 64);
    if (v16 == 255)
    {
      v5[7] = *v15;
      *((_BYTE *)v5 + 64) = *((_BYTE *)v6 + 64);
    }
    else
    {
      v17 = *v15;
      sub_3D47C(*v15, *((_BYTE *)v6 + 64));
      v5[7] = v17;
      *((_BYTE *)v5 + 64) = v16;
    }
    v18 = (id *)(v6 + 9);
    v19 = *((unsigned __int8 *)v6 + 80);
    if (v19 == 255)
    {
      v5[9] = *v18;
      *((_BYTE *)v5 + 80) = *((_BYTE *)v6 + 80);
    }
    else
    {
      v20 = *v18;
      sub_3D47C(*v18, *((_BYTE *)v6 + 80));
      v5[9] = v20;
      *((_BYTE *)v5 + 80) = v19;
    }
    v21 = (id *)(v6 + 11);
    v22 = *((unsigned __int8 *)v6 + 96);
    if (v22 == 255)
    {
      v5[11] = *v21;
      *((_BYTE *)v5 + 96) = *((_BYTE *)v6 + 96);
    }
    else
    {
      v23 = *v21;
      sub_3D47C(*v21, *((_BYTE *)v6 + 96));
      v5[11] = v23;
      *((_BYTE *)v5 + 96) = v22;
    }
    v24 = (id *)(v6 + 13);
    v25 = *((unsigned __int8 *)v6 + 112);
    if (v25 == 255)
    {
      v5[13] = *v24;
      *((_BYTE *)v5 + 112) = *((_BYTE *)v6 + 112);
    }
    else
    {
      v26 = *v24;
      sub_3D47C(*v24, *((_BYTE *)v6 + 112));
      v5[13] = v26;
      *((_BYTE *)v5 + 112) = v25;
    }
    v27 = (id *)(v6 + 15);
    v28 = *((unsigned __int8 *)v6 + 128);
    if (v28 == 255)
    {
      v5[15] = *v27;
      *((_BYTE *)v5 + 128) = *((_BYTE *)v6 + 128);
    }
    else
    {
      v29 = *v27;
      sub_3D47C(*v27, *((_BYTE *)v6 + 128));
      v5[15] = v29;
      *((_BYTE *)v5 + 128) = v28;
    }
    *((_BYTE *)v5 + 129) = *((_BYTE *)v6 + 129);
    v30 = v7[11];
    v31 = (char *)v5 + v30;
    v32 = (char *)v6 + v30;
    v33 = type metadata accessor for ArtworkCrop(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v31, v32, v33);
    v34 = v7[12];
    v35 = (_QWORD *)((char *)v5 + v34);
    v36 = (_QWORD *)((char *)v6 + v34);
    v37 = v36[1];
    *v35 = *v36;
    v35[1] = v37;
    *((_BYTE *)v5 + v7[13]) = *((_BYTE *)v6 + v7[13]);
    *((_BYTE *)v5 + v7[14]) = *((_BYTE *)v6 + v7[14]);
    *((_BYTE *)v5 + v7[15]) = *((_BYTE *)v6 + v7[15]);
    v38 = v7[16];
    v39 = (_QWORD *)((char *)v5 + v38);
    v40 = (_QWORD *)((char *)v6 + v38);
    v41 = v40[1];
    *v39 = *v40;
    v39[1] = v41;
    v42 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v8 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v42(v5, 0, 1, v7);
  }
  return a1;
}

uint64_t assignWithCopy for Category(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, int *);
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  __int128 *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 v25;
  __int128 v26;
  id *v27;
  int v28;
  id v29;
  id v30;
  id *v31;
  int v32;
  id v33;
  id v34;
  id *v35;
  int v36;
  id v37;
  id v38;
  id *v39;
  int v40;
  id v41;
  id v42;
  id *v43;
  int v44;
  id v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  void (*v57)(uint64_t, _QWORD, uint64_t, int *);
  uint64_t v58;
  uint64_t v59;
  char v60;
  __int128 v61;
  id *v62;
  id *v63;
  int v64;
  id v65;
  void *v66;
  char v67;
  id v68;
  char v69;
  id v70;
  id *v71;
  id *v72;
  int v73;
  id v74;
  void *v75;
  char v76;
  id v77;
  char v78;
  id v79;
  id *v80;
  id *v81;
  int v82;
  id v83;
  void *v84;
  char v85;
  id v86;
  char v87;
  id v88;
  id *v89;
  id *v90;
  int v91;
  id v92;
  void *v93;
  char v94;
  id v95;
  char v96;
  id v97;
  id *v98;
  id *v99;
  int v100;
  id v101;
  void *v102;
  char v103;
  id v104;
  char v105;
  id v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  _QWORD *v113;
  uint64_t v114;
  _QWORD *v115;
  _QWORD *v116;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  *(_BYTE *)(a1 + 27) = *(_BYTE *)(a2 + 27);
  v6 = *(int *)(a3 + 28);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = (int *)type metadata accessor for ArtworkModel(0);
  v10 = *((_QWORD *)v9 - 1);
  v11 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      *(_QWORD *)v7 = *(_QWORD *)v8;
      *(_QWORD *)(v7 + 8) = *(_QWORD *)(v8 + 8);
      v14 = *(unsigned __int8 *)(v8 + 32);
      swift_bridgeObjectRetain();
      if (v14 == 255)
      {
        v26 = *(_OWORD *)(v8 + 16);
        *(_BYTE *)(v7 + 32) = *(_BYTE *)(v8 + 32);
        *(_OWORD *)(v7 + 16) = v26;
      }
      else
      {
        v15 = *(_QWORD *)(v8 + 16);
        v16 = *(_QWORD *)(v8 + 24);
        sub_3D464(v15, v16, v14);
        *(_QWORD *)(v7 + 16) = v15;
        *(_QWORD *)(v7 + 24) = v16;
        *(_BYTE *)(v7 + 32) = v14;
      }
      *(_QWORD *)(v7 + 40) = *(_QWORD *)(v8 + 40);
      *(_QWORD *)(v7 + 48) = *(_QWORD *)(v8 + 48);
      v27 = (id *)(v8 + 56);
      v28 = *(unsigned __int8 *)(v8 + 64);
      if (v28 == 255)
      {
        v30 = *v27;
        *(_BYTE *)(v7 + 64) = *(_BYTE *)(v8 + 64);
        *(_QWORD *)(v7 + 56) = v30;
      }
      else
      {
        v29 = *v27;
        sub_3D47C(*v27, *(_BYTE *)(v8 + 64));
        *(_QWORD *)(v7 + 56) = v29;
        *(_BYTE *)(v7 + 64) = v28;
      }
      v31 = (id *)(v8 + 72);
      v32 = *(unsigned __int8 *)(v8 + 80);
      if (v32 == 255)
      {
        v34 = *v31;
        *(_BYTE *)(v7 + 80) = *(_BYTE *)(v8 + 80);
        *(_QWORD *)(v7 + 72) = v34;
      }
      else
      {
        v33 = *v31;
        sub_3D47C(*v31, *(_BYTE *)(v8 + 80));
        *(_QWORD *)(v7 + 72) = v33;
        *(_BYTE *)(v7 + 80) = v32;
      }
      v35 = (id *)(v8 + 88);
      v36 = *(unsigned __int8 *)(v8 + 96);
      if (v36 == 255)
      {
        v38 = *v35;
        *(_BYTE *)(v7 + 96) = *(_BYTE *)(v8 + 96);
        *(_QWORD *)(v7 + 88) = v38;
      }
      else
      {
        v37 = *v35;
        sub_3D47C(*v35, *(_BYTE *)(v8 + 96));
        *(_QWORD *)(v7 + 88) = v37;
        *(_BYTE *)(v7 + 96) = v36;
      }
      v39 = (id *)(v8 + 104);
      v40 = *(unsigned __int8 *)(v8 + 112);
      if (v40 == 255)
      {
        v42 = *v39;
        *(_BYTE *)(v7 + 112) = *(_BYTE *)(v8 + 112);
        *(_QWORD *)(v7 + 104) = v42;
      }
      else
      {
        v41 = *v39;
        sub_3D47C(*v39, *(_BYTE *)(v8 + 112));
        *(_QWORD *)(v7 + 104) = v41;
        *(_BYTE *)(v7 + 112) = v40;
      }
      v43 = (id *)(v8 + 120);
      v44 = *(unsigned __int8 *)(v8 + 128);
      if (v44 == 255)
      {
        v46 = *v43;
        *(_BYTE *)(v7 + 128) = *(_BYTE *)(v8 + 128);
        *(_QWORD *)(v7 + 120) = v46;
      }
      else
      {
        v45 = *v43;
        sub_3D47C(*v43, *(_BYTE *)(v8 + 128));
        *(_QWORD *)(v7 + 120) = v45;
        *(_BYTE *)(v7 + 128) = v44;
      }
      *(_BYTE *)(v7 + 129) = *(_BYTE *)(v8 + 129);
      v47 = v9[11];
      v48 = v7 + v47;
      v49 = v8 + v47;
      v50 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 16))(v48, v49, v50);
      v51 = v9[12];
      v52 = (_QWORD *)(v7 + v51);
      v53 = (_QWORD *)(v8 + v51);
      *v52 = *v53;
      v52[1] = v53[1];
      *(_BYTE *)(v7 + v9[13]) = *(_BYTE *)(v8 + v9[13]);
      *(_BYTE *)(v7 + v9[14]) = *(_BYTE *)(v8 + v9[14]);
      *(_BYTE *)(v7 + v9[15]) = *(_BYTE *)(v8 + v9[15]);
      v54 = v9[16];
      v55 = (_QWORD *)(v7 + v54);
      v56 = (_QWORD *)(v8 + v54);
      *v55 = *v56;
      v55[1] = v56[1];
      v57 = *(void (**)(uint64_t, _QWORD, uint64_t, int *))(v10 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v57(v7, 0, 1, v9);
      return a1;
    }
LABEL_7:
    v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
    memcpy((void *)v7, (const void *)v8, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    return a1;
  }
  if (v13)
  {
    sub_145D8(v7, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
    goto LABEL_7;
  }
  *(_QWORD *)v7 = *(_QWORD *)v8;
  *(_QWORD *)(v7 + 8) = *(_QWORD *)(v8 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v18 = (__int128 *)(v7 + 16);
  v19 = (__int128 *)(v8 + 16);
  v20 = *(unsigned __int8 *)(v8 + 32);
  if (*(unsigned __int8 *)(v7 + 32) == 255)
  {
    if (v20 == 255)
    {
      v61 = *v19;
      *(_BYTE *)(v7 + 32) = *(_BYTE *)(v8 + 32);
      *v18 = v61;
    }
    else
    {
      v58 = *(_QWORD *)(v8 + 16);
      v59 = *(_QWORD *)(v8 + 24);
      sub_3D464(v58, v59, *(_BYTE *)(v8 + 32));
      *(_QWORD *)(v7 + 16) = v58;
      *(_QWORD *)(v7 + 24) = v59;
      *(_BYTE *)(v7 + 32) = v20;
    }
  }
  else if (v20 == 255)
  {
    sub_3E43C(v7 + 16);
    v60 = *(_BYTE *)(v8 + 32);
    *v18 = *v19;
    *(_BYTE *)(v7 + 32) = v60;
  }
  else
  {
    v21 = *(_QWORD *)(v8 + 16);
    v22 = *(_QWORD *)(v8 + 24);
    sub_3D464(v21, v22, *(_BYTE *)(v8 + 32));
    v23 = *(_QWORD *)(v7 + 16);
    v24 = *(_QWORD *)(v7 + 24);
    *(_QWORD *)(v7 + 16) = v21;
    *(_QWORD *)(v7 + 24) = v22;
    v25 = *(_BYTE *)(v7 + 32);
    *(_BYTE *)(v7 + 32) = v20;
    sub_3B5BC(v23, v24, v25);
  }
  *(_QWORD *)(v7 + 40) = *(_QWORD *)(v8 + 40);
  *(_QWORD *)(v7 + 48) = *(_QWORD *)(v8 + 48);
  v62 = (id *)(v7 + 56);
  v63 = (id *)(v8 + 56);
  v64 = *(unsigned __int8 *)(v8 + 64);
  if (*(unsigned __int8 *)(v7 + 64) == 255)
  {
    if (v64 == 255)
    {
      v70 = *v63;
      *(_BYTE *)(v7 + 64) = *(_BYTE *)(v8 + 64);
      *v62 = v70;
    }
    else
    {
      v68 = *v63;
      sub_3D47C(*v63, *(_BYTE *)(v8 + 64));
      *(_QWORD *)(v7 + 56) = v68;
      *(_BYTE *)(v7 + 64) = v64;
    }
  }
  else if (v64 == 255)
  {
    sub_3E470(v7 + 56);
    v69 = *(_BYTE *)(v8 + 64);
    *v62 = *v63;
    *(_BYTE *)(v7 + 64) = v69;
  }
  else
  {
    v65 = *v63;
    sub_3D47C(*v63, *(_BYTE *)(v8 + 64));
    v66 = *(void **)(v7 + 56);
    *(_QWORD *)(v7 + 56) = v65;
    v67 = *(_BYTE *)(v7 + 64);
    *(_BYTE *)(v7 + 64) = v64;
    sub_3D624(v66, v67);
  }
  v71 = (id *)(v7 + 72);
  v72 = (id *)(v8 + 72);
  v73 = *(unsigned __int8 *)(v8 + 80);
  if (*(unsigned __int8 *)(v7 + 80) == 255)
  {
    if (v73 == 255)
    {
      v79 = *v72;
      *(_BYTE *)(v7 + 80) = *(_BYTE *)(v8 + 80);
      *v71 = v79;
    }
    else
    {
      v77 = *v72;
      sub_3D47C(*v72, *(_BYTE *)(v8 + 80));
      *(_QWORD *)(v7 + 72) = v77;
      *(_BYTE *)(v7 + 80) = v73;
    }
  }
  else if (v73 == 255)
  {
    sub_3E470(v7 + 72);
    v78 = *(_BYTE *)(v8 + 80);
    *v71 = *v72;
    *(_BYTE *)(v7 + 80) = v78;
  }
  else
  {
    v74 = *v72;
    sub_3D47C(*v72, *(_BYTE *)(v8 + 80));
    v75 = *(void **)(v7 + 72);
    *(_QWORD *)(v7 + 72) = v74;
    v76 = *(_BYTE *)(v7 + 80);
    *(_BYTE *)(v7 + 80) = v73;
    sub_3D624(v75, v76);
  }
  v80 = (id *)(v7 + 88);
  v81 = (id *)(v8 + 88);
  v82 = *(unsigned __int8 *)(v8 + 96);
  if (*(unsigned __int8 *)(v7 + 96) == 255)
  {
    if (v82 == 255)
    {
      v88 = *v81;
      *(_BYTE *)(v7 + 96) = *(_BYTE *)(v8 + 96);
      *v80 = v88;
    }
    else
    {
      v86 = *v81;
      sub_3D47C(*v81, *(_BYTE *)(v8 + 96));
      *(_QWORD *)(v7 + 88) = v86;
      *(_BYTE *)(v7 + 96) = v82;
    }
  }
  else if (v82 == 255)
  {
    sub_3E470(v7 + 88);
    v87 = *(_BYTE *)(v8 + 96);
    *v80 = *v81;
    *(_BYTE *)(v7 + 96) = v87;
  }
  else
  {
    v83 = *v81;
    sub_3D47C(*v81, *(_BYTE *)(v8 + 96));
    v84 = *(void **)(v7 + 88);
    *(_QWORD *)(v7 + 88) = v83;
    v85 = *(_BYTE *)(v7 + 96);
    *(_BYTE *)(v7 + 96) = v82;
    sub_3D624(v84, v85);
  }
  v89 = (id *)(v7 + 104);
  v90 = (id *)(v8 + 104);
  v91 = *(unsigned __int8 *)(v8 + 112);
  if (*(unsigned __int8 *)(v7 + 112) == 255)
  {
    if (v91 == 255)
    {
      v97 = *v90;
      *(_BYTE *)(v7 + 112) = *(_BYTE *)(v8 + 112);
      *v89 = v97;
    }
    else
    {
      v95 = *v90;
      sub_3D47C(*v90, *(_BYTE *)(v8 + 112));
      *(_QWORD *)(v7 + 104) = v95;
      *(_BYTE *)(v7 + 112) = v91;
    }
  }
  else if (v91 == 255)
  {
    sub_3E470(v7 + 104);
    v96 = *(_BYTE *)(v8 + 112);
    *v89 = *v90;
    *(_BYTE *)(v7 + 112) = v96;
  }
  else
  {
    v92 = *v90;
    sub_3D47C(*v90, *(_BYTE *)(v8 + 112));
    v93 = *(void **)(v7 + 104);
    *(_QWORD *)(v7 + 104) = v92;
    v94 = *(_BYTE *)(v7 + 112);
    *(_BYTE *)(v7 + 112) = v91;
    sub_3D624(v93, v94);
  }
  v98 = (id *)(v7 + 120);
  v99 = (id *)(v8 + 120);
  v100 = *(unsigned __int8 *)(v8 + 128);
  if (*(unsigned __int8 *)(v7 + 128) == 255)
  {
    if (v100 == 255)
    {
      v106 = *v99;
      *(_BYTE *)(v7 + 128) = *(_BYTE *)(v8 + 128);
      *v98 = v106;
    }
    else
    {
      v104 = *v99;
      sub_3D47C(*v99, *(_BYTE *)(v8 + 128));
      *(_QWORD *)(v7 + 120) = v104;
      *(_BYTE *)(v7 + 128) = v100;
    }
  }
  else if (v100 == 255)
  {
    sub_3E470(v7 + 120);
    v105 = *(_BYTE *)(v8 + 128);
    *v98 = *v99;
    *(_BYTE *)(v7 + 128) = v105;
  }
  else
  {
    v101 = *v99;
    sub_3D47C(*v99, *(_BYTE *)(v8 + 128));
    v102 = *(void **)(v7 + 120);
    *(_QWORD *)(v7 + 120) = v101;
    v103 = *(_BYTE *)(v7 + 128);
    *(_BYTE *)(v7 + 128) = v100;
    sub_3D624(v102, v103);
  }
  *(_BYTE *)(v7 + 129) = *(_BYTE *)(v8 + 129);
  v107 = v9[11];
  v108 = v7 + v107;
  v109 = v8 + v107;
  v110 = type metadata accessor for ArtworkCrop(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v110 - 8) + 24))(v108, v109, v110);
  v111 = v9[12];
  v112 = (_QWORD *)(v7 + v111);
  v113 = (_QWORD *)(v8 + v111);
  *v112 = *v113;
  v112[1] = v113[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(v7 + v9[13]) = *(_BYTE *)(v8 + v9[13]);
  *(_BYTE *)(v7 + v9[14]) = *(_BYTE *)(v8 + v9[14]);
  *(_BYTE *)(v7 + v9[15]) = *(_BYTE *)(v8 + v9[15]);
  v114 = v9[16];
  v115 = (_QWORD *)(v7 + v114);
  v116 = (_QWORD *)(v8 + v114);
  *v115 = *v116;
  v115[1] = v116[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for Category(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _OWORD *v5;
  _OWORD *v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  v4 = *(int *)(a3 + 28);
  v5 = (_OWORD *)(a1 + v4);
  v6 = (_OWORD *)(a2 + v4);
  v7 = (int *)type metadata accessor for ArtworkModel(0);
  v8 = *((_QWORD *)v7 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v8 + 48))(v6, 1, v7))
  {
    v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    v10 = v6[1];
    *v5 = *v6;
    v5[1] = v10;
    *((_BYTE *)v5 + 32) = *((_BYTE *)v6 + 32);
    *(_OWORD *)((char *)v5 + 40) = *(_OWORD *)((char *)v6 + 40);
    *((_QWORD *)v5 + 7) = *((_QWORD *)v6 + 7);
    *((_BYTE *)v5 + 64) = *((_BYTE *)v6 + 64);
    *(_OWORD *)((char *)v5 + 113) = *(_OWORD *)((char *)v6 + 113);
    *(_OWORD *)((char *)v5 + 104) = *(_OWORD *)((char *)v6 + 104);
    *(_OWORD *)((char *)v5 + 88) = *(_OWORD *)((char *)v6 + 88);
    *(_OWORD *)((char *)v5 + 72) = *(_OWORD *)((char *)v6 + 72);
    *((_BYTE *)v5 + 129) = *((_BYTE *)v6 + 129);
    v11 = v7[11];
    v12 = (char *)v5 + v11;
    v13 = (char *)v6 + v11;
    v14 = type metadata accessor for ArtworkCrop(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
    *(_OWORD *)((char *)v5 + v7[12]) = *(_OWORD *)((char *)v6 + v7[12]);
    *((_BYTE *)v5 + v7[13]) = *((_BYTE *)v6 + v7[13]);
    *((_BYTE *)v5 + v7[14]) = *((_BYTE *)v6 + v7[14]);
    *((_BYTE *)v5 + v7[15]) = *((_BYTE *)v6 + v7[15]);
    *(_OWORD *)((char *)v5 + v7[16]) = *(_OWORD *)((char *)v6 + v7[16]);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

uint64_t assignWithTake for Category(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, int *);
  int v12;
  int v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  _OWORD *v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  int v28;
  int v29;
  void *v30;
  _QWORD *v31;
  int v32;
  int v33;
  void *v34;
  _QWORD *v35;
  int v36;
  int v37;
  void *v38;
  _QWORD *v39;
  int v40;
  int v41;
  void *v42;
  _QWORD *v43;
  int v44;
  int v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  v6 = *(int *)(a3 + 28);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = (int *)type metadata accessor for ArtworkModel(0);
  v10 = *((_QWORD *)v9 - 1);
  v11 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (v13)
    {
      sub_145D8(v7, (uint64_t (*)(_QWORD))&type metadata accessor for ArtworkModel);
      goto LABEL_6;
    }
    v21 = *(_QWORD *)(v8 + 8);
    *(_QWORD *)v7 = *(_QWORD *)v8;
    *(_QWORD *)(v7 + 8) = v21;
    swift_bridgeObjectRelease();
    v22 = (_OWORD *)(v8 + 16);
    v23 = *(unsigned __int8 *)(v7 + 32);
    if (v23 != 255)
    {
      v24 = *(unsigned __int8 *)(v8 + 32);
      if (v24 != 255)
      {
        v25 = *(_QWORD *)(v7 + 16);
        v26 = *(_QWORD *)(v7 + 24);
        *(_OWORD *)(v7 + 16) = *v22;
        *(_BYTE *)(v7 + 32) = v24;
        sub_3B5BC(v25, v26, v23);
        goto LABEL_13;
      }
      sub_3E43C(v7 + 16);
    }
    *(_OWORD *)(v7 + 16) = *v22;
    *(_BYTE *)(v7 + 32) = *(_BYTE *)(v8 + 32);
LABEL_13:
    *(_OWORD *)(v7 + 40) = *(_OWORD *)(v8 + 40);
    v27 = (_QWORD *)(v8 + 56);
    v28 = *(unsigned __int8 *)(v7 + 64);
    if (v28 != 255)
    {
      v29 = *(unsigned __int8 *)(v8 + 64);
      if (v29 != 255)
      {
        v30 = *(void **)(v7 + 56);
        *(_QWORD *)(v7 + 56) = *v27;
        *(_BYTE *)(v7 + 64) = v29;
        sub_3D624(v30, v28);
        goto LABEL_18;
      }
      sub_3E470(v7 + 56);
    }
    *(_QWORD *)(v7 + 56) = *v27;
    *(_BYTE *)(v7 + 64) = *(_BYTE *)(v8 + 64);
LABEL_18:
    v31 = (_QWORD *)(v8 + 72);
    v32 = *(unsigned __int8 *)(v7 + 80);
    if (v32 != 255)
    {
      v33 = *(unsigned __int8 *)(v8 + 80);
      if (v33 != 255)
      {
        v34 = *(void **)(v7 + 72);
        *(_QWORD *)(v7 + 72) = *v31;
        *(_BYTE *)(v7 + 80) = v33;
        sub_3D624(v34, v32);
        goto LABEL_23;
      }
      sub_3E470(v7 + 72);
    }
    *(_QWORD *)(v7 + 72) = *v31;
    *(_BYTE *)(v7 + 80) = *(_BYTE *)(v8 + 80);
LABEL_23:
    v35 = (_QWORD *)(v8 + 88);
    v36 = *(unsigned __int8 *)(v7 + 96);
    if (v36 != 255)
    {
      v37 = *(unsigned __int8 *)(v8 + 96);
      if (v37 != 255)
      {
        v38 = *(void **)(v7 + 88);
        *(_QWORD *)(v7 + 88) = *v35;
        *(_BYTE *)(v7 + 96) = v37;
        sub_3D624(v38, v36);
        goto LABEL_28;
      }
      sub_3E470(v7 + 88);
    }
    *(_QWORD *)(v7 + 88) = *v35;
    *(_BYTE *)(v7 + 96) = *(_BYTE *)(v8 + 96);
LABEL_28:
    v39 = (_QWORD *)(v8 + 104);
    v40 = *(unsigned __int8 *)(v7 + 112);
    if (v40 != 255)
    {
      v41 = *(unsigned __int8 *)(v8 + 112);
      if (v41 != 255)
      {
        v42 = *(void **)(v7 + 104);
        *(_QWORD *)(v7 + 104) = *v39;
        *(_BYTE *)(v7 + 112) = v41;
        sub_3D624(v42, v40);
        goto LABEL_33;
      }
      sub_3E470(v7 + 104);
    }
    *(_QWORD *)(v7 + 104) = *v39;
    *(_BYTE *)(v7 + 112) = *(_BYTE *)(v8 + 112);
LABEL_33:
    v43 = (_QWORD *)(v8 + 120);
    v44 = *(unsigned __int8 *)(v7 + 128);
    if (v44 != 255)
    {
      v45 = *(unsigned __int8 *)(v8 + 128);
      if (v45 != 255)
      {
        v46 = *(void **)(v7 + 120);
        *(_QWORD *)(v7 + 120) = *v43;
        *(_BYTE *)(v7 + 128) = v45;
        sub_3D624(v46, v44);
LABEL_38:
        *(_BYTE *)(v7 + 129) = *(_BYTE *)(v8 + 129);
        v47 = v9[11];
        v48 = v7 + v47;
        v49 = v8 + v47;
        v50 = type metadata accessor for ArtworkCrop(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 40))(v48, v49, v50);
        v51 = v9[12];
        v52 = (_QWORD *)(v7 + v51);
        v53 = (uint64_t *)(v8 + v51);
        v55 = *v53;
        v54 = v53[1];
        *v52 = v55;
        v52[1] = v54;
        swift_bridgeObjectRelease();
        *(_BYTE *)(v7 + v9[13]) = *(_BYTE *)(v8 + v9[13]);
        *(_BYTE *)(v7 + v9[14]) = *(_BYTE *)(v8 + v9[14]);
        *(_BYTE *)(v7 + v9[15]) = *(_BYTE *)(v8 + v9[15]);
        v56 = v9[16];
        v57 = (_QWORD *)(v7 + v56);
        v58 = (uint64_t *)(v8 + v56);
        v60 = *v58;
        v59 = v58[1];
        *v57 = v60;
        v57[1] = v59;
        swift_bridgeObjectRelease();
        return a1;
      }
      sub_3E470(v7 + 120);
    }
    *(_QWORD *)(v7 + 120) = *v43;
    *(_BYTE *)(v7 + 128) = *(_BYTE *)(v8 + 128);
    goto LABEL_38;
  }
  if (v13)
  {
LABEL_6:
    v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
    memcpy((void *)v7, (const void *)v8, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    return a1;
  }
  v14 = *(_OWORD *)(v8 + 16);
  *(_OWORD *)v7 = *(_OWORD *)v8;
  *(_OWORD *)(v7 + 16) = v14;
  *(_BYTE *)(v7 + 32) = *(_BYTE *)(v8 + 32);
  *(_OWORD *)(v7 + 40) = *(_OWORD *)(v8 + 40);
  *(_QWORD *)(v7 + 56) = *(_QWORD *)(v8 + 56);
  *(_BYTE *)(v7 + 64) = *(_BYTE *)(v8 + 64);
  *(_OWORD *)(v7 + 113) = *(_OWORD *)(v8 + 113);
  *(_OWORD *)(v7 + 104) = *(_OWORD *)(v8 + 104);
  *(_OWORD *)(v7 + 88) = *(_OWORD *)(v8 + 88);
  *(_OWORD *)(v7 + 72) = *(_OWORD *)(v8 + 72);
  *(_BYTE *)(v7 + 129) = *(_BYTE *)(v8 + 129);
  v15 = v9[11];
  v16 = v7 + v15;
  v17 = v8 + v15;
  v18 = type metadata accessor for ArtworkCrop(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  *(_OWORD *)(v7 + v9[12]) = *(_OWORD *)(v8 + v9[12]);
  *(_BYTE *)(v7 + v9[13]) = *(_BYTE *)(v8 + v9[13]);
  *(_BYTE *)(v7 + v9[14]) = *(_BYTE *)(v8 + v9[14]);
  *(_BYTE *)(v7 + v9[15]) = *(_BYTE *)(v8 + v9[15]);
  *(_OWORD *)(v7 + v9[16]) = *(_OWORD *)(v8 + v9[16]);
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v10 + 56))(v7, 0, 1, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for Category(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_137D78);
}

uint64_t sub_137D78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for Category(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_137E04);
}

uint64_t sub_137E04(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

void sub_137E7C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[1] = &unk_2F7288;
  v4[2] = &unk_2F72A0;
  sub_5971C(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
  }
}

uint64_t storeEnumTagSinglePayload for Category.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_137F54 + 4 * byte_2F7131[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_137F88 + 4 * byte_2F712C[v4]))();
}

uint64_t sub_137F88(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_137F90(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x137F98);
  return result;
}

uint64_t sub_137FA4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x137FACLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_137FB0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_137FB8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Category.CodingKeys()
{
  return &type metadata for Category.CodingKeys;
}

unint64_t sub_137FD8()
{
  unint64_t result;

  result = qword_3BBB50;
  if (!qword_3BBB50)
  {
    result = swift_getWitnessTable(&unk_2F7354);
    atomic_store(result, (unint64_t *)&qword_3BBB50);
  }
  return result;
}

unint64_t sub_138020()
{
  unint64_t result;

  result = qword_3BBB58;
  if (!qword_3BBB58)
  {
    result = swift_getWitnessTable(&unk_2F72C4);
    atomic_store(result, (unint64_t *)&qword_3BBB58);
  }
  return result;
}

unint64_t sub_138068()
{
  unint64_t result;

  result = qword_3BBB60;
  if (!qword_3BBB60)
  {
    result = swift_getWitnessTable(&unk_2F72EC);
    atomic_store(result, (unint64_t *)&qword_3BBB60);
  }
  return result;
}

uint64_t sub_1380AC(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 25705 && a2 == 0xE200000000000000)
  {
    v5 = 0xE200000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(25705, 0xE200000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x656C746974 && a2 == 0xE500000000000000)
  {
    v7 = 0xE500000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656C746974, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x726F6C6F63 && a2 == 0xE500000000000000)
  {
    v8 = 0xE500000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x726F6C6F63, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x6B726F77747261 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease(0xE700000000000000);
    return 3;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6B726F77747261, 0xE700000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t UIColor.swiftUIColor.getter()
{
  void *v0;

  return Color.init(uiColor:)(v0);
}

uint64_t ModernPage.init(id:pageMetrics:shelves:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v8 = type metadata accessor for PageID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a4, a1, v8);
  v9 = type metadata accessor for ModernPage(0);
  v10 = a4 + *(int *)(v9 + 20);
  v11 = type metadata accessor for PageMetrics(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10, a2, v11);
  *(_QWORD *)(a4 + *(int *)(v9 + 24)) = a3;
  return result;
}

uint64_t type metadata accessor for ModernPage(uint64_t a1)
{
  uint64_t result;

  result = qword_3BBBC8;
  if (!qword_3BBBC8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ModernPage);
  return result;
}

uint64_t GroupedSearchResultsPage.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for PageID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t ModernPage.id.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for PageID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t ModernPage.pageMetrics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ModernPage(0) + 20);
  v4 = type metadata accessor for PageMetrics(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ModernPage.pageMetrics.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ModernPage(0) + 20);
  v4 = type metadata accessor for PageMetrics(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

void (__swiftcall *ModernPage.pageMetrics.modify())()
{
  type metadata accessor for ModernPage(0);
  return FindOrCreateEpisodeOfferContentIDsIntentsIntentImplementation.init();
}

uint64_t ModernPage.shelves.getter()
{
  type metadata accessor for ModernPage(0);
  return swift_bridgeObjectRetain();
}

uint64_t ModernPage.shelves.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for ModernPage(0) + 24);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

void (__swiftcall *ModernPage.shelves.modify())()
{
  type metadata accessor for ModernPage(0);
  return FindOrCreateEpisodeOfferContentIDsIntentsIntentImplementation.init();
}

unint64_t sub_1384D0()
{
  unint64_t result;

  result = qword_3BBB68;
  if (!qword_3BBB68)
  {
    type metadata accessor for PageID(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for PageID);
    atomic_store(result, (unint64_t *)&qword_3BBB68);
  }
  return result;
}

uint64_t sub_138518@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 20);
  v5 = type metadata accessor for PageMetrics(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t *initializeBufferWithCopyOfBuffer for ModernPage(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v14);
  }
  else
  {
    v7 = type metadata accessor for PageID(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for PageMetrics(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = *(int *)(a3 + 24);
    v13 = *(uint64_t *)((char *)a2 + v12);
    *(uint64_t *)((char *)a1 + v12) = v13;
    swift_bridgeObjectRetain(v13);
  }
  return a1;
}

uint64_t destroy for ModernPage(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = type metadata accessor for PageID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = type metadata accessor for PageMetrics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 24)));
}

uint64_t initializeWithCopy for ModernPage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for PageID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for PageMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = *(_QWORD *)(a2 + v11);
  *(_QWORD *)(a1 + v11) = v12;
  swift_bridgeObjectRetain(v12);
  return a1;
}

uint64_t assignWithCopy for ModernPage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for PageID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for PageMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = *(_QWORD *)(a2 + v11);
  v13 = *(_QWORD *)(a1 + v11);
  *(_QWORD *)(a1 + v11) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  return a1;
}

uint64_t initializeWithTake for ModernPage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for PageID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for PageMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  *(_QWORD *)(a1 + *(int *)(a3 + 24)) = *(_QWORD *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t assignWithTake for ModernPage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for PageID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for PageMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = *(_QWORD *)(a1 + v11);
  *(_QWORD *)(a1 + v11) = *(_QWORD *)(a2 + v11);
  swift_bridgeObjectRelease(v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for ModernPage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1388F0);
}

uint64_t sub_1388F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;

  v6 = type metadata accessor for PageID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = type metadata accessor for PageMetrics(0);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + *(int *)(a3 + 24));
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t storeEnumTagSinglePayload for ModernPage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1389A4);
}

uint64_t sub_1389A4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = type metadata accessor for PageID(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = type metadata accessor for PageMetrics(0);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  return result;
}

uint64_t sub_138A48(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[3];

  result = type metadata accessor for PageID(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for PageMetrics(319);
    if (v4 <= 0x3F)
    {
      v5[1] = *(_QWORD *)(result - 8) + 64;
      v5[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
      swift_initStructMetadata(a1, 256, 3, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t AMSOAuthEndpointSubscriber.subscribe(to:for:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v24 = a2;
  v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BBC08);
  v28 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BBC10);
  v29 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v25 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_138D70(a1, a2, a3, &v31);
  v30 = v31;
  v9 = swift_allocObject(&unk_3822A0, 32, 7);
  *(_QWORD *)(v9 + 16) = a2;
  *(_QWORD *)(v9 + 24) = a3;
  v10 = swift_bridgeObjectRetain(a3);
  v11 = static Subscribers.Demand.unlimited.getter(v10);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BBC18);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BBC20);
  v14 = sub_32914(&qword_3BBC28, &qword_3BBC18, (uint64_t)&protocol conformance descriptor for Future<A, B>);
  v15 = sub_32914(&qword_3BBC30, &qword_3BBC20, (uint64_t)&protocol conformance descriptor for Future<A, B>);
  Publisher.flatMap<A, B>(maxPublishers:_:)(v11, sub_1392B4, v9, v12, &type metadata for Int, v13, v14, v15);
  swift_release(v9);
  swift_release(v30);
  v16 = swift_allocObject(&unk_3822C8, 32, 7);
  *(_QWORD *)(v16 + 16) = v24;
  *(_QWORD *)(v16 + 24) = a3;
  v17 = sub_32914(&qword_3BBC38, &qword_3BBC08, (uint64_t)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
  swift_bridgeObjectRetain(a3);
  v19 = v25;
  v18 = v26;
  Publisher.tryMap<A>(_:)(sub_1392BC, v16, v26, &type metadata for Bool, v17);
  swift_release(v16);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v7, v18);
  v20 = sub_32914(&qword_3BBC40, &qword_3BBC10, (uint64_t)&protocol conformance descriptor for Publishers.TryMap<A, B>);
  v21 = v27;
  v22 = Publisher.eraseToAnyPublisher()(v27, v20);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v19, v21);
  return v22;
}

uint64_t sub_138D70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void *v32;
  void *v33;
  Swift::String_optional v34;
  Swift::String v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t result;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;

  v48 = a4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v47 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for URL(0);
  v45 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v46 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Logger(0);
  v44 = *(_QWORD *)(v12 - 8);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.purchases.getter(v13);
  v16 = swift_bridgeObjectRetain_n(a3, 2);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = swift_slowAlloc(22, -1);
    v43 = a1;
    v20 = v19;
    v21 = swift_slowAlloc(32, -1);
    v40 = v21;
    *(_DWORD *)v20 = 141558275;
    v49 = 1752392040;
    v50 = v21;
    v42 = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50);
    *(_WORD *)(v20 + 12) = 2081;
    v41 = v12;
    swift_bridgeObjectRetain(a3);
    v49 = sub_69298(a2, a3, &v50);
    v10 = v42;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50);
    swift_bridgeObjectRelease_n(a3, 3);
    _os_log_impl(&dword_0, v17, v18, "%{private,mask.hash}s: Creating and preparing request for commerce verification endpoint.", (uint8_t *)v20, 0x16u);
    v22 = v40;
    swift_arrayDestroy(v40, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1, -1);
    v23 = v20;
    a1 = v43;
    swift_slowDealloc(v23, -1, -1);

    (*(void (**)(char *, uint64_t))(v44 + 8))(v15, v41);
  }
  else
  {

    swift_bridgeObjectRelease_n(a3, 2);
    (*(void (**)(char *, uint64_t))(v44 + 8))(v15, v12);
  }
  v24 = objc_msgSend((id)objc_opt_self(IMURLBag), "sharedInstance");
  v25 = objc_msgSend(objc_allocWithZone((Class)IMURLRequestEncoder), "initWithBag:", v24);

  objc_msgSend(v25, "setPersonalizeRequests:", 1);
  objc_msgSend(v25, "setUrlKnownToBeTrusted:", 1);
  v26 = type metadata accessor for URLRequest(0);
  v27 = swift_allocBox(v26);
  v28 = v46;
  (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v46, a1, v10);
  URLRequest.init(url:cachePolicy:timeoutInterval:)(v28, 0, 60.0);
  v29 = URLRequest.httpMethod.setter(5522759, 0xE300000000000000);
  v30 = v47;
  UUID.init()(v29);
  v31 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
  v33 = v32;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v30, v7);
  v34.value._countAndFlagsBits = v31;
  v34.value._object = v33;
  v35._countAndFlagsBits = 0x646975672D78;
  v35._object = (void *)0xE600000000000000;
  URLRequest.setValue(_:forHTTPHeaderField:)(v34, v35);
  swift_bridgeObjectRelease();
  v36 = (_QWORD *)swift_allocObject(&unk_3823B0, 48, 7);
  v36[2] = v25;
  v36[3] = v27;
  v36[4] = a2;
  v36[5] = a3;
  v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BBC18);
  swift_allocObject(v37, *(unsigned int *)(v37 + 48), *(unsigned __int16 *)(v37 + 52));
  swift_bridgeObjectRetain(a3);
  result = Future.init(_:)(sub_13B150, v36);
  *v48 = result;
  return result;
}

uint64_t sub_139180@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;

  v8 = type metadata accessor for URLRequest(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v8);
  v11 = *(unsigned __int8 *)(v9 + 80);
  v12 = (v11 + 32) & ~v11;
  v13 = swift_allocObject(&unk_382310, v12 + v10, v11 | 7);
  *(_QWORD *)(v13 + 16) = a2;
  *(_QWORD *)(v13 + 24) = a3;
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v13 + v12, (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BBC20);
  swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  swift_bridgeObjectRetain(a3);
  result = Future.init(_:)(sub_13B048, v13);
  *a4 = result;
  return result;
}

uint64_t sub_139290()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1392B4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_139180(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t sub_1392BC@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  result = sub_139300(*a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
  if (!v3)
    *a2 = result & 1;
  return result;
}

ValueMetadata *type metadata accessor for AMSOAuthEndpointSubscriber()
{
  return &type metadata for AMSOAuthEndpointSubscriber;
}

uint64_t sub_139300(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v53 = a2;
  v5 = type metadata accessor for Logger(0);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v11 = (char *)&v52 - v10;
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v52 - v13;
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v52 - v16;
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v52 - v19;
  v54 = v21;
  if (a1 > 402)
  {
    if (a1 != 403)
    {
      if (a1 == 500)
      {
        static Logger.purchases.getter(v18);
        v27 = swift_bridgeObjectRetain_n(a3, 2);
        v28 = Logger.logObject.getter(v27);
        v29 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v28, v29))
        {
          v30 = swift_slowAlloc(22, -1);
          v31 = swift_slowAlloc(32, -1);
          v57 = v31;
          *(_DWORD *)v30 = 141558275;
          v55 = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56);
          *(_WORD *)(v30 + 12) = 2081;
          swift_bridgeObjectRetain(a3);
          v55 = sub_69298(v53, a3, &v57);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56);
          swift_bridgeObjectRelease_n(a3, 3);
          _os_log_impl(&dword_0, v28, v29, "%{private,mask.hash}s: Error - Unable to determine user's subscription status due to server error.", (uint8_t *)v30, 0x16u);
          swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v31, -1, -1);
          swift_slowDealloc(v30, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(a3, 2);
        }
        (*(void (**)(char *, uint64_t))(v54 + 8))(v11, v5);
        v47 = (unsigned int *)&enum case for OAuthSessionError.commerceVerificationServerError(_:);
        goto LABEL_22;
      }
      goto LABEL_10;
    }
    static Logger.purchases.getter(v18);
    v42 = swift_bridgeObjectRetain_n(a3, 2);
    v43 = Logger.logObject.getter(v42);
    v44 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v43, v44))
    {
      v45 = swift_slowAlloc(22, -1);
      v46 = swift_slowAlloc(32, -1);
      v57 = v46;
      *(_DWORD *)v45 = 141558275;
      v55 = 1752392040;
      v52 = v5;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56);
      *(_WORD *)(v45 + 12) = 2081;
      swift_bridgeObjectRetain(a3);
      v55 = sub_69298(v53, a3, &v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56);
      swift_bridgeObjectRelease_n(a3, 3);
      _os_log_impl(&dword_0, v43, v44, "%{private,mask.hash}s: User is not subscribed.", (uint8_t *)v45, 0x16u);
      swift_arrayDestroy(v46, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v46, -1, -1);
      swift_slowDealloc(v45, -1, -1);

      (*(void (**)(char *, uint64_t))(v54 + 8))(v17, v52);
    }
    else
    {

      swift_bridgeObjectRelease_n(a3, 2);
      (*(void (**)(char *, uint64_t))(v54 + 8))(v17, v5);
    }
    LOBYTE(v5) = 0;
  }
  else
  {
    if (a1 != 200)
    {
      if (a1 == 400)
      {
        static Logger.purchases.getter(v18);
        v22 = swift_bridgeObjectRetain_n(a3, 2);
        v23 = Logger.logObject.getter(v22);
        v24 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v23, v24))
        {
          v25 = swift_slowAlloc(22, -1);
          v26 = swift_slowAlloc(32, -1);
          v57 = v26;
          *(_DWORD *)v25 = 141558275;
          v55 = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56);
          *(_WORD *)(v25 + 12) = 2081;
          swift_bridgeObjectRetain(a3);
          v55 = sub_69298(v53, a3, &v57);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56);
          swift_bridgeObjectRelease_n(a3, 3);
          _os_log_impl(&dword_0, v23, v24, "%{private,mask.hash}s: Error - Unable to determine user's subscription status due to bad client request", (uint8_t *)v25, 0x16u);
          swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v26, -1, -1);
          swift_slowDealloc(v25, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(a3, 2);
        }
        (*(void (**)(char *, uint64_t))(v54 + 8))(v14, v5);
        v47 = (unsigned int *)&enum case for OAuthSessionError.commerceVerificationBadClientRequest(_:);
LABEL_22:
        v5 = type metadata accessor for OAuthSessionError(0);
        v48 = sub_139C0C();
        swift_allocError(v5, v48, 0, 0);
        v50 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(v49, *v47, v5);
        swift_willThrow(v50);
        return v5 & 1;
      }
LABEL_10:
      static Logger.purchases.getter(v18);
      v32 = swift_bridgeObjectRetain_n(a3, 2);
      v33 = Logger.logObject.getter(v32);
      v34 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v33, v34))
      {
        v35 = swift_slowAlloc(32, -1);
        v36 = swift_slowAlloc(32, -1);
        v57 = v36;
        *(_DWORD *)v35 = 141558531;
        v55 = 1752392040;
        v52 = v5;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56);
        *(_WORD *)(v35 + 12) = 2081;
        swift_bridgeObjectRetain(a3);
        v55 = sub_69298(v53, a3, &v57);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56);
        swift_bridgeObjectRelease_n(a3, 3);
        *(_WORD *)(v35 + 22) = 2048;
        v55 = a1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56);
        _os_log_impl(&dword_0, v33, v34, "%{private,mask.hash}s: Error - Unable to determine user's subscription status due to unknown error with status code %ld", (uint8_t *)v35, 0x20u);
        swift_arrayDestroy(v36, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v36, -1, -1);
        swift_slowDealloc(v35, -1, -1);

        (*(void (**)(char *, uint64_t))(v54 + 8))(v8, v52);
      }
      else
      {

        swift_bridgeObjectRelease_n(a3, 2);
        (*(void (**)(char *, uint64_t))(v54 + 8))(v8, v5);
      }
      v47 = (unsigned int *)&enum case for OAuthSessionError.commerceVerificationUnknownError(_:);
      goto LABEL_22;
    }
    static Logger.purchases.getter(v18);
    v37 = swift_bridgeObjectRetain_n(a3, 2);
    v38 = Logger.logObject.getter(v37);
    v39 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v38, v39))
    {
      v40 = swift_slowAlloc(22, -1);
      v41 = swift_slowAlloc(32, -1);
      v57 = v41;
      *(_DWORD *)v40 = 141558275;
      v55 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56);
      *(_WORD *)(v40 + 12) = 2081;
      v52 = v5;
      swift_bridgeObjectRetain(a3);
      v55 = sub_69298(v53, a3, &v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56);
      swift_bridgeObjectRelease_n(a3, 3);
      _os_log_impl(&dword_0, v38, v39, "%{private,mask.hash}s: User is subscribed.", (uint8_t *)v40, 0x16u);
      LOBYTE(v5) = 1;
      swift_arrayDestroy(v41, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v41, -1, -1);
      swift_slowDealloc(v40, -1, -1);

      (*(void (**)(char *, uint64_t))(v54 + 8))(v20, v52);
    }
    else
    {

      swift_bridgeObjectRelease_n(a3, 2);
      (*(void (**)(char *, uint64_t))(v54 + 8))(v20, v5);
      LOBYTE(v5) = 1;
    }
  }
  return v5 & 1;
}

unint64_t sub_139C0C()
{
  unint64_t result;

  result = qword_3B4378;
  if (!qword_3B4378)
  {
    type metadata accessor for OAuthSessionError(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for OAuthSessionError);
    atomic_store(result, (unint64_t *)&qword_3B4378);
  }
  return result;
}

void sub_139C54(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  __n128 v17;
  Class isa;
  _QWORD *v19;
  void *v20;
  _QWORD *v21;
  _QWORD aBlock[5];
  _QWORD *v24;
  char v25[24];

  v12 = type metadata accessor for URLRequest(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&aBlock[-1] - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = swift_projectBox(a4);
  v17 = swift_beginAccess(v16, v25, 0, 0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v13 + 16))(v15, v16, v12, v17);
  isa = URLRequest._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  v19 = (_QWORD *)swift_allocObject(&unk_3823D8, 48, 7);
  v19[2] = a5;
  v19[3] = a6;
  v19[4] = a1;
  v19[5] = a2;
  aBlock[4] = sub_13B18C;
  v24 = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_E60F4;
  aBlock[3] = &block_descriptor_21;
  v20 = _Block_copy(aBlock);
  v21 = v24;
  swift_bridgeObjectRetain(a6);
  swift_retain(a2);
  swift_release(v21);
  objc_msgSend(a3, "prepareRequest:account:completion:", isa, 0, v20);
  _Block_release(v20);

}

uint64_t sub_139DD4(void *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  id v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  id v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v63 = a3;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BBC48);
  __chkstk_darwin(v11);
  v13 = (uint64_t *)((char *)&v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = type metadata accessor for Logger(0);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v59 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v59 - v19;
  v21 = __chkstk_darwin(v18);
  v23 = (char *)&v59 - v22;
  v65 = v24;
  v66 = v21;
  if (a2)
  {
    v64 = v11;
    v25 = swift_errorRetain(a2);
    static Logger.purchases.getter(v25);
    swift_errorRetain(a2);
    swift_bridgeObjectRetain(a4);
    swift_errorRetain(a2);
    v26 = swift_bridgeObjectRetain(a4);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      v29 = swift_slowAlloc(32, -1);
      v30 = swift_slowAlloc(8, -1);
      v62 = a6;
      v31 = (_QWORD *)v30;
      v32 = swift_slowAlloc(32, -1);
      v60 = (id)v32;
      *(_DWORD *)v29 = 141558531;
      v67 = 1752392040;
      v68 = v32;
      v61 = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68);
      *(_WORD *)(v29 + 12) = 2081;
      swift_bridgeObjectRetain(a4);
      v67 = sub_69298(v63, a4, &v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68);
      swift_bridgeObjectRelease_n(a4, 3);
      *(_WORD *)(v29 + 22) = 2112;
      v33 = _convertErrorToNSError(_:)(a2);
      v67 = v33;
      v13 = v61;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68);
      *v31 = v33;
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl(&dword_0, v27, v28, "%{private,mask.hash}s: Could not prepare URL Request with error: %@.", (uint8_t *)v29, 0x20u);
      v34 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8E70);
      swift_arrayDestroy(v31, 1, v34);
      swift_slowDealloc(v31, -1, -1);
      v35 = v60;
      swift_arrayDestroy(v60, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v35, -1, -1);
      swift_slowDealloc(v29, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(a4, 2);
      swift_errorRelease(a2);
      swift_errorRelease(a2);
    }

    (*(void (**)(char *, uint64_t))(v65 + 8))(v23, v66);
    v46 = v64;
    *v13 = a2;
    swift_storeEnumTagMultiPayload(v13, v46, 1);
    swift_errorRetain(a2);
    ((void (*)(uint64_t *))a5)(v13);
    swift_errorRelease(a2);
  }
  else
  {
    v62 = a6;
    if (a1)
    {
      v36 = a1;
      static Logger.purchases.getter(v36);
      v37 = swift_bridgeObjectRetain_n(a4, 2);
      v38 = Logger.logObject.getter(v37);
      v39 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v38, v39))
      {
        v40 = swift_slowAlloc(22, -1);
        v60 = v36;
        v41 = v40;
        v42 = swift_slowAlloc(32, -1);
        v64 = v11;
        v43 = v42;
        *(_DWORD *)v41 = 141558275;
        v67 = 1752392040;
        v68 = v42;
        v61 = a5;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68);
        *(_WORD *)(v41 + 12) = 2081;
        swift_bridgeObjectRetain(a4);
        v67 = sub_69298(v63, a4, &v68);
        a5 = v61;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68);
        swift_bridgeObjectRelease_n(a4, 3);
        _os_log_impl(&dword_0, v38, v39, "%{private,mask.hash}s: Created and prepared request for commerce verification endpoint.", (uint8_t *)v41, 0x16u);
        swift_arrayDestroy(v43, 1, (char *)&type metadata for Any + 8);
        v44 = v43;
        v11 = v64;
        swift_slowDealloc(v44, -1, -1);
        v45 = v41;
        v36 = v60;
        swift_slowDealloc(v45, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(a4, 2);
      }
      (*(void (**)(char *, uint64_t))(v65 + 8))(v17, v66);
      static URLRequest._unconditionallyBridgeFromObjectiveC(_:)(a1);
      swift_storeEnumTagMultiPayload(v13, v11, 0);
      ((void (*)(uint64_t *))a5)(v13);

    }
    else
    {
      static Logger.purchases.getter(v21);
      v47 = swift_bridgeObjectRetain_n(a4, 2);
      v48 = Logger.logObject.getter(v47);
      v49 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v48, v49))
      {
        v50 = swift_slowAlloc(22, -1);
        v51 = swift_slowAlloc(32, -1);
        v64 = v11;
        v52 = v51;
        *(_DWORD *)v50 = 141558275;
        v67 = 1752392040;
        v68 = v51;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68);
        *(_WORD *)(v50 + 12) = 2081;
        swift_bridgeObjectRetain(a4);
        v67 = sub_69298(v63, a4, &v68);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68);
        swift_bridgeObjectRelease_n(a4, 3);
        _os_log_impl(&dword_0, v48, v49, "%{private,mask.hash}s: No request available after attempting to prepare request.", (uint8_t *)v50, 0x16u);
        swift_arrayDestroy(v52, 1, (char *)&type metadata for Any + 8);
        v53 = v52;
        v11 = v64;
        swift_slowDealloc(v53, -1, -1);
        swift_slowDealloc(v50, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(a4, 2);
      }
      (*(void (**)(char *, uint64_t))(v65 + 8))(v20, v66);
      v54 = type metadata accessor for OAuthSessionError(0);
      v55 = sub_139C0C();
      v56 = swift_allocError(v54, v55, 0, 0);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v54 - 8) + 104))(v57, enum case for OAuthSessionError.noPreparedRequestAvailable(_:), v54);
      *v13 = v56;
      swift_storeEnumTagMultiPayload(v13, v11, 1);
      ((void (*)(uint64_t *))a5)(v13);
    }
  }
  return sub_1459C((uint64_t)v13, &qword_3BBC48);
}

void sub_13A4CC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  Class isa;
  id v23;
  _QWORD *v24;
  void *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t aBlock[5];
  _QWORD *v32;

  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = swift_allocObject(&unk_382338, 32, 7);
  *(_QWORD *)(v12 + 16) = a1;
  *(_QWORD *)(v12 + 24) = a2;
  v13 = swift_retain(a2);
  static Logger.purchases.getter(v13);
  v14 = swift_bridgeObjectRetain_n(a4, 2);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = swift_slowAlloc(22, -1);
    v18 = swift_slowAlloc(32, -1);
    v29 = a3;
    v19 = v18;
    *(_DWORD *)v17 = 141558275;
    v30 = 1752392040;
    aBlock[0] = v18;
    v28 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, aBlock);
    *(_WORD *)(v17 + 12) = 2081;
    v27 = v8;
    swift_bridgeObjectRetain(a4);
    v30 = sub_69298(v29, a4, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, aBlock);
    swift_bridgeObjectRelease_n(a4, 3);
    _os_log_impl(&dword_0, v15, v16, "%{private,mask.hash}s: Performing request to commerce verification endpoint.", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
    v20 = v19;
    a3 = v29;
    swift_slowDealloc(v20, -1, -1);
    swift_slowDealloc(v17, -1, -1);

    (*(void (**)(char *, uint64_t))(v28 + 8))(v11, v27);
  }
  else
  {

    swift_bridgeObjectRelease_n(a4, 2);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  v21 = objc_msgSend((id)objc_opt_self(AMSURLSession), "defaultSession");
  isa = URLRequest._bridgeToObjectiveC()().super.isa;
  v23 = objc_msgSend(v21, "dataTaskPromiseWithRequest:", isa);

  v24 = (_QWORD *)swift_allocObject(&unk_382360, 48, 7);
  v24[2] = a3;
  v24[3] = a4;
  v24[4] = sub_13B0BC;
  v24[5] = v12;
  aBlock[4] = (uint64_t)sub_13B0F8;
  v32 = v24;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_E60F4;
  aBlock[3] = (uint64_t)&block_descriptor_11;
  v25 = _Block_copy(aBlock);
  v26 = v32;
  swift_bridgeObjectRetain(a4);
  swift_release(v26);
  objc_msgSend(v23, "addFinishBlock:", v25);
  _Block_release(v25);

}

uint64_t sub_13A7E8(void *a1, uint64_t a2, uint64_t a3, unint64_t a4, void (*a5)(uint64_t, uint64_t), uint64_t a6)
{
  uint64_t v10;
  void (*v11)(char *, char *);
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  id v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v36)(char *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  void (*v55)(char *, char *);
  uint64_t v56;
  void (*v57)(uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;

  v56 = a6;
  v57 = a5;
  v10 = type metadata accessor for Logger(0);
  v11 = *(void (**)(char *, char *))(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v52 - v16;
  __chkstk_darwin(v15);
  v19 = (char *)&v52 - v18;
  v20 = sub_13AE74(a1, a2);
  v55 = v11;
  if ((v21 & 1) != 0)
  {
    static Logger.purchases.getter(v20);
    v28 = swift_bridgeObjectRetain_n(a4, 2);
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.error.getter();
    v31 = os_log_type_enabled(v29, v30);
    v53 = a3;
    if (v31)
    {
      v32 = swift_slowAlloc(22, -1);
      v33 = swift_slowAlloc(32, -1);
      v52 = v33;
      *(_DWORD *)v32 = 141558275;
      v58 = 1752392040;
      v59 = v33;
      v54 = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59);
      *(_WORD *)(v32 + 12) = 2081;
      swift_bridgeObjectRetain(a4);
      v58 = sub_69298(a3, a4, &v59);
      v14 = v54;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59);
      swift_bridgeObjectRelease_n(a4, 3);
      _os_log_impl(&dword_0, v29, v30, "%{private,mask.hash}s: Error - no status code in response from commerce verification endpoint.", (uint8_t *)v32, 0x16u);
      v34 = v52;
      swift_arrayDestroy(v52, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v34, -1, -1);
      swift_slowDealloc(v32, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a4, 2);
    }
    v36 = (void (*)(char *, uint64_t))*((_QWORD *)v55 + 1);
    v36(v19, v10);
    if (a2)
    {
      v37 = swift_errorRetain(a2);
      static Logger.purchases.getter(v37);
      swift_bridgeObjectRetain(a4);
      swift_errorRetain(a2);
      swift_bridgeObjectRetain(a4);
      v38 = swift_errorRetain(a2);
      v39 = Logger.logObject.getter(v38);
      v40 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v39, v40))
      {
        v41 = swift_slowAlloc(32, -1);
        v42 = swift_slowAlloc(8, -1);
        v55 = (void (*)(char *, char *))v36;
        v43 = (_QWORD *)v42;
        v44 = swift_slowAlloc(32, -1);
        *(_DWORD *)v41 = 141558531;
        v58 = 1752392040;
        v59 = v44;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59);
        *(_WORD *)(v41 + 12) = 2081;
        v54 = (char *)v10;
        swift_bridgeObjectRetain(a4);
        v58 = sub_69298(v53, a4, &v59);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59);
        swift_bridgeObjectRelease_n(a4, 3);
        *(_WORD *)(v41 + 22) = 2112;
        v45 = _convertErrorToNSError(_:)(a2);
        v58 = v45;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59);
        *v43 = v45;
        swift_errorRelease(a2);
        swift_errorRelease(a2);
        _os_log_impl(&dword_0, v39, v40, "%{private,mask.hash}s: Error performing data task to verification endpoint with error and no status code: %@", (uint8_t *)v41, 0x20u);
        v46 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8E70);
        swift_arrayDestroy(v43, 1, v46);
        swift_slowDealloc(v43, -1, -1);
        swift_arrayDestroy(v44, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v44, -1, -1);
        swift_slowDealloc(v41, -1, -1);

        v55(v14, v54);
      }
      else
      {
        swift_bridgeObjectRelease_n(a4, 2);
        swift_errorRelease(a2);
        swift_errorRelease(a2);

        v36(v14, v10);
      }
      swift_errorRetain(a2);
      v57(a2, 1);
      swift_errorRelease(a2);
      v51 = a2;
    }
    else
    {
      v47 = type metadata accessor for OAuthSessionError(0);
      v48 = sub_139C0C();
      v49 = swift_allocError(v47, v48, 0, 0);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v47 - 8) + 104))(v50, enum case for OAuthSessionError.noStatusCodeFromCommerceVerificationEndpoint(_:), v47);
      v57(v49, 1);
      v51 = v49;
    }
    return swift_errorRelease(v51);
  }
  else
  {
    v22 = (uint64_t)v20;
    static Logger.purchases.getter(v20);
    v23 = swift_bridgeObjectRetain_n(a4, 2);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = swift_slowAlloc(32, -1);
      v27 = swift_slowAlloc(32, -1);
      *(_DWORD *)v26 = 141558531;
      v58 = 1752392040;
      v59 = v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59);
      *(_WORD *)(v26 + 12) = 2081;
      v54 = (char *)v10;
      swift_bridgeObjectRetain(a4);
      v58 = sub_69298(a3, a4, &v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59);
      swift_bridgeObjectRelease_n(a4, 3);
      *(_WORD *)(v26 + 22) = 2048;
      v58 = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59);
      _os_log_impl(&dword_0, v24, v25, "%{private,mask.hash}s: Performed data task to commerce verification endpoint and received status code: %ld", (uint8_t *)v26, 0x20u);
      swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v26, -1, -1);

      (*((void (**)(char *, char *))v55 + 1))(v17, v54);
    }
    else
    {

      swift_bridgeObjectRelease_n(a4, 2);
      (*((void (**)(char *, uint64_t))v55 + 1))(v17, v10);
    }
    return ((uint64_t (*)(uint64_t, _QWORD))v57)(v22, 0);
  }
}

id sub_13AE74(void *a1, uint64_t a2)
{
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;

  if (a1)
    return objc_msgSend(a1, "responseStatusCode");
  if (!a2)
    return 0;
  swift_errorRetain(a2);
  v4 = (void *)_convertErrorToNSError(_:)(a2);
  v5 = objc_msgSend(v4, "userInfo");

  v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v5, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(AMSErrorUserInfoKeyStatusCode);
  if (!*(_QWORD *)(v6 + 16) || (v9 = sub_29724(v7, v8), (v10 & 1) == 0))
  {
    v12 = 0u;
    v13 = 0u;
    swift_errorRelease(a2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  sub_1FB98(*(_QWORD *)(v6 + 56) + 32 * v9, (uint64_t)&v12);
  swift_errorRelease(a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v13 + 1))
  {
LABEL_10:
    sub_1459C((uint64_t)&v12, (uint64_t *)&unk_3BC540);
    return 0;
  }
  if (swift_dynamicCast(&v11, &v12, (char *)&type metadata for Any + 8, &type metadata for Int, 6))
    return (id)v11;
  return 0;
}

uint64_t sub_13AFD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for URLRequest(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_13B048(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  type metadata accessor for URLRequest(0);
  sub_13A4CC(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_13B098()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_13B0BC(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t *);
  uint64_t v5;
  char v6;

  v3 = *(uint64_t (**)(uint64_t *))(v2 + 16);
  v5 = a1;
  v6 = a2 & 1;
  return v3(&v5);
}

uint64_t sub_13B0F8(void *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_13A7E8(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(void (**)(uint64_t, uint64_t))(v2 + 32), *(_QWORD *)(v2 + 40));
}

uint64_t block_copy_helper_11(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t block_destroy_helper_11(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_13B11C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

void sub_13B150(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_139C54(a1, a2, *(void **)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40));
}

uint64_t objectdestroy_11Tm()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_13B18C(void *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_139DD4(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(uint64_t **)(v2 + 32), *(_QWORD *)(v2 + 40));
}

void MetricsActivity.addMetricsFields(into:participatingInCrossfireReferral:)(_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  os_unfair_lock_s *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int (*v53)(_QWORD, _QWORD, _QWORD);
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *, char *, uint64_t);
  char *v57;
  _QWORD *v58;
  char v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  _QWORD *v69;
  char v70;
  char os_unfair_lock_opaque;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t (*v90)(uint64_t, uint64_t, uint64_t);
  int v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  char v98;
  void (*v99)(char *, uint64_t);
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  char v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int (*v126)(_QWORD, _QWORD, _QWORD);
  uint64_t v127;
  uint64_t v128;
  char *v129;
  char *v130;
  char *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  _QWORD *v145;
  char *v146;
  _OWORD *v147;
  _QWORD *v148;
  _QWORD *v149;
  __int128 v150;
  _OWORD v151[2];
  __int128 v152;
  __int128 v153;
  _QWORD *v154;

  v4 = v3;
  LODWORD(v142) = a2;
  v148 = a1;
  v138 = type metadata accessor for MetricsEventType(0);
  v140 = *(_QWORD *)(v138 - 8);
  __chkstk_darwin(v138);
  v132 = (char *)&v126 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v137 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BBC58);
  __chkstk_darwin(v137);
  v141 = (uint64_t)&v126 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BBC60);
  v8 = __chkstk_darwin(v7);
  v134 = (uint64_t)&v126 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v145 = (unsigned int (**)(_QWORD, _QWORD, _QWORD))((char *)&v126 - v11);
  __chkstk_darwin(v10);
  v13 = (char *)&v126 - v12;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BBC68);
  __chkstk_darwin(v14);
  v143 = (uint64_t)&v126 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v147 = (_OWORD *)type metadata accessor for MetricsWidgetContext(0);
  v144 = (char *)*((_QWORD *)v147 - 1);
  __chkstk_darwin(v147);
  v146 = (char *)&v126 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
  v18 = __chkstk_darwin(v17);
  v133 = (uint64_t)&v126 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v21 = (char *)&v126 - v20;
  v139 = type metadata accessor for URL(0);
  v135 = *(_QWORD *)(v139 - 8);
  v22 = __chkstk_darwin(v139);
  v131 = (char *)&v126 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v130 = (char *)&v126 - v24;
  v25 = type metadata accessor for MetricsActivity.State(0);
  __chkstk_darwin(v25);
  v27 = (os_unfair_lock_s *)((char *)&v126 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7738);
  __chkstk_darwin(v28);
  v30 = (char *)&v126 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = type metadata accessor for MetricsActivity.PageReferrer(0);
  v32 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v154 = &_swiftEmptyDictionarySingleton;
  if ((v142 & 1) != 0)
  {
    v136 = (uint64_t *)((char *)&v126 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0));
    v142 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8ShelfKit15MetricsActivity_state);
    OSAllocatedUnfairLock.current.getter(v27, v142, v25);
    sub_267BC((uint64_t)v27 + *(int *)(v25 + 24), (uint64_t)v30, &qword_3B7738);
    sub_145D8((uint64_t)v27, type metadata accessor for MetricsActivity.State);
    v34 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31);
    v128 = v2;
    if (v34 == 1)
    {
      sub_1459C((uint64_t)v30, &qword_3B7738);
      v35 = (uint64_t)v145;
      v36 = v146;
      v37 = v142;
    }
    else
    {
      v129 = v13;
      v38 = v136;
      v39 = sub_13E868((uint64_t)v30, (uint64_t)v136);
      v40 = static MetricsField<>.referralApp.getter(v39);
      v42 = v41;
      v43 = v38[1];
      if (v43)
      {
        v44 = *v38;
        *((_QWORD *)&v153 + 1) = &type metadata for String;
        *(_QWORD *)&v152 = v44;
        *((_QWORD *)&v152 + 1) = v43;
        v45 = v40;
        sub_1F460(&v152, &v150);
        swift_bridgeObjectRetain_n(v43, 2);
        swift_bridgeObjectRetain(v42);
        v46 = v154;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v154);
        v149 = v46;
        v154 = (_QWORD *)0x8000000000000000;
        sub_1E640(&v150, v45, v42, isUniquelyReferenced_nonNull_native);
        v154 = v149;
        v48 = (uint64_t)v136;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n(v42, 2);
      }
      else
      {
        v48 = (uint64_t)v38;
        sub_13E778(v40, v41, &v152);
        sub_1459C((uint64_t)&v152, (uint64_t *)&unk_3BC540);
      }
      v49 = swift_bridgeObjectRelease();
      v50 = v135;
      v127 = static MetricsField<>.externalReferralURL.getter(v49);
      v52 = v51;
      sub_267BC(v48 + *(int *)(v31 + 20), (uint64_t)v21, &qword_3B4370);
      v53 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD))(v50 + 48);
      v54 = v139;
      if (v53(v21, 1, v139) == 1)
      {
        sub_1459C((uint64_t)v21, &qword_3B4370);
        swift_bridgeObjectRetain(v52);
        sub_13E778(v127, v52, &v152);
        v55 = v139;
        swift_bridgeObjectRelease();
        sub_1459C((uint64_t)&v152, (uint64_t *)&unk_3BC540);
      }
      else
      {
        v56 = *(void (**)(char *, char *, uint64_t))(v50 + 32);
        v126 = v53;
        v57 = v130;
        v56(v130, v21, v54);
        swift_bridgeObjectRetain(v52);
        dispatch thunk of MetricsFieldRepresentable.metricsFieldRepresentation()(&v152, v139, &protocol witness table for URL);
        sub_1F460(&v152, &v150);
        v58 = v154;
        v59 = swift_isUniquelyReferenced_nonNull_native(v154);
        v149 = v58;
        v154 = (_QWORD *)0x8000000000000000;
        sub_1E640(&v150, v127, v52, v59);
        v154 = v149;
        swift_bridgeObjectRelease();
        v55 = v139;
        swift_bridgeObjectRelease();
        v60 = v57;
        v53 = v126;
        (*(void (**)(char *, uint64_t))(v50 + 8))(v60, v55);
      }
      v61 = swift_bridgeObjectRelease();
      v62 = static MetricsField<>.openURL.getter(v61);
      v64 = v63;
      v65 = v133;
      sub_267BC((uint64_t)v136 + *(int *)(v31 + 24), v133, &qword_3B4370);
      if (v53(v65, 1, v55) == 1)
      {
        sub_1459C(v65, &qword_3B4370);
        swift_bridgeObjectRetain(v64);
        sub_13E778(v62, v64, &v152);
        swift_bridgeObjectRelease();
        sub_1459C((uint64_t)&v152, (uint64_t *)&unk_3BC540);
      }
      else
      {
        v66 = v135;
        v67 = v131;
        (*(void (**)(char *, uint64_t, uint64_t))(v135 + 32))(v131, v65, v55);
        swift_bridgeObjectRetain(v64);
        v68 = v55;
        dispatch thunk of MetricsFieldRepresentable.metricsFieldRepresentation()(&v152, v55, &protocol witness table for URL);
        sub_1F460(&v152, &v150);
        v69 = v154;
        v70 = swift_isUniquelyReferenced_nonNull_native(v154);
        v149 = v69;
        v154 = (_QWORD *)0x8000000000000000;
        sub_1E640(&v150, v62, v64, v70);
        v154 = v149;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v66 + 8))(v67, v68);
      }
      swift_bridgeObjectRelease();
      v35 = (uint64_t)v145;
      v36 = v146;
      v37 = v142;
      v13 = v129;
      sub_145D8((uint64_t)v136, type metadata accessor for MetricsActivity.PageReferrer);
    }
    OSAllocatedUnfairLock.current.getter(v27, v37, v25);
    os_unfair_lock_opaque = v27[2]._os_unfair_lock_opaque;
    sub_145D8((uint64_t)v27, type metadata accessor for MetricsActivity.State);
    if ((os_unfair_lock_opaque & 1) == 0)
    {
      v72 = v37 + *(_QWORD *)(class metadata base offset for ManagedBuffer + *(_QWORD *)v37 + 16);
      v73 = v37 + ((*(unsigned int *)(*(_QWORD *)v37 + 48) + 3) & 0x1FFFFFFFCLL);
      os_unfair_lock_lock((os_unfair_lock_t)v73);
      sub_13E30C(v72);
      if (v3)
        goto LABEL_65;
      v4 = 0;
      os_unfair_lock_unlock((os_unfair_lock_t)v73);
    }
    v2 = v128;
  }
  else
  {
    v35 = (uint64_t)v145;
    v36 = v146;
  }
  v74 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8ShelfKit15MetricsActivity_state);
  OSAllocatedUnfairLock.current.getter(v27, v74, v25);
  v75 = v143;
  sub_267BC((uint64_t)v27 + *(int *)(v25 + 44), v143, &qword_3BBC68);
  sub_145D8((uint64_t)v27, type metadata accessor for MetricsActivity.State);
  v76 = v144;
  v77 = (uint64_t)v147;
  if ((*((unsigned int (**)(uint64_t, uint64_t, _OWORD *))v144 + 6))(v75, 1, v147) == 1)
  {
    sub_1459C(v75, &qword_3BBC68);
    goto LABEL_31;
  }
  v142 = v74;
  (*((void (**)(char *, uint64_t, uint64_t))v76 + 4))(v36, v75, v77);
  v78 = v148[3];
  v79 = v148[4];
  __swift_project_boxed_opaque_existential_1(v148, v78);
  v80 = dispatch thunk of MetricsFieldsBuilder.allMetricsFields.getter(v78, v79);
  v81 = static MetricsField<>.eventType.getter();
  sub_13E374(v81, v82, v80, (uint64_t)v13);
  swift_bridgeObjectRelease();
  v83 = swift_bridgeObjectRelease();
  static MetricsEventType.enter.getter(v83);
  v84 = v140;
  v85 = v138;
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v140 + 56))(v35, 0, 1, v138);
  v86 = v35;
  v87 = v141;
  v88 = v141 + *(int *)(v137 + 48);
  sub_267BC((uint64_t)v13, v141, &qword_3BBC60);
  v89 = v87;
  sub_267BC(v86, v88, &qword_3BBC60);
  v90 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v84 + 48);
  if (v90(v89, 1, v85) == 1)
  {
    sub_1459C(v86, &qword_3BBC60);
    v89 = v141;
    sub_1459C((uint64_t)v13, &qword_3BBC60);
    v91 = v90(v88, 1, v85);
    v92 = v146;
    if (v91 == 1)
    {
      v93 = sub_1459C(v89, &qword_3BBC60);
LABEL_28:
      v100 = static MetricsField<>.referralApp.getter(v93);
      v102 = v101;
      *((_QWORD *)&v153 + 1) = &type metadata for String;
      *(_QWORD *)&v152 = 0xD000000000000019;
      *((_QWORD *)&v152 + 1) = 0x8000000000310340;
      sub_1F460(&v152, &v150);
      v103 = v154;
      v104 = swift_isUniquelyReferenced_nonNull_native(v154);
      v149 = v103;
      v154 = (_QWORD *)0x8000000000000000;
      sub_1E640(&v150, v100, v102, v104);
      v154 = v149;
      swift_bridgeObjectRelease();
      v105 = swift_bridgeObjectRelease();
      v106 = MetricsWidgetContext.metricsDictionary.getter(v105);
      *((_QWORD *)&v153 + 1) = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0A78);
      *(_QWORD *)&v152 = v106;
      sub_1F460(&v152, &v150);
      v107 = v154;
      v108 = swift_isUniquelyReferenced_nonNull_native(v154);
      v149 = v107;
      sub_1D728(&v150, 0x6F43746567646977, 0xED0000747865746ELL, v108);
      v154 = v149;
      swift_bridgeObjectRelease();
      v109 = v142 + *(_QWORD *)(class metadata base offset for ManagedBuffer + *(_QWORD *)v142 + 16);
      v27 = (os_unfair_lock_s *)(v142 + ((*(unsigned int *)(*(_QWORD *)v142 + 48) + 3) & 0x1FFFFFFFCLL));
      os_unfair_lock_lock(v27);
      sub_13E6B8(v109);
      if (v4)
        goto LABEL_66;
      v4 = 0;
      os_unfair_lock_unlock(v27);
      goto LABEL_30;
    }
    goto LABEL_26;
  }
  v129 = v13;
  v94 = v134;
  sub_267BC(v89, v134, &qword_3BBC60);
  if (v90(v88, 1, v85) == 1)
  {
    sub_1459C((uint64_t)v145, &qword_3BBC60);
    sub_1459C((uint64_t)v129, &qword_3BBC60);
    (*(void (**)(uint64_t, uint64_t))(v140 + 8))(v94, v85);
    v92 = v146;
LABEL_26:
    sub_1459C(v89, &qword_3BBC58);
    goto LABEL_30;
  }
  v95 = v140;
  v96 = v132;
  (*(void (**)(char *, uint64_t, uint64_t))(v140 + 32))(v132, v88, v85);
  v97 = sub_F1C0(&qword_3BBC78, (void (*)(uint64_t))&type metadata accessor for MetricsEventType, (uint64_t)&protocol conformance descriptor for MetricsEventType);
  v98 = dispatch thunk of static Equatable.== infix(_:_:)(v94, v96, v85, v97);
  v99 = *(void (**)(char *, uint64_t))(v95 + 8);
  v99(v96, v85);
  sub_1459C((uint64_t)v145, &qword_3BBC60);
  sub_1459C((uint64_t)v129, &qword_3BBC60);
  v99((char *)v94, v85);
  v93 = sub_1459C(v89, &qword_3BBC60);
  v92 = v146;
  if ((v98 & 1) != 0)
    goto LABEL_28;
LABEL_30:
  (*((void (**)(char *, _OWORD *))v76 + 1))(v92, v147);
LABEL_31:
  v110 = 0;
  v27 = (os_unfair_lock_s *)v154;
  v111 = v154[8];
  v145 = v154 + 8;
  v112 = 1 << *((_BYTE *)v154 + 32);
  v113 = -1;
  if (v112 < 64)
    v113 = ~(-1 << v112);
  v73 = v113 & v111;
  v146 = (char *)((unint64_t)(v112 + 63) >> 6);
  v147 = v151;
  v144 = v146 - 1;
  if ((v113 & v111) == 0)
    goto LABEL_36;
LABEL_34:
  v114 = __clz(__rbit64(v73));
  v73 &= v73 - 1;
  v115 = v114 | (v110 << 6);
LABEL_35:
  v116 = *(_QWORD *)&v27[14]._os_unfair_lock_opaque;
  v117 = (_QWORD *)(*(_QWORD *)&v27[12]._os_unfair_lock_opaque + 16 * v115);
  v118 = v117[1];
  *(_QWORD *)&v150 = *v117;
  *((_QWORD *)&v150 + 1) = v118;
  sub_1FB98(v116 + 32 * v115, (uint64_t)v147);
  swift_bridgeObjectRetain(v118);
  while (1)
  {
    sub_15BD4((uint64_t)&v150, (uint64_t)&v152, &qword_3BB408);
    v121 = *((_QWORD *)&v152 + 1);
    if (!*((_QWORD *)&v152 + 1))
      goto LABEL_62;
    v122 = v152;
    sub_1F460(&v153, &v150);
    v124 = v148[3];
    v123 = v148[4];
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v148, v124);
    dispatch thunk of MetricsFieldsBuilder.addValue(_:forField:)(&v150, v122, v121, v124, v123);
    if (v4)
    {
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1(&v150);
LABEL_62:
      swift_release(v27);
      return;
    }
    __swift_destroy_boxed_opaque_existential_1(&v150);
    swift_bridgeObjectRelease();
    if (v73)
      goto LABEL_34;
LABEL_36:
    v119 = v110 + 1;
    if (__OFADD__(v110, 1))
    {
      __break(1u);
      goto LABEL_64;
    }
    if (v119 < (uint64_t)v146)
    {
      v120 = v145[v119];
      if (v120)
        goto LABEL_39;
      v110 += 2;
      if (v119 + 1 >= (uint64_t)v146)
      {
        v110 = v119;
        goto LABEL_44;
      }
      v120 = v145[v110];
      if (v120)
      {
        ++v119;
LABEL_39:
        v73 = (v120 - 1) & v120;
        v115 = __clz(__rbit64(v120)) + (v119 << 6);
        v110 = v119;
        goto LABEL_35;
      }
      if (v119 + 2 < (uint64_t)v146)
        break;
    }
LABEL_44:
    v73 = 0;
    memset(v151, 0, sizeof(v151));
    v150 = 0u;
  }
  v120 = v145[v119 + 2];
  if (v120)
  {
    v119 += 2;
    goto LABEL_39;
  }
  v125 = v119 + 3;
  if (v119 + 3 >= (uint64_t)v146)
  {
    v110 = v119 + 2;
    goto LABEL_44;
  }
  v120 = v145[v125];
  if (v120)
  {
    v119 += 3;
    goto LABEL_39;
  }
  while (1)
  {
    v119 = v125 + 1;
    if (__OFADD__(v125, 1))
      break;
    if (v119 >= (uint64_t)v146)
    {
      v110 = (uint64_t)v144;
      goto LABEL_44;
    }
    v120 = v145[v119];
    ++v125;
    if (v120)
      goto LABEL_39;
  }
LABEL_64:
  __break(1u);
LABEL_65:
  os_unfair_lock_unlock((os_unfair_lock_t)v73);
  __break(1u);
LABEL_66:
  os_unfair_lock_unlock(v27);
  __break(1u);
}

uint64_t MetricsActivity.currentPageFields.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;

  v1 = type metadata accessor for MetricsActivity.State(0);
  __chkstk_darwin(v1);
  v3 = (uint64_t *)((char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  OSAllocatedUnfairLock.current.getter(v3, *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit15MetricsActivity_state), v1);
  v4 = *(_QWORD *)((char *)v3 + *(int *)(v1 + 28));
  swift_bridgeObjectRetain();
  sub_145D8((uint64_t)v3, type metadata accessor for MetricsActivity.State);
  return v4;
}

uint64_t MetricsActivity.currentPageFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t v6;

  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit15MetricsActivity_state);
  v4 = v3 + *(_QWORD *)(class metadata base offset for ManagedBuffer + *(_QWORD *)v3 + 16);
  v5 = (os_unfair_lock_s *)(v3 + ((*(unsigned int *)(*(_QWORD *)v3 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v5);
  v6 = *(int *)(type metadata accessor for MetricsActivity.State(0) + 28);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v4 + v6) = a1;
  os_unfair_lock_unlock(v5);
  return swift_bridgeObjectRelease();
}

BOOL MetricsActivity.hasActiveCrossfireReferral.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _BOOL8 v8;
  uint64_t v10;

  v1 = type metadata accessor for MetricsActivity.State(0);
  __chkstk_darwin(v1);
  v3 = (uint64_t *)((char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7738);
  __chkstk_darwin(v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  OSAllocatedUnfairLock.current.getter(v3, *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit15MetricsActivity_state), v1);
  sub_267BC((uint64_t)v3 + *(int *)(v1 + 24), (uint64_t)v6, &qword_3B7738);
  sub_145D8((uint64_t)v3, type metadata accessor for MetricsActivity.State);
  v7 = type metadata accessor for MetricsActivity.PageReferrer(0);
  v8 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7) != 1;
  sub_1459C((uint64_t)v6, &qword_3B7738);
  return v8;
}

uint64_t MetricsActivity.firstPageEventWithReferrer.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v1 = type metadata accessor for MetricsActivity.State(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  OSAllocatedUnfairLock.current.getter(v3, *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit15MetricsActivity_state), v4);
  v5 = v3[8];
  sub_145D8((uint64_t)v3, type metadata accessor for MetricsActivity.State);
  return v5;
}

void MetricsActivity.firstPageEventWithReferrer.setter(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  os_unfair_lock_s *v5;

  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit15MetricsActivity_state);
  v4 = v3 + *(_QWORD *)(class metadata base offset for ManagedBuffer + *(_QWORD *)v3 + 16);
  v5 = (os_unfair_lock_s *)(v3 + ((*(unsigned int *)(*(_QWORD *)v3 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v5);
  *(_BYTE *)(v4 + 8) = a1;
  os_unfair_lock_unlock(v5);
}

Swift::Void __swiftcall MetricsActivity.reset()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  os_unfair_lock_s *v3;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit15MetricsActivity_state);
  v2 = v1 + *(_QWORD *)(class metadata base offset for ManagedBuffer + *(_QWORD *)v1 + 16);
  v3 = (os_unfair_lock_s *)(v1 + ((*(unsigned int *)(*(_QWORD *)v1 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v3);
  sub_13E30C(v2);
  os_unfair_lock_unlock(v3);
}

uint64_t MetricsActivity.PageReferrer.externalURL.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for MetricsActivity.PageReferrer(0);
  return sub_267BC(v1 + *(int *)(v3 + 20), a1, &qword_3B4370);
}

uint64_t MetricsActivity.PageReferrer.openURL.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for MetricsActivity.PageReferrer(0);
  return sub_267BC(v1 + *(int *)(v3 + 24), a1, &qword_3B4370);
}

uint64_t MetricsActivity.PageReferrer.init(app:externalURL:openURL:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v8;

  *a5 = a1;
  a5[1] = a2;
  v8 = type metadata accessor for MetricsActivity.PageReferrer(0);
  sub_15BD4(a3, (uint64_t)a5 + *(int *)(v8 + 20), &qword_3B4370);
  return sub_15BD4(a4, (uint64_t)a5 + *(int *)(v8 + 24), &qword_3B4370);
}

char *MetricsActivity.__allocating_init(pageContextTracker:)(uint64_t a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return MetricsActivity.init(pageContextTracker:)(a1);
}

char *MetricsActivity.init(pageContextTracker:)(uint64_t a1)
{
  char *v1;
  char *v2;
  objc_class *ObjectType;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  id v19;
  void *v20;
  char *v21;
  id v22;
  uint64_t v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  os_unfair_lock_s *v28;
  void *v29;
  id v30;
  _QWORD aBlock[5];
  uint64_t v33;
  objc_super v34;

  v2 = v1;
  ObjectType = (objc_class *)swift_getObjectType();
  v5 = (int *)type metadata accessor for MetricsActivity.State(0);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v2[OBJC_IVAR____TtC8ShelfKit15MetricsActivity_pageContextTracker] = a1;
  *(_QWORD *)v8 = 0;
  v8[8] = 0;
  v9 = &v8[*(int *)(v6 + 24)];
  v10 = type metadata accessor for MetricsActivity.PageReferrer(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  *(_QWORD *)&v8[v5[7]] = 0;
  v11 = &v8[v5[8]];
  *(_QWORD *)v11 = 0;
  v11[8] = 1;
  v12 = &v8[v5[9]];
  *(_QWORD *)v12 = 0;
  v12[8] = 1;
  v13 = &v8[v5[10]];
  *(_QWORD *)v13 = 0;
  v13[8] = 1;
  v14 = &v8[v5[11]];
  v15 = type metadata accessor for MetricsWidgetContext(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BBC88);
  v17 = swift_allocObject(v16, ((*(unsigned int *)(v16 + 48) + 3) & 0x1FFFFFFFCLL) + 4, *(unsigned __int16 *)(v16 + 52) | 3);
  *(_DWORD *)(v17 + ((*(unsigned int *)(*(_QWORD *)v17 + 48) + 3) & 0x1FFFFFFFCLL)) = 0;
  sub_14510((uint64_t)v8, v17 + *(_QWORD *)(class metadata base offset for ManagedBuffer + *(_QWORD *)v17 + 16), type metadata accessor for MetricsActivity.State);
  v18 = v2;
  swift_retain(a1);
  sub_145D8((uint64_t)v8, type metadata accessor for MetricsActivity.State);
  *(_QWORD *)&v18[OBJC_IVAR____TtC8ShelfKit15MetricsActivity_state] = v17;

  v34.receiver = v18;
  v34.super_class = ObjectType;
  v19 = objc_msgSendSuper2(&v34, "init");
  v20 = (void *)objc_opt_self(ASKRebootstrapCoordinator);
  v21 = (char *)v19;
  v22 = objc_msgSend(v20, "sharedCoordinator");
  v23 = swift_allocObject(&unk_382428, 24, 7);
  swift_unknownObjectWeakInit(v23 + 16, v21);
  aBlock[4] = sub_13F260;
  v33 = v23;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_2C9F4;
  aBlock[3] = &block_descriptor_12;
  v24 = _Block_copy(aBlock);
  swift_release(v33);
  v25 = objc_msgSend(v22, "registerCleanupHandler:", v24);
  _Block_release(v24);

  v26 = *(_QWORD *)&v21[OBJC_IVAR____TtC8ShelfKit15MetricsActivity_state];
  v27 = *(_QWORD *)(class metadata base offset for ManagedBuffer + *(_QWORD *)v26 + 16);
  v28 = (os_unfair_lock_s *)(v26 + ((*(unsigned int *)(*(_QWORD *)v26 + 48) + 3) & 0x1FFFFFFFCLL));
  swift_retain(v26);
  os_unfair_lock_lock(v28);
  v29 = *(void **)(v26 + v27);
  v30 = v25;

  *(_QWORD *)(v26 + v27) = v25;
  os_unfair_lock_unlock(v28);
  swift_release(v26);

  swift_release(a1);
  return v21;
}

void sub_13C8BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  os_unfair_lock_s *v6;
  _BYTE v7[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v7, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = (void *)Strong;
    v4 = *(_QWORD *)(Strong + OBJC_IVAR____TtC8ShelfKit15MetricsActivity_state);
    v5 = v4 + *(_QWORD *)(class metadata base offset for ManagedBuffer + *(_QWORD *)v4 + 16);
    v6 = (os_unfair_lock_s *)(v4 + ((*(unsigned int *)(*(_QWORD *)v4 + 48) + 3) & 0x1FFFFFFFCLL));
    os_unfair_lock_lock(v6);
    sub_13E30C(v5);
    os_unfair_lock_unlock(v6);

  }
}

id MetricsActivity.__deallocating_deinit()
{
  char *v0;
  objc_class *ObjectType;
  uint64_t v2;
  uint64_t v3;
  id *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  id v9;
  objc_super v11;

  ObjectType = (objc_class *)swift_getObjectType();
  v2 = type metadata accessor for MetricsActivity.State(0);
  __chkstk_darwin(v2);
  v4 = (id *)((char *)&v11.receiver - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = *(_QWORD *)&v0[OBJC_IVAR____TtC8ShelfKit15MetricsActivity_state];
  v6 = swift_retain();
  OSAllocatedUnfairLock.current.getter(v4, v6, v2);
  swift_release(v5);
  v7 = *v4;
  v8 = *v4;
  sub_145D8((uint64_t)v4, type metadata accessor for MetricsActivity.State);
  if (v7)
  {
    v9 = objc_msgSend((id)objc_opt_self(ASKRebootstrapCoordinator), "sharedCoordinator");
    objc_msgSend(v9, "removeCleanupHandler:", v8);

  }
  v11.receiver = v0;
  v11.super_class = ObjectType;
  return objc_msgSendSuper2(&v11, "dealloc");
}

char *sub_13CAD4()
{
  uint64_t v0;
  id v1;
  char *result;

  type metadata accessor for PageContextTracker(0);
  v0 = static PageContextTracker.shared.getter();
  v1 = objc_allocWithZone((Class)type metadata accessor for MetricsActivity());
  result = MetricsActivity.init(pageContextTracker:)(v0);
  qword_3BBC50 = (uint64_t)result;
  return result;
}

id static MetricsActivity.shared.getter()
{
  if (qword_3B0108 != -1)
    swift_once(&qword_3B0108, sub_13CAD4);
  return (id)qword_3BBC50;
}

uint64_t sub_13CB9C(uint64_t a1)
{
  return sub_13E30C(a1);
}

uint64_t sub_13CBB0@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  v4 = type metadata accessor for MetricsActivity.State(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  OSAllocatedUnfairLock.current.getter(v6, *(_QWORD *)(*a1 + OBJC_IVAR____TtC8ShelfKit15MetricsActivity_state), v7);
  LOBYTE(a1) = v6[8];
  result = sub_145D8((uint64_t)v6, type metadata accessor for MetricsActivity.State);
  *a2 = (_BYTE)a1;
  return result;
}

void sub_13CC48(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  os_unfair_lock_s *v4;

  v2 = *(_QWORD *)(*a2 + OBJC_IVAR____TtC8ShelfKit15MetricsActivity_state);
  v3 = v2 + *(_QWORD *)(class metadata base offset for ManagedBuffer + *(_QWORD *)v2 + 16);
  v4 = (os_unfair_lock_s *)(v2 + ((*(unsigned int *)(*(_QWORD *)v2 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v4);
  sub_141418(v3);
  os_unfair_lock_unlock(v4);
}

uint64_t sub_13CCCC(uint64_t result, char a2)
{
  *(_BYTE *)(result + 8) = a2;
  return result;
}

void (*MetricsActivity.firstPageEventWithReferrer.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  char v6;

  v3 = type metadata accessor for MetricsActivity.State(0);
  v4 = malloc(*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
  v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit15MetricsActivity_state);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  OSAllocatedUnfairLock.current.getter(v4, v5, v3);
  v6 = v4[8];
  sub_145D8((uint64_t)v4, type metadata accessor for MetricsActivity.State);
  *(_BYTE *)(a1 + 16) = v6;
  return sub_13CD60;
}

void sub_13CD60(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  char v3;
  uint64_t v4;
  os_unfair_lock_s *v5;

  v2 = *(void **)a1;
  v1 = *(_QWORD *)(a1 + 8);
  v3 = *(_BYTE *)(a1 + 16);
  v4 = v1 + *(_QWORD *)(class metadata base offset for ManagedBuffer + *(_QWORD *)v1 + 16);
  v5 = (os_unfair_lock_s *)(v1 + ((*(unsigned int *)(*(_QWORD *)v1 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v5);
  *(_BYTE *)(v4 + 8) = v3;
  os_unfair_lock_unlock(v5);
  free(v2);
}

uint64_t MetricsActivity.pageReferrer.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;

  v3 = type metadata accessor for MetricsActivity.State(0);
  __chkstk_darwin(v3);
  v5 = (uint64_t *)((char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  OSAllocatedUnfairLock.current.getter(v5, *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit15MetricsActivity_state), v3);
  sub_267BC((uint64_t)v5 + *(int *)(v3 + 24), a1, &qword_3B7738);
  return sub_145D8((uint64_t)v5, type metadata accessor for MetricsActivity.State);
}

void MetricsActivity.beginActiveCrossfireReferral(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  os_unfair_lock_s *v5;

  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit15MetricsActivity_state);
  v4 = v3 + *(_QWORD *)(class metadata base offset for ManagedBuffer + *(_QWORD *)v3 + 16);
  v5 = (os_unfair_lock_s *)(v3 + ((*(unsigned int *)(*(_QWORD *)v3 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v5);
  sub_13CEF8(v4, a1);
  os_unfair_lock_unlock(v5);
}

uint64_t sub_13CEF8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a1 + *(int *)(type metadata accessor for MetricsActivity.State(0) + 24);
  sub_1459C(v3, &qword_3B7738);
  sub_14510(a2, v3, type metadata accessor for MetricsActivity.PageReferrer);
  v4 = type metadata accessor for MetricsActivity.PageReferrer(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 0, 1, v4);
}

uint64_t sub_13CF80@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  v4 = type metadata accessor for MetricsActivity.State(0);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  OSAllocatedUnfairLock.current.getter(v6, *(_QWORD *)(*a1 + OBJC_IVAR____TtC8ShelfKit15MetricsActivity_state), v4);
  v7 = *(_QWORD *)((char *)v6 + *(int *)(v4 + 28));
  swift_bridgeObjectRetain();
  result = sub_145D8((uint64_t)v6, type metadata accessor for MetricsActivity.State);
  *a2 = v7;
  return result;
}

uint64_t sub_13D030(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  os_unfair_lock_s *v4;

  v2 = *(_QWORD *)(*a2 + OBJC_IVAR____TtC8ShelfKit15MetricsActivity_state);
  v3 = v2 + *(_QWORD *)(class metadata base offset for ManagedBuffer + *(_QWORD *)v2 + 16);
  v4 = (os_unfair_lock_s *)(v2 + ((*(unsigned int *)(*(_QWORD *)v2 + 48) + 3) & 0x1FFFFFFFCLL));
  swift_bridgeObjectRetain();
  os_unfair_lock_lock(v4);
  sub_1413CC(v3);
  os_unfair_lock_unlock(v4);
  return swift_bridgeObjectRelease();
}

uint64_t sub_13D0C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;

  v4 = *(int *)(type metadata accessor for MetricsActivity.State(0) + 28);
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + v4) = a2;
  return result;
}

void (*MetricsActivity.currentPageFields.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = type metadata accessor for MetricsActivity.State(0);
  v4 = malloc(*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
  v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit15MetricsActivity_state);
  a1[1] = v4;
  a1[2] = v5;
  OSAllocatedUnfairLock.current.getter(v4, v5, v3);
  v6 = *(_QWORD *)((char *)v4 + *(int *)(v3 + 28));
  swift_bridgeObjectRetain();
  sub_145D8((uint64_t)v4, type metadata accessor for MetricsActivity.State);
  *a1 = v6;
  return sub_13D1B0;
}

void sub_13D1B0(uint64_t *a1, char a2)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (void *)a1[1];
  v2 = a1[2];
  v4 = v2 + *(_QWORD *)(class metadata base offset for ManagedBuffer + *(_QWORD *)v2 + 16);
  v5 = (os_unfair_lock_s *)(v2 + ((*(unsigned int *)(*(_QWORD *)v2 + 48) + 3) & 0x1FFFFFFFCLL));
  v6 = *a1;
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    os_unfair_lock_lock(v5);
    v7 = *(int *)(type metadata accessor for MetricsActivity.State(0) + 28);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v4 + v7) = v6;
    os_unfair_lock_unlock(v5);
    swift_bridgeObjectRelease();
  }
  else
  {
    os_unfair_lock_lock((os_unfair_lock_t)(v2 + ((*(unsigned int *)(*(_QWORD *)v2 + 48) + 3) & 0x1FFFFFFFCLL)));
    v8 = *(int *)(type metadata accessor for MetricsActivity.State(0) + 28);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v4 + v8) = v6;
    os_unfair_lock_unlock(v5);
  }
  swift_bridgeObjectRelease();
  free(v3);
}

uint64_t MetricsActivity.pageContext.getter()
{
  uint64_t result;
  uint64_t v1;

  result = PageContextTracker.value.getter();
  if (!v1)
    return 0;
  return result;
}

uint64_t MetricsActivity.playReason.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;

  v1 = type metadata accessor for MetricsActivity.State(0);
  __chkstk_darwin(v1);
  v3 = (uint64_t *)((char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  OSAllocatedUnfairLock.current.getter(v3, *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit15MetricsActivity_state), v1);
  v4 = *(_QWORD *)((char *)v3 + *(int *)(v1 + 36));
  sub_145D8((uint64_t)v3, type metadata accessor for MetricsActivity.State);
  return v4;
}

void MetricsActivity.setPlayReason(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t v6;

  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit15MetricsActivity_state);
  v4 = *(_QWORD *)(class metadata base offset for ManagedBuffer + *(_QWORD *)v3 + 16);
  v5 = (os_unfair_lock_s *)(v3 + ((*(unsigned int *)(*(_QWORD *)v3 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v5);
  v6 = v3 + *(int *)(type metadata accessor for MetricsActivity.State(0) + 36) + v4;
  *(_QWORD *)v6 = a1;
  *(_BYTE *)(v6 + 8) = 0;
  os_unfair_lock_unlock(v5);
}

uint64_t MetricsActivity.playbackInitiator.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;

  v1 = type metadata accessor for MetricsActivity.State(0);
  __chkstk_darwin(v1);
  v3 = (uint64_t *)((char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  OSAllocatedUnfairLock.current.getter(v3, *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit15MetricsActivity_state), v1);
  v4 = *(_QWORD *)((char *)v3 + *(int *)(v1 + 32));
  sub_145D8((uint64_t)v3, type metadata accessor for MetricsActivity.State);
  return v4;
}

void MetricsActivity.setInitiator(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t v6;

  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit15MetricsActivity_state);
  v4 = *(_QWORD *)(class metadata base offset for ManagedBuffer + *(_QWORD *)v3 + 16);
  v5 = (os_unfair_lock_s *)(v3 + ((*(unsigned int *)(*(_QWORD *)v3 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v5);
  v6 = v3 + *(int *)(type metadata accessor for MetricsActivity.State(0) + 32) + v4;
  *(_QWORD *)v6 = a1;
  *(_BYTE *)(v6 + 8) = 0;
  os_unfair_lock_unlock(v5);
}

uint64_t MetricsActivity.playContext.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  char *v4;
  uint64_t v5;
  char v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v1 = type metadata accessor for MetricsActivity.State(0);
  __chkstk_darwin(v1);
  v3 = (uint64_t *)((char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  OSAllocatedUnfairLock.current.getter(v3, *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit15MetricsActivity_state), v1);
  v4 = (char *)v3 + *(int *)(v1 + 36);
  v5 = *(_QWORD *)v4;
  v6 = v4[8];
  result = sub_145D8((uint64_t)v3, type metadata accessor for MetricsActivity.State);
  if ((v6 & 1) != 0)
  {
LABEL_2:
    result = PageContextTracker.value.getter(result);
    if (!v8)
      return 0;
  }
  else
  {
    result = 1769105747;
    switch(v5)
    {
      case 7:
        result = 0x6979616C50776F6ELL;
        break;
      case 8:
        result = 0xD000000000000010;
        break;
      case 9:
        return result;
      case 15:
        result = 0x746567646977;
        break;
      default:
        goto LABEL_2;
    }
  }
  return result;
}

uint64_t MetricsActivity.stopReason.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;

  v1 = type metadata accessor for MetricsActivity.State(0);
  __chkstk_darwin(v1);
  v3 = (uint64_t *)((char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  OSAllocatedUnfairLock.current.getter(v3, *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit15MetricsActivity_state), v1);
  v4 = *(_QWORD *)((char *)v3 + *(int *)(v1 + 40));
  sub_145D8((uint64_t)v3, type metadata accessor for MetricsActivity.State);
  return v4;
}

void MetricsActivity.setStopReason(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t v6;

  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit15MetricsActivity_state);
  v4 = *(_QWORD *)(class metadata base offset for ManagedBuffer + *(_QWORD *)v3 + 16);
  v5 = (os_unfair_lock_s *)(v3 + ((*(unsigned int *)(*(_QWORD *)v3 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v5);
  v6 = v3 + *(int *)(type metadata accessor for MetricsActivity.State(0) + 40) + v4;
  *(_QWORD *)v6 = a1;
  *(_BYTE *)(v6 + 8) = 0;
  os_unfair_lock_unlock(v5);
}

void sub_13D870(char *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  char *v8;

  v5 = *(_QWORD *)&a1[OBJC_IVAR____TtC8ShelfKit15MetricsActivity_state];
  v6 = v5 + *(_QWORD *)(class metadata base offset for ManagedBuffer + *(_QWORD *)v5 + 16);
  v7 = (os_unfair_lock_s *)(v5 + ((*(unsigned int *)(*(_QWORD *)v5 + 48) + 3) & 0x1FFFFFFFCLL));
  v8 = a1;
  os_unfair_lock_lock(v7);
  a4(v6);
  os_unfair_lock_unlock(v7);

}

uint64_t MetricsActivity.stopContext.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  char *v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  id v8;
  uint64_t v10;

  v1 = type metadata accessor for MetricsActivity.State(0);
  __chkstk_darwin(v1);
  v3 = (uint64_t *)((char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  OSAllocatedUnfairLock.current.getter(v3, *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit15MetricsActivity_state), v1);
  v4 = (char *)v3 + *(int *)(v1 + 40);
  v5 = *(_QWORD *)v4;
  v6 = v4[8];
  sub_145D8((uint64_t)v3, type metadata accessor for MetricsActivity.State);
  v7 = 0;
  if ((v6 & 1) == 0)
  {
    v8 = (id)NSPersistentStringFromMTStopReason(v5);
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);

  }
  return v7;
}

uint64_t MetricsActivity.stopType.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  char *v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  id v8;
  uint64_t v10;

  v1 = type metadata accessor for MetricsActivity.State(0);
  __chkstk_darwin(v1);
  v3 = (uint64_t *)((char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  OSAllocatedUnfairLock.current.getter(v3, *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit15MetricsActivity_state), v1);
  v4 = (char *)v3 + *(int *)(v1 + 32);
  v5 = *(_QWORD *)v4;
  v6 = v4[8];
  sub_145D8((uint64_t)v3, type metadata accessor for MetricsActivity.State);
  v7 = 0;
  if ((v6 & 1) == 0)
  {
    v8 = (id)NSPersistentStringFromMTPlaybackAdjustmentInitiator(v5);
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);

  }
  return v7;
}

Swift::Void __swiftcall MetricsActivity.clearStopInfo()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit15MetricsActivity_state);
  v2 = v1 + *(_QWORD *)(class metadata base offset for ManagedBuffer + *(_QWORD *)v1 + 16);
  v3 = (os_unfair_lock_s *)(v1 + ((*(unsigned int *)(*(_QWORD *)v1 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v3);
  v4 = type metadata accessor for MetricsActivity.State(0);
  v5 = v2 + *(int *)(v4 + 32);
  *(_QWORD *)v5 = 0;
  *(_BYTE *)(v5 + 8) = 1;
  v6 = v2 + *(int *)(v4 + 40);
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  os_unfair_lock_unlock(v3);
}

uint64_t sub_13DD40(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = type metadata accessor for MetricsActivity.State(0);
  v3 = a1 + *(int *)(result + 32);
  *(_QWORD *)v3 = 0;
  *(_BYTE *)(v3 + 8) = 1;
  v4 = a1 + *(int *)(result + 40);
  *(_QWORD *)v4 = 0;
  *(_BYTE *)(v4 + 8) = 1;
  return result;
}

uint64_t MetricsActivity.widgetContext.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;

  v3 = type metadata accessor for MetricsActivity.State(0);
  __chkstk_darwin(v3);
  v5 = (uint64_t *)((char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  OSAllocatedUnfairLock.current.getter(v5, *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit15MetricsActivity_state), v3);
  sub_267BC((uint64_t)v5 + *(int *)(v3 + 44), a1, &qword_3BBC68);
  return sub_145D8((uint64_t)v5, type metadata accessor for MetricsActivity.State);
}

uint64_t type metadata accessor for MetricsActivity.State(uint64_t a1)
{
  return sub_1F9D4(a1, (uint64_t *)&unk_3BBDA8, (uint64_t)&nominal type descriptor for MetricsActivity.State);
}

uint64_t type metadata accessor for MetricsActivity.PageReferrer(uint64_t a1)
{
  return sub_1F9D4(a1, qword_3BBD10, (uint64_t)&nominal type descriptor for MetricsActivity.PageReferrer);
}

uint64_t MetricsActivity.setupWidgetData(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(char *, unint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  os_unfair_lock_s *v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BBC68);
  __chkstk_darwin(v2);
  v44 = (char *)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for URLQueryItem(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0CC0);
  __chkstk_darwin(v8);
  v42 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0CB8);
  __chkstk_darwin(v10);
  v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v15 = (char *)&v41 - v14;
  URLComponents.init(url:resolvingAgainstBaseURL:)(a1, 0);
  sub_267BC((uint64_t)v15, (uint64_t)v12, &qword_3B0CB8);
  v16 = type metadata accessor for URLComponents(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v12, 1, v16);
  if ((_DWORD)v18 == 1)
  {
    v19 = &qword_3B0CB8;
    v20 = (uint64_t)v12;
LABEL_17:
    sub_1459C(v20, v19);
    v32 = 0;
    v21 = 0;
    goto LABEL_18;
  }
  v21 = URLComponents.queryItems.getter(v18);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v12, v16);
  if (v21)
  {
    v22 = *(_QWORD *)(v21 + 16);
    if (v22)
    {
      v23 = v21 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
      v24 = *(_QWORD *)(v5 + 72);
      v25 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v5 + 16);
      v41 = v21;
      swift_bridgeObjectRetain();
      while (1)
      {
        v26 = v25(v7, v23, v4);
        v27 = URLQueryItem.name.getter(v26);
        if (v27 == 0x6F43746567646977 && v28 == 0xED0000747865746ELL)
          break;
        v29 = _stringCompareWithSmolCheck(_:_:expecting:)(v27, v28, 0x6F43746567646977, 0xED0000747865746ELL, 0);
        swift_bridgeObjectRelease();
        if ((v29 & 1) != 0)
          goto LABEL_14;
        (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
        v23 += v24;
        if (!--v22)
        {
          swift_bridgeObjectRelease();
          goto LABEL_11;
        }
      }
      swift_bridgeObjectRelease();
LABEL_14:
      swift_bridgeObjectRelease();
      v31 = v42;
      (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v42, v7, v4);
      v30 = 0;
    }
    else
    {
LABEL_11:
      v30 = 1;
      v31 = v42;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v31, v30, 1, v4);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v31, 1, v4) != 1)
    {
      v32 = URLQueryItem.value.getter();
      v21 = v40;
      (*(void (**)(char *, uint64_t))(v5 + 8))(v31, v4);
      goto LABEL_18;
    }
    v19 = &qword_3B0CC0;
    v20 = (uint64_t)v31;
    goto LABEL_17;
  }
  v32 = 0;
LABEL_18:
  v33 = v43;
  v34 = (uint64_t)v44;
  static MetricsWidgetContext.decodeFromString(_:)(v32, v21);
  swift_bridgeObjectRelease();
  v35 = *(_QWORD *)(v33 + OBJC_IVAR____TtC8ShelfKit15MetricsActivity_state);
  v36 = *(_QWORD *)(class metadata base offset for ManagedBuffer + *(_QWORD *)v35 + 16);
  v37 = (os_unfair_lock_s *)(v35 + ((*(unsigned int *)(*(_QWORD *)v35 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v37);
  v38 = type metadata accessor for MetricsActivity.State(0);
  sub_141424(v34, v35 + *(int *)(v38 + 44) + v36);
  os_unfair_lock_unlock(v37);
  sub_1459C((uint64_t)v15, &qword_3B0CB8);
  return sub_1459C(v34, &qword_3BBC68);
}

uint64_t sub_13E30C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = a1 + *(int *)(type metadata accessor for MetricsActivity.State(0) + 24);
  sub_1459C(v1, &qword_3B7738);
  v2 = type metadata accessor for MetricsActivity.PageReferrer(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
}

uint64_t sub_13E374@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  _OWORD v16[2];

  if (*(_QWORD *)(a3 + 16))
  {
    swift_bridgeObjectRetain(a2);
    v8 = sub_211DC0(a1, a2);
    if ((v9 & 1) != 0)
    {
      sub_1FB98(*(_QWORD *)(a3 + 56) + 32 * v8, (uint64_t)&v14);
      swift_bridgeObjectRelease();
      if (*((_QWORD *)&v15 + 1))
      {
        sub_1F460(&v14, v16);
        v10 = type metadata accessor for MetricsEventType(0);
        sub_1FB98((uint64_t)v16, (uint64_t)&v14);
        v11 = sub_F1C0(&qword_3BBE08, (void (*)(uint64_t))&type metadata accessor for MetricsEventType, (uint64_t)&protocol conformance descriptor for MetricsEventType);
        dispatch thunk of MetricsFieldRepresentable.init(metricsFieldValue:)(&v14, v10, v11);
        return __swift_destroy_boxed_opaque_existential_1(v16);
      }
    }
    else
    {
      v14 = 0u;
      v15 = 0u;
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    v14 = 0u;
    v15 = 0u;
  }
  sub_1459C((uint64_t)&v14, (uint64_t *)&unk_3BC540);
  v13 = type metadata accessor for MetricsEventType(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(a4, 1, 1, v13);
}

uint64_t sub_13E4A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  char v7;
  uint64_t v9;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  _OWORD v14[2];

  if (!*(_QWORD *)(a3 + 16))
  {
    v12 = 0u;
    v13 = 0u;
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  v6 = sub_211DC0(a1, a2);
  if ((v7 & 1) == 0)
  {
    v12 = 0u;
    v13 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  sub_1FB98(*(_QWORD *)(a3 + 56) + 32 * v6, (uint64_t)&v12);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v13 + 1))
  {
LABEL_10:
    sub_1459C((uint64_t)&v12, (uint64_t *)&unk_3BC540);
    return 0;
  }
  sub_1F460(&v12, v14);
  sub_1FB98((uint64_t)v14, (uint64_t)&v12);
  if (swift_dynamicCast(&v11, &v12, (char *)&type metadata for Any + 8, &type metadata for String, 6))
    v9 = v11;
  else
    v9 = 0;
  __swift_destroy_boxed_opaque_existential_1(v14);
  return v9;
}

uint64_t sub_13E5A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  _OWORD v15[2];

  if (*(_QWORD *)(a3 + 16))
  {
    swift_bridgeObjectRetain(a2);
    v8 = sub_211DC0(a1, a2);
    if ((v9 & 1) != 0)
    {
      sub_1FB98(*(_QWORD *)(a3 + 56) + 32 * v8, (uint64_t)&v13);
      swift_bridgeObjectRelease();
      if (*((_QWORD *)&v14 + 1))
      {
        sub_1F460(&v13, v15);
        v10 = type metadata accessor for URL(0);
        sub_1FB98((uint64_t)v15, (uint64_t)&v13);
        dispatch thunk of MetricsFieldRepresentable.init(metricsFieldValue:)(&v13, v10, &protocol witness table for URL);
        return __swift_destroy_boxed_opaque_existential_1(v15);
      }
    }
    else
    {
      v13 = 0u;
      v14 = 0u;
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    v13 = 0u;
    v14 = 0u;
  }
  sub_1459C((uint64_t)&v13, (uint64_t *)&unk_3BC540);
  v12 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(a4, 1, 1, v12);
}

uint64_t sub_13E6B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = a1 + *(int *)(type metadata accessor for MetricsActivity.State(0) + 44);
  sub_1459C(v1, &qword_3BBC68);
  v2 = type metadata accessor for MetricsWidgetContext(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
}

void MetricsActivity.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("ShelfKit.MetricsActivity", 24, "init()", 6, 0);
  __break(1u);
}

double sub_13E778@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  unint64_t v9;
  char v10;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;
  double result;
  uint64_t v15;

  v4 = v3;
  v8 = *v4;
  swift_bridgeObjectRetain(*v4);
  v9 = sub_211DC0(a1, a2);
  LOBYTE(a2) = v10;
  swift_bridgeObjectRelease(v8);
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    v12 = *v4;
    v15 = *v4;
    *v4 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_13E8AC();
      v12 = v15;
    }
    swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v12 + 48) + 16 * v9 + 8));
    sub_1F460((_OWORD *)(*(_QWORD *)(v12 + 56) + 32 * v9), a3);
    sub_13EAA0(v9, v12);
    v13 = *v4;
    *v4 = v12;
    swift_bridgeObjectRelease(v13);
  }
  else
  {
    result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

uint64_t sub_13E868(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MetricsActivity.PageReferrer(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void *sub_13E8AC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  _OWORD v26[2];

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_3B1810);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = (void *)swift_release(v2);
LABEL_29:
    *v1 = v4;
    return result;
  }
  v25 = v1;
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v22 >= v13)
      goto LABEL_27;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_27;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
      {
        v9 = v22 + 2;
        if (v22 + 2 >= v13)
          goto LABEL_27;
        v23 = *(_QWORD *)(v6 + 8 * v9);
        if (!v23)
        {
          v9 = v22 + 3;
          if (v22 + 3 >= v13)
          {
LABEL_27:
            result = (void *)swift_release(v2);
            v1 = v25;
            goto LABEL_29;
          }
          v23 = *(_QWORD *)(v6 + 8 * v9);
          v24 = v22 + 3;
          if (!v23)
            break;
        }
      }
    }
LABEL_26:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 32 * v15;
    sub_1FB98(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    sub_1F460(v26, (_OWORD *)(*(_QWORD *)(v4 + 56) + v20));
    result = (void *)swift_bridgeObjectRetain(v18);
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_27;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_26;
  }
LABEL_31:
  __break(1u);
  return result;
}

unint64_t sub_13EAA0(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  unint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  _OWORD *v19;
  _OWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  _QWORD v27[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v10 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v11 = *v10;
        v12 = v10[1];
        Hasher.init(_seed:)(v27);
        swift_bridgeObjectRetain(v12);
        String.hash(into:)(v27, v11, v12);
        v13 = Hasher._finalize()();
        result = swift_bridgeObjectRelease(v12);
        v14 = v13 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v14 < v8)
            goto LABEL_5;
        }
        else if (v14 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v14)
        {
LABEL_11:
          v15 = *(_QWORD *)(a2 + 48);
          v16 = (_OWORD *)(v15 + 16 * v3);
          v17 = (_OWORD *)(v15 + 16 * v6);
          if (v3 != v6 || v16 >= v17 + 1)
            *v16 = *v17;
          v18 = *(_QWORD *)(a2 + 56);
          v19 = (_OWORD *)(v18 + 32 * v3);
          v20 = (_OWORD *)(v18 + 32 * v6);
          if (v3 != v6 || (v3 = v6, v19 >= v20 + 2))
          {
            v9 = v20[1];
            *v19 = *v20;
            v19[1] = v9;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v22 = *v21;
    v23 = (-1 << v3) - 1;
  }
  else
  {
    v21 = (uint64_t *)(v4 + 8 * (result >> 6));
    v23 = *v21;
    v22 = (-1 << result) - 1;
  }
  *v21 = v23 & v22;
  v24 = *(_QWORD *)(a2 + 16);
  v25 = __OFSUB__(v24, 1);
  v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

BOOL _s8ShelfKit15MetricsActivityC12PageReferrerV2eeoiySbAE_AEtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  _BOOL8 result;
  uint64_t v32;
  uint64_t v33;
  unsigned int (*v34)(uint64_t, uint64_t, uint64_t);
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  void (*v38)(_BYTE *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  char v49;
  void (*v50)(_BYTE *, uint64_t);
  _BYTE v51[12];
  int v52;
  _BYTE *v53;
  uint64_t v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  _BYTE *v59;
  uint64_t v60;

  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v51[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v60 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B6F88);
  __chkstk_darwin(v60);
  v9 = &v51[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v10);
  v12 = &v51[-v11];
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
  __chkstk_darwin(v13);
  __chkstk_darwin(v14);
  v58 = &v51[-v15];
  __chkstk_darwin(v16);
  v59 = &v51[-v17];
  __chkstk_darwin(v18);
  v20 = &v51[-v19];
  __chkstk_darwin(v21);
  v23 = &v51[-v22];
  __chkstk_darwin(v24);
  v27 = &v51[-v26];
  v28 = a1[1];
  v29 = a2[1];
  if (!v28)
  {
    v57 = v25;
    if (v29)
      return 0;
    goto LABEL_8;
  }
  if (!v29)
    return 0;
  v57 = v25;
  if (*a1 == *a2 && v28 == v29
    || (v30 = _stringCompareWithSmolCheck(_:_:expecting:)(*a1, v28, *a2, v29, 0), result = 0, (v30 & 1) != 0))
  {
LABEL_8:
    v53 = v7;
    v55 = v9;
    v32 = type metadata accessor for MetricsActivity.PageReferrer(0);
    sub_267BC((uint64_t)a1 + *(int *)(v32 + 20), (uint64_t)v27, &qword_3B4370);
    v54 = v32;
    sub_267BC((uint64_t)a2 + *(int *)(v32 + 20), (uint64_t)v23, &qword_3B4370);
    v33 = (uint64_t)&v12[*(int *)(v60 + 48)];
    sub_267BC((uint64_t)v27, (uint64_t)v12, &qword_3B4370);
    sub_267BC((uint64_t)v23, v33, &qword_3B4370);
    v56 = v5;
    v34 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
    if (v34((uint64_t)v12, 1, v4) == 1)
    {
      sub_1459C((uint64_t)v23, &qword_3B4370);
      sub_1459C((uint64_t)v27, &qword_3B4370);
      if (v34(v33, 1, v4) == 1)
      {
        sub_1459C((uint64_t)v12, &qword_3B4370);
LABEL_15:
        v39 = v54;
        v40 = (uint64_t)a1 + *(int *)(v54 + 24);
        v41 = v59;
        sub_267BC(v40, (uint64_t)v59, &qword_3B4370);
        v42 = v58;
        sub_267BC((uint64_t)a2 + *(int *)(v39 + 24), (uint64_t)v58, &qword_3B4370);
        v43 = (uint64_t)v55;
        v44 = (uint64_t)&v55[*(int *)(v60 + 48)];
        sub_267BC((uint64_t)v41, (uint64_t)v55, &qword_3B4370);
        sub_267BC((uint64_t)v42, v44, &qword_3B4370);
        if (v34(v43, 1, v4) == 1)
        {
          sub_1459C((uint64_t)v42, &qword_3B4370);
          sub_1459C((uint64_t)v41, &qword_3B4370);
          if (v34(v44, 1, v4) == 1)
          {
            sub_1459C(v43, &qword_3B4370);
            return 1;
          }
          goto LABEL_20;
        }
        v45 = v57;
        sub_267BC(v43, v57, &qword_3B4370);
        if (v34(v44, 1, v4) == 1)
        {
          sub_1459C((uint64_t)v42, &qword_3B4370);
          sub_1459C((uint64_t)v41, &qword_3B4370);
          (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v45, v4);
LABEL_20:
          v35 = v43;
          goto LABEL_21;
        }
        v46 = v56;
        v47 = v53;
        (*(void (**)(_BYTE *, uint64_t, uint64_t))(v56 + 32))(v53, v44, v4);
        v48 = sub_F1C0((unint64_t *)&qword_3B0B08, (void (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
        v49 = dispatch thunk of static Equatable.== infix(_:_:)(v45, v47, v4, v48);
        v50 = *(void (**)(_BYTE *, uint64_t))(v46 + 8);
        v50(v47, v4);
        sub_1459C((uint64_t)v42, &qword_3B4370);
        sub_1459C((uint64_t)v41, &qword_3B4370);
        v50((_BYTE *)v45, v4);
        sub_1459C(v43, &qword_3B4370);
        return (v49 & 1) != 0;
      }
    }
    else
    {
      sub_267BC((uint64_t)v12, (uint64_t)v20, &qword_3B4370);
      if (v34(v33, 1, v4) != 1)
      {
        v36 = v53;
        (*(void (**)(_BYTE *, uint64_t, uint64_t))(v56 + 32))(v53, v33, v4);
        v37 = sub_F1C0((unint64_t *)&qword_3B0B08, (void (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
        v52 = dispatch thunk of static Equatable.== infix(_:_:)(v20, v36, v4, v37);
        v38 = *(void (**)(_BYTE *, uint64_t))(v56 + 8);
        v38(v36, v4);
        sub_1459C((uint64_t)v23, &qword_3B4370);
        sub_1459C((uint64_t)v27, &qword_3B4370);
        v38(v20, v4);
        sub_1459C((uint64_t)v12, &qword_3B4370);
        if ((v52 & 1) == 0)
          return 0;
        goto LABEL_15;
      }
      sub_1459C((uint64_t)v23, &qword_3B4370);
      sub_1459C((uint64_t)v27, &qword_3B4370);
      (*(void (**)(_BYTE *, uint64_t))(v56 + 8))(v20, v4);
    }
    v35 = (uint64_t)v12;
LABEL_21:
    sub_1459C(v35, &qword_3B6F88);
    return 0;
  }
  return result;
}

uint64_t sub_13F23C()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_13F260()
{
  uint64_t v0;

  sub_13C8BC(v0);
}

uint64_t block_copy_helper_12(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t block_destroy_helper_12(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t type metadata accessor for MetricsActivity()
{
  return objc_opt_self(_TtC8ShelfKit15MetricsActivity);
}

uint64_t method lookup function for MetricsActivity(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for MetricsActivity);
}

uint64_t *initializeBufferWithCopyOfBuffer for MetricsActivity.PageReferrer(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for URL(0);
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    if (v13(v10, 1, v11))
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    v16 = *(int *)(a3 + 24);
    v17 = (char *)v4 + v16;
    v18 = (char *)a2 + v16;
    if (v13(v18, 1, v11))
    {
      v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v17, v18, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v17, 0, 1, v11);
    }
  }
  return v4;
}

uint64_t destroy for MetricsActivity.PageReferrer(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t result;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v7(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  v8 = a1 + *(int *)(a2 + 24);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v7)(v8, 1, v5);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v8, v5);
  return result;
}

_QWORD *initializeWithCopy for MetricsActivity.PageReferrer(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain();
  if (v12(v9, 1, v10))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v14 = *(int *)(a3 + 24);
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  if (v12(v16, 1, v10))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v15, v16, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v15, 0, 1, v10);
  }
  return a1;
}

char *assignWithCopy for MetricsActivity.PageReferrer(char *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  int v18;
  int v19;
  uint64_t v20;

  *(_QWORD *)a1 = *a2;
  *((_QWORD *)a1 + 1) = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = &a1[v6];
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  v15 = *(int *)(a3 + 24);
  v16 = &a1[v15];
  v17 = (char *)a2 + v15;
  v18 = v11(&a1[v15], 1, v9);
  v19 = v11(v17, 1, v9);
  if (!v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v16, v17, v9);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v16, v9);
    goto LABEL_12;
  }
  if (v19)
  {
LABEL_12:
    v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v16, v17, v9);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v16, 0, 1, v9);
  return a1;
}

_OWORD *initializeWithTake for MetricsActivity.PageReferrer(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(char *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  if (v11(v8, 1, v9))
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v13 = *(int *)(a3 + 24);
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  if (v11(v15, 1, v9))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v14, v15, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v14, 0, 1, v9);
  }
  return a1;
}

char *assignWithTake for MetricsActivity.PageReferrer(char *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  int v19;
  int v20;
  uint64_t v21;

  v6 = a2[1];
  *(_QWORD *)a1 = *a2;
  *((_QWORD *)a1 + 1) = v6;
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 20);
  v8 = &a1[v7];
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v8, v9, v10);
LABEL_7:
  v16 = *(int *)(a3 + 24);
  v17 = &a1[v16];
  v18 = (char *)a2 + v16;
  v19 = v12(&a1[v16], 1, v10);
  v20 = v12(v18, 1, v10);
  if (!v19)
  {
    if (!v20)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v17, v18, v10);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v17, v10);
    goto LABEL_12;
  }
  if (v20)
  {
LABEL_12:
    v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v17, v18, v10);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v17, 0, 1, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for MetricsActivity.PageReferrer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_13FB34);
}

uint64_t sub_13FB34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  int v5;
  uint64_t v9;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v9);
  }
}

uint64_t storeEnumTagSinglePayload for MetricsActivity.PageReferrer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_13FBCC);
}

uint64_t sub_13FBCC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)(result + 8) = a2;
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

void sub_13FC44(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = &unk_2F7528;
  sub_3EE70(319, (unint64_t *)&qword_3B1C30, (uint64_t (*)(uint64_t))&type metadata accessor for URL);
  if (v3 <= 0x3F)
  {
    v5 = *(_QWORD *)(v2 - 8) + 64;
    v6 = v5;
    swift_initStructMetadata(a1, 256, 3, &v4, a1 + 16);
  }
}

char *sub_13FCC8(char *a1, char **a2, int *a3)
{
  int v3;
  char *v4;
  char *v7;
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(_QWORD *, uint64_t, uint64_t);
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(const void *, uint64_t, uint64_t);
  const void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int (*v44)(char *, uint64_t, uint64_t);
  uint64_t v45;
  char *__dst;
  uint64_t v48;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = &v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain();
  }
  else
  {
    v7 = a1;
    a1[8] = *((_BYTE *)a2 + 8);
    v8 = a3[6];
    v9 = &a1[v8];
    v10 = (char **)((char *)a2 + v8);
    v11 = type metadata accessor for MetricsActivity.PageReferrer(0);
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v12 + 48);
    v14 = v4;
    if (v13(v10, 1, v11))
    {
      v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7738);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      v48 = v12;
      v16 = v10[1];
      *(_QWORD *)v9 = *v10;
      *((_QWORD *)v9 + 1) = v16;
      v17 = *(int *)(v11 + 20);
      __dst = &v9[v17];
      v18 = (char *)v10 + v17;
      v19 = type metadata accessor for URL(0);
      v20 = *(_QWORD *)(v19 - 8);
      v21 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v20 + 48);
      v22 = v18;
      v23 = v19;
      swift_bridgeObjectRetain();
      if (v21(v22, 1, v23))
      {
        v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
        memcpy(__dst, v22, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, const void *, uint64_t))(v20 + 16))(__dst, v22, v23);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(__dst, 0, 1, v23);
      }
      v25 = v20;
      v26 = *(int *)(v11 + 24);
      v27 = &v9[v26];
      v28 = (char *)v10 + v26;
      if (v21(v28, 1, v23))
      {
        v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
        memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v27, v28, v23);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v27, 0, 1, v23);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v9, 0, 1, v11);
    }
    v30 = a3[8];
    *(_QWORD *)&v7[a3[7]] = *(char **)((char *)a2 + a3[7]);
    v31 = &v7[v30];
    v32 = (uint64_t)a2 + v30;
    v31[8] = *(_BYTE *)(v32 + 8);
    *(_QWORD *)v31 = *(_QWORD *)v32;
    v33 = a3[9];
    v34 = a3[10];
    v35 = &v7[v33];
    v36 = (uint64_t)a2 + v33;
    v35[8] = *(_BYTE *)(v36 + 8);
    *(_QWORD *)v35 = *(_QWORD *)v36;
    v37 = &v7[v34];
    v38 = (uint64_t)a2 + v34;
    *(_QWORD *)v37 = *(_QWORD *)v38;
    v37[8] = *(_BYTE *)(v38 + 8);
    v39 = a3[11];
    v40 = &v7[v39];
    v41 = (char *)a2 + v39;
    v42 = type metadata accessor for MetricsWidgetContext(0);
    v43 = *(_QWORD *)(v42 - 8);
    v44 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48);
    swift_bridgeObjectRetain();
    if (v44(v41, 1, v42))
    {
      v45 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BBC68);
      memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v40, v41, v42);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
    }
  }
  return v7;
}

uint64_t sub_13FFD0(id *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(char *, uint64_t, uint64_t);
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  v4 = (char *)a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for MetricsActivity.PageReferrer(0);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5))
  {
    swift_bridgeObjectRelease();
    v6 = &v4[*(int *)(v5 + 20)];
    v7 = type metadata accessor for URL(0);
    v8 = *(_QWORD *)(v7 - 8);
    v9 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
    if (!v9(v6, 1, v7))
      (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v7);
    v10 = &v4[*(int *)(v5 + 24)];
    if (!v9(v10, 1, v7))
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  swift_bridgeObjectRelease();
  v11 = (char *)a1 + *(int *)(a2 + 44);
  v12 = type metadata accessor for MetricsWidgetContext(0);
  v13 = *(_QWORD *)(v12 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v11, v12);
  return result;
}

uint64_t sub_140114(uint64_t a1, uint64_t a2, int *a3)
{
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(_QWORD *, uint64_t, uint64_t);
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int (*v20)(const void *, uint64_t, uint64_t);
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  const void *v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int (*v43)(const void *, uint64_t, uint64_t);
  uint64_t v44;
  char *__dst;
  uint64_t v47;

  v6 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v7 = a3[6];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  v10 = type metadata accessor for MetricsActivity.PageReferrer(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v11 + 48);
  v13 = v6;
  if (v12(v9, 1, v10))
  {
    v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7738);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    v47 = v11;
    v15 = v9[1];
    *v8 = *v9;
    v8[1] = v15;
    v16 = *(int *)(v10 + 20);
    __dst = (char *)v8 + v16;
    v17 = (char *)v9 + v16;
    v18 = type metadata accessor for URL(0);
    v19 = *(_QWORD *)(v18 - 8);
    v20 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v19 + 48);
    v21 = v17;
    v22 = v18;
    swift_bridgeObjectRetain();
    if (v20(v21, 1, v22))
    {
      v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
      memcpy(__dst, v21, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, const void *, uint64_t))(v19 + 16))(__dst, v21, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(__dst, 0, 1, v22);
    }
    v24 = v19;
    v25 = *(int *)(v10 + 24);
    v26 = (char *)v8 + v25;
    v27 = (char *)v9 + v25;
    if (v20(v27, 1, v22))
    {
      v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
      memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v26, v27, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v26, 0, 1, v22);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v8, 0, 1, v10);
  }
  v29 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  v30 = a1 + v29;
  v31 = a2 + v29;
  *(_BYTE *)(v30 + 8) = *(_BYTE *)(v31 + 8);
  *(_QWORD *)v30 = *(_QWORD *)v31;
  v32 = a3[9];
  v33 = a3[10];
  v34 = a1 + v32;
  v35 = a2 + v32;
  *(_BYTE *)(v34 + 8) = *(_BYTE *)(v35 + 8);
  *(_QWORD *)v34 = *(_QWORD *)v35;
  v36 = a1 + v33;
  v37 = a2 + v33;
  *(_QWORD *)v36 = *(_QWORD *)v37;
  *(_BYTE *)(v36 + 8) = *(_BYTE *)(v37 + 8);
  v38 = a3[11];
  v39 = (void *)(a1 + v38);
  v40 = (const void *)(a2 + v38);
  v41 = type metadata accessor for MetricsWidgetContext(0);
  v42 = *(_QWORD *)(v41 - 8);
  v43 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v42 + 48);
  swift_bridgeObjectRetain();
  if (v43(v40, 1, v41))
  {
    v44 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BBC68);
    memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v42 + 16))(v39, v40, v41);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
  }
  return a1;
}

uint64_t sub_1403F4(uint64_t a1, uint64_t a2, int *a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(char *, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t (*v29)(char *, uint64_t, uint64_t);
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(void *, uint64_t, uint64_t);
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  int v64;
  int v65;
  char *v66;
  uint64_t v67;
  void *v68;
  char *__dst;
  unsigned int (*v70)(char *, uint64_t, uint64_t);
  uint64_t v71;

  v6 = *(void **)a1;
  v7 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v8 = v7;

  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v9 = a3[6];
  v10 = (char *)(a1 + v9);
  v11 = (char *)(a2 + v9);
  v12 = type metadata accessor for MetricsActivity.PageReferrer(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      *(_QWORD *)v10 = *(_QWORD *)v11;
      *((_QWORD *)v10 + 1) = *((_QWORD *)v11 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v25 = *(int *)(v12 + 20);
      v26 = &v10[v25];
      v27 = &v11[v25];
      v28 = type metadata accessor for URL(0);
      v71 = *(_QWORD *)(v28 - 8);
      v29 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v71 + 48);
      v68 = v26;
      LODWORD(v26) = v29(v26, 1, v28);
      v30 = v29(v27, 1, v28);
      if ((_DWORD)v26)
      {
        if (v30)
        {
          v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
          memcpy(v68, v27, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
          v32 = v71;
        }
        else
        {
          v32 = v71;
          (*(void (**)(void *, char *, uint64_t))(v71 + 16))(v68, v27, v28);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v71 + 56))(v68, 0, 1, v28);
        }
      }
      else
      {
        v32 = v71;
        if (v30)
        {
          (*(void (**)(void *, uint64_t))(v71 + 8))(v68, v28);
          v60 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
          memcpy(v68, v27, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, char *, uint64_t))(v71 + 24))(v68, v27, v28);
        }
      }
      v61 = *(int *)(v12 + 24);
      v62 = &v10[v61];
      v63 = &v11[v61];
      v64 = v29(v62, 1, v28);
      v65 = v29(v63, 1, v28);
      if (v64)
      {
        if (!v65)
        {
          (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v62, v63, v28);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v62, 0, 1, v28);
          goto LABEL_17;
        }
      }
      else
      {
        if (!v65)
        {
          (*(void (**)(char *, char *, uint64_t))(v32 + 24))(v62, v63, v28);
          goto LABEL_17;
        }
        (*(void (**)(char *, uint64_t))(v32 + 8))(v62, v28);
      }
      v22 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B4370) - 8) + 64);
      v23 = v62;
      v24 = v63;
LABEL_8:
      memcpy(v23, v24, v22);
      goto LABEL_17;
    }
    sub_145D8((uint64_t)v10, type metadata accessor for MetricsActivity.PageReferrer);
LABEL_7:
    v22 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B7738) - 8) + 64);
    v23 = v10;
    v24 = v11;
    goto LABEL_8;
  }
  if (v16)
    goto LABEL_7;
  *(_QWORD *)v10 = *(_QWORD *)v11;
  *((_QWORD *)v10 + 1) = *((_QWORD *)v11 + 1);
  v17 = *(int *)(v12 + 20);
  __dst = &v10[v17];
  v66 = &v11[v17];
  v18 = type metadata accessor for URL(0);
  v67 = *(_QWORD *)(v18 - 8);
  v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v67 + 48);
  swift_bridgeObjectRetain();
  v70 = v19;
  if (v19(v66, 1, v18))
  {
    v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
    memcpy(__dst, v66, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    v21 = v67;
  }
  else
  {
    v21 = v67;
    (*(void (**)(char *, char *, uint64_t))(v67 + 16))(__dst, v66, v18);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v67 + 56))(__dst, 0, 1, v18);
  }
  v33 = v18;
  v34 = *(int *)(v12 + 24);
  v35 = &v10[v34];
  v36 = &v11[v34];
  if (v70(v36, 1, v33))
  {
    v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
    memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v35, v36, v33);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v35, 0, 1, v33);
  }
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
LABEL_17:
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v38 = a3[8];
  v39 = a1 + v38;
  v40 = (uint64_t *)(a2 + v38);
  v41 = *v40;
  *(_BYTE *)(v39 + 8) = *((_BYTE *)v40 + 8);
  *(_QWORD *)v39 = v41;
  v42 = a3[9];
  v43 = a1 + v42;
  v44 = (uint64_t *)(a2 + v42);
  v45 = *v44;
  *(_BYTE *)(v43 + 8) = *((_BYTE *)v44 + 8);
  *(_QWORD *)v43 = v45;
  v46 = a3[10];
  v47 = a1 + v46;
  v48 = (uint64_t *)(a2 + v46);
  v49 = *v48;
  *(_BYTE *)(v47 + 8) = *((_BYTE *)v48 + 8);
  *(_QWORD *)v47 = v49;
  v50 = a3[11];
  v51 = (void *)(a1 + v50);
  v52 = (void *)(a2 + v50);
  v53 = type metadata accessor for MetricsWidgetContext(0);
  v54 = *(_QWORD *)(v53 - 8);
  v55 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v54 + 48);
  v56 = v55(v51, 1, v53);
  v57 = v55(v52, 1, v53);
  if (!v56)
  {
    if (!v57)
    {
      (*(void (**)(void *, void *, uint64_t))(v54 + 24))(v51, v52, v53);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v54 + 8))(v51, v53);
    goto LABEL_22;
  }
  if (v57)
  {
LABEL_22:
    v58 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BBC68);
    memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v54 + 16))(v51, v52, v53);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v54 + 56))(v51, 0, 1, v53);
  return a1;
}

uint64_t sub_140938(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  const void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int (*v38)(char *, uint64_t, uint64_t);
  char *__dst;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = a3[6];
  v7 = (_OWORD *)(a1 + v6);
  v8 = (_OWORD *)(a2 + v6);
  v9 = type metadata accessor for MetricsActivity.PageReferrer(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7738);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    *v7 = *v8;
    v12 = *(int *)(v9 + 20);
    __dst = (char *)v7 + v12;
    v13 = (char *)v8 + v12;
    v14 = type metadata accessor for URL(0);
    v15 = *(_QWORD *)(v14 - 8);
    v38 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
    if (v38(v13, 1, v14))
    {
      v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
      memcpy(__dst, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 32))(__dst, v13, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(__dst, 0, 1, v14);
    }
    v17 = v15;
    v18 = *(int *)(v9 + 24);
    v19 = (char *)v7 + v18;
    v20 = (char *)v8 + v18;
    if (v38(v20, 1, v14))
    {
      v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v19, v20, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v19, 0, 1, v14);
    }
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v22 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  v23 = a1 + v22;
  v24 = a2 + v22;
  *(_BYTE *)(v23 + 8) = *(_BYTE *)(v24 + 8);
  *(_QWORD *)v23 = *(_QWORD *)v24;
  v25 = a3[9];
  v26 = a3[10];
  v27 = a1 + v25;
  v28 = a2 + v25;
  *(_BYTE *)(v27 + 8) = *(_BYTE *)(v28 + 8);
  *(_QWORD *)v27 = *(_QWORD *)v28;
  v29 = a1 + v26;
  v30 = a2 + v26;
  *(_QWORD *)v29 = *(_QWORD *)v30;
  *(_BYTE *)(v29 + 8) = *(_BYTE *)(v30 + 8);
  v31 = a3[11];
  v32 = (void *)(a1 + v31);
  v33 = (const void *)(a2 + v31);
  v34 = type metadata accessor for MetricsWidgetContext(0);
  v35 = *(_QWORD *)(v34 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
  {
    v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BBC68);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v35 + 32))(v32, v33, v34);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
  }
  return a1;
}

uint64_t sub_140BF0(uint64_t a1, uint64_t a2, int *a3)
{
  void *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  size_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t (*v28)(char *, uint64_t, uint64_t);
  int v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t (*v51)(void *, uint64_t, uint64_t);
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  int v60;
  int v61;
  void *v62;
  unsigned int (*__src)(char *, uint64_t, uint64_t);
  char *__dst;
  _QWORD *__dsta;

  v6 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v7 = a3[6];
  v8 = (char *)(a1 + v7);
  v9 = (char *)(a2 + v7);
  v10 = type metadata accessor for MetricsActivity.PageReferrer(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      v23 = *((_QWORD *)v9 + 1);
      *(_QWORD *)v8 = *(_QWORD *)v9;
      *((_QWORD *)v8 + 1) = v23;
      swift_bridgeObjectRelease();
      v24 = *(int *)(v10 + 20);
      v25 = &v8[v24];
      v26 = &v9[v24];
      v27 = type metadata accessor for URL(0);
      __dsta = *(_QWORD **)(v27 - 8);
      v28 = (uint64_t (*)(char *, uint64_t, uint64_t))__dsta[6];
      v62 = v25;
      LODWORD(v25) = v28(v25, 1, v27);
      v29 = v28(v26, 1, v27);
      if ((_DWORD)v25)
      {
        if (v29)
        {
          v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
          memcpy(v62, v26, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
          v31 = __dsta;
        }
        else
        {
          v31 = __dsta;
          ((void (*)(void *, char *, uint64_t))__dsta[4])(v62, v26, v27);
          ((void (*)(void *, _QWORD, uint64_t, uint64_t))__dsta[7])(v62, 0, 1, v27);
        }
      }
      else
      {
        v31 = __dsta;
        if (v29)
        {
          ((void (*)(void *, uint64_t))__dsta[1])(v62, v27);
          v56 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
          memcpy(v62, v26, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
        }
        else
        {
          ((void (*)(void *, char *, uint64_t))__dsta[5])(v62, v26, v27);
        }
      }
      v57 = *(int *)(v10 + 24);
      v58 = &v8[v57];
      v59 = &v9[v57];
      v60 = v28(v58, 1, v27);
      v61 = v28(v59, 1, v27);
      if (v60)
      {
        if (!v61)
        {
          ((void (*)(char *, char *, uint64_t))v31[4])(v58, v59, v27);
          ((void (*)(char *, _QWORD, uint64_t, uint64_t))v31[7])(v58, 0, 1, v27);
          goto LABEL_17;
        }
      }
      else
      {
        if (!v61)
        {
          ((void (*)(char *, char *, uint64_t))v31[5])(v58, v59, v27);
          goto LABEL_17;
        }
        ((void (*)(char *, uint64_t))v31[1])(v58, v27);
      }
      v20 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B4370) - 8) + 64);
      v21 = v58;
      v22 = v59;
LABEL_8:
      memcpy(v21, v22, v20);
      goto LABEL_17;
    }
    sub_145D8((uint64_t)v8, type metadata accessor for MetricsActivity.PageReferrer);
LABEL_7:
    v20 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B7738) - 8) + 64);
    v21 = v8;
    v22 = v9;
    goto LABEL_8;
  }
  if (v14)
    goto LABEL_7;
  *(_OWORD *)v8 = *(_OWORD *)v9;
  v15 = *(int *)(v10 + 20);
  __dst = &v8[v15];
  v16 = &v9[v15];
  v17 = type metadata accessor for URL(0);
  v18 = *(_QWORD *)(v17 - 8);
  __src = *(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
  if (__src(v16, 1, v17))
  {
    v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
    memcpy(__dst, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(__dst, v16, v17);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(__dst, 0, 1, v17);
  }
  v32 = v18;
  v33 = *(int *)(v10 + 24);
  v34 = &v8[v33];
  v35 = &v9[v33];
  if (__src(v35, 1, v17))
  {
    v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
    memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v34, v35, v17);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v34, 0, 1, v17);
  }
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
LABEL_17:
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  swift_bridgeObjectRelease();
  v37 = a3[8];
  v38 = a3[9];
  v39 = a1 + v37;
  v40 = a2 + v37;
  *(_QWORD *)v39 = *(_QWORD *)v40;
  *(_BYTE *)(v39 + 8) = *(_BYTE *)(v40 + 8);
  v41 = a1 + v38;
  v42 = a2 + v38;
  *(_QWORD *)v41 = *(_QWORD *)v42;
  *(_BYTE *)(v41 + 8) = *(_BYTE *)(v42 + 8);
  v43 = a3[10];
  v44 = a3[11];
  v45 = a1 + v43;
  v46 = a2 + v43;
  *(_QWORD *)v45 = *(_QWORD *)v46;
  *(_BYTE *)(v45 + 8) = *(_BYTE *)(v46 + 8);
  v47 = (void *)(a1 + v44);
  v48 = (void *)(a2 + v44);
  v49 = type metadata accessor for MetricsWidgetContext(0);
  v50 = *(_QWORD *)(v49 - 8);
  v51 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v50 + 48);
  v52 = v51(v47, 1, v49);
  v53 = v51(v48, 1, v49);
  if (!v52)
  {
    if (!v53)
    {
      (*(void (**)(void *, void *, uint64_t))(v50 + 40))(v47, v48, v49);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v50 + 8))(v47, v49);
    goto LABEL_22;
  }
  if (v53)
  {
LABEL_22:
    v54 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BBC68);
    memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v50 + 32))(v47, v48, v49);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v50 + 56))(v47, 0, 1, v49);
  return a1;
}

uint64_t sub_1410EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1410F8);
}

uint64_t sub_1410F8(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7738);
    v10 = *(_QWORD *)(v9 - 8);
    if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
    {
      v11 = v9;
      v12 = *(int *)(a3 + 24);
    }
    else
    {
      v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BBC68);
      v10 = *(_QWORD *)(v11 - 8);
      v12 = *(int *)(a3 + 44);
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(&a1[v12], a2, v11);
  }
}

uint64_t sub_1411AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1411B8);
}

char *sub_1411B8(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)result = a2;
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7738);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 24);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BBC68);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 44);
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

void sub_14125C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[8];

  v6[0] = "\b";
  v6[1] = &unk_2F7560;
  sub_3EE70(319, &qword_3BBDB8, type metadata accessor for MetricsActivity.PageReferrer);
  if (v3 <= 0x3F)
  {
    v6[2] = *(_QWORD *)(v2 - 8) + 64;
    v6[3] = "\b";
    v6[4] = &unk_2F7578;
    v6[5] = &unk_2F7578;
    v6[6] = &unk_2F7578;
    sub_3EE70(319, (unint64_t *)&unk_3BBDC0, (uint64_t (*)(uint64_t))&type metadata accessor for MetricsWidgetContext);
    if (v5 <= 0x3F)
    {
      v6[7] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 8, v6, a1 + 16);
    }
  }
}

uint64_t sub_141324(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *(_QWORD *)(v1 + 16);
  result = type metadata accessor for MetricsActivity.State(0);
  v5 = a1 + *(int *)(result + 40);
  *(_QWORD *)v5 = v3;
  *(_BYTE *)(v5 + 8) = 0;
  return result;
}

uint64_t sub_14135C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *(_QWORD *)(v1 + 16);
  result = type metadata accessor for MetricsActivity.State(0);
  v5 = a1 + *(int *)(result + 32);
  *(_QWORD *)v5 = v3;
  *(_BYTE *)(v5 + 8) = 0;
  return result;
}

uint64_t sub_141394(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *(_QWORD *)(v1 + 16);
  result = type metadata accessor for MetricsActivity.State(0);
  v5 = a1 + *(int *)(result + 36);
  *(_QWORD *)v5 = v3;
  *(_BYTE *)(v5 + 8) = 0;
  return result;
}

uint64_t sub_1413CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(int *)(type metadata accessor for MetricsActivity.State(0) + 28);
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + v4) = v3;
  return result;
}

uint64_t sub_141418(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(result + 8) = *(_BYTE *)(v1 + 16);
  return result;
}

uint64_t sub_141424(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BBC68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t MultiSelectableExtension.isMultiSelectable.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_retain(*(_QWORD *)(v0 + 40));
  return v1;
}

uint64_t destroy for ReorderingExtension(_QWORD *a1)
{
  swift_release(a1[1]);
  swift_release(a1[3]);
  return swift_release(a1[5]);
}

uint64_t initializeWithCopy for ReorderingExtension(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  __int128 v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v3 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 40);
  v6 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 40) = v4;
  swift_retain(v3);
  swift_retain(v6);
  swift_retain(v4);
  return a1;
}

_QWORD *assignWithCopy for ReorderingExtension(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain(v4);
  swift_release(v5);
  v6 = a2[3];
  v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_retain(v6);
  swift_release(v7);
  v9 = a2[4];
  v8 = a2[5];
  v10 = a1[5];
  a1[4] = v9;
  a1[5] = v8;
  swift_retain(v8);
  swift_release(v10);
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for ReorderingExtension(uint64_t a1, _OWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *a2;
  swift_release(v4);
  v5 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = a2[1];
  swift_release(v5);
  v6 = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = a2[2];
  swift_release(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for ReorderingExtension(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ReorderingExtension(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ReorderingExtension()
{
  return &type metadata for ReorderingExtension;
}

uint64_t RecentlyUnfollowedTipProvider.__allocating_init(asPartOf:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = swift_allocObject(v1, 80, 7);
  RecentlyUnfollowedTipProvider.init(asPartOf:)(a1);
  return v3;
}

_QWORD *RecentlyUnfollowedTipProvider.init(asPartOf:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  os_unfair_lock_s *v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45[2];

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BBE10);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BBE18);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v1[2] = 0;
  v1[3] = a1;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4F28);
  swift_retain(a1);
  BaseObjectGraph.inject<A>(_:)(v45, v12, v12);
  sub_F4D8(v45, (uint64_t)(v2 + 4));
  v42 = v8;
  v43 = a1;
  v40 = v11;
  v41 = v9;
  v38 = v5;
  v39 = v4;
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
    && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
  {
    v13 = (void *)sub_B3484((uint64_t)_swiftEmptyArrayStorage);
  }
  else
  {
    v13 = &_swiftEmptySetSingleton;
  }
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3748);
  v15 = swift_allocObject(v14, 28, 7);
  *(_DWORD *)(v15 + 24) = 0;
  *(_QWORD *)(v15 + 16) = v13;
  v2[9] = v15;
  v16 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "_applePodcastsFoundationSharedUserDefaults");
  v17 = NSUserDefaults.timestampPublisher(forKey:)(0xD000000000000035, 0x8000000000310460);

  *(_QWORD *)&v45[0] = v17;
  v19 = v2[7];
  v18 = v2[8];
  __swift_project_boxed_opaque_existential_1(v2 + 4, v19);
  v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 8))(v19, v18);
  v44 = v20;
  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B40C0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3628);
  v23 = sub_32914(&qword_3B40C8, &qword_3B40C0, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v24 = sub_32914(&qword_3B3638, &qword_3B3628, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.combineLatest<A>(_:)(&v44, v21, v22, v23, v24);
  swift_release(v17);
  swift_release(v20);
  v25 = swift_allocObject(&unk_382530, 24, 7);
  swift_weakInit(v25 + 16);
  v26 = swift_allocObject(&unk_382558, 32, 7);
  *(_QWORD *)(v26 + 16) = sub_141C0C;
  *(_QWORD *)(v26 + 24) = v25;
  v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8660);
  v28 = sub_32914(&qword_3BBE20, &qword_3BBE10, (uint64_t)&protocol conformance descriptor for Publishers.CombineLatest<A, B>);
  v29 = v39;
  v30 = v40;
  Publisher.map<A>(_:)(sub_75080, v26, v39, v27, v28);
  swift_release(v26);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v7, v29);
  v31 = swift_allocObject(&unk_382530, 24, 7);
  swift_weakInit(v31 + 16);
  v32 = sub_32914(&qword_3BBE28, &qword_3BBE18, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v33 = v42;
  v34 = Publisher<>.sink(receiveValue:)(sub_E4C1C, v31, v42, v32);
  swift_release(v31);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v30, v33);
  v35 = (os_unfair_lock_s *)v2[9];
  swift_retain(v35);
  os_unfair_lock_lock(v35 + 6);
  sub_635EC();
  os_unfair_lock_unlock(v35 + 6);
  swift_release(v34);
  swift_release(v35);
  swift_release(v43);
  return v2;
}

uint64_t sub_141AE4()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_141B08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>, double a4@<D0>)
{
  BOOL v8;
  uint64_t v9;
  uint64_t Strong;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[24];

  if ((static Podcasts.isRecentlyUnfollowedEnabled()() & 1) == 0 || (a4 == 0.0 ? (v8 = a1 < 1) : (v8 = 1), v8))
  {
    v14 = type metadata accessor for ModernShelf(0);
    return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(a3, 1, 1, v14);
  }
  else
  {
    v9 = a2 + 16;
    swift_beginAccess(v9, v16, 0, 0);
    Strong = swift_weakLoadStrong(v9);
    if (Strong)
    {
      v11 = Strong;
      sub_141C14(a3);
      swift_release(v11);
      v12 = type metadata accessor for ModernShelf(0);
      return (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(a3, 0, 1, v12);
    }
    else
    {
      v15 = type metadata accessor for ModernShelf(0);
      return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(a3, 1, 1, v15);
    }
  }
}

uint64_t sub_141C0C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>, double a3@<D0>)
{
  uint64_t v3;

  return sub_141B08(a1, v3, a2, a3);
}

void sub_141C14(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  id v9;
  Swift::String v10;
  Swift::String v11;
  void *object;
  id v13;
  Swift::String v14;
  Swift::String v15;
  void *v16;
  id v17;
  NSString v18;
  NSString v19;
  id v20;
  uint64_t (*v21)(_QWORD);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  NSString v26;
  uint64_t v27;
  uint64_t v28;
  NSURL *v29;
  void *v30;
  void *v31;
  void *v32;
  id v33;
  Swift::String v34;
  uint64_t v35;
  Swift::String v36;
  void *v37;
  NSString v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSString v43;
  id v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t (*v51)(char *, _QWORD, uint64_t);
  unsigned int v52;
  id v53;
  void *v54;
  _QWORD *v55;
  __int16 v56;
  int v57;
  __int16 v58;
  uint64_t v59;
  Swift::String v60;
  Swift::String v61;
  Swift::String v62;

  v55 = a1;
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
  __chkstk_darwin(v1);
  v3 = (char *)&v50 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for TipType(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (void *)objc_opt_self(NSBundle);
  v9 = objc_msgSend(v8, "mainBundle");
  v10._countAndFlagsBits = 0xD00000000000001DLL;
  v54 = (void *)0x800000000030B030;
  v60._object = (void *)0x800000000030B030;
  v10._object = (void *)0x8000000000310500;
  v11._countAndFlagsBits = 0;
  v11._object = (void *)0xE000000000000000;
  v60._countAndFlagsBits = 0xD000000000000013;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, (Swift::String_optional)0, (NSBundle)v9, v11, v60)._object;

  v13 = objc_msgSend(v8, "mainBundle");
  v14._countAndFlagsBits = 0xD000000000000020;
  v61._countAndFlagsBits = 0xD000000000000040;
  v61._object = (void *)0x8000000000310550;
  v14._object = (void *)0x8000000000310520;
  v15._countAndFlagsBits = 0;
  v15._object = (void *)0xE000000000000000;
  v16 = NSLocalizedString(_:tableName:bundle:value:comment:)(v14, (Swift::String_optional)0, (NSBundle)v13, v15, v61)._object;

  v17 = objc_allocWithZone((Class)AMSDialogRequest);
  v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v16);
  v20 = objc_msgSend(v17, "initWithTitle:message:", v18, v19);

  v21 = *(uint64_t (**)(_QWORD))(v5 + 104);
  v52 = enum case for TipType.recentlyUnfollowed(_:);
  v51 = (uint64_t (*)(char *, _QWORD, uint64_t))v21;
  v22 = v21(v7);
  TipType.rawValue.getter(v22);
  v24 = v23;
  v25 = *(void (**)(char *, uint64_t))(v5 + 8);
  v25(v7, v4);
  v26 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v24);
  objc_msgSend(v20, "setIdentifier:", v26);

  objc_msgSend(v20, "setStyle:", 4);
  URL.init(string:)(0xD000000000000013, 0x80000000003105A0);
  v27 = type metadata accessor for URL(0);
  v28 = *(_QWORD *)(v27 - 8);
  v30 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v3, 1, v27) != 1)
  {
    URL._bridgeToObjectiveC()(v29);
    v30 = v31;
    (*(void (**)(char *, uint64_t))(v28 + 8))(v3, v27);
  }
  objc_msgSend(v20, "setIconURL:", v30);

  v32 = (void *)objc_opt_self(AMSDialogAction);
  v53 = objc_msgSend(v32, "actionWithTitle:style:", 0, 2);
  objc_msgSend(v20, "addButtonAction:");
  v33 = objc_msgSend(v8, "mainBundle");
  v34._countAndFlagsBits = 0xD00000000000001CLL;
  v62._object = v54;
  v34._object = (void *)0x80000000003105C0;
  v35 = 0xE000000000000000;
  v36._countAndFlagsBits = 0;
  v36._object = (void *)0xE000000000000000;
  v62._countAndFlagsBits = 0xD000000000000013;
  v37 = NSLocalizedString(_:tableName:bundle:value:comment:)(v34, (Swift::String_optional)0, (NSBundle)v33, v36, v62)._object;

  v38 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v37);
  v39 = objc_msgSend(v32, "actionWithTitle:style:", v38, 0);

  v40 = v51(v7, v52, v4);
  TipType.rawValue.getter(v40);
  v42 = v41;
  v25(v7, v4);
  v43 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v42);
  objc_msgSend(v39, "setIdentifier:", v43);

  objc_msgSend(v20, "addButtonAction:", v39);
  v44 = objc_msgSend(v20, "identifier");
  if (v44)
  {
    v45 = v44;
    v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
    v35 = v47;

  }
  else
  {
    v46 = 0;
  }
  v56 = 53;
  v58 = 256;
  v57 = 0;
  v59 = 1;
  v48 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8750);
  v49 = swift_allocObject(v48, 72, 7);
  *(_OWORD *)(v49 + 16) = xmmword_2EA0D0;
  *(_QWORD *)(v49 + 56) = sub_327F8(0, (unint64_t *)&qword_3B7DB0, AMSDialogRequest_ptr);
  *(_QWORD *)(v49 + 64) = sub_E667C();
  *(_QWORD *)(v49 + 32) = v20;
  ModernShelf.init(id:title:itemPresentation:items:)(v46, v35, 0, 0, (unsigned __int8 *)&v56, v49, v55);

}

uint64_t sub_142168()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

_QWORD *RecentlyUnfollowedTipProvider.handle(tipAction:from:)(void *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id v14;
  uint64_t v15;
  double v16;
  NSString v17;
  _QWORD *result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[4];
  unint64_t v29;
  uint64_t v30;
  _QWORD v31[4];

  v4 = type metadata accessor for ActionMetrics(0);
  __chkstk_darwin(v4);
  v6 = (char *)v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for FlowDestination(0);
  __chkstk_darwin(v7);
  v9 = (char *)v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "_applePodcastsFoundationSharedUserDefaults");
  v15 = Date.init()(v14);
  v16 = Date.timeIntervalSinceReferenceDate.getter(v15);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  v17 = String._bridgeToObjectiveC()();
  objc_msgSend(v14, "setDouble:forKey:", v17, v16);

  result = objc_msgSend(a1, "style");
  if (result != (_QWORD *)((char *)&dword_0 + 2))
  {
    v19 = swift_storeEnumTagMultiPayload(v9, v7, 45);
    LOBYTE(v28[0]) = 0;
    LOBYTE(v31[0]) = 0;
    static ActionMetrics.notInstrumented.getter(v19);
    v20 = type metadata accessor for FlowAction(0);
    swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
    v21 = FlowAction.init(_:id:title:presentationContext:animationBehavior:presentationStyle:destinationPageHeader:actionMetrics:)((uint64_t)v9, 0, 0, 0, 0, (char *)v28, 0, 48, (char *)v31, (uint64_t)v6);
    type metadata accessor for ActionRunnerOptions(0);
    v22 = swift_retain();
    v23 = BaseObjectGraph.__allocating_init(_:)(v22);
    v31[3] = sub_327F8(0, &qword_3B8638, UIViewController_ptr);
    v31[0] = a2;
    v24 = objc_msgSend(a2, "view");
    sub_236BC((uint64_t)v31, (uint64_t)v28);
    v29 = (unint64_t)v24;
    v25 = v24;
    v26 = _s8ShelfKit19ActionRunnerOptionsC04withC6OriginyACXDAA0cG0VSgF_0((uint64_t)v28);
    sub_1459C((uint64_t)v28, &qword_3B18E8);

    swift_release(v23);
    sub_1459C((uint64_t)v31, (uint64_t *)&unk_3BC540);
    v28[3] = v20;
    v29 = sub_E8A2C();
    v30 = v26;
    v28[0] = v21;
    swift_retain();
    swift_retain();
    v27 = ActionPerformer.callAsFunction()();
    swift_release(v21);
    swift_release(v26);
    swift_release(v27);
    return sub_23740(v28);
  }
  return result;
}

_QWORD *RecentlyUnfollowedTipProvider.deinit()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  __swift_destroy_boxed_opaque_existential_1(v0 + 4);
  swift_release(v0[9]);
  return v0;
}

uint64_t RecentlyUnfollowedTipProvider.__deallocating_deinit()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  __swift_destroy_boxed_opaque_existential_1(v0 + 4);
  swift_release(v0[9]);
  return swift_deallocClassInstance(v0, 80, 7);
}

uint64_t sub_1424F4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = AddFavoriteCategoriesSearchTipProvider.addFavoriteCategoriesSearchTipShelf.getter();
  *a1 = result;
  return result;
}

uint64_t sub_14251C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *(_QWORD *)(*(_QWORD *)a2 + 16);
  *(_QWORD *)(*(_QWORD *)a2 + 16) = v2;
  swift_retain(v2);
  return swift_release(v3);
}

uint64_t type metadata accessor for RecentlyUnfollowedTipProvider()
{
  return objc_opt_self(_TtC8ShelfKit29RecentlyUnfollowedTipProvider);
}

uint64_t method lookup function for RecentlyUnfollowedTipProvider(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for RecentlyUnfollowedTipProvider);
}

uint64_t dispatch thunk of SubscriptionConfirmationSheetHandler.__allocating_init(asPartOf:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t sub_142580(void *a1)
{
  void *v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  result = (uint64_t)objc_msgSend(v1, "length");
  v4 = result;
  if (result < 1)
  {
    if (!result)
      return (uint64_t)objc_msgSend(v1, "deleteCharactersInRange:", 0, v4);
    v5 = 0;
  }
  else
  {
    v5 = 0;
    while (1)
    {
      result = (uint64_t)objc_msgSend(a1, "characterIsMember:", objc_msgSend(v1, "characterAtIndex:", v5));
      if ((result & 1) == 0)
        break;
      if (v4 == ++v5)
        return (uint64_t)objc_msgSend(v1, "deleteCharactersInRange:", 0, v4);
    }
    if (v4 == v5)
      return (uint64_t)objc_msgSend(v1, "deleteCharactersInRange:", 0, v4);
  }
  v6 = v4 - 1;
  if (__OFSUB__(v4, 1))
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  while (v6 >= v5)
  {
    result = (uint64_t)objc_msgSend(a1, "characterIsMember:", objc_msgSend(v1, "characterAtIndex:", v6));
    if (!(_DWORD)result)
      break;
    if (__OFSUB__(v6--, 1))
    {
      __break(1u);
      goto LABEL_19;
    }
  }
  v8 = v4 - v6;
  if (__OFSUB__(v4, v6))
    goto LABEL_20;
  if (!__OFSUB__(v8, 1))
  {
    objc_msgSend(v1, "deleteCharactersInRange:", v6 + 1, v8 - 1);
    v4 = v5;
    return (uint64_t)objc_msgSend(v1, "deleteCharactersInRange:", 0, v4);
  }
LABEL_21:
  __break(1u);
  return result;
}

uint64_t dispatch thunk of MenuBarPresenter.rebuildMenuBar.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t static ShowListType.== infix(_:_:)(uint64_t a1, char a2, uint64_t a3, char a4)
{
  return sub_142848(a1, a2 & 1, a3, a4 & 1);
}

uint64_t sub_1426CC(uint64_t a1, uint64_t a2)
{
  return sub_142848(*(_QWORD *)a1, *(_BYTE *)(a1 + 8), *(_QWORD *)a2, *(_BYTE *)(a2 + 8));
}

uint64_t ShowListType.description.getter(uint64_t a1, char a2)
{
  unint64_t v2;
  Swift::String v3;
  Swift::String v4;

  if ((a2 & 1) != 0)
    return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_142798 + 4 * asc_2F7644[a1]))(0x6465776F6C6C6F66, 0xE800000000000000);
  v2 = sub_144B4();
  v3._countAndFlagsBits = BinaryInteger.description.getter(&type metadata for UInt64, v2);
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 41;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  return 0x286C656E6E616863;
}

uint64_t sub_142798()
{
  return 0x776F6C6C6F666E75;
}

uint64_t sub_1427B4()
{
  return 7105633;
}

uint64_t sub_1427C4()
{
  return 0x64616F6C6E776F64;
}

unint64_t sub_14281C()
{
  return 0xD000000000000012;
}

uint64_t sub_14283C()
{
  uint64_t v0;

  return ShowListType.description.getter(*(_QWORD *)v0, *(_BYTE *)(v0 + 8));
}

uint64_t sub_142848(uint64_t a1, char a2, uint64_t a3, char a4)
{
  if ((a2 & 1) != 0)
    return ((uint64_t (*)(void))((char *)&loc_142874 + 4 * byte_2F764C[a1]))();
  if ((a4 & 1) != 0)
    return 0;
  return a1 == a3;
}

ValueMetadata *type metadata accessor for ShowListType()
{
  return &type metadata for ShowListType;
}

uint64_t ArtworkModel.artwork.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  sub_BE440(v1, a1);
  v3 = type metadata accessor for ArtworkModel(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(a1, 0, 1, v3);
}

uint64_t sub_142970@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  v4 = v2;
  sub_BE440(v4, a2);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(a2, 0, 1, a1);
}

uint64_t static ArtworkModel.tryToMakeInstances(byDeserializing:using:)()
{
  type metadata accessor for ArtworkModel(0);
  return JSONArray.compactMap<A>(_:)(sub_142C7C);
}

uint64_t sub_142A04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[3];
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[7];

  v31 = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BBEE8);
  v29 = *(_QWORD *)(v5 - 8);
  v30 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for JSONContext(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for JSONObject(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((JSONObject.isNull.getter(v16) & 1) != 0)
  {
    v17 = type metadata accessor for ArtworkModel(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(a3, 1, 1, v17);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a1, v12);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v31, v8);
    v19 = v35[6];
    v20 = ArtworkModel.init(deserializing:using:)(v15, v11);
    v21 = a3;
    if (v19)
    {
      static JSONContext.initFailureObserver.getter(v20);
      v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BBEF0);
      JSONContext.subscript.getter(v35, v7, v22);
      (*(void (**)(char *, uint64_t))(v29 + 8))(v7, v30);
      sub_142CB8((uint64_t)v35, (uint64_t)v32);
      v23 = v33;
      if (v33)
      {
        v24 = v34;
        __swift_project_boxed_opaque_existential_1(v32, v33);
        v25 = type metadata accessor for ArtworkModel(0);
        dispatch thunk of JSONInitFailureObserver.tryingToInitialize(_:didFailWith:)(v25, v19, v23, v24);
        swift_errorRelease(v19);
        sub_142D00((uint64_t)v35);
        __swift_destroy_boxed_opaque_existential_1(v32);
      }
      else
      {
        sub_142D00((uint64_t)v35);
        swift_errorRelease(v19);
        sub_142D00((uint64_t)v32);
      }
      v27 = type metadata accessor for ArtworkModel(0);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v21, 1, 1, v27);
    }
    else
    {
      v26 = type metadata accessor for ArtworkModel(0);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(a3, 0, 1, v26);
    }
  }
}

uint64_t sub_142C7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_142A04(a1, *(_QWORD *)(v2 + 16), a2);
}

unint64_t sub_142C94(uint64_t a1)
{
  unint64_t result;

  result = sub_3CFA8();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_142CB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BBEF8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_142D00(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BBEF8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_142D40()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 56, v2, 0, 0);
  return *(_QWORD *)(v0 + 56);
}

uint64_t sub_142D70(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  _BYTE v4[24];

  result = swift_beginAccess(v1 + 56, v4, 1, 0);
  *(_QWORD *)(v1 + 56) = a1;
  return result;
}

uint64_t (*sub_142DAC(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + 56, a1, 33, 0);
  return j__swift_endAccess;
}

_QWORD *StationShow.__allocating_init(uuid:stationUuid:podcast:episodeCount:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *result;

  result = (_QWORD *)swift_allocObject(v6, 64, 7);
  result[2] = a1;
  result[3] = a2;
  result[4] = a3;
  result[5] = a4;
  result[6] = a5;
  result[7] = a6;
  return result;
}

_QWORD *StationShow.init(uuid:stationUuid:podcast:episodeCount:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[2] = a1;
  v6[3] = a2;
  v6[4] = a3;
  v6[5] = a4;
  v6[6] = a5;
  v6[7] = a6;
  return v6;
}

uint64_t sub_142E60()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_QWORD, _QWORD, _QWORD);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  unsigned __int8 v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD v54[2];
  char *v55;
  uint64_t v56;
  void (*v57)(_QWORD, _QWORD, _QWORD);
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  char v68[24];
  _OWORD v69[2];
  uint64_t v70;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
  __chkstk_darwin(v1);
  v66 = (uint64_t)v54 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for UUID(0);
  v63 = *(_QWORD **)(v3 - 8);
  v64 = v3;
  __chkstk_darwin(v3);
  v60 = (char *)v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v5);
  v59 = (char *)v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ActionMetrics(0);
  v61 = *(_QWORD *)(v7 - 8);
  v62 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for FlowDestination(0);
  __chkstk_darwin(v10);
  v12 = (char *)v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v15 = (_QWORD *)((char *)v54 - v14);
  v16 = v0[4];
  v17 = v0[5];
  v19 = v0[3];
  v57 = (void (*)(_QWORD, _QWORD, _QWORD))v0[2];
  v18 = v57;
  v58 = v16;
  v67 = v0;
  v20 = v0[6];
  v22 = *(_QWORD *)(v20 + 56);
  v56 = *(_QWORD *)(v20 + 48);
  v21 = v56;
  v24 = *(_QWORD *)(v20 + 32);
  v23 = *(_QWORD *)(v20 + 40);
  *v15 = v16;
  v15[1] = v17;
  v15[2] = (uint64_t)v18;
  v15[3] = v19;
  v15[4] = v21;
  v15[5] = v22;
  v15[6] = v24;
  v15[7] = v23;
  swift_storeEnumTagMultiPayload(v15, v25, 15);
  sub_B5E70((uint64_t)v15, (uint64_t)v12);
  LOBYTE(v69[0]) = 0;
  v68[0] = 0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v26 = swift_bridgeObjectRetain();
  v55 = v9;
  static ActionMetrics.notInstrumented.getter(v26);
  v27 = type metadata accessor for FlowAction(0);
  swift_allocObject(v27, *(unsigned int *)(v27 + 48), *(unsigned __int16 *)(v27 + 52));
  v65 = FlowAction.init(_:id:title:presentationContext:animationBehavior:presentationStyle:destinationPageHeader:actionMetrics:)((uint64_t)v12, 0, 0, 0, 0, (char *)v69, 0, 48, v68, (uint64_t)v9);
  v28 = type metadata accessor for LibraryPodcastContextAction(0);
  v29 = swift_allocObject(v28, *(unsigned int *)(v28 + 48), *(unsigned __int16 *)(v28 + 52));
  v30 = (_QWORD *)(v29 + OBJC_IVAR____TtC8ShelfKit27LibraryPodcastContextAction_podcastUuid);
  *v30 = v24;
  v30[1] = v23;
  v31 = v29 + OBJC_IVAR____TtC8ShelfKit27LibraryPodcastContextAction_groupedEpisodeListType;
  *(_QWORD *)v31 = v58;
  *(_QWORD *)(v31 + 8) = v17;
  v54[1] = v17;
  *(_QWORD *)(v31 + 16) = v57;
  *(_QWORD *)(v31 + 24) = v19;
  v54[0] = v19;
  *(_QWORD *)(v31 + 32) = v56;
  *(_QWORD *)(v31 + 40) = v22;
  *(_QWORD *)(v31 + 48) = v24;
  *(_QWORD *)(v31 + 56) = v23;
  *(_BYTE *)(v31 + 64) = 4;
  v32 = type metadata accessor for ImpressionMetrics(0);
  v33 = (uint64_t)v59;
  v57 = *(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v32 - 8) + 56);
  v58 = v32;
  v57(v59, 1, 1);
  swift_bridgeObjectRetain_n(v23, 3);
  swift_bridgeObjectRetain_n(v17, 2);
  swift_bridgeObjectRetain_n(v19, 2);
  v34 = swift_bridgeObjectRetain_n(v22, 2);
  v35 = v55;
  v36 = static ActionMetrics.notInstrumented.getter(v34);
  v37 = v60;
  UUID.init()(v36);
  v38 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
  v40 = v39;
  ((void (*)(char *, uint64_t))v63[1])(v37, v64);
  *(_QWORD *)(v29 + 16) = v38;
  *(_QWORD *)(v29 + 24) = v40;
  *(_QWORD *)(v29 + 32) = 0;
  *(_QWORD *)(v29 + 40) = 0;
  *(_BYTE *)(v29 + 48) = 32;
  (*(void (**)(uint64_t, char *, uint64_t))(v61 + 32))(v29 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v35, v62);
  sub_23AB8(v33, v29 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v41 = *(_QWORD *)(v20 + 40);
  v64 = *(_QWORD *)(v20 + 32);
  if ((*(_BYTE *)(v20 + 24) & 1) != 0)
  {
    v42 = swift_bridgeObjectRetain();
    v63 = (_QWORD *)static AdamID.empty.getter(v42);
  }
  else
  {
    v63 = *(_QWORD **)(v20 + 16);
    swift_bridgeObjectRetain();
  }
  v43 = v66;
  sub_14554(v20 + OBJC_IVAR____TtC8ShelfKit7Podcast_artwork, v66);
  v44 = *(_QWORD *)(v20 + 48);
  v45 = *(void **)(v20 + 56);
  v62 = *(_QWORD *)(v20 + 64);
  LODWORD(v61) = *(unsigned __int8 *)(v20 + 72);
  v70 = 0;
  memset(v69, 0, sizeof(v69));
  v46 = *(_BYTE *)(v20 + OBJC_IVAR____TtC8ShelfKit7Podcast_isExplicit);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v57)(v33, 1, 1, v58);
  v47 = type metadata accessor for LibraryShowLockup(0);
  swift_allocObject(v47, *(unsigned int *)(v47 + 48), *(unsigned __int16 *)(v47 + 52));
  swift_bridgeObjectRetain_n(v45, 2);
  swift_retain();
  v68[0] = 1;
  v48 = sub_2267B0(v64, v41, v63, v43, v44, (uint64_t)v45, v44, v45, v62, v61, 0, 0, 0, 0x100000000uLL, 0, (uint64_t)v69, 0, 0, v29,
          2,
          v46,
          0,
          0,
          v33);
  swift_release(v29);
  v49 = v67;
  swift_beginAccess(v67 + 7, v68, 0, 0);
  v50 = v49[7];
  v51 = v65;
  swift_retain();
  v52 = LibraryShowLockup.groupedEpisodesVariant(episodeCount:clickAction:)(v50, v51);
  swift_release(v29);
  swift_release(v48);
  swift_release_n(v51, 2);
  sub_B5EB4((uint64_t)v15);
  return v52;
}

uint64_t StationShow.__deallocating_deinit()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_release(v0[6]);
  return swift_deallocClassInstance(v0, 64, 7);
}

uint64_t sub_143400@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  _BYTE v5[24];

  v3 = *a1;
  result = swift_beginAccess(*a1 + 56, v5, 0, 0);
  *a2 = *(_QWORD *)(v3 + 56);
  return result;
}

uint64_t sub_143444(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  _BYTE v5[24];

  v2 = *a1;
  v3 = *a2;
  result = swift_beginAccess(*a2 + 56, v5, 1, 0);
  *(_QWORD *)(v3 + 56) = v2;
  return result;
}

uint64_t type metadata accessor for StationShow()
{
  return objc_opt_self(_TtC8ShelfKit11StationShow);
}

uint64_t method lookup function for StationShow(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for StationShow);
}

uint64_t dispatch thunk of NetworkObserver.delegate.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of Action.actionMetrics.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of StationShow.__allocating_init(uuid:stationUuid:podcast:episodeCount:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 136))();
}

NSString sub_1434D0()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_3BBFD8 = (uint64_t)result;
  return result;
}

id static UIMenuIdentifier.notificationSettings.getter()
{
  return sub_143930(&qword_3B0110, (id *)&qword_3BBFD8);
}

NSString sub_143520()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_3BBFE0 = (uint64_t)result;
  return result;
}

id static UIMenuIdentifier.station.getter()
{
  return sub_143930(&qword_3B0118, (id *)&qword_3BBFE0);
}

NSString sub_143570()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_3BBFE8 = (uint64_t)result;
  return result;
}

id static UIMenuIdentifier.subscribe.getter()
{
  return sub_143930(&qword_3B0120, (id *)&qword_3BBFE8);
}

NSString sub_1435C0()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_3BBFF0 = (uint64_t)result;
  return result;
}

id static UIMenuIdentifier.import.getter()
{
  return sub_143930(&qword_3B0128, (id *)&qword_3BBFF0);
}

NSString sub_143610()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_3BBFF8 = (uint64_t)result;
  return result;
}

id static UIMenuIdentifier.viewOptions.getter()
{
  return sub_143930(&qword_3B0130, (id *)&qword_3BBFF8);
}

NSString sub_143660()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_3BC000 = (uint64_t)result;
  return result;
}

id static UIMenuIdentifier.sortOptions.getter()
{
  return sub_143930(&qword_3B0138, (id *)&qword_3BC000);
}

NSString sub_1436B0()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_3BC008 = (uint64_t)result;
  return result;
}

id static UIMenuIdentifier.controls.getter()
{
  return sub_143930(&qword_3B0140, (id *)&qword_3BC008);
}

NSString sub_143700()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_3BC010 = (uint64_t)result;
  return result;
}

id static UIMenuIdentifier.play.getter()
{
  return sub_143930(&qword_3B0148, (id *)&qword_3BC010);
}

NSString sub_143750()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_3BC018 = (uint64_t)result;
  return result;
}

id static UIMenuIdentifier.volume.getter()
{
  return sub_143930(&qword_3B0150, (id *)&qword_3BC018);
}

NSString sub_1437A0()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_3BC020 = (uint64_t)result;
  return result;
}

id static UIMenuIdentifier.playbackSpeed.getter()
{
  return sub_143930(&qword_3B0158, (id *)&qword_3BC020);
}

NSString sub_1437F0()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_3BC028 = (uint64_t)result;
  return result;
}

id static UIMenuIdentifier.account.getter()
{
  return sub_143930(&qword_3B0160, (id *)&qword_3BC028);
}

NSString sub_143840()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_3BC030 = (uint64_t)result;
  return result;
}

id static UIMenuIdentifier.privacyInfoIdentifier.getter()
{
  return sub_143930(&qword_3B0168, (id *)&qword_3BC030);
}

NSString sub_143890()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_3BC038 = (uint64_t)result;
  return result;
}

id static UIMenuIdentifier.resetIdentifierIdentifier.getter()
{
  return sub_143930(&qword_3B0170, (id *)&qword_3BC038);
}

NSString sub_1438E0()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_3BC040 = (uint64_t)result;
  return result;
}

id static UIMenuIdentifier.reportAConcernIdentifier.getter()
{
  return sub_143930(&qword_3B0178, (id *)&qword_3BC040);
}

id sub_143930(_QWORD *a1, id *a2)
{
  if (*a1 != -1)
    swift_once();
  return *a2;
}

uint64_t sub_143968()
{
  uint64_t result;

  result = Selector.init(_:)(0x4368736572666572, 0xEE00646E616D6D6FLL);
  qword_3BC048 = result;
  return result;
}

uint64_t static MenuSelectors.refreshCommand.getter()
{
  if (qword_3B0180 != -1)
    swift_once(&qword_3B0180, sub_143968);
  return qword_3BC048;
}

ValueMetadata *type metadata accessor for MenuSelectors()
{
  return &type metadata for MenuSelectors;
}

double UpNextScoringWeights.percentOfTotalListeningWeight.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 24);
}

double UpNextScoringWeights.modifiedDateWeight.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 32);
}

double *UpNextScoringWeights.__allocating_init(percentOfEpisodesFromShowPlayedWeight:percentOfTotalListeningWeight:modifiedDateWeight:)(double a1, double a2, double a3)
{
  uint64_t v3;
  double *result;

  result = (double *)swift_allocObject(v3, 40, 7);
  result[2] = a1;
  result[3] = a2;
  result[4] = a3;
  return result;
}

double *UpNextScoringWeights.init(percentOfEpisodesFromShowPlayedWeight:percentOfTotalListeningWeight:modifiedDateWeight:)(double a1, double a2, double a3)
{
  double *v3;
  double *result;

  result = v3;
  v3[2] = a1;
  v3[3] = a2;
  v3[4] = a3;
  return result;
}

double *UpNextScoringWeights.__allocating_init(deserializing:using:)(char *a1, uint64_t a2)
{
  return sub_143AA4(a1, a2);
}

uint64_t UpNextScoringWeights.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 40, 7);
}

double *sub_143A7C@<X0>(char *a1@<X0>, uint64_t a2@<X1>, double **a3@<X8>)
{
  uint64_t v3;
  double *result;

  result = sub_143AA4(a1, a2);
  if (!v3)
    *a3 = result;
  return result;
}

double *sub_143AA4(char *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  double v14;
  char v15;
  char v16;
  void (*v17)(char *, uint64_t);
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  char v22;
  char v23;
  double v24;
  uint64_t v25;
  double v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t ScoringWeights;
  double *result;
  uint64_t v32;

  v32 = a2;
  v3 = type metadata accessor for JSONObject(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (char *)&v32 - v8;
  __chkstk_darwin(v10);
  v12 = (char *)&v32 - v11;
  v13 = JSONObject.subscript.getter(0xD000000000000025, 0x8000000000310840);
  v14 = COERCE_DOUBLE(JSONObject.double.getter(v13));
  v16 = v15;
  v17 = *(void (**)(char *, uint64_t))(v4 + 8);
  v17(v12, v3);
  v18 = 0.0;
  if ((v16 & 1) != 0)
    v19 = 0.0;
  else
    v19 = v14;
  v20 = JSONObject.subscript.getter(0xD00000000000001DLL, 0x8000000000310870);
  v21 = COERCE_DOUBLE(JSONObject.double.getter(v20));
  v23 = v22;
  v17(v9, v3);
  if ((v23 & 1) != 0)
    v24 = 0.0;
  else
    v24 = v21;
  v25 = JSONObject.subscript.getter(0xD000000000000012, 0x8000000000310890);
  v26 = COERCE_DOUBLE(JSONObject.double.getter(v25));
  v28 = v27;
  v29 = type metadata accessor for JSONContext(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 8))(v32, v29);
  v17(a1, v3);
  v17(v6, v3);
  if ((v28 & 1) == 0)
    v18 = v26;
  ScoringWeights = type metadata accessor for UpNextScoringWeights();
  result = (double *)swift_allocObject(ScoringWeights, 40, 7);
  result[2] = v19;
  result[3] = v24;
  result[4] = v18;
  return result;
}

uint64_t type metadata accessor for UpNextScoringWeights()
{
  return objc_opt_self(_TtC8ShelfKit20UpNextScoringWeights);
}

uint64_t method lookup function for UpNextScoringWeights(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for UpNextScoringWeights);
}

uint64_t dispatch thunk of UpNextScoringWeights.__allocating_init(percentOfEpisodesFromShowPlayedWeight:percentOfTotalListeningWeight:modifiedDateWeight:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t ActionRunner.perform(_:withMetrics:asPartOf:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  char v27;
  uint64_t result;
  void (*v29)(char *, uint64_t, uint64_t);
  int v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  Swift::String v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  Swift::String v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  Swift::String v56;
  char *boxed_opaque_existential_2Tm;
  Swift::String v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD v78[3];
  uint64_t v79;

  v76 = a4;
  v77 = a5;
  v74 = a1;
  v75 = a3;
  v6 = type metadata accessor for ActionOutcome(0);
  v67 = *(_QWORD *)(v6 - 8);
  v68 = v6;
  __chkstk_darwin(v6);
  v66 = (char *)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for LogMessage.StringInterpolation(0);
  __chkstk_darwin(v8);
  v70 = (char *)&v64 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for OSLogger(0);
  v72 = *(_QWORD *)(v10 - 8);
  v73 = v10;
  __chkstk_darwin(v10);
  v71 = (char *)&v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B7718);
  __chkstk_darwin(v12);
  v14 = (char *)&v64 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = type metadata accessor for MetricsFieldsContext(0);
  v69 = *(_QWORD *)(v65 - 8);
  v15 = __chkstk_darwin(v65);
  v64 = (char *)&v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v18 = (char *)&v64 - v17;
  v19 = type metadata accessor for ActionMetricsBehavior(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)&v64 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for DispatchPredicate(0);
  v24 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v26 = (char **)((char *)&v64 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_676C8();
  *v26 = static OS_dispatch_queue.main.getter();
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v24 + 104))(v26, enum case for DispatchPredicate.onQueue(_:), v23);
  v27 = _dispatchPreconditionTest(_:)(v26);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v24 + 8))(v26, v23);
  if ((v27 & 1) != 0)
  {
    static PageRenderEvent.willPerformAction()(result);
    v29 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 16);
    v29(v22, a2, v19);
    v30 = (*(uint64_t (**)(char *, uint64_t))(v20 + 88))(v22, v19);
    if (v30 == enum case for ActionMetricsBehavior.notProcessed(_:))
      return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v77 + 8))(v74, v75, v76);
    if (v30 != enum case for ActionMetricsBehavior.fromAction(_:))
    {
      v50 = a2;
      v51 = v71;
      ((void (*)(void))static OSLogger.actions.getter)();
      v52 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0B10);
      v53 = *(_QWORD *)(type metadata accessor for LogMessage(0) - 8);
      v54 = swift_allocObject(v52, ((*(unsigned __int8 *)(v53 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80))+ *(_QWORD *)(v53 + 72), *(unsigned __int8 *)(v53 + 80) | 7);
      *(_OWORD *)(v54 + 16) = xmmword_2EA0D0;
      v55 = v70;
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(30, 1);
      v56._object = (void *)0x80000000003108B0;
      v56._countAndFlagsBits = 0xD00000000000001DLL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v56);
      v79 = v19;
      boxed_opaque_existential_2Tm = (char *)__swift_allocate_boxed_opaque_existential_2Tm(v78);
      v29(boxed_opaque_existential_2Tm, v50, v19);
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v78);
      sub_1459C((uint64_t)v78, (uint64_t *)&unk_3BC540);
      v58._countAndFlagsBits = 33;
      v58._object = (void *)0xE100000000000000;
      LogMessage.StringInterpolation.appendLiteral(_:)(v58);
      LogMessage.init(stringInterpolation:)(v55);
      v59 = v73;
      Logger.error(_:)(v54, v73, &protocol witness table for OSLogger);
      swift_bridgeObjectRelease(v54);
      (*(void (**)(char *, uint64_t))(v72 + 8))(v51, v59);
      __swift_instantiateConcreteTypeFromMangledName(&qword_3BC108);
      v60 = v66;
      (*(void (**)(char *, _QWORD, uint64_t))(v67 + 104))(v66, enum case for ActionOutcome.unsupported(_:), v68);
      v61 = Promise.__allocating_init(value:)(v60);
      (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
      return v61;
    }
    v32 = v65;
    v33 = v75;
    BaseObjectGraph.injectIfAvailable<A>(_:)(v65, v65);
    v34 = v69;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v69 + 48))(v14, 1, v32) == 1)
    {
      v35 = sub_1459C((uint64_t)v14, &qword_3B7718);
      v36 = v71;
      static OSLogger.actions.getter(v35);
      v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0B10);
      v38 = *(_QWORD *)(type metadata accessor for LogMessage(0) - 8);
      v39 = swift_allocObject(v37, ((*(unsigned __int8 *)(v38 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80))+ *(_QWORD *)(v38 + 72), *(unsigned __int8 *)(v38 + 80) | 7);
      *(_OWORD *)(v39 + 16) = xmmword_2EA0D0;
      v40 = v70;
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(52, 1);
      v41._countAndFlagsBits = 0xD000000000000033;
      v41._object = (void *)0x80000000003108D0;
      LogMessage.StringInterpolation.appendLiteral(_:)(v41);
      v42 = v74;
      v43 = v74[3];
      v44 = __swift_project_boxed_opaque_existential_1(v74, v43);
      v79 = v43;
      v45 = __swift_allocate_boxed_opaque_existential_2Tm(v78);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v43 - 8) + 16))(v45, v44, v43);
      LogMessage.StringInterpolation.appendInterpolation(sensitive:)(v78);
      sub_1459C((uint64_t)v78, (uint64_t *)&unk_3BC540);
      v46._countAndFlagsBits = 46;
      v46._object = (void *)0xE100000000000000;
      LogMessage.StringInterpolation.appendLiteral(_:)(v46);
      LogMessage.init(stringInterpolation:)(v40);
      v47 = v73;
      Logger.warning(_:)(v39, v73, &protocol witness table for OSLogger);
      swift_bridgeObjectRelease(v39);
      v48 = v36;
      v34 = v69;
      v49 = (*(uint64_t (**)(char *, uint64_t))(v72 + 8))(v48, v47);
      v18 = v64;
      MetricsFieldsContext.init()(v49);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v18, v14, v32);
      v42 = v74;
    }
    v63 = v76;
    v62 = v77;
    (*(void (**)(_QWORD *, char *, uint64_t, uint64_t, uint64_t))(v77 + 16))(v42, v18, v33, v76, v77);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v18, v32);
    return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v62 + 8))(v42, v33, v63);
  }
  __break(1u);
  return result;
}

uint64_t dispatch thunk of ActionRunner.processMetrics(of:using:asPartOf:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

uint64_t UIResponder.nearestActionRunner.getter()
{
  void *v0;
  void *v1;
  uint64_t ObjectType;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  id v7;
  uint64_t v8;
  id v9;
  void *v10;

  v1 = v0;
  ObjectType = swift_getObjectType(v0);
  v3 = swift_conformsToProtocol2(ObjectType, &protocol descriptor for ActionRunnerProvider);
  if (v3)
    v4 = v3;
  else
    v4 = 0;
  if (!v3)
    v0 = 0;
  if (!v0
    || (v5 = swift_getObjectType(v0),
        v6 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8),
        v7 = v1,
        v8 = v6(v5, v4),
        v7,
        !v8))
  {
    v9 = objc_msgSend(v1, "nextResponder");
    if (v9)
    {
      v10 = v9;
      v8 = UIResponder.nearestActionRunner.getter();

    }
    else
    {
      return 0;
    }
  }
  return v8;
}

uint64_t WriteReviewPresenter.review.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  v3 = v1 + OBJC_IVAR____TtC8ShelfKit20WriteReviewPresenter_review;
  swift_beginAccess(v3, v5, 0, 0);
  return sub_14440C(v3, a1);
}

uint64_t sub_14440C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BC110);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t WriteReviewPresenter.review.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  v3 = v1 + OBJC_IVAR____TtC8ShelfKit20WriteReviewPresenter_review;
  swift_beginAccess(v3, v5, 33, 0);
  sub_1444AC(a1, v3);
  return swift_endAccess(v5);
}

uint64_t sub_1444AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BC110);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*WriteReviewPresenter.review.modify(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC8ShelfKit20WriteReviewPresenter_review, a1, 33, 0);
  return j__swift_endAccess;
}

_QWORD *WriteReviewPresenter.__allocating_init(adamId:libraryDataProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;
  char *v10;
  uint64_t v11;
  uint64_t ObjectType;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v9 = (_QWORD *)swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v10 = (char *)v9 + OBJC_IVAR____TtC8ShelfKit20WriteReviewPresenter_review;
  v11 = type metadata accessor for PodcastReview(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  v9[2] = a1;
  v9[3] = a2;
  ObjectType = swift_getObjectType();
  v13 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 72))(ObjectType, a4);
  v15 = v14;
  swift_unknownObjectRelease(a3);
  v9[4] = v13;
  v9[5] = v15;
  return v9;
}

_QWORD *WriteReviewPresenter.init(adamId:libraryDataProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  char *v10;
  uint64_t v11;
  uint64_t ObjectType;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = v4;
  v10 = (char *)v5 + OBJC_IVAR____TtC8ShelfKit20WriteReviewPresenter_review;
  v11 = type metadata accessor for PodcastReview(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  v5[2] = a1;
  v5[3] = a2;
  ObjectType = swift_getObjectType();
  v13 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 72))(ObjectType, a4);
  v15 = v14;
  swift_unknownObjectRelease(a3);
  v5[4] = v13;
  v5[5] = v15;
  return v5;
}

uint64_t WriteReviewPresenter.fetchExistingReview(completion:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t ObjectType;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void (*v10)(uint64_t, uint64_t, uint64_t (*)(uint64_t), _QWORD *, uint64_t, uint64_t);

  v5 = v2[5];
  ObjectType = swift_getObjectType();
  v7 = v2[2];
  v8 = v2[3];
  v9 = (_QWORD *)swift_allocObject(&unk_3826A8, 40, 7);
  v9[2] = v2;
  v9[3] = a1;
  v9[4] = a2;
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t (*)(uint64_t), _QWORD *, uint64_t, uint64_t))(v5 + 8);
  swift_retain();
  swift_retain();
  v10(v7, v8, sub_1447D0, v9, ObjectType, v5);
  return swift_release(v9);
}

uint64_t sub_144734(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5;
  _BYTE v7[24];

  v5 = a2 + OBJC_IVAR____TtC8ShelfKit20WriteReviewPresenter_review;
  swift_beginAccess(a2 + OBJC_IVAR____TtC8ShelfKit20WriteReviewPresenter_review, v7, 33, 0);
  sub_144A34(a1, v5);
  swift_endAccess(v7);
  return a3(a1);
}

uint64_t sub_1447A4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1447D0(uint64_t a1)
{
  uint64_t v1;

  return sub_144734(a1, *(_QWORD *)(v1 + 16), *(uint64_t (**)(uint64_t))(v1 + 24));
}

uint64_t WriteReviewPresenter.saveReview(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;

  v4 = v3;
  result = PodcastReview.validate()();
  if (!v9)
  {
    v10 = v4[5];
    ObjectType = swift_getObjectType();
    return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 16))(v4[2], v4[3], a1, a2, a3, ObjectType, v10);
  }
  return result;
}

uint64_t WriteReviewPresenter.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 32));
  sub_144890(v0 + OBJC_IVAR____TtC8ShelfKit20WriteReviewPresenter_review);
  return v0;
}

uint64_t sub_144890(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BC110);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t WriteReviewPresenter.__deallocating_deinit()
{
  _QWORD *v0;

  swift_bridgeObjectRelease();
  swift_unknownObjectRelease(v0[4]);
  sub_144890((uint64_t)v0 + OBJC_IVAR____TtC8ShelfKit20WriteReviewPresenter_review);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_144910()
{
  return type metadata accessor for WriteReviewPresenter(0);
}

uint64_t type metadata accessor for WriteReviewPresenter(uint64_t a1)
{
  uint64_t result;

  result = qword_3BC140;
  if (!qword_3BC140)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for WriteReviewPresenter);
  return result;
}

void sub_144954(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = &unk_2F7888;
  v4[1] = &unk_2F7888;
  sub_1449E0(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(v2 - 8) + 64;
    swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 80);
  }
}

uint64_t method lookup function for WriteReviewPresenter(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for WriteReviewPresenter);
}

uint64_t dispatch thunk of WriteReviewPresenter.__allocating_init(adamId:libraryDataProvider:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

void sub_1449E0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_3BC150)
  {
    v2 = type metadata accessor for PodcastReview(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_3BC150);
  }
}

uint64_t sub_144A34(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BC110);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t HighlightsPresenter.__allocating_init(asPartOf:with:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  swift_allocObject(v1, 56, 7);
  v3 = sub_145024();
  swift_release(a1);
  return v3;
}

uint64_t HighlightsPresenter.init(asPartOf:with:)(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_145024();
  swift_release(a1);
  return v2;
}

uint64_t HighlightsPresenter.interactionContextPage.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = type metadata accessor for InteractionContext.Page(0);
  return swift_storeEnumTagMultiPayload(a1, v2, 10);
}

Swift::Void __swiftcall HighlightsPresenter.viewDidLoad()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  uint64_t v13;
  uint64_t ObjectType;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::String v23;
  int v24;
  char v25;
  id v26;
  Swift::String v27;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2B18);
  __chkstk_darwin(v2);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BC1E0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v27._object = (void *)0xE000000000000000;
  v10._object = (void *)0x8000000000310960;
  v10._countAndFlagsBits = 0xD000000000000015;
  v11._countAndFlagsBits = 0;
  v11._object = (void *)0xE000000000000000;
  v27._countAndFlagsBits = 0;
  v12 = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, (Swift::String_optional)0, (NSBundle)v9, v11, v27);

  v23 = v12;
  v24 = 0;
  v25 = 0;
  CurrentValueSubject.send(_:)();
  swift_bridgeObjectRelease();
  v13 = *(_QWORD *)(v0 + 32);
  ObjectType = swift_getObjectType();
  v23._countAndFlagsBits = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 16))(ObjectType, v13);
  v15 = sub_676C8();
  v26 = (id)static OS_dispatch_queue.main.getter(v15);
  v16 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v4, 1, 1, v16);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEA60);
  v18 = sub_32914(&qword_3BEA70, &qword_3BEA60, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v19 = sub_726D8((unint64_t *)&qword_3B2B60, 255, (void (*)(uint64_t))sub_676C8, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  Publisher.receive<A>(on:options:)(&v26, v4, v17, v15, v18, v19);
  sub_CD6CC((uint64_t)v4);

  swift_release(v23._countAndFlagsBits);
  v20 = *(_QWORD *)(v0 + 40);
  v21 = sub_32914(&qword_3BC1E8, &qword_3BC1E0, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  swift_retain();
  v22 = Publisher<>.sink(receiveValue:)(sub_145134, v20, v5, v21);
  swift_release(v20);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v1 += 16;
  swift_beginAccess(v1, &v23, 33, 0);
  AnyCancellable.store(in:)(v1);
  swift_endAccess(&v23);
  swift_release(v22);
}

uint64_t sub_144DE8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = type metadata accessor for PageContent(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ModernPage(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *a1;
  v10 = static MetricsPageType.room.getter(v9);
  v12 = v11;
  v13 = static MetricsPageID.sharedWithYou.getter();
  v15 = v14;
  v24 = v10;
  v25 = v12;
  v16._countAndFlagsBits = 95;
  v16._object = (void *)0xE100000000000000;
  String.append(_:)(v16);
  v17._countAndFlagsBits = v13;
  v17._object = v15;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  PageID.init(with:)(v24, v25);
  v18 = v8 + OBJC_IVAR____TtC8ShelfKit4Page_pageMetrics;
  swift_beginAccess(v8 + OBJC_IVAR____TtC8ShelfKit4Page_pageMetrics, &v24, 0, 0);
  v19 = &v7[*(int *)(v5 + 20)];
  v20 = type metadata accessor for PageMetrics(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v19, v18, v20);
  *(_QWORD *)&v7[*(int *)(v5 + 24)] = Page.modernShelves.getter();
  __swift_instantiateConcreteTypeFromMangledName(&qword_3B89B0);
  v21 = sub_107730((uint64_t)v7, (uint64_t)v4);
  static PageRenderContentTypes.unspecified.getter(v21);
  swift_storeEnumTagMultiPayload(v4, v2, 3);
  CurrentValueSubject.send(_:)();
  sub_145D8((uint64_t)v4, type metadata accessor for PageContent);
  return sub_145D8((uint64_t)v7, type metadata accessor for ModernPage);
}

_QWORD *HighlightsPresenter.deinit()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[2]);
  swift_unknownObjectRelease(v0[3]);
  swift_release(v0[5]);
  swift_release(v0[6]);
  return v0;
}

uint64_t HighlightsPresenter.__deallocating_deinit()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[2]);
  swift_unknownObjectRelease(v0[3]);
  swift_release(v0[5]);
  swift_release(v0[6]);
  return swift_deallocClassInstance(v0, 56, 7);
}

uint64_t sub_145024()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  int v11;
  char v12;

  v1 = v0;
  v2 = type metadata accessor for PageContent(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v1 + 16) = &_swiftEmptySetSingleton;
  *v4 = 0;
  swift_storeEnumTagMultiPayload(v4, v5, 0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B27B0);
  swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  *(_QWORD *)(v1 + 40) = CurrentValueSubject.init(_:)(v4);
  v10 = 0uLL;
  v11 = 0;
  v12 = 5;
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8770);
  swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  *(_QWORD *)(v1 + 48) = CurrentValueSubject.init(_:)(&v10);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BAFB0);
  BaseObjectGraph.inject<A>(_:)(&v10, v8, v8);
  *(_OWORD *)(v1 + 24) = v10;
  return v1;
}

uint64_t sub_145134(uint64_t *a1)
{
  return sub_144DE8(a1);
}

uint64_t sub_14513C(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_726D8(&qword_3BC2B0, a2, (void (*)(uint64_t))type metadata accessor for HighlightsPresenter, (uint64_t)&protocol conformance descriptor for HighlightsPresenter);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for HighlightsPresenter()
{
  return objc_opt_self(_TtC8ShelfKit19HighlightsPresenter);
}

uint64_t sub_145198(uint64_t a1, uint64_t a2)
{
  return sub_726D8(&qword_3BC2B8, a2, (void (*)(uint64_t))type metadata accessor for HighlightsPresenter, (uint64_t)&protocol conformance descriptor for HighlightsPresenter);
}

uint64_t method lookup function for HighlightsPresenter(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for HighlightsPresenter);
}

void sub_1451D0(uint64_t (*a1)(id *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  int64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int64_t v27;
  char v28;
  int64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[5];
  id v34;

  v4 = v3;
  v5 = a3;
  if ((a3 & 0xC000000000000001) != 0)
  {
    if (a3 < 0)
      v7 = a3;
    else
      v7 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v8 = __CocoaSet.makeIterator()(v7);
    v9 = sub_327F8(0, &qword_3BC3C0, _UITab_ptr);
    v10 = sub_14CC70();
    v11 = Set.Iterator.init(_cocoa:)(v33, v8, v9, v10);
    v5 = v33[0];
    v31 = v33[1];
    v12 = v33[2];
    v13 = v33[3];
    v14 = v33[4];
  }
  else
  {
    v15 = -1 << *(_BYTE *)(a3 + 32);
    v31 = a3 + 56;
    v16 = ~v15;
    v17 = -v15;
    if (v17 < 64)
      v18 = ~(-1 << v17);
    else
      v18 = -1;
    v14 = v18 & *(_QWORD *)(a3 + 56);
    v11 = (_QWORD *)swift_bridgeObjectRetain();
    v12 = v16;
    v13 = 0;
  }
  v30 = (unint64_t)(v12 + 64) >> 6;
  if ((v5 & 0x8000000000000000) == 0)
    goto LABEL_14;
LABEL_11:
  v19 = __CocoaSet.Iterator.next()(v11);
  if (!v19)
    goto LABEL_39;
  v20 = v19;
  v32 = v19;
  v21 = sub_327F8(0, &qword_3BC3C0, _UITab_ptr);
  swift_unknownObjectRetain(v20);
  swift_dynamicCast(&v34, &v32, (char *)&type metadata for Swift.AnyObject + 8, v21, 7);
  v22 = v34;
  swift_unknownObjectRelease(v20);
  v23 = v13;
  v24 = v14;
  if (!v22)
    goto LABEL_39;
  while (1)
  {
    v34 = v22;
    v28 = a1(&v34);
    if (v4)
    {

      goto LABEL_39;
    }
    if ((v28 & 1) != 0)
      goto LABEL_39;

    v13 = v23;
    v14 = v24;
    if (v5 < 0)
      goto LABEL_11;
LABEL_14:
    if (!v14)
      break;
    v24 = (v14 - 1) & v14;
    v25 = __clz(__rbit64(v14)) | (v13 << 6);
    v23 = v13;
LABEL_27:
    v22 = *(id *)(*(_QWORD *)(v5 + 48) + 8 * v25);
    if (!v22)
      goto LABEL_39;
  }
  v23 = v13 + 1;
  if (__OFADD__(v13, 1))
  {
    __break(1u);
    return;
  }
  if (v23 >= v30)
    goto LABEL_39;
  v26 = *(_QWORD *)(v31 + 8 * v23);
  if (v26)
  {
LABEL_26:
    v24 = (v26 - 1) & v26;
    v25 = __clz(__rbit64(v26)) + (v23 << 6);
    goto LABEL_27;
  }
  v27 = v13 + 2;
  if (v13 + 2 >= v30)
    goto LABEL_39;
  v26 = *(_QWORD *)(v31 + 8 * v27);
  if (v26)
    goto LABEL_25;
  v27 = v13 + 3;
  if (v13 + 3 >= v30)
    goto LABEL_39;
  v26 = *(_QWORD *)(v31 + 8 * v27);
  if (v26)
    goto LABEL_25;
  v27 = v13 + 4;
  if (v13 + 4 >= v30)
    goto LABEL_39;
  v26 = *(_QWORD *)(v31 + 8 * v27);
  if (v26)
  {
LABEL_25:
    v23 = v27;
    goto LABEL_26;
  }
  v23 = v13 + 5;
  if (v13 + 5 >= v30)
    goto LABEL_39;
  v26 = *(_QWORD *)(v31 + 8 * v23);
  if (v26)
    goto LABEL_26;
  v29 = v13 + 6;
  while (v30 != v29)
  {
    v26 = *(_QWORD *)(v31 + 8 * v29++);
    if (v26)
    {
      v23 = v29 - 1;
      goto LABEL_26;
    }
  }
LABEL_39:
  sub_15498(v5);
}

void sub_1454E8(void **a1, _QWORD *a2)
{
  void *v2;
  void **v3;
  void *v4;
  id v5;
  _BYTE v6[24];

  v2 = *a1;
  v3 = (void **)(*a2 + OBJC_IVAR____TtC8ShelfKit29LibraryTabElementGroupManager_tabElementGroup);
  swift_beginAccess(v3, v6, 1, 0);
  v4 = *v3;
  *v3 = v2;
  v5 = v2;

}

id sub_145548()
{
  uint64_t v0;
  id *v1;
  _BYTE v3[24];

  v1 = (id *)(v0 + OBJC_IVAR____TtC8ShelfKit29LibraryTabElementGroupManager_tabElementGroup);
  swift_beginAccess(v0 + OBJC_IVAR____TtC8ShelfKit29LibraryTabElementGroupManager_tabElementGroup, v3, 0, 0);
  return *v1;
}

void sub_14558C(void *a1)
{
  uint64_t v1;
  void **v3;
  void *v4;
  _BYTE v5[24];

  v3 = (void **)(v1 + OBJC_IVAR____TtC8ShelfKit29LibraryTabElementGroupManager_tabElementGroup);
  swift_beginAccess(v3, v5, 1, 0);
  v4 = *v3;
  *v3 = a1;

}

uint64_t (*sub_1455DC(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC8ShelfKit29LibraryTabElementGroupManager_tabElementGroup, a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t sub_145620(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t Strong;
  __n128 v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE v34[6];
  __int16 v35;
  _BYTE v36[24];
  Swift::String v37;

  v6 = type metadata accessor for ActionMetrics(0);
  __chkstk_darwin(v6);
  v8 = &v34[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for FlowDestination(0);
  __chkstk_darwin(v9);
  v11 = &v34[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  a3 += 16;
  swift_beginAccess(a3, v36, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a3);
  if (!Strong)
    return 0;
  v14 = (char *)Strong;
  if (!a2
    || String.count.getter(a1, a2, v13) <= 0
    || (v15 = *(_QWORD *)&v14[OBJC_IVAR____TtC8ShelfKit29LibraryTabElementGroupManager_libraryActionController + 24],
        v16 = *(_QWORD *)&v14[OBJC_IVAR____TtC8ShelfKit29LibraryTabElementGroupManager_libraryActionController + 32],
        __swift_project_boxed_opaque_existential_1(&v14[OBJC_IVAR____TtC8ShelfKit29LibraryTabElementGroupManager_libraryActionController], v15), (v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 256))(a1, a2, v15, v16)) == 0))
  {

    return 0;
  }
  v18 = v17;
  v19 = *(_QWORD *)(v17 + 24);
  *v11 = *(_QWORD *)(v17 + 16);
  v11[1] = v19;
  swift_storeEnumTagMultiPayload(v11, v9, 14);
  v20 = (void *)objc_opt_self(NSBundle);
  swift_bridgeObjectRetain();
  v21 = objc_msgSend(v20, "mainBundle");
  v37._object = (void *)0xE000000000000000;
  v22._object = (void *)0x8000000000310BD0;
  v22._countAndFlagsBits = 0xD000000000000010;
  v23._countAndFlagsBits = 0;
  v23._object = (void *)0xE000000000000000;
  v37._countAndFlagsBits = 0;
  v24 = NSLocalizedString(_:tableName:bundle:value:comment:)(v22, (Swift::String_optional)0, (NSBundle)v21, v23, v37);

  v35 = 0;
  static ActionMetrics.notInstrumented.getter(v25);
  v26 = type metadata accessor for FlowAction(0);
  swift_allocObject(v26, *(unsigned int *)(v26 + 48), *(unsigned __int16 *)(v26 + 52));
  v27 = FlowAction.init(_:id:title:presentationContext:animationBehavior:presentationStyle:destinationPageHeader:actionMetrics:)((uint64_t)v11, 0, 0, v24._countAndFlagsBits, (uint64_t)v24._object, (char *)&v35 + 1, 0, 48, (char *)&v35, (uint64_t)v8);
  v28 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3BC560);
  v29 = swift_allocObject(v28, 72, 7);
  *(_OWORD *)(v29 + 16) = xmmword_2EA0D0;
  *(_QWORD *)(v29 + 56) = v26;
  *(_QWORD *)(v29 + 64) = sub_109F30((unint64_t *)&qword_3B0C40, (void (*)(uint64_t))type metadata accessor for FlowAction);
  *(_QWORD *)(v29 + 32) = v27;
  swift_retain();
  v30 = swift_retain();
  static ActionMetrics.notInstrumented.getter(v30);
  v31 = type metadata accessor for TabChangeAction(0);
  swift_allocObject(v31, *(unsigned int *)(v31 + 48), *(unsigned __int16 *)(v31 + 52));
  v32 = sub_2B354C(0, 0, v18, (_QWORD *)v29, 0, 0, 0, 0, 0, (uint64_t)v8);

  swift_release(v27);
  swift_release_n(v18, 2);
  return v32;
}

uint64_t LibraryTabElementGroupManager.__allocating_init(asPartOf:)(uint64_t a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return LibraryTabElementGroupManager.init(asPartOf:)(a1);
}

uint64_t LibraryTabElementGroupManager.init(asPartOf:)(uint64_t a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  id v15;
  char *v16;
  NSString v17;
  NSString v18;
  Class isa;
  id v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  id v45;
  NSString v46;
  NSString v47;
  Class v48;
  id v49;
  objc_class *v50;
  char *v51;
  id *v52;
  id v53;
  char *v54;
  void *v55;
  uint64_t v56;
  id v57;
  id v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD v69[2];
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  id v79;
  objc_super v80;
  __int128 v81[3];

  v72 = a1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BC388);
  v73 = *(_QWORD *)(v2 - 8);
  v74 = v2;
  __chkstk_darwin(v2);
  v71 = (char *)v69 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BC390);
  __chkstk_darwin(v4);
  v76 = (uint64_t)v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for TabMenu.Item(0);
  v77 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)v69 - v10;
  __chkstk_darwin(v12);
  v70 = (uint64_t)v69 - v13;
  swift_unknownObjectWeakInit(&v1[OBJC_IVAR____TtC8ShelfKit29LibraryTabElementGroupManager_tabBarController], 0);
  *(_QWORD *)&v1[OBJC_IVAR____TtC8ShelfKit29LibraryTabElementGroupManager_subscription] = 0;
  v14 = _swiftEmptyArrayStorage;
  *(_QWORD *)&v1[OBJC_IVAR____TtC8ShelfKit29LibraryTabElementGroupManager_libraryItems] = _swiftEmptyArrayStorage;
  *(_QWORD *)&v1[OBJC_IVAR____TtC8ShelfKit29LibraryTabElementGroupManager_stationItems] = _swiftEmptyArrayStorage;
  v75 = OBJC_IVAR____TtC8ShelfKit29LibraryTabElementGroupManager_stationsGroup;
  v15 = objc_allocWithZone((Class)_UITabElementGroup);
  v16 = v1;
  v17 = String._bridgeToObjectiveC()();
  v18 = String._bridgeToObjectiveC()();
  v69[1] = sub_327F8(0, &qword_3BC3C0, _UITab_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  v20 = objc_msgSend(v15, "initWithIdentifier:title:image:children:", v17, v18, 0, isa);

  *(_QWORD *)&v1[v75] = v20;
  v75 = (uint64_t)v16;
  v16[OBJC_IVAR____TtC8ShelfKit29LibraryTabElementGroupManager_isPerformingSidebarUpdate] = 0;
  v21 = TabMenu.Group.items(for:)(0, 0);
  v22 = TabMenu.Group.items(for:)(0, 1);
  *(_QWORD *)&v81[0] = v21;
  sub_1E406C((uint64_t)v22);
  v23 = *(_QWORD *)&v81[0];
  *(_QWORD *)&v81[0] = _swiftEmptyArrayStorage;
  v24 = *(_QWORD *)(v23 + 16);
  if (v24)
  {
    v25 = (*(unsigned __int8 *)(v77 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v77 + 80);
    v26 = *(_QWORD *)(v77 + 72);
    v69[0] = v23;
    v27 = v23 + v25;
    v28 = _swiftEmptyArrayStorage;
    do
    {
      sub_963D4(v27, (uint64_t)v11);
      if (*(_QWORD *)&v11[*(int *)(v6 + 28)] == 7)
      {
        sub_12B1D0((uint64_t)v11, (uint64_t)v8);
        if ((swift_isUniquelyReferenced_nonNull_native(v28) & 1) == 0)
          sub_180924(0, v28[2] + 1, 1);
        v28 = *(_QWORD **)&v81[0];
        v30 = *(_QWORD *)(*(_QWORD *)&v81[0] + 16);
        v29 = *(_QWORD *)(*(_QWORD *)&v81[0] + 24);
        if (v30 >= v29 >> 1)
        {
          sub_180924(v29 > 1, v30 + 1, 1);
          v28 = *(_QWORD **)&v81[0];
        }
        v28[2] = v30 + 1;
        sub_12B1D0((uint64_t)v8, (uint64_t)v28 + v25 + v30 * v26);
      }
      else
      {
        sub_145D8((uint64_t)v11, type metadata accessor for TabMenu.Item);
      }
      v27 += v26;
      --v24;
    }
    while (v24);
    v14 = *(_QWORD **)&v81[0];
  }
  swift_bridgeObjectRelease();
  v31 = v76;
  v32 = v77;
  if (v14[2])
  {
    sub_963D4((uint64_t)v14 + ((*(unsigned __int8 *)(v77 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v77 + 80)), v76);
    v33 = 0;
  }
  else
  {
    v33 = 1;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v32 + 56))(v31, v33, 1, v6);
  swift_release(v14);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v31, 1, v6);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v35 = v70;
    sub_12B1D0(v31, v70);
    v36 = v72;
    v37 = (char *)v75;
    *(_QWORD *)(v75 + OBJC_IVAR____TtC8ShelfKit29LibraryTabElementGroupManager_objectGraph) = v72;
    v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BC3D8);
    swift_retain();
    BaseObjectGraph.inject<A>(_:)(v81, v38, v38);
    *(_OWORD *)&v37[OBJC_IVAR____TtC8ShelfKit29LibraryTabElementGroupManager_actionRunner] = v81[0];
    v39 = (void *)objc_opt_self(NSUserDefaults);
    swift_retain();
    v40 = sub_20E104(v36, (uint64_t)objc_msgSend(v39, "standardUserDefaults"), 1);
    swift_release(v36);
    *(_QWORD *)&v37[OBJC_IVAR____TtC8ShelfKit29LibraryTabElementGroupManager_tabMenuProvider] = v40;
    v41 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BC3F0);
    BaseObjectGraph.inject<A>(_:)(v81, v41, v41);
    sub_F4D8(v81, (uint64_t)&v37[OBJC_IVAR____TtC8ShelfKit29LibraryTabElementGroupManager_libraryActionController]);
    v42 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BC400);
    BaseObjectGraph.inject<A>(_:)(v81, v42, v42);
    sub_F4D8(v81, (uint64_t)&v37[OBJC_IVAR____TtC8ShelfKit29LibraryTabElementGroupManager_episodeController]);
    NavigationTab.stringValue.getter(*(_QWORD *)(v35 + *(int *)(v6 + 28)));
    v43 = swift_bridgeObjectRetain();
    v44 = (void *)Glyph.image.getter(v43);
    v45 = objc_allocWithZone((Class)_UITabElementGroup);
    v46 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v47 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v48 = Array._bridgeToObjectiveC()().super.isa;
    v49 = objc_msgSend(v45, "initWithIdentifier:title:image:children:", v46, v47, v44, v48);

    *(_QWORD *)&v37[OBJC_IVAR____TtC8ShelfKit29LibraryTabElementGroupManager_tabElementGroup] = v49;
    v50 = (objc_class *)type metadata accessor for LibraryTabElementGroupManager();
    v80.receiver = v37;
    v80.super_class = v50;
    v51 = (char *)objc_msgSendSuper2(&v80, "init");
    v52 = (id *)&v51[OBJC_IVAR____TtC8ShelfKit29LibraryTabElementGroupManager_tabElementGroup];
    swift_beginAccess(&v51[OBJC_IVAR____TtC8ShelfKit29LibraryTabElementGroupManager_tabElementGroup], v81, 0, 0);
    v53 = *v52;
    v54 = v51;
    objc_msgSend(v53, "_setSidebarAppearance:", 2);
    objc_msgSend(*v52, "_setTabBarPlacement:", 4);
    objc_msgSend(*v52, "_setAllowsReordering:", 1);
    objc_msgSend(*v52, "_setDelegate:", v54);
    v55 = *(void **)&v54[OBJC_IVAR____TtC8ShelfKit29LibraryTabElementGroupManager_stationsGroup];
    objc_msgSend(v55, "_setDelegate:", v54);
    objc_msgSend(v55, "_setSidebarAppearance:", 2);
    objc_msgSend(v55, "_setTabBarPlacement:", 4);
    objc_msgSend(v55, "_setAllowsReordering:", 1);
    v56 = sub_327F8(0, (unint64_t *)&unk_3BC410, UITabBarController_ptr);
    BaseObjectGraph.inject<A>(_:)(&v79, v56, v56);
    v57 = v79;
    v58 = objc_msgSend(v79, "_uip_sidebar");
    objc_msgSend(v58, "_setDelegate:", v54);

    swift_unknownObjectWeakAssign(&v54[OBJC_IVAR____TtC8ShelfKit29LibraryTabElementGroupManager_tabBarController], v57);
    v59 = (void *)sub_20AD78();
    v79 = v59;
    v60 = sub_20C3A0();
    v78 = v60;
    v61 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BA8F8);
    v62 = sub_32914(&qword_3BC420, &qword_3BA8F8, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
    v63 = v71;
    Publisher.combineLatest<A>(_:)(&v78, v61, v61, v62, v62);
    swift_release(v59);
    swift_release(v60);
    v64 = swift_allocObject(&unk_382748, 24, 7);
    swift_unknownObjectWeakInit(v64 + 16, v54);
    v65 = sub_32914(&qword_3BC428, &qword_3BC388, (uint64_t)&protocol conformance descriptor for Publishers.CombineLatest<A, B>);
    v66 = v74;
    v67 = Publisher<>.sink(receiveValue:)(sub_1499C4, v64, v74, v65);

    swift_release(v36);
    swift_release(v64);

    (*(void (**)(char *, uint64_t))(v73 + 8))(v63, v66);
    sub_145D8(v35, type metadata accessor for TabMenu.Item);
    v68 = *(_QWORD *)&v54[OBJC_IVAR____TtC8ShelfKit29LibraryTabElementGroupManager_subscription];
    *(_QWORD *)&v54[OBJC_IVAR____TtC8ShelfKit29LibraryTabElementGroupManager_subscription] = v67;
    swift_release(v68);
    return (uint64_t)v54;
  }
  return result;
}

void sub_146184(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t Strong;
  void *v8;
  unsigned __int8 v9[8];
  uint64_t v10;
  unsigned __int8 v11[8];
  uint64_t v12;
  _BYTE v13[24];

  v2 = *(_BYTE *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_BYTE *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = a2 + 16;
  swift_beginAccess(a2 + 16, v13, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v6);
  if (Strong)
  {
    v8 = (void *)Strong;
    v11[0] = v2;
    v12 = v3;
    v9[0] = v4;
    v10 = v5;
    sub_14620C(v11, v9);

  }
}

void sub_14620C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  _BYTE *v2;
  _BYTE *v3;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void *v15;
  id v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  uint64_t v20;
  _BYTE *v21;
  id v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  id v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  id v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  NSString v40;
  NSString v41;
  void *v42;
  void *v43;
  id v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  NSString v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  int v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  NSString v65;
  Class isa;
  char *v67;
  char *v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  void **v72;
  void *v73;
  char *v74;
  id v75;
  uint64_t v76;
  _QWORD *v77;
  id v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  Class v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  id v87;
  char *v88;
  void (*v89)(char *, char *);
  unint64_t v90;
  unint64_t v91;
  id v92;
  int64_t v93;
  uint64_t v94;
  _QWORD *v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  Swift::String v104;
  unint64_t v105;
  unint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  id v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  int *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  BOOL v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  BOOL v133;
  uint64_t v134;
  uint64_t v135;
  id v136;
  void *Strong;
  void *v138;
  id v139;
  id v140;
  uint64_t v141;
  void *v142;
  id v143;
  uint64_t v144;
  uint64_t v145;
  id v146;
  void *v147;
  uint64_t ObjectType;
  uint64_t v149;
  uint64_t v150;
  void *v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  id v155;
  void *v156;
  void *v157;
  uint64_t v158;
  uint64_t v159;
  id *v160;
  _QWORD *v161;
  uint64_t v162;
  id v163;
  uint64_t v164;
  char *v165;
  char *v166;
  uint64_t v167;
  id v168;
  uint64_t v169;
  char *v170;
  uint64_t v171;
  id object;
  uint64_t countAndFlagsBits;
  uint64_t v174;
  void (*v175)(char *, char *);
  char *v176;
  char *v177;
  __int128 v178;
  uint64_t v179;
  __int128 v180;
  uint64_t v181;
  _OWORD v182[2];
  uint64_t v183;
  uint64_t v184;
  _QWORD *v185;
  char v186[8];
  __int128 aBlock;
  __int128 v188;
  uint64_t (*v189)(uint64_t);
  uint64_t v190;
  Swift::String v191;
  Swift::String v192;
  Swift::String v193;
  Swift::String v194;

  v3 = v2;
  v179 = type metadata accessor for TabMenu.Item(0);
  v162 = *(_QWORD *)(v179 - 8);
  __chkstk_darwin(v179);
  v7 = (char *)&v160 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v177 = (char *)type metadata accessor for AutomationSemantics(0);
  v166 = (char *)*((_QWORD *)v177 - 1);
  __chkstk_darwin(v177);
  v170 = (char *)&v160 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v165 = (char *)&v160 - v10;
  v11 = type metadata accessor for Glyph(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v160 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  LODWORD(v176) = *a1;
  v167 = *((_QWORD *)a1 + 1);
  LODWORD(v175) = *a2;
  v169 = *((_QWORD *)a2 + 1);
  v164 = OBJC_IVAR____TtC8ShelfKit29LibraryTabElementGroupManager_isPerformingSidebarUpdate;
  v3[OBJC_IVAR____TtC8ShelfKit29LibraryTabElementGroupManager_isPerformingSidebarUpdate] = 1;
  v15 = (void *)objc_opt_self(NSBundle);
  v16 = objc_msgSend(v15, "mainBundle");
  v191._object = (void *)0xE000000000000000;
  v17._countAndFlagsBits = 0x544154535F57454ELL;
  v17._object = (void *)0xEB000000004E4F49;
  v18._countAndFlagsBits = 0;
  v18._object = (void *)0xE000000000000000;
  v191._countAndFlagsBits = 0;
  v19 = NSLocalizedString(_:tableName:bundle:value:comment:)(v17, (Swift::String_optional)0, (NSBundle)v16, v18, v191);
  countAndFlagsBits = v19._countAndFlagsBits;
  object = v19._object;

  v20 = static Glyph.Sidebar.newStation.getter();
  v174 = Glyph.image.getter(v20);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  v21 = v3;
  v171 = *(_QWORD *)&v3[OBJC_IVAR____TtC8ShelfKit29LibraryTabElementGroupManager_objectGraph];
  v178 = *(_OWORD *)&v3[OBJC_IVAR____TtC8ShelfKit29LibraryTabElementGroupManager_actionRunner];
  v168 = v3;
  v22 = objc_msgSend(v15, "mainBundle");
  v192._object = (void *)0xE000000000000000;
  v23._countAndFlagsBits = 0x544154535F57454ELL;
  v23._object = (void *)0xEB000000004E4F49;
  v24._countAndFlagsBits = 0;
  v24._object = (void *)0xE000000000000000;
  v192._countAndFlagsBits = 0;
  v25 = NSLocalizedString(_:tableName:bundle:value:comment:)(v23, (Swift::String_optional)0, (NSBundle)v22, v24, v192);

  v26 = objc_msgSend(v15, "mainBundle");
  v193._object = (void *)0xE000000000000000;
  v27._countAndFlagsBits = 0x4154535F45564153;
  v27._object = (void *)0xEC0000004E4F4954;
  v28._countAndFlagsBits = 0;
  v28._object = (void *)0xE000000000000000;
  v193._countAndFlagsBits = 0;
  v29 = NSLocalizedString(_:tableName:bundle:value:comment:)(v27, (Swift::String_optional)0, (NSBundle)v26, v28, v193);

  v30 = objc_msgSend(v15, "mainBundle");
  v31._countAndFlagsBits = 0xD00000000000001DLL;
  v194._object = (void *)0xE000000000000000;
  v31._object = (void *)0x800000000030F820;
  v32._countAndFlagsBits = 0;
  v32._object = (void *)0xE000000000000000;
  v194._countAndFlagsBits = 0;
  v33 = NSLocalizedString(_:tableName:bundle:value:comment:)(v31, (Swift::String_optional)0, (NSBundle)v30, v32, v194);

  v34 = swift_allocObject(&unk_382748, 24, 7);
  swift_unknownObjectWeakInit(v34 + 16, v21);
  v35 = type metadata accessor for TextFieldAction(0);
  swift_allocObject(v35, *(unsigned int *)(v35 + 48), *(unsigned __int16 *)(v35 + 52));
  v36 = sub_E3210(v25._countAndFlagsBits, (uint64_t)v25._object, 0, 0, v29._countAndFlagsBits, (uint64_t)v29._object, v33._countAndFlagsBits, (uint64_t)v33._object, 0, 0, 1u, 0, 0x20u, (uint64_t)sub_14CCC8, v34);
  swift_release(v34);
  v37 = swift_allocObject(&unk_382790, 48, 7);
  *(_OWORD *)(v37 + 16) = v178;
  v38 = v171;
  *(_QWORD *)(v37 + 32) = v36;
  *(_QWORD *)(v37 + 40) = v38;
  v39 = objc_allocWithZone((Class)_UITabAction);
  swift_unknownObjectRetain(v178);
  swift_retain();
  swift_retain();
  v40 = String._bridgeToObjectiveC()();
  v41 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v189 = sub_14CD04;
  v190 = v37;
  *(_QWORD *)&aBlock = _NSConcreteStackBlock;
  *((_QWORD *)&aBlock + 1) = 1107296256;
  *(_QWORD *)&v188 = sub_148954;
  *((_QWORD *)&v188 + 1) = &block_descriptor_13;
  v42 = _Block_copy(&aBlock);
  v43 = (void *)v174;
  v44 = objc_msgSend(v39, "initWithIdentifier:title:image:handler:", v40, v41, v174, v42);

  _Block_release(v42);
  v45 = v190;
  swift_release(v36);
  swift_release(v45);
  objc_msgSend(v44, "_setAllowsHiding:", 0);
  v46 = v44;
  v47 = 0xD000000000000013;
  v48 = String._bridgeToObjectiveC()();
  objc_msgSend(v46, "setAccessibilityIdentifier:", v48);

  v49 = (char *)v168;
  v50 = swift_bridgeObjectRetain();
  v51 = 0;
  v52 = sub_149578(v50, (uint64_t)v49);
  swift_bridgeObjectRelease();

  *(_QWORD *)&aBlock = v52;
  v53 = (uint64_t)v46;
  v54 = swift_bridgeObjectRetain();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v54);
  v56 = *(_QWORD *)((char *)&dword_10 + (aBlock & 0xFFFFFFFFFFFFFF8));
  v55 = *(_QWORD *)((char *)&dword_18 + (aBlock & 0xFFFFFFFFFFFFFF8));
  if (v56 >= v55 >> 1)
    goto LABEL_143;
  while (1)
  {
    v57 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v56, v53);
    specialized Array._endMutation()(v57);
    v58 = aBlock;
    swift_bridgeObjectRelease();
    v59 = *(void **)&v49[OBJC_IVAR____TtC8ShelfKit29LibraryTabElementGroupManager_stationsGroup];
    v60 = (int)v175;
    v163 = (id)v53;
    if ((_DWORD)v175)
    {
      if ((_DWORD)v175 == 1)
      {
        v61 = 0x494C5F454C544954;
        v62 = 0xED00005952415242;
      }
      else
      {
        v61 = 0x534E4F4954415453;
        v62 = 0xE800000000000000;
      }
      v63 = 0;
      v64 = 0xE000000000000000;
    }
    else
    {
      v63 = v47 + 3;
      v64 = 0x8000000000310BB0;
      v61 = 0x6F5020656C707041;
      v62 = 0xEE00737473616364;
    }
    PFLocalizedString(_:comment:)(*(Swift::String *)&v61, *(Swift::String *)&v63);
    v65 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    objc_msgSend(v59, "setTitle:", v65);

    sub_327F8(0, &qword_3BC3C0, _UITab_ptr);
    isa = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v59, "_setChildren:", isa);

    *(_QWORD *)&v178 = v58;
    countAndFlagsBits = (uint64_t)"action.newStation";
    if (v60)
    {
      v67 = v166;
      v68 = v165;
      if (v60 == 1)
      {
        v69 = 0x696C2E70756F7267;
        v70 = 0xED00007972617262;
      }
      else
      {
        v69 = 0x74732E70756F7267;
        v70 = 0xEE00736E6F697461;
      }
    }
    else
    {
      v70 = 0x8000000000310B90;
      v69 = 0xD000000000000013;
      v67 = v166;
      v68 = v165;
    }
    *((_QWORD *)&v188 + 1) = &type metadata for String;
    *(_QWORD *)&aBlock = v69;
    *((_QWORD *)&aBlock + 1) = v70;
    static AutomationSemantics.tabBar(tabName:)(&aBlock);
    __swift_destroy_boxed_opaque_existential_1(&aBlock);
    v71 = sub_327F8(0, (unint64_t *)&unk_3BC530, _UITabElementGroup_ptr);
    UIAccessibilityIdentification.setAutomationSemantics(_:)(v68, v71);
    v175 = (void (*)(char *, char *))*((_QWORD *)v67 + 1);
    v175(v68, v177);
    v72 = (void **)&v49[OBJC_IVAR____TtC8ShelfKit29LibraryTabElementGroupManager_tabElementGroup];
    swift_beginAccess(&v49[OBJC_IVAR____TtC8ShelfKit29LibraryTabElementGroupManager_tabElementGroup], v186, 0, 0);
    v73 = *v72;
    v74 = v49;
    v75 = v73;
    v76 = swift_bridgeObjectRetain();
    v77 = sub_149884(v76, (uint64_t)v74);
    v174 = v51;
    swift_bridgeObjectRelease();
    v166 = v74;

    *(_QWORD *)&aBlock = v77;
    v78 = v59;
    v79 = swift_bridgeObjectRetain();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v79);
    v81 = *(_QWORD *)((char *)&dword_10 + (aBlock & 0xFFFFFFFFFFFFFF8));
    v80 = *(_QWORD *)((char *)&dword_18 + (aBlock & 0xFFFFFFFFFFFFFF8));
    if (v81 >= v80 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v80 > 1, v81 + 1, 1);
    v82 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v81, v78);
    specialized Array._endMutation()(v82);
    swift_bridgeObjectRelease();

    v83 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v75, "_setChildren:", v83);

    v84 = *v72;
    v160 = v72;
    if ((_DWORD)v176)
    {
      v85 = v169;
      v86 = v178;
      v87 = v166;
      v88 = v170;
      v89 = v175;
      if ((_DWORD)v176 == 1)
      {
        v90 = 0x696C2E70756F7267;
        v91 = 0xED00007972617262;
      }
      else
      {
        v90 = 0x74732E70756F7267;
        v91 = 0xEE00736E6F697461;
      }
    }
    else
    {
      v91 = countAndFlagsBits | 0x8000000000000000;
      v85 = v169;
      v86 = v178;
      v87 = v166;
      v88 = v170;
      v90 = 0xD000000000000013;
      v89 = v175;
    }
    *((_QWORD *)&v188 + 1) = &type metadata for String;
    *(_QWORD *)&aBlock = v90;
    *((_QWORD *)&aBlock + 1) = v91;
    v92 = v84;
    static AutomationSemantics.tabBar(tabName:)(&aBlock);
    __swift_destroy_boxed_opaque_existential_1(&aBlock);
    UIAccessibilityIdentification.setAutomationSemantics(_:)(v88, v71);

    v89(v88, v177);
    v93 = *(_QWORD *)(v85 + 16);
    v94 = *(_QWORD *)((char *)v87 + OBJC_IVAR____TtC8ShelfKit29LibraryTabElementGroupManager_stationItems);
    v128 = v93 == *(_QWORD *)(v94 + 16);
    v165 = (char *)OBJC_IVAR____TtC8ShelfKit29LibraryTabElementGroupManager_stationItems;
    if (!v128)
      break;
    v95 = _swiftEmptyArrayStorage;
    if (v93)
    {
      v185 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain();
      sub_1807B0(0, v93, 0);
      v96 = (*(unsigned __int8 *)(v162 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v162 + 80);
      v176 = (char *)v94;
      v97 = v94 + v96;
      v98 = *(_QWORD *)(v162 + 72);
      v177 = (char *)&type metadata for Any + 8;
      do
      {
        sub_963D4(v97, (uint64_t)v7);
        v99 = _s8ShelfKit7TabMenuV4ItemV15sidebarUniqueIDSSvg_0();
        v101 = v100;
        v183 = v99;
        v184 = v100;
        v102 = *(_QWORD *)&v7[*(int *)(v179 + 28)];
        if ((unint64_t)(v102 - 1) >= 0x11)
        {
          if (v102)
          {
            v103 = *(_QWORD *)(v102 + OBJC_IVAR____TtC8ShelfKit13StationDetail_episodeCount);
            *((_QWORD *)&v188 + 1) = &type metadata for Int;
            *(_QWORD *)&aBlock = v103;
          }
          else
          {
            aBlock = 0u;
            v188 = 0u;
          }
          sub_267BC((uint64_t)&aBlock, (uint64_t)&v180, (uint64_t *)&unk_3BC540);
          if (v181)
          {
            sub_1F460(&v180, v182);
            sub_1FB98((uint64_t)v182, (uint64_t)&v180);
            swift_retain();
            v104._countAndFlagsBits = String.init<A>(describing:)(&v180, v177);
            String.append(_:)(v104);
            swift_bridgeObjectRelease();
            __swift_destroy_boxed_opaque_existential_1(v182);
            sub_267A8(v102);
            v99 = v183;
            v101 = v184;
          }
          else
          {
            sub_1459C((uint64_t)&v180, (uint64_t *)&unk_3BC540);
          }
          sub_1459C((uint64_t)&aBlock, (uint64_t *)&unk_3BC540);
        }
        sub_145D8((uint64_t)v7, type metadata accessor for TabMenu.Item);
        v95 = v185;
        if ((swift_isUniquelyReferenced_nonNull_native(v185) & 1) == 0)
        {
          sub_1807B0(0, v95[2] + 1, 1);
          v95 = v185;
        }
        v106 = v95[2];
        v105 = v95[3];
        if (v106 >= v105 >> 1)
        {
          sub_1807B0(v105 > 1, v106 + 1, 1);
          v95 = v185;
        }
        v95[2] = v106 + 1;
        v107 = &v95[2 * v106];
        v107[4] = v99;
        v107[5] = v101;
        v97 += v98;
        --v93;
      }
      while (v93);
      swift_bridgeObjectRelease();
      v85 = v169;
      v86 = v178;
      v87 = v166;
    }
    v108 = swift_bridgeObjectRetain();
    v109 = sub_148F60(v108, (uint64_t)v95);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    object = (id)swift_unknownObjectWeakLoadStrong((char *)v87 + OBJC_IVAR____TtC8ShelfKit29LibraryTabElementGroupManager_tabBarController);
    v161 = v109;
    v176 = (char *)v109[2];
    if (!v176)
    {

      swift_bridgeObjectRelease();
      break;
    }
    v174 = (uint64_t)v161
         + ((*(unsigned __int8 *)(v162 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v162 + 80));
    countAndFlagsBits = *(_QWORD *)(v162 + 72);
    v110 = v86 & 0xFFFFFFFFFFFFFF8;
    v171 = v86 & 0xFFFFFFFFFFFFFF8;
    if (v86 < 0)
      v110 = v86;
    v170 = (char *)v110;
    v56 = v86 & 0xC000000000000001;
    swift_bridgeObjectRetain();
    v111 = 0;
    v175 = (void (*)(char *, char *))((unint64_t)v86 >> 62);
    while (1)
    {
      if (v175)
      {
        swift_bridgeObjectRetain();
        v47 = _CocoaArrayWrapper.endIndex.getter(v170);
        if (!v47)
        {
LABEL_42:
          swift_bridgeObjectRelease();
          goto LABEL_43;
        }
      }
      else
      {
        v47 = *(_QWORD *)(v171 + 16);
        swift_bridgeObjectRetain();
        if (!v47)
          goto LABEL_42;
      }
      v177 = v111;
      v112 = v174 + countAndFlagsBits * (_QWORD)v111;
      v113 = *(int *)(v179 + 28);
      v53 = 4;
LABEL_52:
      v49 = (char *)(v53 - 4);
      v114 = v56
           ? (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v53 - 4)
           : (char *)*(id *)(v86 + 8 * v53);
      v7 = v114;
      v51 = v53 - 3;
      if (__OFADD__(v49, 1))
        break;
      v115 = type metadata accessor for TabElement(0);
      v116 = swift_dynamicCastClass(v7, v115);
      if (v116)
      {
        v117 = *(_QWORD **)(v116 + OBJC_IVAR____TtC8ShelfKit10TabElement_tabItem + *(int *)(v179 + 28));
        sub_26794((uint64_t)v117);
      }
      else
      {
        v118 = objc_msgSend(v7, "_identifier", v160);
        v119 = static String._unconditionallyBridgeFromObjectiveC(_:)(v118);
        v121 = v120;

        v122 = v121;
        v86 = v178;
        v117 = (_QWORD *)_s8ShelfKit13NavigationTabO11stringValueACSS_tcfC_0(v119, v122);
      }
      v123 = *(int **)(v112 + v113);
      switch((unint64_t)v117)
      {
        case 1uLL:
          if (v123 != (int *)((char *)&dword_0 + 1))
            goto LABEL_51;
          goto LABEL_113;
        case 2uLL:
          if (v123 == (int *)((char *)&dword_0 + 2))
            goto LABEL_113;
          goto LABEL_51;
        case 3uLL:
          if (v123 == (int *)((char *)&dword_0 + 3))
            goto LABEL_113;
          goto LABEL_51;
        case 4uLL:
          if (v123 == &dword_4)
            goto LABEL_113;
          goto LABEL_51;
        case 5uLL:
          if (v123 == (int *)((char *)&dword_4 + 1))
            goto LABEL_113;
          goto LABEL_51;
        case 6uLL:
          if (v123 == (int *)((char *)&dword_4 + 2))
            goto LABEL_113;
          goto LABEL_51;
        case 7uLL:
          if (v123 == (int *)((char *)&dword_4 + 3))
            goto LABEL_113;
          goto LABEL_51;
        case 8uLL:
          if (v123 == &dword_8)
            goto LABEL_113;
          goto LABEL_51;
        case 9uLL:
          if (v123 == (int *)((char *)&dword_8 + 1))
            goto LABEL_113;
          goto LABEL_51;
        case 0xAuLL:
          if (v123 == (int *)((char *)&dword_8 + 2))
            goto LABEL_113;
          goto LABEL_51;
        case 0xBuLL:
          if (v123 == (int *)((char *)&dword_8 + 3))
            goto LABEL_113;
          goto LABEL_51;
        case 0xCuLL:
          if (v123 == &dword_C)
            goto LABEL_113;
          goto LABEL_51;
        case 0xDuLL:
          if (v123 == (int *)((char *)&dword_C + 1))
            goto LABEL_113;
          goto LABEL_51;
        case 0xEuLL:
          if (v123 == (int *)((char *)&dword_C + 2))
            goto LABEL_113;
          goto LABEL_51;
        case 0xFuLL:
          if (v123 == (int *)((char *)&dword_C + 3))
            goto LABEL_113;
          goto LABEL_51;
        case 0x10uLL:
          if (v123 == &dword_10)
            goto LABEL_113;
          goto LABEL_51;
        case 0x11uLL:
          if (v123 == (int *)((char *)&dword_10 + 1))
            goto LABEL_113;
          goto LABEL_51;
        default:
          if ((unint64_t)v123 - 1 < 0x11)
            goto LABEL_50;
          if (!v117)
          {
            sub_267A8(0);
            if (!v123)
              goto LABEL_113;
            goto LABEL_50;
          }
          if (!v123)
          {
            sub_26794(0);
LABEL_50:
            sub_267A8((uint64_t)v117);
LABEL_51:

            ++v53;
            if (v51 == v47)
            {
              swift_bridgeObjectRelease();
              goto LABEL_116;
            }
            goto LABEL_52;
          }
          v124 = v117[2];
          v125 = v117[3];
          v126 = *((_QWORD *)v123 + 2);
          v127 = *((_QWORD *)v123 + 3);
          v128 = v124 == v126 && v125 == v127;
          if (!v128 && (_stringCompareWithSmolCheck(_:_:expecting:)(v124, v125, v126, v127, 0) & 1) == 0)
            goto LABEL_50;
          v129 = v117[4];
          v130 = v117[5];
          v131 = *((_QWORD *)v123 + 4);
          v132 = *((_QWORD *)v123 + 5);
          v133 = v129 == v131 && v130 == v132;
          if (!v133 && (_stringCompareWithSmolCheck(_:_:expecting:)(v129, v130, v131, v132, 0) & 1) == 0
            || *(_QWORD *)((char *)v117 + OBJC_IVAR____TtC8ShelfKit13StationDetail_episodeCount) != *(_QWORD *)((char *)v123 + OBJC_IVAR____TtC8ShelfKit13StationDetail_episodeCount))
          {
            goto LABEL_50;
          }
          v134 = *(_QWORD *)((char *)v117 + OBJC_IVAR____TtC8ShelfKit13StationDetail_unplayedCount);
          v135 = *(_QWORD *)((char *)v123 + OBJC_IVAR____TtC8ShelfKit13StationDetail_unplayedCount);
          sub_267A8((uint64_t)v117);
          v128 = v134 == v135;
          v86 = v178;
          if (!v128)
            goto LABEL_51;
LABEL_113:
          swift_bridgeObjectRelease();
          if (object)
          {
            v136 = objc_msgSend(object, "sidebar");
            objc_msgSend(v136, "reconfigureItemForTab:", v7);

          }
LABEL_116:
          v111 = v177;
LABEL_43:
          if (++v111 == v176)
          {

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease_n(v161, 2);
            v85 = v169;
            v87 = v166;
            goto LABEL_120;
          }
          break;
      }
    }
    __break(1u);
LABEL_143:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v55 > 1, v56 + 1, 1);
  }
  swift_bridgeObjectRelease();
LABEL_120:
  *((_BYTE *)v168 + v164) = 0;
  *(_QWORD *)((char *)v87 + OBJC_IVAR____TtC8ShelfKit29LibraryTabElementGroupManager_libraryItems) = v167;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v165[(_QWORD)v87] = v85;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  Strong = (void *)swift_unknownObjectWeakLoadStrong((char *)v87 + OBJC_IVAR____TtC8ShelfKit29LibraryTabElementGroupManager_tabBarController);
  if (!Strong)
  {

    return;
  }
  v138 = Strong;
  v139 = objc_msgSend(Strong, "selectedViewController");

  v140 = v163;
  if (!v139)
  {
LABEL_137:

    return;
  }
  v141 = objc_opt_self(UINavigationController);
  v142 = (void *)swift_dynamicCastObjCClass(v139, v141);
  if (!v142)
  {

    return;
  }
  v143 = objc_msgSend(v142, "viewControllers");
  v144 = sub_327F8(0, &qword_3B8638, UIViewController_ptr);
  v145 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v143, v144);

  if (!((unint64_t)v145 >> 62))
  {
    if (*(_QWORD *)((char *)&dword_10 + (v145 & 0xFFFFFFFFFFFFF8)))
      goto LABEL_125;
LABEL_148:

    swift_bridgeObjectRelease();
    return;
  }
  if (v145 < 0)
    v158 = v145;
  else
    v158 = v145 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  v159 = _CocoaArrayWrapper.endIndex.getter(v158);
  swift_bridgeObjectRelease();
  if (!v159)
    goto LABEL_148;
LABEL_125:
  if ((v145 & 0xC000000000000001) != 0)
  {
    v146 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0);
  }
  else
  {
    if (!*(_QWORD *)((char *)&dword_10 + (v145 & 0xFFFFFFFFFFFFF8)))
    {
      __break(1u);
      JUMPOUT(0x1475DCLL);
    }
    v146 = *(id *)(v145 + 32);
  }
  v147 = v146;
  swift_bridgeObjectRelease();
  ObjectType = swift_getObjectType();
  v149 = swift_conformsToProtocol2(ObjectType, &protocol descriptor for NavigationTabIdentifiable);
  if (v149)
    v150 = v149;
  else
    v150 = 0;
  if (v149)
    v151 = v147;
  else
    v151 = 0;
  if (v151)
  {
    v152 = swift_getObjectType();
    v153 = (*(uint64_t (**)(uint64_t, uint64_t))(v150 + 8))(v152, v150);
    if (v153 == 18)
    {

      goto LABEL_137;
    }
    v154 = v153;
    v155 = *v160;
    v156 = v140;
    v157 = (void *)_UITab.tabElement(matching:)(v154);
    objc_msgSend(v155, "_setSelectedElement:", v157);

    sub_14CD28(v154);
  }
  else
  {

  }
}

uint64_t sub_147620(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t ObjectType;
  uint64_t (*v9)(_QWORD *, uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  _QWORD v12[5];

  ObjectType = swift_getObjectType();
  v12[3] = type metadata accessor for Action(0);
  v12[4] = sub_109F30((unint64_t *)&qword_3B28E8, (void (*)(uint64_t))type metadata accessor for Action);
  v12[0] = a4;
  v9 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(a3 + 8);
  swift_retain();
  v10 = v9(v12, a5, ObjectType, a3);
  swift_release(v10);
  return __swift_destroy_boxed_opaque_existential_1(v12);
}

void LibraryTabElementGroupManager.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("ShelfKit.LibraryTabElementGroupManager", 38, "init()", 6, 0);
  __break(1u);
}

id LibraryTabElementGroupManager.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for LibraryTabElementGroupManager();
  return objc_msgSendSuper2(&v2, "dealloc");
}

id sub_147814()
{
  _QWORD *v0;
  id *v1;
  _BYTE v3[24];

  v1 = (id *)(*v0 + OBJC_IVAR____TtC8ShelfKit29LibraryTabElementGroupManager_tabElementGroup);
  swift_beginAccess(v1, v3, 0, 0);
  return *v1;
}

void LibraryTabElementGroupManager._tabElementGroup(_:didSelect:)(uint64_t a1, void *a2)
{
  sub_1499CC(a2);
}

uint64_t LibraryTabElementGroupManager._tabElementGroup(_:didCustomizeDisplayOrder:)(void *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  id v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t *v41;
  char v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v52;
  uint64_t v53;
  _QWORD v54[2];
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;

  v3 = v2;
  v6 = type metadata accessor for TabMenu.Item(0);
  v60 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)v54 - v10;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BC390);
  __chkstk_darwin(v12);
  v59 = (uint64_t)v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = a2;
  v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3BC430);
  v15 = sub_32914((unint64_t *)&qword_3B8E30, (uint64_t *)&unk_3BC430, (uint64_t)&protocol conformance descriptor for [A]);
  result = Collection.isNotEmpty.getter(v14, v15);
  if ((result & 1) != 0)
  {
    v17 = objc_msgSend(a1, "_identifier");
    v58 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    v19 = v18;

    v20 = TabMenu.Group.items(for:)(0, 0);
    v21 = TabMenu.Group.items(for:)(0, 1);
    v61 = v20;
    sub_1E406C((uint64_t)v21);
    v22 = v61;
    v23 = _swiftEmptyArrayStorage;
    v61 = _swiftEmptyArrayStorage;
    v24 = v22[2];
    if (v24)
    {
      v55 = v19;
      v56 = a2;
      v57 = v2;
      v25 = (*(unsigned __int8 *)(v60 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80);
      v26 = *(_QWORD *)(v60 + 72);
      v54[1] = v22;
      v27 = (uint64_t)v22 + v25;
      v28 = _swiftEmptyArrayStorage;
      do
      {
        sub_963D4(v27, (uint64_t)v11);
        if (*(_QWORD *)&v11[*(int *)(v6 + 28)] == 7)
        {
          sub_12B1D0((uint64_t)v11, (uint64_t)v8);
          if ((swift_isUniquelyReferenced_nonNull_native(v28) & 1) == 0)
            sub_180924(0, v28[2] + 1, 1);
          v28 = v61;
          v30 = v61[2];
          v29 = v61[3];
          if (v30 >= v29 >> 1)
          {
            sub_180924(v29 > 1, v30 + 1, 1);
            v28 = v61;
          }
          v28[2] = v30 + 1;
          sub_12B1D0((uint64_t)v8, (uint64_t)v28 + v25 + v30 * v26);
        }
        else
        {
          sub_145D8((uint64_t)v11, type metadata accessor for TabMenu.Item);
        }
        v27 += v26;
        --v24;
      }
      while (v24);
      v23 = v61;
      a2 = v56;
      v3 = v57;
      v19 = v55;
    }
    v31 = v60;
    swift_bridgeObjectRelease();
    v32 = v59;
    if (v23[2])
    {
      sub_963D4((uint64_t)v23 + ((*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80)), v59);
      v33 = 0;
    }
    else
    {
      v33 = 1;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v31 + 56))(v32, v33, 1, v6);
    swift_release(v23);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v31 + 48))(v32, 1, v6) == 1)
    {
      __break(1u);
      swift_bridgeObjectRelease();
      result = swift_release(v61);
      __break(1u);
      return result;
    }
    v34 = *(_QWORD *)(v32 + *(int *)(v6 + 28));
    sub_26794(v34);
    sub_145D8(v32, type metadata accessor for TabMenu.Item);
    v35 = NavigationTab.stringValue.getter(v34);
    v37 = v36;
    sub_267A8(v34);
    v38 = v58;
    if (v35 == v58 && v37 == v19)
    {
      swift_bridgeObjectRelease();
LABEL_21:
      swift_bridgeObjectRelease();
      v40 = OBJC_IVAR____TtC8ShelfKit29LibraryTabElementGroupManager_libraryItems;
      v61 = *(_QWORD **)(v3 + OBJC_IVAR____TtC8ShelfKit29LibraryTabElementGroupManager_libraryItems);
      swift_bridgeObjectRetain_n(v61, 2);
      swift_bridgeObjectRetain();
      sub_14BF2C(&v61, a2);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v3 + v40) = v61;
      swift_bridgeObjectRelease();
      v41 = (uint64_t *)swift_bridgeObjectRetain();
      sub_20CB6C(v41);
      return swift_bridgeObjectRelease();
    }
    v39 = _stringCompareWithSmolCheck(_:_:expecting:)(v35, v37, v58, v19, 0);
    swift_bridgeObjectRelease();
    if ((v39 & 1) != 0)
      goto LABEL_21;
    if (v38 == 0xD000000000000020 && v19 == 0x80000000003109B0)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v42 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000020, 0x80000000003109B0, v38, v19, 0);
      result = swift_bridgeObjectRelease();
      if ((v42 & 1) == 0)
        return result;
    }
    v43 = a2[2];
    if (v43)
    {
      v57 = v3;
      swift_bridgeObjectRetain();
      v56 = a2;
      v44 = a2 + 5;
      v45 = _swiftEmptyArrayStorage;
      do
      {
        v49 = *(v44 - 1);
        v50 = *v44;
        if ((v49 != 0xD00000000000002BLL || v50 != 0x8000000000310A10)
          && (_stringCompareWithSmolCheck(_:_:expecting:)(*(v44 - 1), *v44, 0xD00000000000002BLL, 0x8000000000310A10, 0) & 1) == 0)
        {
          swift_bridgeObjectRetain();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v45);
          v61 = v45;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_1807B0(0, v45[2] + 1, 1);
            v45 = v61;
          }
          v47 = v45[2];
          v46 = v45[3];
          if (v47 >= v46 >> 1)
          {
            sub_1807B0(v46 > 1, v47 + 1, 1);
            v45 = v61;
          }
          v45[2] = v47 + 1;
          v48 = &v45[2 * v47];
          v48[4] = v49;
          v48[5] = v50;
        }
        v44 += 2;
        --v43;
      }
      while (v43);
      swift_bridgeObjectRelease();
      v3 = v57;
    }
    else
    {
      v45 = _swiftEmptyArrayStorage;
    }
    v52 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8ShelfKit29LibraryTabElementGroupManager_libraryActionController + 24);
    v53 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8ShelfKit29LibraryTabElementGroupManager_libraryActionController + 32);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v3 + OBJC_IVAR____TtC8ShelfKit29LibraryTabElementGroupManager_libraryActionController), v52);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(v53 + 232))(v45, v52, v53);
    return swift_release(v45);
  }
  return result;
}

uint64_t LibraryTabElementGroupManager._tabBarController(_:sidebar:visibilityDidChangeFor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_14BFEC(a3);
}

uint64_t sub_147EE4(id *a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v3 = objc_msgSend(*a1, "_identifier");
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v6 = v5;

  v7 = type metadata accessor for TabMenu.Item(0);
  v8 = NavigationTab.stringValue.getter(*(_QWORD *)(a2 + *(int *)(v7 + 28)));
  if (v4 == v8 && v6 == v9)
    v11 = 1;
  else
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v6, v8, v9, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v11 & 1;
}

id LibraryTabElementGroupManager._tabBarController(_:sidebar:trailingSwipeActionsConfigurationFor:)(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_14C0D8(a3);
}

uint64_t sub_148048(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, void *a6)
{
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v7 = a5[3];
  v8 = a5[4];
  __swift_project_boxed_opaque_existential_1(a5, v7);
  v9 = objc_msgSend(a6, "_identifier");
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  v12 = v11;

  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 264))(v10, v12, v7, v8);
  return swift_bridgeObjectRelease();
}

void sub_1480D0(uint64_t a1, void *a2, void *a3, void *aBlock)
{
  uint64_t v6;
  void (*v7)(id, id, uint64_t (*)(char), uint64_t);
  void *v8;
  uint64_t v9;
  id v10;
  id v11;

  v7 = *(void (**)(id, id, uint64_t (*)(char), uint64_t))(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  v8 = _Block_copy(aBlock);
  v9 = swift_allocObject(&unk_3828A8, 24, 7);
  *(_QWORD *)(v9 + 16) = v8;
  swift_retain();
  v11 = a2;
  v10 = a3;
  v7(v11, v10, sub_14CEA4, v9);
  swift_release(v6);
  swift_release(v9);

}

id LibraryTabElementGroupManager.tabBarController(_:sidebar:contextMenuConfigurationFor:)(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_14C3CC(a3);
}

Class sub_148194(uint64_t a1, uint64_t a2, void (*a3)(__n128), uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  objc_class *v17;
  Swift::String v18;
  Swift::String_optional v19;
  Class isa;
  _QWORD *v22;
  Swift::OpaquePointer v23;
  _QWORD v24[2];
  uint64_t v25;
  uint64_t v26;
  UIImage_optional v27;

  v25 = a2;
  v7 = type metadata accessor for ActionMenu(0);
  v8 = __chkstk_darwin(v7);
  v10 = (_QWORD *)((char *)v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  a3(v8);
  v11 = *(_QWORD *)(a5 + OBJC_IVAR____TtC8ShelfKit29LibraryTabElementGroupManager_objectGraph);
  v24[1] = sub_327F8(0, (unint64_t *)&qword_3B9410, UIMenu_ptr);
  v12 = v10[2];
  v13 = (void *)v10[3];
  v15 = v10[4];
  v14 = (void *)v10[5];
  v16 = (uint64_t)v10 + *(int *)(v7 + 28);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v17 = (objc_class *)_s8ShelfKit11SystemGlyphC4load7artworkSo7UIImageCSg18PodcastsFoundation12ArtworkModelVSg_tFZ_0(v16);
  LOBYTE(a3) = String._bridgeToObjectiveC()();
  v26 = v25;
  v22 = ActionMenuBuilder.buildMenuElements(for:asPartOf:)(*(_QWORD *)((char *)v10 + *(int *)(v7 + 32)), v11);
  v18._countAndFlagsBits = v12;
  v18._object = v13;
  v19.value._countAndFlagsBits = v15;
  v19.value._object = v14;
  v27.value.super.isa = v17;
  v27.is_nil = (char)a3;
  isa = UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v18, v19, v27, 0, 0xFFFFFFFFFFFFFFFFLL, (UIMenuElementSize)v22, v23).super.super.isa;
  sub_145D8((uint64_t)v10, type metadata accessor for ActionMenu);
  return isa;
}

id sub_1482F4(void *a1, uint64_t a2, void *a3, void *a4, void *a5, uint64_t (*a6)(id))
{
  id v10;
  id v11;
  id v12;
  id v13;
  void *v14;

  v10 = a3;
  v11 = a4;
  v12 = a5;
  v13 = a1;
  v14 = (void *)a6(v12);

  return v14;
}

void LibraryTabElementGroupManager._tabBarController(_:sidebar:configureItem:)(uint64_t a1, uint64_t a2, void *a3)
{
  sub_14C88C(a3);
}

BOOL sub_1483E0(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v27;

  v6 = 0x73776F6873;
  v7 = *(int *)(type metadata accessor for TabMenu.Item(0) + 28);
  v8 = *(_QWORD *)(a1 + v7) - 1;
  v9 = 0xE500000000000000;
  v10 = 0x73776F6873;
  switch(v8)
  {
    case 0:
      break;
    case 1:
      v9 = 0xE800000000000000;
      v10 = 0x736C656E6E616863;
      break;
    case 2:
      v10 = 0x69726F6765746163;
      v9 = 0xEA00000000007365;
      break;
    case 3:
      v10 = 0x64616F6C6E776F64;
      v9 = 0xEA00000000006465;
      break;
    case 4:
      v10 = 0x7472616843706F74;
      goto LABEL_17;
    case 5:
      v10 = 0x6F546E7265646F6DLL;
      v9 = 0xEF73747261684370;
      break;
    case 6:
      v9 = 0xE700000000000000;
      v10 = 0x7972617262696CLL;
      break;
    case 7:
      v9 = 0xE600000000000000;
      v10 = 0x6E657473696CLL;
      break;
    case 8:
      v9 = 0xE700000000000000;
      v10 = 0x676F6C61746163;
      break;
    case 9:
      v10 = 0x7265666E69;
      break;
    case 10:
      v9 = 0xE800000000000000;
      v10 = 0x64657463656C6573;
      break;
    case 11:
      v9 = 0xE600000000000000;
      v10 = 0x686372616573;
      break;
    case 12:
      v9 = 0xE700000000000000;
      v10 = 0x676E6964616F6CLL;
      break;
    case 13:
      v10 = 0x79616C50696E696DLL;
      v9 = 0xEA00000000007265;
      break;
    case 14:
      v10 = 0x6B72616D6B6F6F62;
LABEL_17:
      v9 = 0xE900000000000073;
      break;
    case 15:
      v10 = 0x704574736574616CLL;
      v9 = 0xEE007365646F7369;
      break;
    case 16:
      v10 = 0x796C746E65636572;
      v9 = 0xEF64657461647055;
      break;
    default:
      v9 = 0xE700000000000000;
      v10 = 0x6E6F6974617473;
      break;
  }
  v11 = *(_QWORD *)(a2 + v7) - 1;
  v12 = 0xE500000000000000;
  switch(v11)
  {
    case 0:
      goto LABEL_52;
    case 1:
      v12 = 0xE800000000000000;
      v6 = 0x736C656E6E616863;
      v13 = a3[2];
      if (!v13)
        goto LABEL_69;
      goto LABEL_53;
    case 2:
      v6 = 0x69726F6765746163;
      v12 = 0xEA00000000007365;
      v13 = a3[2];
      if (!v13)
        goto LABEL_69;
      goto LABEL_53;
    case 3:
      v6 = 0x64616F6C6E776F64;
      v12 = 0xEA00000000006465;
      v13 = a3[2];
      if (!v13)
        goto LABEL_69;
      goto LABEL_53;
    case 4:
      v6 = 0x7472616843706F74;
      goto LABEL_49;
    case 5:
      v6 = 0x6F546E7265646F6DLL;
      v12 = 0xEF73747261684370;
      v13 = a3[2];
      if (!v13)
        goto LABEL_69;
      goto LABEL_53;
    case 6:
      v12 = 0xE700000000000000;
      v6 = 0x7972617262696CLL;
      v13 = a3[2];
      if (!v13)
        goto LABEL_69;
      goto LABEL_53;
    case 7:
      v12 = 0xE600000000000000;
      v6 = 0x6E657473696CLL;
      v13 = a3[2];
      if (!v13)
        goto LABEL_69;
      goto LABEL_53;
    case 8:
      v12 = 0xE700000000000000;
      v14 = 0x6F6C61746163;
      goto LABEL_44;
    case 9:
      v6 = 0x7265666E69;
      v13 = a3[2];
      if (!v13)
        goto LABEL_69;
      goto LABEL_53;
    case 10:
      v12 = 0xE800000000000000;
      v6 = 0x64657463656C6573;
      v13 = a3[2];
      if (!v13)
        goto LABEL_69;
      goto LABEL_53;
    case 11:
      v12 = 0xE600000000000000;
      v6 = 0x686372616573;
      v13 = a3[2];
      if (!v13)
        goto LABEL_69;
      goto LABEL_53;
    case 12:
      v12 = 0xE700000000000000;
      v14 = 0x6E6964616F6CLL;
LABEL_44:
      v6 = v14 & 0xFFFFFFFFFFFFLL | 0x67000000000000;
      v13 = a3[2];
      if (!v13)
        goto LABEL_69;
      goto LABEL_53;
    case 13:
      v6 = 0x79616C50696E696DLL;
      v12 = 0xEA00000000007265;
      v13 = a3[2];
      if (!v13)
        goto LABEL_69;
      goto LABEL_53;
    case 14:
      v6 = 0x6B72616D6B6F6F62;
LABEL_49:
      v12 = 0xE900000000000073;
      v13 = a3[2];
      if (!v13)
        goto LABEL_69;
      goto LABEL_53;
    case 15:
      v6 = 0x704574736574616CLL;
      v12 = 0xEE007365646F7369;
LABEL_52:
      v13 = a3[2];
      if (v13)
        goto LABEL_53;
      goto LABEL_69;
    case 16:
      v6 = 0x796C746E65636572;
      v12 = 0xEF64657461647055;
      v13 = a3[2];
      if (!v13)
        goto LABEL_69;
      goto LABEL_53;
    default:
      v12 = 0xE700000000000000;
      v6 = 0x6E6F6974617473;
      v13 = a3[2];
      if (!v13)
        goto LABEL_69;
LABEL_53:
      v15 = a3[4];
      v16 = a3[5];
      if (v15 == v10 && v16 == v9 || (_stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, v10, v9, 0) & 1) != 0)
      {
        v17 = 0;
      }
      else
      {
        v22 = a3 + 7;
        v23 = 1;
        do
        {
          if (v13 == v23)
          {
LABEL_69:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            return 0;
          }
          v17 = v23;
          v24 = *(v22 - 1);
          v25 = *v22;
          if (v24 == v10 && v25 == v9)
            break;
          v27 = _stringCompareWithSmolCheck(_:_:expecting:)(v24, v25, v10, v9, 0);
          v23 = v17 + 1;
          v22 += 2;
        }
        while ((v27 & 1) == 0);
      }
      swift_bridgeObjectRelease();
      v18 = sub_1D8C14(v6, v12, a3);
      v20 = v19;
      swift_bridgeObjectRelease();
      return (v20 & 1) != 0 || v17 < v18;
  }
}

void sub_148954(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void);
  id v5;

  v4 = *(void (**)(void))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v4();
  swift_release(v3);

}

id sub_1489A4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v4 = *(uint64_t (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v5 = sub_327F8(0, (unint64_t *)&unk_3BC580, UIMenuElement_ptr);
  v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a2, v5);
  swift_retain();
  v7 = (void *)v4(v6);
  swift_release(v3);
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t sub_148A1C(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v29;
  BOOL v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v36;
  unint64_t v37;
  BOOL v38;
  BOOL v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t result;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;

  v6 = v5;
  v49 = a5;
  v48 = type metadata accessor for TabMenu.Item(0);
  __chkstk_darwin(v48);
  __chkstk_darwin(v11);
  __chkstk_darwin(v12);
  v14 = (char *)&v44 - v13;
  __chkstk_darwin(v15);
  v20 = (char *)&v44 - v19;
  if (!*(_QWORD *)(v16 + 72))
  {
    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
    goto LABEL_67;
  }
  v21 = *(_QWORD *)(v16 + 72);
  if (a2 - a1 == 0x8000000000000000 && v21 == -1)
    goto LABEL_65;
  v22 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v21 == -1)
    goto LABEL_66;
  v23 = (uint64_t)(a2 - a1) / v21;
  v52 = a1;
  v51 = a4;
  v24 = v22 / v21;
  if (v23 >= v22 / v21)
  {
    if ((v24 & 0x8000000000000000) == 0)
    {
      v26 = v24 * v21;
      v27 = v18;
      v46 = (char *)v17;
      if (a4 < a2 || a2 + v26 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack(a4, a2, v24, v48);
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront(a4);
      }
      v34 = a4 + v26;
      v50 = a4 + v26;
      v52 = a2;
      if (v26 < 1 || a1 >= a2)
        goto LABEL_63;
      v44 = a1;
      v45 = a4;
      v36 = -v21;
      v47 = -v21;
      while (1)
      {
        sub_963D4(v34 + v36, v27);
        v37 = a2 + v36;
        v20 = (char *)v27;
        v14 = v46;
        sub_963D4(a2 + v36, (uint64_t)v46);
        v38 = sub_1483E0((uint64_t)v20, (uint64_t)v14, v49);
        if (v6)
          goto LABEL_62;
        v39 = v38;
        v40 = a3 + v36;
        sub_145D8((uint64_t)v14, type metadata accessor for TabMenu.Item);
        sub_145D8((uint64_t)v20, type metadata accessor for TabMenu.Item);
        v27 = (uint64_t)v20;
        if (v39)
        {
          if (a3 < a2 || v40 >= a2)
          {
            swift_arrayInitWithTakeFrontToBack(a3 + v36, a2 + v36, 1, v48);
            v6 = 0;
          }
          else
          {
            v6 = 0;
            if (a3 != a2)
              swift_arrayInitWithTakeBackToFront(a3 + v36);
          }
          v52 += v47;
        }
        else
        {
          v41 = v50;
          v42 = v50 + v36;
          v50 += v36;
          if (a3 < v41 || v40 >= v41)
          {
            swift_arrayInitWithTakeFrontToBack(a3 + v36, v42, 1, v48);
            v37 = a2;
            v6 = 0;
          }
          else
          {
            v6 = 0;
            if (a3 != v41)
              swift_arrayInitWithTakeBackToFront(a3 + v36);
            v37 = a2;
          }
        }
        v34 = v50;
        if (v50 > v45)
        {
          a2 = v37;
          a3 += v36;
          v36 = v47;
          if (v37 > v44)
            continue;
        }
        goto LABEL_63;
      }
    }
  }
  else if ((v23 & 0x8000000000000000) == 0)
  {
    v25 = v23 * v21;
    if (a4 < a1 || a1 + v25 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack(a4, a1, v23, v48);
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront(a4);
    }
    v47 = a4 + v25;
    v50 = a4 + v25;
    if (v25 < 1 || a2 >= a3)
      goto LABEL_63;
    while (1)
    {
      sub_963D4(a2, (uint64_t)v20);
      sub_963D4(a4, (uint64_t)v14);
      v29 = sub_1483E0((uint64_t)v20, (uint64_t)v14, v49);
      if (v5)
        break;
      v30 = v29;
      sub_145D8((uint64_t)v14, type metadata accessor for TabMenu.Item);
      sub_145D8((uint64_t)v20, type metadata accessor for TabMenu.Item);
      v31 = v52;
      if (v30)
      {
        v32 = a2 + v21;
        if (v52 < a2 || v52 >= v32)
        {
          swift_arrayInitWithTakeFrontToBack(v52, a2, 1, v48);
        }
        else if (v52 == a2)
        {
          v31 = a2;
        }
        else
        {
          swift_arrayInitWithTakeBackToFront(v52);
        }
      }
      else
      {
        v33 = v51 + v21;
        if (v52 < v51 || v52 >= v33)
        {
          swift_arrayInitWithTakeFrontToBack(v52, v51, 1, v48);
        }
        else if (v52 != v51)
        {
          swift_arrayInitWithTakeBackToFront(v52);
        }
        v51 = v33;
        v32 = a2;
      }
      v52 = v31 + v21;
      a4 = v51;
      if (v51 < v47)
      {
        a2 = v32;
        if (v32 < a3)
          continue;
      }
      goto LABEL_63;
    }
LABEL_62:
    sub_145D8((uint64_t)v14, type metadata accessor for TabMenu.Item);
    sub_145D8((uint64_t)v20, type metadata accessor for TabMenu.Item);
LABEL_63:
    sub_24B620(&v52, &v51, (uint64_t *)&v50);
    swift_bridgeObjectRelease();
    return 1;
  }
LABEL_67:
  swift_bridgeObjectRelease();
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

_QWORD *sub_148F60(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::String v22;
  char v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  _BYTE v28[16];
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  _BYTE *v40;
  __int128 v41;
  uint64_t v42;
  _OWORD v43[2];
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;

  v33 = type metadata accessor for TabMenu.Item(0);
  __chkstk_darwin(v33);
  v36 = &v28[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v5);
  v40 = &v28[-v7];
  result = _swiftEmptyArrayStorage;
  v48 = _swiftEmptyArrayStorage;
  v35 = *(_QWORD *)(a1 + 16);
  if (v35)
  {
    v9 = 0;
    v10 = *(_QWORD *)(v6 + 72);
    v29 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    v34 = a1 + v29;
    v32 = (uint64_t *)(a2 + 40);
    v38 = (char *)&type metadata for Any + 8;
    v31 = a2;
    v30 = v10;
    do
    {
      sub_963D4(v34 + v10 * v9, (uint64_t)v40);
      v11 = *(_QWORD *)(a2 + 16);
      if (v11)
      {
        v37 = v9;
        v12 = *(int *)(v33 + 28);
        swift_bridgeObjectRetain();
        v13 = v32;
        while (1)
        {
          v15 = *(v13 - 1);
          v14 = *v13;
          swift_bridgeObjectRetain();
          v16 = v40;
          v17 = _s8ShelfKit7TabMenuV4ItemV15sidebarUniqueIDSSvg_0();
          v19 = v18;
          v46 = v17;
          v47 = v18;
          v20 = *(_QWORD *)&v16[v12];
          if ((unint64_t)(v20 - 1) >= 0x11)
          {
            v39 = v15;
            if (v20)
            {
              v21 = *(_QWORD *)(v20 + OBJC_IVAR____TtC8ShelfKit13StationDetail_episodeCount);
              *((_QWORD *)&v45 + 1) = &type metadata for Int;
              *(_QWORD *)&v44 = v21;
            }
            else
            {
              v44 = 0u;
              v45 = 0u;
            }
            sub_267BC((uint64_t)&v44, (uint64_t)&v41, (uint64_t *)&unk_3BC540);
            if (v42)
            {
              sub_1F460(&v41, v43);
              sub_1FB98((uint64_t)v43, (uint64_t)&v41);
              swift_retain();
              v22._countAndFlagsBits = String.init<A>(describing:)(&v41, v38);
              String.append(_:)(v22);
              swift_bridgeObjectRelease();
              __swift_destroy_boxed_opaque_existential_1(v43);
              sub_267A8(v20);
              v17 = v46;
              v19 = v47;
            }
            else
            {
              sub_1459C((uint64_t)&v41, (uint64_t *)&unk_3BC540);
            }
            sub_1459C((uint64_t)&v44, (uint64_t *)&unk_3BC540);
            v15 = v39;
          }
          if (v17 == v15 && v19 == v14)
            break;
          v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v17, v19, v15, v14, 0);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v24 & 1) != 0)
          {
            a2 = v31;
            swift_bridgeObjectRelease();
            goto LABEL_4;
          }
          v13 += 2;
          if (!--v11)
          {
            a2 = v31;
            swift_bridgeObjectRelease();
            v9 = v37;
            v10 = v30;
            goto LABEL_23;
          }
        }
        a2 = v31;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n(v14, 2);
LABEL_4:
        v9 = v37;
        v10 = v30;
        sub_145D8((uint64_t)v40, type metadata accessor for TabMenu.Item);
        goto LABEL_5;
      }
LABEL_23:
      sub_12B1D0((uint64_t)v40, (uint64_t)v36);
      v25 = v48;
      if ((swift_isUniquelyReferenced_nonNull_native(v48) & 1) == 0)
      {
        sub_180924(0, v25[2] + 1, 1);
        v25 = v48;
      }
      v27 = v25[2];
      v26 = v25[3];
      if (v27 >= v26 >> 1)
      {
        sub_180924(v26 > 1, v27 + 1, 1);
        v25 = v48;
      }
      v25[2] = v27 + 1;
      sub_12B1D0((uint64_t)v36, (uint64_t)v25 + v29 + v27 * v10);
LABEL_5:
      ++v9;
    }
    while (v9 != v35);
    return v48;
  }
  return result;
}

_QWORD *sub_149308(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;

  v3 = v2;
  v32 = a2;
  v5 = (int *)type metadata accessor for TabMenu.Item(0);
  v6 = *((_QWORD *)v5 - 1);
  __chkstk_darwin(v5);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = _swiftEmptyArrayStorage;
  if (v9)
  {
    v34 = _swiftEmptyArrayStorage;
    v11 = sub_180924(0, v9, 0);
    v31 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    v12 = a1 + v31;
    v30 = *(_QWORD *)(v6 + 72);
    do
    {
      __chkstk_darwin(v11);
      *(&v30 - 2) = v12;
      sub_1451D0(sub_14CEB8, (uint64_t)(&v30 - 4), v32);
      v33 = v3;
      if (v13)
      {
        v14 = v13;
        v15 = objc_msgSend(v13, "_isVisible");

        v16 = type metadata accessor for Glyph(0);
        (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v8, v12, v16);
        v17 = (uint64_t *)(v12 + v5[6]);
        v18 = *v17;
        v19 = v17[1];
        v20 = *(_QWORD *)(v12 + v5[7]);
        v21 = *(_BYTE *)(v12 + v5[8]);
        sub_267BC(v12 + v5[5], (uint64_t)&v8[v5[5]], (uint64_t *)&unk_3BC5B0);
        v22 = *(_BYTE *)(v12 + v5[10]);
        v23 = *(_BYTE *)(v12 + v5[11]);
        v24 = *(_BYTE *)(v12 + v5[12]);
        v25 = &v8[v5[6]];
        *(_QWORD *)v25 = v18;
        *((_QWORD *)v25 + 1) = v19;
        *(_QWORD *)&v8[v5[7]] = v20;
        v8[v5[8]] = v21;
        v8[v5[9]] = v15;
        v8[v5[10]] = v22;
        v8[v5[11]] = v23;
        v8[v5[12]] = v24;
        swift_bridgeObjectRetain();
        sub_26794(v20);
      }
      else
      {
        sub_963D4(v12, (uint64_t)v8);
      }
      v10 = v34;
      if ((swift_isUniquelyReferenced_nonNull_native(v34) & 1) == 0)
      {
        sub_180924(0, v10[2] + 1, 1);
        v10 = v34;
      }
      v3 = v33;
      v27 = v10[2];
      v26 = v10[3];
      if (v27 >= v26 >> 1)
      {
        sub_180924(v26 > 1, v27 + 1, 1);
        v10 = v34;
      }
      v10[2] = v27 + 1;
      v28 = v30;
      v11 = sub_12B1D0((uint64_t)v8, (uint64_t)v10 + v31 + v27 * v30);
      v12 += v28;
      --v9;
    }
    while (v9);
  }
  return v10;
}

_QWORD *sub_149578(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *boxed_opaque_existential_2Tm;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[2];
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD v41[3];
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;

  v5 = type metadata accessor for TabMenu.Item(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v38 = (uint64_t)v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AutomationSemantics(0);
  v36 = *(_QWORD *)(v8 - 8);
  v37 = v8;
  __chkstk_darwin(v8);
  v35 = (char *)v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a1 + 16);
  result = _swiftEmptyArrayStorage;
  if (v10)
  {
    v39 = v2;
    v44 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v10);
    v12 = *(_QWORD *)(a2 + OBJC_IVAR____TtC8ShelfKit29LibraryTabElementGroupManager_objectGraph);
    v33[0] = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    v33[1] = v12;
    v13 = a1 + v33[0];
    v34 = v6;
    v14 = *(_QWORD *)(v6 + 72);
    do
    {
      v21 = *(_QWORD *)(v13 + *(int *)(v5 + 28));
      if (v21 == 7)
      {
        v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BB7A8);
        BaseObjectGraph.inject<A>(_:)(v41, v30, v30);
        v31 = v42;
        v32 = v43;
        __swift_project_boxed_opaque_existential_1(v41, v42);
        v18 = (id)(*(uint64_t (**)(uint64_t, uint64_t))(v32 + 8))(v31, v32);
        v17 = __swift_destroy_boxed_opaque_existential_1(v41);
      }
      else if (v21 == 12)
      {
        v18 = objc_msgSend((id)objc_opt_self(_UITabElement), "_searchElement");
        v42 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BC390);
        boxed_opaque_existential_2Tm = __swift_allocate_boxed_opaque_existential_2Tm(v41);
        v23 = 1;
        v24 = TabMenu.Group.items(for:)(1, 0);
        v25 = TabMenu.Group.items(for:)(1, 1);
        v40 = v24;
        sub_1E406C((uint64_t)v25);
        v26 = v39;
        v27 = sub_12AE98((uint64_t)v40, &dword_C);
        v39 = v26;
        swift_bridgeObjectRelease();
        if (v27[2])
        {
          sub_963D4((uint64_t)v27 + v33[0], (uint64_t)boxed_opaque_existential_2Tm);
          v23 = 0;
        }
        (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(v34 + 56))(boxed_opaque_existential_2Tm, v23, 1, v5);
        swift_bridgeObjectRelease();
        v28 = v35;
        static AutomationSemantics.tabBar(tabName:)(v41);
        __swift_destroy_boxed_opaque_existential_1(v41);
        v29 = sub_327F8(0, (unint64_t *)&unk_3BC550, _UITabElement_ptr);
        UIAccessibilityIdentification.setAutomationSemantics(_:)(v28, v29);
        v17 = (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v28, v37);
      }
      else
      {
        v15 = v38;
        sub_963D4(v13, v38);
        v16 = objc_allocWithZone((Class)type metadata accessor for TabElement(0));
        v17 = (uint64_t)sub_96010(v15, 1);
        v18 = (id)v17;
      }
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v17);
      v19 = v44[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v19);
      v20 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v19, v18);
      specialized ContiguousArray._endMutation()(v20);
      v13 += v14;
      --v10;
    }
    while (v10);
    return v44;
  }
  return result;
}

_QWORD *sub_149884(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *(_QWORD *)(a1 + 16);
  result = _swiftEmptyArrayStorage;
  if (v3)
  {
    specialized ContiguousArray.reserveCapacity(_:)(v3);
    v6 = *(_QWORD *)(type metadata accessor for TabMenu.Item(0) - 8);
    v7 = a1 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    v8 = *(_QWORD *)(a2 + OBJC_IVAR____TtC8ShelfKit29LibraryTabElementGroupManager_objectGraph);
    v9 = *(_QWORD *)(v6 + 72);
    do
    {
      v10 = TabMenu.Item.tabBarElement(asPartOf:interfaceMode:)(v8, 1);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(objc_msgSend(v10, "_setAllowsHiding:", 1));
      v11 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v11);
      v12 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v11, v10);
      specialized ContiguousArray._endMutation()(v12);
      v7 += v9;
      --v3;
    }
    while (v3);
    return _swiftEmptyArrayStorage;
  }
  return result;
}

uint64_t type metadata accessor for LibraryTabElementGroupManager()
{
  return objc_opt_self(_TtC8ShelfKit29LibraryTabElementGroupManager);
}

uint64_t sub_1499A0()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_1499C4(uint64_t a1)
{
  uint64_t v1;

  sub_146184(a1, v1);
}

void sub_1499CC(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t ObjectType;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[6];

  v2 = v1;
  v4 = type metadata accessor for ActionMetricsBehavior(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ActionMetrics(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BC390);
  __chkstk_darwin(v11);
  v13 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v2 + OBJC_IVAR____TtC8ShelfKit29LibraryTabElementGroupManager_isPerformingSidebarUpdate) & 1) == 0)
  {
    v14 = type metadata accessor for TabElement(0);
    v15 = swift_dynamicCastClass(a1, v14);
    v45 = v5;
    if (v15)
    {
      sub_963D4(v15 + OBJC_IVAR____TtC8ShelfKit10TabElement_tabItem, (uint64_t)v13);
      v16 = type metadata accessor for TabMenu.Item(0);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v13, 0, 1, v16);
LABEL_11:
      type metadata accessor for TabMenu.Item(0);
      v34 = *(_QWORD *)&v13[*(int *)(v16 + 28)];
      sub_26794(v34);
      sub_145D8((uint64_t)v13, type metadata accessor for TabMenu.Item);
      v35 = sub_26794(v34);
      static ActionMetrics.notInstrumented.getter(v35);
      v36 = type metadata accessor for TabChangeAction(0);
      swift_allocObject(v36, *(unsigned int *)(v36 + 48), *(unsigned __int16 *)(v36 + 52));
      v37 = sub_2B354C(0, 0, v34, 0, 0, 1, 0, 0, 0, (uint64_t)v10);
      sub_267A8(v34);
      v38 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8ShelfKit29LibraryTabElementGroupManager_actionRunner + 8);
      ObjectType = swift_getObjectType();
      v46[3] = v36;
      v46[4] = sub_109F30(&qword_3B6A70, (void (*)(uint64_t))type metadata accessor for TabChangeAction);
      v46[0] = v37;
      v40 = v45;
      (*(void (**)(char *, _QWORD, uint64_t))(v45 + 104))(v7, enum case for ActionMetricsBehavior.fromAction(_:), v4);
      v41 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8ShelfKit29LibraryTabElementGroupManager_objectGraph);
      swift_retain();
      v42 = ActionRunner.perform(_:withMetrics:asPartOf:)(v46, (uint64_t)v7, v41, ObjectType, v38);
      swift_release(v37);
      swift_release(v42);
      sub_267A8(v34);
      (*(void (**)(char *, uint64_t))(v40 + 8))(v7, v4);
      __swift_destroy_boxed_opaque_existential_1(v46);
      return;
    }
    v17 = objc_msgSend(a1, "_identifier");
    v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    v20 = v19;

    v21 = _s8ShelfKit13NavigationTabO11stringValueACSS_tcfC_0(v18, v20);
    if (v21 <= 0x11)
    {
      if (((1 << v21) & 0x3F7FE) != 0)
        goto LABEL_6;
      if (v21 == 11)
      {
        v43 = type metadata accessor for TabMenu.Item(0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56))(v13, 1, 1, v43);
        goto LABEL_10;
      }
    }
    sub_267A8(v21);
LABEL_6:
    v22 = objc_msgSend(a1, "_identifier");
    v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    v25 = v24;

    v26 = (int *)_s8ShelfKit13NavigationTabO11stringValueACSS_tcfC_0(v23, v25);
    v27 = TabMenu.Group.items(for:)(1, 0);
    v28 = TabMenu.Group.items(for:)(1, 1);
    v46[0] = v27;
    sub_1E406C((uint64_t)v28);
    v29 = v46[0];
    sub_26794((uint64_t)v26);
    v30 = sub_12AE98(v29, v26);
    sub_267A8((uint64_t)v26);
    swift_bridgeObjectRelease();
    v31 = v30[2];
    v16 = type metadata accessor for TabMenu.Item(0);
    v32 = *(_QWORD *)(v16 - 8);
    if (v31)
    {
      sub_963D4((uint64_t)v30 + ((*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80)), (uint64_t)v13);
      v33 = 0;
    }
    else
    {
      v33 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v32 + 56))(v13, v33, 1, v16);
    swift_bridgeObjectRelease();
    sub_267A8((uint64_t)v26);
    type metadata accessor for TabMenu.Item(0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v13, 1, v16) != 1)
      goto LABEL_11;
LABEL_10:
    sub_1459C((uint64_t)v13, &qword_3BC390);
  }
}

void sub_149E38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, _QWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  _QWORD *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;

  v54 = a1;
  v55 = a5;
  v64 = a4;
  v58 = type metadata accessor for TabMenu.Item(0);
  __chkstk_darwin(v58);
  v60 = (uint64_t)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v49 - v9;
  __chkstk_darwin(v11);
  v14 = (char *)&v49 - v13;
  v50 = a2;
  if (a3 != a2)
  {
    v15 = v55[2];
    v59 = *(_QWORD *)(v12 + 72);
    if (v15 <= 1)
      v16 = 1;
    else
      v16 = v15;
    v53 = v55 + 7;
    v56 = (char *)&v49 - v13;
    v57 = v10;
    v51 = v16;
    while (1)
    {
      v52 = a3;
      v17 = a3;
      while (2)
      {
        v18 = v17 - 1;
        v19 = *v64;
        v20 = v59;
        v62 = v59 * v17;
        sub_963D4(v19 + v59 * v17, (uint64_t)v14);
        v63 = v18;
        v61 = v20 * v18;
        sub_963D4(v19 + v20 * v18, (uint64_t)v10);
        v21 = *(int *)(v58 + 28);
        v22 = 0xE500000000000000;
        v23 = 0x73776F6873;
        switch(*(_QWORD *)&v14[v21])
        {
          case 1:
            break;
          case 2:
            v22 = 0xE800000000000000;
            v23 = 0x736C656E6E616863;
            break;
          case 3:
            v22 = 0xEA00000000007365;
            v23 = 0x69726F6765746163;
            break;
          case 4:
            v23 = 0x64616F6C6E776F64;
            v22 = 0xEA00000000006465;
            break;
          case 5:
            v23 = 0x7472616843706F74;
            goto LABEL_28;
          case 6:
            v23 = 0x6F546E7265646F6DLL;
            v22 = 0xEF73747261684370;
            break;
          case 7:
            v22 = 0xE700000000000000;
            v23 = 0x7972617262696CLL;
            break;
          case 8:
            v22 = 0xE600000000000000;
            v23 = 0x6E657473696CLL;
            break;
          case 9:
            v22 = 0xE700000000000000;
            v23 = 0x676F6C61746163;
            break;
          case 0xALL:
            v23 = 0x7265666E69;
            break;
          case 0xBLL:
            v22 = 0xE800000000000000;
            v23 = 0x64657463656C6573;
            break;
          case 0xCLL:
            v22 = 0xE600000000000000;
            v23 = 0x686372616573;
            break;
          case 0xDLL:
            v22 = 0xE700000000000000;
            v23 = 0x676E6964616F6CLL;
            break;
          case 0xELL:
            v22 = 0xEA00000000007265;
            v23 = 0x79616C50696E696DLL;
            break;
          case 0xFLL:
            v23 = 0x6B72616D6B6F6F62;
LABEL_28:
            v22 = 0xE900000000000073;
            break;
          case 0x10:
            v23 = 0x704574736574616CLL;
            v22 = 0xEE007365646F7369;
            break;
          case 0x11:
            v23 = 0x796C746E65636572;
            v22 = 0xEF64657461647055;
            break;
          default:
            v22 = 0xE700000000000000;
            v23 = 0x6E6F6974617473;
            break;
        }
        v24 = *(_QWORD *)&v10[v21] - 1;
        v25 = 0xE500000000000000;
        v26 = 0x73776F6873;
        switch(v24)
        {
          case 0:
            goto LABEL_63;
          case 1:
            v25 = 0xE800000000000000;
            v26 = 0x736C656E6E616863;
            if (!v15)
              goto LABEL_7;
            goto LABEL_64;
          case 2:
            v25 = 0xEA00000000007365;
            v26 = 0x69726F6765746163;
            if (!v15)
              goto LABEL_7;
            goto LABEL_64;
          case 3:
            v26 = 0x64616F6C6E776F64;
            v25 = 0xEA00000000006465;
            if (!v15)
              goto LABEL_7;
            goto LABEL_64;
          case 4:
            v26 = 0x7472616843706F74;
            goto LABEL_60;
          case 5:
            v26 = 0x6F546E7265646F6DLL;
            v25 = 0xEF73747261684370;
            if (!v15)
              goto LABEL_7;
            goto LABEL_64;
          case 6:
            v25 = 0xE700000000000000;
            v26 = 0x7972617262696CLL;
            if (!v15)
              goto LABEL_7;
            goto LABEL_64;
          case 7:
            v25 = 0xE600000000000000;
            v26 = 0x6E657473696CLL;
            if (!v15)
              goto LABEL_7;
            goto LABEL_64;
          case 8:
            v25 = 0xE700000000000000;
            v26 = 0x676F6C61746163;
            if (!v15)
              goto LABEL_7;
            goto LABEL_64;
          case 9:
            v26 = 0x7265666E69;
            if (!v15)
              goto LABEL_7;
            goto LABEL_64;
          case 10:
            v25 = 0xE800000000000000;
            v26 = 0x64657463656C6573;
            if (!v15)
              goto LABEL_7;
            goto LABEL_64;
          case 11:
            v25 = 0xE600000000000000;
            v26 = 0x686372616573;
            if (!v15)
              goto LABEL_7;
            goto LABEL_64;
          case 12:
            v25 = 0xE700000000000000;
            v26 = 0x676E6964616F6CLL;
            if (!v15)
              goto LABEL_7;
            goto LABEL_64;
          case 13:
            v25 = 0xEA00000000007265;
            v26 = 0x79616C50696E696DLL;
            if (!v15)
              goto LABEL_7;
            goto LABEL_64;
          case 14:
            v26 = 0x6B72616D6B6F6F62;
LABEL_60:
            v25 = 0xE900000000000073;
            if (!v15)
              goto LABEL_7;
            goto LABEL_64;
          case 15:
            v26 = 0x704574736574616CLL;
            v25 = 0xEE007365646F7369;
LABEL_63:
            if (v15)
              goto LABEL_64;
            goto LABEL_7;
          case 16:
            v26 = 0x796C746E65636572;
            v25 = 0xEF64657461647055;
            if (!v15)
              goto LABEL_7;
            goto LABEL_64;
          default:
            v25 = 0xE700000000000000;
            v26 = 0x6E6F6974617473;
            if (!v15)
              goto LABEL_7;
LABEL_64:
            v28 = v55[4];
            v27 = v55[5];
            if (v28 == v23 && v27 == v22)
            {
              swift_bridgeObjectRelease();
              v29 = 0;
              if (v23 == v26)
              {
                v30 = 0;
                if (v22 != v25)
                  goto LABEL_84;
                goto LABEL_86;
              }
LABEL_83:
              v30 = 0;
              goto LABEL_84;
            }
            if ((_stringCompareWithSmolCheck(_:_:expecting:)(v55[4], v55[5], v23, v22, 0) & 1) == 0)
            {
              v31 = v53;
              v32 = 1;
              do
              {
                if (v15 == v32)
                {
LABEL_7:
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  v10 = v57;
                  sub_145D8((uint64_t)v57, type metadata accessor for TabMenu.Item);
                  v14 = v56;
                  sub_145D8((uint64_t)v56, type metadata accessor for TabMenu.Item);
                  goto LABEL_8;
                }
                v30 = v32;
                v33 = *(v31 - 1);
                v34 = *v31;
                if (v33 == v23 && v34 == v22)
                  break;
                v36 = _stringCompareWithSmolCheck(_:_:expecting:)(v33, v34, v23, v22, 0);
                v32 = v30 + 1;
                v31 += 2;
              }
              while ((v36 & 1) == 0);
              swift_bridgeObjectRelease();
              if (v28 == v26 && v27 == v25)
              {
LABEL_85:
                v29 = 0;
                goto LABEL_86;
              }
LABEL_84:
              if ((_stringCompareWithSmolCheck(_:_:expecting:)(v28, v27, v26, v25, 0) & 1) != 0)
                goto LABEL_85;
              v42 = v53;
              v43 = 1;
              v44 = v51;
              while (v15 != v43)
              {
                v29 = v43;
                if (v44 == v43)
                {
                  __break(1u);
                  goto LABEL_104;
                }
                v45 = *(v42 - 1);
                v46 = *v42;
                if (v45 != v26 || v25 != v46)
                {
                  v48 = _stringCompareWithSmolCheck(_:_:expecting:)(v45, v46, v26, v25, 0);
                  v43 = v29 + 1;
                  v42 += 2;
                  if ((v48 & 1) == 0)
                    continue;
                }
                goto LABEL_86;
              }
              swift_bridgeObjectRelease();
              v10 = v57;
              sub_145D8((uint64_t)v57, type metadata accessor for TabMenu.Item);
              v14 = v56;
              sub_145D8((uint64_t)v56, type metadata accessor for TabMenu.Item);
LABEL_87:
              v37 = *v64;
              if (!*v64)
              {
LABEL_104:
                __break(1u);
                JUMPOUT(0x14A63CLL);
              }
              v39 = v61;
              v38 = v62;
              v40 = v37 + v62;
              v41 = v37 + v61;
              sub_12B1D0(v37 + v62, v60);
              if (v38 < v39 || v40 >= v41 + v59)
                swift_arrayInitWithTakeFrontToBack(v40, v41, 1, v58);
              sub_12B1D0(v60, v41);
              v17 = v63;
              if (v63 == v54)
                goto LABEL_8;
              continue;
            }
            swift_bridgeObjectRelease();
            v29 = 0;
            if (v28 != v26 || v27 != v25)
              goto LABEL_83;
            v30 = 0;
LABEL_86:
            swift_bridgeObjectRelease();
            v10 = v57;
            sub_145D8((uint64_t)v57, type metadata accessor for TabMenu.Item);
            v14 = v56;
            sub_145D8((uint64_t)v56, type metadata accessor for TabMenu.Item);
            if (v30 < v29)
              goto LABEL_87;
LABEL_8:
            a3 = v52 + 1;
            if (v52 + 1 == v50)
              return;
            break;
        }
        break;
      }
    }
  }
}

uint64_t sub_14A6C4(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  Swift::Int v21;
  Swift::Int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  char *v29;
  Swift::Int v30;
  Swift::Int v31;
  Swift::Int v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  Swift::Int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  _BOOL4 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v66;
  uint64_t v67;
  int64_t v68;
  unint64_t v69;
  Swift::Int v70;
  int64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  Swift::Int v76;
  unint64_t v77;
  Swift::Int v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v100;
  int64_t v101;
  uint64_t v102;
  unint64_t v103;
  int64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  char *v116;
  char *v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  BOOL v129;
  unint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  BOOL v139;
  uint64_t v140;
  char v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  BOOL v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  char *v159;
  char *v160;
  uint64_t v161;
  char *v162;
  unint64_t v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  _QWORD *v169;
  unint64_t v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  unint64_t v181;
  unint64_t v182;
  _QWORD *v183;
  unint64_t v184;
  uint64_t v185;
  char *v186;
  unint64_t v187;
  _QWORD *v188;
  char *v189;
  char *v190;
  Swift::Int v191;
  Swift::Int v192;
  char *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t *v199;
  uint64_t v200;
  Swift::Int v201;
  uint64_t v202;
  Swift::Int v203;
  uint64_t v204;
  _QWORD *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t v210;
  uint64_t v211;
  uint64_t *v212;
  uint64_t v213;

  v207 = type metadata accessor for TabMenu.Item(0);
  v198 = *(_QWORD *)(v207 - 8);
  __chkstk_darwin(v207);
  v195 = (uint64_t)&v188 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v206 = (uint64_t)&v188 - v6;
  __chkstk_darwin(v7);
  v213 = (uint64_t)&v188 - v8;
  __chkstk_darwin(v9);
  v211 = (uint64_t)&v188 - v10;
  __chkstk_darwin(v11);
  v200 = (uint64_t)&v188 - v12;
  __chkstk_darwin(v13);
  v196 = (uint64_t)&v188 - v14;
  __chkstk_darwin(v15);
  v17 = (char *)&v188 - v16;
  __chkstk_darwin(v18);
  v20 = (char *)&v188 - v19;
  v212 = a1;
  v21 = a1[1];
  v205 = a2;
  swift_bridgeObjectRetain_n(a2, 3);
  v22 = _minimumMergeRunLength(_:)(v21);
  if (v22 >= v21)
  {
    if (v21 < 0)
      goto LABEL_336;
    if (!v21)
      return swift_bridgeObjectRelease_n(v205, 3);
    v27 = v205;
    swift_bridgeObjectRetain();
    sub_149E38(0, v21, 1, v212, v27);
    return swift_bridgeObjectRelease_n(v27, 4);
  }
  if (v21 >= 0)
    v23 = v21;
  else
    v23 = v21 + 1;
  if (v21 < -1)
    goto LABEL_344;
  v191 = v22;
  if (v21 < 2)
  {
    v29 = (char *)_swiftEmptyArrayStorage;
    v197 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v198 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v198 + 80));
    v188 = _swiftEmptyArrayStorage;
    if (v21 != 1)
    {
      v115 = _swiftEmptyArrayStorage[2];
LABEL_298:
      if (v115 >= 2)
      {
        v174 = *v212;
        v213 = *v212;
        while (1)
        {
          v175 = v115 - 2;
          if (v115 < 2)
            goto LABEL_330;
          if (!v174)
            goto LABEL_343;
          v176 = (uint64_t)v29;
          v177 = *(_QWORD *)&v29[16 * v175 + 32];
          v178 = *(_QWORD *)&v29[16 * v115 + 24];
          v179 = *(_QWORD *)(v198 + 72);
          v180 = v174 + v179 * v177;
          v181 = v174 + v179 * *(_QWORD *)&v29[16 * v115 + 16];
          v182 = v174 + v179 * v178;
          v183 = v205;
          swift_bridgeObjectRetain();
          v184 = v180;
          v185 = v202;
          sub_148A1C(v184, v181, v182, v197, v183);
          v202 = v185;
          if (v185)
            goto LABEL_313;
          if (v178 < v177)
            goto LABEL_331;
          v29 = (char *)v176;
          if ((swift_isUniquelyReferenced_nonNull_native(v176) & 1) == 0)
            v29 = sub_24B7BC(v176);
          if (v175 >= *((_QWORD *)v29 + 2))
            goto LABEL_332;
          v186 = &v29[16 * v175 + 32];
          *(_QWORD *)v186 = v177;
          *((_QWORD *)v186 + 1) = v178;
          v187 = *((_QWORD *)v29 + 2);
          if (v115 > v187)
            goto LABEL_333;
          memmove(&v29[16 * v115 + 16], &v29[16 * v115 + 32], 16 * (v187 - v115));
          *((_QWORD *)v29 + 2) = v187 - 1;
          v115 = v187 - 1;
          v174 = v213;
          if (v187 <= 2)
            goto LABEL_313;
        }
      }
      goto LABEL_313;
    }
    v189 = v20;
    v190 = v17;
  }
  else
  {
    v189 = v20;
    v190 = v17;
    v24 = v23 >> 1;
    v25 = static Array._allocateBufferUninitialized(minimumCapacity:)(v23 >> 1, v207);
    *(_QWORD *)(v25 + 16) = v24;
    v26 = *(unsigned __int8 *)(v198 + 80);
    v188 = (_QWORD *)v25;
    v197 = v25 + ((v26 + 32) & ~v26);
  }
  v30 = 0;
  v199 = v205 + 7;
  v29 = (char *)_swiftEmptyArrayStorage;
  while (1)
  {
    v31 = v30;
    v32 = v30 + 1;
    v193 = v29;
    v203 = v30;
    if (v30 + 1 >= v21)
    {
      ++v30;
      goto LABEL_244;
    }
    v33 = *v212;
    v34 = *(_QWORD *)(v198 + 72);
    v35 = (uint64_t)v189;
    sub_963D4(*v212 + v34 * v32, (uint64_t)v189);
    v208 = v33;
    v209 = v34;
    v36 = v33 + v34 * v30;
    v37 = (uint64_t)v190;
    sub_963D4(v36, (uint64_t)v190);
    v38 = v202;
    LODWORD(v204) = sub_1483E0(v35, v37, v205);
    v202 = v38;
    if (v38)
      goto LABEL_312;
    sub_145D8(v37, type metadata accessor for TabMenu.Item);
    sub_145D8(v35, type metadata accessor for TabMenu.Item);
    v39 = v30 + 2;
    v201 = v21;
    if (v30 + 2 >= v21)
      break;
    v210 = v205[2];
    v40 = v210;
    if (v210 <= 1)
      v40 = 1;
    v194 = v40;
    while (2)
    {
      v41 = v208;
      v42 = v209;
      v43 = v196;
      sub_963D4(v208 + v39 * v209, v196);
      sub_963D4(v41 + v32 * v42, v200);
      v44 = *(int *)(v207 + 28);
      v45 = 0xE500000000000000;
      v46 = 0x73776F6873;
      switch(*(_QWORD *)(v43 + v44))
      {
        case 1:
          break;
        case 2:
          v45 = 0xE800000000000000;
          v46 = 0x736C656E6E616863;
          break;
        case 3:
          v45 = 0xEA00000000007365;
          v46 = 0x69726F6765746163;
          break;
        case 4:
          v46 = 0x64616F6C6E776F64;
          v45 = 0xEA00000000006465;
          break;
        case 5:
          v46 = 0x7472616843706F74;
          goto LABEL_26;
        case 6:
          v46 = 0x6F546E7265646F6DLL;
          v45 = 0xEF73747261684370;
          break;
        case 7:
          v45 = 0xE700000000000000;
          v46 = 0x7972617262696CLL;
          break;
        case 8:
          v45 = 0xE600000000000000;
          v46 = 0x6E657473696CLL;
          break;
        case 9:
          v45 = 0xE700000000000000;
          v46 = 0x676F6C61746163;
          break;
        case 0xALL:
          v46 = 0x7265666E69;
          break;
        case 0xBLL:
          v45 = 0xE800000000000000;
          v46 = 0x64657463656C6573;
          break;
        case 0xCLL:
          v45 = 0xE600000000000000;
          v46 = 0x686372616573;
          break;
        case 0xDLL:
          v45 = 0xE700000000000000;
          v46 = 0x676E6964616F6CLL;
          break;
        case 0xELL:
          v45 = 0xEA00000000007265;
          v46 = 0x79616C50696E696DLL;
          break;
        case 0xFLL:
          v46 = 0x6B72616D6B6F6F62;
LABEL_26:
          v45 = 0xE900000000000073;
          break;
        case 0x10:
          v46 = 0x704574736574616CLL;
          v45 = 0xEE007365646F7369;
          break;
        case 0x11:
          v46 = 0x796C746E65636572;
          v45 = 0xEF64657461647055;
          break;
        default:
          v45 = 0xE700000000000000;
          v46 = 0x6E6F6974617473;
          break;
      }
      v47 = 0xE500000000000000;
      v48 = 0x73776F6873;
      switch(*(_QWORD *)(v200 + v44))
      {
        case 1:
          goto LABEL_71;
        case 2:
          v47 = 0xE800000000000000;
          v48 = 0x736C656E6E616863;
          if (!v210)
            goto LABEL_49;
          goto LABEL_72;
        case 3:
          v47 = 0xEA00000000007365;
          v48 = 0x69726F6765746163;
          if (!v210)
            goto LABEL_49;
          goto LABEL_72;
        case 4:
          v48 = 0x64616F6C6E776F64;
          v47 = 0xEA00000000006465;
          if (!v210)
            goto LABEL_49;
          goto LABEL_72;
        case 5:
          v48 = 0x7472616843706F74;
          goto LABEL_48;
        case 6:
          v48 = 0x6F546E7265646F6DLL;
          v47 = 0xEF73747261684370;
          if (!v210)
            goto LABEL_49;
          goto LABEL_72;
        case 7:
          v47 = 0xE700000000000000;
          v48 = 0x7972617262696CLL;
          if (!v210)
            goto LABEL_49;
          goto LABEL_72;
        case 8:
          v47 = 0xE600000000000000;
          v48 = 0x6E657473696CLL;
          if (!v210)
            goto LABEL_49;
          goto LABEL_72;
        case 9:
          v47 = 0xE700000000000000;
          v48 = 0x676F6C61746163;
LABEL_71:
          if (v210)
            goto LABEL_72;
          goto LABEL_49;
        case 0xALL:
          v48 = 0x7265666E69;
          if (!v210)
            goto LABEL_49;
          goto LABEL_72;
        case 0xBLL:
          v47 = 0xE800000000000000;
          v48 = 0x64657463656C6573;
          if (!v210)
            goto LABEL_49;
          goto LABEL_72;
        case 0xCLL:
          v47 = 0xE600000000000000;
          v48 = 0x686372616573;
          if (!v210)
            goto LABEL_49;
          goto LABEL_72;
        case 0xDLL:
          v47 = 0xE700000000000000;
          v48 = 0x676E6964616F6CLL;
          if (!v210)
            goto LABEL_49;
          goto LABEL_72;
        case 0xELL:
          v47 = 0xEA00000000007265;
          v48 = 0x79616C50696E696DLL;
          if (!v210)
            goto LABEL_49;
          goto LABEL_72;
        case 0xFLL:
          v48 = 0x6B72616D6B6F6F62;
LABEL_48:
          v47 = 0xE900000000000073;
          if (!v210)
            goto LABEL_49;
          goto LABEL_72;
        case 0x10:
          v48 = 0x704574736574616CLL;
          v47 = 0xEE007365646F7369;
          if (!v210)
            goto LABEL_49;
          goto LABEL_72;
        case 0x11:
          v48 = 0x796C746E65636572;
          v47 = 0xEF64657461647055;
          if (!v210)
            goto LABEL_49;
          goto LABEL_72;
        default:
          v47 = 0xE700000000000000;
          v48 = 0x6E6F6974617473;
          if (!v210)
          {
LABEL_49:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v49 = 0;
            goto LABEL_96;
          }
LABEL_72:
          v50 = v205[4];
          v51 = v205[5];
          if (v50 == v46 && v51 == v45)
          {
            swift_bridgeObjectRelease();
            v52 = 0;
            if (v46 == v48)
            {
              v53 = 0;
              if (v45 != v47)
                goto LABEL_92;
LABEL_94:
              swift_bridgeObjectRelease();
              v49 = v53 < v52;
              goto LABEL_95;
            }
            goto LABEL_91;
          }
          if ((_stringCompareWithSmolCheck(_:_:expecting:)(v205[4], v205[5], v46, v45, 0) & 1) != 0)
          {
            swift_bridgeObjectRelease();
            v52 = 0;
            if (v50 == v48 && v51 == v47)
            {
              v53 = 0;
              goto LABEL_94;
            }
LABEL_91:
            v53 = 0;
            goto LABEL_92;
          }
          v54 = v199;
          v55 = 1;
          do
          {
            v53 = v55;
            if (v210 == v55)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v49 = 0;
              goto LABEL_95;
            }
            v56 = *(v54 - 1);
            v57 = *v54;
            if (v56 == v46 && v57 == v45)
              break;
            v59 = _stringCompareWithSmolCheck(_:_:expecting:)(v56, v57, v46, v45, 0);
            v55 = v53 + 1;
            v54 += 2;
          }
          while ((v59 & 1) == 0);
          swift_bridgeObjectRelease();
          if (v50 == v48 && v51 == v47)
          {
LABEL_93:
            v52 = 0;
            goto LABEL_94;
          }
LABEL_92:
          if ((_stringCompareWithSmolCheck(_:_:expecting:)(v50, v51, v48, v47, 0) & 1) != 0)
            goto LABEL_93;
          v60 = v199;
          v61 = 1;
          v62 = v194;
          while (1)
          {
            v52 = v61;
            if (v210 == v61)
              break;
            if (v62 == v61)
              goto LABEL_318;
            v63 = *(v60 - 1);
            v64 = *v60;
            if (v63 != v48 || v47 != v64)
            {
              v66 = _stringCompareWithSmolCheck(_:_:expecting:)(v63, v64, v48, v47, 0);
              v61 = v52 + 1;
              v60 += 2;
              if ((v66 & 1) == 0)
                continue;
            }
            goto LABEL_94;
          }
          swift_bridgeObjectRelease();
          v49 = 1;
LABEL_95:
          v29 = v193;
          v21 = v201;
LABEL_96:
          sub_145D8(v200, type metadata accessor for TabMenu.Item);
          sub_145D8(v196, type metadata accessor for TabMenu.Item);
          if (((v204 ^ v49) & 1) == 0)
          {
            v30 = v39 + 1;
            v32 = v39;
            v39 = v30;
            if (v30 >= v21)
              goto LABEL_114;
            continue;
          }
          v30 = v39;
          if ((v204 & 1) == 0)
            goto LABEL_128;
LABEL_115:
          v31 = v203;
          if (v30 < v203)
            goto LABEL_339;
          if (v203 >= v30)
            goto LABEL_129;
          v67 = 0;
          v68 = v209 * (v30 - 1);
          v69 = v30 * v209;
          v70 = v203;
          v71 = v203 * v209;
          do
          {
            if (v70 != v30 + v67 - 1)
            {
              v74 = v29;
              v75 = v208;
              if (!v208)
                goto LABEL_342;
              v76 = v30;
              v77 = v208 + v71;
              v210 = v208 + v68;
              sub_12B1D0(v208 + v71, v195);
              if (v71 < v68 || v77 >= v75 + v69)
              {
                v72 = v75 + v71;
                v73 = v210;
                swift_arrayInitWithTakeFrontToBack(v72, v210, 1, v207);
              }
              else
              {
                v73 = v210;
                if (v71 != v68)
                  swift_arrayInitWithTakeBackToFront(v77);
              }
              sub_12B1D0(v195, v73);
              v30 = v76;
              v29 = v74;
            }
            ++v70;
            --v67;
            v68 -= v209;
            v69 -= v209;
            v71 += v209;
          }
          while (v70 < v30 + v67);
          v31 = v203;
          v21 = v201;
          if (v30 < v201)
            goto LABEL_130;
LABEL_244:
          if (v30 < v31)
            goto LABEL_334;
          if ((swift_isUniquelyReferenced_nonNull_native(v29) & 1) == 0)
            v29 = sub_24B480(0, *((_QWORD *)v29 + 2) + 1, 1, v29);
          v114 = *((_QWORD *)v29 + 2);
          v113 = *((_QWORD *)v29 + 3);
          v115 = v114 + 1;
          if (v114 >= v113 >> 1)
            v29 = sub_24B480((char *)(v113 > 1), v114 + 1, 1, v29);
          *((_QWORD *)v29 + 2) = v115;
          v116 = v29 + 32;
          v117 = &v29[16 * v114 + 32];
          *(_QWORD *)v117 = v203;
          *((_QWORD *)v117 + 1) = v30;
          if (v114)
          {
            v201 = v30;
            while (1)
            {
              v118 = v115 - 1;
              if (v115 >= 4)
              {
                v123 = &v116[16 * v115];
                v124 = *((_QWORD *)v123 - 8);
                v125 = *((_QWORD *)v123 - 7);
                v129 = __OFSUB__(v125, v124);
                v126 = v125 - v124;
                if (v129)
                  goto LABEL_319;
                v128 = *((_QWORD *)v123 - 6);
                v127 = *((_QWORD *)v123 - 5);
                v129 = __OFSUB__(v127, v128);
                v121 = v127 - v128;
                v122 = v129;
                if (v129)
                  goto LABEL_320;
                v130 = v115 - 2;
                v131 = &v116[16 * v115 - 32];
                v133 = *(_QWORD *)v131;
                v132 = *((_QWORD *)v131 + 1);
                v129 = __OFSUB__(v132, v133);
                v134 = v132 - v133;
                if (v129)
                  goto LABEL_322;
                v129 = __OFADD__(v121, v134);
                v135 = v121 + v134;
                if (v129)
                  goto LABEL_325;
                if (v135 >= v126)
                {
                  v153 = &v116[16 * v118];
                  v155 = *(_QWORD *)v153;
                  v154 = *((_QWORD *)v153 + 1);
                  v129 = __OFSUB__(v154, v155);
                  v156 = v154 - v155;
                  if (v129)
                    goto LABEL_329;
                  v146 = v121 < v156;
                  goto LABEL_282;
                }
              }
              else
              {
                if (v115 != 3)
                {
                  v147 = *((_QWORD *)v29 + 4);
                  v148 = *((_QWORD *)v29 + 5);
                  v129 = __OFSUB__(v148, v147);
                  v140 = v148 - v147;
                  v141 = v129;
                  goto LABEL_276;
                }
                v120 = *((_QWORD *)v29 + 4);
                v119 = *((_QWORD *)v29 + 5);
                v129 = __OFSUB__(v119, v120);
                v121 = v119 - v120;
                v122 = v129;
              }
              if ((v122 & 1) != 0)
                goto LABEL_321;
              v130 = v115 - 2;
              v136 = &v116[16 * v115 - 32];
              v138 = *(_QWORD *)v136;
              v137 = *((_QWORD *)v136 + 1);
              v139 = __OFSUB__(v137, v138);
              v140 = v137 - v138;
              v141 = v139;
              if (v139)
                goto LABEL_324;
              v142 = &v116[16 * v118];
              v144 = *(_QWORD *)v142;
              v143 = *((_QWORD *)v142 + 1);
              v129 = __OFSUB__(v143, v144);
              v145 = v143 - v144;
              if (v129)
                goto LABEL_327;
              if (__OFADD__(v140, v145))
                goto LABEL_328;
              if (v140 + v145 >= v121)
              {
                v146 = v121 < v145;
LABEL_282:
                if (v146)
                  v118 = v130;
                goto LABEL_284;
              }
LABEL_276:
              if ((v141 & 1) != 0)
                goto LABEL_323;
              v149 = &v116[16 * v118];
              v151 = *(_QWORD *)v149;
              v150 = *((_QWORD *)v149 + 1);
              v129 = __OFSUB__(v150, v151);
              v152 = v150 - v151;
              if (v129)
                goto LABEL_326;
              if (v152 < v140)
                goto LABEL_293;
LABEL_284:
              v157 = v118 - 1;
              if (v118 - 1 >= v115)
              {
                __break(1u);
LABEL_315:
                __break(1u);
LABEL_316:
                __break(1u);
LABEL_317:
                __break(1u);
LABEL_318:
                __break(1u);
LABEL_319:
                __break(1u);
LABEL_320:
                __break(1u);
LABEL_321:
                __break(1u);
LABEL_322:
                __break(1u);
LABEL_323:
                __break(1u);
LABEL_324:
                __break(1u);
LABEL_325:
                __break(1u);
LABEL_326:
                __break(1u);
LABEL_327:
                __break(1u);
LABEL_328:
                __break(1u);
LABEL_329:
                __break(1u);
LABEL_330:
                __break(1u);
LABEL_331:
                __break(1u);
LABEL_332:
                __break(1u);
LABEL_333:
                __break(1u);
LABEL_334:
                __break(1u);
LABEL_335:
                __break(1u);
LABEL_336:
                __break(1u);
LABEL_337:
                __break(1u);
                goto LABEL_338;
              }
              v158 = *v212;
              if (!*v212)
                goto LABEL_341;
              v159 = v29;
              v160 = &v116[16 * v157];
              v161 = *(_QWORD *)v160;
              v162 = v116;
              v163 = v118;
              v164 = &v116[16 * v118];
              v165 = *((_QWORD *)v164 + 1);
              v166 = *(_QWORD *)(v198 + 72);
              v167 = v158 + v166 * *(_QWORD *)v160;
              v168 = v158 + v166 * *(_QWORD *)v164;
              v209 = v158 + v166 * v165;
              v210 = v168;
              v169 = v205;
              swift_bridgeObjectRetain();
              v170 = v167;
              v171 = v202;
              sub_148A1C(v170, v210, v209, v197, v169);
              v202 = v171;
              if (v171)
                goto LABEL_313;
              if (v165 < v161)
                goto LABEL_315;
              if (v163 > *((_QWORD *)v159 + 2))
                goto LABEL_316;
              v172 = v163;
              *(_QWORD *)v160 = v161;
              v116 = v162;
              *(_QWORD *)&v162[16 * v157 + 8] = v165;
              v173 = *((_QWORD *)v159 + 2);
              if (v163 >= v173)
                goto LABEL_317;
              v29 = v159;
              v115 = v173 - 1;
              memmove(v164, v164 + 16, 16 * (v173 - 1 - v172));
              *((_QWORD *)v159 + 2) = v173 - 1;
              v146 = v173 > 2;
              v30 = v201;
              if (!v146)
                goto LABEL_293;
            }
          }
          v115 = 1;
LABEL_293:
          v21 = v212[1];
          if (v30 >= v21)
            goto LABEL_298;
          break;
      }
      break;
    }
  }
  v30 += 2;
LABEL_114:
  if ((v204 & 1) != 0)
    goto LABEL_115;
LABEL_128:
  v31 = v203;
LABEL_129:
  if (v30 >= v21)
    goto LABEL_244;
LABEL_130:
  if (__OFSUB__(v30, v31))
    goto LABEL_335;
  if (v30 - v31 >= v191)
  {
LABEL_243:
    v31 = v203;
    goto LABEL_244;
  }
  if (__OFADD__(v203, v191))
    goto LABEL_337;
  if (v203 + v191 >= v21)
    v78 = v21;
  else
    v78 = v203 + v191;
  if (v78 < v203)
  {
LABEL_338:
    __break(1u);
LABEL_339:
    __break(1u);
LABEL_340:
    swift_bridgeObjectRelease_n(v205, 3);
    __break(1u);
LABEL_341:
    swift_bridgeObjectRelease_n(v205, 3);
    __break(1u);
LABEL_342:
    swift_bridgeObjectRelease_n(v205, 3);
    __break(1u);
LABEL_343:
    swift_bridgeObjectRelease_n(v205, 3);
    __break(1u);
LABEL_344:
    swift_bridgeObjectRelease_n(v205, 4);
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
    __break(1u);
    JUMPOUT(0x14BE1CLL);
  }
  if (v30 == v78)
  {
    v31 = v203;
    goto LABEL_244;
  }
  v79 = v205[2];
  v204 = *(_QWORD *)(v198 + 72);
  if (v79 <= 1)
    v80 = 1;
  else
    v80 = v79;
  v194 = v80;
  v192 = v78;
LABEL_145:
  v201 = v30;
  v81 = v30;
  while (1)
  {
    v82 = v81 - 1;
    v83 = v211;
    v84 = *v212;
    v85 = v204;
    v86 = v204 * v81;
    sub_963D4(*v212 + v204 * v81, v211);
    v87 = v85 * v82;
    sub_963D4(v84 + v87, v213);
    v88 = *(int *)(v207 + 28);
    v89 = 0xE500000000000000;
    v90 = 0x73776F6873;
    switch(*(_QWORD *)(v83 + v88))
    {
      case 1:
        break;
      case 2:
        v89 = 0xE800000000000000;
        v90 = 0x736C656E6E616863;
        break;
      case 3:
        v89 = 0xEA00000000007365;
        v90 = 0x69726F6765746163;
        break;
      case 4:
        v90 = 0x64616F6C6E776F64;
        v89 = 0xEA00000000006465;
        break;
      case 5:
        v90 = 0x7472616843706F74;
        goto LABEL_154;
      case 6:
        v90 = 0x6F546E7265646F6DLL;
        v89 = 0xEF73747261684370;
        break;
      case 7:
        v89 = 0xE700000000000000;
        v90 = 0x7972617262696CLL;
        break;
      case 8:
        v89 = 0xE600000000000000;
        v90 = 0x6E657473696CLL;
        break;
      case 9:
        v89 = 0xE700000000000000;
        v90 = 0x676F6C61746163;
        break;
      case 0xALL:
        v90 = 0x7265666E69;
        break;
      case 0xBLL:
        v89 = 0xE800000000000000;
        v90 = 0x64657463656C6573;
        break;
      case 0xCLL:
        v89 = 0xE600000000000000;
        v90 = 0x686372616573;
        break;
      case 0xDLL:
        v89 = 0xE700000000000000;
        v90 = 0x676E6964616F6CLL;
        break;
      case 0xELL:
        v89 = 0xEA00000000007265;
        v90 = 0x79616C50696E696DLL;
        break;
      case 0xFLL:
        v90 = 0x6B72616D6B6F6F62;
LABEL_154:
        v89 = 0xE900000000000073;
        break;
      case 0x10:
        v90 = 0x704574736574616CLL;
        v89 = 0xEE007365646F7369;
        break;
      case 0x11:
        v90 = 0x796C746E65636572;
        v89 = 0xEF64657461647055;
        break;
      default:
        v89 = 0xE700000000000000;
        v90 = 0x6E6F6974617473;
        break;
    }
    v91 = 0xE500000000000000;
    v92 = 0x73776F6873;
    switch(*(_QWORD *)(v213 + v88))
    {
      case 1:
        goto LABEL_199;
      case 2:
        v91 = 0xE800000000000000;
        v92 = 0x736C656E6E616863;
        if (!v79)
          goto LABEL_143;
        goto LABEL_200;
      case 3:
        v91 = 0xEA00000000007365;
        v92 = 0x69726F6765746163;
        if (!v79)
          goto LABEL_143;
        goto LABEL_200;
      case 4:
        v92 = 0x64616F6C6E776F64;
        v91 = 0xEA00000000006465;
        if (!v79)
          goto LABEL_143;
        goto LABEL_200;
      case 5:
        v92 = 0x7472616843706F74;
        goto LABEL_176;
      case 6:
        v92 = 0x6F546E7265646F6DLL;
        v91 = 0xEF73747261684370;
        if (!v79)
          goto LABEL_143;
        goto LABEL_200;
      case 7:
        v91 = 0xE700000000000000;
        v92 = 0x7972617262696CLL;
        if (!v79)
          goto LABEL_143;
        goto LABEL_200;
      case 8:
        v91 = 0xE600000000000000;
        v92 = 0x6E657473696CLL;
        if (!v79)
          goto LABEL_143;
        goto LABEL_200;
      case 9:
        v91 = 0xE700000000000000;
        v92 = 0x676F6C61746163;
LABEL_199:
        if (v79)
          goto LABEL_200;
        goto LABEL_143;
      case 0xALL:
        v92 = 0x7265666E69;
        if (!v79)
          goto LABEL_143;
        goto LABEL_200;
      case 0xBLL:
        v91 = 0xE800000000000000;
        v92 = 0x64657463656C6573;
        if (!v79)
          goto LABEL_143;
        goto LABEL_200;
      case 0xCLL:
        v91 = 0xE600000000000000;
        v92 = 0x686372616573;
        if (!v79)
          goto LABEL_143;
        goto LABEL_200;
      case 0xDLL:
        v91 = 0xE700000000000000;
        v92 = 0x676E6964616F6CLL;
        if (!v79)
          goto LABEL_143;
        goto LABEL_200;
      case 0xELL:
        v91 = 0xEA00000000007265;
        v92 = 0x79616C50696E696DLL;
        if (!v79)
          goto LABEL_143;
        goto LABEL_200;
      case 0xFLL:
        v92 = 0x6B72616D6B6F6F62;
LABEL_176:
        v91 = 0xE900000000000073;
        if (!v79)
          goto LABEL_143;
        goto LABEL_200;
      case 0x10:
        v92 = 0x704574736574616CLL;
        v91 = 0xEE007365646F7369;
        if (!v79)
          goto LABEL_143;
        goto LABEL_200;
      case 0x11:
        v92 = 0x796C746E65636572;
        v91 = 0xEF64657461647055;
        if (!v79)
          goto LABEL_143;
        goto LABEL_200;
      default:
        v91 = 0xE700000000000000;
        v92 = 0x6E6F6974617473;
        if (!v79)
          goto LABEL_143;
LABEL_200:
        v209 = v82;
        v210 = v86;
        v94 = v205[4];
        v93 = v205[5];
        v208 = v87;
        if (v94 == v90 && v93 == v89)
        {
          swift_bridgeObjectRelease();
          v35 = 0;
          if (v90 != v92)
            goto LABEL_219;
          v37 = 0;
          if (v89 != v91)
            goto LABEL_220;
          goto LABEL_222;
        }
        if ((_stringCompareWithSmolCheck(_:_:expecting:)(v94, v93, v90, v89, 0) & 1) != 0)
        {
          swift_bridgeObjectRelease();
          v35 = 0;
          if (v94 != v92 || v93 != v91)
          {
LABEL_219:
            v37 = 0;
            goto LABEL_220;
          }
          v37 = 0;
LABEL_222:
          swift_bridgeObjectRelease();
          sub_145D8(v213, type metadata accessor for TabMenu.Item);
          sub_145D8(v211, type metadata accessor for TabMenu.Item);
          v146 = v37 < v35;
          v101 = v210;
          if (!v146)
            goto LABEL_144;
          goto LABEL_224;
        }
        v95 = v199;
        v96 = 1;
        break;
    }
    do
    {
      if (v79 == v96)
      {
LABEL_143:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_145D8(v213, type metadata accessor for TabMenu.Item);
        sub_145D8(v211, type metadata accessor for TabMenu.Item);
LABEL_144:
        v30 = v201 + 1;
        if (v201 + 1 == v192)
        {
          v30 = v192;
          v29 = v193;
          goto LABEL_243;
        }
        goto LABEL_145;
      }
      v37 = v96;
      v97 = *(v95 - 1);
      v98 = *v95;
      if (v97 == v90 && v98 == v89)
        break;
      v100 = _stringCompareWithSmolCheck(_:_:expecting:)(v97, v98, v90, v89, 0);
      v96 = v37 + 1;
      v95 += 2;
    }
    while ((v100 & 1) == 0);
    swift_bridgeObjectRelease();
    if (v94 == v92 && v93 == v91)
    {
LABEL_221:
      v35 = 0;
      goto LABEL_222;
    }
LABEL_220:
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(v94, v93, v92, v91, 0) & 1) != 0)
      goto LABEL_221;
    v106 = v199;
    v107 = 1;
    v108 = v194;
LABEL_229:
    if (v79 != v107)
      break;
    swift_bridgeObjectRelease();
    sub_145D8(v213, type metadata accessor for TabMenu.Item);
    sub_145D8(v211, type metadata accessor for TabMenu.Item);
    v101 = v210;
LABEL_224:
    v102 = *v212;
    if (!*v212)
      goto LABEL_340;
    v103 = v102 + v101;
    v104 = v208;
    v105 = v102 + v208;
    sub_12B1D0(v102 + v101, v206);
    if (v101 < v104 || v103 >= v105 + v204)
      swift_arrayInitWithTakeFrontToBack(v103, v105, 1, v207);
    sub_12B1D0(v206, v105);
    v81 = v209;
    if (v209 == v203)
      goto LABEL_144;
  }
  v35 = v107;
  if (v108 != v107)
  {
    v109 = *(v106 - 1);
    v110 = *v106;
    if (v109 == v92 && v91 == v110)
      goto LABEL_222;
    v112 = _stringCompareWithSmolCheck(_:_:expecting:)(v109, v110, v92, v91, 0);
    v107 = v35 + 1;
    v106 += 2;
    if ((v112 & 1) != 0)
      goto LABEL_222;
    goto LABEL_229;
  }
  __break(1u);
LABEL_312:
  sub_145D8(v37, type metadata accessor for TabMenu.Item);
  sub_145D8(v35, type metadata accessor for TabMenu.Item);
LABEL_313:
  swift_bridgeObjectRelease();
  v188[2] = 0;
  swift_bridgeObjectRelease_n(v205, 3);
  return swift_bridgeObjectRelease();
}

uint64_t sub_14BF2C(_QWORD **a1, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v8[2];

  v4 = *(_QWORD *)(type metadata accessor for TabMenu.Item(0) - 8);
  v5 = *a1;
  swift_bridgeObjectRetain_n(a2, 2);
  if ((swift_isUniquelyReferenced_nonNull_native(v5) & 1) == 0)
    v5 = (_QWORD *)sub_24B7E4(v5);
  v6 = v5[2];
  v8[0] = (uint64_t)v5 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  v8[1] = v6;
  swift_bridgeObjectRetain();
  sub_14A6C4(v8, a2);
  swift_bridgeObjectRelease();
  *a1 = v5;
  return swift_bridgeObjectRelease_n(a2, 2);
}

uint64_t sub_14BFEC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BC5A0);
  v4 = sub_32914(&qword_3BC5A8, &qword_3BC5A0, (uint64_t)&protocol conformance descriptor for Set<A>);
  result = Collection.isNotEmpty.getter(v3, v4);
  if ((result & 1) != 0)
  {
    v6 = OBJC_IVAR____TtC8ShelfKit29LibraryTabElementGroupManager_libraryItems;
    swift_bridgeObjectRetain();
    v7 = swift_bridgeObjectRetain();
    v8 = sub_149308(v7, a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v1 + v6) = v8;
    swift_bridgeObjectRelease();
    v9 = (uint64_t *)swift_bridgeObjectRetain();
    sub_20CB6C(v9);
    return swift_bridgeObjectRelease();
  }
  return result;
}

id sub_14C0D8(void *a1)
{
  uint64_t v1;
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  id v11;
  id v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t v16;
  id v17;
  NSString v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  Class isa;
  _QWORD aBlock[5];
  uint64_t v26;
  __int128 v27[2];
  Swift::String v28;

  v3 = objc_msgSend(a1, "_parent");
  if (!v3)
    return 0;
  v4 = v3;
  v5 = objc_msgSend(v3, "_identifier");

  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  v8 = v7;

  if (v6 == 0xD000000000000020 && v8 == 0x80000000003109B0)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v8, 0xD000000000000020, 0x80000000003109B0, 0);
    swift_bridgeObjectRelease();
    if ((v9 & 1) == 0)
      return 0;
  }
  v10 = objc_opt_self(_UITabAction);
  if (!swift_dynamicCastObjCClass(a1, v10))
  {
    v13 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v14._countAndFlagsBits = 0xD00000000000001DLL;
    v28._object = (void *)0xE000000000000000;
    v14._object = (void *)0x8000000000310C10;
    v15._countAndFlagsBits = 0;
    v15._object = (void *)0xE000000000000000;
    v28._countAndFlagsBits = 0;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v14, (Swift::String_optional)0, (NSBundle)v13, v15, v28);

    sub_150C8(v1 + OBJC_IVAR____TtC8ShelfKit29LibraryTabElementGroupManager_libraryActionController, (uint64_t)v27);
    v16 = swift_allocObject(&unk_382858, 64, 7);
    sub_F4D8(v27, v16 + 16);
    *(_QWORD *)(v16 + 56) = a1;
    v17 = a1;
    v18 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    aBlock[4] = sub_14CE74;
    v26 = v16;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1480D0;
    aBlock[3] = &block_descriptor_19;
    v19 = _Block_copy(aBlock);
    v20 = objc_msgSend((id)objc_opt_self(UIContextualAction), "contextualActionWithStyle:title:handler:", 1, v18, v19);

    _Block_release(v19);
    swift_release(v26);
    v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BC590);
    v22 = swift_allocObject(v21, 40, 7);
    *(_OWORD *)(v22 + 16) = xmmword_2EF430;
    *(_QWORD *)(v22 + 32) = v20;
    aBlock[0] = v22;
    specialized Array._endMutation()(v22);
    sub_327F8(0, &qword_3BC598, UIContextualAction_ptr);
    v23 = v20;
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v11 = objc_msgSend((id)objc_opt_self(UISwipeActionsConfiguration), "configurationWithActions:", isa);

    return v11;
  }
  return 0;
}

id sub_14C3CC(void *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  id v11;
  unint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  _QWORD *v37;
  void *v38;
  void *v39;
  _QWORD *v40;
  id v41;
  id v42;
  _QWORD v43[2];
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD aBlock[5];
  _QWORD *v49;

  v3 = type metadata accessor for TabMenu.Item(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BC390);
  __chkstk_darwin(v7);
  v9 = (char *)v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = objc_opt_self(_UITabAction);
  v11 = 0;
  if (swift_dynamicCastObjCClass(a1, v10))
    return v11;
  v45 = v1;
  v46 = v4;
  v44 = v9;
  v12 = sub_288454((uint64_t)_swiftEmptyArrayStorage);
  v13 = objc_msgSend(a1, "identifier");
  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
  v16 = v15;

  if (v14 == 0xD000000000000020 && v16 == 0x80000000003109B0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 0;
  }
  v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v16, 0xD000000000000020, 0x80000000003109B0, 0);
  swift_bridgeObjectRelease();
  if ((v17 & 1) != 0)
  {
LABEL_6:
    swift_bridgeObjectRelease();
    return 0;
  }
  v18 = *(_QWORD *)&v45[OBJC_IVAR____TtC8ShelfKit29LibraryTabElementGroupManager_stationItems];
  v19 = *(_QWORD *)(v18 + 16);
  if (!v19)
  {
    swift_bridgeObjectRetain();
    v30 = 1;
LABEL_23:
    v31 = (uint64_t)v44;
    goto LABEL_26;
  }
  v43[0] = v12;
  v43[1] = v18;
  v20 = v18 + ((*(unsigned __int8 *)(v46 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80));
  v47 = *(_QWORD *)(v46 + 72);
  swift_bridgeObjectRetain_n(v18, 2);
  while (1)
  {
    sub_963D4(v20, (uint64_t)v6);
    v21 = *(_QWORD *)&v6[*(int *)(v3 + 28)];
    if (v21 >= 0x12)
    {
      v22 = *(_QWORD *)(v21 + 16);
      v23 = *(_QWORD *)(v21 + 24);
      swift_bridgeObjectRetain();
    }
    else
    {
      v22 = 0;
      v23 = 0;
    }
    v24 = objc_msgSend(a1, "identifier");
    v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
    v27 = v26;

    if (!v23)
    {
      swift_bridgeObjectRelease();
      goto LABEL_10;
    }
    if (v22 == v25 && v23 == v27)
      break;
    v29 = _stringCompareWithSmolCheck(_:_:expecting:)(v22, v23, v25, v27, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v29 & 1) != 0)
      goto LABEL_25;
LABEL_10:
    sub_145D8((uint64_t)v6, type metadata accessor for TabMenu.Item);
    v20 += v47;
    if (!--v19)
    {
      swift_bridgeObjectRelease();
      v30 = 1;
      v12 = v43[0];
      goto LABEL_23;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_25:
  swift_bridgeObjectRelease();
  v31 = (uint64_t)v44;
  sub_12B1D0((uint64_t)v6, (uint64_t)v44);
  v30 = 0;
  v12 = v43[0];
LABEL_26:
  v32 = v46;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v46 + 56))(v31, v30, 1, v3);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v31, 1, v3) != 1)
  {
    v34 = *(_QWORD *)(v31 + *(int *)(v3 + 28));
    sub_26794(v34);
    sub_145D8(v31, type metadata accessor for TabMenu.Item);
    if ((unint64_t)(v34 - 1) > 0x10)
    {
      if (v34)
      {
        v35 = swift_allocObject(&unk_3827E0, 32, 7);
        v36 = v45;
        *(_QWORD *)(v35 + 16) = v45;
        *(_QWORD *)(v35 + 24) = v34;
        v37 = (_QWORD *)swift_allocObject(&unk_382808, 48, 7);
        v37[2] = v12;
        v37[3] = sub_14CDA8;
        v37[4] = v35;
        v37[5] = v36;
        v38 = (void *)objc_opt_self(UIContextMenuConfiguration);
        aBlock[4] = sub_14CE3C;
        v49 = v37;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = sub_1489A4;
        aBlock[3] = &block_descriptor_13_2;
        v39 = _Block_copy(aBlock);
        v40 = v49;
        v41 = v36;
        sub_26794(v34);
        v42 = v41;
        swift_bridgeObjectRetain();
        swift_retain();
        swift_retain();
        swift_release(v40);
        v11 = objc_msgSend(v38, "configurationWithIdentifier:previewProvider:actionProvider:", 0, 0, v39);
        swift_release(v37);
        _Block_release(v39);
        swift_release(v35);
        sub_267A8(v34);
        swift_bridgeObjectRelease();
        return v11;
      }
    }
    else
    {
      sub_267A8(v34);
    }
    goto LABEL_6;
  }
  swift_bridgeObjectRelease();
  sub_1459C(v31, &qword_3BC390);
  return 0;
}

void sub_14C88C(void *a1)
{
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  Swift::String v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t countAndFlagsBits;
  void *v34;
  uint64_t v35;
  id v36;
  uint64_t v37;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BC570);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UICellAccessory.LabelOptions(0, v3);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UICellAccessory.DisplayedState(0, v8);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = type metadata accessor for UICellAccessory(0, v13);
  v16 = *(_QWORD *)(v35 - 8);
  *(_QWORD *)&v17 = __chkstk_darwin(v35).n128_u64[0];
  v19 = (char *)&v32 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = objc_msgSend(a1, "_tab", v17);
  v20 = type metadata accessor for TabElement(0);
  v21 = swift_dynamicCastClass(v36, v20);
  if (!v21
    || (v34 = a1,
        v22 = v21 + OBJC_IVAR____TtC8ShelfKit10TabElement_tabItem,
        v23 = *(_QWORD *)(v22 + *(int *)(type metadata accessor for TabMenu.Item(0) + 28)),
        (unint64_t)(v23 - 1) < 0x11))
  {
    v24 = v36;
LABEL_4:

    return;
  }
  v24 = v36;
  if (!v23)
    goto LABEL_4;
  v25 = *(_QWORD *)(v23 + OBJC_IVAR____TtC8ShelfKit13StationDetail_episodeCount);
  if (v25 <= 0)
    goto LABEL_4;
  v37 = v25;
  sub_14CD38();
  v26 = BinaryInteger.formatted()();
  countAndFlagsBits = v26._countAndFlagsBits;

  (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v15, enum case for UICellAccessory.DisplayedState.whenNotEditing(_:), v11);
  v27 = type metadata accessor for UICellAccessory.LayoutDimension(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v5, 1, 1, v27);
  UICellAccessory.LabelOptions.init(isHidden:reservedLayoutWidth:tintColor:font:adjustsFontForContentSizeCategory:)(2, v5, 0, 0, 2);
  static UICellAccessory.label(text:displayed:options:)(countAndFlagsBits, v26._object, v15, v10);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  v28 = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  v29 = _UITabSidebarItem._accessories.getter(v28);
  if ((swift_isUniquelyReferenced_nonNull_native(v29) & 1) == 0)
    v29 = sub_11460(0, *(_QWORD *)(v29 + 16) + 1, 1, v29);
  v31 = *(_QWORD *)(v29 + 16);
  v30 = *(_QWORD *)(v29 + 24);
  if (v31 >= v30 >> 1)
    v29 = sub_11460(v30 > 1, v31 + 1, 1, v29);
  *(_QWORD *)(v29 + 16) = v31 + 1;
  (*(void (**)(unint64_t, char *, uint64_t))(v16 + 32))(v29+ ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80))+ *(_QWORD *)(v16 + 72) * v31, v19, v35);
  _UITabSidebarItem._accessories.setter(v29);
}

id sub_14CBBC@<X0>(_QWORD *a1@<X0>, void **a2@<X8>)
{
  void **v3;
  void *v4;
  _BYTE v6[24];

  v3 = (void **)(*a1 + OBJC_IVAR____TtC8ShelfKit29LibraryTabElementGroupManager_tabElementGroup);
  swift_beginAccess(v3, v6, 0, 0);
  v4 = *v3;
  *a2 = *v3;
  return v4;
}

uint64_t method lookup function for LibraryTabElementGroupManager(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for LibraryTabElementGroupManager);
}

uint64_t dispatch thunk of LibraryTabElementGroupManager.tabElementGroup.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))&stru_108.segname[(swift_isaMask & *v0) + 16])();
}

uint64_t dispatch thunk of LibraryTabElementGroupManager.tabElementGroup.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_108.size + (swift_isaMask & *v0)))();
}

uint64_t dispatch thunk of LibraryTabElementGroupManager.tabElementGroup.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_108.offset + (swift_isaMask & *v0)))();
}

unint64_t sub_14CC70()
{
  unint64_t result;

  result = qword_3BC528;
  if (!qword_3BC528)
  {
    sub_327F8(255, &qword_3BC3C0, _UITab_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject);
    atomic_store(result, (unint64_t *)&qword_3BC528);
  }
  return result;
}

uint64_t sub_14CCC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_145620(a1, a2, v2);
}

uint64_t sub_14CCD0()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_14CD04(uint64_t a1)
{
  uint64_t *v1;

  return sub_147620(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t block_copy_helper_13(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t block_destroy_helper_13(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_14CD28(uint64_t result)
{
  if (result != 18)
    return sub_267A8(result);
  return result;
}

unint64_t sub_14CD38()
{
  unint64_t result;

  result = qword_3BC578;
  if (!qword_3BC578)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Int);
    atomic_store(result, (unint64_t *)&qword_3BC578);
  }
  return result;
}

uint64_t sub_14CD7C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_14CDA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit29LibraryTabElementGroupManager_episodeController + 24);
  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit29LibraryTabElementGroupManager_episodeController + 32);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit29LibraryTabElementGroupManager_episodeController), v3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 232))(v2, v3, v4);
}

uint64_t sub_14CE08()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));

  return swift_deallocObject(v0, 48, 7);
}

Class sub_14CE3C(uint64_t a1)
{
  uint64_t v1;

  return sub_148194(a1, *(_QWORD *)(v1 + 16), *(void (**)(__n128))(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_14CE48()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1((_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_14CE74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_148048(a1, a2, a3, a4, (_QWORD *)(v4 + 16), *(void **)(v4 + 56));
}

uint64_t sub_14CE80()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_14CEA4(char a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 16) + 16))(*(_QWORD *)(v1 + 16), a1 & 1);
}

uint64_t sub_14CEB8(id *a1)
{
  uint64_t v1;

  return sub_147EE4(a1, *(_QWORD *)(v1 + 16)) & 1;
}

_QWORD *sub_14CEE4(uint64_t a1)
{
  int64_t v1;
  uint64_t v3;
  int v4;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_1807B0(0, v1, 0);
    v3 = sub_232F78(a1);
    if (v3 < 0 || v3 >= 1 << *(_BYTE *)(a1 + 32))
    {
      __break(1u);
    }
    else if ((*(_QWORD *)(a1 + 64 + 8 * ((unint64_t)v3 >> 6)) & (1 << v3)) != 0)
    {
      if (*(_DWORD *)(a1 + 36) == v4)
        __asm { BR              X9 }
LABEL_10:
      __break(1u);
      JUMPOUT(0x14D1A8);
    }
    __break(1u);
    goto LABEL_10;
  }
  return _swiftEmptyArrayStorage;
}

Swift::Bool __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> PodcastReview.validate()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD v33[2];

  v1 = type metadata accessor for PodcastReview(0);
  __chkstk_darwin(v1);
  v3 = (_QWORD *)((char *)v33 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = __chkstk_darwin(v4);
  v7 = (char *)v33 - v6;
  v8 = String.count.getter(v0[2], v0[3], v5);
  sub_14510((uint64_t)v0, (uint64_t)v7, type metadata accessor for PodcastReview);
  if (!v8)
  {
    sub_145D8((uint64_t)v7, type metadata accessor for PodcastReview);
    goto LABEL_12;
  }
  v10 = String.count.getter(*((_QWORD *)v7 + 2), *((_QWORD *)v7 + 3), v9);
  v11 = *(_QWORD *)&v7[*(int *)(v1 + 32) + 8];
  sub_145D8((uint64_t)v7, type metadata accessor for PodcastReview);
  if (v11 < v10)
  {
LABEL_12:
    v27 = *(_QWORD *)((char *)v0 + *(int *)(v1 + 32) + 8);
    v28 = sub_14D43C();
    v24 = swift_allocError(&type metadata for PodcastReviewValidationError, v28, 0, 0);
    v26 = 0;
    *(_QWORD *)v25 = v27;
    goto LABEL_16;
  }
  v13 = String.count.getter(*v0, v0[1], v12);
  sub_14510((uint64_t)v0, (uint64_t)v3, type metadata accessor for PodcastReview);
  if (!v13)
  {
    sub_145D8((uint64_t)v3, type metadata accessor for PodcastReview);
    goto LABEL_14;
  }
  v15 = String.count.getter(*v3, v3[1], v14);
  v16 = *(_QWORD *)((char *)v3 + *(int *)(v1 + 32));
  sub_145D8((uint64_t)v3, type metadata accessor for PodcastReview);
  if (v16 < v15)
  {
LABEL_14:
    v29 = *(_QWORD *)((char *)v0 + *(int *)(v1 + 32));
    v30 = sub_14D43C();
    v24 = swift_allocError(&type metadata for PodcastReviewValidationError, v30, 0, 0);
    *(_QWORD *)v25 = v29;
    v26 = 1;
    goto LABEL_16;
  }
  v18 = v0[5];
  if (!v18)
    goto LABEL_15;
  v19 = v0[4];
  v20 = HIBYTE(v18) & 0xF;
  if ((v18 & 0x2000000000000000) == 0)
    v20 = v19 & 0xFFFFFFFFFFFFLL;
  if (!v20)
  {
LABEL_15:
    v31 = sub_14D43C();
    v24 = swift_allocError(&type metadata for PodcastReviewValidationError, v31, 0, 0);
    *(_QWORD *)v25 = 0;
    v26 = 3;
    goto LABEL_16;
  }
  v21 = String.count.getter(v19, v18, v17);
  v22 = *(_QWORD *)((char *)v0 + *(int *)(v1 + 32) + 16);
  if (v22 < v21)
  {
    v23 = sub_14D43C();
    v24 = swift_allocError(&type metadata for PodcastReviewValidationError, v23, 0, 0);
    *(_QWORD *)v25 = v22;
    v26 = 2;
LABEL_16:
    *(_BYTE *)(v25 + 8) = v26;
    swift_willThrow(v24);
  }
  return 1;
}

uint64_t type metadata accessor for PodcastReview(uint64_t a1)
{
  return sub_1F9D4(a1, qword_3BC6B8, (uint64_t)&nominal type descriptor for PodcastReview);
}

unint64_t sub_14D43C()
{
  unint64_t result;

  result = qword_3BC620;
  if (!qword_3BC620)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for PodcastReviewValidationError);
    atomic_store(result, (unint64_t *)&qword_3BC620);
  }
  return result;
}

void PodcastReviewValidationError.errorDescription.getter()
{
  __asm { BR              X10 }
}

uint64_t sub_14D4C0()
{
  uint64_t v0;
  id v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::String v9;

  v1 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v2._countAndFlagsBits = 0xD000000000000021;
  v9._object = (void *)0xE000000000000000;
  v2._object = (void *)0x8000000000310CF0;
  v3._countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  v9._countAndFlagsBits = 0;
  v4 = NSLocalizedString(_:tableName:bundle:value:comment:)(v2, (Swift::String_optional)0, (NSBundle)v1, v3, v9);

  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8E10);
  v6 = swift_allocObject(v5, 72, 7);
  *(_OWORD *)(v6 + 16) = xmmword_2EA0D0;
  *(_QWORD *)(v6 + 56) = &type metadata for Int;
  *(_QWORD *)(v6 + 64) = &protocol witness table for Int;
  *(_QWORD *)(v6 + 32) = v0;
  v7 = String.init(format:_:)(v4._countAndFlagsBits, v4._object, v6);
  swift_bridgeObjectRelease();
  return v7;
}

double AppLaunchMetricsEvent.processStartTime.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 48);
}

uint64_t PodcastReview.metadata.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for PodcastReview(0);
  return sub_14510(v1 + *(int *)(v3 + 32), a1, type metadata accessor for PodcastReview.Metadata);
}

uint64_t type metadata accessor for PodcastReview.Metadata(uint64_t a1)
{
  return sub_1F9D4(a1, qword_3BC758, (uint64_t)&nominal type descriptor for PodcastReview.Metadata);
}

void sub_14D70C(char *a1)
{
  sub_1E2610(*a1);
}

void sub_14D718()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2);
  __asm { BR              X9 }
}

Swift::Int sub_14D758()
{
  uint64_t v1;

  String.hash(into:)(&v1, 2036625250, 0xE400000000000000);
  swift_bridgeObjectRelease(0xE400000000000000);
  return Hasher._finalize()();
}

void sub_14D7D0()
{
  __asm { BR              X10 }
}

uint64_t sub_14D800(uint64_t a1)
{
  String.hash(into:)(a1, 2036625250, 0xE400000000000000);
  return swift_bridgeObjectRelease(0xE400000000000000);
}

void sub_14D864()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2);
  __asm { BR              X9 }
}

Swift::Int sub_14D8A0()
{
  uint64_t v1;

  String.hash(into:)(&v1, 2036625250, 0xE400000000000000);
  swift_bridgeObjectRelease(0xE400000000000000);
  return Hasher._finalize()();
}

unint64_t sub_14D918@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_14F8C0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_14D944()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_14D968 + 4 * byte_2F7A4F[*v0]))();
}

void sub_14D968(_QWORD *a1@<X8>)
{
  *a1 = 2036625250;
  a1[1] = 0xE400000000000000;
}

void sub_14D97C(_QWORD *a1@<X8>)
{
  *a1 = 0x656C746974;
  a1[1] = 0xE500000000000000;
}

void sub_14D994(_QWORD *a1@<X8>)
{
  *a1 = 0x656D616E6B63696ELL;
  a1[1] = 0xE800000000000000;
}

void sub_14D9B0(_QWORD *a1@<X8>)
{
  *a1 = 0x676E69746172;
  a1[1] = 0xE600000000000000;
}

BOOL PodcastReview.isEmpty.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(_QWORD);
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  _BOOL8 v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v1 = type metadata accessor for PodcastReview(0);
  __chkstk_darwin(v1);
  v4 = (uint64_t *)((char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = *(_QWORD *)(v0 + 24);
  if ((v5 & 0x2000000000000000) != 0)
    v6 = HIBYTE(v5) & 0xF;
  else
    v6 = *(_QWORD *)(v0 + 16) & 0xFFFFFFFFFFFFLL;
  sub_14510(v0, (uint64_t)v4, v2);
  if (v6)
  {
    v7 = 0;
  }
  else
  {
    v8 = v4[1];
    v9 = *v4 & 0xFFFFFFFFFFFFLL;
    if ((v8 & 0x2000000000000000) != 0)
      v9 = HIBYTE(v8) & 0xF;
    v7 = v9 == 0;
  }
  sub_145D8((uint64_t)v4, type metadata accessor for PodcastReview);
  return v7;
}

unint64_t PodcastReview.starRating.getter()
{
  uint64_t v0;
  double v1;
  unint64_t result;

  v1 = round(*(double *)(v0 + 48) * 5.0);
  if ((~*(_QWORD *)&v1 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v1 <= -1.0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v1 < 1.84467441e19)
    return (unint64_t)v1;
LABEL_7:
  __break(1u);
  return result;
}

uint64_t PodcastReview.httpData(forAdamId:)(uint64_t a1, uint64_t a2)
{
  double *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t inited;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v29;
  _BYTE v30[152];

  v5 = type metadata accessor for String.Encoding(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0) + 8;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BC628);
  inited = swift_initStackObject(v9, v30);
  v11 = inited;
  *(_OWORD *)(inited + 16) = xmmword_2F27F0;
  *(_BYTE *)(inited + 32) = 0;
  *(_QWORD *)(inited + 40) = a1;
  *(_QWORD *)(inited + 48) = a2;
  *(_BYTE *)(inited + 56) = 1;
  v12 = *((_QWORD *)v2 + 1);
  *(double *)(inited + 64) = *v2;
  *(_QWORD *)(inited + 72) = v12;
  *(_BYTE *)(inited + 80) = 2;
  v13 = *((_QWORD *)v2 + 3);
  *(double *)(inited + 88) = v2[2];
  *(_QWORD *)(inited + 96) = v13;
  *(_BYTE *)(inited + 104) = 3;
  if (*((_QWORD *)v2 + 5))
  {
    v14 = *((_QWORD *)v2 + 4);
    v15 = *((_QWORD *)v2 + 5);
  }
  else
  {
    v14 = 0;
    v15 = 0xE000000000000000;
  }
  *(_QWORD *)(inited + 112) = v14;
  *(_QWORD *)(inited + 120) = v15;
  *(_BYTE *)(inited + 128) = 4;
  v16 = v2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v17 = swift_bridgeObjectRetain();
  *(_QWORD *)(v11 + 136) = Double.description.getter(v17, v16);
  *(_QWORD *)(v11 + 144) = v18;
  sub_288A34(v11);
  v20 = sub_14CEE4(v19);
  swift_bridgeObjectRelease();
  v29 = v20;
  v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3BC430);
  v22 = sub_707E4();
  v23 = BidirectionalCollection<>.joined(separator:)(38, 0xE100000000000000, v21, v22);
  v25 = v24;
  v26 = swift_bridgeObjectRelease();
  static String.Encoding.utf8.getter(v26);
  v27 = String.data(using:allowLossyConversion:)(v8, 0, v23, v25);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return v27;
}

uint64_t PodcastReview.init(title:body:rating:nickname:metadata:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v10;

  *(_QWORD *)(a9 + 16) = a1;
  *(_QWORD *)(a9 + 24) = a2;
  *(_QWORD *)a9 = a3;
  *(_QWORD *)(a9 + 8) = a4;
  *(double *)(a9 + 48) = (double)a5 / 5.0;
  *(_QWORD *)(a9 + 32) = a6;
  *(_QWORD *)(a9 + 40) = a7;
  v10 = a9 + *(int *)(type metadata accessor for PodcastReview(0) + 32);
  return sub_14DD04(a8, v10);
}

uint64_t sub_14DD04(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PodcastReview.Metadata(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

BOOL PodcastReview.nicknameRequired.getter()
{
  uint64_t v0;
  unint64_t v1;
  _BOOL8 result;

  v1 = *(_QWORD *)(v0 + 40);
  result = 1;
  if (v1)
  {
    if ((v1 & 0x2000000000000000) != 0 ? HIBYTE(v1) & 0xF : *(_QWORD *)(v0 + 32) & 0xFFFFFFFFFFFFLL)
      return 0;
  }
  return result;
}

uint64_t PodcastReview.Metadata.saveURL.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PodcastReview.Metadata(0) + 28);
  v4 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_14DDC0(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_14DE00 + 4 * byte_2F7A54[a1]))(0x78616D2D79646F62, 0xEF6874676E656C2DLL);
}

unint64_t sub_14DE00()
{
  return 0xD000000000000010;
}

unint64_t sub_14DE1C()
{
  return 0xD000000000000013;
}

uint64_t sub_14DE54(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_14DE94 + 4 * byte_2F7A58[a1]))(0x78616D2D79646F62, 0xEF6874676E656C2DLL);
}

unint64_t sub_14DE94()
{
  return 0xD000000000000010;
}

unint64_t sub_14DEB0()
{
  return 0xD000000000000013;
}

void sub_14DEE8(char *a1)
{
  sub_1E24AC(*a1);
}

void sub_14DEF4()
{
  char *v0;

  sub_2D8430(*v0);
}

void sub_14DEFC(uint64_t a1)
{
  char *v1;

  sub_2D8CE0(a1, *v1);
}

void sub_14DF04(uint64_t a1)
{
  char *v1;

  sub_2D91B0(a1, *v1);
}

unint64_t sub_14DF0C@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_14F908(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_14DF38@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_14DDC0(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_14DF60()
{
  unsigned __int8 *v0;

  return sub_14DE54(*v0);
}

unint64_t sub_14DF68@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_14F908(a1);
  *a2 = result;
  return result;
}

uint64_t sub_14DF8C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_14E254();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_14DFB4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_14E254();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t PodcastReview.Metadata.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  char v28;
  char v29;

  v20 = a2;
  v23 = type metadata accessor for URL(0);
  v21 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v22 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BC630);
  v4 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for PodcastReview.Metadata(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v10);
  v12 = sub_14E254();
  v13 = v25;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for PodcastReview.Metadata.CodingKeys, &type metadata for PodcastReview.Metadata.CodingKeys, v12, v10, v11);
  if (!v13)
  {
    v25 = v7;
    v14 = v4;
    v16 = v22;
    v15 = v23;
    v29 = 0;
    v17 = v24;
    *(_QWORD *)v9 = KeyedDecodingContainer.decode(_:forKey:)(&v29, v24);
    v28 = 1;
    *((_QWORD *)v9 + 1) = KeyedDecodingContainer.decode(_:forKey:)(&v28, v17);
    v27 = 2;
    *((_QWORD *)v9 + 2) = KeyedDecodingContainer.decode(_:forKey:)(&v27, v17);
    v26 = 3;
    sub_F1C0(&qword_3B52E8, (void (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v16, v15);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v6, v17);
    v19 = v20;
    (*(void (**)(char *, _QWORD *, uint64_t))(v21 + 32))(&v9[*(int *)(v25 + 28)], v16, v15);
    sub_14DD04((uint64_t)v9, v19);
  }
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

unint64_t sub_14E254()
{
  unint64_t result;

  result = qword_3BC638;
  if (!qword_3BC638)
  {
    result = swift_getWitnessTable(&unk_2F7FA4);
    atomic_store(result, (unint64_t *)&qword_3BC638);
  }
  return result;
}

uint64_t sub_14E298@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return PodcastReview.Metadata.init(from:)(a1, a2);
}

uint64_t PodcastReview.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  char v35;
  char v36;
  char v37;
  _BYTE v38[2];
  char v39;

  v29 = a2;
  v30 = type metadata accessor for PodcastReview.Metadata(0);
  __chkstk_darwin(v30);
  v31 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BC640);
  v4 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (char *)&v27 - v8;
  v10 = type metadata accessor for PodcastReview(0);
  __chkstk_darwin(v10);
  v12 = (uint64_t *)((char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = a1[3];
  v13 = a1[4];
  v33 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v14);
  v15 = sub_14E6B4();
  v16 = v34;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for PodcastReview.CodingKeys, &type metadata for PodcastReview.CodingKeys, v15, v14, v13);
  if (v16)
    return __swift_destroy_boxed_opaque_existential_1(v33);
  v28 = v10;
  v34 = v4;
  v39 = 0;
  v18 = v31;
  v17 = v32;
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for PodcastReview.CodingKeys, &v39, v32, &type metadata for PodcastReview.CodingKeys, v15);
  v38[1] = 1;
  sub_F1C0(&qword_3BC650, (void (*)(uint64_t))type metadata accessor for PodcastReview.Metadata, (uint64_t)&protocol conformance descriptor for PodcastReview.Metadata);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v18, v30);
  sub_14DD04((uint64_t)v18, (uint64_t)v12 + *(int *)(v28 + 32));
  v38[0] = 2;
  v12[2] = KeyedDecodingContainer.decode(_:forKey:)(v38, v17);
  v12[3] = v19;
  v37 = 3;
  *v12 = KeyedDecodingContainer.decode(_:forKey:)(&v37, v17);
  v12[1] = v20;
  v36 = 4;
  KeyedDecodingContainer.decode(_:forKey:)(&v36, v17);
  v12[6] = v21;
  v35 = 5;
  v23 = KeyedDecodingContainer.decode(_:forKey:)(&v35, v17);
  v25 = v24;
  v26 = *(void (**)(char *, uint64_t))(v34 + 8);
  v26(v6, v17);
  v26(v9, v17);
  v12[4] = v23;
  v12[5] = v25;
  sub_14510((uint64_t)v12, v29, type metadata accessor for PodcastReview);
  __swift_destroy_boxed_opaque_existential_1(v33);
  return sub_145D8((uint64_t)v12, type metadata accessor for PodcastReview);
}

unint64_t sub_14E6B4()
{
  unint64_t result;

  result = qword_3BC648;
  if (!qword_3BC648)
  {
    result = swift_getWitnessTable(&unk_2F7F54);
    atomic_store(result, (unint64_t *)&qword_3BC648);
  }
  return result;
}

unint64_t sub_14E6FC()
{
  unint64_t result;

  result = qword_3BC658;
  if (!qword_3BC658)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for PodcastReviewServerError);
    atomic_store(result, (unint64_t *)&qword_3BC658);
  }
  return result;
}

void sub_14E744(char *a1)
{
  sub_1E276C(*a1);
}

void sub_14E750()
{
  char *v0;

  sub_2D8508(*v0);
}

void sub_14E758()
{
  __asm { BR              X10 }
}

uint64_t sub_14E79C(uint64_t a1)
{
  String.hash(into:)(a1, 0x617461646174656DLL, 0xE800000000000000);
  return swift_bridgeObjectRelease(0xE800000000000000);
}

void sub_14E818(uint64_t a1)
{
  char *v1;

  sub_2D90CC(a1, *v1);
}

unint64_t sub_14E820@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_14F950(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_14E84C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_14E884 + 4 * byte_2F7A62[*v0]))();
}

void sub_14E884(_QWORD *a1@<X8>)
{
  *a1 = 0x617461646174656DLL;
  a1[1] = 0xE800000000000000;
}

void sub_14E8A0(_QWORD *a1@<X8>)
{
  *a1 = 0x656C746974;
  a1[1] = 0xE500000000000000;
}

void sub_14E8B8(_QWORD *a1@<X8>)
{
  *a1 = 2036625250;
  a1[1] = 0xE400000000000000;
}

void sub_14E8CC(_QWORD *a1@<X8>)
{
  *a1 = 0x676E69746172;
  a1[1] = 0xE600000000000000;
}

void sub_14E8E4(_QWORD *a1@<X8>)
{
  *a1 = 0x656D616E6B63696ELL;
  a1[1] = 0xE800000000000000;
}

uint64_t sub_14E900()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_14E938 + 4 * byte_2F7A68[*v0]))(0x692D776569766572, 0xEB000000006F666ELL);
}

uint64_t sub_14E938()
{
  return 0x617461646174656DLL;
}

uint64_t sub_14E950()
{
  return 0x656C746974;
}

uint64_t sub_14E964()
{
  return 2036625250;
}

uint64_t sub_14E974()
{
  return 0x676E69746172;
}

uint64_t sub_14E988()
{
  return 0x656D616E6B63696ELL;
}

unint64_t sub_14E9A0@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_14F950(a1);
  *a2 = result;
  return result;
}

uint64_t sub_14E9C4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_14E6B4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_14E9EC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_14E6B4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_14EA14@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return PodcastReview.init(from:)(a1, a2);
}

ValueMetadata *type metadata accessor for PodcastReviewServerError()
{
  return &type metadata for PodcastReviewServerError;
}

uint64_t getEnumTagSinglePayload for PodcastReviewValidationError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 3)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PodcastReviewValidationError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 253;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t sub_14EAC4(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 2u)
    return *(unsigned __int8 *)(a1 + 8);
  else
    return (*(_DWORD *)a1 + 3);
}

uint64_t sub_14EADC(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(_QWORD *)result = a2 - 3;
    LOBYTE(a2) = 3;
  }
  *(_BYTE *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for PodcastReviewValidationError()
{
  return &type metadata for PodcastReviewValidationError;
}

uint64_t *initializeBufferWithCopyOfBuffer for PodcastReview(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v16 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v16 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    v7 = a2[5];
    a1[4] = a2[4];
    a1[5] = v7;
    a1[6] = a2[6];
    v8 = *(int *)(a3 + 32);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    *(_OWORD *)v9 = *(_OWORD *)((char *)a2 + v8);
    *((_QWORD *)v9 + 2) = *(uint64_t *)((char *)a2 + v8 + 16);
    v11 = *(int *)(type metadata accessor for PodcastReview.Metadata(0) + 28);
    v12 = &v9[v11];
    v13 = &v10[v11];
    v14 = type metadata accessor for URL(0);
    v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v15(v12, v13, v14);
  }
  return v3;
}

uint64_t destroy for PodcastReview(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 32);
  v5 = v4 + *(int *)(type metadata accessor for PodcastReview.Metadata(0) + 28);
  v6 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

_QWORD *initializeWithCopy for PodcastReview(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  a1[6] = a2[6];
  v7 = *(int *)(a3 + 32);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  *(_OWORD *)v8 = *(_OWORD *)((char *)a2 + v7);
  *((_QWORD *)v8 + 2) = *(_QWORD *)((char *)a2 + v7 + 16);
  v10 = *(int *)(type metadata accessor for PodcastReview.Metadata(0) + 28);
  v11 = &v8[v10];
  v12 = &v9[v10];
  v13 = type metadata accessor for URL(0);
  v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v14(v11, v12, v13);
  return a1;
}

_QWORD *assignWithCopy for PodcastReview(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  v6 = *(int *)(a3 + 32);
  v7 = (_QWORD *)((char *)a1 + v6);
  v8 = (_QWORD *)((char *)a2 + v6);
  *v7 = *v8;
  v7[1] = v8[1];
  v7[2] = v8[2];
  v9 = *(int *)(type metadata accessor for PodcastReview.Metadata(0) + 28);
  v10 = (char *)v7 + v9;
  v11 = (char *)v8 + v9;
  v12 = type metadata accessor for URL(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 24))(v10, v11, v12);
  return a1;
}

uint64_t initializeWithTake for PodcastReview(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v5 = *(int *)(a3 + 32);
  v6 = a1 + v5;
  v7 = a2 + v5;
  *(_OWORD *)v6 = *(_OWORD *)(a2 + v5);
  *(_QWORD *)(v6 + 16) = *(_QWORD *)(a2 + v5 + 16);
  v8 = *(int *)(type metadata accessor for PodcastReview.Metadata(0) + 28);
  v9 = v6 + v8;
  v10 = v7 + v8;
  v11 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  return a1;
}

_QWORD *assignWithTake for PodcastReview(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  v9 = *(int *)(a3 + 32);
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  *(_OWORD *)v10 = *(_OWORD *)v11;
  *((_QWORD *)v10 + 2) = *((_QWORD *)v11 + 2);
  v12 = *(int *)(type metadata accessor for PodcastReview.Metadata(0) + 28);
  v13 = &v10[v12];
  v14 = &v11[v12];
  v15 = type metadata accessor for URL(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 40))(v13, v14, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for PodcastReview(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_14EF64);
}

uint64_t sub_14EF64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for PodcastReview.Metadata(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 32), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for PodcastReview(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_14EFEC);
}

uint64_t sub_14EFEC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for PodcastReview.Metadata(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 32), a2, a2, v7);
  }
  return result;
}

uint64_t sub_14F060(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = &unk_2F7C80;
  v4[1] = &unk_2F7C80;
  v4[2] = &unk_2F7C98;
  v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
  result = type metadata accessor for PodcastReview.Metadata(319);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PodcastReview.Metadata(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v9);
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = a2[2];
    v5 = *(int *)(a3 + 28);
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    v8 = type metadata accessor for URL(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t destroy for PodcastReview.Metadata(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 28);
  v3 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

uint64_t initializeWithCopy for PodcastReview.Metadata(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(int *)(a3 + 28);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

_QWORD *assignWithCopy for PodcastReview.Metadata(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  v4 = *(int *)(a3 + 28);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for URL(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

uint64_t initializeWithTake for PodcastReview.Metadata(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(int *)(a3 + 28);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for PodcastReview.Metadata(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(int *)(a3 + 28);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for PodcastReview.Metadata(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_14F358);
}

uint64_t sub_14F358(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a3 + 28);
  v5 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for PodcastReview.Metadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_14F3A4);
}

uint64_t sub_14F3A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + *(int *)(a4 + 28);
  v6 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, a2, a2, v6);
}

uint64_t sub_14F3E8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
  result = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for PodcastReview.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_14F4B0 + 4 * byte_2F7A73[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_14F4E4 + 4 * byte_2F7A6E[v4]))();
}

uint64_t sub_14F4E4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_14F4EC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x14F4F4);
  return result;
}

uint64_t sub_14F500(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x14F508);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_14F50C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_14F514(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PodcastReview.CodingKeys()
{
  return &type metadata for PodcastReview.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for PodcastReview.Metadata.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_14F57C + 4 * byte_2F7A7D[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_14F5B0 + 4 * byte_2F7A78[v4]))();
}

uint64_t sub_14F5B0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_14F5B8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x14F5C0);
  return result;
}

uint64_t sub_14F5CC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x14F5D4);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_14F5D8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_14F5E0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PodcastReview.Metadata.CodingKeys()
{
  return &type metadata for PodcastReview.Metadata.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for PodcastReview.HTTPBodyKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_14F648 + 4 * byte_2F7A87[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_14F67C + 4 * byte_2F7A82[v4]))();
}

uint64_t sub_14F67C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_14F684(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x14F68CLL);
  return result;
}

uint64_t sub_14F698(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x14F6A0);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_14F6A4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_14F6AC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PodcastReview.HTTPBodyKeys()
{
  return &type metadata for PodcastReview.HTTPBodyKeys;
}

unint64_t sub_14F6CC()
{
  unint64_t result;

  result = qword_3BC798;
  if (!qword_3BC798)
  {
    result = swift_getWitnessTable(&unk_2F7D4C);
    atomic_store(result, (unint64_t *)&qword_3BC798);
  }
  return result;
}

unint64_t sub_14F714()
{
  unint64_t result;

  result = qword_3BC7A0;
  if (!qword_3BC7A0)
  {
    result = swift_getWitnessTable(&unk_2F7E3C);
    atomic_store(result, (unint64_t *)&qword_3BC7A0);
  }
  return result;
}

unint64_t sub_14F75C()
{
  unint64_t result;

  result = qword_3BC7A8;
  if (!qword_3BC7A8)
  {
    result = swift_getWitnessTable(&unk_2F7F2C);
    atomic_store(result, (unint64_t *)&qword_3BC7A8);
  }
  return result;
}

unint64_t sub_14F7A4()
{
  unint64_t result;

  result = qword_3BC7B0;
  if (!qword_3BC7B0)
  {
    result = swift_getWitnessTable(&unk_2F7E64);
    atomic_store(result, (unint64_t *)&qword_3BC7B0);
  }
  return result;
}

unint64_t sub_14F7EC()
{
  unint64_t result;

  result = qword_3BC7B8;
  if (!qword_3BC7B8)
  {
    result = swift_getWitnessTable(&unk_2F7E8C);
    atomic_store(result, (unint64_t *)&qword_3BC7B8);
  }
  return result;
}

unint64_t sub_14F834()
{
  unint64_t result;

  result = qword_3BC7C0;
  if (!qword_3BC7C0)
  {
    result = swift_getWitnessTable(&unk_2F7D74);
    atomic_store(result, (unint64_t *)&qword_3BC7C0);
  }
  return result;
}

unint64_t sub_14F87C()
{
  unint64_t result;

  result = qword_3BC7C8;
  if (!qword_3BC7C8)
  {
    result = swift_getWitnessTable(&unk_2F7D9C);
    atomic_store(result, (unint64_t *)&qword_3BC7C8);
  }
  return result;
}

unint64_t sub_14F8C0(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_374430, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 5)
    return 5;
  else
    return v3;
}

unint64_t sub_14F908(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_3744C8, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4)
    return 4;
  else
    return v3;
}

unint64_t sub_14F950(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_374548, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 6)
    return 6;
  else
    return v3;
}

uint64_t ShowEpisodeCountHeaderData.artwork.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for ShowEpisodeCountHeaderData(0) + 20);
  return sub_BE440(v3, a1);
}

uint64_t type metadata accessor for ShowEpisodeCountHeaderData(uint64_t a1)
{
  return sub_1F9D4(a1, qword_3BC838, (uint64_t)&nominal type descriptor for ShowEpisodeCountHeaderData);
}

uint64_t ShowEpisodeCountHeaderData.action.getter()
{
  type metadata accessor for ShowEpisodeCountHeaderData(0);
  return swift_retain();
}

uint64_t ShowEpisodeCountHeaderData.init(title:artwork:action:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v8;
  uint64_t result;

  *a5 = a1;
  a5[1] = a2;
  v8 = type metadata accessor for ShowEpisodeCountHeaderData(0);
  result = sub_14614(a3, (uint64_t)a5 + *(int *)(v8 + 20));
  *(_QWORD *)((char *)a5 + *(int *)(v8 + 24)) = a4;
  return result;
}

ShelfKit::ShowEpisodeCountHeader::Style_optional __swiftcall ShowEpisodeCountHeader.Style.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  ShelfKit::ShowEpisodeCountHeader::Style_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_3745F8, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 5;
  if (v5 < 5)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t ShowEpisodeCountHeader.Style.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_14FAD8 + 4 * byte_2F8000[*v0]))(0x7972617262696CLL, 0xE700000000000000);
}

uint64_t sub_14FAD8()
{
  return 0x64616F6C6E776F64;
}

uint64_t sub_14FB08()
{
  return 0x6E6F6974617473;
}

uint64_t sub_14FB1C()
{
  return 1701736302;
}

void sub_14FB2C(char *a1)
{
  sub_1E0E34(*a1);
}

void sub_14FB38()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2);
  __asm { BR              X9 }
}

Swift::Int sub_14FB84()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x64616F6C6E776F64, 0xE900000000000073);
  swift_bridgeObjectRelease(0xE900000000000073);
  return Hasher._finalize()();
}

void sub_14FC00()
{
  __asm { BR              X10 }
}

uint64_t sub_14FC3C(uint64_t a1)
{
  String.hash(into:)(a1, 0x64616F6C6E776F64, 0xE900000000000073);
  return swift_bridgeObjectRelease(0xE900000000000073);
}

void sub_14FCA4()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2);
  __asm { BR              X9 }
}

Swift::Int sub_14FCEC()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x64616F6C6E776F64, 0xE900000000000073);
  swift_bridgeObjectRelease(0xE900000000000073);
  return Hasher._finalize()();
}

ShelfKit::ShowEpisodeCountHeader::Style_optional sub_14FD68(Swift::String *a1)
{
  return ShowEpisodeCountHeader.Style.init(rawValue:)(*a1);
}

uint64_t sub_14FD74()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_14FDA4 + 4 * byte_2F8014[*v0]))();
}

void sub_14FDA4(_QWORD *a1@<X8>)
{
  *a1 = 0x64616F6C6E776F64;
  a1[1] = 0xE900000000000073;
}

void sub_14FDC4(_QWORD *a1@<X8>)
{
  *a1 = 0x6B72616D6B6F6F62;
  a1[1] = 0xE900000000000073;
}

void sub_14FDE4(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x6E6F6974617473;
  a1[1] = v1;
}

void sub_14FDFC(_QWORD *a1@<X8>)
{
  *a1 = 1701736302;
  a1[1] = 0xE400000000000000;
}

uint64_t ShowEpisodeCountHeader.artwork.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for ShowEpisodeCountHeader(0) + 24);
  return sub_BE440(v3, a1);
}

uint64_t type metadata accessor for ShowEpisodeCountHeader(uint64_t a1)
{
  return sub_1F9D4(a1, qword_3BC8D0, (uint64_t)&nominal type descriptor for ShowEpisodeCountHeader);
}

uint64_t ShowEpisodeCountHeader.action.getter()
{
  type metadata accessor for ShowEpisodeCountHeader(0);
  return swift_retain();
}

uint64_t ShowEpisodeCountHeader.libraryEpisodesCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for ShowEpisodeCountHeader(0) + 32));
}

uint64_t ShowEpisodeCountHeader.style.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for ShowEpisodeCountHeader(0);
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 36));
  return result;
}

uint64_t ShowEpisodeCountHeader.impressionMetrics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for ShowEpisodeCountHeader(0) + 40);
  return sub_23A70(v3, a1);
}

void ShowEpisodeCountHeader.libraryEpisodesCountText.getter()
{
  uint64_t v0;
  char *v1;

  v1 = (char *)&loc_14FF2C
     + dword_150104[*(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ShowEpisodeCountHeader(0) + 36))];
  __asm { BR              X10 }
}

uint64_t sub_14FF40()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::String v11;

  v2 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v3._countAndFlagsBits = 0xD000000000000035;
  v11._object = (void *)0xE000000000000000;
  v3._object = (void *)0x8000000000310DC0;
  v4._countAndFlagsBits = 0;
  v4._object = (void *)0xE000000000000000;
  v11._countAndFlagsBits = 0;
  v5 = NSLocalizedString(_:tableName:bundle:value:comment:)(v3, (Swift::String_optional)0, (NSBundle)v2, v4, v11);

  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8E10);
  v7 = swift_allocObject(v6, 72, 7);
  *(_OWORD *)(v7 + 16) = xmmword_2EA0D0;
  v8 = *(_QWORD *)(v1 + *(int *)(v0 + 32));
  *(_QWORD *)(v7 + 56) = &type metadata for Int;
  *(_QWORD *)(v7 + 64) = &protocol witness table for Int;
  *(_QWORD *)(v7 + 32) = v8;
  v9 = static String.localizedStringWithFormat(_:_:)(v5._countAndFlagsBits, v5._object, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t ShowEpisodeCountHeader.init(id:title:artwork:action:libraryEpisodesCount:style:impressionMetrics:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, unsigned __int8 *a8@<X7>, _QWORD *a9@<X8>, uint64_t a10)
{
  uint64_t v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  int *v18;

  v14 = *a8;
  if (!a2)
  {
    swift_bridgeObjectRetain();
    v15._countAndFlagsBits = 45;
    v15._object = (void *)0xE100000000000000;
    String.append(_:)(v15);
    v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    v17._countAndFlagsBits = 45;
    v17._object = (void *)0xE100000000000000;
    String.append(_:)(v17);
    __asm { BR              X9 }
  }
  *a9 = a1;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  v18 = (int *)type metadata accessor for ShowEpisodeCountHeader(0);
  sub_14614(a5, (uint64_t)a9 + v18[6]);
  *(_QWORD *)((char *)a9 + v18[7]) = a6;
  *(_QWORD *)((char *)a9 + v18[8]) = a7;
  *((_BYTE *)a9 + v18[9]) = v14;
  return sub_23AB8(a10, (uint64_t)a9 + v18[10]);
}

uint64_t sub_1502B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_23A70(v2 + *(int *)(a1 + 40), a2);
}

unint64_t sub_1502CC()
{
  unint64_t result;

  result = qword_3BC7D0;
  if (!qword_3BC7D0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ShowEpisodeCountHeader.Style);
    atomic_store(result, (unint64_t *)&qword_3BC7D0);
  }
  return result;
}

unint64_t sub_150310(uint64_t a1)
{
  unint64_t result;

  result = sub_150334();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_150334()
{
  unint64_t result;

  result = qword_3BC7D8;
  if (!qword_3BC7D8)
  {
    type metadata accessor for ShowEpisodeCountHeader(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for ShowEpisodeCountHeader);
    atomic_store(result, (unint64_t *)&qword_3BC7D8);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ShowEpisodeCountHeaderData(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id *v16;
  int v17;
  id v18;
  id *v19;
  int v20;
  id v21;
  id *v22;
  int v23;
  id v24;
  id *v25;
  int v26;
  id v27;
  id *v28;
  int v29;
  id v30;
  int *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    v4 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = a2[1];
    *v4 = *a2;
    v4[1] = v7;
    v8 = *(int *)(a3 + 20);
    v9 = (char *)v4 + v8;
    v10 = (char *)a2 + v8;
    v11 = *(uint64_t *)((char *)a2 + v8 + 8);
    *(_QWORD *)v9 = *(uint64_t *)((char *)a2 + v8);
    *((_QWORD *)v9 + 1) = v11;
    v12 = *((unsigned __int8 *)a2 + v8 + 32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v12 == 255)
    {
      *((_OWORD *)v9 + 1) = *((_OWORD *)v10 + 1);
      v9[32] = v10[32];
    }
    else
    {
      v13 = *((_QWORD *)v10 + 2);
      v14 = *((_QWORD *)v10 + 3);
      sub_3D464(v13, v14, v12);
      *((_QWORD *)v9 + 2) = v13;
      *((_QWORD *)v9 + 3) = v14;
      v9[32] = v12;
    }
    *(_OWORD *)(v9 + 40) = *(_OWORD *)(v10 + 40);
    v16 = (id *)(v10 + 56);
    v17 = v10[64];
    if (v17 == 255)
    {
      *((_QWORD *)v9 + 7) = *v16;
      v9[64] = v10[64];
    }
    else
    {
      v18 = *v16;
      sub_3D47C(*v16, v10[64]);
      *((_QWORD *)v9 + 7) = v18;
      v9[64] = v17;
    }
    v19 = (id *)(v10 + 72);
    v20 = v10[80];
    if (v20 == 255)
    {
      *((_QWORD *)v9 + 9) = *v19;
      v9[80] = v10[80];
    }
    else
    {
      v21 = *v19;
      sub_3D47C(*v19, v10[80]);
      *((_QWORD *)v9 + 9) = v21;
      v9[80] = v20;
    }
    v22 = (id *)(v10 + 88);
    v23 = v10[96];
    if (v23 == 255)
    {
      *((_QWORD *)v9 + 11) = *v22;
      v9[96] = v10[96];
    }
    else
    {
      v24 = *v22;
      sub_3D47C(*v22, v10[96]);
      *((_QWORD *)v9 + 11) = v24;
      v9[96] = v23;
    }
    v25 = (id *)(v10 + 104);
    v26 = v10[112];
    if (v26 == 255)
    {
      *((_QWORD *)v9 + 13) = *v25;
      v9[112] = v10[112];
    }
    else
    {
      v27 = *v25;
      sub_3D47C(*v25, v10[112]);
      *((_QWORD *)v9 + 13) = v27;
      v9[112] = v26;
    }
    v28 = (id *)(v10 + 120);
    v29 = v10[128];
    if (v29 == 255)
    {
      *((_QWORD *)v9 + 15) = *v28;
      v9[128] = v10[128];
    }
    else
    {
      v30 = *v28;
      sub_3D47C(*v28, v10[128]);
      *((_QWORD *)v9 + 15) = v30;
      v9[128] = v29;
    }
    v9[129] = v10[129];
    v31 = (int *)type metadata accessor for ArtworkModel(0);
    v32 = v31[11];
    v33 = &v9[v32];
    v34 = &v10[v32];
    v35 = type metadata accessor for ArtworkCrop(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(v33, v34, v35);
    v36 = v31[12];
    v37 = &v9[v36];
    v38 = &v10[v36];
    v39 = *((_QWORD *)v38 + 1);
    *(_QWORD *)v37 = *(_QWORD *)v38;
    *((_QWORD *)v37 + 1) = v39;
    v9[v31[13]] = v10[v31[13]];
    v9[v31[14]] = v10[v31[14]];
    v9[v31[15]] = v10[v31[15]];
    v40 = v31[16];
    v41 = &v9[v40];
    v42 = &v10[v40];
    v43 = *((_QWORD *)v42 + 1);
    *(_QWORD *)v41 = *(_QWORD *)v42;
    *((_QWORD *)v41 + 1) = v43;
    *(uint64_t *)((char *)v4 + *(int *)(a3 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 24));
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  swift_retain();
  return v4;
}

uint64_t destroy for ShowEpisodeCountHeaderData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  swift_bridgeObjectRelease();
  v5 = *(unsigned __int8 *)(v4 + 32);
  if (v5 != 255)
    sub_3B5BC(*(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), v5);
  v6 = *(unsigned __int8 *)(v4 + 64);
  if (v6 != 255)
    sub_3D624(*(id *)(v4 + 56), v6);
  v7 = *(unsigned __int8 *)(v4 + 80);
  if (v7 != 255)
    sub_3D624(*(id *)(v4 + 72), v7);
  v8 = *(unsigned __int8 *)(v4 + 96);
  if (v8 != 255)
    sub_3D624(*(id *)(v4 + 88), v8);
  v9 = *(unsigned __int8 *)(v4 + 112);
  if (v9 != 255)
    sub_3D624(*(id *)(v4 + 104), v9);
  v10 = *(unsigned __int8 *)(v4 + 128);
  if (v10 != 255)
    sub_3D624(*(id *)(v4 + 120), v10);
  v11 = v4 + *(int *)(type metadata accessor for ArtworkModel(0) + 44);
  v12 = type metadata accessor for ArtworkCrop(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release(*(_QWORD *)(a1 + *(int *)(a2 + 24)));
}

_QWORD *initializeWithCopy for ShowEpisodeCountHeaderData(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  id *v14;
  int v15;
  id v16;
  id *v17;
  int v18;
  id v19;
  id *v20;
  int v21;
  id v22;
  id *v23;
  int v24;
  id v25;
  id *v26;
  int v27;
  id v28;
  int *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = *(_QWORD *)((char *)a2 + v7 + 8);
  *(_QWORD *)v8 = *(_QWORD *)((char *)a2 + v7);
  *((_QWORD *)v8 + 1) = v10;
  v11 = *((unsigned __int8 *)a2 + v7 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v11 == 255)
  {
    *((_OWORD *)v8 + 1) = *((_OWORD *)v9 + 1);
    v8[32] = v9[32];
  }
  else
  {
    v12 = *((_QWORD *)v9 + 2);
    v13 = *((_QWORD *)v9 + 3);
    sub_3D464(v12, v13, v11);
    *((_QWORD *)v8 + 2) = v12;
    *((_QWORD *)v8 + 3) = v13;
    v8[32] = v11;
  }
  *(_OWORD *)(v8 + 40) = *(_OWORD *)(v9 + 40);
  v14 = (id *)(v9 + 56);
  v15 = v9[64];
  if (v15 == 255)
  {
    *((_QWORD *)v8 + 7) = *v14;
    v8[64] = v9[64];
  }
  else
  {
    v16 = *v14;
    sub_3D47C(*v14, v9[64]);
    *((_QWORD *)v8 + 7) = v16;
    v8[64] = v15;
  }
  v17 = (id *)(v9 + 72);
  v18 = v9[80];
  if (v18 == 255)
  {
    *((_QWORD *)v8 + 9) = *v17;
    v8[80] = v9[80];
  }
  else
  {
    v19 = *v17;
    sub_3D47C(*v17, v9[80]);
    *((_QWORD *)v8 + 9) = v19;
    v8[80] = v18;
  }
  v20 = (id *)(v9 + 88);
  v21 = v9[96];
  if (v21 == 255)
  {
    *((_QWORD *)v8 + 11) = *v20;
    v8[96] = v9[96];
  }
  else
  {
    v22 = *v20;
    sub_3D47C(*v20, v9[96]);
    *((_QWORD *)v8 + 11) = v22;
    v8[96] = v21;
  }
  v23 = (id *)(v9 + 104);
  v24 = v9[112];
  if (v24 == 255)
  {
    *((_QWORD *)v8 + 13) = *v23;
    v8[112] = v9[112];
  }
  else
  {
    v25 = *v23;
    sub_3D47C(*v23, v9[112]);
    *((_QWORD *)v8 + 13) = v25;
    v8[112] = v24;
  }
  v26 = (id *)(v9 + 120);
  v27 = v9[128];
  if (v27 == 255)
  {
    *((_QWORD *)v8 + 15) = *v26;
    v8[128] = v9[128];
  }
  else
  {
    v28 = *v26;
    sub_3D47C(*v26, v9[128]);
    *((_QWORD *)v8 + 15) = v28;
    v8[128] = v27;
  }
  v8[129] = v9[129];
  v29 = (int *)type metadata accessor for ArtworkModel(0);
  v30 = v29[11];
  v31 = &v8[v30];
  v32 = &v9[v30];
  v33 = type metadata accessor for ArtworkCrop(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v31, v32, v33);
  v34 = v29[12];
  v35 = &v8[v34];
  v36 = &v9[v34];
  v37 = *((_QWORD *)v36 + 1);
  *(_QWORD *)v35 = *(_QWORD *)v36;
  *((_QWORD *)v35 + 1) = v37;
  v8[v29[13]] = v9[v29[13]];
  v8[v29[14]] = v9[v29[14]];
  v8[v29[15]] = v9[v29[15]];
  v38 = v29[16];
  v39 = &v8[v38];
  v40 = &v9[v38];
  v41 = *((_QWORD *)v40 + 1);
  *(_QWORD *)v39 = *(_QWORD *)v40;
  *((_QWORD *)v39 + 1) = v41;
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for ShowEpisodeCountHeaderData(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  __int128 *v9;
  __int128 *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  id *v21;
  id *v22;
  int v23;
  id v24;
  void *v25;
  char v26;
  id v27;
  char v28;
  id v29;
  id *v30;
  id *v31;
  int v32;
  id v33;
  void *v34;
  char v35;
  id v36;
  char v37;
  id v38;
  id *v39;
  id *v40;
  int v41;
  id v42;
  void *v43;
  char v44;
  id v45;
  char v46;
  id v47;
  id *v48;
  id *v49;
  int v50;
  id v51;
  void *v52;
  char v53;
  id v54;
  char v55;
  id v56;
  id *v57;
  id *v58;
  int v59;
  id v60;
  void *v61;
  char v62;
  id v63;
  char v64;
  id v65;
  int *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  *(_QWORD *)v7 = *(_QWORD *)((char *)a2 + v6);
  *((_QWORD *)v7 + 1) = *(_QWORD *)((char *)a2 + v6 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v9 = (__int128 *)(v7 + 16);
  v10 = (__int128 *)(v8 + 16);
  v11 = v8[32];
  if (v7[32] == 255)
  {
    if (v11 == 255)
    {
      v20 = *v10;
      v7[32] = v8[32];
      *v9 = v20;
    }
    else
    {
      v17 = *((_QWORD *)v8 + 2);
      v18 = *((_QWORD *)v8 + 3);
      sub_3D464(v17, v18, v8[32]);
      *((_QWORD *)v7 + 2) = v17;
      *((_QWORD *)v7 + 3) = v18;
      v7[32] = v11;
    }
  }
  else if (v11 == 255)
  {
    sub_3E43C((uint64_t)(v7 + 16));
    v19 = v8[32];
    *v9 = *v10;
    v7[32] = v19;
  }
  else
  {
    v12 = *((_QWORD *)v8 + 2);
    v13 = *((_QWORD *)v8 + 3);
    sub_3D464(v12, v13, v8[32]);
    v14 = *((_QWORD *)v7 + 2);
    v15 = *((_QWORD *)v7 + 3);
    *((_QWORD *)v7 + 2) = v12;
    *((_QWORD *)v7 + 3) = v13;
    v16 = v7[32];
    v7[32] = v11;
    sub_3B5BC(v14, v15, v16);
  }
  *((_QWORD *)v7 + 5) = *((_QWORD *)v8 + 5);
  *((_QWORD *)v7 + 6) = *((_QWORD *)v8 + 6);
  v21 = (id *)(v7 + 56);
  v22 = (id *)(v8 + 56);
  v23 = v8[64];
  if (v7[64] == 255)
  {
    if (v23 == 255)
    {
      v29 = *v22;
      v7[64] = v8[64];
      *v21 = v29;
    }
    else
    {
      v27 = *v22;
      sub_3D47C(*v22, v8[64]);
      *((_QWORD *)v7 + 7) = v27;
      v7[64] = v23;
    }
  }
  else if (v23 == 255)
  {
    sub_3E470((uint64_t)(v7 + 56));
    v28 = v8[64];
    *v21 = *v22;
    v7[64] = v28;
  }
  else
  {
    v24 = *v22;
    sub_3D47C(*v22, v8[64]);
    v25 = (void *)*((_QWORD *)v7 + 7);
    *((_QWORD *)v7 + 7) = v24;
    v26 = v7[64];
    v7[64] = v23;
    sub_3D624(v25, v26);
  }
  v30 = (id *)(v7 + 72);
  v31 = (id *)(v8 + 72);
  v32 = v8[80];
  if (v7[80] == 255)
  {
    if (v32 == 255)
    {
      v38 = *v31;
      v7[80] = v8[80];
      *v30 = v38;
    }
    else
    {
      v36 = *v31;
      sub_3D47C(*v31, v8[80]);
      *((_QWORD *)v7 + 9) = v36;
      v7[80] = v32;
    }
  }
  else if (v32 == 255)
  {
    sub_3E470((uint64_t)(v7 + 72));
    v37 = v8[80];
    *v30 = *v31;
    v7[80] = v37;
  }
  else
  {
    v33 = *v31;
    sub_3D47C(*v31, v8[80]);
    v34 = (void *)*((_QWORD *)v7 + 9);
    *((_QWORD *)v7 + 9) = v33;
    v35 = v7[80];
    v7[80] = v32;
    sub_3D624(v34, v35);
  }
  v39 = (id *)(v7 + 88);
  v40 = (id *)(v8 + 88);
  v41 = v8[96];
  if (v7[96] == 255)
  {
    if (v41 == 255)
    {
      v47 = *v40;
      v7[96] = v8[96];
      *v39 = v47;
    }
    else
    {
      v45 = *v40;
      sub_3D47C(*v40, v8[96]);
      *((_QWORD *)v7 + 11) = v45;
      v7[96] = v41;
    }
  }
  else if (v41 == 255)
  {
    sub_3E470((uint64_t)(v7 + 88));
    v46 = v8[96];
    *v39 = *v40;
    v7[96] = v46;
  }
  else
  {
    v42 = *v40;
    sub_3D47C(*v40, v8[96]);
    v43 = (void *)*((_QWORD *)v7 + 11);
    *((_QWORD *)v7 + 11) = v42;
    v44 = v7[96];
    v7[96] = v41;
    sub_3D624(v43, v44);
  }
  v48 = (id *)(v7 + 104);
  v49 = (id *)(v8 + 104);
  v50 = v8[112];
  if (v7[112] == 255)
  {
    if (v50 == 255)
    {
      v56 = *v49;
      v7[112] = v8[112];
      *v48 = v56;
    }
    else
    {
      v54 = *v49;
      sub_3D47C(*v49, v8[112]);
      *((_QWORD *)v7 + 13) = v54;
      v7[112] = v50;
    }
  }
  else if (v50 == 255)
  {
    sub_3E470((uint64_t)(v7 + 104));
    v55 = v8[112];
    *v48 = *v49;
    v7[112] = v55;
  }
  else
  {
    v51 = *v49;
    sub_3D47C(*v49, v8[112]);
    v52 = (void *)*((_QWORD *)v7 + 13);
    *((_QWORD *)v7 + 13) = v51;
    v53 = v7[112];
    v7[112] = v50;
    sub_3D624(v52, v53);
  }
  v57 = (id *)(v7 + 120);
  v58 = (id *)(v8 + 120);
  v59 = v8[128];
  if (v7[128] == 255)
  {
    if (v59 == 255)
    {
      v65 = *v58;
      v7[128] = v8[128];
      *v57 = v65;
    }
    else
    {
      v63 = *v58;
      sub_3D47C(*v58, v8[128]);
      *((_QWORD *)v7 + 15) = v63;
      v7[128] = v59;
    }
  }
  else if (v59 == 255)
  {
    sub_3E470((uint64_t)(v7 + 120));
    v64 = v8[128];
    *v57 = *v58;
    v7[128] = v64;
  }
  else
  {
    v60 = *v58;
    sub_3D47C(*v58, v8[128]);
    v61 = (void *)*((_QWORD *)v7 + 15);
    *((_QWORD *)v7 + 15) = v60;
    v62 = v7[128];
    v7[128] = v59;
    sub_3D624(v61, v62);
  }
  v7[129] = v8[129];
  v66 = (int *)type metadata accessor for ArtworkModel(0);
  v67 = v66[11];
  v68 = &v7[v67];
  v69 = &v8[v67];
  v70 = type metadata accessor for ArtworkCrop(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v70 - 8) + 24))(v68, v69, v70);
  v71 = v66[12];
  v72 = &v7[v71];
  v73 = &v8[v71];
  *(_QWORD *)v72 = *(_QWORD *)v73;
  *((_QWORD *)v72 + 1) = *((_QWORD *)v73 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7[v66[13]] = v8[v66[13]];
  v7[v66[14]] = v8[v66[14]];
  v7[v66[15]] = v8[v66[15]];
  v74 = v66[16];
  v75 = &v7[v74];
  v76 = &v8[v74];
  *(_QWORD *)v75 = *(_QWORD *)v76;
  *((_QWORD *)v75 + 1) = *((_QWORD *)v76 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v77 = *(int *)(a3 + 24);
  v78 = *(_QWORD *)((char *)a2 + v77);
  v79 = *(_QWORD *)((char *)a1 + v77);
  *(_QWORD *)((char *)a1 + v77) = v78;
  swift_retain();
  swift_release(v79);
  return a1;
}

_OWORD *initializeWithTake for ShowEpisodeCountHeaderData(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v7[32] = *((_BYTE *)a2 + v6 + 32);
  v9 = *(_OWORD *)((char *)a2 + v6 + 16);
  *(_OWORD *)v7 = *(_OWORD *)((char *)a2 + v6);
  *((_OWORD *)v7 + 1) = v9;
  *(_OWORD *)(v7 + 40) = *(_OWORD *)((char *)a2 + v6 + 40);
  v7[64] = *((_BYTE *)a2 + v6 + 64);
  *((_QWORD *)v7 + 7) = *(_QWORD *)((char *)a2 + v6 + 56);
  v10 = *(_OWORD *)((char *)a2 + v6 + 72);
  v11 = *(_OWORD *)((char *)a2 + v6 + 88);
  v12 = *(_OWORD *)((char *)a2 + v6 + 104);
  *(_OWORD *)(v7 + 113) = *(_OWORD *)((char *)a2 + v6 + 113);
  *(_OWORD *)(v7 + 104) = v12;
  *(_OWORD *)(v7 + 88) = v11;
  *(_OWORD *)(v7 + 72) = v10;
  v7[129] = *((_BYTE *)a2 + v6 + 129);
  v13 = (int *)type metadata accessor for ArtworkModel(0);
  v14 = v13[11];
  v15 = &v7[v14];
  v16 = &v8[v14];
  v17 = type metadata accessor for ArtworkCrop(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v15, v16, v17);
  *(_OWORD *)&v7[v13[12]] = *(_OWORD *)&v8[v13[12]];
  v7[v13[13]] = v8[v13[13]];
  v7[v13[14]] = v8[v13[14]];
  v7[v13[15]] = v8[v13[15]];
  *(_OWORD *)&v7[v13[16]] = *(_OWORD *)&v8[v13[16]];
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

_QWORD *assignWithTake for ShowEpisodeCountHeaderData(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  _OWORD *v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  int v18;
  void *v19;
  _QWORD *v20;
  int v21;
  int v22;
  void *v23;
  _QWORD *v24;
  int v25;
  int v26;
  void *v27;
  _QWORD *v28;
  int v29;
  int v30;
  void *v31;
  _QWORD *v32;
  int v33;
  int v34;
  void *v35;
  int *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = *(_QWORD *)((char *)a2 + v7 + 8);
  *(_QWORD *)v8 = *(_QWORD *)((char *)a2 + v7);
  *((_QWORD *)v8 + 1) = v10;
  swift_bridgeObjectRelease();
  v11 = v9 + 16;
  v12 = v8[32];
  if (v12 != 255)
  {
    v13 = v9[32];
    if (v13 != 255)
    {
      v14 = *((_QWORD *)v8 + 2);
      v15 = *((_QWORD *)v8 + 3);
      *((_OWORD *)v8 + 1) = *v11;
      v8[32] = v13;
      sub_3B5BC(v14, v15, v12);
      goto LABEL_6;
    }
    sub_3E43C((uint64_t)(v8 + 16));
  }
  *((_OWORD *)v8 + 1) = *v11;
  v8[32] = v9[32];
LABEL_6:
  *(_OWORD *)(v8 + 40) = *(_OWORD *)(v9 + 40);
  v16 = v9 + 56;
  v17 = v8[64];
  if (v17 != 255)
  {
    v18 = v9[64];
    if (v18 != 255)
    {
      v19 = (void *)*((_QWORD *)v8 + 7);
      *((_QWORD *)v8 + 7) = *v16;
      v8[64] = v18;
      sub_3D624(v19, v17);
      goto LABEL_11;
    }
    sub_3E470((uint64_t)(v8 + 56));
  }
  *((_QWORD *)v8 + 7) = *v16;
  v8[64] = v9[64];
LABEL_11:
  v20 = v9 + 72;
  v21 = v8[80];
  if (v21 != 255)
  {
    v22 = v9[80];
    if (v22 != 255)
    {
      v23 = (void *)*((_QWORD *)v8 + 9);
      *((_QWORD *)v8 + 9) = *v20;
      v8[80] = v22;
      sub_3D624(v23, v21);
      goto LABEL_16;
    }
    sub_3E470((uint64_t)(v8 + 72));
  }
  *((_QWORD *)v8 + 9) = *v20;
  v8[80] = v9[80];
LABEL_16:
  v24 = v9 + 88;
  v25 = v8[96];
  if (v25 != 255)
  {
    v26 = v9[96];
    if (v26 != 255)
    {
      v27 = (void *)*((_QWORD *)v8 + 11);
      *((_QWORD *)v8 + 11) = *v24;
      v8[96] = v26;
      sub_3D624(v27, v25);
      goto LABEL_21;
    }
    sub_3E470((uint64_t)(v8 + 88));
  }
  *((_QWORD *)v8 + 11) = *v24;
  v8[96] = v9[96];
LABEL_21:
  v28 = v9 + 104;
  v29 = v8[112];
  if (v29 != 255)
  {
    v30 = v9[112];
    if (v30 != 255)
    {
      v31 = (void *)*((_QWORD *)v8 + 13);
      *((_QWORD *)v8 + 13) = *v28;
      v8[112] = v30;
      sub_3D624(v31, v29);
      goto LABEL_26;
    }
    sub_3E470((uint64_t)(v8 + 104));
  }
  *((_QWORD *)v8 + 13) = *v28;
  v8[112] = v9[112];
LABEL_26:
  v32 = v9 + 120;
  v33 = v8[128];
  if (v33 == 255)
  {
LABEL_30:
    *((_QWORD *)v8 + 15) = *v32;
    v8[128] = v9[128];
    goto LABEL_31;
  }
  v34 = v9[128];
  if (v34 == 255)
  {
    sub_3E470((uint64_t)(v8 + 120));
    goto LABEL_30;
  }
  v35 = (void *)*((_QWORD *)v8 + 15);
  *((_QWORD *)v8 + 15) = *v32;
  v8[128] = v34;
  sub_3D624(v35, v33);
LABEL_31:
  v8[129] = v9[129];
  v36 = (int *)type metadata accessor for ArtworkModel(0);
  v37 = v36[11];
  v38 = &v8[v37];
  v39 = &v9[v37];
  v40 = type metadata accessor for ArtworkCrop(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 40))(v38, v39, v40);
  v41 = v36[12];
  v42 = &v8[v41];
  v43 = &v9[v41];
  v45 = *(_QWORD *)v43;
  v44 = *((_QWORD *)v43 + 1);
  *(_QWORD *)v42 = v45;
  *((_QWORD *)v42 + 1) = v44;
  swift_bridgeObjectRelease();
  v8[v36[13]] = v9[v36[13]];
  v8[v36[14]] = v9[v36[14]];
  v8[v36[15]] = v9[v36[15]];
  v46 = v36[16];
  v47 = &v8[v46];
  v48 = &v9[v46];
  v50 = *(_QWORD *)v48;
  v49 = *((_QWORD *)v48 + 1);
  *(_QWORD *)v47 = v50;
  *((_QWORD *)v47 + 1) = v49;
  swift_bridgeObjectRelease();
  v51 = *(int *)(a3 + 24);
  v52 = *(_QWORD *)((char *)a1 + v51);
  *(_QWORD *)((char *)a1 + v51) = *(_QWORD *)((char *)a2 + v51);
  swift_release(v52);
  return a1;
}

uint64_t getEnumTagSinglePayload for ShowEpisodeCountHeaderData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_151340);
}

uint64_t sub_151340(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for ArtworkModel(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for ShowEpisodeCountHeaderData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1513C8);
}

uint64_t sub_1513C8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for ArtworkModel(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t sub_15143C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = &unk_2F81C0;
  result = type metadata accessor for ArtworkModel(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for ShowEpisodeCountHeader(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id *v17;
  int v18;
  id v19;
  id *v20;
  int v21;
  id v22;
  id *v23;
  int v24;
  id v25;
  id *v26;
  int v27;
  id v28;
  id *v29;
  int v30;
  id v31;
  int *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int (*v51)(char *, uint64_t, uint64_t);
  uint64_t v52;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    v9 = a3[6];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = *(_QWORD *)((char *)a2 + v9 + 8);
    *(_QWORD *)v10 = *(_QWORD *)((char *)a2 + v9);
    *((_QWORD *)v10 + 1) = v12;
    v13 = *((unsigned __int8 *)a2 + v9 + 32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v13 == 255)
    {
      *((_OWORD *)v10 + 1) = *((_OWORD *)v11 + 1);
      v10[32] = v11[32];
    }
    else
    {
      v14 = *((_QWORD *)v11 + 2);
      v15 = *((_QWORD *)v11 + 3);
      sub_3D464(v14, v15, v13);
      *((_QWORD *)v10 + 2) = v14;
      *((_QWORD *)v10 + 3) = v15;
      v10[32] = v13;
    }
    *(_OWORD *)(v10 + 40) = *(_OWORD *)(v11 + 40);
    v17 = (id *)(v11 + 56);
    v18 = v11[64];
    if (v18 == 255)
    {
      *((_QWORD *)v10 + 7) = *v17;
      v10[64] = v11[64];
    }
    else
    {
      v19 = *v17;
      sub_3D47C(*v17, v11[64]);
      *((_QWORD *)v10 + 7) = v19;
      v10[64] = v18;
    }
    v20 = (id *)(v11 + 72);
    v21 = v11[80];
    if (v21 == 255)
    {
      *((_QWORD *)v10 + 9) = *v20;
      v10[80] = v11[80];
    }
    else
    {
      v22 = *v20;
      sub_3D47C(*v20, v11[80]);
      *((_QWORD *)v10 + 9) = v22;
      v10[80] = v21;
    }
    v23 = (id *)(v11 + 88);
    v24 = v11[96];
    if (v24 == 255)
    {
      *((_QWORD *)v10 + 11) = *v23;
      v10[96] = v11[96];
    }
    else
    {
      v25 = *v23;
      sub_3D47C(*v23, v11[96]);
      *((_QWORD *)v10 + 11) = v25;
      v10[96] = v24;
    }
    v26 = (id *)(v11 + 104);
    v27 = v11[112];
    if (v27 == 255)
    {
      *((_QWORD *)v10 + 13) = *v26;
      v10[112] = v11[112];
    }
    else
    {
      v28 = *v26;
      sub_3D47C(*v26, v11[112]);
      *((_QWORD *)v10 + 13) = v28;
      v10[112] = v27;
    }
    v29 = (id *)(v11 + 120);
    v30 = v11[128];
    if (v30 == 255)
    {
      *((_QWORD *)v10 + 15) = *v29;
      v10[128] = v11[128];
    }
    else
    {
      v31 = *v29;
      sub_3D47C(*v29, v11[128]);
      *((_QWORD *)v10 + 15) = v31;
      v10[128] = v30;
    }
    v10[129] = v11[129];
    v32 = (int *)type metadata accessor for ArtworkModel(0);
    v33 = v32[11];
    v34 = &v10[v33];
    v35 = &v11[v33];
    v36 = type metadata accessor for ArtworkCrop(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 16))(v34, v35, v36);
    v37 = v32[12];
    v38 = &v10[v37];
    v39 = &v11[v37];
    v40 = *((_QWORD *)v39 + 1);
    *(_QWORD *)v38 = *(_QWORD *)v39;
    *((_QWORD *)v38 + 1) = v40;
    v10[v32[13]] = v11[v32[13]];
    v10[v32[14]] = v11[v32[14]];
    v10[v32[15]] = v11[v32[15]];
    v41 = v32[16];
    v42 = &v10[v41];
    v43 = &v11[v41];
    v44 = *((_QWORD *)v43 + 1);
    *(_QWORD *)v42 = *(_QWORD *)v43;
    *((_QWORD *)v42 + 1) = v44;
    v45 = a3[8];
    *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
    *(_QWORD *)((char *)a1 + v45) = *(_QWORD *)((char *)a2 + v45);
    v46 = a3[10];
    *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
    v47 = (char *)a1 + v46;
    v48 = (char *)a2 + v46;
    v49 = type metadata accessor for ImpressionMetrics(0);
    v50 = *(_QWORD *)(v49 - 8);
    v51 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    if (v51(v48, 1, v49))
    {
      v52 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
      memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v50 + 16))(v47, v48, v49);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v50 + 56))(v47, 0, 1, v49);
    }
  }
  return a1;
}

uint64_t destroy for ShowEpisodeCountHeader(uint64_t a1, int *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + a2[6];
  swift_bridgeObjectRelease();
  v5 = *(unsigned __int8 *)(v4 + 32);
  if (v5 != 255)
    sub_3B5BC(*(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), v5);
  v6 = *(unsigned __int8 *)(v4 + 64);
  if (v6 != 255)
    sub_3D624(*(id *)(v4 + 56), v6);
  v7 = *(unsigned __int8 *)(v4 + 80);
  if (v7 != 255)
    sub_3D624(*(id *)(v4 + 72), v7);
  v8 = *(unsigned __int8 *)(v4 + 96);
  if (v8 != 255)
    sub_3D624(*(id *)(v4 + 88), v8);
  v9 = *(unsigned __int8 *)(v4 + 112);
  if (v9 != 255)
    sub_3D624(*(id *)(v4 + 104), v9);
  v10 = *(unsigned __int8 *)(v4 + 128);
  if (v10 != 255)
    sub_3D624(*(id *)(v4 + 120), v10);
  v11 = v4 + *(int *)(type metadata accessor for ArtworkModel(0) + 44);
  v12 = type metadata accessor for ArtworkCrop(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release(*(_QWORD *)(a1 + a2[7]));
  v13 = a1 + a2[10];
  v14 = type metadata accessor for ImpressionMetrics(0);
  v15 = *(_QWORD *)(v14 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
  return result;
}

_QWORD *initializeWithCopy for ShowEpisodeCountHeader(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  id *v15;
  int v16;
  id v17;
  id *v18;
  int v19;
  id v20;
  id *v21;
  int v22;
  id v23;
  id *v24;
  int v25;
  id v26;
  id *v27;
  int v28;
  id v29;
  int *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int (*v49)(char *, uint64_t, uint64_t);
  uint64_t v50;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  v8 = a3[6];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = *(_QWORD *)((char *)a2 + v8 + 8);
  *(_QWORD *)v9 = *(_QWORD *)((char *)a2 + v8);
  *((_QWORD *)v9 + 1) = v11;
  v12 = *((unsigned __int8 *)a2 + v8 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v12 == 255)
  {
    *((_OWORD *)v9 + 1) = *((_OWORD *)v10 + 1);
    v9[32] = v10[32];
  }
  else
  {
    v13 = *((_QWORD *)v10 + 2);
    v14 = *((_QWORD *)v10 + 3);
    sub_3D464(v13, v14, v12);
    *((_QWORD *)v9 + 2) = v13;
    *((_QWORD *)v9 + 3) = v14;
    v9[32] = v12;
  }
  *(_OWORD *)(v9 + 40) = *(_OWORD *)(v10 + 40);
  v15 = (id *)(v10 + 56);
  v16 = v10[64];
  if (v16 == 255)
  {
    *((_QWORD *)v9 + 7) = *v15;
    v9[64] = v10[64];
  }
  else
  {
    v17 = *v15;
    sub_3D47C(*v15, v10[64]);
    *((_QWORD *)v9 + 7) = v17;
    v9[64] = v16;
  }
  v18 = (id *)(v10 + 72);
  v19 = v10[80];
  if (v19 == 255)
  {
    *((_QWORD *)v9 + 9) = *v18;
    v9[80] = v10[80];
  }
  else
  {
    v20 = *v18;
    sub_3D47C(*v18, v10[80]);
    *((_QWORD *)v9 + 9) = v20;
    v9[80] = v19;
  }
  v21 = (id *)(v10 + 88);
  v22 = v10[96];
  if (v22 == 255)
  {
    *((_QWORD *)v9 + 11) = *v21;
    v9[96] = v10[96];
  }
  else
  {
    v23 = *v21;
    sub_3D47C(*v21, v10[96]);
    *((_QWORD *)v9 + 11) = v23;
    v9[96] = v22;
  }
  v24 = (id *)(v10 + 104);
  v25 = v10[112];
  if (v25 == 255)
  {
    *((_QWORD *)v9 + 13) = *v24;
    v9[112] = v10[112];
  }
  else
  {
    v26 = *v24;
    sub_3D47C(*v24, v10[112]);
    *((_QWORD *)v9 + 13) = v26;
    v9[112] = v25;
  }
  v27 = (id *)(v10 + 120);
  v28 = v10[128];
  if (v28 == 255)
  {
    *((_QWORD *)v9 + 15) = *v27;
    v9[128] = v10[128];
  }
  else
  {
    v29 = *v27;
    sub_3D47C(*v27, v10[128]);
    *((_QWORD *)v9 + 15) = v29;
    v9[128] = v28;
  }
  v9[129] = v10[129];
  v30 = (int *)type metadata accessor for ArtworkModel(0);
  v31 = v30[11];
  v32 = &v9[v31];
  v33 = &v10[v31];
  v34 = type metadata accessor for ArtworkCrop(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v32, v33, v34);
  v35 = v30[12];
  v36 = &v9[v35];
  v37 = &v10[v35];
  v38 = *((_QWORD *)v37 + 1);
  *(_QWORD *)v36 = *(_QWORD *)v37;
  *((_QWORD *)v36 + 1) = v38;
  v9[v30[13]] = v10[v30[13]];
  v9[v30[14]] = v10[v30[14]];
  v9[v30[15]] = v10[v30[15]];
  v39 = v30[16];
  v40 = &v9[v39];
  v41 = &v10[v39];
  v42 = *((_QWORD *)v41 + 1);
  *(_QWORD *)v40 = *(_QWORD *)v41;
  *((_QWORD *)v40 + 1) = v42;
  v43 = a3[8];
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  *(_QWORD *)((char *)a1 + v43) = *(_QWORD *)((char *)a2 + v43);
  v44 = a3[10];
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  v45 = (char *)a1 + v44;
  v46 = (char *)a2 + v44;
  v47 = type metadata accessor for ImpressionMetrics(0);
  v48 = *(_QWORD *)(v47 - 8);
  v49 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  if (v49(v46, 1, v47))
  {
    v50 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
    memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v45, v46, v47);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
  }
  return a1;
}

_QWORD *assignWithCopy for ShowEpisodeCountHeader(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  __int128 *v9;
  __int128 *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  id *v21;
  id *v22;
  int v23;
  id v24;
  void *v25;
  char v26;
  id v27;
  char v28;
  id v29;
  id *v30;
  id *v31;
  int v32;
  id v33;
  void *v34;
  char v35;
  id v36;
  char v37;
  id v38;
  id *v39;
  id *v40;
  int v41;
  id v42;
  void *v43;
  char v44;
  id v45;
  char v46;
  id v47;
  id *v48;
  id *v49;
  int v50;
  id v51;
  void *v52;
  char v53;
  id v54;
  char v55;
  id v56;
  id *v57;
  id *v58;
  int v59;
  id v60;
  void *v61;
  char v62;
  id v63;
  char v64;
  id v65;
  int *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t (*v84)(char *, uint64_t, uint64_t);
  int v85;
  uint64_t v86;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[6];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  *(_QWORD *)v7 = *(_QWORD *)((char *)a2 + v6);
  *((_QWORD *)v7 + 1) = *(_QWORD *)((char *)a2 + v6 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v9 = (__int128 *)(v7 + 16);
  v10 = (__int128 *)(v8 + 16);
  v11 = v8[32];
  if (v7[32] == 255)
  {
    if (v11 == 255)
    {
      v20 = *v10;
      v7[32] = v8[32];
      *v9 = v20;
    }
    else
    {
      v17 = *((_QWORD *)v8 + 2);
      v18 = *((_QWORD *)v8 + 3);
      sub_3D464(v17, v18, v8[32]);
      *((_QWORD *)v7 + 2) = v17;
      *((_QWORD *)v7 + 3) = v18;
      v7[32] = v11;
    }
  }
  else if (v11 == 255)
  {
    sub_3E43C((uint64_t)(v7 + 16));
    v19 = v8[32];
    *v9 = *v10;
    v7[32] = v19;
  }
  else
  {
    v12 = *((_QWORD *)v8 + 2);
    v13 = *((_QWORD *)v8 + 3);
    sub_3D464(v12, v13, v8[32]);
    v14 = *((_QWORD *)v7 + 2);
    v15 = *((_QWORD *)v7 + 3);
    *((_QWORD *)v7 + 2) = v12;
    *((_QWORD *)v7 + 3) = v13;
    v16 = v7[32];
    v7[32] = v11;
    sub_3B5BC(v14, v15, v16);
  }
  *((_QWORD *)v7 + 5) = *((_QWORD *)v8 + 5);
  *((_QWORD *)v7 + 6) = *((_QWORD *)v8 + 6);
  v21 = (id *)(v7 + 56);
  v22 = (id *)(v8 + 56);
  v23 = v8[64];
  if (v7[64] == 255)
  {
    if (v23 == 255)
    {
      v29 = *v22;
      v7[64] = v8[64];
      *v21 = v29;
    }
    else
    {
      v27 = *v22;
      sub_3D47C(*v22, v8[64]);
      *((_QWORD *)v7 + 7) = v27;
      v7[64] = v23;
    }
  }
  else if (v23 == 255)
  {
    sub_3E470((uint64_t)(v7 + 56));
    v28 = v8[64];
    *v21 = *v22;
    v7[64] = v28;
  }
  else
  {
    v24 = *v22;
    sub_3D47C(*v22, v8[64]);
    v25 = (void *)*((_QWORD *)v7 + 7);
    *((_QWORD *)v7 + 7) = v24;
    v26 = v7[64];
    v7[64] = v23;
    sub_3D624(v25, v26);
  }
  v30 = (id *)(v7 + 72);
  v31 = (id *)(v8 + 72);
  v32 = v8[80];
  if (v7[80] == 255)
  {
    if (v32 == 255)
    {
      v38 = *v31;
      v7[80] = v8[80];
      *v30 = v38;
    }
    else
    {
      v36 = *v31;
      sub_3D47C(*v31, v8[80]);
      *((_QWORD *)v7 + 9) = v36;
      v7[80] = v32;
    }
  }
  else if (v32 == 255)
  {
    sub_3E470((uint64_t)(v7 + 72));
    v37 = v8[80];
    *v30 = *v31;
    v7[80] = v37;
  }
  else
  {
    v33 = *v31;
    sub_3D47C(*v31, v8[80]);
    v34 = (void *)*((_QWORD *)v7 + 9);
    *((_QWORD *)v7 + 9) = v33;
    v35 = v7[80];
    v7[80] = v32;
    sub_3D624(v34, v35);
  }
  v39 = (id *)(v7 + 88);
  v40 = (id *)(v8 + 88);
  v41 = v8[96];
  if (v7[96] == 255)
  {
    if (v41 == 255)
    {
      v47 = *v40;
      v7[96] = v8[96];
      *v39 = v47;
    }
    else
    {
      v45 = *v40;
      sub_3D47C(*v40, v8[96]);
      *((_QWORD *)v7 + 11) = v45;
      v7[96] = v41;
    }
  }
  else if (v41 == 255)
  {
    sub_3E470((uint64_t)(v7 + 88));
    v46 = v8[96];
    *v39 = *v40;
    v7[96] = v46;
  }
  else
  {
    v42 = *v40;
    sub_3D47C(*v40, v8[96]);
    v43 = (void *)*((_QWORD *)v7 + 11);
    *((_QWORD *)v7 + 11) = v42;
    v44 = v7[96];
    v7[96] = v41;
    sub_3D624(v43, v44);
  }
  v48 = (id *)(v7 + 104);
  v49 = (id *)(v8 + 104);
  v50 = v8[112];
  if (v7[112] == 255)
  {
    if (v50 == 255)
    {
      v56 = *v49;
      v7[112] = v8[112];
      *v48 = v56;
    }
    else
    {
      v54 = *v49;
      sub_3D47C(*v49, v8[112]);
      *((_QWORD *)v7 + 13) = v54;
      v7[112] = v50;
    }
  }
  else if (v50 == 255)
  {
    sub_3E470((uint64_t)(v7 + 104));
    v55 = v8[112];
    *v48 = *v49;
    v7[112] = v55;
  }
  else
  {
    v51 = *v49;
    sub_3D47C(*v49, v8[112]);
    v52 = (void *)*((_QWORD *)v7 + 13);
    *((_QWORD *)v7 + 13) = v51;
    v53 = v7[112];
    v7[112] = v50;
    sub_3D624(v52, v53);
  }
  v57 = (id *)(v7 + 120);
  v58 = (id *)(v8 + 120);
  v59 = v8[128];
  if (v7[128] == 255)
  {
    if (v59 == 255)
    {
      v65 = *v58;
      v7[128] = v8[128];
      *v57 = v65;
    }
    else
    {
      v63 = *v58;
      sub_3D47C(*v58, v8[128]);
      *((_QWORD *)v7 + 15) = v63;
      v7[128] = v59;
    }
  }
  else if (v59 == 255)
  {
    sub_3E470((uint64_t)(v7 + 120));
    v64 = v8[128];
    *v57 = *v58;
    v7[128] = v64;
  }
  else
  {
    v60 = *v58;
    sub_3D47C(*v58, v8[128]);
    v61 = (void *)*((_QWORD *)v7 + 15);
    *((_QWORD *)v7 + 15) = v60;
    v62 = v7[128];
    v7[128] = v59;
    sub_3D624(v61, v62);
  }
  v7[129] = v8[129];
  v66 = (int *)type metadata accessor for ArtworkModel(0);
  v67 = v66[11];
  v68 = &v7[v67];
  v69 = &v8[v67];
  v70 = type metadata accessor for ArtworkCrop(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v70 - 8) + 24))(v68, v69, v70);
  v71 = v66[12];
  v72 = &v7[v71];
  v73 = &v8[v71];
  *(_QWORD *)v72 = *(_QWORD *)v73;
  *((_QWORD *)v72 + 1) = *((_QWORD *)v73 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7[v66[13]] = v8[v66[13]];
  v7[v66[14]] = v8[v66[14]];
  v7[v66[15]] = v8[v66[15]];
  v74 = v66[16];
  v75 = &v7[v74];
  v76 = &v8[v74];
  *(_QWORD *)v75 = *(_QWORD *)v76;
  *((_QWORD *)v75 + 1) = *((_QWORD *)v76 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v77 = a3[7];
  v78 = *(_QWORD *)((char *)a1 + v77);
  *(_QWORD *)((char *)a1 + v77) = *(_QWORD *)((char *)a2 + v77);
  swift_retain();
  swift_release(v78);
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  v79 = a3[10];
  v80 = (char *)a1 + v79;
  v81 = (char *)a2 + v79;
  v82 = type metadata accessor for ImpressionMetrics(0);
  v83 = *(_QWORD *)(v82 - 8);
  v84 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v83 + 48);
  LODWORD(v68) = v84(v80, 1, v82);
  v85 = v84(v81, 1, v82);
  if (!(_DWORD)v68)
  {
    if (!v85)
    {
      (*(void (**)(char *, char *, uint64_t))(v83 + 24))(v80, v81, v82);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v83 + 8))(v80, v82);
    goto LABEL_48;
  }
  if (v85)
  {
LABEL_48:
    v86 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
    memcpy(v80, v81, *(_QWORD *)(*(_QWORD *)(v86 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v83 + 16))(v80, v81, v82);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v83 + 56))(v80, 0, 1, v82);
  return a1;
}

_OWORD *initializeWithTake for ShowEpisodeCountHeader(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[6];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v8[32] = *((_BYTE *)a2 + v7 + 32);
  v10 = *(_OWORD *)((char *)a2 + v7 + 16);
  *(_OWORD *)v8 = *(_OWORD *)((char *)a2 + v7);
  *((_OWORD *)v8 + 1) = v10;
  *(_OWORD *)(v8 + 40) = *(_OWORD *)((char *)a2 + v7 + 40);
  *((_QWORD *)v8 + 7) = *(_QWORD *)((char *)a2 + v7 + 56);
  v8[64] = *((_BYTE *)a2 + v7 + 64);
  v11 = *(_OWORD *)((char *)a2 + v7 + 72);
  v12 = *(_OWORD *)((char *)a2 + v7 + 88);
  v13 = *(_OWORD *)((char *)a2 + v7 + 104);
  *(_OWORD *)(v8 + 113) = *(_OWORD *)((char *)a2 + v7 + 113);
  *(_OWORD *)(v8 + 104) = v13;
  *(_OWORD *)(v8 + 88) = v12;
  *(_OWORD *)(v8 + 72) = v11;
  v8[129] = *((_BYTE *)a2 + v7 + 129);
  v14 = (int *)type metadata accessor for ArtworkModel(0);
  v15 = v14[11];
  v16 = &v8[v15];
  v17 = &v9[v15];
  v18 = type metadata accessor for ArtworkCrop(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  *(_OWORD *)&v8[v14[12]] = *(_OWORD *)&v9[v14[12]];
  v8[v14[13]] = v9[v14[13]];
  v8[v14[14]] = v9[v14[14]];
  v8[v14[15]] = v9[v14[15]];
  *(_OWORD *)&v8[v14[16]] = *(_OWORD *)&v9[v14[16]];
  v19 = a3[8];
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  *(_QWORD *)((char *)a1 + v19) = *(_QWORD *)((char *)a2 + v19);
  v20 = a3[10];
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  v21 = (char *)a1 + v20;
  v22 = (char *)a2 + v20;
  v23 = type metadata accessor for ImpressionMetrics(0);
  v24 = *(_QWORD *)(v23 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
  {
    v25 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v21, v22, v23);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  }
  return a1;
}

_QWORD *assignWithTake for ShowEpisodeCountHeader(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  _OWORD *v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  int v18;
  int v19;
  void *v20;
  _QWORD *v21;
  int v22;
  int v23;
  void *v24;
  _QWORD *v25;
  int v26;
  int v27;
  void *v28;
  _QWORD *v29;
  int v30;
  int v31;
  void *v32;
  _QWORD *v33;
  int v34;
  int v35;
  void *v36;
  int *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t (*v60)(char *, uint64_t, uint64_t);
  int v61;
  uint64_t v62;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  v8 = a3[6];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = *(_QWORD *)((char *)a2 + v8 + 8);
  *(_QWORD *)v9 = *(_QWORD *)((char *)a2 + v8);
  *((_QWORD *)v9 + 1) = v11;
  swift_bridgeObjectRelease();
  v12 = v10 + 16;
  v13 = v9[32];
  if (v13 != 255)
  {
    v14 = v10[32];
    if (v14 != 255)
    {
      v15 = *((_QWORD *)v9 + 2);
      v16 = *((_QWORD *)v9 + 3);
      *((_OWORD *)v9 + 1) = *v12;
      v9[32] = v14;
      sub_3B5BC(v15, v16, v13);
      goto LABEL_6;
    }
    sub_3E43C((uint64_t)(v9 + 16));
  }
  *((_OWORD *)v9 + 1) = *v12;
  v9[32] = v10[32];
LABEL_6:
  *(_OWORD *)(v9 + 40) = *(_OWORD *)(v10 + 40);
  v17 = v10 + 56;
  v18 = v9[64];
  if (v18 != 255)
  {
    v19 = v10[64];
    if (v19 != 255)
    {
      v20 = (void *)*((_QWORD *)v9 + 7);
      *((_QWORD *)v9 + 7) = *v17;
      v9[64] = v19;
      sub_3D624(v20, v18);
      goto LABEL_11;
    }
    sub_3E470((uint64_t)(v9 + 56));
  }
  *((_QWORD *)v9 + 7) = *v17;
  v9[64] = v10[64];
LABEL_11:
  v21 = v10 + 72;
  v22 = v9[80];
  if (v22 != 255)
  {
    v23 = v10[80];
    if (v23 != 255)
    {
      v24 = (void *)*((_QWORD *)v9 + 9);
      *((_QWORD *)v9 + 9) = *v21;
      v9[80] = v23;
      sub_3D624(v24, v22);
      goto LABEL_16;
    }
    sub_3E470((uint64_t)(v9 + 72));
  }
  *((_QWORD *)v9 + 9) = *v21;
  v9[80] = v10[80];
LABEL_16:
  v25 = v10 + 88;
  v26 = v9[96];
  if (v26 != 255)
  {
    v27 = v10[96];
    if (v27 != 255)
    {
      v28 = (void *)*((_QWORD *)v9 + 11);
      *((_QWORD *)v9 + 11) = *v25;
      v9[96] = v27;
      sub_3D624(v28, v26);
      goto LABEL_21;
    }
    sub_3E470((uint64_t)(v9 + 88));
  }
  *((_QWORD *)v9 + 11) = *v25;
  v9[96] = v10[96];
LABEL_21:
  v29 = v10 + 104;
  v30 = v9[112];
  if (v30 != 255)
  {
    v31 = v10[112];
    if (v31 != 255)
    {
      v32 = (void *)*((_QWORD *)v9 + 13);
      *((_QWORD *)v9 + 13) = *v29;
      v9[112] = v31;
      sub_3D624(v32, v30);
      goto LABEL_26;
    }
    sub_3E470((uint64_t)(v9 + 104));
  }
  *((_QWORD *)v9 + 13) = *v29;
  v9[112] = v10[112];
LABEL_26:
  v33 = v10 + 120;
  v34 = v9[128];
  if (v34 != 255)
  {
    v35 = v10[128];
    if (v35 != 255)
    {
      v36 = (void *)*((_QWORD *)v9 + 15);
      *((_QWORD *)v9 + 15) = *v33;
      v9[128] = v35;
      sub_3D624(v36, v34);
      goto LABEL_31;
    }
    sub_3E470((uint64_t)(v9 + 120));
  }
  *((_QWORD *)v9 + 15) = *v33;
  v9[128] = v10[128];
LABEL_31:
  v9[129] = v10[129];
  v37 = (int *)type metadata accessor for ArtworkModel(0);
  v38 = v37[11];
  v39 = &v9[v38];
  v40 = &v10[v38];
  v41 = type metadata accessor for ArtworkCrop(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 40))(v39, v40, v41);
  v42 = v37[12];
  v43 = &v9[v42];
  v44 = &v10[v42];
  v46 = *(_QWORD *)v44;
  v45 = *((_QWORD *)v44 + 1);
  *(_QWORD *)v43 = v46;
  *((_QWORD *)v43 + 1) = v45;
  swift_bridgeObjectRelease();
  v9[v37[13]] = v10[v37[13]];
  v9[v37[14]] = v10[v37[14]];
  v9[v37[15]] = v10[v37[15]];
  v47 = v37[16];
  v48 = &v9[v47];
  v49 = &v10[v47];
  v51 = *(_QWORD *)v49;
  v50 = *((_QWORD *)v49 + 1);
  *(_QWORD *)v48 = v51;
  *((_QWORD *)v48 + 1) = v50;
  swift_bridgeObjectRelease();
  v52 = a3[7];
  v53 = *(_QWORD *)((char *)a1 + v52);
  *(_QWORD *)((char *)a1 + v52) = *(_QWORD *)((char *)a2 + v52);
  swift_release(v53);
  v54 = a3[9];
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  *((_BYTE *)a1 + v54) = *((_BYTE *)a2 + v54);
  v55 = a3[10];
  v56 = (char *)a1 + v55;
  v57 = (char *)a2 + v55;
  v58 = type metadata accessor for ImpressionMetrics(0);
  v59 = *(_QWORD *)(v58 - 8);
  v60 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v59 + 48);
  LODWORD(v39) = v60(v56, 1, v58);
  v61 = v60(v57, 1, v58);
  if (!(_DWORD)v39)
  {
    if (!v61)
    {
      (*(void (**)(char *, char *, uint64_t))(v59 + 40))(v56, v57, v58);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v59 + 8))(v56, v58);
    goto LABEL_36;
  }
  if (v61)
  {
LABEL_36:
    v62 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
    memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v59 + 32))(v56, v57, v58);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v59 + 56))(v56, 0, 1, v58);
  return a1;
}

uint64_t getEnumTagSinglePayload for ShowEpisodeCountHeader(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1528BC);
}

uint64_t sub_1528BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for ArtworkModel(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 24);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 40);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for ShowEpisodeCountHeader(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_15296C);
}

uint64_t sub_15296C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for ArtworkModel(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 24);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 40);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void sub_152A0C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[7];

  v6[0] = &unk_2F81C0;
  v6[1] = &unk_2F81C0;
  v2 = type metadata accessor for ArtworkModel(319);
  if (v3 <= 0x3F)
  {
    v6[2] = *(_QWORD *)(v2 - 8) + 64;
    v6[3] = (char *)&value witness table for Builtin.NativeObject + 64;
    v6[4] = (char *)&value witness table for Builtin.Int64 + 64;
    v6[5] = &unk_2F81F8;
    sub_34090(319);
    if (v5 <= 0x3F)
    {
      v6[6] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 7, v6, a1 + 16);
    }
  }
}

uint64_t storeEnumTagSinglePayload for ShowEpisodeCountHeader.Style(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_152B0C + 4 * byte_2F8023[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_152B40 + 4 * byte_2F801E[v4]))();
}

uint64_t sub_152B40(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_152B48(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x152B50);
  return result;
}

uint64_t sub_152B5C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x152B64);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_152B68(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_152B70(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ShowEpisodeCountHeader.Style()
{
  return &type metadata for ShowEpisodeCountHeader.Style;
}

uint64_t View.withSizing(callback:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v17;

  v10 = type metadata accessor for CoordinateSpace(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t, __n128))(v11 + 104))(v14, enum case for CoordinateSpace.local(_:), v10, v12);
  v15 = swift_allocObject(&unk_382E00, 32, 7);
  *(_QWORD *)(v15 + 16) = a1;
  *(_QWORD *)(v15 + 24) = a2;
  swift_retain();
  View.withFrame(coordinateSpace:callback:)((uint64_t)v14, (uint64_t)sub_152CD8, v15, a3, a4, a5);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
}

uint64_t sub_152C8C(uint64_t (*a1)(double, double), double a2, double a3, double a4, double a5)
{
  return a1(a4, a5);
}

uint64_t sub_152CB4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_152CD8(double a1, double a2, double a3, double a4)
{
  uint64_t v4;

  return (*(uint64_t (**)(double, double))(v4 + 16))(a3, a4);
}

uint64_t View.withFrame(coordinateSpace:callback:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t WitnessTable;
  unint64_t v23;
  unint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[16];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v27 = a2;
  v29 = a6;
  v10 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_3B5480);
  v11 = type metadata accessor for ModifiedContent(0, a4, v10);
  v28 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = (char *)&v26 - v12;
  v31 = a1;
  v15 = static Alignment.center.getter(v14);
  v17 = v16;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BC920);
  v19 = sub_32914(&qword_3BC928, &qword_3BC920, (uint64_t)&protocol conformance descriptor for GeometryReader<A>);
  View.overlay<A>(alignment:content:)(v15, v17, sub_152F94, v30, a4, v18, a5, v19);
  v20 = swift_allocObject(&unk_382E28, 32, 7);
  *(_QWORD *)(v20 + 16) = v27;
  *(_QWORD *)(v20 + 24) = a3;
  v21 = sub_32914(&qword_3B5478, &qword_3B5480, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
  v32 = a5;
  v33 = v21;
  swift_retain();
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>);
  v23 = sub_153034();
  v24 = sub_153078();
  View.onPreferenceChange<A>(_:perform:)(&type metadata for SizerKey, sub_15300C, v20, v11, &type metadata for SizerKey, WitnessTable, v23, v24);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v13, v11);
}

uint64_t sub_152EC8@<X0>(uint64_t a1@<X0>, void (**a2)(uint64_t a1@<X8>)@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;

  v4 = type metadata accessor for CoordinateSpace(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = __chkstk_darwin(v4);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16))((char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4, v7);
  v8 = *(unsigned __int8 *)(v5 + 80);
  v9 = (v8 + 16) & ~v8;
  v10 = swift_allocObject(&unk_382E70, v9 + v6, v8 | 7);
  result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(v10 + v9, (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  *a2 = sub_153260;
  a2[1] = (void (*)(uint64_t@<X8>))v10;
  return result;
}

uint64_t sub_152F94@<X0>(void (**a1)(uint64_t a1@<X8>)@<X8>)
{
  uint64_t v1;

  return sub_152EC8(*(_QWORD *)(v1 + 16), a1);
}

void sub_152F9C(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = static Color.clear.getter();
  v5 = GeometryProxy.frame(in:)(a1);
  *(_QWORD *)a2 = v4;
  *(double *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = v6;
  *(_QWORD *)(a2 + 24) = v7;
  *(_QWORD *)(a2 + 32) = v8;
}

uint64_t sub_152FE4(double *a1, uint64_t (*a2)(double, double, double, double))
{
  return a2(*a1, a1[1], a1[2], a1[3]);
}

uint64_t sub_15300C(double *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(double, double, double, double))(v1 + 16))(*a1, a1[1], a1[2], a1[3]);
}

unint64_t sub_153034()
{
  unint64_t result;

  result = qword_3BC930;
  if (!qword_3BC930)
  {
    result = swift_getWitnessTable(&unk_2F8240);
    atomic_store(result, (unint64_t *)&qword_3BC930);
  }
  return result;
}

unint64_t sub_153078()
{
  unint64_t result;

  result = qword_3BC938;
  if (!qword_3BC938)
  {
    type metadata accessor for CGRect(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for CGRect);
    atomic_store(result, (unint64_t *)&qword_3BC938);
  }
  return result;
}

uint64_t sub_1530C0(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *a1;
  v2 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_3B5480);
  v3 = type metadata accessor for ModifiedContent(255, v1, v2);
  v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_3B5490);
  type metadata accessor for ModifiedContent(255, v3, v4);
  sub_32914(&qword_3B5478, &qword_3B5480, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>);
  sub_32914(&qword_3B5488, &qword_3B5490, (uint64_t)&protocol conformance descriptor for _PreferenceActionModifier<A>);
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>);
}

ValueMetadata *type metadata accessor for SizerKey()
{
  return &type metadata for SizerKey;
}

__n128 sub_1531B0@<Q0>(__n128 *a1@<X8>)
{
  __n128 result;

  a1->n128_u64[0] = 0;
  a1->n128_u64[1] = 0;
  __asm { FMOV            V0.2D, #10.0 }
  a1[1] = result;
  return result;
}

double sub_1531C0(_OWORD *a1, void (*a2)(_OWORD *__return_ptr))
{
  double result;
  __int128 v4;
  _OWORD v5[2];

  a2(v5);
  result = *(double *)v5;
  v4 = v5[1];
  *a1 = v5[0];
  a1[1] = v4;
  return result;
}

uint64_t sub_153200()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for CoordinateSpace(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_153260(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for CoordinateSpace(0) - 8) + 80);
  v4 = v1 + ((v3 + 16) & ~v3);
  v5 = static Color.clear.getter();
  v6 = GeometryProxy.frame(in:)(v4);
  *(_QWORD *)a1 = v5;
  *(double *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 32) = v9;
}

uint64_t EmptyModel.impressionMetrics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for EmptyModel(0) + 20);
  return sub_23A70(v3, a1);
}

uint64_t type metadata accessor for EmptyModel(uint64_t a1)
{
  uint64_t result;

  result = qword_3BC9A0;
  if (!qword_3BC9A0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for EmptyModel);
  return result;
}

uint64_t EmptyModel.init(id:impressionMetrics:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;

  *a4 = a1;
  a4[1] = a2;
  v5 = (uint64_t)a4 + *(int *)(type metadata accessor for EmptyModel(0) + 20);
  return sub_23AB8(a3, v5);
}

uint64_t sub_15336C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_23A70(v2 + *(int *)(a1 + 20), a2);
}

uint64_t EmptyModel.init(deserializing:using:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t result;

  v6 = type metadata accessor for JSONContext(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a2, v6);
  v7 = type metadata accessor for JSONObject(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(a1, v7);
  v8 = (char *)a3 + *(int *)(type metadata accessor for EmptyModel(0) + 20);
  v9 = type metadata accessor for ImpressionMetrics(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  *a3 = 0x676E6964616F6CLL;
  a3[1] = 0xE700000000000000;
  return result;
}

unint64_t sub_153434(uint64_t a1)
{
  unint64_t result;

  result = sub_153458();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_153458()
{
  unint64_t result;

  result = qword_3BC940;
  if (!qword_3BC940)
  {
    type metadata accessor for EmptyModel(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for EmptyModel);
    atomic_store(result, (unint64_t *)&qword_3BC940);
  }
  return result;
}

uint64_t sub_1534A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t result;

  v8 = type metadata accessor for JSONContext(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(a2, v8);
  v9 = type metadata accessor for JSONObject(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(a1, v9);
  v10 = (char *)a4 + *(int *)(a3 + 20);
  v11 = type metadata accessor for ImpressionMetrics(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  *a4 = 0x676E6964616F6CLL;
  a4[1] = 0xE700000000000000;
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for EmptyModel(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(char *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v13 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v13 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = *(int *)(a3 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for ImpressionMetrics(0);
    v10 = *(_QWORD *)(v9 - 8);
    v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
    swift_bridgeObjectRetain();
    if (v11(v8, 1, v9))
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
    }
  }
  return v3;
}

uint64_t destroy for EmptyModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for ImpressionMetrics(0);
  v6 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  return result;
}

_QWORD *initializeWithCopy for EmptyModel(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int (*v10)(char *, uint64_t, uint64_t);
  uint64_t v11;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for ImpressionMetrics(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  swift_bridgeObjectRetain();
  if (v10(v7, 1, v8))
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v6, v7, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  }
  return a1;
}

_QWORD *assignWithCopy for EmptyModel(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for ImpressionMetrics(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  return a1;
}

_OWORD *initializeWithTake for EmptyModel(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for ImpressionMetrics(0);
  v8 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
  {
    v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v5, v6, v7);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

_QWORD *assignWithTake for EmptyModel(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for ImpressionMetrics(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v8, v9, v10);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for EmptyModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_153AA8);
}

uint64_t sub_153AA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for EmptyModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_153B34);
}

uint64_t sub_153B34(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

void sub_153BAC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_2F8360;
  sub_34090(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
  }
}

uint64_t SubscriptionConfirmationSheetHandler.__allocating_init(asPartOf:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  swift_allocObject(v1, 112, 7);
  v3 = sub_156474(a1);
  swift_release(a1);
  return v3;
}

uint64_t SubscriptionConfirmationSheetHandler.init(asPartOf:)(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_156474(a1);
  swift_release(a1);
  return v2;
}

void SubscriptionConfirmationSheetHandler.presentSubscriptionConfirmation(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *boxed_opaque_existential_2Tm;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  id v34;
  id v35;
  id v36;
  NSString v37;
  id v38;
  void *v39;
  Class isa;
  id v41;
  uint64_t v42;
  _QWORD *v43;
  void *v44;
  _QWORD *v45;
  id v46;
  id v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t aBlock[3];
  void *v53;
  uint64_t v54;
  _QWORD *v55;

  v2 = v1;
  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v48 - v9;
  __chkstk_darwin(v11);
  v13 = (char *)&v48 - v12;
  v14 = type metadata accessor for Podcasts(0);
  v53 = (void *)v14;
  v54 = sub_F1C0((unint64_t *)&qword_3B33B8, (void (*)(uint64_t))&type metadata accessor for Podcasts, (uint64_t)&protocol conformance descriptor for Podcasts);
  boxed_opaque_existential_2Tm = __swift_allocate_boxed_opaque_existential_2Tm(aBlock);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(boxed_opaque_existential_2Tm, enum case for Podcasts.entitlements(_:), v14);
  LOBYTE(v14) = isFeatureEnabled(_:)(aBlock);
  v16 = __swift_destroy_boxed_opaque_existential_1(aBlock);
  if ((v14 & 1) != 0)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      static Logger.purchases.getter(v16);
      v17 = swift_bridgeObjectRetain_n(a1, 2);
      v18 = Logger.logObject.getter(v17);
      v19 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v18, v19))
      {
        v20 = (uint8_t *)swift_slowAlloc(12, -1);
        v49 = swift_slowAlloc(32, -1);
        aBlock[0] = v49;
        v50 = v2;
        *(_DWORD *)v20 = 136315138;
        v48 = v20 + 4;
        v21 = swift_bridgeObjectRetain();
        v22 = Set.description.getter(v21, &type metadata for String, &protocol witness table for String);
        v24 = v23;
        swift_bridgeObjectRelease();
        v51 = sub_69298(v22, v24, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, aBlock);
        swift_bridgeObjectRelease_n(a1, 2);
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_0, v18, v19, "Attempting to present subscription confirmation sheet for channel id's: %s", v20, 0xCu);
        v25 = v49;
        swift_arrayDestroy(v49, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v25, -1, -1);
        swift_slowDealloc(v20, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(a1, 2);
      }
      (*(void (**)(char *, uint64_t))(v5 + 8))(v13, v4);
      v34 = objc_msgSend((id)objc_opt_self(MTDB), "sharedInstance");
      v35 = objc_msgSend(v34, "privateQueueContext");

      static String._unconditionallyBridgeFromObjectiveC(_:)(kMTChannelEntityName);
      v36 = objc_allocWithZone((Class)NSFetchRequest);
      v37 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v38 = objc_msgSend(v36, "initWithEntityName:", v37);

      v39 = (void *)objc_opt_self(MTChannel);
      isa = Set._bridgeToObjectiveC()().super.isa;
      v41 = objc_msgSend(v39, "predicateForChannelStoreIds:", isa);

      objc_msgSend(v38, "setPredicate:", v41);
      v42 = swift_allocObject(&unk_382F48, 24, 7);
      swift_weakInit(v42 + 16);
      v43 = (_QWORD *)swift_allocObject(&unk_382F70, 40, 7);
      v43[2] = v42;
      v43[3] = v35;
      v43[4] = v38;
      v54 = (uint64_t)sub_1566FC;
      v55 = v43;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_2C9F4;
      v53 = &block_descriptor_14;
      v44 = _Block_copy(aBlock);
      v45 = v55;
      v46 = v35;
      v47 = v38;
      swift_release(v45);
      objc_msgSend(v46, "performBlock:", v44);
      _Block_release(v44);

    }
    else
    {
      v30 = static Logger.purchases.getter(v16);
      v31 = Logger.logObject.getter(v30);
      v32 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v31, v32))
      {
        v33 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v33 = 0;
        _os_log_impl(&dword_0, v31, v32, "Not displaying subscription confirmation sheets because there are no channel subscriptions that were just activated.", v33, 2u);
        swift_slowDealloc(v33, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
    }
  }
  else
  {
    v26 = static Logger.purchases.getter(v16);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v29 = 0;
      _os_log_impl(&dword_0, v27, v28, "Not displaying subscription confirmation sheet because the Entitlements feature flag is not enabled.", v29, 2u);
      swift_slowDealloc(v29, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

uint64_t sub_15420C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t Strong;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  void *v44;
  uint64_t v45;
  void *v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  void **aBlock;
  uint64_t v62;
  uint64_t (*v63)(uint64_t);
  void *v64;
  uint64_t (*v65)();
  uint64_t v66;
  _BYTE v67[24];

  v59 = type metadata accessor for DispatchWorkItemFlags(0);
  v57 = *(_QWORD *)(v59 - 8);
  __chkstk_darwin(v59);
  v7 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = type metadata accessor for DispatchQoS(0);
  v56 = *(_QWORD *)(v58 - 8);
  __chkstk_darwin(v58);
  v9 = (char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Logger(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v16 = (char *)&v54 - v15;
  a1 += 16;
  swift_beginAccess(a1, v67, 0, 0);
  Strong = swift_weakLoadStrong(a1);
  if (Strong)
  {
    v18 = (_QWORD *)Strong;
    v19 = sub_1548B8(a2, a3);
    v20 = v19;
    v21 = (uint8_t *)((unint64_t)v19 >> 62);
    if ((unint64_t)v19 >> 62)
    {
      if (v19 < 0)
        v42 = v19;
      else
        v42 = v19 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
      v22 = _CocoaArrayWrapper.endIndex.getter(v42);
      swift_bridgeObjectRelease();
      if (v22 != 1)
      {
LABEL_4:
        if (v22)
        {
          v23 = v18[7];
          v24 = v18[8];
          __swift_project_boxed_opaque_existential_1(v18 + 4, v23);
          a3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v24 + 8))(v20, v23, v24);
          v25 = swift_bridgeObjectRelease();
          static Logger.purchases.getter(v25);
          v26 = swift_bridgeObjectRetain_n(a3, 2);
          v27 = Logger.logObject.getter(v26);
          LOBYTE(v20) = static os_log_type_t.default.getter();
          if (!os_log_type_enabled(v27, (os_log_type_t)v20))
          {

            swift_bridgeObjectRelease_n(a3, 2);
            goto LABEL_13;
          }
          v21 = (uint8_t *)swift_slowAlloc(12, -1);
          *(_DWORD *)v21 = 134217984;
          if (!((unint64_t)a3 >> 62))
          {
            v55 = *(_QWORD *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFF8));
LABEL_8:
            swift_bridgeObjectRelease();
            aBlock = (void **)v55;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v62);
            swift_bridgeObjectRelease();
            _os_log_impl(&dword_0, v27, (os_log_type_t)v20, "Created %ld channel lockups for the multiple subscription confirmation sheet.", v21, 0xCu);
            swift_slowDealloc(v21, -1, -1);

LABEL_13:
            (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
            v33 = sub_327F8(0, (unint64_t *)&qword_3B8710, OS_dispatch_queue_ptr);
            v34 = (void *)static OS_dispatch_queue.main.getter(v33);
            v35 = swift_allocObject(&unk_382FC0, 32, 7);
            *(_QWORD *)(v35 + 16) = v18;
            *(_QWORD *)(v35 + 24) = a3;
            v65 = sub_156778;
            v66 = v35;
            aBlock = _NSConcreteStackBlock;
            v62 = 1107296256;
            v63 = sub_2C9F4;
            v64 = &block_descriptor_9_0;
            v36 = _Block_copy(&aBlock);
            v37 = swift_retain();
            static DispatchQoS.unspecified.getter(v37);
            v60 = _swiftEmptyArrayStorage;
            v38 = sub_F1C0((unint64_t *)&qword_3B4420, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
            v39 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8720);
            v40 = sub_67E30((unint64_t *)&qword_3B4430, (uint64_t *)&unk_3B8720);
            v41 = v59;
            dispatch thunk of SetAlgebra.init<A>(_:)(&v60, v39, v40, v59, v38);
            OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v7, v36);
            _Block_release(v36);
            swift_release(v18);

            (*(void (**)(char *, uint64_t))(v57 + 8))(v7, v41);
            (*(void (**)(char *, uint64_t))(v56 + 8))(v9, v58);
            return swift_release(v66);
          }
LABEL_32:
          v53 = a3 & 0xFFFFFFFFFFFFFF8;
          if (a3 < 0)
            v53 = a3;
          v55 = v53;
          swift_bridgeObjectRetain();
          v55 = _CocoaArrayWrapper.endIndex.getter(v55);
          swift_bridgeObjectRelease();
          goto LABEL_8;
        }
        goto LABEL_29;
      }
    }
    else
    {
      v22 = *(_QWORD *)((char *)&dword_10 + (v19 & 0xFFFFFFFFFFFFF8));
      if (v22 != 1)
        goto LABEL_4;
    }
    if (v21)
    {
      if (v20 < 0)
        v52 = v20;
      else
        v52 = v20 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
      v27 = _CocoaArrayWrapper.endIndex.getter(v52);
      swift_bridgeObjectRelease();
      if (v27)
      {
LABEL_20:
        if ((v20 & 0xC000000000000001) != 0)
        {
          v43 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0);
        }
        else
        {
          if (!*(_QWORD *)((char *)&dword_10 + (v20 & 0xFFFFFFFFFFFFF8)))
          {
            __break(1u);
            goto LABEL_32;
          }
          v43 = *(id *)(v20 + 32);
        }
        v44 = v43;
        swift_bridgeObjectRelease();
        v45 = swift_allocObject(&unk_383010, 32, 7);
        *(_QWORD *)(v45 + 16) = v18;
        *(_QWORD *)(v45 + 24) = v44;
        v65 = sub_1567C8;
        v66 = v45;
        aBlock = _NSConcreteStackBlock;
        v62 = 1107296256;
        v63 = sub_2C9F4;
        v64 = &block_descriptor_15_2;
        v46 = _Block_copy(&aBlock);
        swift_retain();
        v47 = v44;
        static DispatchQoS.unspecified.getter(v47);
        v60 = _swiftEmptyArrayStorage;
        v48 = sub_F1C0((unint64_t *)&qword_3B4420, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        v49 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8720);
        v50 = sub_67E30((unint64_t *)&qword_3B4430, (uint64_t *)&unk_3B8720);
        v51 = v59;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v60, v49, v50, v59, v48);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v7, v46);
        _Block_release(v46);

        (*(void (**)(char *, uint64_t))(v57 + 8))(v7, v51);
        (*(void (**)(char *, uint64_t))(v56 + 8))(v9, v58);
        swift_release(v18);
        return swift_release(v66);
      }
    }
    else
    {
      v27 = *(NSObject **)((char *)&dword_10 + (v20 & 0xFFFFFFFFFFFFF8));
      if (v27)
        goto LABEL_20;
    }
LABEL_29:
    swift_release(v18);
    return swift_bridgeObjectRelease();
  }
  v28 = static Logger.purchases.getter(0);
  v29 = Logger.logObject.getter(v28);
  v30 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v29, v30))
  {
    v31 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v31 = 0;
    _os_log_impl(&dword_0, v29, v30, "Could not unwrap self in SubscriptionConfirmationSheetHandler. Cannot present subscription confirmation sheet.", v31, 2u);
    swift_slowDealloc(v31, -1, -1);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v16, v10);
}

uint64_t sub_1548B8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = type metadata accessor for Logger(0);
  __chkstk_darwin(v3);
  v4 = sub_327F8(0, &qword_3BCA90, MTChannel_ptr);
  return NSManagedObjectContext.fetch<A>(_:)(a2, v4);
}

uint64_t sub_1549F8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32[5];

  v3 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = static Logger.purchases.getter(v7);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = swift_slowAlloc(22, -1);
    v30 = v3;
    v12 = v11;
    v13 = swift_slowAlloc(32, -1);
    *(_DWORD *)v12 = 141558275;
    v31 = 1752392040;
    v32[0] = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, v32);
    *(_WORD *)(v12 + 12) = 2081;
    v31 = a1;
    v14 = sub_144B4();
    v15 = BinaryInteger.description.getter(&type metadata for UInt64, v14);
    v31 = sub_69298(v15, v16, v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, v32);
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v9, v10, "Fetching UpsellInformation for confirmation sheet for channel id: %{private,mask.hash}s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);

    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v30);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  v17 = swift_allocObject(&unk_382F48, 24, 7);
  swift_weakInit(v17 + 16);
  v18 = swift_allocObject(&unk_383060, 32, 7);
  *(_QWORD *)(v18 + 16) = a1;
  *(_QWORD *)(v18 + 24) = v17;
  v19 = v1[12];
  v20 = v1[13];
  __swift_project_boxed_opaque_existential_1(v1 + 9, v19);
  v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 48);
  swift_retain();
  v22 = v21(a1, v19, v20);
  v23 = swift_allocObject(&unk_382F48, 24, 7);
  swift_weakInit(v23 + 16);
  v24 = (_QWORD *)swift_allocObject(&unk_383088, 48, 7);
  v24[2] = v23;
  v24[3] = a1;
  v24[4] = sub_156824;
  v24[5] = v18;
  v25 = sub_327F8(0, (unint64_t *)&qword_3B8710, OS_dispatch_queue_ptr);
  v26 = swift_retain();
  v27 = static OS_dispatch_queue.main.getter(v26);
  v32[3] = v25;
  v32[4] = (uint64_t)&protocol witness table for OS_dispatch_queue;
  v32[0] = v27;
  Promise.then(getResult:on:)(sub_156858, v24, v32);
  swift_release(v22);
  swift_release(v24);
  __swift_destroy_boxed_opaque_existential_1(v32);
  swift_release(v17);
  return swift_release(v18);
}

uint64_t sub_154D0C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  id v40;
  char *v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;

  v2 = v1;
  v4 = type metadata accessor for ActionMetrics(0);
  __chkstk_darwin(v4);
  v55 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = type metadata accessor for FlowDestination(0);
  __chkstk_darwin(v53);
  v54 = (uint64_t *)((char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = type metadata accessor for Logger(0);
  v51 = *(_QWORD *)(v7 - 8);
  v52 = v7;
  __chkstk_darwin(v7);
  v10 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v49 = a1;
    else
      v49 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v11 = _CocoaArrayWrapper.endIndex.getter(v49);
    v8 = swift_bridgeObjectRelease();
  }
  else
  {
    v11 = *(_QWORD *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8));
  }
  v12 = _swiftEmptyArrayStorage;
  v56 = v10;
  v57 = a1;
  if (v11)
  {
    v59 = _swiftEmptyArrayStorage;
    result = sub_1807B0(0, v11 & ~(v11 >> 63), 0);
    if (v11 < 0)
    {
      __break(1u);
      return result;
    }
    v50 = v1;
    v12 = v59;
    if ((a1 & 0xC000000000000001) != 0)
    {
      v14 = 0;
      do
      {
        v15 = specialized _ArrayBuffer._getElementSlowPath(_:)(v14);
        v58 = *(_QWORD *)(v15 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup_adamId);
        v16 = sub_144B4();
        v17 = BinaryInteger.description.getter(&type metadata for UInt64, v16);
        v19 = v18;
        v8 = swift_unknownObjectRelease(v15);
        v59 = v12;
        v21 = v12[2];
        v20 = v12[3];
        if (v21 >= v20 >> 1)
        {
          v8 = sub_1807B0(v20 > 1, v21 + 1, 1);
          v12 = v59;
        }
        ++v14;
        v12[2] = v21 + 1;
        v22 = &v12[2 * v21];
        v22[4] = v17;
        v22[5] = v19;
      }
      while (v11 != v14);
    }
    else
    {
      v23 = (_QWORD *)(a1 + 32);
      v24 = sub_144B4();
      do
      {
        v58 = *(_QWORD *)(*v23 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup_adamId);
        v8 = BinaryInteger.description.getter(&type metadata for UInt64, v24);
        v25 = v8;
        v27 = v26;
        v59 = v12;
        v29 = v12[2];
        v28 = v12[3];
        if (v29 >= v28 >> 1)
        {
          v8 = sub_1807B0(v28 > 1, v29 + 1, 1);
          v12 = v59;
        }
        v12[2] = v29 + 1;
        v30 = &v12[2 * v29];
        v30[4] = v25;
        v30[5] = v27;
        ++v23;
        --v11;
      }
      while (v11);
    }
    v2 = v50;
    v10 = v56;
  }
  static Logger.purchases.getter(v8);
  v31 = swift_bridgeObjectRetain();
  v32 = Logger.logObject.getter(v31);
  v33 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v32, v33))
  {
    v34 = (uint8_t *)swift_slowAlloc(12, -1);
    v35 = (_QWORD *)swift_slowAlloc(32, -1);
    v59 = v35;
    *(_DWORD *)v34 = 136315138;
    v36 = swift_bridgeObjectRetain();
    v37 = Array.description.getter(v36, &type metadata for String);
    v39 = v38;
    swift_bridgeObjectRelease();
    v58 = sub_69298(v37, v39, (uint64_t *)&v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59);
    swift_bridgeObjectRelease_n(v12, 2);
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v32, v33, "Presenting multiple subscription confirmation sheet for channel id's: %s", v34, 0xCu);
    swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v35, -1, -1);
    swift_slowDealloc(v34, -1, -1);

    (*(void (**)(char *, uint64_t))(v51 + 8))(v56, v52);
  }
  else
  {

    swift_bridgeObjectRelease_n(v12, 2);
    (*(void (**)(char *, uint64_t))(v51 + 8))(v10, v52);
  }
  v40 = objc_msgSend((id)objc_opt_self(UITraitCollection), "currentTraitCollection");
  v41 = (char *)objc_msgSend(v40, "userInterfaceIdiom");

  if (v41 == (_BYTE *)&dword_0 + 1)
    v42 = 5;
  else
    v42 = 4;
  v43 = v53;
  v44 = (uint64_t)v54;
  *v54 = v57;
  swift_storeEnumTagMultiPayload(v44, v43, 28);
  LOBYTE(v59) = v42;
  LOBYTE(v58) = 0;
  v45 = swift_bridgeObjectRetain();
  v46 = (uint64_t)v55;
  static ActionMetrics.notInstrumented.getter(v45);
  v47 = type metadata accessor for FlowAction(0);
  swift_allocObject(v47, *(unsigned int *)(v47 + 48), *(unsigned __int16 *)(v47 + 52));
  v48 = FlowAction.init(_:id:title:presentationContext:animationBehavior:presentationStyle:destinationPageHeader:actionMetrics:)(v44, 0, 0, 0, 0, (char *)&v59, 0, 48, (char *)&v58, v46);
  sub_155FA0(v48, v2);
  return swift_release(v48);
}

uint64_t sub_1551F8(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26[3];

  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a3 + 16;
  v12 = static Logger.purchases.getter(v11);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = a2;
    v16 = swift_slowAlloc(22, -1);
    v17 = swift_slowAlloc(32, -1);
    *(_DWORD *)v16 = 141558275;
    v25 = 1752392040;
    v26[0] = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, v26);
    *(_WORD *)(v16 + 12) = 2081;
    v24 = v6;
    v25 = v15;
    v18 = sub_144B4();
    v19 = BinaryInteger.description.getter(&type metadata for UInt64, v18);
    v25 = sub_69298(v19, v20, v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, v26);
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v13, v14, "Fetched UpsellInformation for confirmation sheet for channel id: %{private,mask.hash}s", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1, -1);
    swift_slowDealloc(v16, -1, -1);

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v24);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  swift_beginAccess(v10, v26, 0, 0);
  result = swift_weakLoadStrong(v10);
  if (result)
  {
    v22 = result;
    sub_155420(a1);
    return swift_release(v22);
  }
  return result;
}

uint64_t sub_155420(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint8_t *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD aBlock[5];
  uint64_t v35;

  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v33 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v31 = *(_QWORD *)(v5 - 8);
  v32 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = static Logger.purchases.getter(v12);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(2, -1);
    v30 = v7;
    v17 = v16;
    *(_WORD *)v16 = 0;
    _os_log_impl(&dword_0, v14, v15, "Presenting single subscription confirmation sheet.", v16, 2u);
    v7 = v30;
    swift_slowDealloc(v17, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v18 = sub_327F8(0, (unint64_t *)&qword_3B8710, OS_dispatch_queue_ptr);
  v19 = (void *)static OS_dispatch_queue.main.getter(v18);
  v20 = swift_allocObject(&unk_382F48, 24, 7);
  swift_weakInit(v20 + 16);
  v21 = swift_allocObject(&unk_383100, 32, 7);
  *(_QWORD *)(v21 + 16) = a1;
  *(_QWORD *)(v21 + 24) = v20;
  aBlock[4] = sub_1568EC;
  v35 = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_2C9F4;
  aBlock[3] = &block_descriptor_36;
  v22 = _Block_copy(aBlock);
  v23 = v35;
  v24 = a1;
  v25 = swift_release(v23);
  static DispatchQoS.unspecified.getter(v25);
  aBlock[0] = _swiftEmptyArrayStorage;
  v26 = sub_F1C0((unint64_t *)&qword_3B4420, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8720);
  v28 = sub_67E30((unint64_t *)&qword_3B4430, (uint64_t *)&unk_3B8720);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v27, v28, v2, v26);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v7, v4, v22);
  _Block_release(v22);

  (*(void (**)(char *, uint64_t))(v33 + 8))(v4, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v7, v32);
}

uint64_t sub_155734(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void *v16;
  char v17;
  uint64_t result;
  uint64_t v19;
  id v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD aBlock[5];
  uint64_t v33;
  _BYTE v34[24];

  v10 = type metadata accessor for DispatchWorkItemFlags(0);
  v30 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS(0);
  v28 = *(_QWORD *)(v13 - 8);
  v29 = v13;
  __chkstk_darwin(v13);
  v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(void **)a1;
  v17 = *(_BYTE *)(a1 + 8);
  a2 += 16;
  swift_beginAccess(a2, v34, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (result)
  {
    v19 = result;
    v20 = *(id *)(result + 16);
    swift_release(v19);
    v21 = swift_allocObject(&unk_3830B0, 56, 7);
    *(_QWORD *)(v21 + 16) = v16;
    *(_BYTE *)(v21 + 24) = v17;
    *(_QWORD *)(v21 + 32) = a3;
    *(_QWORD *)(v21 + 40) = a4;
    *(_QWORD *)(v21 + 48) = a5;
    aBlock[4] = sub_1568A0;
    v33 = v21;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_2C9F4;
    aBlock[3] = &block_descriptor_29;
    v22 = _Block_copy(aBlock);
    sub_1568B4(v16, v17);
    v23 = swift_retain();
    static DispatchQoS.unspecified.getter(v23);
    v31 = _swiftEmptyArrayStorage;
    v24 = sub_F1C0((unint64_t *)&qword_3B4420, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v25 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8720);
    v26 = sub_67E30((unint64_t *)&qword_3B4430, (uint64_t *)&unk_3B8720);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v31, v25, v26, v10, v24);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v15, v12, v22);
    _Block_release(v22);

    (*(void (**)(char *, uint64_t))(v30 + 8))(v12, v10);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v15, v29);
    return swift_release(v33);
  }
  return result;
}

void sub_155984(void *a1, char a2, uint64_t a3, void (*a4)(_QWORD), uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(_QWORD);
  uint64_t v41;
  id v42;
  _QWORD v43[3];
  char v44[8];
  uint64_t v45;
  uint64_t v46;

  v10 = type metadata accessor for Logger(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v16 = (char *)&v37 - v15;
  if ((a2 & 1) != 0)
  {
    v28 = swift_errorRetain(a1);
    static Logger.purchases.getter(v28);
    swift_errorRetain(a1);
    v29 = swift_errorRetain(a1);
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      v32 = swift_slowAlloc(12, -1);
      v41 = v11;
      v33 = (uint8_t *)v32;
      v34 = swift_slowAlloc(32, -1);
      v46 = v34;
      *(_DWORD *)v33 = 136315138;
      swift_getErrorValue(a1, v44, v43);
      v35 = Error.localizedDescription.getter(v43[1], v43[2]);
      v45 = sub_69298(v35, v36, &v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46);
      swift_bridgeObjectRelease();
      sub_156894(a1, 1);
      sub_156894(a1, 1);
      _os_log_impl(&dword_0, v30, v31, "Could not fetch channel upsell information from MAPI with error: %s", v33, 0xCu);
      swift_arrayDestroy(v34, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v34, -1, -1);
      swift_slowDealloc(v33, -1, -1);

      sub_156894(a1, 1);
      (*(void (**)(char *, uint64_t))(v41 + 8))(v16, v10);
    }
    else
    {
      sub_156894(a1, 1);
      sub_156894(a1, 1);
      swift_errorRelease(a1);

      (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
    }
  }
  else
  {
    v42 = a1;
    v17 = static Logger.purchases.getter(v42);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = swift_slowAlloc(12, -1);
      v41 = v11;
      v21 = (uint8_t *)v20;
      v22 = swift_slowAlloc(32, -1);
      v40 = a4;
      v23 = v22;
      v45 = a3;
      v46 = v22;
      v38 = v10;
      v39 = a5;
      *(_DWORD *)v21 = 136315138;
      v24 = sub_144B4();
      v25 = BinaryInteger.description.getter(&type metadata for UInt64, v24);
      v45 = sub_69298(v25, v26, &v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46);
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_0, v18, v19, "Received upsell information from MAPI for channel id: %s. Proceeding to display single subscription confirmation sheet.", v21, 0xCu);
      swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
      v27 = v23;
      a4 = v40;
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v21, -1, -1);

      (*(void (**)(char *, uint64_t))(v41 + 8))(v13, v38);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    }
    a4(v42);
    sub_156894(a1, 0);
  }
}

uint64_t sub_155D34(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  id v11;
  char *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *Strong;
  uint64_t *v17;
  uint64_t v18;
  char v20[31];
  char v21;

  v4 = type metadata accessor for ActionMetrics(0);
  __chkstk_darwin(v4);
  v6 = &v20[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for FlowDestination(0);
  __chkstk_darwin(v7);
  v9 = &v20[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = a2 + 16;
  v11 = objc_msgSend((id)objc_opt_self(UITraitCollection), "currentTraitCollection");
  v12 = (char *)objc_msgSend(v11, "userInterfaceIdiom");

  if (v12 == (_BYTE *)&dword_0 + 1)
    v13 = 5;
  else
    v13 = 4;
  *(_QWORD *)v9 = a1;
  swift_storeEnumTagMultiPayload(v9, v7, 27);
  v20[0] = v13;
  v21 = 0;
  static ActionMetrics.notInstrumented.getter(a1);
  v14 = type metadata accessor for FlowAction(0);
  swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  v15 = FlowAction.init(_:id:title:presentationContext:animationBehavior:presentationStyle:destinationPageHeader:actionMetrics:)((uint64_t)v9, 0, 0, 0, 0, v20, 0, 48, &v21, (uint64_t)v6);
  swift_beginAccess(v10, v20, 0, 0);
  Strong = (uint64_t *)swift_weakLoadStrong(v10);
  if (Strong)
  {
    v17 = Strong;
    sub_155FA0(v15, Strong);
    swift_release(v15);
    v18 = (uint64_t)v17;
  }
  else
  {
    v18 = v15;
  }
  return swift_release(v18);
}

uint64_t SubscriptionConfirmationSheetHandler.deinit()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  __swift_destroy_boxed_opaque_existential_1((_QWORD *)(v0 + 32));
  __swift_destroy_boxed_opaque_existential_1((_QWORD *)(v0 + 72));
  return v0;
}

uint64_t SubscriptionConfirmationSheetHandler.__deallocating_deinit()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  __swift_destroy_boxed_opaque_existential_1((_QWORD *)(v0 + 32));
  __swift_destroy_boxed_opaque_existential_1((_QWORD *)(v0 + 72));
  return swift_deallocClassInstance(v0, 112, 7);
}

void sub_155F58(uint64_t a1)
{
  SubscriptionConfirmationSheetHandler.presentSubscriptionConfirmation(for:)(a1);
}

uint64_t sub_155F78@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = a1();
  *a2 = result;
  return result;
}

uint64_t sub_155FA0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void *v17;
  id v18;
  id v19;
  uint64_t v20;
  id v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t ObjectType;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  void (*v39)(char *, uint64_t);
  char *v40;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE v53[32];
  uint64_t v54;
  _QWORD v55[4];
  _QWORD v56[5];

  v50 = *a2;
  v4 = type metadata accessor for OSLogger(0);
  v49 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ActionMetricsBehavior(0);
  v51 = *(_QWORD *)(v7 - 8);
  v52 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Logger(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v16 = (char *)&v49 - v15;
  v56[3] = type metadata accessor for FlowAction(0);
  v56[4] = sub_F1C0((unint64_t *)&qword_3B0C40, (void (*)(uint64_t))type metadata accessor for FlowAction, (uint64_t)&protocol conformance descriptor for Action);
  v56[0] = a1;
  v17 = (void *)objc_opt_self(UIApplication);
  swift_retain();
  v18 = objc_msgSend(v17, "sharedApplication");
  v19 = objc_msgSend(v18, "delegate");

  if (!v19)
    goto LABEL_8;
  if ((objc_msgSend(v19, "respondsToSelector:", "window") & 1) == 0)
  {
    v20 = swift_unknownObjectRelease(v19);
    goto LABEL_8;
  }
  v21 = objc_msgSend(v19, "window");
  v20 = swift_unknownObjectRelease(v19);
  if (!v21)
  {
LABEL_8:
    v35 = static Logger.purchases.getter(v20);
    v36 = Logger.logObject.getter(v35);
    v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v36, v37))
    {
      v38 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v38 = 0;
      _os_log_impl(&dword_0, v36, v37, "Unable to present subscription confirmation because we could not get the current window.", v38, 2u);
      swift_slowDealloc(v38, -1, -1);
    }

    v39 = *(void (**)(char *, uint64_t))(v11 + 8);
    v40 = v16;
    goto LABEL_11;
  }
  v22 = objc_msgSend(v21, "rootViewController");
  if (!v22)
  {
    v42 = static Logger.purchases.getter(0);
    v43 = Logger.logObject.getter(v42);
    v44 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v43, v44))
    {
      v45 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v45 = 0;
      _os_log_impl(&dword_0, v43, v44, "Unable to present subscription confirmation because we could not get the root view controller.", v45, 2u);
      swift_slowDealloc(v45, -1, -1);
    }

    v39 = *(void (**)(char *, uint64_t))(v11 + 8);
    v40 = v13;
LABEL_11:
    v39(v40, v10);
    return __swift_destroy_boxed_opaque_existential_1(v56);
  }
  v23 = v22;
  v24 = UIResponder.nearestActionRunner.getter();
  v26 = v25;

  if (v24)
  {
    type metadata accessor for ActionRunnerOptions(0);
    v28 = swift_retain();
    v29 = BaseObjectGraph.__allocating_init(_:)(v28);
    v55[3] = v50;
    v55[0] = a2;
    sub_236BC((uint64_t)v55, (uint64_t)v53);
    v54 = 0;
    swift_retain();
    v30 = _s8ShelfKit19ActionRunnerOptionsC04withC6OriginyACXDAA0cG0VSgF_0((uint64_t)v53);
    sub_1459C((uint64_t)v53, &qword_3B18E8);
    swift_release(v29);
    sub_1459C((uint64_t)v55, (uint64_t *)&unk_3BC540);
    ObjectType = swift_getObjectType();
    v33 = v51;
    v32 = v52;
    (*(void (**)(char *, _QWORD, uint64_t))(v51 + 104))(v9, enum case for ActionMetricsBehavior.fromAction(_:), v52);
    v34 = ActionRunner.perform(_:withMetrics:asPartOf:)(v56, (uint64_t)v9, v30, ObjectType, v26);

    swift_unknownObjectRelease(v24);
    swift_release(v30);

    swift_release(v34);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v9, v32);
  }
  else
  {
    static OSLogger.actions.getter(v27);
    v46 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0B10);
    v47 = type metadata accessor for LogMessage(0);
    v48 = swift_allocObject(v46, ((*(unsigned __int8 *)(*(_QWORD *)(v47 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v47 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v47 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v47 - 8) + 80) | 7);
    *(_OWORD *)(v48 + 16) = xmmword_2EA0D0;
    LogMessage.init(stringLiteral:)(0xD000000000000045, 0x8000000000310E60);
    Logger.error(_:)(v48, v4, &protocol witness table for OSLogger);

    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v49 + 8))(v6, v4);
  }
  return __swift_destroy_boxed_opaque_existential_1(v56);
}

uint64_t sub_156474(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  __int128 v21[2];

  v2 = v1;
  v4 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_327F8(0, (unint64_t *)&qword_3B8710, OS_dispatch_queue_ptr);
  static DispatchQoS.default.getter();
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v7);
  *(_QWORD *)&v21[0] = _swiftEmptyArrayStorage;
  v14 = sub_F1C0(&qword_3B20B8, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B20C0);
  v16 = sub_67E30((unint64_t *)&qword_3B20C8, &qword_3B20C0);
  dispatch thunk of SetAlgebra.init<A>(_:)(v21, v15, v16, v4, v14);
  *(_QWORD *)(v2 + 16) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000024, 0x80000000002F83C0, v13, v6, v10, 0);
  *(_QWORD *)(v2 + 24) = a1;
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BCA98);
  swift_retain();
  BaseObjectGraph.inject<A>(_:)(v21, v17, v17);
  sub_F4D8(v21, v2 + 32);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BE9F0);
  BaseObjectGraph.inject<A>(_:)(v21, v18, v18);
  sub_F4D8(v21, v2 + 72);
  return v2;
}

uint64_t sub_1566A4()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1566C8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1566FC()
{
  uint64_t *v0;

  return sub_15420C(v0[2], v0[3], v0[4]);
}

uint64_t block_copy_helper_14(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t block_destroy_helper_14(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t type metadata accessor for SubscriptionConfirmationSheetHandler()
{
  return objc_opt_self(_TtC8ShelfKit36SubscriptionConfirmationSheetHandler);
}

uint64_t method lookup function for SubscriptionConfirmationSheetHandler(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for SubscriptionConfirmationSheetHandler);
}

uint64_t sub_15674C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_156778()
{
  uint64_t v0;

  return sub_154D0C(*(_QWORD *)(v0 + 24));
}

uint64_t sub_15679C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1567C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = (uint64_t)objc_msgSend(*(id *)(v0 + 24), "storeId");
  v2 = AdamID.init(rawValue:)(v1 & ~(v1 >> 63));
  return sub_1549F8(v2);
}

uint64_t sub_156800()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_156824(void *a1)
{
  uint64_t v1;

  return sub_1551F8(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_15682C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_156858(uint64_t a1)
{
  uint64_t *v1;

  return sub_155734(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_156864()
{
  uint64_t v0;

  sub_156894(*(void **)(v0 + 16), *(_BYTE *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

void sub_156894(void *a1, char a2)
{
  if ((a2 & 1) != 0)
    swift_errorRelease(a1);
  else

}

void sub_1568A0()
{
  uint64_t v0;

  sub_155984(*(void **)(v0 + 16), *(_BYTE *)(v0 + 24), *(_QWORD *)(v0 + 32), *(void (**)(_QWORD))(v0 + 40), *(_QWORD *)(v0 + 48));
}

id sub_1568B4(void *a1, char a2)
{
  if ((a2 & 1) != 0)
    return (id)swift_errorRetain(a1);
  else
    return a1;
}

uint64_t sub_1568C0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1568EC()
{
  uint64_t v0;

  return sub_155D34(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

unint64_t static ASKConstants.PodcastCatalogUrl.getter()
{
  return 0xD00000000000001FLL;
}

unint64_t static ASKConstants.PodcastModernTopChartsUrl.getter()
{
  return 0xD000000000000027;
}

unint64_t static ASKConstants.PodcastThinClientHomeUrl.getter()
{
  return 0xD000000000000014;
}

unint64_t static ASKConstants.PodcastThinClientRecentlyUpdatedShowsUrl.getter()
{
  return 0xD000000000000028;
}

unint64_t static ASKConstants.PodcastThinClientSavedEpisodesUrl.getter()
{
  return 0xD000000000000026;
}

unint64_t static ASKConstants.PodcastThinClientShowsUrl.getter()
{
  return 0xD00000000000001DLL;
}

unint64_t static ASKConstants.PodcastThinClientChannelsUrl.getter()
{
  return 0xD000000000000020;
}

unint64_t static ASKConstants.PodcastThinClientLatestEpisodesUrl.getter()
{
  return 0xD000000000000027;
}

unint64_t static ASKConstants.PodcastCacheBust.getter()
{
  return 0xD000000000000019;
}

ValueMetadata *type metadata accessor for ASKConstants()
{
  return &type metadata for ASKConstants;
}

uint64_t StationShowContextAction.stationUuid.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit24StationShowContextAction_stationUuid);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit24StationShowContextAction_stationUuid + 8));
  return v1;
}

uint64_t StationShowContextAction.stationShowUuid.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit24StationShowContextAction_stationShowUuid);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit24StationShowContextAction_stationShowUuid + 8));
  return v1;
}

uint64_t StationShowContextAction.__allocating_init(stationUuid:stationShowUuid:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;

  v5 = v4;
  v30 = a3;
  v31 = a4;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for ActionMetrics(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v16);
  v18 = (char *)&v30 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  v20 = (_QWORD *)(v19 + OBJC_IVAR____TtC8ShelfKit24StationShowContextAction_stationUuid);
  *v20 = a1;
  v20[1] = a2;
  v21 = (_QWORD *)(v19 + OBJC_IVAR____TtC8ShelfKit24StationShowContextAction_stationShowUuid);
  v22 = v31;
  *v21 = v30;
  v21[1] = v22;
  v23 = type metadata accessor for ImpressionMetrics(0);
  v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v18, 1, 1, v23);
  v25 = static ActionMetrics.notInstrumented.getter(v24);
  UUID.init()(v25);
  v26 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
  v28 = v27;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  *(_QWORD *)(v19 + 16) = v26;
  *(_QWORD *)(v19 + 24) = v28;
  *(_QWORD *)(v19 + 32) = 0;
  *(_QWORD *)(v19 + 40) = 0;
  *(_BYTE *)(v19 + 48) = 32;
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v19 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v15, v12);
  sub_23AB8((uint64_t)v18, v19 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics);
  return v19;
}

uint64_t StationShowContextAction.init(stationUuid:stationShowUuid:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;

  v5 = v4;
  v29 = a3;
  v30 = a4;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for ActionMetrics(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v16);
  v18 = (char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = (_QWORD *)(v5 + OBJC_IVAR____TtC8ShelfKit24StationShowContextAction_stationUuid);
  *v19 = a1;
  v19[1] = a2;
  v20 = (_QWORD *)(v5 + OBJC_IVAR____TtC8ShelfKit24StationShowContextAction_stationShowUuid);
  v21 = v30;
  *v20 = v29;
  v20[1] = v21;
  v22 = type metadata accessor for ImpressionMetrics(0);
  v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v18, 1, 1, v22);
  v24 = static ActionMetrics.notInstrumented.getter(v23);
  UUID.init()(v24);
  v25 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
  v27 = v26;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  *(_QWORD *)(v5 + 16) = v25;
  *(_QWORD *)(v5 + 24) = v27;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = 0;
  *(_BYTE *)(v5 + 48) = 32;
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v5 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v15, v12);
  sub_23AB8((uint64_t)v18, v5 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics);
  return v5;
}

void StationShowContextAction.init(deserializing:using:)()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000033, 0x800000000030A500, "ShelfKit/StationShowContextAction.swift", 39, 2, 26, 0);
  __break(1u);
}

void StationShowContextAction.init(uniqueId:title:presentationStyle:actionMetrics:impressionMetrics:)()
{
  _swift_stdlib_reportUnimplementedInitializer("ShelfKit.StationShowContextAction", 33, "init(uniqueId:title:presentationStyle:actionMetrics:impressionMetrics:)", 71, 0);
  __break(1u);
}

uint64_t sub_156EA0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit24StationShowContextAction_stationUuid + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(v0
                                             + OBJC_IVAR____TtC8ShelfKit24StationShowContextAction_stationShowUuid
                                             + 8));
}

uint64_t StationShowContextAction.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics;
  v2 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_23B00(v0 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t StationShowContextAction.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics;
  v2 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_23B00(v0 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_157008()
{
  return type metadata accessor for StationShowContextAction(0);
}

uint64_t type metadata accessor for StationShowContextAction(uint64_t a1)
{
  uint64_t result;

  result = qword_3BCAC8;
  if (!qword_3BCAC8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for StationShowContextAction);
  return result;
}

uint64_t sub_15704C(uint64_t a1)
{
  _QWORD v2[2];

  v2[0] = &unk_2F8470;
  v2[1] = &unk_2F8470;
  return swift_updateClassMetadata2(a1, 256, 2, v2, a1 + 160);
}

uint64_t method lookup function for StationShowContextAction(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for StationShowContextAction);
}

double static ShelfSpacer.a.getter()
{
  return 16.0;
}

double static ShelfSpacer.c.getter()
{
  return 32.0;
}

ValueMetadata *type metadata accessor for ShelfSpacer()
{
  return &type metadata for ShelfSpacer;
}

void *UniversalMetricsDictionary.dictionary.getter()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  id v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  id v6;
  char v7;
  id v8;
  char v9;
  id v10;
  char v11;
  __CFString *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char v17;
  id v18;
  char v19;
  __CFString *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  void *v25;
  id v26;
  id v27;
  char v28;
  unsigned __int8 v29;
  char v30;
  uint64_t v31;
  char v32;
  uint64_t *v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  char v37;
  id v38;
  id v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  id v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  char v56;
  _OWORD v58[2];
  __int128 v59;
  void *v60;

  v1 = v0;
  v2 = objc_msgSend(objc_allocWithZone((Class)ASKCapacityData), "init");
  v3 = objc_msgSend(v2, "totalSystemCapacity");
  v4 = sub_327F8(0, (unint64_t *)&qword_3C7F30, NSNumber_ptr);
  v60 = (void *)v4;
  *(_QWORD *)&v59 = v3;
  sub_1F460(&v59, v58);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  sub_1D728(v58, 0x7974696361706163, 0xEE006D6574737953, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  v6 = objc_msgSend(v2, "totalSystemAvailable");
  v60 = (void *)v4;
  *(_QWORD *)&v59 = v6;
  sub_1F460(&v59, v58);
  v7 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  sub_1D728(v58, 0xD000000000000017, 0x80000000003110D0, v7);
  swift_bridgeObjectRelease();
  v8 = objc_msgSend(v2, "totalDataCapacity");
  v60 = (void *)v4;
  *(_QWORD *)&v59 = v8;
  sub_1F460(&v59, v58);
  v9 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  sub_1D728(v58, 0x7974696361706163, 0xEC00000061746144, v9);
  swift_bridgeObjectRelease();
  v10 = objc_msgSend(v2, "totalDataAvailable");
  v60 = (void *)v4;
  *(_QWORD *)&v59 = v10;
  sub_1F460(&v59, v58);
  v11 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  sub_1D728(v58, 0xD000000000000015, 0x80000000003110F0, v11);
  swift_bridgeObjectRelease();
  v12 = ASKMetricsGetNetworkConnectionTypeString();
  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  v15 = v14;

  v16 = HIBYTE(v15) & 0xF;
  if ((v15 & 0x2000000000000000) == 0)
    v16 = v13 & 0xFFFFFFFFFFFFLL;
  if (v16)
  {
    v60 = &type metadata for String;
    *(_QWORD *)&v59 = v13;
    *((_QWORD *)&v59 + 1) = v15;
    sub_1F460(&v59, v58);
    v17 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
    sub_1D728(v58, 0x697463656E6E6F63, 0xEA00000000006E6FLL, v17);
  }
  swift_bridgeObjectRelease();
  v18 = objc_msgSend(v2, "totalDiskCapacity");
  v60 = (void *)v4;
  *(_QWORD *)&v59 = v18;
  sub_1F460(&v59, v58);
  v19 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  sub_1D728(v58, 0x7974696361706163, 0xEC0000006B736944, v19);
  swift_bridgeObjectRelease();
  v20 = ASKMetricsGetCookieString();
  v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
  v23 = v22;

  v60 = &type metadata for String;
  *(_QWORD *)&v59 = v21;
  *((_QWORD *)&v59 + 1) = v23;
  sub_1F460(&v59, v58);
  v24 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  sub_1D728(v58, 0x65696B6F6F63, 0xE600000000000000, v24);
  swift_bridgeObjectRelease();
  v25 = *(void **)(v1 + OBJC_IVAR____TtC8ShelfKit26UniversalMetricsDictionary_accountStore);
  v26 = objc_msgSend(v25, "ams_activeiTunesAccount");
  v27 = v26;
  if (v26)

  v60 = &type metadata for Bool;
  LOBYTE(v59) = v27 != 0;
  sub_1F460(&v59, v58);
  v28 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  sub_1D728(v58, 0x64656E6769537369, 0xEA00000000006E49, v28);
  swift_bridgeObjectRelease();
  v29 = objc_msgSend(v25, "ams_isActiveAccountCombined");
  v60 = &type metadata for Bool;
  LOBYTE(v59) = v29;
  sub_1F460(&v59, v58);
  v30 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  sub_1D728(v58, 0x6E756F6363417078, 0xEF686374614D7374, v30);
  swift_bridgeObjectRelease();
  v31 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit26UniversalMetricsDictionary_screenScale);
  v60 = &type metadata for CGFloat;
  *(_QWORD *)&v59 = v31;
  sub_1F460(&v59, v58);
  v32 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  sub_1D728(v58, 0x7461526C65786970, 0xEA00000000006F69, v32);
  swift_bridgeObjectRelease();
  v33 = (uint64_t *)(v1 + OBJC_IVAR____TtC8ShelfKit26UniversalMetricsDictionary_screenSize);
  v34 = v33[1];
  v60 = &type metadata for CGFloat;
  *(_QWORD *)&v59 = v34;
  sub_1F460(&v59, v58);
  v35 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  sub_1D728(v58, 0x65486E6565726373, 0xEC00000074686769, v35);
  swift_bridgeObjectRelease();
  v36 = *v33;
  v60 = &type metadata for CGFloat;
  *(_QWORD *)&v59 = v36;
  sub_1F460(&v59, v58);
  v37 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  sub_1D728(v58, 0x69576E6565726373, 0xEB00000000687464, v37);
  swift_bridgeObjectRelease();
  v38 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v39 = objc_msgSend(v38, "bundleIdentifier");
  if (v39)
  {
    v40 = v39;
    v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
    v43 = v42;

    v60 = &type metadata for String;
    *(_QWORD *)&v59 = v41;
    *((_QWORD *)&v59 + 1) = v43;
    sub_1F460(&v59, v58);
    v44 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
    sub_1D728(v58, 7368801, 0xE300000000000000, v44);
    swift_bridgeObjectRelease();
  }
  v45 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
  v46 = objc_msgSend(v45, "systemVersion");

  v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
  v49 = v48;

  v60 = &type metadata for String;
  *(_QWORD *)&v59 = v47;
  *((_QWORD *)&v59 + 1) = v49;
  sub_1F460(&v59, v58);
  v50 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  sub_1D728(v58, 0x6F6973726556736FLL, 0xE90000000000006ELL, v50);
  swift_bridgeObjectRelease();
  v51 = ASKMetricsGetDeviceUserAgent();
  v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
  v54 = v53;

  v60 = &type metadata for String;
  *(_QWORD *)&v59 = v52;
  *((_QWORD *)&v59 + 1) = v54;
  sub_1F460(&v59, v58);
  v55 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  sub_1D728(v58, 0x6E65674172657375, 0xE900000000000074, v55);
  swift_bridgeObjectRelease();
  v60 = &type metadata for Int;
  *(_QWORD *)&v59 = 1;
  sub_1F460(&v59, v58);
  v56 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  sub_1D728(v58, 0x656372756F736572, 0xEE006D754E766552, v56);

  swift_bridgeObjectRelease();
  return &_swiftEmptyDictionarySingleton;
}

id UniversalMetricsDictionary.init()()
{
  void *v0;
  objc_class *ObjectType;
  char *v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  double *v9;
  objc_super v11;

  ObjectType = (objc_class *)swift_getObjectType();
  v2 = v0;
  v3 = sub_157B30();
  v5 = v4;
  v7 = v6;
  v8 = objc_msgSend((id)objc_opt_self(ACAccountStore), "ams_sharedAccountStore");
  *(_QWORD *)&v2[OBJC_IVAR____TtC8ShelfKit26UniversalMetricsDictionary_accountStore] = v8;
  v9 = (double *)&v2[OBJC_IVAR____TtC8ShelfKit26UniversalMetricsDictionary_screenSize];
  *v9 = v3;
  *((_QWORD *)v9 + 1) = v5;
  *(_QWORD *)&v2[OBJC_IVAR____TtC8ShelfKit26UniversalMetricsDictionary_screenScale] = v7;

  v11.receiver = v2;
  v11.super_class = ObjectType;
  return objc_msgSendSuper2(&v11, "init");
}

void sub_157A9C(_QWORD *a1@<X8>)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = objc_msgSend((id)objc_opt_self(UIScreen), "mainScreen");
  objc_msgSend(v2, "bounds");
  v4 = v3;
  v6 = v5;
  objc_msgSend(v2, "scale");
  v8 = v7;

  *a1 = v4;
  a1[1] = v6;
  a1[2] = v8;
}

double sub_157B30()
{
  id v0;
  double v1;
  double v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  double v7;

  if (objc_msgSend((id)objc_opt_self(NSThread), "isMainThread"))
  {
    v0 = objc_msgSend((id)objc_opt_self(UIScreen), "mainScreen");
    objc_msgSend(v0, "bounds");
    v2 = v1;
    objc_msgSend(v0, "scale");

  }
  else
  {
    v3 = sub_327F8(0, (unint64_t *)&qword_3B8710, OS_dispatch_queue_ptr);
    v4 = (void *)static OS_dispatch_queue.main.getter(v3);
    v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BCBE8);
    OS_dispatch_queue.sync<A>(execute:)(&v7, sub_157A9C, 0, v5);

    return v7;
  }
  return v2;
}

uint64_t type metadata accessor for UniversalMetricsDictionary()
{
  return objc_opt_self(_TtC8ShelfKit26UniversalMetricsDictionary);
}

unint64_t static ChannelPageIntent.kind.getter()
{
  return 0xD000000000000011;
}

uint64_t ShowPageHeaderAndFooterShelvesIntent.personalizedHint.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 9);
}

uint64_t ShowPageHeaderAndFooterShelvesIntent.init(adamID:skipCache:personalizedHint:)@<X0>(uint64_t result@<X0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X8>)
{
  *(_QWORD *)a4 = result;
  *(_BYTE *)(a4 + 8) = a2;
  *(_BYTE *)(a4 + 9) = a3;
  return result;
}

void sub_157C94(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000011;
  a1[1] = 0x80000000002F84D0;
}

uint64_t sub_157CB4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1E18B4(*a1, *a2);
}

Swift::Int sub_157CC0()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7);
  v2 = 0xE900000000000065;
  v3 = 0x6863614370696B73;
  if (v1 != 1)
  {
    v3 = 0x4364696150736168;
    v2 = 0xEE00746E65746E6FLL;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 0x64496D616461;
  if (v1)
    v5 = v2;
  else
    v5 = 0xE600000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_157D6C(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0xE900000000000065;
  v3 = 0x6863614370696B73;
  if (*v1 != 1)
  {
    v3 = 0x4364696150736168;
    v2 = 0xEE00746E65746E6FLL;
  }
  if (*v1)
    v4 = v3;
  else
    v4 = 0x64496D616461;
  if (*v1)
    v5 = v2;
  else
    v5 = 0xE600000000000000;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_157DF4()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7);
  v2 = 0xE900000000000065;
  v3 = 0x6863614370696B73;
  if (v1 != 1)
  {
    v3 = 0x4364696150736168;
    v2 = 0xEE00746E65746E6FLL;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 0x64496D616461;
  if (v1)
    v5 = v2;
  else
    v5 = 0xE600000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

unint64_t sub_157E9C@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_158738(*a1);
  *a2 = result;
  return result;
}

void sub_157EC8(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE600000000000000;
  v4 = 0xE900000000000065;
  v5 = 0x6863614370696B73;
  if (v2 != 1)
  {
    v5 = 0x4364696150736168;
    v4 = 0xEE00746E65746E6FLL;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x64496D616461;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_157F34()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6863614370696B73;
  if (*v0 != 1)
    v1 = 0x4364696150736168;
  if (*v0)
    return v1;
  else
    return 0x64496D616461;
}

unint64_t sub_157F9C@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_158738(a1);
  *a2 = result;
  return result;
}

void sub_157FC0(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_157FCC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_15843C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_157FF4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_15843C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ChannelPageIntent.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  unsigned int v16;
  char v17;
  _BYTE v18[2];
  uint64_t v19;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BCBF0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v9 = *((unsigned __int8 *)v1 + 8);
  HIDWORD(v15) = *((unsigned __int8 *)v1 + 9);
  v16 = v9;
  v10 = a1[3];
  v11 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v10);
  v12 = sub_15843C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ChannelPageIntent.CodingKeys, &type metadata for ChannelPageIntent.CodingKeys, v12, v10, v11);
  v19 = v8;
  v18[1] = 0;
  sub_13E9C();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v19);
  if (!v2)
  {
    v13 = HIDWORD(v15);
    v18[0] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16, v18, v4);
    v17 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v13, &v17, v4);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t ChannelPageIntent.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v14;
  char v15;
  uint64_t v16;
  char v17;
  _BYTE v18[2];
  uint64_t v19;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BCC00);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  v11 = sub_15843C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ChannelPageIntent.CodingKeys, &type metadata for ChannelPageIntent.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v18[1] = 0;
    sub_14088();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v19, &type metadata for AdamID);
    v12 = v19;
    v18[0] = 1;
    v14 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v18, v5);
    v17 = 2;
    v15 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v17, v5);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *(_QWORD *)a2 = v12;
    *(_BYTE *)(a2 + 8) = v14;
    *(_BYTE *)(a2 + 9) = v15;
  }
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t sub_158314@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ChannelPageIntent.init(from:)(a1, a2);
}

uint64_t sub_158328(_QWORD *a1)
{
  return ChannelPageIntent.encode(to:)(a1);
}

uint64_t sub_15833C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_158780();
  return CustomJSValueConvertible<>.jsRepresentation(in:)(a1, a2, a3, v6);
}

uint64_t sub_158398@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_45E74(a1, a2, a3);
}

uint64_t _s8ShelfKit17ChannelPageIntentV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t result;
  _BOOL4 v7;
  _BOOL4 v8;

  if (*(_QWORD *)a1 != *(_QWORD *)a2)
    return 0;
  v2 = *(unsigned __int8 *)(a1 + 8);
  v3 = *(unsigned __int8 *)(a1 + 9);
  v4 = *(unsigned __int8 *)(a2 + 8);
  v5 = *(unsigned __int8 *)(a2 + 9);
  if (v2 == 2)
  {
    if (v4 != 2)
      return 0;
LABEL_7:
    if (v3 == 2)
    {
      if (v5 == 2)
        return 1;
    }
    else
    {
      v8 = (v3 & 1) == 0;
      if (v5 != 2 && ((v8 ^ v5) & 1) != 0)
        return 1;
    }
    return 0;
  }
  result = 0;
  v7 = (v2 & 1) == 0;
  if (v4 != 2 && ((v7 ^ v4) & 1) != 0)
    goto LABEL_7;
  return result;
}

unint64_t sub_15843C()
{
  unint64_t result;

  result = qword_3BCBF8;
  if (!qword_3BCBF8)
  {
    result = swift_getWitnessTable(&unk_2F877C);
    atomic_store(result, (unint64_t *)&qword_3BCBF8);
  }
  return result;
}

unint64_t sub_158484()
{
  unint64_t result;

  result = qword_3BCC08;
  if (!qword_3BCC08)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ChannelPageIntent);
    atomic_store(result, (unint64_t *)&qword_3BCC08);
  }
  return result;
}

uint64_t __swift_memcpy10_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_WORD *)(result + 8) = *((_WORD *)a2 + 4);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for ChannelPageIntent(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 10))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 >= 2)
    v4 = ((v3 + 2147483646) & 0x7FFFFFFF) - 1;
  else
    v4 = -2;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ChannelPageIntent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_WORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 10) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 10) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = a2 + 2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ChannelPageIntent()
{
  return &type metadata for ChannelPageIntent;
}

uint64_t storeEnumTagSinglePayload for ChannelPageIntent.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1585E0 + 4 * byte_2F84E5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_158614 + 4 * byte_2F84E0[v4]))();
}

uint64_t sub_158614(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_15861C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x158624);
  return result;
}

uint64_t sub_158630(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x158638);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_15863C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_158644(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ChannelPageIntent.CodingKeys()
{
  return &type metadata for ChannelPageIntent.CodingKeys;
}

unint64_t sub_158664()
{
  unint64_t result;

  result = qword_3BCC10;
  if (!qword_3BCC10)
  {
    result = swift_getWitnessTable(&unk_2F8754);
    atomic_store(result, (unint64_t *)&qword_3BCC10);
  }
  return result;
}

unint64_t sub_1586AC()
{
  unint64_t result;

  result = qword_3BCC18;
  if (!qword_3BCC18)
  {
    result = swift_getWitnessTable(&unk_2F868C);
    atomic_store(result, (unint64_t *)&qword_3BCC18);
  }
  return result;
}

unint64_t sub_1586F4()
{
  unint64_t result;

  result = qword_3BCC20;
  if (!qword_3BCC20)
  {
    result = swift_getWitnessTable(&unk_2F86B4);
    atomic_store(result, (unint64_t *)&qword_3BCC20);
  }
  return result;
}

unint64_t sub_158738(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_374690, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

unint64_t sub_158780()
{
  unint64_t result;

  result = qword_3BCC28;
  if (!qword_3BCC28)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ChannelPageIntent);
    atomic_store(result, (unint64_t *)&qword_3BCC28);
  }
  return result;
}

uint64_t sub_1587C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  void *v4;

  v0 = type metadata accessor for PresentedEpisodeUpsellBannersProvider(0);
  v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  v4 = &_swiftEmptySetSingleton;
  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3BCCE0);
  result = Published.init(initialValue:)(&v4, v2);
  qword_3BCC30 = v1;
  return result;
}

uint64_t static PresentedEpisodeUpsellBannersProvider.shared.getter()
{
  if (qword_3B0188 != -1)
    swift_once(&qword_3B0188, sub_1587C4);
  return swift_retain();
}

uint64_t sub_158878@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_2F87E0);
  v5 = swift_getKeyPath(&unk_2F8808);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(v5);
  result = swift_release(KeyPath);
  *a2 = v7;
  return result;
}

uint64_t sub_1588F4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_2F87E0);
  v5 = swift_getKeyPath(&unk_2F8808);
  v7 = v2;
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

uint64_t sub_15896C()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_2F87E0);
  v2 = swift_getKeyPath(&unk_2F8808);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(v2);
  swift_release(KeyPath);
  return v4;
}

uint64_t sub_1589E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_2F87E0);
  v4 = swift_getKeyPath(&unk_2F8808);
  v6 = a1;
  swift_retain(v1);
  return static Published.subscript.setter(&v6, v1, KeyPath, v4);
}

void (*sub_158A50(_QWORD *a1))(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t KeyPath;
  uint64_t v5;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  KeyPath = swift_getKeyPath(&unk_2F87E0);
  v3[4] = KeyPath;
  v5 = swift_getKeyPath(&unk_2F8808);
  v3[5] = v5;
  v3[6] = static Published.subscript.modify(v3, v1, KeyPath, v5);
  return sub_84118;
}

uint64_t sub_158AC8(_QWORD *a1)
{
  uint64_t v1;
  _BYTE v3[24];

  swift_beginAccess(*a1 + OBJC_IVAR____TtC8ShelfKit37PresentedEpisodeUpsellBannersProvider__episodeStoreTrackIdsForPresentedBanners, v3, 33, 0);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BCC40);
  Published.projectedValue.getter(v1);
  return swift_endAccess(v3);
}

uint64_t sub_158B2C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  _BYTE *v11;
  void (*v12)(_BYTE *, uint64_t, uint64_t, __n128);
  uint64_t v13;
  uint64_t v14;
  _BYTE v17[24];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BCC48);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v17[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = __chkstk_darwin(v8);
  v11 = &v17[-v10 - 8];
  v12 = *(void (**)(_BYTE *, uint64_t, uint64_t, __n128))(v5 + 16);
  v12(&v17[-v10 - 8], a1, v4, v9);
  v13 = *a2;
  ((void (*)(_BYTE *, _BYTE *, uint64_t))v12)(v7, v11, v4);
  swift_beginAccess(v13 + OBJC_IVAR____TtC8ShelfKit37PresentedEpisodeUpsellBannersProvider__episodeStoreTrackIdsForPresentedBanners, v17, 33, 0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BCC40);
  Published.projectedValue.setter(v7, v14);
  swift_endAccess(v17);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v11, v4);
}

uint64_t sub_158C3C()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  swift_beginAccess(v0 + OBJC_IVAR____TtC8ShelfKit37PresentedEpisodeUpsellBannersProvider__episodeStoreTrackIdsForPresentedBanners, v3, 33, 0);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BCC40);
  Published.projectedValue.getter(v1);
  return swift_endAccess(v3);
}

uint64_t sub_158C9C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE v11[24];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BCC48);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = &v11[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  (*(void (**)(_BYTE *, uint64_t, uint64_t, __n128))(v4 + 16))(v7, a1, v3, v5);
  swift_beginAccess(v1 + OBJC_IVAR____TtC8ShelfKit37PresentedEpisodeUpsellBannersProvider__episodeStoreTrackIdsForPresentedBanners, v11, 33, 0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BCC40);
  Published.projectedValue.setter(v7, v8);
  swift_endAccess(v11);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
}

void (*sub_158D70(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BCC48);
  v3[10] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[11] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[12] = malloc(v6);
  v3[13] = malloc(v6);
  v7 = malloc(v6);
  v8 = OBJC_IVAR____TtC8ShelfKit37PresentedEpisodeUpsellBannersProvider__episodeStoreTrackIdsForPresentedBanners;
  v3[14] = v7;
  v3[15] = v8;
  swift_beginAccess(v1 + v8, v3, 33, 0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BCC40);
  v3[16] = v9;
  Published.projectedValue.getter(v9);
  swift_endAccess(v3);
  return sub_84474;
}

uint64_t PresentedEpisodeUpsellBannersProvider.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC8ShelfKit37PresentedEpisodeUpsellBannersProvider__episodeStoreTrackIdsForPresentedBanners;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BCC40);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t PresentedEpisodeUpsellBannersProvider.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC8ShelfKit37PresentedEpisodeUpsellBannersProvider__episodeStoreTrackIdsForPresentedBanners;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BCC40);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_158ED4()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_2F89A8);
  v2 = swift_getKeyPath(&unk_2F89D0);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

uint64_t EpisodeUpsellBannerProvider.__allocating_init(graph:uuid:presentationType:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v9;

  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v9 = sub_15AD18(a1, a2, a3, a4);
  swift_release(a1);
  return v9;
}

uint64_t EpisodeUpsellBannerProvider.init(graph:uuid:presentationType:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5;

  v5 = sub_15AD18(a1, a2, a3, a4);
  swift_release(a1);
  return v5;
}

uint64_t EpisodeUpsellBannerProvider.__allocating_init(libraryActionController:storeDataProvider:episodePlayStateController:episodeAdamId:presentationType:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v11;

  swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  v11 = sub_15AF08(a1, a2, a3, a4, a5);
  swift_release(a3);
  return v11;
}

uint64_t EpisodeUpsellBannerProvider.init(libraryActionController:storeDataProvider:episodePlayStateController:episodeAdamId:presentationType:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6;

  v6 = sub_15AF08(a1, a2, a3, a4, a5);
  swift_release(a3);
  return v6;
}

uint64_t sub_15908C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  _QWORD *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[31];

  v3 = type metadata accessor for EpisodePlayState(0);
  __chkstk_darwin(v3);
  v5 = &v14[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  a2 += 16;
  swift_beginAccess(a2, &v14[8], 0, 0);
  result = swift_weakLoadStrong(a2);
  if (result)
  {
    v7 = result;
    KeyPath = swift_getKeyPath(&unk_2F89A8);
    v9 = swift_getKeyPath(&unk_2F89D0);
    static Published.subscript.getter(&v14[7], v7, KeyPath, v9);
    swift_release(KeyPath);
    swift_release(v9);
    if (v14[7] == 1)
    {
      return swift_release(v7);
    }
    else
    {
      v10 = dispatch thunk of EpisodeStateMachine.currentState.getter(v5);
      v11 = EpisodePlayState.isEpisodePlaying.getter(v10);
      sub_36668((uint64_t)v5);
      v12 = swift_getKeyPath(&unk_2F89A8);
      v13 = swift_getKeyPath(&unk_2F89D0);
      v14[7] = v11 & 1;
      return static Published.subscript.setter(&v14[7], v7, v12, v13);
    }
  }
  return result;
}

_QWORD *EpisodeUpsellBannerProvider.deinit()
{
  _QWORD *v0;
  _QWORD *v1;
  char *v2;
  uint64_t v3;

  v1 = v0;
  dispatch thunk of EpisodeStateMachine.removeStateTransitionActions(for:)(v0);
  __swift_destroy_boxed_opaque_existential_1(v0 + 3);
  sub_15B080((uint64_t)(v0 + 8));
  swift_release(v0[13]);
  swift_release(v0[14]);
  v2 = (char *)v0 + OBJC_IVAR____TtC8ShelfKit27EpisodeUpsellBannerProvider__hasStartedPlaying;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B23B8);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  return v1;
}

uint64_t EpisodeUpsellBannerProvider.__deallocating_deinit()
{
  _QWORD *v0;
  _QWORD *v1;
  char *v2;
  uint64_t v3;

  v1 = v0;
  dispatch thunk of EpisodeStateMachine.removeStateTransitionActions(for:)(v0);
  __swift_destroy_boxed_opaque_existential_1(v0 + 3);
  sub_15B080((uint64_t)(v0 + 8));
  swift_release(v0[13]);
  swift_release(v0[14]);
  v2 = (char *)v0 + OBJC_IVAR____TtC8ShelfKit27EpisodeUpsellBannerProvider__hasStartedPlaying;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B23B8);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  return swift_deallocClassInstance(v1, *(unsigned int *)(*v1 + 48), *(unsigned __int16 *)(*v1 + 52));
}

uint64_t sub_1592CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[2];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BCC60);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_159760(a1, a2, 0, 0);
  v15[1] = v8;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BCC68);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BCC70);
  v11 = sub_32914(&qword_3BCC78, &qword_3BCC68, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.map<A>(_:)(sub_159410, 0, v9, v10, v11);
  swift_release(v8);
  v12 = sub_32914(&qword_3BCC80, &qword_3BCC60, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v13 = Publisher.eraseToAnyPublisher()(v4, v12);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v13;
}

uint64_t sub_159410@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[40];

  v3 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v4 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8ShelfKit5Shelf_items);
    if (*(_QWORD *)(v4 + 16)
      && (sub_150C8(v4 + 32, (uint64_t)v8),
          v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0948),
          v6 = type metadata accessor for EpisodeUpsellBannerModel(0),
          result = swift_dynamicCast(&v7, v8, v5, v6, 6),
          (result & 1) != 0))
    {
      v3 = v7;
    }
    else
    {
      v3 = 0;
    }
  }
  *a2 = v3;
  return result;
}

void sub_1594A4(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  char v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v27 = a6;
  v26 = a5;
  v28 = a3;
  v7 = a2 | a4;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8660);
  __chkstk_darwin(v8);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BA8C8);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BCC88);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((v7 & 1) != 0)
  {
    v23 = type metadata accessor for ModernShelf(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v10, 1, 1, v23);
    Just.init(_:)(v10, v8);
    v24 = sub_32914(&qword_3BA8D0, &qword_3BA8C8, (uint64_t)&protocol conformance descriptor for Just<A>);
    Publisher.eraseToAnyPublisher()(v11, v24);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
  else if ((v28 | a1) < 0)
  {
    __break(1u);
  }
  else
  {
    v19 = sub_159760(a1, v28, v26, v27);
    v29 = v19;
    v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BCC68);
    v21 = sub_32914(&qword_3BCC78, &qword_3BCC68, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
    Publisher.map<A>(_:)(sub_1596EC, 0, v20, v8, v21);
    swift_release(v19);
    v22 = sub_32914(&qword_3BCC90, &qword_3BCC88, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
    Publisher.eraseToAnyPublisher()(v15, v22);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  }
}

void sub_1596EC(id *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  id v4;

  if (*a1)
  {
    v4 = *a1;
    Shelf.mapToModernShelf()(a2);

  }
  else
  {
    v3 = type metadata accessor for ModernShelf(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(a2, 1, 1, v3);
  }
}

uint64_t sub_159760(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  id v25;
  NSString v26;
  unsigned __int8 v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(char *, uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  id v105;
  char *v106;
  char *v107;
  _QWORD v108[4];

  v5 = v4;
  v104 = a4;
  v102 = a3;
  v106 = (char *)a2;
  v92 = a1;
  v81 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BCED0);
  v80 = *(_QWORD *)(v81 - 8);
  __chkstk_darwin(v81);
  v7 = (char *)&v80 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B24C8);
  v83 = *(_QWORD *)(v84 - 8);
  __chkstk_darwin(v84);
  v9 = (char *)&v80 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BCED8);
  v86 = *(_QWORD *)(v87 - 8);
  __chkstk_darwin(v87);
  v85 = (char *)&v80 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BCEE0);
  v90 = *(_QWORD *)(v93 - 8);
  __chkstk_darwin(v93);
  v88 = (char *)&v80 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BCEE8);
  v99 = *(_QWORD *)(v12 - 8);
  v100 = v12;
  __chkstk_darwin(v12);
  v95 = (char *)&v80 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v103 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BCEF0);
  v101 = *(_QWORD *)(v103 - 8);
  __chkstk_darwin(v103);
  v98 = (char *)&v80 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BCC48);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v80 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BCEF8);
  v96 = *(_QWORD *)(v19 - 8);
  v97 = v19;
  __chkstk_darwin(v19);
  v94 = (char *)&v80 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BCF00);
  v91 = *(_QWORD *)(v89 - 8);
  __chkstk_darwin(v89);
  v107 = (char *)&v80 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v24 = (char *)&v80 - v23;
  v25 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "_applePodcastsFoundationSharedUserDefaults");
  v26 = String._bridgeToObjectiveC()();
  v105 = v25;
  v27 = objc_msgSend(v25, "BOOLForKey:", v26);

  if ((v27 & 1) != 0)
    goto LABEL_3;
  v28 = v5 + 3;
  v29 = v5;
  v31 = v5[6];
  v30 = v5[7];
  __swift_project_boxed_opaque_existential_1(v28, v31);
  v32 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v30 + 608);
  v33 = v30;
  v5 = v29;
  if ((v32(v106, 3, v31, v33) & 1) != 0)
  {
LABEL_3:
    v81 = v16;
    v82 = v5;
    v34 = (uint64_t)v106;
    v35 = sub_15B3EC((uint64_t)v106);
    v108[0] = v35;
    v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2120);
    v37 = sub_32914(&qword_3B2128, &qword_3B2120, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
    Publisher<>.removeDuplicates()(v36, v37, &protocol witness table for Bool);
    swift_release(v35);
    v38 = sub_15B6C8(v34);
    v108[0] = v38;
    v39 = v107;
    Publisher<>.removeDuplicates()(v36, v37, &protocol witness table for Bool);
    swift_release(v38);
    if (qword_3B0188 != -1)
      swift_once(&qword_3B0188, sub_1587C4);
    swift_beginAccess(qword_3BCC30+ OBJC_IVAR____TtC8ShelfKit37PresentedEpisodeUpsellBannersProvider__episodeStoreTrackIdsForPresentedBanners, v108, 33, 0);
    v40 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BCC40);
    Published.projectedValue.getter(v40);
    swift_endAccess(v108);
    v41 = sub_32914(&qword_3BCF18, &qword_3BCC48, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
    v42 = sub_32914(&qword_3BCF20, (uint64_t *)&unk_3BCCE0, (uint64_t)&protocol conformance descriptor for Set<A>);
    v43 = v94;
    Publisher<>.removeDuplicates()(v15, v41, v42);
    (*(void (**)(char *, uint64_t))(v81 + 8))(v18, v15);
    v44 = v82;
    swift_beginAccess((char *)v82 + OBJC_IVAR____TtC8ShelfKit27EpisodeUpsellBannerProvider__hasStartedPlaying, v108, 33, 0);
    v45 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B23B8);
    Published.projectedValue.getter(v45);
    swift_endAccess(v108);
    v46 = sub_32914(&qword_3BCF28, &qword_3B24C8, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
    v47 = v85;
    v48 = v84;
    Publisher<>.removeDuplicates()(v84, v46, &protocol witness table for Bool);
    (*(void (**)(char *, uint64_t))(v83 + 8))(v9, v48);
    v49 = sub_32914(&qword_3BCF30, &qword_3BCED8, (uint64_t)&protocol conformance descriptor for Publishers.RemoveDuplicates<A>);
    v50 = sub_32914(&qword_3BCF38, &qword_3BCF00, (uint64_t)&protocol conformance descriptor for Publishers.RemoveDuplicates<A>);
    v79 = sub_32914(&qword_3BCF40, &qword_3BCEF8, (uint64_t)&protocol conformance descriptor for Publishers.RemoveDuplicates<A>);
    v51 = v88;
    v52 = v24;
    v53 = v39;
    v54 = v87;
    v106 = v24;
    v55 = v89;
    v56 = v97;
    Publisher.combineLatest<A, B, C>(_:_:_:)(v52, v53, v43, v87, v89, v89, v97, v49, v50, v50, v79);
    (*(void (**)(char *, uint64_t))(v86 + 8))(v47, v54);
    v57 = (_QWORD *)swift_allocObject(&unk_3834F0, 48, 7);
    v58 = v102;
    v57[2] = v44;
    v57[3] = v58;
    v59 = v104;
    v60 = v92;
    v57[4] = v104;
    v57[5] = v60;
    v61 = swift_allocObject(&unk_383518, 32, 7);
    *(_QWORD *)(v61 + 16) = sub_15B91C;
    *(_QWORD *)(v61 + 24) = v57;
    swift_retain();
    sub_76C34(v58, v59);
    v62 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BCC68);
    v63 = sub_32914(&qword_3BCF48, &qword_3BCEE0, (uint64_t)&protocol conformance descriptor for Publishers.CombineLatest4<A, B, C, D>);
    v64 = v95;
    v65 = v93;
    Publisher.map<A>(_:)(sub_15B94C, v61, v93, v62, v63);
    swift_release(v61);
    (*(void (**)(char *, uint64_t))(v90 + 8))(v51, v65);
    v66 = sub_32914(&qword_3BCF50, &qword_3BCEE8, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
    v67 = sub_32914(&qword_3BCC78, &qword_3BCC68, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
    v68 = v98;
    v69 = v100;
    Publisher<>.switchToLatest()(v100, v66, v67);
    (*(void (**)(char *, uint64_t))(v99 + 8))(v64, v69);
    v70 = sub_32914(&qword_3BCF58, &qword_3BCEF0, (uint64_t)&protocol conformance descriptor for Publishers.SwitchToLatest<A, B>);
    v71 = v103;
    v72 = Publisher.bufferedMulticast()(v103, v70);
    (*(void (**)(char *, uint64_t))(v101 + 8))(v68, v71);
    v108[0] = v72;
    v73 = Publisher.eraseToAnyPublisher()(v62, v67);
    swift_release(v72);

    (*(void (**)(char *, uint64_t))(v96 + 8))(v43, v56);
    v74 = *(void (**)(char *, uint64_t))(v91 + 8);
    v74(v107, v55);
    v74(v106, v55);
  }
  else
  {
    v108[0] = 0;
    v75 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BCF08);
    Just.init(_:)(v108, v75);
    v76 = sub_32914(&qword_3BCF10, &qword_3BCED0, (uint64_t)&protocol conformance descriptor for Just<A>);
    v77 = v81;
    v73 = Publisher.eraseToAnyPublisher()(v81, v76);

    (*(void (**)(char *, uint64_t))(v80 + 8))(v7, v77);
  }
  return v73;
}

uint64_t sub_15A04C(char a1, char a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  _QWORD v58[3];
  uint64_t v59;
  uint64_t v60;

  v51 = a4;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BCF60);
  v53 = *(_QWORD *)(v15 - 8);
  v54 = v15;
  __chkstk_darwin(v15);
  v52 = (char *)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BCED0);
  v55 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v19 = (char *)&v50 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for ActionMetrics(0);
  __chkstk_darwin(v20);
  v22 = (char *)&v50 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 1) == 0 || (a2 & 1) == 0 || (a3 & 1) == 0)
  {
    v58[0] = 0;
    v45 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BCF08);
    Just.init(_:)(v58, v45);
    v46 = sub_32914(&qword_3BCF10, &qword_3BCED0, (uint64_t)&protocol conformance descriptor for Just<A>);
    v44 = Publisher.eraseToAnyPublisher()(v17, v46);
LABEL_8:
    (*(void (**)(char *, uint64_t))(v55 + 8))(v19, v17);
    return v44;
  }
  v23 = swift_allocObject(&unk_383540, 24, 7);
  swift_weakInit(v23 + 16);
  v24 = (_QWORD *)swift_allocObject(&unk_383568, 48, 7);
  v24[2] = a6;
  v24[3] = a7;
  v24[4] = v23;
  v24[5] = a8;
  sub_76C34(a6, a7);
  v25 = swift_retain();
  static ActionMetrics.notInstrumented.getter(v25);
  v26 = type metadata accessor for ClosureAction(0);
  swift_allocObject(v26, *(unsigned int *)(v26 + 48), *(unsigned __int16 *)(v26 + 52));
  v27 = sub_213C1C(0, 0, 32, (uint64_t)v22, (uint64_t)sub_15B9E0, (uint64_t)v24);
  swift_release(v23);
  swift_release(v24);
  sub_15B9EC(a5 + 64, (uint64_t)&v56);
  if (!v57)
  {
    sub_15B080((uint64_t)&v56);
    v58[0] = 0;
    v47 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BCF08);
    Just.init(_:)(v58, v47);
    v48 = sub_32914(&qword_3BCF10, &qword_3BCED0, (uint64_t)&protocol conformance descriptor for Just<A>);
    v44 = Publisher.eraseToAnyPublisher()(v17, v48);
    swift_release(v27);
    goto LABEL_8;
  }
  sub_F4D8(&v56, (uint64_t)v58);
  v28 = v59;
  v29 = v60;
  __swift_project_boxed_opaque_existential_1(v58, v59);
  v30 = AdamID.init(rawValue:)(a8 & ~(a8 >> 63));
  v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v29 + 80))(v30, v28, v29);
  v32 = Promise.publisher.getter(v31);
  swift_release(v31);
  *(_QWORD *)&v56 = v32;
  v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2928);
  v34 = sub_32914(&qword_3B2930, &qword_3B2928, (uint64_t)&protocol conformance descriptor for Future<A, B>);
  v35 = Publisher.makeOptional.getter(v33, v34);
  swift_release(v32);
  *(_QWORD *)&v56 = v35;
  v36 = (_QWORD *)swift_allocObject(&unk_383590, 48, 7);
  v36[2] = v27;
  v36[3] = a5;
  v37 = v51;
  v36[4] = a8;
  v36[5] = v37;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BCC68);
  v39 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BCF08);
  v40 = sub_32914(&qword_3BCC78, &qword_3BCC68, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v41 = v52;
  Publisher.map<A>(_:)(sub_15BA68, v36, v38, v39, v40);
  swift_release(v36);
  swift_release(v56);
  v42 = sub_32914(&qword_3BCF68, &qword_3BCF60, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v43 = v54;
  v44 = Publisher.eraseToAnyPublisher()(v54, v42);
  swift_release(v27);
  (*(void (**)(char *, uint64_t))(v53 + 8))(v41, v43);
  __swift_destroy_boxed_opaque_existential_1(v58);
  return v44;
}

uint64_t sub_15A4A0(void (*a1)(void), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[24];

  v5 = a3 + 16;
  if (a1)
    a1();
  swift_beginAccess(v5, v13, 0, 0);
  result = swift_weakLoadStrong(v5);
  if (result)
  {
    v7 = result;
    sub_150C8(result + 24, (uint64_t)v10);
    swift_release(v7);
    v8 = v11;
    v9 = v12;
    __swift_project_boxed_opaque_existential_1(v10, v11);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 616))(a4, v8, v9);
    return __swift_destroy_boxed_opaque_existential_1(v10);
  }
  return result;
}

void sub_15A544(void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  char *v7;
  uint64_t v8;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t KeyPath;
  uint64_t v23;
  void (*v24)(_BYTE *, _QWORD);
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[3];
  _BYTE v28[40];

  v7 = (char *)*a1;
  if (!*a1)
    goto LABEL_14;
  v8 = *(_QWORD *)&v7[OBJC_IVAR____TtC8ShelfKit5Shelf_items];
  if (!*(_QWORD *)(v8 + 16))
  {
LABEL_8:
    v7 = 0;
    goto LABEL_14;
  }
  sub_150C8(v8 + 32, (uint64_t)v28);
  v13 = v7;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0948);
  v15 = type metadata accessor for EpisodeUpsellBannerModel(0);
  if ((swift_dynamicCast(v27, v28, v14, v15, 6) & 1) == 0)
  {
LABEL_7:

    goto LABEL_8;
  }
  v16 = v27[0];
  v17 = (uint64_t *)(v27[0] + OBJC_IVAR____TtC8ShelfKit24EpisodeUpsellBannerModel_dismissBannerAction);
  swift_beginAccess(v27[0] + OBJC_IVAR____TtC8ShelfKit24EpisodeUpsellBannerModel_dismissBannerAction, v27, 1, 0);
  v18 = *v17;
  *v17 = a2;
  swift_release(v18);
  if (!*(_BYTE *)(a3 + 16))
  {
    v20 = qword_3B0188;
    swift_retain();
    if (v20 != -1)
      swift_once(&qword_3B0188, sub_1587C4);
    v21 = qword_3BCC30;
    KeyPath = swift_getKeyPath(&unk_2F87E0);
    v23 = swift_getKeyPath(&unk_2F8808);
    v24 = (void (*)(_BYTE *, _QWORD))static Published.subscript.modify(v28, v21, KeyPath, v23);
    sub_9C298(&v26, a4);
    v24(v28, 0);
    swift_release(v16);
    swift_release(KeyPath);
    v25 = v23;
    goto LABEL_13;
  }
  if (*(_BYTE *)(a3 + 16) != 1)
  {
    swift_retain();
    v25 = v16;
LABEL_13:
    swift_release(v25);
    goto LABEL_14;
  }
  v19 = sub_1F7840(a4, a5);
  swift_retain();
  swift_release(v16);
  if (v19)
    goto LABEL_7;
LABEL_14:
  *a6 = v7;
}

id sub_15A730@<X0>(void *a1@<X0>, BOOL *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  id result;
  double v12;
  double v13;
  void (*v14)(char *, uint64_t);
  BOOL v15;
  uint64_t v16;

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v16 - v9;
  result = objc_msgSend(a1, "subscribed");
  if ((_DWORD)result)
  {
    result = objc_msgSend(a1, "lastDismissedEpisodeUpsellBannerDate");
    if (v12 <= 0.0)
    {
      v15 = 1;
    }
    else
    {
      Date.init()(result);
      Date.init(timeIntervalSinceReferenceDate:)(objc_msgSend(a1, "lastDismissedEpisodeUpsellBannerDate"));
      v13 = Date.timeIntervalSince(_:)(v8);
      v14 = *(void (**)(char *, uint64_t))(v5 + 8);
      v14(v8, v4);
      result = (id)((uint64_t (*)(char *, uint64_t))v14)(v10, v4);
      v15 = v13 > 7776000.0;
    }
  }
  else
  {
    v15 = 0;
  }
  *a2 = v15;
  return result;
}

void sub_15A864(void *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  id v4;
  void *v5;
  id v6;
  void *v7;
  id v8;

  v4 = objc_msgSend(a1, "podcastForStoreId:", a2);
  if (v4)
  {
    v5 = v4;
    v6 = objc_msgSend(v4, "channel");
    if (v6)
    {
      v7 = v6;
      v8 = objc_msgSend(v6, "storeId");

    }
    else
    {
      v8 = 0;
    }

  }
  else
  {
    v8 = 0;
  }
  *a3 = v8;
}

uint64_t sub_15A8F0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;

  v28 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BCF90);
  v26 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BCF98);
  v27 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *a1;
  v30 = 0;
  v31 = 0xE000000000000000;
  _StringGuts.grow(_:)(31);
  swift_bridgeObjectRelease();
  v30 = 0xD00000000000001DLL;
  v31 = 0x80000000003112E0;
  v29 = v9;
  v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int64, &protocol witness table for Int64);
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v24 = v31;
  v25 = v30;
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(kMTChannelEntityName);
  v13 = v12;
  v14 = objc_msgSend((id)objc_opt_self(MTChannel), "predicateForChannelWithStoreId:", v9);
  v15 = objc_msgSend((id)objc_opt_self(MTDB), "sharedInstance");
  v16 = objc_msgSend(v15, "privateQueueContext");

  v17 = sub_327F8(0, (unint64_t *)&qword_3B8710, OS_dispatch_queue_ptr);
  v18 = static OS_dispatch_queue.main.getter(v17);
  v19 = sub_327F8(0, &qword_3BCA90, MTChannel_ptr);
  FetchedResultsSingleItemPublisher.init(identifier:entityName:predicate:managedObjectContext:receiveOn:transform:updateRequiredComparator:)(v25, v24, v11, v13, v14, v16, v18, sub_15ABD8, 0, sub_15AC08, 0, &type metadata for Bool, v19);
  v20 = sub_32914(&qword_3BCFA0, &qword_3BCF90, (uint64_t)&protocol conformance descriptor for FetchedResultsSingleItemPublisher<A, B>);
  Publisher.map<A>(_:)(sub_15AC1C, 0, v3, &type metadata for Bool, v20);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v5, v3);
  v21 = sub_32914(&qword_3BCFA8, &qword_3BCF98, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v22 = Publisher.eraseToAnyPublisher()(v6, v21);
  result = (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v8, v6);
  *v28 = v22;
  return result;
}

id sub_15ABD8@<X0>(void *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(a1, "subscriptionActive");
  *a2 = result ^ 1;
  return result;
}

uint64_t sub_15AC08(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return (*a1 ^ *a2) & 1;
}

_BYTE *sub_15AC1C@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *result & 1;
  return result;
}

uint64_t sub_15AC2C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_2F89A8);
  v5 = swift_getKeyPath(&unk_2F89D0);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(KeyPath);
  result = swift_release(v5);
  *a2 = v7;
  return result;
}

uint64_t sub_15ACA8(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  char v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_2F89A8);
  v5 = swift_getKeyPath(&unk_2F89D0);
  v7 = v2;
  swift_retain(v3);
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

uint64_t sub_15AD18(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v22;
  __int128 v23[2];

  v5 = v4;
  v10 = type metadata accessor for EpisodePlayState(0);
  __chkstk_darwin(v10);
  v12 = (uint64_t *)((char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BC3F0);
  v14 = type metadata accessor for BaseObjectGraph(0);
  inject<A, B>(_:from:)(v23, v13, a1, v13, v14);
  sub_F4D8(v23, v5 + 24);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BE9F0);
  inject<A, B>(_:from:)(v23, v15, a1, v15, v14);
  sub_15BAA8((uint64_t)v23, v5 + 64);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B23C0);
  inject<A, B>(_:from:)(v23, v16, a1, v16, v14);
  v17 = *(_QWORD *)&v23[0];
  *(_QWORD *)(v5 + 104) = *(_QWORD *)&v23[0];
  *(_BYTE *)(v5 + 16) = a4;
  swift_retain();
  v18 = EpisodeStateController.stateMachine(for:)(a2, a3);
  swift_release(v17);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v5 + 112) = v18;
  v19 = dispatch thunk of EpisodeStateMachine.currentState.getter(v12);
  LOBYTE(v18) = EpisodePlayState.isEpisodePlaying.getter(v19);
  sub_36668((uint64_t)v12);
  swift_beginAccess(v5 + OBJC_IVAR____TtC8ShelfKit27EpisodeUpsellBannerProvider__hasStartedPlaying, v23, 33, 0);
  HIBYTE(v22) = v18 & 1;
  Published.init(initialValue:)((char *)&v22 + 7, &type metadata for Bool);
  swift_endAccess(v23);
  v20 = swift_allocObject(&unk_383540, 24, 7);
  swift_weakInit(v20 + 16);
  dispatch thunk of EpisodeStateMachine.addStateTransitionObserver(_:action:)(v5, sub_15BAA0, v20);
  swift_release(v20);
  return v5;
}

uint64_t sub_15AF08(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  char v16;
  uint64_t v17;
  uint64_t v19;
  _BYTE v20[24];

  v6 = v5;
  v12 = type metadata accessor for EpisodePlayState(0);
  __chkstk_darwin(v12);
  v14 = &v20[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_150C8((uint64_t)a1, v6 + 24);
  sub_15B9EC(a2, v6 + 64);
  *(_QWORD *)(v6 + 104) = a3;
  *(_BYTE *)(v6 + 16) = a5;
  swift_retain();
  *(_QWORD *)(v6 + 112) = EpisodeStateController.stateMachine(for:)(a4);
  v15 = dispatch thunk of EpisodeStateMachine.currentState.getter(v14);
  v16 = EpisodePlayState.isEpisodePlaying.getter(v15);
  sub_36668((uint64_t)v14);
  swift_beginAccess(v6 + OBJC_IVAR____TtC8ShelfKit27EpisodeUpsellBannerProvider__hasStartedPlaying, v20, 33, 0);
  HIBYTE(v19) = v16 & 1;
  Published.init(initialValue:)((char *)&v19 + 7, &type metadata for Bool);
  swift_endAccess(v20);
  v17 = swift_allocObject(&unk_383540, 24, 7);
  swift_weakInit(v17 + 16);
  dispatch thunk of EpisodeStateMachine.addStateTransitionObserver(_:action:)(v6, sub_15BAA0, v17);
  swift_release(v17);
  sub_15B080(a2);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v6;
}

uint64_t sub_15B080(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BCC50);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_15B0C4()
{
  unint64_t result;

  result = qword_3BCC98;
  if (!qword_3BCC98)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for EpisodeUpsellBannerProvider.PresentationType);
    atomic_store(result, (unint64_t *)&qword_3BCC98);
  }
  return result;
}

uint64_t sub_15B110()
{
  return type metadata accessor for PresentedEpisodeUpsellBannersProvider(0);
}

uint64_t type metadata accessor for PresentedEpisodeUpsellBannersProvider(uint64_t a1)
{
  return sub_1F9D4(a1, (uint64_t *)&unk_3BCCC8, (uint64_t)&nominal type descriptor for PresentedEpisodeUpsellBannersProvider);
}

void sub_15B12C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  sub_15B1D4(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(v2 - 8) + 64;
    swift_updateClassMetadata2(a1, 256, 1, &v4, a1 + 80);
  }
}

uint64_t method lookup function for PresentedEpisodeUpsellBannersProvider(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for PresentedEpisodeUpsellBannersProvider);
}

uint64_t dispatch thunk of PresentedEpisodeUpsellBannersProvider.episodeStoreTrackIdsForPresentedBanners.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 88))();
}

uint64_t dispatch thunk of PresentedEpisodeUpsellBannersProvider.episodeStoreTrackIdsForPresentedBanners.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of PresentedEpisodeUpsellBannersProvider.episodeStoreTrackIdsForPresentedBanners.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of PresentedEpisodeUpsellBannersProvider.$episodeStoreTrackIdsForPresentedBanners.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

void sub_15B1D4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_3BCCD8)
  {
    v2 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_3BCCE0);
    v3 = type metadata accessor for Published(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_3BCCD8);
  }
}

uint64_t sub_15B22C()
{
  return type metadata accessor for EpisodeUpsellBannerProvider(0);
}

uint64_t type metadata accessor for EpisodeUpsellBannerProvider(uint64_t a1)
{
  return sub_1F9D4(a1, qword_3BCDB8, (uint64_t)&nominal type descriptor for EpisodeUpsellBannerProvider);
}

void sub_15B248(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[6];

  v4[0] = &unk_2F8940;
  v4[1] = &unk_2F8958;
  v4[2] = &unk_2F8970;
  v4[3] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[4] = (char *)&value witness table for Builtin.NativeObject + 64;
  sub_36558();
  if (v3 <= 0x3F)
  {
    v4[5] = *(_QWORD *)(v2 - 8) + 64;
    swift_updateClassMetadata2(a1, 256, 6, v4, a1 + 80);
  }
}

uint64_t method lookup function for EpisodeUpsellBannerProvider(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for EpisodeUpsellBannerProvider);
}

uint64_t dispatch thunk of EpisodeUpsellBannerProvider.__allocating_init(libraryActionController:storeDataProvider:episodePlayStateController:episodeAdamId:presentationType:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 184))();
}

uint64_t dispatch thunk of EpisodeUpsellBannerProvider.episodeUpsellBannerModelPublisher(episodeStoreTrackId:podcastStoreId:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of EpisodeUpsellBannerProvider.episodeUpsellBannerShelfPublisher(episodeAdamID:showAdamID:dismissalCompletion:)(uint64_t a1, char a2, uint64_t a3, char a4)
{
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v4 + 208))(a1, a2 & 1, a3, a4 & 1);
}

uint64_t storeEnumTagSinglePayload for EpisodeUpsellBannerProvider.PresentationType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_15B364 + 4 * byte_2F87D5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_15B398 + 4 * byte_2F87D0[v4]))();
}

uint64_t sub_15B398(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_15B3A0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x15B3A8);
  return result;
}

uint64_t sub_15B3B4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x15B3BCLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_15B3C0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_15B3C8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for EpisodeUpsellBannerProvider.PresentationType()
{
  return &type metadata for EpisodeUpsellBannerProvider.PresentationType;
}

uint64_t sub_15B3EC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  Swift::String v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BCFB0);
  v25 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BCFB8);
  v26 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = 0;
  v29 = 0xE000000000000000;
  _StringGuts.grow(_:)(31);
  swift_bridgeObjectRelease();
  v28 = 0xD00000000000001DLL;
  v29 = 0x8000000000311300;
  v27 = a1;
  v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int64, &protocol witness table for Int64);
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v23 = v29;
  v24 = v28;
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(kMTPodcastEntityName);
  v11 = v10;
  v12 = objc_msgSend((id)objc_opt_self(MTPodcast), "predicateForPodcastStoreId:", a1);
  v13 = objc_msgSend((id)objc_opt_self(MTDB), "sharedInstance");
  v14 = objc_msgSend(v13, "privateQueueContext");

  v15 = sub_327F8(0, (unint64_t *)&qword_3B8710, OS_dispatch_queue_ptr);
  v16 = static OS_dispatch_queue.main.getter(v15);
  v17 = sub_327F8(0, (unint64_t *)&qword_3BF7D0, MTPodcast_ptr);
  FetchedResultsSingleItemPublisher.init(identifier:entityName:predicate:managedObjectContext:receiveOn:transform:updateRequiredComparator:)(v24, v23, v9, v11, v12, v14, v16, sub_15A730, 0, sub_15BAF0, 0, &type metadata for Bool, v17);
  v18 = sub_32914(&qword_3BCFC0, &qword_3BCFB0, (uint64_t)&protocol conformance descriptor for FetchedResultsSingleItemPublisher<A, B>);
  Publisher.map<A>(_:)(sub_15BAF4, 0, v2, &type metadata for Bool, v18);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v4, v2);
  v19 = sub_32914(&qword_3BCFC8, &qword_3BCFB8, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v20 = Publisher.eraseToAnyPublisher()(v5, v19);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v7, v5);
  return v20;
}

uint64_t sub_15B6C8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  id v5;
  id v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BCF70);
  v20[0] = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = objc_msgSend((id)objc_opt_self(MTDB), "sharedInstance");
  v6 = objc_msgSend(v5, "privateQueueContext");

  v7 = swift_allocObject(&unk_3835B8, 32, 7);
  *(_QWORD *)(v7 + 16) = v6;
  *(_QWORD *)(v7 + 24) = a1;
  sub_327F8(0, (unint64_t *)&qword_3B8710, OS_dispatch_queue_ptr);
  v8 = v6;
  v9 = (void *)static OS_dispatch_queue.main.getter(v8);
  v10 = NSManagedObjectContext.performAndPublish<A>(queue:_:)(v9, sub_15BA98, v7, &type metadata for Int64);
  swift_release(v7);

  v20[1] = v10;
  v12 = static Subscribers.Demand.unlimited.getter(v11);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BCF78);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2120);
  v15 = sub_32914(&qword_3BCF80, &qword_3BCF78, (uint64_t)&protocol conformance descriptor for Future<A, B>);
  v16 = sub_32914(&qword_3B2128, &qword_3B2120, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher<>.flatMap<A>(maxPublishers:_:)(v12, sub_15A8F0, 0, v13, v14, v15, v16);
  swift_release(v10);
  v17 = sub_32914(&qword_3BCF88, &qword_3BCF70, (uint64_t)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
  v18 = Publisher.eraseToAnyPublisher()(v2, v17);

  (*(void (**)(char *, uint64_t))(v20[0] + 8))(v4, v2);
  return v18;
}

uint64_t sub_15B8E8()
{
  _QWORD *v0;

  swift_release(v0[2]);
  if (v0[3])
    swift_release(v0[4]);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_15B91C(char a1, char a2, char a3, uint64_t a4)
{
  uint64_t *v4;

  return sub_15A04C(a1, a2, a3, a4, v4[2], v4[3], v4[4], v4[5]);
}

uint64_t sub_15B928()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_15B94C@<X0>(unsigned __int8 *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(v2 + 16))(*a1, a1[1], a1[2], *((_QWORD *)a1 + 1));
  *a2 = result;
  return result;
}

uint64_t sub_15B988()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_15B9AC()
{
  _QWORD *v0;

  if (v0[2])
    swift_release(v0[3]);
  swift_release(v0[4]);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_15B9E0()
{
  uint64_t v0;

  return sub_15A4A0(*(void (**)(void))(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_15B9EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BCC50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_15BA34()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

void sub_15BA68(void **a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;

  sub_15A544(a1, v2[2], v2[3], v2[4], v2[5], a2);
}

uint64_t sub_15BA74()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_15BA98(_QWORD *a1@<X8>)
{
  uint64_t v1;

  sub_15A864(*(void **)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_15BAA0(uint64_t a1)
{
  uint64_t v1;

  return sub_15908C(a1, v1);
}

uint64_t sub_15BAA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BCC50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t MetricsPageFields.init(pageID:pageType:pageDetails:sharedContent:customFields:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  *(_QWORD *)a8 = result;
  *(_QWORD *)(a8 + 8) = a2;
  *(_QWORD *)(a8 + 16) = a3;
  *(_QWORD *)(a8 + 24) = a4;
  *(_QWORD *)(a8 + 32) = a5;
  *(_BYTE *)(a8 + 40) = a6;
  *(_QWORD *)(a8 + 48) = a7;
  return result;
}

uint64_t MetricsPageFields.init(pageID:pageType:pageDetails:sharedContent:customFields:)@<X0>(char a1@<W1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, char a5@<W5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  unint64_t v13;
  uint64_t result;
  uint64_t v15;

  if ((a1 & 1) != 0)
  {
    result = 0;
    v15 = 0;
  }
  else
  {
    v13 = sub_144B4();
    result = BinaryInteger.description.getter(&type metadata for UInt64, v13);
  }
  *(_QWORD *)a7 = result;
  *(_QWORD *)(a7 + 8) = v15;
  *(_QWORD *)(a7 + 16) = a2;
  *(_QWORD *)(a7 + 24) = a3;
  *(_QWORD *)(a7 + 32) = a4;
  *(_BYTE *)(a7 + 40) = a5 & 1;
  *(_QWORD *)(a7 + 48) = a6;
  return result;
}

uint64_t MetricsPageFields.pageDetails.getter()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 32));
}

unint64_t MetricsPageFields.metricsFields.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  unint64_t v40;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _OWORD v45[2];
  __int128 v46;
  void *v47;
  unint64_t v48;

  v2 = *v0;
  v1 = v0[1];
  v4 = v0[2];
  v3 = v0[3];
  v5 = v0[4];
  v6 = *((_BYTE *)v0 + 40);
  v7 = v0[6];
  if (v7)
    v8 = (void *)v0[6];
  else
    v8 = &_swiftEmptyDictionarySingleton;
  v48 = (unint64_t)v8;
  v9 = swift_bridgeObjectRetain(v7);
  v10 = static MetricsField<>.pageID.getter(v9);
  v12 = v10;
  v13 = v11;
  if (v1)
  {
    v47 = &type metadata for String;
    *(_QWORD *)&v46 = v2;
    *((_QWORD *)&v46 + 1) = v1;
    sub_1F460(&v46, v45);
    swift_bridgeObjectRetain_n(v1, 2);
    swift_bridgeObjectRetain(v13);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v8);
    v42 = (unint64_t)v8;
    v48 = 0x8000000000000000;
    sub_1E640(v45, v12, v13, isUniquelyReferenced_nonNull_native);
    v15 = v48;
    v48 = v42;
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease_n(v13, 2);
    v16 = v15;
  }
  else
  {
    sub_13E778(v10, v11, &v46);
    sub_298FC((uint64_t)&v46);
    v16 = v13;
  }
  v17 = swift_bridgeObjectRelease(v16);
  v18 = static MetricsField<>.pageType.getter(v17);
  v20 = v19;
  v47 = &type metadata for String;
  *(_QWORD *)&v46 = v4;
  *((_QWORD *)&v46 + 1) = v3;
  sub_1F460(&v46, v45);
  swift_bridgeObjectRetain(v3);
  v21 = v48;
  v22 = swift_isUniquelyReferenced_nonNull_native(v48);
  v43 = v21;
  v48 = 0x8000000000000000;
  sub_1E640(v45, v18, v20, v22);
  v23 = v48;
  v48 = v43;
  swift_bridgeObjectRelease(v20);
  v24 = swift_bridgeObjectRelease(v23);
  v25 = static MetricsField<>.pageDetails.getter(v24);
  v27 = v25;
  v28 = v26;
  if (v5)
  {
    v29 = sub_15BE80(v5);
    v47 = (void *)__swift_instantiateConcreteTypeFromMangledName(&qword_3B0A78);
    *(_QWORD *)&v46 = v29;
    sub_1F460(&v46, v45);
    swift_bridgeObjectRetain(v29);
    swift_bridgeObjectRetain(v28);
    v30 = v48;
    v31 = swift_isUniquelyReferenced_nonNull_native(v48);
    v44 = v30;
    v48 = 0x8000000000000000;
    sub_1E640(v45, v27, v28, v31);
    v32 = v48;
    v48 = v44;
    swift_bridgeObjectRelease(v29);
    swift_bridgeObjectRelease_n(v28, 2);
    v33 = v32;
  }
  else
  {
    sub_13E778(v25, v26, &v46);
    sub_298FC((uint64_t)&v46);
    v33 = v28;
  }
  v34 = swift_bridgeObjectRelease(v33);
  v35 = static MetricsField<>.sharedContent.getter(v34);
  v37 = v36;
  v47 = &type metadata for Bool;
  LOBYTE(v46) = v6;
  sub_1F460(&v46, v45);
  v38 = v48;
  v39 = swift_isUniquelyReferenced_nonNull_native(v48);
  v48 = 0x8000000000000000;
  sub_1E640(v45, v35, v37, v39);
  v40 = v48;
  v48 = v38;
  swift_bridgeObjectRelease(v37);
  swift_bridgeObjectRelease(v40);
  return v48;
}

unint64_t sub_15BE80(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  unint64_t result;
  int64_t i;
  char *v11;
  void *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  void *v16;
  char *v17;
  uint64_t *v18;
  _QWORD *v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t *v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  _QWORD v44[2];
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  _OWORD v50[2];

  v1 = a1;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_3B1810);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v41 = v1 + 64;
  v4 = -1 << *(_BYTE *)(v1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(v1 + 64);
  v40 = (unint64_t)(63 - v4) >> 6;
  v7 = &v47;
  v8 = &v49;
  result = swift_bridgeObjectRetain(v1);
  i = 0;
  v11 = (char *)&type metadata for Any + 8;
  v12 = &type metadata for String;
  if (v6)
    goto LABEL_10;
LABEL_11:
  v21 = i + 1;
  if (__OFADD__(i, 1))
    goto LABEL_35;
  if (v21 >= v40)
    goto LABEL_32;
  v22 = *(_QWORD *)(v41 + 8 * v21);
  v23 = i + 1;
  if (!v22)
  {
    v23 = i + 2;
    if (i + 2 >= v40)
      goto LABEL_32;
    v22 = *(_QWORD *)(v41 + 8 * v23);
    if (!v22)
    {
      v23 = i + 3;
      if (i + 3 >= v40)
        goto LABEL_32;
      v22 = *(_QWORD *)(v41 + 8 * v23);
      if (!v22)
      {
        v23 = i + 4;
        if (i + 4 >= v40)
          goto LABEL_32;
        v22 = *(_QWORD *)(v41 + 8 * v23);
        if (!v22)
        {
          v24 = i + 5;
          if (i + 5 < v40)
          {
            v22 = *(_QWORD *)(v41 + 8 * v24);
            if (v22)
            {
              v23 = i + 5;
              goto LABEL_26;
            }
            while (1)
            {
              v23 = v24 + 1;
              if (__OFADD__(v24, 1))
                goto LABEL_36;
              if (v23 >= v40)
                break;
              v22 = *(_QWORD *)(v41 + 8 * v23);
              ++v24;
              if (v22)
                goto LABEL_26;
            }
          }
LABEL_32:
          sub_15498(v1);
          return (unint64_t)v3;
        }
      }
    }
  }
LABEL_26:
  v43 = (v22 - 1) & v22;
  v20 = __clz(__rbit64(v22)) + (v23 << 6);
  for (i = v23; ; v20 = __clz(__rbit64(v6)) | (i << 6))
  {
    v25 = 16 * v20;
    v26 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v20);
    v28 = *v26;
    v27 = v26[1];
    v29 = (uint64_t *)(*(_QWORD *)(v1 + 56) + v25);
    v30 = *v29;
    v31 = v29[1];
    v45 = v28;
    v46 = v27;
    v44[0] = v30;
    v44[1] = v31;
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRetain(v31);
    swift_dynamicCast(v7, v44, v12, v11, 7);
    v32 = v45;
    v33 = v46;
    sub_1F460(v7, v8);
    sub_1F460(v8, v50);
    sub_1F460(v50, &v48);
    result = sub_29724(v32, v33);
    v34 = result;
    if ((v35 & 1) != 0)
    {
      v42 = i;
      v13 = v8;
      v14 = v7;
      v15 = v1;
      v16 = v12;
      v17 = v11;
      v18 = (uint64_t *)(v3[6] + 16 * result);
      swift_bridgeObjectRelease(v18[1]);
      *v18 = v32;
      v18[1] = v33;
      v11 = v17;
      v12 = v16;
      v1 = v15;
      v7 = v14;
      v8 = v13;
      i = v42;
      v19 = (_QWORD *)(v3[7] + 32 * v34);
      __swift_destroy_boxed_opaque_existential_1(v19);
      result = (unint64_t)sub_1F460(&v48, v19);
      v6 = v43;
      if (!v43)
        goto LABEL_11;
      goto LABEL_10;
    }
    if (v3[2] >= v3[3])
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v36 = (uint64_t *)(v3[6] + 16 * result);
    *v36 = v32;
    v36[1] = v33;
    result = (unint64_t)sub_1F460(&v48, (_OWORD *)(v3[7] + 32 * result));
    v37 = v3[2];
    v38 = __OFADD__(v37, 1);
    v39 = v37 + 1;
    if (v38)
      goto LABEL_34;
    v3[2] = v39;
    v6 = v43;
    if (!v43)
      goto LABEL_11;
LABEL_10:
    v43 = (v6 - 1) & v6;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_15C1E8(uint64_t a1)
{
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t result;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  int64_t v15;
  void *v16;
  void *v17;
  unint64_t v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  Swift::Int v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  _OWORD v37[4];
  _OWORD v38[2];
  _OWORD v39[3];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_3BCFD0);
    v3 = (_BYTE *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v34 = a1 + 64;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v33 = (unint64_t)(63 - v4) >> 6;
  v7 = v3 + 64;
  swift_bridgeObjectRetain();
  result = swift_retain();
  v35 = 0;
  while (1)
  {
    if (v6)
    {
      v10 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v11 = v10 | (v35 << 6);
      goto LABEL_28;
    }
    v12 = v35 + 1;
    if (__OFADD__(v35, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v12 >= v33)
      goto LABEL_37;
    v13 = *(_QWORD *)(v34 + 8 * v12);
    v14 = v35 + 1;
    if (!v13)
    {
      v14 = v35 + 2;
      if (v35 + 2 >= v33)
        goto LABEL_37;
      v13 = *(_QWORD *)(v34 + 8 * v14);
      if (!v13)
      {
        v14 = v35 + 3;
        if (v35 + 3 >= v33)
          goto LABEL_37;
        v13 = *(_QWORD *)(v34 + 8 * v14);
        if (!v13)
        {
          v14 = v35 + 4;
          if (v35 + 4 >= v33)
            goto LABEL_37;
          v13 = *(_QWORD *)(v34 + 8 * v14);
          if (!v13)
            break;
        }
      }
    }
LABEL_27:
    v6 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v14 << 6);
    v35 = v14;
LABEL_28:
    v17 = *(void **)(*(_QWORD *)(a1 + 56) + 8 * v11);
    *(_QWORD *)&v39[0] = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v11);
    v16 = *(void **)&v39[0];
    *(_QWORD *)&v38[0] = v17;
    v18 = sub_15C7E0();
    v19 = v16;
    v20 = v17;
    swift_dynamicCast((char *)v39 + 8, v38, v18, (char *)&type metadata for Any + 8, 7);
    v21 = *(_QWORD *)&v39[0];
    sub_1F460((_OWORD *)((char *)v39 + 8), v37);
    sub_1F460(v37, v39);
    sub_1F460(v39, v38);
    v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
    v24 = v23;
    Hasher.init(_seed:)(&v36);
    String.hash(into:)(&v36, v22, v24);
    v25 = Hasher._finalize()();
    result = swift_bridgeObjectRelease();
    v26 = -1 << v3[32];
    v27 = v25 & ~v26;
    v28 = v27 >> 6;
    if (((-1 << v27) & ~*(_QWORD *)&v7[8 * (v27 >> 6)]) != 0)
    {
      v9 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)&v7[8 * (v27 >> 6)])) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v29 = 0;
      v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v31 = v28 == v30;
        if (v28 == v30)
          v28 = 0;
        v29 |= v31;
        v32 = *(_QWORD *)&v7[8 * v28];
      }
      while (v32 == -1);
      v9 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(_QWORD *)&v7[(v9 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v9;
    *(_QWORD *)(*((_QWORD *)v3 + 6) + 8 * v9) = v21;
    result = (uint64_t)sub_1F460(v38, (_OWORD *)(*((_QWORD *)v3 + 7) + 32 * v9));
    ++*((_QWORD *)v3 + 2);
  }
  v15 = v35 + 5;
  if (v35 + 5 >= v33)
  {
LABEL_37:
    swift_release(v3);
    sub_15498(a1);
    return (uint64_t)v3;
  }
  v13 = *(_QWORD *)(v34 + 8 * v15);
  if (v13)
  {
    v14 = v35 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v14 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v14 >= v33)
      goto LABEL_37;
    v13 = *(_QWORD *)(v34 + 8 * v14);
    ++v15;
    if (v13)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t destroy for MetricsPageFields(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[4]);
  return swift_bridgeObjectRelease(a1[6]);
}

uint64_t initializeWithCopy for MetricsPageFields(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v5;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v6;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

uint64_t assignWithCopy for MetricsPageFields(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v8);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v10);
  return a1;
}

uint64_t assignWithTake for MetricsPageFields(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  v6 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease(v6);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v7 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for ShowEpisodesShelvesProvider(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ShowEpisodesShelvesProvider(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MetricsPageFields()
{
  return &type metadata for MetricsPageFields;
}

unint64_t sub_15C7E0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_3B3240;
  if (!qword_3B3240)
  {
    v1 = objc_opt_self(UIFont);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_3B3240);
  }
  return result;
}

unint64_t static RecommendationsShelvesIntent.kind.getter()
{
  return 0xD00000000000001CLL;
}

void __swiftcall RecommendationsShelvesIntent.init(metadata:suppressInlineCategoriesModule:)(ShelfKit::RecommendationsShelvesIntent *__return_ptr retstr, ShelfKit::RecommendationsMetadata *metadata, Swift::Bool suppressInlineCategoriesModule)
{
  Swift::Bool userAllowsPersonalization;
  Swift::Bool userIsManagedAccount;
  Swift::Bool userIsUnder13;
  Swift::String_optional userID;

  userAllowsPersonalization = metadata->analytics.userAllowsPersonalization;
  userIsManagedAccount = metadata->analytics.userIsManagedAccount;
  userIsUnder13 = metadata->analytics.userIsUnder13;
  userID = metadata->analytics.userID;
  retstr->metadata.analytics.clientID = metadata->analytics.clientID;
  retstr->metadata.analytics.userID = userID;
  retstr->metadata.analytics.userAllowsPersonalization = userAllowsPersonalization;
  retstr->metadata.analytics.userIsManagedAccount = userIsManagedAccount;
  retstr->metadata.analytics.userIsUnder13 = userIsUnder13;
  retstr->metadata.categories = metadata->categories;
  retstr->metadata.channels = metadata->channels;
  *(_OWORD *)&retstr->metadata.episodes.recentlyPlayed._rawValue = *(_OWORD *)&metadata->episodes.recentlyPlayed._rawValue;
  *(_OWORD *)&retstr->metadata.shows.unfollowed._rawValue = *(_OWORD *)&metadata->shows.unfollowed._rawValue;
  retstr->suppressInlineCategoriesModule = suppressInlineCategoriesModule;
}

uint64_t static RecommendationsShelvesIntent.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  char v4;
  int v5;
  char v6;
  char v7;
  char v8;
  int v9;
  __int128 v10;
  __int128 v11;
  _OWORD v13[2];
  char v14;
  char v15;
  char v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _OWORD v21[2];
  char v22;
  char v23;
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;

  v2 = *(_BYTE *)(a1 + 32);
  v3 = *(_BYTE *)(a1 + 33);
  v4 = *(_BYTE *)(a1 + 34);
  v5 = *(unsigned __int8 *)(a1 + 104);
  v6 = *(_BYTE *)(a2 + 32);
  v7 = *(_BYTE *)(a2 + 33);
  v8 = *(_BYTE *)(a2 + 34);
  v9 = *(unsigned __int8 *)(a2 + 104);
  v10 = *(_OWORD *)(a1 + 16);
  v21[0] = *(_OWORD *)a1;
  v21[1] = v10;
  v22 = v2;
  v23 = v3;
  v24 = v4;
  v25 = *(_OWORD *)(a1 + 40);
  v26 = *(_OWORD *)(a1 + 56);
  v27 = *(_OWORD *)(a1 + 72);
  v28 = *(_OWORD *)(a1 + 88);
  v11 = *(_OWORD *)(a2 + 16);
  v13[0] = *(_OWORD *)a2;
  v13[1] = v11;
  v14 = v6;
  v15 = v7;
  v16 = v8;
  v17 = *(_OWORD *)(a2 + 40);
  v18 = *(_OWORD *)(a2 + 56);
  v19 = *(_OWORD *)(a2 + 72);
  v20 = *(_OWORD *)(a2 + 88);
  return _s8ShelfKit23RecommendationsMetadataV2eeoiySbAC_ACtFZ_0((uint64_t)v21, (uint64_t)v13) & ~(v5 ^ v9) & 1;
}

uint64_t sub_15C94C()
{
  _BYTE *v0;

  if (*v0)
    return 0xD00000000000001ELL;
  else
    return 0x617461646174656DLL;
}

uint64_t sub_15C98C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_15D66C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_15C9B0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_15D024();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_15C9D8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_15D024();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_15CA00(_QWORD *a1@<X8>)
{
  *a1 = 0xD00000000000001CLL;
  a1[1] = 0x80000000002F8A30;
}

uint64_t RecommendationsShelvesIntent.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  __int128 *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v18;
  unsigned int v19;
  int v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  char v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  int v34;
  char v35;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BCFD8);
  v23 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = *v2;
  v8 = *((_QWORD *)v2 + 2);
  v7 = *((_QWORD *)v2 + 3);
  v9 = *((_BYTE *)v2 + 32);
  v34 = *((unsigned __int8 *)v2 + 33);
  v10 = *((unsigned __int8 *)v2 + 34);
  v19 = *((unsigned __int8 *)v2 + 104);
  v20 = v10;
  v11 = a1[3];
  v12 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v11);
  v13 = sub_15D024();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for RecommendationsShelvesIntent.CodingKeys, &type metadata for RecommendationsShelvesIntent.CodingKeys, v13, v11, v12);
  v24 = v21;
  v25 = v8;
  v26 = v7;
  v27 = v9;
  v28 = v34;
  v29 = v20;
  v14 = *(__int128 *)((char *)v2 + 56);
  v30 = *(__int128 *)((char *)v2 + 40);
  v31 = v14;
  v15 = *(__int128 *)((char *)v2 + 88);
  v32 = *(__int128 *)((char *)v2 + 72);
  v33 = v15;
  v35 = 0;
  sub_26F28();
  v16 = v22;
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v24);
  if (!v16)
  {
    LOBYTE(v24) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v19, &v24, v4);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v6, v4);
}

uint64_t RecommendationsShelvesIntent.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[4];
  unsigned __int8 v40;
  unsigned __int8 v41;
  unsigned __int8 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  char v52;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BCFE8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  v11 = sub_15D024();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for RecommendationsShelvesIntent.CodingKeys, &type metadata for RecommendationsShelvesIntent.CodingKeys, v11, v9, v10);
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1(a1);
  v52 = 0;
  sub_26F6C();
  KeyedDecodingContainer.decode<A>(_:forKey:)(v39, &type metadata for RecommendationsMetadata);
  v28 = v39[0];
  v37 = v39[1];
  v27 = v39[2];
  v51 = v40;
  v26 = v41;
  v25 = v42;
  v12 = v43;
  v13 = v44;
  v15 = v45;
  v14 = v46;
  v38 = v48;
  v35 = v49;
  v36 = v47;
  v33 = v39[3];
  v34 = v50;
  LOBYTE(v39[0]) = 1;
  swift_bridgeObjectRetain();
  v32 = v12;
  swift_bridgeObjectRetain();
  v31 = v13;
  swift_bridgeObjectRetain();
  v30 = v15;
  swift_bridgeObjectRetain();
  v29 = v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v16 = v35;
  swift_bridgeObjectRetain();
  v17 = v34;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  LOBYTE(v12) = KeyedDecodingContainer.decode(_:forKey:)(v39, v5);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v18 = v37;
  *(_QWORD *)a2 = v28;
  *(_QWORD *)(a2 + 8) = v18;
  v19 = v33;
  *(_QWORD *)(a2 + 16) = v27;
  *(_QWORD *)(a2 + 24) = v19;
  *(_BYTE *)(a2 + 32) = v51;
  *(_BYTE *)(a2 + 33) = v26;
  *(_BYTE *)(a2 + 34) = v25;
  v20 = v31;
  *(_QWORD *)(a2 + 40) = v32;
  *(_QWORD *)(a2 + 48) = v20;
  v21 = v29;
  *(_QWORD *)(a2 + 56) = v30;
  *(_QWORD *)(a2 + 64) = v21;
  v22 = v38;
  *(_QWORD *)(a2 + 72) = v36;
  *(_QWORD *)(a2 + 80) = v22;
  *(_QWORD *)(a2 + 88) = v16;
  *(_QWORD *)(a2 + 96) = v17;
  *(_BYTE *)(a2 + 104) = v12 & 1;
  __swift_destroy_boxed_opaque_existential_1(a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_15CF8C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return RecommendationsShelvesIntent.init(from:)(a1, a2);
}

uint64_t sub_15CFA0(_QWORD *a1)
{
  return RecommendationsShelvesIntent.encode(to:)(a1);
}

uint64_t sub_15CFB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_15D758();
  return CustomJSValueConvertible<>.jsRepresentation(in:)(a1, a2, a3, v6);
}

uint64_t sub_15D010@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_48010(a1, a2, a3);
}

unint64_t sub_15D024()
{
  unint64_t result;

  result = qword_3BCFE0;
  if (!qword_3BCFE0)
  {
    result = swift_getWitnessTable(&unk_2F8CAC);
    atomic_store(result, (unint64_t *)&qword_3BCFE0);
  }
  return result;
}

unint64_t sub_15D06C()
{
  unint64_t result;

  result = qword_3BCFF0;
  if (!qword_3BCFF0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for RecommendationsShelvesIntent);
    atomic_store(result, (unint64_t *)&qword_3BCFF0);
  }
  return result;
}

unint64_t sub_15D0B8()
{
  unint64_t result;

  result = qword_3BCFF8;
  if (!qword_3BCFF8)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_3BD000);
    result = swift_getWitnessTable(&protocol conformance descriptor for _CachableValueContainer<A>);
    atomic_store(result, (unint64_t *)&qword_3BCFF8);
  }
  return result;
}

uint64_t initializeWithCopy for RecommendationsShelvesIntent(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_WORD *)(a1 + 33) = *(_WORD *)(a2 + 33);
  v5 = *(_QWORD *)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 48) = v6;
  v7 = *(_QWORD *)(a2 + 56);
  v8 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v7;
  *(_QWORD *)(a1 + 64) = v8;
  v9 = *(_QWORD *)(a2 + 72);
  v10 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = v9;
  *(_QWORD *)(a1 + 80) = v10;
  v11 = *(_QWORD *)(a2 + 88);
  v12 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = v11;
  *(_QWORD *)(a1 + 96) = v12;
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  return a1;
}

uint64_t assignWithCopy for RecommendationsShelvesIntent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(a2 + 56);
  v13 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  v14 = *(_QWORD *)(a2 + 64);
  v15 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  v16 = *(_QWORD *)(a2 + 72);
  v17 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  v18 = *(_QWORD *)(a2 + 80);
  v19 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  v20 = *(_QWORD *)(a2 + 88);
  v21 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  v22 = *(_QWORD *)(a2 + 96);
  v23 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  return a1;
}

__n128 __swift_memcpy105_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_OWORD *)(a1 + 89) = *(__int128 *)((char *)a2 + 89);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for RecommendationsShelvesIntent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
  v8 = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 56));
  v9 = *(_QWORD *)(a1 + 64);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 72));
  v10 = *(_QWORD *)(a1 + 80);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 88));
  v11 = *(_QWORD *)(a1 + 96);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  return a1;
}

uint64_t getEnumTagSinglePayload for RecommendationsShelvesIntent(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 105))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RecommendationsShelvesIntent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 104) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 105) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 40) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 105) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for RecommendationsShelvesIntent()
{
  return &type metadata for RecommendationsShelvesIntent;
}

uint64_t storeEnumTagSinglePayload for RecommendationsShelvesIntent.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_15D514 + 4 * byte_2F8A45[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_15D548 + 4 * asc_2F8A40[v4]))();
}

uint64_t sub_15D548(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_15D550(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x15D558);
  return result;
}

uint64_t sub_15D564(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x15D56CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_15D570(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_15D578(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RecommendationsShelvesIntent.CodingKeys()
{
  return &type metadata for RecommendationsShelvesIntent.CodingKeys;
}

unint64_t sub_15D598()
{
  unint64_t result;

  result = qword_3BD008;
  if (!qword_3BD008)
  {
    result = swift_getWitnessTable(&unk_2F8C84);
    atomic_store(result, (unint64_t *)&qword_3BD008);
  }
  return result;
}

unint64_t sub_15D5E0()
{
  unint64_t result;

  result = qword_3BD010;
  if (!qword_3BD010)
  {
    result = swift_getWitnessTable(&unk_2F8BF4);
    atomic_store(result, (unint64_t *)&qword_3BD010);
  }
  return result;
}

unint64_t sub_15D628()
{
  unint64_t result;

  result = qword_3BD018;
  if (!qword_3BD018)
  {
    result = swift_getWitnessTable(&unk_2F8C1C);
    atomic_store(result, (unint64_t *)&qword_3BD018);
  }
  return result;
}

uint64_t sub_15D66C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x617461646174656DLL && a2 == 0xE800000000000000)
  {
    v5 = 0xE800000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x617461646174656DLL, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD00000000000001ELL && a2 == 0x8000000000311320)
  {
    swift_bridgeObjectRelease(0x8000000000311320);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ELL, 0x8000000000311320, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

unint64_t sub_15D758()
{
  unint64_t result;

  result = qword_3BD020;
  if (!qword_3BD020)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for RecommendationsShelvesIntent);
    atomic_store(result, (unint64_t *)&qword_3BD020);
  }
  return result;
}

uint64_t PageMetrics.init(instructions:pageFields:custom:clickLocationFields:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  char v16;
  char v17;

  v7 = type metadata accessor for ScalarDictionary(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1)
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B89A0);
    v12 = type metadata accessor for PageMetrics.Instruction(0);
    a1 = swift_allocObject(v11, ((*(unsigned __int8 *)(*(_QWORD *)(v12 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v12 - 8) + 80))+ 2 * *(_QWORD *)(*(_QWORD *)(v12 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v12 - 8) + 80) | 7);
    *(_OWORD *)(a1 + 16) = xmmword_2EA080;
    v17 = 0;
    PageMetrics.Instruction.init(eventType:)(&v17);
    v16 = 1;
    PageMetrics.Instruction.init(eventType:)(&v16);
  }
  v13 = MetricsPageFields.metricsFields.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a3, v7);
  PageMetrics.init(instructions:pageFields:custom:clickLocationFields:)(a1, v13, v10, a4);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a3, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t PageMetrics.Instruction.init(eventType:)(_BYTE *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  void *v9;
  char v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  void *v26;
  _OWORD v27[2];
  __int128 v28;
  void *v29;

  v2 = type metadata accessor for MetricsData(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *a1;
  v6 = 1701273968;
  if (*a1)
    v6 = 0x6973736572706D69;
  v7 = 0xE400000000000000;
  v29 = &type metadata for String;
  if (v5)
    v7 = 0xEB00000000736E6FLL;
  *(_QWORD *)&v28 = v6;
  *((_QWORD *)&v28 + 1) = v7;
  sub_1F460(&v28, v27);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  v26 = &_swiftEmptyDictionarySingleton;
  sub_1D728(v27, 0x707954746E657665, 0xE900000000000065, isUniquelyReferenced_nonNull_native);
  v9 = v26;
  swift_bridgeObjectRelease(0x8000000000000000);
  v29 = &type metadata for String;
  strcpy((char *)&v28, "data-metrics");
  BYTE13(v28) = 0;
  HIWORD(v28) = -5120;
  sub_1F460(&v28, v27);
  v10 = swift_isUniquelyReferenced_nonNull_native(v9);
  v26 = v9;
  sub_1D728(v27, 0xD000000000000010, 0x8000000000311340, v10);
  v11 = v26;
  swift_bridgeObjectRelease(0x8000000000000000);
  LOBYTE(v28) = v5;
  v12 = MetricsEventType.includingFields.getter();
  MetricsData.init(topic:shouldFlush:fields:includingFields:excludingFields:)(0xD000000000000014, 0x800000000030DA90, 0, v11, v12, &_swiftEmptySetSingleton);
  v13 = __swift_instantiateConcreteTypeFromMangledName(qword_3BD028);
  v14 = type metadata accessor for PageMetrics.InvocationPoint(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_QWORD *)(v15 + 72);
  v17 = *(unsigned __int8 *)(v15 + 80);
  v18 = (v17 + 32) & ~v17;
  if (v5 == 1)
  {
    v19 = swift_allocObject(v13, v18 + 2 * v16, v17 | 7);
    *(_OWORD *)(v19 + 16) = xmmword_2EA080;
    v20 = static PageMetrics.InvocationPoint.appExit.getter();
    static PageMetrics.InvocationPoint.pageExit.getter(v20);
    v21 = sub_B3984(v19);
    swift_setDeallocating(v19);
    v22 = v19 + v18;
    v23 = 2;
  }
  else
  {
    v19 = swift_allocObject(v13, v18 + v16, v17 | 7);
    *(_OWORD *)(v19 + 16) = xmmword_2EA0D0;
    static PageMetrics.InvocationPoint.pageEnter.getter(v19);
    v21 = sub_B3984(v19);
    swift_setDeallocating(v19);
    v22 = v19 + v18;
    v23 = 1;
  }
  swift_arrayDestroy(v22, v23, v14);
  swift_deallocClassInstance(v19, 32, 7);
  return PageMetrics.Instruction.init(data:invocationPoints:)(v4, v21);
}

void UnboundedCache.init(notificationCenter:)(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;

  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, a2, a3, 0, 0);
  v10 = static Array._allocateUninitialized(_:)(0, TupleTypeMetadata2);
  v23 = Dictionary.init(dictionaryLiteral:)(v10, a2, a3, a4);
  v11 = type metadata accessor for Dictionary(0, a2, a3, a4);
  v12 = sub_15E3CC((uint64_t)&v23, v11);
  swift_bridgeObjectRelease();
  v13 = MTApplicationDidEnterBackgroundNotification;
  v14 = (_QWORD *)swift_allocObject(&unk_3838F8, 48, 7);
  v14[2] = a2;
  v14[3] = a3;
  v14[4] = a4;
  v14[5] = v12;
  v15 = type metadata accessor for WeakNotificationObserver();
  v16 = swift_allocObject(v15, 40, 7);
  v17 = swift_unknownObjectWeakInit(v16 + 16, 0);
  swift_unknownObjectWeakAssign(v17, a1);
  *(_QWORD *)(v16 + 24) = sub_15E7D8;
  *(_QWORD *)(v16 + 32) = v14;
  swift_retain_n(v12, 2);
  objc_msgSend(a1, "addObserver:selector:name:object:", v16, "handleWithNotification:", v13, 0);
  v18 = MTApplicationDidReceiveMemoryWarningNotification;
  v19 = (_QWORD *)swift_allocObject(&unk_383920, 48, 7);
  v19[2] = a2;
  v19[3] = a3;
  v19[4] = a4;
  v19[5] = v12;
  v20 = swift_allocObject(v15, 40, 7);
  v21 = swift_unknownObjectWeakInit(v20 + 16, 0);
  swift_unknownObjectWeakAssign(v21, a1);
  *(_QWORD *)(v20 + 24) = sub_15E45C;
  *(_QWORD *)(v20 + 32) = v19;
  swift_retain();
  swift_retain();
  objc_msgSend(a1, "addObserver:selector:name:object:", v20, "handleWithNotification:", v18, 0);
  swift_release(v12);
  swift_release(v19);

  *a5 = v12;
  a5[1] = v16;
  a5[2] = v20;
}

void sub_15DDCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  os_unfair_lock_s *v6;

  type metadata accessor for Dictionary(0, a3, a4, a5);
  v6 = (os_unfair_lock_s *)(a2 + ((*(unsigned int *)(*(_QWORD *)a2 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v6);
  Dictionary.removeAll(keepingCapacity:)(0);
  os_unfair_lock_unlock(v6);
}

void UnboundedCache.subscript.getter(uint64_t a1, _QWORD *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  os_unfair_lock_s *v9;

  v4 = *v2;
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  type metadata accessor for Dictionary(0, v5, v6, v7);
  type metadata accessor for Optional(0, v6);
  v8 = *(_QWORD *)(class metadata base offset for ManagedBuffer + *(_QWORD *)v4 + 16);
  v9 = (os_unfair_lock_s *)(v4 + ((*(unsigned int *)(*(_QWORD *)v4 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v9);
  Dictionary.subscript.getter(a1, *(_QWORD *)(v4 + v8), v5, v6, v7);
  os_unfair_lock_unlock(v9);
}

void sub_15DF00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;

  v4 = (_QWORD *)type metadata accessor for UnboundedCache(0, *(_QWORD *)(a3 + a2 - 24), *(_QWORD *)(a3 + a2 - 16), *(_QWORD *)(a3 + a2 - 8));
  UnboundedCache.subscript.getter(a2, v4);
}

uint64_t UnboundedCache.subscript.setter(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;

  sub_15E478(a1, a2, a3);
  (*(void (**)(uint64_t))(*(_QWORD *)(a3[2] - 8) + 8))(a2);
  v6 = type metadata accessor for Optional(0, a3[3]);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
}

uint64_t sub_15DFC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[2];

  v21[1] = a1;
  v11 = type metadata accessor for Optional(0, a5);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)v21 - v14;
  __chkstk_darwin(v13);
  v17 = (char *)v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v17, a2, a4);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a3, v11);
  v19 = type metadata accessor for Dictionary(0, a4, a5, a6);
  return Dictionary.subscript.setter(v15, v17, v19);
}

void (*UnboundedCache.subscript.modify(_QWORD *a1, uint64_t a2, _QWORD *a3))(_QWORD ***a1, char a2)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;

  v7 = malloc(0x48uLL);
  *a1 = v7;
  *v7 = a3;
  v7[1] = v3;
  v8 = type metadata accessor for Optional(0, a3[3]);
  v7[2] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v7[3] = v9;
  v10 = *(_QWORD *)(v9 + 64);
  v7[4] = malloc(v10);
  v11 = malloc(v10);
  v12 = a3[2];
  v7[5] = v11;
  v7[6] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v7[7] = v13;
  v7[8] = malloc(*(_QWORD *)(v13 + 64));
  (*(void (**)(void))(v13 + 16))();
  UnboundedCache.subscript.getter(a2, a3);
  return sub_15E1C4;
}

void sub_15E1C4(_QWORD ***a1, char a2)
{
  _QWORD **v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  void (*v11)(_QWORD *, _QWORD *);

  v2 = *a1;
  v4 = (*a1)[7];
  v3 = (*a1)[8];
  v5 = (*a1)[5];
  v6 = (*a1)[6];
  v8 = (*a1)[3];
  v7 = (*a1)[4];
  v9 = (*a1)[2];
  v10 = **a1;
  if ((a2 & 1) != 0)
  {
    ((void (*)(_QWORD *, _QWORD *, _QWORD *))v8[2])((*a1)[4], v5, v9);
    sub_15E478((uint64_t)v7, (uint64_t)v3, v10);
    ((void (*)(_QWORD *, _QWORD *))v4[1])(v3, v6);
    v11 = (void (*)(_QWORD *, _QWORD *))v8[1];
    v11(v7, v9);
  }
  else
  {
    sub_15E478((uint64_t)(*a1)[5], (uint64_t)v3, v10);
    ((void (*)(_QWORD *, _QWORD *))v4[1])(v3, v6);
    v11 = (void (*)(_QWORD *, _QWORD *))v8[1];
  }
  v11(v5, v9);
  free(v3);
  free(v5);
  free(v7);
  free(v2);
}

void UnboundedCache.removeValue(forKey:)(uint64_t a1, _QWORD *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  os_unfair_lock_s *v7;

  v4 = *v2;
  v5 = a2[3];
  v6 = type metadata accessor for Dictionary(0, a2[2], v5, a2[4]);
  type metadata accessor for Optional(0, v5);
  v7 = (os_unfair_lock_s *)(v4 + ((*(unsigned int *)(*(_QWORD *)v4 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v7);
  Dictionary.removeValue(forKey:)(a1, v6);
  os_unfair_lock_unlock(v7);
}

Swift::Void __swiftcall UnboundedCache.removeAll()()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;
  os_unfair_lock_s *v3;

  v2 = *v1;
  type metadata accessor for Dictionary(0, v0[2], v0[3], v0[4]);
  v3 = (os_unfair_lock_s *)(v2 + ((*(unsigned int *)(*(_QWORD *)v2 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v3);
  Dictionary.removeAll(keepingCapacity:)(0);
  os_unfair_lock_unlock(v3);
}

uint64_t sub_15E3CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD v6[4];

  type metadata accessor for os_unfair_lock_s(255);
  type metadata accessor for ManagedBuffer(0, a2, v4);
  v6[2] = a1;
  return static ManagedBuffer.create(minimumCapacity:makingHeaderWith:)(1, sub_15E780, v6);
}

uint64_t sub_15E438()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

void sub_15E45C(uint64_t a1)
{
  uint64_t *v1;

  sub_15DDCC(a1, v1[5], v1[2], v1[3], v1[4]);
}

void sub_15E478(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  os_unfair_lock_s *v11;

  v6 = *v3;
  v7 = a3[2];
  v8 = a3[3];
  v9 = a3[4];
  type metadata accessor for Dictionary(0, v7, v8, v9);
  v10 = v6 + *(_QWORD *)(class metadata base offset for ManagedBuffer + *(_QWORD *)v6 + 16);
  v11 = (os_unfair_lock_s *)(v6 + ((*(unsigned int *)(*(_QWORD *)v6 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v11);
  sub_15DFC8(v10, a2, a1, v7, v8, v9);
  os_unfair_lock_unlock(v11);
}

void sub_15E534(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;

  v6 = (_QWORD *)type metadata accessor for UnboundedCache(0, *(_QWORD *)(a4 + a3 - 24), *(_QWORD *)(a4 + a3 - 16), *(_QWORD *)(a4 + a3 - 8));
  sub_15E478(a1, a3, v6);
}

uint64_t sub_15E584()
{
  return 24;
}

__n128 sub_15E590(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_15E5A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 40);
}

uint64_t sub_15E5B0(_QWORD *a1)
{
  swift_release(*a1);
  swift_release(a1[1]);
  return swift_release(a1[2]);
}

uint64_t *sub_15E5E0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[2];
  a1[2] = v5;
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  return a1;
}

uint64_t *sub_15E62C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  v8 = a2[2];
  v9 = a1[2];
  a1[2] = v8;
  swift_retain(v8);
  swift_release(v9);
  return a1;
}

_QWORD *sub_15E6A0(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_release(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release(v4);
  v5 = a1[2];
  a1[2] = *(_QWORD *)(a2 + 16);
  swift_release(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for RecommendationsMetadata.Shows(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RecommendationsMetadata.Shows(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for UnboundedCache(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UnboundedCache);
}

uint64_t sub_15E780@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v2 + 16);
  v4 = *a1;
  *(_DWORD *)((char *)a1 + ((*(unsigned int *)(*a1 + 48) + 3) & 0x1FFFFFFFCLL)) = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v4
                                                                             + class metadata base offset for ManagedBuffer)
                                                                 - 8)
                                                     + 16))(a2, v3);
}

uint64_t sub_15E7E0(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = type metadata accessor for ModernShelf(0);
  v17 = *(_QWORD *)(v2 - 8);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v3);
  v18 = (uint64_t)&v15 - v7;
  v8 = *(_QWORD *)(a1 + 16);
  if (v8 < 2)
    return a1;
  v9 = 0;
  v10 = v8 >> 1;
  v11 = v8 - 1;
  v16 = v8 >> 1;
  while (1)
  {
    if (v9 == v11)
      goto LABEL_4;
    v12 = *(_QWORD *)(a1 + 16);
    if (v9 >= v12)
      break;
    v13 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
    v14 = *(_QWORD *)(v17 + 72);
    result = sub_14510(a1 + v13 + v14 * v9, v18, type metadata accessor for ModernShelf);
    if (v11 >= v12)
      goto LABEL_14;
    sub_14510(a1 + v13 + v14 * v11, (uint64_t)v5, type metadata accessor for ModernShelf);
    result = swift_isUniquelyReferenced_nonNull_native(a1);
    if ((result & 1) == 0)
    {
      result = sub_1E51C(a1);
      a1 = result;
    }
    if (v9 >= *(_QWORD *)(a1 + 16))
      goto LABEL_15;
    result = sub_161348((uint64_t)v5, a1 + v13 + v14 * v9);
    if (v11 >= *(_QWORD *)(a1 + 16))
      goto LABEL_16;
    result = sub_161348(v18, a1 + v13 + v14 * v11);
    v10 = v16;
LABEL_4:
    ++v9;
    --v11;
    if (v10 == v9)
      return a1;
  }
  __break(1u);
LABEL_14:
  __break(1u);
LABEL_15:
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

uint64_t sub_15E98C(unint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  id v11;
  uint64_t v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = a1;
  if ((a1 & 0x8000000000000000) != 0 || (a1 & 0x4000000000000000) != 0)
    goto LABEL_39;
  v2 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  v21 = v1 & 0xFFFFFFFFFFFFFF8;
LABEL_4:
  if ((v2 & 0x4000000000000000) == 0)
  {
    v3 = *(_QWORD *)(v2 + 16);
    swift_bridgeObjectRelease();
    v4 = (unint64_t)v3 >> 1;
    goto LABEL_6;
  }
  while (1)
  {
    v19 = swift_retain();
    v3 = _CocoaArrayWrapper.endIndex.getter(v19);
    swift_bridgeObjectRelease();
    swift_release(v2);
    v20 = v3 >= 0 ? v3 : v3 + 1;
    if (v3 < -1)
      __break(1u);
    v4 = v20 >> 1;
LABEL_6:
    if ((unint64_t)(v3 + 1) < 3)
      return v2;
    v5 = 0;
    while (1)
    {
      v8 = v5 + 1;
      v1 = v3 - (v5 + 1);
      if (__OFSUB__(v3, v5 + 1))
        break;
      if (v5 != v1)
      {
        v9 = v21;
        if ((v21 & 0xC000000000000001) != 0)
        {
          v12 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5);
          v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v3 - (v5 + 1));
        }
        else
        {
          if ((v5 & 0x8000000000000000) != 0)
            goto LABEL_33;
          v10 = *(_QWORD *)((char *)&dword_10 + (v21 & 0xFFFFFFFFFFFFF8));
          if (v5 >= v10)
            goto LABEL_34;
          v11 = *(id *)(v21 + 8 * v5 + 32);
          if ((v1 & 0x8000000000000000) != 0)
            goto LABEL_35;
          if (v1 >= v10)
            goto LABEL_37;
          v12 = (uint64_t)v11;
          v13 = *(id *)(v21 + 32 + 8 * v1);
        }
        v14 = v13;
        if (!swift_isUniquelyReferenced_nonNull_bridgeObject(v21)
          || v21 < 0
          || (v21 & 0x4000000000000000) != 0)
        {
          v9 = sub_1E544(v21);
          v21 = v9;
        }
        v15 = (v9 & 0xFFFFFFFFFFFFFF8) + 8 * v5;

        *(_QWORD *)(v15 + 32) = v14;
        specialized Array._endMutation()(v16);
        v17 = v21;
        if (!swift_isUniquelyReferenced_nonNull_bridgeObject(v21)
          || v21 < 0
          || (v21 & 0x4000000000000000) != 0)
        {
          v17 = sub_1E544(v21);
          v21 = v17;
        }
        if ((v1 & 0x8000000000000000) != 0)
          goto LABEL_36;
        if (v1 >= *(_QWORD *)((char *)&dword_10 + (v17 & 0xFFFFFFFFFFFFFF8)))
          goto LABEL_38;
        v6 = (v17 & 0xFFFFFFFFFFFFFF8) + 8 * v1;

        *(_QWORD *)(v6 + 32) = v12;
        specialized Array._endMutation()(v7);
      }
      v5 = v8;
      if (v4 == v8)
        return v21;
    }
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    v2 = (uint64_t)sub_1FBCE8(v1);
    v21 = v2;
    if ((v2 & 0x8000000000000000) == 0)
      goto LABEL_4;
  }
}

uint64_t CompositeImageProvider.cache.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BD0B0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t CompositeImageProvider.cache.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BD0B0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t CompositeImageProvider.sourceImageProvider.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for CompositeImageProvider(0) + 20);
  return sub_150C8(v3, a1);
}

uint64_t type metadata accessor for CompositeImageProvider(uint64_t a1)
{
  uint64_t result;

  result = qword_3BD1C8;
  if (!qword_3BD1C8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CompositeImageProvider);
  return result;
}

uint64_t CompositeImageProvider.sourceImageProvider.setter(__int128 *a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + *(int *)(type metadata accessor for CompositeImageProvider(0) + 20));
  __swift_destroy_boxed_opaque_existential_1(v3);
  return sub_F4D8(a1, (uint64_t)v3);
}

void (__swiftcall *CompositeImageProvider.sourceImageProvider.modify())()
{
  type metadata accessor for CompositeImageProvider(0);
  return FindOrCreateEpisodeOfferContentIDsIntentsIntentImplementation.init();
}

uint64_t CompositeImageProvider.coverArtRows.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for CompositeImageProvider(0) + 24));
}

uint64_t CompositeImageProvider.coverArtRows.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CompositeImageProvider(0);
  *(_QWORD *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

void (__swiftcall *CompositeImageProvider.coverArtRows.modify())()
{
  type metadata accessor for CompositeImageProvider(0);
  return FindOrCreateEpisodeOfferContentIDsIntentsIntentImplementation.init();
}

uint64_t CompositeImageProvider.maximumShowImages.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for CompositeImageProvider(0) + 28));
}

uint64_t CompositeImageProvider.maximumShowImages.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CompositeImageProvider(0);
  *(_QWORD *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

void (__swiftcall *CompositeImageProvider.maximumShowImages.modify())()
{
  type metadata accessor for CompositeImageProvider(0);
  return FindOrCreateEpisodeOfferContentIDsIntentsIntentImplementation.init();
}

id CompositeImageProvider.workQueue.getter()
{
  uint64_t v0;

  return *(id *)(v0 + *(int *)(type metadata accessor for CompositeImageProvider(0) + 32));
}

void CompositeImageProvider.workQueue.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(int *)(type metadata accessor for CompositeImageProvider(0) + 32);

  *(_QWORD *)(v1 + v3) = a1;
}

void (__swiftcall *CompositeImageProvider.workQueue.modify())()
{
  type metadata accessor for CompositeImageProvider(0);
  return FindOrCreateEpisodeOfferContentIDsIntentsIntentImplementation.init();
}

uint64_t CompositeImageProvider.init(cache:sourceImageProvider:coverArtRows:maximumShowImages:workQueue:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;

  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BD0B0);
  v13 = *(_QWORD *)(v12 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(a6, a1, v12);
  v14 = (int *)type metadata accessor for CompositeImageProvider(0);
  sub_150C8((uint64_t)a2, a6 + v14[5]);
  *(_QWORD *)(a6 + v14[6]) = a3;
  *(_QWORD *)(a6 + v14[7]) = a4;
  *(_QWORD *)(a6 + v14[8]) = a5;
  v15 = type metadata accessor for JSONDecoder(0);
  swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
  v16 = JSONDecoder.init()();
  __swift_destroy_boxed_opaque_existential_1(a2);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(a1, v12);
  *(_QWORD *)(a6 + v14[9]) = v16;
  return result;
}

uint64_t CompositeImageProvider.load(artwork:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(char *, unint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  id v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD v136[2];
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  __int128 v179;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BD0B8);
  v177 = *(_QWORD *)(v2 - 8);
  v178 = v2;
  __chkstk_darwin(v2);
  v176 = (char *)v136 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for PreparedArtworkRequest(0);
  v170 = *(_QWORD *)(v4 - 8);
  v171 = v4;
  __chkstk_darwin(v4);
  v169 = (char *)v136 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ArtworkRequest(0);
  v166 = *(_QWORD *)(v6 - 8);
  v167 = v6;
  __chkstk_darwin(v6);
  v164 = v7;
  v165 = (char *)v136 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2B18);
  __chkstk_darwin(v8);
  v153 = (char *)v136 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v154 = type metadata accessor for CompositeImageProvider(0);
  v140 = *(_QWORD *)(v154 - 8);
  __chkstk_darwin(v154);
  v173 = v10;
  v174 = (uint64_t)v136 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v143 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BD0C0);
  v142 = *(_QWORD *)(v143 - 8);
  __chkstk_darwin(v143);
  v141 = (char *)v136 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v147 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BD0C8);
  v145 = *(_QWORD *)(v147 - 8);
  __chkstk_darwin(v147);
  v144 = (char *)v136 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v150 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BD0D0);
  v149 = *(_QWORD *)(v150 - 8);
  __chkstk_darwin(v150);
  v146 = (char *)v136 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v152 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BD0D8);
  v151 = *(_QWORD *)(v152 - 8);
  __chkstk_darwin(v152);
  v148 = (char *)v136 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v157 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BD0E0);
  v156 = *(_QWORD *)(v157 - 8);
  __chkstk_darwin(v157);
  v155 = (char *)v136 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v161 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BD0E8);
  v159 = *(_QWORD *)(v161 - 8);
  __chkstk_darwin(v161);
  v158 = (char *)v136 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v163 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BD0F0);
  v162 = *(_QWORD *)(v163 - 8);
  __chkstk_darwin(v163);
  v160 = (char *)v136 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for URLQueryItem(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)v136 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0CC0);
  __chkstk_darwin(v22);
  v175 = (char *)v136 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for ArtworkModel(0);
  __chkstk_darwin(v24);
  v26 = (_QWORD *)((char *)v136 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0CB8);
  __chkstk_darwin(v27);
  v29 = (char *)v136 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for URLComponents(0);
  v31 = *(_QWORD *)(v30 - 8);
  v32 = __chkstk_darwin(v30);
  v34 = (char *)v136 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v168 = a1;
  ArtworkRequest.model.getter(v32);
  v35 = *v26;
  v36 = v26[1];
  swift_bridgeObjectRetain();
  v37 = (uint64_t)v26;
  v38 = v30;
  sub_3E4A4(v37);
  URLComponents.init(string:)(v35, v36);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30) == 1)
  {
    sub_1459C((uint64_t)v29, &qword_3B0CB8);
LABEL_21:
    v126 = type metadata accessor for ImageProviderError(0);
    v127 = sub_F1C0(&qword_3BD0F8, (void (*)(uint64_t))&type metadata accessor for ImageProviderError, (uint64_t)&protocol conformance descriptor for ImageProviderError);
    v128 = swift_allocError(v126, v127, 0, 0);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v126 - 8) + 104))(v129, enum case for ImageProviderError.unsupportedRequest(_:), v126);
    *(_QWORD *)&v179 = v128;
    v130 = sub_327F8(0, (unint64_t *)&qword_3BA4D0, UIImage_ptr);
    v131 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2B08);
    v132 = v176;
    Fail.init(error:)(&v179, v130, v131, &protocol self-conformance witness table for Error);
    v133 = sub_32914(&qword_3BD100, &qword_3BD0B8, (uint64_t)&protocol conformance descriptor for Fail<A, B>);
    v134 = v178;
    v125 = Publisher.eraseToAnyPublisher()(v178, v133);
    (*(void (**)(char *, uint64_t))(v177 + 8))(v132, v134);
    return v125;
  }
  v39 = (*(uint64_t (**)(char *, char *, uint64_t))(v31 + 32))(v34, v29, v30);
  v40 = URLComponents.queryItems.getter(v39);
  v41 = v34;
  if (!v40)
  {
LABEL_20:
    (*(void (**)(char *, uint64_t))(v31 + 8))(v41, v38);
    goto LABEL_21;
  }
  v42 = *(_QWORD *)(v40 + 16);
  v139 = v30;
  v138 = v31;
  v137 = v41;
  if (v42)
  {
    v43 = v40 + ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80));
    v44 = *(_QWORD *)(v19 + 72);
    v45 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v19 + 16);
    v136[1] = v40;
    swift_bridgeObjectRetain();
    while (1)
    {
      v46 = v45(v21, v43, v18);
      v47 = URLQueryItem.name.getter(v46);
      v49 = v48;
      v51 = static ArtworkModel.compositeImageRequestsKey.getter();
      if (v47 == v51 && v49 == v50)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n(v49, 2);
        goto LABEL_15;
      }
      v52 = _stringCompareWithSmolCheck(_:_:expecting:)(v47, v49, v51, v50, 0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v52 & 1) != 0)
        break;
      (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
      v43 += v44;
      if (!--v42)
      {
        swift_bridgeObjectRelease();
        v53 = 1;
        v38 = v139;
        v31 = v138;
        v41 = v137;
        goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease();
LABEL_15:
    v54 = (uint64_t)v175;
    (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v175, v21, v18);
    v53 = 0;
    v38 = v139;
    v31 = v138;
    v41 = v137;
  }
  else
  {
    v53 = 1;
LABEL_12:
    v54 = (uint64_t)v175;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56))(v54, v53, 1, v18);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(v54, 1, v18) == 1)
  {
    sub_1459C(v54, &qword_3B0CC0);
    goto LABEL_20;
  }
  v55 = URLQueryItem.value.getter();
  v57 = v56;
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v54, v18);
  if (!v57)
    goto LABEL_20;
  v58 = (int *)v154;
  v59 = v172;
  v60 = *(_QWORD *)(v172 + *(int *)(v154 + 36));
  v61 = v174;
  sub_14510(v172, v174, type metadata accessor for CompositeImageProvider);
  v62 = *(unsigned __int8 *)(v140 + 80);
  v63 = (v62 + 16) & ~v62;
  v177 = v62 | 7;
  v178 = v62;
  v64 = v59;
  v65 = (v173 + v63 + 7) & 0xFFFFFFFFFFFFFFF8;
  v66 = (v65 + 23) & 0xFFFFFFFFFFFFFFF8;
  v67 = swift_allocObject(&unk_3839C8, v66 + 8, v62 | 7);
  sub_1600E4(v61, v67 + v63);
  v68 = (uint64_t *)(v67 + v65);
  *v68 = v55;
  v68[1] = v57;
  *(_QWORD *)(v67 + v66) = v60;
  v69 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BD108);
  swift_allocObject(v69, *(unsigned int *)(v69 + 48), *(unsigned __int16 *)(v69 + 52));
  swift_retain();
  v70 = Future.init(_:)(sub_160128, v67);
  *(_QWORD *)&v179 = v70;
  v71 = static Subscribers.Demand.unlimited.getter(v70);
  v72 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BD110);
  v73 = sub_32914(&qword_3BD118, &qword_3BD108, (uint64_t)&protocol conformance descriptor for Future<A, B>);
  v74 = sub_32914(&qword_3BD120, &qword_3BD110, (uint64_t)&protocol conformance descriptor for Publishers.Sequence<A, B>);
  v75 = v141;
  Publisher.flatMap<A>(maxPublishers:_:)(v71, sub_160328, 0, v69, v72, v73, v74);
  swift_release(v70);
  v76 = v64;
  sub_150C8(v64 + v58[5], (uint64_t)&v179);
  v77 = swift_allocObject(&unk_3839F0, 56, 7);
  v78 = sub_F4D8(&v179, v77 + 16);
  v79 = static Subscribers.Demand.unlimited.getter(v78);
  v80 = sub_327F8(0, (unint64_t *)&qword_3BA4D0, UIImage_ptr);
  v176 = (char *)v80;
  v81 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B6288);
  v82 = sub_32914(&qword_3BD128, &qword_3BD0C0, (uint64_t)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
  v83 = sub_32914(&qword_3B6290, &qword_3B6288, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v84 = v144;
  v85 = v79;
  v86 = v143;
  Publisher.flatMap<A, B>(maxPublishers:_:)(v85, sub_1603BC, v77, v143, v80, v81, v82, v83);
  swift_release(v77);
  (*(void (**)(char *, uint64_t))(v142 + 8))(v75, v86);
  v88 = v76;
  *(_QWORD *)&v179 = *(_QWORD *)(v76 + v58[8]);
  v87 = (void *)v179;
  v89 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  v90 = (uint64_t)v153;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v89 - 8) + 56))(v153, 1, 1, v89);
  v91 = sub_327F8(0, (unint64_t *)&qword_3B8710, OS_dispatch_queue_ptr);
  v92 = sub_32914(&qword_3BD130, &qword_3BD0C8, (uint64_t)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
  v93 = sub_436CC();
  v94 = v87;
  v95 = v146;
  v96 = v147;
  Publisher.receive<A>(on:options:)(&v179, v90, v147, v91, v92, v93);
  sub_1459C(v90, &qword_3B2B18);

  (*(void (**)(char *, uint64_t))(v145 + 8))(v84, v96);
  v97 = *(_QWORD *)(v88 + v58[7]);
  v98 = sub_32914(&qword_3BD138, &qword_3BD0D0, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v99 = v148;
  v100 = v97;
  v101 = v150;
  Publisher.prefix(_:)(v100, v150, v98);
  (*(void (**)(char *, uint64_t))(v149 + 8))(v95, v101);
  v102 = sub_32914(&qword_3BD140, &qword_3BD0D8, (uint64_t)&protocol conformance descriptor for Publishers.Output<A>);
  v103 = v155;
  v104 = v152;
  Publisher.collect()(v152, v102);
  (*(void (**)(char *, uint64_t))(v151 + 8))(v99, v104);
  v105 = v165;
  v106 = v166;
  v107 = v167;
  (*(void (**)(char *, uint64_t, uint64_t))(v166 + 16))(v165, v168, v167);
  v108 = v174;
  sub_14510(v88, v174, type metadata accessor for CompositeImageProvider);
  v109 = *(unsigned __int8 *)(v106 + 80);
  v110 = (v109 + 16) & ~v109;
  v111 = (v164 + v178 + v110) & ~v178;
  v112 = swift_allocObject(&unk_383A18, v111 + v173, v177 | v109);
  (*(void (**)(uint64_t, char *, uint64_t))(v106 + 32))(v112 + v110, v105, v107);
  sub_1600E4(v108, v112 + v111);
  v113 = sub_32914(&qword_3BD148, &qword_3BD0E0, (uint64_t)&protocol conformance descriptor for Publishers.Collect<A>);
  v114 = v158;
  v115 = v157;
  Publisher.tryMap<A>(_:)(sub_16071C, v112, v157, v176, v113);
  swift_release(v112);
  v116 = (*(uint64_t (**)(char *, uint64_t))(v156 + 8))(v103, v115);
  v117 = v169;
  ArtworkRequest.prepared.getter(v116);
  v118 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BD0B0);
  v119 = sub_32914(&qword_3BD150, &qword_3BD0E8, (uint64_t)&protocol conformance descriptor for Publishers.TryMap<A, B>);
  v120 = sub_32914(&qword_3BD158, &qword_3BD0B0, (uint64_t)&protocol conformance descriptor for AnyAssetCache<A, B>);
  v121 = v160;
  v122 = v161;
  Publisher.cache<A>(location:cache:overwrite:alwaysAttemptRefresh:)(v117, v88, 1, 0, v161, v118, v119, v120);
  (*(void (**)(char *, uint64_t))(v170 + 8))(v117, v171);
  (*(void (**)(char *, uint64_t))(v159 + 8))(v114, v122);
  v123 = sub_32914(&qword_3BD160, &qword_3BD0F0, (uint64_t)&protocol conformance descriptor for Publishers.CachedAssetPublisher<A, B>);
  v124 = v163;
  v125 = Publisher.eraseToAnyPublisher()(v163, v123);
  (*(void (**)(char *, uint64_t))(v162 + 8))(v121, v124);
  (*(void (**)(char *, uint64_t))(v138 + 8))(v137, v139);
  return v125;
}

uint64_t sub_15FDC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD aBlock[5];
  _QWORD *v30;

  v11 = type metadata accessor for DispatchWorkItemFlags(0);
  v27 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DispatchQoS(0);
  v25 = *(_QWORD *)(v14 - 8);
  v26 = v14;
  __chkstk_darwin(v14);
  v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = swift_allocObject(&unk_383AD0, 32, 7);
  *(_QWORD *)(v17 + 16) = a1;
  *(_QWORD *)(v17 + 24) = a2;
  type metadata accessor for CompositeImageProvider(0);
  v18 = (_QWORD *)swift_allocObject(&unk_383AF8, 56, 7);
  v18[2] = a4;
  v18[3] = a5;
  v18[4] = sub_13B0BC;
  v18[5] = v17;
  v18[6] = a6;
  aBlock[4] = sub_161284;
  v30 = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_2C9F4;
  aBlock[3] = &block_descriptor_15;
  v19 = _Block_copy(aBlock);
  swift_retain();
  swift_bridgeObjectRetain();
  v20 = swift_retain();
  static DispatchQoS.unspecified.getter(v20);
  v28 = _swiftEmptyArrayStorage;
  v21 = sub_F1C0((unint64_t *)&qword_3B4420, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8720);
  v23 = sub_32914((unint64_t *)&qword_3B4430, (uint64_t *)&unk_3B8720, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v28, v22, v23, v11, v21);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v16, v13, v19);
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v13, v11);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v16, v26);
  return swift_release(v30);
}

uint64_t sub_160010()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = (int *)type metadata accessor for CompositeImageProvider(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  v7 = v0 + v4;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BD0B0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  __swift_destroy_boxed_opaque_existential_1((_QWORD *)(v7 + v1[5]));

  swift_release(*(_QWORD *)(v7 + v1[9]));
  swift_bridgeObjectRelease();
  swift_release(*(_QWORD *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_1600E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CompositeImageProvider(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_160128(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v5 = *(_QWORD *)(type metadata accessor for CompositeImageProvider(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_15FDC8(a1, a2, v2 + v6, *(_QWORD *)(v2 + v7), *(_QWORD *)(v2 + v7 + 8), *(_QWORD *)(v2 + ((v7 + 23) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_160198(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t))
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = Data.init(base64Encoded:options:)(a1, a2, 0);
  if (v5 >> 60 == 15)
  {
    v6 = sub_1611B8();
    v7 = swift_allocError(&type metadata for CompositeImageProvider.CompositeImageProviderError, v6, 0, 0);
    *v8 = 0;
    a3(v7, 1);
    return swift_errorRelease(v7);
  }
  else
  {
    v10 = v4;
    v11 = v5;
    v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BD228);
    v13 = sub_1612AC();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)(&v15, v12, v10, v11, v12, v13);
    v14 = v15;
    a3(v15, 0);
    sub_161328(v10, v11);
    return sub_16133C(v14, 0);
  }
}

uint64_t sub_1602B4()
{
  uint64_t v0;
  uint64_t v1;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BD228);
  v1 = sub_32914(&qword_3BD220, &qword_3BD228, (uint64_t)&protocol conformance descriptor for [A]);
  return Sequence.publisher.getter(v0, v1);
}

uint64_t sub_160328(uint64_t *a1)
{
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v5;

  KeyPath = swift_getKeyPath(&unk_2F8EC8);
  v3 = *a1;
  v5 = v3;
  swift_bridgeObjectRetain(v3);
  swift_getAtKeyPath(&v5, KeyPath);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease(v3);
}

uint64_t sub_160398()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1((_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1603BC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v5 = v2[5];
  v6 = v2[6];
  __swift_project_boxed_opaque_existential_1(v2 + 2, v5);
  result = dispatch thunk of ImageProvider.load(artwork:)(a1, v5, v6);
  *a2 = result;
  return result;
}

void sub_160414(uint64_t *a1@<X0>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  void *v16;
  Class isa;
  id v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _BYTE *v25;

  v5 = *a1;
  v6 = (unint64_t)*a1 >> 62;
  if (!v6)
  {
    v7 = *(_QWORD *)((char *)&dword_10 + (v5 & 0xFFFFFFFFFFFFF8));
    swift_bridgeObjectRetain();
    if (v7)
      goto LABEL_3;
LABEL_21:
    swift_bridgeObjectRelease();
    v23 = sub_1611B8();
    v24 = swift_allocError(&type metadata for CompositeImageProvider.CompositeImageProviderError, v23, 0, 0);
    *v25 = 1;
    swift_willThrow(v24);
    return;
  }
  if (v5 < 0)
    v22 = *a1;
  else
    v22 = v5 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  if (!_CocoaArrayWrapper.endIndex.getter(v22))
    goto LABEL_21;
LABEL_3:
  if ((v5 & 0xC000000000000001) != 0)
  {
    v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0);
LABEL_6:
    v9 = v8;
    v10 = swift_bridgeObjectRelease();
    if (v6)
    {
      if (v5 < 0)
        v19 = v5;
      else
        v19 = v5 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
      v20 = _CocoaArrayWrapper.endIndex.getter(v19);
      v10 = swift_bridgeObjectRelease();
      if (v20 != 1)
      {
LABEL_8:
        v11 = swift_bridgeObjectRetain();
        v12 = sub_15E98C(v11);
        v13 = ArtworkRequest.targetSize.getter(v12);
        v15 = v14;
        v16 = (void *)objc_opt_self(UIImage);
        sub_245AC4(v12);
        isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        v18 = objc_msgSend(v16, "combineImages:rowCount:size:border:", isa, *(_QWORD *)(a2 + *(int *)(type metadata accessor for CompositeImageProvider(0) + 24)), 1, v13, v15);

        if (v18)
        {
          swift_bridgeObjectRelease();
LABEL_16:

          *a3 = v18;
          return;
        }
        goto LABEL_24;
      }
    }
    else if (*(_QWORD *)((char *)&dword_10 + (v5 & 0xFFFFFFFFFFFFF8)) != 1)
    {
      goto LABEL_8;
    }
    ArtworkRequest.targetSize.getter(v10);
    v21 = objc_msgSend(v9, "scaleToSize:addBorder:", 1);
    if (v21)
    {
      v18 = v21;
      goto LABEL_16;
    }
    goto LABEL_25;
  }
  if (*(_QWORD *)((char *)&dword_10 + (v5 & 0xFFFFFFFFFFFFF8)))
  {
    v8 = *(id *)(v5 + 32);
    goto LABEL_6;
  }
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
}

uint64_t sub_160638()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = type metadata accessor for ArtworkRequest(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (int *)type metadata accessor for CompositeImageProvider(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v4 + v5 + v8) & ~v8;
  v10 = v9 + *(_QWORD *)(v7 + 64);
  v11 = v3 | v8 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BD0B0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v0 + v9, v12);
  __swift_destroy_boxed_opaque_existential_1((_QWORD *)(v0 + v9 + v6[5]));

  swift_release(*(_QWORD *)(v0 + v9 + v6[9]));
  return swift_deallocObject(v0, v10, v11);
}

void sub_16071C(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(type metadata accessor for ArtworkRequest(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for CompositeImageProvider(0) - 8) + 80);
  sub_160414(a1, v2 + ((v6 + v7 + v8) & ~v8), a2);
}

uint64_t CompositeImageProvider.init(asPartOf:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[5];

  v30 = a1;
  v33 = a2;
  v2 = (int *)type metadata accessor for CompositeImageProvider(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B9B40);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for AssetCaches(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (uint64_t *)((char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BD0B0);
  v31 = *(_QWORD *)(v13 - 8);
  v32 = v13;
  __chkstk_darwin(v13);
  v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = BaseObjectGraph.inject<A>(_:)(v12, v9, v9);
  AssetCaches.preparedArtwork.getter(v16);
  (*(void (**)(_QWORD *, uint64_t))(v10 + 8))(v12, v9);
  v17 = CacheDomain.memory.getter(v5);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v34[0] = v17;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BAA50);
  v19 = sub_32914(&qword_3BAA60, &qword_3BAA50, (uint64_t)&protocol conformance descriptor for InMemoryAssetCache<A, B>);
  AssetCache.eraseToAnyAssetCache()(v18, v19);
  swift_release(v17);
  v20 = type metadata accessor for LibraryImageProvider(0);
  v34[3] = v20;
  v34[4] = &protocol witness table for LibraryImageProvider;
  __swift_allocate_boxed_opaque_existential_2Tm(v34);
  v21 = sub_F1C0(&qword_3B4FF0, (void (*)(uint64_t))&type metadata accessor for LibraryImageProvider, (uint64_t)&protocol conformance descriptor for LibraryImageProvider);
  v22 = v30;
  BaseObjectGraph.inject<A>(_:)(v20, v20, v21);
  sub_327F8(0, (unint64_t *)&qword_3B8710, OS_dispatch_queue_ptr);
  v23 = static OS_dispatch_queue.uiAssetPreparationQueue.getter();
  v25 = v31;
  v24 = v32;
  (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v4, v15, v32);
  sub_150C8((uint64_t)v34, (uint64_t)&v4[v2[5]]);
  *(_QWORD *)&v4[v2[6]] = 2;
  *(_QWORD *)&v4[v2[7]] = 4;
  *(_QWORD *)&v4[v2[8]] = v23;
  v26 = type metadata accessor for JSONDecoder(0);
  swift_allocObject(v26, *(unsigned int *)(v26 + 48), *(unsigned __int16 *)(v26 + 52));
  v27 = JSONDecoder.init()();
  __swift_destroy_boxed_opaque_existential_1(v34);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v15, v24);
  *(_QWORD *)&v4[v2[9]] = v27;
  sub_1600E4((uint64_t)v4, v33);
  return swift_release(v22);
}

unint64_t sub_160A98()
{
  unint64_t result;

  result = qword_3BD168;
  if (!qword_3BD168)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CompositeImageProvider.CompositeImageProviderError);
    atomic_store(result, (unint64_t *)&qword_3BD168);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for CompositeImageProvider(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    v4 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BD0B0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v4, a2, v7);
    v8 = a3[5];
    v9 = *(_OWORD *)((char *)a2 + v8 + 24);
    *(_OWORD *)((char *)v4 + v8 + 24) = v9;
    (**(void (***)(void))(v9 - 8))();
    v10 = a3[7];
    *(uint64_t *)((char *)v4 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    *(uint64_t *)((char *)v4 + v10) = *(uint64_t *)((char *)a2 + v10);
    v11 = a3[8];
    v12 = a3[9];
    v13 = *(void **)((char *)a2 + v11);
    *(uint64_t *)((char *)v4 + v11) = (uint64_t)v13;
    *(uint64_t *)((char *)v4 + v12) = *(uint64_t *)((char *)a2 + v12);
    v14 = v13;
  }
  swift_retain();
  return v4;
}

uint64_t destroy for CompositeImageProvider(uint64_t a1, int *a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BD0B0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  __swift_destroy_boxed_opaque_existential_1((_QWORD *)(a1 + a2[5]));

  return swift_release(*(_QWORD *)(a1 + a2[9]));
}

uint64_t initializeWithCopy for CompositeImageProvider(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BD0B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = *(_OWORD *)(a2 + v7 + 24);
  *(_OWORD *)(a1 + v7 + 24) = v8;
  (**(void (***)(void))(v8 - 8))();
  v9 = a3[7];
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  *(_QWORD *)(a1 + v9) = *(_QWORD *)(a2 + v9);
  v10 = a3[8];
  v11 = a3[9];
  v12 = *(void **)(a2 + v10);
  *(_QWORD *)(a1 + v10) = v12;
  *(_QWORD *)(a1 + v11) = *(_QWORD *)(a2 + v11);
  v13 = v12;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for CompositeImageProvider(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BD0B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  __swift_assign_boxed_opaque_existential_1((_QWORD *)(a1 + a3[5]), (_QWORD *)(a2 + a3[5]));
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  v7 = a3[8];
  v8 = *(void **)(a2 + v7);
  v9 = *(void **)(a1 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  v10 = v8;

  v11 = a3[9];
  v12 = *(_QWORD *)(a1 + v11);
  *(_QWORD *)(a1 + v11) = *(_QWORD *)(a2 + v11);
  swift_retain();
  swift_release(v12);
  return a1;
}

uint64_t initializeWithTake for CompositeImageProvider(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BD0B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  v11 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + 16) = v11;
  *(_QWORD *)(v9 + 32) = *(_QWORD *)(v10 + 32);
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  v12 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  *(_QWORD *)(a1 + v12) = *(_QWORD *)(a2 + v12);
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  return a1;
}

uint64_t assignWithTake for CompositeImageProvider(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BD0B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  __swift_destroy_boxed_opaque_existential_1((_QWORD *)(a1 + v7));
  v10 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)v8 = *(_OWORD *)v9;
  *(_OWORD *)(v8 + 16) = v10;
  *(_QWORD *)(v8 + 32) = *(_QWORD *)(v9 + 32);
  v11 = a3[7];
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  *(_QWORD *)(a1 + v11) = *(_QWORD *)(a2 + v11);
  v12 = a3[8];
  v13 = *(void **)(a1 + v12);
  *(_QWORD *)(a1 + v12) = *(_QWORD *)(a2 + v12);

  v14 = a3[9];
  v15 = *(_QWORD *)(a1 + v14);
  *(_QWORD *)(a1 + v14) = *(_QWORD *)(a2 + v14);
  swift_release(v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for CompositeImageProvider(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_160ECC);
}

uint64_t sub_160ECC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BD0B0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 24);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for CompositeImageProvider(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_160F5C);
}

uint64_t sub_160F5C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = __swift_instantiateConcreteTypeFromMangledName(&qword_3BD0B0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 24) = (a2 - 1);
  return result;
}

void sub_160FDC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[6];

  sub_161078(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = "(";
    v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[5] = (char *)&value witness table for Builtin.NativeObject + 64;
    swift_initStructMetadata(a1, 256, 6, v4, a1 + 16);
  }
}

void sub_161078(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!qword_3BD1D8)
  {
    v2 = type metadata accessor for PreparedArtworkRequest(255);
    v3 = sub_327F8(255, (unint64_t *)&qword_3BA4D0, UIImage_ptr);
    v4 = type metadata accessor for AnyAssetCache(a1, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_3BD1D8);
  }
}

uint64_t storeEnumTagSinglePayload for CompositeImageProvider.CompositeImageProviderError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_161138 + 4 * byte_2F8D45[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_16116C + 4 * byte_2F8D40[v4]))();
}

uint64_t sub_16116C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_161174(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x16117CLL);
  return result;
}

uint64_t sub_161188(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x161190);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_161194(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_16119C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CompositeImageProvider.CompositeImageProviderError()
{
  return &type metadata for CompositeImageProvider.CompositeImageProviderError;
}

unint64_t sub_1611B8()
{
  unint64_t result;

  result = qword_3BD218;
  if (!qword_3BD218)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CompositeImageProvider.CompositeImageProviderError);
    atomic_store(result, (unint64_t *)&qword_3BD218);
  }
  return result;
}

uint64_t sub_1611FC()
{
  return sub_32914(&qword_3BD220, &qword_3BD228, (uint64_t)&protocol conformance descriptor for [A]);
}

uint64_t sub_16122C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_161250()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_release(v0[5]);
  swift_release(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_161284()
{
  uint64_t v0;

  return sub_160198(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void (**)(uint64_t, uint64_t))(v0 + 32));
}

uint64_t block_copy_helper_15(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t block_destroy_helper_15(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_1612AC()
{
  unint64_t result;

  result = qword_3BD230;
  if (!qword_3BD230)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_3BD228);
    sub_F1C0(&qword_3BD238, (void (*)(uint64_t))&type metadata accessor for ArtworkRequest, (uint64_t)&protocol conformance descriptor for ArtworkRequest);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A]);
    atomic_store(result, (unint64_t *)&qword_3BD230);
  }
  return result;
}

uint64_t sub_161328(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_31BA4(result, a2);
  return result;
}

uint64_t sub_16133C(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
    return swift_errorRelease(a1);
  else
    return swift_bridgeObjectRelease(a1);
}

uint64_t sub_161348(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ModernShelf(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t *LegacyEpisodeLockup.__allocating_init(deserializing:using:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  return LegacyEpisodeLockup.init(deserializing:using:)(a1, a2);
}

uint64_t ArtworkModel.deduped(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;

  v4 = v2[1];
  v5 = a1[1];
  v6 = *v2 == *a1 && v4 == v5;
  if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v2, v4, *a1, v5, 0) & 1) != 0)
  {
    v7 = type metadata accessor for ArtworkModel(0);
    v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56);
    v9 = a2;
    v10 = 1;
  }
  else
  {
    sub_BE440((uint64_t)v2, a2);
    v7 = type metadata accessor for ArtworkModel(0);
    v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56);
    v9 = a2;
    v10 = 0;
  }
  return v8(v9, v10, 1, v7);
}

uint64_t LegacyEpisodeLockup.dedupedEpisodeArtwork.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  unsigned int (*v16)(char *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v22 - v7;
  v9 = type metadata accessor for ArtworkModel(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (uint64_t *)((char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v11);
  v15 = (uint64_t *)((char *)&v22 - v14);
  sub_267BC(v1 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_episodeArtwork, (uint64_t)v8, &qword_3BEB70);
  v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  if (v16(v8, 1, v9) == 1)
  {
    sub_1459C((uint64_t)v8, &qword_3BEB70);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(a1, 1, 1, v9);
  }
  else
  {
    sub_14614((uint64_t)v8, (uint64_t)v15);
    sub_267BC(v1 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup_icon, (uint64_t)v6, &qword_3BEB70);
    if (v16(v6, 1, v9) == 1)
    {
      sub_1459C((uint64_t)v6, &qword_3BEB70);
      sub_14614((uint64_t)v15, a1);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v10 + 56))(a1, 0, 1, v9);
    }
    else
    {
      sub_14614((uint64_t)v6, (uint64_t)v13);
      v18 = v15[1];
      v19 = v13[1];
      v20 = *v15 == *v13 && v18 == v19;
      if (v20 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v15, v18, *v13, v19, 0) & 1) != 0)
      {
        v21 = 1;
      }
      else
      {
        sub_BE440((uint64_t)v15, a1);
        v21 = 0;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(a1, v21, 1, v9);
      sub_3E4A4((uint64_t)v13);
      return sub_3E4A4((uint64_t)v15);
    }
  }
}

_QWORD *LegacyEpisodeLockup.releaseDate.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v4;

  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup_lazyReleaseDate))
    return LazyDate.value.getter(a1);
  v4 = type metadata accessor for Date(0);
  return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, 1, 1, v4);
}

uint64_t LegacyEpisodeLockup.init(adamId:episodeNumber:seasonNumber:episodeType:mediaType:icon:showUberArtwork:episodeArtwork:title:subtitles:ordinal:rating:buttonAction:clickAction:titleAction:summaryAction:playAction:contextAction:previewAction:subtitleAction:caption:summary:secondSummary:transcript:isExplicit:duration:isMultiEpisode:playedTextStyle:episodeEntitlementState:hasFreeVersion:subscriptionName:channelName:showTitle:showDisplayType:shelfUniqueId:releaseDate:showTypeIsSerial:listenNowReason:listContext:referenceTime:playerTime:thinClientEpisodeState:impressionMetrics:)(_QWORD *a1, uint64_t a2, char a3, uint64_t a4, char a5, char a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,void *a28,void *a29,unsigned __int8 a30,uint64_t a31,char a32,unsigned __int8 a33,unsigned __int8 *a34,uint64_t a35,unsigned __int8 a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,unsigned __int8 a43,uint64_t a44,uint64_t a45,uint64_t a46,unsigned __int8 a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55)
{
  uint64_t v55;

  v55 = sub_163E34(a1, a2, a3 & 1, a4, a5 & 1, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16 | ((HIDWORD(a16) & 1) << 32), a17, a18, a19,
          a20,
          a21,
          a22,
          a23,
          a24,
          a25,
          a26,
          a27,
          a28,
          a29,
          a30,
          a31,
          a32 & 1,
          a33,
          a34,
          a35,
          a36,
          a37,
          a38,
          a39,
          a40,
          a41,
          a42,
          a43,
          a44,
          a45,
          a46,
          a47,
          a48,
          a49,
          a50,
          a51 & 1,
          a52,
          a53 & 1,
          a54,
          a55);

  swift_release(a20);
  swift_release(a19);
  return v55;
}

uint64_t LegacyEpisodeLockup.deinit()
{
  uint64_t v0;

  v0 = LegacyLockup.deinit();
  sub_1459C(v0 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_showUberArtwork, &qword_3BEB70);
  swift_bridgeObjectRelease();

  sub_1459C(v0 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup__titleAction, &qword_3B3C88);
  sub_1459C(v0 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup__summaryAction, &qword_3B3C88);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1459C(v0 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_listenNowReason, &qword_3B81E8);
  sub_1459C(v0 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_episodeArtwork, &qword_3BEB70);
  sub_1459C(v0 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_listContext, &qword_3B24F8);
  sub_1459C(v0 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_thinClientEpisodeState, &qword_3BA278);
  return v0;
}

void LegacyEpisodeLockup.init(id:adamId:isExplicit:icon:title:subtitles:eyebrow:titleAccessibilityLabel:genreNames:ordinal:releaseDate:releaseFrequency:rating:ratingCount:buttonAction:clickAction:contextAction:playAction:previewAction:subtitleAction:impressionMetrics:)()
{
  _swift_stdlib_reportUnimplementedInitializer("ShelfKit.LegacyEpisodeLockup", 28, "init(id:adamId:isExplicit:icon:title:subtitles:eyebrow:titleAccessibilityLabel:genreNames:ordinal:releaseDate:releaseFrequency:rating:ratingCount:buttonAction:clickAction:contextAction:playAction:previewAction:subtitleAction:impressionMetrics:)", 244, 0);
  __break(1u);
}

uint64_t sub_161A04()
{
  return sub_161A1C(&OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup__titleAction);
}

uint64_t sub_161A10()
{
  return sub_161A1C(&OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup__summaryAction);
}

uint64_t sub_161A1C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v8;
  _BYTE v9[24];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3C88);
  __chkstk_darwin(v3);
  v5 = &v9[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = v1 + *a1;
  swift_beginAccess(v6, v9, 0, 0);
  sub_267BC(v6, (uint64_t)v5, &qword_3B3C88);
  Lazy.wrappedValue.getter(&v8, v3);
  sub_1459C((uint64_t)v5, &qword_3B3C88);
  return v8;
}

uint64_t sub_161ADC()
{
  uint64_t v0;
  unsigned __int8 *v1;
  _BYTE v3[24];

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_disabled);
  swift_beginAccess(v0 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_disabled, v3, 0, 0);
  return *v1;
}

uint64_t sub_161B20(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;
  _BYTE v5[24];

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_disabled);
  result = swift_beginAccess(v3, v5, 1, 0);
  *v3 = a1;
  return result;
}

uint64_t (*sub_161B68(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_disabled, a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t *LegacyEpisodeLockup.init(deserializing:using:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  void (*v56)(char *, uint64_t, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(char *, uint64_t);
  uint64_t v67;
  uint64_t *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  objc_class *v76;
  char Attributed;
  id v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void (*v84)(char *, uint64_t);
  uint64_t v85;
  uint64_t v86;
  objc_class *v87;
  char v88;
  id v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  char v98;
  objc_class *v99;
  char v100;
  id v101;
  uint64_t v102;
  uint64_t *v103;
  char *v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  char v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  void (*v128)(uint64_t, uint64_t);
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  char v148;
  char v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  char v159;
  uint64_t v160;
  uint64_t v161;
  char v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t *v177;
  char *v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  char v190;
  uint64_t v191;
  unint64_t v192;
  char v193;
  uint64_t v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t *v199;
  uint64_t v200;
  uint64_t v201;
  void (*v202)(char *, char *, uint64_t);
  char *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  char v211;
  char v212;
  uint64_t v213;
  void (*v214)(uint64_t, uint64_t);
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  char v218;
  char v219;
  uint64_t v220;
  uint64_t v221;
  char *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  void (*v229)(uint64_t, uint64_t);
  uint64_t v230;
  double v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  char *v236;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  char *v242;
  char *v243;
  char *v244;
  char *v245;
  char *v246;
  char *v247;
  char *v248;
  char *v249;
  char *v250;
  char *Instance15byDeserializing5usingACSg9JetEngine10JSONObjectV_AH11JSONContextVtFZ_0;
  char *v252;
  char *v253;
  _QWORD *v254;
  uint64_t v255;
  uint64_t v256;
  char *v257;
  uint64_t *v258;
  char *v259;
  uint64_t v260;
  uint64_t v261;
  char *v262;
  uint64_t v263;
  char *v264;
  uint64_t v265;
  void (*v266)(char *, uint64_t);
  uint64_t *v267;
  char *v268;
  void (*v269)(char *, uint64_t, uint64_t);
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;

  v3 = v2;
  v273 = a2;
  v274 = a1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BA278);
  __chkstk_darwin(v4);
  v259 = (char *)&v238 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BD250);
  __chkstk_darwin(v6);
  v254 = (uint64_t *)((char *)&v238 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v256 = type metadata accessor for SectionContext(0);
  v255 = *(_QWORD *)(v256 - 8);
  __chkstk_darwin(v256);
  v243 = (char *)&v238 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
  __chkstk_darwin(v9);
  v266 = (void (*)(char *, uint64_t))((char *)&v238 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v272 = type metadata accessor for JSONContext(0);
  v11 = *(_QWORD *)(v272 - 8);
  v12 = __chkstk_darwin(v272);
  v258 = (uint64_t *)((char *)&v238 - ((unint64_t)(v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v245 = v13;
  __chkstk_darwin(v12);
  v15 = (char *)&v238 - v14;
  v16 = type metadata accessor for JSONObject(0);
  v270 = *(_QWORD *)(v16 - 8);
  v271 = v16;
  v17 = *(_QWORD *)(v270 + 64);
  v18 = __chkstk_darwin(v16);
  v257 = (char *)&v238 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v18);
  v253 = (char *)&v238 - v20;
  v21 = __chkstk_darwin(v19);
  v247 = (char *)&v238 - v22;
  v23 = __chkstk_darwin(v21);
  v252 = (char *)&v238 - v24;
  v25 = __chkstk_darwin(v23);
  v262 = (char *)&v238 - v26;
  v27 = __chkstk_darwin(v25);
  v268 = (char *)&v238 - v28;
  v29 = __chkstk_darwin(v27);
  Instance15byDeserializing5usingACSg9JetEngine10JSONObjectV_AH11JSONContextVtFZ_0 = (char *)&v238 - v30;
  v31 = __chkstk_darwin(v29);
  v244 = (char *)&v238 - v32;
  v33 = __chkstk_darwin(v31);
  v250 = (char *)&v238 - v34;
  v35 = __chkstk_darwin(v33);
  v249 = (char *)&v238 - v36;
  v37 = __chkstk_darwin(v35);
  v248 = (char *)&v238 - v38;
  __chkstk_darwin(v37);
  v40 = (char *)&v238 - v39;
  v41 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3C88);
  __chkstk_darwin(v41);
  v43 = (char *)&v238 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = (uint64_t)v3 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup__titleAction;
  v276 = 0;
  v45 = type metadata accessor for Action(0);
  swift_retain(v3);
  Lazy.init(wrappedValue:)(&v276, v45);
  v265 = v44;
  sub_15BD4((uint64_t)v43, v44, &qword_3B3C88);
  v46 = (uint64_t)v3 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup__summaryAction;
  v276 = 0;
  v263 = v45;
  Lazy.init(wrappedValue:)(&v276, v45);
  v246 = v43;
  sub_15BD4((uint64_t)v43, v46, &qword_3B3C88);
  *((_BYTE *)v3 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_disabled) = 0;
  JSONObject.subscript.getter(0x707954616964656DLL, 0xE900000000000065);
  v47 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v47(v15, v273, v272);
  sub_E9C5C();
  ExpressibleByJSON.init(tryDeserializing:using:)(v40, v15, &type metadata for EpisodeMediaType);
  if (v276 == 3)
  {
    v48 = type metadata accessor for JSONError(0);
    v49 = sub_F1C0((unint64_t *)&qword_3B0CB0, (void (*)(uint64_t))&type metadata accessor for JSONError, (uint64_t)&protocol conformance descriptor for JSONError);
    swift_allocError(v48, v49, 0, 0);
    v51 = v50;
    v52 = *v3;
    swift_release(v3);
    *v51 = 0x707954616964656DLL;
    v51[1] = 0xE900000000000065;
    v51[2] = v52;
    v53 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v48 - 8) + 104))(v51, enum case for JSONError.missingProperty(_:), v48);
    swift_willThrow(v53);
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v273, v272);
    (*(void (**)(uint64_t, uint64_t))(v270 + 8))(v274, v271);
    v54 = &qword_3B3C88;
    sub_1459C(v265, &qword_3B3C88);
    sub_1459C(v46, &qword_3B3C88);
    v55 = type metadata accessor for LegacyEpisodeLockup(0);
    swift_deallocPartialClassInstance(v3, v55, *(unsigned int *)(*v3 + 48), *(unsigned __int16 *)(*v3 + 52));
    return v54;
  }
  v239 = v17;
  v240 = v46;
  v260 = v11;
  LODWORD(v242) = v276;
  v56 = v47;
  v57 = type metadata accessor for ArtworkModel(0);
  v267 = v3;
  JSONObject.subscript.getter(0x72656255776F6873, 0xEF6B726F77747241);
  v59 = v272;
  v58 = v273;
  v56(v15, v273, v272);
  v241 = sub_F1C0((unint64_t *)&qword_3B2828, (void (*)(uint64_t))&type metadata accessor for ArtworkModel, (uint64_t)&protocol conformance descriptor for ArtworkModel);
  v60 = (uint64_t)v266;
  ExpressibleByJSON.init(tryDeserializing:using:)(v40, v15, v57);
  sub_15BD4(v60, (uint64_t)v3 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_showUberArtwork, &qword_3BEB70);
  JSONObject.subscript.getter(0x4165646F73697065, 0xEE006B726F777472);
  v269 = v56;
  v56(v15, v58, v59);
  v264 = v15;
  ExpressibleByJSON.init(tryDeserializing:using:)(v40, v15, v57);
  v61 = v267;
  sub_15BD4(v60, (uint64_t)v267 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_episodeArtwork, &qword_3BEB70);
  *((_BYTE *)v61 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_mediaType) = (_BYTE)v242;
  v62 = JSONObject.subscript.getter(0x6E6F6974706163, 0xE700000000000000);
  v63 = JSONObject.string.getter(v62);
  v65 = v64;
  v66 = *(void (**)(char *, uint64_t))(v270 + 8);
  v242 = v40;
  v67 = v271;
  v66(v40, v271);
  v68 = (uint64_t *)((char *)v61 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_caption);
  *v68 = v63;
  v68[1] = v65;
  v69 = v248;
  v70 = JSONObject.subscript.getter(0x7972616D6D7573, 0xE700000000000000);
  v71 = JSONObject.string.getter(v70);
  v73 = v72;
  v266 = v66;
  v66(v69, v67);
  v74 = v67;
  v75 = 0;
  if (v73)
  {
    v76 = (objc_class *)type metadata accessor for LanguageAwareString(0);
    Attributed = static LanguageAwareString.alwaysGenerateAttributedString.getter();
    v78 = objc_allocWithZone(v76);
    v75 = LanguageAwareString.init(_:baseParagraphStyle:generateAttributedString:)(v71, v73, 0, Attributed & 1);
  }
  *(uint64_t *)((char *)v61 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_summary) = v75;
  v79 = v249;
  v80 = JSONObject.subscript.getter(0x7553646E6F636573, 0xED00007972616D6DLL);
  v81 = JSONObject.string.getter(v80);
  v83 = v82;
  v84 = v266;
  v266(v79, v74);
  v85 = (uint64_t)v242;
  v86 = 0;
  if (v83)
  {
    v87 = (objc_class *)type metadata accessor for LanguageAwareString(0);
    v88 = static LanguageAwareString.alwaysGenerateAttributedString.getter();
    v89 = objc_allocWithZone(v87);
    v86 = LanguageAwareString.init(_:baseParagraphStyle:generateAttributedString:)(v81, v83, 0, v88 & 1);
  }
  *(uint64_t *)((char *)v61 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_secondSummary) = v86;
  v90 = v250;
  v91 = JSONObject.subscript.getter(0x697263736E617274, 0xEA00000000007470);
  v92 = JSONObject.string.getter(v91);
  v94 = v93;
  v95 = v271;
  v84(v90, v271);
  if (!v94)
    goto LABEL_12;
  v96 = v244;
  v97 = JSONObject.subscript.getter(0x63696C7078457369, 0xEA00000000007469);
  v98 = JSONObject.BOOL.getter(v97);
  v84(v96, v95);
  if ((v98 & 1) != 0
    && (objc_msgSend((id)objc_opt_self(PFRestrictionsUtil), "isExplicitContentAllowed") & 1) == 0)
  {
    swift_bridgeObjectRelease(v94);
LABEL_12:
    v102 = 0;
    goto LABEL_13;
  }
  v99 = (objc_class *)type metadata accessor for LanguageAwareString(0);
  v100 = static LanguageAwareString.alwaysGenerateAttributedString.getter();
  v101 = objc_allocWithZone(v99);
  v102 = LanguageAwareString.init(_:baseParagraphStyle:generateAttributedString:)(v92, v94, 0, v100 & 1);
LABEL_13:
  v103 = v267;
  *(uint64_t *)((char *)v267 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_transcript) = v102;
  v104 = Instance15byDeserializing5usingACSg9JetEngine10JSONObjectV_AH11JSONContextVtFZ_0;
  v105 = JSONObject.subscript.getter(0x4569746C754D7369, 0xEE0065646F736970);
  v106 = JSONObject.BOOL.getter(v105);
  v107 = v271;
  v84(v104, v271);
  *((_BYTE *)v103 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_isMultiEpisode) = v106 & 1;
  *((_BYTE *)v103 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_playedTextStyle) = 0;
  v108 = v268;
  v109 = JSONObject.subscript.getter(0x746341656C746974, 0xEB000000006E6F69);
  v110 = JSONObject.isNull.getter(v109);
  v111 = v260;
  v112 = v270;
  if ((v110 & 1) != 0)
  {
    JSONObject.subscript.getter(0x417972616D6D7573, 0xED00006E6F697463);
    v113 = v273;
    Instance15byDeserializing5usingACSg9JetEngine10JSONObjectV_AH11JSONContextVtFZ_0 = (char *)_s8ShelfKit6ActionC17tryToMakeInstance15byDeserializing5usingACSg9JetEngine10JSONObjectV_AH11JSONContextVtFZ_0(v85, v273);
    v84((char *)v85, v107);
    v114 = v265;
    swift_beginAccess(v265, &v276, 33, 0);
    sub_1459C(v114, &qword_3B3C88);
    v275 = 0;
    Lazy.init(wrappedValue:)(&v275, v263);
    swift_endAccess(&v276);
    JSONObject.subscript.getter(0x417972616D6D7573, 0xED00006E6F697463);
    (*(void (**)(char *, uint64_t, uint64_t))(v112 + 16))(v262, v85, v107);
    v115 = v264;
    v116 = v272;
    v269(v264, v113, v272);
    v117 = *(unsigned __int8 *)(v112 + 80);
    v118 = (v117 + 16) & ~v117;
    v119 = *(unsigned __int8 *)(v111 + 80);
    v120 = v112;
    v121 = (v239 + v119 + v118) & ~v119;
    v122 = swift_allocObject(&unk_383C20, &v245[v121], v117 | v119 | 7);
    (*(void (**)(uint64_t, char *, uint64_t))(v120 + 32))(v122 + v118, v262, v107);
    v123 = v122 + v121;
    v124 = v267;
    v125 = v115;
    v126 = v274;
    (*(void (**)(uint64_t, char *, uint64_t))(v111 + 32))(v123, v125, v116);
    v127 = (uint64_t)v246;
    Lazy.init(_:)(sub_164A30, v122, v263);
    swift_release(Instance15byDeserializing5usingACSg9JetEngine10JSONObjectV_AH11JSONContextVtFZ_0);
    v128 = (void (*)(uint64_t, uint64_t))v266;
    v266((char *)v85, v107);
    v129 = v240;
    swift_beginAccess(v240, &v276, 33, 0);
    v130 = v127;
  }
  else
  {
    Instance15byDeserializing5usingACSg9JetEngine10JSONObjectV_AH11JSONContextVtFZ_0 = *(char **)(v270 + 16);
    ((void (*)(uint64_t, char *, uint64_t))Instance15byDeserializing5usingACSg9JetEngine10JSONObjectV_AH11JSONContextVtFZ_0)(v85, v108, v107);
    v131 = v264;
    v132 = v112;
    v133 = v272;
    v269(v264, v273, v272);
    v134 = *(unsigned __int8 *)(v112 + 80);
    v135 = (v134 + 16) & ~v134;
    v136 = *(unsigned __int8 *)(v111 + 80);
    v137 = (v239 + v136 + v135) & ~v136;
    v250 = &v245[v137];
    v249 = (char *)(v134 | v136 | 7);
    v138 = swift_allocObject(&unk_383BD0, &v245[v137], v249);
    v248 = *(char **)(v132 + 32);
    ((void (*)(uint64_t, uint64_t, uint64_t))v248)(v138 + v135, v85, v107);
    v245 = *(char **)(v111 + 32);
    ((void (*)(uint64_t, char *, uint64_t))v245)(v138 + v137, v131, v133);
    v139 = (uint64_t)v246;
    Lazy.init(_:)(sub_164A30, v138, v263);
    v140 = v265;
    swift_beginAccess(v265, &v276, 33, 0);
    sub_164A44(v139, v140);
    swift_endAccess(&v276);
    JSONObject.subscript.getter(0x417972616D6D7573, 0xED00006E6F697463);
    v141 = v262;
    ((void (*)(char *, uint64_t, uint64_t))Instance15byDeserializing5usingACSg9JetEngine10JSONObjectV_AH11JSONContextVtFZ_0)(v262, v85, v107);
    v269(v131, v273, v133);
    v142 = swift_allocObject(&unk_383BF8, v250, v249);
    v143 = v142 + v135;
    v126 = v274;
    ((void (*)(uint64_t, char *, uint64_t))v248)(v143, v141, v107);
    v144 = v142 + v137;
    v124 = v267;
    ((void (*)(uint64_t, char *, uint64_t))v245)(v144, v131, v133);
    Lazy.init(_:)(sub_164A30, v142, v263);
    v128 = (void (*)(uint64_t, uint64_t))v266;
    v266((char *)v85, v107);
    v129 = v240;
    swift_beginAccess(v240, &v276, 33, 0);
    v130 = v139;
  }
  sub_164A44(v130, v129);
  swift_endAccess(&v276);
  v145 = v247;
  v146 = JSONObject.subscript.getter(0x6E6F697461727564, 0xE800000000000000);
  v147 = JSONObject.double.getter(v146);
  v149 = v148;
  v128(v85, v107);
  v150 = (uint64_t)v124 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_duration;
  *(_QWORD *)v150 = v147;
  v265 = v150;
  *(_BYTE *)(v150 + 8) = v149 & 1;
  v151 = v252;
  v152 = JSONObject.subscript.getter(0xD000000000000010, 0x800000000030E330);
  v153 = JSONObject.string.getter(v152);
  v155 = v154;
  v128((uint64_t)v151, v107);
  if (v155)
    v156 = v153;
  else
    v156 = 0;
  if (v155)
    v157 = v155;
  else
    v157 = 0xE000000000000000;
  v158 = MTEpisodeEntitlementState.init(_:)(v156, v157);
  if ((v159 & 1) != 0)
    v160 = 0;
  else
    v160 = v158;
  *(uint64_t *)((char *)v124 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_episodeEntitlementState) = v160;
  v161 = JSONObject.subscript.getter(0x5665657246736168, 0xEE006E6F69737265);
  v162 = JSONObject.BOOL.getter(v161);
  v128((uint64_t)v145, v107);
  *((_BYTE *)v124 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_hasFreeVersion) = (v162 == 2) | v162 & 1;
  v163 = JSONObject.subscript.getter(0xD000000000000010, 0x800000000030E350);
  v164 = JSONObject.string.getter(v163);
  v166 = v165;
  v128(v85, v107);
  v167 = (uint64_t *)((char *)v124 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_subscriptionName);
  *v167 = v164;
  v167[1] = v166;
  v168 = JSONObject.subscript.getter(0x4E6C656E6E616863, 0xEB00000000656D61);
  v169 = JSONObject.string.getter(v168);
  v171 = v170;
  v128(v85, v107);
  v172 = (uint64_t *)((char *)v124 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_channelName);
  *v172 = v169;
  v172[1] = v171;
  v173 = JSONObject.subscript.getter(0x6C746954776F6873, 0xE900000000000065);
  v174 = JSONObject.string.getter(v173);
  v176 = v175;
  v128(v85, v107);
  v177 = (uint64_t *)((char *)v124 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_showTitle);
  *v177 = v174;
  v177[1] = v176;
  JSONObject.subscript.getter(0x70736944776F6873, 0xEF6570795479616CLL);
  v178 = v264;
  v179 = v85;
  v269(v264, v273, v272);
  sub_164A90();
  ExpressibleByJSON.init(tryDeserializing:using:)(v85, v178, &type metadata for DisplayType);
  *((_BYTE *)v124 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_showDisplayType) = v276;
  v180 = v253;
  v181 = JSONObject.subscript.getter(0x6C61697265537369, 0xE800000000000000);
  LOBYTE(v178) = JSONObject.BOOL.getter(v181);
  v128((uint64_t)v180, v107);
  *((_BYTE *)v124 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_showTypeIsSerial) = v178 & 1;
  v182 = (uint64_t)v124 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_listenNowReason;
  v183 = type metadata accessor for EpisodeListenNowReason(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v183 - 8) + 56))(v182, 1, 1, v183);
  v184 = JSONObject.subscript.getter(0x4E65646F73697065, 0xED00007265626D75);
  v185 = JSONObject.int64.getter(v184);
  LOBYTE(v176) = v186;
  v128(v179, v107);
  v187 = (uint64_t)v124 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_episodeNumber;
  *(_QWORD *)v187 = v185;
  *(_BYTE *)(v187 + 8) = v176 & 1;
  v188 = JSONObject.subscript.getter(0x754E6E6F73616573, 0xEC0000007265626DLL);
  v189 = JSONObject.int64.getter(v188);
  LOBYTE(v176) = v190;
  v128(v179, v107);
  v191 = (uint64_t)v124 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_seasonNumber;
  *(_QWORD *)v191 = v189;
  *(_BYTE *)(v191 + 8) = v176 & 1;
  JSONObject.subscript.getter(0x5465646F73697065, 0xEB00000000657079);
  v192 = sub_E2640();
  JSONObject.stringEnumOrNil<A>()(&v276, &type metadata for EpisodeType, v192);
  v128(v179, v107);
  v193 = v276;
  if (v276 == 3)
    v193 = 1;
  *((_BYTE *)v124 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_episodeType) = v193;
  JSONObject.subscript.getter(0xD000000000000015, 0x8000000000311480);
  v194 = sub_F1C0(&qword_3BD260, (void (*)(uint64_t))&type metadata accessor for SectionContext, (uint64_t)&protocol conformance descriptor for SectionContext);
  v195 = v254;
  v196 = v256;
  JSONObject.stringEnumOrNil<A>()(v254, v256, v194);
  v197 = v179;
  v128(v179, v107);
  v198 = v255;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v255 + 48))((char *)v195, 1, v196) == 1)
  {
    sub_1459C((uint64_t)v195, &qword_3BD250);
    v199 = v124;
    v200 = (uint64_t)v124 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_listContext;
    v201 = type metadata accessor for EyebrowBuilder.ListContext(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v201 - 8) + 56))(v200, 1, 1, v201);
  }
  else
  {
    v202 = *(void (**)(char *, char *, uint64_t))(v198 + 32);
    v203 = v243;
    v202(v243, (char *)v195, v196);
    v204 = (uint64_t)v124 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_listContext;
    v202((char *)v124 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_listContext, v203, v196);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v198 + 56))(v204, 0, 1, v196);
    v205 = enum case for EyebrowBuilder.ListContext.show(_:);
    v206 = type metadata accessor for EyebrowBuilder.ListContext(0);
    v199 = v124;
    v207 = *(_QWORD *)(v206 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v207 + 104))(v204, v205, v206);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v207 + 56))(v204, 0, 1, v206);
  }
  v208 = v197;
  v209 = JSONObject.subscript.getter(0x636E657265666572, 0xED0000656D695465);
  v210 = JSONObject.double.getter(v209);
  v212 = v211;
  v213 = v271;
  v214 = (void (*)(uint64_t, uint64_t))v266;
  v266((char *)v197, v271);
  v215 = (uint64_t)v199 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_referenceTime;
  *(_QWORD *)v215 = v210;
  *(_BYTE *)(v215 + 8) = v212 & 1;
  v216 = JSONObject.subscript.getter(0x6954726579616C70, 0xEA0000000000656DLL);
  v217 = JSONObject.double.getter(v216);
  v219 = v218;
  v214(v197, v213);
  v220 = (uint64_t)v199 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_playerTime;
  *(_QWORD *)v220 = v217;
  *(_BYTE *)(v220 + 8) = v219 & 1;
  v221 = type metadata accessor for PodcastPlaybackPositionDataAttributes(0);
  JSONObject.subscript.getter(0xD000000000000010, 0x80000000003114A0);
  v222 = v264;
  v223 = v272;
  v224 = v273;
  v269(v264, v273, v272);
  sub_F1C0(&qword_3BD268, (void (*)(uint64_t))&type metadata accessor for PodcastPlaybackPositionDataAttributes, (uint64_t)&protocol conformance descriptor for PodcastPlaybackPositionDataAttributes);
  ExpressibleByJSON.init(tryDeserializing:using:)(v208, v222, v221);
  v225 = v276;
  v226 = JSONObject.subscript.getter(0x64657661537369, 0xE700000000000000);
  v227 = JSONObject.BOOL.getter(v226);
  v228 = v208;
  v229 = v214;
  v230 = v271;
  v229(v228, v271);
  if (*(_BYTE *)(v265 + 8))
    v231 = 0.0;
  else
    v231 = *(double *)v265;
  v232 = swift_retain(v225);
  v233 = (uint64_t)v259;
  ThinClientEpisodeStateModel.init(playbackData:duration:isBookmarked:)(v232, v227, v231);
  sub_15BD4(v233, (uint64_t)v199 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_thinClientEpisodeState, &qword_3BA278);
  swift_release(v199);
  v234 = (uint64_t)v257;
  (*(void (**)(char *, uint64_t, uint64_t))(v270 + 16))(v257, v126, v230);
  v54 = v258;
  v269((char *)v258, v224, v223);
  v235 = v261;
  v236 = LegacyLockup.init(deserializing:using:)(v234, (uint64_t)v54);
  if (!v235)
    v54 = (uint64_t *)v236;
  swift_release(v225);
  (*(void (**)(uint64_t, uint64_t))(v260 + 8))(v224, v223);
  v229(v126, v230);
  v229((uint64_t)v268, v230);
  return v54;
}

uint64_t LegacyEpisodeLockup.__allocating_init(adamId:episodeNumber:seasonNumber:episodeType:mediaType:icon:showUberArtwork:episodeArtwork:title:subtitles:ordinal:rating:buttonAction:clickAction:titleAction:summaryAction:playAction:contextAction:previewAction:subtitleAction:caption:summary:secondSummary:transcript:isExplicit:duration:isMultiEpisode:playedTextStyle:episodeEntitlementState:hasFreeVersion:subscriptionName:channelName:showTitle:showDisplayType:shelfUniqueId:releaseDate:showTypeIsSerial:listenNowReason:listContext:referenceTime:playerTime:thinClientEpisodeState:impressionMetrics:)(_QWORD *a1, uint64_t a2, char a3, uint64_t a4, char a5, char a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,void *a28,void *a29,unsigned __int8 a30,uint64_t a31,char a32,unsigned __int8 a33,unsigned __int8 *a34,uint64_t a35,unsigned __int8 a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,unsigned __int8 a43,uint64_t a44,uint64_t a45,uint64_t a46,unsigned __int8 a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55)
{
  uint64_t v55;
  uint64_t v56;
  int v58;
  int v59;

  v58 = a3 & 1;
  v59 = a5 & 1;
  swift_allocObject(v55, *(unsigned int *)(v55 + 48), *(unsigned __int16 *)(v55 + 52));
  v56 = sub_163E34(a1, a2, v58, a4, v59, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16 | ((HIDWORD(a16) & 1) << 32), a17, a18, a19,
          a20,
          a21,
          a22,
          a23,
          a24,
          a25,
          a26,
          a27,
          a28,
          a29,
          a30,
          a31,
          a32 & 1,
          a33,
          a34,
          a35,
          a36,
          a37,
          a38,
          a39,
          a40,
          a41,
          a42,
          a43,
          a44,
          a45,
          a46,
          a47,
          a48,
          a49,
          a50,
          a51 & 1,
          a52,
          a53 & 1,
          a54,
          a55);

  swift_release(a20);
  swift_release(a19);
  return v56;
}

uint64_t LegacyEpisodeLockup.episodeNumber.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_episodeNumber);
}

uint64_t LegacyEpisodeLockup.seasonNumber.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_seasonNumber);
}

uint64_t LegacyEpisodeLockup.episodeType.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_episodeType);
}

uint64_t LegacyEpisodeLockup.showUberArtwork.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_267BC(v1 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_showUberArtwork, a1, &qword_3BEB70);
}

uint64_t LegacyEpisodeLockup.caption.getter()
{
  return sub_1CCE8(&OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_caption);
}

void *LegacyEpisodeLockup.summary.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_summary);
  v2 = v1;
  return v1;
}

void *LegacyEpisodeLockup.secondSummary.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_secondSummary);
  v2 = v1;
  return v1;
}

void *LegacyEpisodeLockup.transcript.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_transcript);
  v2 = v1;
  return v1;
}

uint64_t sub_163638@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X3>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  _BYTE v12[24];

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3C88);
  __chkstk_darwin(v6);
  v8 = &v12[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = *a1 + *a2;
  swift_beginAccess(v9, v12, 0, 0);
  sub_267BC(v9, (uint64_t)v8, &qword_3B3C88);
  Lazy.wrappedValue.getter(&v11, v6);
  result = sub_1459C((uint64_t)v8, &qword_3B3C88);
  *a3 = v11;
  return result;
}

uint64_t sub_163708(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[24];
  uint64_t v9;

  v5 = *a2;
  v9 = *a1;
  swift_beginAccess(v5 + *a5, v8, 33, 0);
  swift_retain();
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3C88);
  Lazy.wrappedValue.setter(&v9, v6);
  return swift_endAccess(v8);
}

uint64_t LegacyEpisodeLockup.isMultiEpisode.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_isMultiEpisode);
}

void LegacyEpisodeLockup.playedTextStyle.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_playedTextStyle);
}

uint64_t LegacyEpisodeLockup.mediaType.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_mediaType);
}

uint64_t LegacyEpisodeLockup.hasFreeVersion.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_hasFreeVersion);
}

uint64_t LegacyEpisodeLockup.subscriptionName.getter()
{
  return sub_1CCE8(&OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_subscriptionName);
}

uint64_t LegacyEpisodeLockup.channelName.getter()
{
  return sub_1CCE8(&OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_channelName);
}

uint64_t LegacyEpisodeLockup.showTitle.getter()
{
  return sub_1CCE8(&OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_showTitle);
}

uint64_t LegacyEpisodeLockup.showDisplayType.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_showDisplayType);
}

uint64_t LegacyEpisodeLockup.showTypeIsSerial.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_showTypeIsSerial);
}

uint64_t LegacyEpisodeLockup.listenNowReason.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_267BC(v1 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_listenNowReason, a1, &qword_3B81E8);
}

uint64_t LegacyEpisodeLockup.episodeArtwork.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_267BC(v1 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_episodeArtwork, a1, &qword_3BEB70);
}

uint64_t LegacyEpisodeLockup.listContext.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_267BC(v1 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_listContext, a1, &qword_3B24F8);
}

uint64_t LegacyEpisodeLockup.referenceTime.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_referenceTime);
}

uint64_t LegacyEpisodeLockup.playerTime.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_playerTime);
}

uint64_t LegacyEpisodeLockup.thinClientEpisodeState.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_267BC(v1 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_thinClientEpisodeState, a1, &qword_3BA278);
}

uint64_t sub_1638E0()
{
  uint64_t v0;

  sub_1459C(v0 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_showUberArtwork, &qword_3BEB70);
  swift_bridgeObjectRelease();

  sub_1459C(v0 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup__titleAction, &qword_3B3C88);
  sub_1459C(v0 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup__summaryAction, &qword_3B3C88);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1459C(v0 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_listenNowReason, &qword_3B81E8);
  sub_1459C(v0 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_episodeArtwork, &qword_3BEB70);
  sub_1459C(v0 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_listContext, &qword_3B24F8);
  return sub_1459C(v0 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_thinClientEpisodeState, &qword_3BA278);
}

uint64_t LegacyEpisodeLockup.__deallocating_deinit()
{
  uint64_t v0;

  v0 = LegacyEpisodeLockup.deinit();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t LegacyEpisodeLockup.entitlementState.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_episodeEntitlementState);
}

uint64_t LegacyEpisodeLockup.durationOpt.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_duration);
}

uint64_t sub_163A70(uint64_t a1, uint64_t a2)
{
  return sub_163A88(a1, a2, &OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_channelName);
}

uint64_t sub_163A7C(uint64_t a1, uint64_t a2)
{
  return sub_163A88(a1, a2, &OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_subscriptionName);
}

uint64_t sub_163A88(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;

  v4 = (uint64_t *)(*v3 + *a3);
  v5 = *v4;
  swift_bridgeObjectRetain(v4[1]);
  return v5;
}

uint64_t sub_163AC0()
{
  _QWORD *v0;

  return *(_QWORD *)(*v0 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_episodeEntitlementState);
}

uint64_t sub_163AD4()
{
  _QWORD *v0;

  return *(unsigned __int8 *)(*v0 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_hasFreeVersion);
}

uint64_t sub_163AE8@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return sub_267BC(*v1 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_listenNowReason, a1, &qword_3B81E8);
}

uint64_t sub_163B18()
{
  _QWORD *v0;

  return *(unsigned __int8 *)(*v0 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_episodeType);
}

uint64_t sub_163B2C()
{
  _QWORD *v0;

  return *(unsigned __int8 *)(*v0 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_mediaType);
}

uint64_t sub_163B40()
{
  _QWORD *v0;

  return *(unsigned __int8 *)(*v0 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup_isExplicit);
}

uint64_t sub_163B58()
{
  _QWORD *v0;

  return *(unsigned __int8 *)(*v0 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_showTypeIsSerial);
}

uint64_t sub_163B6C()
{
  _QWORD *v0;

  return *(_QWORD *)(*v0 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_duration);
}

uint64_t sub_163B88()
{
  _QWORD *v0;

  return *(_QWORD *)(*v0 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_seasonNumber);
}

uint64_t sub_163BA4()
{
  _QWORD *v0;

  return *(_QWORD *)(*v0 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_episodeNumber);
}

_QWORD *sub_163BC0@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v4;

  if (*(_QWORD *)(*v1 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup_lazyReleaseDate))
    return LazyDate.value.getter(a1);
  v4 = type metadata accessor for Date(0);
  return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, 1, 1, v4);
}

uint64_t LegacyEpisodeLockup.bestArtworkModel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *boxed_opaque_existential_2Tm;
  uint64_t v8;
  uint64_t v9;
  _QWORD v12[5];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
  __chkstk_darwin(v3);
  v5 = (char *)&v12[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Podcasts(0);
  v12[3] = v6;
  v12[4] = sub_F1C0((unint64_t *)&qword_3B33B8, (void (*)(uint64_t))&type metadata accessor for Podcasts, (uint64_t)&protocol conformance descriptor for Podcasts);
  boxed_opaque_existential_2Tm = __swift_allocate_boxed_opaque_existential_2Tm(v12);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(boxed_opaque_existential_2Tm, enum case for Podcasts.episodeArtwork(_:), v6);
  LOBYTE(v6) = isFeatureEnabled(_:)(v12);
  __swift_destroy_boxed_opaque_existential_1(v12);
  if ((v6 & 1) == 0)
    return sub_267BC(v1 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup_icon, a1, &qword_3BEB70);
  LegacyEpisodeLockup.dedupedEpisodeArtwork.getter((uint64_t)v5);
  v8 = type metadata accessor for ArtworkModel(0);
  v9 = *(_QWORD *)(v8 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v5, 1, v8) == 1)
  {
    sub_1459C((uint64_t)v5, &qword_3BEB70);
    return sub_267BC(v1 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup_icon, a1, &qword_3BEB70);
  }
  sub_14614((uint64_t)v5, a1);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v9 + 56))(a1, 0, 1, v8);
}

BOOL LegacyEpisodeLockup.isListenNowContext.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  _BOOL8 v5;
  uint64_t v7;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B81E8);
  __chkstk_darwin(v1);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_267BC(v0 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_listenNowReason, (uint64_t)v3, &qword_3B81E8);
  v4 = type metadata accessor for EpisodeListenNowReason(0);
  v5 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(v3, 1, v4) != 1;
  sub_1459C((uint64_t)v3, &qword_3B81E8);
  return v5;
}

uint64_t sub_163E34(_QWORD *a1, uint64_t a2, int a3, uint64_t a4, int a5, char a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,void *a28,void *a29,unsigned __int8 a30,uint64_t a31,unsigned __int8 a32,unsigned __int8 a33,unsigned __int8 *a34,uint64_t a35,unsigned __int8 a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,unsigned __int8 a43,uint64_t a44,uint64_t a45,uint64_t a46,unsigned __int8 a47,uint64_t a48,uint64_t a49,uint64_t a50,unsigned __int8 a51,uint64_t a52,unsigned __int8 a53,uint64_t a54,uint64_t a55)
{
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  void *v81;
  void *v82;
  uint64_t v83;
  id v84;
  id v85;
  id v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  _BYTE *v127;
  uint64_t v128;
  int v129;
  char *v130;
  uint64_t v131;
  int v132;
  char *v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  void *v137;
  uint64_t v138;
  void *v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  uint64_t v147;
  int v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  _QWORD *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;

  v174 = a8;
  v143 = a7;
  LODWORD(v167) = a5;
  v141 = a4;
  v140 = a3;
  v138 = a2;
  v164 = a1;
  v166 = a55;
  v169 = a54;
  v132 = a53;
  v131 = a52;
  v129 = a51;
  v128 = a50;
  v170 = a49;
  v171 = a48;
  v172 = a46;
  v162 = a45;
  v160 = a44;
  v163 = a13;
  v161 = a12;
  v159 = a11;
  v173 = a10;
  LODWORD(v157) = a47;
  LODWORD(v156) = a43;
  v155 = a42;
  v154 = a41;
  v153 = a40;
  v152 = a39;
  v151 = a38;
  v150 = a37;
  v149 = a36;
  v148 = a33;
  v146 = a32;
  v145 = a31;
  v144 = a20;
  v165 = a18;
  v142 = a19;
  v139 = a29;
  v137 = a28;
  v136 = a26;
  v135 = a25;
  v147 = a35;
  v57 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v57);
  v158 = (uint64_t)&v124 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  v126 = type metadata accessor for LazyDate.State(0);
  v125 = *(_QWORD *)(v126 - 8);
  __chkstk_darwin(v126);
  v124 = (char *)&v124 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3D88);
  __chkstk_darwin(v60);
  v130 = (char *)&v124 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
  __chkstk_darwin(v62);
  v168 = (uint64_t)&v124 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B81E8);
  __chkstk_darwin(v64);
  v133 = (char *)&v124 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B24F8);
  __chkstk_darwin(v66);
  v68 = (char *)&v124 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v69);
  v127 = (char *)&v124 - v70;
  v71 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3C88);
  __chkstk_darwin(v71);
  v73 = (char *)&v124 - ((v72 + 15) & 0xFFFFFFFFFFFFFFF0);
  v134 = *a34;
  v74 = v55 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup__titleAction;
  v175 = 0;
  v75 = type metadata accessor for Action(0);
  swift_retain();
  Lazy.init(wrappedValue:)(&v175, v75);
  sub_15BD4((uint64_t)v73, v74, &qword_3B3C88);
  v76 = v55 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup__summaryAction;
  v175 = 0;
  Lazy.init(wrappedValue:)(&v175, v75);
  sub_15BD4((uint64_t)v73, v76, &qword_3B3C88);
  *(_BYTE *)(v55 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_disabled) = 0;
  v77 = v55 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_episodeNumber;
  *(_QWORD *)v77 = v138;
  *(_BYTE *)(v77 + 8) = v140 & 1;
  v78 = v55 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_seasonNumber;
  *(_QWORD *)v78 = v141;
  *(_BYTE *)(v78 + 8) = v167 & 1;
  *(_BYTE *)(v55 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_episodeType) = a6;
  v167 = a9;
  sub_267BC(a9, v55 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_showUberArtwork, &qword_3BEB70);
  *(_BYTE *)(v55 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_mediaType) = v143;
  v79 = (_QWORD *)(v55 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_caption);
  v80 = v136;
  *v79 = v135;
  v79[1] = v80;
  *(_QWORD *)(v55 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_summary) = a27;
  v81 = v137;
  *(_QWORD *)(v55 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_secondSummary) = v137;
  v82 = v139;
  *(_QWORD *)(v55 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_transcript) = v139;
  swift_beginAccess(v74, &v175, 33, 0);
  v83 = v142;
  swift_retain();
  v84 = a27;
  v85 = v81;
  v86 = v82;
  sub_1459C(v74, &qword_3B3C88);
  v176 = v83;
  v87 = (uint64_t)v133;
  Lazy.init(wrappedValue:)(&v176, v75);
  swift_endAccess(&v175);
  swift_beginAccess(v76, &v175, 33, 0);
  v88 = v144;
  swift_retain();
  sub_1459C(v76, &qword_3B3C88);
  v176 = v88;
  Lazy.init(wrappedValue:)(&v176, v75);
  swift_endAccess(&v175);
  v89 = v55 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_duration;
  *(_QWORD *)v89 = v145;
  *(_BYTE *)(v89 + 8) = v146 & 1;
  *(_BYTE *)(v55 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_isMultiEpisode) = v148;
  *(_BYTE *)(v55 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_playedTextStyle) = v134;
  *(_QWORD *)(v55 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_episodeEntitlementState) = v147;
  *(_BYTE *)(v55 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_hasFreeVersion) = v149;
  v90 = (_QWORD *)(v55 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_subscriptionName);
  v91 = v151;
  *v90 = v150;
  v90[1] = v91;
  v92 = (_QWORD *)(v55 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_channelName);
  v93 = v153;
  *v92 = v152;
  v92[1] = v93;
  v94 = (_QWORD *)(v55 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_showTitle);
  v95 = v155;
  *v94 = v154;
  v94[1] = v95;
  *(_BYTE *)(v55 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_showDisplayType) = v156;
  *(_BYTE *)(v55 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_showTypeIsSerial) = v157;
  v96 = v171;
  sub_267BC(v171, v55 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_listenNowReason, &qword_3B81E8);
  sub_267BC(v173, v55 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_episodeArtwork, &qword_3BEB70);
  sub_267BC(v170, (uint64_t)v68, &qword_3B24F8);
  sub_267BC(v96, v87, &qword_3B81E8);
  v97 = type metadata accessor for EyebrowBuilder.ListContext(0);
  v98 = *(_QWORD *)(v97 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v98 + 48))(v68, 1, v97) == 1)
  {
    v99 = type metadata accessor for EpisodeListenNowReason(0);
    v100 = 1;
    v101 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v99 - 8) + 48))(v87, 1, v99);
    v102 = (uint64_t)v127;
    if (v101 != 1)
    {
      *v127 = 0;
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v98 + 104))(v102, enum case for EyebrowBuilder.ListContext.listenNow(_:), v97);
      v100 = 0;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v98 + 56))(v102, v100, 1, v97);
    sub_1459C((uint64_t)v68, &qword_3B24F8);
    v103 = v132;
    v104 = v131;
    v105 = (uint64_t)v130;
    v106 = v129;
    v107 = v128;
    v108 = v87;
  }
  else
  {
    v102 = (uint64_t)v127;
    (*(void (**)(_BYTE *, char *, uint64_t))(v98 + 32))(v127, v68, v97);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v98 + 56))(v102, 0, 1, v97);
    v103 = v132;
    v104 = v131;
    v105 = (uint64_t)v130;
    v106 = v129;
    v107 = v128;
    v108 = v87;
  }
  LODWORD(v154) = a30;
  v155 = a24;
  v156 = a22;
  v157 = a17;
  v153 = a15;
  v152 = a14;
  sub_1459C(v108, &qword_3B81E8);
  sub_15BD4(v102, v55 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_listContext, &qword_3B24F8);
  v109 = v55 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_referenceTime;
  *(_QWORD *)v109 = v107;
  *(_BYTE *)(v109 + 8) = v106 & 1;
  v110 = v55 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_playerTime;
  *(_QWORD *)v110 = v104;
  *(_BYTE *)(v110 + 8) = v103 & 1;
  sub_267BC(v169, v55 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_thinClientEpisodeState, &qword_3BA278);
  swift_release(v55);
  sub_267BC(v174, v168, &qword_3BEB70);
  sub_267BC(v172, v105, &qword_3B3D88);
  v111 = type metadata accessor for Date(0);
  v112 = *(_QWORD *)(v111 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v112 + 48))(v105, 1, v111) == 1)
  {
    sub_1459C(v105, &qword_3B3D88);
    v113 = 0;
  }
  else
  {
    v114 = v124;
    (*(void (**)(char *, uint64_t, uint64_t))(v112 + 16))(v124, v105, v111);
    (*(void (**)(char *, _QWORD, uint64_t))(v125 + 104))(v114, enum case for LazyDate.State.valid(_:), v126);
    v113 = LazyDate.init(initialState:)(v114);
    (*(void (**)(uint64_t, uint64_t))(v112 + 8))(v105, v111);
  }
  v115 = v165;
  sub_267BC(v165, (uint64_t)&v175, &qword_3B0C50);
  v116 = v166;
  v117 = v158;
  sub_267BC(v166, v158, (uint64_t *)&unk_3B8790);
  v123 = v117;
  v118 = v155;
  v119 = v156;
  v120 = v157;
  v121 = sub_19C468(v160, v162, v164, v154 & 1, v168, v159, v161, v163, 0, 0, 0, 0, 0, v152, v153, v113, 0, 0, a16 | ((HIDWORD(a16) & 1) << 32),
           0,
           1u,
           v157,
           (uint64_t)&v175,
           v156,
           a21,
           a23,
           v155,
           v123);
  swift_release(v118);
  swift_release(a23);
  swift_release(a21);
  swift_release(v119);
  swift_release(v120);
  swift_release(v113);
  sub_1459C(v116, (uint64_t *)&unk_3B8790);
  sub_1459C(v169, &qword_3BA278);
  sub_1459C(v170, &qword_3B24F8);
  sub_1459C(v171, &qword_3B81E8);
  sub_1459C(v172, &qword_3B3D88);
  sub_1459C(v115, &qword_3B0C50);
  sub_1459C(v173, &qword_3BEB70);
  sub_1459C(v167, &qword_3BEB70);
  sub_1459C(v174, &qword_3BEB70);
  return v121;
}

uint64_t type metadata accessor for LegacyEpisodeLockup(uint64_t a1)
{
  uint64_t result;

  result = qword_3BD2A0;
  if (!qword_3BD2A0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LegacyEpisodeLockup);
  return result;
}

uint64_t sub_164A30@<X0>(uint64_t *a1@<X8>)
{
  return sub_164B8C(a1);
}

uint64_t sub_164A44(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3C88);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t sub_164A90()
{
  unint64_t result;

  result = qword_3BD258;
  if (!qword_3BD258)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for DisplayType);
    atomic_store(result, (unint64_t *)&qword_3BD258);
  }
  return result;
}

uint64_t objectdestroyTm_3()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = type metadata accessor for JSONObject(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = type metadata accessor for JSONContext(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v4 + v5 + v8) & ~v8;
  v10 = v9 + *(_QWORD *)(v7 + 64);
  v11 = v3 | v8 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  return swift_deallocObject(v0, v10, v11);
}

uint64_t sub_164B8C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(type metadata accessor for JSONObject(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for JSONContext(0) - 8) + 80);
  return sub_2D201C(v1 + v4, v1 + ((v4 + v5 + v6) & ~v6), a1);
}

unint64_t sub_164C04()
{
  unint64_t result;

  result = qword_3BD270;
  if (!qword_3BD270)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for EpisodePlayedTextStyle);
    atomic_store(result, (unint64_t *)&qword_3BD270);
  }
  return result;
}

uint64_t sub_164C48@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_163638(a1, &OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup__titleAction, a2);
}

uint64_t sub_164C64(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_163708(a1, a2, a3, a4, &OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup__titleAction);
}

uint64_t sub_164C80@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_163638(a1, &OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup__summaryAction, a2);
}

uint64_t sub_164C9C(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_163708(a1, a2, a3, a4, &OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup__summaryAction);
}

uint64_t sub_164CB8@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v3;
  uint64_t result;
  _BYTE v5[24];

  v3 = (_BYTE *)(*a1 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_disabled);
  result = swift_beginAccess(v3, v5, 0, 0);
  *a2 = *v3;
  return result;
}

uint64_t sub_164D08(char *a1, _QWORD *a2)
{
  char v2;
  _BYTE *v3;
  uint64_t result;
  _BYTE v5[24];

  v2 = *a1;
  v3 = (_BYTE *)(*a2 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_disabled);
  result = swift_beginAccess(v3, v5, 1, 0);
  *v3 = v2;
  return result;
}

uint64_t storeEnumTagSinglePayload for EpisodePlayedTextStyle(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_164DA0 + 4 * byte_2F8F05[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_164DD4 + 4 * byte_2F8F00[v4]))();
}

uint64_t sub_164DD4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_164DDC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x164DE4);
  return result;
}

uint64_t sub_164DF0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x164DF8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_164DFC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_164E04(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for EpisodePlayedTextStyle()
{
  return &type metadata for EpisodePlayedTextStyle;
}

uint64_t sub_164E20()
{
  return type metadata accessor for LegacyEpisodeLockup(0);
}

void sub_164E28(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD v13[9];
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  char *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  uint64_t v32;

  v13[0] = &unk_2F9068;
  v13[1] = &unk_2F9068;
  v13[2] = &unk_2F9080;
  sub_3EE70(319, (unint64_t *)&qword_3B28A0, (uint64_t (*)(uint64_t))&type metadata accessor for ArtworkModel);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(v2 - 8) + 64;
    v13[3] = v4;
    v13[4] = &unk_2F9068;
    v13[5] = &unk_2F9098;
    v13[6] = &unk_2F90B0;
    v13[7] = &unk_2F90B0;
    v13[8] = &unk_2F90B0;
    sub_1651D0(319);
    if (v6 <= 0x3F)
    {
      v14 = *(_QWORD *)(v5 - 8) + 64;
      v15 = v14;
      v16 = &unk_2F90C8;
      v17 = &unk_2F90C8;
      v18 = &unk_2F90C8;
      v19 = &unk_2F9080;
      v20 = (char *)&value witness table for Builtin.Int64 + 64;
      v21 = &unk_2F90C8;
      v22 = &unk_2F9098;
      v23 = &unk_2F9098;
      v24 = &unk_2F9098;
      v25 = &unk_2F90E0;
      v26 = &unk_2F90C8;
      sub_3EE70(319, &qword_3BD2C0, (uint64_t (*)(uint64_t))&type metadata accessor for EpisodeListenNowReason);
      if (v8 <= 0x3F)
      {
        v27 = *(_QWORD *)(v7 - 8) + 64;
        v28 = v4;
        sub_3EE70(319, &qword_3BD2C8, (uint64_t (*)(uint64_t))&type metadata accessor for EyebrowBuilder.ListContext);
        if (v10 <= 0x3F)
        {
          v29 = *(_QWORD *)(v9 - 8) + 64;
          v30 = &unk_2F9068;
          v31 = &unk_2F9068;
          sub_3EE70(319, (unint64_t *)&unk_3BD2D0, (uint64_t (*)(uint64_t))&type metadata accessor for ThinClientEpisodeStateModel);
          if (v12 <= 0x3F)
          {
            v32 = *(_QWORD *)(v11 - 8) + 64;
            swift_updateClassMetadata2(a1, 256, 28, v13, a1 + 448);
          }
        }
      }
    }
  }
}

uint64_t method lookup function for LegacyEpisodeLockup(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for LegacyEpisodeLockup);
}

uint64_t dispatch thunk of LegacyEpisodeLockup.__allocating_init(adamId:episodeNumber:seasonNumber:episodeType:mediaType:icon:showUberArtwork:episodeArtwork:title:subtitles:ordinal:rating:buttonAction:clickAction:titleAction:summaryAction:playAction:contextAction:previewAction:subtitleAction:caption:summary:secondSummary:transcript:isExplicit:duration:isMultiEpisode:playedTextStyle:episodeEntitlementState:hasFreeVersion:subscriptionName:channelName:showTitle:showDisplayType:shelfUniqueId:releaseDate:showTypeIsSerial:listenNowReason:listContext:referenceTime:playerTime:thinClientEpisodeState:impressionMetrics:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, unsigned int a6, unsigned int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
  uint64_t v51;

  LOBYTE(a50) = a50 & 1;
  LOBYTE(a32) = a32 & 1;
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v51 + 672))(a1, a2, a3 & 1, a4, a5 & 1, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16 | ((HIDWORD(a16) & 1) << 32), a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50,
           a51);
}

uint64_t dispatch thunk of LegacyEpisodeLockup.titleAction.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 680))();
}

uint64_t dispatch thunk of LegacyEpisodeLockup.summaryAction.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 704))();
}

uint64_t dispatch thunk of LegacyEpisodeLockup.disabled.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 728))();
}

uint64_t dispatch thunk of LegacyEpisodeLockup.disabled.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 736))();
}

uint64_t dispatch thunk of LegacyEpisodeLockup.disabled.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 744))();
}

void sub_1651D0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_3BD2B0)
  {
    v2 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_3BD2B8);
    v3 = type metadata accessor for LazyValueWrapper(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_3BD2B0);
  }
}

uint64_t ThinClientMarkAsPlayedEpisodeIntentImplementation.perform(_:objectGraph:)(uint64_t *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2[2] = a2;
  v4 = type metadata accessor for EpisodePlayState(0);
  v2[3] = v4;
  v5 = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *a1;
  v2[4] = v5;
  v2[5] = v6;
  return swift_task_switch(sub_1652A0, 0, 0);
}

uint64_t sub_1652A0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t **v5;

  v1 = v0[3];
  v2 = v0[4];
  v3 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3BD5E8) + 48);
  static Date.now.getter();
  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v2, 0, 1, v4);
  *(_BYTE *)(v2 + v3) = 0;
  swift_storeEnumTagMultiPayload(v2, v1, 2);
  v5 = (uint64_t **)swift_task_alloc(dword_3B7D4C);
  v0[6] = (uint64_t)v5;
  *v5 = v0;
  v5[1] = (uint64_t *)sub_165350;
  return ThinClientTogglePlayedEpisodeHelper.toggle(to:episodeIdentifiers:objectGraph:)(v0[4], v0[5], v0[2]);
}

uint64_t sub_165350(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(*v2 + 48);
  v5 = *v2;
  *(_QWORD *)(v5 + 56) = v1;
  swift_task_dealloc(v4);
  v6 = *(_QWORD *)(v5 + 32);
  sub_36668(v6);
  if (v1)
    return swift_task_switch(sub_1653F4, 0, 0);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(_QWORD))(v5 + 8))(a1 & 1);
}

uint64_t sub_1653F4()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 32));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_16542C()
{
  unint64_t result;

  result = qword_3BD5F0;
  if (!qword_3BD5F0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MarkAsPlayedEpisodeIntent);
    atomic_store(result, (unint64_t *)&qword_3BD5F0);
  }
  return result;
}

uint64_t sub_165470(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;

  *(_QWORD *)(v3 + 16) = a1;
  v6 = (_QWORD *)swift_task_alloc(dword_3BD5E4);
  *(_QWORD *)(v3 + 24) = v6;
  *v6 = v3;
  v6[1] = sub_BD868;
  return ThinClientMarkAsPlayedEpisodeIntentImplementation.perform(_:objectGraph:)(a2, a3);
}

ValueMetadata *type metadata accessor for ThinClientMarkAsPlayedEpisodeIntentImplementation()
{
  return &type metadata for ThinClientMarkAsPlayedEpisodeIntentImplementation;
}

uint64_t InformationViewCoordinator.__allocating_init(asPartOf:withStyle:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = swift_allocObject(v2, 80, 7);
  v6 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(v5 + 16) = *(_OWORD *)a2;
  *(_QWORD *)(v5 + 32) = v6;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BC3F0);
  BaseObjectGraph.injectIfAvailable<A>(_:)(v7, v7);
  swift_release(a1);
  return v5;
}

uint64_t InformationViewCoordinator.init(asPartOf:withStyle:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[40];

  v3 = v2;
  v5 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(v3 + 16) = *(_OWORD *)a2;
  *(_QWORD *)(v3 + 32) = v5;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BC3F0);
  BaseObjectGraph.injectIfAvailable<A>(_:)(v6, v6);
  swift_release(a1);
  sub_15BD4((uint64_t)v8, v3 + 40, &qword_3BD600);
  return v3;
}

uint64_t InformationViewCoordinator.symbolName.getter()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;

  v1 = v0[4];
  if (!(v1 >> 61))
    return 0x7374736163646F70;
  if (v1 >> 61 != 5)
    return 0;
  result = 0x6B72616D6B6F6F62;
  v4 = v0[2];
  v3 = v0[3];
  v5 = v1 == 0xA000000000000000 && (v3 | v4) == 0;
  if (!v5 && (v1 != 0xA000000000000000 || v4 != 1 || v3))
  {
    result = 0x6B636F6C63;
    if ((v1 != 0xA000000000000000 || v4 != 2 || v3) && (v1 != 0xA000000000000000 || v4 != 3 || v3))
    {
      if (v1 == 0xA000000000000000 && v4 == 5 && !v3)
        return 0xD000000000000015;
      result = 0;
      if (v1 == 0xA000000000000000 && v4 == 6 && !v3)
        return 0xD000000000000015;
    }
  }
  return result;
}

void InformationViewCoordinator.title.getter()
{
  __asm { BR              X11 }
}

uint64_t sub_1656F8()
{
  id v0;
  Swift::String v1;
  Swift::String v2;
  uint64_t countAndFlagsBits;
  Swift::String v5;

  v0 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v5._object = (void *)0xE000000000000000;
  v1._object = (void *)0x8000000000311720;
  v1._countAndFlagsBits = 0xD000000000000013;
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  v5._countAndFlagsBits = 0;
  countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v1, (Swift::String_optional)0, (NSBundle)v0, v2, v5)._countAndFlagsBits;

  return countAndFlagsBits;
}

void InformationViewCoordinator.subtitle.getter()
{
  __asm { BR              X11 }
}

uint64_t sub_165AF0()
{
  id v0;
  Swift::String v1;
  Swift::String v2;
  uint64_t countAndFlagsBits;
  Swift::String v5;

  v0 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v5._object = (void *)0xE000000000000000;
  v1._object = (void *)0x80000000003118C0;
  v1._countAndFlagsBits = 0xD000000000000016;
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  v5._countAndFlagsBits = 0;
  countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v1, (Swift::String_optional)0, (NSBundle)v0, v2, v5)._countAndFlagsBits;

  return countAndFlagsBits;
}

void InformationViewCoordinator.buttons.getter()
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[16];

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3848);
  __chkstk_darwin(v1);
  v13[8] = (char *)v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v3);
  v4 = type metadata accessor for ActionMetrics(0);
  __chkstk_darwin(v4);
  v5 = type metadata accessor for FlowDestination(0);
  __chkstk_darwin(v5);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
  __chkstk_darwin(v6);
  v13[9] = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ActionButton(0);
  __chkstk_darwin(v8);
  __chkstk_darwin(v9);
  __chkstk_darwin(v10);
  __chkstk_darwin(v11);
  __chkstk_darwin(v12);
  __asm { BR              X10 }
}

unint64_t sub_166108(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  char v13;
  id v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  Swift::String v44;
  Swift::String v45;
  Swift::String v46;
  uint64_t v47;
  uint64_t (*v48)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  int *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  Swift::String v71;
  Swift::String v72;

  *(_QWORD *)(v12 - 176) = v2;
  *(_QWORD *)(v12 - 168) = v1;
  *(_QWORD *)(v12 - 192) = v4;
  *(_QWORD *)(v12 - 184) = v3;
  *(_QWORD *)(v12 - 160) = a1;
  *(_QWORD *)(v12 - 152) = v7;
  v13 = static Podcasts.isRecentlyUnfollowedEnabled()(a1);
  v14 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  if ((v13 & 1) != 0 && *(uint64_t *)(v12 - 168) >= 1)
  {
    v15._countAndFlagsBits = 0xD000000000000023;
    v71._object = (void *)0xE000000000000000;
    v15._object = (void *)0x800000000030A420;
    v16._countAndFlagsBits = 0;
    v16._object = (void *)0xE000000000000000;
    v71._countAndFlagsBits = 0;
    v17 = NSLocalizedString(_:tableName:bundle:value:comment:)(v15, (Swift::String_optional)0, (NSBundle)v14, v16, v71);

    v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8E10);
    v19 = swift_allocObject(v18, 72, 7);
    *(_OWORD *)(v19 + 16) = xmmword_2EA0D0;
    *(_QWORD *)(v19 + 56) = &type metadata for Int;
    *(_QWORD *)(v19 + 64) = &protocol witness table for Int;
    *(_QWORD *)(v19 + 32) = *(_QWORD *)(v12 - 168);
    *(_QWORD *)(v12 - 168) = static String.localizedStringWithFormat(_:_:)(v17._countAndFlagsBits, v17._object, v19);
    *(_QWORD *)(v12 - 200) = v20;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v21 = type metadata accessor for ArtworkModel(0);
    v22 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56);
    v22(*(_QWORD *)(v12 - 136), 1, 1, v21);
    v23 = swift_storeEnumTagMultiPayload(v10, v8, 45);
    *(_WORD *)(v12 - 121) = 0;
    static ActionMetrics.notInstrumented.getter(v23);
    v24 = type metadata accessor for FlowAction(0);
    swift_allocObject(v24, *(unsigned int *)(v24 + 48), *(unsigned __int16 *)(v24 + 52));
    v25 = FlowAction.init(_:id:title:presentationContext:animationBehavior:presentationStyle:destinationPageHeader:actionMetrics:)(v10, 0, 0, 0, 0, (char *)(v12 - 120), 0, 48, (char *)(v12 - 121), v6);
    *(_QWORD *)(v12 - 96) = v24;
    *(_QWORD *)(v12 - 88) = sub_109F30((unint64_t *)&qword_3B0C40, (void (*)(uint64_t))type metadata accessor for FlowAction);
    *(_QWORD *)(v12 - 120) = v25;
    v26 = type metadata accessor for ImpressionMetrics(0);
    v27 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56);
    v27(*(_QWORD *)(v12 - 152), 1, 1, v26);
    v28 = _s8ShelfKit12ActionButtonV2IDVAEycfC_0();
    v30 = v29;
    v31 = *(int **)(v12 - 160);
    v32 = (uint64_t)v5 + v31[6];
    v22(v32, 1, 1, v21);
    v33 = v31[7];
    *((_BYTE *)v5 + v33) = 2;
    v34 = (uint64_t)v5 + v31[9];
    v27(v34, 1, 1, v26);
    *v5 = v28;
    v5[1] = v30;
    v35 = *(_QWORD *)(v12 - 200);
    v5[2] = *(_QWORD *)(v12 - 168);
    v5[3] = v35;
    sub_3C454(*(_QWORD *)(v12 - 136), v32, &qword_3BEB70);
    *((_BYTE *)v5 + v33) = 2;
    sub_F4D8((__int128 *)(v12 - 120), (uint64_t)v5 + v31[8]);
    sub_3C454(*(_QWORD *)(v12 - 152), v34, (uint64_t *)&unk_3B8790);
    v36 = sub_11474(0, 1, 1, (unint64_t)_swiftEmptyArrayStorage);
    v38 = *(_QWORD *)(v36 + 16);
    v37 = *(_QWORD *)(v36 + 24);
    if (v38 >= v37 >> 1)
      v36 = sub_11474(v37 > 1, v38 + 1, 1, v36);
    v39 = *(_QWORD *)(v12 - 192);
    *(_QWORD *)(v36 + 16) = v38 + 1;
    v40 = *(unsigned __int8 *)(v39 + 80);
    v41 = *(_QWORD *)(v39 + 72);
    v42 = v36 + ((v40 + 32) & ~v40) + v41 * v38;
    v43 = v39;
    sub_167290((uint64_t)v5, v42);
  }
  else
  {
    v72._object = (void *)0xE000000000000000;
    v44._object = (void *)0x8000000000311910;
    v44._countAndFlagsBits = 0xD00000000000001CLL;
    v45._countAndFlagsBits = 0;
    v45._object = (void *)0xE000000000000000;
    v72._countAndFlagsBits = 0;
    v46 = NSLocalizedString(_:tableName:bundle:value:comment:)(v44, (Swift::String_optional)0, (NSBundle)v14, v45, v72);
    *(_QWORD *)(v12 - 168) = v46._countAndFlagsBits;
    *(_QWORD *)(v12 - 200) = v46._object;

    v47 = type metadata accessor for ArtworkModel(0);
    v48 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 56);
    v49 = v48(*(_QWORD *)(v12 - 136), 1, 1, v47);
    static ActionMetrics.notInstrumented.getter(v49);
    v50 = type metadata accessor for TabChangeAction(0);
    swift_allocObject(v50, *(unsigned int *)(v50 + 48), *(unsigned __int16 *)(v50 + 52));
    v51 = sub_2B354C(0, 0, 12, _swiftEmptyArrayStorage, 0, 0, 0, 0, 0, v6);
    *(_QWORD *)(v12 - 96) = v50;
    *(_QWORD *)(v12 - 88) = sub_109F30(&qword_3B6A70, (void (*)(uint64_t))type metadata accessor for TabChangeAction);
    *(_QWORD *)(v12 - 120) = v51;
    v52 = type metadata accessor for ImpressionMetrics(0);
    v53 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 56);
    v53(*(_QWORD *)(v12 - 152), 1, 1, v52);
    *(_QWORD *)(v12 - 208) = _s8ShelfKit12ActionButtonV2IDVAEycfC_0();
    v55 = v54;
    v56 = *(int **)(v12 - 160);
    v57 = (uint64_t)v11 + v56[6];
    v48(v57, 1, 1, v47);
    v58 = v56[7];
    *((_BYTE *)v11 + v58) = 2;
    v59 = (uint64_t)v11 + v56[9];
    v53(v59, 1, 1, v52);
    *v11 = *(_QWORD *)(v12 - 208);
    v11[1] = v55;
    v60 = *(_QWORD *)(v12 - 200);
    v11[2] = *(_QWORD *)(v12 - 168);
    v11[3] = v60;
    sub_3C454(*(_QWORD *)(v12 - 136), v57, &qword_3BEB70);
    *((_BYTE *)v11 + v58) = 2;
    sub_F4D8((__int128 *)(v12 - 120), (uint64_t)v11 + v56[8]);
    sub_3C454(*(_QWORD *)(v12 - 152), v59, (uint64_t *)&unk_3B8790);
    sub_167290((uint64_t)v11, v9);
    v36 = sub_11474(0, 1, 1, (unint64_t)_swiftEmptyArrayStorage);
    v62 = *(_QWORD *)(v36 + 16);
    v61 = *(_QWORD *)(v36 + 24);
    if (v62 >= v61 >> 1)
      v36 = sub_11474(v61 > 1, v62 + 1, 1, v36);
    v63 = *(_QWORD *)(v12 - 192);
    *(_QWORD *)(v36 + 16) = v62 + 1;
    v40 = *(unsigned __int8 *)(v63 + 80);
    v41 = *(_QWORD *)(v63 + 72);
    v64 = v9;
    v43 = v63;
    sub_167290(v64, v36 + ((v40 + 32) & ~v40) + v41 * v62);
  }
  v65 = *(_QWORD *)(v12 - 144);
  sub_166C54(v65);
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(v43 + 48))(v65, 1, *(_QWORD *)(v12 - 160)) == 1)
  {
    sub_1459C(v65, &qword_3B3848);
  }
  else
  {
    v66 = v65;
    v67 = *(_QWORD *)(v12 - 184);
    sub_167290(v66, v67);
    sub_1672D4(v67, *(_QWORD *)(v12 - 176));
    v69 = *(_QWORD *)(v36 + 16);
    v68 = *(_QWORD *)(v36 + 24);
    if (v69 >= v68 >> 1)
      v36 = sub_11474(v68 > 1, v69 + 1, 1, v36);
    *(_QWORD *)(v36 + 16) = v69 + 1;
    sub_167290(*(_QWORD *)(v12 - 176), v36 + ((v40 + 32) & ~(unint64_t)v40) + v41 * v69);
    sub_65C88(*(_QWORD *)(v12 - 184));
  }
  return v36;
}

uint64_t sub_166C54@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  id v14;
  id v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  id v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  id v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t, uint64_t, uint64_t);
  char *v52;
  char *v53;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD v60[6];
  Swift::String v61;
  Swift::String v62;
  Swift::String v63;
  Swift::String v64;

  v3 = (int *)type metadata accessor for ActionButton(0);
  v4 = *((_QWORD *)v3 - 1);
  __chkstk_darwin(v3);
  v6 = (unint64_t *)((char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v7);
  v9 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
  __chkstk_darwin(v10);
  v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_167344(v1 + 40, (uint64_t)&v57);
  if (v58)
  {
    sub_F4D8(&v57, (uint64_t)v60);
    v13 = (void *)objc_opt_self(NSBundle);
    v53 = v9;
    v14 = objc_msgSend(v13, "mainBundle");
    v56 = a1;
    v15 = v14;
    v61._object = (void *)0xE000000000000000;
    v16._countAndFlagsBits = 0xD000000000000011;
    v16._object = (void *)0x800000000030B0B0;
    v17._countAndFlagsBits = 0;
    v17._object = (void *)0xE000000000000000;
    v61._countAndFlagsBits = 0;
    v18 = NSLocalizedString(_:tableName:bundle:value:comment:)(v16, (Swift::String_optional)0, (NSBundle)v15, v17, v61);
    object = v18._object;
    countAndFlagsBits = v18._countAndFlagsBits;

    v19 = type metadata accessor for ArtworkModel(0);
    v51 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56);
    v51(v12, 1, 1, v19);
    sub_150C8((uint64_t)v60, (uint64_t)&v57);
    v20 = swift_allocObject(&unk_383EE8, 56, 7);
    v52 = v12;
    v21 = v20;
    sub_F4D8(&v57, v20 + 16);
    v22 = objc_msgSend(v13, "mainBundle");
    v62._object = (void *)0xE000000000000000;
    v23._countAndFlagsBits = 0xD000000000000011;
    v23._object = (void *)0x800000000030B0B0;
    v24._countAndFlagsBits = 0;
    v24._object = (void *)0xE000000000000000;
    v62._countAndFlagsBits = 0;
    v25 = NSLocalizedString(_:tableName:bundle:value:comment:)(v23, (Swift::String_optional)0, (NSBundle)v22, v24, v62);
    v48 = v25._object;
    v49 = v25._countAndFlagsBits;

    v26 = objc_msgSend(v13, "mainBundle");
    v63._object = (void *)0xE000000000000000;
    v27._countAndFlagsBits = 0x425F574F4C4C4F46;
    v27._object = (void *)0xED00004E4F545455;
    v28._countAndFlagsBits = 0;
    v28._object = (void *)0xE000000000000000;
    v63._countAndFlagsBits = 0;
    v29 = NSLocalizedString(_:tableName:bundle:value:comment:)(v27, (Swift::String_optional)0, (NSBundle)v26, v28, v63);
    v50 = v4;

    v30 = objc_msgSend(v13, "mainBundle");
    v31._countAndFlagsBits = 0xD000000000000017;
    v64._object = (void *)0xE000000000000000;
    v31._object = (void *)0x800000000030B0D0;
    v32._countAndFlagsBits = 0;
    v32._object = (void *)0xE000000000000000;
    v64._countAndFlagsBits = 0;
    v33 = NSLocalizedString(_:tableName:bundle:value:comment:)(v31, (Swift::String_optional)0, (NSBundle)v30, v32, v64);

    v34 = type metadata accessor for TextFieldAction(0);
    swift_allocObject(v34, *(unsigned int *)(v34 + 48), *(unsigned __int16 *)(v34 + 52));
    v35 = sub_E3210(v49, (uint64_t)v48, 0, 0, v29._countAndFlagsBits, (uint64_t)v29._object, v33._countAndFlagsBits, (uint64_t)v33._object, 0, 0, 1u, 1, 0x20u, (uint64_t)sub_1673B0, v21);
    swift_release(v21);
    v58 = v34;
    v59 = sub_109F30(&qword_3B2810, (void (*)(uint64_t))type metadata accessor for TextFieldAction);
    *(_QWORD *)&v57 = v35;
    v36 = type metadata accessor for ImpressionMetrics(0);
    v37 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56);
    v38 = (uint64_t)v53;
    v37(v53, 1, 1, v36);
    v39 = _s8ShelfKit12ActionButtonV2IDVAEycfC_0();
    v41 = v40;
    v42 = (uint64_t)v6 + v3[6];
    v51((char *)v42, 1, 1, v19);
    v43 = v3[7];
    *((_BYTE *)v6 + v43) = 2;
    v44 = (uint64_t)v6 + v3[9];
    v37((char *)v44, 1, 1, v36);
    *v6 = v39;
    v6[1] = v41;
    v45 = (unint64_t)object;
    v6[2] = countAndFlagsBits;
    v6[3] = v45;
    sub_3C454((uint64_t)v52, v42, &qword_3BEB70);
    *((_BYTE *)v6 + v43) = 2;
    sub_F4D8(&v57, (uint64_t)v6 + v3[8]);
    sub_3C454(v38, v44, (uint64_t *)&unk_3B8790);
    v46 = v56;
    sub_167290((uint64_t)v6, v56);
    __swift_destroy_boxed_opaque_existential_1(v60);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, int *))(v50 + 56))(v46, 0, 1, v3);
  }
  else
  {
    sub_1459C((uint64_t)&v57, &qword_3BD600);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v4 + 56))(a1, 1, 1, v3);
  }
}

uint64_t sub_16710C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v16 - v10;
  if (a2)
  {
    swift_bridgeObjectRetain();
    URL.init(string:)(a1, a2);
    swift_bridgeObjectRelease();
    sub_15BD4((uint64_t)v8, (uint64_t)v11, &qword_3B4370);
    v12 = a3[3];
    v13 = a3[4];
    __swift_project_boxed_opaque_existential_1(a3, v12);
    v14 = LibraryActionControllerProtocol.subscribe(feedUrl:adamId:location:explicit:displaySuccessHUD:)((uint64_t)v11, 0, 1, 0, 0, 0, 1, v12, v13);
    swift_release(v14);
    sub_1459C((uint64_t)v11, &qword_3B4370);
  }
  return 0;
}

_QWORD *InformationViewCoordinator.deinit()
{
  _QWORD *v0;

  sub_6AC00(v0[2], v0[3], v0[4]);
  sub_1459C((uint64_t)(v0 + 5), &qword_3BD600);
  return v0;
}

uint64_t InformationViewCoordinator.__deallocating_deinit()
{
  _QWORD *v0;

  sub_6AC00(v0[2], v0[3], v0[4]);
  sub_1459C((uint64_t)(v0 + 5), &qword_3BD600);
  return swift_deallocClassInstance(v0, 80, 7);
}

uint64_t sub_167290(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ActionButton(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1672D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ActionButton(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for InformationViewCoordinator()
{
  return objc_opt_self(_TtC8ShelfKit26InformationViewCoordinator);
}

uint64_t method lookup function for InformationViewCoordinator(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for InformationViewCoordinator);
}

uint64_t sub_167344(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BD600);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_16738C()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1((_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1673B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_16710C(a1, a2, (_QWORD *)(v2 + 16));
}

unint64_t static FetchSmartPlayEpisodeAdamIDIntent.kind.getter()
{
  return 0xD000000000000021;
}

void sub_1673D4(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000021;
  a1[1] = 0x8000000000310020;
}

Swift::Int sub_1673F4()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  String.hash(into:)(v1, 0x6D616441776F6873, 0xEA00000000006449);
  return Hasher._finalize()();
}

uint64_t sub_167448(uint64_t a1)
{
  return String.hash(into:)(a1, 0x6D616441776F6873, 0xEA00000000006449);
}

Swift::Int sub_167464()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  String.hash(into:)(v1, 0x6D616441776F6873, 0xEA00000000006449);
  return Hasher._finalize()();
}

uint64_t sub_1674B4@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_3746F8, v3);
  result = swift_bridgeObjectRelease(v4);
  *a2 = v5 != 0;
  return result;
}

void sub_167504(_QWORD *a1@<X8>)
{
  *a1 = 0x6D616441776F6873;
  a1[1] = 0xEA00000000006449;
}

uint64_t sub_167524()
{
  return 0x6D616441776F6873;
}

uint64_t sub_167540@<X0>(Swift::String string@<0:X0, 8:X1>, BOOL *a2@<X8>)
{
  void *object;
  Swift::String v3;
  Swift::Int v5;
  uint64_t result;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_374730, v3);
  result = swift_bridgeObjectRelease(object);
  *a2 = v5 != 0;
  return result;
}

uint64_t sub_167594(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1676E0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1675BC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1676E0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t FetchSmartPlayEpisodeAdamIDIntent.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BD6B0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = a1[3];
  v9 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v8);
  v10 = sub_1676E0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for FetchSmartPlayEpisodeAdamIDIntent.CodingKeys, &type metadata for FetchSmartPlayEpisodeAdamIDIntent.CodingKeys, v10, v8, v9);
  v13 = v7;
  sub_13E9C();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v13);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_1676E0()
{
  unint64_t result;

  result = qword_3BD6B8;
  if (!qword_3BD6B8)
  {
    result = swift_getWitnessTable(&unk_2F9470);
    atomic_store(result, (unint64_t *)&qword_3BD6B8);
  }
  return result;
}

unint64_t sub_167728()
{
  unint64_t result;

  result = qword_3BD6C0;
  if (!qword_3BD6C0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for FetchSmartPlayEpisodeAdamIDIntent);
    atomic_store(result, (unint64_t *)&qword_3BD6C0);
  }
  return result;
}

unint64_t sub_167774()
{
  unint64_t result;

  result = qword_3BD6C8;
  if (!qword_3BD6C8)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_3BD6D0);
    sub_55FA4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?);
    atomic_store(result, (unint64_t *)&qword_3BD6C8);
  }
  return result;
}

uint64_t sub_1677D8(_QWORD *a1)
{
  return FetchSmartPlayEpisodeAdamIDIntent.encode(to:)(a1);
}

uint64_t sub_1677EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1679CC();
  return CustomJSValueConvertible<>.jsRepresentation(in:)(a1, a2, a3, v6);
}

ValueMetadata *type metadata accessor for FetchSmartPlayEpisodeAdamIDIntent()
{
  return &type metadata for FetchSmartPlayEpisodeAdamIDIntent;
}

uint64_t storeEnumTagSinglePayload for FetchSmartPlayEpisodeAdamIDIntent.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_167898 + 4 * byte_2F9220[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1678B8 + 4 * byte_2F9225[v4]))();
}

_BYTE *sub_167898(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1678B8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1678C0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1678C8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1678D0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1678D8(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for FetchSmartPlayEpisodeAdamIDIntent.CodingKeys()
{
  return &type metadata for FetchSmartPlayEpisodeAdamIDIntent.CodingKeys;
}

unint64_t sub_1678F8()
{
  unint64_t result;

  result = qword_3BD6D8;
  if (!qword_3BD6D8)
  {
    result = swift_getWitnessTable(&unk_2F9448);
    atomic_store(result, (unint64_t *)&qword_3BD6D8);
  }
  return result;
}

unint64_t sub_167940()
{
  unint64_t result;

  result = qword_3BD6E0;
  if (!qword_3BD6E0)
  {
    result = swift_getWitnessTable("Ѭ\b");
    atomic_store(result, (unint64_t *)&qword_3BD6E0);
  }
  return result;
}

unint64_t sub_167988()
{
  unint64_t result;

  result = qword_3BD6E8;
  if (!qword_3BD6E8)
  {
    result = swift_getWitnessTable(&unk_2F93A8);
    atomic_store(result, (unint64_t *)&qword_3BD6E8);
  }
  return result;
}

unint64_t sub_1679CC()
{
  unint64_t result;

  result = qword_3BD6F0;
  if (!qword_3BD6F0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for FetchSmartPlayEpisodeAdamIDIntent);
    atomic_store(result, (unint64_t *)&qword_3BD6F0);
  }
  return result;
}

uint64_t UpsellBanner.artwork.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_267BC(v1 + OBJC_IVAR____TtC8ShelfKit12UpsellBanner_artwork, a1, &qword_3BEB70);
}

uint64_t UpsellBanner.wordmarkArtwork.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_267BC(v1 + OBJC_IVAR____TtC8ShelfKit12UpsellBanner_wordmarkArtwork, a1, &qword_3BEB70);
}

uint64_t UpsellBanner.artworkShowsPlus.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8ShelfKit12UpsellBanner_artworkShowsPlus);
}

uint64_t UpsellBanner.shortTitle.getter()
{
  return sub_1CCE8(&OBJC_IVAR____TtC8ShelfKit12UpsellBanner_shortTitle);
}

uint64_t UpsellBanner.subtitle.getter()
{
  return sub_1CCE8(&OBJC_IVAR____TtC8ShelfKit12UpsellBanner_subtitle);
}

uint64_t UpsellBanner.cta.getter()
{
  return sub_1CCE8(&OBJC_IVAR____TtC8ShelfKit12UpsellBanner_cta);
}

uint64_t UpsellBanner.action.getter()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit12UpsellBanner_action));
}

uint64_t UpsellBanner.subtitleAction.getter()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit12UpsellBanner_subtitleAction));
}

uint64_t UpsellBanner.channelLinkAction.getter()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit12UpsellBanner_channelLinkAction));
}

uint64_t UpsellBanner.channelLinkTitle.getter()
{
  return sub_1CCE8(&OBJC_IVAR____TtC8ShelfKit12UpsellBanner_channelLinkTitle);
}

uint64_t UpsellBanner.appBundleId.getter()
{
  return sub_1CCE8(&OBJC_IVAR____TtC8ShelfKit12UpsellBanner_appBundleId);
}

uint64_t UpsellBanner.appAdamID.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit12UpsellBanner_appAdamID);
}

uint64_t UpsellBanner.customProductPageID.getter()
{
  return sub_1CCE8(&OBJC_IVAR____TtC8ShelfKit12UpsellBanner_customProductPageID);
}

uint64_t UpsellBanner.externalAppOfferDeeplink.getter()
{
  return sub_1CCE8(&OBJC_IVAR____TtC8ShelfKit12UpsellBanner_externalAppOfferDeeplink);
}

uint64_t UpsellBanner.appName.getter()
{
  return sub_1CCE8(&OBJC_IVAR____TtC8ShelfKit12UpsellBanner_appName);
}

BOOL UpsellBanner.hasChannelLinkData.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit12UpsellBanner_channelLinkAction)
      || *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit12UpsellBanner_channelLinkTitle + 8) != 0;
}

BOOL UpsellBanner.isEntitlementsBanner.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit12UpsellBanner_appName + 8) != 0;
}

uint64_t UpsellBanner.isForFirstPartyApp.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8ShelfKit12UpsellBanner_isForFirstPartyApp);
}

uint64_t UpsellBanner.impressionMetrics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_267BC(v1 + OBJC_IVAR____TtC8ShelfKit12UpsellBanner_impressionMetrics, a1, (uint64_t *)&unk_3B8790);
}

void *UpsellBanner.impressionableActions.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit12UpsellBanner_action);
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit12UpsellBanner_subtitleAction);
  swift_retain(v2);
  v3 = swift_retain_n(v1, 2);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v3);
  v5 = *(_QWORD *)((char *)&dword_10 + ((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8));
  v4 = *(_QWORD *)((char *)&dword_18 + ((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8));
  if (v5 >= v4 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v4 > 1, v5 + 1, 1);
  v6 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v5, v1);
  specialized Array._endMutation()(v6);
  if (v2)
  {
    v7 = swift_retain(v2);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v7);
    v9 = *(_QWORD *)((char *)&dword_10 + ((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8));
    v8 = *(_QWORD *)((char *)&dword_18 + ((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8));
    if (v9 >= v8 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
    v10 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v9, v2);
    specialized Array._endMutation()(v10);
  }
  swift_release(v1);
  swift_release(v2);
  return &_swiftEmptyArrayStorage;
}

uint64_t UpsellBanner.__allocating_init(deserializing:using:)(char *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t Instance15byDeserializing5usingACSg9JetEngine10JSONObjectV_AH11JSONContextVtFZ_0;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *boxed_opaque_existential_2Tm;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(char *, uint64_t);
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  void (*v111)(uint64_t, uint64_t, uint64_t);
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  void (*v122)(uint64_t, uint64_t);
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  char v132;
  uint64_t v133;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  void (*v173)(char *, uint64_t);
  uint64_t v174;
  _QWORD v175[5];
  uint64_t v176;

  v176 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  v4 = __chkstk_darwin(v3);
  v165 = (uint64_t)&v135 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v166 = (char *)&v135 - v6;
  v174 = type metadata accessor for JSONContext(0);
  v172 = *(_QWORD *)(v174 - 8);
  __chkstk_darwin(v174);
  v160 = (uint64_t)&v135 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
  v9 = __chkstk_darwin(v8);
  v164 = (uint64_t)&v135 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v163 = (uint64_t)&v135 - v12;
  v13 = __chkstk_darwin(v11);
  v170 = (uint64_t)&v135 - v14;
  __chkstk_darwin(v13);
  v169 = (uint64_t)&v135 - v15;
  v16 = type metadata accessor for JSONObject(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v162 = (char *)&v135 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v18);
  v161 = (char *)&v135 - v21;
  v22 = __chkstk_darwin(v20);
  v159 = (uint64_t)&v135 - v23;
  v24 = __chkstk_darwin(v22);
  v158 = (char *)&v135 - v25;
  v26 = __chkstk_darwin(v24);
  v157 = (uint64_t)&v135 - v27;
  v28 = __chkstk_darwin(v26);
  v30 = (char *)&v135 - v29;
  v31 = __chkstk_darwin(v28);
  v33 = (char *)&v135 - v32;
  v34 = __chkstk_darwin(v31);
  v36 = (char *)&v135 - v35;
  v37 = __chkstk_darwin(v34);
  v39 = (char *)&v135 - v38;
  __chkstk_darwin(v37);
  v41 = (char *)&v135 - v40;
  v42 = a1;
  JSONObject.subscript.getter(0x6E6F69746361, 0xE600000000000000);
  Instance15byDeserializing5usingACSg9JetEngine10JSONObjectV_AH11JSONContextVtFZ_0 = _s8ShelfKit6ActionC17tryToMakeInstance15byDeserializing5usingACSg9JetEngine10JSONObjectV_AH11JSONContextVtFZ_0((uint64_t)v41, v176);
  v173 = *(void (**)(char *, uint64_t))(v17 + 8);
  v173(v41, v16);
  if (!Instance15byDeserializing5usingACSg9JetEngine10JSONObjectV_AH11JSONContextVtFZ_0)
  {
    v66 = type metadata accessor for JSONError(0);
    v67 = sub_F1C0((unint64_t *)&qword_3B0CB0, (void (*)(uint64_t))&type metadata accessor for JSONError, (uint64_t)&protocol conformance descriptor for JSONError);
    swift_allocError(v66, v67, 0, 0);
    *v68 = 0x6E6F69746361;
    v69 = v171;
    v68[1] = 0xE600000000000000;
    v68[2] = v69;
    v70 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v66 - 8) + 104))(v68, enum case for JSONError.missingProperty(_:), v66);
    swift_willThrow(v70);
    v46 = v42;
LABEL_10:
    v71 = v176;
    v72 = v172;
    v50 = v16;
    v51 = v173;
    v73 = v174;
    goto LABEL_21;
  }
  v44 = type metadata accessor for ExternalUrlAction(0);
  v45 = swift_dynamicCastClass(Instance15byDeserializing5usingACSg9JetEngine10JSONObjectV_AH11JSONContextVtFZ_0, v44);
  v167 = Instance15byDeserializing5usingACSg9JetEngine10JSONObjectV_AH11JSONContextVtFZ_0;
  if (!v45)
  {
    v74 = v42;
    v75 = JSONObject.subscript.getter(6386787, 0xE300000000000000);
    v157 = JSONObject.string.getter(v75);
    v77 = v76;
    v50 = v16;
    v78 = v173;
    v173(v39, v16);
    if (!v77)
    {
      v66 = type metadata accessor for JSONError(0);
      v88 = sub_F1C0((unint64_t *)&qword_3B0CB0, (void (*)(uint64_t))&type metadata accessor for JSONError, (uint64_t)&protocol conformance descriptor for JSONError);
      swift_allocError(v66, v88, 0, 0);
      *v89 = 6386787;
      v89[1] = 0xE300000000000000;
      v89[2] = v171;
      v90 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v66 - 8) + 104))(v89, enum case for JSONError.missingProperty(_:), v66);
      swift_willThrow(v90);
      swift_release(v167);
      v46 = v74;
      v71 = v176;
      v73 = v174;
      v72 = v172;
      v51 = v78;
      goto LABEL_21;
    }
    v154 = v77;
    v79 = JSONObject.subscript.getter(0x656C746974627573, 0xE800000000000000);
    v80 = JSONObject.string.getter(v79);
    v82 = v81;
    v78(v36, v16);
    v83 = v82;
    v46 = v74;
    if (v83)
    {
      v142 = 0;
      v141 = 0;
      v136 = 0;
      v135 = 0;
      v137 = 0;
      v155 = 0;
      v153 = 0;
      v156 = 0;
      v138 = 0;
      v143 = 1;
      v50 = v16;
      v51 = v173;
      v140 = v80;
      v139 = v83;
LABEL_25:
      v144 = v50;
      JSONObject.subscript.getter(0x656C746974627573, 0xEE006E6F69746341);
      v104 = v176;
      v152 = _s8ShelfKit6ActionC17tryToMakeInstance15byDeserializing5usingACSg9JetEngine10JSONObjectV_AH11JSONContextVtFZ_0((uint64_t)v41, v176);
      v51(v41, v50);
      v105 = JSONObject.subscript.getter(0xD000000000000011, 0x8000000000311960);
      v151 = JSONObject.string.getter(v105);
      v150 = v106;
      v51(v41, v50);
      JSONObject.subscript.getter(0xD000000000000011, 0x8000000000311980);
      v149 = _s8ShelfKit6ActionC17tryToMakeInstance15byDeserializing5usingACSg9JetEngine10JSONObjectV_AH11JSONContextVtFZ_0((uint64_t)v41, v104);
      v51(v41, v50);
      v146 = 0xD000000000000010;
      v107 = JSONObject.subscript.getter(0xD000000000000010, 0x80000000003119A0);
      v148 = JSONObject.string.getter(v107);
      v147 = v108;
      v51(v41, v50);
      v109 = type metadata accessor for ArtworkModel(0);
      JSONObject.subscript.getter(0x6B726F77747261, 0xE700000000000000);
      v110 = v46;
      v111 = *(void (**)(uint64_t, uint64_t, uint64_t))(v172 + 16);
      v112 = v160;
      v111(v160, v104, v174);
      sub_F1C0((unint64_t *)&qword_3B2828, (void (*)(uint64_t))&type metadata accessor for ArtworkModel, (uint64_t)&protocol conformance descriptor for ArtworkModel);
      ExpressibleByJSON.init(tryDeserializing:using:)(v41, v112, v109);
      JSONObject.subscript.getter(0x6B72616D64726F77, 0xEF6B726F77747241);
      v113 = v104;
      v114 = v104;
      v115 = v174;
      v111(v112, v113, v174);
      ExpressibleByJSON.init(tryDeserializing:using:)(v41, v112, v109);
      v116 = type metadata accessor for ImpressionMetrics(0);
      JSONObject.subscript.getter(0xD000000000000011, 0x8000000000309180);
      v111(v112, v114, v115);
      v117 = (uint64_t)v166;
      ExpressibleByJSON.init(tryDeserializing:using:)(v41, v112, v116);
      v118 = v158;
      v119 = JSONObject.subscript.getter(0x6C746954676E6F6CLL, 0xE900000000000065);
      v160 = JSONObject.string.getter(v119);
      v145 = v120;
      v121 = v144;
      v122 = (void (*)(uint64_t, uint64_t))v173;
      v173(v118, v144);
      v123 = v163;
      sub_267BC(v169, v163, &qword_3BEB70);
      v124 = v164;
      sub_267BC(v170, v164, &qword_3BEB70);
      v125 = v159;
      v126 = JSONObject.subscript.getter(v146, 0x80000000003119C0);
      LODWORD(v158) = JSONObject.BOOL.getter(v126);
      v122(v125, v121);
      v127 = v161;
      v128 = JSONObject.subscript.getter(0x74695474726F6873, 0xEA0000000000656CLL);
      v159 = JSONObject.string.getter(v128);
      v146 = v129;
      v122((uint64_t)v127, v121);
      v130 = v162;
      v131 = JSONObject.subscript.getter(0xD000000000000012, 0x80000000003119E0);
      v132 = JSONObject.BOOL.getter(v131);
      v122((uint64_t)v130, v121);
      LOBYTE(v112) = v132 & 1;
      v133 = v165;
      sub_267BC(v117, v165, (uint64_t *)&unk_3B8790);
      v66 = swift_allocObject(v171, *(unsigned int *)(v171 + 48), *(unsigned __int16 *)(v171 + 52));
      UpsellBanner.init(subscriptionTitle:longTitle:artwork:wordmarkArtwork:artworkShowsPlus:shortTitle:subtitle:cta:action:subtitleAction:channelLinkAction:channelLinkTitle:appBundleId:appAdamID:customProductPageID:externalAppOfferDeeplink:appName:isForFirstPartyApp:impressionMetrics:)(v151, v150, v160, v145, v123, v124, v158 & 1, v159, v146, v140, v139, v157, v154, v167, v152, v149, v148, v147, v156,
        v138,
        v137,
        v143 & 1,
        v136,
        v135,
        v142,
        v141,
        v155,
        v153,
        v112,
        v133);
      (*(void (**)(uint64_t, uint64_t))(v172 + 8))(v176, v174);
      v122((uint64_t)v110, v121);
      sub_1459C(v117, (uint64_t *)&unk_3B8790);
      sub_1459C(v170, &qword_3BEB70);
      sub_1459C(v169, &qword_3BEB70);
      return v66;
    }
    swift_bridgeObjectRelease();
    v66 = type metadata accessor for JSONError(0);
    v93 = sub_F1C0((unint64_t *)&qword_3B0CB0, (void (*)(uint64_t))&type metadata accessor for JSONError, (uint64_t)&protocol conformance descriptor for JSONError);
    swift_allocError(v66, v93, 0, 0);
    *v94 = 0x656C746974627573;
    v94[1] = 0xE800000000000000;
    v94[2] = v171;
    v95 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v66 - 8) + 104))(v94, enum case for JSONError.missingProperty(_:), v66);
    swift_willThrow(v95);
    swift_release(v167);
    goto LABEL_10;
  }
  v46 = v42;
  v47 = JSONObject.subscript.getter(0x6C646E7542707061, 0xEB00000000644965);
  v156 = JSONObject.string.getter(v47);
  v49 = v48;
  v50 = v16;
  v51 = v173;
  v173(v33, v16);
  if (v49)
  {
    v52 = v49;
    v53 = JSONObject.subscript.getter(0x656D614E707061, 0xE700000000000000);
    v155 = JSONObject.string.getter(v53);
    v55 = v54;
    v51(v30, v50);
    if (v55)
    {
      v153 = v55;
      v56 = type metadata accessor for Podcasts(0);
      v175[3] = v56;
      v175[4] = sub_F1C0((unint64_t *)&qword_3B33B8, (void (*)(uint64_t))&type metadata accessor for Podcasts, (uint64_t)&protocol conformance descriptor for Podcasts);
      boxed_opaque_existential_2Tm = __swift_allocate_boxed_opaque_existential_2Tm(v175);
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v56 - 8) + 104))(boxed_opaque_existential_2Tm, enum case for Podcasts.inAppProductPage(_:), v56);
      LODWORD(v56) = isFeatureEnabled(_:)(v175);
      __swift_destroy_boxed_opaque_existential_1(v175);
      v58 = v56;
      if ((v56 & 1) == 0)
      {
        v91 = 0;
        v92 = 0;
        v137 = 0;
LABEL_24:
        v135 = v91;
        v136 = v92;
        v143 = v58 ^ 1;
        v100 = JSONObject.subscript.getter(0xD000000000000018, 0x8000000000311A00);
        v142 = JSONObject.string.getter(v100);
        v141 = v101;
        v51(v41, v50);
        v102 = JSONObject.subscript.getter(0x656C746974627573, 0xE800000000000000);
        v140 = JSONObject.string.getter(v102);
        v139 = v103;
        v51(v41, v50);
        v157 = 0;
        v154 = 0;
        v138 = v52;
        goto LABEL_25;
      }
      v59 = v157;
      v60 = JSONObject.subscript.getter(0x496D616441707061, 0xE900000000000064);
      v61 = JSONObject.string.getter(v60);
      if (v62)
      {
        v63 = v168;
        v64 = static AdamID.parse(_:)(v61, v62);
        if (v63)
        {
          v65 = swift_bridgeObjectRelease();
          v137 = static AdamID.empty.getter(v65);
          swift_errorRelease(v63);
          v168 = 0;
        }
        else
        {
          v137 = v64;
          v168 = 0;
          swift_bridgeObjectRelease();
        }
        v51 = v173;
        v173((char *)v59, v50);
        v98 = JSONObject.subscript.getter(0xD000000000000013, 0x8000000000311A20);
        v92 = JSONObject.string.getter(v98);
        v91 = v99;
        v51(v41, v50);
        goto LABEL_24;
      }
      v51((char *)v59, v50);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v66 = type metadata accessor for JSONError(0);
      v96 = sub_F1C0((unint64_t *)&qword_3B0CB0, (void (*)(uint64_t))&type metadata accessor for JSONError, (uint64_t)&protocol conformance descriptor for JSONError);
      swift_allocError(v66, v96, 0, 0);
      v86 = v85;
      *v85 = 0x496D616441707061;
      v85[1] = 0xE900000000000064;
    }
    else
    {
      swift_bridgeObjectRelease();
      v66 = type metadata accessor for JSONError(0);
      v87 = sub_F1C0((unint64_t *)&qword_3B0CB0, (void (*)(uint64_t))&type metadata accessor for JSONError, (uint64_t)&protocol conformance descriptor for JSONError);
      swift_allocError(v66, v87, 0, 0);
      v86 = v85;
      *v85 = 0x656D614E707061;
      v85[1] = 0xE700000000000000;
    }
  }
  else
  {
    v66 = type metadata accessor for JSONError(0);
    v84 = sub_F1C0((unint64_t *)&qword_3B0CB0, (void (*)(uint64_t))&type metadata accessor for JSONError, (uint64_t)&protocol conformance descriptor for JSONError);
    swift_allocError(v66, v84, 0, 0);
    v86 = v85;
    *v85 = 0x6C646E7542707061;
    v85[1] = 0xEB00000000644965;
  }
  v85[2] = v171;
  v97 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v66 - 8) + 104))(v86, enum case for JSONError.missingProperty(_:), v66);
  swift_willThrow(v97);
  swift_release(v167);
  v71 = v176;
  v73 = v174;
  v72 = v172;
LABEL_21:
  (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v71, v73);
  v51(v46, v50);
  return v66;
}

uint64_t UpsellBanner.__allocating_init(subscriptionTitle:longTitle:artwork:wordmarkArtwork:artworkShowsPlus:shortTitle:subtitle:cta:action:subtitleAction:channelLinkAction:channelLinkTitle:appBundleId:appAdamID:customProductPageID:externalAppOfferDeeplink:appName:isForFirstPartyApp:impressionMetrics:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,unsigned __int8 a29,uint64_t a30)
{
  uint64_t v30;
  uint64_t v34;

  v34 = swift_allocObject(v30, *(unsigned int *)(v30 + 48), *(unsigned __int16 *)(v30 + 52));
  UpsellBanner.init(subscriptionTitle:longTitle:artwork:wordmarkArtwork:artworkShowsPlus:shortTitle:subtitle:cta:action:subtitleAction:channelLinkAction:channelLinkTitle:appBundleId:appAdamID:customProductPageID:externalAppOfferDeeplink:appName:isForFirstPartyApp:impressionMetrics:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22 & 1,
    a23,
    a24,
    a25,
    a26,
    a27,
    a28,
    a29,
    a30);
  return v34;
}

_QWORD *UpsellBanner.init(subscriptionTitle:longTitle:artwork:wordmarkArtwork:artworkShowsPlus:shortTitle:subtitle:cta:action:subtitleAction:channelLinkAction:channelLinkTitle:appBundleId:appAdamID:customProductPageID:externalAppOfferDeeplink:appName:isForFirstPartyApp:impressionMetrics:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,unsigned __int8 a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,unsigned __int8 a29,uint64_t a30)
{
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  char *v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;

  v31 = v30;
  v74 = a8;
  v72 = a7;
  v69 = a6;
  v65 = a5;
  v88 = a30;
  v87 = a29;
  v85 = a27;
  v86 = a28;
  v83 = a25;
  v84 = a26;
  v81 = a23;
  v82 = a24;
  v80 = a22;
  v78 = a20;
  v79 = a21;
  v76 = a18;
  v77 = a19;
  v75 = a17;
  v73 = a16;
  v70 = a14;
  v71 = a15;
  v68 = a13;
  v67 = a12;
  v66 = a11;
  v64 = a10;
  v63 = a9;
  v36 = type metadata accessor for UUID(0);
  v37 = *(_QWORD *)(v36 - 8);
  v38 = __chkstk_darwin(v36);
  v40 = (char *)&v62 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init()(v38);
  v41 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
  v43 = v42;
  (*(void (**)(char *, uint64_t))(v37 + 8))(v40, v36);
  v31[2] = v41;
  v31[3] = v43;
  v31[4] = a1;
  v31[5] = a2;
  v31[6] = a3;
  v31[7] = a4;
  sub_15BD4(v65, (uint64_t)v31 + OBJC_IVAR____TtC8ShelfKit12UpsellBanner_artwork, &qword_3BEB70);
  sub_15BD4(v69, (uint64_t)v31 + OBJC_IVAR____TtC8ShelfKit12UpsellBanner_wordmarkArtwork, &qword_3BEB70);
  *((_BYTE *)v31 + OBJC_IVAR____TtC8ShelfKit12UpsellBanner_artworkShowsPlus) = v72;
  v44 = (_QWORD *)((char *)v31 + OBJC_IVAR____TtC8ShelfKit12UpsellBanner_shortTitle);
  v45 = v63;
  *v44 = v74;
  v44[1] = v45;
  v46 = (_QWORD *)((char *)v31 + OBJC_IVAR____TtC8ShelfKit12UpsellBanner_subtitle);
  v47 = v66;
  *v46 = v64;
  v46[1] = v47;
  v48 = (_QWORD *)((char *)v31 + OBJC_IVAR____TtC8ShelfKit12UpsellBanner_cta);
  v49 = v68;
  *v48 = v67;
  v48[1] = v49;
  *(_QWORD *)((char *)v31 + OBJC_IVAR____TtC8ShelfKit12UpsellBanner_action) = v70;
  *(_QWORD *)((char *)v31 + OBJC_IVAR____TtC8ShelfKit12UpsellBanner_subtitleAction) = v71;
  *(_QWORD *)((char *)v31 + OBJC_IVAR____TtC8ShelfKit12UpsellBanner_channelLinkAction) = v73;
  v50 = (_QWORD *)((char *)v31 + OBJC_IVAR____TtC8ShelfKit12UpsellBanner_channelLinkTitle);
  v51 = v76;
  *v50 = v75;
  v50[1] = v51;
  v52 = (_QWORD *)((char *)v31 + OBJC_IVAR____TtC8ShelfKit12UpsellBanner_appBundleId);
  v53 = v78;
  *v52 = v77;
  v52[1] = v53;
  v54 = (char *)v31 + OBJC_IVAR____TtC8ShelfKit12UpsellBanner_appAdamID;
  *(_QWORD *)v54 = v79;
  v54[8] = v80 & 1;
  v55 = (_QWORD *)((char *)v31 + OBJC_IVAR____TtC8ShelfKit12UpsellBanner_customProductPageID);
  v56 = v82;
  *v55 = v81;
  v55[1] = v56;
  v57 = (_QWORD *)((char *)v31 + OBJC_IVAR____TtC8ShelfKit12UpsellBanner_externalAppOfferDeeplink);
  v58 = v84;
  *v57 = v83;
  v57[1] = v58;
  v59 = (_QWORD *)((char *)v31 + OBJC_IVAR____TtC8ShelfKit12UpsellBanner_appName);
  v60 = v86;
  *v59 = v85;
  v59[1] = v60;
  *((_BYTE *)v31 + OBJC_IVAR____TtC8ShelfKit12UpsellBanner_isForFirstPartyApp) = v87;
  sub_15BD4(v88, (uint64_t)v31 + OBJC_IVAR____TtC8ShelfKit12UpsellBanner_impressionMetrics, (uint64_t *)&unk_3B8790);
  return v31;
}

uint64_t UpsellBanner.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1459C(v0 + OBJC_IVAR____TtC8ShelfKit12UpsellBanner_artwork, &qword_3BEB70);
  sub_1459C(v0 + OBJC_IVAR____TtC8ShelfKit12UpsellBanner_wordmarkArtwork, &qword_3BEB70);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit12UpsellBanner_action));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit12UpsellBanner_subtitleAction));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit12UpsellBanner_channelLinkAction));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1459C(v0 + OBJC_IVAR____TtC8ShelfKit12UpsellBanner_impressionMetrics, (uint64_t *)&unk_3B8790);
  return v0;
}

uint64_t UpsellBanner.__deallocating_deinit()
{
  uint64_t v0;

  UpsellBanner.deinit();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1692B8@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t result;

  result = UpsellBanner.__allocating_init(deserializing:using:)(a1, a2);
  if (!v3)
    *a3 = result;
  return result;
}

void *sub_1692E0()
{
  return UpsellBanner.impressionableActions.getter();
}

uint64_t sub_169300(uint64_t a1, uint64_t a2)
{
  return sub_163A88(a1, a2, &OBJC_IVAR____TtC8ShelfKit12UpsellBanner_appBundleId);
}

uint64_t sub_16930C()
{
  _QWORD *v0;

  return *(_QWORD *)(*v0 + OBJC_IVAR____TtC8ShelfKit12UpsellBanner_appAdamID);
}

uint64_t sub_169328(uint64_t a1, uint64_t a2)
{
  return sub_163A88(a1, a2, &OBJC_IVAR____TtC8ShelfKit12UpsellBanner_customProductPageID);
}

uint64_t sub_169334(uint64_t a1, uint64_t a2)
{
  return sub_163A88(a1, a2, &OBJC_IVAR____TtC8ShelfKit12UpsellBanner_externalAppOfferDeeplink);
}

uint64_t sub_169340()
{
  _QWORD *v0;

  return *(unsigned __int8 *)(*v0 + OBJC_IVAR____TtC8ShelfKit12UpsellBanner_isForFirstPartyApp);
}

uint64_t sub_169354@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return sub_267BC(*v1 + OBJC_IVAR____TtC8ShelfKit12UpsellBanner_impressionMetrics, a1, (uint64_t *)&unk_3B8790);
}

uint64_t sub_169384(uint64_t a1)
{
  uint64_t result;

  result = sub_F1C0(&qword_3BD6F8, (void (*)(uint64_t))type metadata accessor for UpsellBanner, (uint64_t)&protocol conformance descriptor for UpsellBanner);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for UpsellBanner(uint64_t a1)
{
  uint64_t result;

  result = qword_3BD728;
  if (!qword_3BD728)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for UpsellBanner);
  return result;
}

uint64_t sub_1693FC()
{
  return type metadata accessor for UpsellBanner(0);
}

void sub_169404(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  char *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;

  v6[0] = &unk_2F9598;
  v6[1] = &unk_2F95B0;
  v6[2] = &unk_2F95B0;
  sub_3EE70(319, (unint64_t *)&qword_3B28A0, (uint64_t (*)(uint64_t))&type metadata accessor for ArtworkModel);
  if (v3 <= 0x3F)
  {
    v7 = *(_QWORD *)(v2 - 8) + 64;
    v8 = v7;
    v9 = &unk_2F95C8;
    v10 = &unk_2F95B0;
    v11 = &unk_2F95B0;
    v12 = &unk_2F95B0;
    v13 = (char *)&value witness table for Builtin.NativeObject + 64;
    v14 = &unk_2F95E0;
    v15 = &unk_2F95E0;
    v16 = &unk_2F95B0;
    v17 = &unk_2F95B0;
    v18 = &unk_2F95F8;
    v19 = &unk_2F95B0;
    v20 = &unk_2F95B0;
    v21 = &unk_2F95B0;
    v22 = &unk_2F95C8;
    sub_3EE70(319, (unint64_t *)&qword_3B2250, (uint64_t (*)(uint64_t))&type metadata accessor for ImpressionMetrics);
    if (v5 <= 0x3F)
    {
      v23 = *(_QWORD *)(v4 - 8) + 64;
      swift_updateClassMetadata2(a1, 256, 20, v6, a1 + 80);
    }
  }
}

uint64_t method lookup function for UpsellBanner(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for UpsellBanner);
}

uint64_t dispatch thunk of UpsellBanner.__allocating_init(deserializing:using:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 240))();
}

uint64_t dispatch thunk of UpsellBanner.__allocating_init(subscriptionTitle:longTitle:artwork:wordmarkArtwork:artworkShowsPlus:shortTitle:subtitle:cta:action:subtitleAction:channelLinkAction:channelLinkTitle:appBundleId:appAdamID:customProductPageID:externalAppOfferDeeplink:appName:isForFirstPartyApp:impressionMetrics:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 248))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

uint64_t ShowHeaderFactory.__allocating_init(detail:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_allocObject(v1, 24, 7);
  *(_QWORD *)(result + 16) = a1;
  return result;
}

uint64_t ShowHeaderFactory.init(detail:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return v1;
}

_QWORD *sub_1695DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  __n128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  char *v111;
  char v112;
  char v113[24];
  char v114[24];
  char v115;

  v108 = a2;
  v93 = a1;
  v95 = type metadata accessor for UUID(0);
  v101 = *(_QWORD *)(v95 - 8);
  __chkstk_darwin(v95);
  v100 = (char *)&v87 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v4);
  v111 = (char *)&v87 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = type metadata accessor for ActionMetrics(0);
  v98 = *(_QWORD *)(v99 - 8);
  __chkstk_darwin(v99);
  v109 = (char *)&v87 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = type metadata accessor for FlowDestination(0);
  __chkstk_darwin(v90);
  v94 = (uint64_t *)((char *)&v87 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
  __chkstk_darwin(v8);
  v110 = (uint64_t)&v87 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v12 = (char *)&v87 - v11;
  __chkstk_darwin(v13);
  v15 = (char *)&v87 - v14;
  __chkstk_darwin(v16);
  v18 = (char *)&v87 - v17;
  v96 = v2;
  v19 = *(_QWORD *)(v2 + 16);
  v20 = *(_QWORD *)(v19 + 40);
  v106 = *(_QWORD *)(v19 + 32);
  v21 = v19 + OBJC_IVAR____TtC8ShelfKit7Podcast_uberArtwork;
  sub_267BC(v19 + OBJC_IVAR____TtC8ShelfKit7Podcast_uberArtwork, (uint64_t)&v87 - v17, &qword_3BEB70);
  v22 = type metadata accessor for ArtworkModel(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v18, 1, v22) != 1;
  v105 = v20;
  swift_bridgeObjectRetain();
  sub_1459C((uint64_t)v18, &qword_3BEB70);
  sub_267BC(v19 + OBJC_IVAR____TtC8ShelfKit7Podcast_artwork, (uint64_t)v15, &qword_3BEB70);
  v25 = type metadata accessor for HeaderModel.PrimaryArtwork(0);
  v26 = swift_allocObject(v25, *(unsigned int *)(v25 + 48), *(unsigned __int16 *)(v25 + 52));
  *(_BYTE *)(v26 + 16) = v24;
  sub_15BD4((uint64_t)v15, v26 + OBJC_IVAR____TtCO8ShelfKit11HeaderModel14PrimaryArtwork_artwork, &qword_3BEB70);
  v107 = v12;
  sub_267BC(v21, (uint64_t)v12, &qword_3BEB70);
  v115 = 0;
  v27 = *(_QWORD *)(v19 + 48);
  v28 = *(void **)(v19 + 80);
  v102 = *(_QWORD *)(v19 + 56);
  v103 = v27;
  v29 = v23;
  swift_bridgeObjectRetain();
  if (v28)
  {
    v30 = v28;
    v92 = LanguageAwareString.string.getter();
    v91 = v31;

  }
  else
  {
    v92 = 0;
    v91 = 0;
  }
  v32 = type metadata accessor for PodcastDetail(0);
  v33 = swift_dynamicCastClass(v19, v32);
  v97 = v32;
  if (!v33)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 56))(v110, 1, 1, v22);
    v87 = 0;
    goto LABEL_25;
  }
  v34 = (uint64_t *)(v33 + OBJC_IVAR____TtC8ShelfKit13PodcastDetail_channel);
  v35 = swift_beginAccess(v33 + OBJC_IVAR____TtC8ShelfKit13PodcastDetail_channel, v113, 0, 0);
  v36 = *v34;
  if (!*v34)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v29 + 56))(v110, 1, 1, v22, v35);
    goto LABEL_17;
  }
  v37 = *(_QWORD *)(v36 + OBJC_IVAR____TtC8ShelfKit13ChannelDetail_availableShowCount);
  if (v37 < 1)
  {
    if (*(uint64_t *)(v36 + OBJC_IVAR____TtC8ShelfKit13ChannelDetail_showCount) > 1)
      goto LABEL_8;
  }
  else if (v37 > 1)
  {
LABEL_8:
    sub_267BC(v36 + OBJC_IVAR____TtC8ShelfKit13ChannelDetail_iconArtwork, v110, &qword_3BEB70);
    goto LABEL_13;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v29 + 56))(v110, 1, 1, v22, v35);
LABEL_13:
  v38 = *(_QWORD *)(v36 + OBJC_IVAR____TtC8ShelfKit13ChannelDetail_availableShowCount);
  if (v38 < 1)
  {
    if (*(uint64_t *)(v36 + OBJC_IVAR____TtC8ShelfKit13ChannelDetail_showCount) > 1)
      goto LABEL_15;
  }
  else if (v38 > 1)
  {
LABEL_15:
    v39 = (uint64_t)v94;
    *v94 = v36;
    swift_storeEnumTagMultiPayload(v39, v90, 10);
    v40 = *(_QWORD *)(v36 + 24);
    v41 = *(_QWORD *)(v36 + 32);
    v114[0] = 1;
    v112 = 0;
    swift_bridgeObjectRetain();
    v42 = swift_retain_n(v36, 2);
    v43 = (uint64_t)v109;
    static ActionMetrics.notInstrumented.getter(v42);
    v44 = type metadata accessor for FlowAction(0);
    swift_allocObject(v44, *(unsigned int *)(v44 + 48), *(unsigned __int16 *)(v44 + 52));
    v87 = FlowAction.init(_:id:title:presentationContext:animationBehavior:presentationStyle:destinationPageHeader:actionMetrics:)(v39, 0, 0, v40, v41, &v112, 0, 48, v114, v43);
    swift_release(v36);
    goto LABEL_18;
  }
LABEL_17:
  v87 = 0;
LABEL_18:
  v45 = *v34;
  if (*v34)
  {
    v46 = *(_QWORD *)(v45 + OBJC_IVAR____TtC8ShelfKit13ChannelDetail_availableShowCount);
    if (v46 < 1)
    {
      if (*(uint64_t *)(v45 + OBJC_IVAR____TtC8ShelfKit13ChannelDetail_showCount) <= 1)
        goto LABEL_25;
    }
    else if (v46 <= 1)
    {
      goto LABEL_25;
    }
    v47 = *(_QWORD *)(v45 + 32);
    if (v47)
    {
      v48 = *(_QWORD *)(v45 + 24);
      goto LABEL_26;
    }
  }
LABEL_25:
  v48 = *(_QWORD *)(v19 + 88);
  v47 = *(_QWORD *)(v19 + 96);
LABEL_26:
  v90 = v48;
  v89 = v47;
  swift_bridgeObjectRetain();
  v49 = sub_169EE0();
  v50 = *(_QWORD *)(v19 + 128);
  v104 = v26;
  v96 = v49;
  if (v50)
  {
    v51 = *(_QWORD *)(v19 + 120);
    v52 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B09C0);
    v53 = (_QWORD *)swift_allocObject(v52, 56, 7);
    *((_OWORD *)v53 + 1) = xmmword_2EA0D0;
    v53[4] = v51;
    v53[5] = v50;
    v88 = v53;
    *((_BYTE *)v53 + 48) = 6;
  }
  else
  {
    v88 = _swiftEmptyArrayStorage;
  }
  v54 = v95;
  swift_bridgeObjectRetain();
  v95 = sub_16A334();
  LODWORD(v94) = *(unsigned __int8 *)(v19 + OBJC_IVAR____TtC8ShelfKit7Podcast_paidSubscriptionActive);
  v55 = *(_QWORD *)(v19 + 32);
  v56 = *(_QWORD *)(v19 + 40);
  v57 = type metadata accessor for LibraryPodcastContextAction(0);
  v58 = swift_allocObject(v57, *(unsigned int *)(v57 + 48), *(unsigned __int16 *)(v57 + 52));
  v59 = (_QWORD *)(v58 + OBJC_IVAR____TtC8ShelfKit27LibraryPodcastContextAction_podcastUuid);
  *v59 = v55;
  v59[1] = v56;
  v60 = v58 + OBJC_IVAR____TtC8ShelfKit27LibraryPodcastContextAction_groupedEpisodeListType;
  *(_OWORD *)(v60 + 32) = 0u;
  *(_OWORD *)(v60 + 48) = 0u;
  *(_OWORD *)v60 = 0u;
  *(_OWORD *)(v60 + 16) = 0u;
  *(_BYTE *)(v60 + 64) = -1;
  v61 = type metadata accessor for ImpressionMetrics(0);
  v62 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 56);
  v63 = (uint64_t)v111;
  v62(v111, 1, 1, v61);
  v64 = swift_bridgeObjectRetain();
  v65 = v109;
  v66 = static ActionMetrics.notInstrumented.getter(v64);
  v67 = v100;
  UUID.init()(v66);
  v68 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
  v70 = v69;
  (*(void (**)(char *, uint64_t))(v101 + 8))(v67, v54);
  *(_QWORD *)(v58 + 16) = v68;
  *(_QWORD *)(v58 + 24) = v70;
  *(_QWORD *)(v58 + 32) = 0;
  *(_QWORD *)(v58 + 40) = 0;
  *(_BYTE *)(v58 + 48) = 32;
  (*(void (**)(uint64_t, char *, uint64_t))(v98 + 32))(v58 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v65, v99);
  sub_15BD4(v63, v58 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics, (uint64_t *)&unk_3B8790);
  v71 = type metadata accessor for LibraryPodcastOfferAction(0);
  swift_allocObject(v71, *(unsigned int *)(v71 + 48), *(unsigned __int16 *)(v71 + 52));
  v72 = swift_retain();
  v73 = sub_172C78(v72, 1);
  swift_release(v19);
  v74 = swift_dynamicCastClass(v19, v97);
  v75 = v74;
  v76 = v93;
  if (v74)
  {
    v77 = (char *)(v74 + OBJC_IVAR____TtC8ShelfKit13PodcastDetail_hasEverPlayed);
    swift_beginAccess(v74 + OBJC_IVAR____TtC8ShelfKit13PodcastDetail_hasEverPlayed, v114, 0, 0);
    v78 = *v77;
    v75 = *(_QWORD *)(v75 + OBJC_IVAR____TtC8ShelfKit13PodcastDetail_episodeToPlay);
    swift_retain();
  }
  else
  {
    v78 = 0;
  }
  v79 = *(_QWORD *)(v19 + 16);
  v80 = *(_BYTE *)(v19 + 24);
  v81 = v108;
  v82 = swift_bridgeObjectRetain();
  LOBYTE(v79) = v80 | (v79 != static AdamID.empty.getter(v82));
  v83 = (uint64_t)v111;
  v62(v111, 1, 1, v61);
  v84 = type metadata accessor for ShowHeader(0);
  swift_allocObject(v84, *(unsigned int *)(v84 + 48), *(unsigned __int16 *)(v84 + 52));
  v85 = sub_23B810(v106, v105, v104, (uint64_t)v107, 0, 255, &v115, v103, v102, v92, v91, v110, v87, v90, v89, v96, 0, 0, 0,
          (uint64_t)v88,
          0,
          (char)v94,
          v58,
          v73,
          v76,
          v81,
          v78,
          v75,
          v79 & 1,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          0,
          v83);
  swift_release(v95);
  return v85;
}

uint64_t sub_169EE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t (*v24)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE v59[24];

  v1 = type metadata accessor for UUID(0);
  v57 = *(_QWORD *)(v1 - 8);
  v58 = v1;
  __chkstk_darwin(v1);
  v52 = (char *)&v50 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v3);
  v56 = (char *)&v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ActionMetrics(0);
  v54 = *(_QWORD *)(v5 - 8);
  v55 = v5;
  __chkstk_darwin(v5);
  v53 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (char *)&v50 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0CC8);
  __chkstk_darwin(v10);
  v12 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(v0 + 16);
  v14 = type metadata accessor for PodcastDetail(0);
  v15 = swift_dynamicCastClass(v13, v14);
  if (v15 && (v16 = *(_QWORD *)(v15 + OBJC_IVAR____TtC8ShelfKit13PodcastDetail_episodeToPlay)) != 0)
  {
    v18 = *(_QWORD *)(v16 + 64);
    v17 = *(_QWORD *)(v16 + 72);
    v19 = *(_QWORD *)(v16 + 16);
    v20 = *(_BYTE *)(v16 + 24);
    if (*(_QWORD *)(v16 + OBJC_IVAR____TtC8ShelfKit7Episode_episodeEntitlementState) == 2)
    {
      v21 = *(_QWORD *)(v16 + 32);
      v22 = *(_BYTE *)(v16 + 40);
    }
    else
    {
      v21 = 0;
      v22 = 1;
    }
    v51 = v21;
    swift_bridgeObjectRetain();
  }
  else
  {
    v51 = 0;
    v19 = 0;
    v18 = 0;
    v17 = 0xE000000000000000;
    v22 = 1;
    v20 = 1;
  }
  v23 = type metadata accessor for EpisodeListSettings(0);
  v24 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56);
  v25 = v24(v12, 1, 1, v23);
  static ActionMetrics.notInstrumented.getter(v25);
  v26 = type metadata accessor for LibraryPlayPauseAction(0);
  v27 = swift_allocObject(v26, *(unsigned int *)(v26 + 48), *(unsigned __int16 *)(v26 + 52));
  v50 = v9;
  v28 = v27 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_settings;
  v24((char *)(v27 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_settings), 1, 1, v23);
  *(_BYTE *)(v27 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_sharedContent) = 0;
  v29 = (_QWORD *)(v27 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_episodeUuid);
  *v29 = v18;
  v29[1] = v17;
  v30 = v27 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_episodeAdamId;
  *(_QWORD *)v30 = v19;
  *(_BYTE *)(v30 + 8) = v20;
  v31 = v27 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_channelAdamId;
  *(_QWORD *)v31 = v51;
  *(_BYTE *)(v31 + 8) = v22;
  swift_beginAccess(v28, v59, 33, 0);
  swift_retain();
  v32 = (uint64_t)v12;
  sub_1F418((uint64_t)v12, v28);
  v33 = swift_endAccess(v59);
  *(_BYTE *)(v27 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_showPlayerIfPlaying) = 0;
  *(_BYTE *)(v27 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_forcePlay) = 2;
  v34 = static MetricsActionType.play.getter(v33);
  v35 = (uint64_t *)(v27 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_playState);
  *v35 = v34;
  v35[1] = v36;
  *(_BYTE *)(v27 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_isSmartPlayButton) = 0;
  *(_BYTE *)(v27 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_isWidgetPlayButton) = 0;
  *(_BYTE *)(v27 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_waitForEngine) = 0;
  v37 = v27 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_timestamp;
  *(_QWORD *)v37 = 0;
  *(_BYTE *)(v37 + 8) = 1;
  *(_BYTE *)(v27 + OBJC_IVAR____TtC8ShelfKit22LibraryPlayPauseAction_shouldPreventQueueing) = 0;
  swift_release(v27);
  v39 = v53;
  v38 = v54;
  v40 = v50;
  v41 = v55;
  (*(void (**)(char *, char *, uint64_t))(v54 + 16))(v53, v50, v55);
  v42 = type metadata accessor for ImpressionMetrics(0);
  v43 = (uint64_t)v56;
  v44 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v56, 1, 1, v42);
  v45 = v52;
  UUID.init()(v44);
  v46 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
  v48 = v47;
  (*(void (**)(char *, uint64_t))(v57 + 8))(v45, v58);
  *(_QWORD *)(v27 + 16) = v46;
  *(_QWORD *)(v27 + 24) = v48;
  *(_QWORD *)(v27 + 32) = 0;
  *(_QWORD *)(v27 + 40) = 0;
  *(_BYTE *)(v27 + 48) = 32;
  (*(void (**)(uint64_t, char *, uint64_t))(v38 + 32))(v27 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v39, v41);
  sub_15BD4(v43, v27 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics, (uint64_t *)&unk_3B8790);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v40, v41);
  sub_1459C(v32, &qword_3B0CC8);
  return v27;
}

uint64_t sub_16A334()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v5);
  v7 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ActionMetrics(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)&v42 - v13;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0CC8);
  __chkstk_darwin(v15);
  v17 = (char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(_QWORD *)(v0 + 16);
  v19 = type metadata accessor for PodcastDetail(0);
  v20 = swift_dynamicCastClass(v18, v19);
  if (!v20)
    return 0;
  v21 = v14;
  v49 = v9;
  v22 = *(_QWORD *)(v20 + OBJC_IVAR____TtC8ShelfKit13PodcastDetail_episodeToPlay);
  if (!v22)
    return 0;
  v47 = v2;
  v23 = *(_QWORD *)(v22 + 72);
  v44 = *(_QWORD *)(v22 + 64);
  v46 = *(_QWORD *)(v22 + 16);
  v45 = *(unsigned __int8 *)(v22 + 24);
  v24 = *(_QWORD *)(v22 + OBJC_IVAR____TtC8ShelfKit7Episode_episodeEntitlementState);
  v48 = v1;
  if (v24 == 2)
  {
    v43 = *(_QWORD *)(v22 + 32);
    v25 = *(_BYTE *)(v22 + 40);
  }
  else
  {
    v43 = 0;
    v25 = 1;
  }
  v27 = type metadata accessor for EpisodeListSettings(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v17, 1, 1, v27);
  swift_retain();
  v28 = swift_bridgeObjectRetain();
  v42 = v21;
  static ActionMetrics.notInstrumented.getter(v28);
  v29 = type metadata accessor for LibraryPlayAction(0);
  v26 = swift_allocObject(v29, *(unsigned int *)(v29 + 48), *(unsigned __int16 *)(v29 + 52));
  *(_BYTE *)(v26 + OBJC_IVAR____TtC8ShelfKit17LibraryPlayAction_sharedContent) = 0;
  v30 = (_QWORD *)(v26 + OBJC_IVAR____TtC8ShelfKit17LibraryPlayAction_episodeUuid);
  *v30 = v44;
  v30[1] = v23;
  v31 = v26 + OBJC_IVAR____TtC8ShelfKit17LibraryPlayAction_episodeAdamId;
  *(_QWORD *)v31 = v46;
  *(_BYTE *)(v31 + 8) = v45;
  v32 = v26 + OBJC_IVAR____TtC8ShelfKit17LibraryPlayAction_channelAdamId;
  *(_QWORD *)v32 = v43;
  *(_BYTE *)(v32 + 8) = v25;
  sub_267BC((uint64_t)v17, v26 + OBJC_IVAR____TtC8ShelfKit17LibraryPlayAction_settings, &qword_3B0CC8);
  *(_BYTE *)(v26 + OBJC_IVAR____TtC8ShelfKit17LibraryPlayAction_showPlayerIfPlaying) = 2;
  *(_BYTE *)(v26 + OBJC_IVAR____TtC8ShelfKit17LibraryPlayAction_forcePlay) = 2;
  v33 = v26 + OBJC_IVAR____TtC8ShelfKit17LibraryPlayAction_timestamp;
  *(_QWORD *)v33 = 0;
  *(_BYTE *)(v33 + 8) = 1;
  v34 = v49;
  (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v11, v21, v8);
  v35 = type metadata accessor for ImpressionMetrics(0);
  v36 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v7, 1, 1, v35);
  v37 = v4;
  UUID.init()(v36);
  v38 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
  v40 = v39;
  (*(void (**)(char *, uint64_t))(v47 + 8))(v37, v48);
  *(_QWORD *)(v26 + 16) = v38;
  *(_QWORD *)(v26 + 24) = v40;
  *(_QWORD *)(v26 + 32) = 0;
  *(_QWORD *)(v26 + 40) = 0;
  *(_BYTE *)(v26 + 48) = 32;
  (*(void (**)(uint64_t, char *, uint64_t))(v34 + 32))(v26 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v11, v8);
  sub_15BD4((uint64_t)v7, v26 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics, (uint64_t *)&unk_3B8790);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v42, v8);
  sub_1459C((uint64_t)v17, &qword_3B0CC8);
  swift_release(v22);
  return v26;
}

uint64_t ShowHeaderFactory.deinit()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return v0;
}

uint64_t ShowHeaderFactory.__deallocating_deinit()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t type metadata accessor for ShowHeaderFactory()
{
  return objc_opt_self(_TtC8ShelfKit17ShowHeaderFactory);
}

uint64_t method lookup function for ShowHeaderFactory(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for ShowHeaderFactory);
}

uint64_t dispatch thunk of ShowHeaderFactory.makeHeader(shelfUniqueId:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t UpsellSubscriptionPlan.offerAction.getter()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit22UpsellSubscriptionPlan_offerAction));
}

uint64_t UpsellSubscriptionPlan.isRecommended.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8ShelfKit22UpsellSubscriptionPlan_isRecommended);
}

uint64_t UpsellSubscriptionPlan.title.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit22UpsellSubscriptionPlan_title);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit22UpsellSubscriptionPlan_title + 8));
  return v1;
}

uint64_t UpsellSubscriptionPlan.ctaTitle.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit22UpsellSubscriptionPlan_ctaTitle);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit22UpsellSubscriptionPlan_ctaTitle + 8));
  return v1;
}

uint64_t UpsellSubscriptionPlan.subtitle.getter()
{
  return sub_1CCE8(&OBJC_IVAR____TtC8ShelfKit22UpsellSubscriptionPlan_subtitle);
}

uint64_t UpsellSubscriptionPlan.callout.getter()
{
  return sub_1CCE8(&OBJC_IVAR____TtC8ShelfKit22UpsellSubscriptionPlan_callout);
}

id UpsellSubscriptionPlan.__allocating_init(offerAction:isRecommended:title:ctaTitle:subtitle:callout:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  objc_class *v10;
  _BYTE *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  objc_super v25;

  v18 = objc_allocWithZone(v10);
  *(_QWORD *)&v18[OBJC_IVAR____TtC8ShelfKit22UpsellSubscriptionPlan_offerAction] = a1;
  v18[OBJC_IVAR____TtC8ShelfKit22UpsellSubscriptionPlan_isRecommended] = a2;
  v19 = &v18[OBJC_IVAR____TtC8ShelfKit22UpsellSubscriptionPlan_title];
  *v19 = a3;
  v19[1] = a4;
  v20 = &v18[OBJC_IVAR____TtC8ShelfKit22UpsellSubscriptionPlan_ctaTitle];
  *v20 = a5;
  v20[1] = a6;
  v21 = &v18[OBJC_IVAR____TtC8ShelfKit22UpsellSubscriptionPlan_subtitle];
  *v21 = a7;
  v21[1] = a8;
  v22 = &v18[OBJC_IVAR____TtC8ShelfKit22UpsellSubscriptionPlan_callout];
  *v22 = a9;
  v22[1] = a10;
  v25.receiver = v18;
  v25.super_class = v10;
  return objc_msgSendSuper2(&v25, "init");
}

id UpsellSubscriptionPlan.init(offerAction:isRecommended:title:ctaTitle:subtitle:callout:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _BYTE *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  objc_super v16;

  *(_QWORD *)&v10[OBJC_IVAR____TtC8ShelfKit22UpsellSubscriptionPlan_offerAction] = a1;
  v10[OBJC_IVAR____TtC8ShelfKit22UpsellSubscriptionPlan_isRecommended] = a2;
  v11 = &v10[OBJC_IVAR____TtC8ShelfKit22UpsellSubscriptionPlan_title];
  *v11 = a3;
  v11[1] = a4;
  v12 = &v10[OBJC_IVAR____TtC8ShelfKit22UpsellSubscriptionPlan_ctaTitle];
  *v12 = a5;
  v12[1] = a6;
  v13 = &v10[OBJC_IVAR____TtC8ShelfKit22UpsellSubscriptionPlan_subtitle];
  *v13 = a7;
  v13[1] = a8;
  v14 = &v10[OBJC_IVAR____TtC8ShelfKit22UpsellSubscriptionPlan_callout];
  *v14 = a9;
  v14[1] = a10;
  v16.receiver = v10;
  v16.super_class = (Class)type metadata accessor for UpsellSubscriptionPlan();
  return objc_msgSendSuper2(&v16, "init");
}

uint64_t type metadata accessor for UpsellSubscriptionPlan()
{
  return objc_opt_self(_TtC8ShelfKit22UpsellSubscriptionPlan);
}

_QWORD *UpsellSubscriptionPlan.__allocating_init(deserializing:using:)(char *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  void (*v23)(char *, uint64_t, uint64_t);
  uint64_t v24;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t);
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  objc_class *v61;
  _BYTE *v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  unint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  objc_super v89;
  uint64_t v90;

  v4 = type metadata accessor for JSONContext(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v77 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = type metadata accessor for JSONObject(0);
  v90 = *(_QWORD *)(v86 - 8);
  __chkstk_darwin(v86);
  v81 = (char *)&v77 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v80 = (char *)&v77 - v10;
  __chkstk_darwin(v11);
  v13 = (char *)&v77 - v12;
  __chkstk_darwin(v14);
  v16 = (char *)&v77 - v15;
  __chkstk_darwin(v17);
  v19 = (char *)&v77 - v18;
  __chkstk_darwin(v20);
  v22 = (char *)&v77 - v21;
  v87 = a1;
  JSONObject.subscript.getter(0x746341726566666FLL, 0xEB000000006E6F69);
  v83 = v5;
  v84 = a2;
  v23 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v85 = v4;
  v23(v7, a2, v4);
  v24 = type metadata accessor for ChannelOfferAction(0);
  swift_allocObject(v24, *(unsigned int *)(v24 + 48), *(unsigned __int16 *)(v24 + 52));
  v25 = v88;
  v26 = ChannelOfferAction.init(deserializing:using:)(v22, (uint64_t)v7);
  if (v25)
  {
    swift_errorRelease(v25);
    v27 = (_QWORD *)type metadata accessor for JSONError(0);
    v28 = sub_1E468();
    swift_allocError(v27, v28, 0, 0);
    *v29 = 0x746341726566666FLL;
    v29[1] = 0xEB000000006E6F69;
    v29[2] = v82;
    v30 = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD *))(*(v27 - 1) + 104))(v29, enum case for JSONError.missingProperty(_:), v27);
    swift_willThrow(v30);
    v31 = v86;
    v32 = v87;
    v33 = v84;
  }
  else
  {
    v37 = v26;
    v88 = v13;
    v32 = v87;
    v38 = JSONObject.subscript.getter(0x656C746974, 0xE500000000000000);
    v79 = JSONObject.string.getter(v38);
    v40 = v39;
    v35 = v90;
    v41 = *(void (**)(char *, uint64_t))(v90 + 8);
    v31 = v86;
    v41(v19, v86);
    if (!v40)
    {
      v68 = v37;
      v27 = (_QWORD *)type metadata accessor for JSONError(0);
      v69 = sub_1E468();
      swift_allocError(v27, v69, 0, 0);
      *v70 = 0x656C746974;
      v71 = v82;
      v70[1] = 0xE500000000000000;
      v70[2] = v71;
      v72 = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD *))(*(v27 - 1) + 104))(v70, enum case for JSONError.missingProperty(_:), v27);
      swift_willThrow(v72);
      swift_release(v68);
      v34 = v83;
      v33 = v84;
      goto LABEL_4;
    }
    v78 = v37;
    v42 = v16;
    v43 = JSONObject.subscript.getter(0x656C746954617463, 0xE800000000000000);
    v44 = JSONObject.string.getter(v43);
    v46 = v45;
    v41(v42, v31);
    v47 = v31;
    if (v46)
    {
      v48 = v88;
      v90 = v44;
      v49 = JSONObject.subscript.getter(0x6D6D6F6365527369, 0xED00006465646E65);
      v50 = JSONObject.BOOL.getter(v49);
      v41(v48, v47);
      LODWORD(v88) = v50 & 1;
      v51 = v80;
      v52 = JSONObject.subscript.getter(0x656C746974627573, 0xE800000000000000);
      v82 = JSONObject.string.getter(v52);
      v77 = v53;
      v41(v51, v47);
      v54 = v40;
      v55 = v46;
      v56 = v81;
      v57 = JSONObject.subscript.getter(0x74756F6C6C6163, 0xE700000000000000);
      v58 = JSONObject.string.getter(v57);
      v60 = v59;
      v41(v56, v47);
      v61 = (objc_class *)type metadata accessor for UpsellSubscriptionPlan();
      v62 = objc_allocWithZone(v61);
      *(_QWORD *)&v62[OBJC_IVAR____TtC8ShelfKit22UpsellSubscriptionPlan_offerAction] = v78;
      v62[OBJC_IVAR____TtC8ShelfKit22UpsellSubscriptionPlan_isRecommended] = (_BYTE)v88;
      v63 = (uint64_t *)&v62[OBJC_IVAR____TtC8ShelfKit22UpsellSubscriptionPlan_title];
      *v63 = v79;
      v63[1] = v54;
      v64 = (uint64_t *)&v62[OBJC_IVAR____TtC8ShelfKit22UpsellSubscriptionPlan_ctaTitle];
      *v64 = v90;
      v64[1] = v55;
      v65 = (uint64_t *)&v62[OBJC_IVAR____TtC8ShelfKit22UpsellSubscriptionPlan_subtitle];
      v66 = v77;
      *v65 = v82;
      v65[1] = v66;
      v67 = (uint64_t *)&v62[OBJC_IVAR____TtC8ShelfKit22UpsellSubscriptionPlan_callout];
      *v67 = v58;
      v67[1] = v60;
      v89.receiver = v62;
      v89.super_class = v61;
      v27 = objc_msgSendSuper2(&v89, "init");
      (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v84, v85);
      v41(v32, v47);
      return v27;
    }
    swift_bridgeObjectRelease();
    v27 = (_QWORD *)type metadata accessor for JSONError(0);
    v73 = sub_1E468();
    swift_allocError(v27, v73, 0, 0);
    *v74 = 0x656C746954617463;
    v75 = v82;
    v74[1] = 0xE800000000000000;
    v74[2] = v75;
    v76 = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD *))(*(v27 - 1) + 104))(v74, enum case for JSONError.missingProperty(_:), v27);
    swift_willThrow(v76);
    swift_release(v78);
    v33 = v84;
  }
  v34 = v83;
  v35 = v90;
LABEL_4:
  (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v33, v85);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v32, v31);
  return v27;
}

void UpsellSubscriptionPlan.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("ShelfKit.UpsellSubscriptionPlan", 31, "init()", 6, 0);
  __break(1u);
}

id UpsellSubscriptionPlan.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for UpsellSubscriptionPlan();
  return objc_msgSendSuper2(&v2, "dealloc");
}

_QWORD *sub_16B064@<X0>(char *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  _QWORD *result;

  result = UpsellSubscriptionPlan.__allocating_init(deserializing:using:)(a1, a2);
  if (!v3)
    *a3 = result;
  return result;
}

uint64_t static UpsellSubscriptionPlan.tryToMakeInstances(byDeserializing:using:)()
{
  type metadata accessor for UpsellSubscriptionPlan();
  return JSONArray.compactMap<A>(_:)(sub_16B2F8);
}

uint64_t sub_16B0D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[3];
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[7];

  v28 = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BBEE8);
  v26 = *(_QWORD *)(v5 - 8);
  v27 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for JSONContext(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for JSONObject(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = JSONObject.isNull.getter(v16);
  if ((result & 1) != 0)
  {
    *a3 = 0;
  }
  else
  {
    v18 = type metadata accessor for UpsellSubscriptionPlan();
    v19 = v12;
    v20 = v18;
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a1, v19);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v28, v8);
    v21 = v32[6];
    result = (uint64_t)UpsellSubscriptionPlan.__allocating_init(deserializing:using:)(v15, (uint64_t)v11);
    if (v21)
    {
      static JSONContext.initFailureObserver.getter(result);
      v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BBEF0);
      JSONContext.subscript.getter(v32, v7, v22);
      (*(void (**)(char *, uint64_t))(v26 + 8))(v7, v27);
      sub_142CB8((uint64_t)v32, (uint64_t)v29);
      v23 = v30;
      if (v30)
      {
        v24 = v31;
        __swift_project_boxed_opaque_existential_1(v29, v30);
        dispatch thunk of JSONInitFailureObserver.tryingToInitialize(_:didFailWith:)(v20, v21, v23, v24);
        swift_errorRelease(v21);
        sub_142D00((uint64_t)v32);
        result = __swift_destroy_boxed_opaque_existential_1(v29);
      }
      else
      {
        sub_142D00((uint64_t)v32);
        swift_errorRelease(v21);
        result = sub_142D00((uint64_t)v29);
      }
      *a3 = 0;
    }
    else
    {
      *a3 = result;
    }
  }
  return result;
}

uint64_t sub_16B2F8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_16B0D8(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t method lookup function for UpsellSubscriptionPlan(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for UpsellSubscriptionPlan);
}

uint64_t dispatch thunk of MultiSelectableExtension.__allocating_init(shouldDisplayMultiSelectUI:isMultiSelectable:shouldSelect:didDeselect:didSelect:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of UpsellSubscriptionPlan.__allocating_init(deserializing:using:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t ShowHero.adamID.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

id ShowHero.description.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 40);
}

uint64_t ShowHero.artwork.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for ShowHero(0);
  return sub_267BC(v1 + *(int *)(v3 + 32), a1, &qword_3BEB70);
}

uint64_t type metadata accessor for ShowHero(uint64_t a1)
{
  uint64_t result;

  result = qword_3BDA78;
  if (!qword_3BDA78)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ShowHero);
  return result;
}

uint64_t ShowHero.uberArtwork.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for ShowHero(0);
  return sub_267BC(v1 + *(int *)(v3 + 36), a1, &qword_3BEB70);
}

unint64_t ShowHero.rating.getter()
{
  uint64_t v0;
  unsigned int *v1;

  v1 = (unsigned int *)(v0 + *(int *)(type metadata accessor for ShowHero(0) + 40));
  return *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 4) << 32);
}

uint64_t ShowHero.ratingCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for ShowHero(0) + 44));
}

uint64_t ShowHero.genreName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for ShowHero(0) + 48));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ShowHero.contentRating.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ShowHero(0) + 52));
}

_QWORD *ShowHero.segue.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;

  type metadata accessor for ShowHero(0);
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B9EF0);
  return Lazy.wrappedValue.getter(a1, v2);
}

uint64_t sub_16B508(uint64_t a1)
{
  uint64_t v1;
  _BYTE v3[40];
  _BYTE v4[40];

  sub_267BC(a1, (uint64_t)v4, &qword_3B0C50);
  sub_267BC((uint64_t)v4, (uint64_t)v3, &qword_3B0C50);
  type metadata accessor for ShowHero(0);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B9EF0);
  Lazy.wrappedValue.setter(v3, v1);
  return sub_1459C((uint64_t)v4, &qword_3B0C50);
}

uint64_t ShowHero.playEpisodeAction.getter()
{
  uint64_t v0;
  uint64_t v2;

  type metadata accessor for ShowHero(0);
  v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3C88);
  Lazy.wrappedValue.getter(&v2, v0);
  return v2;
}

_QWORD *sub_16B5D4@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;

  type metadata accessor for ShowHero(0);
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3C88);
  result = Lazy.wrappedValue.getter(&v4, v2);
  *a1 = v4;
  return result;
}

uint64_t sub_16B630(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *a1;
  type metadata accessor for ShowHero(0);
  swift_retain();
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3C88);
  return Lazy.wrappedValue.setter(&v3, v1);
}

uint64_t ShowHero.playTrailerAction.getter()
{
  uint64_t v0;
  uint64_t v2;

  type metadata accessor for ShowHero(0);
  v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3C88);
  Lazy.wrappedValue.getter(&v2, v0);
  return v2;
}

_QWORD *sub_16B6DC@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;

  type metadata accessor for ShowHero(0);
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3C88);
  result = Lazy.wrappedValue.getter(&v4, v2);
  *a1 = v4;
  return result;
}

uint64_t sub_16B738(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *a1;
  type metadata accessor for ShowHero(0);
  swift_retain();
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3C88);
  return Lazy.wrappedValue.setter(&v3, v1);
}

uint64_t ShowHero.contextAction.getter()
{
  uint64_t v0;
  uint64_t v2;

  type metadata accessor for ShowHero(0);
  v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3C88);
  Lazy.wrappedValue.getter(&v2, v0);
  return v2;
}

_QWORD *sub_16B7E4@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;

  type metadata accessor for ShowHero(0);
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3C88);
  result = Lazy.wrappedValue.getter(&v4, v2);
  *a1 = v4;
  return result;
}

uint64_t sub_16B840(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *a1;
  type metadata accessor for ShowHero(0);
  swift_retain();
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3C88);
  return Lazy.wrappedValue.setter(&v3, v1);
}

_QWORD *ShowHero.impressionMetrics.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;

  type metadata accessor for ShowHero(0);
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BA270);
  return Lazy.wrappedValue.getter(a1, v2);
}

uint64_t sub_16B8E4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v2);
  v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v7 = (char *)&v10 - v6;
  sub_267BC(a1, (uint64_t)&v10 - v6, (uint64_t *)&unk_3B8790);
  sub_267BC((uint64_t)v7, (uint64_t)v4, (uint64_t *)&unk_3B8790);
  type metadata accessor for ShowHero(0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BA270);
  Lazy.wrappedValue.setter(v4, v8);
  return sub_1459C((uint64_t)v7, (uint64_t *)&unk_3B8790);
}

uint64_t ShowHero.init(id:adamID:title:description:artwork:uberArtwork:rating:ratingCount:genreName:contentRating:clickAction:playEpisodeAction:playTrailerAction:contextAction:impressionMetrics:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, int a10, char a11, uint64_t a12, unsigned __int8 a13, uint64_t a14, uint64_t a15, unsigned __int8 a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  char *v35;
  char *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  void *v56;
  char *v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _BYTE v70[40];
  _OWORD v71[2];
  uint64_t v72;

  v68 = a8;
  v69 = a7;
  v56 = a6;
  v55 = a5;
  v53 = a4;
  v51 = a3;
  v50 = a2;
  v49 = a1;
  v66 = a20;
  v67 = a21;
  v64 = a18;
  v65 = a19;
  v63 = a17;
  v62 = a16;
  v60 = a14;
  v61 = a15;
  v59 = a13;
  v58 = a12;
  v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v22);
  v24 = (char *)&v49 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v27 = (char *)&v49 - v26;
  v28 = (int *)type metadata accessor for ShowHero(0);
  v52 = (char *)a9 + v28[14];
  v72 = 0;
  memset(v71, 0, sizeof(v71));
  sub_267BC((uint64_t)v71, (uint64_t)v70, &qword_3B0C50);
  v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2E40);
  Lazy.init(wrappedValue:)(v70, v29);
  sub_1459C((uint64_t)v71, &qword_3B0C50);
  *(_QWORD *)&v71[0] = 0;
  v30 = type metadata accessor for Action(0);
  Lazy.init(wrappedValue:)(v71, v30);
  *(_QWORD *)&v71[0] = 0;
  Lazy.init(wrappedValue:)(v71, v30);
  v57 = (char *)a9 + v28[17];
  *(_QWORD *)&v71[0] = 0;
  Lazy.init(wrappedValue:)(v71, v30);
  v54 = (char *)a9 + v28[18];
  v31 = type metadata accessor for ImpressionMetrics(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v27, 1, 1, v31);
  sub_267BC((uint64_t)v27, (uint64_t)v24, (uint64_t *)&unk_3B8790);
  Lazy.init(wrappedValue:)(v24, v31);
  sub_1459C((uint64_t)v27, (uint64_t *)&unk_3B8790);
  v32 = v50;
  *a9 = v49;
  a9[1] = v32;
  v33 = v53;
  a9[2] = v51;
  a9[3] = v33;
  v34 = v56;
  a9[4] = v55;
  a9[5] = v34;
  sub_267BC(v69, (uint64_t)a9 + v28[8], &qword_3BEB70);
  sub_267BC(v68, (uint64_t)a9 + v28[9], &qword_3BEB70);
  v35 = (char *)a9 + v28[10];
  *(_DWORD *)v35 = a10;
  v35[4] = a11 & 1;
  v36 = (char *)a9 + v28[11];
  *(_QWORD *)v36 = v58;
  v36[8] = v59 & 1;
  v37 = (_QWORD *)((char *)a9 + v28[12]);
  v38 = v61;
  *v37 = v60;
  v37[1] = v38;
  *((_BYTE *)a9 + v28[13]) = v62;
  v39 = v63;
  sub_267BC(v63, (uint64_t)v71, &qword_3B0C50);
  sub_267BC((uint64_t)v71, (uint64_t)v70, &qword_3B0C50);
  v40 = v34;
  v41 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B9EF0);
  Lazy.wrappedValue.setter(v70, v41);
  sub_1459C((uint64_t)v71, &qword_3B0C50);
  v42 = v64;
  *(_QWORD *)&v71[0] = v64;
  swift_retain();
  v43 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3C88);
  Lazy.wrappedValue.setter(v71, v43);
  v44 = v65;
  *(_QWORD *)&v71[0] = v65;
  swift_retain();
  Lazy.wrappedValue.setter(v71, v43);
  v45 = v66;
  *(_QWORD *)&v71[0] = v66;
  swift_retain();
  Lazy.wrappedValue.setter(v71, v43);
  v46 = v67;
  sub_267BC(v67, (uint64_t)v27, (uint64_t *)&unk_3B8790);
  sub_267BC((uint64_t)v27, (uint64_t)v24, (uint64_t *)&unk_3B8790);
  v47 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BA270);
  Lazy.wrappedValue.setter(v24, v47);
  sub_1459C((uint64_t)v27, (uint64_t *)&unk_3B8790);

  swift_release(v42);
  swift_release(v44);
  swift_release(v45);
  sub_1459C(v46, (uint64_t *)&unk_3B8790);
  sub_1459C(v39, &qword_3B0C50);
  sub_1459C(v68, &qword_3BEB70);
  return sub_1459C(v69, &qword_3BEB70);
}

_QWORD *sub_16BE58@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B9EF0);
  return Lazy.wrappedValue.getter(a1, v2);
}

_QWORD *sub_16BE90@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BA270);
  return Lazy.wrappedValue.getter(a1, v2);
}

uint64_t ShowHero.init(deserializing:using:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, void (**a3)(char *, uint64_t, uint64_t)@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  int *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t, uint64_t);
  void (*v51)(char *, uint64_t, uint64_t);
  void (*v52)(char *, uint64_t);
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  void (*v60)(_QWORD, _QWORD, _QWORD);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  void (*v78)(char *, uint64_t, uint64_t);
  void (*v79)(char *, uint64_t, uint64_t);
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void (**v86)(char *, uint64_t, uint64_t);
  uint64_t v87;
  objc_class *v88;
  char Attributed;
  id v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  void (*v94)(char *, uint64_t, uint64_t);
  char *v95;
  uint64_t v96;
  int *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void (*v101)(char *, uint64_t);
  char *v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  void (*v115)(char *, uint64_t, uint64_t);
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int *v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  void (*v134)(char *, char *, uint64_t);
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  void (*v138)(char *, uint64_t, uint64_t);
  uint64_t v139;
  uint64_t v140;
  void (*v141)(char *, char *, uint64_t);
  uint64_t v142;
  void (*v143)(char *, uint64_t);
  char *v144;
  char *v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  char *v151;
  char *v152;
  uint64_t v153;
  void (*v154)(char *, uint64_t, uint64_t);
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  void (**v163)(char *, uint64_t, uint64_t);
  uint64_t v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  _QWORD *v168;
  uint64_t v169;
  uint64_t v171;
  uint64_t v172;
  _QWORD *v173;
  uint64_t v174;
  uint64_t *v175;
  uint64_t v176;
  uint64_t v177;
  void (*v178)(char *, char *, uint64_t);
  uint64_t v179;
  void (*v180)(char *, uint64_t, uint64_t);
  void (*v181)(char *, uint64_t);
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  char *v188;
  char *v189;
  char *v190;
  char *v191;
  char *v192;
  void (**v193)(char *, uint64_t, uint64_t);
  char *v194;
  void (*v195)(_QWORD, _QWORD, _QWORD);
  uint64_t v196;
  char *v197;
  char *v198;
  int *v199;
  char *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  char v210[8];
  _OWORD v211[2];
  uint64_t v212;
  char *v213;

  v209 = a2;
  v213 = a1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BA270);
  __chkstk_darwin(v4);
  v191 = (char *)&v175 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3C88);
  __chkstk_darwin(v6);
  v198 = (char *)&v175 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B9EF0);
  __chkstk_darwin(v8);
  v186 = (char *)&v175 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for JSONContext(0);
  v206 = *(_QWORD *)(v10 - 8);
  v207 = v10;
  __chkstk_darwin(v10);
  v190 = (char *)&v175 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v185 = v11;
  __chkstk_darwin(v12);
  v200 = (char *)&v175 - v13;
  v208 = type metadata accessor for JSONObject(0);
  v14 = *(_QWORD *)(v208 - 8);
  __chkstk_darwin(v208);
  v189 = (char *)&v175 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v197 = (char *)&v175 - v17;
  __chkstk_darwin(v18);
  v188 = (char *)&v175 - v19;
  __chkstk_darwin(v20);
  v192 = (char *)&v175 - v21;
  __chkstk_darwin(v22);
  v194 = (char *)&v175 - v23;
  __chkstk_darwin(v24);
  v26 = (char *)&v175 - v25;
  v182 = v27;
  __chkstk_darwin(v28);
  v30 = (char *)&v175 - v29;
  v31 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v31);
  v33 = (char *)&v175 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v34);
  v36 = (char *)&v175 - v35;
  v37 = (int *)type metadata accessor for ShowHero(0);
  v38 = (uint64_t)a3 + v37[14];
  v212 = 0;
  memset(v211, 0, sizeof(v211));
  sub_267BC((uint64_t)v211, (uint64_t)v210, &qword_3B0C50);
  v39 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2E40);
  v205 = v38;
  v183 = v39;
  Lazy.init(wrappedValue:)(v210, v39);
  sub_1459C((uint64_t)v211, &qword_3B0C50);
  v40 = (uint64_t)a3 + v37[15];
  *(_QWORD *)&v211[0] = 0;
  v41 = type metadata accessor for Action(0);
  v204 = v40;
  Lazy.init(wrappedValue:)(v211, v41);
  v42 = (uint64_t)a3 + v37[16];
  *(_QWORD *)&v211[0] = 0;
  v203 = v42;
  Lazy.init(wrappedValue:)(v211, v41);
  v43 = (uint64_t)a3 + v37[17];
  *(_QWORD *)&v211[0] = 0;
  v201 = v43;
  v196 = v41;
  Lazy.init(wrappedValue:)(v211, v41);
  v44 = v37[18];
  v193 = a3;
  v45 = (uint64_t)a3 + v44;
  v46 = type metadata accessor for ImpressionMetrics(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v36, 1, 1, v46);
  sub_267BC((uint64_t)v36, (uint64_t)v33, (uint64_t *)&unk_3B8790);
  v202 = v45;
  v187 = v46;
  Lazy.init(wrappedValue:)(v33, v46);
  sub_1459C((uint64_t)v36, (uint64_t *)&unk_3B8790);
  v47 = v213;
  v48 = JSONObject.subscript.getter(25705, 0xE200000000000000);
  v49 = JSONObject.string.getter(v48);
  v51 = v50;
  v184 = v14;
  v52 = *(void (**)(char *, uint64_t))(v14 + 8);
  v53 = v30;
  v54 = v208;
  v52(v53, v208);
  if (!v51)
  {
    v64 = type metadata accessor for JSONError(0);
    v65 = sub_F1C0((unint64_t *)&qword_3B0CB0, (void (*)(uint64_t))&type metadata accessor for JSONError, (uint64_t)&protocol conformance descriptor for JSONError);
    swift_allocError(v64, v65, 0, 0);
    *v66 = 25705;
    v66[1] = 0xE200000000000000;
    v66[2] = v37;
    v67 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v64 - 8) + 104))(v66, enum case for JSONError.missingProperty(_:), v64);
    swift_willThrow(v67);
    (*(void (**)(uint64_t, uint64_t))(v206 + 8))(v209, v207);
    v68 = v47;
    v69 = v54;
LABEL_14:
    v52(v68, v69);
    v158 = v201;
    v164 = v202;
    goto LABEL_15;
  }
  v180 = (void (*)(char *, uint64_t, uint64_t))v49;
  v199 = v37;
  v55 = v54;
  v56 = JSONObject.subscript.getter(0x64496D616461, 0xE600000000000000);
  v57 = JSONObject.string.getter(v56);
  v59 = v47;
  if (!v58)
  {
    v52(v26, v55);
    swift_bridgeObjectRelease();
    v70 = type metadata accessor for JSONError(0);
    v71 = sub_F1C0((unint64_t *)&qword_3B0CB0, (void (*)(uint64_t))&type metadata accessor for JSONError, (uint64_t)&protocol conformance descriptor for JSONError);
    swift_allocError(v70, v71, 0, 0);
    *v72 = 0x64496D616461;
    v72[1] = 0xE600000000000000;
    v72[2] = v199;
    v73 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v70 - 8) + 104))(v72, enum case for JSONError.missingProperty(_:), v70);
    swift_willThrow(v73);
    (*(void (**)(uint64_t, uint64_t))(v206 + 8))(v209, v207);
    v68 = v47;
LABEL_13:
    v69 = v55;
    goto LABEL_14;
  }
  v60 = v195;
  v61 = static AdamID.parse(_:)(v57, v58);
  if (v60)
  {
    v62 = swift_bridgeObjectRelease();
    v63 = static AdamID.empty.getter(v62);
    swift_errorRelease(v60);
    v179 = 0;
  }
  else
  {
    v63 = v61;
    v179 = 0;
    swift_bridgeObjectRelease();
  }
  v52(v26, v55);
  v74 = v194;
  v75 = JSONObject.subscript.getter(0x656C746974, 0xE500000000000000);
  v76 = v59;
  v77 = JSONObject.string.getter(v75);
  v79 = v78;
  v52(v74, v55);
  if (!v79)
  {
    swift_bridgeObjectRelease();
    v165 = v76;
    v166 = type metadata accessor for JSONError(0);
    v167 = sub_F1C0((unint64_t *)&qword_3B0CB0, (void (*)(uint64_t))&type metadata accessor for JSONError, (uint64_t)&protocol conformance descriptor for JSONError);
    swift_allocError(v166, v167, 0, 0);
    *v168 = 0x656C746974;
    v168[1] = 0xE500000000000000;
    v168[2] = v199;
    v169 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v166 - 8) + 104))(v168, enum case for JSONError.missingProperty(_:), v166);
    swift_willThrow(v169);
    (*(void (**)(uint64_t, uint64_t))(v206 + 8))(v209, v207);
    v68 = v165;
    goto LABEL_13;
  }
  v80 = v192;
  v81 = JSONObject.subscript.getter(0x7470697263736564, 0xEB000000006E6F69);
  v82 = JSONObject.string.getter(v81);
  v83 = v55;
  v85 = v84;
  v52(v80, v83);
  if (!v85)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v171 = type metadata accessor for JSONError(0);
    v172 = sub_F1C0((unint64_t *)&qword_3B0CB0, (void (*)(uint64_t))&type metadata accessor for JSONError, (uint64_t)&protocol conformance descriptor for JSONError);
    swift_allocError(v171, v172, 0, 0);
    *v173 = 0x7470697263736564;
    v173[1] = 0xEB000000006E6F69;
    v173[2] = v199;
    v174 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v171 - 8) + 104))(v173, enum case for JSONError.missingProperty(_:), v171);
    swift_willThrow(v174);
    (*(void (**)(uint64_t, uint64_t))(v206 + 8))(v209, v207);
    v68 = v213;
    v69 = v208;
    goto LABEL_14;
  }
  v86 = v193;
  *v193 = v180;
  v86[1] = (void (*)(char *, uint64_t, uint64_t))v51;
  v86[2] = (void (*)(char *, uint64_t, uint64_t))v63;
  v86[3] = (void (*)(char *, uint64_t, uint64_t))v77;
  v86[4] = (void (*)(char *, uint64_t, uint64_t))v79;
  v87 = v82;
  v88 = (objc_class *)type metadata accessor for LanguageAwareString(0);
  Attributed = static LanguageAwareString.alwaysGenerateAttributedString.getter();
  v90 = objc_allocWithZone(v88);
  v86[5] = (void (*)(char *, uint64_t, uint64_t))LanguageAwareString.init(_:baseParagraphStyle:generateAttributedString:)(v87, v85, 0, Attributed & 1);
  v91 = type metadata accessor for ArtworkModel(0);
  v181 = v52;
  v92 = v188;
  JSONObject.subscript.getter(0x6B726F77747261, 0xE700000000000000);
  v93 = v207;
  v94 = *(void (**)(char *, uint64_t, uint64_t))(v206 + 16);
  v95 = v200;
  v94(v200, v209, v207);
  v180 = v94;
  v96 = (uint64_t)v86 + v199[8];
  sub_F1C0((unint64_t *)&qword_3B2828, (void (*)(uint64_t))&type metadata accessor for ArtworkModel, (uint64_t)&protocol conformance descriptor for ArtworkModel);
  v177 = v96;
  ExpressibleByJSON.init(tryDeserializing:using:)(v92, v95, v91);
  JSONObject.subscript.getter(0x7774724172656275, 0xEB000000006B726FLL);
  v94(v95, v209, v93);
  v97 = v199;
  v176 = (uint64_t)v86 + v199[9];
  ExpressibleByJSON.init(tryDeserializing:using:)(v92, v95, v91);
  v98 = JSONObject.subscript.getter(0x676E69746172, 0xE600000000000000);
  v99 = JSONObject.float.getter(v98);
  v100 = v208;
  v101 = v181;
  v181(v92, v208);
  v102 = (char *)v86 + v97[10];
  *(_DWORD *)v102 = v99;
  v102[4] = BYTE4(v99) & 1;
  v103 = JSONObject.subscript.getter(0x6F43676E69746172, 0xEB00000000746E75);
  v104 = JSONObject.uint.getter(v103);
  LOBYTE(v96) = v105;
  v101(v92, v100);
  v106 = (char *)v86 + v97[11];
  *(_QWORD *)v106 = v104;
  v106[8] = v96 & 1;
  v107 = JSONObject.subscript.getter(0x6D614E65726E6567, 0xE900000000000065);
  v108 = JSONObject.string.getter(v107);
  v110 = v109;
  v101(v92, v100);
  v111 = (uint64_t *)((char *)v86 + v97[12]);
  *v111 = v108;
  v111[1] = v110;
  v175 = v111;
  JSONObject.subscript.getter(0x52746E65746E6F63, 0xED0000676E697461);
  v112 = v200;
  v113 = v209;
  v114 = v207;
  v115 = v180;
  v180(v200, v209, v207);
  sub_E9CA0();
  ExpressibleByJSON.init(tryDeserializing:using:)(v92, v112, &type metadata for ContentRating);
  *((_BYTE *)v86 + v199[13]) = v211[0];
  JSONObject.subscript.getter(0x7463416B63696C63, 0xEB000000006E6F69);
  v116 = v184;
  v178 = *(void (**)(char *, char *, uint64_t))(v184 + 16);
  v117 = v208;
  v178(v197, v92, v208);
  v118 = v112;
  v119 = v113;
  v115(v118, v113, v114);
  v120 = *(unsigned __int8 *)(v116 + 80);
  v121 = (v120 + 16) & ~v120;
  v122 = v206;
  v123 = *(unsigned __int8 *)(v206 + 80);
  v194 = (char *)v121;
  v192 = (char *)(((v182 + v123 + v121) & ~v123) + v185);
  v124 = (int *)((v182 + v123 + v121) & ~v123);
  v199 = v124;
  v185 = v120 | v123 | 7;
  v125 = swift_allocObject(&unk_384258, v192, v185);
  v126 = v125 + v121;
  v195 = *(void (**)(_QWORD, _QWORD, _QWORD))(v116 + 32);
  v127 = v197;
  v128 = v117;
  v195(v126, v197, v117);
  v184 = *(_QWORD *)(v122 + 32);
  v129 = v200;
  v130 = v207;
  ((void (*)(char *, char *, uint64_t))v184)((char *)v124 + v125, v200, v207);
  v131 = (uint64_t)v186;
  Lazy.init(_:)(sub_16D1F4, v125, v183);
  v181(v92, v128);
  sub_3C454(v131, v205, &qword_3B9EF0);
  JSONObject.subscript.getter(0xD000000000000011, 0x8000000000311BB0);
  v132 = v127;
  v133 = v127;
  v134 = v178;
  v178(v133, v92, v128);
  v135 = v119;
  v136 = v130;
  v137 = v130;
  v138 = v180;
  v180(v129, v135, v137);
  v139 = swift_allocObject(&unk_384280, v192, v185);
  v195(&v194[v139], v132, v128);
  v140 = v136;
  v141 = (void (*)(char *, char *, uint64_t))v184;
  ((void (*)(char *, char *, uint64_t))v184)((char *)v199 + v139, v129, v136);
  v142 = (uint64_t)v198;
  Lazy.init(_:)(sub_164A30, v139, v196);
  v143 = v181;
  v181(v92, v128);
  sub_3C454(v142, v204, &qword_3B3C88);
  JSONObject.subscript.getter(0xD000000000000011, 0x8000000000311BD0);
  v144 = v197;
  v134(v197, v92, v128);
  v145 = v200;
  v138(v200, v209, v140);
  v146 = swift_allocObject(&unk_3842A8, v192, v185);
  v147 = v144;
  v195(&v194[v146], v144, v128);
  v148 = v140;
  v141((char *)v199 + v146, v145, v140);
  v149 = (uint64_t)v198;
  Lazy.init(_:)(sub_164A30, v146, v196);
  v143(v92, v128);
  sub_3C454(v149, v203, &qword_3B3C88);
  v150 = v213;
  JSONObject.subscript.getter(0x41747865746E6F63, 0xED00006E6F697463);
  v151 = v147;
  v178(v147, v92, v128);
  v152 = v200;
  v153 = v209;
  v154 = v180;
  v180(v200, v209, v148);
  v155 = swift_allocObject(&unk_3842D0, v192, v185);
  v195(&v194[v155], v151, v128);
  ((void (*)(char *, char *, uint64_t))v184)((char *)v199 + v155, v152, v148);
  v156 = (uint64_t)v198;
  Lazy.init(_:)(sub_164A30, v155, v196);
  v181(v92, v128);
  v157 = v153;
  v158 = v201;
  sub_3C454(v156, v201, &qword_3B3C88);
  v159 = v189;
  JSONObject.subscript.getter(0xD000000000000011, 0x8000000000309180);
  v160 = v190;
  v154(v190, v157, v148);
  v161 = (uint64_t)v191;
  v162 = v179;
  Lazy<A>.init(deserializing:using:)(v159, v160, v187, &protocol witness table for ImpressionMetrics);
  if (!v162)
  {
    (*(void (**)(uint64_t, uint64_t))(v206 + 8))(v157, v148);
    v181(v150, v128);
    return sub_3C454(v161, v202, &qword_3BA270);
  }
  (*(void (**)(uint64_t, uint64_t))(v206 + 8))(v157, v148);
  v181(v150, v128);
  v163 = v193;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  sub_1459C(v177, &qword_3BEB70);
  sub_1459C(v176, &qword_3BEB70);
  swift_bridgeObjectRelease();
  v164 = v202;
LABEL_15:
  sub_1459C(v205, &qword_3B9EF0);
  sub_1459C(v204, &qword_3B3C88);
  sub_1459C(v203, &qword_3B3C88);
  sub_1459C(v158, &qword_3B3C88);
  return sub_1459C(v164, &qword_3BA270);
}

uint64_t sub_16D02C@<X0>(char *a1@<X0>, uint64_t a2@<X1>, void (**a3)(char *, uint64_t, uint64_t)@<X8>)
{
  return ShowHero.init(deserializing:using:)(a1, a2, a3);
}

uint64_t ShowHero.clickSender.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  _QWORD *boxed_opaque_existential_2Tm;

  a1[3] = type metadata accessor for ShowHero(0);
  boxed_opaque_existential_2Tm = __swift_allocate_boxed_opaque_existential_2Tm(a1);
  return sub_16D274(v1, (uint64_t)boxed_opaque_existential_2Tm);
}

uint64_t sub_16D078@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *boxed_opaque_existential_2Tm;

  a2[3] = a1;
  boxed_opaque_existential_2Tm = __swift_allocate_boxed_opaque_existential_2Tm(a2);
  return sub_16D274(v2, (uint64_t)boxed_opaque_existential_2Tm);
}

NSObject_optional __swiftcall ShowHero.appEntityAnnotation()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  objc_class *v13;
  Swift::Bool v14;
  _QWORD v15[2];
  NSObject_optional result;

  v1 = type metadata accessor for AppEntityVisualState(0);
  __chkstk_darwin(v1);
  v3 = (char *)v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15[0] = *(_QWORD *)(v0 + 16);
  v4 = sub_144B4();
  v5 = BinaryInteger.description.getter(&type metadata for UInt64, v4);
  v7 = v6;
  v15[0] = _swiftEmptyArrayStorage;
  v8 = sub_F1C0((unint64_t *)&qword_3B1D18, (void (*)(uint64_t))&type metadata accessor for AppEntityVisualState, (uint64_t)&protocol conformance descriptor for AppEntityVisualState);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B1D20);
  v10 = sub_29210();
  dispatch thunk of SetAlgebra.init<A>(_:)(v15, v9, v10, v1, v8);
  v11 = type metadata accessor for ShowEntity(0);
  v15[0] = v5;
  v15[1] = v7;
  objc_allocWithZone((Class)type metadata accessor for AppEntityViewAnnotation(0));
  v12 = sub_F1C0(&qword_3B9668, (void (*)(uint64_t))&type metadata accessor for ShowEntity, (uint64_t)&protocol conformance descriptor for ShowEntity);
  v13 = (objc_class *)AppEntityViewAnnotation.init<A>(entityType:identifier:state:)(v11, v15, v3, v11, v12);
  result.value.isa = v13;
  result.is_nil = v14;
  return result;
}

uint64_t sub_16D1F4()
{
  type metadata accessor for JSONObject(0);
  type metadata accessor for JSONContext(0);
  return sub_2D2008();
}

uint64_t sub_16D274(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ShowHero(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_16D2B8()
{
  return sub_F1C0(&qword_3BD9F8, (void (*)(uint64_t))type metadata accessor for ShowHero, (uint64_t)&protocol conformance descriptor for ShowHero);
}

uint64_t sub_16D2E4(uint64_t a1)
{
  uint64_t result;

  result = sub_F1C0(&qword_3BDA00, (void (*)(uint64_t))type metadata accessor for ShowHero, (uint64_t)&protocol conformance descriptor for ShowHero);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_16D320(uint64_t a1)
{
  uint64_t result;

  result = sub_F1C0(&qword_3BD9F8, (void (*)(uint64_t))type metadata accessor for ShowHero, (uint64_t)&protocol conformance descriptor for ShowHero);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

_QWORD *sub_16D35C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;

  type metadata accessor for ShowHero(0);
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B9EF0);
  return Lazy.wrappedValue.getter(a1, v2);
}

_QWORD *sub_16D3C4@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;

  type metadata accessor for ShowHero(0);
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BA270);
  return Lazy.wrappedValue.getter(a1, v2);
}

_QWORD *initializeBufferWithCopyOfBuffer for ShowHero(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  int *v12;
  unsigned int (*v13)(uint64_t *, uint64_t, int *);
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  id *v21;
  int v22;
  id v23;
  id *v24;
  int v25;
  id v26;
  id *v27;
  int v28;
  id v29;
  id *v30;
  int v31;
  id v32;
  id *v33;
  int v34;
  id v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  void (*v48)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  id *v57;
  int v58;
  id v59;
  id *v60;
  int v61;
  id v62;
  id *v63;
  int v64;
  id v65;
  id *v66;
  int v67;
  id v68;
  id *v69;
  int v70;
  id v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  void (*v84)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  void (*v105)(char *, uint64_t, uint64_t);
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v111;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
    v8 = (void *)a2[5];
    v9 = a3[8];
    v10 = (_QWORD *)(a1 + v9);
    v11 = (uint64_t *)((char *)a2 + v9);
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_QWORD *)(a1 + 40) = v8;
    v12 = (int *)type metadata accessor for ArtworkModel(0);
    v111 = *((_QWORD *)v12 - 1);
    v13 = *(unsigned int (**)(uint64_t *, uint64_t, int *))(v111 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v14 = v8;
    if (v13(v11, 1, v12))
    {
      v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      v17 = v11[1];
      *v10 = *v11;
      v10[1] = v17;
      v18 = *((unsigned __int8 *)v11 + 32);
      swift_bridgeObjectRetain();
      if (v18 == 255)
      {
        *((_OWORD *)v10 + 1) = *((_OWORD *)v11 + 1);
        *((_BYTE *)v10 + 32) = *((_BYTE *)v11 + 32);
      }
      else
      {
        v19 = v11[2];
        v20 = v11[3];
        sub_3D464(v19, v20, v18);
        v10[2] = v19;
        v10[3] = v20;
        *((_BYTE *)v10 + 32) = v18;
      }
      *(_OWORD *)(v10 + 5) = *(_OWORD *)(v11 + 5);
      v21 = (id *)(v11 + 7);
      v22 = *((unsigned __int8 *)v11 + 64);
      if (v22 == 255)
      {
        v10[7] = *v21;
        *((_BYTE *)v10 + 64) = *((_BYTE *)v11 + 64);
      }
      else
      {
        v23 = *v21;
        sub_3D47C(*v21, *((_BYTE *)v11 + 64));
        v10[7] = v23;
        *((_BYTE *)v10 + 64) = v22;
      }
      v24 = (id *)(v11 + 9);
      v25 = *((unsigned __int8 *)v11 + 80);
      if (v25 == 255)
      {
        v10[9] = *v24;
        *((_BYTE *)v10 + 80) = *((_BYTE *)v11 + 80);
      }
      else
      {
        v26 = *v24;
        sub_3D47C(*v24, *((_BYTE *)v11 + 80));
        v10[9] = v26;
        *((_BYTE *)v10 + 80) = v25;
      }
      v27 = (id *)(v11 + 11);
      v28 = *((unsigned __int8 *)v11 + 96);
      if (v28 == 255)
      {
        v10[11] = *v27;
        *((_BYTE *)v10 + 96) = *((_BYTE *)v11 + 96);
      }
      else
      {
        v29 = *v27;
        sub_3D47C(*v27, *((_BYTE *)v11 + 96));
        v10[11] = v29;
        *((_BYTE *)v10 + 96) = v28;
      }
      v30 = (id *)(v11 + 13);
      v31 = *((unsigned __int8 *)v11 + 112);
      if (v31 == 255)
      {
        v10[13] = *v30;
        *((_BYTE *)v10 + 112) = *((_BYTE *)v11 + 112);
      }
      else
      {
        v32 = *v30;
        sub_3D47C(*v30, *((_BYTE *)v11 + 112));
        v10[13] = v32;
        *((_BYTE *)v10 + 112) = v31;
      }
      v33 = (id *)(v11 + 15);
      v34 = *((unsigned __int8 *)v11 + 128);
      if (v34 == 255)
      {
        v10[15] = *v33;
        *((_BYTE *)v10 + 128) = *((_BYTE *)v11 + 128);
      }
      else
      {
        v35 = *v33;
        sub_3D47C(*v33, *((_BYTE *)v11 + 128));
        v10[15] = v35;
        *((_BYTE *)v10 + 128) = v34;
      }
      *((_BYTE *)v10 + 129) = *((_BYTE *)v11 + 129);
      v36 = v12[11];
      v37 = (char *)v10 + v36;
      v38 = (char *)v11 + v36;
      v39 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 16))(v37, v38, v39);
      v40 = v12[12];
      v41 = (_QWORD *)((char *)v10 + v40);
      v42 = (_QWORD *)((char *)v11 + v40);
      v43 = v42[1];
      *v41 = *v42;
      v41[1] = v43;
      *((_BYTE *)v10 + v12[13]) = *((_BYTE *)v11 + v12[13]);
      *((_BYTE *)v10 + v12[14]) = *((_BYTE *)v11 + v12[14]);
      *((_BYTE *)v10 + v12[15]) = *((_BYTE *)v11 + v12[15]);
      v44 = v12[16];
      v45 = (_QWORD *)((char *)v10 + v44);
      v46 = (_QWORD *)((char *)v11 + v44);
      v47 = v46[1];
      *v45 = *v46;
      v45[1] = v47;
      v48 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v111 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v48(v10, 0, 1, v12);
    }
    v49 = a3[9];
    v50 = (_QWORD *)((char *)v4 + v49);
    v51 = (uint64_t *)((char *)a2 + v49);
    if (v13((uint64_t *)((char *)a2 + v49), 1, v12))
    {
      v52 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
      memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
    }
    else
    {
      v53 = v51[1];
      *v50 = *v51;
      v50[1] = v53;
      v54 = *((unsigned __int8 *)v51 + 32);
      swift_bridgeObjectRetain();
      if (v54 == 255)
      {
        *((_OWORD *)v50 + 1) = *((_OWORD *)v51 + 1);
        *((_BYTE *)v50 + 32) = *((_BYTE *)v51 + 32);
      }
      else
      {
        v55 = v51[2];
        v56 = v51[3];
        sub_3D464(v55, v56, v54);
        v50[2] = v55;
        v50[3] = v56;
        *((_BYTE *)v50 + 32) = v54;
      }
      *(_OWORD *)(v50 + 5) = *(_OWORD *)(v51 + 5);
      v57 = (id *)(v51 + 7);
      v58 = *((unsigned __int8 *)v51 + 64);
      if (v58 == 255)
      {
        v50[7] = *v57;
        *((_BYTE *)v50 + 64) = *((_BYTE *)v51 + 64);
      }
      else
      {
        v59 = *v57;
        sub_3D47C(*v57, *((_BYTE *)v51 + 64));
        v50[7] = v59;
        *((_BYTE *)v50 + 64) = v58;
      }
      v60 = (id *)(v51 + 9);
      v61 = *((unsigned __int8 *)v51 + 80);
      if (v61 == 255)
      {
        v50[9] = *v60;
        *((_BYTE *)v50 + 80) = *((_BYTE *)v51 + 80);
      }
      else
      {
        v62 = *v60;
        sub_3D47C(*v60, *((_BYTE *)v51 + 80));
        v50[9] = v62;
        *((_BYTE *)v50 + 80) = v61;
      }
      v63 = (id *)(v51 + 11);
      v64 = *((unsigned __int8 *)v51 + 96);
      if (v64 == 255)
      {
        v50[11] = *v63;
        *((_BYTE *)v50 + 96) = *((_BYTE *)v51 + 96);
      }
      else
      {
        v65 = *v63;
        sub_3D47C(*v63, *((_BYTE *)v51 + 96));
        v50[11] = v65;
        *((_BYTE *)v50 + 96) = v64;
      }
      v66 = (id *)(v51 + 13);
      v67 = *((unsigned __int8 *)v51 + 112);
      if (v67 == 255)
      {
        v50[13] = *v66;
        *((_BYTE *)v50 + 112) = *((_BYTE *)v51 + 112);
      }
      else
      {
        v68 = *v66;
        sub_3D47C(*v66, *((_BYTE *)v51 + 112));
        v50[13] = v68;
        *((_BYTE *)v50 + 112) = v67;
      }
      v69 = (id *)(v51 + 15);
      v70 = *((unsigned __int8 *)v51 + 128);
      if (v70 == 255)
      {
        v50[15] = *v69;
        *((_BYTE *)v50 + 128) = *((_BYTE *)v51 + 128);
      }
      else
      {
        v71 = *v69;
        sub_3D47C(*v69, *((_BYTE *)v51 + 128));
        v50[15] = v71;
        *((_BYTE *)v50 + 128) = v70;
      }
      *((_BYTE *)v50 + 129) = *((_BYTE *)v51 + 129);
      v72 = v12[11];
      v73 = (char *)v50 + v72;
      v74 = (char *)v51 + v72;
      v75 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v75 - 8) + 16))(v73, v74, v75);
      v76 = v12[12];
      v77 = (_QWORD *)((char *)v50 + v76);
      v78 = (_QWORD *)((char *)v51 + v76);
      v79 = v78[1];
      *v77 = *v78;
      v77[1] = v79;
      *((_BYTE *)v50 + v12[13]) = *((_BYTE *)v51 + v12[13]);
      *((_BYTE *)v50 + v12[14]) = *((_BYTE *)v51 + v12[14]);
      *((_BYTE *)v50 + v12[15]) = *((_BYTE *)v51 + v12[15]);
      v80 = v12[16];
      v81 = (_QWORD *)((char *)v50 + v80);
      v82 = (_QWORD *)((char *)v51 + v80);
      v83 = v82[1];
      *v81 = *v82;
      v81[1] = v83;
      v84 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v111 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v84(v50, 0, 1, v12);
    }
    v85 = a3[10];
    v86 = a3[11];
    v87 = (char *)v4 + v85;
    v88 = (uint64_t)a2 + v85;
    *(_DWORD *)v87 = *(_DWORD *)v88;
    v87[4] = *(_BYTE *)(v88 + 4);
    v89 = (char *)v4 + v86;
    v90 = (uint64_t)a2 + v86;
    *(_QWORD *)v89 = *(_QWORD *)v90;
    v89[8] = *(_BYTE *)(v90 + 8);
    v91 = a3[12];
    v92 = a3[13];
    v93 = (_QWORD *)((char *)v4 + v91);
    v94 = (uint64_t *)((char *)a2 + v91);
    v96 = *v94;
    v95 = v94[1];
    LOBYTE(v94) = *((_BYTE *)a2 + v92);
    *v93 = v96;
    v93[1] = v95;
    *((_BYTE *)v4 + v92) = (_BYTE)v94;
    v97 = a3[14];
    v98 = (char *)v4 + v97;
    v99 = (uint64_t)a2 + v97;
    swift_bridgeObjectRetain();
    v100 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BDA08);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v100 - 8) + 16))(v98, v99, v100);
    v101 = a3[15];
    v102 = (char *)v4 + v101;
    v103 = (uint64_t)a2 + v101;
    v104 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BDA10);
    v105 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v104 - 8) + 16);
    v105(v102, v103, v104);
    v105((char *)v4 + a3[16], (uint64_t)a2 + a3[16], v104);
    v105((char *)v4 + a3[17], (uint64_t)a2 + a3[17], v104);
    v106 = a3[18];
    v107 = (char *)v4 + v106;
    v108 = (uint64_t)a2 + v106;
    v109 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BDA18);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v109 - 8) + 16))(v107, v108, v109);
  }
  return v4;
}

uint64_t destroy for ShowHero(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int (*v6)(uint64_t, uint64_t, uint64_t);
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v4 = a1 + a2[8];
  v5 = type metadata accessor for ArtworkModel(0);
  v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48);
  if (!v6(v4, 1, v5))
  {
    swift_bridgeObjectRelease();
    v7 = *(unsigned __int8 *)(v4 + 32);
    if (v7 != 255)
      sub_3B5BC(*(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), v7);
    v8 = *(unsigned __int8 *)(v4 + 64);
    if (v8 != 255)
      sub_3D624(*(id *)(v4 + 56), v8);
    v9 = *(unsigned __int8 *)(v4 + 80);
    if (v9 != 255)
      sub_3D624(*(id *)(v4 + 72), v9);
    v10 = *(unsigned __int8 *)(v4 + 96);
    if (v10 != 255)
      sub_3D624(*(id *)(v4 + 88), v10);
    v11 = *(unsigned __int8 *)(v4 + 112);
    if (v11 != 255)
      sub_3D624(*(id *)(v4 + 104), v11);
    v12 = *(unsigned __int8 *)(v4 + 128);
    if (v12 != 255)
      sub_3D624(*(id *)(v4 + 120), v12);
    v13 = v4 + *(int *)(v5 + 44);
    v14 = type metadata accessor for ArtworkCrop(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v15 = a1 + a2[9];
  if (!v6(v15, 1, v5))
  {
    swift_bridgeObjectRelease();
    v16 = *(unsigned __int8 *)(v15 + 32);
    if (v16 != 255)
      sub_3B5BC(*(_QWORD *)(v15 + 16), *(_QWORD *)(v15 + 24), v16);
    v17 = *(unsigned __int8 *)(v15 + 64);
    if (v17 != 255)
      sub_3D624(*(id *)(v15 + 56), v17);
    v18 = *(unsigned __int8 *)(v15 + 80);
    if (v18 != 255)
      sub_3D624(*(id *)(v15 + 72), v18);
    v19 = *(unsigned __int8 *)(v15 + 96);
    if (v19 != 255)
      sub_3D624(*(id *)(v15 + 88), v19);
    v20 = *(unsigned __int8 *)(v15 + 112);
    if (v20 != 255)
      sub_3D624(*(id *)(v15 + 104), v20);
    v21 = *(unsigned __int8 *)(v15 + 128);
    if (v21 != 255)
      sub_3D624(*(id *)(v15 + 120), v21);
    v22 = v15 + *(int *)(v5 + 44);
    v23 = type metadata accessor for ArtworkCrop(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(v22, v23);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  v24 = a1 + a2[14];
  v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BDA08);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 8))(v24, v25);
  v26 = a1 + a2[15];
  v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BDA10);
  v28 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 8);
  v28(v26, v27);
  v28(a1 + a2[16], v27);
  v28(a1 + a2[17], v27);
  v29 = a1 + a2[18];
  v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BDA18);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 8))(v29, v30);
}

uint64_t initializeWithCopy for ShowHero(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  int *v11;
  unsigned int (*v12)(_QWORD *, uint64_t, int *);
  id v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  id *v19;
  int v20;
  id v21;
  id *v22;
  int v23;
  id v24;
  id *v25;
  int v26;
  id v27;
  id *v28;
  int v29;
  id v30;
  id *v31;
  int v32;
  id v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  void (*v46)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  id *v55;
  int v56;
  id v57;
  id *v58;
  int v59;
  id v60;
  id *v61;
  int v62;
  id v63;
  id *v64;
  int v65;
  id v66;
  id *v67;
  int v68;
  id v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  void (*v82)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void (*v103)(uint64_t, uint64_t, uint64_t);
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v109;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v7 = *(void **)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v7;
  v8 = a3[8];
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  v11 = (int *)type metadata accessor for ArtworkModel(0);
  v109 = *((_QWORD *)v11 - 1);
  v12 = *(unsigned int (**)(_QWORD *, uint64_t, int *))(v109 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v13 = v7;
  if (v12(v10, 1, v11))
  {
    v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    v15 = v10[1];
    *v9 = *v10;
    v9[1] = v15;
    v16 = *((unsigned __int8 *)v10 + 32);
    swift_bridgeObjectRetain();
    if (v16 == 255)
    {
      *((_OWORD *)v9 + 1) = *((_OWORD *)v10 + 1);
      *((_BYTE *)v9 + 32) = *((_BYTE *)v10 + 32);
    }
    else
    {
      v17 = v10[2];
      v18 = v10[3];
      sub_3D464(v17, v18, v16);
      v9[2] = v17;
      v9[3] = v18;
      *((_BYTE *)v9 + 32) = v16;
    }
    *(_OWORD *)(v9 + 5) = *(_OWORD *)(v10 + 5);
    v19 = (id *)(v10 + 7);
    v20 = *((unsigned __int8 *)v10 + 64);
    if (v20 == 255)
    {
      v9[7] = *v19;
      *((_BYTE *)v9 + 64) = *((_BYTE *)v10 + 64);
    }
    else
    {
      v21 = *v19;
      sub_3D47C(*v19, *((_BYTE *)v10 + 64));
      v9[7] = v21;
      *((_BYTE *)v9 + 64) = v20;
    }
    v22 = (id *)(v10 + 9);
    v23 = *((unsigned __int8 *)v10 + 80);
    if (v23 == 255)
    {
      v9[9] = *v22;
      *((_BYTE *)v9 + 80) = *((_BYTE *)v10 + 80);
    }
    else
    {
      v24 = *v22;
      sub_3D47C(*v22, *((_BYTE *)v10 + 80));
      v9[9] = v24;
      *((_BYTE *)v9 + 80) = v23;
    }
    v25 = (id *)(v10 + 11);
    v26 = *((unsigned __int8 *)v10 + 96);
    if (v26 == 255)
    {
      v9[11] = *v25;
      *((_BYTE *)v9 + 96) = *((_BYTE *)v10 + 96);
    }
    else
    {
      v27 = *v25;
      sub_3D47C(*v25, *((_BYTE *)v10 + 96));
      v9[11] = v27;
      *((_BYTE *)v9 + 96) = v26;
    }
    v28 = (id *)(v10 + 13);
    v29 = *((unsigned __int8 *)v10 + 112);
    if (v29 == 255)
    {
      v9[13] = *v28;
      *((_BYTE *)v9 + 112) = *((_BYTE *)v10 + 112);
    }
    else
    {
      v30 = *v28;
      sub_3D47C(*v28, *((_BYTE *)v10 + 112));
      v9[13] = v30;
      *((_BYTE *)v9 + 112) = v29;
    }
    v31 = (id *)(v10 + 15);
    v32 = *((unsigned __int8 *)v10 + 128);
    if (v32 == 255)
    {
      v9[15] = *v31;
      *((_BYTE *)v9 + 128) = *((_BYTE *)v10 + 128);
    }
    else
    {
      v33 = *v31;
      sub_3D47C(*v31, *((_BYTE *)v10 + 128));
      v9[15] = v33;
      *((_BYTE *)v9 + 128) = v32;
    }
    *((_BYTE *)v9 + 129) = *((_BYTE *)v10 + 129);
    v34 = v11[11];
    v35 = (char *)v9 + v34;
    v36 = (char *)v10 + v34;
    v37 = type metadata accessor for ArtworkCrop(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 16))(v35, v36, v37);
    v38 = v11[12];
    v39 = (_QWORD *)((char *)v9 + v38);
    v40 = (_QWORD *)((char *)v10 + v38);
    v41 = v40[1];
    *v39 = *v40;
    v39[1] = v41;
    *((_BYTE *)v9 + v11[13]) = *((_BYTE *)v10 + v11[13]);
    *((_BYTE *)v9 + v11[14]) = *((_BYTE *)v10 + v11[14]);
    *((_BYTE *)v9 + v11[15]) = *((_BYTE *)v10 + v11[15]);
    v42 = v11[16];
    v43 = (_QWORD *)((char *)v9 + v42);
    v44 = (_QWORD *)((char *)v10 + v42);
    v45 = v44[1];
    *v43 = *v44;
    v43[1] = v45;
    v46 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v109 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v46(v9, 0, 1, v11);
  }
  v47 = a3[9];
  v48 = (_QWORD *)(a1 + v47);
  v49 = (_QWORD *)(a2 + v47);
  if (v12((_QWORD *)(a2 + v47), 1, v11))
  {
    v50 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
    memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
  }
  else
  {
    v51 = v49[1];
    *v48 = *v49;
    v48[1] = v51;
    v52 = *((unsigned __int8 *)v49 + 32);
    swift_bridgeObjectRetain();
    if (v52 == 255)
    {
      *((_OWORD *)v48 + 1) = *((_OWORD *)v49 + 1);
      *((_BYTE *)v48 + 32) = *((_BYTE *)v49 + 32);
    }
    else
    {
      v53 = v49[2];
      v54 = v49[3];
      sub_3D464(v53, v54, v52);
      v48[2] = v53;
      v48[3] = v54;
      *((_BYTE *)v48 + 32) = v52;
    }
    *(_OWORD *)(v48 + 5) = *(_OWORD *)(v49 + 5);
    v55 = (id *)(v49 + 7);
    v56 = *((unsigned __int8 *)v49 + 64);
    if (v56 == 255)
    {
      v48[7] = *v55;
      *((_BYTE *)v48 + 64) = *((_BYTE *)v49 + 64);
    }
    else
    {
      v57 = *v55;
      sub_3D47C(*v55, *((_BYTE *)v49 + 64));
      v48[7] = v57;
      *((_BYTE *)v48 + 64) = v56;
    }
    v58 = (id *)(v49 + 9);
    v59 = *((unsigned __int8 *)v49 + 80);
    if (v59 == 255)
    {
      v48[9] = *v58;
      *((_BYTE *)v48 + 80) = *((_BYTE *)v49 + 80);
    }
    else
    {
      v60 = *v58;
      sub_3D47C(*v58, *((_BYTE *)v49 + 80));
      v48[9] = v60;
      *((_BYTE *)v48 + 80) = v59;
    }
    v61 = (id *)(v49 + 11);
    v62 = *((unsigned __int8 *)v49 + 96);
    if (v62 == 255)
    {
      v48[11] = *v61;
      *((_BYTE *)v48 + 96) = *((_BYTE *)v49 + 96);
    }
    else
    {
      v63 = *v61;
      sub_3D47C(*v61, *((_BYTE *)v49 + 96));
      v48[11] = v63;
      *((_BYTE *)v48 + 96) = v62;
    }
    v64 = (id *)(v49 + 13);
    v65 = *((unsigned __int8 *)v49 + 112);
    if (v65 == 255)
    {
      v48[13] = *v64;
      *((_BYTE *)v48 + 112) = *((_BYTE *)v49 + 112);
    }
    else
    {
      v66 = *v64;
      sub_3D47C(*v64, *((_BYTE *)v49 + 112));
      v48[13] = v66;
      *((_BYTE *)v48 + 112) = v65;
    }
    v67 = (id *)(v49 + 15);
    v68 = *((unsigned __int8 *)v49 + 128);
    if (v68 == 255)
    {
      v48[15] = *v67;
      *((_BYTE *)v48 + 128) = *((_BYTE *)v49 + 128);
    }
    else
    {
      v69 = *v67;
      sub_3D47C(*v67, *((_BYTE *)v49 + 128));
      v48[15] = v69;
      *((_BYTE *)v48 + 128) = v68;
    }
    *((_BYTE *)v48 + 129) = *((_BYTE *)v49 + 129);
    v70 = v11[11];
    v71 = (char *)v48 + v70;
    v72 = (char *)v49 + v70;
    v73 = type metadata accessor for ArtworkCrop(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v73 - 8) + 16))(v71, v72, v73);
    v74 = v11[12];
    v75 = (_QWORD *)((char *)v48 + v74);
    v76 = (_QWORD *)((char *)v49 + v74);
    v77 = v76[1];
    *v75 = *v76;
    v75[1] = v77;
    *((_BYTE *)v48 + v11[13]) = *((_BYTE *)v49 + v11[13]);
    *((_BYTE *)v48 + v11[14]) = *((_BYTE *)v49 + v11[14]);
    *((_BYTE *)v48 + v11[15]) = *((_BYTE *)v49 + v11[15]);
    v78 = v11[16];
    v79 = (_QWORD *)((char *)v48 + v78);
    v80 = (_QWORD *)((char *)v49 + v78);
    v81 = v80[1];
    *v79 = *v80;
    v79[1] = v81;
    v82 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v109 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v82(v48, 0, 1, v11);
  }
  v83 = a3[10];
  v84 = a3[11];
  v85 = a1 + v83;
  v86 = a2 + v83;
  *(_DWORD *)v85 = *(_DWORD *)v86;
  *(_BYTE *)(v85 + 4) = *(_BYTE *)(v86 + 4);
  v87 = a1 + v84;
  v88 = a2 + v84;
  *(_QWORD *)v87 = *(_QWORD *)v88;
  *(_BYTE *)(v87 + 8) = *(_BYTE *)(v88 + 8);
  v89 = a3[12];
  v90 = a3[13];
  v91 = (_QWORD *)(a1 + v89);
  v92 = (uint64_t *)(a2 + v89);
  v94 = *v92;
  v93 = v92[1];
  LOBYTE(v92) = *(_BYTE *)(a2 + v90);
  *v91 = v94;
  v91[1] = v93;
  *(_BYTE *)(a1 + v90) = (_BYTE)v92;
  v95 = a3[14];
  v96 = a1 + v95;
  v97 = a2 + v95;
  swift_bridgeObjectRetain();
  v98 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BDA08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v98 - 8) + 16))(v96, v97, v98);
  v99 = a3[15];
  v100 = a1 + v99;
  v101 = a2 + v99;
  v102 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BDA10);
  v103 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v102 - 8) + 16);
  v103(v100, v101, v102);
  v103(a1 + a3[16], a2 + a3[16], v102);
  v103(a1 + a3[17], a2 + a3[17], v102);
  v104 = a3[18];
  v105 = a1 + v104;
  v106 = a2 + v104;
  v107 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BDA18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v107 - 8) + 16))(v105, v106, v107);
  return a1;
}

_QWORD *assignWithCopy for ShowHero(_QWORD *a1, _QWORD *a2, int *a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, int *);
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 *v21;
  __int128 *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 v28;
  __int128 v29;
  id *v30;
  int v31;
  id v32;
  id v33;
  id *v34;
  int v35;
  id v36;
  id v37;
  id *v38;
  int v39;
  id v40;
  id v41;
  id *v42;
  int v43;
  id v44;
  id v45;
  id *v46;
  int v47;
  id v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  char *v56;
  uint64_t v57;
  _QWORD *v58;
  char *v59;
  void (*v60)(uint64_t, _QWORD, uint64_t, int *);
  uint64_t v61;
  uint64_t v62;
  char v63;
  __int128 v64;
  id *v65;
  id *v66;
  int v67;
  id v68;
  void *v69;
  char v70;
  id v71;
  char v72;
  id v73;
  id *v74;
  id *v75;
  int v76;
  id v77;
  void *v78;
  char v79;
  id v80;
  char v81;
  id v82;
  id *v83;
  id *v84;
  int v85;
  id v86;
  void *v87;
  char v88;
  id v89;
  char v90;
  id v91;
  id *v92;
  id *v93;
  int v94;
  id v95;
  void *v96;
  char v97;
  id v98;
  char v99;
  id v100;
  id *v101;
  id *v102;
  int v103;
  id v104;
  void *v105;
  char v106;
  id v107;
  char v108;
  id v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  char *v116;
  uint64_t v117;
  _QWORD *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  int v123;
  int v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  __int128 *v130;
  __int128 *v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unsigned __int8 v137;
  __int128 v138;
  id *v139;
  int v140;
  id v141;
  id v142;
  id *v143;
  int v144;
  id v145;
  id v146;
  id *v147;
  int v148;
  id v149;
  id v150;
  id *v151;
  int v152;
  id v153;
  id v154;
  id *v155;
  int v156;
  id v157;
  id v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  _QWORD *v164;
  char *v165;
  uint64_t v166;
  _QWORD *v167;
  char *v168;
  void (*v169)(uint64_t, _QWORD, uint64_t, int *);
  uint64_t v170;
  uint64_t v171;
  char v172;
  __int128 v173;
  id *v174;
  id *v175;
  int v176;
  id v177;
  void *v178;
  char v179;
  id v180;
  char v181;
  id v182;
  id *v183;
  id *v184;
  int v185;
  id v186;
  void *v187;
  char v188;
  id v189;
  char v190;
  id v191;
  id *v192;
  id *v193;
  int v194;
  id v195;
  void *v196;
  char v197;
  id v198;
  char v199;
  id v200;
  id *v201;
  id *v202;
  int v203;
  id v204;
  void *v205;
  char v206;
  id v207;
  char v208;
  id v209;
  id *v210;
  id *v211;
  int v212;
  id v213;
  void *v214;
  char v215;
  id v216;
  char v217;
  id v218;
  uint64_t v219;
  uint64_t v220;
  char *v221;
  uint64_t v222;
  uint64_t v223;
  _QWORD *v224;
  char *v225;
  uint64_t v226;
  _QWORD *v227;
  char *v228;
  uint64_t v229;
  char *v230;
  char *v231;
  int v232;
  uint64_t v233;
  char *v234;
  char *v235;
  uint64_t v236;
  uint64_t v237;
  _QWORD *v238;
  _QWORD *v239;
  uint64_t v240;
  char *v241;
  char *v242;
  uint64_t v243;
  uint64_t v244;
  char *v245;
  char *v246;
  uint64_t v247;
  void (*v248)(char *, char *, uint64_t);
  uint64_t v249;
  char *v250;
  char *v251;
  uint64_t v252;
  uint64_t v254;
  uint64_t v255;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = (void *)a2[5];
  v7 = (void *)a1[5];
  a1[5] = v6;
  v8 = v6;

  v9 = a3[8];
  v10 = (uint64_t)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = (int *)type metadata accessor for ArtworkModel(0);
  v13 = *((_QWORD *)v12 - 1);
  v14 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14((uint64_t)v11, 1, v12);
  if (v15)
  {
    if (!v16)
    {
      v254 = v13;
      *(_QWORD *)v10 = *(_QWORD *)v11;
      *(_QWORD *)(v10 + 8) = *((_QWORD *)v11 + 1);
      v17 = v11[32];
      swift_bridgeObjectRetain();
      if (v17 == 255)
      {
        v29 = *((_OWORD *)v11 + 1);
        *(_BYTE *)(v10 + 32) = v11[32];
        *(_OWORD *)(v10 + 16) = v29;
      }
      else
      {
        v18 = *((_QWORD *)v11 + 2);
        v19 = *((_QWORD *)v11 + 3);
        sub_3D464(v18, v19, v17);
        *(_QWORD *)(v10 + 16) = v18;
        *(_QWORD *)(v10 + 24) = v19;
        *(_BYTE *)(v10 + 32) = v17;
      }
      *(_QWORD *)(v10 + 40) = *((_QWORD *)v11 + 5);
      *(_QWORD *)(v10 + 48) = *((_QWORD *)v11 + 6);
      v30 = (id *)(v11 + 56);
      v31 = v11[64];
      if (v31 == 255)
      {
        v33 = *v30;
        *(_BYTE *)(v10 + 64) = v11[64];
        *(_QWORD *)(v10 + 56) = v33;
      }
      else
      {
        v32 = *v30;
        sub_3D47C(*v30, v11[64]);
        *(_QWORD *)(v10 + 56) = v32;
        *(_BYTE *)(v10 + 64) = v31;
      }
      v34 = (id *)(v11 + 72);
      v35 = v11[80];
      if (v35 == 255)
      {
        v37 = *v34;
        *(_BYTE *)(v10 + 80) = v11[80];
        *(_QWORD *)(v10 + 72) = v37;
      }
      else
      {
        v36 = *v34;
        sub_3D47C(*v34, v11[80]);
        *(_QWORD *)(v10 + 72) = v36;
        *(_BYTE *)(v10 + 80) = v35;
      }
      v38 = (id *)(v11 + 88);
      v39 = v11[96];
      if (v39 == 255)
      {
        v41 = *v38;
        *(_BYTE *)(v10 + 96) = v11[96];
        *(_QWORD *)(v10 + 88) = v41;
      }
      else
      {
        v40 = *v38;
        sub_3D47C(*v38, v11[96]);
        *(_QWORD *)(v10 + 88) = v40;
        *(_BYTE *)(v10 + 96) = v39;
      }
      v42 = (id *)(v11 + 104);
      v43 = v11[112];
      if (v43 == 255)
      {
        v45 = *v42;
        *(_BYTE *)(v10 + 112) = v11[112];
        *(_QWORD *)(v10 + 104) = v45;
      }
      else
      {
        v44 = *v42;
        sub_3D47C(*v42, v11[112]);
        *(_QWORD *)(v10 + 104) = v44;
        *(_BYTE *)(v10 + 112) = v43;
      }
      v46 = (id *)(v11 + 120);
      v47 = v11[128];
      if (v47 == 255)
      {
        v49 = *v46;
        *(_BYTE *)(v10 + 128) = v11[128];
        *(_QWORD *)(v10 + 120) = v49;
      }
      else
      {
        v48 = *v46;
        sub_3D47C(*v46, v11[128]);
        *(_QWORD *)(v10 + 120) = v48;
        *(_BYTE *)(v10 + 128) = v47;
      }
      *(_BYTE *)(v10 + 129) = v11[129];
      v50 = v12[11];
      v51 = v10 + v50;
      v52 = &v11[v50];
      v53 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v53 - 8) + 16))(v51, v52, v53);
      v54 = v12[12];
      v55 = (_QWORD *)(v10 + v54);
      v56 = &v11[v54];
      *v55 = *(_QWORD *)v56;
      v55[1] = *((_QWORD *)v56 + 1);
      *(_BYTE *)(v10 + v12[13]) = v11[v12[13]];
      *(_BYTE *)(v10 + v12[14]) = v11[v12[14]];
      *(_BYTE *)(v10 + v12[15]) = v11[v12[15]];
      v57 = v12[16];
      v58 = (_QWORD *)(v10 + v57);
      v59 = &v11[v57];
      *v58 = *(_QWORD *)v59;
      v58[1] = *((_QWORD *)v59 + 1);
      v13 = v254;
      v60 = *(void (**)(uint64_t, _QWORD, uint64_t, int *))(v254 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v60(v10, 0, 1, v12);
      goto LABEL_68;
    }
LABEL_7:
    v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
    memcpy((void *)v10, v11, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_68;
  }
  if (v16)
  {
    sub_3E4A4(v10);
    goto LABEL_7;
  }
  v255 = v13;
  *(_QWORD *)v10 = *(_QWORD *)v11;
  *(_QWORD *)(v10 + 8) = *((_QWORD *)v11 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v21 = (__int128 *)(v10 + 16);
  v22 = (__int128 *)(v11 + 16);
  v23 = v11[32];
  if (*(unsigned __int8 *)(v10 + 32) == 255)
  {
    if (v23 == 255)
    {
      v64 = *v22;
      *(_BYTE *)(v10 + 32) = v11[32];
      *v21 = v64;
    }
    else
    {
      v61 = *((_QWORD *)v11 + 2);
      v62 = *((_QWORD *)v11 + 3);
      sub_3D464(v61, v62, v11[32]);
      *(_QWORD *)(v10 + 16) = v61;
      *(_QWORD *)(v10 + 24) = v62;
      *(_BYTE *)(v10 + 32) = v23;
    }
  }
  else if (v23 == 255)
  {
    sub_3E43C(v10 + 16);
    v63 = v11[32];
    *v21 = *v22;
    *(_BYTE *)(v10 + 32) = v63;
  }
  else
  {
    v24 = *((_QWORD *)v11 + 2);
    v25 = *((_QWORD *)v11 + 3);
    sub_3D464(v24, v25, v11[32]);
    v26 = *(_QWORD *)(v10 + 16);
    v27 = *(_QWORD *)(v10 + 24);
    *(_QWORD *)(v10 + 16) = v24;
    *(_QWORD *)(v10 + 24) = v25;
    v28 = *(_BYTE *)(v10 + 32);
    *(_BYTE *)(v10 + 32) = v23;
    sub_3B5BC(v26, v27, v28);
  }
  *(_QWORD *)(v10 + 40) = *((_QWORD *)v11 + 5);
  *(_QWORD *)(v10 + 48) = *((_QWORD *)v11 + 6);
  v65 = (id *)(v10 + 56);
  v66 = (id *)(v11 + 56);
  v67 = v11[64];
  if (*(unsigned __int8 *)(v10 + 64) == 255)
  {
    if (v67 == 255)
    {
      v73 = *v66;
      *(_BYTE *)(v10 + 64) = v11[64];
      *v65 = v73;
    }
    else
    {
      v71 = *v66;
      sub_3D47C(*v66, v11[64]);
      *(_QWORD *)(v10 + 56) = v71;
      *(_BYTE *)(v10 + 64) = v67;
    }
  }
  else if (v67 == 255)
  {
    sub_3E470(v10 + 56);
    v72 = v11[64];
    *v65 = *v66;
    *(_BYTE *)(v10 + 64) = v72;
  }
  else
  {
    v68 = *v66;
    sub_3D47C(*v66, v11[64]);
    v69 = *(void **)(v10 + 56);
    *(_QWORD *)(v10 + 56) = v68;
    v70 = *(_BYTE *)(v10 + 64);
    *(_BYTE *)(v10 + 64) = v67;
    sub_3D624(v69, v70);
  }
  v74 = (id *)(v10 + 72);
  v75 = (id *)(v11 + 72);
  v76 = v11[80];
  if (*(unsigned __int8 *)(v10 + 80) == 255)
  {
    if (v76 == 255)
    {
      v82 = *v75;
      *(_BYTE *)(v10 + 80) = v11[80];
      *v74 = v82;
    }
    else
    {
      v80 = *v75;
      sub_3D47C(*v75, v11[80]);
      *(_QWORD *)(v10 + 72) = v80;
      *(_BYTE *)(v10 + 80) = v76;
    }
  }
  else if (v76 == 255)
  {
    sub_3E470(v10 + 72);
    v81 = v11[80];
    *v74 = *v75;
    *(_BYTE *)(v10 + 80) = v81;
  }
  else
  {
    v77 = *v75;
    sub_3D47C(*v75, v11[80]);
    v78 = *(void **)(v10 + 72);
    *(_QWORD *)(v10 + 72) = v77;
    v79 = *(_BYTE *)(v10 + 80);
    *(_BYTE *)(v10 + 80) = v76;
    sub_3D624(v78, v79);
  }
  v83 = (id *)(v10 + 88);
  v84 = (id *)(v11 + 88);
  v85 = v11[96];
  if (*(unsigned __int8 *)(v10 + 96) == 255)
  {
    if (v85 == 255)
    {
      v91 = *v84;
      *(_BYTE *)(v10 + 96) = v11[96];
      *v83 = v91;
    }
    else
    {
      v89 = *v84;
      sub_3D47C(*v84, v11[96]);
      *(_QWORD *)(v10 + 88) = v89;
      *(_BYTE *)(v10 + 96) = v85;
    }
  }
  else if (v85 == 255)
  {
    sub_3E470(v10 + 88);
    v90 = v11[96];
    *v83 = *v84;
    *(_BYTE *)(v10 + 96) = v90;
  }
  else
  {
    v86 = *v84;
    sub_3D47C(*v84, v11[96]);
    v87 = *(void **)(v10 + 88);
    *(_QWORD *)(v10 + 88) = v86;
    v88 = *(_BYTE *)(v10 + 96);
    *(_BYTE *)(v10 + 96) = v85;
    sub_3D624(v87, v88);
  }
  v92 = (id *)(v10 + 104);
  v93 = (id *)(v11 + 104);
  v94 = v11[112];
  if (*(unsigned __int8 *)(v10 + 112) == 255)
  {
    if (v94 == 255)
    {
      v100 = *v93;
      *(_BYTE *)(v10 + 112) = v11[112];
      *v92 = v100;
    }
    else
    {
      v98 = *v93;
      sub_3D47C(*v93, v11[112]);
      *(_QWORD *)(v10 + 104) = v98;
      *(_BYTE *)(v10 + 112) = v94;
    }
  }
  else if (v94 == 255)
  {
    sub_3E470(v10 + 104);
    v99 = v11[112];
    *v92 = *v93;
    *(_BYTE *)(v10 + 112) = v99;
  }
  else
  {
    v95 = *v93;
    sub_3D47C(*v93, v11[112]);
    v96 = *(void **)(v10 + 104);
    *(_QWORD *)(v10 + 104) = v95;
    v97 = *(_BYTE *)(v10 + 112);
    *(_BYTE *)(v10 + 112) = v94;
    sub_3D624(v96, v97);
  }
  v101 = (id *)(v10 + 120);
  v102 = (id *)(v11 + 120);
  v103 = v11[128];
  if (*(unsigned __int8 *)(v10 + 128) == 255)
  {
    if (v103 == 255)
    {
      v109 = *v102;
      *(_BYTE *)(v10 + 128) = v11[128];
      *v101 = v109;
    }
    else
    {
      v107 = *v102;
      sub_3D47C(*v102, v11[128]);
      *(_QWORD *)(v10 + 120) = v107;
      *(_BYTE *)(v10 + 128) = v103;
    }
  }
  else if (v103 == 255)
  {
    sub_3E470(v10 + 120);
    v108 = v11[128];
    *v101 = *v102;
    *(_BYTE *)(v10 + 128) = v108;
  }
  else
  {
    v104 = *v102;
    sub_3D47C(*v102, v11[128]);
    v105 = *(void **)(v10 + 120);
    *(_QWORD *)(v10 + 120) = v104;
    v106 = *(_BYTE *)(v10 + 128);
    *(_BYTE *)(v10 + 128) = v103;
    sub_3D624(v105, v106);
  }
  *(_BYTE *)(v10 + 129) = v11[129];
  v110 = v12[11];
  v111 = v10 + v110;
  v112 = &v11[v110];
  v113 = type metadata accessor for ArtworkCrop(0);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v113 - 8) + 24))(v111, v112, v113);
  v114 = v12[12];
  v115 = (_QWORD *)(v10 + v114);
  v116 = &v11[v114];
  *v115 = *(_QWORD *)v116;
  v115[1] = *((_QWORD *)v116 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(v10 + v12[13]) = v11[v12[13]];
  *(_BYTE *)(v10 + v12[14]) = v11[v12[14]];
  *(_BYTE *)(v10 + v12[15]) = v11[v12[15]];
  v117 = v12[16];
  v118 = (_QWORD *)(v10 + v117);
  v119 = &v11[v117];
  *v118 = *(_QWORD *)v119;
  v118[1] = *((_QWORD *)v119 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v13 = v255;
LABEL_68:
  v120 = a3[9];
  v121 = (uint64_t)a1 + v120;
  v122 = (char *)a2 + v120;
  v123 = v14((uint64_t)a1 + v120, 1, v12);
  v124 = v14((uint64_t)v122, 1, v12);
  if (v123)
  {
    if (!v124)
    {
      v125 = v13;
      *(_QWORD *)v121 = *(_QWORD *)v122;
      *(_QWORD *)(v121 + 8) = *((_QWORD *)v122 + 1);
      v126 = v122[32];
      swift_bridgeObjectRetain();
      if (v126 == 255)
      {
        v138 = *((_OWORD *)v122 + 1);
        *(_BYTE *)(v121 + 32) = v122[32];
        *(_OWORD *)(v121 + 16) = v138;
      }
      else
      {
        v127 = *((_QWORD *)v122 + 2);
        v128 = *((_QWORD *)v122 + 3);
        sub_3D464(v127, v128, v126);
        *(_QWORD *)(v121 + 16) = v127;
        *(_QWORD *)(v121 + 24) = v128;
        *(_BYTE *)(v121 + 32) = v126;
      }
      *(_QWORD *)(v121 + 40) = *((_QWORD *)v122 + 5);
      *(_QWORD *)(v121 + 48) = *((_QWORD *)v122 + 6);
      v139 = (id *)(v122 + 56);
      v140 = v122[64];
      if (v140 == 255)
      {
        v142 = *v139;
        *(_BYTE *)(v121 + 64) = v122[64];
        *(_QWORD *)(v121 + 56) = v142;
      }
      else
      {
        v141 = *v139;
        sub_3D47C(*v139, v122[64]);
        *(_QWORD *)(v121 + 56) = v141;
        *(_BYTE *)(v121 + 64) = v140;
      }
      v143 = (id *)(v122 + 72);
      v144 = v122[80];
      if (v144 == 255)
      {
        v146 = *v143;
        *(_BYTE *)(v121 + 80) = v122[80];
        *(_QWORD *)(v121 + 72) = v146;
      }
      else
      {
        v145 = *v143;
        sub_3D47C(*v143, v122[80]);
        *(_QWORD *)(v121 + 72) = v145;
        *(_BYTE *)(v121 + 80) = v144;
      }
      v147 = (id *)(v122 + 88);
      v148 = v122[96];
      if (v148 == 255)
      {
        v150 = *v147;
        *(_BYTE *)(v121 + 96) = v122[96];
        *(_QWORD *)(v121 + 88) = v150;
      }
      else
      {
        v149 = *v147;
        sub_3D47C(*v147, v122[96]);
        *(_QWORD *)(v121 + 88) = v149;
        *(_BYTE *)(v121 + 96) = v148;
      }
      v151 = (id *)(v122 + 104);
      v152 = v122[112];
      if (v152 == 255)
      {
        v154 = *v151;
        *(_BYTE *)(v121 + 112) = v122[112];
        *(_QWORD *)(v121 + 104) = v154;
      }
      else
      {
        v153 = *v151;
        sub_3D47C(*v151, v122[112]);
        *(_QWORD *)(v121 + 104) = v153;
        *(_BYTE *)(v121 + 112) = v152;
      }
      v155 = (id *)(v122 + 120);
      v156 = v122[128];
      if (v156 == 255)
      {
        v158 = *v155;
        *(_BYTE *)(v121 + 128) = v122[128];
        *(_QWORD *)(v121 + 120) = v158;
      }
      else
      {
        v157 = *v155;
        sub_3D47C(*v155, v122[128]);
        *(_QWORD *)(v121 + 120) = v157;
        *(_BYTE *)(v121 + 128) = v156;
      }
      *(_BYTE *)(v121 + 129) = v122[129];
      v159 = v12[11];
      v160 = v121 + v159;
      v161 = &v122[v159];
      v162 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v162 - 8) + 16))(v160, v161, v162);
      v163 = v12[12];
      v164 = (_QWORD *)(v121 + v163);
      v165 = &v122[v163];
      *v164 = *(_QWORD *)v165;
      v164[1] = *((_QWORD *)v165 + 1);
      *(_BYTE *)(v121 + v12[13]) = v122[v12[13]];
      *(_BYTE *)(v121 + v12[14]) = v122[v12[14]];
      *(_BYTE *)(v121 + v12[15]) = v122[v12[15]];
      v166 = v12[16];
      v167 = (_QWORD *)(v121 + v166);
      v168 = &v122[v166];
      *v167 = *(_QWORD *)v168;
      v167[1] = *((_QWORD *)v168 + 1);
      v169 = *(void (**)(uint64_t, _QWORD, uint64_t, int *))(v125 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v169(v121, 0, 1, v12);
      goto LABEL_135;
    }
LABEL_74:
    v129 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
    memcpy((void *)v121, v122, *(_QWORD *)(*(_QWORD *)(v129 - 8) + 64));
    goto LABEL_135;
  }
  if (v124)
  {
    sub_3E4A4(v121);
    goto LABEL_74;
  }
  *(_QWORD *)v121 = *(_QWORD *)v122;
  *(_QWORD *)(v121 + 8) = *((_QWORD *)v122 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v130 = (__int128 *)(v121 + 16);
  v131 = (__int128 *)(v122 + 16);
  v132 = v122[32];
  if (*(unsigned __int8 *)(v121 + 32) == 255)
  {
    if (v132 == 255)
    {
      v173 = *v131;
      *(_BYTE *)(v121 + 32) = v122[32];
      *v130 = v173;
    }
    else
    {
      v170 = *((_QWORD *)v122 + 2);
      v171 = *((_QWORD *)v122 + 3);
      sub_3D464(v170, v171, v122[32]);
      *(_QWORD *)(v121 + 16) = v170;
      *(_QWORD *)(v121 + 24) = v171;
      *(_BYTE *)(v121 + 32) = v132;
    }
  }
  else if (v132 == 255)
  {
    sub_3E43C(v121 + 16);
    v172 = v122[32];
    *v130 = *v131;
    *(_BYTE *)(v121 + 32) = v172;
  }
  else
  {
    v133 = *((_QWORD *)v122 + 2);
    v134 = *((_QWORD *)v122 + 3);
    sub_3D464(v133, v134, v122[32]);
    v135 = *(_QWORD *)(v121 + 16);
    v136 = *(_QWORD *)(v121 + 24);
    *(_QWORD *)(v121 + 16) = v133;
    *(_QWORD *)(v121 + 24) = v134;
    v137 = *(_BYTE *)(v121 + 32);
    *(_BYTE *)(v121 + 32) = v132;
    sub_3B5BC(v135, v136, v137);
  }
  *(_QWORD *)(v121 + 40) = *((_QWORD *)v122 + 5);
  *(_QWORD *)(v121 + 48) = *((_QWORD *)v122 + 6);
  v174 = (id *)(v121 + 56);
  v175 = (id *)(v122 + 56);
  v176 = v122[64];
  if (*(unsigned __int8 *)(v121 + 64) == 255)
  {
    if (v176 == 255)
    {
      v182 = *v175;
      *(_BYTE *)(v121 + 64) = v122[64];
      *v174 = v182;
    }
    else
    {
      v180 = *v175;
      sub_3D47C(*v175, v122[64]);
      *(_QWORD *)(v121 + 56) = v180;
      *(_BYTE *)(v121 + 64) = v176;
    }
  }
  else if (v176 == 255)
  {
    sub_3E470(v121 + 56);
    v181 = v122[64];
    *v174 = *v175;
    *(_BYTE *)(v121 + 64) = v181;
  }
  else
  {
    v177 = *v175;
    sub_3D47C(*v175, v122[64]);
    v178 = *(void **)(v121 + 56);
    *(_QWORD *)(v121 + 56) = v177;
    v179 = *(_BYTE *)(v121 + 64);
    *(_BYTE *)(v121 + 64) = v176;
    sub_3D624(v178, v179);
  }
  v183 = (id *)(v121 + 72);
  v184 = (id *)(v122 + 72);
  v185 = v122[80];
  if (*(unsigned __int8 *)(v121 + 80) == 255)
  {
    if (v185 == 255)
    {
      v191 = *v184;
      *(_BYTE *)(v121 + 80) = v122[80];
      *v183 = v191;
    }
    else
    {
      v189 = *v184;
      sub_3D47C(*v184, v122[80]);
      *(_QWORD *)(v121 + 72) = v189;
      *(_BYTE *)(v121 + 80) = v185;
    }
  }
  else if (v185 == 255)
  {
    sub_3E470(v121 + 72);
    v190 = v122[80];
    *v183 = *v184;
    *(_BYTE *)(v121 + 80) = v190;
  }
  else
  {
    v186 = *v184;
    sub_3D47C(*v184, v122[80]);
    v187 = *(void **)(v121 + 72);
    *(_QWORD *)(v121 + 72) = v186;
    v188 = *(_BYTE *)(v121 + 80);
    *(_BYTE *)(v121 + 80) = v185;
    sub_3D624(v187, v188);
  }
  v192 = (id *)(v121 + 88);
  v193 = (id *)(v122 + 88);
  v194 = v122[96];
  if (*(unsigned __int8 *)(v121 + 96) == 255)
  {
    if (v194 == 255)
    {
      v200 = *v193;
      *(_BYTE *)(v121 + 96) = v122[96];
      *v192 = v200;
    }
    else
    {
      v198 = *v193;
      sub_3D47C(*v193, v122[96]);
      *(_QWORD *)(v121 + 88) = v198;
      *(_BYTE *)(v121 + 96) = v194;
    }
  }
  else if (v194 == 255)
  {
    sub_3E470(v121 + 88);
    v199 = v122[96];
    *v192 = *v193;
    *(_BYTE *)(v121 + 96) = v199;
  }
  else
  {
    v195 = *v193;
    sub_3D47C(*v193, v122[96]);
    v196 = *(void **)(v121 + 88);
    *(_QWORD *)(v121 + 88) = v195;
    v197 = *(_BYTE *)(v121 + 96);
    *(_BYTE *)(v121 + 96) = v194;
    sub_3D624(v196, v197);
  }
  v201 = (id *)(v121 + 104);
  v202 = (id *)(v122 + 104);
  v203 = v122[112];
  if (*(unsigned __int8 *)(v121 + 112) == 255)
  {
    if (v203 == 255)
    {
      v209 = *v202;
      *(_BYTE *)(v121 + 112) = v122[112];
      *v201 = v209;
    }
    else
    {
      v207 = *v202;
      sub_3D47C(*v202, v122[112]);
      *(_QWORD *)(v121 + 104) = v207;
      *(_BYTE *)(v121 + 112) = v203;
    }
  }
  else if (v203 == 255)
  {
    sub_3E470(v121 + 104);
    v208 = v122[112];
    *v201 = *v202;
    *(_BYTE *)(v121 + 112) = v208;
  }
  else
  {
    v204 = *v202;
    sub_3D47C(*v202, v122[112]);
    v205 = *(void **)(v121 + 104);
    *(_QWORD *)(v121 + 104) = v204;
    v206 = *(_BYTE *)(v121 + 112);
    *(_BYTE *)(v121 + 112) = v203;
    sub_3D624(v205, v206);
  }
  v210 = (id *)(v121 + 120);
  v211 = (id *)(v122 + 120);
  v212 = v122[128];
  if (*(unsigned __int8 *)(v121 + 128) == 255)
  {
    if (v212 == 255)
    {
      v218 = *v211;
      *(_BYTE *)(v121 + 128) = v122[128];
      *v210 = v218;
    }
    else
    {
      v216 = *v211;
      sub_3D47C(*v211, v122[128]);
      *(_QWORD *)(v121 + 120) = v216;
      *(_BYTE *)(v121 + 128) = v212;
    }
  }
  else if (v212 == 255)
  {
    sub_3E470(v121 + 120);
    v217 = v122[128];
    *v210 = *v211;
    *(_BYTE *)(v121 + 128) = v217;
  }
  else
  {
    v213 = *v211;
    sub_3D47C(*v211, v122[128]);
    v214 = *(void **)(v121 + 120);
    *(_QWORD *)(v121 + 120) = v213;
    v215 = *(_BYTE *)(v121 + 128);
    *(_BYTE *)(v121 + 128) = v212;
    sub_3D624(v214, v215);
  }
  *(_BYTE *)(v121 + 129) = v122[129];
  v219 = v12[11];
  v220 = v121 + v219;
  v221 = &v122[v219];
  v222 = type metadata accessor for ArtworkCrop(0);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v222 - 8) + 24))(v220, v221, v222);
  v223 = v12[12];
  v224 = (_QWORD *)(v121 + v223);
  v225 = &v122[v223];
  *v224 = *(_QWORD *)v225;
  v224[1] = *((_QWORD *)v225 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(v121 + v12[13]) = v122[v12[13]];
  *(_BYTE *)(v121 + v12[14]) = v122[v12[14]];
  *(_BYTE *)(v121 + v12[15]) = v122[v12[15]];
  v226 = v12[16];
  v227 = (_QWORD *)(v121 + v226);
  v228 = &v122[v226];
  *v227 = *(_QWORD *)v228;
  v227[1] = *((_QWORD *)v228 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_135:
  v229 = a3[10];
  v230 = (char *)a1 + v229;
  v231 = (char *)a2 + v229;
  v232 = *(_DWORD *)v231;
  v230[4] = v231[4];
  *(_DWORD *)v230 = v232;
  v233 = a3[11];
  v234 = (char *)a1 + v233;
  v235 = (char *)a2 + v233;
  v236 = *(_QWORD *)v235;
  v234[8] = v235[8];
  *(_QWORD *)v234 = v236;
  v237 = a3[12];
  v238 = (_QWORD *)((char *)a1 + v237);
  v239 = (_QWORD *)((char *)a2 + v237);
  *v238 = *v239;
  v238[1] = v239[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_BYTE *)a1 + a3[13]) = *((_BYTE *)a2 + a3[13]);
  v240 = a3[14];
  v241 = (char *)a1 + v240;
  v242 = (char *)a2 + v240;
  v243 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BDA08);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v243 - 8) + 24))(v241, v242, v243);
  v244 = a3[15];
  v245 = (char *)a1 + v244;
  v246 = (char *)a2 + v244;
  v247 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BDA10);
  v248 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v247 - 8) + 24);
  v248(v245, v246, v247);
  v248((char *)a1 + a3[16], (char *)a2 + a3[16], v247);
  v248((char *)a1 + a3[17], (char *)a2 + a3[17], v247);
  v249 = a3[18];
  v250 = (char *)a1 + v249;
  v251 = (char *)a2 + v249;
  v252 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BDA18);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v252 - 8) + 24))(v250, v251, v252);
  return a1;
}

uint64_t initializeWithTake for ShowHero(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  int *v9;
  uint64_t v10;
  unsigned int (*v11)(_OWORD *, uint64_t, int *);
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  _OWORD *v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v6 = a3[8];
  v7 = (_OWORD *)(a1 + v6);
  v8 = (_OWORD *)(a2 + v6);
  v9 = (int *)type metadata accessor for ArtworkModel(0);
  v10 = *((_QWORD *)v9 - 1);
  v11 = *(unsigned int (**)(_OWORD *, uint64_t, int *))(v10 + 48);
  if (v11(v8, 1, v9))
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v13 = v8[1];
    *v7 = *v8;
    v7[1] = v13;
    *((_BYTE *)v7 + 32) = *((_BYTE *)v8 + 32);
    *(_OWORD *)((char *)v7 + 40) = *(_OWORD *)((char *)v8 + 40);
    *((_QWORD *)v7 + 7) = *((_QWORD *)v8 + 7);
    *((_BYTE *)v7 + 64) = *((_BYTE *)v8 + 64);
    *(_OWORD *)((char *)v7 + 113) = *(_OWORD *)((char *)v8 + 113);
    *(_OWORD *)((char *)v7 + 104) = *(_OWORD *)((char *)v8 + 104);
    *(_OWORD *)((char *)v7 + 88) = *(_OWORD *)((char *)v8 + 88);
    *(_OWORD *)((char *)v7 + 72) = *(_OWORD *)((char *)v8 + 72);
    *((_BYTE *)v7 + 129) = *((_BYTE *)v8 + 129);
    v14 = v9[11];
    v15 = (char *)v7 + v14;
    v16 = (char *)v8 + v14;
    v17 = type metadata accessor for ArtworkCrop(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v15, v16, v17);
    *(_OWORD *)((char *)v7 + v9[12]) = *(_OWORD *)((char *)v8 + v9[12]);
    *((_BYTE *)v7 + v9[13]) = *((_BYTE *)v8 + v9[13]);
    *((_BYTE *)v7 + v9[14]) = *((_BYTE *)v8 + v9[14]);
    *((_BYTE *)v7 + v9[15]) = *((_BYTE *)v8 + v9[15]);
    *(_OWORD *)((char *)v7 + v9[16]) = *(_OWORD *)((char *)v8 + v9[16]);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v10 + 56))(v7, 0, 1, v9);
  }
  v18 = a3[9];
  v19 = (_OWORD *)(a1 + v18);
  v20 = (_OWORD *)(a2 + v18);
  if (v11((_OWORD *)(a2 + v18), 1, v9))
  {
    v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    v22 = v20[1];
    *v19 = *v20;
    v19[1] = v22;
    *((_BYTE *)v19 + 32) = *((_BYTE *)v20 + 32);
    *(_OWORD *)((char *)v19 + 40) = *(_OWORD *)((char *)v20 + 40);
    *((_QWORD *)v19 + 7) = *((_QWORD *)v20 + 7);
    *((_BYTE *)v19 + 64) = *((_BYTE *)v20 + 64);
    *(_OWORD *)((char *)v19 + 113) = *(_OWORD *)((char *)v20 + 113);
    *(_OWORD *)((char *)v19 + 104) = *(_OWORD *)((char *)v20 + 104);
    *(_OWORD *)((char *)v19 + 88) = *(_OWORD *)((char *)v20 + 88);
    *(_OWORD *)((char *)v19 + 72) = *(_OWORD *)((char *)v20 + 72);
    *((_BYTE *)v19 + 129) = *((_BYTE *)v20 + 129);
    v23 = v9[11];
    v24 = (char *)v19 + v23;
    v25 = (char *)v20 + v23;
    v26 = type metadata accessor for ArtworkCrop(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v24, v25, v26);
    *(_OWORD *)((char *)v19 + v9[12]) = *(_OWORD *)((char *)v20 + v9[12]);
    *((_BYTE *)v19 + v9[13]) = *((_BYTE *)v20 + v9[13]);
    *((_BYTE *)v19 + v9[14]) = *((_BYTE *)v20 + v9[14]);
    *((_BYTE *)v19 + v9[15]) = *((_BYTE *)v20 + v9[15]);
    *(_OWORD *)((char *)v19 + v9[16]) = *(_OWORD *)((char *)v20 + v9[16]);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v10 + 56))(v19, 0, 1, v9);
  }
  v27 = a3[10];
  v28 = a3[11];
  v29 = a1 + v27;
  v30 = a2 + v27;
  *(_DWORD *)v29 = *(_DWORD *)v30;
  *(_BYTE *)(v29 + 4) = *(_BYTE *)(v30 + 4);
  v31 = a1 + v28;
  v32 = a2 + v28;
  *(_QWORD *)v31 = *(_QWORD *)v32;
  *(_BYTE *)(v31 + 8) = *(_BYTE *)(v32 + 8);
  v33 = a3[13];
  *(_OWORD *)(a1 + a3[12]) = *(_OWORD *)(a2 + a3[12]);
  *(_BYTE *)(a1 + v33) = *(_BYTE *)(a2 + v33);
  v34 = a3[14];
  v35 = a1 + v34;
  v36 = a2 + v34;
  v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BDA08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 32))(v35, v36, v37);
  v38 = a3[15];
  v39 = a1 + v38;
  v40 = a2 + v38;
  v41 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BDA10);
  v42 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 32);
  v42(v39, v40, v41);
  v42(a1 + a3[16], a2 + a3[16], v41);
  v42(a1 + a3[17], a2 + a3[17], v41);
  v43 = a3[18];
  v44 = a1 + v43;
  v45 = a2 + v43;
  v46 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BDA18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 32))(v44, v45, v46);
  return a1;
}

uint64_t assignWithTake for ShowHero(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, int *);
  int v14;
  int v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t, uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;
  _OWORD *v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _OWORD *v65;
  int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  int v71;
  int v72;
  void *v73;
  _QWORD *v74;
  int v75;
  int v76;
  void *v77;
  _QWORD *v78;
  int v79;
  int v80;
  void *v81;
  _QWORD *v82;
  int v83;
  int v84;
  void *v85;
  _QWORD *v86;
  int v87;
  int v88;
  void *v89;
  _QWORD *v90;
  int v91;
  int v92;
  void *v93;
  _QWORD *v94;
  int v95;
  int v96;
  void *v97;
  _QWORD *v98;
  int v99;
  int v100;
  void *v101;
  _QWORD *v102;
  int v103;
  int v104;
  void *v105;
  _QWORD *v106;
  int v107;
  int v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t v137;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  v7 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);

  v8 = a3[8];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = (int *)type metadata accessor for ArtworkModel(0);
  v12 = *((_QWORD *)v11 - 1);
  v13 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (v14)
  {
    if (!v15)
    {
      v16 = *(_OWORD *)(v10 + 16);
      *(_OWORD *)v9 = *(_OWORD *)v10;
      *(_OWORD *)(v9 + 16) = v16;
      *(_BYTE *)(v9 + 32) = *(_BYTE *)(v10 + 32);
      *(_OWORD *)(v9 + 40) = *(_OWORD *)(v10 + 40);
      *(_QWORD *)(v9 + 56) = *(_QWORD *)(v10 + 56);
      *(_BYTE *)(v9 + 64) = *(_BYTE *)(v10 + 64);
      *(_OWORD *)(v9 + 113) = *(_OWORD *)(v10 + 113);
      *(_OWORD *)(v9 + 104) = *(_OWORD *)(v10 + 104);
      *(_OWORD *)(v9 + 88) = *(_OWORD *)(v10 + 88);
      *(_OWORD *)(v9 + 72) = *(_OWORD *)(v10 + 72);
      *(_BYTE *)(v9 + 129) = *(_BYTE *)(v10 + 129);
      v17 = v11[11];
      v18 = v9 + v17;
      v19 = v10 + v17;
      v20 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v18, v19, v20);
      *(_OWORD *)(v9 + v11[12]) = *(_OWORD *)(v10 + v11[12]);
      *(_BYTE *)(v9 + v11[13]) = *(_BYTE *)(v10 + v11[13]);
      *(_BYTE *)(v9 + v11[14]) = *(_BYTE *)(v10 + v11[14]);
      *(_BYTE *)(v9 + v11[15]) = *(_BYTE *)(v10 + v11[15]);
      *(_OWORD *)(v9 + v11[16]) = *(_OWORD *)(v10 + v11[16]);
      (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v15)
  {
    sub_3E4A4(v9);
LABEL_6:
    v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
    memcpy((void *)v9, (const void *)v10, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    goto LABEL_7;
  }
  v58 = *(_QWORD *)(v10 + 8);
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_QWORD *)(v9 + 8) = v58;
  swift_bridgeObjectRelease();
  v59 = (_OWORD *)(v10 + 16);
  v60 = *(unsigned __int8 *)(v9 + 32);
  if (v60 != 255)
  {
    v61 = *(unsigned __int8 *)(v10 + 32);
    if (v61 != 255)
    {
      v62 = *(_QWORD *)(v9 + 16);
      v63 = *(_QWORD *)(v9 + 24);
      *(_OWORD *)(v9 + 16) = *v59;
      *(_BYTE *)(v9 + 32) = v61;
      sub_3B5BC(v62, v63, v60);
      goto LABEL_22;
    }
    sub_3E43C(v9 + 16);
  }
  *(_OWORD *)(v9 + 16) = *v59;
  *(_BYTE *)(v9 + 32) = *(_BYTE *)(v10 + 32);
LABEL_22:
  *(_OWORD *)(v9 + 40) = *(_OWORD *)(v10 + 40);
  v70 = (_QWORD *)(v10 + 56);
  v71 = *(unsigned __int8 *)(v9 + 64);
  if (v71 != 255)
  {
    v72 = *(unsigned __int8 *)(v10 + 64);
    if (v72 != 255)
    {
      v73 = *(void **)(v9 + 56);
      *(_QWORD *)(v9 + 56) = *v70;
      *(_BYTE *)(v9 + 64) = v72;
      sub_3D624(v73, v71);
      goto LABEL_32;
    }
    sub_3E470(v9 + 56);
  }
  *(_QWORD *)(v9 + 56) = *v70;
  *(_BYTE *)(v9 + 64) = *(_BYTE *)(v10 + 64);
LABEL_32:
  v78 = (_QWORD *)(v10 + 72);
  v79 = *(unsigned __int8 *)(v9 + 80);
  if (v79 != 255)
  {
    v80 = *(unsigned __int8 *)(v10 + 80);
    if (v80 != 255)
    {
      v81 = *(void **)(v9 + 72);
      *(_QWORD *)(v9 + 72) = *v78;
      *(_BYTE *)(v9 + 80) = v80;
      sub_3D624(v81, v79);
      goto LABEL_42;
    }
    sub_3E470(v9 + 72);
  }
  *(_QWORD *)(v9 + 72) = *v78;
  *(_BYTE *)(v9 + 80) = *(_BYTE *)(v10 + 80);
LABEL_42:
  v86 = (_QWORD *)(v10 + 88);
  v87 = *(unsigned __int8 *)(v9 + 96);
  if (v87 != 255)
  {
    v88 = *(unsigned __int8 *)(v10 + 96);
    if (v88 != 255)
    {
      v89 = *(void **)(v9 + 88);
      *(_QWORD *)(v9 + 88) = *v86;
      *(_BYTE *)(v9 + 96) = v88;
      sub_3D624(v89, v87);
      goto LABEL_52;
    }
    sub_3E470(v9 + 88);
  }
  *(_QWORD *)(v9 + 88) = *v86;
  *(_BYTE *)(v9 + 96) = *(_BYTE *)(v10 + 96);
LABEL_52:
  v94 = (_QWORD *)(v10 + 104);
  v95 = *(unsigned __int8 *)(v9 + 112);
  if (v95 != 255)
  {
    v96 = *(unsigned __int8 *)(v10 + 112);
    if (v96 != 255)
    {
      v97 = *(void **)(v9 + 104);
      *(_QWORD *)(v9 + 104) = *v94;
      *(_BYTE *)(v9 + 112) = v96;
      sub_3D624(v97, v95);
      goto LABEL_62;
    }
    sub_3E470(v9 + 104);
  }
  *(_QWORD *)(v9 + 104) = *v94;
  *(_BYTE *)(v9 + 112) = *(_BYTE *)(v10 + 112);
LABEL_62:
  v102 = (_QWORD *)(v10 + 120);
  v103 = *(unsigned __int8 *)(v9 + 128);
  if (v103 == 255)
  {
LABEL_71:
    *(_QWORD *)(v9 + 120) = *v102;
    *(_BYTE *)(v9 + 128) = *(_BYTE *)(v10 + 128);
    goto LABEL_72;
  }
  v104 = *(unsigned __int8 *)(v10 + 128);
  if (v104 == 255)
  {
    sub_3E470(v9 + 120);
    goto LABEL_71;
  }
  v105 = *(void **)(v9 + 120);
  *(_QWORD *)(v9 + 120) = *v102;
  *(_BYTE *)(v9 + 128) = v104;
  sub_3D624(v105, v103);
LABEL_72:
  *(_BYTE *)(v9 + 129) = *(_BYTE *)(v10 + 129);
  v110 = v11[11];
  v111 = v9 + v110;
  v112 = v10 + v110;
  v113 = type metadata accessor for ArtworkCrop(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v113 - 8) + 40))(v111, v112, v113);
  v114 = v11[12];
  v115 = (_QWORD *)(v9 + v114);
  v116 = (uint64_t *)(v10 + v114);
  v118 = *v116;
  v117 = v116[1];
  *v115 = v118;
  v115[1] = v117;
  swift_bridgeObjectRelease();
  *(_BYTE *)(v9 + v11[13]) = *(_BYTE *)(v10 + v11[13]);
  *(_BYTE *)(v9 + v11[14]) = *(_BYTE *)(v10 + v11[14]);
  *(_BYTE *)(v9 + v11[15]) = *(_BYTE *)(v10 + v11[15]);
  v119 = v11[16];
  v120 = (_QWORD *)(v9 + v119);
  v121 = (uint64_t *)(v10 + v119);
  v123 = *v121;
  v122 = v121[1];
  *v120 = v123;
  v120[1] = v122;
  swift_bridgeObjectRelease();
LABEL_7:
  v22 = a3[9];
  v23 = a1 + v22;
  v24 = a2 + v22;
  v25 = v13(a1 + v22, 1, v11);
  v26 = v13(v24, 1, v11);
  if (!v25)
  {
    if (v26)
    {
      sub_3E4A4(v23);
      goto LABEL_12;
    }
    v64 = *(_QWORD *)(v24 + 8);
    *(_QWORD *)v23 = *(_QWORD *)v24;
    *(_QWORD *)(v23 + 8) = v64;
    swift_bridgeObjectRelease();
    v65 = (_OWORD *)(v24 + 16);
    v66 = *(unsigned __int8 *)(v23 + 32);
    if (v66 != 255)
    {
      v67 = *(unsigned __int8 *)(v24 + 32);
      if (v67 != 255)
      {
        v68 = *(_QWORD *)(v23 + 16);
        v69 = *(_QWORD *)(v23 + 24);
        *(_OWORD *)(v23 + 16) = *v65;
        *(_BYTE *)(v23 + 32) = v67;
        sub_3B5BC(v68, v69, v66);
        goto LABEL_27;
      }
      sub_3E43C(v23 + 16);
    }
    *(_OWORD *)(v23 + 16) = *v65;
    *(_BYTE *)(v23 + 32) = *(_BYTE *)(v24 + 32);
LABEL_27:
    *(_OWORD *)(v23 + 40) = *(_OWORD *)(v24 + 40);
    v74 = (_QWORD *)(v24 + 56);
    v75 = *(unsigned __int8 *)(v23 + 64);
    if (v75 != 255)
    {
      v76 = *(unsigned __int8 *)(v24 + 64);
      if (v76 != 255)
      {
        v77 = *(void **)(v23 + 56);
        *(_QWORD *)(v23 + 56) = *v74;
        *(_BYTE *)(v23 + 64) = v76;
        sub_3D624(v77, v75);
        goto LABEL_37;
      }
      sub_3E470(v23 + 56);
    }
    *(_QWORD *)(v23 + 56) = *v74;
    *(_BYTE *)(v23 + 64) = *(_BYTE *)(v24 + 64);
LABEL_37:
    v82 = (_QWORD *)(v24 + 72);
    v83 = *(unsigned __int8 *)(v23 + 80);
    if (v83 != 255)
    {
      v84 = *(unsigned __int8 *)(v24 + 80);
      if (v84 != 255)
      {
        v85 = *(void **)(v23 + 72);
        *(_QWORD *)(v23 + 72) = *v82;
        *(_BYTE *)(v23 + 80) = v84;
        sub_3D624(v85, v83);
        goto LABEL_47;
      }
      sub_3E470(v23 + 72);
    }
    *(_QWORD *)(v23 + 72) = *v82;
    *(_BYTE *)(v23 + 80) = *(_BYTE *)(v24 + 80);
LABEL_47:
    v90 = (_QWORD *)(v24 + 88);
    v91 = *(unsigned __int8 *)(v23 + 96);
    if (v91 != 255)
    {
      v92 = *(unsigned __int8 *)(v24 + 96);
      if (v92 != 255)
      {
        v93 = *(void **)(v23 + 88);
        *(_QWORD *)(v23 + 88) = *v90;
        *(_BYTE *)(v23 + 96) = v92;
        sub_3D624(v93, v91);
        goto LABEL_57;
      }
      sub_3E470(v23 + 88);
    }
    *(_QWORD *)(v23 + 88) = *v90;
    *(_BYTE *)(v23 + 96) = *(_BYTE *)(v24 + 96);
LABEL_57:
    v98 = (_QWORD *)(v24 + 104);
    v99 = *(unsigned __int8 *)(v23 + 112);
    if (v99 != 255)
    {
      v100 = *(unsigned __int8 *)(v24 + 112);
      if (v100 != 255)
      {
        v101 = *(void **)(v23 + 104);
        *(_QWORD *)(v23 + 104) = *v98;
        *(_BYTE *)(v23 + 112) = v100;
        sub_3D624(v101, v99);
        goto LABEL_67;
      }
      sub_3E470(v23 + 104);
    }
    *(_QWORD *)(v23 + 104) = *v98;
    *(_BYTE *)(v23 + 112) = *(_BYTE *)(v24 + 112);
LABEL_67:
    v106 = (_QWORD *)(v24 + 120);
    v107 = *(unsigned __int8 *)(v23 + 128);
    if (v107 != 255)
    {
      v108 = *(unsigned __int8 *)(v24 + 128);
      if (v108 != 255)
      {
        v109 = *(void **)(v23 + 120);
        *(_QWORD *)(v23 + 120) = *v106;
        *(_BYTE *)(v23 + 128) = v108;
        sub_3D624(v109, v107);
LABEL_75:
        *(_BYTE *)(v23 + 129) = *(_BYTE *)(v24 + 129);
        v124 = v11[11];
        v125 = v23 + v124;
        v126 = v24 + v124;
        v127 = type metadata accessor for ArtworkCrop(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v127 - 8) + 40))(v125, v126, v127);
        v128 = v11[12];
        v129 = (_QWORD *)(v23 + v128);
        v130 = (uint64_t *)(v24 + v128);
        v132 = *v130;
        v131 = v130[1];
        *v129 = v132;
        v129[1] = v131;
        swift_bridgeObjectRelease();
        *(_BYTE *)(v23 + v11[13]) = *(_BYTE *)(v24 + v11[13]);
        *(_BYTE *)(v23 + v11[14]) = *(_BYTE *)(v24 + v11[14]);
        *(_BYTE *)(v23 + v11[15]) = *(_BYTE *)(v24 + v11[15]);
        v133 = v11[16];
        v134 = (_QWORD *)(v23 + v133);
        v135 = (uint64_t *)(v24 + v133);
        v137 = *v135;
        v136 = v135[1];
        *v134 = v137;
        v134[1] = v136;
        swift_bridgeObjectRelease();
        goto LABEL_13;
      }
      sub_3E470(v23 + 120);
    }
    *(_QWORD *)(v23 + 120) = *v106;
    *(_BYTE *)(v23 + 128) = *(_BYTE *)(v24 + 128);
    goto LABEL_75;
  }
  if (v26)
  {
LABEL_12:
    v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
    memcpy((void *)v23, (const void *)v24, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    goto LABEL_13;
  }
  v27 = *(_OWORD *)(v24 + 16);
  *(_OWORD *)v23 = *(_OWORD *)v24;
  *(_OWORD *)(v23 + 16) = v27;
  *(_BYTE *)(v23 + 32) = *(_BYTE *)(v24 + 32);
  *(_OWORD *)(v23 + 40) = *(_OWORD *)(v24 + 40);
  *(_QWORD *)(v23 + 56) = *(_QWORD *)(v24 + 56);
  *(_BYTE *)(v23 + 64) = *(_BYTE *)(v24 + 64);
  *(_OWORD *)(v23 + 113) = *(_OWORD *)(v24 + 113);
  *(_OWORD *)(v23 + 104) = *(_OWORD *)(v24 + 104);
  *(_OWORD *)(v23 + 88) = *(_OWORD *)(v24 + 88);
  *(_OWORD *)(v23 + 72) = *(_OWORD *)(v24 + 72);
  *(_BYTE *)(v23 + 129) = *(_BYTE *)(v24 + 129);
  v28 = v11[11];
  v29 = v23 + v28;
  v30 = v24 + v28;
  v31 = type metadata accessor for ArtworkCrop(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 32))(v29, v30, v31);
  *(_OWORD *)(v23 + v11[12]) = *(_OWORD *)(v24 + v11[12]);
  *(_BYTE *)(v23 + v11[13]) = *(_BYTE *)(v24 + v11[13]);
  *(_BYTE *)(v23 + v11[14]) = *(_BYTE *)(v24 + v11[14]);
  *(_BYTE *)(v23 + v11[15]) = *(_BYTE *)(v24 + v11[15]);
  *(_OWORD *)(v23 + v11[16]) = *(_OWORD *)(v24 + v11[16]);
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v12 + 56))(v23, 0, 1, v11);
LABEL_13:
  v33 = a3[10];
  v34 = a3[11];
  v35 = a1 + v33;
  v36 = a2 + v33;
  *(_DWORD *)v35 = *(_DWORD *)v36;
  *(_BYTE *)(v35 + 4) = *(_BYTE *)(v36 + 4);
  v37 = a1 + v34;
  v38 = a2 + v34;
  *(_QWORD *)v37 = *(_QWORD *)v38;
  *(_BYTE *)(v37 + 8) = *(_BYTE *)(v38 + 8);
  v39 = a3[12];
  v40 = (_QWORD *)(a1 + v39);
  v41 = (uint64_t *)(a2 + v39);
  v43 = *v41;
  v42 = v41[1];
  *v40 = v43;
  v40[1] = v42;
  swift_bridgeObjectRelease();
  v44 = a3[14];
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  v45 = a1 + v44;
  v46 = a2 + v44;
  v47 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BDA08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 40))(v45, v46, v47);
  v48 = a3[15];
  v49 = a1 + v48;
  v50 = a2 + v48;
  v51 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BDA10);
  v52 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 40);
  v52(v49, v50, v51);
  v52(a1 + a3[16], a2 + a3[16], v51);
  v52(a1 + a3[17], a2 + a3[17], v51);
  v53 = a3[18];
  v54 = a1 + v53;
  v55 = a2 + v53;
  v56 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BDA18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 40))(v54, v55, v56);
  return a1;
}

uint64_t getEnumTagSinglePayload for ShowHero(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1701C0);
}

uint64_t sub_1701C0(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = a3[8];
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B9EF0);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        v10 = v12;
        v11 = a3[14];
      }
      else
      {
        v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3C88);
        v9 = *(_QWORD *)(v13 - 8);
        if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
        {
          v10 = v13;
          v11 = a3[15];
        }
        else
        {
          v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BA270);
          v9 = *(_QWORD *)(v10 - 8);
          v11 = a3[18];
        }
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for ShowHero(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1702C4);
}

uint64_t sub_1702C4(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[8];
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B9EF0);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[14];
      }
      else
      {
        v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3C88);
        v9 = *(_QWORD *)(v13 - 8);
        if (*(_DWORD *)(v9 + 84) == a3)
        {
          v10 = v13;
          v11 = a4[15];
        }
        else
        {
          v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BA270);
          v9 = *(_QWORD *)(v10 - 8);
          v11 = a4[18];
        }
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void sub_1703B8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[4];
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v10[0] = &unk_2F9800;
  v10[1] = (char *)&value witness table for Builtin.Int64 + 64;
  v10[2] = &unk_2F9800;
  v10[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
  sub_5971C(319);
  if (v3 <= 0x3F)
  {
    v11 = *(_QWORD *)(v2 - 8) + 64;
    v12 = v11;
    v13 = &unk_2F9818;
    v14 = &unk_2F9830;
    v15 = &unk_2F9848;
    v16 = &unk_2F9860;
    sub_1704F8(319, &qword_3BDA88, &qword_3B0C50);
    if (v5 <= 0x3F)
    {
      v17 = *(_QWORD *)(v4 - 8) + 64;
      sub_1704F8(319, (unint64_t *)&qword_3BD2B0, &qword_3BD2B8);
      if (v7 <= 0x3F)
      {
        v18 = *(_QWORD *)(v6 - 8) + 64;
        v19 = v18;
        v20 = v18;
        sub_1704F8(319, (unint64_t *)&unk_3BDA90, (uint64_t *)&unk_3B8790);
        if (v9 <= 0x3F)
        {
          v21 = *(_QWORD *)(v8 - 8) + 64;
          swift_initStructMetadata(a1, 256, 15, v10, a1 + 16);
        }
      }
    }
  }
}

void sub_1704F8(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v5 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a3);
    v6 = type metadata accessor for LazyValueWrapper(a1, v5);
    if (!v7)
      atomic_store(v6, a2);
  }
}

unint64_t static ShowPageHeaderAndFooterShelvesIntent.kind.getter()
{
  return 0xD000000000000024;
}

BOOL static ShowPageHeaderAndFooterShelvesIntent.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return ((*(_QWORD *)a1 != *(_QWORD *)a2) | ((*(_BYTE *)(a1 + 8) ^ *(_BYTE *)(a2 + 8)) | (*(_BYTE *)(a2 + 9) ^ *(_BYTE *)(a1 + 9))) & 1) == 0;
}

void sub_17059C(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000024;
  a1[1] = 0x80000000002F9870;
}

uint64_t sub_1705BC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1E0538(*a1, *a2);
}

Swift::Int sub_1705C8()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7);
  v2 = 0xE900000000000065;
  v3 = 0x6863614370696B73;
  if (v1 != 1)
  {
    v3 = 0xD000000000000010;
    v2 = 0x8000000000309830;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 0x64496D616461;
  if (v1)
    v5 = v2;
  else
    v5 = 0xE600000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_17066C(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0xE900000000000065;
  v3 = 0x6863614370696B73;
  if (*v1 != 1)
  {
    v3 = 0xD000000000000010;
    v2 = 0x8000000000309830;
  }
  if (*v1)
    v4 = v3;
  else
    v4 = 0x64496D616461;
  if (*v1)
    v5 = v2;
  else
    v5 = 0xE600000000000000;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_1706EC()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7);
  v2 = 0xE900000000000065;
  v3 = 0x6863614370696B73;
  if (v1 != 1)
  {
    v3 = 0xD000000000000010;
    v2 = 0x8000000000309830;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 0x64496D616461;
  if (v1)
    v5 = v2;
  else
    v5 = 0xE600000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

unint64_t sub_17078C@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_170DEC(*a1);
  *a2 = result;
  return result;
}

void sub_1707B8(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE600000000000000;
  v4 = 0xE900000000000065;
  v5 = 0x6863614370696B73;
  if (v2 != 1)
  {
    v5 = 0xD000000000000010;
    v4 = 0x8000000000309830;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x64496D616461;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_17081C()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0x6863614370696B73;
  if (*v0 != 1)
    v1 = 0xD000000000000010;
  if (*v0)
    return v1;
  else
    return 0x64496D616461;
}

unint64_t sub_17087C@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_170DEC(a1);
  *a2 = result;
  return result;
}

uint64_t sub_1708A0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_170A54();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1708C8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_170A54();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ShowPageHeaderAndFooterShelvesIntent.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  unsigned int v16;
  char v17;
  _BYTE v18[2];
  uint64_t v19;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BDAF8);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v9 = *((unsigned __int8 *)v1 + 8);
  HIDWORD(v15) = *((unsigned __int8 *)v1 + 9);
  v16 = v9;
  v10 = a1[3];
  v11 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v10);
  v12 = sub_170A54();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ShowPageHeaderAndFooterShelvesIntent.CodingKeys, &type metadata for ShowPageHeaderAndFooterShelvesIntent.CodingKeys, v12, v10, v11);
  v19 = v8;
  v18[1] = 0;
  sub_13E9C();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v19);
  if (!v2)
  {
    v13 = HIDWORD(v15);
    v18[0] = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v16, v18, v4);
    v17 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v13, &v17, v4);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_170A54()
{
  unint64_t result;

  result = qword_3BDB00;
  if (!qword_3BDB00)
  {
    result = swift_getWitnessTable(&unk_2F9AD8);
    atomic_store(result, (unint64_t *)&qword_3BDB00);
  }
  return result;
}

unint64_t sub_170A9C()
{
  unint64_t result;

  result = qword_3BDB08;
  if (!qword_3BDB08)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ShowPageHeaderAndFooterShelvesIntent);
    atomic_store(result, (unint64_t *)&qword_3BDB08);
  }
  return result;
}

unint64_t sub_170AE8()
{
  unint64_t result;

  result = qword_3BDB10;
  if (!qword_3BDB10)
  {
    type metadata accessor for HeaderFooterShelves();
    result = swift_getWitnessTable(&protocol conformance descriptor for HeaderFooterShelves);
    atomic_store(result, (unint64_t *)&qword_3BDB10);
  }
  return result;
}

uint64_t sub_170B30(_QWORD *a1)
{
  return ShowPageHeaderAndFooterShelvesIntent.encode(to:)(a1);
}

uint64_t sub_170B44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_170E34();
  return CustomJSValueConvertible<>.jsRepresentation(in:)(a1, a2, a3, v6);
}

uint64_t getEnumTagSinglePayload for ShowPageHeaderAndFooterShelvesIntent(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 10))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ShowPageHeaderAndFooterShelvesIntent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_WORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 10) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 10) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for ShowPageHeaderAndFooterShelvesIntent()
{
  return &type metadata for ShowPageHeaderAndFooterShelvesIntent;
}

uint64_t storeEnumTagSinglePayload for ShowPageHeaderAndFooterShelvesIntent.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_170C94 + 4 * byte_2F9885[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_170CC8 + 4 * byte_2F9880[v4]))();
}

uint64_t sub_170CC8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_170CD0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x170CD8);
  return result;
}

uint64_t sub_170CE4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x170CECLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_170CF0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_170CF8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ShowPageHeaderAndFooterShelvesIntent.CodingKeys()
{
  return &type metadata for ShowPageHeaderAndFooterShelvesIntent.CodingKeys;
}

unint64_t sub_170D18()
{
  unint64_t result;

  result = qword_3BDB18;
  if (!qword_3BDB18)
  {
    result = swift_getWitnessTable(&unk_2F9AB0);
    atomic_store(result, (unint64_t *)&qword_3BDB18);
  }
  return result;
}

unint64_t sub_170D60()
{
  unint64_t result;

  result = qword_3BDB20;
  if (!qword_3BDB20)
  {
    result = swift_getWitnessTable(&unk_2F99E8);
    atomic_store(result, (unint64_t *)&qword_3BDB20);
  }
  return result;
}

unint64_t sub_170DA8()
{
  unint64_t result;

  result = qword_3BDB28;
  if (!qword_3BDB28)
  {
    result = swift_getWitnessTable(&unk_2F9A10);
    atomic_store(result, (unint64_t *)&qword_3BDB28);
  }
  return result;
}

unint64_t sub_170DEC(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_374768, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

unint64_t sub_170E34()
{
  unint64_t result;

  result = qword_3BDB30;
  if (!qword_3BDB30)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ShowPageHeaderAndFooterShelvesIntent);
    atomic_store(result, (unint64_t *)&qword_3BDB30);
  }
  return result;
}

ShelfKit::ActionMenuBuilder __swiftcall ActionMenuBuilder.init()()
{
  ShelfKit::ActionMenuBuilder *v0;
  ShelfKit::ActionMenuBuilder *v1;
  ShelfKit::ActionMenuBuilder result;

  v1 = v0;
  result.templates._rawValue = (void *)sub_288454((uint64_t)_swiftEmptyArrayStorage);
  v1->templates._rawValue = result.templates._rawValue;
  return result;
}

_QWORD *ActionMenuBuilder.buildMenuElements(for:asPartOf:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *result;
  uint64_t v12;
  char *v13;
  _QWORD v14[2];
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;

  v17 = type metadata accessor for ActionMenu(0);
  __chkstk_darwin(v17);
  v5 = type metadata accessor for ActionMenu.Item(0);
  __chkstk_darwin(v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for ActionMenu.Child(0);
  __chkstk_darwin(v22);
  v10 = (char *)v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *v2;
  result = _swiftEmptyArrayStorage;
  v23 = _swiftEmptyArrayStorage;
  if (*(_QWORD *)(a1 + 16))
  {
    v12 = a1 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    v21 = *(_QWORD *)(v8 + 72);
    v14[1] = a1;
    swift_bridgeObjectRetain(a1);
    v15 = xmmword_2EF430;
    v18 = v7;
    v19 = v10;
    v16 = a2;
    sub_171BF4(v12, (uint64_t)v10);
    v13 = (char *)&loc_17112C + *((int *)qword_1715E0 + swift_getEnumCaseMultiPayload(v10, v22));
    __asm { BR              X9 }
  }
  return result;
}

UIMenu ActionMenuBuilder.buildMenu(_:asPartOf:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  objc_class *v10;
  unsigned __int8 v11;
  Swift::String v12;
  Swift::String_optional v13;
  _QWORD *preferredElementSize;
  Swift::OpaquePointer v16;
  UIImage_optional v17;

  sub_327F8(0, (unint64_t *)&qword_3B9410, UIMenu_ptr);
  v4 = a1[2];
  v5 = (void *)a1[3];
  v6 = a1[4];
  v7 = (void *)a1[5];
  v8 = type metadata accessor for ActionMenu(0);
  v9 = (uint64_t)a1 + *(int *)(v8 + 28);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10 = (objc_class *)_s8ShelfKit11SystemGlyphC4load7artworkSo7UIImageCSg18PodcastsFoundation12ArtworkModelVSg_tFZ_0(v9);
  v11 = String._bridgeToObjectiveC()();
  preferredElementSize = ActionMenuBuilder.buildMenuElements(for:asPartOf:)(*(_QWORD *)((char *)a1 + *(int *)(v8 + 32)), a2);
  v12._countAndFlagsBits = v4;
  v12._object = v5;
  v13.value._countAndFlagsBits = v6;
  v13.value._object = v7;
  v17.value.super.isa = v10;
  v17.is_nil = v11;
  return UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v12, v13, v17, 0, 0xFFFFFFFFFFFFFFFFLL, (UIMenuElementSize)preferredElementSize, v16);
}

uint64_t ActionMenuBuilder.addTemplate(for:content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;

  v5 = v4;
  v10 = swift_allocObject(&unk_384748, 32, 7);
  *(_QWORD *)(v10 + 16) = a3;
  *(_QWORD *)(v10 + 24) = a4;
  swift_bridgeObjectRetain();
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v5);
  v13 = *v5;
  *v5 = 0x8000000000000000;
  sub_1D9B4((uint64_t)sub_172410, v10, a1, a2, isUniquelyReferenced_nonNull_native);
  *v5 = v13;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t ActionMenuBuilder.addingTemplate(for:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t *v5;
  uint64_t v11;
  uint64_t v12;
  char isUniquelyReferenced_nonNull_native;

  v11 = *v5;
  v12 = swift_allocObject(&unk_384770, 32, 7);
  *(_QWORD *)(v12 + 16) = a3;
  *(_QWORD *)(v12 + 24) = a4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v11);
  *a5 = 0x8000000000000000;
  sub_1D9B4((uint64_t)sub_1724B0, v12, a1, a2, isUniquelyReferenced_nonNull_native);
  *a5 = v11;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t ActionMenuBuilder.buildMenuElement(_:asPartOf:)(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  int v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  NSString v12;
  _BOOL8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSString v18;
  _BOOL8 v19;
  __int128 v21;
  uint64_t v22;
  _QWORD v23[5];

  v4 = (int *)type metadata accessor for ActionMenu.Item(0);
  v5 = 0;
  v6 = *(unsigned __int8 *)(a1 + v4[7]);
  if (v6 == 2)
    goto LABEL_7;
  if ((v6 & 1) != 0)
  {
    swift_bridgeObjectRelease(0xEB00000000657669);
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6C65636E6163, 0xE600000000000000, 0x7463757274736564, 0xEB00000000657669, 0);
    swift_bridgeObjectRelease(0xE600000000000000);
    if ((v7 & 1) == 0)
    {
      v5 = 0;
      goto LABEL_7;
    }
  }
  v5 = 2;
LABEL_7:
  sub_267BC(a1 + v4[9], (uint64_t)&v21, &qword_3B0C50);
  if (v22)
  {
    sub_F4D8(&v21, (uint64_t)v23);
    v8 = *(_QWORD *)(a1 + 16);
    v9 = *(_QWORD *)(a1 + 24);
    v10 = a1 + v4[6];
    swift_bridgeObjectRetain(v9);
    v11 = _s8ShelfKit11SystemGlyphC4load7artworkSo7UIImageCSg18PodcastsFoundation12ArtworkModelVSg_tFZ_0(v10);
    v12 = String._bridgeToObjectiveC()();
    v13 = (*(_BYTE *)(a1 + v4[8]) & 1) == 0;
    sub_327F8(0, (unint64_t *)&qword_3B89D8, UIAction_ptr);
    sub_150C8((uint64_t)v23, (uint64_t)&v21);
    v14 = swift_allocObject(&unk_384798, 64, 7);
    *(_QWORD *)(v14 + 16) = a2;
    sub_F4D8(&v21, v14 + 24);
    swift_retain(a2);
    v15 = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(v8, v9, 0, 0, v11, 0, v12, 0, 0, v5, v13, sub_172468, v14);
    __swift_destroy_boxed_opaque_existential_1(v23);
  }
  else
  {
    sub_1459C((uint64_t)&v21, &qword_3B0C50);
    v16 = *(_QWORD *)(a1 + 16);
    v17 = *(_QWORD *)(a1 + 24);
    swift_bridgeObjectRetain(v17);
    v18 = String._bridgeToObjectiveC()();
    v19 = (*(_BYTE *)(a1 + v4[8]) & 1) == 0;
    sub_327F8(0, (unint64_t *)&qword_3B89D8, UIAction_ptr);
    return UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(v16, v17, 0, 0, 0, 0, v18, 0, 0, v5 | 1, v19, FindOrCreateEpisodeOfferContentIDsIntentsIntentImplementation.init(), 0);
  }
  return v15;
}

Class ActionMenuBuilder.buildSubmenu(_:asPartOf:)(_QWORD *a1, Swift::OpaquePointer children)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  objc_class *v10;
  unsigned __int8 v11;
  Swift::String v12;
  Swift::String_optional v13;
  _QWORD *preferredElementSize;
  _BOOL8 identifier;
  UIImage_optional v18;

  v3 = a1[2];
  v4 = a1[3];
  v5 = HIBYTE(v4) & 0xF;
  if ((v4 & 0x2000000000000000) == 0)
    v5 = v3 & 0xFFFFFFFFFFFFLL;
  identifier = v5 == 0;
  sub_327F8(0, (unint64_t *)&qword_3B9410, UIMenu_ptr);
  v6 = a1[4];
  v7 = (void *)a1[5];
  v8 = type metadata accessor for ActionMenu(0);
  v9 = (uint64_t)a1 + *(int *)(v8 + 28);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10 = (objc_class *)_s8ShelfKit11SystemGlyphC4load7artworkSo7UIImageCSg18PodcastsFoundation12ArtworkModelVSg_tFZ_0(v9);
  v11 = String._bridgeToObjectiveC()();
  preferredElementSize = ActionMenuBuilder.buildMenuElements(for:asPartOf:)(*(_QWORD *)((char *)a1 + *(int *)(v8 + 32)), (uint64_t)children._rawValue);
  v12._countAndFlagsBits = v3;
  v12._object = (void *)v4;
  v13.value._countAndFlagsBits = v6;
  v13.value._object = v7;
  v18.value.super.isa = v10;
  v18.is_nil = v11;
  return UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v12, v13, v18, (UIMenuIdentifier_optional)identifier, 0xFFFFFFFFFFFFFFFFLL, (UIMenuElementSize)preferredElementSize, children).super.super.isa;
}

uint64_t sub_171BF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ActionMenu.Child(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_171C38(void (*a1)(uint64_t), uint64_t a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v19;
  uint64_t v20;

  v9 = type metadata accessor for ActionMenu.Item(0);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  a4(v10);
  v13 = (void *)ActionMenuBuilder.buildMenuElement(_:asPartOf:)((uint64_t)v12, a6);
  sub_145D8((uint64_t)v12, type metadata accessor for ActionMenu.Item);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BC590);
  v15 = swift_allocObject(v14, 40, 7);
  *(_OWORD *)(v15 + 16) = xmmword_2EF430;
  *(_QWORD *)(v15 + 32) = v13;
  v20 = v15;
  specialized Array._endMutation()(v15);
  v16 = v20;
  v17 = v13;
  a1(v16);

  return swift_bridgeObjectRelease(v16);
}

uint64_t sub_171D3C(uint64_t a1, void *aBlock)
{
  uint64_t v2;
  void (*v3)(void (*)(uint64_t), uint64_t);
  void *v4;
  uint64_t v5;

  v3 = *(void (**)(void (*)(uint64_t), uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v4 = _Block_copy(aBlock);
  v5 = swift_allocObject(&unk_3847E8, 24, 7);
  *(_QWORD *)(v5 + 16) = v4;
  swift_retain(v2);
  v3(sub_1724A8, v5);
  swift_release(v2);
  return swift_release(v5);
}

void sub_171DAC(uint64_t a1, uint64_t a2)
{
  Class isa;

  sub_327F8(0, (unint64_t *)&unk_3BC580, UIMenuElement_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, Class))(a2 + 16))(a2, isa);

}

uint64_t sub_171E10(void (*a1)(uint64_t), uint64_t a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  objc_class *v17;
  unsigned __int8 v18;
  Swift::String v19;
  Swift::String_optional v20;
  Class isa;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  objc_class *v25;
  UIMenuElementSize v27;
  Swift::OpaquePointer v28;
  UIMenuIdentifier_optional v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t);
  uint64_t v34;
  UIImage_optional v35;

  v30 = a3;
  v31 = a6;
  v32 = a2;
  v33 = a1;
  v7 = type metadata accessor for ActionMenu(0);
  v8 = __chkstk_darwin(v7);
  v10 = (UIMenuIdentifier *)((char *)&v29.value - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  a4(v8);
  v11 = v10[2];
  v12 = v10[3];
  v13 = HIBYTE(v12) & 0xF;
  if ((v12 & 0x2000000000000000) == 0)
    v13 = v11 & 0xFFFFFFFFFFFFLL;
  v29.value = (UIMenuIdentifier)(v13 == 0);
  sub_327F8(0, (unint64_t *)&qword_3B9410, UIMenu_ptr);
  v14 = v10[4];
  v15 = (void *)v10[5];
  v16 = (uint64_t)v10 + *(int *)(v7 + 28);
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v12);
  v17 = (objc_class *)_s8ShelfKit11SystemGlyphC4load7artworkSo7UIImageCSg18PodcastsFoundation12ArtworkModelVSg_tFZ_0(v16);
  v18 = String._bridgeToObjectiveC()();
  v34 = v30;
  v27 = ActionMenuBuilder.buildMenuElements(for:asPartOf:)(*(_QWORD *)((char *)v10 + *(int *)(v7 + 32)), v31);
  v19._countAndFlagsBits = v11;
  v19._object = (void *)v12;
  v20.value._countAndFlagsBits = v14;
  v20.value._object = v15;
  v35.value.super.isa = v17;
  v35.is_nil = v18;
  isa = UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v19, v20, v35, v29, 0xFFFFFFFFFFFFFFFFLL, v27, v28).super.super.isa;
  sub_145D8((uint64_t)v10, type metadata accessor for ActionMenu);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BC590);
  v23 = swift_allocObject(v22, 40, 7);
  *(_OWORD *)(v23 + 16) = xmmword_2EF430;
  *(_QWORD *)(v23 + 32) = isa;
  v34 = v23;
  specialized Array._endMutation()(v23);
  v24 = v34;
  v25 = isa;
  v33(v24);

  return swift_bridgeObjectRelease(v24);
}

uint64_t sub_171FC4()
{
  return objectdestroyTm_4((void (*)(_QWORD))&_swift_bridgeObjectRelease);
}

uint64_t sub_171FD0(void (*a1)(void))
{
  uint64_t *v1;
  _QWORD *v3;

  v3 = sub_1720AC(v1[3], v1[4], v1[5]);
  a1();
  return swift_bridgeObjectRelease(v3);
}

uint64_t block_copy_helper_16(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t block_destroy_helper_16(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_17203C()
{
  return objectdestroyTm_4((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_172048(void (*a1)(uint64_t), uint64_t a2)
{
  uint64_t v2;

  return sub_171E10(a1, a2, *(_QWORD *)(v2 + 16), *(void (**)(uint64_t))(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40));
}

uint64_t sub_172054()
{
  return objectdestroyTm_4((void (*)(_QWORD))&_swift_release);
}

uint64_t objectdestroyTm_4(void (*a1)(_QWORD))
{
  _QWORD *v1;

  swift_bridgeObjectRelease(v1[2]);
  a1(v1[4]);
  swift_release(v1[5]);
  return swift_deallocObject(v1, 48, 7);
}

uint64_t sub_1720A0(void (*a1)(uint64_t), uint64_t a2)
{
  uint64_t v2;

  return sub_171C38(a1, a2, *(_QWORD *)(v2 + 16), *(void (**)(uint64_t))(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40));
}

_QWORD *sub_1720AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  void (*v19)(uint64_t *__return_ptr, _QWORD *);
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  Swift::String v25;
  Swift::String v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[4];

  v7 = type metadata accessor for LogMessage.StringInterpolation(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for OSLogger(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *v3;
  if (*(_QWORD *)(v15 + 16))
  {
    swift_bridgeObjectRetain(a2);
    v16 = sub_2993C(a1, a2);
    if ((v17 & 1) != 0)
    {
      v18 = *(_QWORD *)(v15 + 56) + 16 * v16;
      v19 = *(void (**)(uint64_t *__return_ptr, _QWORD *))v18;
      v20 = *(_QWORD *)(v18 + 8);
      swift_retain(v20);
      swift_bridgeObjectRelease(a2);
      v29[0] = a3;
      v19(&v28, v29);
      swift_release(v20);
      return (_QWORD *)v28;
    }
    v12 = swift_bridgeObjectRelease(a2);
  }
  static OSLogger.bugs.getter(v12);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0B10);
  v23 = type metadata accessor for LogMessage(0);
  v24 = swift_allocObject(v22, ((*(unsigned __int8 *)(*(_QWORD *)(v23 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v23 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v23 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v23 - 8) + 80) | 7);
  *(_OWORD *)(v24 + 16) = xmmword_2EA0D0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(32, 1);
  v25._object = (void *)0x8000000000311C10;
  v25._countAndFlagsBits = 0xD000000000000020;
  LogMessage.StringInterpolation.appendLiteral(_:)(v25);
  v29[3] = &type metadata for ActionMenu.ID;
  v29[0] = a1;
  v29[1] = a2;
  swift_bridgeObjectRetain(a2);
  LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)(v29);
  sub_1459C((uint64_t)v29, (uint64_t *)&unk_3BC540);
  v26._countAndFlagsBits = 0;
  v26._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v26);
  LogMessage.init(stringInterpolation:)(v9);
  Logger.warning(_:)(v24, v10, &protocol witness table for OSLogger);
  swift_bridgeObjectRelease(v24);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  return _swiftEmptyArrayStorage;
}

_QWORD *sub_1722D4(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[6];
  _OWORD v14[2];

  type metadata accessor for ActionRunnerOptions(0);
  v6 = swift_retain(a2);
  v7 = BaseObjectGraph.__allocating_init(_:)(v6);
  v8 = objc_msgSend(a1, "sender");
  if (v8)
  {
    v9 = v8;
    _bridgeAnyObjectToAny(_:)(v14);
    swift_unknownObjectRelease(v9);
  }
  else
  {
    memset(v14, 0, sizeof(v14));
  }
  sub_267BC((uint64_t)v14, (uint64_t)v13, (uint64_t *)&unk_3BC540);
  v13[4] = 0;
  v10 = _s8ShelfKit19ActionRunnerOptionsC04withC6OriginyACXDAA0cG0VSgF_0((uint64_t)v13);
  sub_1459C((uint64_t)v13, &qword_3B18E8);
  swift_release(v7);
  sub_1459C((uint64_t)v14, (uint64_t *)&unk_3BC540);
  sub_150C8(a3, (uint64_t)v13);
  v13[5] = v10;
  swift_retain(v10);
  v11 = ActionPerformer.callAsFunction()();
  swift_release(v10);
  swift_release(v11);
  return sub_23740(v13);
}

uint64_t sub_1723EC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_172410@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(v2 + 16))(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_17243C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  __swift_destroy_boxed_opaque_existential_1((_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 64, 7);
}

_QWORD *sub_172468(void *a1)
{
  uint64_t v1;

  return sub_1722D4(a1, *(_QWORD *)(v1 + 16), v1 + 24);
}

ValueMetadata *type metadata accessor for ActionMenuBuilder()
{
  return &type metadata for ActionMenuBuilder;
}

uint64_t sub_172484()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_1724A8(uint64_t a1)
{
  uint64_t v1;

  sub_171DAC(a1, *(_QWORD *)(v1 + 16));
}

id static NSParagraphStyle.listItem(withIndentation:)(double a1)
{
  id v2;
  id v3;
  Class isa;
  id v5;

  v2 = objc_msgSend(objc_allocWithZone((Class)NSMutableParagraphStyle), "init");
  objc_msgSend(v2, "setFirstLineHeadIndent:", 0.0);
  objc_msgSend(v2, "setHeadIndent:", a1);
  objc_msgSend(v2, "setDefaultTabInterval:", a1);
  sub_288198((uint64_t)_swiftEmptyArrayStorage);
  v3 = objc_allocWithZone((Class)NSTextTab);
  type metadata accessor for OptionKey(0);
  sub_1725E0();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v5 = objc_msgSend(v3, "initWithTextAlignment:location:options:", 4, isa, a1);

  objc_msgSend(v2, "addTabStop:", v5);
  return v2;
}

unint64_t sub_1725E0()
{
  unint64_t result;

  result = qword_3B06A8;
  if (!qword_3B06A8)
  {
    type metadata accessor for OptionKey(255);
    result = swift_getWitnessTable(&unk_2E94A4);
    atomic_store(result, (unint64_t *)&qword_3B06A8);
  }
  return result;
}

BOOL NSParagraphStyle.isListItem.getter()
{
  void *v0;
  double v1;
  double v2;
  double v3;
  id v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  objc_msgSend(v0, "firstLineHeadIndent");
  if (v1 != 0.0)
    return 0;
  objc_msgSend(v0, "headIndent");
  if (v2 <= 0.0)
    return 0;
  objc_msgSend(v0, "defaultTabInterval");
  if (v3 <= 0.0)
    return 0;
  v4 = objc_msgSend(v0, "tabStops");
  v5 = sub_172714();
  v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, v5);

  if ((unint64_t)v6 >> 62)
  {
    if (v6 < 0)
      v9 = v6;
    else
      v9 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter(v9);
    swift_bridgeObjectRelease();
  }
  else
  {
    v7 = *(_QWORD *)((char *)&dword_10 + (v6 & 0xFFFFFFFFFFFFF8));
  }
  swift_bridgeObjectRelease();
  return v7 != 0;
}

unint64_t sub_172714()
{
  unint64_t result;
  uint64_t v1;

  result = qword_3BDB38;
  if (!qword_3BDB38)
  {
    v1 = objc_opt_self(NSTextTab);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_3BDB38);
  }
  return result;
}

uint64_t JSONEncoder.init(jsonContext:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v2 = type metadata accessor for JSONContext(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = dispatch thunk of JSONEncoder.__allocating_init()(v4);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, a1, v2);
  swift_retain(v7);
  v8 = Dictionary<>.init(jsonContext:)(v6);
  dispatch thunk of JSONEncoder.userInfo.setter(v8);
  swift_release(v7);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  return v7;
}

uint64_t Image.alignSymbolImages(alignment:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  *a4 = Image.init(systemName:)(0x656C63726963, 0xE600000000000000);
  a4[1] = a3;
  a4[2] = a1;
  a4[3] = a2;
  return swift_retain(a3);
}

unint64_t sub_172858()
{
  unint64_t result;

  result = qword_3BDB40;
  if (!qword_3BDB40)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_3BDB48);
    sub_1728C4();
    sub_172974();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>);
    atomic_store(result, (unint64_t *)&qword_3BDB40);
  }
  return result;
}

unint64_t sub_1728C4()
{
  unint64_t result;

  result = qword_3BDB50;
  if (!qword_3BDB50)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_3BDB58);
    sub_172930();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>);
    atomic_store(result, (unint64_t *)&qword_3BDB50);
  }
  return result;
}

unint64_t sub_172930()
{
  unint64_t result;

  result = qword_3BDB60;
  if (!qword_3BDB60)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for _HiddenModifier);
    atomic_store(result, (unint64_t *)&qword_3BDB60);
  }
  return result;
}

unint64_t sub_172974()
{
  unint64_t result;

  result = qword_3BDB68;
  if (!qword_3BDB68)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_3BDB70);
    result = swift_getWitnessTable(&protocol conformance descriptor for _OverlayModifier<A>);
    atomic_store(result, (unint64_t *)&qword_3BDB68);
  }
  return result;
}

uint64_t LibraryPodcastOfferAction.__allocating_init(podcast:displaySuccessHUD:)(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v5;

  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  v5 = sub_172C78(a1, a2);
  swift_release(a1);
  return v5;
}

uint64_t LibraryPodcastOfferAction.podcastUuid.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit25LibraryPodcastOfferAction_podcastUuid);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit25LibraryPodcastOfferAction_podcastUuid + 8));
  return v1;
}

uint64_t LibraryPodcastOfferAction.init(podcast:displaySuccessHUD:)(uint64_t a1, int a2)
{
  uint64_t v3;

  v3 = sub_172C78(a1, a2);
  swift_release(a1);
  return v3;
}

void LibraryPodcastOfferAction.init(deserializing:using:)()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000033, 0x800000000030A500, "ShelfKit/LibraryPodcastOfferAction.swift", 40, 2, 36, 0);
  __break(1u);
}

void LibraryPodcastOfferAction.init(podcastOffer:adamId:displaySuccessHUD:)()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000045, 0x8000000000311C70, "ShelfKit/LibraryPodcastOfferAction.swift", 40, 2, 40, 0);
  __break(1u);
}

uint64_t sub_172B30()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit25LibraryPodcastOfferAction_podcastUuid + 8));
}

uint64_t LibraryPodcastOfferAction.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics;
  v2 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_23B00(v0 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics);
  sub_A952C(v0 + OBJC_IVAR____TtC8ShelfKit18PodcastOfferAction_podcastOffer);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t LibraryPodcastOfferAction.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics;
  v2 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_23B00(v0 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics);
  sub_A952C(v0 + OBJC_IVAR____TtC8ShelfKit18PodcastOfferAction_podcastOffer);
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_172C78(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  char *v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  int v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  int v56;
  uint64_t v57;
  int v58;
  char *v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v3 = v2;
  v58 = a2;
  v65 = type metadata accessor for UUID(0);
  v63 = *(_QWORD *)(v65 - 8);
  __chkstk_darwin(v65);
  v61 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = type metadata accessor for ActionMetrics(0);
  v62 = *(_QWORD *)(v64 - 8);
  __chkstk_darwin(v64);
  v60 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v7);
  v59 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
  __chkstk_darwin(v9);
  v11 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (int *)type metadata accessor for ShowOffer(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(a1 + 40);
  v16 = (_QWORD *)(v2 + OBJC_IVAR____TtC8ShelfKit25LibraryPodcastOfferAction_podcastUuid);
  *v16 = *(_QWORD *)(a1 + 32);
  v16[1] = v15;
  v17 = *(_QWORD *)(a1 + 16);
  v18 = *(unsigned __int8 *)(a1 + 24);
  swift_bridgeObjectRetain();
  v19 = v17;
  v56 = v18;
  if (v18 == 1)
    v19 = static AdamID.empty.getter(v17);
  v20 = *(_QWORD *)(a1 + 56);
  v57 = v17;
  v54 = v19;
  v55 = v20;
  if (v20)
  {
    v21 = *(_QWORD *)(a1 + 48);
    v52 = v20;
    v53 = v21;
  }
  else
  {
    v52 = 0xE000000000000000;
    v53 = 0;
  }
  sub_267BC(a1 + OBJC_IVAR____TtC8ShelfKit7Podcast_artwork, (uint64_t)v11, &qword_3BEB70);
  v22 = *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC8ShelfKit7Podcast_isExplicit);
  v23 = *(_QWORD *)(a1 + 96);
  v50 = *(_QWORD *)(a1 + 88);
  if (v22)
    v24 = 1;
  else
    v24 = 2;
  v51 = v24;
  v25 = &v14[v12[13]];
  v26 = type metadata accessor for URL(0);
  v27 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56);
  v27(v25, 1, 1, v26);
  v29 = *(_QWORD *)(a1 + 104);
  v28 = *(_QWORD *)(a1 + 112);
  v27(&v14[v12[16]], 1, 1, v26);
  sub_267BC(a1 + OBJC_IVAR____TtC8ShelfKit7Podcast_storeUrl, (uint64_t)&v14[v12[17]], &qword_3B4370);
  v30 = v53;
  *(_QWORD *)v14 = v54;
  *((_QWORD *)v14 + 1) = v30;
  *((_QWORD *)v14 + 2) = v52;
  v14[24] = 0;
  sub_15BD4((uint64_t)v11, (uint64_t)&v14[v12[7]], &qword_3BEB70);
  v31 = &v14[v12[8]];
  *(_QWORD *)v31 = v50;
  *((_QWORD *)v31 + 1) = v23;
  v32 = &v14[v12[9]];
  *(_QWORD *)v32 = 0;
  *((_QWORD *)v32 + 1) = 0;
  v14[v12[10]] = v51;
  v33 = &v14[v12[11]];
  *(_QWORD *)v33 = 0;
  *((_QWORD *)v33 + 1) = 0;
  v34 = &v14[v12[12]];
  *(_QWORD *)v34 = 0;
  *((_QWORD *)v34 + 1) = 0;
  v35 = &v14[v12[14]];
  *(_QWORD *)v35 = v29;
  *((_QWORD *)v35 + 1) = v28;
  v36 = &v14[v12[15]];
  *(_QWORD *)v36 = 0;
  *((_QWORD *)v36 + 1) = 0;
  v14[v12[18]] = 2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v37 = swift_bridgeObjectRetain();
  v38 = v57;
  if (v56)
    v38 = static AdamID.empty.getter(v37);
  sub_A8FA0((uint64_t)v14, v3 + OBJC_IVAR____TtC8ShelfKit18PodcastOfferAction_podcastOffer);
  v39 = v3 + OBJC_IVAR____TtC8ShelfKit18PodcastOfferAction_adamId;
  *(_QWORD *)v39 = v38;
  *(_BYTE *)(v39 + 8) = 0;
  *(_BYTE *)(v3 + OBJC_IVAR____TtC8ShelfKit18PodcastOfferAction_displaySuccessHUD) = v58 & 1;
  v40 = type metadata accessor for ImpressionMetrics(0);
  v41 = (uint64_t)v59;
  v42 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v59, 1, 1, v40);
  v43 = v60;
  v44 = static ActionMetrics.notInstrumented.getter(v42);
  v45 = v61;
  UUID.init()(v44);
  v46 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
  v48 = v47;
  (*(void (**)(char *, uint64_t))(v63 + 8))(v45, v65);
  *(_QWORD *)(v3 + 16) = v46;
  *(_QWORD *)(v3 + 24) = v48;
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 48) = 48;
  (*(void (**)(uint64_t, char *, uint64_t))(v62 + 32))(v3 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v43, v64);
  sub_15BD4(v41, v3 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics, (uint64_t *)&unk_3B8790);
  sub_A952C((uint64_t)v14);
  return v3;
}

uint64_t sub_1730CC()
{
  return type metadata accessor for LibraryPodcastOfferAction(0);
}

uint64_t type metadata accessor for LibraryPodcastOfferAction(uint64_t a1)
{
  uint64_t result;

  result = qword_3BDBA0;
  if (!qword_3BDBA0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LibraryPodcastOfferAction);
  return result;
}

uint64_t sub_173110(uint64_t a1)
{
  void *v2;

  v2 = &unk_2F9BB0;
  return swift_updateClassMetadata2(a1, 256, 1, &v2, a1 + 216);
}

uint64_t method lookup function for LibraryPodcastOfferAction(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for LibraryPodcastOfferAction);
}

uint64_t Podcast.adamId.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

void *Podcast.summary.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 80);
  v2 = v1;
  return v1;
}

uint64_t Podcast.provider.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 104);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 112));
  return v1;
}

uint64_t Podcast.artwork.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_267BC(v1 + OBJC_IVAR____TtC8ShelfKit7Podcast_artwork, a1, &qword_3BEB70);
}

uint64_t Podcast.uberArtwork.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_267BC(v1 + OBJC_IVAR____TtC8ShelfKit7Podcast_uberArtwork, a1, &qword_3BEB70);
}

uint64_t Podcast.logoArtwork.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_267BC(v1 + OBJC_IVAR____TtC8ShelfKit7Podcast_logoArtwork, a1, &qword_3BEB70);
}

uint64_t Podcast.paidSubscriptionActive.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8ShelfKit7Podcast_paidSubscriptionActive);
}

uint64_t Podcast.storeUrl.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_267BC(v1 + OBJC_IVAR____TtC8ShelfKit7Podcast_storeUrl, a1, &qword_3B4370);
}

uint64_t Podcast.webpageUrl.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_267BC(v1 + OBJC_IVAR____TtC8ShelfKit7Podcast_webpageUrl, a1, &qword_3B4370);
}

uint64_t Podcast.isExplicit.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8ShelfKit7Podcast_isExplicit);
}

uint64_t Podcast.__allocating_init(uuid:adamId:title:addedDate:summary:author:provider:newEpisodeCount:artwork:uberArtwork:logoArtwork:paidSubscriptionActive:storeUrl:webpageUrl:isExplicit:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char a22)
{
  uint64_t v22;
  char v24;
  char v25;
  uint64_t v26;

  v24 = a4 & 1;
  v25 = a8 & 1;
  v26 = swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
  Podcast.init(uuid:adamId:title:addedDate:summary:author:provider:newEpisodeCount:artwork:uberArtwork:logoArtwork:paidSubscriptionActive:storeUrl:webpageUrl:isExplicit:)(a1, a2, a3, v24, a5, a6, a7, v25, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22);
  return v26;
}

uint64_t Podcast.init(uuid:adamId:title:addedDate:summary:author:provider:newEpisodeCount:artwork:uberArtwork:logoArtwork:paidSubscriptionActive:storeUrl:webpageUrl:isExplicit:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char a22)
{
  uint64_t v22;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;

  v25 = a12;
  *(_QWORD *)(v22 + 32) = a1;
  *(_QWORD *)(v22 + 40) = a2;
  if ((a4 & 1) != 0)
  {
    v30 = a6;
    v29 = a5;
    v26 = static AdamID.empty.getter(a1);
    a5 = v29;
    v25 = a12;
    a6 = v30;
    a3 = v26;
  }
  *(_QWORD *)(v22 + 16) = a3;
  *(_BYTE *)(v22 + 24) = 0;
  *(_QWORD *)(v22 + 48) = a5;
  *(_QWORD *)(v22 + 56) = a6;
  *(_QWORD *)(v22 + 64) = a7;
  *(_BYTE *)(v22 + 72) = a8 & 1;
  *(_QWORD *)(v22 + 80) = a9;
  *(_QWORD *)(v22 + 88) = a10;
  *(_QWORD *)(v22 + 96) = a11;
  *(_QWORD *)(v22 + 104) = v25;
  *(_QWORD *)(v22 + 112) = a13;
  *(_QWORD *)(v22 + 120) = a14;
  v27 = v22 + OBJC_IVAR____TtC8ShelfKit7Podcast_artwork;
  *(_QWORD *)(v22 + 128) = a15;
  sub_15BD4(a16, v27, &qword_3BEB70);
  sub_15BD4(a17, v22 + OBJC_IVAR____TtC8ShelfKit7Podcast_uberArtwork, &qword_3BEB70);
  sub_15BD4(a18, v22 + OBJC_IVAR____TtC8ShelfKit7Podcast_logoArtwork, &qword_3BEB70);
  *(_BYTE *)(v22 + OBJC_IVAR____TtC8ShelfKit7Podcast_paidSubscriptionActive) = a19 & 1;
  sub_15BD4(a20, v22 + OBJC_IVAR____TtC8ShelfKit7Podcast_storeUrl, &qword_3B4370);
  sub_15BD4(a21, v22 + OBJC_IVAR____TtC8ShelfKit7Podcast_webpageUrl, &qword_3B4370);
  *(_BYTE *)(v22 + OBJC_IVAR____TtC8ShelfKit7Podcast_isExplicit) = a22 & 1;
  return v22;
}

uint64_t Podcast.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1459C(v0 + OBJC_IVAR____TtC8ShelfKit7Podcast_artwork, &qword_3BEB70);
  sub_1459C(v0 + OBJC_IVAR____TtC8ShelfKit7Podcast_uberArtwork, &qword_3BEB70);
  sub_1459C(v0 + OBJC_IVAR____TtC8ShelfKit7Podcast_logoArtwork, &qword_3BEB70);
  sub_1459C(v0 + OBJC_IVAR____TtC8ShelfKit7Podcast_storeUrl, &qword_3B4370);
  sub_1459C(v0 + OBJC_IVAR____TtC8ShelfKit7Podcast_webpageUrl, &qword_3B4370);
  return v0;
}

uint64_t Podcast.__deallocating_deinit()
{
  return sub_8F284((void (*)(void))Podcast.deinit);
}

void static DarkModeOptions.placardForRemovePlayedEpisodes.getter(_QWORD *a1@<X8>)
{
  *a1 = 8;
}

void static DarkModeOptions.placardForSavedEpisodes.getter(_QWORD *a1@<X8>)
{
  *a1 = 16;
}

uint64_t PodcastDetail.shelfUniqueId.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  _BYTE v4[24];

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC8ShelfKit13PodcastDetail_shelfUniqueId);
  swift_beginAccess(v0 + OBJC_IVAR____TtC8ShelfKit13PodcastDetail_shelfUniqueId, v4, 0, 0);
  v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

uint64_t PodcastDetail.shelfUniqueId.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  _BYTE v8[24];

  v5 = (_QWORD *)(v2 + OBJC_IVAR____TtC8ShelfKit13PodcastDetail_shelfUniqueId);
  swift_beginAccess(v5, v8, 1, 0);
  v6 = v5[1];
  *v5 = a1;
  v5[1] = a2;
  return swift_bridgeObjectRelease(v6);
}

uint64_t (*PodcastDetail.shelfUniqueId.modify(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC8ShelfKit13PodcastDetail_shelfUniqueId, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t PodcastDetail.podcastState.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8ShelfKit13PodcastDetail_podcastState);
}

void PodcastDetail.darkModeOptions.getter(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit13PodcastDetail_darkModeOptions);
}

uint64_t PodcastDetail.episodeToPlay.getter()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit13PodcastDetail_episodeToPlay));
}

uint64_t PodcastDetail.seasonToShow.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit13PodcastDetail_seasonToShow);
}

uint64_t PodcastDetail.isSerialShowTypeInFeed.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8ShelfKit13PodcastDetail_isSerialShowTypeInFeed);
}

uint64_t PodcastDetail.episodeUserFilter.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit13PodcastDetail_episodeUserFilter);
  sub_173794(v1, *(_BYTE *)(v0 + OBJC_IVAR____TtC8ShelfKit13PodcastDetail_episodeUserFilter + 8));
  return v1;
}

uint64_t sub_173794(uint64_t result, char a2)
{
  if (a2 != -1)
    return sub_43568(result, a2);
  return result;
}

uint64_t PodcastDetail.hasEverPlayed.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;
  _BYTE v3[24];

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC8ShelfKit13PodcastDetail_hasEverPlayed);
  swift_beginAccess(v0 + OBJC_IVAR____TtC8ShelfKit13PodcastDetail_hasEverPlayed, v3, 0, 0);
  return *v1;
}

uint64_t PodcastDetail.hasEverPlayed.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;
  _BYTE v5[24];

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC8ShelfKit13PodcastDetail_hasEverPlayed);
  result = swift_beginAccess(v3, v5, 1, 0);
  *v3 = a1;
  return result;
}

uint64_t (*PodcastDetail.hasEverPlayed.modify(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC8ShelfKit13PodcastDetail_hasEverPlayed, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t PodcastDetail.hidesPlayedEpisodes.getter()
{
  uint64_t v0;
  unsigned int *v1;
  _BYTE v3[24];

  v1 = (unsigned int *)(v0 + OBJC_IVAR____TtC8ShelfKit13PodcastDetail_hidesPlayedEpisodes);
  swift_beginAccess(v0 + OBJC_IVAR____TtC8ShelfKit13PodcastDetail_hidesPlayedEpisodes, v3, 0, 0);
  return *v1;
}

uint64_t PodcastDetail.hidesPlayedEpisodes.setter(int a1)
{
  uint64_t v1;
  _DWORD *v3;
  uint64_t result;
  _BYTE v5[24];

  v3 = (_DWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit13PodcastDetail_hidesPlayedEpisodes);
  result = swift_beginAccess(v3, v5, 1, 0);
  *v3 = a1;
  return result;
}

uint64_t (*PodcastDetail.hidesPlayedEpisodes.modify(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC8ShelfKit13PodcastDetail_hidesPlayedEpisodes, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t PodcastDetail.sort.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8ShelfKit13PodcastDetail_sort);
}

uint64_t PodcastDetail.episodes.getter()
{
  uint64_t v0;
  _QWORD *v1;
  _BYTE v3[24];

  v1 = (_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit13PodcastDetail_episodes);
  swift_beginAccess(v0 + OBJC_IVAR____TtC8ShelfKit13PodcastDetail_episodes, v3, 0, 0);
  return swift_bridgeObjectRetain(*v1);
}

uint64_t PodcastDetail.episodes.setter(uint64_t a1)
{
  return sub_173B70(a1, &OBJC_IVAR____TtC8ShelfKit13PodcastDetail_episodes, (uint64_t (*)(uint64_t))&_swift_bridgeObjectRelease);
}

uint64_t (*PodcastDetail.episodes.modify(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC8ShelfKit13PodcastDetail_episodes, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t PodcastDetail.feedUrl.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_267BC(v1 + OBJC_IVAR____TtC8ShelfKit13PodcastDetail_feedUrl, a1, &qword_3B4370);
}

uint64_t PodcastDetail.offerAction.getter()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit13PodcastDetail_offerAction));
}

uint64_t PodcastDetail.displayType.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;
  _BYTE v5[24];

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC8ShelfKit13PodcastDetail_displayType);
  result = swift_beginAccess(v3, v5, 0, 0);
  *a1 = *v3;
  return result;
}

uint64_t PodcastDetail.displayType.setter(char *a1)
{
  uint64_t v1;
  char v2;
  _BYTE *v3;
  uint64_t result;
  _BYTE v5[24];

  v2 = *a1;
  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC8ShelfKit13PodcastDetail_displayType);
  result = swift_beginAccess(v1 + OBJC_IVAR____TtC8ShelfKit13PodcastDetail_displayType, v5, 1, 0);
  *v3 = v2;
  return result;
}

uint64_t (*PodcastDetail.displayType.modify(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC8ShelfKit13PodcastDetail_displayType, a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t PodcastDetail.channel.getter()
{
  uint64_t v0;
  _QWORD *v1;
  _BYTE v3[24];

  v1 = (_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit13PodcastDetail_channel);
  swift_beginAccess(v0 + OBJC_IVAR____TtC8ShelfKit13PodcastDetail_channel, v3, 0, 0);
  return swift_retain(*v1);
}

uint64_t PodcastDetail.channel.setter(uint64_t a1)
{
  return sub_173B70(a1, &OBJC_IVAR____TtC8ShelfKit13PodcastDetail_channel, (uint64_t (*)(uint64_t))&_swift_release);
}

uint64_t sub_173B70(uint64_t a1, _QWORD *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v3;
  uint64_t *v6;
  uint64_t v7;
  _BYTE v9[24];

  v6 = (uint64_t *)(v3 + *a2);
  swift_beginAccess(v6, v9, 1, 0);
  v7 = *v6;
  *v6 = a1;
  return a3(v7);
}

uint64_t (*PodcastDetail.channel.modify(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC8ShelfKit13PodcastDetail_channel, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t PodcastDetail.impressionMetrics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_267BC(v1 + OBJC_IVAR____TtC8ShelfKit13PodcastDetail_impressionMetrics, a1, (uint64_t *)&unk_3B8790);
}

ShelfKit::PodcastDetail::DisplayType_optional __swiftcall PodcastDetail.DisplayType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  ShelfKit::PodcastDetail::DisplayType_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_3747D0, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 3;
  if (v5 < 3)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t PodcastDetail.DisplayType.rawValue.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 1684627824;
  if (*v0 != 1)
    v1 = 0x646972627968;
  if (*v0)
    return v1;
  else
    return 1701147238;
}

uint64_t sub_173CD8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1E2924(*a1, *a2);
}

Swift::Int sub_173CE4()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7);
  v2 = 0xE400000000000000;
  v3 = 1684627824;
  if (v1 != 1)
  {
    v3 = 0x646972627968;
    v2 = 0xE600000000000000;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 1701147238;
  if (v1)
    v5 = v2;
  else
    v5 = 0xE400000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_173D70(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0xE400000000000000;
  v3 = 1684627824;
  if (*v1 != 1)
  {
    v3 = 0x646972627968;
    v2 = 0xE600000000000000;
  }
  if (*v1)
    v4 = v3;
  else
    v4 = 1701147238;
  if (*v1)
    v5 = v2;
  else
    v5 = 0xE400000000000000;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_173DD8()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7);
  v2 = 0xE400000000000000;
  v3 = 1684627824;
  if (v1 != 1)
  {
    v3 = 0x646972627968;
    v2 = 0xE600000000000000;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 1701147238;
  if (v1)
    v5 = v2;
  else
    v5 = 0xE400000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

ShelfKit::PodcastDetail::DisplayType_optional sub_173E60(Swift::String *a1)
{
  return PodcastDetail.DisplayType.init(rawValue:)(*a1);
}

void sub_173E6C(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE400000000000000;
  v4 = 0xE400000000000000;
  v5 = 1684627824;
  if (v2 != 1)
  {
    v5 = 0x646972627968;
    v4 = 0xE600000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 1701147238;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t PodcastDetail.__allocating_init(uuid:adamId:title:podcastState:addedDate:summary:author:provider:newEpisodeCount:artwork:uberArtwork:logoArtwork:paidSubscriptionActive:episodeToPlay:seasonToShow:isSerialShowTypeInFeed:episodeUserFilter:episodes:storeUrl:webpageUrl:feedUrl:offerAction:darkModeOptions:hasEverPlayed:hidesPlayedEpisodes:sort:displayType:channel:isExplicit:impressionMetrics:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, char a9, __int128 a10, __int128 a11, __int128 a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unsigned __int8 a17, uint64_t a18, uint64_t a19, char a20,unsigned __int8 a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t *a29,unsigned __int8 a30,int a31,unsigned __int8 a32,char *a33,uint64_t a34,unsigned __int8 a35,uint64_t a36)
{
  uint64_t v36;
  uint64_t v37;
  char v39;

  v39 = a4 & 1;
  swift_allocObject(v36, *(unsigned int *)(v36 + 48), *(unsigned __int16 *)(v36 + 52));
  v37 = sub_174D1C(a1, a2, a3, v39, a5, a6, a7, a8, a9 & 1, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
          a20 & 1,
          a21,
          a22,
          a23,
          a24,
          a25,
          a26,
          a27,
          a28,
          a29,
          a30,
          a31,
          a32,
          a33,
          a34,
          a35,
          a36);
  swift_release(a34);
  swift_release(a28);
  sub_1752E0(a22, a23);
  swift_release(a18);
  return v37;
}

uint64_t PodcastDetail.init(uuid:adamId:title:podcastState:addedDate:summary:author:provider:newEpisodeCount:artwork:uberArtwork:logoArtwork:paidSubscriptionActive:episodeToPlay:seasonToShow:isSerialShowTypeInFeed:episodeUserFilter:episodes:storeUrl:webpageUrl:feedUrl:offerAction:darkModeOptions:hasEverPlayed:hidesPlayedEpisodes:sort:displayType:channel:isExplicit:impressionMetrics:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, char a9, __int128 a10, __int128 a11, __int128 a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unsigned __int8 a17, uint64_t a18, uint64_t a19, char a20,unsigned __int8 a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t *a29,unsigned __int8 a30,int a31,unsigned __int8 a32,char *a33,uint64_t a34,unsigned __int8 a35,uint64_t a36)
{
  uint64_t v36;

  v36 = sub_174D1C(a1, a2, a3, a4 & 1, a5, a6, a7, a8, a9 & 1, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
          a20 & 1,
          a21,
          a22,
          a23,
          a24,
          a25,
          a26,
          a27,
          a28,
          a29,
          a30,
          a31,
          a32,
          a33,
          a34,
          a35,
          a36);
  swift_release(a34);
  swift_release(a28);
  sub_1752E0(a22, a23);
  swift_release(a18);
  return v36;
}

uint64_t PodcastDetail.lockup.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t inited;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(char *, char *, uint64_t);
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  unsigned __int8 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  char *v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  void (*v94)(uint64_t, char *, uint64_t);
  void (*v95)(char *, uint64_t);
  uint64_t (*v96)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char v105;
  _OWORD v106[2];
  uint64_t v107;
  _BYTE v108[64];

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
  __chkstk_darwin(v2);
  v92 = (uint64_t)&v86 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0CC8);
  __chkstk_darwin(v4);
  v93 = (uint64_t)&v86 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v86 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = type metadata accessor for ActionMetrics(0);
  v98 = *(_QWORD *)(v102 - 8);
  __chkstk_darwin(v102);
  v90 = (char *)&v86 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v104 = (char *)&v86 - v12;
  v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v13);
  v103 = (uint64_t)&v86 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BDCB0);
  inited = swift_initStackObject(v15, v108);
  *(_OWORD *)(inited + 16) = xmmword_2EA080;
  v18 = *(_QWORD *)(v1 + 88);
  v17 = *(_QWORD *)(v1 + 96);
  *(_QWORD *)(inited + 32) = v18;
  *(_QWORD *)(inited + 40) = v17;
  v20 = *(_QWORD *)(v1 + 104);
  v19 = *(_QWORD *)(v1 + 112);
  *(_QWORD *)(inited + 48) = v20;
  *(_QWORD *)(inited + 56) = v19;
  v99 = v6;
  if (v17)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n(v17, 2);
    v21 = sub_10644(0, 1, 1, _swiftEmptyArrayStorage);
    v23 = v21[2];
    v22 = v21[3];
    v24 = v21;
    if (v23 >= v22 >> 1)
      v24 = sub_10644((_QWORD *)(v22 > 1), v23 + 1, 1, v21);
    v24[2] = v23 + 1;
    v25 = v24;
    v26 = &v24[2 * v23];
    v26[4] = v18;
    v26[5] = v17;
    v6 = v99;
    if (v19)
      goto LABEL_5;
LABEL_11:
    v91 = v25;
    goto LABEL_12;
  }
  swift_bridgeObjectRetain();
  v25 = _swiftEmptyArrayStorage;
  if (!v19)
    goto LABEL_11;
LABEL_5:
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native(v25) & 1) == 0)
    v25 = sub_10644(0, v25[2] + 1, 1, v25);
  v28 = v25[2];
  v27 = v25[3];
  if (v28 >= v27 >> 1)
    v25 = sub_10644((_QWORD *)(v27 > 1), v28 + 1, 1, v25);
  v25[2] = v28 + 1;
  v91 = v25;
  v29 = &v25[2 * v28];
  v29[4] = v20;
  v29[5] = v19;
  v6 = v99;
LABEL_12:
  swift_release(inited);
  v30 = *(_QWORD *)(v1 + 32);
  v31 = *(_QWORD *)(v1 + 40);
  v32 = type metadata accessor for LibraryFollowAction(0);
  v33 = swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
  v34 = (uint64_t *)(v33 + OBJC_IVAR____TtC8ShelfKit19LibraryFollowAction_podcastUuid);
  v100 = v30;
  *v34 = v30;
  v34[1] = v31;
  *(_BYTE *)(v33 + OBJC_IVAR____TtC8ShelfKit19LibraryFollowAction_displaySuccessHUD) = 1;
  v35 = type metadata accessor for ImpressionMetrics(0);
  v36 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56);
  v37 = v103;
  v97 = v35;
  v96 = v36;
  ((void (*)(uint64_t, uint64_t, uint64_t))v36)(v103, 1, 1);
  v38 = swift_bridgeObjectRetain();
  v39 = v104;
  v40 = static ActionMetrics.notInstrumented.getter(v38);
  UUID.init()(v40);
  v41 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
  v43 = v42;
  v95 = *(void (**)(char *, uint64_t))(v7 + 8);
  v95(v9, v6);
  *(_QWORD *)(v33 + 16) = v41;
  *(_QWORD *)(v33 + 24) = v43;
  *(_QWORD *)(v33 + 32) = 0;
  *(_QWORD *)(v33 + 40) = 0;
  *(_BYTE *)(v33 + 48) = 32;
  v44 = v98;
  v94 = *(void (**)(uint64_t, char *, uint64_t))(v98 + 32);
  v94(v33 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v39, v102);
  sub_15BD4(v37, v33 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics, (uint64_t *)&unk_3B8790);
  v45 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit13PodcastDetail_episodeToPlay);
  v101 = v31;
  if (v45)
  {
    v46 = *(_QWORD *)(v45 + 64);
    v47 = *(_QWORD *)(v45 + 72);
    v87 = *(_QWORD *)(v45 + 16);
    v48 = *(_BYTE *)(v45 + 24);
    v89 = *(_QWORD *)(v45 + 32);
    v88 = *(unsigned __int8 *)(v45 + 40);
    v49 = type metadata accessor for EpisodeListSettings(0);
    v50 = v93;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56))(v93, 1, 1, v49);
    swift_retain();
    v51 = swift_bridgeObjectRetain();
    static ActionMetrics.notInstrumented.getter(v51);
    v52 = type metadata accessor for LibraryPlayAction(0);
    v53 = v44;
    v54 = swift_allocObject(v52, *(unsigned int *)(v52 + 48), *(unsigned __int16 *)(v52 + 52));
    *(_BYTE *)(v54 + OBJC_IVAR____TtC8ShelfKit17LibraryPlayAction_sharedContent) = 0;
    v55 = (_QWORD *)(v54 + OBJC_IVAR____TtC8ShelfKit17LibraryPlayAction_episodeUuid);
    *v55 = v46;
    v55[1] = v47;
    v37 = v103;
    v56 = v54 + OBJC_IVAR____TtC8ShelfKit17LibraryPlayAction_episodeAdamId;
    *(_QWORD *)v56 = v87;
    *(_BYTE *)(v56 + 8) = v48;
    v57 = v54 + OBJC_IVAR____TtC8ShelfKit17LibraryPlayAction_channelAdamId;
    *(_QWORD *)v57 = v89;
    *(_BYTE *)(v57 + 8) = v88;
    sub_267BC(v50, v54 + OBJC_IVAR____TtC8ShelfKit17LibraryPlayAction_settings, &qword_3B0CC8);
    *(_BYTE *)(v54 + OBJC_IVAR____TtC8ShelfKit17LibraryPlayAction_showPlayerIfPlaying) = 2;
    *(_BYTE *)(v54 + OBJC_IVAR____TtC8ShelfKit17LibraryPlayAction_forcePlay) = 2;
    v58 = v54 + OBJC_IVAR____TtC8ShelfKit17LibraryPlayAction_timestamp;
    *(_QWORD *)v58 = 0;
    *(_BYTE *)(v58 + 8) = 1;
    v59 = *(void (**)(char *, char *, uint64_t))(v53 + 16);
    v60 = v90;
    v89 = v1;
    v61 = v102;
    v59(v90, v104, v102);
    v62 = v96(v37, 1, 1, v97);
    UUID.init()(v62);
    v63 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
    v65 = v64;
    v6 = v99;
    v95(v9, v99);
    *(_QWORD *)(v54 + 16) = v63;
    *(_QWORD *)(v54 + 24) = v65;
    v39 = v104;
    *(_QWORD *)(v54 + 32) = 0;
    *(_QWORD *)(v54 + 40) = 0;
    *(_BYTE *)(v54 + 48) = 32;
    v66 = v61;
    v1 = v89;
    v94(v54 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v60, v66);
    sub_15BD4(v37, v54 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics, (uint64_t *)&unk_3B8790);
    (*(void (**)(char *, uint64_t))(v98 + 8))(v39, v66);
    v31 = v101;
    sub_1459C(v93, &qword_3B0CC8);
    swift_release(v45);
  }
  else
  {
    v54 = 0;
  }
  v67 = type metadata accessor for LibraryPodcastContextAction(0);
  v68 = swift_allocObject(v67, *(unsigned int *)(v67 + 48), *(unsigned __int16 *)(v67 + 52));
  v69 = (_QWORD *)(v68 + OBJC_IVAR____TtC8ShelfKit27LibraryPodcastContextAction_podcastUuid);
  *v69 = v100;
  v69[1] = v31;
  v70 = v68 + OBJC_IVAR____TtC8ShelfKit27LibraryPodcastContextAction_groupedEpisodeListType;
  *(_OWORD *)(v70 + 32) = 0u;
  *(_OWORD *)(v70 + 48) = 0u;
  *(_OWORD *)v70 = 0u;
  *(_OWORD *)(v70 + 16) = 0u;
  *(_BYTE *)(v70 + 64) = -1;
  v96(v37, 1, 1, v97);
  v71 = swift_bridgeObjectRetain();
  v72 = static ActionMetrics.notInstrumented.getter(v71);
  UUID.init()(v72);
  v73 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
  v74 = v39;
  v76 = v75;
  v95(v9, v6);
  *(_QWORD *)(v68 + 16) = v73;
  *(_QWORD *)(v68 + 24) = v76;
  *(_QWORD *)(v68 + 32) = 0;
  *(_QWORD *)(v68 + 40) = 0;
  *(_BYTE *)(v68 + 48) = 32;
  v94(v68 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v74, v102);
  sub_15BD4(v37, v68 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics, (uint64_t *)&unk_3B8790);
  if ((*(_BYTE *)(v1 + 24) & 1) != 0)
  {
    v77 = swift_bridgeObjectRetain();
    v104 = (char *)static AdamID.empty.getter(v77);
  }
  else
  {
    v104 = *(char **)(v1 + 16);
    swift_bridgeObjectRetain();
  }
  v78 = v92;
  sub_267BC(v1 + OBJC_IVAR____TtC8ShelfKit7Podcast_artwork, v92, &qword_3BEB70);
  v79 = *(_QWORD *)(v1 + 48);
  v80 = *(void **)(v1 + 56);
  v102 = *(_QWORD *)(v1 + 64);
  LODWORD(v99) = *(unsigned __int8 *)(v1 + 72);
  v107 = 0;
  memset(v106, 0, sizeof(v106));
  v81 = *(_BYTE *)(v1 + OBJC_IVAR____TtC8ShelfKit7Podcast_isExplicit);
  v82 = v103;
  sub_267BC(v1 + OBJC_IVAR____TtC8ShelfKit13PodcastDetail_impressionMetrics, v103, (uint64_t *)&unk_3B8790);
  v83 = type metadata accessor for LibraryShowLockup(0);
  swift_allocObject(v83, *(unsigned int *)(v83 + 48), *(unsigned __int16 *)(v83 + 52));
  swift_bridgeObjectRetain_n(v80, 2);
  v105 = 1;
  v84 = sub_2267B0(v100, v101, v104, v78, v79, (uint64_t)v80, v79, v80, v102, v99, (uint64_t)v91, 0, 0, 0x100000000uLL, v33, (uint64_t)v106, 0, v54, v68,
          2,
          v81,
          0,
          0,
          v82);
  swift_release(v33);
  swift_release(v68);
  swift_release(v54);
  return v84;
}

void PodcastDetail.init(uuid:adamId:title:addedDate:summary:author:provider:newEpisodeCount:artwork:uberArtwork:logoArtwork:paidSubscriptionActive:storeUrl:webpageUrl:isExplicit:)()
{
  _swift_stdlib_reportUnimplementedInitializer("ShelfKit.PodcastDetail", 22, "init(uuid:adamId:title:addedDate:summary:author:provider:newEpisodeCount:artwork:uberArtwork:logoArtwork:paidSubscriptionActive:storeUrl:webpageUrl:isExplicit:)", 160, 0);
  __break(1u);
}

uint64_t sub_174B28()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit13PodcastDetail_episodeToPlay));
  sub_1752E0(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit13PodcastDetail_episodeUserFilter), *(_BYTE *)(v0 + OBJC_IVAR____TtC8ShelfKit13PodcastDetail_episodeUserFilter + 8));
  swift_bridgeObjectRelease();
  sub_1459C(v0 + OBJC_IVAR____TtC8ShelfKit13PodcastDetail_feedUrl, &qword_3B4370);
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit13PodcastDetail_offerAction));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit13PodcastDetail_channel));
  return sub_1459C(v0 + OBJC_IVAR____TtC8ShelfKit13PodcastDetail_impressionMetrics, (uint64_t *)&unk_3B8790);
}

uint64_t PodcastDetail.deinit()
{
  uint64_t v0;

  Podcast.deinit();
  swift_bridgeObjectRelease();
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit13PodcastDetail_episodeToPlay));
  sub_1752E0(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit13PodcastDetail_episodeUserFilter), *(_BYTE *)(v0 + OBJC_IVAR____TtC8ShelfKit13PodcastDetail_episodeUserFilter + 8));
  swift_bridgeObjectRelease();
  sub_1459C(v0 + OBJC_IVAR____TtC8ShelfKit13PodcastDetail_feedUrl, &qword_3B4370);
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit13PodcastDetail_offerAction));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit13PodcastDetail_channel));
  sub_1459C(v0 + OBJC_IVAR____TtC8ShelfKit13PodcastDetail_impressionMetrics, (uint64_t *)&unk_3B8790);
  return v0;
}

uint64_t PodcastDetail.__deallocating_deinit()
{
  return sub_8F284((void (*)(void))PodcastDetail.deinit);
}

uint64_t sub_174C94()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;
  _BYTE v4[24];

  v1 = (uint64_t *)(*v0 + OBJC_IVAR____TtC8ShelfKit13PodcastDetail_shelfUniqueId);
  swift_beginAccess(v1, v4, 0, 0);
  v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

uint64_t sub_174CEC@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return sub_267BC(*v1 + OBJC_IVAR____TtC8ShelfKit13PodcastDetail_impressionMetrics, a1, (uint64_t *)&unk_3B8790);
}

uint64_t sub_174D1C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, char a9, __int128 a10, __int128 a11, __int128 a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unsigned __int8 a17, uint64_t a18, uint64_t a19, unsigned __int8 a20,unsigned __int8 a21,uint64_t a22,unsigned __int8 a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t *a29,unsigned __int8 a30,int a31,unsigned __int8 a32,char *a33,uint64_t a34,unsigned __int8 a35,uint64_t a36)
{
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  _QWORD *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  _BYTE *v59;
  uint64_t v60;
  _BYTE *v61;
  uint64_t v62;
  _BYTE *v63;
  uint64_t v64;
  _BYTE *v65;
  _BYTE v67[4];
  int v68;
  uint64_t v69;
  int v70;
  int v71;
  uint64_t v72;
  int v73;
  _BYTE *v74;
  int v75;
  uint64_t v76;
  int v77;
  _BYTE *v78;
  int v79;
  uint64_t v80;
  _BYTE *v81;
  _BYTE *v82;
  _BYTE *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  int v88;
  int v89;
  uint64_t v90;
  int v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char v104[12];
  char v105[4];

  v98 = a8;
  v68 = a7;
  v96 = a5;
  v97 = a6;
  v95 = a3;
  v99 = a2;
  v101 = a1;
  v93 = a11;
  v94 = a10;
  v92 = a12;
  v91 = a17;
  v89 = a35;
  v86 = a16;
  v103 = a15;
  v90 = a13;
  v102 = a14;
  v100 = a36;
  v79 = a31;
  v77 = a32;
  v75 = a30;
  v73 = a23;
  v72 = a22;
  v71 = a21;
  v70 = a20;
  v69 = a19;
  v84 = a26;
  v80 = a27;
  v85 = a25;
  v87 = a4 & 1;
  v88 = a9 & 1;
  v76 = a34;
  v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
  __chkstk_darwin(v37);
  v83 = &v67[-((v38 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v39);
  v82 = &v67[-v40];
  v41 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
  __chkstk_darwin(v41);
  v81 = &v67[-((v42 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v43);
  v78 = &v67[-v44];
  __chkstk_darwin(v45);
  v74 = &v67[-v46];
  v47 = *a29;
  v48 = *a33;
  v49 = (_QWORD *)(v36 + OBJC_IVAR____TtC8ShelfKit13PodcastDetail_episodes);
  *v49 = 0;
  v50 = (uint64_t *)(v36 + OBJC_IVAR____TtC8ShelfKit13PodcastDetail_channel);
  *(_QWORD *)(v36 + OBJC_IVAR____TtC8ShelfKit13PodcastDetail_channel) = 0;
  *(_BYTE *)(v36 + OBJC_IVAR____TtC8ShelfKit13PodcastDetail_podcastState) = v68;
  swift_beginAccess(v49, v105, 1, 0);
  *v49 = a24;
  swift_retain();
  swift_bridgeObjectRelease();
  sub_267BC(a27, v36 + OBJC_IVAR____TtC8ShelfKit13PodcastDetail_feedUrl, &qword_3B4370);
  *(_QWORD *)(v36 + OBJC_IVAR____TtC8ShelfKit13PodcastDetail_offerAction) = a28;
  *(_QWORD *)(v36 + OBJC_IVAR____TtC8ShelfKit13PodcastDetail_episodeToPlay) = a18;
  v51 = v36 + OBJC_IVAR____TtC8ShelfKit13PodcastDetail_seasonToShow;
  *(_QWORD *)v51 = v69;
  *(_BYTE *)(v51 + 8) = v70 & 1;
  *(_BYTE *)(v36 + OBJC_IVAR____TtC8ShelfKit13PodcastDetail_isSerialShowTypeInFeed) = v71;
  v52 = v36 + OBJC_IVAR____TtC8ShelfKit13PodcastDetail_episodeUserFilter;
  v53 = v72;
  *(_QWORD *)v52 = v72;
  v54 = v73;
  *(_BYTE *)(v52 + 8) = v73;
  *(_QWORD *)(v36 + OBJC_IVAR____TtC8ShelfKit13PodcastDetail_darkModeOptions) = v47;
  v55 = (_QWORD *)(v36 + OBJC_IVAR____TtC8ShelfKit13PodcastDetail_shelfUniqueId);
  v56 = v99;
  *v55 = v101;
  v55[1] = v56;
  *(_BYTE *)(v36 + OBJC_IVAR____TtC8ShelfKit13PodcastDetail_hasEverPlayed) = v75;
  *(_BYTE *)(v36 + OBJC_IVAR____TtC8ShelfKit13PodcastDetail_sort) = v77;
  *(_DWORD *)(v36 + OBJC_IVAR____TtC8ShelfKit13PodcastDetail_hidesPlayedEpisodes) = v79;
  *(_BYTE *)(v36 + OBJC_IVAR____TtC8ShelfKit13PodcastDetail_displayType) = v48;
  swift_beginAccess(v50, v104, 1, 0);
  v57 = *v50;
  *v50 = v76;
  swift_retain();
  swift_retain();
  sub_173794(v53, v54);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release(v57);
  sub_267BC(v100, v36 + OBJC_IVAR____TtC8ShelfKit13PodcastDetail_impressionMetrics, (uint64_t *)&unk_3B8790);
  swift_release(v36);
  v58 = v74;
  sub_267BC(v102, (uint64_t)v74, &qword_3BEB70);
  v59 = v78;
  sub_267BC(v103, (uint64_t)v78, &qword_3BEB70);
  v60 = v86;
  v61 = v81;
  sub_267BC(v86, (uint64_t)v81, &qword_3BEB70);
  v62 = v85;
  v63 = v82;
  sub_267BC(v85, (uint64_t)v82, &qword_3B4370);
  v64 = v84;
  v65 = v83;
  sub_267BC(v84, (uint64_t)v83, &qword_3B4370);
  Podcast.init(uuid:adamId:title:addedDate:summary:author:provider:newEpisodeCount:artwork:uberArtwork:logoArtwork:paidSubscriptionActive:storeUrl:webpageUrl:isExplicit:)(v101, v99, v95, v87, v96, v97, v98, v88, v94, *((uint64_t *)&v94 + 1), v93, *((uint64_t *)&v93 + 1), v92, *((uint64_t *)&v92 + 1), v90, (uint64_t)v58, (uint64_t)v59, (uint64_t)v61, v91,
    (uint64_t)v63,
    (uint64_t)v65,
    v89);
  sub_1459C(v100, (uint64_t *)&unk_3B8790);
  sub_1459C(v80, &qword_3B4370);
  sub_1459C(v64, &qword_3B4370);
  sub_1459C(v62, &qword_3B4370);
  sub_1459C(v60, &qword_3BEB70);
  sub_1459C(v103, &qword_3BEB70);
  sub_1459C(v102, &qword_3BEB70);
  return v36;
}

uint64_t sub_1752E0(uint64_t result, char a2)
{
  if (a2 != -1)
    return sub_4357C(result, a2);
  return result;
}

unint64_t sub_1752F8()
{
  unint64_t result;

  result = qword_3BDCB8;
  if (!qword_3BDCB8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for DarkModeOptions);
    atomic_store(result, (unint64_t *)&qword_3BDCB8);
  }
  return result;
}

unint64_t sub_175340()
{
  unint64_t result;

  result = qword_3BDCC0;
  if (!qword_3BDCC0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for DarkModeOptions);
    atomic_store(result, (unint64_t *)&qword_3BDCC0);
  }
  return result;
}

unint64_t sub_175388()
{
  unint64_t result;

  result = qword_3BDCC8;
  if (!qword_3BDCC8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for DarkModeOptions);
    atomic_store(result, (unint64_t *)&qword_3BDCC8);
  }
  return result;
}

unint64_t sub_1753D0()
{
  unint64_t result;

  result = qword_3BDCD0;
  if (!qword_3BDCD0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for DarkModeOptions);
    atomic_store(result, (unint64_t *)&qword_3BDCD0);
  }
  return result;
}

unint64_t sub_175418()
{
  unint64_t result;

  result = qword_3BDCD8;
  if (!qword_3BDCD8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for PodcastDetail.DisplayType);
    atomic_store(result, (unint64_t *)&qword_3BDCD8);
  }
  return result;
}

unint64_t sub_17545C(uint64_t a1)
{
  unint64_t result;

  result = sub_175480();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_175480()
{
  unint64_t result;

  result = qword_3BDCE0;
  if (!qword_3BDCE0)
  {
    type metadata accessor for PodcastDetail(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for PodcastDetail);
    atomic_store(result, (unint64_t *)&qword_3BDCE0);
  }
  return result;
}

uint64_t type metadata accessor for PodcastDetail(uint64_t a1)
{
  return sub_1F9D4(a1, qword_3BDE30, (uint64_t)&nominal type descriptor for PodcastDetail);
}

uint64_t sub_1754DC()
{
  return type metadata accessor for Podcast(0);
}

uint64_t type metadata accessor for Podcast(uint64_t a1)
{
  return sub_1F9D4(a1, qword_3BDD10, (uint64_t)&nominal type descriptor for Podcast);
}

void sub_1754F8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[8];
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;

  v6[0] = &unk_2F9ED8;
  v6[1] = &unk_2F9EF0;
  v6[2] = &unk_2F9F08;
  v6[3] = &unk_2F9ED8;
  v6[4] = &unk_2F9F20;
  v6[5] = &unk_2F9F08;
  v6[6] = &unk_2F9F08;
  v6[7] = &unk_2F9F08;
  sub_3EE70(319, (unint64_t *)&qword_3B28A0, (uint64_t (*)(uint64_t))&type metadata accessor for ArtworkModel);
  if (v3 <= 0x3F)
  {
    v7 = *(_QWORD *)(v2 - 8) + 64;
    v8 = v7;
    v9 = v7;
    v10 = &unk_2F9F38;
    sub_3EE70(319, (unint64_t *)&qword_3B1C30, (uint64_t (*)(uint64_t))&type metadata accessor for URL);
    if (v5 <= 0x3F)
    {
      v11 = *(_QWORD *)(v4 - 8) + 64;
      v12 = v11;
      v13 = &unk_2F9F38;
      swift_updateClassMetadata2(a1, 256, 15, v6, a1 + 80);
    }
  }
}

uint64_t method lookup function for Podcast(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for Podcast);
}

uint64_t dispatch thunk of Podcast.__allocating_init(uuid:adamId:title:addedDate:summary:author:provider:newEpisodeCount:artwork:uberArtwork:logoArtwork:paidSubscriptionActive:storeUrl:webpageUrl:isExplicit:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v8;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, _QWORD))(v8 + 200))(a1, a2, a3, a4 & 1, a5, a6, a7, a8 & 1);
}

ValueMetadata *type metadata accessor for DarkModeOptions()
{
  return &type metadata for DarkModeOptions;
}

uint64_t sub_175658()
{
  return type metadata accessor for PodcastDetail(0);
}

void sub_175660(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[16];

  v6[0] = &unk_2F9EF0;
  v6[1] = &unk_2F9F80;
  v6[2] = (char *)&value witness table for Builtin.Int64 + 64;
  v6[3] = &unk_2F9F20;
  v6[4] = &unk_2F9ED8;
  v6[5] = &unk_2F9F38;
  v6[6] = &unk_2F9F98;
  v6[7] = &unk_2F9F38;
  v6[8] = (char *)&value witness table for Builtin.Int32 + 64;
  v6[9] = &unk_2F9FB0;
  v6[10] = &unk_2F9F20;
  sub_3EE70(319, (unint64_t *)&qword_3B1C30, (uint64_t (*)(uint64_t))&type metadata accessor for URL);
  if (v3 <= 0x3F)
  {
    v6[11] = *(_QWORD *)(v2 - 8) + 64;
    v6[12] = &unk_2F9F20;
    v6[13] = &unk_2F9FC8;
    v6[14] = &unk_2F9F20;
    sub_3EE70(319, (unint64_t *)&qword_3B2250, (uint64_t (*)(uint64_t))&type metadata accessor for ImpressionMetrics);
    if (v5 <= 0x3F)
    {
      v6[15] = *(_QWORD *)(v4 - 8) + 64;
      swift_updateClassMetadata2(a1, 256, 16, v6, a1 + 208);
    }
  }
}

uint64_t method lookup function for PodcastDetail(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for PodcastDetail);
}

uint64_t dispatch thunk of PodcastDetail.__allocating_init(uuid:adamId:title:podcastState:addedDate:summary:author:provider:newEpisodeCount:artwork:uberArtwork:logoArtwork:paidSubscriptionActive:episodeToPlay:seasonToShow:isSerialShowTypeInFeed:episodeUserFilter:episodes:storeUrl:webpageUrl:feedUrl:offerAction:darkModeOptions:hasEverPlayed:hidesPlayedEpisodes:sort:displayType:channel:isExplicit:impressionMetrics:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, unsigned int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;

  LOBYTE(a9) = a9 & 1;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 336))(a1, a2, a3, a4 & 1, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22);
}

uint64_t storeEnumTagSinglePayload for PodcastDetail.DisplayType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_175908 + 4 * byte_2F9BCD[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_17593C + 4 * byte_2F9BC8[v4]))();
}

uint64_t sub_17593C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_175944(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x17594CLL);
  return result;
}

uint64_t sub_175958(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x175960);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_175964(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_17596C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PodcastDetail.DisplayType()
{
  return &type metadata for PodcastDetail.DisplayType;
}

uint64_t RecentlySearchedStorage.Item.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup_adamId);
  v5 = type metadata accessor for LibraryEpisodeLockup(0);
  v6 = swift_dynamicCastClass(a1, v5);
  if (v6)
  {
    v8 = *(_QWORD *)(v6 + OBJC_IVAR____TtC8ShelfKit20LibraryEpisodeLockup_uuid);
    v7 = *(_QWORD *)(v6 + OBJC_IVAR____TtC8ShelfKit20LibraryEpisodeLockup_uuid + 8);
    swift_bridgeObjectRetain(v7);
    result = swift_release(a1);
    v10 = 61;
LABEL_3:
    v11 = 1;
    goto LABEL_6;
  }
  v12 = type metadata accessor for LegacyChannelLockup(0);
  if (swift_dynamicCastClass(a1, v12))
  {
    result = swift_release(a1);
    v8 = 0;
    v7 = 0;
    v11 = 0;
    v10 = 59;
    goto LABEL_6;
  }
  v13 = type metadata accessor for LibraryShowLockup(0);
  v14 = swift_dynamicCastClass(a1, v13);
  if (v14)
  {
    v8 = *(_QWORD *)(v14 + OBJC_IVAR____TtC8ShelfKit17LibraryShowLockup_uuid);
    v7 = *(_QWORD *)(v14 + OBJC_IVAR____TtC8ShelfKit17LibraryShowLockup_uuid + 8);
    swift_bridgeObjectRetain(v7);
    result = swift_release(a1);
    v10 = 60;
    goto LABEL_3;
  }
  v15 = type metadata accessor for LegacyEpisodeLockup(0);
  v16 = swift_dynamicCastClass(a1, v15);
  result = swift_release(a1);
  v8 = 0;
  v7 = 0;
  v11 = 0;
  if (v16)
    v10 = 61;
  else
    v10 = 60;
LABEL_6:
  *(_BYTE *)a2 = v10;
  *(_BYTE *)(a2 + 1) = v11;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = v8;
  *(_QWORD *)(a2 + 24) = v7;
  return result;
}

uint64_t SearchContentRequest.init(from:with:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE v5[40];

  sub_176308(a1, a2, (uint64_t)v5);
  return sub_80AAC((uint64_t)v5, a3);
}

uint64_t SearchContentRequest.merge(with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  int v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  _QWORD v28[4];
  char v29;
  _QWORD v30[4];
  char v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 v34;
  _QWORD v35[4];
  char v36;

  v3 = v2;
  sub_80AAC(v2, (uint64_t)v30);
  v22 = v30[0];
  v23 = v30[1];
  v24 = v30[2];
  v25 = v30[3];
  v26 = v31;
  sub_80AAC(a1, (uint64_t)v28);
  v6 = v28[1];
  v27 = v28[0];
  v8 = v28[2];
  v7 = v28[3];
  v9 = v29;
  sub_80AAC(v3, (uint64_t)v35);
  v10 = v36;
  if ((v36 & 0xC0) != 0x40)
    goto LABEL_5;
  v36 &= 0x3Fu;
  v11 = v35[0];
  v12 = v35[1];
  sub_80AAC(a1, (uint64_t)&v32);
  v13 = v34;
  v14 = v34 >> 6;
  if (v14 == 1)
  {
    v34 &= 0x3Fu;
    if (v11 == v32 && v12 == v33 || (_stringCompareWithSmolCheck(_:_:expecting:)(v11, v12, v32, v33, 0) & 1) != 0)
    {
      if ((v10 & 1) != 0)
        v17 = 0x65726F7473;
      else
        v17 = 0x7972617262696CLL;
      if ((v10 & 1) != 0)
        v18 = 0xE500000000000000;
      else
        v18 = 0xE700000000000000;
      if ((v13 & 1) != 0)
        v19 = 0x65726F7473;
      else
        v19 = 0x7972617262696CLL;
      if ((v13 & 1) != 0)
        v20 = 0xE500000000000000;
      else
        v20 = 0xE700000000000000;
      if (v17 == v19 && v18 == v20)
      {
        swift_bridgeObjectRelease_n(v18, 2);
        goto LABEL_31;
      }
      v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v17, v18, v19, v20, 0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v21 & 1) != 0)
        goto LABEL_31;
    }
    swift_bridgeObjectRetain();
LABEL_33:
    result = swift_bridgeObjectRetain();
    goto LABEL_6;
  }
  if (!v14)
  {
    v34 &= 0x3Fu;
    if ((v10 & 1) != 0)
    {
      if ((v11 != v32 || v12 != v33) && (_stringCompareWithSmolCheck(_:_:expecting:)(v11, v12, v32, v33, 0) & 1) == 0)
        goto LABEL_33;
LABEL_31:
      v7 = v25;
      swift_bridgeObjectRetain();
      v6 = v23;
      result = swift_bridgeObjectRetain();
      v16 = v22;
      v8 = v24;
      v9 = v26;
      goto LABEL_7;
    }
  }
LABEL_5:
  result = sub_176574(a1);
LABEL_6:
  v16 = v27;
LABEL_7:
  *(_QWORD *)a2 = v16;
  *(_QWORD *)(a2 + 8) = v6;
  *(_QWORD *)(a2 + 16) = v8;
  *(_QWORD *)(a2 + 24) = v7;
  *(_BYTE *)(a2 + 32) = v9;
  return result;
}

uint64_t SearchContentRequest.withScope(_:)@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t result;
  _QWORD v12[4];
  char v13;
  _QWORD v14[4];
  char v15;

  v3 = v2;
  sub_80AAC(v2, (uint64_t)v12);
  v7 = v12[0];
  v6 = v12[1];
  v9 = v12[2];
  v8 = v12[3];
  v10 = v13;
  sub_80AAC(v3, (uint64_t)v14);
  if ((v15 & 0xC0) == 0x40)
  {
    v7 = v14[0];
    v6 = v14[1];
    v9 = v14[2];
    v8 = v14[3];
    v10 = a1 & 1 | 0x40;
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
  }
  else
  {
    result = sub_176574(v3);
  }
  *(_QWORD *)a2 = v7;
  *(_QWORD *)(a2 + 8) = v6;
  *(_QWORD *)(a2 + 16) = v9;
  *(_QWORD *)(a2 + 24) = v8;
  *(_BYTE *)(a2 + 32) = v10;
  return result;
}

void SearchContentRequest.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unsigned __int8 v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;

  v2 = v1;
  sub_80AAC(v2, (uint64_t)&v14);
  v4 = v14;
  v5 = v18;
  v6 = v18 >> 6;
  if (v6)
  {
    if (v6 == 1)
    {
      v18 &= 0x3Fu;
      v8 = v15;
      v7 = v16;
      v9 = v17;
      Hasher._combine(_:)(3uLL);
      String.hash(into:)(a1, v4, v8);
      if (v9)
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)(a1, v7, v9);
        swift_bridgeObjectRelease();
      }
      else
      {
        Hasher._combine(_:)(0);
      }
      if ((v5 & 1) != 0)
        v12 = 0x65726F7473;
      else
        v12 = 0x7972617262696CLL;
      if ((v5 & 1) != 0)
        v13 = 0xE500000000000000;
      else
        v13 = 0xE700000000000000;
      String.hash(into:)(a1, v12, v13);
      swift_bridgeObjectRelease();
    }
    else if (v18 == 128 && (v16 | v17 | v14 | v15) == 0)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(2uLL);
    }
  }
  else
  {
    v18 &= 0x3Fu;
    v10 = v15;
    Hasher._combine(_:)(1uLL);
    String.hash(into:)(a1, v4, v10);
  }
}

Swift::Int SearchContentRequest.hashValue.getter()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  SearchContentRequest.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int sub_175F68()
{
  uint64_t v0;
  _QWORD v2[9];
  _BYTE v3[40];

  sub_80AAC(v0, (uint64_t)v3);
  Hasher.init(_seed:)(v2);
  SearchContentRequest.hash(into:)((uint64_t)v2);
  return Hasher._finalize()();
}

void sub_175FB4(uint64_t a1)
{
  uint64_t v1;
  _BYTE v3[40];

  sub_80AAC(v1, (uint64_t)v3);
  SearchContentRequest.hash(into:)(a1);
}

Swift::Int sub_175FF0()
{
  uint64_t v0;
  _QWORD v2[9];
  _BYTE v3[40];

  sub_80AAC(v0, (uint64_t)v3);
  Hasher.init(_seed:)(v2);
  SearchContentRequest.hash(into:)((uint64_t)v2);
  return Hasher._finalize()();
}

uint64_t sub_176040(uint64_t a1, uint64_t a2)
{
  _BYTE v4[40];
  _BYTE v5[40];

  sub_80AAC(a1, (uint64_t)v4);
  sub_80AAC(a2, (uint64_t)v5);
  return _s8ShelfKit20SearchContentRequestO2eeoiySbAC_ACtFZ_0((uint64_t)v4, (uint64_t)v5) & 1;
}

uint64_t _s8ShelfKit20SearchContentRequestO2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  unsigned __int8 v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned __int8 v9;
  int8x16_t v10;
  char v11;
  char v12;
  unint64_t v13;
  int8x16_t v16;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int8x16_t v22;
  int8x16_t v23;
  unsigned __int8 v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unsigned __int8 v29;

  sub_80AAC(a1, (uint64_t)&v25);
  v3 = v25;
  v4 = v29;
  v5 = v29 >> 6;
  if (!v5)
  {
    v29 &= 0x3Fu;
    v13 = v26;
    sub_80AAC(a2, (uint64_t)&v22);
    if (v24 > 0x3Fu)
      goto LABEL_31;
    if (v3 != v22.i64[0] || v13 != v22.i64[1])
    {
      v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v13, v22.i64[0], v22.i64[1], 0);
      return v12 & 1;
    }
LABEL_29:
    v12 = 1;
    return v12 & 1;
  }
  if (v5 != 1)
  {
    if (v29 == 128 && (v27 | v28 | v25 | v26) == 0)
    {
      sub_80AAC(a2, (uint64_t)&v22);
      if ((v24 & 0xC0) != 0x80)
        goto LABEL_31;
      if (v24 != 128)
        goto LABEL_31;
      v16 = vorrq_s8(v22, v23);
      if (vorr_s8(*(int8x8_t *)v16.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL)))
        goto LABEL_31;
    }
    else
    {
      sub_80AAC(a2, (uint64_t)&v22);
      if ((v24 & 0xC0) != 0x80 || v24 != 128 || v22.i64[0] != 1 || v23.i64[0] | v23.i64[1] | v22.i64[1])
        goto LABEL_31;
    }
    goto LABEL_29;
  }
  v29 &= 0x3Fu;
  v7 = v26;
  v6 = v27;
  v8 = v28;
  sub_80AAC(a2, (uint64_t)&v22);
  v9 = v24;
  if ((v24 & 0xC0) != 0x40)
    goto LABEL_31;
  v24 &= 0x3Fu;
  v10 = v23;
  if (__PAIR128__(v7, v3) != *(_OWORD *)&v22)
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v7, v22.i64[0], v22.i64[1], 0);
    v12 = 0;
    if ((v11 & 1) == 0)
      return v12 & 1;
  }
  if (v8)
  {
    if (v10.i64[1])
    {
      if (__PAIR128__(v8, v6) != *(_OWORD *)&v10)
      {
        v12 = 0;
        if ((_stringCompareWithSmolCheck(_:_:expecting:)(v6, v8, v10.i64[0], v10.i64[1], 0) & 1) == 0)
          return v12 & 1;
      }
      goto LABEL_33;
    }
LABEL_31:
    v12 = 0;
    return v12 & 1;
  }
  if (v10.i64[1])
    goto LABEL_31;
LABEL_33:
  if ((v4 & 1) != 0)
    v18 = 0x65726F7473;
  else
    v18 = 0x7972617262696CLL;
  if ((v4 & 1) != 0)
    v19 = 0xE500000000000000;
  else
    v19 = 0xE700000000000000;
  if ((v9 & 1) != 0)
    v20 = 0x65726F7473;
  else
    v20 = 0x7972617262696CLL;
  if ((v9 & 1) != 0)
    v21 = 0xE500000000000000;
  else
    v21 = 0xE700000000000000;
  if (v18 == v20 && v19 == v21)
  {
    swift_bridgeObjectRelease_n(v19, 2);
    v12 = 1;
  }
  else
  {
    v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v19, v20, v21, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v12 & 1;
}

uint64_t sub_176308@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::String v14;
  Swift::Int v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  _BOOL8 v20;
  uint64_t v21;
  uint64_t v22;

  v3 = a3;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *a2;
  v6 = (void *)a2[1];
  v8 = a2[2];
  v7 = a2[3];
  if (v4)
  {
    v9 = *(_QWORD *)a1;
    v11 = *(_QWORD *)(a1 + 16);
    v10 = *(_QWORD *)(a1 + 24);
    v12 = *(unsigned __int8 *)(a1 + 32);
    v13 = HIBYTE(v4) & 0xF;
    if ((v4 & 0x2000000000000000) == 0)
      v13 = *(_QWORD *)a1 & 0xFFFFFFFFFFFFLL;
    if (v13)
    {
      v22 = *(_QWORD *)(a1 + 24);
      if (v6)
      {
        v21 = *(_QWORD *)(a1 + 16);
        swift_bridgeObjectRetain(v4);
        swift_bridgeObjectRetain(v22);
        swift_bridgeObjectRetain(v6);
        v14._countAndFlagsBits = v5;
        v14._object = v6;
        v15 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_373700, v14);
        swift_bridgeObjectRelease();
        sub_80030(v5, (uint64_t)v6, v8, v7);
        if (!v15)
        {
          v11 = v21;
          v17 = v22;
          v18 = v12;
          goto LABEL_19;
        }
        v16 = v15 == 1;
        v11 = v21;
        v17 = v22;
        v18 = v12;
        if (v16)
        {
LABEL_19:
          sub_80030(v9, v4, v11, v17);
          __asm { BR              X9 }
        }
      }
      else
      {
        swift_bridgeObjectRetain(v4);
        v17 = v22;
        swift_bridgeObjectRetain(v22);
        v18 = v12;
      }
      if (qword_3B0190 != -1)
        swift_once(&qword_3B0190, sub_196060);
      goto LABEL_19;
    }
    sub_80030(v5, (uint64_t)v6, v8, v7);
    result = sub_80030(v9, v4, v11, v10);
    if ((_DWORD)v12)
      v20 = (_DWORD)v12 == 5;
    else
      v20 = 1;
    v3 = a3;
  }
  else
  {
    result = sub_80030(*a2, a2[1], v8, v7);
    v20 = 0;
  }
  *(_QWORD *)v3 = v20;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_BYTE *)(v3 + 32) = 0x80;
  return result;
}

uint64_t sub_176574(uint64_t a1)
{
  sub_80AE8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  return a1;
}

uint64_t destroy for SearchContentRequest(uint64_t a1)
{
  return sub_11DD8C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
}

uint64_t initializeWithCopy for SearchContentRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  sub_80AE8(*(_QWORD *)a2, v4, v5, v6, v7);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for SearchContentRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  sub_80AE8(*(_QWORD *)a2, v4, v5, v6, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  v12 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v7;
  sub_11DD8C(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for SearchContentRequest(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  unsigned __int8 v9;

  v3 = *(_BYTE *)(a2 + 32);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  v9 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v3;
  sub_11DD8C(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for SearchContentRequest(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7E && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 126);
  v3 = ((*(unsigned __int8 *)(a1 + 32) >> 6) & 0xFFFFFF83 | (4 * ((*(unsigned __int8 *)(a1 + 32) >> 1) & 0x1F))) ^ 0x7F;
  if (v3 >= 0x7D)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for SearchContentRequest(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7D)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 126;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7E)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0x7E)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
    {
      *(_OWORD *)result = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(_BYTE *)(result + 32) = 2 * (((-a2 >> 2) & 0x1F) - 32 * a2);
    }
  }
  return result;
}

uint64_t sub_176788(uint64_t a1)
{
  unsigned int v1;
  int v2;
  unsigned int v3;

  v1 = *(unsigned __int8 *)(a1 + 32);
  v2 = (char)v1;
  v3 = v1 >> 6;
  if (v2 >= 0)
    return v3;
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t sub_1767A8(uint64_t result)
{
  *(_BYTE *)(result + 32) &= 0x3Fu;
  return result;
}

uint64_t sub_1767B8(uint64_t result, unsigned int a2)
{
  if (a2 < 2)
  {
    *(_BYTE *)(result + 32) = *(_BYTE *)(result + 32) & 1 | ((_BYTE)a2 << 6);
  }
  else
  {
    *(_QWORD *)result = a2 - 2;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0x80;
  }
  return result;
}

ValueMetadata *type metadata accessor for SearchContentRequest()
{
  return &type metadata for SearchContentRequest;
}

char *LegacyChannelLockup.__allocating_init(deserializing:using:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void (*v13)(char *, uint64_t, uint64_t);
  char *v14;
  uint64_t v16;
  uint64_t v17;

  v5 = type metadata accessor for JSONContext(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for JSONObject(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  v13 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v17 = a1;
  v13(v12, a1, v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a2, v5);
  v14 = LegacyLockup.init(deserializing:using:)((uint64_t)v12, (uint64_t)v8);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a2, v5);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v17, v9);
  return v14;
}

uint64_t LegacyChannelLockup.__allocating_init(adamId:icon:title:subtitles:eyebrow:clickAction:isExplicit:impressionMetrics:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  _BYTE v22[4];
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  _BYTE v30[40];

  v24 = a7;
  v25 = a6;
  v27 = a4;
  v28 = a5;
  v26 = a3;
  v23 = a9;
  v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v14);
  v16 = &v22[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
  __chkstk_darwin(v17);
  v19 = &v22[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
  sub_267BC(a2, (uint64_t)v19, &qword_3BEB70);
  sub_267BC(a8, (uint64_t)v30, &qword_3B0C50);
  sub_267BC(a10, (uint64_t)v16, (uint64_t *)&unk_3B8790);
  v29 = 1;
  v20 = sub_19C468(0, 0, a1, v23, (uint64_t)v19, v26, v27, v28, v25, v24, 0, 0, 0, 0, 0, 0, 0, 0, 0x100000000,
          0,
          1u,
          0,
          (uint64_t)v30,
          0,
          0,
          0,
          0,
          (uint64_t)v16);
  sub_1459C(a10, (uint64_t *)&unk_3B8790);
  sub_1459C(a8, &qword_3B0C50);
  sub_1459C(a2, &qword_3BEB70);
  return v20;
}

uint64_t LegacyChannelLockup.init(adamId:icon:title:subtitles:eyebrow:clickAction:isExplicit:impressionMetrics:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, uint64_t a10)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  _BYTE v27[40];

  v25 = a5;
  v21 = a7;
  v22 = a6;
  v23 = a3;
  v24 = a4;
  v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v13);
  v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
  __chkstk_darwin(v16);
  v18 = (char *)&v21 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_267BC(a2, (uint64_t)v18, &qword_3BEB70);
  sub_267BC(a8, (uint64_t)v27, &qword_3B0C50);
  sub_267BC(a10, (uint64_t)v15, (uint64_t *)&unk_3B8790);
  v26 = 1;
  v19 = sub_19C468(0, 0, a1, a9, (uint64_t)v18, v23, v24, v25, v22, v21, 0, 0, 0, 0, 0, 0, 0, 0, 0x100000000,
          0,
          1u,
          0,
          (uint64_t)v27,
          0,
          0,
          0,
          0,
          (uint64_t)v15);
  sub_1459C(a10, (uint64_t *)&unk_3B8790);
  sub_1459C(a8, &qword_3B0C50);
  sub_1459C(a2, &qword_3BEB70);
  return v19;
}

char *LegacyChannelLockup.init(deserializing:using:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  void (*v13)(char *, uint64_t, uint64_t, __n128);
  char *v14;
  uint64_t v16;
  uint64_t v17;

  v4 = type metadata accessor for JSONContext(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for JSONObject(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v9 + 16);
  v17 = a1;
  v13(v12, a1, v8, v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
  v14 = LegacyLockup.init(deserializing:using:)((uint64_t)v12, (uint64_t)v7);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a2, v4);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v17, v8);
  return v14;
}

NSObject_optional __swiftcall LegacyChannelLockup.appEntityAnnotation()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  objc_class *v13;
  Swift::Bool v14;
  _QWORD v15[2];
  NSObject_optional result;

  v1 = type metadata accessor for AppEntityVisualState(0);
  __chkstk_darwin(v1);
  v3 = (char *)v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15[0] = *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup_adamId);
  v4 = sub_144B4();
  v5 = BinaryInteger.description.getter(&type metadata for UInt64, v4);
  v7 = v6;
  v15[0] = _swiftEmptyArrayStorage;
  v8 = sub_F1C0((unint64_t *)&qword_3B1D18, (void (*)(uint64_t))&type metadata accessor for AppEntityVisualState, (uint64_t)&protocol conformance descriptor for AppEntityVisualState);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B1D20);
  v10 = sub_29210();
  dispatch thunk of SetAlgebra.init<A>(_:)(v15, v9, v10, v1, v8);
  v11 = type metadata accessor for ChannelEntity(0);
  v15[0] = v5;
  v15[1] = v7;
  objc_allocWithZone((Class)type metadata accessor for AppEntityViewAnnotation(0));
  v12 = sub_F1C0(&qword_3BDFB0, (void (*)(uint64_t))&type metadata accessor for ChannelEntity, (uint64_t)&protocol conformance descriptor for ChannelEntity);
  v13 = (objc_class *)AppEntityViewAnnotation.init<A>(entityType:identifier:state:)(v11, v15, v3, v11, v12);
  result.value.isa = v13;
  result.is_nil = v14;
  return result;
}

void LegacyChannelLockup.init(id:adamId:isExplicit:icon:title:subtitles:eyebrow:titleAccessibilityLabel:genreNames:ordinal:releaseDate:releaseFrequency:rating:ratingCount:buttonAction:clickAction:contextAction:playAction:previewAction:subtitleAction:impressionMetrics:)()
{
  _swift_stdlib_reportUnimplementedInitializer("ShelfKit.LegacyChannelLockup", 28, "init(id:adamId:isExplicit:icon:title:subtitles:eyebrow:titleAccessibilityLabel:genreNames:ordinal:releaseDate:releaseFrequency:rating:ratingCount:buttonAction:clickAction:contextAction:playAction:previewAction:subtitleAction:impressionMetrics:)", 244, 0);
  __break(1u);
}

uint64_t LegacyChannelLockup.__deallocating_deinit()
{
  uint64_t v0;

  v0 = LegacyLockup.deinit();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_176F84()
{
  return type metadata accessor for LegacyChannelLockup(0);
}

uint64_t type metadata accessor for LegacyChannelLockup(uint64_t a1)
{
  uint64_t result;

  result = qword_3BDFE0;
  if (!qword_3BDFE0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LegacyChannelLockup);
  return result;
}

uint64_t sub_176FC8(uint64_t a1)
{
  _BYTE v2[8];

  return swift_updateClassMetadata2(a1, 256, 0, v2, a1 + 448);
}

uint64_t method lookup function for LegacyChannelLockup(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for LegacyChannelLockup);
}

uint64_t dispatch thunk of LegacyChannelLockup.__allocating_init(adamId:icon:title:subtitles:eyebrow:clickAction:isExplicit:impressionMetrics:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 448))();
}

uint64_t StationEpisode.stationUuid.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit14StationEpisode_stationUuid);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit14StationEpisode_stationUuid + 8));
  return v1;
}

uint64_t StationEpisode.__allocating_init(title:numberedTitle:uuid:podcastUuid:podcastAdamId:stationUuid:adamId:channelAdamId:channelName:artwork:episodeArtwork:author:summary:releaseDate:streamUrl:assetUrl:mediaType:isExplicit:guid:duration:seasonNumber:episodeNumber:episodeType:showTitle:showTypeIsSerial:showTypeSetting:listenNowReason:episodeEntitlementState:hasFreeVersion:subscriptionName:storeTrackId:upNextScore:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, __int128 a18, uint64_t a19, __int128 a20,__int128 a21,__int128 a22,uint64_t a23,unsigned __int8 a24,unsigned __int8 a25,__int128 a26,uint64_t a27,char a28,uint64_t a29,char a30,uint64_t a31,char a32,unsigned __int8 a33,uint64_t a34,uint64_t a35,unsigned __int8 a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,char a41,__int128 a42,uint64_t a43,char a44)
{
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v52;
  int v53;
  int v54;
  __int128 v55;
  int v56;
  int v57;
  int v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  int v68;
  int v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;

  v85 = a7;
  v86 = a8;
  v83 = a5;
  v84 = a6;
  v81 = a3;
  v82 = a4;
  v79 = a1;
  v80 = a2;
  v77 = a14;
  v78 = a10;
  v76 = a16;
  v75 = a18;
  v74 = a19;
  v72 = a21;
  v73 = a20;
  v71 = a22;
  v70 = a23;
  v69 = a24;
  v68 = a25;
  v67 = a26;
  v66 = a27;
  v65 = a29;
  v64 = a31;
  v62 = a33;
  v61 = a34;
  v59 = a35;
  v57 = a36;
  v55 = a42;
  v63 = a11 & 1;
  v60 = a15 & 1;
  v58 = a17 & 1;
  v56 = a28 & 1;
  v54 = a30 & 1;
  v53 = a32 & 1;
  v52 = a37;
  v46 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
  __chkstk_darwin(v46);
  v48 = (char *)&v52 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = (_QWORD *)(swift_allocObject(v44, *(unsigned int *)(v44 + 48), *(unsigned __int16 *)(v44 + 52))
                 + OBJC_IVAR____TtC8ShelfKit14StationEpisode_stationUuid);
  *v49 = a12;
  v49[1] = a13;
  v50 = type metadata accessor for ArtworkModel(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 56))(v48, 1, 1, v50);
  return Episode.init(title:numberedTitle:uuid:podcastUuid:podcastAdamId:adamId:channelAdamId:channelName:artwork:showUberArtwork:episodeArtwork:author:summary:releaseDate:streamUrl:assetUrl:mediaType:isExplicit:guid:duration:seasonNumber:episodeNumber:episodeType:showTitle:showDisplayType:showTypeIsSerial:showTypeSetting:listenNowReason:episodeEntitlementState:hasFreeVersion:subscriptionName:storeTrackId:upNextScore:)(v79, v80, v81, v82, v83, v84, v85, v86, a9, v78, v63, v77, v60, v76, v58, v75, *((uint64_t *)&v75 + 1), v74, (uint64_t)v48,
           v73,
           *((uint64_t *)&v73 + 1),
           v72,
           *((uint64_t *)&v72 + 1),
           v71,
           *((uint64_t *)&v71 + 1),
           v70,
           v69,
           v68,
           v67,
           *((uint64_t *)&v67 + 1),
           v66,
           v56,
           v65,
           v54,
           v64,
           v53,
           v62,
           v61,
           v59,
           3,
           v57,
           v52,
           a38 & 1,
           a39,
           a40,
           a41,
           v55,
           *((uint64_t *)&v55 + 1),
           a43,
           a44 & 1);
}

uint64_t StationEpisode.init(title:numberedTitle:uuid:podcastUuid:podcastAdamId:stationUuid:adamId:channelAdamId:channelName:artwork:episodeArtwork:author:summary:releaseDate:streamUrl:assetUrl:mediaType:isExplicit:guid:duration:seasonNumber:episodeNumber:episodeType:showTitle:showTypeIsSerial:showTypeSetting:listenNowReason:episodeEntitlementState:hasFreeVersion:subscriptionName:storeTrackId:upNextScore:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, __int128 a18, uint64_t a19, __int128 a20,__int128 a21,__int128 a22,uint64_t a23,unsigned __int8 a24,unsigned __int8 a25,__int128 a26,uint64_t a27,char a28,uint64_t a29,char a30,uint64_t a31,char a32,unsigned __int8 a33,uint64_t a34,uint64_t a35,unsigned __int8 a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,char a41,__int128 a42,uint64_t a43,char a44)
{
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v52;
  int v53;
  int v54;
  __int128 v55;
  int v56;
  int v57;
  int v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  int v68;
  int v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;

  v85 = a7;
  v86 = a8;
  v83 = a5;
  v84 = a6;
  v81 = a3;
  v82 = a4;
  v79 = a1;
  v80 = a2;
  v77 = a14;
  v78 = a10;
  v76 = a16;
  v75 = a18;
  v74 = a19;
  v72 = a21;
  v73 = a20;
  v71 = a22;
  v70 = a23;
  v69 = a24;
  v68 = a25;
  v67 = a26;
  v66 = a27;
  v65 = a29;
  v64 = a31;
  v62 = a33;
  v61 = a34;
  v59 = a35;
  v57 = a36;
  v55 = a42;
  v63 = a11 & 1;
  v60 = a15 & 1;
  v58 = a17 & 1;
  v56 = a28 & 1;
  v54 = a30 & 1;
  v53 = a32 & 1;
  v52 = a37;
  v46 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
  __chkstk_darwin(v46);
  v48 = (char *)&v52 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = (_QWORD *)(v44 + OBJC_IVAR____TtC8ShelfKit14StationEpisode_stationUuid);
  *v49 = a12;
  v49[1] = a13;
  v50 = type metadata accessor for ArtworkModel(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 56))(v48, 1, 1, v50);
  return Episode.init(title:numberedTitle:uuid:podcastUuid:podcastAdamId:adamId:channelAdamId:channelName:artwork:showUberArtwork:episodeArtwork:author:summary:releaseDate:streamUrl:assetUrl:mediaType:isExplicit:guid:duration:seasonNumber:episodeNumber:episodeType:showTitle:showDisplayType:showTypeIsSerial:showTypeSetting:listenNowReason:episodeEntitlementState:hasFreeVersion:subscriptionName:storeTrackId:upNextScore:)(v79, v80, v81, v82, v83, v84, v85, v86, a9, v78, v63, v77, v60, v76, v58, v75, *((uint64_t *)&v75 + 1), v74, (uint64_t)v48,
           v73,
           *((uint64_t *)&v73 + 1),
           v72,
           *((uint64_t *)&v72 + 1),
           v71,
           *((uint64_t *)&v71 + 1),
           v70,
           v69,
           v68,
           v67,
           *((uint64_t *)&v67 + 1),
           v66,
           v56,
           v65,
           v54,
           v64,
           v53,
           v62,
           v61,
           v59,
           3,
           v57,
           v52,
           a38 & 1,
           a39,
           a40,
           a41,
           v55,
           *((uint64_t *)&v55 + 1),
           a43,
           a44 & 1);
}

void StationEpisode.init(title:numberedTitle:uuid:podcastUuid:podcastAdamId:adamId:channelAdamId:channelName:artwork:showUberArtwork:episodeArtwork:author:summary:releaseDate:streamUrl:assetUrl:mediaType:isExplicit:guid:duration:seasonNumber:episodeNumber:episodeType:showTitle:showDisplayType:showTypeIsSerial:showTypeSetting:listenNowReason:episodeEntitlementState:hasFreeVersion:subscriptionName:storeTrackId:upNextScore:)()
{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(60);
  v0._countAndFlagsBits = 0xD000000000000195;
  v0._object = (void *)0x8000000000311F70;
  String.append(_:)(v0);
  v1._object = (void *)0x8000000000312110;
  v1._countAndFlagsBits = 0xD00000000000003ALL;
  String.append(_:)(v1);
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "ShelfKit/StationEpisode.swift", 29, 2, 119, 0);
  __break(1u);
}

uint64_t sub_17783C(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  char v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(_QWORD *, uint64_t, uint64_t);
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE *v57;
  _BYTE *v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(uint64_t, _BYTE *, uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _BYTE *v91;
  void *v92;
  unsigned __int8 v93;
  uint64_t v94;
  uint64_t v95;
  id v96;
  uint64_t v97;
  id v98;
  _BYTE *v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  uint64_t v111;
  uint64_t v112;
  _BYTE *v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v123;
  char v124;
  _BYTE v125[4];
  int v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  int v134;
  int v135;
  uint64_t v136;
  int v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  int v145;
  uint64_t v146;
  int v147;
  void (*v148)(_QWORD *, uint64_t, uint64_t, uint64_t);
  void (*v149)(uint64_t, _BYTE *, uint64_t);
  uint64_t v150;
  _BYTE *v151;
  uint64_t v152;
  uint64_t v153;
  void *v154;
  _BYTE *v155;
  uint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  uint64_t v159;
  uint64_t v160;
  _BYTE *v161;
  uint64_t v162;
  uint64_t v163;
  _BYTE *v164;
  _BYTE *v165;
  _BYTE *v166;
  _BYTE *v167;
  _QWORD *v168;
  _BYTE *v169;
  _BYTE *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD *v174;
  uint64_t v175;
  char v176;
  uint64_t v177;
  unsigned __int8 v178;
  char v179[8];
  _QWORD v180[5];

  v156 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BA270);
  __chkstk_darwin(v156);
  v155 = &v125[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B24F8);
  __chkstk_darwin(v6);
  v170 = &v125[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B81E8);
  __chkstk_darwin(v8);
  v169 = &v125[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3D88);
  __chkstk_darwin(v10);
  v168 = &v125[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
  __chkstk_darwin(v12);
  v167 = &v125[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v152 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3C88);
  __chkstk_darwin(v152);
  v151 = &v125[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
  __chkstk_darwin(v15);
  v166 = &v125[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v17);
  v165 = &v125[-v18];
  __chkstk_darwin(v19);
  v164 = &v125[-v20];
  v173 = type metadata accessor for UUID(0);
  v158 = *(_QWORD **)(v173 - 8);
  __chkstk_darwin(v173);
  v22 = &v125[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v159 = type metadata accessor for ActionMetrics(0);
  v162 = *(_QWORD *)(v159 - 8);
  __chkstk_darwin(v159);
  v161 = &v125[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v24);
  v26 = &v125[-v25];
  v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v27);
  v174 = &v125[-((v28 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v154 = a2;
  v29 = sub_21B3D4(a1, (uint64_t)a2);
  v30 = *(_QWORD *)(v2 + 64);
  v31 = *(_QWORD *)(v2 + 72);
  v32 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8ShelfKit14StationEpisode_stationUuid);
  v33 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8ShelfKit14StationEpisode_stationUuid + 8);
  v171 = *(_QWORD *)(v2 + 16);
  v150 = v2;
  v34 = *(_BYTE *)(v2 + 24);
  v35 = type metadata accessor for LibraryStationEpisodeOfferAction(0);
  v36 = swift_allocObject(v35, *(unsigned int *)(v35 + 48), *(unsigned __int16 *)(v35 + 52));
  v37 = (uint64_t *)(v36 + OBJC_IVAR____TtC8ShelfKit32LibraryStationEpisodeOfferAction_stationUuid);
  v160 = v32;
  *v37 = v32;
  v37[1] = v33;
  v38 = v34;
  v39 = (uint64_t *)(v36 + OBJC_IVAR____TtC8ShelfKit25LibraryEpisodeOfferAction_episodeUuid);
  v163 = v30;
  *v39 = v30;
  v39[1] = v31;
  v175 = v31;
  swift_bridgeObjectRetain();
  v172 = v33;
  swift_bridgeObjectRetain();
  v40 = swift_retain();
  if ((v34 & 1) != 0 || (v41 = static AdamID.empty.getter(v40), v171 == v41))
  {
    v42 = 0;
    v43 = 1;
  }
  else
  {
    v43 = 0;
    v42 = v171;
  }
  v44 = v36 + OBJC_IVAR____TtC8ShelfKit25LibraryEpisodeOfferAction_contentId;
  *(_QWORD *)v44 = v42;
  *(_BYTE *)(v44 + 8) = v43;
  swift_release(v36);
  v45 = type metadata accessor for ImpressionMetrics(0);
  v46 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56);
  v47 = v174;
  v157 = v45;
  v48 = v46(v174, 1, 1);
  v49 = static ActionMetrics.notInstrumented.getter(v48);
  UUID.init()(v49);
  v50 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
  v52 = v51;
  v158 = (_QWORD *)v158[1];
  ((void (*)(_BYTE *, uint64_t))v158)(v22, v173);
  *(_QWORD *)(v36 + 16) = v50;
  *(_QWORD *)(v36 + 24) = v52;
  *(_QWORD *)(v36 + 32) = 0;
  *(_QWORD *)(v36 + 40) = 0;
  *(_BYTE *)(v36 + 48) = 32;
  v149 = *(void (**)(uint64_t, _BYTE *, uint64_t))(v162 + 32);
  v149(v36 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v26, v159);
  sub_23AB8((uint64_t)v47, v36 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics);
  swift_bridgeObjectRetain();
  v53 = swift_bridgeObjectRetain();
  v55 = static MetricsTargetType.button.getter(v53, v54);
  v153 = v36;
  v57 = v22;
  v58 = v161;
  if ((v38 & 1) != 0)
    static ActionMetrics.notInstrumented.getter(v55);
  else
    static ActionMetrics.play(adamID:targetType:fields:)(v171, v55, v56, &_swiftEmptyDictionarySingleton);
  swift_bridgeObjectRelease();
  v59 = type metadata accessor for PlayStationAction(0);
  v60 = swift_allocObject(v59, *(unsigned int *)(v59 + 48), *(unsigned __int16 *)(v59 + 52));
  v61 = (_QWORD *)(v60 + OBJC_IVAR____TtC8ShelfKit17PlayStationAction_stationUuid);
  v62 = v172;
  *v61 = v160;
  v61[1] = v62;
  v63 = (_QWORD *)(v60 + OBJC_IVAR____TtC8ShelfKit17PlayStationAction_episodeUuid);
  v64 = v163;
  v65 = v175;
  *v63 = v163;
  v63[1] = v65;
  v66 = v60 + OBJC_IVAR____TtC8ShelfKit17PlayStationAction_episodeAdamID;
  *(_QWORD *)v66 = v171;
  *(_BYTE *)(v66 + 8) = v38;
  v67 = v162;
  v68 = v159;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v162 + 16))(v26, v58, v159);
  v69 = v174;
  v70 = ((uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t))v46)(v174, 1, 1, v157);
  UUID.init()(v70);
  v71 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
  v148 = (void (*)(_QWORD *, uint64_t, uint64_t, uint64_t))v46;
  v73 = v72;
  ((void (*)(_BYTE *, uint64_t))v158)(v57, v173);
  *(_QWORD *)(v60 + 16) = v71;
  *(_QWORD *)(v60 + 24) = v73;
  *(_QWORD *)(v60 + 32) = 0;
  *(_QWORD *)(v60 + 40) = 0;
  *(_BYTE *)(v60 + 48) = 32;
  v74 = v149;
  v149(v60 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v26, v68);
  v171 = v60;
  sub_23AB8((uint64_t)v69, v60 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics);
  (*(void (**)(_BYTE *, uint64_t))(v67 + 8))(v161, v68);
  v75 = sub_1794D0();
  v76 = type metadata accessor for LibraryEpisodeContextAction(0);
  v77 = swift_allocObject(v76, *(unsigned int *)(v76 + 48), *(unsigned __int16 *)(v76 + 52));
  v78 = (uint64_t *)(v77 + OBJC_IVAR____TtC8ShelfKit27LibraryEpisodeContextAction_episodeUuid);
  *v78 = v64;
  v78[1] = v175;
  v79 = (_QWORD *)(v77 + OBJC_IVAR____TtC8ShelfKit27LibraryEpisodeContextAction_stationUuid);
  v80 = v172;
  *v79 = v160;
  v79[1] = v80;
  v148(v69, 1, 1, v157);
  swift_retain_n(v75, 3);
  swift_bridgeObjectRetain();
  v81 = swift_bridgeObjectRetain();
  v82 = static ActionMetrics.notInstrumented.getter(v81);
  UUID.init()(v82);
  v83 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
  v85 = v84;
  ((void (*)(_BYTE *, uint64_t))v158)(v57, v173);
  *(_QWORD *)(v77 + 16) = v83;
  *(_QWORD *)(v77 + 24) = v85;
  *(_QWORD *)(v77 + 32) = 0;
  *(_QWORD *)(v77 + 40) = 0;
  *(_BYTE *)(v77 + 48) = 32;
  v74(v77 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v26, v68);
  v130 = v77;
  sub_23AB8((uint64_t)v69, v77 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics);
  v172 = *(_QWORD *)(v29 + OBJC_IVAR____TtC8ShelfKit20LibraryEpisodeLockup_podcastAdamId);
  v86 = *(_QWORD *)(v29 + OBJC_IVAR____TtC8ShelfKit20LibraryEpisodeLockup_podcastUuid + 8);
  v160 = *(_QWORD *)(v29 + OBJC_IVAR____TtC8ShelfKit20LibraryEpisodeLockup_podcastUuid);
  v161 = *(_BYTE **)(v29 + OBJC_IVAR____TtC8ShelfKit20LibraryEpisodeLockup_channelAdamId);
  LODWORD(v159) = *(unsigned __int8 *)(v29 + OBJC_IVAR____TtC8ShelfKit20LibraryEpisodeLockup_channelAdamId + 8);
  v158 = *(_QWORD **)(v29 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup_adamId);
  LODWORD(v157) = *(unsigned __int8 *)(v29 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_episodeType);
  v150 = *(_QWORD *)(v29 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_duration);
  LODWORD(v149) = *(unsigned __int8 *)(v29 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_duration + 8);
  v148 = *(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(v29
                                                                    + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_seasonNumber);
  v147 = *(unsigned __int8 *)(v29 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_seasonNumber + 8);
  v146 = *(_QWORD *)(v29 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_episodeNumber);
  v145 = *(unsigned __int8 *)(v29 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_episodeNumber + 8);
  v144 = *(unsigned __int8 *)(v29 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_mediaType);
  sub_267BC(v29 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup_icon, (uint64_t)v164, &qword_3BEB70);
  sub_267BC(v29 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_showUberArtwork, (uint64_t)v165, &qword_3BEB70);
  sub_267BC(v29 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_episodeArtwork, (uint64_t)v166, &qword_3BEB70);
  v87 = *(_QWORD *)(v29 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup_title + 8);
  v143 = *(_QWORD *)(v29 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup_title);
  v88 = *(_QWORD *)(v29 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup_subtitles);
  v89 = *(_QWORD *)(v29 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup_ordinal + 8);
  v140 = *(_QWORD *)(v29 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup_ordinal);
  v138 = *(unsigned int *)(v29 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup_rating);
  v137 = *(unsigned __int8 *)(v29 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup_rating + 4);
  v180[3] = type metadata accessor for Action(0);
  v180[4] = sub_179A4C();
  v180[0] = v75;
  v90 = v29 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup__subtitleAction;
  swift_beginAccess(v29 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup__subtitleAction, v179, 0, 0);
  v91 = v151;
  sub_267BC(v90, (uint64_t)v151, &qword_3B3C88);
  v139 = v89;
  swift_bridgeObjectRetain();
  v173 = v75;
  swift_retain_n(v75, 2);
  swift_bridgeObjectRetain();
  v162 = v86;
  swift_bridgeObjectRetain();
  swift_retain();
  v142 = v87;
  swift_bridgeObjectRetain();
  v141 = v88;
  swift_bridgeObjectRetain();
  Lazy.wrappedValue.getter(&v177, v152);
  sub_1459C((uint64_t)v91, &qword_3B3C88);
  swift_release(v29);
  v152 = v177;
  v92 = *(void **)(v29 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_summary);
  v135 = *(unsigned __int8 *)(v29 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup_isExplicit);
  v134 = *(unsigned __int8 *)(v29 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_showTypeIsSerial);
  v93 = *(_BYTE *)(v29 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_playedTextStyle);
  v94 = *(_QWORD *)(v29 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_caption + 8);
  v151 = *(_BYTE **)(v29 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_caption);
  v178 = v93;
  sub_267BC(v29 + OBJC_IVAR____TtC8ShelfKit20LibraryEpisodeLockup_assetFileUrl, (uint64_t)v167, &qword_3B4370);
  v95 = *(_QWORD *)(v29 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup_lazyReleaseDate);
  v136 = v94;
  if (v95)
  {
    v96 = v92;
    swift_retain();
    swift_bridgeObjectRetain();
    LazyDate.value.getter(v168);
    swift_release(v29);
  }
  else
  {
    v97 = type metadata accessor for Date(0);
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v97 - 8) + 56))(v168, 1, 1, v97);
    v98 = v92;
    swift_bridgeObjectRetain();
  }
  v99 = v170;
  v100 = v154;
  v154 = v92;
  v133 = *(_QWORD *)(v29 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_episodeEntitlementState);
  v132 = *(unsigned __int8 *)(v29 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_hasFreeVersion);
  v101 = *(_QWORD *)(v29 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_subscriptionName + 8);
  v131 = *(_QWORD *)(v29 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_subscriptionName);
  v102 = *(_QWORD *)(v29 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_channelName + 8);
  v129 = *(_QWORD *)(v29 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_channelName);
  v103 = *(_QWORD *)(v29 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_showTitle + 8);
  v128 = *(_QWORD *)(v29 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_showTitle);
  sub_267BC(v29 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_listenNowReason, (uint64_t)v169, &qword_3B81E8);
  v104 = type metadata accessor for SectionContext(0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(*(_QWORD *)(v104 - 8) + 48))(v100, 1, v104) == 1)
  {
    v105 = type metadata accessor for EyebrowBuilder.ListContext(0);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v105 - 8) + 56))(v99, 1, 1, v105);
  }
  else
  {
    sub_267BC((uint64_t)v100, (uint64_t)v99, &qword_3BD250);
    v106 = enum case for EyebrowBuilder.ListContext.show(_:);
    v107 = type metadata accessor for EyebrowBuilder.ListContext(0);
    v108 = *(_QWORD *)(v107 - 8);
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v108 + 104))(v99, v106, v107);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v108 + 56))(v99, 0, 1, v107);
  }
  v127 = *(_QWORD *)(v29 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_referenceTime);
  v126 = *(unsigned __int8 *)(v29 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_referenceTime + 8);
  v109 = *(_QWORD *)(v29 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_playerTime);
  v110 = *(_BYTE *)(v29 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_playerTime + 8);
  v111 = v29 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup__impressionMetrics;
  swift_beginAccess(v29 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup__impressionMetrics, &v177, 0, 0);
  v112 = v111;
  v113 = v155;
  sub_267BC(v112, (uint64_t)v155, &qword_3BA270);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v114 = v101;
  v115 = v174;
  Lazy.wrappedValue.getter(v174, v156);
  sub_1459C((uint64_t)v113, &qword_3BA270);
  swift_release(v29);
  v116 = type metadata accessor for LibraryEpisodeLockup(0);
  swift_allocObject(v116, *(unsigned int *)(v116 + 48), *(unsigned __int16 *)(v116 + 52));
  v117 = v171;
  swift_retain();
  v118 = v130;
  swift_retain();
  v176 = v137;
  v124 = v110;
  v123 = v103;
  v119 = v154;
  v120 = v173;
  v121 = sub_109128(v163, v175, v160, v162, v172, (uint64_t)v161, v159, v158, 0, v157, v150, (char)v149, (uint64_t)v148, v147, v146, v145, v144, (uint64_t)v164, (uint64_t)v165,
           (uint64_t)v166,
           v143,
           v142,
           v141,
           v140,
           v139,
           v138 | ((unint64_t)v137 << 32),
           v153,
           (uint64_t)v180,
           0,
           v173,
           v117,
           v118,
           v173,
           v173,
           v152,
           (uint64_t)v151,
           v136,
           v154,
           v135,
           v134,
           0,
           &v178,
           (uint64_t)v167,
           (uint64_t)v168,
           v133,
           v132,
           v131,
           v114,
           v129,
           v102,
           v128,
           v123,
           3u,
           (uint64_t)v169,
           (uint64_t)v170,
           v127,
           v126,
           v109,
           v124,
           (uint64_t)v115);
  swift_release(v29);
  swift_release(v118);
  swift_release(v117);
  swift_release_n(v120, 4);

  return v121;
}

uint64_t sub_1788B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  id v70;
  uint64_t v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  int v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  int v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  int v100;
  _QWORD *v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  unsigned __int8 v121;
  _QWORD v122[3];
  _QWORD v123[3];
  _QWORD v124[3];
  uint64_t v125;
  __int128 v126;
  __int128 v127;
  unint64_t v128;
  _BYTE v129[24];
  _BYTE v130[24];
  uint64_t v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  uint64_t v135;
  char v136;

  v1 = v0;
  v112 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BA270);
  __chkstk_darwin(v112);
  v110 = (uint64_t)&v65 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v3);
  v113 = (uint64_t *)((char *)&v65 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B24F8);
  __chkstk_darwin(v5);
  v111 = (uint64_t)&v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B81E8);
  __chkstk_darwin(v7);
  v118 = (uint64_t)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3D88);
  __chkstk_darwin(v9);
  v117 = (uint64_t)&v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
  __chkstk_darwin(v11);
  v115 = (uint64_t)&v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
  __chkstk_darwin(v13);
  v116 = (uint64_t)&v65 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v114 = (uint64_t)&v65 - v16;
  __chkstk_darwin(v17);
  v19 = (char *)&v65 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3C88);
  v80 = v20;
  __chkstk_darwin(v20);
  v22 = (char *)&v65 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0CC8);
  __chkstk_darwin(v23);
  v25 = (char *)&v65 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BD250);
  __chkstk_darwin(v26);
  v28 = (char *)&v65 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v131 = 1;
  v132 = 0u;
  v133 = 0u;
  v134 = 0u;
  v135 = 0;
  v136 = 9;
  v29 = type metadata accessor for SectionContext(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v28, 1, 1, v29);
  EpisodeListSettings.init(_:sort:pubDateLimit:hidePlayedEpisodes:hideTrailers:hideVideoEpisodes:)(&v131, 17, 3, 0, 0, 0);
  v30 = type metadata accessor for EpisodeListSettings(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v25, 0, 1, v30);
  v31 = sub_17783C((uint64_t)v25, v28);
  sub_1459C((uint64_t)v25, &qword_3B0CC8);
  sub_1459C((uint64_t)v28, &qword_3BD250);
  v32 = v31 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup__playAction;
  swift_beginAccess(v31 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup__playAction, v130, 0, 0);
  v83 = v32;
  sub_267BC(v32, (uint64_t)v22, &qword_3B3C88);
  swift_retain();
  Lazy.wrappedValue.getter(&v126, v20);
  sub_1459C((uint64_t)v22, &qword_3B3C88);
  swift_release(v31);
  v119 = v126;
  v33 = *(_QWORD *)(v1 + 72);
  v108 = *(_QWORD *)(v1 + 64);
  v106 = *(_QWORD *)(v31 + OBJC_IVAR____TtC8ShelfKit20LibraryEpisodeLockup_podcastAdamId);
  v34 = *(_QWORD *)(v31 + OBJC_IVAR____TtC8ShelfKit20LibraryEpisodeLockup_podcastUuid + 8);
  v35 = *(_QWORD *)(v31 + OBJC_IVAR____TtC8ShelfKit20LibraryEpisodeLockup_channelAdamId);
  v103 = *(_QWORD *)(v31 + OBJC_IVAR____TtC8ShelfKit20LibraryEpisodeLockup_podcastUuid);
  v104 = v35;
  v102 = *(unsigned __int8 *)(v31 + OBJC_IVAR____TtC8ShelfKit20LibraryEpisodeLockup_channelAdamId + 8);
  v101 = *(_QWORD **)(v31 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup_adamId);
  v100 = *(unsigned __int8 *)(v31 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_episodeType);
  v99 = *(_QWORD *)(v31 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_duration);
  v98 = *(unsigned __int8 *)(v31 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_duration + 8);
  v97 = *(_QWORD *)(v31 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_seasonNumber);
  v96 = *(unsigned __int8 *)(v31 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_seasonNumber + 8);
  v95 = *(_QWORD *)(v31 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_episodeNumber);
  v36 = *(unsigned __int8 *)(v31 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_episodeNumber + 8);
  v93 = *(unsigned __int8 *)(v31 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_mediaType);
  v94 = v36;
  v109 = v19;
  sub_267BC(v31 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup_icon, (uint64_t)v19, &qword_3BEB70);
  sub_267BC(v31 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_showUberArtwork, v114, &qword_3BEB70);
  sub_267BC(v31 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_episodeArtwork, v116, &qword_3BEB70);
  v37 = *(_QWORD *)(v31 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup_title + 8);
  v92 = *(_QWORD *)(v31 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup_title);
  v38 = *(_QWORD *)(v31 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup_subtitles);
  v39 = *(_QWORD *)(v31 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup_ordinal + 8);
  v89 = *(_QWORD *)(v31 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup_ordinal);
  v87 = *(unsigned int *)(v31 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup_rating);
  v86 = *(unsigned __int8 *)(v31 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup_rating + 4);
  v40 = v31 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup__buttonAction;
  swift_beginAccess(v31 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup__buttonAction, v129, 0, 0);
  sub_267BC(v40, (uint64_t)v22, &qword_3B3C88);
  v88 = v39;
  swift_bridgeObjectRetain();
  swift_retain();
  v107 = v33;
  swift_bridgeObjectRetain();
  v105 = v34;
  swift_bridgeObjectRetain();
  v91 = v37;
  swift_bridgeObjectRetain();
  v90 = v38;
  v41 = v80;
  swift_bridgeObjectRetain();
  Lazy.wrappedValue.getter(&v126, v41);
  sub_1459C((uint64_t)v22, &qword_3B3C88);
  swift_release(v31);
  v85 = v126;
  v42 = v119;
  if (v119)
  {
    *((_QWORD *)&v127 + 1) = type metadata accessor for Action(0);
    v128 = sub_179A4C();
    *(_QWORD *)&v126 = v42;
  }
  else
  {
    v128 = 0;
    v126 = 0u;
    v127 = 0u;
  }
  v43 = v31 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup__titleAction;
  swift_beginAccess(v31 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup__titleAction, &v125, 0, 0);
  sub_267BC(v43, (uint64_t)v22, &qword_3B3C88);
  swift_retain();
  v119 = v42;
  swift_retain();
  Lazy.wrappedValue.getter(v124, v41);
  sub_1459C((uint64_t)v22, &qword_3B3C88);
  swift_release(v31);
  v84 = v124[0];
  sub_267BC(v83, (uint64_t)v22, &qword_3B3C88);
  swift_retain();
  Lazy.wrappedValue.getter(v124, v41);
  sub_1459C((uint64_t)v22, &qword_3B3C88);
  swift_release(v31);
  v83 = v124[0];
  v44 = v31 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup__contextAction;
  swift_beginAccess(v31 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup__contextAction, v124, 0, 0);
  sub_267BC(v44, (uint64_t)v22, &qword_3B3C88);
  swift_retain();
  Lazy.wrappedValue.getter(v123, v41);
  sub_1459C((uint64_t)v22, &qword_3B3C88);
  swift_release(v31);
  v82 = v123[0];
  v81 = *(_QWORD *)(v31 + OBJC_IVAR____TtC8ShelfKit20LibraryEpisodeLockup_presentDetailsAction);
  v45 = v31 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup__subtitleAction;
  swift_beginAccess(v31 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup__subtitleAction, v123, 0, 0);
  sub_267BC(v45, (uint64_t)v22, &qword_3B3C88);
  swift_retain();
  swift_retain();
  Lazy.wrappedValue.getter(v122, v41);
  sub_1459C((uint64_t)v22, &qword_3B3C88);
  swift_release(v31);
  v80 = v122[0];
  v46 = *(_QWORD *)(v31 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_caption + 8);
  v79 = *(_QWORD *)(v31 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_caption);
  v70 = *(id *)(v31 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_summary);
  v78 = *(unsigned __int8 *)(v31 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup_isExplicit);
  v77 = *(unsigned __int8 *)(v31 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_showTypeIsSerial);
  sub_267BC(v31 + OBJC_IVAR____TtC8ShelfKit20LibraryEpisodeLockup_assetFileUrl, v115, &qword_3B4370);
  v47 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 56))(v117, 1, 1, v47);
  v76 = *(_QWORD *)(v31 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_episodeEntitlementState);
  v75 = *(unsigned __int8 *)(v31 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_hasFreeVersion);
  v48 = *(_QWORD *)(v31 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_subscriptionName + 8);
  v74 = *(_QWORD *)(v31 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_subscriptionName);
  v49 = *(_QWORD *)(v31 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_channelName + 8);
  v73 = *(_QWORD *)(v31 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_channelName);
  v50 = *(_QWORD *)(v31 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_showTitle + 8);
  v71 = *(_QWORD *)(v31 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_showTitle);
  v65 = v50;
  v51 = type metadata accessor for EpisodeListenNowReason(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 56))(v118, 1, 1, v51);
  v52 = v111;
  sub_267BC(v31 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_listContext, v111, &qword_3B24F8);
  v69 = *(_QWORD *)(v31 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_referenceTime);
  v68 = *(unsigned __int8 *)(v31 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_referenceTime + 8);
  v67 = *(_QWORD *)(v31 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_playerTime);
  v66 = *(unsigned __int8 *)(v31 + OBJC_IVAR____TtC8ShelfKit19LegacyEpisodeLockup_playerTime + 8);
  v53 = v31 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup__impressionMetrics;
  swift_beginAccess(v31 + OBJC_IVAR____TtC8ShelfKit12LegacyLockup__impressionMetrics, v122, 0, 0);
  v54 = v53;
  v55 = v110;
  sub_267BC(v54, v110, &qword_3BA270);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  v56 = v70;
  v72 = v70;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v57 = v113;
  Lazy.wrappedValue.getter(v113, v112);
  sub_1459C(v55, &qword_3BA270);
  swift_release(v31);
  v121 = 0;
  v58 = type metadata accessor for LibraryEpisodeLockup(0);
  swift_allocObject(v58, *(unsigned int *)(v58 + 48), *(unsigned __int16 *)(v58 + 52));
  v120 = v86;
  v64 = (uint64_t)v57;
  v63 = v56;
  v59 = v81;
  v60 = v84;
  v61 = sub_109128(v108, v107, v103, v105, v106, v104, v102, v101, 0, v100, v99, v98, v97, v96, v95, v94, v93, (uint64_t)v109, v114,
          v116,
          v92,
          v91,
          v90,
          v89,
          v88,
          v87 | ((unint64_t)v86 << 32),
          v85,
          (uint64_t)&v126,
          v84,
          0,
          v83,
          v82,
          0,
          v81,
          v80,
          v79,
          v46,
          v63,
          v78,
          v77,
          0,
          &v121,
          v115,
          v117,
          v76,
          v75,
          v74,
          v48,
          v73,
          v49,
          v71,
          v65,
          3u,
          v118,
          v52,
          v69,
          v68,
          v67,
          v66,
          v64);
  swift_release(v31);
  swift_release(v119);
  swift_release(v59);

  swift_release(v60);
  return v61;
}

uint64_t sub_1794D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  id v46;
  Swift::String v47;
  Swift::String v48;
  Swift::String v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int16 v67;
  Swift::String v68;

  v1 = v0;
  v61 = type metadata accessor for FlowDestination(0);
  __chkstk_darwin(v61);
  v3 = (char *)&v56 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for ScalarDictionary(0);
  __chkstk_darwin(v4);
  v60 = (char *)&v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for MetricsData.Configuration(0);
  v58 = *(_QWORD *)(v6 - 8);
  v59 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
  __chkstk_darwin(v9);
  v11 = (char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for ActionMetrics(0);
  v64 = *(_QWORD *)(v12 - 8);
  v65 = v12;
  __chkstk_darwin(v12);
  v62 = (char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v14);
  v63 = (char *)&v56 - v16;
  if ((*(_BYTE *)(v0 + 24) & 1) != 0)
  {
    v57 = static MetricsTargetID.rssEpisode.getter(v15);
    v18 = v17;
    v56 = static MetricsTargetType.lockup.getter(v57, v17);
    v20 = v19;
    v21 = type metadata accessor for URL(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v11, 1, 1, v21);
    v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0930);
    v23 = *(_QWORD *)(type metadata accessor for MetricsData(0) - 8);
    v24 = swift_allocObject(v22, ((*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80))+ *(_QWORD *)(v23 + 72), *(unsigned __int8 *)(v23 + 80) | 7);
    *(_OWORD *)(v24 + 16) = xmmword_2EA0D0;
    v25 = static MetricsActionType.navigate.getter();
    v27 = v26;
    static MetricsData.Configuration.podcasts.getter(v25);
    static MetricsData.clickData(targetID:targetType:actionType:actionContext:actionResult:actionURL:fields:configuration:)(v57, v18, v56, v20, v25, v27, 0, 0, 0, 0, v11, &_swiftEmptyDictionarySingleton, v8);
  }
  else
  {
    v66 = *(_QWORD *)(v0 + 16);
    v28 = sub_144B4();
    v57 = BinaryInteger.description.getter(&type metadata for UInt64, v28);
    v30 = v29;
    v56 = static MetricsTargetType.lockup.getter(v57, v29);
    v32 = v31;
    v33 = type metadata accessor for URL(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v11, 1, 1, v33);
    v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0930);
    v35 = *(_QWORD *)(type metadata accessor for MetricsData(0) - 8);
    v24 = swift_allocObject(v34, ((*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80))+ *(_QWORD *)(v35 + 72), *(unsigned __int8 *)(v35 + 80) | 7);
    *(_OWORD *)(v24 + 16) = xmmword_2EA0D0;
    v36 = static MetricsActionType.navigate.getter();
    v38 = v37;
    static MetricsData.Configuration.podcasts.getter(v36);
    static MetricsData.clickData(targetID:targetType:actionType:actionContext:actionResult:actionURL:fields:configuration:)(v57, v30, v56, v32, v36, v38, 0, 0, 0, 0, v11, &_swiftEmptyDictionarySingleton, v8);
  }
  swift_bridgeObjectRelease();
  v39 = (*(uint64_t (**)(char *, uint64_t))(v58 + 8))(v8, v59);
  v40 = v60;
  ScalarDictionary.init()(v39);
  v41 = v63;
  ActionMetrics.init(data:custom:)(v24, v40);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1459C((uint64_t)v11, &qword_3B4370);
  v42 = *(_QWORD *)(v1 + 72);
  v43 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit14StationEpisode_stationUuid);
  v44 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8ShelfKit14StationEpisode_stationUuid + 8);
  *(_QWORD *)v3 = *(_QWORD *)(v1 + 64);
  *((_QWORD *)v3 + 1) = v42;
  *((_QWORD *)v3 + 2) = v43;
  *((_QWORD *)v3 + 3) = v44;
  *((_QWORD *)v3 + 4) = 0;
  v3[40] = 1;
  *((_QWORD *)v3 + 6) = 0;
  v3[56] = 1;
  swift_storeEnumTagMultiPayload(v3, v61, 9);
  v45 = (void *)objc_opt_self(NSBundle);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v46 = objc_msgSend(v45, "mainBundle");
  v68._object = (void *)0xE000000000000000;
  v47._object = (void *)0x8000000000312170;
  v47._countAndFlagsBits = 0xD00000000000001BLL;
  v48._countAndFlagsBits = 0;
  v48._object = (void *)0xE000000000000000;
  v68._countAndFlagsBits = 0;
  v49 = NSLocalizedString(_:tableName:bundle:value:comment:)(v47, (Swift::String_optional)0, (NSBundle)v46, v48, v68);

  v51 = v64;
  v50 = v65;
  v52 = (uint64_t)v62;
  (*(void (**)(char *, char *, uint64_t))(v64 + 16))(v62, v41, v65);
  v67 = 0;
  v53 = type metadata accessor for FlowAction(0);
  swift_allocObject(v53, *(unsigned int *)(v53 + 48), *(unsigned __int16 *)(v53 + 52));
  v54 = FlowAction.init(_:id:title:presentationContext:animationBehavior:presentationStyle:destinationPageHeader:actionMetrics:)((uint64_t)v3, 0, 0, v49._countAndFlagsBits, (uint64_t)v49._object, (char *)&v67 + 1, 0, 48, (char *)&v67, v52);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v41, v50);
  return v54;
}

uint64_t sub_1799BC()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit14StationEpisode_stationUuid + 8));
}

uint64_t StationEpisode.deinit()
{
  uint64_t v0;

  v0 = Episode.deinit();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t StationEpisode.__deallocating_deinit()
{
  uint64_t v0;

  v0 = Episode.deinit();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

unint64_t sub_179A4C()
{
  unint64_t result;

  result = qword_3B28E8;
  if (!qword_3B28E8)
  {
    type metadata accessor for Action(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for Action);
    atomic_store(result, (unint64_t *)&qword_3B28E8);
  }
  return result;
}

uint64_t sub_179A94()
{
  return type metadata accessor for StationEpisode(0);
}

uint64_t type metadata accessor for StationEpisode(uint64_t a1)
{
  uint64_t result;

  result = qword_3BE1F8;
  if (!qword_3BE1F8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for StationEpisode);
  return result;
}

uint64_t sub_179AD8(uint64_t a1)
{
  void *v2;

  v2 = &unk_2FA100;
  return swift_updateClassMetadata2(a1, 256, 1, &v2, a1 + 432);
}

uint64_t method lookup function for StationEpisode(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for StationEpisode);
}

uint64_t dispatch thunk of StationEpisode.__allocating_init(title:numberedTitle:uuid:podcastUuid:podcastAdamId:stationUuid:adamId:channelAdamId:channelName:artwork:episodeArtwork:author:summary:releaseDate:streamUrl:assetUrl:mediaType:isExplicit:guid:duration:seasonNumber:episodeNumber:episodeType:showTitle:showTypeIsSerial:showTypeSetting:listenNowReason:episodeEntitlementState:hasFreeVersion:subscriptionName:storeTrackId:upNextScore:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46)
{
  uint64_t v46;

  LOBYTE(a40) = a40 & 1;
  LOBYTE(a35) = a35 & 1;
  LOBYTE(a33) = a33 & 1;
  LOBYTE(a31) = a31 & 1;
  LOBYTE(a10) = a10 & 1;
  LOBYTE(a14) = a14 & 1;
  LOBYTE(a16) = a16 & 1;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v46 + 440))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46);
}

uint64_t dispatch thunk of StationEpisode.__allocating_init(title:numberedTitle:uuid:podcastUuid:podcastAdamId:adamId:channelAdamId:channelName:artwork:showUberArtwork:episodeArtwork:author:summary:releaseDate:streamUrl:assetUrl:mediaType:isExplicit:guid:duration:seasonNumber:episodeNumber:episodeType:showTitle:showDisplayType:showTypeIsSerial:showTypeSetting:listenNowReason:episodeEntitlementState:hasFreeVersion:subscriptionName:storeTrackId:upNextScore:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  uint64_t v45;

  LOBYTE(a39) = a39 & 1;
  LOBYTE(a34) = a34 & 1;
  LOBYTE(a32) = a32 & 1;
  LOBYTE(a30) = a30 & 1;
  LOBYTE(a10) = a10 & 1;
  LOBYTE(a12) = a12 & 1;
  LOBYTE(a14) = a14 & 1;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v45 + 448))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45);
}

uint64_t Action.init(uniqueId:title:presentationStyle:actionMetrics:impressionMetrics:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;

  v8 = v7;
  v25 = a7;
  v15 = type metadata accessor for UUID(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v19 = (char *)&v24 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a2)
  {
    UUID.init()(v17);
    a1 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
    a2 = v20;
    (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);
  }
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)(v8 + 24) = a2;
  *(_QWORD *)(v8 + 32) = a3;
  *(_QWORD *)(v8 + 40) = a4;
  *(_BYTE *)(v8 + 48) = a5;
  v21 = v8 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics;
  v22 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v21, a6, v22);
  sub_23AB8(v25, v8 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics);
  return v8;
}

uint64_t Action.init(deserializing:using:)(char *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  void (*v42)(char *, uint64_t, uint64_t);
  uint64_t v43;
  char *v44;
  void (*v45)(char *, uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t (*v61)(char *, uint64_t);
  uint64_t v62;
  uint64_t v63;
  char v64;
  char v65;

  v59 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v3);
  v58 = (char *)&v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BE3F0);
  __chkstk_darwin(v5);
  v54 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = type metadata accessor for ActionMetrics(0);
  v53 = *(_QWORD *)(v56 - 8);
  __chkstk_darwin(v56);
  v52 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = type metadata accessor for JSONContext(0);
  v63 = *(_QWORD *)(v57 - 8);
  __chkstk_darwin(v57);
  v9 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v51 - 8);
  __chkstk_darwin(v51);
  v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for JSONObject(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)&v49 - v18;
  v60 = a1;
  v20 = JSONObject.subscript.getter(0x6449657571696E75, 0xE800000000000000);
  v21 = JSONObject.string.getter(v20);
  v23 = v22;
  v61 = *(uint64_t (**)(char *, uint64_t))(v14 + 8);
  v62 = v13;
  v24 = v61(v19, v13);
  if (!v23)
  {
    UUID.init()(v24);
    v21 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
    v23 = v25;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v51);
  }
  v26 = v55;
  *(_QWORD *)(v55 + 16) = v21;
  *(_QWORD *)(v26 + 24) = v23;
  v27 = v60;
  v28 = JSONObject.subscript.getter(0x656C746974, 0xE500000000000000);
  v29 = JSONObject.string.getter(v28);
  v31 = v30;
  v61(v17, v62);
  *(_QWORD *)(v26 + 32) = v29;
  *(_QWORD *)(v26 + 40) = v31;
  JSONObject.subscript.getter(0xD000000000000011, 0x800000000030B110);
  v32 = *(void (**)(char *, uint64_t, uint64_t))(v63 + 16);
  v33 = v59;
  v34 = v57;
  v32(v9, v59, v57);
  sub_3CFF0();
  ExpressibleByJSON.init(tryDeserializing:using:)(v17, v9, &type metadata for Link.Presentation);
  v35 = v64;
  if (v65)
    v35 = 0;
  *(_BYTE *)(v26 + 48) = v35;
  JSONObject.subscript.getter(0x654D6E6F69746361, 0xED00007363697274);
  v51 = (uint64_t)v32;
  v32(v9, v33, v34);
  v36 = (uint64_t)v54;
  v37 = v56;
  ExpressibleByJSON.init(tryDeserializing:using:)(v17, v9, v56);
  v38 = v53;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v53 + 48))(v36, 1, v37) == 1)
  {
    v50 = v9;
    v39 = v38;
    v40 = v52;
    static ActionMetrics.notInstrumented.getter();
    sub_1459C(v36, &qword_3BE3F0);
    v41 = v40;
    v42 = *(void (**)(char *, uint64_t, uint64_t))(v39 + 32);
    v9 = v50;
  }
  else
  {
    v42 = *(void (**)(char *, uint64_t, uint64_t))(v38 + 32);
    v43 = v36;
    v44 = v52;
    v42(v52, v43, v37);
    v41 = v44;
  }
  v45 = (void (*)(char *, uint64_t, uint64_t))v51;
  v42((char *)(v26 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics), (uint64_t)v41, v37);
  v46 = type metadata accessor for ImpressionMetrics(0);
  JSONObject.subscript.getter(0xD000000000000011, 0x8000000000309180);
  v45(v9, v33, v34);
  v47 = (uint64_t)v58;
  ExpressibleByJSON.init(tryDeserializing:using:)(v17, v9, v46);
  (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v33, v34);
  v61(v27, v62);
  sub_23AB8(v47, v26 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics);
  return v26;
}

uint64_t Action.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics;
  v2 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_1459C(v0 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics, (uint64_t *)&unk_3B8790);
  return v0;
}

uint64_t sub_17A49C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = v1 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics;
  swift_beginAccess(v3, v6, 0, 0);
  v4 = type metadata accessor for ActionMetrics(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_17A500(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = v1 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics;
  swift_beginAccess(v3, v6, 33, 0);
  v4 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
  return swift_endAccess(v6);
}

uint64_t (*sub_17A56C(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t static Action.tryToMakeInstances(byDeserializing:using:)()
{
  type metadata accessor for Action(0);
  return JSONArray.compactMap<A>(_:)(sub_9105C);
}

uint64_t Header.displaySubtitleAsEyebrow.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 48);
}

uint64_t sub_17A610@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = *a1 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics;
  swift_beginAccess(v3, v6, 0, 0);
  v4 = type metadata accessor for ActionMetrics(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, v3, v4);
}

uint64_t sub_17A678(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE v11[24];

  v4 = type metadata accessor for ActionMetrics(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v11[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  v8 = *a2 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics;
  swift_beginAccess(v8, v11, 33, 0);
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v5 + 40))(v8, v7, v4);
  return swift_endAccess(v11);
}

uint64_t Action.impressionMetrics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_267BC(v1 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics, a1, (uint64_t *)&unk_3B8790);
}

uint64_t Action.__allocating_init(uniqueId:title:presentationStyle:actionMetrics:impressionMetrics:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;

  v8 = v7;
  v26 = a7;
  v15 = type metadata accessor for UUID(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  v20 = v19;
  if (!a2)
  {
    UUID.init()(v19);
    a1 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
    a2 = v21;
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  }
  *(_QWORD *)(v20 + 16) = a1;
  *(_QWORD *)(v20 + 24) = a2;
  *(_QWORD *)(v20 + 32) = a3;
  *(_QWORD *)(v20 + 40) = a4;
  *(_BYTE *)(v20 + 48) = a5;
  v22 = v20 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics;
  v23 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v22, a6, v23);
  sub_23AB8(v26, v20 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics);
  return v20;
}

uint64_t Action.__allocating_init(deserializing:using:)(char *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  Action.init(deserializing:using:)(a1, a2);
  return v5;
}

uint64_t Action.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics;
  v2 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_1459C(v0 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics, (uint64_t *)&unk_3B8790);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_17A95C@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = *v1 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics;
  swift_beginAccess(v3, v6, 0, 0);
  v4 = type metadata accessor for ActionMetrics(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_17A9C4@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return sub_267BC(*v1 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics, a1, (uint64_t *)&unk_3B8790);
}

uint64_t sub_17A9F4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 152))();
  if (!v2)
    *a1 = result;
  return result;
}

uint64_t static Action.makeInstance(byDeserializing:using:)(uint64_t a1, uint64_t a2)
{
  return sub_17AC14(a1, a2);
}

uint64_t static Action.makeInstances(byDeserializing:using:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD v4[4];

  v4[3] = a2;
  v2 = type metadata accessor for Action(0);
  return JSONArray.map<A>(_:)(sub_17AEB0, v4, v2);
}

uint64_t sub_17AA8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[3];
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[5];

  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BBEE8);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((JSONObject.isNull.getter(v9) & 1) != 0)
  {
    result = 0;
  }
  else
  {
    result = sub_17AC14(a1, a2);
    if (v3)
    {
      static JSONContext.initFailureObserver.getter(result);
      v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BBEF0);
      JSONContext.subscript.getter(v20, v11, v13);
      (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
      sub_267BC((uint64_t)v20, (uint64_t)v17, &qword_3BBEF8);
      v14 = v18;
      if (v18)
      {
        v15 = v19;
        __swift_project_boxed_opaque_existential_1(v17, v18);
        v16 = type metadata accessor for Action(0);
        dispatch thunk of JSONInitFailureObserver.tryingToInitialize(_:didFailWith:)(v16, v3, v14, v15);
        swift_errorRelease(v3);
        sub_1459C((uint64_t)v20, &qword_3BBEF8);
        __swift_destroy_boxed_opaque_existential_1(v17);
      }
      else
      {
        sub_1459C((uint64_t)v20, &qword_3BBEF8);
        swift_errorRelease(v3);
        sub_1459C((uint64_t)v17, &qword_3BBEF8);
      }
      result = 0;
    }
  }
  *a3 = result;
  return result;
}

uint64_t sub_17AC14(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  _BYTE v10[40];
  _QWORD v11[5];
  uint64_t v12;

  static AnyActionTypes.makeInstance(byDeserializing:using:)(v11, a1, a2);
  if (!v3)
  {
    sub_150C8((uint64_t)v11, (uint64_t)v10);
    v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2E40);
    v2 = type metadata accessor for Action(0);
    if ((swift_dynamicCast(&v12, v10, v4, v2, 6) & 1) != 0)
    {
      v2 = v12;
    }
    else
    {
      v5 = type metadata accessor for JSONError(0);
      v6 = sub_1E468();
      swift_allocError(v5, v6, 0, 0);
      *v7 = v2;
      v7[1] = (uint64_t)_swiftEmptyArrayStorage;
      v8 = (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(v7, enum case for JSONError.malformedDocument(_:), v5);
      swift_willThrow(v8);
    }
    __swift_destroy_boxed_opaque_existential_1(v11);
  }
  return v2;
}

uint64_t _s8ShelfKit6ActionC17tryToMakeInstance15byDeserializing5usingACSg9JetEngine10JSONObjectV_AH11JSONContextVtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BBEE8);
  v5 = __chkstk_darwin(v4);
  v6 = JSONObject.isNull.getter(v5);
  result = 0;
  if ((v6 & 1) == 0)
    return sub_17AC14(a1, a2);
  return result;
}

uint64_t type metadata accessor for Action(uint64_t a1)
{
  uint64_t result;

  result = qword_3BE420;
  if (!qword_3BE420)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for Action);
  return result;
}

uint64_t sub_17AEB0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  result = sub_17AC14(a1, *(_QWORD *)(v2 + 24));
  if (!v3)
    *a2 = result;
  return result;
}

uint64_t sub_17AEE4()
{
  return type metadata accessor for Action(0);
}

void sub_17AEEC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[5];

  v6[0] = &unk_2FA1E0;
  v6[1] = &unk_2FA1F8;
  v6[2] = (char *)&value witness table for Builtin.Int8 + 64;
  v2 = type metadata accessor for ActionMetrics(319);
  if (v3 <= 0x3F)
  {
    v6[3] = *(_QWORD *)(v2 - 8) + 64;
    sub_34090(319);
    if (v5 <= 0x3F)
    {
      v6[4] = *(_QWORD *)(v4 - 8) + 64;
      swift_updateClassMetadata2(a1, 256, 5, v6, a1 + 80);
    }
  }
}

uint64_t method lookup function for Action(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for Action);
}

uint64_t dispatch thunk of Action.actionMetrics.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t StorePagePresenter.pageContent.getter()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(*(_QWORD *)(v0 + 24) + 40));
}

uint64_t StorePagePresenter.headerButtonItems.getter()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 40, v2, 0, 0);
  return swift_retain(*(_QWORD *)(v0 + 40));
}

uint64_t StorePagePresenter.headerButtonItems.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + 40, v5, 1, 0);
  v3 = *(_QWORD *)(v1 + 40);
  *(_QWORD *)(v1 + 40) = a1;
  return swift_release(v3);
}

uint64_t (*StorePagePresenter.headerButtonItems.modify(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + 40, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t StorePagePresenter.interactionContextPage.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v10[24];

  v3 = type metadata accessor for InteractionContext.Page(0);
  __chkstk_darwin(v3);
  v5 = &v10[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = *(_QWORD *)(v1 + 24);
  swift_beginAccess(v6 + 16, v10, 0, 0);
  v7 = *(_QWORD *)(v6 + 16);
  if ((*(_BYTE *)(v6 + 24) & 1) == 0 && !v7)
    return swift_storeEnumTagMultiPayload(a1, v3, 19);
  sub_14510(v7 + OBJC_IVAR____TtC8ShelfKit4Page_pageContext, (uint64_t)v5, (uint64_t (*)(_QWORD))&type metadata accessor for InteractionContext.Page);
  return sub_3C56C((uint64_t)v5, a1, (uint64_t (*)(_QWORD))&type metadata accessor for InteractionContext.Page);
}

uint64_t StorePagePresenter.interactionContextOrigin.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC8ShelfKit18StorePagePresenter_interactionContextOrigin;
  v4 = type metadata accessor for InteractionContext.Origin(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t StorePagePresenter.hasLoadedContent.getter()
{
  return sub_17B34C(&OBJC_IVAR____TtC8ShelfKit18StorePagePresenter_hasLoadedContent);
}

uint64_t StorePagePresenter.hasLoadedContent.setter(uint64_t a1)
{
  return sub_17B39C(a1, &OBJC_IVAR____TtC8ShelfKit18StorePagePresenter_hasLoadedContent);
}

uint64_t (*StorePagePresenter.hasLoadedContent.modify(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC8ShelfKit18StorePagePresenter_hasLoadedContent, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t StorePagePresenter.pageRender.getter()
{
  sub_32914(&qword_3BE4E8, &qword_3BE4F0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  return swift_retain();
}

uint64_t StorePagePresenter.appEntityAnnotation.getter()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit18StorePagePresenter_appEntityAnnotation));
}

uint64_t StorePagePresenter.refreshControls.getter()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit18StorePagePresenter_refreshControls));
}

uint64_t StorePagePresenter.refreshCommandTitle.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit18StorePagePresenter_refreshCommandTitle);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit18StorePagePresenter_refreshCommandTitle + 8));
  return v1;
}

uint64_t StorePagePresenter.filteringEnabled.getter()
{
  return sub_17B34C(&OBJC_IVAR____TtC8ShelfKit18StorePagePresenter_filteringEnabled);
}

uint64_t StorePagePresenter.filteringEnabled.setter(uint64_t a1)
{
  return sub_17B39C(a1, &OBJC_IVAR____TtC8ShelfKit18StorePagePresenter_filteringEnabled);
}

uint64_t (*StorePagePresenter.filteringEnabled.modify(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC8ShelfKit18StorePagePresenter_filteringEnabled, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t StorePagePresenter.filters.getter()
{
  return sub_17B34C(&OBJC_IVAR____TtC8ShelfKit18StorePagePresenter_filters);
}

uint64_t StorePagePresenter.filters.setter(uint64_t a1)
{
  return sub_17B39C(a1, &OBJC_IVAR____TtC8ShelfKit18StorePagePresenter_filters);
}

uint64_t (*StorePagePresenter.filters.modify(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC8ShelfKit18StorePagePresenter_filters, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t StorePagePresenter.selectedFilter.getter()
{
  return sub_17B34C(&OBJC_IVAR____TtC8ShelfKit18StorePagePresenter_selectedFilter);
}

uint64_t sub_17B34C(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  _BYTE v4[24];

  v2 = (_QWORD *)(v1 + *a1);
  swift_beginAccess(v2, v4, 0, 0);
  return swift_retain(*v2);
}

uint64_t StorePagePresenter.selectedFilter.setter(uint64_t a1)
{
  return sub_17B39C(a1, &OBJC_IVAR____TtC8ShelfKit18StorePagePresenter_selectedFilter);
}

uint64_t sub_17B39C(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  _BYTE v7[24];

  v4 = (uint64_t *)(v2 + *a2);
  swift_beginAccess(v4, v7, 1, 0);
  v5 = *v4;
  *v4 = a1;
  return swift_release(v5);
}

uint64_t (*StorePagePresenter.selectedFilter.modify(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC8ShelfKit18StorePagePresenter_selectedFilter, a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t StorePagePresenter.Configuration.pageURL.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_267BC(v1, a1, &qword_3B4370);
}

uint64_t StorePagePresenter.Configuration.pageURL.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_15B8C(a1, v1);
}

uint64_t StorePagePresenter.Configuration.page.getter()
{
  type metadata accessor for StorePagePresenter.Configuration(0);
  return swift_retain();
}

uint64_t type metadata accessor for StorePagePresenter.Configuration(uint64_t a1)
{
  return sub_1F9D4(a1, qword_3BE7B0, (uint64_t)&nominal type descriptor for StorePagePresenter.Configuration);
}

uint64_t StorePagePresenter.Configuration.page.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for StorePagePresenter.Configuration(0) + 20);
  result = swift_release(*(_QWORD *)(v1 + v3));
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

void (__swiftcall *StorePagePresenter.Configuration.page.modify())()
{
  type metadata accessor for StorePagePresenter.Configuration(0);
  return FindOrCreateEpisodeOfferContentIDsIntentsIntentImplementation.init();
}

uint64_t StorePagePresenter.Configuration.init(pageURL:page:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v6 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a3, 1, 1, v6);
  v7 = *(int *)(type metadata accessor for StorePagePresenter.Configuration(0) + 20);
  *(_QWORD *)(a3 + v7) = 0;
  sub_15B8C(a1, a3);
  result = swift_release(*(_QWORD *)(a3 + v7));
  *(_QWORD *)(a3 + v7) = a2;
  return result;
}

uint64_t StorePagePresenter.__allocating_init(asPartOf:with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  StorePagePresenter.init(asPartOf:with:)(a1, a2);
  return v5;
}

_QWORD *StorePagePresenter.init(asPartOf:with:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  Swift::String *v29;
  id v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  unint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t *v73;
  __n128 v74;
  unsigned int *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  void (*v80)(char *, _QWORD, uint64_t);
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _BYTE v91[24];
  char v92[24];
  char v93[24];
  _QWORD *v94;
  uint64_t v95;
  int v96;
  char v97;
  Swift::String v98;

  v3 = v2;
  v89 = a1;
  v90 = a2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
  __chkstk_darwin(v4);
  v84 = (char *)&v80 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID(0);
  v86 = *(_QWORD *)(v6 - 8);
  v87 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v80 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = type metadata accessor for ActionMetrics(0);
  v85 = *(_QWORD *)(v88 - 8);
  __chkstk_darwin(v88);
  v10 = (char *)&v80 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v11);
  v13 = (char *)&v80 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for ExtendedLaunchStatus(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v80 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2[4] = _swiftEmptyArrayStorage;
  v94 = _swiftEmptyArrayStorage;
  v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8780);
  swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
  v2[5] = CurrentValueSubject.init(_:)(&v94);
  v94 = 0;
  v95 = 0;
  v96 = 0;
  v97 = 5;
  v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8770);
  swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
  v2[6] = CurrentValueSubject.init(_:)(&v94);
  v20 = (char *)v2 + OBJC_IVAR____TtC8ShelfKit18StorePagePresenter_interactionContextOrigin;
  v21 = enum case for InteractionContext.Origin.store(_:);
  v22 = type metadata accessor for InteractionContext.Origin(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 104))(v20, v21, v22);
  v23 = OBJC_IVAR____TtC8ShelfKit18StorePagePresenter_hasLoadedContent;
  v82 = v15;
  v83 = v14;
  v80 = *(void (**)(char *, _QWORD, uint64_t))(v15 + 104);
  v80(v17, enum case for ExtendedLaunchStatus.loading(_:), v14);
  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4448);
  swift_allocObject(v24, *(unsigned int *)(v24 + 48), *(unsigned __int16 *)(v24 + 52));
  v81 = v17;
  *(_QWORD *)((char *)v3 + v23) = CurrentValueSubject.init(_:)(v17);
  v25 = OBJC_IVAR____TtC8ShelfKit18StorePagePresenter_appEntityAnnotation;
  v94 = 0;
  v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B63D0);
  swift_allocObject(v26, *(unsigned int *)(v26 + 48), *(unsigned __int16 *)(v26 + 52));
  *(_QWORD *)((char *)v3 + v25) = CurrentValueSubject.init(_:)(&v94);
  v27 = OBJC_IVAR____TtC8ShelfKit18StorePagePresenter_refreshControls;
  LOBYTE(v94) = 0;
  v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2770);
  swift_allocObject(v28, *(unsigned int *)(v28 + 48), *(unsigned __int16 *)(v28 + 52));
  *(_QWORD *)((char *)v3 + v27) = CurrentValueSubject.init(_:)(&v94);
  v29 = (Swift::String *)((char *)v3 + OBJC_IVAR____TtC8ShelfKit18StorePagePresenter_refreshCommandTitle);
  v30 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v98._object = (void *)0xE000000000000000;
  v31._countAndFlagsBits = 0x68736572666552;
  v31._object = (void *)0xE700000000000000;
  v32._countAndFlagsBits = 0;
  v32._object = (void *)0xE000000000000000;
  v98._countAndFlagsBits = 0;
  v33 = NSLocalizedString(_:tableName:bundle:value:comment:)(v31, (Swift::String_optional)0, (NSBundle)v30, v32, v98);

  *v29 = v33;
  v34 = OBJC_IVAR____TtC8ShelfKit18StorePagePresenter_filteringEnabled;
  LOBYTE(v94) = 0;
  v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B20D0);
  swift_allocObject(v35, *(unsigned int *)(v35 + 48), *(unsigned __int16 *)(v35 + 52));
  *(_QWORD *)((char *)v3 + v34) = CurrentValueSubject.init(_:)(&v94);
  v36 = OBJC_IVAR____TtC8ShelfKit18StorePagePresenter_filters;
  v94 = _swiftEmptyArrayStorage;
  v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BE4F8);
  swift_allocObject(v37, *(unsigned int *)(v37 + 48), *(unsigned __int16 *)(v37 + 52));
  *(_QWORD *)((char *)v3 + v36) = CurrentValueSubject.init(_:)(&v94);
  v38 = OBJC_IVAR____TtC8ShelfKit18StorePagePresenter_selectedFilter;
  v39 = type metadata accessor for ImpressionMetrics(0);
  v40 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v13, 1, 1, v39);
  static ActionMetrics.notInstrumented.getter(v40);
  v41 = type metadata accessor for Action(0);
  v42 = swift_allocObject(v41, *(unsigned int *)(v41 + 48), *(unsigned __int16 *)(v41 + 52));
  UUID.init()(v42);
  v43 = _s8ShelfKit8RoomUberV13shelfUniqueIdSSvg_0();
  v45 = v44;
  (*(void (**)(char *, uint64_t))(v86 + 8))(v8, v87);
  *(_QWORD *)(v42 + 16) = v43;
  *(_QWORD *)(v42 + 24) = v45;
  *(_OWORD *)(v42 + 32) = xmmword_2F64B0;
  *(_BYTE *)(v42 + 48) = 32;
  v46 = v89;
  (*(void (**)(uint64_t, char *, uint64_t))(v85 + 32))(v42 + OBJC_IVAR____TtC8ShelfKit6Action_actionMetrics, v10, v88);
  sub_23AB8((uint64_t)v13, v42 + OBJC_IVAR____TtC8ShelfKit6Action_impressionMetrics);
  v94 = (_QWORD *)v42;
  v47 = v90;
  v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BE500);
  swift_allocObject(v48, *(unsigned int *)(v48 + 48), *(unsigned __int16 *)(v48 + 52));
  *(_QWORD *)((char *)v3 + v38) = CurrentValueSubject.init(_:)(&v94);
  v3[2] = v46;
  v49 = *(_QWORD *)(v47 + *(int *)(type metadata accessor for StorePagePresenter.Configuration(0) + 20));
  swift_retain();
  if (v49)
  {
    swift_retain();
    v50 = sub_17D3B0();
    v52 = v51;
    v54 = v53;
    swift_release(v49);
    v55 = HIDWORD(v54);
  }
  else
  {
    v50 = 0;
    v52 = 0;
    LODWORD(v54) = 0;
    LOBYTE(v55) = 5;
  }
  v56 = (uint64_t)v84;
  v94 = (_QWORD *)v50;
  v95 = v52;
  v96 = v54;
  v97 = v55;
  CurrentValueSubject.value.setter(&v94);
  v57 = v47;
  sub_267BC(v47, v56, &qword_3B4370);
  v58 = type metadata accessor for StorePageProvider(0);
  swift_allocObject(v58, *(unsigned int *)(v58 + 48), *(unsigned __int16 *)(v58 + 52));
  swift_retain();
  swift_retain();
  v59 = StorePageProvider.init(asPartOf:pageURL:page:)(v46, v56, v49);
  v3[3] = v59;
  v60 = swift_allocObject(&unk_384C88, 24, 7);
  swift_weakInit(v60 + 16);
  swift_beginAccess(v59 + 48, &v94, 1, 0);
  v61 = *(_QWORD *)(v59 + 48);
  v62 = *(_QWORD *)(v59 + 56);
  *(_QWORD *)(v59 + 48) = sub_17D250;
  *(_QWORD *)(v59 + 56) = v60;
  sub_327A0(v61, v62);
  v63 = v3[3];
  v64 = swift_allocObject(&unk_384C88, 24, 7);
  swift_weakInit(v64 + 16);
  swift_beginAccess(v63 + 64, v93, 1, 0);
  v65 = *(_QWORD *)(v63 + 64);
  v66 = *(_QWORD *)(v63 + 72);
  *(_QWORD *)(v63 + 64) = sub_17D258;
  *(_QWORD *)(v63 + 72) = v64;
  sub_327A0(v65, v66);
  v67 = v3[3];
  swift_beginAccess(v67 + 16, v92, 0, 0);
  v68 = *(_QWORD *)(v67 + 16);
  v69 = *(unsigned __int8 *)(v67 + 24);
  v70 = *(_QWORD *)(v67 + 32);
  if (((v69 & 1) != 0 || v68) && (*(_BYTE *)(v68 + 80) & 8) != 0)
  {
    v72 = v57;
    if (!*(_BYTE *)(v67 + 24))
    {
      v91[0] = 0;
      j__swift_retain(v68);
      sub_17D260(v70);
      CurrentValueSubject.send(_:)();
      goto LABEL_15;
    }
    if (v70 == 1)
      v71 = 2;
    else
      v71 = 1;
  }
  else
  {
    v71 = 0;
    v72 = v57;
  }
  v91[0] = v71;
  j__swift_retain(v68);
  sub_17D260(v70);
  CurrentValueSubject.send(_:)();
  if (v69)
  {
    v73 = (_QWORD *)((char *)v3 + OBJC_IVAR____TtC8ShelfKit18StorePagePresenter_hasLoadedContent);
    v74 = swift_beginAccess((char *)v3 + OBJC_IVAR____TtC8ShelfKit18StorePagePresenter_hasLoadedContent, v91, 0, 0);
    v75 = (unsigned int *)&enum case for ExtendedLaunchStatus.finishedLoading(_:);
LABEL_17:
    v76 = *v73;
    v77 = v81;
    v78 = v83;
    ((void (*)(char *, _QWORD, uint64_t, __n128))v80)(v81, *v75, v83, v74);
    swift_retain();
    CurrentValueSubject.send(_:)();
    swift_release(v76);
    (*(void (**)(char *, uint64_t))(v82 + 8))(v77, v78);
    goto LABEL_18;
  }
LABEL_15:
  if (v70 >= 2)
  {
    v73 = (_QWORD *)((char *)v3 + OBJC_IVAR____TtC8ShelfKit18StorePagePresenter_hasLoadedContent);
    v74 = swift_beginAccess((char *)v3 + OBJC_IVAR____TtC8ShelfKit18StorePagePresenter_hasLoadedContent, v91, 0, 0);
    v75 = (unsigned int *)&enum case for ExtendedLaunchStatus.contentError(_:);
    goto LABEL_17;
  }
LABEL_18:
  swift_release(v46);
  sub_145D8(v72, type metadata accessor for StorePagePresenter.Configuration);
  j__swift_release(v68);
  sub_17D274(v70);
  return v3;
}

uint64_t sub_17BD74(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  _BYTE v6[24];

  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v6, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    sub_17BDD0(a1);
    return swift_release(v5);
  }
  return result;
}

uint64_t sub_17BDD0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  int v19;
  char v20;
  uint64_t v21;
  _QWORD *boxed_opaque_existential_2Tm;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  _QWORD v37[2];
  int v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3C40);
  __chkstk_darwin(v4);
  v34 = (uint64_t)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for HeaderButtonItem(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for InteractionContext.Page(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)&v33 - v13;
  __chkstk_darwin(v15);
  v17 = (char *)&v33 - v16;
  v37[0] = sub_17D3B0();
  v37[1] = v18;
  v38 = v19;
  v39 = v20;
  CurrentValueSubject.value.setter(v37);
  sub_17C708(a1);
  v42 = *(_QWORD *)(a1 + 72);
  v21 = type metadata accessor for Podcasts(0);
  v40 = v21;
  v41 = sub_F1C0((unint64_t *)&qword_3B33B8, (void (*)(uint64_t))&type metadata accessor for Podcasts, (uint64_t)&protocol conformance descriptor for Podcasts);
  boxed_opaque_existential_2Tm = __swift_allocate_boxed_opaque_existential_2Tm(v37);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v21 - 8) + 104))(boxed_opaque_existential_2Tm, enum case for Podcasts.profilePictureAllTabs(_:), v21);
  swift_bridgeObjectRetain();
  v23 = isFeatureEnabled(_:)(v37);
  __swift_destroy_boxed_opaque_existential_1(v37);
  if ((v23 & 1) != 0)
  {
    v24 = a1 + OBJC_IVAR____TtC8ShelfKit4Page_pageContext;
    swift_storeEnumTagMultiPayload(v17, v9, 6);
    LOBYTE(v24) = static InteractionContext.Page.== infix(_:_:)(v24, v17);
    sub_145D8((uint64_t)v17, (uint64_t (*)(_QWORD))&type metadata accessor for InteractionContext.Page);
    if ((v24 & 1) != 0)
    {
      *v8 = 1;
      swift_storeEnumTagMultiPayload(v8, v6, 9);
      v25 = v34;
      sub_3C56C((uint64_t)v8, v34, type metadata accessor for HeaderButtonItem);
      sub_6B538(0, 0, v25);
    }
  }
  v26 = *(_QWORD *)(v2 + 24);
  swift_beginAccess(v26 + 16, v37, 0, 0);
  v27 = *(_QWORD *)(v26 + 16);
  if ((*(_BYTE *)(v26 + 24) & 1) != 0 || v27)
  {
    sub_14510(v27 + OBJC_IVAR____TtC8ShelfKit4Page_pageContext, (uint64_t)v11, (uint64_t (*)(_QWORD))&type metadata accessor for InteractionContext.Page);
    v28 = sub_3C56C((uint64_t)v11, (uint64_t)v14, (uint64_t (*)(_QWORD))&type metadata accessor for InteractionContext.Page);
  }
  else
  {
    v28 = swift_storeEnumTagMultiPayload(v14, v9, 19);
  }
  v29 = (void *)InteractionContext.Page.entityAnnotation()(v28);
  sub_145D8((uint64_t)v14, (uint64_t (*)(_QWORD))&type metadata accessor for InteractionContext.Page);
  if (v29)
  {
    v36 = v29;
    v30 = v29;
    CurrentValueSubject.send(_:)();

  }
  swift_beginAccess(v2 + 40, &v36, 0, 0);
  v31 = *(_QWORD *)(v2 + 40);
  v35 = v42;
  swift_retain();
  CurrentValueSubject.send(_:)();
  swift_bridgeObjectRelease();
  return swift_release(v31);
}

uint64_t sub_17C124(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t result;
  uint64_t v12;
  int v13;
  char v14;
  uint64_t *v15;
  unsigned int *v16;
  uint64_t v17;
  _BYTE v18[24];
  _BYTE v19[24];

  v4 = type metadata accessor for ExtendedLaunchStatus(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v18[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = *a1;
  v9 = *((unsigned __int8 *)a1 + 8);
  a2 += 16;
  v10 = a1[2];
  swift_beginAccess(a2, v19, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (result)
  {
    v12 = result;
    if (v8)
      v13 = 1;
    else
      v13 = v9;
    if (v13 == 1 && (*(_BYTE *)(v8 + 80) & 8) != 0)
    {
      if (!v9)
      {
        v18[0] = 0;
        CurrentValueSubject.send(_:)();
        if (v10 < 2)
          return swift_release(v12);
        goto LABEL_17;
      }
      if (v10 == 1)
        v14 = 2;
      else
        v14 = 1;
      v18[0] = v14;
      CurrentValueSubject.send(_:)();
    }
    else
    {
      v18[0] = 0;
      CurrentValueSubject.send(_:)();
      if (!v9)
      {
        if (v10 < 2)
          return swift_release(v12);
LABEL_17:
        v15 = (uint64_t *)(v12 + OBJC_IVAR____TtC8ShelfKit18StorePagePresenter_hasLoadedContent);
        swift_beginAccess(v12 + OBJC_IVAR____TtC8ShelfKit18StorePagePresenter_hasLoadedContent, v18, 0, 0);
        v16 = (unsigned int *)&enum case for ExtendedLaunchStatus.contentError(_:);
        goto LABEL_18;
      }
    }
    v15 = (uint64_t *)(v12 + OBJC_IVAR____TtC8ShelfKit18StorePagePresenter_hasLoadedContent);
    swift_beginAccess(v12 + OBJC_IVAR____TtC8ShelfKit18StorePagePresenter_hasLoadedContent, v18, 0, 0);
    v16 = (unsigned int *)&enum case for ExtendedLaunchStatus.finishedLoading(_:);
LABEL_18:
    v17 = *v15;
    (*(void (**)(_BYTE *, _QWORD, uint64_t))(v5 + 104))(v7, *v16, v4);
    swift_retain(v17);
    CurrentValueSubject.send(_:)();
    swift_release(v17);
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
    return swift_release(v12);
  }
  return result;
}

Swift::Void __swiftcall StorePagePresenter.viewDidLoad()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[3];
  _BYTE v28[24];

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BE508);
  v23 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v3 = (char *)&v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BE510);
  v24 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BE518);
  v26 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = v0;
  v10 = *(_QWORD *)(v0 + 24);
  StorePageProvider.viewDidLoad()();
  v11 = (_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit18StorePagePresenter_selectedFilter);
  swift_beginAccess(v11, v28, 0, 0);
  v27[0] = *v11;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BE500);
  v13 = sub_32914(&qword_3BE520, &qword_3BE500, (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
  v14 = sub_CA290();
  Publisher<>.removeDuplicates()(v12, v13, v14);
  v15 = sub_32914(&qword_3BE528, &qword_3BE508, (uint64_t)&protocol conformance descriptor for Publishers.RemoveDuplicates<A>);
  Publisher.dropFirst(_:)(1, v1, v15);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v3, v1);
  v16 = type metadata accessor for URL(0);
  v17 = sub_32914(&qword_3BE530, &qword_3BE510, (uint64_t)&protocol conformance descriptor for Publishers.Drop<A>);
  Publisher.compactMap<A>(_:)(sub_17C5D8, 0, v4, v16, v17);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v6, v4);
  v18 = sub_32914(&qword_3BE538, &qword_3BE518, (uint64_t)&protocol conformance descriptor for Publishers.CompactMap<A, B>);
  swift_retain();
  v19 = Publisher<>.sink(receiveValue:)(j___s8ShelfKit17StorePageProviderC07loadNewD3URLyy10Foundation0H0VF, v10, v7, v18);
  swift_release(v10);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v9, v7);
  v20 = v25 + 32;
  swift_beginAccess(v25 + 32, v27, 33, 0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B2088);
  v22 = sub_32914(&qword_3B2090, &qword_3B2088, (uint64_t)&protocol conformance descriptor for [A]);
  AnyCancellable.store<A>(in:)(v20, v21, v22);
  swift_endAccess(v27);
  swift_release(v19);
}

uint64_t sub_17C5D8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BA920);
  __chkstk_darwin(v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *a1;
  v8 = type metadata accessor for FlowAction(0);
  v9 = swift_dynamicCastClass(v7, v8);
  if (!v9)
    goto LABEL_4;
  v10 = v9;
  swift_retain();
  swift_retain();
  sub_2A22FC((uint64_t)v6);
  swift_release(v10);
  v11 = type metadata accessor for FlowDestination(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v6, 1, v11) == 1)
  {
    swift_release(v10);
    sub_1459C((uint64_t)v6, &qword_3BA920);
LABEL_4:
    v12 = type metadata accessor for URL(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(a2, 1, 1, v12);
  }
  FlowDestination.pageDestinationURL.getter(a2);
  swift_release(v10);
  return sub_145D8((uint64_t)v6, type metadata accessor for FlowDestination);
}

uint64_t sub_17C708(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  char v23[24];
  _BYTE v24[32];

  v2 = v1;
  v3 = result;
  v4 = *(_QWORD *)(result + 56);
  if (!((unint64_t)v4 >> 62))
  {
    if (*(uint64_t *)((char *)&dword_10 + (v4 & 0xFFFFFFFFFFFFF8)) < 2)
      return result;
LABEL_3:
    swift_bridgeObjectRetain();
    swift_retain();
    v5 = sub_17D284(v4, v3);
    swift_bridgeObjectRelease();
    result = swift_release(v3);
    if (!v5)
      return result;
    v6 = (uint64_t *)(v2 + OBJC_IVAR____TtC8ShelfKit18StorePagePresenter_filteringEnabled);
    swift_beginAccess(v2 + OBJC_IVAR____TtC8ShelfKit18StorePagePresenter_filteringEnabled, v24, 0, 0);
    v7 = *v6;
    v23[0] = 1;
    swift_retain();
    CurrentValueSubject.send(_:)();
    swift_release(v7);
    v8 = (uint64_t *)(v2 + OBJC_IVAR____TtC8ShelfKit18StorePagePresenter_filters);
    swift_beginAccess(v2 + OBJC_IVAR____TtC8ShelfKit18StorePagePresenter_filters, v23, 0, 0);
    v9 = *v8;
    if ((unint64_t)v4 >> 62)
    {
      if (v4 < 0)
        v16 = v4;
      else
        v16 = v4 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
      swift_retain();
      v10 = _CocoaArrayWrapper.endIndex.getter(v16);
      if (v10)
        goto LABEL_6;
    }
    else
    {
      v10 = *(_QWORD *)((char *)&dword_10 + (v4 & 0xFFFFFFFFFFFFF8));
      swift_bridgeObjectRetain();
      swift_retain();
      if (v10)
      {
LABEL_6:
        v21 = v9;
        v22 = _swiftEmptyArrayStorage;
        result = sub_1809B4(0, v10 & ~(v10 >> 63), 0);
        if (v10 < 0)
        {
          __break(1u);
          return result;
        }
        v11 = 0;
        v12 = v22;
        do
        {
          if ((v4 & 0xC000000000000001) != 0)
          {
            v13 = specialized _ArrayBuffer._getElementSlowPath(_:)(v11);
          }
          else
          {
            v13 = *(_QWORD *)(v4 + 8 * v11 + 32);
            swift_retain();
          }
          v22 = v12;
          v15 = v12[2];
          v14 = v12[3];
          if (v15 >= v14 >> 1)
          {
            sub_1809B4(v14 > 1, v15 + 1, 1);
            v12 = v22;
          }
          ++v11;
          v12[2] = v15 + 1;
          v12[v15 + 4] = v13;
        }
        while (v10 != v11);
        swift_bridgeObjectRelease();
        v9 = v21;
        goto LABEL_20;
      }
    }
    swift_bridgeObjectRelease();
    v12 = _swiftEmptyArrayStorage;
LABEL_20:
    v22 = v12;
    CurrentValueSubject.send(_:)();
    swift_bridgeObjectRelease();
    swift_release(v9);
    v17 = (uint64_t *)(v2 + OBJC_IVAR____TtC8ShelfKit18StorePagePresenter_selectedFilter);
    swift_beginAccess(v17, &v22, 0, 0);
    v18 = *v17;
    swift_retain();
    swift_retain();
    CurrentValueSubject.send(_:)();
    swift_release_n(v5, 2);
    return swift_release(v18);
  }
  if (v4 < 0)
    v19 = *(_QWORD *)(result + 56);
  else
    v19 = v4 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  v20 = _CocoaArrayWrapper.endIndex.getter(v19);
  result = swift_bridgeObjectRelease();
  if (v20 >= 2)
    goto LABEL_3;
  return result;
}

_QWORD *StorePagePresenter.deinit()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_bridgeObjectRelease(v0[4]);
  swift_release(v0[5]);
  swift_release(v0[6]);
  v1 = (char *)v0 + OBJC_IVAR____TtC8ShelfKit18StorePagePresenter_interactionContextOrigin;
  v2 = type metadata accessor for InteractionContext.Origin(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_release(*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC8ShelfKit18StorePagePresenter_hasLoadedContent));
  swift_release(*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC8ShelfKit18StorePagePresenter_appEntityAnnotation));
  swift_release(*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC8ShelfKit18StorePagePresenter_refreshControls));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v0
                                      + OBJC_IVAR____TtC8ShelfKit18StorePagePresenter_refreshCommandTitle
                                      + 8));
  swift_release(*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC8ShelfKit18StorePagePresenter_filteringEnabled));
  swift_release(*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC8ShelfKit18StorePagePresenter_filters));
  swift_release(*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC8ShelfKit18StorePagePresenter_selectedFilter));
  return v0;
}

uint64_t StorePagePresenter.__deallocating_deinit()
{
  uint64_t v0;

  StorePagePresenter.deinit();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_17CAD8(uint64_t a1, uint64_t a2)
{
  return sub_17CB70(a1, a2, &OBJC_IVAR____TtC8ShelfKit18StorePagePresenter_hasLoadedContent);
}

uint64_t sub_17CAE4@<X0>(uint64_t a1@<X8>)
{
  return StorePagePresenter.interactionContextPage.getter(a1);
}

uint64_t sub_17CB04@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1 + OBJC_IVAR____TtC8ShelfKit18StorePagePresenter_interactionContextOrigin;
  v4 = type metadata accessor for InteractionContext.Origin(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_17CB4C(uint64_t a1, uint64_t a2)
{
  return sub_17CB70(a1, a2, &OBJC_IVAR____TtC8ShelfKit18StorePagePresenter_filteringEnabled);
}

uint64_t sub_17CB58(uint64_t a1, uint64_t a2)
{
  return sub_17CB70(a1, a2, &OBJC_IVAR____TtC8ShelfKit18StorePagePresenter_filters);
}

uint64_t sub_17CB64(uint64_t a1, uint64_t a2)
{
  return sub_17CB70(a1, a2, &OBJC_IVAR____TtC8ShelfKit18StorePagePresenter_selectedFilter);
}

uint64_t sub_17CB70(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  _QWORD *v4;
  _BYTE v6[24];

  v4 = (_QWORD *)(v3 + *a3);
  swift_beginAccess(v4, v6, 0, 0);
  return swift_retain(*v4);
}

uint64_t StorePagePresenter.isPreparingNextPage.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;
  _BYTE v3[24];

  v1 = (unsigned __int8 *)(*(_QWORD *)(v0 + 24) + OBJC_IVAR____TtC8ShelfKit17StorePageProvider_isPreparingNextPage);
  swift_beginAccess(v1, v3, 0, 0);
  return *v1;
}

Swift::Bool __swiftcall StorePagePresenter.shouldPrepareNextPage()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v8[24];

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4720);
  __chkstk_darwin(v1);
  v3 = &v8[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v4 = *(_QWORD *)(v0 + 24) + OBJC_IVAR____TtC8ShelfKit17StorePageProvider_nextPage;
  swift_beginAccess(v4, v8, 0, 0);
  sub_267BC(v4, (uint64_t)v3, &qword_3B4720);
  v5 = type metadata accessor for JSONObject(0);
  LOBYTE(v4) = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  sub_1459C((uint64_t)v3, &qword_3B4720);
  return v4;
}

Swift::Void __swiftcall StorePagePresenter.prepareNextPage()()
{
  StorePageProvider.prepareNextPage()();
}

Swift::Void __swiftcall StorePagePresenter.reload()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  _BYTE v15[24];

  v1 = type metadata accessor for PageRenderContentTypes(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = &v15[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = type metadata accessor for PageRenderEvent(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = &v15[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v10 = *(_QWORD *)(v0 + 24);
  *v9 = 1;
  (*(void (**)(_BYTE *, _QWORD, uint64_t, __n128))(v6 + 104))(v9, enum case for PageRenderEvent.reload(_:), v5, v7);
  PassthroughSubject.send(_:)(v9);
  v11 = (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v9, v5);
  static PageRenderContentTypes.unspecified.getter(v11);
  v12 = v10 + OBJC_IVAR____TtC8ShelfKit17StorePageProvider_contentTypes;
  v13 = swift_beginAccess(v10 + OBJC_IVAR____TtC8ShelfKit17StorePageProvider_contentTypes, v15, 33, 0);
  (*(void (**)(uint64_t, _BYTE *, uint64_t, __n128))(v2 + 40))(v12, v4, v1, v13);
  swift_endAccess(v15);
  sub_1DA338(1);
}

uint64_t sub_17CE38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t (*v29)(uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  char *v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42[2];
  _QWORD v43[3];
  uint64_t v44;
  uint64_t v45;

  v1 = type metadata accessor for ModernShelf(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for PageContent(0);
  __chkstk_darwin(v5);
  v7 = (uint64_t *)((char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = type metadata accessor for ModernPage(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(*(_QWORD *)(v0 + 24) + 40);
  v12 = swift_retain();
  CurrentValueSubject.value.getter(v7, v12);
  swift_release(v11);
  if (swift_getEnumCaseMultiPayload(v7, v5) == 3)
  {
    v13 = (char *)v7 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_3B89B0) + 48);
    sub_3C56C((uint64_t)v7, (uint64_t)v10, type metadata accessor for ModernPage);
    v14 = type metadata accessor for PageRenderContentTypes(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
    v15 = *(int *)(v8 + 24);
    v38 = v10;
    v16 = *(_QWORD *)&v10[v15];
    v17 = _swiftEmptyArrayStorage;
    v43[0] = _swiftEmptyArrayStorage;
    v18 = *(_QWORD *)(v16 + 16);
    if (v18)
    {
      v19 = v16 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
      v20 = *(_QWORD *)(v2 + 72);
      swift_bridgeObjectRetain_n(v16, 2);
      do
      {
        sub_14510(v19, (uint64_t)v4, type metadata accessor for ModernShelf);
        v21 = *(_QWORD *)&v4[*(int *)(v1 + 28)];
        swift_bridgeObjectRetain();
        sub_145D8((uint64_t)v4, type metadata accessor for ModernShelf);
        sub_1E3CF8(v21);
        v19 += v20;
        --v18;
      }
      while (v18);
      swift_bridgeObjectRelease_n(v16, 2);
      v17 = (_QWORD *)v43[0];
    }
    v22 = v17[2];
    if (v22)
    {
      v23 = (uint64_t)(v17 + 4);
      swift_bridgeObjectRetain();
      v24 = _swiftEmptyArrayStorage;
      do
      {
        sub_150C8(v23, (uint64_t)v43);
        sub_150C8((uint64_t)v43, (uint64_t)v42);
        v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0A50);
        v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0970);
        if ((swift_dynamicCast(&v39, v42, v25, v26, 6) & 1) == 0)
        {
          v41 = 0;
          v39 = 0u;
          v40 = 0u;
        }
        __swift_destroy_boxed_opaque_existential_1(v43);
        if (*((_QWORD *)&v40 + 1))
        {
          sub_F4D8(&v39, (uint64_t)v42);
          sub_F4D8(v42, (uint64_t)&v39);
          if ((swift_isUniquelyReferenced_nonNull_native(v24) & 1) == 0)
            v24 = sub_114B0(0, v24[2] + 1, 1, v24);
          v28 = v24[2];
          v27 = v24[3];
          if (v28 >= v27 >> 1)
            v24 = sub_114B0((_QWORD *)(v27 > 1), v28 + 1, 1, v24);
          v24[2] = v28 + 1;
          sub_F4D8(&v39, (uint64_t)&v24[5 * v28 + 4]);
        }
        else
        {
          sub_1459C((uint64_t)&v39, &qword_3BE7E8);
        }
        v23 += 40;
        --v22;
      }
      while (v22);
      swift_bridgeObjectRelease_n(v17, 2);
    }
    else
    {
      swift_bridgeObjectRelease();
      v24 = _swiftEmptyArrayStorage;
    }
    v31 = v24[2];
    v32 = (uint64_t)v38;
    if (v31)
    {
      v33 = (uint64_t)(v24 + 4);
      swift_bridgeObjectRetain();
      do
      {
        sub_150C8(v33, (uint64_t)v43);
        v34 = v44;
        v35 = v45;
        __swift_project_boxed_opaque_existential_1(v43, v44);
        (*(void (**)(uint64_t, uint64_t))(v35 + 40))(v34, v35);
        __swift_destroy_boxed_opaque_existential_1(v43);
        v33 += 40;
        --v31;
      }
      while (v31);
      swift_bridgeObjectRelease_n(v24, 2);
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    v29 = type metadata accessor for ModernPage;
    v30 = v32;
  }
  else
  {
    v29 = type metadata accessor for PageContent;
    v30 = (uint64_t)v7;
  }
  return sub_145D8(v30, v29);
}

uint64_t sub_17D22C()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_17D250(uint64_t a1)
{
  uint64_t v1;

  return sub_17BD74(a1, v1);
}

uint64_t sub_17D258(uint64_t *a1)
{
  uint64_t v1;

  return sub_17C124(a1, v1);
}

unint64_t sub_17D260(unint64_t result)
{
  if (result >= 2)
    return swift_errorRetain(result);
  return result;
}

unint64_t sub_17D274(unint64_t result)
{
  if (result >= 2)
    return swift_errorRelease(result);
  return result;
}

uint64_t sub_17D284(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if ((unint64_t)a1 >> 62)
    goto LABEL_18;
  v4 = *(_QWORD *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain(a1);
  while (v4)
  {
    v5 = *(_QWORD *)(a2 + 40);
    a2 = *(_QWORD *)(a2 + 48);
    v6 = 4;
    while (1)
    {
      v7 = v6 - 4;
      if ((a1 & 0xC000000000000001) == 0)
        break;
      v8 = specialized _ArrayBuffer._getElementSlowPath(_:)(v6 - 4, a1);
      v9 = __OFADD__(v7, 1);
      v10 = v6 - 3;
      if (v9)
        goto LABEL_17;
LABEL_10:
      if (a2)
      {
        v11 = *(_QWORD *)(v8 + 16);
        v12 = *(_QWORD *)(v8 + 24);
        v13 = v11 == v5 && a2 == v12;
        if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)(v11, v12, v5, a2, 0) & 1) != 0)
        {
          swift_bridgeObjectRelease(a1);
          return v8;
        }
      }
      swift_release(v8);
      ++v6;
      if (v10 == v4)
        goto LABEL_22;
    }
    v8 = *(_QWORD *)(a1 + 8 * v6);
    swift_retain(v8);
    v9 = __OFADD__(v7, 1);
    v10 = v6 - 3;
    if (!v9)
      goto LABEL_10;
LABEL_17:
    __break(1u);
LABEL_18:
    if (a1 < 0)
      v14 = a1;
    else
      v14 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v4 = _CocoaArrayWrapper.endIndex.getter(v14);
  }
LABEL_22:
  swift_bridgeObjectRelease(a1);
  return 0;
}

uint64_t sub_17D3B0()
{
  uint64_t v0;
  uint64_t v1;

  if (*(_QWORD *)(v0 + 32))
    v1 = *(_QWORD *)(v0 + 24);
  else
    v1 = 0;
  swift_bridgeObjectRetain();
  Page.uberStyle.getter();
  return v1;
}

uint64_t sub_17D430(uint64_t a1)
{
  uint64_t result;

  result = sub_F1C0(&qword_3BE600, (void (*)(uint64_t))type metadata accessor for StorePagePresenter, (uint64_t)&protocol conformance descriptor for StorePagePresenter);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for StorePagePresenter(uint64_t a1)
{
  return sub_1F9D4(a1, qword_3BE670, (uint64_t)&nominal type descriptor for StorePagePresenter);
}

unint64_t sub_17D484()
{
  unint64_t result;

  result = qword_3BE608;
  if (!qword_3BE608)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for FilterAction);
    atomic_store(result, (unint64_t *)&qword_3BE608);
  }
  return result;
}

uint64_t sub_17D4C8()
{
  return sub_F1C0(&qword_3BE640, (void (*)(uint64_t))type metadata accessor for StorePagePresenter, (uint64_t)&protocol conformance descriptor for StorePagePresenter);
}

uint64_t sub_17D4F4()
{
  return type metadata accessor for StorePagePresenter(0);
}

uint64_t sub_17D4FC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[13];

  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[3] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[4] = (char *)&value witness table for Builtin.NativeObject + 64;
  result = type metadata accessor for InteractionContext.Origin(319);
  if (v3 <= 0x3F)
  {
    v4[5] = *(_QWORD *)(result - 8) + 64;
    v4[6] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[7] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[8] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[9] = &unk_2FA378;
    v4[10] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[11] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[12] = (char *)&value witness table for Builtin.NativeObject + 64;
    return swift_updateClassMetadata2(a1, 256, 13, v4, a1 + 80);
  }
  return result;
}

uint64_t method lookup function for StorePagePresenter(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for StorePagePresenter);
}

uint64_t dispatch thunk of StorePagePresenter.__allocating_init(asPartOf:with:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 184))();
}

uint64_t *initializeBufferWithCopyOfBuffer for StorePagePresenter.Configuration(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = type metadata accessor for URL(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
  }
  swift_retain();
  return a1;
}

uint64_t destroy for StorePagePresenter.Configuration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  return swift_release(*(_QWORD *)(a1 + *(int *)(a2 + 20)));
}

char *initializeWithCopy for StorePagePresenter.Configuration(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  *(_QWORD *)&a1[*(int *)(a3 + 20)] = *(_QWORD *)&a2[*(int *)(a3 + 20)];
  swift_retain();
  return a1;
}

char *assignWithCopy for StorePagePresenter.Configuration(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  v12 = *(int *)(a3 + 20);
  v13 = *(_QWORD *)&a1[v12];
  *(_QWORD *)&a1[v12] = *(_QWORD *)&a2[v12];
  swift_retain();
  swift_release(v13);
  return a1;
}

char *initializeWithTake for StorePagePresenter.Configuration(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  *(_QWORD *)&a1[*(int *)(a3 + 20)] = *(_QWORD *)&a2[*(int *)(a3 + 20)];
  return a1;
}

char *assignWithTake for StorePagePresenter.Configuration(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  v12 = *(int *)(a3 + 20);
  v13 = *(_QWORD *)&a1[v12];
  *(_QWORD *)&a1[v12] = *(_QWORD *)&a2[v12];
  swift_release(v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for StorePagePresenter.Configuration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_17DAB0);
}

uint64_t sub_17DAB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for StorePagePresenter.Configuration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_17DB48);
}

uint64_t sub_17DB48(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = a2;
  return result;
}

void sub_17DBC4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  sub_28C74(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = "\b";
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
  }
}

uint64_t UnfavoriteInterestAction.adamID.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for UnfavoriteInterestAction(0) + 20));
}

uint64_t type metadata accessor for UnfavoriteInterestAction(uint64_t a1)
{
  uint64_t result;

  result = qword_3BE848;
  if (!qword_3BE848)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for UnfavoriteInterestAction);
  return result;
}

uint64_t UnfavoriteInterestAction.init(adamID:actionMetrics:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t result;

  v6 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a3, a2, v6);
  result = type metadata accessor for UnfavoriteInterestAction(0);
  *(_QWORD *)(a3 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t getEnumTagSinglePayload for UnfavoriteInterestAction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_17DCF8);
}

uint64_t sub_17DCF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ActionMetrics(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for UnfavoriteInterestAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_17DD40);
}

uint64_t sub_17DD40(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ActionMetrics(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t FollowFeedIntentImplementation.perform(_:objectGraph:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v2[8] = a1;
  v2[9] = a2;
  v3 = type metadata accessor for Logger(0);
  v2[10] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[11] = v4;
  v2[12] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for TaskPriority(0);
  v2[13] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[14] = v6;
  v2[15] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BC3F0);
  v8 = (_QWORD *)swift_task_alloc(async function pointer to BaseObjectGraph.inject<A>(_:)[1]);
  v2[16] = v8;
  *v8 = v2;
  v8[1] = sub_17DE4C;
  return BaseObjectGraph.inject<A>(_:)(v2 + 2, v7, v7);
}

uint64_t sub_17DE4C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;

  v2 = *(_QWORD *)(*v1 + 128);
  v3 = *v1;
  *(_QWORD *)(v3 + 136) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_17E320, 0, 0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B68D0);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to BaseObjectGraph.inject<A>(_:)[1]);
  *(_QWORD *)(v3 + 144) = v6;
  *v6 = v3;
  v6[1] = sub_17DF0C;
  return BaseObjectGraph.inject<A>(_:)(v3 + 56, v5, v5);
}

uint64_t sub_17DF0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 144);
  *(_QWORD *)(*(_QWORD *)v1 + 152) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_17E360;
  else
    v3 = sub_17DF70;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_17DF70()
{
  _QWORD *v0;
  uint64_t ObjectType;
  _QWORD *v2;

  v0[20] = v0[7];
  ObjectType = swift_getObjectType();
  j___sScTss5NeverORszABRs_rlE15currentPriorityScPvgZ();
  v2 = (_QWORD *)swift_task_alloc(async function pointer to NSManagedObjectContextProvider.managedObjectContext(for:)[1]);
  v0[21] = v2;
  *v2 = v0;
  v2[1] = sub_17DFF0;
  return NSManagedObjectContextProvider.managedObjectContext(for:)(v0[15], ObjectType);
}

uint64_t sub_17DFF0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 160);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 168);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 112);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 120);
  v6 = *(_QWORD *)(*(_QWORD *)v1 + 104);
  *(_QWORD *)(*(_QWORD *)v1 + 176) = a1;
  swift_task_dealloc(v2);
  swift_unknownObjectRelease(v3);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  return swift_task_switch(sub_17E074, 0, 0);
}

uint64_t sub_17E074()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_3BE88C);
  *(_QWORD *)(v0 + 184) = v1;
  *v1 = v0;
  v1[1] = sub_17E0C8;
  return sub_17E450(*(_QWORD *)(v0 + 64), v0 + 16);
}

uint64_t sub_17E0C8(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 184);
  *(_QWORD *)(*v2 + 192) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_17E3A8;
  }
  else
  {
    *(_BYTE *)(v4 + 232) = a1 & 1;
    v6 = sub_17E140;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_17E140()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  if ((*(_BYTE *)(v0 + 232) & 1) == 0)
  {
    v1 = static Logger.appIntents.getter();
    v2 = Logger.logObject.getter(v1);
    v3 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v2, v3))
    {
      v4 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_0, v2, v3, "Subscription to RSS Feed failed, but did not throw an error", v4, 2u);
      swift_slowDealloc(v4, -1, -1);
    }
    v6 = *(_QWORD *)(v0 + 88);
    v5 = *(_QWORD *)(v0 + 96);
    v7 = *(_QWORD *)(v0 + 80);

    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  }
  v8 = (_QWORD *)swift_task_alloc(dword_3BE894);
  *(_QWORD *)(v0 + 200) = v8;
  *v8 = v0;
  v8[1] = sub_17E230;
  return sub_17E6F0(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 176));
}

uint64_t sub_17E230(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)();

  v8 = *v4;
  v9 = *(_QWORD *)(*v4 + 200);
  *(_QWORD *)(*v4 + 208) = v3;
  swift_task_dealloc(v9);
  if (v3)
  {
    v10 = sub_17E3FC;
  }
  else
  {
    *(_BYTE *)(v8 + 233) = a3;
    *(_QWORD *)(v8 + 216) = a2;
    *(_QWORD *)(v8 + 224) = a1;
    v10 = sub_17E2B8;
  }
  return swift_task_switch(v10, 0, 0);
}

uint64_t sub_17E2B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 96);

  __swift_destroy_boxed_opaque_existential_1((_QWORD *)(v0 + 16));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 216), *(unsigned __int8 *)(v0 + 233));
}

uint64_t sub_17E320()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 120));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_17E360()
{
  uint64_t v0;
  uint64_t v1;

  __swift_destroy_boxed_opaque_existential_1((_QWORD *)(v0 + 16));
  v1 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 120));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_17E3A8()
{
  uint64_t v0;
  uint64_t v1;

  __swift_destroy_boxed_opaque_existential_1((_QWORD *)(v0 + 16));
  v1 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 120));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_17E3FC()
{
  uint64_t v0;
  uint64_t v1;

  __swift_destroy_boxed_opaque_existential_1((_QWORD *)(v0 + 16));
  v1 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 120));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_17E450(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2[2] = a1;
  v2[3] = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
  v2[4] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_17E4AC, 0, 0);
}

uint64_t sub_17E4AC()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v21;
  _QWORD *v22;

  v1 = (_QWORD *)v0[3];
  v2 = v1[3];
  v3 = v1[4];
  v22 = __swift_project_boxed_opaque_existential_1(v1, v2);
  v4 = FollowFeedIntent.feedURL.getter(v22);
  v21 = FollowFeedIntent.adamID.getter(v4);
  v6 = v5;
  v7 = FollowFeedIntent.location.getter();
  v9 = v8;
  v10 = FollowFeedIntent.contentRating.getter();
  v11 = ContentRating.rawValue.getter(v10 & 1);
  v13 = v12;
  v14 = 1;
  v16 = ContentRating.rawValue.getter(1);
  if (v11 != v16 || v13 != v15)
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v13, v16, v15, 0);
  v18 = v0[4];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v0[5] = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))(v3 + 40))(v18, v21, v6 & 1, v7, v9, v14 & 1, 0, v2, v3);
  swift_bridgeObjectRelease();
  sub_2828C(v18);
  v19 = (_QWORD *)swift_task_alloc(async function pointer to Promise.then()[1]);
  v0[6] = v19;
  *v19 = v0;
  v19[1] = sub_17E608;
  return Promise.then()(v0 + 8);
}

uint64_t sub_17E608()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 48);
  *(_QWORD *)(*v1 + 56) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_17E6B0;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 40));
    v4 = sub_17E674;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_17E674()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 32));
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_17E6B0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_release(*(_QWORD *)(v0 + 40));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_17E6F0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2[3] = a1;
  v2[4] = a2;
  v3 = type metadata accessor for Logger(0);
  v2[5] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[6] = v4;
  v2[7] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType(0);
  v2[8] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[9] = v6;
  v2[10] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
  v2[11] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_17E79C, 0, 0);
}

uint64_t sub_17E79C()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  NSString v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  id v24;
  _QWORD *v25;
  uint64_t v26;

  result = FollowFeedIntent.adamID.getter();
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(v0 + 88);
    FollowFeedIntent.feedURL.getter(result);
    v5 = type metadata accessor for URL(0);
    v6 = *(_QWORD *)(v5 - 8);
    v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
    v8 = *(_QWORD *)(v0 + 88);
    if ((_DWORD)v7 == 1)
    {
      sub_2828C(*(_QWORD *)(v0 + 88));
      v9 = type metadata accessor for IntentFeedSubscriptionError(0);
      v10 = sub_F1C0(&qword_3BE8B0, (void (*)(uint64_t))&type metadata accessor for IntentFeedSubscriptionError, (uint64_t)&protocol conformance descriptor for IntentFeedSubscriptionError);
      swift_allocError(v9, v10, 0, 0);
      v12 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v11, enum case for IntentFeedSubscriptionError.subscriptionForNonAdamIDNonRSSShow(_:), v9);
      swift_willThrow(v12);
      v13 = *(_QWORD *)(v0 + 80);
      v14 = *(_QWORD *)(v0 + 56);
      swift_task_dealloc(*(_QWORD *)(v0 + 88));
      swift_task_dealloc(v13);
      swift_task_dealloc(v14);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    URL.absoluteString.getter(v7);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v8, v5);
    v15 = (void *)objc_opt_self(MTPodcast);
    v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v3 = objc_msgSend(v15, "predicateForPodcastWithFeedUrl:", v16);

    goto LABEL_7;
  }
  if ((result & 0x8000000000000000) == 0)
  {
    v3 = objc_msgSend((id)objc_opt_self(MTPodcast), "predicateForPodcastStoreId:", result);
LABEL_7:
    *(_QWORD *)(v0 + 96) = v3;
    v17 = *(_QWORD *)(v0 + 72);
    v18 = *(_QWORD *)(v0 + 80);
    v19 = *(_QWORD *)(v0 + 64);
    v20 = *(void **)(v0 + 32);
    v21 = swift_allocObject(&unk_384E08, 32, 7);
    *(_QWORD *)(v0 + 104) = v21;
    *(_QWORD *)(v21 + 16) = v3;
    *(_QWORD *)(v21 + 24) = v20;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v17 + 104))(v18, enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:), v19);
    v22 = async function pointer to NSManagedObjectContext.perform<A>(schedule:_:)[1];
    v23 = v3;
    v24 = v20;
    v25 = (_QWORD *)swift_task_alloc(v22);
    *(_QWORD *)(v0 + 112) = v25;
    v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BE8B8);
    *v25 = v0;
    v25[1] = sub_17EA20;
    return NSManagedObjectContext.perform<A>(schedule:_:)(v0 + 16, *(_QWORD *)(v0 + 80), sub_17F084, v21, v26);
  }
  __break(1u);
  return result;
}

uint64_t sub_17EA20()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 112);
  *(_QWORD *)(*(_QWORD *)v1 + 120) = v0;
  swift_task_dealloc(v3);
  v4 = v2[13];
  (*(void (**)(_QWORD, _QWORD))(v2[9] + 8))(v2[10], v2[8]);
  swift_release(v4);
  if (v0)
    v5 = sub_17ED30;
  else
    v5 = sub_17EAA8;
  return swift_task_switch(v5, 0, 0);
}

void sub_17EAA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(v0 + 16);
  if ((unint64_t)v1 >> 62)
  {
    if (v1 < 0)
      v24 = *(_QWORD *)(v0 + 16);
    else
      v24 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v25 = _CocoaArrayWrapper.endIndex.getter(v24);
    swift_bridgeObjectRelease();
    if (v25 < 2)
      goto LABEL_6;
  }
  else if (*(uint64_t *)((char *)&dword_10 + (v1 & 0xFFFFFFFFFFFFF8)) < 2)
  {
    goto LABEL_6;
  }
  v2 = static Logger.appIntents.getter();
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_0, v3, v4, "There is more than one show with the provided feed identifier. This may be returning the incorrect show.", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v7 = *(_QWORD *)(v0 + 48);
  v6 = *(_QWORD *)(v0 + 56);
  v8 = *(_QWORD *)(v0 + 40);

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
LABEL_6:
  if ((unint64_t)v1 >> 62)
  {
    if (v1 < 0)
      v15 = v1;
    else
      v15 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v16 = _CocoaArrayWrapper.endIndex.getter(v15);
    swift_bridgeObjectRelease();
    if (v16)
      goto LABEL_8;
LABEL_16:
    v17 = *(void **)(v0 + 96);
    swift_bridgeObjectRelease();
    v18 = type metadata accessor for IntentFeedSubscriptionError(0);
    v19 = sub_F1C0(&qword_3BE8B0, (void (*)(uint64_t))&type metadata accessor for IntentFeedSubscriptionError, (uint64_t)&protocol conformance descriptor for IntentFeedSubscriptionError);
    swift_allocError(v18, v19, 0, 0);
    v21 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v18 - 8) + 104))(v20, enum case for IntentFeedSubscriptionError.unableToFindFeedAfterSubscription(_:), v18);
    swift_willThrow(v21);

    v22 = *(_QWORD *)(v0 + 80);
    v23 = *(_QWORD *)(v0 + 56);
    swift_task_dealloc(*(_QWORD *)(v0 + 88));
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    (*(void (**)(void))(v0 + 8))();
    return;
  }
  if (!*(_QWORD *)((char *)&dword_10 + (v1 & 0xFFFFFFFFFFFFF8)))
    goto LABEL_16;
LABEL_8:
  if ((v1 & 0xC000000000000001) != 0)
  {
    v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0);
    goto LABEL_11;
  }
  if (*(_QWORD *)((char *)&dword_10 + (v1 & 0xFFFFFFFFFFFFF8)))
  {
    v9 = *(id *)(v1 + 32);
LABEL_11:
    v10 = v9;
    v11 = *(_QWORD *)(v0 + 88);
    v12 = *(void **)(v0 + 96);
    v13 = *(_QWORD *)(v0 + 80);
    v14 = *(_QWORD *)(v0 + 56);
    swift_bridgeObjectRelease();

    swift_task_dealloc(v11);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    (*(void (**)(id, _QWORD, uint64_t))(v0 + 8))(v10, 0, 2);
    return;
  }
  __break(1u);
}

uint64_t sub_17ED30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_17ED88(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  id v5;
  NSString v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Class isa;
  uint64_t v12;
  uint64_t v13;

  static String._unconditionallyBridgeFromObjectiveC(_:)(kMTPodcastEntityName);
  v5 = objc_allocWithZone((Class)NSFetchRequest);
  v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v7 = objc_msgSend(v5, "initWithEntityName:", v6);

  objc_msgSend(v7, "setPredicate:", a1);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BC590);
  v9 = swift_allocObject(v8, 40, 7);
  *(_OWORD *)(v9 + 16) = xmmword_2EF430;
  sub_327F8(0, (unint64_t *)&qword_3BF7D0, MTPodcast_ptr);
  v10 = static MTPodcast.sortDescriptor(newestToOldest:)(1);
  *(_QWORD *)(v9 + 32) = v10;
  specialized Array._endMutation()(v10);
  sub_327F8(0, (unint64_t *)&qword_3BE8C0, NSSortDescriptor_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v7, "setSortDescriptors:", isa);

  objc_msgSend(v7, "setFetchLimit:", 1);
  objc_msgSend(v7, "setResultType:", 1);
  v12 = sub_327F8(0, (unint64_t *)&unk_3C4440, NSManagedObjectID_ptr);
  v13 = NSManagedObjectContext.fetch<A>(_:)(v7, v12);

  if (!v2)
    *a2 = v13;
}

uint64_t sub_17EF54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;

  *(_QWORD *)(v3 + 16) = a1;
  v6 = (_QWORD *)swift_task_alloc(dword_3BE884);
  *(_QWORD *)(v3 + 24) = v6;
  *v6 = v3;
  v6[1] = sub_17EFAC;
  return FollowFeedIntentImplementation.perform(_:objectGraph:)(a2, a3);
}

uint64_t sub_17EFAC(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v8 = *v4;
  v9 = *(_QWORD *)(*v4 + 24);
  v10 = *v4;
  swift_task_dealloc(v9);
  if (!v3)
  {
    v11 = *(_QWORD *)(v8 + 16);
    *(_QWORD *)v11 = a1;
    *(_QWORD *)(v11 + 8) = a2;
    *(_BYTE *)(v11 + 16) = a3;
  }
  return (*(uint64_t (**)(void))(v10 + 8))();
}

uint64_t sub_17F01C()
{
  return sub_F1C0(qword_3BE898, (void (*)(uint64_t))&type metadata accessor for FollowFeedIntent, (uint64_t)&protocol conformance descriptor for FollowFeedIntent);
}

ValueMetadata *type metadata accessor for FollowFeedIntentImplementation()
{
  return &type metadata for FollowFeedIntentImplementation;
}

uint64_t sub_17F058()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_17F084(uint64_t *a1@<X8>)
{
  uint64_t v1;

  sub_17ED88(*(_QWORD *)(v1 + 16), a1);
}

uint64_t ShowHero.eyebrowRatingText.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t (*v54)(char *, uint64_t);
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  Swift::String v61;
  Swift::String v62;
  Swift::String v63;
  Swift::String v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  void (*v70)(char *, uint64_t);
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;

  v1 = v0;
  v2 = type metadata accessor for NumberFormatStyleConfiguration.Notation(0);
  v77 = *(_QWORD *)(v2 - 8);
  v78 = v2;
  __chkstk_darwin(v2);
  v75 = (char *)&v65 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BE8C8);
  v74 = *(_QWORD *)(v80 - 8);
  __chkstk_darwin(v80);
  v73 = (char *)&v65 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v76 = (char *)&v65 - v6;
  v8 = __chkstk_darwin(v7);
  v79 = (char *)&v65 - v9;
  v10 = type metadata accessor for NumberFormatStyleConfiguration.Precision(0, v8);
  v69 = *(_QWORD *)(v10 - 8);
  v70 = (void (*)(char *, uint64_t))v10;
  v11 = __chkstk_darwin(v10);
  v68 = (char *)&v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for NumberFormatStyleConfiguration.Grouping(0, v11);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v65 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = type metadata accessor for Locale(0);
  v67 = *(_QWORD *)(v72 - 8);
  __chkstk_darwin(v72);
  v71 = (char *)&v65 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BE8D0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v65 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v24 = (char *)&v65 - v23;
  __chkstk_darwin(v25);
  v27 = (char *)&v65 - v26;
  __chkstk_darwin(v28);
  v30 = (char *)&v65 - v29;
  v31 = type metadata accessor for ShowHero(0);
  result = 0;
  v33 = v1 + *(int *)(v31 + 40);
  if ((*(_BYTE *)(v33 + 4) & 1) == 0)
  {
    result = 0;
    if (*(float *)v33 > 0.0)
    {
      v34 = v1 + *(int *)(v31 + 44);
      if ((*(_BYTE *)(v34 + 8) & 1) == 0)
      {
        v35 = *(_QWORD *)v34;
        if (v35 >= 0x1F)
        {
          LODWORD(v81) = *(_DWORD *)v33;
          v36 = v71;
          v66 = v35;
          static Locale.autoupdatingCurrent.getter(0, 0);
          v65 = sub_17F5EC();
          v37 = FloatingPointFormatStyle.init(locale:)(v36, &type metadata for Float, v65);
          static NumberFormatStyleConfiguration.Grouping.automatic.getter(v37);
          FloatingPointFormatStyle.grouping(_:)(v16, v18);
          (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
          v38 = *(void (**)(char *, uint64_t))(v19 + 8);
          v38(v21, v18);
          v39 = v68;
          static NumberFormatStyleConfiguration.Precision.integerAndFractionLength(integer:fraction:)(1, 1);
          FloatingPointFormatStyle.precision(_:)(v39, v18);
          (*(void (**)(char *, _QWORD))(v69 + 8))(v39, v70);
          v40 = ((uint64_t (*)(char *, uint64_t))v38)(v24, v18);
          static Locale.autoupdatingCurrent.getter(v40, v41);
          FloatingPointFormatStyle.locale(_:)(v36, v18);
          v70 = *(void (**)(char *, uint64_t))(v67 + 8);
          v42 = v72;
          v70(v36, v72);
          v38(v27, v18);
          v43 = sub_32914(&qword_3BE8E0, &qword_3BE8D0, (uint64_t)&protocol conformance descriptor for FloatingPointFormatStyle<A>);
          BinaryFloatingPoint.formatted<A>(_:)(&v82, v30, &type metadata for Float, v18, v65, v43);
          v44 = ((uint64_t (*)(char *, uint64_t))v38)(v30, v18);
          v46 = v82;
          v45 = (void *)v83;
          v81 = v66;
          static Locale.autoupdatingCurrent.getter(v44, v47);
          v48 = sub_17F630();
          v49 = v73;
          v50 = IntegerFormatStyle.init(locale:)(v36, &type metadata for UInt, v48);
          v51 = v75;
          static NumberFormatStyleConfiguration.Notation.compactName.getter(v50);
          v52 = v76;
          v53 = v80;
          IntegerFormatStyle.notation(_:)(v51, v80);
          (*(void (**)(char *, uint64_t))(v77 + 8))(v51, v78);
          v54 = *(uint64_t (**)(char *, uint64_t))(v74 + 8);
          v55 = v54(v49, v53);
          static Locale.autoupdatingCurrent.getter(v55, v56);
          v57 = v79;
          IntegerFormatStyle.locale(_:)(v36, v53);
          v70(v36, v42);
          v54(v52, v53);
          v58 = sub_32914(&qword_3BE8F0, &qword_3BE8C8, (uint64_t)&protocol conformance descriptor for IntegerFormatStyle<A>);
          BinaryInteger.formatted<A>(_:)(&v82, v57, &type metadata for UInt, v53, v48, v58);
          v54(v57, v53);
          v59 = v82;
          v60 = (void *)v83;
          v82 = 545626338;
          v83 = 0xA400000000000000;
          v61._countAndFlagsBits = v46;
          v61._object = v45;
          String.append(_:)(v61);
          swift_bridgeObjectRelease();
          v62._countAndFlagsBits = 10272;
          v62._object = (void *)0xE200000000000000;
          String.append(_:)(v62);
          v63._countAndFlagsBits = v59;
          v63._object = v60;
          String.append(_:)(v63);
          swift_bridgeObjectRelease();
          v64._countAndFlagsBits = 41;
          v64._object = (void *)0xE100000000000000;
          String.append(_:)(v64);
          return v82;
        }
      }
    }
  }
  return result;
}

unint64_t sub_17F5EC()
{
  unint64_t result;

  result = qword_3BE8D8;
  if (!qword_3BE8D8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Float);
    atomic_store(result, (unint64_t *)&qword_3BE8D8);
  }
  return result;
}

unint64_t sub_17F630()
{
  unint64_t result;

  result = qword_3BE8E8;
  if (!qword_3BE8E8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UInt);
    atomic_store(result, (unint64_t *)&qword_3BE8E8);
  }
  return result;
}

uint64_t ThinClientToggleBookmarkEpisodeHelper.toggle(to:episodeIdentifiers:objectGraph:)(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  *(_QWORD *)(v3 + 80) = a2;
  *(_QWORD *)(v3 + 88) = a3;
  *(_BYTE *)(v3 + 248) = a1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
  *(_QWORD *)(v3 + 96) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4AB0);
  *(_QWORD *)(v3 + 104) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4AB8);
  *(_QWORD *)(v3 + 112) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4AC0);
  *(_QWORD *)(v3 + 120) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4AC8);
  *(_QWORD *)(v3 + 128) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for MediaRequest.RequestType(0);
  *(_QWORD *)(v3 + 136) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v3 + 144) = v10;
  *(_QWORD *)(v3 + 152) = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for MediaRequest.Params(0);
  *(_QWORD *)(v3 + 160) = v11;
  v12 = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v3 + 168) = v12;
  *(_QWORD *)(v3 + 176) = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for ThinClientEpisodeStateRepository(0);
  v14 = (_QWORD *)swift_task_alloc(async function pointer to BaseObjectGraph.inject<A>(_:)[1]);
  *(_QWORD *)(v3 + 184) = v14;
  *v14 = v3;
  v14[1] = sub_17F7F4;
  return BaseObjectGraph.inject<A>(_:)(v3 + 56, v13, v13);
}

uint64_t sub_17F7F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 184);
  *(_QWORD *)(*(_QWORD *)v1 + 192) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_180060;
  else
    v3 = sub_17F858;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_17F858()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v0[25] = v0[7];
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4AD8);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to BaseObjectGraph.inject<A>(_:)[1]);
  v0[26] = v2;
  *v2 = v0;
  v2[1] = sub_17F8D8;
  return BaseObjectGraph.inject<A>(_:)(v0 + 2, v1, v1);
}

uint64_t sub_17F8D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 208);
  *(_QWORD *)(*(_QWORD *)v1 + 216) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1800EC;
  else
    v3 = sub_17F93C;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_17F93C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _BYTE *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  char v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  unint64_t v65;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v1 + 16);
  v3 = _swiftEmptyArrayStorage;
  if (v2)
  {
    v4 = (_BYTE *)(swift_bridgeObjectRetain(v1) + 48);
    do
    {
      if (!*v4)
      {
        v5 = *((_QWORD *)v4 - 2);
        if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
          v3 = (_QWORD *)sub_10870(0, v3[2] + 1, 1, v3);
        v7 = v3[2];
        v6 = v3[3];
        if (v7 >= v6 >> 1)
          v3 = (_QWORD *)sub_10870(v6 > 1, v7 + 1, 1, v3);
        v3[2] = v7 + 1;
        v3[v7 + 4] = v5;
      }
      v4 += 24;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 80));
  }
  *(_QWORD *)(v0 + 64) = v3;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0A90);
  v9 = sub_D47D4();
  v10 = Collection.isNotEmpty.getter(v8, v9);
  v11 = *(_QWORD *)(v0 + 200);
  if ((v10 & 1) != 0)
  {
    v13 = *(_QWORD *)(v0 + 144);
    v12 = *(_QWORD *)(v0 + 152);
    v14 = *(_QWORD *)(v0 + 128);
    v15 = *(_QWORD *)(v0 + 136);
    v59 = *(_QWORD *)(v0 + 120);
    v64 = *(_QWORD *)(v0 + 112);
    v16 = (_QWORD *)v0;
    v17 = *(_BYTE *)(v0 + 248) & 1;
    *(_QWORD *)(v0 + 224) = ThinClientEpisodeStateRepository.updateLocalBookmarkStates(_:to:)(v3, v17);
    v61 = *(_QWORD *)(v0 + 48);
    v62 = *(_QWORD *)(v0 + 40);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 16), v62);
    v18 = static EpisodeBookmarkState.== infix(_:_:)(v17, 1);
    v19 = (unsigned int *)&enum case for MediaRequest.RequestType.postLibrary(_:);
    if ((v18 & 1) == 0)
      v19 = (unsigned int *)&enum case for MediaRequest.RequestType.deleteLibrary(_:);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v13 + 104))(v12, *v19, v15);
    v20 = enum case for MediaRequest.ContentType.podcastEpisode(_:);
    v21 = type metadata accessor for MediaRequest.ContentType(0);
    v22 = *(_QWORD *)(v21 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 104))(v14, v20, v21);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v22 + 56))(v14, 0, 1, v21);
    v23 = type metadata accessor for MediaRequest.ViewType(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v59, 1, 1, v23);
    v24 = type metadata accessor for MediaRequest.Relationship(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v64, 1, 1, v24);
    v25 = v3[2];
    v63 = v16;
    if (v25)
    {
      v26 = v16 + 9;
      sub_1807B0(0, v25, 0);
      v65 = sub_144B4();
      v27 = 0;
      do
      {
        *v26 = v3[v27 + 4];
        v28 = BinaryInteger.description.getter(&type metadata for UInt64, v65);
        v30 = v29;
        v32 = _swiftEmptyArrayStorage[2];
        v31 = _swiftEmptyArrayStorage[3];
        if (v32 >= v31 >> 1)
          sub_1807B0(v31 > 1, v32 + 1, 1);
        ++v27;
        _swiftEmptyArrayStorage[2] = v32 + 1;
        v33 = &_swiftEmptyArrayStorage[2 * v32];
        v33[4] = v28;
        v33[5] = v30;
      }
      while (v25 != v27);
    }
    swift_bridgeObjectRelease(v3);
    v58 = v63[16];
    v60 = v63[19];
    v42 = v63[13];
    v56 = v63[14];
    v57 = v63[15];
    v55 = v42;
    v43 = v63[12];
    v53 = v43;
    v44 = type metadata accessor for MediaRequest.URLFragment(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v42, 1, 1, v44);
    v45 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v43, 1, 1, v45);
    v54 = sub_180428((uint64_t)_swiftEmptyArrayStorage, &qword_3BE9B8, (uint64_t *)&unk_3BE9C0, (uint64_t (*)(char *))sub_1806A4, (uint64_t (*)(_QWORD))&type metadata accessor for MediaRequest.Relationship);
    v46 = sub_180428((uint64_t)_swiftEmptyArrayStorage, &qword_3BE9B8, (uint64_t *)&unk_3BE9C0, (uint64_t (*)(char *))sub_1806A4, (uint64_t (*)(_QWORD))&type metadata accessor for MediaRequest.Relationship);
    v47 = sub_180270((uint64_t)_swiftEmptyArrayStorage);
    v48 = sub_180428((uint64_t)_swiftEmptyArrayStorage, &qword_3B4AE8, &qword_3BE990, (uint64_t (*)(char *))sub_29A48, (uint64_t (*)(_QWORD))&type metadata accessor for MediaRequest.ContentType);
    v49 = sub_180428((uint64_t)_swiftEmptyArrayStorage, &qword_3B4AE8, &qword_3BE990, (uint64_t (*)(char *))sub_29A48, (uint64_t (*)(_QWORD))&type metadata accessor for MediaRequest.ContentType);
    v50 = sub_180428((uint64_t)_swiftEmptyArrayStorage, &qword_3BE970, &qword_3BE978, (uint64_t (*)(char *))sub_18060C, (uint64_t (*)(_QWORD))&type metadata accessor for MediaRequest.Filter);
    v51 = sub_180428((uint64_t)_swiftEmptyArrayStorage, &qword_3BE960, &qword_3BE968, (uint64_t (*)(char *))sub_29A48, (uint64_t (*)(_QWORD))&type metadata accessor for MediaRequest.ContentType);
    MediaRequest.Params.init(requestType:requestContentType:viewType:directFetch:relationshipIncludes:relationshipRelates:relationshipLimit:include:omit:typedIncludes:typedExtends:fields:withTypes:identifiers:fragment:limit:filters:meta:offset:requestAllPages:hostUrl:countryCode:isImplicitActionRequest:searchTerm:queryContentTypes:triggerBy:includeEntitlementsOverride:)(v60, v58, v57, v56, v54, v46, v47, _swiftEmptyArrayStorage, _swiftEmptyArrayStorage, v48, v49, _swiftEmptyArrayStorage, _swiftEmptyArrayStorage, _swiftEmptyArrayStorage, v55, 0, 1, v50, v51,
      0,
      1,
      v53,
      0,
      0,
      0,
      0,
      0,
      _swiftEmptyArrayStorage,
      0,
      0,
      2);
    v52 = (_QWORD *)swift_task_alloc(async function pointer to MediaRequestControllerProtocol.perform(params:)[1]);
    v63[29] = v52;
    *v52 = v63;
    v52[1] = sub_17FF00;
    return MediaRequestControllerProtocol.perform(params:)(v63[22], v62, v61);
  }
  else
  {
    swift_bridgeObjectRelease(v3);
    swift_release(v11);
    v34 = *(_QWORD *)(v0 + 176);
    v35 = *(_QWORD *)(v0 + 152);
    v37 = *(_QWORD *)(v0 + 120);
    v36 = *(_QWORD *)(v0 + 128);
    v39 = *(_QWORD *)(v0 + 104);
    v38 = *(_QWORD *)(v0 + 112);
    v40 = *(_QWORD *)(v0 + 96);
    __swift_destroy_boxed_opaque_existential_1((_QWORD *)(v0 + 16));
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
  }
}

uint64_t sub_17FF00(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v8;
  uint64_t v9;
  uint64_t (*v10)();
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v8 = *(_QWORD **)v5;
  v9 = *(_QWORD *)(*(_QWORD *)v5 + 232);
  *(_QWORD *)(*(_QWORD *)v5 + 240) = v4;
  swift_task_dealloc(v9);
  if (v4)
  {
    (*(void (**)(_QWORD, _QWORD))(v8[21] + 8))(v8[22], v8[20]);
    v10 = sub_180180;
  }
  else
  {
    v11 = v8[28];
    v13 = v8[21];
    v12 = v8[22];
    v14 = v8[20];
    swift_bridgeObjectRelease(v11);
    sub_31BA4(a3, a4);
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
    v10 = sub_17FFB8;
  }
  return swift_task_switch(v10, 0, 0);
}

uint64_t sub_17FFB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_release(*(_QWORD *)(v0 + 200));
  v1 = *(_QWORD *)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 152);
  v4 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 128);
  v6 = *(_QWORD *)(v0 + 104);
  v5 = *(_QWORD *)(v0 + 112);
  v7 = *(_QWORD *)(v0 + 96);
  __swift_destroy_boxed_opaque_existential_1((_QWORD *)(v0 + 16));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_180060()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 152);
  v3 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 128);
  v5 = *(_QWORD *)(v0 + 104);
  v4 = *(_QWORD *)(v0 + 112);
  v6 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 176));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1800EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_release(*(_QWORD *)(v0 + 200));
  v1 = *(_QWORD *)(v0 + 152);
  v3 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 128);
  v5 = *(_QWORD *)(v0 + 104);
  v4 = *(_QWORD *)(v0 + 112);
  v6 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 176));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_180180()
{
  uint64_t v0;
  uint64_t v1;
  Swift::OpaquePointer v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 240);
  v2._rawValue = *(void **)(v0 + 224);
  v3 = *(_QWORD *)(v0 + 200);
  ThinClientEpisodeStateRepository.restoreLocalBookmarkStates(to:)(v2);
  swift_release(v3);
  swift_errorRelease(v1);
  swift_bridgeObjectRelease(v2._rawValue);
  v4 = *(_QWORD *)(v0 + 176);
  v5 = *(_QWORD *)(v0 + 152);
  v7 = *(_QWORD *)(v0 + 120);
  v6 = *(_QWORD *)(v0 + 128);
  v9 = *(_QWORD *)(v0 + 104);
  v8 = *(_QWORD *)(v0 + 112);
  v10 = *(_QWORD *)(v0 + 96);
  __swift_destroy_boxed_opaque_existential_1((_QWORD *)(v0 + 16));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(1);
}

unint64_t sub_18024C(uint64_t a1)
{
  return sub_180428(a1, &qword_3BE9B8, (uint64_t *)&unk_3BE9C0, (uint64_t (*)(char *))sub_1806A4, (uint64_t (*)(_QWORD))&type metadata accessor for MediaRequest.Relationship);
}

unint64_t sub_180270(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BE998);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v23 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v23);
    return (unint64_t)v8;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_3BE9A0);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_9;
  v10 = *(int *)(v2 + 48);
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v25 = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_267BC(v13, (uint64_t)v5, &qword_3BE998);
    result = sub_1806A4((uint64_t)v5);
    if ((v16 & 1) != 0)
      break;
    v17 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v18 = v8[6];
    v19 = type metadata accessor for MediaRequest.Relationship(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v17, v5, v19);
    *(_QWORD *)(v8[7] + 8 * v17) = *(_QWORD *)&v5[v10];
    v20 = v8[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
      goto LABEL_12;
    v8[2] = v22;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      v23 = v25;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_180404(uint64_t a1)
{
  return sub_180428(a1, &qword_3B4AE8, &qword_3BE990, (uint64_t (*)(char *))sub_29A48, (uint64_t (*)(_QWORD))&type metadata accessor for MediaRequest.ContentType);
}

unint64_t sub_180428(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(char *), uint64_t (*a5)(_QWORD))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t result;
  char v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(_QWORD);
  uint64_t (*v34)(char *);

  v33 = a5;
  v34 = a4;
  v8 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(a1 + 16);
  if (!v12)
  {
    v14 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v30 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v30);
    return (unint64_t)v14;
  }
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v13 = static _DictionaryStorage.allocate(capacity:)(v12);
  v14 = (_QWORD *)v13;
  v15 = *(_QWORD *)(a1 + 16);
  if (!v15)
    goto LABEL_9;
  v16 = *(int *)(v8 + 48);
  v17 = a1;
  v18 = v13 + 64;
  v19 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v32 = v17;
  v20 = v17 + v19;
  v21 = *(_QWORD *)(v9 + 72);
  swift_retain(v13);
  while (1)
  {
    sub_267BC(v20, (uint64_t)v11, a2);
    result = v34(v11);
    if ((v23 & 1) != 0)
      break;
    v24 = result;
    *(_QWORD *)(v18 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v25 = v14[6];
    v26 = v33(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v25 + *(_QWORD *)(*(_QWORD *)(v26 - 8) + 72) * v24, v11, v26);
    *(_QWORD *)(v14[7] + 8 * v24) = *(_QWORD *)&v11[v16];
    v27 = v14[2];
    v28 = __OFADD__(v27, 1);
    v29 = v27 + 1;
    if (v28)
      goto LABEL_12;
    v14[2] = v29;
    v20 += v21;
    if (!--v15)
    {
      swift_release(v14);
      v30 = v32;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_1805C4(uint64_t a1)
{
  return sub_180428(a1, &qword_3BE970, &qword_3BE978, (uint64_t (*)(char *))sub_18060C, (uint64_t (*)(_QWORD))&type metadata accessor for MediaRequest.Filter);
}

unint64_t sub_1805E8(uint64_t a1)
{
  return sub_180428(a1, &qword_3BE960, &qword_3BE968, (uint64_t (*)(char *))sub_29A48, (uint64_t (*)(_QWORD))&type metadata accessor for MediaRequest.ContentType);
}

unint64_t sub_18060C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 40);
  v5 = type metadata accessor for MediaRequest.Filter(0);
  v6 = sub_F1C0(&qword_3BE980, (void (*)(uint64_t))&type metadata accessor for MediaRequest.Filter, (uint64_t)&protocol conformance descriptor for MediaRequest.Filter);
  v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_2A080(a1, v7, (void (*)(uint64_t))&type metadata accessor for MediaRequest.Filter, &qword_3BE988, (uint64_t)&protocol conformance descriptor for MediaRequest.Filter);
}

unint64_t sub_1806A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 40);
  v5 = type metadata accessor for MediaRequest.Relationship(0);
  v6 = sub_F1C0(&qword_3BE9A8, (void (*)(uint64_t))&type metadata accessor for MediaRequest.Relationship, (uint64_t)&protocol conformance descriptor for MediaRequest.Relationship);
  v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_2A080(a1, v7, (void (*)(uint64_t))&type metadata accessor for MediaRequest.Relationship, &qword_3BE9B0, (uint64_t)&protocol conformance descriptor for MediaRequest.Relationship);
}

uint64_t sub_18073C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_181E9C(a1, a2, a3, (_QWORD *)*v3, &qword_3B0928, type metadata accessor for ActionMenu.Child);
  *v3 = result;
  return result;
}

uint64_t sub_180768(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_180AA0(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_180784(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_180EBC(a1, a2, a3, (_QWORD *)*v3, (uint64_t *)&unk_3BC560, &qword_3B2E40);
  *v3 = result;
  return result;
}

uint64_t sub_1807B0(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_180BEC(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

ValueMetadata *type metadata accessor for ThinClientToggleBookmarkEpisodeHelper()
{
  return &type metadata for ThinClientToggleBookmarkEpisodeHelper;
}

uint64_t sub_1807DC(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_180D54(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1807F8(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_181D54(a1, a2, a3, *v3, &qword_3BE958);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_18081C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_180EBC(a1, a2, a3, (_QWORD *)*v3, (uint64_t *)&unk_3B8750, &qword_3B0A50);
  *v3 = result;
  return result;
}

uint64_t sub_180848(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_181060(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_180864(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1811BC(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_180880(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_181330(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_18089C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_181D54(a1, a2, a3, *v3, &qword_3B09D0);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1808C0(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_181498(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_1808DC(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_181620(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1808F8(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_181E9C(a1, a2, a3, (_QWORD *)*v3, &qword_3B8E50, (uint64_t (*)(_QWORD))&type metadata accessor for URL);
  *v3 = result;
  return result;
}

uint64_t sub_180924(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_181E9C(a1, a2, a3, (_QWORD *)*v3, &qword_3B0938, type metadata accessor for TabMenu.Item);
  *v3 = result;
  return result;
}

uint64_t sub_180950(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1817AC(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_18096C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_181E9C(a1, a2, a3, (_QWORD *)*v3, &qword_3B09B0, type metadata accessor for Link);
  *v3 = result;
  return result;
}

uint64_t sub_180998(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_181934(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1809B4(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_181AA0(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1809D0(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_181E9C(a1, a2, a3, (_QWORD *)*v3, &qword_3B0978, (uint64_t (*)(_QWORD))&type metadata accessor for URLQueryItem);
  *v3 = result;
  return result;
}

uint64_t sub_1809FC(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_181D54(a1, a2, a3, *v3, &qword_3BE910);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_180A20(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_181E9C(a1, a2, a3, (_QWORD *)*v3, &qword_3B0A48, type metadata accessor for ModernShelf);
  *v3 = result;
  return result;
}

uint64_t sub_180A4C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_18207C(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_180A68(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1821E0(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_180A84(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_182368(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_180AA0(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BE918);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = _swift_stdlib_malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_180BEC(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8730);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = _swift_stdlib_malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_180D54(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0A58);
    v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7);
    v12 = _swift_stdlib_malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v8])
      memmove(v14, v15, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[32 * v8] || v14 >= &v15[32 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_180EBC(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (v12)
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(a5);
    v14 = (_QWORD *)swift_allocObject(v13, 40 * v12 + 32, 7);
    v15 = _swift_stdlib_malloc_size(v14);
    v14[2] = v11;
    v14[3] = 2 * ((uint64_t)(v15 - 32) / 40);
  }
  else
  {
    v14 = _swiftEmptyArrayStorage;
  }
  v16 = (unint64_t)(v14 + 4);
  v17 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v14 != a4 || v16 >= v17 + 40 * v11)
      memmove(v14 + 4, a4 + 4, 40 * v11);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v17 >= v16 + 40 * v11 || v16 >= v17 + 40 * v11)
  {
    __swift_instantiateConcreteTypeFromMangledName(a6);
    swift_arrayInitWithCopy(v14 + 4);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v14;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_181060(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0A68);
    v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = _swift_stdlib_malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v8])
      memmove(v14, v15, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[8 * v8] || v14 >= &v15[8 * v8])
  {
    memcpy(v14, v15, 8 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1811BC(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BE950);
    v11 = (char *)swift_allocObject(v10, 40 * v9 + 32, 7);
    v12 = _swift_stdlib_malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  v15 = 40 * v8;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v15])
      memmove(v13, v14, v15);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_181330(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BE948);
    v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7);
    v12 = _swift_stdlib_malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v8])
      memmove(v14, v15, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[32 * v8] || v14 >= &v15[32 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_181498(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0A70);
    v11 = (_QWORD *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = _swift_stdlib_malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 3);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v14 = (unint64_t)(v11 + 4);
  v15 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= v15 + 8 * v8)
      memmove(v11 + 4, a4 + 4, 8 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v15 >= v14 + 8 * v8 || v14 >= v15 + 8 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_3B0A78);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_181620(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B0918);
    v11 = (char *)swift_allocObject(v10, 24 * v9 + 32, 7);
    v12 = _swift_stdlib_malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 24);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  v15 = 24 * v8;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v15])
      memmove(v13, v14, v15);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_181798(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_181E9C(a1, a2, a3, a4, &qword_3B0938, type metadata accessor for TabMenu.Item);
}

uint64_t sub_1817AC(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BE928);
    v11 = (_QWORD *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = _swift_stdlib_malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 3);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v14 = (unint64_t)(v11 + 4);
  v15 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= v15 + 8 * v8)
      memmove(v11 + 4, a4 + 4, 8 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v15 >= v14 + 8 * v8 || v14 >= v15 + 8 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_3BE930);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_181934(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B6150);
    v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7);
    v12 = _swift_stdlib_malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v8])
      memmove(v14, v15, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[32 * v8] || v14 >= &v15[32 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_181AA0(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BE938);
    v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = _swift_stdlib_malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v8])
      memmove(v14, v15, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[8 * v8] || v14 >= &v15[8 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_181C08(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BE920);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = _swift_stdlib_malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_181D54(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  unint64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  char *v12;
  size_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(a5);
    v12 = (char *)swift_allocObject(v11, v10 + 32, 7);
    v13 = _swift_stdlib_malloc_size(v12);
    *((_QWORD *)v12 + 2) = v9;
    *((_QWORD *)v12 + 3) = 2 * v13 - 64;
  }
  else
  {
    v12 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v12 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v12 != a4 || v14 >= &v15[v9])
      memmove(v14, v15, v9);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v15 >= &v14[v9] || v14 >= &v15[v9])
  {
    memcpy(v14, v15, v9);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v12;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_181E9C(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v18 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = __swift_instantiateConcreteTypeFromMangledName(a5);
  v14 = *(_QWORD *)(a6(0) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_QWORD *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  v19 = _swift_stdlib_malloc_size(v18);
  if (!v15)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v19 - v17 == 0x8000000000000000 && v15 == -1)
    goto LABEL_34;
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  v21 = a6(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  v24 = (char *)v18 + v23;
  v25 = (char *)a4 + v23;
  if ((a1 & 1) != 0)
  {
    if (v18 < a4 || v24 >= &v25[*(_QWORD *)(v22 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack(v24, v25, v11, v21);
    }
    else if (v18 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v24);
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v26 = *(_QWORD *)(v22 + 72) * v11;
  v27 = &v24[v26];
  v28 = (unint64_t)&v25[v26];
  if (v25 >= v27 || (unint64_t)v24 >= v28)
  {
    swift_arrayInitWithCopy(v24);
LABEL_32:
    swift_release(a4);
    return (uint64_t)v18;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_18207C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  size_t v16;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BE940);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = _swift_stdlib_malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  v16 = 16 * v8;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[v16])
      memmove(v14, v15, v16);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[v16] || v14 >= &v15[v16])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1821E0(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BE900);
    v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = _swift_stdlib_malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 4);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v14 = (unint64_t)(v11 + 4);
  v15 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= v15 + 16 * v8)
      memmove(v11 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v15 >= v14 + 16 * v8 || v14 >= v15 + 16 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_3BE908);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_182368(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B5BA0);
    v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = _swift_stdlib_malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v8])
      memmove(v14, v15, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[8 * v8] || v14 >= &v15[8 * v8])
  {
    memcpy(v14, v15, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

_QWORD *sub_1824C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  char v24;
  int64_t v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v30;
  _QWORD v31[5];
  uint64_t v32;

  v2 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v3 = a1;
    else
      v3 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v4 = __CocoaSet.makeIterator()(v3);
    v5 = type metadata accessor for Highlight(0);
    v6 = sub_F1C0((unint64_t *)&unk_3BEB18, (void (*)(uint64_t))type metadata accessor for Highlight, (uint64_t)&protocol conformance descriptor for Highlight);
    result = Set.Iterator.init(_cocoa:)(v31, v4, v5, v6);
    v2 = v31[0];
    v28 = v31[1];
    v8 = v31[2];
    v9 = v31[3];
    v10 = v31[4];
  }
  else
  {
    v11 = -1 << *(_BYTE *)(a1 + 32);
    v28 = a1 + 56;
    v8 = ~v11;
    v12 = -v11;
    if (v12 < 64)
      v13 = ~(-1 << v12);
    else
      v13 = -1;
    v10 = v13 & *(_QWORD *)(a1 + 56);
    result = (_QWORD *)swift_bridgeObjectRetain();
    v9 = 0;
  }
  v27 = (unint64_t)(v8 + 64) >> 6;
  while (1)
  {
    do
    {
      v14 = v9;
      if (v2 < 0)
      {
        v17 = __CocoaSet.Iterator.next()(result);
        if (!v17)
          goto LABEL_39;
        v18 = v17;
        v30 = v17;
        v19 = type metadata accessor for Highlight(0);
        swift_unknownObjectRetain(v18);
        swift_dynamicCast(&v32, &v30, (char *)&type metadata for Swift.AnyObject + 8, v19, 7);
        v20 = v32;
        swift_unknownObjectRelease(v18);
        v9 = v14;
        if (!v20)
          goto LABEL_39;
      }
      else
      {
        if (v10)
        {
          v15 = __clz(__rbit64(v10));
          v10 &= v10 - 1;
          v16 = v15 | (v9 << 6);
        }
        else
        {
          ++v9;
          if (__OFADD__(v14, 1))
            goto LABEL_42;
          if (v9 >= v27)
            goto LABEL_39;
          v21 = *(_QWORD *)(v28 + 8 * v9);
          if (!v21)
          {
            v22 = v14 + 2;
            if (v14 + 2 >= v27)
              goto LABEL_39;
            v21 = *(_QWORD *)(v28 + 8 * v22);
            if (v21)
              goto LABEL_26;
            v22 = v14 + 3;
            if (v14 + 3 >= v27)
              goto LABEL_39;
            v21 = *(_QWORD *)(v28 + 8 * v22);
            if (v21)
              goto LABEL_26;
            v22 = v14 + 4;
            if (v14 + 4 >= v27)
              goto LABEL_39;
            v21 = *(_QWORD *)(v28 + 8 * v22);
            if (v21)
            {
LABEL_26:
              v9 = v22;
            }
            else
            {
              v9 = v14 + 5;
              if (v14 + 5 >= v27)
                goto LABEL_39;
              v21 = *(_QWORD *)(v28 + 8 * v9);
              if (!v21)
              {
                v25 = v14 + 6;
                while (v27 != v25)
                {
                  v21 = *(_QWORD *)(v28 + 8 * v25++);
                  if (v21)
                  {
                    v9 = v25 - 1;
                    goto LABEL_27;
                  }
                }
LABEL_39:
                v26 = 0;
LABEL_40:
                sub_15498(v2);
                return (_QWORD *)v26;
              }
            }
          }
LABEL_27:
          v10 = (v21 - 1) & v21;
          v16 = __clz(__rbit64(v21)) + (v9 << 6);
        }
        v20 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v16);
        swift_retain();
        if (!v20)
          goto LABEL_39;
      }
      v23 = *(_QWORD *)(v20 + 40);
      v24 = *(_BYTE *)(v20 + 48);
      result = (_QWORD *)swift_release(v20);
    }
    while ((v24 & 1) != 0);
    if (v23 < 0)
      break;
    if (v23 == a2)
    {
      v26 = 1;
      goto LABEL_40;
    }
  }
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

id HighlightsProviderProtocol.isSharedContent(_:)(uint64_t a1, char a2)
{
  void *v2;
  void *v3;
  unint64_t v4;
  NSString v5;
  id v6;

  v3 = v2;
  if ((a2 & 1) != 0)
  {
    v5 = 0;
  }
  else
  {
    v4 = sub_144B4();
    BinaryInteger.description.getter(&type metadata for UInt64, v4);
    v5 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  v6 = objc_msgSend(v3, "isSharedContentWithPageAdamId:", v5);

  return v6;
}

char *HighlightsProvider.__allocating_init(asPartOf:)(uint64_t a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return HighlightsProvider.init(asPartOf:)(a1);
}

void _s8ShelfKit18HighlightsProviderC021highlightCenterDidAddC0yySo011SLHighlightF0CF_0()
{
  char *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  char *v7;
  _QWORD v8[5];
  uint64_t v9;

  v1 = v0;
  if (objc_msgSend((id)objc_opt_self(SLHighlightCenter), "isEnabled")
    && v0[OBJC_IVAR____TtC8ShelfKit18HighlightsProvider_userIsLoggedIn] == 1)
  {
    v2 = *(void **)&v0[OBJC_IVAR____TtC8ShelfKit18HighlightsProvider_highlightCenter];
    v3 = swift_allocObject(&unk_385060, 24, 7);
    *(_QWORD *)(v3 + 16) = v1;
    v8[4] = sub_1875F8;
    v9 = v3;
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 1107296256;
    v8[2] = sub_184DEC;
    v8[3] = &block_descriptor_17;
    v4 = _Block_copy(v8);
    v5 = v9;
    v6 = v1;
    swift_release(v5);
    objc_msgSend(v2, "fetchHighlightsWithLimit:completionBlock:", 25, v4);
    _Block_release(v4);
  }
  else
  {
    v8[0] = _swiftEmptyArrayStorage;
    CurrentValueSubject.send(_:)();
    v7 = &v0[OBJC_IVAR____TtC8ShelfKit18HighlightsProvider_highlightsDisplayedOnCurrentPage];
    swift_beginAccess(&v0[OBJC_IVAR____TtC8ShelfKit18HighlightsProvider_highlightsDisplayedOnCurrentPage], v8, 1, 0);
    *(_QWORD *)v7 = &_swiftEmptySetSingleton;
    swift_bridgeObjectRelease();
  }
}

char *HighlightsProvider.init(asPartOf:)(uint64_t a1)
{
  char *v1;
  objc_class *ObjectType;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  void *ObjCClassFromMetadata;
  char *v16;
  id v17;
  uint64_t v18;
  char *v19;
  objc_super v21;
  __int128 v22[2];

  ObjectType = (objc_class *)swift_getObjectType();
  v4 = OBJC_IVAR____TtC8ShelfKit18HighlightsProvider_highlightsSubject;
  *(_QWORD *)&v22[0] = _swiftEmptyArrayStorage;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BE9E0);
  swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  v6 = v1;
  *(_QWORD *)&v1[v4] = CurrentValueSubject.init(_:)(v22);
  *(_QWORD *)&v6[OBJC_IVAR____TtC8ShelfKit18HighlightsProvider_highlightsDisplayedOnCurrentPage] = &_swiftEmptySetSingleton;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BE9F0);
  v8 = type metadata accessor for BaseObjectGraph(0);
  inject<A, B>(_:from:)(v22, v7, a1, v7, v8);
  sub_F4D8(v22, (uint64_t)&v6[OBJC_IVAR____TtC8ShelfKit18HighlightsProvider_storeDataProvider]);
  v9 = objc_msgSend(objc_allocWithZone((Class)SLHighlightCenter), "init");
  *(_QWORD *)&v6[OBJC_IVAR____TtC8ShelfKit18HighlightsProvider_highlightCenter] = v9;
  v10 = objc_msgSend((id)objc_opt_self(ACAccountStore), "ams_sharedAccountStore");
  v11 = objc_msgSend(v10, "ams_activeiTunesAccount");

  v12 = objc_msgSend(v11, "ams_DSID");
  if (v12)

  v6[OBJC_IVAR____TtC8ShelfKit18HighlightsProvider_userIsLoggedIn] = v12 != 0;
  v21.receiver = v6;
  v21.super_class = ObjectType;
  v13 = objc_msgSendSuper2(&v21, "init");
  v14 = sub_327F8(0, &qword_3BEA10, SLAttributionView_ptr);
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v14);
  v16 = (char *)v13;
  if (objc_msgSend(ObjCClassFromMetadata, "respondsToSelector:", "useNewDefaultBackgroundStyle"))
    objc_msgSend((id)objc_opt_self(SLAttributionView), "useNewDefaultBackgroundStyle");
  objc_msgSend(*(id *)&v16[OBJC_IVAR____TtC8ShelfKit18HighlightsProvider_highlightCenter], "setDelegate:", v16);
  _s8ShelfKit18HighlightsProviderC021highlightCenterDidAddC0yySo011SLHighlightF0CF_0();
  v17 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  v18 = ACDAccountStoreDidChangeNotification;
  v19 = v16;
  objc_msgSend(v17, "addObserver:selector:name:object:", v19, "accountDidChange", v18, 0);

  swift_release(a1);
  return v19;
}

id HighlightsProvider.__deallocating_deinit()
{
  char *v0;
  objc_class *ObjectType;
  id v2;
  objc_super v4;

  ObjectType = (objc_class *)swift_getObjectType(v0);
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC8ShelfKit18HighlightsProvider_highlightCenter], "setDelegate:", 0);
  v2 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  objc_msgSend(v2, "removeObserver:name:object:", v0, ACDAccountStoreDidChangeNotification, 0);

  v4.receiver = v0;
  v4.super_class = ObjectType;
  return objc_msgSendSuper2(&v4, "dealloc");
}

uint64_t HighlightsProvider.sharedWithYouShelfPublisher.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  __int128 v19[2];
  uint64_t v20;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEA18);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3BEA20);
  v18 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit18HighlightsProvider_highlightsSubject);
  sub_150C8(v0 + OBJC_IVAR____TtC8ShelfKit18HighlightsProvider_storeDataProvider, (uint64_t)v19);
  v8 = swift_allocObject(&unk_384E78, 56, 7);
  sub_F4D8(v19, v8 + 16);
  swift_retain();
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BE9E0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3370);
  v11 = sub_32914(&qword_3BEA30, &qword_3BE9E0, (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
  Publisher.map<A>(_:)(sub_183478, v8, v9, v10, v11);
  swift_release(v8);
  swift_release(v20);
  v12 = sub_32914(&qword_3BEA38, &qword_3BEA18, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v13 = sub_32914(&qword_3BEA40, &qword_3B3370, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher<>.switchToLatest()(v1, v12, v13);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  v14 = sub_32914(&qword_3BEA48, (uint64_t *)&unk_3BEA20, (uint64_t)&protocol conformance descriptor for Publishers.SwitchToLatest<A, B>);
  v15 = Publisher.eraseToAnyPublisher()(v5, v14);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v7, v5);
  return v15;
}

uint64_t sub_183028@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t result;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  id v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  id v31;
  void *v32;
  id v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  _QWORD *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  unint64_t v58;
  uint64_t v59;
  _QWORD *v60;

  v56 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v56 - 8);
  __chkstk_darwin(v56);
  v55 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB78);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *a1;
  if ((unint64_t)*a1 >> 62)
  {
    if (v12 < 0)
      v48 = *a1;
    else
      v48 = v12 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v13 = _CocoaArrayWrapper.endIndex.getter(v48);
    swift_bridgeObjectRelease();
  }
  else
  {
    v13 = *(_QWORD *)((char *)&dword_10 + (v12 & 0xFFFFFFFFFFFFF8));
  }
  v14 = _swiftEmptyArrayStorage;
  v57 = v11;
  if (!v13)
  {
    v17 = _swiftEmptyArrayStorage;
LABEL_21:
    v36 = a2[3];
    v37 = a2[4];
    __swift_project_boxed_opaque_existential_1(a2, v36);
    v38 = (*(uint64_t (**)(_QWORD *, _QWORD *, uint64_t, uint64_t))(v37 + 128))(v17, v14, v36, v37);
    swift_bridgeObjectRelease();
    v39 = swift_bridgeObjectRelease();
    v40 = Promise.optionalPublisher.getter(v39);
    swift_release(v38);
    v60 = (_QWORD *)v40;
    v41 = swift_allocObject(&unk_385038, 24, 7);
    *(_QWORD *)(v41 + 16) = v12;
    swift_bridgeObjectRetain();
    v42 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB80);
    v43 = type metadata accessor for ModernShelf(0);
    v44 = sub_32914(&qword_3BEB88, &qword_3BEB80, (uint64_t)&protocol conformance descriptor for Future<A, B>);
    v45 = v57;
    Publisher.map<A>(_:)(sub_1875CC, v41, v42, v43, v44);
    swift_release(v41);
    swift_release(v60);
    v46 = sub_32914(&qword_3BEB90, &qword_3BEB78, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
    v47 = Publisher.eraseToAnyPublisher()(v8, v46);
    result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v45, v8);
    *a3 = v47;
    return result;
  }
  v54 = a2;
  v60 = _swiftEmptyArrayStorage;
  result = sub_1807B0(0, v13 & ~(v13 >> 63), 0);
  if ((v13 & 0x8000000000000000) == 0)
  {
    v50 = v13 & ~(v13 >> 63);
    v51 = v9;
    v52 = v8;
    v53 = a3;
    v16 = 0;
    v17 = v60;
    v58 = v12 & 0xC000000000000001;
    v59 = v13;
    v18 = v12;
    do
    {
      if (v58)
        v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v16);
      else
        v19 = *(id *)(v12 + 8 * v16 + 32);
      v20 = v19;
      v21 = objc_msgSend(v19, "identifier");
      v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
      v24 = v23;

      v60 = v17;
      v26 = v17[2];
      v25 = v17[3];
      if (v26 >= v25 >> 1)
      {
        sub_1807B0(v25 > 1, v26 + 1, 1);
        v17 = v60;
      }
      ++v16;
      v17[2] = v26 + 1;
      v27 = &v17[2 * v26];
      v27[4] = v22;
      v27[5] = v24;
      v12 = v18;
    }
    while (v59 != v16);
    v60 = _swiftEmptyArrayStorage;
    sub_1808F8(0, v50, 0);
    v28 = 0;
    v14 = v60;
    v29 = v55;
    v30 = v56;
    do
    {
      if (v58)
        v31 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v28);
      else
        v31 = *(id *)(v12 + 8 * v28 + 32);
      v32 = v31;
      v33 = objc_msgSend(v31, "resourceURL");
      static URL._unconditionallyBridgeFromObjectiveC(_:)(v33);

      v60 = v14;
      v35 = v14[2];
      v34 = v14[3];
      if (v35 >= v34 >> 1)
      {
        sub_1808F8(v34 > 1, v35 + 1, 1);
        v14 = v60;
      }
      ++v28;
      v14[2] = v35 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))((unint64_t)v14+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v35, v29, v30);
    }
    while (v59 != v28);
    v8 = v52;
    a3 = v53;
    v9 = v51;
    a2 = v54;
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

uint64_t sub_183454()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1((_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_183478@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_183028(a1, (_QWORD *)(v2 + 16), a2);
}

uint64_t sub_183480@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;
  __int16 v13;
  int v14;
  __int16 v15;
  uint64_t v16;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8660);
  __chkstk_darwin(v6);
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  v9 = (char *)&v13 - v8;
  if (*a1)
  {
    Shelf.mapToModernShelf()((uint64_t)&v13 - v8);
    v10 = type metadata accessor for ModernShelf(0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1, v10) != 1)
    {
      sub_15C18((uint64_t)v9, (uint64_t)a3);
      return sub_1835C4(a2);
    }
  }
  else
  {
    v12 = type metadata accessor for ModernShelf(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v9, 1, 1, v12);
  }
  sub_1459C((uint64_t)v9, &qword_3B8660);
  v13 = 267;
  v14 = 0;
  v15 = 256;
  v16 = 1;
  return ModernShelf.init(id:title:itemPresentation:items:)(0xD000000000000019, 0x8000000000312350, 0, 0, (unsigned __int8 *)&v13, (uint64_t)_swiftEmptyArrayStorage, a3);
}

uint64_t sub_1835C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t inited;
  uint64_t v20;
  id v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  char v52[24];
  char v53[56];

  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v3);
  v43 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ModernShelf(0);
  v6 = sub_20A680(*(_QWORD *)(v1 + *(int *)(v5 + 28)));
  if (v6)
    v7 = (uint64_t)v6;
  else
    v7 = (uint64_t)_swiftEmptyArrayStorage;
  if ((unint64_t)v7 >> 62)
    goto LABEL_39;
  v8 = *(_QWORD *)((char *)&dword_10 + (v7 & 0xFFFFFFFFFFFFF8));
  while (v8)
  {
    if ((unint64_t)a1 >> 62)
    {
      if (a1 < 0)
        v39 = a1;
      else
        v39 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
      v51 = _CocoaArrayWrapper.endIndex.getter(v39);
      swift_bridgeObjectRelease();
    }
    else
    {
      v51 = *(_QWORD *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8));
    }
    v9 = 0;
    v45 = v7;
    v46 = v7 & 0xC000000000000001;
    v41 = v7 + 32;
    v42 = v7 & 0xFFFFFFFFFFFFFF8;
    v49 = a1;
    v50 = a1 & 0xC000000000000001;
    v44 = v8;
    while (1)
    {
      if (v46)
      {
        v13 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(v9);
        v14 = __OFADD__(v9++, 1);
        if (v14)
          goto LABEL_37;
      }
      else
      {
        if (v9 >= *(_QWORD *)(v42 + 16))
          goto LABEL_38;
        v13 = *(_QWORD **)(v41 + 8 * v9);
        swift_retain();
        v14 = __OFADD__(v9++, 1);
        if (v14)
          goto LABEL_37;
      }
      v16 = v13[2];
      v15 = v13[3];
      v17 = v13[5];
      v18 = type metadata accessor for HighlightIdentifier();
      inited = swift_initStackObject(v18, v53);
      *(_QWORD *)(inited + 16) = v16;
      *(_QWORD *)(inited + 24) = v15;
      *(_QWORD *)(inited + 32) = v17;
      *(_BYTE *)(inited + 40) = 0;
      if (v51)
        break;
      swift_bridgeObjectRetain();
      swift_release(inited);
      v10 = 0;
LABEL_10:
      v11 = (_QWORD *)((char *)v13 + OBJC_IVAR____TtC8ShelfKit13HighlightItem_highlight);
      swift_beginAccess((char *)v13 + OBJC_IVAR____TtC8ShelfKit13HighlightItem_highlight, v52, 1, 0);
      v12 = *v11;
      *v11 = v10;
      swift_release(v13);
      swift_release(v12);
      if (v9 == v8)
        return swift_bridgeObjectRelease();
    }
    v47 = v17;
    v48 = v13;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v20 = 4;
    while (1)
    {
      v7 = v20 - 4;
      v21 = v50 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v20 - 4) : *(id *)(a1 + 8 * v20);
      v22 = v21;
      a1 = v20 - 3;
      if (__OFADD__(v7, 1))
        break;
      v23 = objc_msgSend(v21, "identifier");
      v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
      v26 = v25;

      v27 = v24 == v16 && v26 == v15;
      if (v27)
      {
        a1 = v49;
        swift_bridgeObjectRelease();
        goto LABEL_33;
      }
      v28 = _stringCompareWithSmolCheck(_:_:expecting:)(v24, v26, v16, v15, 0);
      swift_bridgeObjectRelease();
      if ((v28 & 1) != 0)
      {
        a1 = v49;
LABEL_33:
        swift_bridgeObjectRelease();
        v29 = type metadata accessor for ImpressionMetrics(0);
        v30 = (uint64_t)v43;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v43, 1, 1, v29);
        v31 = type metadata accessor for Highlight(0);
        v10 = swift_allocObject(v31, *(unsigned int *)(v31 + 48), *(unsigned __int16 *)(v31 + 52));
        *(_QWORD *)(v10 + 32) = v22;
        v32 = v22;
        v33 = objc_msgSend(v32, "identifier");
        v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
        v36 = v35;

        *(_QWORD *)(v10 + 16) = v34;
        *(_QWORD *)(v10 + 24) = v36;
        *(_QWORD *)(v10 + 40) = v47;
        *(_BYTE *)(v10 + 48) = 0;
        sub_23AB8(v30, v10 + OBJC_IVAR____TtC8ShelfKit9Highlight_impressionMetrics);
        swift_release(inited);
LABEL_34:
        v8 = v44;
        v7 = v45;
        v13 = v48;
        goto LABEL_10;
      }

      ++v20;
      v27 = a1 == v51;
      a1 = v49;
      if (v27)
      {
        swift_release(inited);
        swift_bridgeObjectRelease();
        v10 = 0;
        goto LABEL_34;
      }
    }
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    if (v7 < 0)
      v37 = v7;
    else
      v37 = v7 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v8 = _CocoaArrayWrapper.endIndex.getter(v37);
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t HighlightsProvider.pagePublisher.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  __int128 v19[2];
  uint64_t v20;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEA50);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEA58);
  v18 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8ShelfKit18HighlightsProvider_highlightsSubject);
  sub_150C8(v0 + OBJC_IVAR____TtC8ShelfKit18HighlightsProvider_storeDataProvider, (uint64_t)v19);
  v8 = swift_allocObject(&unk_384EA0, 56, 7);
  sub_F4D8(v19, v8 + 16);
  swift_retain();
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BE9E0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEA60);
  v11 = sub_32914(&qword_3BEA30, &qword_3BE9E0, (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
  Publisher.map<A>(_:)(sub_18401C, v8, v9, v10, v11);
  swift_release(v8);
  swift_release(v20);
  v12 = sub_32914(&qword_3BEA68, &qword_3BEA50, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v13 = sub_32914(&qword_3BEA70, &qword_3BEA60, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher<>.switchToLatest()(v1, v12, v13);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  v14 = sub_32914(&qword_3BEA78, &qword_3BEA58, (uint64_t)&protocol conformance descriptor for Publishers.SwitchToLatest<A, B>);
  v15 = Publisher.eraseToAnyPublisher()(v5, v14);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v7, v5);
  return v15;
}

uint64_t sub_183BF0@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t result;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  id v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  id v31;
  void *v32;
  id v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  _QWORD *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  unint64_t v58;
  uint64_t v59;
  _QWORD *v60;

  v56 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v56 - 8);
  __chkstk_darwin(v56);
  v55 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3BEB50);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *a1;
  if ((unint64_t)*a1 >> 62)
  {
    if (v12 < 0)
      v48 = *a1;
    else
      v48 = v12 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v13 = _CocoaArrayWrapper.endIndex.getter(v48);
    swift_bridgeObjectRelease();
  }
  else
  {
    v13 = *(_QWORD *)((char *)&dword_10 + (v12 & 0xFFFFFFFFFFFFF8));
  }
  v14 = _swiftEmptyArrayStorage;
  v57 = v11;
  if (!v13)
  {
    v17 = _swiftEmptyArrayStorage;
LABEL_21:
    v36 = a2[3];
    v37 = a2[4];
    __swift_project_boxed_opaque_existential_1(a2, v36);
    v38 = (*(uint64_t (**)(_QWORD *, _QWORD *, uint64_t, uint64_t))(v37 + 96))(v17, v14, v36, v37);
    swift_bridgeObjectRelease();
    v39 = swift_bridgeObjectRelease();
    v40 = Promise.optionalPublisher.getter(v39);
    swift_release(v38);
    v60 = (_QWORD *)v40;
    v41 = swift_allocObject(&unk_385010, 24, 7);
    *(_QWORD *)(v41 + 16) = v12;
    swift_bridgeObjectRetain();
    v42 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4A20);
    v43 = type metadata accessor for Page(0);
    v44 = sub_32914(&qword_3BEB60, &qword_3B4A20, (uint64_t)&protocol conformance descriptor for Future<A, B>);
    v45 = v57;
    Publisher.map<A>(_:)(sub_1875C4, v41, v42, v43, v44);
    swift_release(v41);
    swift_release(v60);
    v46 = sub_32914(&qword_3BEB68, (uint64_t *)&unk_3BEB50, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
    v47 = Publisher.eraseToAnyPublisher()(v8, v46);
    result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v45, v8);
    *a3 = v47;
    return result;
  }
  v54 = a2;
  v60 = _swiftEmptyArrayStorage;
  result = sub_1807B0(0, v13 & ~(v13 >> 63), 0);
  if ((v13 & 0x8000000000000000) == 0)
  {
    v50 = v13 & ~(v13 >> 63);
    v51 = v9;
    v52 = v8;
    v53 = a3;
    v16 = 0;
    v17 = v60;
    v58 = v12 & 0xC000000000000001;
    v59 = v13;
    v18 = v12;
    do
    {
      if (v58)
        v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v16);
      else
        v19 = *(id *)(v12 + 8 * v16 + 32);
      v20 = v19;
      v21 = objc_msgSend(v19, "identifier");
      v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
      v24 = v23;

      v60 = v17;
      v26 = v17[2];
      v25 = v17[3];
      if (v26 >= v25 >> 1)
      {
        sub_1807B0(v25 > 1, v26 + 1, 1);
        v17 = v60;
      }
      ++v16;
      v17[2] = v26 + 1;
      v27 = &v17[2 * v26];
      v27[4] = v22;
      v27[5] = v24;
      v12 = v18;
    }
    while (v59 != v16);
    v60 = _swiftEmptyArrayStorage;
    sub_1808F8(0, v50, 0);
    v28 = 0;
    v14 = v60;
    v29 = v55;
    v30 = v56;
    do
    {
      if (v58)
        v31 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v28);
      else
        v31 = *(id *)(v12 + 8 * v28 + 32);
      v32 = v31;
      v33 = objc_msgSend(v31, "resourceURL");
      static URL._unconditionallyBridgeFromObjectiveC(_:)(v33);

      v60 = v14;
      v35 = v14[2];
      v34 = v14[3];
      if (v35 >= v34 >> 1)
      {
        sub_1808F8(v34 > 1, v35 + 1, 1);
        v14 = v60;
      }
      ++v28;
      v14[2] = v35 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))((unint64_t)v14+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v35, v29, v30);
    }
    while (v59 != v28);
    v8 = v52;
    a3 = v53;
    v9 = v51;
    a2 = v54;
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

uint64_t sub_18401C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_183BF0(a1, (_QWORD *)(v2 + 16), a2);
}

uint64_t sub_184024@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  char *v38;
  char v39;

  v35 = a2;
  v37 = type metadata accessor for InteractionContext.Page(0);
  __chkstk_darwin(v37);
  v38 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for PageMetrics(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
  __chkstk_darwin(v9);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4720);
  __chkstk_darwin(v12);
  v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B8660);
  __chkstk_darwin(v15);
  v17 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for ModernShelf(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v34 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = *a1;
  if (!*a1)
    goto LABEL_15;
  v36 = a3;
  v23 = *(_QWORD *)(v22 + 16);
  if (!((unint64_t)v23 >> 62))
  {
    v24 = *(_QWORD *)((char *)&dword_10 + (v23 & 0xFFFFFFFFFFFFF8));
    swift_retain();
    result = swift_bridgeObjectRetain();
    if (v24)
      goto LABEL_4;
LABEL_13:
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56))(v17, 1, 1, v18);
LABEL_14:
    swift_release(v22);
    sub_1459C((uint64_t)v17, &qword_3B8660);
    a3 = v36;
LABEL_15:
    v29 = type metadata accessor for JSONObject(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v14, 1, 1, v29);
    v30 = type metadata accessor for ArtworkModel(0);
    v31 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v11, 1, 1, v30);
    static PageMetrics.notInstrumented.getter(v31);
    v32 = (uint64_t)v38;
    swift_storeEnumTagMultiPayload(v38, v37, 19);
    v33 = type metadata accessor for Page(0);
    swift_allocObject(v33, *(unsigned int *)(v33 + 48), *(unsigned __int16 *)(v33 + 52));
    v39 = 1;
    result = Page.init(shelves:title:selectedFilterActionId:filterActions:headerBackgroundColor:headerButtonItems:presentationOptions:pageContext:nextPage:isIncomplete:isExplicit:uber:showAdamId:channelAdamId:mapiInLibrary:pageMetrics:)((uint64_t)_swiftEmptyArrayStorage, 0, 0, 0, 0, (uint64_t)_swiftEmptyArrayStorage, 0x100000000, (uint64_t)_swiftEmptyArrayStorage, 0, v32, (uint64_t)v14, 0, 0, (uint64_t)v11, 0, 1, 0, 1, 2,
               (uint64_t)v8);
    v22 = result;
    goto LABEL_16;
  }
  if (v23 < 0)
    v28 = *(_QWORD *)(v22 + 16);
  else
    v28 = v23 & 0xFFFFFFFFFFFFFF8;
  swift_retain();
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter(v28);
  if (!result)
    goto LABEL_13;
LABEL_4:
  if ((v23 & 0xC000000000000001) != 0)
  {
    v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0);
LABEL_7:
    v27 = v26;
    swift_bridgeObjectRelease();
    Shelf.mapToModernShelf()((uint64_t)v17);

    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) != 1)
    {
      sub_15C18((uint64_t)v17, (uint64_t)v21);
      sub_1835C4(v35);
      result = sub_434E4((uint64_t)v21);
      a3 = v36;
LABEL_16:
      *a3 = v22;
      return result;
    }
    goto LABEL_14;
  }
  if (*(_QWORD *)((char *)&dword_10 + (v23 & 0xFFFFFFFFFFFFF8)))
  {
    v26 = *(id *)(v23 + 32);
    goto LABEL_7;
  }
  __break(1u);
  return result;
}

uint64_t HighlightsProvider.pageHighlightShelfPublisherForId(adamId:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  __int128 v6[2];

  sub_150C8(v1 + OBJC_IVAR____TtC8ShelfKit18HighlightsProvider_storeDataProvider, (uint64_t)v6);
  v3 = swift_allocObject(&unk_384EC8, 64, 7);
  sub_F4D8(v6, v3 + 16);
  *(_QWORD *)(v3 + 56) = a1;
  v4 = sub_184458((uint64_t)sub_184454, v3);
  swift_release(v3);
  return v4;
}

uint64_t sub_184458(uint64_t a1, uint64_t a2)
{
  char *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEA18);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3BEA20);
  v22 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = *(_QWORD *)&v2[OBJC_IVAR____TtC8ShelfKit18HighlightsProvider_highlightsSubject];
  v12 = (_QWORD *)swift_allocObject(&unk_384F98, 40, 7);
  v12[2] = a1;
  v12[3] = a2;
  v12[4] = v2;
  swift_retain();
  swift_retain();
  v13 = v2;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BE9E0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3370);
  v16 = sub_32914(&qword_3BEA30, &qword_3BE9E0, (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
  Publisher.map<A>(_:)(sub_18753C, v12, v14, v15, v16);
  swift_release(v12);
  swift_release(v23);
  v17 = sub_32914(&qword_3BEA38, &qword_3BEA18, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v18 = sub_32914(&qword_3BEA40, &qword_3B3370, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher<>.switchToLatest()(v5, v17, v18);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v19 = sub_32914(&qword_3BEA48, (uint64_t *)&unk_3BEA20, (uint64_t)&protocol conformance descriptor for Publishers.SwitchToLatest<A, B>);
  v20 = Publisher.eraseToAnyPublisher()(v9, v19);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v11, v9);
  return v20;
}

uint64_t HighlightsProvider.pageHighlightShelfPublisherForURL(pageURL:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  __int128 v12[2];

  v3 = type metadata accessor for URL(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v3);
  sub_150C8(v1 + OBJC_IVAR____TtC8ShelfKit18HighlightsProvider_storeDataProvider, (uint64_t)v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v3);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 56) & ~v6;
  v8 = swift_allocObject(&unk_384EF0, v7 + v5, v6 | 7);
  sub_F4D8(v12, v8 + 16);
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v8 + v7, (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  v9 = sub_184458((uint64_t)sub_184780, v8);
  swift_release(v8);
  return v9;
}

id HighlightsProvider.addFeedbackForHighlight(highlight:feedback:)(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;
  void *v4;
  uint64_t v5;
  _BYTE v7[24];
  uint64_t v8;

  v4 = *(void **)(v2 + OBJC_IVAR____TtC8ShelfKit18HighlightsProvider_highlightCenter);
  v5 = *(_QWORD *)(a1 + 32);
  if ((*a2 & 1) != 0)
    return objc_msgSend(v4, "feedbackForHighlight:withType:completionBlock:", v5, 1, 0);
  objc_msgSend(v4, "feedbackForHighlight:withType:completionBlock:", v5, 0, 0);
  swift_beginAccess(v2 + OBJC_IVAR____TtC8ShelfKit18HighlightsProvider_highlightsDisplayedOnCurrentPage, v7, 33, 0);
  swift_retain();
  sub_9C4AC(&v8, a1);
  swift_endAccess(v7);
  return (id)swift_release(v8);
}

void sub_184830()
{
  uint64_t v0;
  id v1;
  id v2;
  int v3;
  int v4;
  id v5;

  v1 = objc_msgSend((id)objc_opt_self(ACAccountStore), "ams_sharedAccountStore");
  v5 = objc_msgSend(v1, "ams_activeiTunesAccount");

  if (v5)
  {
    v2 = objc_msgSend(v5, "ams_DSID");

    if (v2)
    {
      v3 = *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8ShelfKit18HighlightsProvider_userIsLoggedIn);
      *(_BYTE *)(v0 + OBJC_IVAR____TtC8ShelfKit18HighlightsProvider_userIsLoggedIn) = 1;
      if (v3 != 1)
        _s8ShelfKit18HighlightsProviderC021highlightCenterDidAddC0yySo011SLHighlightF0CF_0();

      return;
    }

  }
  v4 = *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8ShelfKit18HighlightsProvider_userIsLoggedIn);
  *(_BYTE *)(v0 + OBJC_IVAR____TtC8ShelfKit18HighlightsProvider_userIsLoggedIn) = 0;
  if (v4 == 1)
    _s8ShelfKit18HighlightsProviderC021highlightCenterDidAddC0yySo011SLHighlightF0CF_0();
}

Swift::Bool __swiftcall HighlightsProvider.isSharedContent(contentAdamId:)(Swift::Int64 contentAdamId)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + OBJC_IVAR____TtC8ShelfKit18HighlightsProvider_highlightsDisplayedOnCurrentPage, v5, 0, 0);
  v3 = swift_bridgeObjectRetain();
  LOBYTE(contentAdamId) = sub_1824C4(v3, contentAdamId);
  swift_bridgeObjectRelease();
  return contentAdamId & 1;
}

Swift::Void __swiftcall HighlightsProvider.clearSharedItems()()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  _BYTE v3[24];

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC8ShelfKit18HighlightsProvider_highlightsDisplayedOnCurrentPage);
  swift_beginAccess(v0 + OBJC_IVAR____TtC8ShelfKit18HighlightsProvider_highlightsDisplayedOnCurrentPage, v3, 1, 0);
  v2 = *v1;
  *v1 = (uint64_t)&_swiftEmptySetSingleton;
  swift_bridgeObjectRelease(v2);
}

uint64_t sub_184AF0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  _QWORD aBlock[5];
  uint64_t v26;

  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v24 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_327F8(0, (unint64_t *)&qword_3B8710, OS_dispatch_queue_ptr);
  v13 = (void *)static OS_dispatch_queue.main.getter(v12);
  v14 = swift_allocObject(&unk_3850B0, 32, 7);
  *(_QWORD *)(v14 + 16) = a4;
  *(_QWORD *)(v14 + 24) = a1;
  aBlock[4] = sub_187644;
  v26 = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_2C9F4;
  aBlock[3] = &block_descriptor_42;
  v15 = _Block_copy(aBlock);
  v16 = v26;
  v17 = a4;
  swift_bridgeObjectRetain();
  v18 = swift_release(v16);
  static DispatchQoS.unspecified.getter(v18);
  aBlock[0] = _swiftEmptyArrayStorage;
  v19 = sub_F1C0((unint64_t *)&qword_3B4420, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8720);
  v21 = sub_32914((unint64_t *)&qword_3B4430, (uint64_t *)&unk_3B8720, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v20, v21, v6, v19);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v8, v15);
  _Block_release(v15);

  (*(void (**)(char *, uint64_t))(v24 + 8))(v8, v6);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v23);
}

uint64_t sub_184D10(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  CurrentValueSubject.value.getter(&v9, a1);
  v3 = v9;
  if ((unint64_t)v9 >> 62)
  {
    if (v9 < 0)
      v6 = v9;
    else
      v6 = v9 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v9);
    v4 = _CocoaArrayWrapper.endIndex.getter(v6);
    swift_bridgeObjectRelease(v3);
  }
  else
  {
    v4 = *(_QWORD *)((char *)&dword_10 + (v9 & 0xFFFFFFFFFFFFF8));
  }
  result = swift_bridgeObjectRelease(v3);
  if (v4)
    goto LABEL_6;
  if (!((unint64_t)a2 >> 62))
  {
    if (!*(_QWORD *)((char *)&dword_10 + (a2 & 0xFFFFFFFFFFFFF8)))
      return result;
    goto LABEL_6;
  }
  v7 = a2 < 0 ? a2 : a2 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a2);
  v8 = _CocoaArrayWrapper.endIndex.getter(v7);
  result = swift_bridgeObjectRelease(a2);
  if (v8)
  {
LABEL_6:
    v9 = a2;
    return CurrentValueSubject.send(_:)();
  }
  return result;
}

void sub_184DEC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, void *);
  uint64_t v9;
  uint64_t v10;
  id v11;

  v8 = *(void (**)(uint64_t, uint64_t, void *))(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  v9 = sub_327F8(0, &qword_3BEB08, SLHighlight_ptr);
  v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a2, v9);
  swift_retain();
  v11 = a4;
  v8(v10, a3, a4);
  swift_release(v7);
  swift_bridgeObjectRelease();

}

uint64_t sub_184E8C@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(_QWORD *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  id v26;
  uint64_t v27;
  char *v28;
  id v29;
  unint64_t v30;
  char v31;
  char v32;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BOOL8 v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  _QWORD *v41;
  uint64_t *v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t result;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t (*v65)(_QWORD *);
  uint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  id v75;
  uint64_t v76;
  _QWORD *v77;

  v65 = a2;
  v66 = a4;
  v64 = a3;
  v74 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v74 - 8);
  __chkstk_darwin(v74);
  v72 = (char *)&v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B4370);
  __chkstk_darwin(v9);
  v11 = (char *)&v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v73 = (char *)&v60 - v13;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB28);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v67 = (char *)&v60 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *a1;
  if ((unint64_t)*a1 >> 62)
  {
LABEL_32:
    if (v17 < 0)
      v47 = v17;
    else
      v47 = v17 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v18 = _CocoaArrayWrapper.endIndex.getter(v47);
    if (v18)
      goto LABEL_3;
  }
  else
  {
    v18 = *(_QWORD *)((char *)&dword_10 + (v17 & 0xFFFFFFFFFFFFF8));
    swift_bridgeObjectRetain();
    if (v18)
    {
LABEL_3:
      v69 = v11;
      v61 = v15;
      v62 = v14;
      v63 = a5;
      v71 = v17 & 0xC000000000000001;
      v19 = &_swiftEmptyDictionarySingleton;
      v15 = 4;
      a5 = (unint64_t)v73;
      v20 = v74;
      v68 = v17;
      v70 = v18;
      while (1)
      {
        if (v71)
          v25 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v15 - 4);
        else
          v25 = *(id *)(v17 + 8 * v15);
        v14 = (uint64_t)v25;
        if (__OFADD__(v15 - 4, 1))
        {
          __break(1u);
LABEL_30:
          __break(1u);
LABEL_31:
          __break(1u);
          goto LABEL_32;
        }
        v76 = v15 - 3;
        swift_bridgeObjectRetain();
        v26 = objc_msgSend((id)v14, "identifier");
        v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
        v11 = v28;

        v75 = (id)v14;
        v29 = objc_msgSend((id)v14, "resourceURL");
        static URL._unconditionallyBridgeFromObjectiveC(_:)(v29);

        v14 = *(_QWORD *)(v7 + 56);
        ((void (*)(unint64_t, _QWORD, uint64_t, uint64_t))v14)(a5, 0, 1, v20);
        if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(a5, 1, v20) == 1)
        {
          sub_1459C(a5, &qword_3B4370);
          swift_bridgeObjectRetain();
          v30 = sub_29724(v27, (uint64_t)v11);
          v32 = v31;
          swift_bridgeObjectRelease();
          if ((v32 & 1) != 0)
          {
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v19);
            v77 = v19;
            v22 = (uint64_t)v19;
            if (!isUniquelyReferenced_nonNull_native)
            {
              sub_231F80();
              v22 = (uint64_t)v77;
            }
            swift_bridgeObjectRelease();
            v24 = (uint64_t)v69;
            v23 = v74;
            (*(void (**)(char *, unint64_t, uint64_t))(v7 + 32))(v69, *(_QWORD *)(v22 + 56) + *(_QWORD *)(v7 + 72) * v30, v74);
            sub_230AE4(v30, v22);
            swift_bridgeObjectRelease();
            v21 = 0;
          }
          else
          {
            v21 = 1;
            v22 = (uint64_t)v19;
            v23 = v74;
            v24 = (uint64_t)v69;
          }
          ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v14)(v24, v21, 1, v23);
          swift_bridgeObjectRelease();
          sub_1459C(v24, &qword_3B4370);
          swift_bridgeObjectRelease();

          v19 = (_QWORD *)v22;
          v20 = v23;
          goto LABEL_6;
        }
        v17 = *(_QWORD *)(v7 + 32);
        ((void (*)(char *, unint64_t, uint64_t))v17)(v72, a5, v20);
        v34 = swift_isUniquelyReferenced_nonNull_native(v19);
        v77 = v19;
        a5 = sub_29724(v27, (uint64_t)v11);
        v36 = v19[2];
        v37 = (v35 & 1) == 0;
        v38 = v36 + v37;
        if (__OFADD__(v36, v37))
          goto LABEL_30;
        v14 = v35;
        if (v19[3] >= v38)
        {
          if ((v34 & 1) != 0)
          {
            v41 = v77;
            if ((v35 & 1) == 0)
              goto LABEL_25;
          }
          else
          {
            sub_231F80();
            v41 = v77;
            if ((v14 & 1) == 0)
              goto LABEL_25;
          }
        }
        else
        {
          sub_22ED00(v38, v34);
          v39 = sub_29724(v27, (uint64_t)v11);
          if ((v14 & 1) != (v40 & 1))
          {
            result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
            __break(1u);
            return result;
          }
          a5 = v39;
          v41 = v77;
          if ((v14 & 1) == 0)
          {
LABEL_25:
            v41[(a5 >> 6) + 8] |= 1 << a5;
            v42 = (uint64_t *)(v41[6] + 16 * a5);
            *v42 = v27;
            v42[1] = (uint64_t)v11;
            v20 = v74;
            ((void (*)(unint64_t, char *, uint64_t))v17)(v41[7] + *(_QWORD *)(v7 + 72) * a5, v72, v74);
            v43 = v41[2];
            v44 = __OFADD__(v43, 1);
            v45 = v43 + 1;
            if (v44)
              goto LABEL_31;
            v41[2] = v45;
            swift_bridgeObjectRetain();
            goto LABEL_27;
          }
        }
        v20 = v74;
        (*(void (**)(unint64_t, char *, uint64_t))(v7 + 40))(v41[7] + *(_QWORD *)(v7 + 72) * a5, v72, v74);
LABEL_27:
        v46 = v77;
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v19 = v46;
        v17 = v68;
LABEL_6:
        a5 = (unint64_t)v73;
        ++v15;
        if (v76 == v70)
        {
          swift_bridgeObjectRelease();
          v14 = v62;
          a5 = v63;
          v15 = v61;
          goto LABEL_37;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  v19 = &_swiftEmptyDictionarySingleton;
LABEL_37:
  v48 = v65(v19);
  v49 = swift_bridgeObjectRelease();
  v50 = Promise.optionalPublisher.getter(v49);
  swift_release(v48);
  v77 = (_QWORD *)v50;
  v51 = swift_allocObject(&unk_384FC0, 24, 7);
  swift_unknownObjectWeakInit(v51 + 16, v66);
  v52 = swift_allocObject(&unk_384FE8, 32, 7);
  *(_QWORD *)(v52 + 16) = v51;
  *(_QWORD *)(v52 + 24) = v17;
  swift_bridgeObjectRetain();
  v53 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB30);
  v54 = type metadata accessor for ModernShelf(0);
  v55 = sub_32914(&qword_3BEB38, &qword_3BEB30, (uint64_t)&protocol conformance descriptor for Future<A, B>);
  v56 = v67;
  Publisher.compactMap<A>(_:)(sub_187598, v52, v53, v54, v55);
  swift_release(v52);
  swift_release(v77);
  v57 = sub_32914((unint64_t *)&unk_3BEB40, &qword_3BEB28, (uint64_t)&protocol conformance descriptor for Publishers.CompactMap<A, B>);
  v58 = Publisher.eraseToAnyPublisher()(v14, v57);
  result = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v56, v14);
  *(_QWORD *)a5 = v58;
  return result;
}

uint64_t sub_1854D0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t Strong;
  void *v9;
  uint64_t v10;
  uint64_t v12;
  _BYTE v13[24];

  v6 = *a1;
  v7 = a2 + 16;
  swift_beginAccess(a2 + 16, v13, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v7);
  if (Strong)
  {
    v9 = (void *)Strong;
    sub_185584(a3, v6, a4);

    v10 = type metadata accessor for ModernShelf(0);
    return (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(a4, 0, 1, v10);
  }
  else
  {
    v12 = type metadata accessor for ModernShelf(0);
    return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(a4, 1, 1, v12);
  }
}

uint64_t sub_185584@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  int v25;
  _QWORD *v26;
  __int16 v27;
  int v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;

  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8790);
  __chkstk_darwin(v7);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    swift_retain();
    v10 = sub_1868FC(a1, a2);
    if (v10)
    {
      v11 = v10;
      v26 = a3;
      v12 = *(_QWORD *)(a2 + 32);
      v25 = *(unsigned __int8 *)(a2 + 40);
      v13 = type metadata accessor for ImpressionMetrics(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v9, 1, 1, v13);
      v14 = type metadata accessor for Highlight(0);
      v15 = swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
      *(_QWORD *)(v15 + 32) = v11;
      v16 = v11;
      v17 = objc_msgSend(v16, "identifier");
      v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
      v20 = v19;

      *(_QWORD *)(v15 + 16) = v18;
      *(_QWORD *)(v15 + 24) = v20;
      *(_QWORD *)(v15 + 40) = v12;
      *(_BYTE *)(v15 + 48) = v25;
      sub_23AB8((uint64_t)v9, v15 + OBJC_IVAR____TtC8ShelfKit9Highlight_impressionMetrics);
      swift_beginAccess(v3 + OBJC_IVAR____TtC8ShelfKit18HighlightsProvider_highlightsDisplayedOnCurrentPage, &v27, 33, 0);
      swift_retain();
      sub_9C4AC(&v31, v15);
      swift_endAccess(&v27);
      swift_release(v31);
      v27 = 10;
      v28 = 0;
      v29 = 256;
      v30 = 1;
      v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3B8750);
      v22 = swift_allocObject(v21, 72, 7);
      *(_OWORD *)(v22 + 16) = xmmword_2EA0D0;
      *(_QWORD *)(v22 + 56) = v14;
      *(_QWORD *)(v22 + 64) = sub_F1C0(&qword_3BB990, (void (*)(uint64_t))type metadata accessor for Highlight, (uint64_t)&protocol conformance descriptor for Highlight);
      *(_QWORD *)(v22 + 32) = v15;
      swift_retain();
      ModernShelf.init(id:title:itemPresentation:items:)(0xD000000000000014, 0x8000000000312330, 0, 0, (unsigned __int8 *)&v27, v22, v26);
      swift_release(v15);
      return swift_release(a2);
    }
    swift_release(a2);
  }
  v27 = 10;
  v29 = 256;
  v28 = 0;
  v30 = 1;
  return ModernShelf.init(id:title:itemPresentation:items:)(0xD000000000000014, 0x8000000000312330, 0, 0, (unsigned __int8 *)&v27, (uint64_t)_swiftEmptyArrayStorage, a3);
}

void HighlightsProvider.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("ShelfKit.HighlightsProvider", 27, "init()", 6, 0);
  __break(1u);
}

uint64_t sub_185890(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  __int128 v6[2];

  sub_150C8(v1 + OBJC_IVAR____TtC8ShelfKit18HighlightsProvider_storeDataProvider, (uint64_t)v6);
  v3 = swift_allocObject(&unk_384F70, 64, 7);
  sub_F4D8(v6, v3 + 16);
  *(_QWORD *)(v3 + 56) = a1;
  v4 = sub_184458((uint64_t)sub_184454, v3);
  swift_release(v3);
  return v4;
}

uint64_t sub_185918(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  __int128 v12[2];

  v3 = type metadata accessor for URL(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v3);
  sub_150C8(v1 + OBJC_IVAR____TtC8ShelfKit18HighlightsProvider_storeDataProvider, (uint64_t)v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v3);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 56) & ~v6;
  v8 = swift_allocObject(&unk_384F48, v7 + v5, v6 | 7);
  sub_F4D8(v12, v8 + 16);
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v8 + v7, (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  v9 = sub_184458((uint64_t)sub_184780, v8);
  swift_release(v8);
  return v9;
}

Swift::Bool __swiftcall HighlightsProvider.isSharedContent(pageAdamId:)(Swift::String_optional pageAdamId)
{
  uint64_t v1;
  uint64_t object;
  uint64_t countAndFlagsBits;
  uint64_t v4;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  unsigned __int8 *v20;
  unsigned int v21;
  uint64_t v22;
  char v23;
  _QWORD v25[4];

  if (!pageAdamId.value._object)
    goto LABEL_49;
  object = (uint64_t)pageAdamId.value._object;
  countAndFlagsBits = pageAdamId.value._countAndFlagsBits;
  v4 = HIBYTE(pageAdamId.value._object) & 0xF;
  pageAdamId.value._object = (void *)(pageAdamId.value._countAndFlagsBits & 0xFFFFFFFFFFFFLL);
  if (!((object & 0x2000000000000000) != 0 ? v4 : pageAdamId.value._countAndFlagsBits & 0xFFFFFFFFFFFFLL))
    goto LABEL_49;
  if ((object & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRetain();
    v6 = (uint64_t)sub_185F5C(countAndFlagsBits, object, 10);
    v8 = v23;
    swift_bridgeObjectRelease();
    goto LABEL_45;
  }
  if ((object & 0x2000000000000000) != 0)
  {
    v25[0] = pageAdamId.value._countAndFlagsBits;
    v25[1] = object & 0xFFFFFFFFFFFFFFLL;
    if (LOBYTE(pageAdamId.value._countAndFlagsBits) == 43)
    {
      if (!v4)
        goto LABEL_59;
      if (v4 == 1 || (BYTE1(pageAdamId.value._countAndFlagsBits) - 48) > 9u)
        goto LABEL_32;
      v6 = (BYTE1(pageAdamId.value._countAndFlagsBits) - 48);
      if (v4 != 2)
      {
        if ((BYTE2(pageAdamId.value._countAndFlagsBits) - 48) > 9u)
          goto LABEL_32;
        v6 = 10 * (BYTE1(pageAdamId.value._countAndFlagsBits) - 48)
           + (BYTE2(pageAdamId.value._countAndFlagsBits) - 48);
        v9 = v4 - 3;
        if (v9)
        {
          v10 = (unsigned __int8 *)v25 + 3;
          while (1)
          {
            v11 = *v10 - 48;
            if (v11 > 9)
              goto LABEL_32;
            v12 = 10 * v6;
            if ((unsigned __int128)(v6 * (__int128)10) >> 64 != (10 * v6) >> 63)
              goto LABEL_32;
            v6 = v12 + v11;
            if (__OFADD__(v12, v11))
              goto LABEL_32;
            v8 = 0;
            ++v10;
            if (!--v9)
              goto LABEL_45;
          }
        }
      }
    }
    else
    {
      if (LOBYTE(pageAdamId.value._countAndFlagsBits) == 45)
      {
        if (v4)
        {
          if (v4 != 1 && (BYTE1(pageAdamId.value._countAndFlagsBits) - 48) <= 9u)
          {
            if (v4 == 2)
            {
              v8 = 0;
              v6 = -(uint64_t)(BYTE1(pageAdamId.value._countAndFlagsBits) - 48);
              goto LABEL_45;
            }
            if ((BYTE2(pageAdamId.value._countAndFlagsBits) - 48) <= 9u)
            {
              v6 = -10 * (BYTE1(pageAdamId.value._countAndFlagsBits) - 48)
                 - (BYTE2(pageAdamId.value._countAndFlagsBits) - 48);
              v17 = v4 - 3;
              if (!v17)
                goto LABEL_44;
              v20 = (unsigned __int8 *)v25 + 3;
              while (1)
              {
                v21 = *v20 - 48;
                if (v21 > 9)
                  break;
                v22 = 10 * v6;
                if ((unsigned __int128)(v6 * (__int128)10) >> 64 != (10 * v6) >> 63)
                  break;
                v6 = v22 - v21;
                if (__OFSUB__(v22, v21))
                  break;
                v8 = 0;
                ++v20;
                if (!--v17)
                  goto LABEL_45;
              }
            }
          }
LABEL_32:
          v6 = 0;
          v8 = 1;
          goto LABEL_45;
        }
        __break(1u);
LABEL_59:
        __break(1u);
        return pageAdamId.value._countAndFlagsBits;
      }
      if (!v4 || (LOBYTE(pageAdamId.value._countAndFlagsBits) - 48) > 9u)
        goto LABEL_32;
      v6 = (LOBYTE(pageAdamId.value._countAndFlagsBits) - 48);
      if (v4 != 1)
      {
        if ((BYTE1(pageAdamId.value._countAndFlagsBits) - 48) > 9u)
          goto LABEL_32;
        v6 = 10 * (LOBYTE(pageAdamId.value._countAndFlagsBits) - 48)
           + (BYTE1(pageAdamId.value._countAndFlagsBits) - 48);
        v13 = v4 - 2;
        if (v13)
        {
          v14 = (unsigned __int8 *)v25 + 2;
          while (1)
          {
            v15 = *v14 - 48;
            if (v15 > 9)
              goto LABEL_32;
            v16 = 10 * v6;
            if ((unsigned __int128)(v6 * (__int128)10) >> 64 != (10 * v6) >> 63)
              goto LABEL_32;
            v6 = v16 + v15;
            if (__OFADD__(v16, v15))
              goto LABEL_32;
            v8 = 0;
            ++v14;
            if (!--v13)
              goto LABEL_45;
          }
        }
      }
    }
LABEL_44:
    v8 = 0;
    goto LABEL_45;
  }
  if ((pageAdamId.value._countAndFlagsBits & 0x1000000000000000) != 0)
    pageAdamId.value._countAndFlagsBits = (object & 0xFFFFFFFFFFFFFFFLL) + 32;
  else
    pageAdamId.value._countAndFlagsBits = _StringObject.sharedUTF8.getter(pageAdamId.value._countAndFlagsBits, object);
  v6 = (uint64_t)sub_186040((unsigned __int8 *)pageAdamId.value._countAndFlagsBits, (uint64_t)pageAdamId.value._object, 10);
  v8 = v7 & 1;
LABEL_45:
  if ((v8 & 1) != 0
    || v6 < 1
    || (swift_beginAccess(v1 + OBJC_IVAR____TtC8ShelfKit18HighlightsProvider_highlightsDisplayedOnCurrentPage, v25, 0, 0), v18 = swift_bridgeObjectRetain(), v19 = sub_1824C4(v18, v6), swift_bridgeObjectRelease(), (v19 & 1) == 0))
  {
LABEL_49:
    LOBYTE(pageAdamId.value._countAndFlagsBits) = 0;
    return pageAdamId.value._countAndFlagsBits;
  }
  LOBYTE(pageAdamId.value._countAndFlagsBits) = 1;
  return pageAdamId.value._countAndFlagsBits;
}

uint64_t HighlightsProvider.highlightCenter(_:didRemove:)(uint64_t a1, uint64_t a2)
{
  return sub_187160(a2);
}

_QWORD *sub_185E80(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return _swiftEmptyArrayStorage;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB10);
  v5 = (_QWORD *)swift_allocObject(v4, v2 + 32, 7);
  v6 = _swift_stdlib_malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

uint64_t sub_185EE4(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v5 = a1;
  v6 = a1 >> 16;
  v7 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v13 = String.UTF16View.index(_:offsetBy:)(15, v6, a2);
    v14 = v13 + (v7 << 16);
    v15 = v13 & 0xFFFFFFFFFFFFFFFCLL | v5 & 3;
    v16 = v14 & 0xFFFFFFFFFFFF0000;
    if (!v7)
      v16 = v15;
    return v16 | 4;
  }
  else
  {
    v8 = String.UTF8View._foreignIndex(_:offsetBy:)(15, v6);
    v9 = v8 + (v7 << 16);
    v10 = v8 & 0xFFFFFFFFFFFFFFFCLL | v5 & 3;
    v11 = v9 & 0xFFFFFFFFFFFF0000;
    if (!v7)
      v11 = v10;
    return v11 | 8;
  }
}

unsigned __int8 *sub_185F5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned __int8 *v12;
  uint64_t v14;
  uint64_t v15;

  v14 = a1;
  v15 = a2;
  swift_bridgeObjectRetain();
  v4 = String.init<A>(_:)(&v14, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
  v6 = v4;
  v7 = v5;
  if ((v5 & 0x1000000000000000) == 0)
  {
    if ((v5 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v9 = HIBYTE(v7) & 0xF;
    v14 = v6;
    v15 = v7 & 0xFFFFFFFFFFFFFFLL;
    v8 = (unsigned __int8 *)&v14;
    goto LABEL_7;
  }
  v6 = sub_1862BC(v4, v5);
  v11 = v10;
  swift_bridgeObjectRelease();
  v7 = v11;
  if ((v11 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v6 & 0x1000000000000000) != 0)
  {
    v8 = (unsigned __int8 *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v9 = v6 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v8 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v6, v7);
  }
LABEL_7:
  v12 = sub_186040(v8, v9, a3);
  swift_bridgeObjectRelease();
  return v12;
}

unsigned __int8 *sub_186040(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t v9;
  unsigned __int8 *i;
  unsigned int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 *v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  uint64_t v25;
  unsigned int v26;
  char v27;
  uint64_t v28;

  v3 = a2;
  v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        v5 = a2 - 1;
        if (a2 != 1)
        {
          v6 = a3 + 48;
          v7 = a3 + 55;
          v8 = a3 + 87;
          if (a3 > 10)
          {
            v6 = 58;
          }
          else
          {
            v8 = 97;
            v7 = 65;
          }
          if (result)
          {
            v9 = 0;
            for (i = result + 1; ; ++i)
            {
              v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8)
                    return 0;
                  v12 = -87;
                }
                else
                {
                  v12 = -55;
                }
              }
              else
              {
                v12 = -48;
              }
              v13 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
                return 0;
              v9 = v13 - (v11 + v12);
              if (__OFSUB__(v13, (v11 + v12)))
                return 0;
              if (!--v5)
                return (unsigned __int8 *)v9;
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_65;
    }
    if (a2)
    {
      v22 = a3 + 48;
      v23 = a3 + 55;
      v24 = a3 + 87;
      if (a3 > 10)
      {
        v22 = 58;
      }
      else
      {
        v24 = 97;
        v23 = 65;
      }
      if (result)
      {
        v25 = 0;
        do
        {
          v26 = *result;
          if (v26 < 0x30 || v26 >= v22)
          {
            if (v26 < 0x41 || v26 >= v23)
            {
              if (v26 < 0x61 || v26 >= v24)
                return 0;
              v27 = -87;
            }
            else
            {
              v27 = -55;
            }
          }
          else
          {
            v27 = -48;
          }
          v28 = v25 * a3;
          if ((unsigned __int128)(v25 * (__int128)a3) >> 64 != (v25 * a3) >> 63)
            return 0;
          v25 = v28 + (v26 + v27);
          if (__OFADD__(v28, (v26 + v27)))
            return 0;
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v28 + (v26 + v27));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_65:
    __break(1u);
    return result;
  }
  v14 = a2 - 1;
  if (a2 == 1)
    return 0;
  v15 = a3 + 48;
  v16 = a3 + 55;
  v17 = a3 + 87;
  if (a3 > 10)
  {
    v15 = 58;
  }
  else
  {
    v17 = 97;
    v16 = 65;
  }
  if (!result)
    return 0;
  v9 = 0;
  v18 = result + 1;
  do
  {
    v19 = *v18;
    if (v19 < 0x30 || v19 >= v15)
    {
      if (v19 < 0x41 || v19 >= v16)
      {
        if (v19 < 0x61 || v19 >= v17)
          return 0;
        v20 = -87;
      }
      else
      {
        v20 = -55;
      }
    }
    else
    {
      v20 = -48;
    }
    v21 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
      return 0;
    v9 = v21 + (v19 + v20);
    if (__OFADD__(v21, (v19 + v20)))
      return 0;
    ++v18;
    --v14;
  }
  while (v14);
  return (unsigned __int8 *)v9;
}

uint64_t sub_1862BC(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1;
  v3 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
    v3 = 11;
  v4 = String.subscript.getter(15, v3 | (v2 << 16), a1, a2);
  v8 = sub_186338(v4, v5, v6, v7);
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_186338(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v5;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;
  _QWORD v14[3];

  v5 = a3;
  if ((a4 & 0x1000000000000000) != 0)
  {
    v12 = sub_18647C(a1, a2, a3, a4);
    if (v12)
    {
      v9 = v12;
      v8 = (unint64_t)sub_185E80(v12, 0);
      v5 = sub_186568((unint64_t)v14, v8 + 32, v9, a1, a2, v5, a4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v5 != v9)
      {
        __break(1u);
        goto LABEL_11;
      }
    }
    else
    {
      v8 = (unint64_t)_swiftEmptyArrayStorage;
    }
    v13 = static String._uncheckedFromUTF8(_:)(v8 + 32, *(_QWORD *)(v8 + 16));
    swift_release(v8);
    return v13;
  }
  else
  {
    v8 = a1 >> 16;
    v9 = a2 >> 16;
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0)
      {
        v10 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
LABEL_5:
        v10 += v8;
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      }
LABEL_11:
      v10 = _StringObject.sharedUTF8.getter(v5, a4);
      if (!v10)
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      goto LABEL_5;
    }
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return static String._uncheckedFromUTF8(_:)((char *)v14 + v8, v9 - v8);
  }
}

unint64_t sub_18647C(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v7 = result;
  v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v8) = 1;
  v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    result = sub_185EE4(result, a3, a4);
    v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    result = sub_185EE4(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0)
      return (a2 >> 16) - (v7 >> 16);
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v10 = a3 & 0xFFFFFFFFFFFFLL;
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v10 >= a2 >> 16)
  {
    return String.UTF8View._foreignDistance(from:to:)(v7, a2, a3, a4);
  }
  __break(1u);
  return result;
}

unint64_t sub_186568(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v26;
  unint64_t v27;
  _QWORD v28[2];

  v9 = (_QWORD *)result;
  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
    v12 = a4;
    v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0)
    goto LABEL_36;
  v10 = a5 >> 14;
  v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    v11 = 0;
    v12 = a4;
LABEL_33:
    *v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  v11 = 0;
  v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0)
    LOBYTE(v14) = 1;
  v15 = 4 << v14;
  v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0)
    v16 = a6 & 0xFFFFFFFFFFFFLL;
  v23 = v16;
  v26 = a3 - 1;
  v12 = a4;
  while (1)
  {
    v17 = v12 & 0xC;
    result = v12;
    if (v17 == v15)
      result = sub_185EE4(v12, a6, a7);
    if (result >> 14 < v27 || result >> 14 >= v10)
      break;
    if ((a7 & 0x1000000000000000) != 0)
    {
      result = String.UTF8View._foreignSubscript(position:)();
      v19 = result;
      if (v17 != v15)
        goto LABEL_23;
    }
    else
    {
      v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        v19 = *((_BYTE *)v28 + v18);
        if (v17 != v15)
          goto LABEL_23;
      }
      else
      {
        result = v21;
        if ((a6 & 0x1000000000000000) == 0)
          result = _StringObject.sharedUTF8.getter(a6, a7);
        v19 = *(_BYTE *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0)
            goto LABEL_24;
          goto LABEL_27;
        }
      }
    }
    result = sub_185EE4(v12, a6, a7);
    v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16)
      goto LABEL_35;
    v12 = String.UTF8View._foreignIndex(after:)(v12, a6, a7);
LABEL_29:
    *(_BYTE *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14)
      goto LABEL_33;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

_QWORD *sub_186778(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  unint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  if ((unint64_t)a1 >> 62)
    goto LABEL_16;
  v3 = *(_QWORD *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8));
  if (v3)
  {
    while (1)
    {
      v4 = 0;
      while ((a1 & 0xC000000000000001) != 0)
      {
        v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4);
LABEL_9:
        v8 = v7;
        v9 = v4 + 1;
        if (__OFADD__(v4, 1))
          goto LABEL_15;
        v10 = objc_msgSend(v7, "identifier");
        v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
        v13 = v12;

        LOBYTE(v10) = sub_1F770C(v11, v13, a2);
        v14 = swift_bridgeObjectRelease();
        if ((v10 & 1) != 0)
        {

        }
        else
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v14);
          v5 = _swiftEmptyArrayStorage[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v5);
          v6 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v5, v8);
          specialized ContiguousArray._endMutation()(v6);
        }
        ++v4;
        if (v9 == v3)
          return _swiftEmptyArrayStorage;
      }
      if (v4 < *(_QWORD *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8)))
        break;
      __break(1u);
LABEL_15:
      __break(1u);
LABEL_16:
      if (a1 < 0)
        v16 = a1;
      else
        v16 = a1 & 0xFFFFFFFFFFFFFF8;
      v3 = _CocoaArrayWrapper.endIndex.getter(v16);
      if (!v3)
        return _swiftEmptyArrayStorage;
    }
    v7 = *(id *)(a1 + 8 * v4 + 32);
    goto LABEL_9;
  }
  return _swiftEmptyArrayStorage;
}

void *sub_1868FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  uint64_t v17;
  uint64_t v19;

  if ((unint64_t)a1 >> 62)
    goto LABEL_22;
  v4 = *(_QWORD *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain(a1);
  for (; v4; v4 = _CocoaArrayWrapper.endIndex.getter(v17))
  {
    v5 = *(_QWORD *)(a2 + 16);
    a2 = *(_QWORD *)(a2 + 24);
    v19 = v5;
    v6 = 4;
    while (1)
    {
      v7 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6 - 4, a1)
         : *(id *)(a1 + 8 * v6);
      v8 = v7;
      v9 = v6 - 3;
      if (__OFADD__(v6 - 4, 1))
        break;
      v10 = v4;
      v11 = objc_msgSend(v7, "identifier");
      v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
      v14 = v13;

      if (a2)
      {
        if (v12 == v19 && a2 == v14)
        {
          swift_bridgeObjectRelease(a1);
LABEL_20:
          swift_bridgeObjectRelease(v14);
          return v8;
        }
        v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v14, v19, a2, 0);
        swift_bridgeObjectRelease(v14);
        if ((v16 & 1) != 0)
        {
          v14 = a1;
          goto LABEL_20;
        }

      }
      else
      {

        swift_bridgeObjectRelease(v14);
      }
      ++v6;
      v4 = v10;
      if (v9 == v10)
        goto LABEL_26;
    }
    __break(1u);
LABEL_22:
    if (a1 < 0)
      v17 = a1;
    else
      v17 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
  }
LABEL_26:
  swift_bridgeObjectRelease(a1);
  return 0;
}

Swift::Int sub_186AA8(Swift::Int result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;

  v23 = (unint64_t *)result;
  v24 = 0;
  v6 = 0;
  v7 = 1 << *(_BYTE *)(a3 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a3 + 56);
  v26 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      v10 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v11 = v10 | (v6 << 6);
      goto LABEL_5;
    }
    v18 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v18 >= v26)
      goto LABEL_24;
    v19 = *(_QWORD *)(v25 + 8 * v18);
    ++v6;
    if (!v19)
    {
      v6 = v18 + 1;
      if (v18 + 1 >= v26)
        goto LABEL_24;
      v19 = *(_QWORD *)(v25 + 8 * v6);
      if (!v19)
      {
        v6 = v18 + 2;
        if (v18 + 2 >= v26)
          goto LABEL_24;
        v19 = *(_QWORD *)(v25 + 8 * v6);
        if (!v19)
          break;
      }
    }
LABEL_20:
    v9 = (v19 - 1) & v19;
    v11 = __clz(__rbit64(v19)) + (v6 << 6);
LABEL_5:
    v12 = *(_QWORD *)(*(_QWORD *)(a3 + 48) + 8 * v11);
    v13 = *(void **)(v12 + 32);
    swift_retain();
    v14 = objc_msgSend(v13, "identifier");
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    v17 = v16;

    LOBYTE(v14) = sub_1F770C(v15, v17, a4);
    swift_release(v12);
    result = swift_bridgeObjectRelease();
    if ((v14 & 1) == 0)
    {
      *(unint64_t *)((char *)v23 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      if (__OFADD__(v24++, 1))
      {
        __break(1u);
LABEL_24:
        swift_retain();
        return sub_2CE5B4(v23, a2, v24, a3);
      }
    }
  }
  v20 = v18 + 3;
  if (v20 >= v26)
    goto LABEL_24;
  v19 = *(_QWORD *)(v25 + 8 * v20);
  if (v19)
  {
    v6 = v20;
    goto LABEL_20;
  }
  while (1)
  {
    v6 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v6 >= v26)
      goto LABEL_24;
    v19 = *(_QWORD *)(v25 + 8 * v6);
    ++v20;
    if (v19)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
  return result;
}

Swift::Int sub_186CC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v5;
  unsigned int v6;
  unint64_t v7;
  size_t v8;
  uint64_t isStackAllocationSafe;
  Swift::Int v10;
  uint64_t v11;
  void *v12;
  uint64_t v14;

  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v7 = (unint64_t)((1 << v5) + 63) >> 6;
  v8 = 8 * v7;
  isStackAllocationSafe = swift_bridgeObjectRetain_n(a2, 2);
  if (v6 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(v8, 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v14 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    swift_bridgeObjectRetain();
    v10 = sub_186AA8((Swift::Int)&v14 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v7, a1, a2);
    swift_release(a1);
    v11 = swift_bridgeObjectRelease();
    if (v2)
      swift_willThrow(v11);
    swift_bridgeObjectRelease_n(a2, 2);
  }
  else
  {
    v12 = (void *)swift_slowAlloc(v8, -1);
    bzero(v12, v8);
    swift_bridgeObjectRetain();
    v10 = sub_186AA8((Swift::Int)v12, v7, a1, a2);
    swift_release(a1);
    swift_bridgeObjectRelease();
    swift_slowDealloc(v12, -1, -1);
    swift_bridgeObjectRelease_n(a2, 2);
  }
  return v10;
}

uint64_t sub_186E8C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char **v10;
  uint64_t result;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  char **v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  _QWORD v36[9];
  uint64_t v37;
  _QWORD *v38;

  v2 = a2;
  if ((a1 & 0xC000000000000001) == 0)
    return sub_186CC8(a1, a2);
  v3 = &_swiftEmptySetSingleton;
  v38 = &_swiftEmptySetSingleton;
  if (a1 < 0)
    v4 = a1;
  else
    v4 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  v5 = __CocoaSet.makeIterator()(v4);
  v6 = __CocoaSet.Iterator.next()(v5);
  if (v6)
  {
    v7 = v6;
    v8 = type metadata accessor for Highlight(0);
    v9 = (char *)&type metadata for Swift.AnyObject + 8;
    v10 = &selRef__tabBarController_sidebar_visibilityDidChangeForTabs_;
    do
    {
      v36[0] = v7;
      swift_dynamicCast(&v37, v36, v9, v8, 7);
      v12 = objc_msgSend(*(id *)(v37 + 32), v10[88]);
      v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
      v15 = v14;

      LOBYTE(v12) = sub_1F770C(v13, v15, v2);
      swift_bridgeObjectRelease();
      v16 = v37;
      if ((v12 & 1) != 0)
      {
        result = swift_release(v37);
      }
      else
      {
        v17 = v8;
        v18 = v5;
        v19 = v2;
        v20 = v38;
        v21 = v38[2];
        if (v38[3] <= v21)
        {
          sub_9DCDC(v21 + 1);
          v20 = v38;
        }
        Hasher.init(_seed:)(v36);
        v22 = v10;
        v23 = objc_msgSend(*(id *)(v16 + 32), v10[88]);
        v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
        v26 = v25;

        String.hash(into:)(v36, v24, v26);
        swift_bridgeObjectRelease();
        result = Hasher._finalize()();
        v27 = v20 + 7;
        v28 = -1 << *((_BYTE *)v20 + 32);
        v29 = result & ~v28;
        v30 = v29 >> 6;
        if (((-1 << v29) & ~v20[(v29 >> 6) + 7]) != 0)
        {
          v31 = __clz(__rbit64((-1 << v29) & ~v20[(v29 >> 6) + 7])) | v29 & 0x7FFFFFFFFFFFFFC0;
          v10 = v22;
          v2 = v19;
          v5 = v18;
          v8 = v17;
          v9 = (char *)&type metadata for Swift.AnyObject + 8;
        }
        else
        {
          v32 = 0;
          v33 = (unint64_t)(63 - v28) >> 6;
          v10 = v22;
          v2 = v19;
          v5 = v18;
          v8 = v17;
          v9 = (char *)&type metadata for Swift.AnyObject + 8;
          do
          {
            if (++v30 == v33 && (v32 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v34 = v30 == v33;
            if (v30 == v33)
              v30 = 0;
            v32 |= v34;
            v35 = v27[v30];
          }
          while (v35 == -1);
          v31 = __clz(__rbit64(~v35)) + (v30 << 6);
        }
        *(_QWORD *)((char *)v27 + ((v31 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v31;
        *(_QWORD *)(v20[6] + 8 * v31) = v16;
        ++v20[2];
      }
      v7 = __CocoaSet.Iterator.next()(result);
    }
    while (v7);
    v3 = v38;
  }
  swift_bridgeObjectRelease();
  swift_release(v5);
  return (uint64_t)v3;
}

uint64_t sub_187160(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;
  uint64_t v7;
  id v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[4];

  v2 = v1;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v23 = a1;
    else
      v23 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter(v23);
    swift_bridgeObjectRelease();
  }
  else
  {
    v4 = *(_QWORD *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8));
  }
  v5 = _swiftEmptyArrayStorage;
  if (!v4)
    goto LABEL_13;
  v25[0] = _swiftEmptyArrayStorage;
  result = sub_1807B0(0, v4 & ~(v4 >> 63), 0);
  if ((v4 & 0x8000000000000000) == 0)
  {
    v24 = v2;
    v7 = 0;
    v5 = (_QWORD *)v25[0];
    do
    {
      if ((a1 & 0xC000000000000001) != 0)
        v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7);
      else
        v8 = *(id *)(a1 + 8 * v7 + 32);
      v9 = v8;
      v10 = objc_msgSend(v8, "identifier", v24);
      v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
      v13 = v12;

      v25[0] = v5;
      v15 = v5[2];
      v14 = v5[3];
      if (v15 >= v14 >> 1)
      {
        sub_1807B0(v14 > 1, v15 + 1, 1);
        v5 = (_QWORD *)v25[0];
      }
      ++v7;
      v5[2] = v15 + 1;
      v16 = &v5[2 * v15];
      v16[4] = v11;
      v16[5] = v13;
    }
    while (v4 != v7);
    v2 = v24;
LABEL_13:
    v17 = sub_2CF528((uint64_t)v5);
    v18 = swift_bridgeObjectRelease();
    CurrentValueSubject.value.getter(v25, v18);
    v19 = v25[0];
    swift_bridgeObjectRetain();
    sub_186778(v19, v17);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v20 = (uint64_t *)(v2 + OBJC_IVAR____TtC8ShelfKit18HighlightsProvider_highlightsDisplayedOnCurrentPage);
    swift_beginAccess(v20, v25, 1, 0);
    v21 = swift_bridgeObjectRetain();
    v22 = sub_186E8C(v21, v17);
    swift_bridgeObjectRelease();
    *v20 = v22;
    swift_bridgeObjectRelease();
    CurrentValueSubject.send(_:)();
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for HighlightsProvider()
{
  return objc_opt_self(_TtC8ShelfKit18HighlightsProvider);
}

uint64_t method lookup function for HighlightsProvider(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for HighlightsProvider);
}

uint64_t objectdestroy_8Tm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 56) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  __swift_destroy_boxed_opaque_existential_1((_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_18741C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for URL(0) - 8) + 80);
  v4 = (char *)v1 + ((v3 + 56) & ~v3);
  v5 = v1[5];
  v6 = v1[6];
  __swift_project_boxed_opaque_existential_1(v1 + 2, v5);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 104))(v4, a1, v5, v6);
}

uint64_t sub_187490()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1((_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1874B4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = v1[6];
  v3 = v1[7];
  v5 = v1[5];
  __swift_project_boxed_opaque_existential_1(v1 + 2, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 112))(v3, a1, v5, v4);
}

uint64_t sub_187510()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_18753C@<X0>(uint64_t *a1@<X0>, unint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_184E8C(a1, *(uint64_t (**)(_QWORD *))(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), a2);
}

uint64_t sub_187548()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_18756C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_187598@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_1854D0(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t sub_1875A0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1875C4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_184024(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t sub_1875CC@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_183480(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t sub_1875D4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1875F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_184AF0(a1, a2, a3, *(void **)(v3 + 16));
}

uint64_t block_copy_helper_17(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t block_destroy_helper_17(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_187618()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_187644()
{
  uint64_t v0;

  return sub_184D10(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t Header.init(title:subtitle:subtitleSymbolName:displaySubtitleAsEyebrow:hasColoredBackground:titleContextMenu:primaryAction:secondaryButtons:artwork:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, int a8@<W7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v41 = a7;
  v42 = a8;
  v39 = a3;
  v40 = a5;
  v45 = a4;
  v52 = a9;
  v47 = a12;
  v48 = a6;
  v49 = a10;
  v50 = a13;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3740);
  __chkstk_darwin(v15);
  v17 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = (int *)type metadata accessor for Header(0);
  v51 = *((_QWORD *)v18 - 1);
  v19 = __chkstk_darwin(v18);
  v21 = (char *)&v38 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  *((_WORD *)v21 + 24) = 0;
  *((_OWORD *)v21 + 1) = 0u;
  *((_OWORD *)v21 + 2) = 0u;
  *(_OWORD *)v21 = 0u;
  v22 = (uint64_t)&v21[*(int *)(v19 + 36)];
  v23 = type metadata accessor for ActionMenu(0);
  v24 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56);
  v46 = v22;
  v24(v22, 1, 1, v23);
  v25 = (uint64_t)&v21[v18[10]];
  v26 = type metadata accessor for Header.PrimaryAction(0);
  v27 = *(_QWORD *)(v26 - 8);
  v28 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 56);
  v44 = v25;
  v28(v25, 1, 1, v26);
  v29 = (uint64_t)&v21[v18[12]];
  v30 = type metadata accessor for ArtworkModel(0);
  v31 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56);
  v43 = v29;
  v31(v29, 1, 1, v30);
  v32 = a1;
  LOBYTE(a1) = Optional<A>.containsVisibleText.getter(a1, a2);
  sub_267BC(a11, (uint64_t)v17, &qword_3B3740);
  if ((a1 & 1) != 0 || (*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v17, 1, v26) != 1)
  {
    sub_1459C((uint64_t)v17, &qword_3B3740);
    swift_bridgeObjectRelease(*((_QWORD *)v21 + 1));
    *(_QWORD *)v21 = v32;
    *((_QWORD *)v21 + 1) = a2;
    swift_bridgeObjectRelease(*((_QWORD *)v21 + 3));
    v34 = v45;
    *((_QWORD *)v21 + 2) = v39;
    *((_QWORD *)v21 + 3) = v34;
    swift_bridgeObjectRelease(*((_QWORD *)v21 + 5));
    v36 = v48;
    v35 = v49;
    *((_QWORD *)v21 + 4) = v40;
    *((_QWORD *)v21 + 5) = v36;
    v21[48] = v41 & 1;
    v21[49] = v42 & 1;
    sub_3C454(v35, v46, (uint64_t *)&unk_3BF7E0);
    sub_3C454(a11, v44, &qword_3B3740);
    *(_QWORD *)&v21[v18[11]] = v47;
    sub_3C454(v50, v43, &qword_3BEB70);
    v37 = v52;
    sub_14510((uint64_t)v21, v52, type metadata accessor for Header);
    (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v51 + 56))(v37, 0, 1, v18);
    return sub_145D8((uint64_t)v21, type metadata accessor for Header);
  }
  else
  {
    swift_bridgeObjectRelease(v47);
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(v45);
    swift_bridgeObjectRelease(v48);
    sub_1459C((uint64_t)v17, &qword_3B3740);
    sub_1459C(v50, &qword_3BEB70);
    sub_1459C(a11, &qword_3B3740);
    sub_1459C(v49, (uint64_t *)&unk_3BF7E0);
    swift_bridgeObjectRelease(*((_QWORD *)v21 + 1));
    swift_bridgeObjectRelease(*((_QWORD *)v21 + 3));
    swift_bridgeObjectRelease(*((_QWORD *)v21 + 5));
    sub_1459C(v46, (uint64_t *)&unk_3BF7E0);
    sub_1459C(v44, &qword_3B3740);
    sub_1459C(v43, &qword_3BEB70);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v51 + 56))(v52, 1, 1, v18);
  }
}

uint64_t type metadata accessor for Header(uint64_t a1)
{
  return sub_1F9D4(a1, (uint64_t *)&unk_3BEBF0, (uint64_t)&nominal type descriptor for Header);
}

uint64_t type metadata accessor for Header.PrimaryAction(uint64_t a1)
{
  return sub_1F9D4(a1, qword_3BECC8, (uint64_t)&nominal type descriptor for Header.PrimaryAction);
}

uint64_t Header.subtitle.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v2 + 24));
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t Header.subtitleSymbolName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v2 + 40));
  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  return result;
}

uint64_t Header.displaySubtitleAsEyebrow.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 48) = result;
  return result;
}

void (__swiftcall *Header.displaySubtitleAsEyebrow.modify())()
{
  return FindOrCreateEpisodeOfferContentIDsIntentsIntentImplementation.init();
}

uint64_t Header.hasColoredBackground.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 49);
}

uint64_t Header.hasColoredBackground.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 49) = result;
  return result;
}

void (__swiftcall *Header.hasColoredBackground.modify())()
{
  return FindOrCreateEpisodeOfferContentIDsIntentsIntentImplementation.init();
}

uint64_t Header.titleContextMenu.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Header(0);
  return sub_267BC(v1 + *(int *)(v3 + 36), a1, (uint64_t *)&unk_3BF7E0);
}

uint64_t Header.titleContextMenu.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Header(0);
  return sub_3C454(a1, v1 + *(int *)(v3 + 36), (uint64_t *)&unk_3BF7E0);
}

void (__swiftcall *Header.titleContextMenu.modify())()
{
  type metadata accessor for Header(0);
  return FindOrCreateEpisodeOfferContentIDsIntentsIntentImplementation.init();
}

uint64_t Header.primaryAction.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Header(0);
  return sub_267BC(v1 + *(int *)(v3 + 40), a1, &qword_3B3740);
}

uint64_t Header.primaryAction.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Header(0);
  return sub_3C454(a1, v1 + *(int *)(v3 + 40), &qword_3B3740);
}

void (__swiftcall *Header.primaryAction.modify())()
{
  type metadata accessor for Header(0);
  return FindOrCreateEpisodeOfferContentIDsIntentsIntentImplementation.init();
}

uint64_t Header.secondaryButtons.getter()
{
  type metadata accessor for Header(0);
  return swift_bridgeObjectRetain();
}

uint64_t Header.secondaryButtons.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for Header(0) + 44);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

void (__swiftcall *Header.secondaryButtons.modify())()
{
  type metadata accessor for Header(0);
  return FindOrCreateEpisodeOfferContentIDsIntentsIntentImplementation.init();
}

uint64_t Header.artwork.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Header(0);
  return sub_267BC(v1 + *(int *)(v3 + 48), a1, &qword_3BEB70);
}

uint64_t Header.artwork.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Header(0);
  return sub_3C454(a1, v1 + *(int *)(v3 + 48), &qword_3BEB70);
}

void (__swiftcall *Header.artwork.modify())()
{
  type metadata accessor for Header(0);
  return FindOrCreateEpisodeOfferContentIDsIntentsIntentImplementation.init();
}

BOOL Header.shouldPinToVisibleBounds.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  uint64_t v8;

  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3BF7E0);
  __chkstk_darwin(v1);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Header(0);
  sub_267BC(v0 + *(int *)(v4 + 36), (uint64_t)v3, (uint64_t *)&unk_3BF7E0);
  v5 = type metadata accessor for ActionMenu(0);
  v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  sub_1459C((uint64_t)v3, (uint64_t *)&unk_3BF7E0);
  return v6;
}

uint64_t Header.PrimaryAction.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = type metadata accessor for HeaderButtonItem(0);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 6)
  {
    sub_F9488(a1, a2);
    v5 = type metadata accessor for Header.PrimaryAction(0);
    swift_storeEnumTagMultiPayload(a2, v5, 1);
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
    v7 = a2;
    v8 = 0;
    v9 = v5;
  }
  else
  {
    sub_145D8(a1, type metadata accessor for HeaderButtonItem);
    v9 = type metadata accessor for Header.PrimaryAction(0);
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56);
    v7 = a2;
    v8 = 1;
  }
  return v6(v7, v8, 1, v9);
}

uint64_t Header.PrimaryAction.action.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t (*v4)(_QWORD);
  uint64_t v6;

  v1 = type metadata accessor for Header.PrimaryAction(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_14510(v0, (uint64_t)v3, v4);
  if (swift_getEnumCaseMultiPayload(v3, v1) != 1)
    return *(_QWORD *)v3;
  sub_145D8((uint64_t)v3, type metadata accessor for Header.PrimaryAction);
  return 0;
}

uint64_t initializeBufferWithCopyOfBuffer for Header(uint64_t a1, uint64_t *a2, int *a3)
{
  int v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int (*v16)(_QWORD *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(_QWORD *, uint64_t, uint64_t);
  int v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  id *v38;
  int v39;
  id v40;
  id *v41;
  int v42;
  id v43;
  id *v44;
  int v45;
  id v46;
  id *v47;
  int v48;
  id v49;
  id *v50;
  int v51;
  id v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  void (*v65)(_QWORD *, _QWORD, uint64_t, int *);
  void (*v66)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int (*v79)(_QWORD *, uint64_t, uint64_t);
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  int *v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  id *v88;
  int v89;
  id v90;
  id *v91;
  int v92;
  id v93;
  id *v94;
  int v95;
  id v96;
  id *v97;
  int v98;
  id v99;
  id *v100;
  int v101;
  id v102;
  uint64_t v103;
  char *v104;
  _QWORD *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  _QWORD *v114;
  uint64_t v115;
  void (*v116)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v117;
  _QWORD *v118;
  _QWORD *v119;
  int *v120;
  uint64_t v121;
  unsigned int (*v122)(_QWORD *, uint64_t, int *);
  uint64_t v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  id *v128;
  int v129;
  id v130;
  id *v131;
  int v132;
  id v133;
  id *v134;
  int v135;
  id v136;
  id *v137;
  int v138;
  id v139;
  id *v140;
  int v141;
  id v142;
  uint64_t v143;
  char *v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  _QWORD *v148;
  _QWORD *v149;
  uint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  _QWORD *v153;
  uint64_t v154;
  void (*v155)(_QWORD *, _QWORD, uint64_t, int *);
  _QWORD *__dst;
  _QWORD *v158;
  _QWORD *v159;
  uint64_t v160;
  uint64_t v161;
  int *v162;
  int *v163;
  uint64_t v164;
  uint64_t v165;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *(_QWORD *)a1 = *a2;
    v18 = v19 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v6 = a3;
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v8;
    v9 = a2[4];
    v10 = a2[5];
    *(_WORD *)(a1 + 48) = *((_WORD *)a2 + 24);
    v11 = a3[9];
    v12 = (_QWORD *)(a1 + v11);
    v13 = (uint64_t *)((char *)a2 + v11);
    *(_QWORD *)(a1 + 32) = v9;
    *(_QWORD *)(a1 + 40) = v10;
    v14 = type metadata accessor for ActionMenu(0);
    v15 = *(_QWORD *)(v14 - 8);
    v16 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v15 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v16(v13, 1, v14))
    {
      v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3BF7E0);
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
      v18 = a1;
    }
    else
    {
      v160 = v15;
      v162 = v6;
      v20 = v13[1];
      *v12 = *v13;
      v12[1] = v20;
      v21 = v13[3];
      v12[2] = v13[2];
      v12[3] = v21;
      v22 = v13[5];
      v12[4] = v13[4];
      v12[5] = v22;
      v164 = v14;
      v23 = *(int *)(v14 + 28);
      v24 = (_QWORD *)((char *)v12 + v23);
      v158 = v13;
      v25 = (_QWORD *)((char *)v13 + v23);
      v26 = type metadata accessor for ArtworkModel(0);
      v27 = *(_QWORD *)(v26 - 8);
      v28 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v27 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v29 = v28(v25, 1, v26);
      v30 = v12;
      if (v29)
      {
        v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
        memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
        v32 = v160;
        v6 = v162;
        v18 = a1;
      }
      else
      {
        v33 = (int *)v26;
        v34 = v25[1];
        *v24 = *v25;
        v24[1] = v34;
        v35 = *((unsigned __int8 *)v25 + 32);
        swift_bridgeObjectRetain();
        v18 = a1;
        if (v35 == 255)
        {
          *((_OWORD *)v24 + 1) = *((_OWORD *)v25 + 1);
          *((_BYTE *)v24 + 32) = *((_BYTE *)v25 + 32);
        }
        else
        {
          v36 = v25[2];
          v37 = v25[3];
          sub_3D464(v36, v37, v35);
          v24[2] = v36;
          v24[3] = v37;
          *((_BYTE *)v24 + 32) = v35;
        }
        *(_OWORD *)(v24 + 5) = *(_OWORD *)(v25 + 5);
        v38 = (id *)(v25 + 7);
        v39 = *((unsigned __int8 *)v25 + 64);
        if (v39 == 255)
        {
          v24[7] = *v38;
          *((_BYTE *)v24 + 64) = *((_BYTE *)v25 + 64);
        }
        else
        {
          v40 = *v38;
          sub_3D47C(*v38, *((_BYTE *)v25 + 64));
          v24[7] = v40;
          *((_BYTE *)v24 + 64) = v39;
        }
        v41 = (id *)(v25 + 9);
        v42 = *((unsigned __int8 *)v25 + 80);
        if (v42 == 255)
        {
          v24[9] = *v41;
          *((_BYTE *)v24 + 80) = *((_BYTE *)v25 + 80);
        }
        else
        {
          v43 = *v41;
          sub_3D47C(*v41, *((_BYTE *)v25 + 80));
          v24[9] = v43;
          *((_BYTE *)v24 + 80) = v42;
        }
        v44 = (id *)(v25 + 11);
        v45 = *((unsigned __int8 *)v25 + 96);
        if (v45 == 255)
        {
          v24[11] = *v44;
          *((_BYTE *)v24 + 96) = *((_BYTE *)v25 + 96);
        }
        else
        {
          v46 = *v44;
          sub_3D47C(*v44, *((_BYTE *)v25 + 96));
          v24[11] = v46;
          *((_BYTE *)v24 + 96) = v45;
        }
        v47 = (id *)(v25 + 13);
        v48 = *((unsigned __int8 *)v25 + 112);
        if (v48 == 255)
        {
          v24[13] = *v47;
          *((_BYTE *)v24 + 112) = *((_BYTE *)v25 + 112);
        }
        else
        {
          v49 = *v47;
          sub_3D47C(*v47, *((_BYTE *)v25 + 112));
          v24[13] = v49;
          *((_BYTE *)v24 + 112) = v48;
        }
        v50 = (id *)(v25 + 15);
        v51 = *((unsigned __int8 *)v25 + 128);
        if (v51 == 255)
        {
          v24[15] = *v50;
          *((_BYTE *)v24 + 128) = *((_BYTE *)v25 + 128);
        }
        else
        {
          v52 = *v50;
          sub_3D47C(*v50, *((_BYTE *)v25 + 128));
          v24[15] = v52;
          *((_BYTE *)v24 + 128) = v51;
        }
        v6 = v162;
        *((_BYTE *)v24 + 129) = *((_BYTE *)v25 + 129);
        v53 = v33[11];
        v54 = (char *)v24 + v53;
        v55 = (char *)v25 + v53;
        v56 = type metadata accessor for ArtworkCrop(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v56 - 8) + 16))(v54, v55, v56);
        v57 = v33[12];
        v58 = (_QWORD *)((char *)v24 + v57);
        v59 = (_QWORD *)((char *)v25 + v57);
        v60 = v59[1];
        *v58 = *v59;
        v58[1] = v60;
        *((_BYTE *)v24 + v33[13]) = *((_BYTE *)v25 + v33[13]);
        *((_BYTE *)v24 + v33[14]) = *((_BYTE *)v25 + v33[14]);
        *((_BYTE *)v24 + v33[15]) = *((_BYTE *)v25 + v33[15]);
        v61 = v33[16];
        v62 = (_QWORD *)((char *)v24 + v61);
        v63 = (_QWORD *)((char *)v25 + v61);
        v64 = v63[1];
        *v62 = *v63;
        v62[1] = v64;
        v65 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v27 + 56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v65(v24, 0, 1, v33);
        v32 = v160;
      }
      *(_QWORD *)((char *)v30 + *(int *)(v164 + 32)) = *(_QWORD *)((char *)v158 + *(int *)(v164 + 32));
      v66 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v32 + 56);
      swift_bridgeObjectRetain();
      v66(v30, 0, 1, v164);
      v14 = v164;
    }
    v67 = v6[10];
    v68 = (_QWORD *)(v18 + v67);
    v69 = (uint64_t *)((char *)a2 + v67);
    v70 = type metadata accessor for Header.PrimaryAction(0);
    v71 = *(_QWORD *)(v70 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v71 + 48))(v69, 1, v70))
    {
      v72 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3740);
      memcpy(v68, v69, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
    }
    else
    {
      if (swift_getEnumCaseMultiPayload(v69, v70) == 1)
      {
        v161 = v71;
        v163 = v6;
        v73 = v69[1];
        *v68 = *v69;
        v68[1] = v73;
        v74 = v69[3];
        v68[2] = v69[2];
        v68[3] = v74;
        v75 = v69[5];
        v68[4] = v69[4];
        v68[5] = v75;
        v165 = v14;
        v76 = *(int *)(v14 + 28);
        __dst = (_QWORD *)((char *)v68 + v76);
        v159 = (_QWORD *)((char *)v69 + v76);
        v77 = type metadata accessor for ArtworkModel(0);
        v78 = *(_QWORD *)(v77 - 8);
        v79 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v78 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v80 = v159;
        swift_bridgeObjectRetain();
        if (v79(v159, 1, v77))
        {
          v81 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
          memcpy(__dst, v159, *(_QWORD *)(*(_QWORD *)(v81 - 8) + 64));
        }
        else
        {
          v83 = (int *)v77;
          v84 = v159[1];
          *__dst = *v159;
          __dst[1] = v84;
          v85 = *((unsigned __int8 *)v159 + 32);
          swift_bridgeObjectRetain();
          if (v85 == 255)
          {
            *((_OWORD *)__dst + 1) = *((_OWORD *)v159 + 1);
            *((_BYTE *)__dst + 32) = *((_BYTE *)v159 + 32);
          }
          else
          {
            v86 = v159[2];
            v87 = v159[3];
            sub_3D464(v86, v87, v85);
            __dst[2] = v86;
            __dst[3] = v87;
            v80 = v159;
            *((_BYTE *)__dst + 32) = v85;
          }
          *(_OWORD *)(__dst + 5) = *(_OWORD *)(v80 + 5);
          v88 = (id *)(v80 + 7);
          v89 = *((unsigned __int8 *)v80 + 64);
          if (v89 == 255)
          {
            __dst[7] = *v88;
            *((_BYTE *)__dst + 64) = *((_BYTE *)v80 + 64);
          }
          else
          {
            v90 = *v88;
            sub_3D47C(*v88, *((_BYTE *)v80 + 64));
            __dst[7] = v90;
            *((_BYTE *)__dst + 64) = v89;
          }
          v91 = (id *)(v80 + 9);
          v92 = *((unsigned __int8 *)v80 + 80);
          if (v92 == 255)
          {
            __dst[9] = *v91;
            *((_BYTE *)__dst + 80) = *((_BYTE *)v80 + 80);
          }
          else
          {
            v93 = *v91;
            sub_3D47C(*v91, *((_BYTE *)v80 + 80));
            __dst[9] = v93;
            *((_BYTE *)__dst + 80) = v92;
          }
          v94 = (id *)(v80 + 11);
          v95 = *((unsigned __int8 *)v80 + 96);
          if (v95 == 255)
          {
            __dst[11] = *v94;
            *((_BYTE *)__dst + 96) = *((_BYTE *)v80 + 96);
          }
          else
          {
            v96 = *v94;
            sub_3D47C(*v94, *((_BYTE *)v80 + 96));
            __dst[11] = v96;
            *((_BYTE *)__dst + 96) = v95;
          }
          v97 = (id *)(v80 + 13);
          v98 = *((unsigned __int8 *)v80 + 112);
          if (v98 == 255)
          {
            __dst[13] = *v97;
            *((_BYTE *)__dst + 112) = *((_BYTE *)v80 + 112);
          }
          else
          {
            v99 = *v97;
            sub_3D47C(*v97, *((_BYTE *)v80 + 112));
            __dst[13] = v99;
            *((_BYTE *)__dst + 112) = v98;
          }
          v100 = (id *)(v80 + 15);
          v101 = *((unsigned __int8 *)v80 + 128);
          if (v101 == 255)
          {
            __dst[15] = *v100;
            *((_BYTE *)__dst + 128) = *((_BYTE *)v80 + 128);
          }
          else
          {
            v102 = *v100;
            sub_3D47C(*v100, *((_BYTE *)v80 + 128));
            __dst[15] = v102;
            *((_BYTE *)__dst + 128) = v101;
          }
          *((_BYTE *)__dst + 129) = *((_BYTE *)v80 + 129);
          v103 = v83[11];
          v104 = (char *)__dst + v103;
          v105 = v80;
          v106 = (char *)v80 + v103;
          v107 = type metadata accessor for ArtworkCrop(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v107 - 8) + 16))(v104, v106, v107);
          v108 = v83[12];
          v109 = (_QWORD *)((char *)__dst + v108);
          v110 = (_QWORD *)((char *)v105 + v108);
          v111 = v110[1];
          *v109 = *v110;
          v109[1] = v111;
          *((_BYTE *)__dst + v83[13]) = *((_BYTE *)v105 + v83[13]);
          *((_BYTE *)__dst + v83[14]) = *((_BYTE *)v105 + v83[14]);
          *((_BYTE *)__dst + v83[15]) = *((_BYTE *)v105 + v83[15]);
          v112 = v83[16];
          v113 = (_QWORD *)((char *)__dst + v112);
          v114 = (_QWORD *)((char *)v105 + v112);
          v115 = v114[1];
          *v113 = *v114;
          v113[1] = v115;
          v116 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v78 + 56);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v116(__dst, 0, 1, v83);
        }
        *(_QWORD *)((char *)v68 + *(int *)(v165 + 32)) = *(_QWORD *)((char *)v69 + *(int *)(v165 + 32));
        swift_bridgeObjectRetain();
        v82 = 1;
        v71 = v161;
        v6 = v163;
        v18 = a1;
      }
      else
      {
        *v68 = *v69;
        swift_retain();
        v82 = 0;
      }
      swift_storeEnumTagMultiPayload(v68, v70, v82);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v71 + 56))(v68, 0, 1, v70);
    }
    v117 = v6[12];
    *(_QWORD *)(v18 + v6[11]) = *(uint64_t *)((char *)a2 + v6[11]);
    v118 = (_QWORD *)(v18 + v117);
    v119 = (uint64_t *)((char *)a2 + v117);
    v120 = (int *)type metadata accessor for ArtworkModel(0);
    v121 = *((_QWORD *)v120 - 1);
    v122 = *(unsigned int (**)(_QWORD *, uint64_t, int *))(v121 + 48);
    swift_bridgeObjectRetain();
    if (v122(v119, 1, v120))
    {
      v123 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
      memcpy(v118, v119, *(_QWORD *)(*(_QWORD *)(v123 - 8) + 64));
    }
    else
    {
      v124 = v119[1];
      *v118 = *v119;
      v118[1] = v124;
      v125 = *((unsigned __int8 *)v119 + 32);
      swift_bridgeObjectRetain();
      if (v125 == 255)
      {
        *((_OWORD *)v118 + 1) = *((_OWORD *)v119 + 1);
        *((_BYTE *)v118 + 32) = *((_BYTE *)v119 + 32);
      }
      else
      {
        v126 = v119[2];
        v127 = v119[3];
        sub_3D464(v126, v127, v125);
        v118[2] = v126;
        v118[3] = v127;
        *((_BYTE *)v118 + 32) = v125;
      }
      *(_OWORD *)(v118 + 5) = *(_OWORD *)(v119 + 5);
      v128 = (id *)(v119 + 7);
      v129 = *((unsigned __int8 *)v119 + 64);
      if (v129 == 255)
      {
        v118[7] = *v128;
        *((_BYTE *)v118 + 64) = *((_BYTE *)v119 + 64);
      }
      else
      {
        v130 = *v128;
        sub_3D47C(*v128, *((_BYTE *)v119 + 64));
        v118[7] = v130;
        *((_BYTE *)v118 + 64) = v129;
      }
      v131 = (id *)(v119 + 9);
      v132 = *((unsigned __int8 *)v119 + 80);
      if (v132 == 255)
      {
        v118[9] = *v131;
        *((_BYTE *)v118 + 80) = *((_BYTE *)v119 + 80);
      }
      else
      {
        v133 = *v131;
        sub_3D47C(*v131, *((_BYTE *)v119 + 80));
        v118[9] = v133;
        *((_BYTE *)v118 + 80) = v132;
      }
      v134 = (id *)(v119 + 11);
      v135 = *((unsigned __int8 *)v119 + 96);
      if (v135 == 255)
      {
        v118[11] = *v134;
        *((_BYTE *)v118 + 96) = *((_BYTE *)v119 + 96);
      }
      else
      {
        v136 = *v134;
        sub_3D47C(*v134, *((_BYTE *)v119 + 96));
        v118[11] = v136;
        *((_BYTE *)v118 + 96) = v135;
      }
      v137 = (id *)(v119 + 13);
      v138 = *((unsigned __int8 *)v119 + 112);
      if (v138 == 255)
      {
        v118[13] = *v137;
        *((_BYTE *)v118 + 112) = *((_BYTE *)v119 + 112);
      }
      else
      {
        v139 = *v137;
        sub_3D47C(*v137, *((_BYTE *)v119 + 112));
        v118[13] = v139;
        *((_BYTE *)v118 + 112) = v138;
      }
      v140 = (id *)(v119 + 15);
      v141 = *((unsigned __int8 *)v119 + 128);
      if (v141 == 255)
      {
        v118[15] = *v140;
        *((_BYTE *)v118 + 128) = *((_BYTE *)v119 + 128);
      }
      else
      {
        v142 = *v140;
        sub_3D47C(*v140, *((_BYTE *)v119 + 128));
        v118[15] = v142;
        *((_BYTE *)v118 + 128) = v141;
      }
      *((_BYTE *)v118 + 129) = *((_BYTE *)v119 + 129);
      v143 = v120[11];
      v144 = (char *)v118 + v143;
      v145 = (char *)v119 + v143;
      v146 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v146 - 8) + 16))(v144, v145, v146);
      v147 = v120[12];
      v148 = (_QWORD *)((char *)v118 + v147);
      v149 = (_QWORD *)((char *)v119 + v147);
      v150 = v149[1];
      *v148 = *v149;
      v148[1] = v150;
      *((_BYTE *)v118 + v120[13]) = *((_BYTE *)v119 + v120[13]);
      *((_BYTE *)v118 + v120[14]) = *((_BYTE *)v119 + v120[14]);
      *((_BYTE *)v118 + v120[15]) = *((_BYTE *)v119 + v120[15]);
      v151 = v120[16];
      v152 = (_QWORD *)((char *)v118 + v151);
      v153 = (_QWORD *)((char *)v119 + v151);
      v154 = v153[1];
      *v152 = *v153;
      v152[1] = v154;
      v155 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v121 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v155(v118, 0, 1, v120);
    }
  }
  return v18;
}

uint64_t destroy for Header(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + a2[9];
  v5 = type metadata accessor for ActionMenu(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v6 = v4 + *(int *)(v5 + 28);
    v7 = type metadata accessor for ArtworkModel(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7))
    {
      swift_bridgeObjectRelease();
      v8 = *(unsigned __int8 *)(v6 + 32);
      if (v8 != 255)
        sub_3B5BC(*(_QWORD *)(v6 + 16), *(_QWORD *)(v6 + 24), v8);
      v9 = *(unsigned __int8 *)(v6 + 64);
      if (v9 != 255)
        sub_3D624(*(id *)(v6 + 56), v9);
      v10 = *(unsigned __int8 *)(v6 + 80);
      if (v10 != 255)
        sub_3D624(*(id *)(v6 + 72), v10);
      v11 = *(unsigned __int8 *)(v6 + 96);
      if (v11 != 255)
        sub_3D624(*(id *)(v6 + 88), v11);
      v12 = *(unsigned __int8 *)(v6 + 112);
      if (v12 != 255)
        sub_3D624(*(id *)(v6 + 104), v12);
      v13 = *(unsigned __int8 *)(v6 + 128);
      if (v13 != 255)
        sub_3D624(*(id *)(v6 + 120), v13);
      v14 = v6 + *(int *)(v7 + 44);
      v15 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  v16 = (_QWORD *)(a1 + a2[10]);
  v17 = type metadata accessor for Header.PrimaryAction(0);
  if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 48))(v16, 1, v17))
  {
    if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v18 = (char *)v16 + *(int *)(v5 + 28);
      v19 = type metadata accessor for ArtworkModel(0);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 48))(v18, 1, v19))
      {
        swift_bridgeObjectRelease();
        v20 = v18[32];
        if (v20 != 255)
          sub_3B5BC(*((_QWORD *)v18 + 2), *((_QWORD *)v18 + 3), v20);
        v21 = v18[64];
        if (v21 != 255)
          sub_3D624(*((id *)v18 + 7), v21);
        v22 = v18[80];
        if (v22 != 255)
          sub_3D624(*((id *)v18 + 9), v22);
        v23 = v18[96];
        if (v23 != 255)
          sub_3D624(*((id *)v18 + 11), v23);
        v24 = v18[112];
        if (v24 != 255)
          sub_3D624(*((id *)v18 + 13), v24);
        v25 = v18[128];
        if (v25 != 255)
          sub_3D624(*((id *)v18 + 15), v25);
        v26 = &v18[*(int *)(v19 + 44)];
        v27 = type metadata accessor for ArtworkCrop(0);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v27 - 8) + 8))(v26, v27);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_release(*v16);
    }
  }
  swift_bridgeObjectRelease();
  v28 = a1 + a2[12];
  v29 = type metadata accessor for ArtworkModel(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 48))(v28, 1, v29);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease();
    v31 = *(unsigned __int8 *)(v28 + 32);
    if (v31 != 255)
      sub_3B5BC(*(_QWORD *)(v28 + 16), *(_QWORD *)(v28 + 24), v31);
    v32 = *(unsigned __int8 *)(v28 + 64);
    if (v32 != 255)
      sub_3D624(*(id *)(v28 + 56), v32);
    v33 = *(unsigned __int8 *)(v28 + 80);
    if (v33 != 255)
      sub_3D624(*(id *)(v28 + 72), v33);
    v34 = *(unsigned __int8 *)(v28 + 96);
    if (v34 != 255)
      sub_3D624(*(id *)(v28 + 88), v34);
    v35 = *(unsigned __int8 *)(v28 + 112);
    if (v35 != 255)
      sub_3D624(*(id *)(v28 + 104), v35);
    v36 = *(unsigned __int8 *)(v28 + 128);
    if (v36 != 255)
      sub_3D624(*(id *)(v28 + 120), v36);
    v37 = v28 + *(int *)(v29 + 44);
    v38 = type metadata accessor for ArtworkCrop(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 8))(v37, v38);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for Header(uint64_t a1, uint64_t a2, int *a3)
{
  int *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(_QWORD *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int (*v25)(_QWORD *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  id *v32;
  int v33;
  id v34;
  id *v35;
  int v36;
  id v37;
  id *v38;
  int v39;
  id v40;
  id *v41;
  int v42;
  id v43;
  id *v44;
  int v45;
  id v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  void (*v58)(_QWORD *, _QWORD, uint64_t, int *);
  void (*v59)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  int *v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  id *v81;
  int v82;
  id v83;
  id *v84;
  int v85;
  id v86;
  id *v87;
  int v88;
  id v89;
  id *v90;
  int v91;
  id v92;
  id *v93;
  int v94;
  id v95;
  uint64_t v96;
  char *v97;
  _QWORD *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  _QWORD *v107;
  uint64_t v108;
  void (*v109)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v110;
  _QWORD *v111;
  _QWORD *v112;
  int *v113;
  uint64_t v114;
  unsigned int (*v115)(_QWORD *, uint64_t, int *);
  uint64_t v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  id *v121;
  int v122;
  id v123;
  id *v124;
  int v125;
  id v126;
  id *v127;
  int v128;
  id v129;
  id *v130;
  int v131;
  id v132;
  id *v133;
  int v134;
  id v135;
  uint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  _QWORD *v142;
  uint64_t v143;
  uint64_t v144;
  _QWORD *v145;
  _QWORD *v146;
  uint64_t v147;
  void (*v148)(_QWORD *, _QWORD, uint64_t, int *);
  int *v150;
  uint64_t v151;
  _QWORD *__dst;
  _QWORD *__dsta;
  uint64_t v154;
  unsigned int (*v155)(_QWORD *, uint64_t, int *);
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  int *v159;
  char *v160;
  int *v161;

  v3 = a3;
  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  v9 = a3[9];
  v10 = (_QWORD *)(a1 + v9);
  v11 = (_QWORD *)(a2 + v9);
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  v12 = type metadata accessor for ActionMenu(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v13 + 48);
  swift_bridgeObjectRetain();
  v15 = v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v14(v11, 1, v12))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_3BF7E0);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    v17 = a1;
  }
  else
  {
    v154 = v13;
    v157 = v12;
    v159 = v3;
    v18 = v11[1];
    *v10 = *v11;
    v10[1] = v18;
    v19 = v11[3];
    v10[2] = v11[2];
    v10[3] = v19;
    v20 = v11[5];
    v10[4] = v11[4];
    v10[5] = v20;
    v21 = *(int *)(v15 + 28);
    __dst = (_QWORD *)((char *)v10 + v21);
    v22 = (_QWORD *)((char *)v11 + v21);
    v23 = type metadata accessor for ArtworkModel(0);
    v24 = *(_QWORD *)(v23 - 8);
    v25 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v24 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v25(v22, 1, v23))
    {
      v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
      memcpy(__dst, v22, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
      v15 = v157;
      v3 = v159;
      v27 = v154;
      v17 = a1;
    }
    else
    {
      v150 = (int *)v23;
      v28 = v22[1];
      *__dst = *v22;
      __dst[1] = v28;
      v29 = *((unsigned __int8 *)v22 + 32);
      swift_bridgeObjectRetain();
      v17 = a1;
      if (v29 == 255)
      {
        *((_OWORD *)__dst + 1) = *((_OWORD *)v22 + 1);
        *((_BYTE *)__dst + 32) = *((_BYTE *)v22 + 32);
      }
      else
      {
        v30 = v22[2];
        v31 = v22[3];
        sub_3D464(v30, v31, v29);
        __dst[2] = v30;
        __dst[3] = v31;
        *((_BYTE *)__dst + 32) = v29;
      }
      v15 = v157;
      *(_OWORD *)(__dst + 5) = *(_OWORD *)(v22 + 5);
      v32 = (id *)(v22 + 7);
      v33 = *((unsigned __int8 *)v22 + 64);
      if (v33 == 255)
      {
        __dst[7] = *v32;
        *((_BYTE *)__dst + 64) = *((_BYTE *)v22 + 64);
      }
      else
      {
        v34 = *v32;
        sub_3D47C(*v32, *((_BYTE *)v22 + 64));
        __dst[7] = v34;
        *((_BYTE *)__dst + 64) = v33;
      }
      v35 = (id *)(v22 + 9);
      v36 = *((unsigned __int8 *)v22 + 80);
      if (v36 == 255)
      {
        __dst[9] = *v35;
        *((_BYTE *)__dst + 80) = *((_BYTE *)v22 + 80);
      }
      else
      {
        v37 = *v35;
        sub_3D47C(*v35, *((_BYTE *)v22 + 80));
        __dst[9] = v37;
        *((_BYTE *)__dst + 80) = v36;
      }
      v38 = (id *)(v22 + 11);
      v39 = *((unsigned __int8 *)v22 + 96);
      if (v39 == 255)
      {
        __dst[11] = *v38;
        *((_BYTE *)__dst + 96) = *((_BYTE *)v22 + 96);
      }
      else
      {
        v40 = *v38;
        sub_3D47C(*v38, *((_BYTE *)v22 + 96));
        __dst[11] = v40;
        *((_BYTE *)__dst + 96) = v39;
      }
      v41 = (id *)(v22 + 13);
      v42 = *((unsigned __int8 *)v22 + 112);
      if (v42 == 255)
      {
        __dst[13] = *v41;
        *((_BYTE *)__dst + 112) = *((_BYTE *)v22 + 112);
      }
      else
      {
        v43 = *v41;
        sub_3D47C(*v41, *((_BYTE *)v22 + 112));
        __dst[13] = v43;
        *((_BYTE *)__dst + 112) = v42;
      }
      v44 = (id *)(v22 + 15);
      v45 = *((unsigned __int8 *)v22 + 128);
      if (v45 == 255)
      {
        __dst[15] = *v44;
        *((_BYTE *)__dst + 128) = *((_BYTE *)v22 + 128);
      }
      else
      {
        v46 = *v44;
        sub_3D47C(*v44, *((_BYTE *)v22 + 128));
        __dst[15] = v46;
        *((_BYTE *)__dst + 128) = v45;
      }
      v3 = v159;
      *((_BYTE *)__dst + 129) = *((_BYTE *)v22 + 129);
      v47 = v150[11];
      v48 = (char *)__dst + v47;
      v160 = (char *)v22 + v47;
      v49 = type metadata accessor for ArtworkCrop(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v49 - 8) + 16))(v48, v160, v49);
      v50 = v150[12];
      v51 = (_QWORD *)((char *)__dst + v50);
      v52 = (_QWORD *)((char *)v22 + v50);
      v53 = v52[1];
      *v51 = *v52;
      v51[1] = v53;
      *((_BYTE *)__dst + v150[13]) = *((_BYTE *)v22 + v150[13]);
      *((_BYTE *)__dst + v150[14]) = *((_BYTE *)v22 + v150[14]);
      *((_BYTE *)__dst + v150[15]) = *((_BYTE *)v22 + v150[15]);
      v54 = v150[16];
      v55 = (_QWORD *)((char *)__dst + v54);
      v56 = (_QWORD *)((char *)v22 + v54);
      v57 = v56[1];
      *v55 = *v56;
      v55[1] = v57;
      v58 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v24 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v58(__dst, 0, 1, v150);
      v27 = v154;
    }
    *(_QWORD *)((char *)v10 + *(int *)(v15 + 32)) = *(_QWORD *)((char *)v11 + *(int *)(v15 + 32));
    v59 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v27 + 56);
    swift_bridgeObjectRetain();
    v59(v10, 0, 1, v15);
  }
  v60 = v3[10];
  v61 = (_QWORD *)(v17 + v60);
  v62 = (_QWORD *)(a2 + v60);
  v63 = type metadata accessor for Header.PrimaryAction(0);
  v64 = *(_QWORD *)(v63 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v64 + 48))(v62, 1, v63))
  {
    v65 = __swift_instantiateConcreteTypeFromMangledName(&qword_3B3740);
    memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload(v62, v63) == 1)
    {
      v151 = v64;
      v158 = v15;
      v161 = v3;
      v66 = v62[1];
      *v61 = *v62;
      v61[1] = v66;
      v67 = v62[3];
      v61[2] = v62[2];
      v61[3] = v67;
      v68 = v62[5];
      v61[4] = v62[4];
      v61[5] = v68;
      v69 = *(int *)(v15 + 28);
      __dsta = (_QWORD *)((char *)v61 + v69);
      v70 = (_QWORD *)((char *)v62 + v69);
      v71 = (int *)type metadata accessor for ArtworkModel(0);
      v72 = *((_QWORD *)v71 - 1);
      v155 = *(unsigned int (**)(_QWORD *, uint64_t, int *))(v72 + 48);
      swift_bridgeObjectRetain();
      v73 = v70;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v155(v70, 1, v71))
      {
        v74 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
        memcpy(__dsta, v70, *(_QWORD *)(*(_QWORD *)(v74 - 8) + 64));
        v75 = v158;
        v64 = v151;
      }
      else
      {
        v156 = v72;
        v77 = v70[1];
        *__dsta = *v70;
        __dsta[1] = v77;
        v78 = *((unsigned __int8 *)v70 + 32);
        swift_bridgeObjectRetain();
        if (v78 == 255)
        {
          *((_OWORD *)__dsta + 1) = *((_OWORD *)v70 + 1);
          *((_BYTE *)__dsta + 32) = *((_BYTE *)v70 + 32);
        }
        else
        {
          v79 = v70[2];
          v80 = v70[3];
          sub_3D464(v79, v80, v78);
          __dsta[2] = v79;
          __dsta[3] = v80;
          v73 = v70;
          *((_BYTE *)__dsta + 32) = v78;
        }
        *(_OWORD *)(__dsta + 5) = *(_OWORD *)(v73 + 5);
        v81 = (id *)(v73 + 7);
        v82 = *((unsigned __int8 *)v73 + 64);
        if (v82 == 255)
        {
          __dsta[7] = *v81;
          *((_BYTE *)__dsta + 64) = *((_BYTE *)v73 + 64);
        }
        else
        {
          v83 = *v81;
          sub_3D47C(*v81, *((_BYTE *)v73 + 64));
          __dsta[7] = v83;
          *((_BYTE *)__dsta + 64) = v82;
        }
        v84 = (id *)(v73 + 9);
        v85 = *((unsigned __int8 *)v73 + 80);
        if (v85 == 255)
        {
          __dsta[9] = *v84;
          *((_BYTE *)__dsta + 80) = *((_BYTE *)v73 + 80);
        }
        else
        {
          v86 = *v84;
          sub_3D47C(*v84, *((_BYTE *)v73 + 80));
          __dsta[9] = v86;
          *((_BYTE *)__dsta + 80) = v85;
        }
        v87 = (id *)(v73 + 11);
        v88 = *((unsigned __int8 *)v73 + 96);
        if (v88 == 255)
        {
          __dsta[11] = *v87;
          *((_BYTE *)__dsta + 96) = *((_BYTE *)v73 + 96);
        }
        else
        {
          v89 = *v87;
          sub_3D47C(*v87, *((_BYTE *)v73 + 96));
          __dsta[11] = v89;
          *((_BYTE *)__dsta + 96) = v88;
        }
        v90 = (id *)(v73 + 13);
        v91 = *((unsigned __int8 *)v73 + 112);
        if (v91 == 255)
        {
          __dsta[13] = *v90;
          *((_BYTE *)__dsta + 112) = *((_BYTE *)v73 + 112);
        }
        else
        {
          v92 = *v90;
          sub_3D47C(*v90, *((_BYTE *)v73 + 112));
          __dsta[13] = v92;
          *((_BYTE *)__dsta + 112) = v91;
        }
        v93 = (id *)(v73 + 15);
        v94 = *((unsigned __int8 *)v73 + 128);
        if (v94 == 255)
        {
          __dsta[15] = *v93;
          *((_BYTE *)__dsta + 128) = *((_BYTE *)v73 + 128);
        }
        else
        {
          v95 = *v93;
          sub_3D47C(*v93, *((_BYTE *)v73 + 128));
          __dsta[15] = v95;
          *((_BYTE *)__dsta + 128) = v94;
        }
        v64 = v151;
        *((_BYTE *)__dsta + 129) = *((_BYTE *)v73 + 129);
        v96 = v71[11];
        v97 = (char *)__dsta + v96;
        v98 = v73;
        v99 = (char *)v73 + v96;
        v100 = type metadata accessor for ArtworkCrop(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v100 - 8) + 16))(v97, v99, v100);
        v101 = v71[12];
        v102 = (_QWORD *)((char *)__dsta + v101);
        v103 = (_QWORD *)((char *)v98 + v101);
        v104 = v103[1];
        *v102 = *v103;
        v102[1] = v104;
        *((_BYTE *)__dsta + v71[13]) = *((_BYTE *)v98 + v71[13]);
        *((_BYTE *)__dsta + v71[14]) = *((_BYTE *)v98 + v71[14]);
        *((_BYTE *)__dsta + v71[15]) = *((_BYTE *)v98 + v71[15]);
        v105 = v71[16];
        v106 = (_QWORD *)((char *)__dsta + v105);
        v107 = (_QWORD *)((char *)v98 + v105);
        v108 = v107[1];
        *v106 = *v107;
        v106[1] = v108;
        v109 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v156 + 56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v109(__dsta, 0, 1, v71);
        v75 = v158;
      }
      *(_QWORD *)((char *)v61 + *(int *)(v75 + 32)) = *(_QWORD *)((char *)v62 + *(int *)(v75 + 32));
      swift_bridgeObjectRetain();
      v76 = 1;
      v3 = v161;
      v17 = a1;
    }
    else
    {
      *v61 = *v62;
      swift_retain();
      v76 = 0;
    }
    swift_storeEnumTagMultiPayload(v61, v63, v76);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v64 + 56))(v61, 0, 1, v63);
  }
  v110 = v3[12];
  *(_QWORD *)(v17 + v3[11]) = *(_QWORD *)(a2 + v3[11]);
  v111 = (_QWORD *)(v17 + v110);
  v112 = (_QWORD *)(a2 + v110);
  v113 = (int *)type metadata accessor for ArtworkModel(0);
  v114 = *((_QWORD *)v113 - 1);
  v115 = *(unsigned int (**)(_QWORD *, uint64_t, int *))(v114 + 48);
  swift_bridgeObjectRetain();
  if (v115(v112, 1, v113))
  {
    v116 = __swift_instantiateConcreteTypeFromMangledName(&qword_3BEB70);
    memcpy(v111, v112, *(_QWORD *)(*(_QWORD *)(v116 - 8) + 64));
  }
  else
  {
    v117 = v112[1];
    *v111 = *v112;
    v111[1] = v117;
    v118 = *((unsigned __int8 *)v112 + 32);
    swift_bridgeObjectRetain();
    if (v118 == 255)
    {
      *((_OWORD *)v111 + 1) = *((_OWORD *)v112 + 1);
      *((_BYTE *)v111 + 32) = *((_BYTE *)v112 + 32);
    }
    else
    {
      v119 = v112[2];
      v120 = v112[3];
      sub_3D464(v119, v120, v118);
      v111[2] = v119;
      v111[3] = v120;
      *((_BYTE *)v111 + 32) = v118;
    }
    *(_OWORD *)(v111 + 5) = *(_OWORD *)(v112 + 5);
    v121 = (id *)(v112 + 7);
    v122 = *((unsigned __int8 *)v112 + 64);
    if (v122 == 255)
    {
      v111[7] = *v121;
      *((_BYTE *)v111 + 64) = *((_BYTE *)v112 + 64);
    }
    else
    {
      v123 = *v121;
      sub_3D47C(*v121, *((_BYTE *)v112 + 64));
      v111[7] = v123;
      *((_BYTE *)v111 + 64) = v122;
    }
    v124 = (id *)(v112 + 9);
    v125 = *((unsigned __int8 *)v112 + 80);
    if (v125 == 255)
    {
      v111[9] = *v124;
      *((_BYTE *)v111 + 80) = *((_BYTE *)v112 + 80);
    }
    else
    {
      v126 = *v124;
      sub_3D47C(*v124, *((_BYTE *)v112 + 80));
      v111[9] = v126;
      *((_BYTE *)v111 + 80) = v125;
    }
    v127 = (id *)(v112 + 11);
    v128 = *((unsigned __int8 *)v112 + 96);
    if (v128 == 255)
    {
      v111[11] = *v127;
      *((_BYTE *)v111 + 96) = *((_BYTE *)v112 + 96);
    }
    else
    {
      v129 = *v127;
      sub_3D47C(*v127, *((_BYTE *)v112 + 96));
      v111[11] = v129;
      *((_BYTE *)v111 + 96) = v128;
    }
    v130 = (id *)(v112 + 13);
    v131 = *((unsigned __int8 *)v112 + 112);
    if (v131 == 255)
    {
      v111[13] = *v130;
      *((_BYTE *)v111 + 112) = *((_BYTE *)v112 + 112);
    }
    else
    {
      v132 = *v130;
      sub_3D47C(*v130, *((_BYTE *)v112 + 112));
      v111[13] = v132;
      *((_BYTE *)v111 + 112) = v131;
    }
    v133 = (id *)(v112 + 15);
    v134 = *((unsigned __int8 *)v112 + 128);
    if (v134 == 255)
    {
      v111[15] = *v133;
      *((_BYTE *)v111 + 128) = *((_BYTE *)v112 + 128);
    }
    else
    {
      v135 = *v133;
      sub_3D47C(*v133, *((_BYTE *)v112 + 128));
      v111[15] = v135;
      *((_BYTE *)v111 + 128) = v134;
    }
    *((_BYTE *)v111 + 129) = *((_BYTE *)v112 + 129);
    v136 = v113[11];
    v137 = (char *)v111 + v136;
    v138 = (char *)v112 + v136;
    v139 = type metadata accessor for ArtworkCrop(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v139 - 8) + 16))(v137, v138, v139);
    v140 = v113[12];
    v141 = (_QWORD *)((char *)v111 + v140);
    v142 = (_QWORD *)((char *)v112 + v140);
    v143 = v142[1];
    *v141 = *v142;
    v141[1] = v143;
    *((_BYTE *)v111 + v113[13]) = *((_BYTE *)v112 + v113[13]);
    *((_BYTE *)v111 + v113[14]) = *((_BYTE *)v112 + v113[14]);
    *((_BYTE *)v111 + v113[15]) = *((_BYTE *)v112 + v113[15]);
    v144 = v113[16];
    v145 = (_QWORD *)((char *)v111 + v144);
    v146 = (_QWORD *)((char *)v112 + v144);
    v147 = v146[1];
    *v145 = *v146;
    v145[1] = v147;
    v148 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v114 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v148(v111, 0, 1, v113);
  }
  return v17;
}

